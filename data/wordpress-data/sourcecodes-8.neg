<?php/** * Main WordPress Formatting API. * * Handles many functions for formatting output. * * @package WordPress **//** * Replaces common plain text characters into formatted entities * * As an example, * <code> * 'cause today's effort makes it worth tomorrow's "holiday"... * </code> * Becomes: * <code> * &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221;&#8230; * </code> * Code within certain html blocks are skipped. * * @since 0.71 * @uses $wp_cockneyreplace Array of formatted entities for certain common phrases * * @param string $text The text to be formatted * @return string The string replaced with html entities */function wptexturize($text) {	global $wp_cockneyreplace;	static $static_setup = false, $opening_quote, $closing_quote, $default_no_texturize_tags, $default_no_texturize_shortcodes, $static_characters, $static_replacements, $dynamic_characters, $dynamic_replacements;	$output = '';	$curl = '';	$textarr = preg_split('/(<.*>|\[.*\])/Us', $text, -1, PREG_SPLIT_DELIM_CAPTURE);	$stop = count($textarr);	// No need to set up these variables more than once	if (!$static_setup) {		/* translators: opening curly quote */		$opening_quote = _x('&#8220;', 'opening curly quote');		/* translators: closing curly quote */		$closing_quote = _x('&#8221;', 'closing curly quote');		$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');		$default_no_texturize_shortcodes = array('code');		// if a plugin has provided an autocorrect array, use it		if ( isset($wp_cockneyreplace) ) {			$cockney = array_keys($wp_cockneyreplace);			$cockneyreplace = array_values($wp_cockneyreplace);		} else {			$cockney = array("'tain't","'twere","'twas","'tis","'twill","'til","'bout","'nuff","'round","'cause");			$cockneyreplace = array("&#8217;tain&#8217;t","&#8217;twere","&#8217;twas","&#8217;tis","&#8217;twill","&#8217;til","&#8217;bout","&#8217;nuff","&#8217;round","&#8217;cause");		}		$static_characters = array_merge(array('---', ' -- ', '--', ' - ', 'xn&#8211;', '...', '``', '\'\'', ' (tm)'), $cockney);		$static_replacements = array_merge(array('&#8212;', ' &#8212; ', '&#8211;', ' &#8211; ', 'xn--', '&#8230;', $opening_quote, $closing_quote, ' &#8482;'), $cockneyreplace);		$dynamic_characters = array('/\'(\d\d(?:&#8217;|\')?s)/', '/\'(\d+)/', '/(\s|\A|[([{<]|")\'/', '/(\d+)"/', '/(\d+)\'/', '/(\S)\'([^\'\s])/', '/(\s|\A|[([{<])"(?!\s)/', '/"(\s|\S|\Z)/', '/\'([\s.]|\Z)/', '/\b(\d+)x(\d+)\b/');		$dynamic_replacements = array('&#8217;$1','&#8217;$1', '$1&#8216;', '$1&#8243;', '$1&#8242;', '$1&#8217;$2', '$1' . $opening_quote . '$2', $closing_quote . '$1', '&#8217;$1', '$1&#215;$2');		$static_setup = true;	}	// Transform into regexp sub-expression used in _wptexturize_pushpop_element	// Must do this everytime in case plugins use these filters in a context sensitive manner	$no_texturize_tags = '(' . implode('|', apply_filters('no_texturize_tags', $default_no_texturize_tags) ) . ')';	$no_texturize_shortcodes = '(' . implode('|', apply_filters('no_texturize_shortcodes', $default_no_texturize_shortcodes) ) . ')';	$no_texturize_tags_stack = array();	$no_texturize_shortcodes_stack = array();	for ( $i = 0; $i < $stop; $i++ ) {		$curl = $textarr[$i];		if ( !empty($curl) && '<' != $curl{0} && '[' != $curl{0}				&& empty($no_texturize_shortcodes_stack) && empty($no_texturize_tags_stack)) {			// This is not a tag, nor is the texturization disabled			// static strings			$curl = str_replace($static_characters, $static_replacements, $curl);			// regular expressions			$curl = preg_replace($dynamic_characters, $dynamic_replacements, $curl);		} elseif (!empty($curl)) {			/*			 * Only call _wptexturize_pushpop_element if first char is correct			 * tag opening			 */			if ('<' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_tags_stack, $no_texturize_tags, '<', '>');			elseif ('[' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes, '[', ']');		}		$curl = preg_replace('/&([^#])(?![a-zA-Z1-4]{1,8};)/', '&#038;$1', $curl);		$output .= $curl;	}	return $output;}/** * Search for disabled element tags. Push element to stack on tag open and pop * on tag close. Assumes first character of $text is tag opening. * * @access private * @since 2.9.0 * * @param string $text Text to check. First character is assumed to be $opening * @param array $stack Array used as stack of opened tag elements * @param string $disabled_elements Tags to match against formatted as regexp sub-expression * @param string $opening Tag opening character, assumed to be 1 character long * @param string $opening Tag closing  character * @return object */function _wptexturize_pushpop_element($text, &$stack, $disabled_elements, $opening = '<', $closing = '>') {	// Check if it is a closing tag -- otherwise assume opening tag	if (strncmp($opening . '/', $text, 2)) {		// Opening? Check $text+1 against disabled elements		if (preg_match('/^' . $disabled_elements . '\b/', substr($text, 1), $matches)) {			/*			 * This disables texturize until we find a closing tag of our type			 * (e.g. <pre>) even if there was invalid nesting before that			 *			 * Example: in the case <pre>sadsadasd</code>"baba"</pre>			 *          "baba" won't be texturize			 */			array_push($stack, $matches[1]);		}	} else {		// Closing? Check $text+2 against disabled elements		$c = preg_quote($closing, '/');		if (preg_match('/^' . $disabled_elements . $c . '/', substr($text, 2), $matches)) {			$last = array_pop($stack);			// Make sure it matches the opening tag			if ($last != $matches[1])				array_push($stack, $last);		}	}}/** * Accepts matches array from preg_replace_callback in wpautop() or a string. * * Ensures that the contents of a <<pre>>...<</pre>> HTML block are not * converted into paragraphs or line-breaks. * * @since 1.2.0 * * @param array|string $matches The array or string * @return string The pre block without paragraph/line-break conversion. */function clean_pre($matches) {	if ( is_array($matches) )		$text = $matches[1] . $matches[2] . "</pre>";	else		$text = $matches;	$text = str_replace('<br />', '', $text);	$text = str_replace('<p>', "\n", $text);	$text = str_replace('</p>', '', $text);	return $text;}/** * Replaces double line-breaks with paragraph elements. * * A group of regex replaces used to identify text formatted with newlines and * replace double line-breaks with HTML paragraph tags. The remaining * line-breaks after conversion become <<br />> tags, unless $br is set to '0' * or 'false'. * * @since 0.71 * * @param string $pee The text which has to be formatted. * @param int|bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true. * @return string Text which has been converted into correct paragraph tags. */function wpautop($pee, $br = 1) {	if ( trim($pee) === '' )		return '';	$pee = $pee . "\n"; // just to make things a little easier, pad the end	$pee = preg_replace('|<br />\s*<br />|', "\n\n", $pee);	// Space things out a little	$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|option|form|map|area|blockquote|address|math|style|input|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';	$pee = preg_replace('!(<' . $allblocks . '[^>]*>)!', "\n$1", $pee);	$pee = preg_replace('!(</' . $allblocks . '>)!', "$1\n\n", $pee);	$pee = str_replace(array("\r\n", "\r"), "\n", $pee); // cross-platform newlines	if ( strpos($pee, '<object') !== false ) {		$pee = preg_replace('|\s*<param([^>]*)>\s*|', "<param$1>", $pee); // no pee inside object/embed		$pee = preg_replace('|\s*</embed>\s*|', '</embed>', $pee);	}	$pee = preg_replace("/\n\n+/", "\n\n", $pee); // take care of duplicates	// make paragraphs, including one at the end	$pees = preg_split('/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);	$pee = '';	foreach ( $pees as $tinkle )		$pee .= '<p>' . trim($tinkle, "\n") . "</p>\n";	$pee = preg_replace('|<p>\s*</p>|', '', $pee); // under certain strange conditions it could create a P of entirely whitespace	$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', "<p>$1</p></$2>", $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee); // don't pee all over a tag	$pee = preg_replace("|<p>(<li.+?)</p>|", "$1", $pee); // problem with nested lists	$pee = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $pee);	$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)!', "$1", $pee);	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);	if ($br) {		$pee = preg_replace_callback('/<(script|style).*?<\/\\1>/s', create_function('$matches', 'return str_replace("\n", "<WPPreserveNewline />", $matches[0]);'), $pee);		$pee = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $pee); // optionally make line breaks		$pee = str_replace('<WPPreserveNewline />', "\n", $pee);	}	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*<br />!', "$1", $pee);	$pee = preg_replace('!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);	if (strpos($pee, '<pre') !== false)		$pee = preg_replace_callback('!(<pre[^>]*>)(.*?)</pre>!is', 'clean_pre', $pee );	$pee = preg_replace( "|\n</p>$|", '</p>', $pee );	return $pee;}/** * Don't auto-p wrap shortcodes that stand alone * * Ensures that shortcodes are not wrapped in <<p>>...<</p>>. * * @since 2.9.0 * * @param string $pee The content. * @return string The filtered content. */function shortcode_unautop($pee) {	global $shortcode_tags;	if ( !empty($shortcode_tags) && is_array($shortcode_tags) ) {		$tagnames = array_keys($shortcode_tags);		$tagregexp = join( '|', array_map('preg_quote', $tagnames) );		$pee = preg_replace('/<p>\\s*?(\\[(' . $tagregexp . ')\\b.*?\\/?\\](?:.+?\\[\\/\\2\\])?)\\s*<\\/p>/s', '$1', $pee);	}	return $pee;}/** * Checks to see if a string is utf8 encoded. * * NOTE: This function checks for 5-Byte sequences, UTF8 *       has Bytes Sequences with a maximum length of 4. * * @author bmorel at ssi dot fr (modified) * @since 1.2.1 * * @param string $str The string to be checked * @return bool True if $str fits a UTF-8 model, false otherwise. */function seems_utf8($str) {	$length = strlen($str);	for ($i=0; $i < $length; $i++) {		$c = ord($str[$i]);		if ($c < 0x80) $n = 0; # 0bbbbbbb		elseif (($c & 0xE0) == 0xC0) $n=1; # 110bbbbb		elseif (($c & 0xF0) == 0xE0) $n=2; # 1110bbbb		elseif (($c & 0xF8) == 0xF0) $n=3; # 11110bbb		elseif (($c & 0xFC) == 0xF8) $n=4; # 111110bb		elseif (($c & 0xFE) == 0xFC) $n=5; # 1111110b		else return false; # Does not match any model		for ($j=0; $j<$n; $j++) { # n bytes matching 10bbbbbb follow ?			if ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))				return false;		}	}	return true;}/** * Converts a number of special characters into their HTML entities. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to encode " to * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded. * * @since 1.2.2 * * @param string $string The text which is to be encoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @param string $charset Optional. The character encoding of the string. Default is false. * @param boolean $double_encode Optional. Whether to encode existing html entities. Default is false. * @return string The encoded text with HTML entities. */function _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no specialchars - saves some processing	if ( !preg_match( '/[&<>"\']/', $string ) ) {		return $string;	}	// Account for the previous behaviour of the function when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()	if ( !$charset ) {		static $_charset;		if ( !isset( $_charset ) ) {			$alloptions = wp_load_alloptions();			$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';		}		$charset = $_charset;	}	if ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {		$charset = 'UTF-8';	}	$_quote_style = $quote_style;	if ( $quote_style === 'double' ) {		$quote_style = ENT_COMPAT;		$_quote_style = ENT_COMPAT;	} elseif ( $quote_style === 'single' ) {		$quote_style = ENT_NOQUOTES;	}	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = wp_specialchars_decode( $string, $_quote_style );		/* Critical */		// The previous line decodes &amp;phrase; into &phrase;  We must guarantee that &phrase; is valid before proceeding.		$string = wp_kses_normalize_entities($string);		// Now proceed with custom double-encoding silliness		$string = preg_replace( '/&(#?x?[0-9a-z]+);/i', '|wp_entity|$1|/wp_entity|', $string );	}	$string = @htmlspecialchars( $string, $quote_style, $charset );	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = str_replace( array( '|wp_entity|', '|/wp_entity|' ), array( '&', ';' ), $string );	}	// Backwards compatibility	if ( 'single' === $_quote_style ) {		$string = str_replace( "'", '&#039;', $string );	}	return $string;}/** * Converts a number of HTML entities into their special characters. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to decode " entities, * or ENT_QUOTES to do both " and '. Default is ENT_NOQUOTES where no quotes are decoded. * * @since 2.8 * * @param string $string The text which is to be decoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @return string The decoded text without HTML entities. */function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no entities - saves a lot of processing	if ( strpos( $string, '&' ) === false ) {		return $string;	}	// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// More complete than get_html_translation_table( HTML_SPECIALCHARS )	$single = array( '&#039;'  => '\'', '&#x27;' => '\'' );	$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );	$double = array( '&quot;' => '"', '&#034;'  => '"', '&#x22;' => '"' );	$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );	$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );	$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );	if ( $quote_style === ENT_QUOTES ) {		$translation = array_merge( $single, $double, $others );		$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );	} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {		$translation = array_merge( $double, $others );		$translation_preg = array_merge( $double_preg, $others_preg );	} elseif ( $quote_style === 'single' ) {		$translation = array_merge( $single, $others );		$translation_preg = array_merge( $single_preg, $others_preg );	} elseif ( $quote_style === ENT_NOQUOTES ) {		$translation = $others;		$translation_preg = $others_preg;	}	// Remove zero padding on numeric entities	$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );	// Replace characters according to translation table	return strtr( $string, $translation );}/** * Checks for invalid UTF8 in a string. * * @since 2.8 * * @param string $string The text which is to be checked. * @param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false. * @return string The checked text. */function wp_check_invalid_utf8( $string, $strip = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Store the site charset as a static to avoid multiple calls to get_option()	static $is_utf8;	if ( !isset( $is_utf8 ) ) {		$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );	}	if ( !$is_utf8 ) {		return $string;	}	// Check for support for utf8 in the installed PCRE library once and store the result in a static	static $utf8_pcre;	if ( !isset( $utf8_pcre ) ) {		$utf8_pcre = @preg_match( '/^./u', 'a' );	}	// We can't demand utf8 in the PCRE installation, so just return the string in those cases	if ( !$utf8_pcre ) {		return $string;	}	// preg_match fails when it encounters invalid UTF8 in $string	if ( 1 === @preg_match( '/^./us', $string ) ) {		return $string;	}	// Attempt to strip the bad chars if requested (not recommended)	if ( $strip && function_exists( 'iconv' ) ) {		return iconv( 'utf-8', 'utf-8', $string );	}	return '';}/** * Encode the Unicode values to be used in the URI. * * @since 1.5.0 * * @param string $utf8_string * @param int $length Max length of the string * @return string String with Unicode encoded for URI. */function utf8_uri_encode( $utf8_string, $length = 0 ) {	$unicode = '';	$values = array();	$num_octets = 1;	$unicode_length = 0;	$string_length = strlen( $utf8_string );	for ($i = 0; $i < $string_length; $i++ ) {		$value = ord( $utf8_string[ $i ] );		if ( $value < 128 ) {			if ( $length && ( $unicode_length >= $length ) )				break;			$unicode .= chr($value);			$unicode_length++;		} else {			if ( count( $values ) == 0 ) $num_octets = ( $value < 224 ) ? 2 : 3;			$values[] = $value;			if ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )				break;			if ( count( $values ) == $num_octets ) {				if ($num_octets == 3) {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]) . '%' . dechex($values[2]);					$unicode_length += 9;				} else {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]);					$unicode_length += 6;				}				$values = array();				$num_octets = 1;			}		}	}	return $unicode;}/** * Converts all accent characters to ASCII characters. * * If there are no accent characters, then the string given is just returned. * * @since 1.2.1 * * @param string $string Text that might have accent characters * @return string Filtered string with replaced "nice" characters. */function remove_accents($string) {	if ( !preg_match('/[\x80-\xff]/', $string) )		return $string;	if (seems_utf8($string)) {		$chars = array(		// Decompositions for Latin-1 Supplement		chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',		chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',		chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',		chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',		chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',		chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',		chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',		chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',		chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',		chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',		chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',		chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',		chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',		chr(195).chr(159) => 's', chr(195).chr(160) => 'a',		chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',		chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',		chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',		chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',		chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',		chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',		chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',		chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',		chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',		chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',		chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',		chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',		chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',		chr(195).chr(191) => 'y',		// Decompositions for Latin Extended-A		chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',		chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',		chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',		chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',		chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',		chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',		chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',		chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',		chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',		chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',		chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',		chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',		chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',		chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',		chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',		chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',		chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',		chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',		chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',		chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',		chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',		chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',		chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',		chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',		chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',		chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',		chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',		chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',		chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',		chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',		chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',		chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',		chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',		chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',		chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',		chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',		chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',		chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',		chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',		chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',		chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',		chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',		chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',		chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',		chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',		chr(197).chr(154) => 'S',chr(197).chr(155) => 's',		chr(197).chr(156) => 'S',chr(197).chr(157) => 's',		chr(197).chr(158) => 'S',chr(197).chr(159) => 's',		chr(197).chr(160) => 'S', chr(197).chr(161) => 's',		chr(197).chr(162) => 'T', chr(197).chr(163) => 't',		chr(197).chr(164) => 'T', chr(197).chr(165) => 't',		chr(197).chr(166) => 'T', chr(197).chr(167) => 't',		chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',		chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',		chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',		chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',		chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',		chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',		chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',		chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',		chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',		chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',		chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',		chr(197).chr(190) => 'z', chr(197).chr(191) => 's',		// Euro Sign		chr(226).chr(130).chr(172) => 'E',		// GBP (Pound) Sign		chr(194).chr(163) => '');		$string = strtr($string, $chars);	} else {		// Assume ISO-8859-1 if not UTF-8		$chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)			.chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)			.chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)			.chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)			.chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)			.chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)			.chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)			.chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)			.chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)			.chr(252).chr(253).chr(255);		$chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";		$string = strtr($string, $chars['in'], $chars['out']);		$double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));		$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');		$string = str_replace($double_chars['in'], $double_chars['out'], $string);	}	return $string;}/** * Sanitizes a filename replacing whitespace with dashes * * Removes special characters that are illegal in filenames on certain * operating systems and special characters requiring special escaping * to manipulate at the command line. Replaces spaces and consecutive * dashes with a single dash. Trim period, dash and underscore from beginning * and end of filename. * * @since 2.1.0 * * @param string $filename The filename to be sanitized * @return string The sanitized filename */function sanitize_file_name( $filename ) {	$filename_raw = $filename;	$special_chars = array("?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}", chr(0));	$special_chars = apply_filters('sanitize_file_name_chars', $special_chars, $filename_raw);	$filename = str_replace($special_chars, '', $filename);	$filename = preg_replace('/[\s-]+/', '-', $filename);	$filename = trim($filename, '.-_');	// Split the filename into a base and extension[s]	$parts = explode('.', $filename);	// Return if only one extension	if ( count($parts) <= 2 )		return apply_filters('sanitize_file_name', $filename, $filename_raw);	// Process multiple extensions	$filename = array_shift($parts);	$extension = array_pop($parts);	$mimes = get_allowed_mime_types();	// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character	// long alpha string not in the extension whitelist.	foreach ( (array) $parts as $part) {		$filename .= '.' . $part;		if ( preg_match("/^[a-zA-Z]{2,5}\d?$/", $part) ) {			$allowed = false;			foreach ( $mimes as $ext_preg => $mime_match ) {				$ext_preg = '!(^' . $ext_preg . ')$!i';				if ( preg_match( $ext_preg, $part ) ) {					$allowed = true;					break;				}			}			if ( !$allowed )				$filename .= '_';		}	}	$filename .= '.' . $extension;	return apply_filters('sanitize_file_name', $filename, $filename_raw);}/** * Sanitize username stripping out unsafe characters. * * If $strict is true, only alphanumeric characters (as well as _, space, ., -, * @) are returned. * Removes tags, octets, entities, and if strict is enabled, will remove all * non-ASCII characters. After sanitizing, it passes the username, raw username * (the username in the parameter), and the strict parameter as parameters for * the filter. * * @since 2.0.0 * @uses apply_filters() Calls 'sanitize_user' hook on username, raw username, *		and $strict parameter. * * @param string $username The username to be sanitized. * @param bool $strict If set limits $username to specific characters. Default false. * @return string The sanitized username, after passing through filters. */function sanitize_user( $username, $strict = false ) {	$raw_username = $username;	$username = wp_strip_all_tags( $username );	$username = remove_accents( $username );	// Kill octets	$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );	$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities	// If strict, reduce to ASCII for max portability.	if ( $strict )		$username = preg_replace( '|[^a-z0-9 _.\-@]|i', '', $username );	// Consolidate contiguous whitespace	$username = preg_replace( '|\s+|', ' ', $username );	return apply_filters( 'sanitize_user', $username, $raw_username, $strict );}/** * Sanitize a string key. * * Keys are used as internal identifiers. They should be lowercase ASCII.  Dashes and underscores are allowed. * * @since 3.0.0 * * @param string $key String key * @return string Sanitized key */function sanitize_key( $key ) {	$raw_key = $key;	$key = wp_strip_all_tags($key);	// Kill octets	$key = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $key);	$key = preg_replace('/&.+?;/', '', $key); // Kill entities	$key = preg_replace('|[^a-z0-9 _.\-@]|i', '', $key);	// Consolidate contiguous whitespace	$key = preg_replace('|\s+|', ' ', $key);	return apply_filters('sanitize_key', $key, $raw_key);}/** * Sanitizes title or use fallback title. * * Specifically, HTML and PHP tags are stripped. Further actions can be added * via the plugin API. If $title is empty and $fallback_title is set, the latter * will be used. * * @since 1.0.0 * * @param string $title The string to be sanitized. * @param string $fallback_title Optional. A title to use if $title is empty. * @return string The sanitized string. */function sanitize_title($title, $fallback_title = '') {	$raw_title = $title;	$title = strip_tags($title);	$title = apply_filters('sanitize_title', $title, $raw_title);	if ( '' === $title || false === $title )		$title = $fallback_title;	return $title;}/** * Sanitizes title, replacing whitespace with dashes. * * Limits the output to alphanumeric characters, underscore (_) and dash (-). * Whitespace becomes a dash. * * @since 1.2.0 * * @param string $title The title to be sanitized. * @return string The sanitized title. */function sanitize_title_with_dashes($title) {	$title = strip_tags($title);	// Preserve escaped octets.	$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);	// Remove percent signs that are not part of an octet.	$title = str_replace('%', '', $title);	// Restore octets.	$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);	$title = remove_accents($title);	if (seems_utf8($title)) {		if (function_exists('mb_strtolower')) {			$title = mb_strtolower($title, 'UTF-8');		}		$title = utf8_uri_encode($title, 200);	}	$title = strtolower($title);	$title = preg_replace('/&.+?;/', '', $title); // kill entities	$title = str_replace('.', '-', $title);	$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);	$title = preg_replace('/\s+/', '-', $title);	$title = preg_replace('|-+|', '-', $title);	$title = trim($title, '-');	return $title;}/** * Ensures a string is a valid SQL order by clause. * * Accepts one or more columns, with or without ASC/DESC, and also accepts * RAND(). * * @since 2.5.1 * * @param string $orderby Order by string to be checked. * @return string|false Returns the order by clause if it is a match, false otherwise. */function sanitize_sql_orderby( $orderby ){	preg_match('/^\s*([a-z0-9_]+(\s+(ASC|DESC))?(\s*,\s*|\s*$))+|^\s*RAND\(\s*\)\s*$/i', $orderby, $obmatches);	if ( !$obmatches )		return false;	return $orderby;}/** * Santizes a html classname to ensure it only contains valid characters * * Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty * string then it will return the alternative value supplied. * * @todo Expand to support the full range of CDATA that a class attribute can contain. * * @since 2.8.0 * * @param string $class The classname to be sanitized * @param string $fallback Optional. The value to return if the sanitization end's up as an empty string. * 	Defaults to an empty string. * @return string The sanitized value */function sanitize_html_class( $class, $fallback = '' ) {	//Strip out any % encoded octets	$sanitized = preg_replace('|%[a-fA-F0-9][a-fA-F0-9]|', '', $class);	//Limit to A-Z,a-z,0-9,'-'	$sanitized = preg_replace('/[^A-Za-z0-9-]/', '', $sanitized);	if ( '' == $sanitized )		$sanitized = $fallback;	return apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );}/** * Converts a number of characters from a string. * * Metadata tags <<title>> and <<category>> are removed, <<br>> and <<hr>> are * converted into correct XHTML and Unicode characters are converted to the * valid range. * * @since 0.71 * * @param string $content String of characters to be converted. * @param string $deprecated Not used. * @return string Converted string. */function convert_chars($content, $deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.71' );	// Translation of invalid Unicode references range to valid range	$wp_htmltranswinuni = array(	'&#128;' => '&#8364;', // the Euro sign	'&#129;' => '',	'&#130;' => '&#8218;', // these are Windows CP1252 specific characters	'&#131;' => '&#402;',  // they would look weird on non-Windows browsers	'&#132;' => '&#8222;',	'&#133;' => '&#8230;',	'&#134;' => '&#8224;',	'&#135;' => '&#8225;',	'&#136;' => '&#710;',	'&#137;' => '&#8240;',	'&#138;' => '&#352;',	'&#139;' => '&#8249;',	'&#140;' => '&#338;',	'&#141;' => '',	'&#142;' => '&#382;',	'&#143;' => '',	'&#144;' => '',	'&#145;' => '&#8216;',	'&#146;' => '&#8217;',	'&#147;' => '&#8220;',	'&#148;' => '&#8221;',	'&#149;' => '&#8226;',	'&#150;' => '&#8211;',	'&#151;' => '&#8212;',	'&#152;' => '&#732;',	'&#153;' => '&#8482;',	'&#154;' => '&#353;',	'&#155;' => '&#8250;',	'&#156;' => '&#339;',	'&#157;' => '',	'&#158;' => '',	'&#159;' => '&#376;'	);	// Remove metadata tags	$content = preg_replace('/<title>(.+?)<\/title>/','',$content);	$content = preg_replace('/<category>(.+?)<\/category>/','',$content);	// Converts lone & characters into &#38; (a.k.a. &amp;)	$content = preg_replace('/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content);	// Fix Word pasting	$content = strtr($content, $wp_htmltranswinuni);	// Just a little XHTML help	$content = str_replace('<br>', '<br />', $content);	$content = str_replace('<hr>', '<hr />', $content);	return $content;}/** * Will only balance the tags if forced to and the option is set to balance tags. * * The option 'use_balanceTags' is used for whether the tags will be balanced. * Both the $force parameter and 'use_balanceTags' option will have to be true * before the tags will be balanced. * * @since 0.71 * * @param string $text Text to be balanced * @param bool $force Forces balancing, ignoring the value of the option. Default false. * @return string Balanced text */function balanceTags( $text, $force = false ) {	if ( !$force && get_option('use_balanceTags') == 0 )		return $text;	return force_balance_tags( $text );}/** * Balances tags of string using a modified stack. * * @since 2.0.4 * * @author Leonard Lin <leonard@acm.org> * @license GPL v2.0 * @copyright November 4, 2001 * @version 1.1 * @todo Make better - change loop condition to $text in 1.2 * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004 *		1.1  Fixed handling of append/stack pop order of end text *			 Added Cleaning Hooks *		1.0  First Version * * @param string $text Text to be balanced. * @return string Balanced text. */function force_balance_tags( $text ) {	$tagstack = array();	$stacksize = 0;	$tagqueue = '';	$newtext = '';	$single_tags = array('br', 'hr', 'img', 'input'); // Known single-entity/self-closing tags	$nestable_tags = array('blockquote', 'div', 'span'); // Tags that can be immediately nested within themselves	// WP bug fix for comments - in case you REALLY meant to type '< !--'	$text = str_replace('< !--', '<    !--', $text);	// WP bug fix for LOVE <3 (and other situations with '<' before a number)	$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);	while ( preg_match("/<(\/?[\w:]*)\s*([^>]*)>/", $text, $regex) ) {		$newtext .= $tagqueue;		$i = strpos($text, $regex[0]);		$l = strlen($regex[0]);		// clear the shifter		$tagqueue = '';		// Pop or Push		if ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag			$tag = strtolower(substr($regex[1],1));			// if too many closing tags			if( $stacksize <= 0 ) {				$tag = '';				// or close to be safe $tag = '/' . $tag;			}			// if stacktop value = tag close value then pop			else if ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag				$tag = '</' . $tag . '>'; // Close Tag				// Pop				array_pop( $tagstack );				$stacksize--;			} else { // closing tag not at top, search for it				for ( $j = $stacksize-1; $j >= 0; $j-- ) {					if ( $tagstack[$j] == $tag ) {					// add tag to tagqueue						for ( $k = $stacksize-1; $k >= $j; $k--) {							$tagqueue .= '</' . array_pop( $tagstack ) . '>';							$stacksize--;						}						break;					}				}				$tag = '';			}		} else { // Begin Tag			$tag = strtolower($regex[1]);			// Tag Cleaning			// If self-closing or '', don't do anything.			if ( substr($regex[2],-1) == '/' || $tag == '' ) {				// do nothing			}			// ElseIf it's a known single-entity tag but it doesn't close itself, do so			elseif ( in_array($tag, $single_tags) ) {				$regex[2] .= '/';			} else {	// Push the tag onto the stack				// If the top of the stack is the same as the tag we want to push, close previous tag				if ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {					$tagqueue = '</' . array_pop ($tagstack) . '>';					$stacksize--;				}				$stacksize = array_push ($tagstack, $tag);			}			// Attributes			$attributes = $regex[2];			if( !empty($attributes) )				$attributes = ' '.$attributes;			$tag = '<' . $tag . $attributes . '>';			//If already queuing a close tag, then put this tag on, too			if ( !empty($tagqueue) ) {				$tagqueue .= $tag;				$tag = '';			}		}		$newtext .= substr($text, 0, $i) . $tag;		$text = substr($text, $i + $l);	}	// Clear Tag Queue	$newtext .= $tagqueue;	// Add Remaining text	$newtext .= $text;	// Empty Stack	while( $x = array_pop($tagstack) )		$newtext .= '</' . $x . '>'; // Add remaining tags to close	// WP fix for the bug with HTML comments	$newtext = str_replace("< !--","<!--",$newtext);	$newtext = str_replace("<    !--","< !--",$newtext);	return $newtext;}/** * Acts on text which is about to be edited. * * Unless $richedit is set, it is simply a holder for the 'format_to_edit' * filter. If $richedit is set true htmlspecialchars() will be run on the * content, converting special characters to HTMl entities. * * @since 0.71 * * @param string $content The text about to be edited. * @param bool $richedit Whether the $content should pass through htmlspecialchars(). Default false. * @return string The text after the filter (and possibly htmlspecialchars()) has been run. */function format_to_edit($content, $richedit = false) {	$content = apply_filters('format_to_edit', $content);	if (! $richedit )		$content = htmlspecialchars($content);	return $content;}/** * Holder for the 'format_to_post' filter. * * @since 0.71 * * @param string $content The text to pass through the filter. * @return string Text returned from the 'format_to_post' filter. */function format_to_post($content) {	$content = apply_filters('format_to_post', $content);	return $content;}/** * Add leading zeros when necessary. * * If you set the threshold to '4' and the number is '10', then you will get * back '0010'. If you set the number to '4' and the number is '5000', then you * will get back '5000'. * * Uses sprintf to append the amount of zeros based on the $threshold parameter * and the size of the number. If the number is large enough, then no zeros will * be appended. * * @since 0.71 * * @param mixed $number Number to append zeros to if not greater than threshold. * @param int $threshold Digit places number needs to be to not have zeros added. * @return string Adds leading zeros to number if needed. */function zeroise($number, $threshold) {	return sprintf('%0'.$threshold.'s', $number);}/** * Adds backslashes before letters and before a number at the start of a string. * * @since 0.71 * * @param string $string Value to which backslashes will be added. * @return string String with backslashes inserted. */function backslashit($string) {	$string = preg_replace('/^([0-9])/', '\\\\\\\\\1', $string);	$string = preg_replace('/([a-z])/i', '\\\\\1', $string);	return $string;}/** * Appends a trailing slash. * * Will remove trailing slash if it exists already before adding a trailing * slash. This prevents double slashing a string or path. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 1.2.0 * @uses untrailingslashit() Unslashes string if it was slashed already. * * @param string $string What to add the trailing slash to. * @return string String with trailing slash added. */function trailingslashit($string) {	return untrailingslashit($string) . '/';}/** * Removes trailing slash if it exists. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 2.2.0 * * @param string $string What to remove the trailing slash from. * @return string String without the trailing slash. */function untrailingslashit($string) {	return rtrim($string, '/');}/** * Adds slashes to escape strings. * * Slashes will first be removed if magic_quotes_gpc is set, see {@link * http://www.php.net/magic_quotes} for more details. * * @since 0.71 * * @param string $gpc The string returned from HTTP request data. * @return string Returns a string escaped with slashes. */function addslashes_gpc($gpc) {	if ( get_magic_quotes_gpc() )		$gpc = stripslashes($gpc);	return esc_sql($gpc);}/** * Navigates through an array and removes slashes from the values. * * If an array is passed, the array_map() function causes a callback to pass the * value back to the function. The slashes from this value will removed. * * @since 2.0.0 * * @param array|string $value The array or string to be striped. * @return array|string Stripped array (or string in the callback). */function stripslashes_deep($value) {	if ( is_array($value) ) {		$value = array_map('stripslashes_deep', $value);	} elseif ( is_object($value) ) {		$vars = get_object_vars( $value );		foreach ($vars as $key=>$data) {			$value->{$key} = stripslashes_deep( $data );		}	} else {		$value = stripslashes($value);	}	return $value;}/** * Navigates through an array and encodes the values to be used in a URL. * * Uses a callback to pass the value of the array back to the function as a * string. * * @since 2.2.0 * * @param array|string $value The array or string to be encoded. * @return array|string $value The encoded array (or string from the callback). */function urlencode_deep($value) {	$value = is_array($value) ? array_map('urlencode_deep', $value) : urlencode($value);	return $value;}/** * Converts email addresses characters to HTML entities to block spam bots. * * @since 0.71 * * @param string $emailaddy Email address. * @param int $mailto Optional. Range from 0 to 1. Used for encoding. * @return string Converted email address. */function antispambot($emailaddy, $mailto=0) {	$emailNOSPAMaddy = '';	srand ((float) microtime() * 1000000);	for ($i = 0; $i < strlen($emailaddy); $i = $i + 1) {		$j = floor(rand(0, 1+$mailto));		if ($j==0) {			$emailNOSPAMaddy .= '&#'.ord(substr($emailaddy,$i,1)).';';		} elseif ($j==1) {			$emailNOSPAMaddy .= substr($emailaddy,$i,1);		} elseif ($j==2) {			$emailNOSPAMaddy .= '%'.zeroise(dechex(ord(substr($emailaddy, $i, 1))), 2);		}	}	$emailNOSPAMaddy = str_replace('@','&#64;',$emailNOSPAMaddy);	return $emailNOSPAMaddy;}/** * Callback to convert URI match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URI address. */function _make_url_clickable_cb($matches) {	$url = $matches[2];	$url = esc_url($url);	if ( empty($url) )		return $matches[0];	return $matches[1] . "<a href=\"$url\" rel=\"nofollow\">$url</a>";}/** * Callback to convert URL match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URL address. */function _make_web_ftp_clickable_cb($matches) {	$ret = '';	$dest = $matches[2];	$dest = 'http://' . $dest;	$dest = esc_url($dest);	if ( empty($dest) )		return $matches[0];	// removed trailing [.,;:)] from URL	if ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {		$ret = substr($dest, -1);		$dest = substr($dest, 0, strlen($dest)-1);	}	return $matches[1] . "<a href=\"$dest\" rel=\"nofollow\">$dest</a>$ret";}/** * Callback to convert email address match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with email address. */function _make_email_clickable_cb($matches) {	$email = $matches[2] . '@' . $matches[3];	return $matches[1] . "<a href=\"mailto:$email\">$email</a>";}/** * Convert plaintext URI to HTML links. * * Converts URI, www and ftp, and email addresses. Finishes by fixing links * within links. * * @since 0.71 * * @param string $ret Content to convert URIs. * @return string Content with converted URIs. */function make_clickable($ret) {	$ret = ' ' . $ret;	// in testing, using arrays here was found to be faster	$ret = preg_replace_callback('#(?<=[\s>])(\()?([\w]+?://(?:[\w\\x80-\\xff\#$%&~/=?@\[\](+-]|[.,;:](?![\s<]|(\))?([\s]|$))|(?(1)\)(?![\s<.,;:]|$)|\)))+)#is', '_make_url_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])((www|ftp)\.[\w\\x80-\\xff\#$%&~/.\-;:=,?@\[\]+]+)#is', '_make_web_ftp_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret);	// this one is not in an array because we need it to run last, for cleanup of accidental links within links	$ret = preg_replace("#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i", "$1$3</a>", $ret);	$ret = trim($ret);	return $ret;}/** * Adds rel nofollow string to all HTML A elements in content. * * @since 1.5.0 * * @param string $text Content that may contain HTML A elements. * @return string Converted content. */function wp_rel_nofollow( $text ) {	// This is a pre save filter, so text is already escaped.	$text = stripslashes($text);	$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);	$text = esc_sql($text);	return $text;}/** * Callback to used to add rel=nofollow string to HTML A element. * * Will remove already existing rel="nofollow" and rel='nofollow' from the * string to prevent from invalidating (X)HTML. * * @since 2.3.0 * * @param array $matches Single Match * @return string HTML A Element with rel nofollow. */function wp_rel_nofollow_callback( $matches ) {	$text = $matches[1];	$text = str_replace(array(' rel="nofollow"', " rel='nofollow'"), '', $text);	return "<a $text rel=\"nofollow\">";}/** * Convert one smiley code to the icon graphic file equivalent. * * Looks up one smiley code in the $wpsmiliestrans global array and returns an * <img> string for that smiley. * * @global array $wpsmiliestrans * @since 2.8.0 * * @param string $smiley Smiley code to convert to image. * @return string Image string for smiley. */function translate_smiley($smiley) {	global $wpsmiliestrans;	if (count($smiley) == 0) {		return '';	}	$siteurl = get_option( 'siteurl' );	$smiley = trim(reset($smiley));	$img = $wpsmiliestrans[$smiley];	$smiley_masked = esc_attr($smiley);	$srcurl = apply_filters('smilies_src', "$siteurl/wp-includes/images/smilies/$img", $img, $siteurl);	return " <img src='$srcurl' alt='$smiley_masked' class='wp-smiley' /> ";}/** * Convert text equivalent of smilies to images. * * Will only convert smilies if the option 'use_smilies' is true and the global * used in the function isn't empty. * * @since 0.71 * @uses $wp_smiliessearch * * @param string $text Content to convert smilies from text. * @return string Converted content with text smilies replaced with images. */function convert_smilies($text) {	global $wp_smiliessearch;	$output = '';	if ( get_option('use_smilies') && !empty($wp_smiliessearch) ) {		// HTML loop taken from texturize function, could possible be consolidated		$textarr = preg_split("/(<.*>)/U", $text, -1, PREG_SPLIT_DELIM_CAPTURE); // capture the tags as well as in between		$stop = count($textarr);// loop stuff		for ($i = 0; $i < $stop; $i++) {			$content = $textarr[$i];			if ((strlen($content) > 0) && ('<' != $content{0})) { // If it's not a tag				$content = preg_replace_callback($wp_smiliessearch, 'translate_smiley', $content);			}			$output .= $content;		}	} else {		// return default text.		$output = $text;	}	return $output;}/** * Verifies that an email is valid. * * Does not grok i18n domains. Not RFC compliant. * * @since 0.71 * * @param string $email Email address to verify. * @param boolean $deprecated. Deprecated. * @return string|bool Either false or the valid email address. */function is_email( $email, $deprecated = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'is_email', false, $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'is_email', false, $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	if ( !preg_match( '/^[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]+$/', $local ) ) {		return apply_filters( 'is_email', false, $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	if ( preg_match( '/\.{2,}/', $domain ) ) {		return apply_filters( 'is_email', false, $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	if ( trim( $domain, " \t\n\r\0\x0B." ) !== $domain ) {		return apply_filters( 'is_email', false, $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'is_email', false, $email, 'domain_no_periods' );	}	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens and whitespace		if ( trim( $sub, " \t\n\r\0\x0B-" ) !== $sub ) {			return apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );		}		// Test for invalid characters		if ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {			return apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );		}	}	// Congratulations your email made it!	return apply_filters( 'is_email', $email, $email, null );}/** * Convert to ASCII from email subjects. * * @since 1.2.0 * @usedby wp_mail() handles charsets in email subjects * * @param string $string Subject line * @return string Converted string to ASCII */function wp_iso_descrambler($string) {	/* this may only work with iso-8859-1, I'm afraid */	if (!preg_match('#\=\?(.+)\?Q\?(.+)\?\=#i', $string, $matches)) {		return $string;	} else {		$subject = str_replace('_', ' ', $matches[2]);		$subject = preg_replace_callback('#\=([0-9a-f]{2})#i', create_function('$match', 'return chr(hexdec(strtolower($match[1])));'), $subject);		return $subject;	}}/** * Returns a date in the GMT equivalent. * * Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the * value of the 'gmt_offset' option. Return format can be overridden using the * $format parameter. If PHP5 is supported, the function uses the DateTime and * DateTimeZone objects to respect time zone differences in DST. * * @since 1.2.0 * * @uses get_option() to retrieve the the value of 'gmt_offset'. * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string GMT version of the date provided. */function get_gmt_from_date($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$tz = get_option('timezone_string');	if( class_exists('DateTime') && $tz ) {		//PHP5		date_default_timezone_set( $tz );		$datetime = new DateTime( $string );		$datetime->setTimezone( new DateTimeZone('UTC') );		$offset = $datetime->getOffset();		$datetime->modify( '+' . $offset / 3600 . ' hours');		$string_gmt = gmdate($format, $datetime->format('U'));		date_default_timezone_set('UTC');	}	else {		//PHP4		$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);		$string_gmt = gmdate($format, $string_time - get_option('gmt_offset') * 3600);	}	return $string_gmt;}/** * Converts a GMT date into the correct format for the blog. * * Requires and returns in the Y-m-d H:i:s format. Simply adds the value of * gmt_offset.Return format can be overridden using the $format parameter * * @since 1.2.0 * * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string Formatted date relative to the GMT offset. */function get_date_from_gmt($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);	$string_localtime = gmdate($format, $string_time + get_option('gmt_offset')*3600);	return $string_localtime;}/** * Computes an offset in seconds from an iso8601 timezone. * * @since 1.5.0 * * @param string $timezone Either 'Z' for 0 offset or 'hhmm'. * @return int|float The offset in seconds. */function iso8601_timezone_to_offset($timezone) {	// $timezone is either 'Z' or '[+|-]hhmm'	if ($timezone == 'Z') {		$offset = 0;	} else {		$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;		$hours   = intval(substr($timezone, 1, 2));		$minutes = intval(substr($timezone, 3, 4)) / 60;		$offset  = $sign * 3600 * ($hours + $minutes);	}	return $offset;}/** * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]. * * @since 1.5.0 * * @param string $date_string Date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}. * @param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'. * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s. */function iso8601_to_datetime($date_string, $timezone = 'user') {	$timezone = strtolower($timezone);	if ($timezone == 'gmt') {		preg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);		if (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset			$offset = iso8601_timezone_to_offset($date_bits[7]);		} else { // we don't have a timezone, so we assume user local timezone (not server's!)			$offset = 3600 * get_option('gmt_offset');		}		$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);		$timestamp -= $offset;		return gmdate('Y-m-d H:i:s', $timestamp);	} else if ($timezone == 'user') {		return preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);	}}/** * Adds a element attributes to open links in new windows. * * Comment text in popup windows should be filtered through this. Right now it's * a moderately dumb function, ideally it would detect whether a target or rel * attribute was already there and adjust its actions accordingly. * * @since 0.71 * * @param string $text Content to replace links to open in a new window. * @return string Content that has filtered links. */function popuplinks($text) {	$text = preg_replace('/<a (.+?)>/i', "<a $1 target='_blank' rel='external'>", $text);	return $text;}/** * Strips out all characters that are not allowable in an email. * * @since 1.5.0 * * @param string $email Email address to filter. * @return string Filtered email address. */function sanitize_email( $email ) {	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	$local = preg_replace( '/[^a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]/', '', $local );	if ( '' === $local ) {		return apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	$domain = preg_replace( '/\.{2,}/', '', $domain );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	$domain = trim( $domain, " \t\n\r\0\x0B." );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );	}	// Create an array that will contain valid subs	$new_subs = array();	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens		$sub = trim( $sub, " \t\n\r\0\x0B-" );		// Test for invalid characters		$sub = preg_replace( '/^[^a-z0-9-]+$/i', '', $sub );		// If there's anything left, add it to the valid subs		if ( '' !== $sub ) {			$new_subs[] = $sub;		}	}	// If there aren't 2 or more valid subs	if ( 2 > count( $new_subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );	}	// Join valid subs into the new domain	$domain = join( '.', $new_subs );	// Put the email back together	$email = $local . '@' . $domain;	// Congratulations your email made it!	return apply_filters( 'sanitize_email', $email, $email, null );}/** * Determines the difference between two timestamps. * * The difference is returned in a human readable format such as "1 hour", * "5 mins", "2 days". * * @since 1.5.0 * * @param int $from Unix timestamp from which the difference begins. * @param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set. * @return string Human readable time difference. */function human_time_diff( $from, $to = '' ) {	if ( empty($to) )		$to = time();	$diff = (int) abs($to - $from);	if ($diff <= 3600) {		$mins = round($diff / 60);		if ($mins <= 1) {			$mins = 1;		}		/* translators: min=minute */		$since = sprintf(_n('%s min', '%s mins', $mins), $mins);	} else if (($diff <= 86400) && ($diff > 3600)) {		$hours = round($diff / 3600);		if ($hours <= 1) {			$hours = 1;		}		$since = sprintf(_n('%s hour', '%s hours', $hours), $hours);	} elseif ($diff >= 86400) {		$days = round($diff / 86400);		if ($days <= 1) {			$days = 1;		}		$since = sprintf(_n('%s day', '%s days', $days), $days);	}	return $since;}/** * Generates an excerpt from the content, if needed. * * The excerpt word amount will be 55 words and if the amount is greater than * that, then the string ' [...]' will be appended to the excerpt. If the string * is less than 55 words, then the content will be returned as is. * * The 55 word limit can be modified by plugins/themes using the excerpt_length filter * The ' [...]' string can be modified by plugins/themes using the excerpt_more filter * * @since 1.5.0 * * @param string $text The excerpt. If set to empty an excerpt is generated. * @return string The excerpt. */function wp_trim_excerpt($text) {	$raw_excerpt = $text;	if ( '' == $text ) {		$text = get_the_content('');		$text = strip_shortcodes( $text );		$text = apply_filters('the_content', $text);		$text = str_replace(']]>', ']]&gt;', $text);		$text = strip_tags($text);		$excerpt_length = apply_filters('excerpt_length', 55);		$excerpt_more = apply_filters('excerpt_more', ' ' . '[...]');		$words = preg_split("/[\n\r\t ]+/", $text, $excerpt_length + 1, PREG_SPLIT_NO_EMPTY);		if ( count($words) > $excerpt_length ) {			array_pop($words);			$text = implode(' ', $words);			$text = $text . $excerpt_more;		} else {			$text = implode(' ', $words);		}	}	return apply_filters('wp_trim_excerpt', $text, $raw_excerpt);}/** * Converts named entities into numbered entities. * * @since 1.5.1 * * @param string $text The text within which entities will be converted. * @return string Text with converted entities. */function ent2ncr($text) {	$to_ncr = array(		'&quot;' => '&#34;',		'&amp;' => '&#38;',		'&frasl;' => '&#47;',		'&lt;' => '&#60;',		'&gt;' => '&#62;',		'|' => '&#124;',		'&nbsp;' => '&#160;',		'&iexcl;' => '&#161;',		'&cent;' => '&#162;',		'&pound;' => '&#163;',		'&curren;' => '&#164;',		'&yen;' => '&#165;',		'&brvbar;' => '&#166;',		'&brkbar;' => '&#166;',		'&sect;' => '&#167;',		'&uml;' => '&#168;',		'&die;' => '&#168;',		'&copy;' => '&#169;',		'&ordf;' => '&#170;',		'&laquo;' => '&#171;',		'&not;' => '&#172;',		'&shy;' => '&#173;',		'&reg;' => '&#174;',		'&macr;' => '&#175;',		'&hibar;' => '&#175;',		'&deg;' => '&#176;',		'&plusmn;' => '&#177;',		'&sup2;' => '&#178;',		'&sup3;' => '&#179;',		'&acute;' => '&#180;',		'&micro;' => '&#181;',		'&para;' => '&#182;',		'&middot;' => '&#183;',		'&cedil;' => '&#184;',		'&sup1;' => '&#185;',		'&ordm;' => '&#186;',		'&raquo;' => '&#187;',		'&frac14;' => '&#188;',		'&frac12;' => '&#189;',		'&frac34;' => '&#190;',		'&iquest;' => '&#191;',		'&Agrave;' => '&#192;',		'&Aacute;' => '&#193;',		'&Acirc;' => '&#194;',		'&Atilde;' => '&#195;',		'&Auml;' => '&#196;',		'&Aring;' => '&#197;',		'&AElig;' => '&#198;',		'&Ccedil;' => '&#199;',		'&Egrave;' => '&#200;',		'&Eacute;' => '&#201;',		'&Ecirc;' => '&#202;',		'&Euml;' => '&#203;',		'&Igrave;' => '&#204;',		'&Iacute;' => '&#205;',		'&Icirc;' => '&#206;',		'&Iuml;' => '&#207;',		'&ETH;' => '&#208;',		'&Ntilde;' => '&#209;',		'&Ograve;' => '&#210;',		'&Oacute;' => '&#211;',		'&Ocirc;' => '&#212;',		'&Otilde;' => '&#213;',		'&Ouml;' => '&#214;',		'&times;' => '&#215;',		'&Oslash;' => '&#216;',		'&Ugrave;' => '&#217;',		'&Uacute;' => '&#218;',		'&Ucirc;' => '&#219;',		'&Uuml;' => '&#220;',		'&Yacute;' => '&#221;',		'&THORN;' => '&#222;',		'&szlig;' => '&#223;',		'&agrave;' => '&#224;',		'&aacute;' => '&#225;',		'&acirc;' => '&#226;',		'&atilde;' => '&#227;',		'&auml;' => '&#228;',		'&aring;' => '&#229;',		'&aelig;' => '&#230;',		'&ccedil;' => '&#231;',		'&egrave;' => '&#232;',		'&eacute;' => '&#233;',		'&ecirc;' => '&#234;',		'&euml;' => '&#235;',		'&igrave;' => '&#236;',		'&iacute;' => '&#237;',		'&icirc;' => '&#238;',		'&iuml;' => '&#239;',		'&eth;' => '&#240;',		'&ntilde;' => '&#241;',		'&ograve;' => '&#242;',		'&oacute;' => '&#243;',		'&ocirc;' => '&#244;',		'&otilde;' => '&#245;',		'&ouml;' => '&#246;',		'&divide;' => '&#247;',		'&oslash;' => '&#248;',		'&ugrave;' => '&#249;',		'&uacute;' => '&#250;',		'&ucirc;' => '&#251;',		'&uuml;' => '&#252;',		'&yacute;' => '&#253;',		'&thorn;' => '&#254;',		'&yuml;' => '&#255;',		'&OElig;' => '&#338;',		'&oelig;' => '&#339;',		'&Scaron;' => '&#352;',		'&scaron;' => '&#353;',		'&Yuml;' => '&#376;',		'&fnof;' => '&#402;',		'&circ;' => '&#710;',		'&tilde;' => '&#732;',		'&Alpha;' => '&#913;',		'&Beta;' => '&#914;',		'&Gamma;' => '&#915;',		'&Delta;' => '&#916;',		'&Epsilon;' => '&#917;',		'&Zeta;' => '&#918;',		'&Eta;' => '&#919;',		'&Theta;' => '&#920;',		'&Iota;' => '&#921;',		'&Kappa;' => '&#922;',		'&Lambda;' => '&#923;',		'&Mu;' => '&#924;',		'&Nu;' => '&#925;',		'&Xi;' => '&#926;',		'&Omicron;' => '&#927;',		'&Pi;' => '&#928;',		'&Rho;' => '&#929;',		'&Sigma;' => '&#931;',		'&Tau;' => '&#932;',		'&Upsilon;' => '&#933;',		'&Phi;' => '&#934;',		'&Chi;' => '&#935;',		'&Psi;' => '&#936;',		'&Omega;' => '&#937;',		'&alpha;' => '&#945;',		'&beta;' => '&#946;',		'&gamma;' => '&#947;',		'&delta;' => '&#948;',		'&epsilon;' => '&#949;',		'&zeta;' => '&#950;',		'&eta;' => '&#951;',		'&theta;' => '&#952;',		'&iota;' => '&#953;',		'&kappa;' => '&#954;',		'&lambda;' => '&#955;',		'&mu;' => '&#956;',		'&nu;' => '&#957;',		'&xi;' => '&#958;',		'&omicron;' => '&#959;',		'&pi;' => '&#960;',		'&rho;' => '&#961;',		'&sigmaf;' => '&#962;',		'&sigma;' => '&#963;',		'&tau;' => '&#964;',		'&upsilon;' => '&#965;',		'&phi;' => '&#966;',		'&chi;' => '&#967;',		'&psi;' => '&#968;',		'&omega;' => '&#969;',		'&thetasym;' => '&#977;',		'&upsih;' => '&#978;',		'&piv;' => '&#982;',		'&ensp;' => '&#8194;',		'&emsp;' => '&#8195;',		'&thinsp;' => '&#8201;',		'&zwnj;' => '&#8204;',		'&zwj;' => '&#8205;',		'&lrm;' => '&#8206;',		'&rlm;' => '&#8207;',		'&ndash;' => '&#8211;',		'&mdash;' => '&#8212;',		'&lsquo;' => '&#8216;',		'&rsquo;' => '&#8217;',		'&sbquo;' => '&#8218;',		'&ldquo;' => '&#8220;',		'&rdquo;' => '&#8221;',		'&bdquo;' => '&#8222;',		'&dagger;' => '&#8224;',		'&Dagger;' => '&#8225;',		'&bull;' => '&#8226;',		'&hellip;' => '&#8230;',		'&permil;' => '&#8240;',		'&prime;' => '&#8242;',		'&Prime;' => '&#8243;',		'&lsaquo;' => '&#8249;',		'&rsaquo;' => '&#8250;',		'&oline;' => '&#8254;',		'&frasl;' => '&#8260;',		'&euro;' => '&#8364;',		'&image;' => '&#8465;',		'&weierp;' => '&#8472;',		'&real;' => '&#8476;',		'&trade;' => '&#8482;',		'&alefsym;' => '&#8501;',		'&crarr;' => '&#8629;',		'&lArr;' => '&#8656;',		'&uArr;' => '&#8657;',		'&rArr;' => '&#8658;',		'&dArr;' => '&#8659;',		'&hArr;' => '&#8660;',		'&forall;' => '&#8704;',		'&part;' => '&#8706;',		'&exist;' => '&#8707;',		'&empty;' => '&#8709;',		'&nabla;' => '&#8711;',		'&isin;' => '&#8712;',		'&notin;' => '&#8713;',		'&ni;' => '&#8715;',		'&prod;' => '&#8719;',		'&sum;' => '&#8721;',		'&minus;' => '&#8722;',		'&lowast;' => '&#8727;',		'&radic;' => '&#8730;',		'&prop;' => '&#8733;',		'&infin;' => '&#8734;',		'&ang;' => '&#8736;',		'&and;' => '&#8743;',		'&or;' => '&#8744;',		'&cap;' => '&#8745;',		'&cup;' => '&#8746;',		'&int;' => '&#8747;',		'&there4;' => '&#8756;',		'&sim;' => '&#8764;',		'&cong;' => '&#8773;',		'&asymp;' => '&#8776;',		'&ne;' => '&#8800;',		'&equiv;' => '&#8801;',		'&le;' => '&#8804;',		'&ge;' => '&#8805;',		'&sub;' => '&#8834;',		'&sup;' => '&#8835;',		'&nsub;' => '&#8836;',		'&sube;' => '&#8838;',		'&supe;' => '&#8839;',		'&oplus;' => '&#8853;',		'&otimes;' => '&#8855;',		'&perp;' => '&#8869;',		'&sdot;' => '&#8901;',		'&lceil;' => '&#8968;',		'&rceil;' => '&#8969;',		'&lfloor;' => '&#8970;',		'&rfloor;' => '&#8971;',		'&lang;' => '&#9001;',		'&rang;' => '&#9002;',		'&larr;' => '&#8592;',		'&uarr;' => '&#8593;',		'&rarr;' => '&#8594;',		'&darr;' => '&#8595;',		'&harr;' => '&#8596;',		'&loz;' => '&#9674;',		'&spades;' => '&#9824;',		'&clubs;' => '&#9827;',		'&hearts;' => '&#9829;',		'&diams;' => '&#9830;'	);	return str_replace( array_keys($to_ncr), array_values($to_ncr), $text );}/** * Formats text for the rich text editor. * * The filter 'richedit_pre' is applied here. If $text is empty the filter will * be applied to an empty string. * * @since 2.0.0 * * @param string $text The text to be formatted. * @return string The formatted text after filter is applied. */function wp_richedit_pre($text) {	// Filtering a blank results in an annoying <br />\n	if ( empty($text) ) return apply_filters('richedit_pre', '');	$output = convert_chars($text);	$output = wpautop($output);	$output = htmlspecialchars($output, ENT_NOQUOTES);	return apply_filters('richedit_pre', $output);}/** * Formats text for the HTML editor. * * Unless $output is empty it will pass through htmlspecialchars before the * 'htmledit_pre' filter is applied. * * @since 2.5.0 * * @param string $output The text to be formatted. * @return string Formatted text after filter applied. */function wp_htmledit_pre($output) {	if ( !empty($output) )		$output = htmlspecialchars($output, ENT_NOQUOTES); // convert only < > &	return apply_filters('htmledit_pre', $output);}/** * Perform a deep string replace operation to ensure the values in $search are no longer present * * Repeats the replacement operation until it no longer replaces anything so as to remove "nested" values * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that * str_replace would return * * @since 2.8.1 * @access private * * @param string|array $search * @param string $subject * @return string The processed string */function _deep_replace( $search, $subject ) {	$found = true;	$subject = (string) $subject;	while ( $found ) {		$found = false;		foreach ( (array) $search as $val ) {			while ( strpos( $subject, $val ) !== false ) {				$found = true;				$subject = str_replace( $val, '', $subject );			}		}	}	return $subject;}/** * Escapes data for use in a MySQL query * * This is just a handy shortcut for $wpdb->escape(), for completeness' sake * * @since 2.8.0 * @param string $sql Unescaped SQL data * @return string The cleaned $sql */function esc_sql( $sql ) {	global $wpdb;	return $wpdb->escape( $sql );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 2.8.0 * @uses wp_kses_bad_protocol() To only permit protocols in the URL set *		via $protocols or the common ones set in the function. * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. *		Defaults to 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet' if not set. * @param string $_context Private. Use esc_url_raw() for database usage. * @return string The cleaned $url after the 'clean_url' filter is applied. */function esc_url( $url, $protocols = null, $_context = 'display' ) {	$original_url = $url;	if ( '' == $url )		return $url;	$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);	$strip = array('%0d', '%0a', '%0D', '%0A');	$url = _deep_replace($strip, $url);	$url = str_replace(';//', '://', $url);	/* If the URL doesn't appear to contain a scheme, we	 * presume it needs http:// appended (unless a relative	 * link starting with / or a php file).	 */	if ( strpos($url, ':') === false &&		substr( $url, 0, 1 ) != '/' && substr( $url, 0, 1 ) != '#' && !preg_match('/^[a-z0-9-]+?\.php/i', $url) )		$url = 'http://' . $url;	// Replace ampersands and single quotes only when displaying.	if ( 'display' == $_context ) {		$url = preg_replace('/&([^#])(?![a-z]{2,8};)/', '&#038;$1', $url);		$url = str_replace( "'", '&#039;', $url );	}	if ( !is_array($protocols) )		$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');	if ( wp_kses_bad_protocol( $url, $protocols ) != $url )		return '';	return apply_filters('clean_url', $url, $original_url, $_context);}/** * Performs esc_url() for database usage. * * @since 2.8.0 * @uses esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function esc_url_raw( $url, $protocols = null ) {	return esc_url( $url, $protocols, 'db' );}/** * Convert entities, while preserving already-encoded entities. * * @link http://www.php.net/htmlentities Borrowed from the PHP Manual user notes. * * @since 1.2.2 * * @param string $myHTML The text to be converted. * @return string Converted text. */function htmlentities2($myHTML) {	$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );	$translation_table[chr(38)] = '&';	return preg_replace( "/&(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/", "&amp;", strtr($myHTML, $translation_table) );}/** * Escape single quotes, htmlspecialchar " < > &, and fix line endings. * * Escapes text strings for echoing in JS. It is intended to be used for inline JS * (in a tag attribute, for example onclick="..."). Note that the strings have to * be in single quotes. The filter 'js_escape' is also applied here. * * @since 2.8.0 * * @param string $text The text to be escaped. * @return string Escaped text. */function esc_js( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );	$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", stripslashes( $safe_text ) );	$safe_text = str_replace( "\r", '', $safe_text );	$safe_text = str_replace( "\n", '\\n', addslashes( $safe_text ) );	return apply_filters( 'js_escape', $safe_text, $text );}/** * Escaping for HTML blocks. * * @since 2.8.0 * * @param string $text * @return string */function esc_html( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'esc_html', $safe_text, $text );}/** * Escaping for HTML attributes. * * @since 2.8.0 * * @param string $text * @return string */function esc_attr( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'attribute_escape', $safe_text, $text );}/** * Escape a HTML tag name. * * @since 2.5.0 * * @param string $tag_name * @return string */function tag_escape($tag_name) {	$safe_tag = strtolower( preg_replace('/[^a-zA-Z_:]/', '', $tag_name) );	return apply_filters('tag_escape', $safe_tag, $tag_name);}/** * Escapes text for SQL LIKE special characters % and _. * * @since 2.5.0 * * @param string $text The text to be escaped. * @return string text, safe for inclusion in LIKE query. */function like_escape($text) {	return str_replace(array("%", "_"), array("\\%", "\\_"), $text);}/** * Convert full URL paths to absolute paths. * * Removes the http or https protocols and the domain. Keeps the path '/' at the * beginning, so it isn't a true relative link, but from the web root base. * * @since 2.1.0 * * @param string $link Full URL path. * @return string Absolute path. */function wp_make_link_relative( $link ) {	return preg_replace( '|https?://[^/]+(/.*)|i', '$1', $link );}/** * Sanitises various option values based on the nature of the option. * * This is basically a switch statement which will pass $value through a number * of functions depending on the $option. * * @since 2.0.5 * * @param string $option The name of the option. * @param string $value The unsanitised value. * @return string Sanitized value. */function sanitize_option($option, $value) {	switch ( $option ) {		case 'admin_email':			$value = sanitize_email($value);			if ( !is_email($value) ) {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('admin_email', 'invalid_admin_email', __('The email address entered did not appear to be a valid email address. Please enter a valid email address.'));			}			break;		case 'thumbnail_size_w':		case 'thumbnail_size_h':		case 'medium_size_w':		case 'medium_size_h':		case 'large_size_w':		case 'large_size_h':		case 'embed_size_h':		case 'default_post_edit_rows':		case 'mailserver_port':		case 'comment_max_links':		case 'page_on_front':		case 'page_for_posts':		case 'rss_excerpt_length':		case 'default_category':		case 'default_email_category':		case 'default_link_category':		case 'close_comments_days_old':		case 'comments_per_page':		case 'thread_comments_depth':		case 'users_can_register':		case 'start_of_week':			$value = absint( $value );			break;		case 'embed_size_w':			if ( '' !== $value )				$value = absint( $value );			break;		case 'posts_per_page':		case 'posts_per_rss':			$value = (int) $value;			if ( empty($value) )				$value = 1;			if ( $value < -1 )				$value = abs($value);			break;		case 'default_ping_status':		case 'default_comment_status':			// Options that if not there have 0 value but need to be something like "closed"			if ( $value == '0' || $value == '')				$value = 'closed';			break;		case 'blogdescription':		case 'blogname':			$value = addslashes($value);			$value = wp_filter_post_kses( $value ); // calls stripslashes then addslashes			$value = stripslashes($value);			$value = esc_html( $value );			break;		case 'blog_charset':			$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes			break;		case 'date_format':		case 'time_format':		case 'mailserver_url':		case 'mailserver_login':		case 'mailserver_pass':		case 'ping_sites':		case 'upload_path':			$value = strip_tags($value);			$value = addslashes($value);			$value = wp_filter_kses($value); // calls stripslashes then addslashes			$value = stripslashes($value);			break;		case 'gmt_offset':			$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes			break;		case 'siteurl':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('siteurl', 'invalid_siteurl', __('The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		case 'home':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('home', 'invalid_home', __('The Site address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		default :			$value = apply_filters("sanitize_option_{$option}", $value, $option);			break;	}	return $value;}/** * Parses a string into variables to be stored in an array. * * Uses {@link http://www.php.net/parse_str parse_str()} and stripslashes if * {@link http://www.php.net/magic_quotes magic_quotes_gpc} is on. * * @since 2.2.1 * @uses apply_filters() for the 'wp_parse_str' filter. * * @param string $string The string to be parsed. * @param array $array Variables will be stored in this array. */function wp_parse_str( $string, &$array ) {	parse_str( $string, $array );	if ( get_magic_quotes_gpc() )		$array = stripslashes_deep( $array );	$array = apply_filters( 'wp_parse_str', $array );}/** * Convert lone less than signs. * * KSES already converts lone greater than signs. * * @uses wp_pre_kses_less_than_callback in the callback function. * @since 2.3.0 * * @param string $text Text to be converted. * @return string Converted text. */function wp_pre_kses_less_than( $text ) {	return preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);}/** * Callback function used by preg_replace. * * @uses esc_html to format the $matches text. * @since 2.3.0 * * @param array $matches Populated by matches to preg_replace. * @return string The text returned after esc_html if needed. */function wp_pre_kses_less_than_callback( $matches ) {	if ( false === strpos($matches[0], '>') )		return esc_html($matches[0]);	return $matches[0];}/** * WordPress implementation of PHP sprintf() with filters. * * @since 2.5.0 * @link http://www.php.net/sprintf * * @param string $pattern The string which formatted args are inserted. * @param mixed $args,... Arguments to be formatted into the $pattern string. * @return string The formatted string. */function wp_sprintf( $pattern ) {	$args = func_get_args( );	$len = strlen($pattern);	$start = 0;	$result = '';	$arg_index = 0;	while ( $len > $start ) {		// Last character: append and break		if ( strlen($pattern) - 1 == $start ) {			$result .= substr($pattern, -1);			break;		}		// Literal %: append and continue		if ( substr($pattern, $start, 2) == '%%' ) {			$start += 2;			$result .= '%';			continue;		}		// Get fragment before next %		$end = strpos($pattern, '%', $start + 1);		if ( false === $end )			$end = $len;		$fragment = substr($pattern, $start, $end - $start);		// Fragment has a specifier		if ( $pattern{$start} == '%' ) {			// Find numbered arguments or take the next one in order			if ( preg_match('/^%(\d+)\$/', $fragment, $matches) ) {				$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';				$fragment = str_replace("%{$matches[1]}$", '%', $fragment);			} else {				++$arg_index;				$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';			}			// Apply filters OR sprintf			$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );			if ( $_fragment != $fragment )				$fragment = $_fragment;			else				$fragment = sprintf($fragment, strval($arg) );		}		// Append to result and move to next fragment		$result .= $fragment;		$start = $end;	}	return $result;}/** * Localize list items before the rest of the content. * * The '%l' must be at the first characters can then contain the rest of the * content. The list items will have ', ', ', and', and ' and ' added depending * on the amount of list items in the $args parameter. * * @since 2.5.0 * * @param string $pattern Content containing '%l' at the beginning. * @param array $args List items to prepend to the content and replace '%l'. * @return string Localized list items and rest of the content. */function wp_sprintf_l($pattern, $args) {	// Not a match	if ( substr($pattern, 0, 2) != '%l' )		return $pattern;	// Nothing to work with	if ( empty($args) )		return '';	// Translate and filter the delimiter set (avoid ampersands and entities here)	$l = apply_filters('wp_sprintf_l', array(		/* translators: used between list items, there is a space after the coma */		'between'          => __(', '),		/* translators: used between list items, there is a space after the and */		'between_last_two' => __(', and '),		/* translators: used between only two list items, there is a space after the and */		'between_only_two' => __(' and '),		));	$args = (array) $args;	$result = array_shift($args);	if ( count($args) == 1 )		$result .= $l['between_only_two'] . array_shift($args);	// Loop when more than two args	$i = count($args);	while ( $i ) {		$arg = array_shift($args);		$i--;		if ( 0 == $i )			$result .= $l['between_last_two'] . $arg;		else			$result .= $l['between'] . $arg;	}	return $result . substr($pattern, 2);}/** * Safely extracts not more than the first $count characters from html string. * * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT* * be counted as one character. For example &amp; will be counted as 4, &lt; as * 3, etc. * * @since 2.5.0 * * @param integer $str String to get the excerpt from. * @param integer $count Maximum number of characters to take. * @return string The excerpt. */function wp_html_excerpt( $str, $count ) {	$str = wp_strip_all_tags( $str, true );	$str = mb_substr( $str, 0, $count );	// remove part of an entity at the end	$str = preg_replace( '/&[^;\s]{0,6}$/', '', $str );	return $str;}/** * Add a Base url to relative links in passed content. * * By default it supports the 'src' and 'href' attributes. However this can be * changed via the 3rd param. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $base The base URL to prefix to links. * @param array $attrs The attributes which should be processed. * @return string The processed content. */function links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {	$attrs = implode('|', (array)$attrs);	return preg_replace_callback("!($attrs)=(['\"])(.+?)\\2!i",			create_function('$m', 'return _links_add_base($m, "' . $base . '");'),			$content);}/** * Callback to add a base url to relative links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $base The base URL to prefix to links. * @return string The processed link. */function _links_add_base($m, $base) {	//1 = attribute name  2 = quotation mark  3 = URL	return $m[1] . '=' . $m[2] .		(strpos($m[3], 'http://') === false ?			path_join($base, $m[3]) :			$m[3])		. $m[2];}/** * Adds a Target attribute to all links in passed content. * * This function by default only applies to <a> tags, however this can be * modified by the 3rd param. * * <b>NOTE:</b> Any current target attributed will be striped and replaced. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $target The Target to add to the links. * @param array $tags An array of tags to apply to. * @return string The processed content. */function links_add_target( $content, $target = '_blank', $tags = array('a') ) {	$tags = implode('|', (array)$tags);	return preg_replace_callback("!<($tags)(.+?)>!i",			create_function('$m', 'return _links_add_target($m, "' . $target . '");'),			$content);}/** * Callback to add a target attribute to all links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $target The Target to add to the links. * @return string The processed link. */function _links_add_target( $m, $target ) {	$tag = $m[1];	$link = preg_replace('|(target=[\'"](.*?)[\'"])|i', '', $m[2]);	return '<' . $tag . $link . ' target="' . $target . '">';}// normalize EOL characters and strip duplicate whitespacefunction normalize_whitespace( $str ) {	$str  = trim($str);	$str  = str_replace("\r", "\n", $str);	$str  = preg_replace( array( '/\n+/', '/[ \t]+/' ), array( "\n", ' ' ), $str );	return $str;}/** * Properly strip all HTML tags including script and style * * @since 2.9.0 * * @param string $string String containing HTML tags * @param bool $remove_breaks optional Whether to remove left over line breaks and white space chars * @return string The processed string. */function wp_strip_all_tags($string, $remove_breaks = false) {	$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\1>@si', '', $string );	$string = strip_tags($string);	if ( $remove_breaks )		$string = preg_replace('/[\r\n\t ]+/', ' ', $string);	return trim($string);}/** * Sanitize a string from user input or from the db * * check for invalid UTF-8, * Convert single < characters to entity, * strip all tags, * remove line breaks, tabs and extra white space, * strip octets. * * @since 2.9.0 * * @param string $str * @return string */function sanitize_text_field($str) {	$filtered = wp_check_invalid_utf8( $str );	if ( strpos($filtered, '<') !== false ) {		$filtered = wp_pre_kses_less_than( $filtered );		// This will strip extra whitespace for us.		$filtered = wp_strip_all_tags( $filtered, true );	} else {		$filtered = trim( preg_replace('/[\r\n\t ]+/', ' ', $filtered) );	}	$match = array();	$found = false;	while ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {		$filtered = str_replace($match[0], '', $filtered);		$found = true;	}	if ( $found ) {		// Strip out the whitespace that may now exist after removing the octets.		$filtered = trim( preg_replace('/ +/', ' ', $filtered) );	}	return apply_filters('sanitize_text_field', $filtered, $str);}/** * Forever eliminate "Wordpress" from the planet (or at least the little bit we can influence). * * Violating our coding standards for a good function name. * * @since 3.0.0 */function capital_P_dangit( $text ) {       return str_replace( 'Wordpress', 'WordPress', $text );}?>
<?php/** * Themes administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('switch_themes') && !current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );if ( current_user_can('switch_themes') && isset($_GET['action']) ) {	if ( 'activate' == $_GET['action'] ) {		check_admin_referer('switch-theme_' . $_GET['template']);		switch_theme($_GET['template'], $_GET['stylesheet']);		wp_redirect('themes.php?activated=true');		exit;	} else if ( 'delete' == $_GET['action'] ) {		check_admin_referer('delete-theme_' . $_GET['template']);		if ( !current_user_can('delete_themes') )			wp_die( __( 'Cheatin&#8217; uh?' ) );		delete_theme($_GET['template']);		wp_redirect('themes.php?deleted=true');		exit;	}}$title = __('Manage Themes');$parent_file = 'themes.php';if ( current_user_can( 'switch_themes' ) ) :$help = '<p>' . __('Aside from the default theme included with your WordPress installation, themes are designed and developed by third parties.') . '</p>';$help .= '<p>' . __('You can see your active theme at the top of the screen. Below are the other themes you have installed that are not currently in use. You can see what your site would look like with one of these themes by clicking the Preview link. To change themes, click the Activate link.') . '</p>';if ( current_user_can('install_themes') )	$help .= '<p>' . sprintf(__('If you would like to see more themes to choose from, click on the &#8220;Install Themes&#8221; tab and you will be able to browse or search for additional themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. Themes in the WordPress.org Theme Directory are designed and developed by third parties, and are licensed under the GNU General Public License, version 2, just like WordPress. Oh, and they&#8217;re free!'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);add_thickbox();wp_enqueue_script( 'theme-preview' );endif;require_once('./admin-header.php');if ( is_multisite() && current_user_can('edit_themes') ) {	?><div id="message0" class="updated"><p><?php printf( __('Administrator: new themes must be activated in the <a href="%s">Network Themes</a> screen before they appear here.'), admin_url( 'ms-themes.php') ); ?></p></div><?php}?><?php if ( ! validate_current_theme() ) : ?><div id="message1" class="updated"><p><?php _e('The active theme is broken.  Reverting to the default theme.'); ?></p></div><?php elseif ( isset($_GET['activated']) ) :		if ( isset($wp_registered_sidebars) && count( (array) $wp_registered_sidebars ) && current_user_can('edit_theme_options') ) { ?><div id="message2" class="updated"><p><?php printf( __('New theme activated. This theme supports widgets, please visit the <a href="%s">widgets settings</a> screen to configure them.'), admin_url( 'widgets.php' ) ); ?></p></div><?php		} else { ?><div id="message2" class="updated"><p><?php printf( __( 'New theme activated. <a href="%s">Visit site</a>' ), home_url( '/' ) ); ?></p></div><?php		}	elseif ( isset($_GET['deleted']) ) : ?><div id="message3" class="updated"><p><?php _e('Theme deleted.') ?></p></div><?php endif; ?><?php$themes = get_allowed_themes();$ct = current_theme_info();unset($themes[$ct->name]);uksort( $themes, "strnatcasecmp" );$theme_total = count( $themes );$per_page = 15;if ( isset( $_GET['pagenum'] ) )	$page = absint( $_GET['pagenum'] );if ( empty($page) )	$page = 1;$start = $offset = ( $page - 1 ) * $per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ) . '#themenav',	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($theme_total / $per_page),	'current' => $page));$themes = array_slice( $themes, $start, $per_page );?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a><?php if ( current_user_can('install_themes') ) { ?><a href="theme-install.php" class="nav-tab"><?php echo esc_html_x('Install Themes', 'theme'); ?></a><?php } ?></h2><h3><?php _e('Current Theme'); ?></h3><div id="current-theme"><?php if ( $ct->screenshot ) : ?><img src="<?php echo $ct->theme_root_uri . '/' . $ct->stylesheet . '/' . $ct->screenshot; ?>" alt="<?php _e('Current theme preview'); ?>" /><?php endif; ?><h4><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $ct->title, $ct->version, $ct->author) ; ?></h4><p class="theme-description"><?php echo $ct->description; ?></p><?php if ( current_user_can('edit_themes') && $ct->parent_theme ) { ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ), $ct->title, $ct->parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ) ); ?></p><?php } ?><?php if ( $ct->tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $ct->tags); ?></p><?php endif; ?><?php theme_update_available($ct); ?></div><div class="clear"></div><?phpif ( ! current_user_can( 'switch_themes' ) ) {	echo '</div>';	require( './admin-footer.php' );	exit;}?><h3><?php _e('Available Themes'); ?></h3><div class="clear"></div><?php if ( $theme_total ) { ?><?php if ( $page_links ) : ?><div class="tablenav"><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $per_page, $theme_total ) ),	number_format_i18n( $theme_total ),	$page_links); echo $page_links_text; ?></div></div><?php endif; ?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php$style = '';$theme_names = array_keys($themes);natcasesort($theme_names);$table = array();$rows = ceil(count($theme_names) / 3);for ( $row = 1; $row <= $rows; $row++ )	for ( $col = 1; $col <= 3; $col++ )		$table[$row][$col] = array_shift($theme_names);foreach ( $table as $row => $cols ) {?><tr><?phpforeach ( $cols as $col => $theme_name ) {	$class = array('available-theme');	if ( $row == 1 ) $class[] = 'top';	if ( $col == 1 ) $class[] = 'left';	if ( $row == $rows ) $class[] = 'bottom';	if ( $col == 3 ) $class[] = 'right';?>	<td class="<?php echo join(' ', $class); ?>"><?php if ( !empty($theme_name) ) :	$template = $themes[$theme_name]['Template'];	$stylesheet = $themes[$theme_name]['Stylesheet'];	$title = $themes[$theme_name]['Title'];	$version = $themes[$theme_name]['Version'];	$description = $themes[$theme_name]['Description'];	$author = $themes[$theme_name]['Author'];	$screenshot = $themes[$theme_name]['Screenshot'];	$stylesheet_dir = $themes[$theme_name]['Stylesheet Dir'];	$template_dir = $themes[$theme_name]['Template Dir'];	$parent_theme = $themes[$theme_name]['Parent Theme'];	$theme_root = $themes[$theme_name]['Theme Root'];	$theme_root_uri = $themes[$theme_name]['Theme Root URI'];	$preview_link = esc_url(get_option('home') . '/');	if ( is_ssl() )		$preview_link = str_replace( 'http://', 'https://', $preview_link );	$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), $preview_link ) );	$preview_text = esc_attr( sprintf( __('Preview of &#8220;%s&#8221;'), $title ) );	$tags = $themes[$theme_name]['Tags'];	$thickbox_class = 'thickbox thickbox-preview';	$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=".urlencode($template)."&amp;stylesheet=".urlencode($stylesheet), 'switch-theme_' . $template);	$activate_text = esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $title ) );	$actions = array();	$actions[] = '<a href="' . $activate_link .  '" class="activatelink" title="' . $activate_text . '">' . __('Activate') . '</a>';	$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $theme_name)) . '">' . __('Preview') . '</a>';	if ( current_user_can('delete_themes') )		$actions[] = '<a class="submitdelete deletion" href="' . wp_nonce_url("themes.php?action=delete&amp;template=$stylesheet", 'delete-theme_' . $stylesheet) . '" onclick="' . "return confirm('" . esc_js(sprintf( __("You are about to delete this theme '%s'\n  'Cancel' to stop, 'OK' to delete."), $theme_name )) . "');" . '">' . __('Delete') . '</a>';	$actions = apply_filters('theme_action_links', $actions, $themes[$theme_name]);	$actions = implode ( ' | ', $actions );?>		<a href="<?php echo $preview_link; ?>" class="<?php echo $thickbox_class; ?> screenshot"><?php if ( $screenshot ) : ?>			<img src="<?php echo $theme_root_uri . '/' . $stylesheet . '/' . $screenshot; ?>" alt="" /><?php endif; ?>		</a><h3><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $title, $version, $author) ; ?></h3><p class="description"><?php echo $description; ?></p><span class='action-links'><?php echo $actions ?></span>	<?php if ( current_user_can('edit_themes') && $parent_theme ) {	/* translators: 1: theme title, 2:  template dir, 3: stylesheet_dir, 4: theme title, 5: parent_theme */ ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ), $title, $parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ) ); ?></p><?php } ?><?php if ( $tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $tags); ?></p><?php endif; ?>		<?php theme_update_available( $themes[$theme_name] ); ?><?php endif; // end if not empty theme_name ?>	</td><?php } // end foreach $cols ?></tr><?php } // end foreach $table ?></table><?php } else { ?><p><?php	if ( current_user_can('install_themes') )		printf(__('You only have one theme installed right now. Live a little! You can choose from over 1,000 free themes in the WordPress.org Theme Directory at any time: just click on the <em><a href="%s">Install Themes</a></em> tab above.'), 'theme-install.php');	else		printf(__('Only the current theme is available to you. Contact the %s administrator for information about accessing additional themes.'), get_site_option('site_name'));	?></p><?php } // end if $theme_total?><br class="clear" /><?php if ( $page_links ) : ?><div class="tablenav"><?php echo "<div class='tablenav-pages'>$page_links_text</div>"; ?><br class="clear" /></div><?php endif; ?><br class="clear" /><?php// List broken themes, if any.$broken_themes = get_broken_themes();if ( current_user_can('edit_themes') && count( $broken_themes ) ) {?><h2><?php _e('Broken Themes'); ?> <?php if ( is_multisite() ) _e( '(Site admin only)' ); ?></h2><p><?php _e('The following themes are installed but incomplete. Themes must have a stylesheet and a template.'); ?></p><table id="broken-themes">	<tr>		<th><?php _e('Name'); ?></th>		<th><?php _e('Description'); ?></th>	</tr><?php	$theme = '';	$theme_names = array_keys($broken_themes);	natcasesort($theme_names);	foreach ($theme_names as $theme_name) {		$title = $broken_themes[$theme_name]['Title'];		$description = $broken_themes[$theme_name]['Description'];		$theme = ('class="alternate"' == $theme) ? '' : 'class="alternate"';		echo "		<tr $theme>			 <td>$title</td>			 <td>$description</td>		</tr>";	}?></table><?php}?></div><?php require('./admin-footer.php'); ?>
<?php/** * Plugins administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( is_multisite() ) {	$menu_perms = get_site_option( 'menu_items', array() );	if ( empty($menu_perms['plugins']) && ! is_super_admin() )		wp_die( __( 'Cheatin&#8217; uh?' ) );	else if ( $menu_perms['plugins'] != 1 && is_super_admin() )		add_action( 'admin_notices', '_admin_notice_multisite_activate_plugins_page' );}if ( ! current_user_can( 'activate_plugins' ) )	wp_die( __( 'You do not have sufficient permissions to manage plugins for this site.' ) );if ( isset($_POST['clear-recent-list']) )	$action = 'clear-recent-list';elseif ( !empty($_REQUEST['action']) )	$action = $_REQUEST['action'];elseif ( !empty($_REQUEST['action2']) )	$action = $_REQUEST['action2'];else	$action = false;$plugin = isset($_REQUEST['plugin']) ? $_REQUEST['plugin'] : '';$default_status = get_user_option('plugins_last_view');if ( empty($default_status) )	$default_status = 'all';$status = isset($_REQUEST['plugin_status']) ? $_REQUEST['plugin_status'] : $default_status;if ( !in_array($status, array('all', 'active', 'inactive', 'recent', 'upgrade', 'network', 'mustuse', 'dropins', 'search')) )	$status = 'all';if ( $status != $default_status && 'search' != $status )	update_user_meta($current_user->ID, 'plugins_last_view', $status);$page = isset($_REQUEST['paged']) ? $_REQUEST['paged'] : 1;//Clean up request URI from temporary args for screen options/paging uri's to work as expected.$_SERVER['REQUEST_URI'] = remove_query_arg(array('error', 'deleted', 'activate', 'activate-multi', 'deactivate', 'deactivate-multi', '_error_nonce'), $_SERVER['REQUEST_URI']);if ( !empty($action) ) {	$network_wide = false;	if ( ( isset( $_GET['networkwide'] ) || 'network-activate-selected' == $action ) && is_multisite() && current_user_can( 'manage_network_plugins' ) )		$network_wide = true;	switch ( $action ) {		case 'activate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('activate-plugin_' . $plugin);			$result = activate_plugin($plugin, 'plugins.php?error=true&plugin=' . $plugin, $network_wide);			if ( is_wp_error( $result ) ) {				if ( 'unexpected_output' == $result->get_error_code() ) {					$redirect = 'plugins.php?error=true&charsout=' . strlen($result->get_error_data()) . '&plugin=' . $plugin;					wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect));					exit;				} else {					wp_die($result);				}			}			$recent = (array)get_option('recently_activated');			if ( isset($recent[ $plugin ]) ) {				unset($recent[ $plugin ]);				update_option('recently_activated', $recent);			}			if ( isset($_GET['from']) && 'import' == $_GET['from'] ) {				wp_redirect("import.php?import=" . str_replace('-importer', '', dirname($plugin)) ); // overrides the ?error=true one above and redirects to the Imports page, striping the -importer suffix			} else {				wp_redirect("plugins.php?activate=true&plugin_status=$status&paged=$page"); // overrides the ?error=true one above			}			exit;			break;		case 'activate-selected':		case 'network-activate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); // Only activate plugins which are not already active.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			activate_plugins($plugins, 'plugins.php?error=true', $network_wide);			$recent = (array)get_option('recently_activated');			foreach ( $plugins as $plugin => $time)				if ( isset($recent[ $plugin ]) )					unset($recent[ $plugin ]);			update_option('recently_activated', $recent);			wp_redirect("plugins.php?activate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'update-selected' :			check_admin_referer( 'bulk-manage-plugins' );			if ( isset( $_GET['plugins'] ) )				$plugins = explode( ',', $_GET['plugins'] );			elseif ( isset( $_POST['checked'] ) )				$plugins = (array) $_POST['checked'];			else				$plugins = array();			$title = __( 'Upgrade Plugins' );			$parent_file = 'plugins.php';			require_once( './admin-header.php' );			echo '<div class="wrap">';			screen_icon();			echo '<h2>' . esc_html( $title ) . '</h2>';			$url = 'update.php?action=update-selected&amp;plugins=' . urlencode( join(',', $plugins) );			$url = wp_nonce_url($url, 'bulk-update-plugins');			echo "<iframe src='$url' style='width: 100%; height:100%; min-height:850px;'></iframe>";			echo '</div>';			require_once( './admin-footer.php' );			exit;			break;		case 'error_scrape':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('plugin-activation-error_' . $plugin);			$valid = validate_plugin($plugin);			if ( is_wp_error($valid) )				wp_die($valid);			if ( ! WP_DEBUG ) {				if ( defined('E_RECOVERABLE_ERROR') )					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);				else					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			}			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			// Go back to "sandbox" scope so we get the same errors as before			function plugin_sandbox_scrape( $plugin ) {				include( WP_PLUGIN_DIR . '/' . $plugin );			}			plugin_sandbox_scrape( $plugin );			do_action('activate_' . $plugin);			exit;			break;		case 'deactivate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('deactivate-plugin_' . $plugin);			deactivate_plugins($plugin);			update_option('recently_activated', array($plugin => time()) + (array)get_option('recently_activated'));			if (headers_sent())				echo "<meta http-equiv='refresh' content='" . esc_attr( "0;url=plugins.php?deactivate=true&plugin_status=$status&paged=$page" ) . "' />";			else				wp_redirect("plugins.php?deactivate=true&plugin_status=$status&paged=$page");			exit;			break;		case 'deactivate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, 'is_plugin_active'); //Do not deactivate plugins which are already deactivated.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			deactivate_plugins($plugins);			$deactivated = array();			foreach ( $plugins as $plugin )				$deactivated[ $plugin ] = time();			update_option('recently_activated', $deactivated + (array)get_option('recently_activated'));			wp_redirect("plugins.php?deactivate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'delete-selected':			if ( ! current_user_can('delete_plugins') )				wp_die(__('You do not have sufficient permissions to delete plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			//$_POST = from the plugin form; $_GET = from the FTP details screen.			$plugins = isset( $_REQUEST['checked'] ) ? (array) $_REQUEST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); //Do not allow to delete Activated plugins.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			include(ABSPATH . 'wp-admin/update.php');			$parent_file = 'plugins.php';			if ( ! isset($_REQUEST['verify-delete']) ) {				wp_enqueue_script('jquery');				require_once('./admin-header.php');				?>			<div class="wrap">				<?php					$files_to_delete = $plugin_info = array();					foreach ( (array) $plugins as $plugin ) {						if ( '.' == dirname($plugin) ) {							$files_to_delete[] = WP_PLUGIN_DIR . '/' . $plugin;							if( $data = get_plugin_data(WP_PLUGIN_DIR . '/' . $plugin) ) {								$plugin_info[ $plugin ] = $data;								$plugin_info[ $plugin ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );							}						} else {							// Locate all the files in that folder							$files = list_files( WP_PLUGIN_DIR . '/' . dirname($plugin) );							if ( $files ) {								$files_to_delete = array_merge($files_to_delete, $files);							}							// Get plugins list from that folder							if ( $folder_plugins = get_plugins( '/' . dirname($plugin)) ) {								foreach( $folder_plugins as $plugin_file => $data ) {									$plugin_info[ $plugin_file ] = $data;									$plugin_info[ $plugin_file ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );								}							}						}					}					screen_icon();					$plugins_to_delete = count( $plugin_info );					echo '<h2>' . _n( 'Delete Plugin', 'Delete Plugins', $plugins_to_delete ) . '</h2>';				?>				<p><?php echo _n( 'You are about to remove the following plugin:', 'You are about to remove the following plugins:', $plugins_to_delete ); ?></p>					<ul class="ul-disc">						<?php						$data_to_delete = false;						foreach ( $plugin_info as $plugin ) {							if ( $plugin['is_uninstallable'] ) {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __( '<strong>%1$s</strong> by <em>%2$s</em> (will also <strong>delete its data</strong>)' ), $plugin['Name'], $plugin['Author'] ), '</li>';								$data_to_delete = true;							} else {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __('<strong>%1$s</strong> by <em>%2$s</em>' ), $plugin['Name'], $plugin['Author'] ), '</li>';							}						}						?>					</ul>				<p><?php				if ( $data_to_delete )					_e('Are you sure you wish to delete these files and data?');				else					_e('Are you sure you wish to delete these files?');				?></p>				<form method="post" action="<?php echo esc_url($_SERVER['REQUEST_URI']); ?>" style="display:inline;">					<input type="hidden" name="verify-delete" value="1" />					<input type="hidden" name="action" value="delete-selected" />					<?php						foreach ( (array)$plugins as $plugin )							echo '<input type="hidden" name="checked[]" value="' . esc_attr($plugin) . '" />';					?>					<?php wp_nonce_field('bulk-manage-plugins') ?>					<input type="submit" name="submit" value="<?php $data_to_delete ? esc_attr_e('Yes, Delete these files and data') : esc_attr_e('Yes, Delete these files') ?>" class="button" />				</form>				<form method="post" action="<?php echo esc_url(wp_get_referer()); ?>" style="display:inline;">					<input type="submit" name="submit" value="<?php esc_attr_e('No, Return me to the plugin list') ?>" class="button" />				</form>				<p><a href="#" onclick="jQuery('#files-list').toggle(); return false;"><?php _e('Click to view entire list of files which will be deleted'); ?></a></p>				<div id="files-list" style="display:none;">					<ul class="code">					<?php						foreach ( (array)$files_to_delete as $file )							echo '<li>' . str_replace(WP_PLUGIN_DIR, '', $file) . '</li>';					?>					</ul>				</div>			</div>				<?php				require_once('./admin-footer.php');				exit;			} //Endif verify-delete			$delete_result = delete_plugins($plugins);			set_transient('plugins_delete_result_'.$user_ID, $delete_result); //Store the result in a cache rather than a URL param due to object type & length			wp_redirect("plugins.php?deleted=true&plugin_status=$status&paged=$page");			exit;			break;		case 'clear-recent-list':			update_option('recently_activated', array());			break;	}}wp_enqueue_script('plugin-install');add_thickbox();add_contextual_help($current_screen,	'<p>' . __('Plugins extend and expand the functionality of WordPress. Once a plugin is installed, you may activate it or deactivate it here.') . '</p>' .	'<p>' . sprintf(__('You can find additional plugins for your site by using the <a href="%1$s">Plugin Browser/Installer</a> functionality or by browsing the <a href="%2$s" target="_blank">WordPress Plugin Directory</a> directly and installing new plugins manually. To manually install a plugin you generally just need to upload the plugin file into your <code>/wp-content/plugins</code> directory. Once a plugin has been installed, you can activate it here.'), 'plugin-install.php', 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('Most of the time, plugins play nicely with the core of WordPress and with other plugins. Sometimes, though, a plugin&#8217;s code will get in the way of another plugin, causing compatibility issues. If your site starts doing strange things, this may be the problem. Try deactivating all your plugins and re-activating them in various combinations until you isolate which one(s) caused the issue.') . '</p>' .	'<p>' . sprintf( __('If something goes wrong with a plugin and you can&#8217;t use WordPress, delete or rename that file in the <code>%s</code> directory and it will be automatically deactivated.'), WP_PLUGIN_DIR) . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Managing_Plugins#Plugin_Management" target="_blank">Documentation on Managing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$title = __('Plugins');require_once('./admin-header.php');$invalid = validate_active_plugins();if ( !empty($invalid) )	foreach ( $invalid as $plugin_file => $error )		echo '<div id="message" class="error"><p>' . sprintf(__('The plugin <code>%s</code> has been <strong>deactivated</strong> due to an error: %s'), esc_html($plugin_file), $error->get_error_message()) . '</p></div>';?><?php if ( isset($_GET['error']) ) :	if ( isset($_GET['charsout']) )		$errmsg = sprintf(__('The plugin generated %d characters of <strong>unexpected output</strong> during activation.  If you notice &#8220;headers already sent&#8221; messages, problems with syndication feeds or other issues, try deactivating or removing this plugin.'), $_GET['charsout']);	else		$errmsg = __('Plugin could not be activated because it triggered a <strong>fatal error</strong>.');	?>	<div id="message" class="updated"><p><?php echo $errmsg; ?></p>	<?php		if ( !isset($_GET['charsout']) && wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $plugin) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php echo admin_url('plugins.php?action=error_scrape&amp;plugin=' . esc_attr($plugin) . '&amp;_wpnonce=' . esc_attr($_GET['_error_nonce'])); ?>"></iframe>	<?php		}	?>	</div><?php elseif ( isset($_GET['deleted']) ) :		$delete_result = get_transient('plugins_delete_result_'.$user_ID);		delete_transient('plugins_delete_result'); //Delete it once we're done.		if ( is_wp_error($delete_result) ) : ?>		<div id="message" class="updated"><p><?php printf( __('Plugin could not be deleted due to an error: %s'), $delete_result->get_error_message() ); ?></p></div>		<?php else : ?>		<div id="message" class="updated"><p><?php _e('The selected plugins have been <strong>deleted</strong>.'); ?></p></div>		<?php endif; ?><?php elseif ( isset($_GET['activate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>activated</strong>.') ?></p></div><?php elseif (isset($_GET['activate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>activated</strong>.'); ?></p></div><?php elseif ( isset($_GET['deactivate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>deactivated</strong>.') ?></p></div><?php elseif (isset($_GET['deactivate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>deactivated</strong>.'); ?></p></div><?php elseif ( 'update-selected' == $action ) : ?>	<div id="message" class="updated"><p><?php _e('No out of date plugins were selected.'); ?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can('install_plugins') ) { ?> <a href="plugin-install.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'plugin'); ?></a><?php } ?></h2><?php$all_plugins = apply_filters( 'all_plugins', get_plugins() );$search_plugins = array();$active_plugins = array();$inactive_plugins = array();$recent_plugins = array();$recently_activated = get_option('recently_activated', array());$upgrade_plugins = array();$network_plugins = array();$mustuse_plugins = $dropins_plugins = array();if ( ! is_multisite() || current_user_can('manage_network_plugins') ) {	if ( apply_filters( 'show_advanced_plugins', true, 'mustuse' ) )		$mustuse_plugins = get_mu_plugins();	if ( apply_filters( 'show_advanced_plugins', true, 'dropins' ) )		$dropins_plugins = get_dropins();}set_transient( 'plugin_slugs', array_keys($all_plugins), 86400 );// Clean out any plugins which were deactivated over a week ago.foreach ( $recently_activated as $key => $time )	if ( $time + (7*24*60*60) < time() ) //1 week		unset($recently_activated[ $key ]);if ( $recently_activated != get_option('recently_activated') ) //If array changed, update it.	update_option('recently_activated', $recently_activated);$current = get_site_transient( 'update_plugins' );foreach ( array( 'all_plugins', 'mustuse_plugins', 'dropins_plugins' ) as $plugin_array_name) {	foreach ( (array) $$plugin_array_name as $plugin_file => $plugin_data ) {		// Translate, Apply Markup, Sanitize HTML		$plugin_data = _get_plugin_data_markup_translate($plugin_file, $plugin_data, false, true);		${$plugin_array_name}[ $plugin_file ] = $plugin_data;	}}unset( $plugin_array_name );foreach ( (array) $all_plugins as $plugin_file => $plugin_data) {	// Filter into individual sections	if ( is_multisite() && is_network_only_plugin( $plugin_file ) && !current_user_can( 'manage_network_plugins' ) ) {		unset( $all_plugins[ $plugin_file ] );		continue;	} elseif ( is_plugin_active_for_network($plugin_file) ) {		$network_plugins[ $plugin_file ] = $plugin_data;	} elseif ( is_plugin_active($plugin_file) ) {		$active_plugins[ $plugin_file ] = $plugin_data;	} else {		if ( isset( $recently_activated[ $plugin_file ] ) ) // Was the plugin recently activated?			$recent_plugins[ $plugin_file ] = $plugin_data;		$inactive_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $current->response[ $plugin_file ] ) )		$upgrade_plugins[ $plugin_file ] = $plugin_data;}if ( !current_user_can('update_plugins') )	$upgrade_plugins = array();$total_all_plugins = count($all_plugins);$total_inactive_plugins = count($inactive_plugins);$total_active_plugins = count($active_plugins);$total_recent_plugins = count($recent_plugins);$total_upgrade_plugins = count($upgrade_plugins);$total_network_plugins = count($network_plugins);$total_mustuse_plugins = count($mustuse_plugins);$total_dropins_plugins = count($dropins_plugins);// Searching.if ( !empty($_GET['s']) ) {	function _search_plugins_filter_callback($plugin) {		static $term;		if ( is_null($term) )			$term = stripslashes($_GET['s']);		if ( 	stripos($plugin['Name'], $term) !== false ||				stripos($plugin['Description'], $term) !== false ||				stripos($plugin['Author'], $term) !== false ||				stripos($plugin['PluginURI'], $term) !== false ||				stripos($plugin['AuthorURI'], $term) !== false ||				stripos($plugin['Version'], $term) !== false )			return true;		else			return false;	}	$status = 'search';	$search_plugins = array_filter($all_plugins, '_search_plugins_filter_callback');	$total_search_plugins = count($search_plugins);}$plugin_array_name = "${status}_plugins";if ( empty($$plugin_array_name) && !in_array($status, array('all', 'search')) ) {	$status = 'all';	$plugin_array_name = "${status}_plugins";}$plugins = &$$plugin_array_name;// Paging.$total_this_page = "total_{$status}_plugins";$total_this_page = $$total_this_page;$plugins_per_page = (int) get_user_option( 'plugins_per_page' );if ( empty( $plugins_per_page ) || $plugins_per_page < 1 )	$plugins_per_page = 999;$plugins_per_page = apply_filters( 'plugins_per_page', $plugins_per_page );$start = ($page - 1) * $plugins_per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total_this_page / $plugins_per_page),	'current' => $page));$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $plugins_per_page, $total_this_page ) ),	'<span class="total-type-count">' . number_format_i18n( $total_this_page ) . '</span>',	$page_links);/** * @ignore * * @param array $plugins * @param string $context */function print_plugins_table($plugins, $context = '') {	global $page;	$checkbox = ! in_array( $context, array( 'mustuse', 'dropins' ) ) ? '<input type="checkbox" />' : '';?><table class="widefat" cellspacing="0" id="<?php echo $context ?>-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	if ( empty($plugins) ) {		echo '<tr>			<td colspan="3">' . __('No plugins to show') . '</td>		</tr>';	}	foreach ( (array)$plugins as $plugin_file => $plugin_data) {		// preorder		$actions = array(			'network_deactivate' => '', 'deactivate' => '',			'network_only' => '', 'activate' => '',			'network_activate' => '',			'edit' => '',			'delete' => '',		);		if ( 'mustuse' == $context ) {			$is_active = true;		} elseif ( 'dropins' == $context ) {			$dropins = _get_dropins();			$plugin_name = $plugin_file;			if ( $plugin_file != $plugin_data['Name'] )				$plugin_name .= '<br/>' . $plugin_data['Name'];			if ( true === ( $dropins[ $plugin_file ][1] ) ) { // Doesn't require a constant				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} elseif ( constant( $dropins[ $plugin_file ][1] ) ) { // Constant is true				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} else {				$is_active = false;				$description = '<strong>' . $dropins[ $plugin_file ][0] . ' <span class="attention">' . __('Inactive:') . '</span></strong> ' . sprintf( __( 'Requires <code>%s</code> in <code>wp-config.php</code>.' ), "define('" . $dropins[ $plugin_file ][1] . "', true);" ) . '</p>';			}			$description .= '<p>' . $plugin_data['Description'] . '</p>';		} else {			$is_active_for_network = is_plugin_active_for_network($plugin_file);			$is_active = $is_active_for_network || is_plugin_active( $plugin_file );			if ( $is_active_for_network && !is_super_admin() )				continue;			if ( $is_active ) {				if ( $is_active_for_network ) {					if ( is_super_admin() )						$actions['network_deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Network Deactivate') . '</a>';				} else {					$actions['deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Deactivate') . '</a>';				}			} else {				if ( is_multisite() && is_network_only_plugin( $plugin_file ) )					$actions['network_only'] = '<span title="' . __('This plugin can only be activated for all sites in a network') . '">' . __('Network Only') . '</span>';				else					$actions['activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin') . '" class="edit">' . __('Activate') . '</a>';				if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )					$actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" class="edit">' . __('Network Activate') . '</a>';				if ( current_user_can('delete_plugins') )					$actions['delete'] = '<a href="' . wp_nonce_url('plugins.php?action=delete-selected&amp;checked[]=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'bulk-manage-plugins') . '" title="' . __('Delete this plugin') . '" class="delete">' . __('Delete') . '</a>';			} // end if $is_active			if ( current_user_can('edit_plugins') && is_writable(WP_PLUGIN_DIR . '/' . $plugin_file) )				$actions['edit'] = '<a href="plugin-editor.php?file=' . $plugin_file . '" title="' . __('Open this file in the Plugin Editor') . '" class="edit">' . __('Edit') . '</a>';		} // end if $context		$actions = apply_filters( 'plugin_action_links', array_filter( $actions ), $plugin_file, $plugin_data, $context );		$actions = apply_filters( "plugin_action_links_$plugin_file", $actions, $plugin_file, $plugin_data, $context );		$class = $is_active ? 'active' : 'inactive';		$checkbox = in_array( $context, array( 'mustuse', 'dropins' ) ) ? '' : "<input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' />";		if ( 'dropins' != $context ) {			$description = '<p>' . $plugin_data['Description'] . '</p>';			$plugin_name = $plugin_data['Name'];		}		echo "	<tr class='$class'>		<th scope='row' class='check-column'>$checkbox</th>		<td class='plugin-title'><strong>$plugin_name</strong></td>		<td class='desc'>$description</td>	</tr>	<tr class='$class second'>		<td></td>		<td class='plugin-title'>";		echo '<div class="row-actions-visible">';		foreach ( $actions as $action => $link ) {			$sep = end($actions) == $link ? '' : ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo "</div></td>		<td class='desc'>";		$plugin_meta = array();		if ( !empty($plugin_data['Version']) )			$plugin_meta[] = sprintf(__('Version %s'), $plugin_data['Version']);		if ( !empty($plugin_data['Author']) ) {			$author = $plugin_data['Author'];			if ( !empty($plugin_data['AuthorURI']) )				$author = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';			$plugin_meta[] = sprintf( __('By %s'), $author );		}		if ( ! empty($plugin_data['PluginURI']) )			$plugin_meta[] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin site' ) . '">' . __('Visit plugin site') . '</a>';		$plugin_meta = apply_filters('plugin_row_meta', $plugin_meta, $plugin_file, $plugin_data, $context);		echo implode(' | ', $plugin_meta);		echo "</td>	</tr>\n";		do_action( 'after_plugin_row', $plugin_file, $plugin_data, $context );		do_action( "after_plugin_row_$plugin_file", $plugin_file, $plugin_data, $context );	}?>	</tbody></table><?php} //End print_plugins_table()/** * @ignore * * @param string $context */function print_plugin_actions($context, $field_name = 'action' ) {	if ( in_array( $context, array( 'mustuse', 'dropins' ) ) )		return;?>	<div class="alignleft actions">		<select name="<?php echo $field_name; ?>">			<option value="" selected="selected"><?php _e('Bulk Actions'); ?></option>	<?php if ( 'active' != $context ) : ?>			<option value="activate-selected"><?php _e('Activate'); ?></option>	<?php endif; ?>	<?php if ( is_multisite() && 'network' != $context ) : ?>			<option value="network-activate-selected"><?php _e('Network Activate'); ?></option>	<?php endif; ?>	<?php if ( 'inactive' != $context && 'recent' != $context ) : ?>			<option value="deactivate-selected"><?php _e('Deactivate'); ?></option>	<?php endif; ?>	<?php if ( current_user_can( 'update_plugins' ) ) : ?>			<option value="update-selected"><?php _e( 'Upgrade' ); ?></option>	<?php endif; ?>	<?php if ( current_user_can('delete_plugins') && ( 'active' != $context ) ) : ?>			<option value="delete-selected"><?php _e('Delete'); ?></option>	<?php endif; ?>		</select>		<input type="submit" name="doaction_active" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary action" />	<?php if ( 'recent' == $context ) : ?>		<input type="submit" name="clear-recent-list" value="<?php esc_attr_e('Clear List') ?>" class="button-secondary" />	<?php endif; ?>	</div><?php}?><form method="get" action=""><p class="search-box">	<label class="screen-reader-text" for="plugin-search-input"><?php _e( 'Search Plugins' ); ?>:</label>	<input type="text" id="plugin-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Installed Plugins' ); ?>" class="button" /></p></form><?php do_action( 'pre_current_active_plugins', $all_plugins ) ?><form method="post" action="<?php echo admin_url('plugins.php') ?>"><?php wp_nonce_field('bulk-manage-plugins') ?><input type="hidden" name="plugin_status" value="<?php echo esc_attr($status) ?>" /><input type="hidden" name="paged" value="<?php echo esc_attr($page) ?>" /><ul class="subsubsub"><?php$status_links = array();$class = ( 'all' == $status ) ? ' class="current"' : '';$status_links[] = "<li><a href='plugins.php?plugin_status=all' $class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_all_plugins, 'plugins' ), number_format_i18n( $total_all_plugins ) ) . '</a>';if ( ! empty($active_plugins) ) {	$class = ( 'active' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=active' $class>" . sprintf( _n( 'Active <span class="count">(%s)</span>', 'Active <span class="count">(%s)</span>', $total_active_plugins ), number_format_i18n( $total_active_plugins ) ) . '</a>';}if ( ! empty($recent_plugins) ) {	$class = ( 'recent' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=recent' $class>" . sprintf( _n( 'Recently Active <span class="count">(%s)</span>', 'Recently Active <span class="count">(%s)</span>', $total_recent_plugins ), number_format_i18n( $total_recent_plugins ) ) . '</a>';}if ( ! empty($inactive_plugins) ) {	$class = ( 'inactive' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=inactive' $class>" . sprintf( _n( 'Inactive <span class="count">(%s)</span>', 'Inactive <span class="count">(%s)</span>', $total_inactive_plugins ), number_format_i18n( $total_inactive_plugins ) ) . '</a>';}if ( ! empty($network_plugins) ) {	$class = ( 'network' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=network' $class>" . sprintf( _n( 'Network <span class="count">(%s)</span>', 'Network <span class="count">(%s)</span>', $total_network_plugins ), number_format_i18n( $total_network_plugins ) ) . '</a>';}if ( ! empty($mustuse_plugins) ) {	$class = ( 'mustuse' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=mustuse' $class>" . sprintf( _n( 'Must-Use <span class="count">(%s)</span>', 'Must-Use <span class="count">(%s)</span>', $total_mustuse_plugins ), number_format_i18n( $total_mustuse_plugins ) ) . '</a>';}if ( ! empty($dropins_plugins) ) {	$class = ( 'dropins' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=dropins' $class>" . sprintf( _n( 'Drop-ins <span class="count">(%s)</span>', 'Drop-ins <span class="count">(%s)</span>', $total_dropins_plugins ), number_format_i18n( $total_dropins_plugins ) ) . '</a>';}if ( ! empty($upgrade_plugins) ) {	$class = ( 'upgrade' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=upgrade' $class>" . sprintf( _n( 'Upgrade Available <span class="count">(%s)</span>', 'Upgrade Available <span class="count">(%s)</span>', $total_upgrade_plugins ), number_format_i18n( $total_upgrade_plugins ) ) . '</a>';}if ( ! empty($search_plugins) ) {	$class = ( 'search' == $status ) ? ' class="current"' : '';	$term = isset($_REQUEST['s']) ? urlencode(stripslashes($_REQUEST['s'])) : '';	$status_links[] = "<li><a href='plugins.php?s=$term' $class>" . sprintf( _n( 'Search Results <span class="count">(%s)</span>', 'Search Results <span class="count">(%s)</span>', $total_search_plugins ), number_format_i18n( $total_search_plugins ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );?></ul><?phpif ( 'mustuse' == $status )	echo '<div class="clear"><p>' . __( 'Files in the <code>/wp-content/mu-plugins</code> directory are executed automatically.' ) . '</p>';elseif ( 'dropins' == $status )	echo '<div class="clear"><p>' . __( 'Drop-ins are advanced plugins in the <code>/wp-content</code> directory that replace WordPress functionality when present.' ) . '</p>';if ( !empty( $plugins ) && ( ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) ) :?><div class="tablenav"><?phpif ( $page_links )	echo '<div class="tablenav-pages">', $page_links_text, '</div>';print_plugin_actions($status);?></div><div class="clear"></div><?phpendif;if ( $total_this_page > $plugins_per_page )	$plugins = array_slice($plugins, $start, $plugins_per_page);print_plugins_table($plugins, $status);if ( !empty( $plugins ) && ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) {?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";print_plugin_actions($status, "action2");?></div><?php } elseif ( ! empty( $all_plugins ) ) { ?><p><?php __( 'No plugins found.' ); ?></p><?php } ?></form><?php if ( empty($all_plugins) ) : ?><br class="clear" /><p><?php _e('You do not appear to have any plugins available at this time.') ?></p><?php endif; ?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Retrieves and creates the wp-config.php file. * * The permissions for the base directory must allow for writing files in order * for the wp-config.php to be created using this page. * * @package WordPress * @subpackage Administration *//** * We are installing. * * @package WordPress */define('WP_INSTALLING', true);/** * We are blissfully unaware of anything. */define('WP_SETUP_CONFIG', true);/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/**#@+ * These three defines are required to allow us to use require_wp_db() to load * the database class while being wp-content/db.php aware. * @ignore */define('ABSPATH', dirname(dirname(__FILE__)).'/');define('WPINC', 'wp-includes');define('WP_CONTENT_DIR', ABSPATH . 'wp-content');define('WP_DEBUG', false);/**#@-*/require_once(ABSPATH . WPINC . '/load.php');require_once(ABSPATH . WPINC . '/compat.php');require_once(ABSPATH . WPINC . '/functions.php');require_once(ABSPATH . WPINC . '/classes.php');require_once(ABSPATH . WPINC . '/version.php');if (!file_exists(ABSPATH . 'wp-config-sample.php'))	wp_die('Sorry, I need a wp-config-sample.php file to work from. Please re-upload this file from your WordPress installation.');$configFile = file(ABSPATH . 'wp-config-sample.php');// Check if wp-config.php has been createdif (file_exists(ABSPATH . 'wp-config.php'))	wp_die("<p>The file 'wp-config.php' already exists. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");// Check if wp-config.php exists above the root directory but is not part of another installif (file_exists(ABSPATH . '../wp-config.php') && ! file_exists(ABSPATH . '../wp-settings.php'))	wp_die("<p>The file 'wp-config.php' already exists one level above your WordPress installation. If you need to reset any of the configuration items in this file, please delete it first. You may try <a href='install.php'>installing now</a>.</p>");if ( version_compare( $required_php_version, phpversion(), '>' ) )	wp_die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress requires at least %2$s.'/*/WP_I18N_OLD_PHP*/, phpversion(), $required_php_version ) );if ( !extension_loaded('mysql') && !file_exists(ABSPATH . 'wp-content/db.php') )	wp_die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );if (isset($_GET['step']))	$step = $_GET['step'];else	$step = 0;/** * Display setup wp-config.php file header. * * @ignore * @since 2.3.0 * @package WordPress * @subpackage Installer_WP_Config */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>WordPress &rsaquo; Setup Configuration File</title><link rel="stylesheet" href="css/install.css" type="text/css" /></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php}//end function display_header();switch($step) {	case 0:		display_header();?><p>Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.</p><ol>	<li>Database name</li>	<li>Database username</li>	<li>Database password</li>	<li>Database host</li>	<li>Table prefix (if you want to run more than one WordPress in a single database) </li></ol><p><strong>If for any reason this automatic file creation doesn't work, don't worry. All this does is fill in the database information to a configuration file. You may also simply open <code>wp-config-sample.php</code> in a text editor, fill in your information, and save it as <code>wp-config.php</code>. </strong></p><p>In all likelihood, these items were supplied to you by your Web Host. If you do not have this information, then you will need to contact them before you can continue. If you&#8217;re all ready&hellip;</p><p class="step"><a href="setup-config.php?step=1<?php if ( isset( $_GET['noapi'] ) ) echo '&amp;noapi'; ?>" class="button">Let&#8217;s go!</a></p><?php	break;	case 1:		display_header();	?><form method="post" action="setup-config.php?step=2">	<p>Below you should enter your database connection details. If you're not sure about these, contact your host. </p>	<table class="form-table">		<tr>			<th scope="row"><label for="dbname">Database Name</label></th>			<td><input name="dbname" id="dbname" type="text" size="25" value="wordpress" /></td>			<td>The name of the database you want to run WP in. </td>		</tr>		<tr>			<th scope="row"><label for="uname">User Name</label></th>			<td><input name="uname" id="uname" type="text" size="25" value="username" /></td>			<td>Your MySQL username</td>		</tr>		<tr>			<th scope="row"><label for="pwd">Password</label></th>			<td><input name="pwd" id="pwd" type="text" size="25" value="password" /></td>			<td>...and MySQL password.</td>		</tr>		<tr>			<th scope="row"><label for="dbhost">Database Host</label></th>			<td><input name="dbhost" id="dbhost" type="text" size="25" value="localhost" /></td>			<td>You should be able to get this info from your web host, if <code>localhost</code> does not work.</td>		</tr>		<tr>			<th scope="row"><label for="prefix">Table Prefix</label></th>			<td><input name="prefix" id="prefix" type="text" id="prefix" value="wp_" size="25" /></td>			<td>If you want to run multiple WordPress installations in a single database, change this.</td>		</tr>	</table>	<?php if ( isset( $_GET['noapi'] ) ) { ?><input name="noapi" type="hidden" value="true" /><?php } ?>	<p class="step"><input name="submit" type="submit" value="Submit" class="button" /></p></form><?php	break;	case 2:	$dbname  = trim($_POST['dbname']);	$uname   = trim($_POST['uname']);	$passwrd = trim($_POST['pwd']);	$dbhost  = trim($_POST['dbhost']);	$prefix  = trim($_POST['prefix']);	if ( empty($prefix) )		$prefix = 'wp_';	// Validate $prefix: it can only contain letters, numbers and underscores	if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: "Table Prefix" can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );	// Test the db connection.	/**#@+	 * @ignore	 */	define('DB_NAME', $dbname);	define('DB_USER', $uname);	define('DB_PASSWORD', $passwrd);	define('DB_HOST', $dbhost);	/**#@-*/	// We'll fail here if the values are no good.	require_wp_db();	if ( !empty($wpdb->error) )		wp_die($wpdb->error->get_error_message());	// Fetch or generate keys and salts.	$no_api = isset( $_POST['noapi'] );	require_once( ABSPATH . WPINC . '/plugin.php' );	require_once( ABSPATH . WPINC . '/l10n.php' );	require_once( ABSPATH . WPINC . '/pomo/translations.php' );	if ( ! $no_api ) {		require_once( ABSPATH . WPINC . '/class-http.php' );		require_once( ABSPATH . WPINC . '/http.php' );		wp_fix_server_vars();		/**#@+		 * @ignore		 */		function get_bloginfo() {			return ( ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . str_replace( $_SERVER['PHP_SELF'], '/wp-admin/setup-config.php', '' ) );		}		/**#@-*/		$secret_keys = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );	}	if ( $no_api || is_wp_error( $secret_keys ) ) {		$secret_keys = array();		require_once( ABSPATH . WPINC . '/pluggable.php' );		for ( $i = 0; $i < 8; $i++ ) {			$secret_keys[] = wp_generate_password( 64, true, true );		}	} else {		$secret_keys = explode( "\n", wp_remote_retrieve_body( $secret_keys ) );		foreach ( $secret_keys as $k => $v ) {			$secret_keys[$k] = substr( $v, 28, 64 );		}	}	$key = 0;	foreach ($configFile as $line_num => $line) {		switch (substr($line,0,16)) {			case "define('DB_NAME'":				$configFile[$line_num] = str_replace("database_name_here", $dbname, $line);				break;			case "define('DB_USER'":				$configFile[$line_num] = str_replace("'username_here'", "'$uname'", $line);				break;			case "define('DB_PASSW":				$configFile[$line_num] = str_replace("'password_here'", "'$passwrd'", $line);				break;			case "define('DB_HOST'":				$configFile[$line_num] = str_replace("localhost", $dbhost, $line);				break;			case '$table_prefix  =':				$configFile[$line_num] = str_replace('wp_', $prefix, $line);				break;			case "define('AUTH_KEY":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_KE":			case "define('AUTH_SAL":			case "define('SECURE_A":			case "define('LOGGED_I":			case "define('NONCE_SA":				$configFile[$line_num] = str_replace('put your unique phrase here', $secret_keys[$key++], $line );				break;		}	}	if ( ! is_writable(ABSPATH) ) :		display_header();?><p>Sorry, but I can't write the <code>wp-config.php</code> file.</p><p>You can create the <code>wp-config.php</code> manually and paste the following text into it.</p><textarea cols="98" rows="15" class="code"><?php		foreach( $configFile as $line ) {			echo htmlentities($line, ENT_COMPAT, 'UTF-8');		}?></textarea><p>After you've done that, click "Run the install."</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	else :		$handle = fopen(ABSPATH . 'wp-config.php', 'w');		foreach( $configFile as $line ) {			fwrite($handle, $line);		}		fclose($handle);		chmod(ABSPATH . 'wp-config.php', 0666);		display_header();?><p>All right sparky! You've made it through this part of the installation. WordPress can now communicate with your database. If you are ready, time now to&hellip;</p><p class="step"><a href="install.php" class="button">Run the install</a></p><?php	endif;	break;}?></body></html>
<?php/** * Build Administration Menu. * * @package WordPress * @subpackage Administration *//** * Constructs the admin menu bar. * * The elements in the array are : *     0: Menu item name *     1: Minimum level or capability required. *     2: The URL of the item's file *     3: Class *     4: ID *     5: Icon for top level menu * * @global array $menu * @name $menu * @var array */$awaiting_mod = wp_count_comments();$awaiting_mod = $awaiting_mod->moderated;if ( is_multisite() && is_super_admin() ) {	/* translators: Network menu item */	$menu[0] = array(__('Super Admin'), 'manage_network', 'ms-admin.php', '', 'menu-top menu-top-first menu-icon-site', 'menu-site', 'div');	$submenu[ 'ms-admin.php' ][1] = array( __('Admin'), 'manage_network', 'ms-admin.php' );	/* translators: Sites menu item */	$submenu[ 'ms-admin.php' ][5] = array( __('Sites'), 'manage_sites', 'ms-sites.php' );	$submenu[ 'ms-admin.php' ][10] = array( __('Users'), 'manage_network_users', 'ms-users.php' );	$submenu[ 'ms-admin.php' ][20] = array( __('Themes'), 'manage_network_themes', 'ms-themes.php' );	$submenu[ 'ms-admin.php' ][25] = array( __('Options'), 'manage_network_options', 'ms-options.php' );	$submenu[ 'ms-admin.php' ][30] = array( __('Update'), 'manage_network', 'ms-upgrade-network.php' );	$menu[1] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-icon-dashboard', 'menu-dashboard', 'div' );} else {	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-top-first menu-icon-dashboard', 'menu-dashboard', 'div' );}if ( is_multisite() || is_super_admin() ) {	$submenu[ 'index.php' ][0] = array( __('Dashboard'), 'read', 'index.php' );	if ( is_multisite() )		$submenu[ 'index.php' ][5] = array( __('My Sites'), 'read', 'my-sites.php' );	if ( is_super_admin() ) {		$plugin_update_count = $theme_update_count = $wordpress_update_count = 0;		$update_plugins = get_site_transient( 'update_plugins' );		if ( !empty($update_plugins->response) )			$plugin_update_count = count( $update_plugins->response );		$update_themes = get_site_transient( 'update_themes' );		if ( !empty($update_themes->response) )			$theme_update_count = count( $update_themes->response );		$update_wordpress = get_core_updates( array('dismissed' => false) );		if ( !empty($update_wordpress) && !in_array( $update_wordpress[0]->response, array('development', 'latest') ) )			$wordpress_update_count = 1;		$update_count = $plugin_update_count + $theme_update_count + $wordpress_update_count;		$update_title = array();		if ( $wordpress_update_count )			$update_title[] = sprintf(__('%d WordPress Update'), $wordpress_update_count);		if ( $plugin_update_count )			$update_title[] = sprintf(_n('%d Plugin Update', '%d Plugin Updates', $plugin_update_count), $plugin_update_count);		if ( $theme_update_count )			$update_title[] = sprintf(_n('%d Theme Update', '%d Themes Updates', $theme_update_count), $theme_update_count);		$update_title = !empty($update_title) ? esc_attr(implode(', ', $update_title)) : '';		$submenu[ 'index.php' ][10] = array( sprintf( __('Updates %s'), "<span class='update-plugins count-$update_count' title='$update_title'><span class='update-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'install_plugins',  'update-core.php');		unset($plugin_update_count, $theme_update_count, $wordpress_update_count, $update_count, $update_title);	}}$menu[4] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );$menu[5] = array( __('Posts'), 'edit_posts', 'edit.php', '', 'open-if-no-js menu-top menu-icon-post', 'menu-posts', 'div' );	$submenu['edit.php'][5]  = array( __('Posts'), 'edit_posts', 'edit.php' );	/* translators: add new post */	$submenu['edit.php'][10]  = array( _x('Add New', 'post'), 'edit_posts', 'post-new.php' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('post', (array) $tax->object_type, true) )			continue;		$submenu['edit.php'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[10] = array( __('Media'), 'upload_files', 'upload.php', '', 'menu-top menu-icon-media', 'menu-media', 'div' );	$submenu['upload.php'][5] = array( __('Library'), 'upload_files', 'upload.php');	/* translators: add new file */	$submenu['upload.php'][10] = array( _x('Add New', 'file'), 'upload_files', 'media-new.php');$menu[15] = array( __('Links'), 'manage_links', 'link-manager.php', '', 'menu-top menu-icon-links', 'menu-links', 'div' );	$submenu['link-manager.php'][5] = array( __('Links'), 'manage_links', 'link-manager.php' );	/* translators: add new links */	$submenu['link-manager.php'][10] = array( _x('Add New', 'link'), 'manage_links', 'link-add.php' );	$submenu['link-manager.php'][15] = array( __('Link Categories'), 'manage_categories', 'edit-link-categories.php' );$menu[20] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page', '', 'menu-top menu-icon-page', 'menu-pages', 'div' );	$submenu['edit.php?post_type=page'][5] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page' );	/* translators: add new page */	$submenu['edit.php?post_type=page'][10] = array( _x('Add New', 'page'), 'edit_pages', 'post-new.php?post_type=page' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('page', (array) $tax->object_type, true) )			continue;		$submenu['edit.php?post_type=page'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[25] = array( sprintf( __('Comments %s'), "<span id='awaiting-mod' class='count-$awaiting_mod'><span class='pending-count'>" . number_format_i18n($awaiting_mod) . "</span></span>" ), 'edit_posts', 'edit-comments.php', '', 'menu-top menu-icon-comments', 'menu-comments', 'div' );$_wp_last_object_menu = 25; // The index of the last top-level menu in the object menu groupforeach ( (array) get_post_types( array('show_ui' => true, '_builtin' => false) ) as $ptype ) {	$ptype_obj = get_post_type_object( $ptype );	$ptype_menu_position = is_int( $ptype_obj->menu_position ) ? $ptype_obj->menu_position : $_wp_last_object_menu++; // If we're to use $_wp_last_object_menu, increment it first.	$ptype_for_id = sanitize_html_class( $ptype );	if ( is_string( $ptype_obj->menu_icon ) ) {		$menu_icon   = esc_url( $ptype_obj->menu_icon );		$ptype_class = $ptype_for_id;	} else {		$menu_icon   = 'div';		$ptype_class = 'post';	}	// if $ptype_menu_position is already populated or will be populated by a hard-coded value below, increment the position.	$core_menu_positions = array(59, 60, 65, 70, 75, 80, 85, 99);	while ( isset($menu[$ptype_menu_position]) || in_array($ptype_menu_position, $core_menu_positions) )		$ptype_menu_position++;	$menu[$ptype_menu_position] = array( esc_attr( $ptype_obj->labels->name ), $ptype_obj->cap->edit_posts, "edit.php?post_type=$ptype", '', 'menu-top menu-icon-' . $ptype_class, 'menu-posts-' . $ptype_for_id, $menu_icon );	$submenu["edit.php?post_type=$ptype"][5]  = array( $ptype_obj->labels->name, $ptype_obj->cap->edit_posts,  "edit.php?post_type=$ptype");	$submenu["edit.php?post_type=$ptype"][10]  = array( $ptype_obj->labels->add_new, $ptype_obj->cap->edit_posts, "post-new.php?post_type=$ptype" );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array($ptype, (array) $tax->object_type, true) )			continue;		$submenu["edit.php?post_type=$ptype"][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, "edit-tags.php?taxonomy=$tax->name&amp;post_type=$ptype" );	}}unset($ptype, $ptype_obj);$menu[59] = array( '', 'read', 'separator2', '', 'wp-menu-separator' );if ( current_user_can( 'switch_themes') ) {	$menu[60] = array( __('Appearance'), 'switch_themes', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'switch_themes', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php');} else {	$menu[60] = array( __('Appearance'), 'edit_theme_options', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'edit_theme_options', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php' );}// Add 'Editor' to the bottom of the Appearence menu.add_action('admin_menu', '_add_themes_utility_last', 101);function _add_themes_utility_last() {	// Must use API on the admin_menu hook, direct modification is only possible on/before the _admin_menu hook	add_submenu_page('themes.php', _x('Editor', 'theme editor'), _x('Editor', 'theme editor'), 'edit_themes', 'theme-editor.php');}$update_plugins = get_site_transient( 'update_plugins' );$update_count = 0;if ( !empty($update_plugins->response) )	$update_count = count( $update_plugins->response );$menu_perms = get_site_option('menu_items', array());if ( is_super_admin() || ( is_multisite() && isset($menu_perms['plugins']) && $menu_perms['plugins'] ) ) {	$menu[65] = array( sprintf( __('Plugins %s'), "<span class='update-plugins count-$update_count'><span class='plugin-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'activate_plugins', 'plugins.php', '', 'menu-top menu-icon-plugins', 'menu-plugins', 'div' );		$submenu['plugins.php'][5]  = array( __('Plugins'), 'activate_plugins', 'plugins.php' );		/* translators: add new plugin */		$submenu['plugins.php'][10] = array(_x('Add New', 'plugin'), 'install_plugins', 'plugin-install.php');		$submenu['plugins.php'][15] = array( _x('Editor', 'plugin editor'), 'edit_plugins', 'plugin-editor.php' );}unset($menu_perms, $update_plugins, $update_count);if ( current_user_can('list_users') )	$menu[70] = array( __('Users'), 'list_users', 'users.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );else	$menu[70] = array( __('Profile'), 'read', 'profile.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );if ( current_user_can('list_users') ) {	$_wp_real_parent_file['profile.php'] = 'users.php'; // Back-compat for plugins adding submenus to profile.php.	$submenu['users.php'][5] = array(__('Users'), 'list_users', 'users.php');	$submenu['users.php'][10] = array(_x('Add New', 'user'), 'create_users', 'user-new.php');	$submenu['users.php'][15] = array(__('Your Profile'), 'read', 'profile.php');} else {	$_wp_real_parent_file['users.php'] = 'profile.php';	$submenu['profile.php'][5] = array(__('Your Profile'), 'read', 'profile.php');	$submenu['profile.php'][10] = array(__('Add New User'), 'create_users', 'user-new.php');}$menu[75] = array( __('Tools'), 'edit_posts', 'tools.php', '', 'menu-top menu-icon-tools', 'menu-tools', 'div' );	$submenu['tools.php'][5] = array( __('Tools'), 'edit_posts', 'tools.php' );	$submenu['tools.php'][10] = array( __('Import'), 'import', 'import.php' );	$submenu['tools.php'][15] = array( __('Export'), 'import', 'export.php' );	if ( is_multisite() && !is_main_site() )		$submenu['tools.php'][25] = array( __('Delete Site'), 'manage_options', 'ms-delete-site.php' );	if ( ( ! is_multisite() || defined( 'MULTISITE' ) ) && defined('WP_ALLOW_MULTISITE') && WP_ALLOW_MULTISITE && is_super_admin() )		$submenu['tools.php'][50] = array(__('Network'), 'manage_options', 'network.php');$menu[80] = array( __('Settings'), 'manage_options', 'options-general.php', '', 'menu-top menu-icon-settings', 'menu-settings', 'div' );	$submenu['options-general.php'][10] = array(_x('General', 'settings screen'), 'manage_options', 'options-general.php');	$submenu['options-general.php'][15] = array(__('Writing'), 'manage_options', 'options-writing.php');	$submenu['options-general.php'][20] = array(__('Reading'), 'manage_options', 'options-reading.php');	$submenu['options-general.php'][25] = array(__('Discussion'), 'manage_options', 'options-discussion.php');	$submenu['options-general.php'][30] = array(__('Media'), 'manage_options', 'options-media.php');	$submenu['options-general.php'][35] = array(__('Privacy'), 'manage_options', 'options-privacy.php');	$submenu['options-general.php'][40] = array(__('Permalinks'), 'manage_options', 'options-permalink.php');$_wp_last_utility_menu = 80; // The index of the last top-level menu in the utility menu group$menu[99] = array( '', 'read', 'separator-last', '', 'wp-menu-separator-last' );// Back-compat for old top-levels$_wp_real_parent_file['post.php'] = 'edit.php';$_wp_real_parent_file['post-new.php'] = 'edit.php';$_wp_real_parent_file['edit-pages.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['page-new.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['wpmu-admin.php'] = 'ms-admin.php';do_action('_admin_menu');// Create list of page plugin hook names.foreach ($menu as $menu_page) {	if ( false !== $pos = strpos($menu_page[2], '?') ) {		// Handle post_type=post|page|foo pages.		$hook_name = substr($menu_page[2], 0, $pos);		$hook_args = substr($menu_page[2], $pos + 1);		wp_parse_str($hook_args, $hook_args);		// Set the hook name to be the post type.		if ( isset($hook_args['post_type']) )			$hook_name = $hook_args['post_type'];		else			$hook_name = basename($hook_name, '.php');		unset($hook_args);	} else {		$hook_name = basename($menu_page[2], '.php');	}	$hook_name = sanitize_title($hook_name);	// ensure we're backwards compatible	$compat = array(		'index' => 'dashboard',		'edit' => 'posts',		'post' => 'posts',		'upload' => 'media',		'link-manager' => 'links',		'edit-pages' => 'pages',		'page' => 'pages',		'edit-comments' => 'comments',		'options-general' => 'settings',		'themes' => 'appearance',		);	if ( isset($compat[$hook_name]) )		$hook_name = $compat[$hook_name];	elseif ( !$hook_name )		continue;	$admin_page_hooks[$menu_page[2]] = $hook_name;}unset($menu_page);$_wp_submenu_nopriv = array();$_wp_menu_nopriv = array();// Loop over submenus and remove pages for which the user does not have privs.foreach ( array( 'submenu' ) as $sub_loop ) {	foreach ($$sub_loop as $parent => $sub) {		foreach ($sub as $index => $data) {			if ( ! current_user_can($data[1]) ) {				unset(${$sub_loop}[$parent][$index]);				$_wp_submenu_nopriv[$parent][$data[2]] = true;			}		}		unset($index, $data);		if ( empty(${$sub_loop}[$parent]) )			unset(${$sub_loop}[$parent]);	}	unset($sub, $parent);}unset($sub_loop);// Loop over the top-level menu.// Menus for which the original parent is not accessible due to lack of privs will have the next// submenu in line be assigned as the new menu parent.foreach ( $menu as $id => $data ) {	if ( empty($submenu[$data[2]]) )		continue;	$subs = $submenu[$data[2]];	$first_sub = array_shift($subs);	$old_parent = $data[2];	$new_parent = $first_sub[2];	// If the first submenu is not the same as the assigned parent,	// make the first submenu the new parent.	if ( $new_parent != $old_parent ) {		$_wp_real_parent_file[$old_parent] = $new_parent;		$menu[$id][2] = $new_parent;		foreach ($submenu[$old_parent] as $index => $data) {			$submenu[$new_parent][$index] = $submenu[$old_parent][$index];			unset($submenu[$old_parent][$index]);		}		unset($submenu[$old_parent], $index);		if ( isset($_wp_submenu_nopriv[$old_parent]) )			$_wp_submenu_nopriv[$new_parent] = $_wp_submenu_nopriv[$old_parent];	}}unset($id, $data, $subs, $first_sub, $old_parent, $new_parent);do_action('admin_menu', '');// Remove menus that have no accessible submenus and require privs that the user does not have.// Run re-parent loop again.foreach ( $menu as $id => $data ) {	if ( ! current_user_can($data[1]) )		$_wp_menu_nopriv[$data[2]] = true;	// If submenu is empty...	if ( empty($submenu[$data[2]]) ) {		// And user doesn't have privs, remove menu.		if ( isset( $_wp_menu_nopriv[$data[2]] ) ) {			unset($menu[$id]);		}	}}unset($id, $data);// Remove any duplicated seperators$seperator_found = false;foreach ( $menu as $id => $data ) {	if ( 0 == strcmp('wp-menu-separator', $data[4] ) ) {		if (false == $seperator_found) {			$seperator_found = true;		} else {			unset($menu[$id]);			$seperator_found = false;		}	} else {		$seperator_found = false;	}}unset($id, $data);function add_cssclass($add, $class) {	$class = empty($class) ? $add : $class .= ' ' . $add;	return $class;}function add_menu_classes($menu) {	$first = $lastorder = false;	$i = 0;	$mc = count($menu);	foreach ( $menu as $order => $top ) {		$i++;		if ( 0 == $order ) { // dashboard is always shown/single			$menu[0][4] = add_cssclass('menu-top-first', $top[4]);			$lastorder = 0;			continue;		}		if ( 0 === strpos($top[2], 'separator') ) { // if separator			$first = true;			$c = $menu[$lastorder][4];			$menu[$lastorder][4] = add_cssclass('menu-top-last', $c);			continue;		}		if ( $first ) {			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-first', $c);			$first = false;		}		if ( $mc == $i ) { // last item			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-last', $c);		}		$lastorder = $order;	}	return apply_filters( 'add_menu_classes', $menu );}uksort($menu, "strnatcasecmp"); // make it all prettyif ( apply_filters('custom_menu_order', false) ) {	$menu_order = array();	foreach ( $menu as $menu_item ) {		$menu_order[] = $menu_item[2];	}	unset($menu_item);	$default_menu_order = $menu_order;	$menu_order = apply_filters('menu_order', $menu_order);	$menu_order = array_flip($menu_order);	$default_menu_order = array_flip($default_menu_order);	function sort_menu($a, $b) {		global $menu_order, $default_menu_order;		$a = $a[2];		$b = $b[2];		if ( isset($menu_order[$a]) && !isset($menu_order[$b]) ) {			return -1;		} elseif ( !isset($menu_order[$a]) && isset($menu_order[$b]) ) {			return 1;		} elseif ( isset($menu_order[$a]) && isset($menu_order[$b]) ) {			if ( $menu_order[$a] == $menu_order[$b] )				return 0;			return ($menu_order[$a] < $menu_order[$b]) ? -1 : 1;		} else {			return ($default_menu_order[$a] <= $default_menu_order[$b]) ? -1 : 1;		}	}	usort($menu, 'sort_menu');	unset($menu_order, $default_menu_order);}$menu = add_menu_classes($menu);if ( !user_can_access_admin_page() ) {	do_action('admin_page_access_denied');	wp_die( __('You do not have sufficient permissions to access this page.') );}?>
<?php/** * Import WordPress Administration Panel * * @package WordPress * @subpackage Administration */define('WP_LOAD_IMPORTERS', true);/** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('import') )	wp_die(__('You do not have sufficient permissions to import content in this site.'));$title = __('Import');add_contextual_help($current_screen,	'<p>' . __('This screen lists links to plugins to import data from blogging/content management platforms. Choose the platform you want to import from, and click Install Now when you are prompted in the popup window. If your platform is not listed, click the link to search the plugin directory for other importer plugins to see if there is one for your platform.') . '</p>' .	'<p>' . __('In previous versions of WordPress, all the importers were built-in, but they have been turned into plugins as of version 3.0 since most people only use them once or infrequently.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Import_SubPanel" target="_blank">Import Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$popular_importers = array();if ( current_user_can('install_plugins') )	$popular_importers = array(		'blogger' => array( __('Blogger'), __('Install the Blogger importer to import posts, comments, and users from a Blogger blog.'), 'install' ),		'wpcat2tag' => array(__('Categories and Tags Converter'), __('Install the category/tag converter to convert existing categories to tags or tags to categories, selectively.'), 'install', 'wp-cat2tag' ),		'livejournal' => array( __( 'LiveJournal' ), __( 'Install the LiveJournal importer to import posts from LiveJournal using their API.' ), 'install' ),		'movabletype' => array( __('Movable Type and TypePad'), __('Install the Movable Type importer to import posts and comments from a Movable Type or TypePad blog.'), 'install', 'mt' ),		'opml' => array( __('Blogroll'), __('Install the blogroll importer to import links in OPML format.'), 'install' ),		'rss' => array( __('RSS'), __('Install the RSS importer to import posts from an RSS feed.'), 'install' ),		'wordpress' => array( 'WordPress', __('Install the WordPress importer to import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.'), 'install' )	);if ( ! empty( $_GET['invalid'] ) && !empty($popular_importers[$_GET['invalid']][3]) ) {	wp_redirect("import.php?import=" . $popular_importers[$_GET['invalid']][3]);	exit;}add_thickbox();require_once ('admin-header.php');$parent_file = 'tools.php';?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( ! empty( $_GET['invalid'] ) ) : ?>	<div class="error"><p><strong><?php _e('ERROR:')?></strong> <?php printf( __('The <strong>%s</strong> importer is invalid or is not installed.'), esc_html( $_GET['invalid'] ) ); ?></p></div><?php endif; ?><p><?php _e('If you have posts or comments in another system, WordPress can import those into this site. To get started, choose a system to import from below:'); ?></p><?php// Load all importers so that they can register.$import_loc = 'wp-admin/import';$import_root = ABSPATH.$import_loc;$imports_dir = @ opendir($import_root);if ($imports_dir) {	while (($file = readdir($imports_dir)) !== false) {		if ($file{0} == '.') {			continue;		} elseif (substr($file, -4) == '.php') {			require_once($import_root . '/' . $file);		}	}}@closedir($imports_dir);$importers = get_importers();// If a popular importer is not registered, create a dummy registration that links to the plugin installer.foreach ( $popular_importers as $pop_importer => $pop_data ) {	if ( isset($importers[$pop_importer] ) )		continue;	if ( isset( $pop_data[3] ) && isset( $importers[ $pop_data[3] ] ) )		continue;	$importers[$pop_importer] = $popular_importers[$pop_importer];}if (empty ($importers)) {	echo '<p>'.__('No importers are available.').'</p>'; // TODO: make more helpful} else {	uasort($importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));?><table class="widefat" cellspacing="0"><?php	$style = '';	foreach ($importers as $id => $data) {		$style = ('class="alternate"' == $style || 'class="alternate active"' == $style) ? '' : 'alternate';		$action = '';		if ( 'install' == $data[2] ) {			$plugin_slug = $id . '-importer';			if ( file_exists( WP_PLUGIN_DIR . '/' . $plugin_slug ) ) {				// Looks like Importer is installed, But not active				$plugins = get_plugins( '/' . $plugin_slug );				if ( !empty($plugins) ) {					$keys = array_keys($plugins);					$plugin_file = $plugin_slug . '/' . $keys[0];					$action = '<a href="' . esc_url(wp_nonce_url(admin_url('plugins.php?action=activate&plugin=' . $plugin_file . '&from=import'), 'activate-plugin_' . $plugin_file)) .											'"title="' . esc_attr__('Activate importer') . '"">' . $data[0] . '</a>';				}			}			if ( empty($action) )				$action = '<a href="' . esc_url(admin_url('plugin-install.php?tab=plugin-information&plugin=' . $plugin_slug .										'&from=import&TB_iframe=true&width=600&height=550')) . '" class="thickbox" title="' .										esc_attr__('Install importer') . '">' . $data[0] . '</a>';		} else {			$action = "<a href='" . esc_url("admin.php?import=$id") . "' title='" . esc_attr( wptexturize(strip_tags($data[1])) ) ."'>{$data[0]}</a>";		}		if ($style != '')			$style = 'class="'.$style.'"';		echo "			<tr $style>				<td class='import-system row-title'>$action</td>				<td class='desc'>{$data[1]}</td>			</tr>";	}?></table><?php}if ( current_user_can('install_plugins') )	echo '<p>' . sprintf('If the importer you need is not listed, <a href="%s">search the plugins directory</a> to see if an importer is available.', esc_url(admin_url('plugin-install.php?tab=search&type=tag&s=importer')) ) . '</p>';?></div><?phpinclude ('admin-footer.php');?>
<?php/** * Post advanced form for inclusion in the administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');wp_enqueue_script('post');if ( post_type_supports($post_type, 'editor') ) {	if ( user_can_richedit() )		wp_enqueue_script('editor');	wp_enqueue_script('word-count');}if ( post_type_supports($post_type, 'editor') || post_type_supports($post_type, 'thumbnail') ) {	add_thickbox();	wp_enqueue_script('media-upload');}/** * Post ID global * @name $post_ID * @var int */$post_ID = isset($post_ID) ? (int) $post_ID : 0;$temp_ID = isset($temp_ID) ? (int) $temp_ID : 0;$user_ID = isset($user_ID) ? (int) $user_ID : 0;$action = isset($action) ? $action : '';$messages = array();$messages['post'] = array(	 0 => '', // Unused. Messages start at index 1.	 1 => sprintf( __('Post updated. <a href="%s">View post</a>'), esc_url( get_permalink($post_ID) ) ),	 2 => __('Custom field updated.'),	 3 => __('Custom field deleted.'),	 4 => __('Post updated.'),	/* translators: %s: date and time of the revision */	 5 => isset($_GET['revision']) ? sprintf( __('Post restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,	 6 => sprintf( __('Post published. <a href="%s">View post</a>'), esc_url( get_permalink($post_ID) ) ),	 7 => __('Post saved.'),	 8 => sprintf( __('Post submitted. <a target="_blank" href="%s">Preview post</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),	 9 => sprintf( __('Post scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview post</a>'),		// translators: Publish box date format, see http://php.net/date		date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),	10 => sprintf( __('Post draft updated. <a target="_blank" href="%s">Preview post</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),);$messages['page'] = array(	 0 => '', // Unused. Messages start at index 1.	 1 => sprintf( __('Page updated. <a href="%s">View page</a>'), esc_url( get_permalink($post_ID) ) ),	 2 => __('Custom field updated.'),	 3 => __('Custom field deleted.'),	 4 => __('Page updated.'),	 5 => isset($_GET['revision']) ? sprintf( __('Page restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,	 6 => sprintf( __('Page published. <a href="%s">View page</a>'), esc_url( get_permalink($post_ID) ) ),	 7 => __('Page saved.'),	 8 => sprintf( __('Page submitted. <a target="_blank" href="%s">Preview page</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),	 9 => sprintf( __('Page scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview page</a>'), date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),	10 => sprintf( __('Page draft updated. <a target="_blank" href="%s">Preview page</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),);$messages = apply_filters( 'post_updated_messages', $messages );$message = false;if ( isset($_GET['message']) ) {	$_GET['message'] = absint( $_GET['message'] );	if ( isset($messages[$post_type][$_GET['message']]) )		$message = $messages[$post_type][$_GET['message']];	elseif ( !isset($messages[$post_type]) && isset($messages['post'][$_GET['message']]) )		$message = $messages['post'][$_GET['message']];}$notice = false;$form_extra = '';if ( 'auto-draft' == $post->post_status ) {	if ( 'edit' == $action )		$post->post_title = '';	$autosave = false;	$form_extra .= "<input type='hidden' id='auto_draft' name='auto_draft' value='1' />";} else {	$autosave = wp_get_post_autosave( $post_ID );}$form_action = 'editpost';$nonce_action = 'update-' . $post_type . '_' . $post_ID;$form_extra .= "<input type='hidden' id='post_ID' name='post_ID' value='" . esc_attr($post_ID) . "' />";// Detect if there exists an autosave newer than the post and if that autosave is different than the postif ( $autosave && mysql2date( 'U', $autosave->post_modified_gmt, false ) > mysql2date( 'U', $post->post_modified_gmt, false ) ) {	foreach ( _wp_post_revision_fields() as $autosave_field => $_autosave_field ) {		if ( normalize_whitespace( $autosave->$autosave_field ) != normalize_whitespace( $post->$autosave_field ) ) {			$notice = sprintf( __( 'There is an autosave of this post that is more recent than the version below.  <a href="%s">View the autosave</a>' ), get_edit_post_link( $autosave->ID ) );			break;		}	}	unset($autosave_field, $_autosave_field);}$post_type_object = get_post_type_object($post_type);// All meta boxes should be defined and added before the first do_meta_boxes() call (or potentially during the do_meta_boxes action).require_once('./includes/meta-boxes.php');add_meta_box('submitdiv', __('Publish'), 'post_submit_meta_box', $post_type, 'side', 'core');// all taxonomiesforeach ( get_object_taxonomies($post_type) as $tax_name ) {	$taxonomy = get_taxonomy($tax_name);	if ( ! $taxonomy->show_ui )		continue;	$label = $taxonomy->labels->name;	if ( !is_taxonomy_hierarchical($tax_name) )		add_meta_box('tagsdiv-' . $tax_name, $label, 'post_tags_meta_box', $post_type, 'side', 'core', array( 'taxonomy' => $tax_name ));	else		add_meta_box($tax_name . 'div', $label, 'post_categories_meta_box', $post_type, 'side', 'core', array( 'taxonomy' => $tax_name ));}if ( post_type_supports($post_type, 'page-attributes') )	add_meta_box('pageparentdiv', 'page' == $post_type ? __('Page Attributes') : __('Attributes'), 'page_attributes_meta_box', $post_type, 'side', 'core');if ( current_theme_supports( 'post-thumbnails', $post_type ) && post_type_supports( $post_type, 'thumbnail' )	&& ( ! is_multisite() || ( ( $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ) ) && ! empty( $mu_media_buttons['image'] ) ) ) )		add_meta_box('postimagediv', __('Featured Image'), 'post_thumbnail_meta_box', $post_type, 'side', 'low');if ( post_type_supports($post_type, 'excerpt') )	add_meta_box('postexcerpt', __('Excerpt'), 'post_excerpt_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'trackbacks') )	add_meta_box('trackbacksdiv', __('Send Trackbacks'), 'post_trackback_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'custom-fields') )	add_meta_box('postcustom', __('Custom Fields'), 'post_custom_meta_box', $post_type, 'normal', 'core');do_action('dbx_post_advanced');if ( post_type_supports($post_type, 'comments') )	add_meta_box('commentstatusdiv', __('Discussion'), 'post_comment_status_meta_box', $post_type, 'normal', 'core');if ( ('publish' == $post->post_status || 'private' == $post->post_status) && post_type_supports($post_type, 'comments') )	add_meta_box('commentsdiv', __('Comments'), 'post_comment_meta_box', $post_type, 'normal', 'core');if ( !( 'pending' == $post->post_status && !current_user_can( $post_type_object->cap->publish_posts ) ) )	add_meta_box('slugdiv', __('Slug'), 'post_slug_meta_box', $post_type, 'normal', 'core');if ( post_type_supports($post_type, 'author') ) {	$authors = get_editable_user_ids( $current_user->id ); // TODO: ROLE SYSTEM	if ( $post->post_author && !in_array($post->post_author, $authors) )		$authors[] = $post->post_author;	if ( ( $authors && count( $authors ) > 1 ) || is_super_admin() )		add_meta_box('authordiv', __('Author'), 'post_author_meta_box', $post_type, 'normal', 'core');}if ( post_type_supports($post_type, 'revisions') && 0 < $post_ID && wp_get_post_revisions( $post_ID ) )	add_meta_box('revisionsdiv', __('Revisions'), 'post_revisions_meta_box', $post_type, 'normal', 'core');do_action('add_meta_boxes', $post_type, $post);do_action('add_meta_boxes_' . $post_type, $post);do_action('do_meta_boxes', $post_type, 'normal', $post);do_action('do_meta_boxes', $post_type, 'advanced', $post);do_action('do_meta_boxes', $post_type, 'side', $post);if ( 'post' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('The title field and the big Post Editing Area are fixed in place, but you can reposition all the other boxes that allow you to add metadata to your post using drag and drop, and can minimize or expand them by clicking the title bar of the box. You can also hide any of the boxes by using the Screen Options tab, where you can also choose a 1- or 2-column layout for this screen.') . '</p>' .	'<p>' . __('<strong>Title</strong> - Enter a title for your post. After you enter a title, you&#8217;ll see the permalink below, which you can edit.') . '</p>' .	'<p>' . __('<strong>Post editor</strong> - Enter the text for your post. There are two modes of editing: Visual and HTML. Choose the mode by clicking on the appropriate tab. Visual mode gives you a WYSIWYG editor. Click the last icon in the row to get a second row of controls. The HTML mode allows you to enter raw HTML along with your post text. You can insert media files by clicking the icons above the post editor and following the directions.') . '</p>' .	'<p>' . __('<strong>Publish</strong> - You can set the terms of publishing your post in the Publish box. For Status, Visibility, and Publish (immediately), click on the Edit link to reveal more options. Visibility includes options for password-protecting a post or making it stay at the top of your blog indefinitely (sticky). Publish (immediately) allows you to set a future or past date and time, so you can schedule a post to be published in the future or backdate a post.') . '</p>' .	'<p>' . __('<strong>Featured Image</strong> - This allows you to associate an image with your post without inserting it. This is usually useful only if your theme makes use of the featured image as a post thumbnail on the home page, a custom header, etc.') . '</p>' .	'<p>' . __('<strong>Send Trackbacks</strong> - Trackbacks are a way to notify legacy blog systems that you&#8217;ve linked to them. Enter the URL(s) you want to send trackbacks. If you link to other WordPress sites they&#8217;ll be notified automatically using pingbacks, and this field is unnecessary.') . '</p>' .	'<p>' . __('<strong>Discussion</strong> - You can turn comments and pings on or off, and if there are comments on the post, you can see them here and moderate them.') . '</p>' .	'<p>' . sprintf(__('You can also create posts with the <a href="%s">Press This bookmarklet</a>.'), 'options-writing.php') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Writing_Posts" target="_blank">Documentation on Writing Posts</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} elseif ( 'page' == $post_type ) {	add_contextual_help($current_screen, '<p>' . __('Pages are similar to Posts in that they have a title, body text, and associated metadata, but they are different in that they are not part of the chronological blog stream, kind of like permanent posts. Pages are not categorized or tagged, but can have a hierarchy. You can nest Pages under other Pages by making one the &#8220;Parent&#8221; of the other, creating a group of Pages.') . '</p>' .	'<p>' . __('Creating a Page is very similar to creating a Post, and the screens can be customized in the same way using drag and drop, the Screen Options tab, and expanding/collapsing boxes as you choose. The Page editor mostly works the same Post editor, but there are some Page-specific features in the Page Attributes box:') . '</p>' .	'<p>' . __('<strong>Parent</strong> - You can arrange your pages in hierarchies. For example, you could have an &#8220;About&#8221; page that has &#8220;Life Story&#8221; and &#8220;My Dog&#8221; pages under it. There are no limits to how many levels you can nest pages.') . '</p>' .	'<p>' . __('<strong>Template</strong> - Some themes have custom templates you can use for certain pages that might have additional features or custom layouts. If so, you&#8217;ll see them in this dropdown menu.') . '</p>' .	'<p>' . __('<strong>Order</strong> - Pages are usually ordered alphabetically, but you can choose your own order by entering a number (1 for first, etc.) in this field.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Pages_Add_New_SubPanel" target="_blank">Page Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( $notice ) : ?><div id="notice" class="error"><p><?php echo $notice ?></p></div><?php endif; ?><?php if ( $message ) : ?><div id="message" class="updated"><p><?php echo $message; ?></p></div><?php endif; ?><form name="post" action="post.php" method="post" id="post"<?php do_action('post_edit_form_tag'); ?>><?php wp_nonce_field($nonce_action); ?><input type="hidden" id="user-id" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" id="hiddenaction" name="action" value="<?php echo esc_attr($form_action) ?>" /><input type="hidden" id="originalaction" name="originalaction" value="<?php echo esc_attr($form_action) ?>" /><input type="hidden" id="post_author" name="post_author" value="<?php echo esc_attr( $post->post_author ); ?>" /><input type="hidden" id="post_type" name="post_type" value="<?php echo esc_attr($post_type) ?>" /><input type="hidden" id="original_post_status" name="original_post_status" value="<?php echo esc_attr($post->post_status) ?>" /><input type="hidden" id="referredby" name="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?phpif ( 'draft' != $post->post_status )	wp_original_referer_field(true, 'previous');echo $form_extra;wp_nonce_field( 'autosave', 'autosavenonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?php('page' == $post_type) ? do_action('submitpage_box') : do_action('submitpost_box');$side_meta_boxes = do_meta_boxes($post_type, 'side', $post);?></div><div id="post-body"><div id="post-body-content"><?php if ( post_type_supports($post_type, 'title') ) { ?><div id="titlediv"><div id="titlewrap">	<label class="hide-if-no-js" style="visibility:hidden" id="title-prompt-text" for="title"><?php _e('Enter title here') ?></label>	<input type="text" name="post_title" size="30" tabindex="1" value="<?php echo esc_attr( htmlspecialchars( $post->post_title ) ); ?>" id="title" autocomplete="off" /></div><div class="inside"><?php$sample_permalink_html = get_sample_permalink_html($post->ID);$shortlink = wp_get_shortlink($post->ID, 'post');if ( !empty($shortlink) )    $sample_permalink_html .= '<input id="shortlink" type="hidden" value="' . esc_attr($shortlink) . '" /><a href="#" class="button" onclick="prompt(&#39;URL:&#39;, jQuery(\'#shortlink\').val()); return false;">' . __('Get Shortlink') . '</a>';if ( !( 'pending' == $post->post_status && !current_user_can( $post_type_object->cap->publish_posts ) ) ) { ?>	<div id="edit-slug-box">	<?php		if ( ! empty($post->ID) && ! empty($sample_permalink_html) && 'auto-draft' != $post->post_status )			echo $sample_permalink_html;	?>	</div><?php}?></div><?phpwp_nonce_field( 'samplepermalink', 'samplepermalinknonce', false );?></div><?php } ?><?php if ( post_type_supports($post_type, 'editor') ) { ?><div id="<?php echo user_can_richedit() ? 'postdivrich' : 'postdiv'; ?>" class="postarea"><?php the_editor($post->post_content); ?><table id="post-status-info" cellspacing="0"><tbody><tr>	<td id="wp-word-count"></td>	<td class="autosave-info">	<span id="autosave">&nbsp;</span><?php	if ( 'auto-draft' != $post->post_status ) {		echo '<span id="last-edit">';		if ( $last_id = get_post_meta($post_ID, '_edit_last', true) ) {			$last_user = get_userdata($last_id);			printf(__('Last edited by %1$s on %2$s at %3$s'), esc_html( $last_user->display_name ), mysql2date(get_option('date_format'), $post->post_modified), mysql2date(get_option('time_format'), $post->post_modified));		} else {			printf(__('Last edited on %1$s at %2$s'), mysql2date(get_option('date_format'), $post->post_modified), mysql2date(get_option('time_format'), $post->post_modified));		}		echo '</span>';	} ?>	</td></tr></tbody></table></div><?php}do_meta_boxes($post_type, 'normal', $post);( 'page' == $post_type ) ? do_action('edit_page_form') : do_action('edit_form_advanced');do_meta_boxes($post_type, 'advanced', $post);do_action('dbx_post_sidebar'); ?></div></div><br class="clear" /></div><!-- /poststuff --></form></div><?php wp_comment_reply(); ?><?php if ((isset($post->post_title) && '' == $post->post_title) || (isset($_GET['message']) && 2 > $_GET['message'])) : ?><script type="text/javascript">try{document.post.title.focus();}catch(e){}</script><?php endif; ?>
<?php/** * Edit Posts Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );$_GET['post_type'] = $post_type;$post_type_object = get_post_type_object($post_type);if ( !current_user_can($post_type_object->cap->edit_posts) )	wp_die(__('Cheatin&#8217; uh?'));// Back-compat for viewing comments of an entryif ( $_redirect = intval( max( @$_GET['p'], @$_GET['attachment_id'], @$_GET['page_id'] ) ) ) {	wp_redirect( admin_url('edit-comments.php?p=' . $_redirect ) );	exit;} else {	unset( $_redirect );}if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit.php?post_type=$post_type";	$post_new_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'edit.php';	$post_new_file = 'post-new.php';}$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$per_page = 'edit_' . $post_type . '_per_page';$per_page = (int) get_user_option( $per_page );if ( empty( $per_page ) || $per_page < 1 )	$per_page = 20;// @todo filter based on type$per_page = apply_filters( 'edit_posts_per_page', $per_page );// Handle bulk actionsif ( isset($_GET['doaction']) || isset($_GET['doaction2']) || isset($_GET['delete_all']) || isset($_GET['delete_all2']) || isset($_GET['bulk_edit']) ) {	check_admin_referer('bulk-posts');	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), wp_get_referer() );	if ( strpos($sendback, 'post.php') !== false )		$sendback = admin_url($post_new_file);	if ( isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {		$post_status = preg_replace('/[^a-z0-9_-]+/i', '', $_GET['post_status']);		$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_type=%s AND post_status = %s", $post_type, $post_status ) );		$doaction = 'delete';	} elseif ( ( $_GET['action'] != -1 || $_GET['action2'] != -1 ) && ( isset($_GET['post']) || isset($_GET['ids']) ) ) {		$post_ids = isset($_GET['post']) ? array_map( 'intval', (array) $_GET['post'] ) : explode(',', $_GET['ids']);		$doaction = ($_GET['action'] != -1) ? $_GET['action'] : $_GET['action2'];	} else {		wp_redirect( admin_url("edit.php?post_type=$post_type") );	}	switch ( $doaction ) {		case 'trash':			$trashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to move this item to the Trash.') );				if ( !wp_trash_post($post_id) )					wp_die( __('Error in moving to Trash.') );				$trashed++;			}			$sendback = add_query_arg( array('trashed' => $trashed, 'ids' => join(',', $post_ids)), $sendback );			break;		case 'untrash':			$untrashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to restore this item from the Trash.') );				if ( !wp_untrash_post($post_id) )					wp_die( __('Error in restoring from Trash.') );				$untrashed++;			}			$sendback = add_query_arg('untrashed', $untrashed, $sendback);			break;		case 'delete':			$deleted = 0;			foreach( (array) $post_ids as $post_id ) {				$post_del = & get_post($post_id);				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to delete this item.') );				if ( $post_del->post_type == 'attachment' ) {					if ( ! wp_delete_attachment($post_id) )						wp_die( __('Error in deleting...') );				} else {					if ( !wp_delete_post($post_id) )						wp_die( __('Error in deleting...') );				}				$deleted++;			}			$sendback = add_query_arg('deleted', $deleted, $sendback);			break;		case 'edit':			$done = bulk_edit_posts($_GET);			if ( is_array($done) ) {				$done['updated'] = count( $done['updated'] );				$done['skipped'] = count( $done['skipped'] );				$done['locked'] = count( $done['locked'] );				$sendback = add_query_arg( $done, $sendback );			}			break;	}	if ( isset($_GET['action']) )		$sendback = remove_query_arg( array('action', 'action2', 'tags_input', 'post_author', 'comment_status', 'ping_status', '_status',  'post', 'bulk_edit', 'post_view'), $sendback );	wp_redirect($sendback);	exit();} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('inline-edit-post');$user_posts = false;if ( !current_user_can($post_type_object->cap->edit_others_posts) ) {	$user_posts_count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(1) FROM $wpdb->posts WHERE post_type = '%s' AND post_status NOT IN ('trash', 'auto-draft') AND post_author = %d", $post_type, $current_user->ID) );	$user_posts = true;	if ( $user_posts_count && empty($_GET['post_status']) && empty($_GET['all_posts']) && empty($_GET['author']) )		$_GET['author'] = $current_user->ID;}$avail_post_stati = wp_edit_posts_query();if ( $post_type_object->hierarchical )	$num_pages = ceil($wp_query->post_count / $per_page);else	$num_pages = $wp_query->max_num_pages;$title = $post_type_object->labels->name;if ( 'post' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('You can customize the display of this screen in a number of ways:') . '</p>' .	'<ul>' .	'<li>' . __('You can hide/display columns based on your needs and decide how many posts to list per screen using the Screen Options tab.') . '</li>' .	'<li>' . __('You can filter the list of posts by post status using the text links in the upper left to show All, Published, Draft, or Trashed posts. The default view is to show all posts.') . '</li>' .	'<li>' . __('You can view posts in a simple title list or with an excerpt. Choose the view you prefer by clicking on the icons at the top of the list on the right.') . '</li>' .	'<li>' . __('You can refine the list to show only posts in a specific category or from a specific month by using the dropdown menus above the posts list. Click the Filter button after making your selection. You also can refine the list by clicking on the post author, category or tag in the posts list.') . '</li>' .	'</ul>' .	'<p>' . __('Hovering over a row in the posts list will display action links that allow you to manage your post. You can perform the following actions:') . '</p>' .	'<ul>' .	'<li>' . __('Edit takes you to the editing screen for that post. You can also reach that screen by clicking on the post title.') . '</li>' .	'<li>' . __('Quick Edit provides inline access to the metadata of your post, allowing you to update post details without leaving this screen.') . '</li>' .	'<li>' . __('Trash removes your post from this list and places it in the trash, from which you can permanently delete it.') . '</li>' .	'<li>' . __('Preview will show you what your draft post will look like if you publish it. View will take you to your live site to view the post. Which link is available depends on your post&#8217;s status.') . '</li>' .	'</ul>' .	'<p>' . __('You can also edit multiple posts at once. Select the posts you want to edit using the checkboxes, select Edit from the Bulk Actions menu and click Apply. You will be able to change the metadata (categories, author, etc.) for all selected posts at once. To remove a post from the grouping, just click the x next to its name in the Bulk Edit area that appears.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Posts_Edit_SubPanel" target="_blank">Edit Posts Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} elseif ( 'page' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('Pages are similar to to Posts in that they have a title, body text, and associated metadata, but they are different in that they are not part of the chronological blog stream, kind of like permanent posts. Pages are not categorized or tagged, but can have a hierarchy. You can nest Pages under other Pages by making one the &#8220;Parent&#8221; of the other, creating a group of Pages.') . '</p>' .	'<p>' . __('Managing Pages is very similar to managing Posts, and the screens can be customized in the same way.') . '</p>' .	'<p>' . __('You can also perform the same types of actions, including narrowing the list by using the filters, acting on a Page using the action links that appear when you hover over a row, or using the Bulk Actions menu to edit the metadata for multiple Pages at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Pages_Edit_SubPanel" target="_blank">Page Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}require_once('./admin-header.php');if ( empty($_GET['mode']) )	$mode = 'list';else	$mode = esc_attr($_GET['mode']); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $post_type_object->labels->name ); ?> <a href="<?php echo $post_new_file ?>" class="button add-new-h2"><?php echo esc_html($post_type_object->labels->add_new); ?></a> <?phpif ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', get_search_query() ); ?></h2><?phpif ( isset($_GET['posted']) && $_GET['posted'] ) : $_GET['posted'] = (int) $_GET['posted']; ?><div id="message" class="updated"><p><strong><?php _e('This has been saved.'); ?></strong> <a href="<?php echo get_permalink( $_GET['posted'] ); ?>"><?php _e('View Post'); ?></a> | <a href="<?php echo get_edit_post_link( $_GET['posted'] ); ?>"><?php _e('Edit Post'); ?></a></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('posted'), $_SERVER['REQUEST_URI']);endif; ?><?php if ( isset($_GET['locked']) || isset($_GET['skipped']) || isset($_GET['updated']) || isset($_GET['deleted']) || isset($_GET['trashed']) || isset($_GET['untrashed']) ) { ?><div id="message" class="updated"><p><?php if ( isset($_GET['updated']) && (int) $_GET['updated'] ) {	printf( _n( '%s post updated.', '%s posts updated.', $_GET['updated'] ), number_format_i18n( $_GET['updated'] ) );	unset($_GET['updated']);}if ( isset($_GET['skipped']) && (int) $_GET['skipped'] )	unset($_GET['skipped']);if ( isset($_GET['locked']) && (int) $_GET['locked'] ) {	printf( _n( '%s item not updated, somebody is editing it.', '%s items not updated, somebody is editing them.', $_GET['locked'] ), number_format_i18n( $_GET['locked'] ) );	unset($_GET['locked']);}if ( isset($_GET['deleted']) && (int) $_GET['deleted'] ) {	printf( _n( 'Item permanently deleted.', '%s items permanently deleted.', $_GET['deleted'] ), number_format_i18n( $_GET['deleted'] ) );	unset($_GET['deleted']);}if ( isset($_GET['trashed']) && (int) $_GET['trashed'] ) {	printf( _n( 'Item moved to the trash.', '%s items moved to the trash.', $_GET['trashed'] ), number_format_i18n( $_GET['trashed'] ) );	$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;	echo ' <a href="' . esc_url( wp_nonce_url( "edit.php?post_type=$post_type&doaction=undo&action=untrash&ids=$ids", "bulk-posts" ) ) . '">' . __('Undo') . '</a><br />';	unset($_GET['trashed']);}if ( isset($_GET['untrashed']) && (int) $_GET['untrashed'] ) {	printf( _n( 'Item restored from the Trash.', '%s items restored from the Trash.', $_GET['untrashed'] ), number_format_i18n( $_GET['untrashed'] ) );	unset($_GET['undeleted']);}$_SERVER['REQUEST_URI'] = remove_query_arg( array('locked', 'skipped', 'updated', 'deleted', 'trashed', 'untrashed'), $_SERVER['REQUEST_URI'] );?></p></div><?php } ?><form id="posts-filter" action="<?php echo admin_url('edit.php'); ?>" method="get"><ul class="subsubsub"><?phpif ( empty($locked_post_status) ) :$status_links = array();$num_posts = wp_count_posts( $post_type, 'readable' );$class = '';$allposts = '';if ( $user_posts ) {	if ( isset( $_GET['author'] ) && ( $_GET['author'] == $current_user->ID ) )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_type=$post_type&author=$current_user->ID'$class>" . sprintf( _nx( 'Mine <span class="count">(%s)</span>', 'Mine <span class="count">(%s)</span>', $user_posts_count, 'posts' ), number_format_i18n( $user_posts_count ) ) . '</a>';	$allposts = '&all_posts=1';}$total_posts = array_sum( (array) $num_posts );// Subtract post types that are not included in the admin all list.foreach ( get_post_stati( array('show_in_admin_all_list' => false) ) as $state )	$total_posts -= $num_posts->$state;$class = empty($class) && empty($_GET['post_status']) ? ' class="current"' : '';$status_links[] = "<li><a href='edit.php?post_type=$post_type{$allposts}'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_posts, 'posts' ), number_format_i18n( $total_posts ) ) . '</a>';foreach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {	$class = '';	$status_name = $status->name;	if ( !in_array( $status_name, $avail_post_stati ) )		continue;	if ( empty( $num_posts->$status_name ) )		continue;	if ( isset($_GET['post_status']) && $status_name == $_GET['post_status'] )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_status=$status_name&amp;post_type=$post_type'$class>" . sprintf( _n( $status->label_count[0], $status->label_count[1], $num_posts->$status_name ), number_format_i18n( $num_posts->$status_name ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );endif;?></ul><p class="search-box">	<label class="screen-reader-text" for="post-search-input"><?php echo $post_type_object->labels->search_items; ?>:</label>	<input type="text" id="post-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $post_type_object->labels->search_items  ); ?>" class="button" /></p><input type="hidden" name="post_status" class="post_status_page" value="<?php echo !empty($_GET['post_status']) ? esc_attr($_GET['post_status']) : 'all'; ?>" /><input type="hidden" name="post_type" class="post_type_page" value="<?php echo $post_type; ?>" /><input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" /><?php if ( have_posts() ) { ?><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => $num_pages,	'current' => $pagenum));$is_trash = isset($_GET['post_status']) && $_GET['post_status'] == 'trash';?><div class="alignleft actions"><select name="action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-posts'); ?><?php // view filtersif ( !is_singular() ) {$arc_query = $wpdb->prepare("SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = %s ORDER BY post_date DESC", $post_type);$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) {$m = isset($_GET['m']) ? (int)$_GET['m'] : 0;?><select name='m'><option<?php selected( $m, 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( $arc_row->yyear . $arc_row->mmonth == $m )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr("$arc_row->yyear$arc_row->mmonth") . "'>";	echo $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear";	echo "</option>\n";}?></select><?php } ?><?phpif ( is_object_in_taxonomy($post_type, 'category') ) {	$dropdown_options = array('show_option_all' => __('View all categories'), 'hide_empty' => 0, 'hierarchical' => 1,		'show_count' => 0, 'orderby' => 'name', 'selected' => $cat);	wp_dropdown_categories($dropdown_options);}do_action('restrict_manage_posts');?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php }if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><?php if ( $page_links ) { ?><div class="tablenav-pages"><?php	$count_posts = $post_type_object->hierarchical ? $wp_query->post_count : $wp_query->found_posts;	$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',						number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),						number_format_i18n( min( $pagenum * $per_page, $count_posts ) ),						number_format_i18n( $count_posts ),						$page_links						);	echo $page_links_text;	?></div><?php}if ( !$post_type_object->hierarchical ) {?><div class="view-switch">	<a href="<?php echo esc_url(add_query_arg('mode', 'list', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('List View') ?>" alt="<?php _e('List View') ?>" /></a>	<a href="<?php echo esc_url(add_query_arg('mode', 'excerpt', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('Excerpt View') ?>" alt="<?php _e('Excerpt View') ?>" /></a></div><?php } ?><div class="clear"></div></div><div class="clear"></div><?php include( './edit-post-rows.php' ); ?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /><?php if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?><br class="clear" /></div><br class="clear" /></div><?php } else { // have_posts() ?><div class="clear"></div><p><?phpif ( isset($_GET['post_status']) && 'trash' == $_GET['post_status'] )	echo $post_type_object->labels->not_found_in_trash;else	echo $post_type_object->labels->not_found;?></p><?php } ?></form><?php inline_edit_row( $current_screen ); ?><div id="ajax-response"></div><br class="clear" /></div><?phpinclude('./admin-footer.php');
<?php// -- Post related Meta Boxes/** * Display post submit form fields. * * @since 2.7.0 * * @param object $post */function post_submit_meta_box($post) {	global $action;	$post_type = $post->post_type;	$post_type_object = get_post_type_object($post_type);	$can_publish = current_user_can($post_type_object->cap->publish_posts);?><div class="submitbox" id="submitpost"><div id="minor-publishing"><?php // Hidden submit button early on so that the browser chooses the right button when form is submitted with Return key ?><div style="display:none;"><input type="submit" name="save" value="<?php esc_attr_e('Save'); ?>" /></div><div id="minor-publishing-actions"><div id="save-action"><?php if ( 'publish' != $post->post_status && 'future' != $post->post_status && 'pending' != $post->post_status )  { ?><input <?php if ( 'private' == $post->post_status ) { ?>style="display:none"<?php } ?> type="submit" name="save" id="save-post" value="<?php esc_attr_e('Save Draft'); ?>" tabindex="4" class="button button-highlighted" /><?php } elseif ( 'pending' == $post->post_status && $can_publish ) { ?><input type="submit" name="save" id="save-post" value="<?php esc_attr_e('Save as Pending'); ?>" tabindex="4" class="button button-highlighted" /><?php } ?></div><div id="preview-action"><?phpif ( 'publish' == $post->post_status ) {	$preview_link = esc_url(get_permalink($post->ID));	$preview_button = __('Preview Changes');} else {	$preview_link = esc_url(apply_filters('preview_post_link', add_query_arg('preview', 'true', get_permalink($post->ID))));	$preview_button = __('Preview');}?><a class="preview button" href="<?php echo $preview_link; ?>" target="wp-preview" id="post-preview" tabindex="4"><?php echo $preview_button; ?></a><input type="hidden" name="wp-preview" id="wp-preview" value="" /></div><div class="clear"></div></div><?php // /minor-publishing-actions ?><div id="misc-publishing-actions"><div class="misc-pub-section<?php if ( !$can_publish ) { echo ' misc-pub-section-last'; } ?>"><label for="post_status"><?php _e('Status:') ?></label><span id="post-status-display"><?phpswitch ( $post->post_status ) {	case 'private':		_e('Privately Published');		break;	case 'publish':		_e('Published');		break;	case 'future':		_e('Scheduled');		break;	case 'pending':		_e('Pending Review');		break;	case 'draft':	case 'auto-draft':		_e('Draft');		break;	case 'auto-draft':		_e('Unsaved');		break;}?></span><?php if ( 'publish' == $post->post_status || 'private' == $post->post_status || $can_publish ) { ?><a href="#post_status" <?php if ( 'private' == $post->post_status ) { ?>style="display:none;" <?php } ?>class="edit-post-status hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id="post-status-select" class="hide-if-js"><input type="hidden" name="hidden_post_status" id="hidden_post_status" value="<?php echo esc_attr( ('auto-draft' == $post->post_status ) ? 'draft' : $post->post_status); ?>" /><select name='post_status' id='post_status' tabindex='4'><?php if ( 'publish' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'publish' ); ?> value='publish'><?php _e('Published') ?></option><?php elseif ( 'private' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'private' ); ?> value='publish'><?php _e('Privately Published') ?></option><?php elseif ( 'future' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'future' ); ?> value='future'><?php _e('Scheduled') ?></option><?php endif; ?><option<?php selected( $post->post_status, 'pending' ); ?> value='pending'><?php _e('Pending Review') ?></option><?php if ( 'auto-draft' == $post->post_status ) : ?><option<?php selected( $post->post_status, 'auto-draft' ); ?> value='draft'><?php _e('Draft') ?></option><?php else : ?><option<?php selected( $post->post_status, 'draft' ); ?> value='draft'><?php _e('Draft') ?></option><?php endif; ?></select> <a href="#post_status" class="save-post-status hide-if-no-js button"><?php _e('OK'); ?></a> <a href="#post_status" class="cancel-post-status hide-if-no-js"><?php _e('Cancel'); ?></a></div><?php } ?></div><?php // /misc-pub-section ?><div class="misc-pub-section " id="visibility"><?php _e('Visibility:'); ?> <span id="post-visibility-display"><?phpif ( 'private' == $post->post_status ) {	$post->post_password = '';	$visibility = 'private';	$visibility_trans = __('Private');} elseif ( !empty( $post->post_password ) ) {	$visibility = 'password';	$visibility_trans = __('Password protected');} elseif ( $post_type == 'post' && is_sticky( $post->ID ) ) {	$visibility = 'public';	$visibility_trans = __('Public, Sticky');} else {	$visibility = 'public';	$visibility_trans = __('Public');}echo esc_html( $visibility_trans ); ?></span><?php if ( $can_publish ) { ?><a href="#visibility" class="edit-visibility hide-if-no-js"><?php _e('Edit'); ?></a><div id="post-visibility-select" class="hide-if-js"><input type="hidden" name="hidden_post_password" id="hidden-post-password" value="<?php echo esc_attr($post->post_password); ?>" /><?php if ($post_type == 'post'): ?><input type="checkbox" style="display:none" name="hidden_post_sticky" id="hidden-post-sticky" value="sticky" <?php checked(is_sticky($post->ID)); ?> /><?php endif; ?><input type="hidden" name="hidden_post_visibility" id="hidden-post-visibility" value="<?php echo esc_attr( $visibility ); ?>" /><input type="radio" name="visibility" id="visibility-radio-public" value="public" <?php checked( $visibility, 'public' ); ?> /> <label for="visibility-radio-public" class="selectit"><?php _e('Public'); ?></label><br /><?php if ($post_type == 'post'): ?><span id="sticky-span"><input id="sticky" name="sticky" type="checkbox" value="sticky" <?php checked(is_sticky($post->ID)); ?> tabindex="4" /> <label for="sticky" class="selectit"><?php _e('Stick this post to the front page') ?></label><br /></span><?php endif; ?><input type="radio" name="visibility" id="visibility-radio-password" value="password" <?php checked( $visibility, 'password' ); ?> /> <label for="visibility-radio-password" class="selectit"><?php _e('Password protected'); ?></label><br /><span id="password-span"><label for="post_password"><?php _e('Password:'); ?></label> <input type="text" name="post_password" id="post_password" value="<?php echo esc_attr($post->post_password); ?>" /><br /></span><input type="radio" name="visibility" id="visibility-radio-private" value="private" <?php checked( $visibility, 'private' ); ?> /> <label for="visibility-radio-private" class="selectit"><?php _e('Private'); ?></label><br /><p> <a href="#visibility" class="save-post-visibility hide-if-no-js button"><?php _e('OK'); ?></a> <a href="#visibility" class="cancel-post-visibility hide-if-no-js"><?php _e('Cancel'); ?></a></p></div><?php } ?></div><?php // /misc-pub-section ?><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );if ( 0 != $post->ID ) {	if ( 'future' == $post->post_status ) { // scheduled for publishing at a future date		$stamp = __('Scheduled for: <b>%1$s</b>');	} else if ( 'publish' == $post->post_status || 'private' == $post->post_status ) { // already published		$stamp = __('Published on: <b>%1$s</b>');	} else if ( '0000-00-00 00:00:00' == $post->post_date_gmt ) { // draft, 1 or more saves, no date specified		$stamp = __('Publish <b>immediately</b>');	} else if ( time() < strtotime( $post->post_date_gmt . ' +0000' ) ) { // draft, 1 or more saves, future date specified		$stamp = __('Schedule for: <b>%1$s</b>');	} else { // draft, 1 or more saves, date specified		$stamp = __('Publish on: <b>%1$s</b>');	}	$date = date_i18n( $datef, strtotime( $post->post_date ) );} else { // draft (no saves, and thus no date specified)	$stamp = __('Publish <b>immediately</b>');	$date = date_i18n( $datef, strtotime( current_time('mysql') ) );}if ( $can_publish ) : // Contributors don't get to choose the date of publish ?><div class="misc-pub-section curtime misc-pub-section-last">	<span id="timestamp">	<?php printf($stamp, $date); ?></span>	<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a>	<div id="timestampdiv" class="hide-if-js"><?php touch_time(($action == 'edit'),1,4); ?></div></div><?php // /misc-pub-section ?><?php endif; ?><?php do_action('post_submitbox_misc_actions'); ?></div><div class="clear"></div></div><div id="major-publishing-actions"><?php do_action('post_submitbox_start'); ?><div id="delete-action"><?phpif ( current_user_can( "delete_post", $post->ID ) ) {	if ( !EMPTY_TRASH_DAYS )		$delete_text = __('Delete Permanently');	else		$delete_text = __('Move to Trash');	?><a class="submitdelete deletion" href="<?php echo get_delete_post_link($post->ID); ?>"><?php echo $delete_text; ?></a><?php} ?></div><div id="publishing-action"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" id="ajax-loading" style="visibility:hidden;" alt="" /><?phpif ( !in_array( $post->post_status, array('publish', 'future', 'private') ) || 0 == $post->ID ) {	if ( $can_publish ) :		if ( !empty($post->post_date_gmt) && time() < strtotime( $post->post_date_gmt . ' +0000' ) ) : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Schedule') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Schedule') ?>" /><?php	else : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Publish') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Publish') ?>" /><?php	endif;	else : ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Submit for Review') ?>" />		<input name="publish" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Submit for Review') ?>" /><?php	endif;} else { ?>		<input name="original_publish" type="hidden" id="original_publish" value="<?php esc_attr_e('Update') ?>" />		<input name="save" type="submit" class="button-primary" id="publish" tabindex="5" accesskey="p" value="<?php esc_attr_e('Update') ?>" /><?php} ?></div><div class="clear"></div></div></div><?php}/** * Display post tags form fields. * * @since 2.6.0 * * @param object $post */function post_tags_meta_box($post, $box) {	$defaults = array('taxonomy' => 'post_tag');	if ( !isset($box['args']) || !is_array($box['args']) )		$args = array();	else		$args = $box['args'];	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	$tax_name = esc_attr($taxonomy);	$taxonomy = get_taxonomy($taxonomy);	$disabled = !current_user_can($taxonomy->cap->assign_terms) ? 'disabled="disabled"' : '';?><div class="tagsdiv" id="<?php echo $tax_name; ?>">	<div class="jaxtag">	<div class="nojs-tags hide-if-js">	<p><?php echo $taxonomy->labels->add_or_remove_items; ?></p>	<textarea name="<?php echo "tax_input[$tax_name]"; ?>" rows="3" cols="20" class="the-tags" id="tax-input-<?php echo $tax_name; ?>" <?php echo $disabled; ?>><?php echo esc_attr(get_terms_to_edit( $post->ID, $tax_name )); ?></textarea></div> 	<?php if ( current_user_can($taxonomy->cap->assign_terms) ) : ?>	<div class="ajaxtag hide-if-no-js">		<label class="screen-reader-text" for="new-tag-<?php echo $tax_name; ?>"><?php echo $box['title']; ?></label>		<div class="taghint"><?php echo $taxonomy->labels->add_new_item; ?></div>		<p><input type="text" id="new-tag-<?php echo $tax_name; ?>" name="newtag[<?php echo $tax_name; ?>]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />		<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" /></p>	</div>	<p class="howto"><?php echo esc_attr( $taxonomy->labels->separate_items_with_commas ); ?></p>	<?php endif; ?>	</div>	<div class="tagchecklist"></div></div><?php if ( current_user_can($taxonomy->cap->assign_terms) ) : ?><p class="hide-if-no-js"><a href="#titlediv" class="tagcloud-link" id="link-<?php echo $tax_name; ?>"><?php echo $taxonomy->labels->choose_from_most_used; ?></a></p><?php else : ?><p><em><?php _e('You cannot modify this taxonomy.'); ?></em></p><?php endif; ?><?php}/** * Display post categories form fields. * * @since 2.6.0 * * @param object $post */function post_categories_meta_box( $post, $box ) {	$defaults = array('taxonomy' => 'category');	if ( !isset($box['args']) || !is_array($box['args']) )		$args = array();	else		$args = $box['args'];	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	$tax = get_taxonomy($taxonomy);	?>	<div id="taxonomy-<?php echo $taxonomy; ?>" class="categorydiv">		<ul id="<?php echo $taxonomy; ?>-tabs" class="category-tabs">			<li class="tabs"><a href="#<?php echo $taxonomy; ?>-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>			<li class="hide-if-no-js"><a href="#<?php echo $taxonomy; ?>-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>		</ul>		<div id="<?php echo $taxonomy; ?>-pop" class="tabs-panel" style="display: none;">			<ul id="<?php echo $taxonomy; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php $popular_ids = wp_popular_terms_checklist($taxonomy); ?>			</ul>		</div>		<div id="<?php echo $taxonomy; ?>-all" class="tabs-panel">			<?php            $name = ( $taxonomy == 'category' ) ? 'post_category' : 'tax_input[' . $taxonomy . ']';            echo "<input type='hidden' name='{$name}[]' value='0' />"; // Allows for an empty term set to be sent. 0 is an invalid Term ID and will be ignored by empty() checks.            ?>			<ul id="<?php echo $taxonomy; ?>checklist" class="list:<?php echo $taxonomy?> categorychecklist form-no-clear">				<?php wp_terms_checklist($post->ID, array( 'taxonomy' => $taxonomy, 'popular_cats' => $popular_ids ) ) ?>			</ul>		</div>	<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>	<p><em><?php _e('You cannot modify this taxonomy.'); ?></em></p>	<?php endif; ?>	<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>			<div id="<?php echo $taxonomy; ?>-adder" class="wp-hidden-children">				<h4>					<a id="<?php echo $taxonomy; ?>-add-toggle" href="#<?php echo $taxonomy; ?>-add" class="hide-if-no-js" tabindex="3">						<?php							/* translators: %s: add new taxonomy label */							printf( __( '+ %s' ), $tax->labels->add_new_item );						?>					</a>				</h4>				<p id="<?php echo $taxonomy; ?>-add" class="category-add wp-hidden-child">					<label class="screen-reader-text" for="new<?php echo $taxonomy; ?>"><?php echo $tax->labels->add_new_item; ?></label>					<input type="text" name="new<?php echo $taxonomy; ?>" id="new<?php echo $taxonomy; ?>" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>					<label class="screen-reader-text" for="new<?php echo $taxonomy; ?>_parent">						<?php echo $tax->labels->parent_item_colon; ?>					</label>					<?php wp_dropdown_categories( array( 'taxonomy' => $taxonomy, 'hide_empty' => 0, 'name' => 'new'.$taxonomy.'_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>					<input type="button" id="<?php echo $taxonomy; ?>-add-submit" class="add:<?php echo $taxonomy ?>checklist:<?php echo $taxonomy ?>-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />					<?php wp_nonce_field( 'add-'.$taxonomy, '_ajax_nonce-add-'.$taxonomy, false ); ?>					<span id="<?php echo $taxonomy; ?>-ajax-response"></span>				</p>			</div>		<?php endif; ?>	</div>	<?php}/** * Display post excerpt form fields. * * @since 2.6.0 * * @param object $post */function post_excerpt_meta_box($post) {?><label class="screen-reader-text" for="excerpt"><?php _e('Excerpt') ?></label><textarea rows="1" cols="40" name="excerpt" tabindex="6" id="excerpt"><?php echo $post->post_excerpt ?></textarea><p><?php _e('Excerpts are optional hand-crafted summaries of your content that can be used in your theme. <a href="http://codex.wordpress.org/Excerpt" target="_blank">Learn more about manual excerpts.</a>'); ?></p><?php}/** * Display trackback links form fields. * * @since 2.6.0 * * @param object $post */function post_trackback_meta_box($post) {	$form_trackback = '<input type="text" name="trackback_url" id="trackback_url" class="code" tabindex="7" value="'. esc_attr( str_replace("\n", ' ', $post->to_ping) ) .'" />';	if ('' != $post->pinged) {		$pings = '<p>'. __('Already pinged:') . '</p><ul>';		$already_pinged = explode("\n", trim($post->pinged));		foreach ($already_pinged as $pinged_url) {			$pings .= "\n\t<li>" . esc_html($pinged_url) . "</li>";		}		$pings .= '</ul>';	}?><p><label for="trackback_url"><?php _e('Send trackbacks to:'); ?></label> <?php echo $form_trackback; ?><br /> (<?php _e('Separate multiple URLs with spaces'); ?>)</p><p><?php _e('Trackbacks are a way to notify legacy blog systems that you&#8217;ve linked to them. If you link other WordPress sites they&#8217;ll be notified automatically using <a href="http://codex.wordpress.org/Introduction_to_Blogging#Managing_Comments" target="_blank">pingbacks</a>, no other action necessary.'); ?></p><?phpif ( ! empty($pings) )	echo $pings;}/** * Display custom fields form fields. * * @since 2.6.0 * * @param object $post */function post_custom_meta_box($post) {?><div id="postcustomstuff"><div id="ajax-response"></div><?php$metadata = has_meta($post->ID);list_meta($metadata);meta_form(); ?></div><p><?php _e('Custom fields can be used to add extra metadata to a post that you can <a href="http://codex.wordpress.org/Using_Custom_Fields" target="_blank">use in your theme</a>.'); ?></p><?php}/** * Display comments status form fields. * * @since 2.6.0 * * @param object $post */function post_comment_status_meta_box($post) {?><input name="advanced_view" type="hidden" value="1" /><p class="meta-options">	<label for="comment_status" class="selectit"><input name="comment_status" type="checkbox" id="comment_status" value="open" <?php checked($post->comment_status, 'open'); ?> /> <?php _e( 'Allow comments.' ) ?></label><br />	<label for="ping_status" class="selectit"><input name="ping_status" type="checkbox" id="ping_status" value="open" <?php checked($post->ping_status, 'open'); ?> /> <?php printf( __( 'Allow <a href="%s" target="_blank">trackbacks and pingbacks</a> on this page.' ), __( 'http://codex.wordpress.org/Introduction_to_Blogging#Managing_Comments' ) ); ?></label></p><?php}/** * Display comments for post table header * * @since 3.0.0 * * @param $result table header rows * @return */function post_comment_meta_box_thead($result) {	unset($result['cb'], $result['response']);	return $result;}/** * Display comments for post. * * @since 2.8.0 * * @param object $post */function post_comment_meta_box($post) {	global $wpdb, $post_ID;	$total = $wpdb->get_var($wpdb->prepare("SELECT count(1) FROM $wpdb->comments WHERE comment_post_ID = '%d' AND ( comment_approved = '0' OR comment_approved = '1')", $post_ID));	if ( 1 > $total ) {		echo '<p>' . __('No comments yet.') . '</p>';		return;	}	wp_nonce_field( 'get-comments', 'add_comment_nonce', false );	add_filter('manage_edit-comments_columns', 'post_comment_meta_box_thead', 8, 1);?><table class="widefat comments-box fixed" cellspacing="0" style="display:none;"><thead><tr>	<?php print_column_headers('edit-comments'); ?></tr></thead><tbody id="the-comment-list" class="list:comment"></tbody></table><p class="hide-if-no-js"><a href="#commentstatusdiv" id="show-comments" onclick="commentsBox.get(<?php echo $total; ?>);return false;"><?php _e('Show comments'); ?></a> <img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /></p><?php	$hidden = get_hidden_meta_boxes('post');	if ( ! in_array('commentsdiv', $hidden) ) { ?>		<script type="text/javascript">jQuery(document).ready(function(){commentsBox.get(<?php echo $total; ?>, 10);});</script><?php	}	remove_filter('manage_edit-comments_columns', 'post_comment_meta_box_thead');	wp_comment_trashnotice();}/** * Display slug form fields. * * @since 2.6.0 * * @param object $post */function post_slug_meta_box($post) {?><label class="screen-reader-text" for="post_name"><?php _e('Slug') ?></label><input name="post_name" type="text" size="13" id="post_name" value="<?php echo esc_attr( $post->post_name ); ?>" /><?php}/** * Display form field with list of authors. * * @since 2.6.0 * * @param object $post */function post_author_meta_box($post) {	global $current_user, $user_ID;	$authors = get_editable_user_ids( $current_user->id, true, $post->post_type ); // TODO: ROLE SYSTEM	if ( $post->post_author && !in_array($post->post_author, $authors) )		$authors[] = $post->post_author;?><label class="screen-reader-text" for="post_author_override"><?php _e('Author'); ?></label><?php wp_dropdown_users( array('include' => $authors, 'name' => 'post_author_override', 'selected' => empty($post->ID) ? $user_ID : $post->post_author) ); ?><?php}/** * Display list of revisions. * * @since 2.6.0 * * @param object $post */function post_revisions_meta_box($post) {	wp_list_post_revisions();}// -- Page related Meta Boxes/** * Display page attributes form fields. * * @since 2.7.0 * * @param object $post */function page_attributes_meta_box($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( $post_type_object->hierarchical ) {		$pages = wp_dropdown_pages(array('post_type' => $post->post_type, 'exclude_tree' => $post->ID, 'selected' => $post->post_parent, 'name' => 'parent_id', 'show_option_none' => __('(no parent)'), 'sort_column'=> 'menu_order, post_title', 'echo' => 0));		if ( ! empty($pages) ) {?><p><strong><?php _e('Parent') ?></strong></p><label class="screen-reader-text" for="parent_id"><?php _e('Parent') ?></label><?php echo $pages; ?><?php		} // end empty pages check	} // end hierarchical check.	if ( 'page' == $post->post_type && 0 != count( get_page_templates() ) ) {		$template = !empty($post->page_template) ? $post->page_template : false;		?><p><strong><?php _e('Template') ?></strong></p><label class="screen-reader-text" for="page_template"><?php _e('Page Template') ?></label><select name="page_template" id="page_template"><option value='default'><?php _e('Default Template'); ?></option><?php page_template_dropdown($template); ?></select><?php	} ?><p><strong><?php _e('Order') ?></strong></p><p><label class="screen-reader-text" for="menu_order"><?php _e('Order') ?></label><input name="menu_order" type="text" size="4" id="menu_order" value="<?php echo esc_attr($post->menu_order) ?>" /></p><p><?php if ( 'page' == $post->post_type ) _e( 'Need help? Use the Help tab in the upper right of your screen.' ); ?></p><?php}// -- Link related Meta Boxes/** * Display link create form fields. * * @since 2.7.0 * * @param object $link */function link_submit_meta_box($link) {?><div class="submitbox" id="submitlink"><div id="minor-publishing"><?php // Hidden submit button early on so that the browser chooses the right button when form is submitted with Return key ?><div style="display:none;"><input type="submit" name="save" value="<?php esc_attr_e('Save'); ?>" /></div><div id="minor-publishing-actions"><div id="preview-action"><?php if ( !empty($link->link_id) ) { ?>	<a class="preview button" href="<?php echo $link->link_url; ?>" target="_blank" tabindex="4"><?php _e('Visit Link'); ?></a><?php } ?></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section misc-pub-section-last">	<label for="link_private" class="selectit"><input id="link_private" name="link_visible" type="checkbox" value="N" <?php checked($link->link_visible, 'N'); ?> /> <?php _e('Keep this link private') ?></label></div></div></div><div id="major-publishing-actions"><?php do_action('post_submitbox_start'); ?><div id="delete-action"><?phpif ( !empty($_GET['action']) && 'edit' == $_GET['action'] && current_user_can('manage_links') ) { ?>	<a class="submitdelete deletion" href="<?php echo wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id); ?>" onclick="if ( confirm('<?php echo esc_js(sprintf(__("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )); ?>') ) {return true;}return false;"><?php _e('Delete'); ?></a><?php } ?></div><div id="publishing-action"><?php if ( !empty($link->link_id) ) { ?>	<input name="save" type="submit" class="button-primary" id="publish" tabindex="4" accesskey="p" value="<?php esc_attr_e('Update Link') ?>" /><?php } else { ?>	<input name="save" type="submit" class="button-primary" id="publish" tabindex="4" accesskey="p" value="<?php esc_attr_e('Add Link') ?>" /><?php } ?></div><div class="clear"></div></div><?php do_action('submitlink_box'); ?><div class="clear"></div></div><?php}/** * Display link categories form fields. * * @since 2.6.0 * * @param object $link */function link_categories_meta_box($link) { ?><ul id="category-tabs" class="category-tabs">	<li class="tabs"><a href="#categories-all"><?php _e( 'All Categories' ); ?></a></li>	<li class="hide-if-no-js"><a href="#categories-pop"><?php _e( 'Most Used' ); ?></a></li></ul><div id="categories-all" class="tabs-panel">	<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">		<?php		if ( isset($link->link_id) )			wp_link_category_checklist($link->link_id);		else			wp_link_category_checklist();		?>	</ul></div><div id="categories-pop" class="tabs-panel" style="display: none;">	<ul id="categorychecklist-pop" class="categorychecklist form-no-clear">		<?php wp_popular_terms_checklist('link_category'); ?>	</ul></div><div id="category-adder" class="wp-hidden-children">	<h4><a id="category-add-toggle" href="#category-add"><?php _e( '+ Add New Category' ); ?></a></h4>	<p id="link-category-add" class="wp-hidden-child">		<label class="screen-reader-text" for="newcat"><?php _e( '+ Add New Category' ); ?></label>		<input type="text" name="newcat" id="newcat" class="form-required form-input-tip" value="<?php esc_attr_e( 'New category name' ); ?>" aria-required="true" />		<input type="button" id="category-add-submit" class="add:categorychecklist:linkcategorydiv button" value="<?php esc_attr_e( 'Add' ); ?>" />		<?php wp_nonce_field( 'add-link-category', '_ajax_nonce', false ); ?>		<span id="category-ajax-response"></span>	</p></div><?php}/** * Display form fields for changing link target. * * @since 2.6.0 * * @param object $link */function link_target_meta_box($link) { ?><fieldset><legend class="screen-reader-text"><span><?php _e('Target') ?></span></legend><p><label for="link_target_blank" class="selectit"><input id="link_target_blank" type="radio" name="link_target" value="_blank" <?php echo ( isset( $link->link_target ) && ($link->link_target == '_blank') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_blank</code> &mdash; new window or tab.'); ?></label></p><p><label for="link_target_top" class="selectit"><input id="link_target_top" type="radio" name="link_target" value="_top" <?php echo ( isset( $link->link_target ) && ($link->link_target == '_top') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_top</code> &mdash; current window or tab, with no frames.'); ?></label></p><p><label for="link_target_none" class="selectit"><input id="link_target_none" type="radio" name="link_target" value="" <?php echo ( isset( $link->link_target ) && ($link->link_target == '') ? 'checked="checked"' : ''); ?> /><?php _e('<code>_none</code> &mdash; same window or tab.'); ?></label></p></fieldset><p><?php _e('Choose the target frame for your link.'); ?></p><?php}/** * Display checked checkboxes attribute for xfn microformat options. * * @since 1.0.1 * * @param string $class * @param string $value * @param mixed $deprecated Never used. */function xfn_check( $class, $value = '', $deprecated = '' ) {	global $link;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.0' ); // Never implemented	$link_rel = isset( $link->link_rel ) ? $link->link_rel : ''; // In PHP 5.3: $link_rel = $link->link_rel ?: '';	$rels = preg_split('/\s+/', $link_rel);	if ('' != $value && in_array($value, $rels) ) {		echo ' checked="checked"';	}	if ('' == $value) {		if ('family' == $class && strpos($link_rel, 'child') === false && strpos($link_rel, 'parent') === false && strpos($link_rel, 'sibling') === false && strpos($link_rel, 'spouse') === false && strpos($link_rel, 'kin') === false) echo ' checked="checked"';		if ('friendship' == $class && strpos($link_rel, 'friend') === false && strpos($link_rel, 'acquaintance') === false && strpos($link_rel, 'contact') === false) echo ' checked="checked"';		if ('geographical' == $class && strpos($link_rel, 'co-resident') === false && strpos($link_rel, 'neighbor') === false) echo ' checked="checked"';		if ('identity' == $class && in_array('me', $rels) ) echo ' checked="checked"';	}}/** * Display xfn form fields. * * @since 2.6.0 * * @param object $link */function link_xfn_meta_box($link) {?><table class="editform" style="width: 100%;" cellspacing="2" cellpadding="5">	<tr>		<th style="width: 20%;" scope="row"><label for="link_rel"><?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('rel:') ?></label></th>		<td style="width: 80%;"><input type="text" name="link_rel" id="link_rel" size="50" value="<?php echo ( isset( $link->link_rel ) ? esc_attr($link->link_rel) : ''); ?>" /></td>	</tr>	<tr>		<td colspan="2">			<table cellpadding="3" cellspacing="5" class="form-table">				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('identity') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('identity') ?> </span></legend>						<label for="me">						<input type="checkbox" name="identity" value="me" id="me" <?php xfn_check('identity', 'me'); ?> />						<?php _e('another web address of mine') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friendship') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friendship') ?> </span></legend>						<label for="contact">						<input class="valinp" type="radio" name="friendship" value="contact" id="contact" <?php xfn_check('friendship', 'contact'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('contact') ?></label>						<label for="acquaintance">						<input class="valinp" type="radio" name="friendship" value="acquaintance" id="acquaintance" <?php xfn_check('friendship', 'acquaintance'); ?> />  <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('acquaintance') ?></label>						<label for="friend">						<input class="valinp" type="radio" name="friendship" value="friend" id="friend" <?php xfn_check('friendship', 'friend'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('friend') ?></label>						<label for="friendship">						<input name="friendship" type="radio" class="valinp" value="" id="friendship" <?php xfn_check('friendship'); ?> /> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('physical') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('physical') ?> </span></legend>						<label for="met">						<input class="valinp" type="checkbox" name="physical" value="met" id="met" <?php xfn_check('physical', 'met'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('met') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('professional') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('professional') ?> </span></legend>						<label for="co-worker">						<input class="valinp" type="checkbox" name="professional" value="co-worker" id="co-worker" <?php xfn_check('professional', 'co-worker'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('co-worker') ?></label>						<label for="colleague">						<input class="valinp" type="checkbox" name="professional" value="colleague" id="colleague" <?php xfn_check('professional', 'colleague'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('colleague') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('geographical') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('geographical') ?> </span></legend>						<label for="co-resident">						<input class="valinp" type="radio" name="geographical" value="co-resident" id="co-resident" <?php xfn_check('geographical', 'co-resident'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('co-resident') ?></label>						<label for="neighbor">						<input class="valinp" type="radio" name="geographical" value="neighbor" id="neighbor" <?php xfn_check('geographical', 'neighbor'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('neighbor') ?></label>						<label for="geographical">						<input class="valinp" type="radio" name="geographical" value="" id="geographical" <?php xfn_check('geographical'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('family') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('family') ?> </span></legend>						<label for="child">						<input class="valinp" type="radio" name="family" value="child" id="child" <?php xfn_check('family', 'child'); ?>  />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('child') ?></label>						<label for="kin">						<input class="valinp" type="radio" name="family" value="kin" id="kin" <?php xfn_check('family', 'kin'); ?>  />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('kin') ?></label>						<label for="parent">						<input class="valinp" type="radio" name="family" value="parent" id="parent" <?php xfn_check('family', 'parent'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('parent') ?></label>						<label for="sibling">						<input class="valinp" type="radio" name="family" value="sibling" id="sibling" <?php xfn_check('family', 'sibling'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('sibling') ?></label>						<label for="spouse">						<input class="valinp" type="radio" name="family" value="spouse" id="spouse" <?php xfn_check('family', 'spouse'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('spouse') ?></label>						<label for="family">						<input class="valinp" type="radio" name="family" value="" id="family" <?php xfn_check('family'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('none') ?></label>					</fieldset></td>				</tr>				<tr>					<th scope="row"> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('romantic') ?> </th>					<td><fieldset><legend class="screen-reader-text"><span> <?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('romantic') ?> </span></legend>						<label for="muse">						<input class="valinp" type="checkbox" name="romantic" value="muse" id="muse" <?php xfn_check('romantic', 'muse'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('muse') ?></label>						<label for="crush">						<input class="valinp" type="checkbox" name="romantic" value="crush" id="crush" <?php xfn_check('romantic', 'crush'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('crush') ?></label>						<label for="date">						<input class="valinp" type="checkbox" name="romantic" value="date" id="date" <?php xfn_check('romantic', 'date'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('date') ?></label>						<label for="romantic">						<input class="valinp" type="checkbox" name="romantic" value="sweetheart" id="romantic" <?php xfn_check('romantic', 'sweetheart'); ?> />						<?php /* translators: xfn: http://gmpg.org/xfn/ */ _e('sweetheart') ?></label>					</fieldset></td>				</tr>			</table>		</td>	</tr></table><p><?php _e('If the link is to a person, you can specify your relationship with them using the above form. If you would like to learn more about the idea check out <a href="http://gmpg.org/xfn/">XFN</a>.'); ?></p><?php}/** * Display advanced link options form fields. * * @since 2.6.0 * * @param object $link */function link_advanced_meta_box($link) {?><table class="form-table" style="width: 100%;" cellspacing="2" cellpadding="5">	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_image"><?php _e('Image Address') ?></label></th>		<td><input type="text" name="link_image" class="code" id="link_image" size="50" value="<?php echo ( isset( $link->link_image ) ? esc_attr($link->link_image) : ''); ?>" style="width: 95%" /></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="rss_uri"><?php _e('RSS Address') ?></label></th>		<td><input name="link_rss" class="code" type="text" id="rss_uri" value="<?php echo  ( isset( $link->link_rss ) ? esc_attr($link->link_rss) : ''); ?>" size="50" style="width: 95%" /></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_notes"><?php _e('Notes') ?></label></th>		<td><textarea name="link_notes" id="link_notes" cols="50" rows="10" style="width: 95%"><?php echo  ( isset( $link->link_notes ) ? $link->link_notes : ''); ?></textarea></td>	</tr>	<tr class="form-field">		<th valign="top"  scope="row"><label for="link_rating"><?php _e('Rating') ?></label></th>		<td><select name="link_rating" id="link_rating" size="1">		<?php			for ($r = 0; $r <= 10; $r++) {				echo('            <option value="'. esc_attr($r) .'" ');				if ( isset($link->link_rating) && $link->link_rating == $r)					echo 'selected="selected"';				echo('>'.$r.'</option>');			}		?></select>&nbsp;<?php _e('(Leave at 0 for no rating.)') ?>		</td>	</tr></table><?php}/** * Display post thumbnail meta box. * * @since 2.9.0 */function post_thumbnail_meta_box() {	global $post;	$thumbnail_id = get_post_meta( $post->ID, '_thumbnail_id', true );	echo _wp_post_thumbnail_html( $thumbnail_id );}
<?php/** * These functions are needed to load WordPress. * * @package WordPress *//** * Turn register globals off. * * @access private * @since 2.1.0 * @return null Will return null if register_globals PHP directive was disabled */function wp_unregister_GLOBALS() {	if ( !ini_get( 'register_globals' ) )		return;	if ( isset( $_REQUEST['GLOBALS'] ) )		die( /*WP_I18N_GLOBALS_OVERWRITE*/'GLOBALS overwrite attempt detected'/*/WP_I18N_GLOBALS_OVERWRITE*/ );	// Variables that shouldn't be unset	$no_unset = array( 'GLOBALS', '_GET', '_POST', '_COOKIE', '_REQUEST', '_SERVER', '_ENV', '_FILES', 'table_prefix' );	$input = array_merge( $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_FILES, isset( $_SESSION ) && is_array( $_SESSION ) ? $_SESSION : array() );	foreach ( $input as $k => $v )		if ( !in_array( $k, $no_unset ) && isset( $GLOBALS[$k] ) ) {			$GLOBALS[$k] = null;			unset( $GLOBALS[$k] );		}}/** * Fix $_SERVER variables for various setups. * * @access private * @since 3.0.0 */function wp_fix_server_vars() {	global $PHP_SELF;	$default_server_values = array(		'SERVER_SOFTWARE' => '',		'REQUEST_URI' => '',	);	$_SERVER = array_merge( $default_server_values, $_SERVER );	// Fix for IIS when running with PHP ISAPI	if ( empty( $_SERVER['REQUEST_URI'] ) || ( php_sapi_name() != 'cgi-fcgi' && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) ) ) {		// IIS Mod-Rewrite		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];		}		// IIS Isapi_Rewrite		else if ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];		} else {			// Use ORIG_PATH_INFO if there is no PATH_INFO			if ( !isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) )				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];			// Some IIS + PHP configurations puts the script-name in the path-info (No need to append it twice)			if ( isset( $_SERVER['PATH_INFO'] ) ) {				if ( $_SERVER['PATH_INFO'] == $_SERVER['SCRIPT_NAME'] )					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];				else					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];			}			// Append the query string if it exists and isn't null			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];			}		}	}	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && ( strpos( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) == strlen( $_SERVER['SCRIPT_FILENAME'] ) - 7 ) )		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];	// Fix for Dreamhost and other PHP as CGI hosts	if ( strpos( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) !== false )		unset( $_SERVER['PATH_INFO'] );	// Fix empty PHP_SELF	$PHP_SELF = $_SERVER['PHP_SELF'];	if ( empty( $PHP_SELF ) )		$_SERVER['PHP_SELF'] = $PHP_SELF = preg_replace( '/(\?.*)?$/', '', $_SERVER["REQUEST_URI"] );}/** * Check for the required PHP version, and the MySQL extension or a database drop-in. * * Dies if requirements are not met. * * @access private * @since 3.0.0 */function wp_check_php_mysql_versions() {	// we can probably extend this function to check if wp_die() exists then use translated strings, and then use it in install.php etc.	global $required_php_version, $wp_version;	$php_version = phpversion();	if ( version_compare( $required_php_version, $php_version, '>' ) )		die( sprintf( /*WP_I18N_OLD_PHP*/'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.'/*/WP_I18N_OLD_PHP*/, $php_version, $wp_version, $required_php_version ) );	if ( !extension_loaded( 'mysql' ) && !file_exists( WP_CONTENT_DIR . '/db.php' ) )		die( /*WP_I18N_OLD_MYSQL*/'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.'/*/WP_I18N_OLD_MYSQL*/ );}/** * Don't load all of WordPress when handling a favicon.ico request. * Instead, send the headers for a zero-length favicon and bail. * * @since 3.0.0 */function wp_favicon_request() {	if ( '/favicon.ico' == $_SERVER['REQUEST_URI'] ) {		header('Content-Type: image/vnd.microsoft.icon');		header('Content-Length: 0');		exit;	}}/** * Dies with a maintenance message when conditions are met. * * Checks for a file in the WordPress root directory named ".maintenance". * This file will contain the variable $upgrading, set to the time the file * was created. If the file was created less than 10 minutes ago, WordPress * enters maintenance mode and displays a message. * * The default message can be replaced by using a drop-in (maintenance.php in * the wp-content directory). * * @access private * @since 3.0.0 */function wp_maintenance() {	if ( !file_exists( ABSPATH . '.maintenance' ) || defined( 'WP_INSTALLING' ) )		return;	global $upgrading;	include( ABSPATH . '.maintenance' );	// If the $upgrading timestamp is older than 10 minutes, don't die.	if ( ( time() - $upgrading ) >= 600 )		return;	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {		require_once( WP_CONTENT_DIR . '/maintenance.php' );		die();	}	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	header( "$protocol 503 Service Unavailable", true, 503 );	header( 'Content-Type: text/html; charset=utf-8' );	header( 'Retry-After: 600' );?>	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">	<html xmlns="http://www.w3.org/1999/xhtml">	<head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />		<title><?php echo /*WP_I18N_MAINTENANCE*/'Maintenance'/*/WP_I18N_MAINTENANCE*/; ?></title>	</head>	<body>		<h1><?php echo /*WP_I18N_MAINT_MSG*/'Briefly unavailable for scheduled maintenance. Check back in a minute.'/*/WP_I18N_MAINT_MSG*/; ?></h1>	</body>	</html><?php	die();}/** * PHP 4 standard microtime start capture. * * @access private * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when function is called. * @return bool Always returns true. */function timer_start() {	global $timestart;	$mtime = explode( ' ', microtime() );	$timestart = $mtime[1] + $mtime[0];	return true;}/** * Return and/or display the time from the page start to when function is called. * * You can get the results and print them by doing: * <code> * $nTimePageTookToExecute = timer_stop(); * echo $nTimePageTookToExecute; * </code> * * Or instead, you can do: * <code> * timer_stop(1); * </code> * which will do what the above does. If you need the result, you can assign it to a variable, but * most cases, you only need to echo it. * * @since 0.71 * @global int $timestart Seconds and Microseconds added together from when timer_start() is called * @global int $timeend  Seconds and Microseconds added together from when function is called * * @param int $display Use '0' or null to not echo anything and 1 to echo the total time * @param int $precision The amount of digits from the right of the decimal to display. Default is 3. * @return float The "second.microsecond" finished time calculation */function timer_stop( $display = 0, $precision = 3 ) { // if called like timer_stop(1), will echo $timetotal	global $timestart, $timeend;	$mtime = microtime();	$mtime = explode( ' ', $mtime );	$timeend = $mtime[1] + $mtime[0];	$timetotal = $timeend - $timestart;	$r = ( function_exists( 'number_format_i18n' ) ) ? number_format_i18n( $timetotal, $precision ) : number_format( $timetotal, $precision );	if ( $display )		echo $r;	return $r;}/** * Sets PHP error handling and handles WordPress debug mode. * * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); </code> * * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. * WP_DEBUG defaults to false. * * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display * notices, including one when a deprecated WordPress function, function argument, * or file is used. Deprecated code may be removed from a later version. * * It is strongly recommended that plugin and theme developers use WP_DEBUG in their * development environments. * * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. * WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from * changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false * will never force errors to be hidden.) * * When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. * WP_DEBUG_LOG defaults to false. * * @access private * @since 3.0.0 */function wp_debug_mode() {	if ( WP_DEBUG ) {		if ( defined( 'E_DEPRECATED' ) )			error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );		else			error_reporting( E_ALL );		if ( WP_DEBUG_DISPLAY )			ini_set( 'display_errors', 1 );		if ( WP_DEBUG_LOG ) {			ini_set( 'log_errors', 1 );			ini_set( 'error_log', WP_CONTENT_DIR . '/debug.log' );		}	} else {		if ( defined( 'E_RECOVERABLE_ERROR' ) )			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );		else			error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING );	}}/** * Sets the location of the language directory. * * To set directory manually, define <code>WP_LANG_DIR</code> in wp-config.php. * * First looks for language folder in WP_CONTENT_DIR and uses that folder if it * exists. Or it uses the "languages" folder in WPINC. * * The WP_LANG_DIR constant was introduced in 2.1.0. * * @access private * @since 3.0.0 */function wp_set_lang_dir() {	if ( !defined( 'WP_LANG_DIR' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old static relative path maintained for limited backwards compatibility - won't work in some cases				define( 'LANGDIR', 'wp-content/languages' );			}		} else {			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' ); // no leading slash, no trailing slash, full path, not relative to ABSPATH			if ( !defined( 'LANGDIR' ) ) {				// Old relative path maintained for backwards compatibility				define( 'LANGDIR', WPINC . '/languages' );			}		}	}}/** * Sets the database table prefix and the format specifiers for database table columns. * * Columns not listed here default to %s. * * @see wpdb::$field_types Since 2.8.0 * @see wpdb::prepare() * @see wpdb::insert() * @see wpdb::update() * @see wpdb::set_prefix() * * @access private * @since 3.0.0 */function wp_set_wpdb_vars() {	global $wpdb, $table_prefix;	if ( !empty( $wpdb->error ) )		dead_db();	$wpdb->field_types = array( 'post_author' => '%d', 'post_parent' => '%d', 'menu_order' => '%d', 'term_id' => '%d', 'term_group' => '%d', 'term_taxonomy_id' => '%d',		'parent' => '%d', 'count' => '%d','object_id' => '%d', 'term_order' => '%d', 'ID' => '%d', 'commment_ID' => '%d', 'comment_post_ID' => '%d', 'comment_parent' => '%d',		'user_id' => '%d', 'link_id' => '%d', 'link_owner' => '%d', 'link_rating' => '%d', 'option_id' => '%d', 'blog_id' => '%d', 'meta_id' => '%d', 'post_id' => '%d',		'user_status' => '%d', 'umeta_id' => '%d', 'comment_karma' => '%d', 'comment_count' => '%d',		// multisite:		'active' => '%d', 'cat_id' => '%d', 'deleted' => '%d', 'lang_id' => '%d', 'mature' => '%d', 'public' => '%d', 'site_id' => '%d', 'spam' => '%d',	);	$prefix = $wpdb->set_prefix( $table_prefix );	if ( is_wp_error( $prefix ) )		wp_die( /*WP_I18N_BAD_PREFIX*/'<strong>ERROR</strong>: <code>$table_prefix</code> in <code>wp-config.php</code> can only contain numbers, letters, and underscores.'/*/WP_I18N_BAD_PREFIX*/ );}/** * Starts the WordPress object cache. * * If an object-cache.php file exists in the wp-content directory, * it uses that drop-in as an external object cache. * * @access private * @since 3.0.0 */function wp_start_object_cache() {	global $_wp_using_ext_object_cache;	$first_init = false; 	if ( ! function_exists( 'wp_cache_init' ) ) {		if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {			require_once ( WP_CONTENT_DIR . '/object-cache.php' );			$_wp_using_ext_object_cache = true;		} else {			require_once ( ABSPATH . WPINC . '/cache.php' );			$_wp_using_ext_object_cache = false;		}		$first_init = true;	} else if ( !$_wp_using_ext_object_cache && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {		// Sometimes advanced-cache.php can load object-cache.php before it is loaded here.		// This breaks the function_exists check above and can result in $_wp_using_ext_object_cache		// being set incorrectly.  Double check if an external cache exists.		$_wp_using_ext_object_cache = true;	}	// If cache supports reset, reset instead of init if already initialized.	// Reset signals to the cache that global IDs have changed and it may need to update keys	// and cleanup caches.	if ( !$first_init && function_exists('wp_cache_reset') )		wp_cache_reset();	else		wp_cache_init();	if ( function_exists( 'wp_cache_add_global_groups' ) ) {		wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-transient', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'global-posts' ) );		wp_cache_add_non_persistent_groups( array( 'comment', 'counts', 'plugins' ) );	}}/** * Redirects to the installer if WordPress is not installed. * * Dies with an error message when multisite is enabled. * * @access private * @since 3.0.0 */function wp_not_installed() {	if ( is_multisite() ) {		if ( ! is_blog_installed() && ! defined( 'WP_INSTALLING' ) )			wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );	} elseif ( ! is_blog_installed() && false === strpos( $_SERVER['PHP_SELF'], 'install.php' ) && !defined( 'WP_INSTALLING' ) ) {		if ( defined( 'WP_SITEURL' ) )			$link = WP_SITEURL . '/wp-admin/install.php';		elseif ( false !== strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) )			$link = preg_replace( '|/wp-admin/?.*?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		else			$link = preg_replace( '|/[^/]+?$|', '/', $_SERVER['PHP_SELF'] ) . 'wp-admin/install.php';		require( ABSPATH . WPINC . '/kses.php' );		require( ABSPATH . WPINC . '/pluggable.php' );		require( ABSPATH . WPINC . '/formatting.php' );		wp_redirect( $link );		die();	}}/** * Returns array of must-use plugin files to be included in global scope. * * The default directory is wp-content/mu-plugins. To change the default directory * manually, define <code>WPMU_PLUGIN_DIR</code> and <code>WPMU_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_mu_plugins() {	$mu_plugins = array();	if ( !is_dir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	if ( ! $dh = opendir( WPMU_PLUGIN_DIR ) )		return $mu_plugins;	while ( ( $plugin = readdir( $dh ) ) !== false ) {		if ( substr( $plugin, -4 ) == '.php' )			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;	}	closedir( $dh );	sort( $mu_plugins );	return $mu_plugins;}/** * Returns array of plugin files to be included in global scope. * * The default directory is wp-content/plugins. To change the default directory * manually, define <code>WP_PLUGIN_DIR</code> and <code>WP_PLUGIN_URL</code> * in wp-config.php. * * @access private * @since 3.0.0 * @return array Files to include */function wp_get_active_and_valid_plugins() {	$plugins = array();	$active_plugins = (array) get_option( 'active_plugins', array() );	// Get active network plugins	if ( is_multisite() ) {		$active_sitewide_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		if ( !empty($active_sitewide_plugins) ) {			$active_plugins = array_merge( $active_plugins, array_keys( $active_sitewide_plugins ) );			sort( $active_plugins );		}	}	// Check for hacks file if the option is enabled	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {		_deprecated_file( 'my-hacks.php', '1.5' );		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );	}	if ( empty( $active_plugins ) || defined( 'WP_INSTALLING' ) )		return $plugins;	foreach ( $active_plugins as $plugin ) {		if ( ! validate_file( $plugin ) // $plugin must validate as file			&& '.php' == substr( $plugin, -4 ) // $plugin must end with '.php'			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist			)		$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;	}	return $plugins;}/** * Sets internal encoding using mb_internal_encoding(). * * In most cases the default internal encoding is latin1, which is of no use, * since we want to use the mb_ functions for utf-8 strings. * * @access private * @since 3.0.0 */function wp_set_internal_encoding() {	if ( function_exists( 'mb_internal_encoding' ) ) {		if ( !@mb_internal_encoding( get_option( 'blog_charset' ) ) )			mb_internal_encoding( 'UTF-8' );	}}/** * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. * * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, * or $_ENV are needed, use those superglobals directly. * * @access private * @since 3.0.0 */function wp_magic_quotes() {	// If already slashed, strip.	if ( get_magic_quotes_gpc() ) {		$_GET    = stripslashes_deep( $_GET    );		$_POST   = stripslashes_deep( $_POST   );		$_COOKIE = stripslashes_deep( $_COOKIE );	}	// Escape with wpdb.	$_GET    = add_magic_quotes( $_GET    );	$_POST   = add_magic_quotes( $_POST   );	$_COOKIE = add_magic_quotes( $_COOKIE );	$_SERVER = add_magic_quotes( $_SERVER );	// Force REQUEST to be GET + POST.	$_REQUEST = array_merge( $_GET, $_POST );}/** * Runs just before PHP shuts down execution. * * @access private * @since 1.2.0 */function shutdown_action_hook() {	do_action( 'shutdown' );	wp_cache_close();}/** * Copy an object. * * Returns a cloned copy of an object. * * @since 2.7.0 * * @param object $object The object to clone * @return object The cloned object */function wp_clone( $object ) {	static $can_clone;	if ( !isset( $can_clone ) )		$can_clone = version_compare( phpversion(), '5.0', '>=' );	return $can_clone ? clone( $object ) : $object;}/** * Whether the current request is in WordPress admin Panel * * Does not inform on whether the user is an admin! Use capability checks to * tell if the user should be accessing a section or not. * * @since 1.5.1 * * @return bool True if inside WordPress administration pages. */function is_admin() {	if ( defined( 'WP_ADMIN' ) )		return WP_ADMIN;	return false;}/** * Whether Multisite support is enabled * * @since 3.0.0 * * @return bool True if multisite is enabled, false otherwise. */function is_multisite() {	if ( defined( 'MULTISITE' ) )		return MULTISITE;	if ( defined( 'VHOST' ) || defined( 'SUNRISE' ) )		return true;	return false;}?>
<?php/** * Default Widgets * * @package WordPress * @subpackage Widgets *//** * Pages widget class * * @since 2.8.0 */class WP_Widget_Pages extends WP_Widget {	function WP_Widget_Pages() {		$widget_ops = array('classname' => 'widget_pages', 'description' => __( 'Your site&#8217;s WordPress Pages') );		$this->WP_Widget('pages', __('Pages'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Pages' ) : $instance['title'], $instance, $this->id_base);		$sortby = empty( $instance['sortby'] ) ? 'menu_order' : $instance['sortby'];		$exclude = empty( $instance['exclude'] ) ? '' : $instance['exclude'];		if ( $sortby == 'menu_order' )			$sortby = 'menu_order, post_title';		$out = wp_list_pages( apply_filters('widget_pages_args', array('title_li' => '', 'echo' => 0, 'sort_column' => $sortby, 'exclude' => $exclude) ) );		if ( !empty( $out ) ) {			echo $before_widget;			if ( $title)				echo $before_title . $title . $after_title;		?>		<ul>			<?php echo $out; ?>		</ul>		<?php			echo $after_widget;		}	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( in_array( $new_instance['sortby'], array( 'post_title', 'menu_order', 'ID' ) ) ) {			$instance['sortby'] = $new_instance['sortby'];		} else {			$instance['sortby'] = 'menu_order';		}		$instance['exclude'] = strip_tags( $new_instance['exclude'] );		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'sortby' => 'post_title', 'title' => '', 'exclude' => '') );		$title = esc_attr( $instance['title'] );		$exclude = esc_attr( $instance['exclude'] );	?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p>			<label for="<?php echo $this->get_field_id('sortby'); ?>"><?php _e( 'Sort by:' ); ?></label>			<select name="<?php echo $this->get_field_name('sortby'); ?>" id="<?php echo $this->get_field_id('sortby'); ?>" class="widefat">				<option value="post_title"<?php selected( $instance['sortby'], 'post_title' ); ?>><?php _e('Page title'); ?></option>				<option value="menu_order"<?php selected( $instance['sortby'], 'menu_order' ); ?>><?php _e('Page order'); ?></option>				<option value="ID"<?php selected( $instance['sortby'], 'ID' ); ?>><?php _e( 'Page ID' ); ?></option>			</select>		</p>		<p>			<label for="<?php echo $this->get_field_id('exclude'); ?>"><?php _e( 'Exclude:' ); ?></label> <input type="text" value="<?php echo $exclude; ?>" name="<?php echo $this->get_field_name('exclude'); ?>" id="<?php echo $this->get_field_id('exclude'); ?>" class="widefat" />			<br />			<small><?php _e( 'Page IDs, separated by commas.' ); ?></small>		</p><?php	}}/** * Links widget class * * @since 2.8.0 */class WP_Widget_Links extends WP_Widget {	function WP_Widget_Links() {		$widget_ops = array('description' => __( "Your blogroll" ) );		$this->WP_Widget('links', __('Links'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args, EXTR_SKIP);		$show_description = isset($instance['description']) ? $instance['description'] : false;		$show_name = isset($instance['name']) ? $instance['name'] : false;		$show_rating = isset($instance['rating']) ? $instance['rating'] : false;		$show_images = isset($instance['images']) ? $instance['images'] : true;		$category = isset($instance['category']) ? $instance['category'] : false;		if ( is_admin() && !$category ) {			// Display All Links widget as such in the widgets screen			echo $before_widget . $before_title. __('All Links') . $after_title . $after_widget;			return;		}		$before_widget = preg_replace('/id="[^"]*"/','id="%id"', $before_widget);		wp_list_bookmarks(apply_filters('widget_links_args', array(			'title_before' => $before_title, 'title_after' => $after_title,			'category_before' => $before_widget, 'category_after' => $after_widget,			'show_images' => $show_images, 'show_description' => $show_description,			'show_name' => $show_name, 'show_rating' => $show_rating,			'category' => $category, 'class' => 'linkcat widget'		)));	}	function update( $new_instance, $old_instance ) {		$new_instance = (array) $new_instance;		$instance = array( 'images' => 0, 'name' => 0, 'description' => 0, 'rating' => 0);		foreach ( $instance as $field => $val ) {			if ( isset($new_instance[$field]) )				$instance[$field] = 1;		}		$instance['category'] = intval($new_instance['category']);		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'images' => true, 'name' => true, 'description' => false, 'rating' => false, 'category' => false ) );		$link_cats = get_terms( 'link_category');?>		<p>		<label for="<?php echo $this->get_field_id('category'); ?>" class="screen-reader-text"><?php _e('Select Link Category'); ?></label>		<select class="widefat" id="<?php echo $this->get_field_id('category'); ?>" name="<?php echo $this->get_field_name('category'); ?>">		<option value=""><?php _e('All Links'); ?></option>		<?php		foreach ( $link_cats as $link_cat ) {			echo '<option value="' . intval($link_cat->term_id) . '"'				. ( $link_cat->term_id == $instance['category'] ? ' selected="selected"' : '' )				. '>' . $link_cat->name . "</option>\n";		}		?>		</select></p>		<p>		<input class="checkbox" type="checkbox" <?php checked($instance['images'], true) ?> id="<?php echo $this->get_field_id('images'); ?>" name="<?php echo $this->get_field_name('images'); ?>" />		<label for="<?php echo $this->get_field_id('images'); ?>"><?php _e('Show Link Image'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['name'], true) ?> id="<?php echo $this->get_field_id('name'); ?>" name="<?php echo $this->get_field_name('name'); ?>" />		<label for="<?php echo $this->get_field_id('name'); ?>"><?php _e('Show Link Name'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['description'], true) ?> id="<?php echo $this->get_field_id('description'); ?>" name="<?php echo $this->get_field_name('description'); ?>" />		<label for="<?php echo $this->get_field_id('description'); ?>"><?php _e('Show Link Description'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['rating'], true) ?> id="<?php echo $this->get_field_id('rating'); ?>" name="<?php echo $this->get_field_name('rating'); ?>" />		<label for="<?php echo $this->get_field_id('rating'); ?>"><?php _e('Show Link Rating'); ?></label>		</p><?php	}}/** * Search widget class * * @since 2.8.0 */class WP_Widget_Search extends WP_Widget {	function WP_Widget_Search() {		$widget_ops = array('classname' => 'widget_search', 'description' => __( "A search form for your site") );		$this->WP_Widget('search', __('Search'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		// Use current theme search form if it exists		get_search_form();		echo $after_widget;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = $instance['title'];?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></label></p><?php	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args((array) $new_instance, array( 'title' => ''));		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}}/** * Archives widget class * * @since 2.8.0 */class WP_Widget_Archives extends WP_Widget {	function WP_Widget_Archives() {		$widget_ops = array('classname' => 'widget_archive', 'description' => __( 'A monthly archive of your site&#8217;s posts') );		$this->WP_Widget('archives', __('Archives'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$c = $instance['count'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		$title = apply_filters('widget_title', empty($instance['title']) ? __('Archives') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		if ( $d ) {?>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'> <option value=""><?php echo esc_attr(__('Select Month')); ?></option> <?php wp_get_archives(apply_filters('widget_archives_dropdown_args', array('type' => 'monthly', 'format' => 'option', 'show_post_count' => $c))); ?> </select><?php		} else {?>		<ul>		<?php wp_get_archives(apply_filters('widget_archives_args', array('type' => 'monthly', 'show_post_count' => $c))); ?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args( (array) $new_instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = $new_instance['count'] ? 1 : 0;		$instance['dropdown'] = $new_instance['dropdown'] ? 1 : 0;		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$title = strip_tags($instance['title']);		$count = $instance['count'] ? 'checked="checked"' : '';		$dropdown = $instance['dropdown'] ? 'checked="checked"' : '';?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<p>			<input class="checkbox" type="checkbox" <?php echo $count; ?> id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>" /> <label for="<?php echo $this->get_field_id('count'); ?>"><?php _e('Show post counts'); ?></label>			<br />			<input class="checkbox" type="checkbox" <?php echo $dropdown; ?> id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>" /> <label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e('Display as a drop down'); ?></label>		</p><?php	}}/** * Meta widget class * * Displays log in/out, RSS feed links, etc. * * @since 2.8.0 */class WP_Widget_Meta extends WP_Widget {	function WP_Widget_Meta() {		$widget_ops = array('classname' => 'widget_meta', 'description' => __( "Log in/out, admin, feed and WordPress links") );		$this->WP_Widget('meta', __('Meta'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Meta') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;?>			<ul>			<?php wp_register(); ?>			<li><?php wp_loginout(); ?></li>			<li><a href="<?php bloginfo('rss2_url'); ?>" title="<?php echo esc_attr(__('Syndicate this site using RSS 2.0')); ?>"><?php _e('Entries <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="<?php bloginfo('comments_rss2_url'); ?>" title="<?php echo esc_attr(__('The latest comments to all posts in RSS')); ?>"><?php _e('Comments <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="http://wordpress.org/" title="<?php echo esc_attr(__('Powered by WordPress, state-of-the-art semantic personal publishing platform.')); ?>">WordPress.org</a></li>			<?php wp_meta(); ?>			</ul><?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>			<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Calendar widget class * * @since 2.8.0 */class WP_Widget_Calendar extends WP_Widget {	function WP_Widget_Calendar() {		$widget_ops = array('classname' => 'widget_calendar', 'description' => __( 'A calendar of your site&#8217;s posts') );		$this->WP_Widget('calendar', __('Calendar'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? '&nbsp;' : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div id="calendar_wrap">';		get_calendar();		echo '</div>';		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Text widget class * * @since 2.8.0 */class WP_Widget_Text extends WP_Widget {	function WP_Widget_Text() {		$widget_ops = array('classname' => 'widget_text', 'description' => __('Arbitrary text or HTML'));		$control_ops = array('width' => 400, 'height' => 350);		$this->WP_Widget('text', __('Text'), $widget_ops, $control_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters( 'widget_title', empty($instance['title']) ? '' : $instance['title'], $instance, $this->id_base);		$text = apply_filters( 'widget_text', $instance['text'], $instance );		echo $before_widget;		if ( !empty( $title ) ) { echo $before_title . $title . $after_title; } ?>			<div class="textwidget"><?php echo $instance['filter'] ? wpautop($text) : $text; ?></div>		<?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( current_user_can('unfiltered_html') )			$instance['text'] =  $new_instance['text'];		else			$instance['text'] = stripslashes( wp_filter_post_kses( addslashes($new_instance['text']) ) ); // wp_filter_post_kses() expects slashed		$instance['filter'] = isset($new_instance['filter']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'text' => '' ) );		$title = strip_tags($instance['title']);		$text = format_to_edit($instance['text']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('text'); ?>" name="<?php echo $this->get_field_name('text'); ?>"><?php echo $text; ?></textarea>		<p><input id="<?php echo $this->get_field_id('filter'); ?>" name="<?php echo $this->get_field_name('filter'); ?>" type="checkbox" <?php checked(isset($instance['filter']) ? $instance['filter'] : 0); ?> />&nbsp;<label for="<?php echo $this->get_field_id('filter'); ?>"><?php _e('Automatically add paragraphs'); ?></label></p><?php	}}/** * Categories widget class * * @since 2.8.0 */class WP_Widget_Categories extends WP_Widget {	function WP_Widget_Categories() {		$widget_ops = array( 'classname' => 'widget_categories', 'description' => __( "A list or dropdown of categories" ) );		$this->WP_Widget('categories', __('Categories'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Categories' ) : $instance['title'], $instance, $this->id_base);		$c = $instance['count'] ? '1' : '0';		$h = $instance['hierarchical'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		$cat_args = array('orderby' => 'name', 'show_count' => $c, 'hierarchical' => $h);		if ( $d ) {			$cat_args['show_option_none'] = __('Select Category');			wp_dropdown_categories(apply_filters('widget_categories_dropdown_args', $cat_args));?><script type='text/javascript'>/* <![CDATA[ */	var dropdown = document.getElementById("cat");	function onCatChange() {		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {			location.href = "<?php echo home_url(); ?>/?cat="+dropdown.options[dropdown.selectedIndex].value;		}	}	dropdown.onchange = onCatChange;/* ]]> */</script><?php		} else {?>		<ul><?php		$cat_args['title_li'] = '';		wp_list_categories(apply_filters('widget_categories_args', $cat_args));?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = !empty($new_instance['count']) ? 1 : 0;		$instance['hierarchical'] = !empty($new_instance['hierarchical']) ? 1 : 0;		$instance['dropdown'] = !empty($new_instance['dropdown']) ? 1 : 0;		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = esc_attr( $instance['title'] );		$count = isset($instance['count']) ? (bool) $instance['count'] :false;		$hierarchical = isset( $instance['hierarchical'] ) ? (bool) $instance['hierarchical'] : false;		$dropdown = isset( $instance['dropdown'] ) ? (bool) $instance['dropdown'] : false;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:' ); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>"<?php checked( $dropdown ); ?> />		<label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e( 'Show as dropdown' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>"<?php checked( $count ); ?> />		<label for="<?php echo $this->get_field_id('count'); ?>"><?php _e( 'Show post counts' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('hierarchical'); ?>" name="<?php echo $this->get_field_name('hierarchical'); ?>"<?php checked( $hierarchical ); ?> />		<label for="<?php echo $this->get_field_id('hierarchical'); ?>"><?php _e( 'Show hierarchy' ); ?></label></p><?php	}}/** * Recent_Posts widget class * * @since 2.8.0 */class WP_Widget_Recent_Posts extends WP_Widget {	function WP_Widget_Recent_Posts() {		$widget_ops = array('classname' => 'widget_recent_entries', 'description' => __( "The most recent posts on your site") );		$this->WP_Widget('recent-posts', __('Recent Posts'), $widget_ops);		$this->alt_option_name = 'widget_recent_entries';		add_action( 'save_post', array(&$this, 'flush_widget_cache') );		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );	}	function widget($args, $instance) {		$cache = wp_cache_get('widget_recent_posts', 'widget');		if ( !is_array($cache) )			$cache = array();		if ( isset($cache[$args['widget_id']]) ) {			echo $cache[$args['widget_id']];			return;		}		ob_start();		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Posts') : $instance['title'], $instance, $this->id_base);		if ( !$number = (int) $instance['number'] )			$number = 10;		else if ( $number < 1 )			$number = 1;		else if ( $number > 15 )			$number = 15;		$r = new WP_Query(array('showposts' => $number, 'nopaging' => 0, 'post_status' => 'publish', 'caller_get_posts' => 1));		if ($r->have_posts()) :?>		<?php echo $before_widget; ?>		<?php if ( $title ) echo $before_title . $title . $after_title; ?>		<ul>		<?php  while ($r->have_posts()) : $r->the_post(); ?>		<li><a href="<?php the_permalink() ?>" title="<?php echo esc_attr(get_the_title() ? get_the_title() : get_the_ID()); ?>"><?php if ( get_the_title() ) the_title(); else the_ID(); ?></a></li>		<?php endwhile; ?>		</ul>		<?php echo $after_widget; ?><?php		// Reset the global $the_post as this query will have stomped on it		wp_reset_postdata();		endif;		$cache[$args['widget_id']] = ob_get_flush();		wp_cache_set('widget_recent_posts', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_entries']) )			delete_option('widget_recent_entries');		return $instance;	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_posts', 'widget');	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		if ( !isset($instance['number']) || !$number = (int) $instance['number'] )			$number = 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of posts to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * Recent_Comments widget class * * @since 2.8.0 */class WP_Widget_Recent_Comments extends WP_Widget {	function WP_Widget_Recent_Comments() {		$widget_ops = array('classname' => 'widget_recent_comments', 'description' => __( 'The most recent comments' ) );		$this->WP_Widget('recent-comments', __('Recent Comments'), $widget_ops);		$this->alt_option_name = 'widget_recent_comments';		if ( is_active_widget(false, false, $this->id_base) )			add_action( 'wp_head', array(&$this, 'recent_comments_style') );		add_action( 'comment_post', array(&$this, 'flush_widget_cache') );		add_action( 'transition_comment_status', array(&$this, 'flush_widget_cache') );	}	function recent_comments_style() { ?>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style><?php	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_comments', 'widget');	}	function widget( $args, $instance ) {		global $comments, $comment;		$cache = wp_cache_get('widget_recent_comments', 'widget');		if ( ! is_array( $cache ) )			$cache = array();		if ( isset( $cache[$args['widget_id']] ) ) {			echo $cache[$args['widget_id']];			return;		} 		extract($args, EXTR_SKIP); 		$output = ''; 		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Comments') : $instance['title']);		if ( ! $number = (int) $instance['number'] ) 			$number = 5; 		else if ( $number < 1 ) 			$number = 1;		$comments = get_comments( array( 'number' => $number, 'status' => 'approve' ) );		$output .= $before_widget;		if ( $title )			$output .= $before_title . $title . $after_title;		$output .= '<ul id="recentcomments">';		if ( $comments ) {			foreach ( (array) $comments as $comment) {				$output .=  '<li class="recentcomments">' . /* translators: comments widget: 1: comment author, 2: post link */ sprintf(_x('%1$s on %2$s', 'widgets'), get_comment_author_link(), '<a href="' . esc_url( get_comment_link($comment->comment_ID) ) . '">' . get_the_title($comment->comment_post_ID) . '</a>') . '</li>';			} 		}		$output .= '</ul>';		$output .= $after_widget;		echo $output;		$cache[$args['widget_id']] = $output;		wp_cache_set('widget_recent_comments', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_comments']) )			delete_option('widget_recent_comments');		return $instance;	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		$number = isset($instance['number']) ? absint($instance['number']) : 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of comments to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * RSS widget class * * @since 2.8.0 */class WP_Widget_RSS extends WP_Widget {	function WP_Widget_RSS() {		$widget_ops = array( 'description' => __('Entries from any RSS or Atom feed') );		$control_ops = array( 'width' => 400, 'height' => 200 );		$this->WP_Widget( 'rss', __('RSS'), $widget_ops, $control_ops );	}	function widget($args, $instance) {		if ( isset($instance['error']) && $instance['error'] )			return;		extract($args, EXTR_SKIP);		$url = $instance['url'];		while ( stristr($url, 'http') != $url )			$url = substr($url, 1);		if ( empty($url) )			return;		$rss = fetch_feed($url);		$title = $instance['title'];		$desc = '';		$link = '';		if ( ! is_wp_error($rss) ) {			$desc = esc_attr(strip_tags(@html_entity_decode($rss->get_description(), ENT_QUOTES, get_option('blog_charset'))));			if ( empty($title) )				$title = esc_html(strip_tags($rss->get_title()));			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);		}		if ( empty($title) )			$title = empty($desc) ? __('Unknown Feed') : $desc;		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		$url = esc_url(strip_tags($url));		$icon = includes_url('images/rss.png');		if ( $title )			$title = "<a class='rsswidget' href='$url' title='" . esc_attr__( 'Syndicate this content' ) ."'><img style='border:0' width='14' height='14' src='$icon' alt='RSS' /></a> <a class='rsswidget' href='$link' title='$desc'>$title</a>";		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		wp_widget_rss_output( $rss, $instance );		echo $after_widget;		if ( ! is_wp_error($rss) )			$rss->__destruct();		unset($rss);	}	function update($new_instance, $old_instance) {		$testurl = ( isset($new_instance['url']) && ($new_instance['url'] != $old_instance['url']) );		return wp_widget_rss_process( $new_instance, $testurl );	}	function form($instance) {		if ( empty($instance) )			$instance = array( 'title' => '', 'url' => '', 'items' => 10, 'error' => false, 'show_summary' => 0, 'show_author' => 0, 'show_date' => 0 );		$instance['number'] = $this->number;		wp_widget_rss_form( $instance );	}}/** * Display the RSS entries in a list. * * @since 2.5.0 * * @param string|array|object $rss RSS url. * @param array $args Widget arguments. */function wp_widget_rss_output( $rss, $args = array() ) {	if ( is_string( $rss ) ) {		$rss = fetch_feed($rss);	} elseif ( is_array($rss) && isset($rss['url']) ) {		$args = $rss;		$rss = fetch_feed($rss['url']);	} elseif ( !is_object($rss) ) {		return;	}	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') )			echo '<p>' . sprintf( __('<strong>RSS Error</strong>: %s'), $rss->get_error_message() ) . '</p>';		return;	}	$default_args = array( 'show_author' => 0, 'show_date' => 0, 'show_summary' => 0 );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$items = (int) $items;	if ( $items < 1 || 20 < $items )		$items = 10;	$show_summary  = (int) $show_summary;	$show_author   = (int) $show_author;	$show_date     = (int) $show_date;	if ( !$rss->get_item_quantity() ) {		echo '<ul><li>' . __( 'An error has occurred; the feed is probably down. Try again later.' ) . '</li></ul>';		$rss->__destruct();		unset($rss);		return;	}	echo '<ul>';	foreach ( $rss->get_items(0, $items) as $item ) {		$link = $item->get_link();		while ( stristr($link, 'http') != $link )			$link = substr($link, 1);		$link = esc_url(strip_tags($link));		$title = esc_attr(strip_tags($item->get_title()));		if ( empty($title) )			$title = __('Untitled');		$desc = str_replace( array("\n", "\r"), ' ', esc_attr( strip_tags( @html_entity_decode( $item->get_description(), ENT_QUOTES, get_option('blog_charset') ) ) ) );		$desc = wp_html_excerpt( $desc, 360 );		// Append ellipsis. Change existing [...] to [&hellip;].		if ( '[...]' == substr( $desc, -5 ) )			$desc = substr( $desc, 0, -5 ) . '[&hellip;]';		elseif ( '[&hellip;]' != substr( $desc, -10 ) )			$desc .= ' [&hellip;]';		$desc = esc_html( $desc );		if ( $show_summary ) {			$summary = "<div class='rssSummary'>$desc</div>";		} else {			$summary = '';		}		$date = '';		if ( $show_date ) {			$date = $item->get_date();			if ( $date ) {				if ( $date_stamp = strtotime( $date ) )					$date = ' <span class="rss-date">' . date_i18n( get_option( 'date_format' ), $date_stamp ) . '</span>';				else					$date = '';			}		}		$author = '';		if ( $show_author ) {			$author = $item->get_author();			if ( is_object($author) ) {				$author = $author->get_name();				$author = ' <cite>' . esc_html( strip_tags( $author ) ) . '</cite>';			}		}		if ( $link == '' ) {			echo "<li>$title{$date}{$summary}{$author}</li>";		} else {			echo "<li><a class='rsswidget' href='$link' title='$desc'>$title</a>{$date}{$summary}{$author}</li>";		}	}	echo '</ul>';	$rss->__destruct();	unset($rss);}/** * Display RSS widget options form. * * The options for what fields are displayed for the RSS form are all booleans * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author', * 'show_date'. * * @since 2.5.0 * * @param array|string $args Values for input fields. * @param array $inputs Override default display options. */function wp_widget_rss_form( $args, $inputs = null ) {	$default_inputs = array( 'url' => true, 'title' => true, 'items' => true, 'show_summary' => true, 'show_author' => true, 'show_date' => true );	$inputs = wp_parse_args( $inputs, $default_inputs );	extract( $args );	extract( $inputs, EXTR_SKIP);	$number = esc_attr( $number );	$title  = esc_attr( $title );	$url    = esc_url( $url );	$items  = (int) $items;	if ( $items < 1 || 20 < $items )		$items  = 10;	$show_summary   = (int) $show_summary;	$show_author    = (int) $show_author;	$show_date      = (int) $show_date;	if ( !empty($error) )		echo '<p class="widget-error"><strong>' . sprintf( __('RSS Error: %s'), $error) . '</strong></p>';	if ( $inputs['url'] ) :?>	<p><label for="rss-url-<?php echo $number; ?>"><?php _e('Enter the RSS feed URL here:'); ?></label>	<input class="widefat" id="rss-url-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][url]" type="text" value="<?php echo $url; ?>" /></p><?php endif; if ( $inputs['title'] ) : ?>	<p><label for="rss-title-<?php echo $number; ?>"><?php _e('Give the feed a title (optional):'); ?></label>	<input class="widefat" id="rss-title-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][title]" type="text" value="<?php echo $title; ?>" /></p><?php endif; if ( $inputs['items'] ) : ?>	<p><label for="rss-items-<?php echo $number; ?>"><?php _e('How many items would you like to display?'); ?></label>	<select id="rss-items-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][items]"><?php		for ( $i = 1; $i <= 20; ++$i )			echo "<option value='$i' " . ( $items == $i ? "selected='selected'" : '' ) . ">$i</option>";?>	</select></p><?php endif; if ( $inputs['show_summary'] ) : ?>	<p><input id="rss-show-summary-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_summary]" type="checkbox" value="1" <?php if ( $show_summary ) echo 'checked="checked"'; ?>/>	<label for="rss-show-summary-<?php echo $number; ?>"><?php _e('Display item content?'); ?></label></p><?php endif; if ( $inputs['show_author'] ) : ?>	<p><input id="rss-show-author-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_author]" type="checkbox" value="1" <?php if ( $show_author ) echo 'checked="checked"'; ?>/>	<label for="rss-show-author-<?php echo $number; ?>"><?php _e('Display item author if available?'); ?></label></p><?php endif; if ( $inputs['show_date'] ) : ?>	<p><input id="rss-show-date-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_date]" type="checkbox" value="1" <?php if ( $show_date ) echo 'checked="checked"'; ?>/>	<label for="rss-show-date-<?php echo $number; ?>"><?php _e('Display item date?'); ?></label></p><?php	endif;	foreach ( array_keys($default_inputs) as $input ) :		if ( 'hidden' === $inputs[$input] ) :			$id = str_replace( '_', '-', $input );?>	<input type="hidden" id="rss-<?php echo $id; ?>-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][<?php echo $input; ?>]" value="<?php echo $$input; ?>" /><?php		endif;	endforeach;}/** * Process RSS feed widget data and optionally retrieve feed items. * * The feed widget can not have more than 20 items or it will reset back to the * default, which is 10. * * The resulting array has the feed title, feed url, feed link (from channel), * feed items, error (if any), and whether to show summary, author, and date. * All respectively in the order of the array elements. * * @since 2.5.0 * * @param array $widget_rss RSS widget feed data. Expects unescaped data. * @param bool $check_feed Optional, default is true. Whether to check feed for errors. * @return array */function wp_widget_rss_process( $widget_rss, $check_feed = true ) {	$items = (int) $widget_rss['items'];	if ( $items < 1 || 20 < $items )		$items = 10;	$url           = esc_url_raw(strip_tags( $widget_rss['url'] ));	$title         = trim(strip_tags( $widget_rss['title'] ));	$show_summary  = isset($widget_rss['show_summary']) ? (int) $widget_rss['show_summary'] : 0;	$show_author   = isset($widget_rss['show_author']) ? (int) $widget_rss['show_author'] :0;	$show_date     = isset($widget_rss['show_date']) ? (int) $widget_rss['show_date'] : 0;	if ( $check_feed ) {		$rss = fetch_feed($url);		$error = false;		$link = '';		if ( is_wp_error($rss) ) {			$error = $rss->get_error_message();		} else {			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);			$rss->__destruct();			unset($rss);		}	}	return compact( 'title', 'url', 'link', 'items', 'error', 'show_summary', 'show_author', 'show_date' );}/** * Tag cloud widget class * * @since 2.8.0 */class WP_Widget_Tag_Cloud extends WP_Widget {	function WP_Widget_Tag_Cloud() {		$widget_ops = array( 'description' => __( "Your most used tags in cloud format") );		$this->WP_Widget('tag_cloud', __('Tag Cloud'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$current_taxonomy = $this->_get_current_taxonomy($instance);		if ( !empty($instance['title']) ) {			$title = $instance['title'];		} else {			if ( 'post_tag' == $current_taxonomy ) {				$title = __('Tags');			} else {				$tax = get_taxonomy($current_taxonomy);				$title = $tax->labels->name;			}		}		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div>';		wp_tag_cloud( apply_filters('widget_tag_cloud_args', array('taxonomy' => $current_taxonomy) ) );		echo "</div>\n";		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags(stripslashes($new_instance['title']));		$instance['taxonomy'] = stripslashes($new_instance['taxonomy']);		return $instance;	}	function form( $instance ) {		$current_taxonomy = $this->_get_current_taxonomy($instance);?>	<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>	<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php if (isset ( $instance['title'])) {echo esc_attr( $instance['title'] );} ?>" /></p>	<p><label for="<?php echo $this->get_field_id('taxonomy'); ?>"><?php _e('Taxonomy:') ?></label>	<select class="widefat" id="<?php echo $this->get_field_id('taxonomy'); ?>" name="<?php echo $this->get_field_name('taxonomy'); ?>">	<?php foreach ( get_object_taxonomies('post') as $taxonomy ) :				$tax = get_taxonomy($taxonomy);				if ( !$tax->show_tagcloud || empty($tax->labels->name) )					continue;	?>		<option value="<?php echo esc_attr($taxonomy) ?>" <?php selected($taxonomy, $current_taxonomy) ?>><?php echo $tax->labels->name; ?></option>	<?php endforeach; ?>	</select></p><?php	}	function _get_current_taxonomy($instance) {		if ( !empty($instance['taxonomy']) && taxonomy_exists($instance['taxonomy']) )			return $instance['taxonomy'];		return 'post_tag';	}}/** * Navigation Menu widget class * * @since 3.0.0 */ class WP_Nav_Menu_Widget extends WP_Widget {	function WP_Nav_Menu_Widget() {		$widget_ops = array( 'description' => __('Use this widget to add one of your custom menus as a widget.') );		parent::WP_Widget( 'nav_menu', __('Custom Menu'), $widget_ops );	}	function widget($args, $instance) {		// Get menu		$nav_menu = wp_get_nav_menu_object( $instance['nav_menu'] );		if ( !$nav_menu )			return;		echo $args['before_widget'];		if ( !empty($instance['title']) )			echo $args['before_title'] . $instance['title'] . $args['after_title'];		wp_nav_menu( array( 'fallback_cb' => '', 'menu' => $nav_menu ) );		echo $args['after_widget'];	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags( stripslashes($new_instance['title']) );		$instance['nav_menu'] = (int) $new_instance['nav_menu'];		return $instance;	}	function form( $instance ) {		$title = isset( $instance['title'] ) ? $instance['title'] : '';		$nav_menu = isset( $instance['nav_menu'] ) ? $instance['nav_menu'] : '';		// Get menus		$menus = get_terms( 'nav_menu', array( 'hide_empty' => false ) );		// If no menus exists, direct the user to go and create some.		if ( !$menus ) {			echo '<p>'. sprintf( __('No menus have been created yet. <a href="%s">Create some</a>.'), admin_url('nav-menus.php') ) .'</p>';			return;		}		?>		<p>			<label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>			<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id('nav_menu'); ?>"><?php _e('Select Menu:'); ?></label>			<select id="<?php echo $this->get_field_id('nav_menu'); ?>" name="<?php echo $this->get_field_name('nav_menu'); ?>">		<?php			foreach ( $menus as $menu ) {				$selected = $nav_menu == $menu->term_id ? ' selected="selected"' : '';				echo '<option'. $selected .' value="'. $menu->term_id .'">'. $menu->name .'</option>';			}		?>			</select>		</p>		<?php	}}/** * Register all of the default WordPress widgets on startup. * * Calls 'widgets_init' action after all of the WordPress widgets have been * registered. * * @since 2.2.0 */function wp_widgets_init() {	if ( !is_blog_installed() )		return;	register_widget('WP_Widget_Pages');	register_widget('WP_Widget_Calendar');	register_widget('WP_Widget_Archives');	register_widget('WP_Widget_Links');	register_widget('WP_Widget_Meta');	register_widget('WP_Widget_Search');	register_widget('WP_Widget_Text');	register_widget('WP_Widget_Categories');	register_widget('WP_Widget_Recent_Posts');	register_widget('WP_Widget_Recent_Comments');	register_widget('WP_Widget_RSS');	register_widget('WP_Widget_Tag_Cloud');	register_widget('WP_Nav_Menu_Widget');	do_action('widgets_init');}add_action('init', 'wp_widgets_init', 1);
<?php/** * WordPress Roles and Capabilities. * * @package WordPress * @subpackage User *//** * WordPress User Roles. * * The role option is simple, the structure is organized by role name that store * the name in value of the 'name' key. The capabilities are stored as an array * in the value of the 'capability' key. * * <code> * array ( *		'rolename' => array ( *			'name' => 'rolename', *			'capabilities' => array() *		) * ) * </code> * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Roles {	/**	 * List of roles and capabilities.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles;	/**	 * List of the role objects.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_objects = array();	/**	 * List of role names.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_names = array();	/**	 * Option name for storing role list.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $role_key;	/**	 * Whether to use the database for retrieval and storage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $use_db = true;	/**	 * PHP4 Constructor - Call {@link WP_Roles::_init()} method.	 *	 * @since 2.0.0	 * @access public	 *	 * @return WP_Roles	 */	function WP_Roles() {		$this->_init();	}	/**	 * Set up the object properties.	 *	 * The role key is set to the current prefix for the $wpdb object with	 * 'user_roles' appended. If the $wp_user_roles global is set, then it will	 * be used and the role option will not be updated or used.	 *	 * @since 2.1.0	 * @access protected	 * @uses $wpdb Used to get the database prefix.	 * @global array $wp_user_roles Used to set the 'roles' property value.	 */	function _init () {		global $wpdb, $wp_user_roles;		$this->role_key = $wpdb->prefix . 'user_roles';		if ( ! empty( $wp_user_roles ) ) {			$this->roles = $wp_user_roles;			$this->use_db = false;		} else {			$this->roles = get_option( $this->role_key );		}		if ( empty( $this->roles ) )			return;		$this->role_objects = array();		$this->role_names =  array();		foreach ( (array) $this->roles as $role => $data ) {			$this->role_objects[$role] = new WP_Role( $role, $this->roles[$role]['capabilities'] );			$this->role_names[$role] = $this->roles[$role]['name'];		}	}	/**	 * Add role name with capabilities to list.	 *	 * Updates the list of roles, if the role doesn't already exist.	 *	 * The capabilities are defined in the following format `array( 'read' => true );`	 * To explicitly deny a role a capability you set the value for that capability to false.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $display_name Role display name.	 * @param array $capabilities List of role capabilities in the above format.	 * @return null|WP_Role WP_Role object if role is added, null if already exists.	 */	function add_role( $role, $display_name, $capabilities = array() ) {		if ( isset( $this->roles[$role] ) )			return;		$this->roles[$role] = array(			'name' => $display_name,			'capabilities' => $capabilities			);		if ( $this->use_db )			update_option( $this->role_key, $this->roles );		$this->role_objects[$role] = new WP_Role( $role, $capabilities );		$this->role_names[$role] = $display_name;		return $this->role_objects[$role];	}	/**	 * Remove role by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( ! isset( $this->role_objects[$role] ) )			return;		unset( $this->role_objects[$role] );		unset( $this->role_names[$role] );		unset( $this->roles[$role] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Add capability to role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 * @param bool $grant Optional, default is true. Whether role is capable of performing capability.	 */	function add_cap( $role, $cap, $grant = true ) {		$this->roles[$role]['capabilities'][$cap] = $grant;		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Remove capability from role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 */	function remove_cap( $role, $cap ) {		unset( $this->roles[$role]['capabilities'][$cap] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Retrieve role object by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @return object|null Null, if role does not exist. WP_Role object, if found.	 */	function &get_role( $role ) {		if ( isset( $this->role_objects[$role] ) )			return $this->role_objects[$role];		else			return null;	}	/**	 * Retrieve list of role names.	 *	 * @since 2.0.0	 * @access public	 *	 * @return array List of role names.	 */	function get_names() {		return $this->role_names;	}	/**	 * Whether role name is currently in the list of available roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name to look up.	 * @return bool	 */	function is_role( $role )	{		return isset( $this->role_names[$role] );	}}/** * WordPress Role class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Role {	/**	 * Role name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $name;	/**	 * List of capabilities the role contains.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $capabilities;	/**	 * PHP4 Constructor - Set up object properties.	 *	 * The list of capabilities, must have the key as the name of the capability	 * and the value a boolean of whether it is granted to the role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param array $capabilities List of capabilities.	 * @return WP_Role	 */	function WP_Role( $role, $capabilities ) {		$this->name = $role;		$this->capabilities = $capabilities;	}	/**	 * Assign role a capability.	 *	 * @see WP_Roles::add_cap() Method uses implementation for role.	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether role has capability privilege.	 */	function add_cap( $cap, $grant = true ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$this->capabilities[$cap] = $grant;		$wp_roles->add_cap( $this->name, $cap, $grant );	}	/**	 * Remove capability from role.	 *	 * This is a container for {@link WP_Roles::remove_cap()} to remove the	 * capability from the role. That is to say, that {@link	 * WP_Roles::remove_cap()} implements the functionality, but it also makes	 * sense to use this class, because you don't need to enter the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		unset( $this->capabilities[$cap] );		$wp_roles->remove_cap( $this->name, $cap );	}	/**	 * Whether role has capability.	 *	 * The capabilities is passed through the 'role_has_cap' filter. The first	 * parameter for the hook is the list of capabilities the class has	 * assigned. The second parameter is the capability name to look for. The	 * third and final parameter for the hook is the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @return bool True, if user has capability. False, if doesn't have capability.	 */	function has_cap( $cap ) {		$capabilities = apply_filters( 'role_has_cap', $this->capabilities, $cap, $this->name );		if ( !empty( $capabilities[$cap] ) )			return $capabilities[$cap];		else			return false;	}}/** * WordPress User class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_User {	/**	 * User data container.	 *	 * This will be set as properties of the object.	 *	 * @since 2.0.0	 * @access private	 * @var array	 */	var $data;	/**	 * The user's ID.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $ID = 0;	/**	 * The deprecated user's ID.	 *	 * @since 2.0.0	 * @access public	 * @deprecated Use WP_User::$ID	 * @see WP_User::$ID	 * @var int	 */	var $id = 0;	/**	 * The individual capabilities the user has been given.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $caps = array();	/**	 * User metadata option name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $cap_key;	/**	 * The roles the user is part of.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles = array();	/**	 * All capabilities the user has, including individual and role based.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $allcaps = array();	/**	 * First name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $first_name = '';	/**	 * Last name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $last_name = '';	/**	 * The filter context applied to user data fields.	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $filter = null;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * Retrieves the userdata and then assigns all of the data keys to direct	 * properties of the object. Calls {@link WP_User::_init_caps()} after	 * setting up the object's user data properties.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int|string $id User's ID or username	 * @param int $name Optional. User's username	 * @return WP_User	 */	function WP_User( $id, $name = '' ) {		if ( empty( $id ) && empty( $name ) )			return;		if ( ! is_numeric( $id ) ) {			$name = $id;			$id = 0;		}		if ( ! empty( $id ) )			$this->data = get_userdata( $id );		else			$this->data = get_userdatabylogin( $name );		if ( empty( $this->data->ID ) )			return;		foreach ( get_object_vars( $this->data ) as $key => $value ) {			$this->{$key} = $value;		}		$this->id = $this->ID;		$this->_init_caps();	}	/**	 * Set up capability object properties.	 *	 * Will set the value for the 'cap_key' property to current database table	 * prefix, followed by 'capabilities'. Will then check to see if the	 * property matching the 'cap_key' exists and is an array. If so, it will be	 * used.	 *	 * @since 2.1.0	 *	 * @param string $cap_key Optional capability key	 * @access protected	 */	function _init_caps( $cap_key = '' ) {		global $wpdb;		if ( empty($cap_key) )			$this->cap_key = $wpdb->prefix . 'capabilities';		else			$this->cap_key = $cap_key;		$this->caps = &$this->{$this->cap_key};		if ( ! is_array( $this->caps ) )			$this->caps = array();		$this->get_role_caps();	}	/**	 * Retrieve all of the role capabilities and merge with individual capabilities.	 *	 * All of the capabilities of the roles the user belongs to are merged with	 * the users individual roles. This also means that the user can be denied	 * specific roles that their role might have, but the specific user isn't	 * granted permission to.	 *	 * @since 2.0.0	 * @uses $wp_roles	 * @access public	 */	function get_role_caps() {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		//Filter out caps that are not role names and assign to $this->roles		if ( is_array( $this->caps ) )			$this->roles = array_filter( array_keys( $this->caps ), array( &$wp_roles, 'is_role' ) );		//Build $allcaps from role caps, overlay user's $caps		$this->allcaps = array();		foreach ( (array) $this->roles as $role ) {			$the_role =& $wp_roles->get_role( $role );			$this->allcaps = array_merge( (array) $this->allcaps, (array) $the_role->capabilities );		}		$this->allcaps = array_merge( (array) $this->allcaps, (array) $this->caps );	}	/**	 * Add role to user.	 *	 * Updates the user's meta data option with capabilities and roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function add_role( $role ) {		$this->caps[$role] = true;		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Remove role from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( !in_array($role, $this->roles) )			return;		unset( $this->caps[$role] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Set the role of the user.	 *	 * This will remove the previous roles of the user and assign the user the	 * new one. You can set the role to an empty string and it will remove all	 * of the roles from the user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function set_role( $role ) {		foreach ( (array) $this->roles as $oldrole )			unset( $this->caps[$oldrole] );		if ( !empty( $role ) ) {			$this->caps[$role] = true;			$this->roles = array( $role => true );		} else {			$this->roles = false;		}		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();		do_action( 'set_user_role', $this->ID, $role );	}	/**	 * Choose the maximum level the user has.	 *	 * Will compare the level from the $item parameter against the $max	 * parameter. If the item is incorrect, then just the $max parameter value	 * will be returned.	 *	 * Used to get the max level based on the capabilities the user has. This	 * is also based on roles, so if the user is assigned the Administrator role	 * then the capability 'level_10' will exist and the user will get that	 * value.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $max Max level of user.	 * @param string $item Level capability name.	 * @return int Max Level.	 */	function level_reduction( $max, $item ) {		if ( preg_match( '/^level_(10|[0-9])$/i', $item, $matches ) ) {			$level = intval( $matches[1] );			return max( $max, $level );		} else {			return $max;		}	}	/**	 * Update the maximum user level for the user.	 *	 * Updates the 'user_level' user metadata (includes prefix that is the	 * database table prefix) with the maximum user level. Gets the value from	 * the all of the capabilities that the user has.	 *	 * @since 2.0.0	 * @access public	 */	function update_user_level_from_caps() {		global $wpdb;		$this->user_level = array_reduce( array_keys( $this->allcaps ), array( &$this, 'level_reduction' ), 0 );		update_user_meta( $this->ID, $wpdb->prefix . 'user_level', $this->user_level );	}	/**	 * Add capability and grant or deny access to capability.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether to grant capability to user.	 */	function add_cap( $cap, $grant = true ) {		$this->caps[$cap] = $grant;		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove capability from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		if ( empty( $this->caps[$cap] ) )			return;		unset( $this->caps[$cap] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove all of the capabilities of the user.	 *	 * @since 2.1.0	 * @access public	 */	function remove_all_caps() {		global $wpdb;		$this->caps = array();		delete_user_meta( $this->ID, $this->cap_key );		delete_user_meta( $this->ID, $wpdb->prefix . 'user_level' );		$this->get_role_caps();	}	/**	 * Whether user has capability or role name.	 *	 * This is useful for looking up whether the user has a specific role	 * assigned to the user. The second optional parameter can also be used to	 * check for capabilities against a specfic post.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string|int $cap Capability or role name to search.	 * @param int $post_id Optional. Post ID to check capability against specific post.	 * @return bool True, if user has capability; false, if user does not have capability.	 */	function has_cap( $cap ) {		if ( is_numeric( $cap ) ) {			_deprecated_argument( __FUNCTION__, '2.0', __('Usage of user levels by plugins and themes is deprecated. Use roles and capabilities instead.') );			$cap = $this->translate_level_to_cap( $cap );		}		$args = array_slice( func_get_args(), 1 );		$args = array_merge( array( $cap, $this->ID ), $args );		$caps = call_user_func_array( 'map_meta_cap', $args );		// Multisite super admin has all caps by definition, Unless specifically denied.		if ( is_multisite() && is_super_admin() ) {			if ( in_array('do_not_allow', $caps) )				return false;			return true;		}		// Must have ALL requested caps		$capabilities = apply_filters( 'user_has_cap', $this->allcaps, $caps, $args );		foreach ( (array) $caps as $cap ) {			//echo "Checking cap $cap<br />";			if ( empty( $capabilities[$cap] ) || !$capabilities[$cap] )				return false;		}		return true;	}	/**	 * Convert numeric level to level capability name.	 *	 * Prepends 'level_' to level number.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $level Level number, 1 to 10.	 * @return string	 */	function translate_level_to_cap( $level ) {		return 'level_' . $level;	}	/**	 * Set the blog to operate on. Defaults to the current blog.	 *	 * @since 3.0.0	 *	 * @param int $blog_id Optional Blog ID, defaults to current blog.	 */	function for_blog( $blog_id = '' ) {		global $wpdb;		if ( ! empty( $blog_id ) )			$cap_key = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';		else			$cap_key = '';		$this->_init_caps( $cap_key );	}}/** * Map meta capabilities to primitive capabilities. * * This does not actually compare whether the user ID has the actual capability, * just what the capability or capabilities are. Meta capability list value can * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post', * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'. * * @since 2.0.0 * * @param string $cap Capability name. * @param int $user_id User ID. * @return array Actual capabilities for meta capability. */function map_meta_cap( $cap, $user_id ) {	$args = array_slice( func_get_args(), 2 );	$caps = array();	switch ( $cap ) {	case 'remove_user':		$caps[] = 'remove_users';		break;	case 'delete_user':		$caps[] = 'delete_users';		break;	case 'promote_user':		$caps[] = 'promote_users';		break;	case 'edit_user':		// Allow user to edit itself		if ( isset( $args[0] ) && $user_id == $args[0] )			break;		// Fall through	case 'edit_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = 'edit_users'; // Explicit due to primitive fall through		break;	case 'delete_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->delete_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( '' != $post->post_author ) {			$post_author_data = get_userdata( $post->post_author );		} else {			//No author set yet so default to current user for cap checks			$post_author_data = $author_data;		}		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'delete_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_posts';			} else {				// If the post is draft...				$caps[] = 'delete_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'delete_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'delete_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'delete_private_posts';		}		break;	case 'delete_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ('' != $page->post_author) {			$page_author_data = get_userdata( $page->post_author );		} else {			//No author set yet so default to current user for cap checks			$page_author_data = $author_data;		}		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( $page->post_status == 'publish' ) {				$caps[] = 'delete_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_pages';			} else {				// If the page is draft...				$caps[] = 'delete_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'delete_others_pages';			// The page is published, extra cap required.			if ( $page->post_status == 'publish' )				$caps[] = 'delete_published_pages';			elseif ( $page->post_status == 'private' )				$caps[] = 'delete_private_pages';		}		break;		// edit_post breaks down to edit_posts, edit_published_posts, or		// edit_others_posts	case 'edit_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->edit_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		$post_author_data = get_userdata( $post->post_author );		//echo "current user id : $user_id, post author id: " . $post_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'edit_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_posts';			} else {				// If the post is draft...				$caps[] = 'edit_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'edit_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'edit_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'edit_private_posts';		}		break;	case 'edit_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( 'publish' == $page->post_status ) {				$caps[] = 'edit_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_pages';			} else {				// If the page is draft...				$caps[] = 'edit_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'edit_others_pages';			// The page is published, extra cap required.			if ( 'publish' == $page->post_status )				$caps[] = 'edit_published_pages';			elseif ( 'private' == $page->post_status )				$caps[] = 'edit_private_pages';		}		break;	case 'read_post':		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->read_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( 'private' != $post->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$post_author_data = get_userdata( $post->post_author );		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_posts';		break;	case 'read_page':		$page = get_page( $args[0] );		if ( 'private' != $page->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$page_author_data = get_userdata( $page->post_author );		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_pages';		break;	case 'unfiltered_upload':		if ( defined('ALLOW_UNFILTERED_UPLOADS') && ALLOW_UNFILTERED_UPLOADS && ( !is_multisite() || is_super_admin() )  )			$caps[] = $cap;		else			$caps[] = 'do_not_allow';		break;	case 'edit_files':	case 'edit_plugins':	case 'edit_themes':		if ( defined('DISALLOW_FILE_EDIT') && DISALLOW_FILE_EDIT ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_EDIT.	case 'update_plugins':	case 'delete_plugins':	case 'install_plugins':	case 'update_themes':	case 'delete_themes':	case 'install_themes':	case 'update_core':		// Disallow anything that creates, deletes, or edits core, plugin, or theme files.		// Files in uploads are excepted.		if ( defined('DISALLOW_FILE_MODS') && DISALLOW_FILE_MODS ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_MODS.	case 'unfiltered_html':		// Disallow unfiltered_html for all users, even admins and super admins.		if ( defined('DISALLOW_UNFILTERED_HTML') && DISALLOW_UNFILTERED_HTML ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_UNFILTERED_HTML	case 'delete_user':	case 'delete_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	case 'create_users':		if ( is_multisite() && !get_site_option( 'add_new_users' ) )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	default:		// If no meta caps match, return the original cap.		$caps[] = $cap;	}	return apply_filters('map_meta_cap', $caps, $cap, $user_id, $args);}/** * Whether current user has capability or role. * * @since 2.0.0 * * @param string $capability Capability or role name. * @return bool */function current_user_can( $capability ) {	$current_user = wp_get_current_user();	if ( empty( $current_user ) )		return false;	$args = array_slice( func_get_args(), 1 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$current_user, 'has_cap' ), $args );}/** * Whether current user has a capability or role for a given blog. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param string $capability Capability or role name. * @return bool */function current_user_can_for_blog( $blog_id, $capability ) {	$current_user = wp_get_current_user();    if ( is_multisite() && is_super_admin() )		return true;	if ( empty( $current_user ) )		return false;	// Create new object to avoid stomping the global current_user.	$user = new WP_User( $current_user->id) ;	// Set the blog id.  @todo add blog id arg to WP_User constructor?	$user->for_blog( $blog_id );	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$user, 'has_cap' ), $args );}/** * Whether author of supplied post has capability or role. * * @since 2.9.0 * * @param int|object $post Post ID or post object. * @param string $capability Capability or role name. * @return bool */function author_can( $post, $capability ) {	if ( !$post = get_post($post) )		return false;	$author = new WP_User( $post->post_author );	if ( empty( $author ) )		return false;	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$author, 'has_cap' ), $args );}/** * Retrieve role object. * * @see WP_Roles::get_role() Uses method to retrieve role object. * @since 2.0.0 * * @param string $role Role name. * @return object */function get_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->get_role( $role );}/** * Add role, if it does not exist. * * @see WP_Roles::add_role() Uses method to add role. * @since 2.0.0 * * @param string $role Role name. * @param string $display_name Display name for role. * @param array $capabilities List of capabilities. * @return null|WP_Role WP_Role object if role is added, null if already exists. */function add_role( $role, $display_name, $capabilities = array() ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->add_role( $role, $display_name, $capabilities );}/** * Remove role, if it exists. * * @see WP_Roles::remove_role() Uses method to remove role. * @since 2.0.0 * * @param string $role Role name. * @return null */function remove_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->remove_role( $role );}/** * Retrieve a list of super admins. * * @since 3.0.0 * * @uses $super_admins Super admins global variable, if set. * * @return array List of super admin logins */function get_super_admins() {	global $super_admins;	if ( isset($super_admins) )		return $super_admins;	else		return get_site_option( 'site_admins', array('admin') );}/** * Determine if user is a site admin. * * @since 3.0.0 * * @param int $user_id (Optional) The ID of a user. Defaults to the current user. * @return bool True if the user is a site admin. */function is_super_admin( $user_id = false ) {	if ( ! $user_id ) {		$current_user = wp_get_current_user();		$user_id = ! empty($current_user) ? $current_user->id : 0;	}	if ( ! $user_id )		return false;	$user = new WP_User($user_id);	if ( is_multisite() ) {		$super_admins = get_super_admins();		if ( is_array( $super_admins ) && in_array( $user->user_login, $super_admins ) )			return true;	} else {		if ( $user->has_cap('delete_users') )			return true;	}	return false;}?>
<?php/** * Taxonomy API * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 *///// Taxonomy Registration///** * Creates the initial taxonomies when 'init' action is fired. */function create_initial_taxonomies() {	register_taxonomy( 'category', 'post', array(		'hierarchical' => true,	 	'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) ) ;	register_taxonomy( 'post_tag', 'post', array(	 	'hierarchical' => false,		'update_count_callback' => '_update_post_term_count',		'query_var' => false,		'rewrite' => false,		'public' => true,		'show_ui' => true,		'_builtin' => true,	) );	register_taxonomy( 'nav_menu', 'nav_menu_item', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Navigation Menus' ),			'singular_name' => __( 'Navigation Menu' ),		),		'query_var' => false,		'rewrite' => false,		'show_ui' => false,		'_builtin' => true,		'show_in_nav_menus' => false,	) ) ;	register_taxonomy( 'link_category', 'link', array(		'hierarchical' => false,		'labels' => array(			'name' => __( 'Categories' ),			'singular_name' => __( 'Category' ),			'update_item' => __( 'Update Category' ),		),		'query_var' => false,		'rewrite' => false,		'public' => false,		'show_ui' => false,		'_builtin' => true,	) ) ;}add_action( 'init', 'create_initial_taxonomies', 0 ); // highest priority/** * Get a list of registered taxonomy objects. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies * @see register_taxonomy * * @param array $args An array of key => value arguments to match against the taxonomy objects. * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of taxonomy names or objects */function get_taxonomies( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_taxonomies;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_taxonomies, $args, $operator, $field);}/** * Return all of the taxonomy names that are of $object_type. * * It appears that this function can be used to find all of the names inside of * $wp_taxonomies global variable. * * <code><?php $taxonomies = get_object_taxonomies('post'); ?></code> Should * result in <code>Array('category', 'post_tag')</code> * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * * @param array|string|object $object Name of the type of taxonomy object, or an object (row from posts) * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default. * @return array The names of all taxonomy of $object_type. */function get_object_taxonomies($object, $output = 'names') {	global $wp_taxonomies;	if ( is_object($object) ) {		if ( $object->post_type == 'attachment' )			return get_attachment_taxonomies($object);		$object = $object->post_type;	}	$object = (array) $object;	$taxonomies = array();	foreach ( (array) $wp_taxonomies as $tax_name => $tax_obj ) {		if ( array_intersect($object, (array) $tax_obj->object_type) ) {			if ( 'names' == $output )				$taxonomies[] = $tax_name;			else				$taxonomies[ $tax_name ] = $tax_obj;		}	}	return $taxonomies;}/** * Retrieves the taxonomy object of $taxonomy. * * The get_taxonomy function will first check that the parameter string given * is a taxonomy object and if it is, it will return it. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wp_taxonomies * @uses taxonomy_exists() Checks whether taxonomy exists * * @param string $taxonomy Name of taxonomy object to return * @return object|bool The Taxonomy Object or false if $taxonomy doesn't exist */function get_taxonomy( $taxonomy ) {	global $wp_taxonomies;	if ( ! taxonomy_exists( $taxonomy ) )		return false;	return $wp_taxonomies[$taxonomy];}/** * Checks that the taxonomy name exists. * * Formerly is_taxonomy(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wp_taxonomies * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function taxonomy_exists( $taxonomy ) {	global $wp_taxonomies;	return isset( $wp_taxonomies[$taxonomy] );}/** * Whether the taxonomy object is hierarchical. * * Checks to make sure that the taxonomy is an object first. Then Gets the * object, and finally returns the hierarchical value in the object. * * A false return value might also mean that the taxonomy does not exist. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses taxonomy_exists() Checks whether taxonomy exists * @uses get_taxonomy() Used to get the taxonomy object * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy is hierarchical */function is_taxonomy_hierarchical($taxonomy) {	if ( ! taxonomy_exists($taxonomy) )		return false;	$taxonomy = get_taxonomy($taxonomy);	return $taxonomy->hierarchical;}/** * Create or modify a taxonomy object. Do not use before init. * * A simple function for creating or modifying a taxonomy object based on the * parameters given. The function will accept an array (third optional * parameter), along with strings for the taxonomy name and another string for * the object type. * * Nothing is returned, so expect error maybe or use taxonomy_exists() to check * whether taxonomy exists. * * Optional $args contents: * * label - Name of the taxonomy shown in the menu. Usually plural. If not set, labels['name'] will be used. * * hierarchical - has some defined purpose at other parts of the API and is a * boolean value. * * update_count_callback - works much like a hook, in that it will be called * when the count is updated. * * rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize * permastruct; default will use $taxonomy as slug. * * query_var - false to prevent queries, or string to customize query var * (?$query_var=$term); default will use $taxonomy as query var. * * public - If the taxonomy should be publically queryable; //@TODO not implemented. * defaults to true. * * show_ui - If the WordPress UI admin tags UI should apply to this taxonomy; * defaults to public. * * show_in_nav_menus - true makes this taxonomy available for selection in navigation menus. * Defaults to public. * * show_tagcloud - false to prevent the taxonomy being listed in the Tag Cloud Widget; * defaults to show_ui which defalts to public. * * labels - An array of labels for this taxonomy. You can see accepted values in {@link get_taxonomy_labels()}. By default tag labels are used for non-hierarchical types and category labels for hierarchical ones. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wp_taxonomies Inserts new taxonomy object into the list * @uses $wp_rewrite Adds rewrite tags and permastructs * @uses $wp Adds query vars * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type for the taxonomy object. * @param array|string $args See above description for the two keys values. */function register_taxonomy( $taxonomy, $object_type, $args = array() ) {	global $wp_taxonomies, $wp_rewrite, $wp;	if ( ! is_array($wp_taxonomies) )		$wp_taxonomies = array();	$defaults = array(	'hierarchical' => false,						'update_count_callback' => '',						'rewrite' => true,						'query_var' => $taxonomy,						'public' => true,						'show_ui' => null,						'show_tagcloud' => null,						'_builtin' => false,						'labels' => array(),						'capabilities' => array(),						'show_in_nav_menus' => null,					);	$args = wp_parse_args($args, $defaults);	if ( false !== $args['query_var'] && !empty($wp) ) {		if ( true === $args['query_var'] )			$args['query_var'] = $taxonomy;		$args['query_var'] = sanitize_title_with_dashes($args['query_var']);		$wp->add_query_var($args['query_var']);	}	if ( false !== $args['rewrite'] && '' != get_option('permalink_structure') ) {		$args['rewrite'] = wp_parse_args($args['rewrite'], array(			'slug' => sanitize_title_with_dashes($taxonomy),			'with_front' => true,		));		$wp_rewrite->add_rewrite_tag("%$taxonomy%", '([^/]+)', $args['query_var'] ? "{$args['query_var']}=" : "taxonomy=$taxonomy&term=");		$wp_rewrite->add_permastruct($taxonomy, "{$args['rewrite']['slug']}/%$taxonomy%", $args['rewrite']['with_front']);	}	if ( is_null($args['show_ui']) )		$args['show_ui'] = $args['public'];	// Whether to show this type in nav-menus.php. Defaults to the setting for public.	if ( null === $args['show_in_nav_menus'] )		$args['show_in_nav_menus'] = $args['public'];	if ( is_null($args['show_tagcloud']) )		$args['show_tagcloud'] = $args['show_ui'];	$default_caps = array(		'manage_terms' => 'manage_categories',		'edit_terms'   => 'manage_categories',		'delete_terms' => 'manage_categories',		'assign_terms' => 'edit_posts',	);	$args['cap'] = (object) array_merge( $default_caps, $args['capabilities'] );	unset( $args['capabilities'] );	$args['name'] = $taxonomy;	$args['object_type'] = (array) $object_type;	$args['labels'] = get_taxonomy_labels( (object) $args );	$args['label'] = $args['labels']->name;	$wp_taxonomies[$taxonomy] = (object) $args;	// register callback handling for metabox 	add_filter('wp_ajax_add-'.$taxonomy, '_wp_ajax_add_hierarchical_term');}/** * Builds an object with all taxonomy labels out of a taxonomy object * * Accepted keys of the label array in the taxonomy object: * - name - general name for the taxonomy, usually plural. The same as and overriden by $tax->label. Default is Post Tags/Categories * - singular_name - name for one object of this taxonomy. Default is Post Tag/Category * - search_items - Default is Search Tags/Search Categories * - popular_items - This string isn't used on hierarchical taxonomies. Default is Popular Tags * - all_items - Default is All Tags/All Categories * - parent_item - This string isn't used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category * - parent_item_colon - The same as <code>parent_item</code>, but with colon <code>:</code> in the end * - edit_item - Default is Edit Tag/Edit Category * - update_item - Default is Update Tag/Update Category * - add_new_item - Default is Add New Tag/Add New Category * - new_item_name - Default is New Tag Name/New Category Name * - separate_items_with_commas - This string isn't used on hierarchical taxonomies. Default is "Separate tags with commas," used in the meta box. * - add_or_remove_items - This string isn't used on hierarchical taxonomies. Default is "Add or remove tags," used in the meta box when JavaScript is disabled. * - choose_from_most_used - This string isn't used on hierarchical taxonomies. Default is "Choose from the most used tags," used in the meta box. * * Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories.) * * @since 3.0.0 * @param object $tax Taxonomy object * @return object object with all the labels as member variables */function get_taxonomy_labels( $tax ) {	if ( isset( $tax->helps ) && empty( $tax->labels['separate_items_with_commas'] ) )		$tax->labels['separate_items_with_commas'] = $tax->helps;	$nohier_vs_hier_defaults = array(		'name' => array( _x( 'Post Tags', 'taxonomy general name' ), _x( 'Categories', 'taxonomy general name' ) ),		'singular_name' => array( _x( 'Post Tag', 'taxonomy singular name' ), _x( 'Category', 'taxonomy singular name' ) ),		'search_items' => array( __( 'Search Tags' ), __( 'Search Categories' ) ),		'popular_items' => array( __( 'Popular Tags' ), null ),		'all_items' => array( __( 'All Tags' ), __( 'All Categories' ) ),		'parent_item' => array( null, __( 'Parent Category' ) ),		'parent_item_colon' => array( null, __( 'Parent Category:' ) ),		'edit_item' => array( __( 'Edit Tag' ), __( 'Edit Category' ) ),		'update_item' => array( __( 'Update Tag' ), __( 'Update Category' ) ),		'add_new_item' => array( __( 'Add New Tag' ), __( 'Add New Category' ) ),		'new_item_name' => array( __( 'New Tag Name' ), __( 'New Category Name' ) ),		'separate_items_with_commas' => array( __( 'Separate tags with commas' ), null ),		'add_or_remove_items' => array( __( 'Add or remove tags' ), null ),		'choose_from_most_used' => array( __( 'Choose from the most used tags' ), null ),	);	return _get_custom_object_labels( $tax, $nohier_vs_hier_defaults );}/** * Add an already registered taxonomy to an object type. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * @uses $wp_taxonomies Modifies taxonomy object * * @param string $taxonomy Name of taxonomy object * @param array|string $object_type Name of the object type * @return bool True if successful, false if not */function register_taxonomy_for_object_type( $taxonomy, $object_type) {	global $wp_taxonomies;	if ( !isset($wp_taxonomies[$taxonomy]) )		return false;	if ( ! get_post_type_object($object_type) )		return false;	$wp_taxonomies[$taxonomy]->object_type[] = $object_type;	return true;}//// Term API///** * Retrieve object_ids of valid taxonomy and term. * * The strings of $taxonomies must exist before this function will continue. On * failure of finding a valid taxonomy, it will return an WP_Error class, kind * of like Exceptions in PHP 5, except you can't catch them. Even so, you can * still test for the WP_Error class and get the error message. * * The $terms aren't checked the same as $taxonomies, but still need to exist * for $object_ids to be returned. * * It is possible to change the order that object_ids is returned by either * using PHP sort family functions or using the database by using $args with * either ASC or DESC array. The value should be in the key named 'order'. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Creates an array from string $args. * * @param int|array $term_ids Term id or array of term ids of terms that will be used * @param string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names * @param array|string $args Change the order of the object_ids, either ASC or DESC * @return WP_Error|array If the taxonomy does not exist, then WP_Error will be returned. On success *	the array can be empty meaning that there are no $object_ids found or it will return the $object_ids found. */function get_objects_in_term( $term_ids, $taxonomies, $args = array() ) {	global $wpdb;	if ( ! is_array( $term_ids ) )		$term_ids = array( $term_ids );	if ( ! is_array( $taxonomies ) )		$taxonomies = array( $taxonomies );	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists( $taxonomy ) )			return new WP_Error( 'invalid_taxonomy', __( 'Invalid Taxonomy' ) );	}	$defaults = array( 'order' => 'ASC' );	$args = wp_parse_args( $args, $defaults );	extract( $args, EXTR_SKIP );	$order = ( 'desc' == strtolower( $order ) ) ? 'DESC' : 'ASC';	$term_ids = array_map('intval', $term_ids );	$taxonomies = "'" . implode( "', '", $taxonomies ) . "'";	$term_ids = "'" . implode( "', '", $term_ids ) . "'";	$object_ids = $wpdb->get_col("SELECT tr.object_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tt.term_id IN ($term_ids) ORDER BY tr.object_id $order");	if ( ! $object_ids )		return array();	return $object_ids;}/** * Get all Term data from database by Term ID. * * The usage of the get_term function is to apply filters to a term object. It * is possible to get a term object from the database before applying the * filters. * * $term ID must be part of $taxonomy, to get from the database. Failure, might * be able to be captured by the hooks. Failure would be the same value as $wpdb * returns for the get_row method. * * There are two hooks, one is specifically for each term, named 'get_term', and * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the * term object, and the taxonomy name as parameters. Both hooks are expected to * return a Term object. * * 'get_term' hook - Takes two parameters the term Object and the taxonomy name. * Must return term object. Used in get_term() as a catch-all filter for every * $term. * * 'get_$taxonomy' hook - Takes two parameters the term Object and the taxonomy * name. Must return term object. $taxonomy will be the taxonomy name, so for * example, if 'category', it would be 'get_category' as the filter name. Useful * for custom taxonomies or plugging into default taxonomies. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param int|object $term If integer, will get from database. If object will apply filters and return $term. * @param string $taxonomy Taxonomy name that $term is part of. * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed|null|WP_Error Term Row from database. Will return null if $term is empty. If taxonomy does not * exist then WP_Error will be returned. */function &get_term($term, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($term) ) {		$error = new WP_Error('invalid_term', __('Empty Term'));		return $error;	}	if ( ! taxonomy_exists($taxonomy) ) {		$error = new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));		return $error;	}	if ( is_object($term) && empty($term->filter) ) {		wp_cache_add($term->term_id, $term, $taxonomy);		$_term = $term;	} else {		if ( is_object($term) )			$term = $term->term_id;		$term = (int) $term;		if ( ! $_term = wp_cache_get($term, $taxonomy) ) {			$_term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND t.term_id = %s LIMIT 1", $taxonomy, $term) );			if ( ! $_term )				return $null;			wp_cache_add($term, $_term, $taxonomy);		}	}	$_term = apply_filters('get_term', $_term, $taxonomy);	$_term = apply_filters("get_$taxonomy", $_term, $taxonomy);	$_term = sanitize_term($_term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $_term;	} elseif ( $output == ARRAY_A ) {		$__term = get_object_vars($_term);		return $__term;	} elseif ( $output == ARRAY_N ) {		$__term = array_values(get_object_vars($_term));		return $__term;	} else {		return $_term;	}}/** * Get all Term data from database by Term field and data. * * Warning: $value is not escaped for 'name' $field. You must do it yourself, if * required. * * The default $field is 'id', therefore it is possible to also use null for * field, but not recommended that you do so. * * If $value does not exist, the return value will be false. If $taxonomy exists * and $field and $value combinations exist, the Term will be returned. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses sanitize_term() Cleanses the term based on $filter context before returning. * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param. * * @param string $field Either 'slug', 'name', or 'id' * @param string|int $value Search for this term value * @param string $taxonomy Taxonomy Name * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional, default is raw or no WordPress defined filter will applied. * @return mixed Term Row from database. Will return false if $taxonomy does not exist or $term was not found. */function get_term_by($field, $value, $taxonomy, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return false;	if ( 'slug' == $field ) {		$field = 't.slug';		$value = sanitize_title($value);		if ( empty($value) )			return false;	} else if ( 'name' == $field ) {		// Assume already escaped		$value = stripslashes($value);		$field = 't.name';	} else {		return get_term( (int) $value, $taxonomy, $output, $filter);	}	$term = $wpdb->get_row( $wpdb->prepare( "SELECT t.*, tt.* FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy = %s AND $field = %s LIMIT 1", $taxonomy, $value) );	if ( !$term )		return false;	wp_cache_add($term->term_id, $term, $taxonomy);	$term = apply_filters('get_term', $term, $taxonomy);	$term = apply_filters("get_$taxonomy", $term, $taxonomy);	$term = sanitize_term($term, $taxonomy, $filter);	if ( $output == OBJECT ) {		return $term;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($term);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($term));	} else {		return $term;	}}/** * Merge all term children into a single array of their IDs. * * This recursive function will merge all of the children of $term into the same * array of term IDs. Only useful for taxonomies which are hierarchical. * * Will return an empty array if $term does not exist in $taxonomy. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses _get_term_hierarchy() * @uses get_term_children() Used to get the children of both $taxonomy and the parent $term * * @param string $term ID of Term to get children * @param string $taxonomy Taxonomy Name * @return array|WP_Error List of Term Objects. WP_Error returned if $taxonomy does not exist */function get_term_children( $term_id, $taxonomy ) {	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	$term_id = intval( $term_id );	$terms = _get_term_hierarchy($taxonomy);	if ( ! isset($terms[$term_id]) )		return array();	$children = $terms[$term_id];	foreach ( (array) $terms[$term_id] as $child ) {		if ( isset($terms[$child]) )			$children = array_merge($children, get_term_children($child, $taxonomy));	}	return $children;}/** * Get sanitized Term field. * * Does checks for $term, based on the $taxonomy. The function is for contextual * reasons and for simplicity of usage. See sanitize_term_field() for more * information. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field() Passes the return value in sanitize_term_field on success. * * @param string $field Term field to fetch * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param string $context Optional, default is display. Look at sanitize_term_field() for available options. * @return mixed Will return an empty string if $term is not an object or if $field is not set in $term. */function get_term_field( $field, $term, $taxonomy, $context = 'display' ) {	$term = (int) $term;	$term = get_term( $term, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	if ( !isset($term->$field) )		return '';	return sanitize_term_field($field, $term->$field, $term->term_id, $taxonomy, $context);}/** * Sanitizes Term for editing. * * Return value is sanitize_term() and usage is for sanitizing the term for * editing. Function is for contextual and simplicity. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term() Passes the return value on success * * @param int|object $id Term ID or Object * @param string $taxonomy Taxonomy Name * @return mixed|null|WP_Error Will return empty string if $term is not an object. */function get_term_to_edit( $id, $taxonomy ) {	$term = get_term( $id, $taxonomy );	if ( is_wp_error($term) )		return $term;	if ( !is_object($term) )		return '';	return sanitize_term($term, $taxonomy, 'edit');}/** * Retrieve the terms in a given taxonomy or list of taxonomies. * * You can fully inject any customizations to the query before it is sent, as * well as control the output with a filter. * * The 'get_terms' filter will be called when the cache has the term and will * pass the found term along with the array of $taxonomies and array of $args. * This filter is also called before the array of terms is passed and will pass * the array of terms, along with the $taxonomies and $args. * * The 'list_terms_exclusions' filter passes the compiled exclusions along with * the $args. * * The 'get_terms_orderby' filter passes the ORDER BY clause for the query * along with the $args array. * * The 'get_terms_fields' filter passes the fields for the SELECT query * along with the $args array. * * The list of arguments that $args can contain, which will overwrite the defaults: * * orderby - Default is 'name'. Can be name, count, term_group, slug or nothing * (will use term_id), Passing a custom value other than these will cause it to * order based on the custom value. * * order - Default is ASC. Can use DESC. * * hide_empty - Default is true. Will not return empty terms, which means * terms whose count is 0 according to the given taxonomy. * * exclude - Default is an empty array.  An array, comma- or space-delimited string * of term ids to exclude from the return array.  If 'include' is non-empty, * 'exclude' is ignored. * * exclude_tree - Default is an empty array.  An array, comma- or space-delimited * string of term ids to exclude from the return array, along with all of their * descendant terms according to the primary taxonomy.  If 'include' is non-empty, * 'exclude_tree' is ignored. * * include - Default is an empty array.  An array, comma- or space-delimited string * of term ids to include in the return array. * * number - The maximum number of terms to return.  Default is to return them all. * * offset - The number by which to offset the terms query. * * fields - Default is 'all', which returns an array of term objects. * If 'fields' is 'ids' or 'names', returns an array of * integers or strings, respectively. * * slug - Returns terms whose "slug" matches this value. Default is empty string. * * hierarchical - Whether to include terms that have non-empty descendants * (even if 'hide_empty' is set to true). * * search - Returned terms' names will contain the value of 'search', * case-insensitive.  Default is an empty string. * * name__like - Returned terms' names will begin with the value of 'name__like', * case-insensitive. Default is empty string. * * The argument 'pad_counts', if set to true will include the quantity of a term's * children in the quantity of each term's "count" object variable. * * The 'get' argument, if set to 'all' instead of its default empty string, * returns terms regardless of ancestry or whether the terms are empty. * * The 'child_of' argument, when used, should be set to the integer of a term ID.  Its default * is 0.  If set to a non-zero value, all returned terms will be descendants * of that term according to the given taxonomy.  Hence 'child_of' is set to 0 * if more than one taxonomy is passed in $taxonomies, because multiple taxonomies * make term ancestry ambiguous. * * The 'parent' argument, when used, should be set to the integer of a term ID.  Its default is * the empty string '', which has a different meaning from the integer 0. * If set to an integer value, all returned terms will have as an immediate * ancestor the term whose ID is specified by that integer according to the given taxonomy. * The 'parent' argument is different from 'child_of' in that a term X is considered a 'parent' * of term Y only if term X is the father of term Y, not its grandfather or great-grandfather, etc. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses wp_parse_args() Merges the defaults with those defined by $args and allows for strings. * * @param string|array Taxonomy name or list of Taxonomy names * @param string|array $args The values of what to search for when returning terms * @return array|WP_Error List of Term Objects and their children. Will return WP_Error, if any of $taxonomies do not exist. */function &get_terms($taxonomies, $args = '') {	global $wpdb;	$empty_array = array();	$single_taxonomy = false;	if ( !is_array($taxonomies) ) {		$single_taxonomy = true;		$taxonomies = array($taxonomies);	}	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) ) {			$error = & new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));			return $error;		}	}	$in_taxonomies = "'" . implode("', '", $taxonomies) . "'";	$defaults = array('orderby' => 'name', 'order' => 'ASC',		'hide_empty' => true, 'exclude' => array(), 'exclude_tree' => array(), 'include' => array(),		'number' => '', 'fields' => 'all', 'slug' => '', 'parent' => '',		'hierarchical' => true, 'child_of' => 0, 'get' => '', 'name__like' => '',		'pad_counts' => false, 'offset' => '', 'search' => '');	$args = wp_parse_args( $args, $defaults );	$args['number'] = absint( $args['number'] );	$args['offset'] = absint( $args['offset'] );	if ( !$single_taxonomy || !is_taxonomy_hierarchical($taxonomies[0]) ||		'' !== $args['parent'] ) {		$args['child_of'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	if ( 'all' == $args['get'] ) {		$args['child_of'] = 0;		$args['hide_empty'] = 0;		$args['hierarchical'] = false;		$args['pad_counts'] = false;	}	extract($args, EXTR_SKIP);	if ( $child_of ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$child_of]) )			return $empty_array;	}	if ( $parent ) {		$hierarchy = _get_term_hierarchy($taxonomies[0]);		if ( !isset($hierarchy[$parent]) )			return $empty_array;	}	// $args can be whatever, only use the args defined in defaults to compute the key	$filter_key = ( has_filter('list_terms_exclusions') ) ? serialize($GLOBALS['wp_filter']['list_terms_exclusions']) : '';	$key = md5( serialize( compact(array_keys($defaults)) ) . serialize( $taxonomies ) . $filter_key );	$last_changed = wp_cache_get('last_changed', 'terms');	if ( !$last_changed ) {		$last_changed = time();		wp_cache_set('last_changed', $last_changed, 'terms');	}	$cache_key = "get_terms:$key:$last_changed";	$cache = wp_cache_get( $cache_key, 'terms' );	if ( false !== $cache ) {		$cache = apply_filters('get_terms', $cache, $taxonomies, $args);		return $cache;	}	$_orderby = strtolower($orderby);	if ( 'count' == $_orderby )		$orderby = 'tt.count';	else if ( 'name' == $_orderby )		$orderby = 't.name';	else if ( 'slug' == $_orderby )		$orderby = 't.slug';	else if ( 'term_group' == $_orderby )		$orderby = 't.term_group';	else if ( 'none' == $_orderby )		$orderby = '';	elseif ( empty($_orderby) || 'id' == $_orderby )		$orderby = 't.term_id';	$orderby = apply_filters( 'get_terms_orderby', $orderby, $args );	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	else		$order = '';	$where = '';	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';		$exclude_tree = '';		$interms = wp_parse_id_list($include);		foreach ( $interms as $interm ) {			if ( empty($inclusions) )				$inclusions = ' AND ( t.term_id = ' . intval($interm) . ' ';			else				$inclusions .= ' OR t.term_id = ' . intval($interm) . ' ';		}	}	if ( !empty($inclusions) )		$inclusions .= ')';	$where .= $inclusions;	$exclusions = '';	if ( !empty( $exclude_tree ) ) {		$excluded_trunks = wp_parse_id_list($exclude_tree);		foreach ( $excluded_trunks as $extrunk ) {			$excluded_children = (array) get_terms($taxonomies[0], array('child_of' => intval($extrunk), 'fields' => 'ids'));			$excluded_children[] = $extrunk;			foreach( $excluded_children as $exterm ) {				if ( empty($exclusions) )					$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';				else					$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';			}		}	}	if ( !empty($exclude) ) {		$exterms = wp_parse_id_list($exclude);		foreach ( $exterms as $exterm ) {			if ( empty($exclusions) )				$exclusions = ' AND ( t.term_id <> ' . intval($exterm) . ' ';			else				$exclusions .= ' AND t.term_id <> ' . intval($exterm) . ' ';		}	}	if ( !empty($exclusions) )		$exclusions .= ')';	$exclusions = apply_filters('list_terms_exclusions', $exclusions, $args );	$where .= $exclusions;	if ( !empty($slug) ) {		$slug = sanitize_title($slug);		$where .= " AND t.slug = '$slug'";	}	if ( !empty($name__like) )		$where .= " AND t.name LIKE '{$name__like}%'";	if ( '' !== $parent ) {		$parent = (int) $parent;		$where .= " AND tt.parent = '$parent'";	}	if ( $hide_empty && !$hierarchical )		$where .= ' AND tt.count > 0';	// don't limit the query results when we have to descend the family tree	if ( ! empty($number) && ! $hierarchical && empty( $child_of ) && '' === $parent ) {		if ( $offset )			$limit = 'LIMIT ' . $offset . ',' . $number;		else			$limit = 'LIMIT ' . $number;	} else {		$limit = '';	}	if ( !empty($search) ) {		$search = like_escape($search);		$where .= " AND (t.name LIKE '%$search%')";	}	$selects = array();	switch ( $fields ) { 		case 'all': 			$selects = array('t.*', 'tt.*'); 			break; 		case 'ids':		case 'id=>parent': 			$selects = array('t.term_id', 'tt.parent', 'tt.count'); 			break; 		case 'names': 			$selects = array('t.term_id', 'tt.parent', 'tt.count', 't.name'); 			break; 		case 'count':			$orderby = '';			$order = ''; 			$selects = array('COUNT(*)'); 	}    $select_this = implode(', ', apply_filters( 'get_terms_fields', $selects, $args ));	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON t.term_id = tt.term_id WHERE tt.taxonomy IN ($in_taxonomies) $where $orderby $order $limit";	if ( 'count' == $fields ) {		$term_count = $wpdb->get_var($query);		return $term_count;	}	$terms = $wpdb->get_results($query);	if ( 'all' == $fields ) {		update_term_cache($terms);	}	if ( empty($terms) ) {		wp_cache_add( $cache_key, array(), 'terms' );		$terms = apply_filters('get_terms', array(), $taxonomies, $args);		return $terms;	}	if ( $child_of ) {		$children = _get_term_hierarchy($taxonomies[0]);		if ( ! empty($children) )			$terms = & _get_term_children($child_of, $terms, $taxonomies[0]);	}	// Update term counts to include children.	if ( $pad_counts && 'all' == $fields )		_pad_term_counts($terms, $taxonomies[0]);	// Make sure we show empty categories that have children.	if ( $hierarchical && $hide_empty && is_array($terms) ) {		foreach ( $terms as $k => $term ) {			if ( ! $term->count ) {				$children = _get_term_children($term->term_id, $terms, $taxonomies[0]);				if ( is_array($children) )					foreach ( $children as $child )						if ( $child->count )							continue 2;				// It really is empty				unset($terms[$k]);			}		}	}	reset ( $terms );	$_terms = array();	if ( 'id=>parent' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[$term->term_id] = $term->parent;		$terms = $_terms;	} elseif ( 'ids' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->term_id;		$terms = $_terms;	} elseif ( 'names' == $fields ) {		while ( $term = array_shift($terms) )			$_terms[] = $term->name;		$terms = $_terms;	}	if ( 0 < $number && intval(@count($terms)) > $number ) {		$terms = array_slice($terms, $offset, $number);	}	wp_cache_add( $cache_key, $terms, 'terms' );	$terms = apply_filters('get_terms', $terms, $taxonomies, $args);	return $terms;}/** * Check if Term exists. * * Returns the index of a defined term, or 0 (false) if the term doesn't exist. * * Formerly is_term(), introduced in 2.3.0. * * @package WordPress * @subpackage Taxonomy * @since 3.0.0 * * @uses $wpdb * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function term_exists($term, $taxonomy = '', $parent = 0) {	global $wpdb;	$select = "SELECT term_id FROM $wpdb->terms as t WHERE ";	$tax_select = "SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE ";	if ( is_int($term) ) {		if ( 0 == $term )			return 0;		$where = 't.term_id = %d';		if ( !empty($taxonomy) )			return $wpdb->get_row( $wpdb->prepare( $tax_select . $where . " AND tt.taxonomy = %s", $term, $taxonomy ), ARRAY_A );		else			return $wpdb->get_var( $wpdb->prepare( $select . $where, $term ) );	}	$term = trim( stripslashes( $term ) );	if ( '' === $slug = sanitize_title($term) )		return 0;	$where = 't.slug = %s';	$else_where = 't.name = %s';	$where_fields = array($slug);	$else_where_fields = array($term);	if ( !empty($taxonomy) ) {		$parent = (int) $parent;		if ( $parent > 0 ) {			$where_fields[] = $parent;			$else_where_fields[] = $parent;			$where .= ' AND tt.parent = %d';			$else_where .= ' AND tt.parent = %d';		}		$where_fields[] = $taxonomy;		$else_where_fields[] = $taxonomy;		if ( $result = $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $where AND tt.taxonomy = %s", $where_fields), ARRAY_A) )			return $result;		return $wpdb->get_row( $wpdb->prepare("SELECT tt.term_id, tt.term_taxonomy_id FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_id = t.term_id WHERE $else_where AND tt.taxonomy = %s", $else_where_fields), ARRAY_A);	}	if ( $result = $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $where", $where_fields) ) )		return $result;	return $wpdb->get_var( $wpdb->prepare("SELECT term_id FROM $wpdb->terms as t WHERE $else_where", $else_where_fields) );}/** * Sanitize Term all fields. * * Relys on sanitize_term_field() to sanitize the term. The difference is that * this function will sanitize <strong>all</strong> fields. The context is based * on sanitize_term_field(). * * The $term is expected to be either an array or an object. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses sanitize_term_field Used to sanitize all fields in a term * * @param array|object $term The term to check * @param string $taxonomy The taxonomy name to use * @param string $context Default is 'display'. * @return array|object Term with all fields sanitized */function sanitize_term($term, $taxonomy, $context = 'display') {	if ( 'raw' == $context )		return $term;	$fields = array('term_id', 'name', 'description', 'slug', 'count', 'parent', 'term_group');	$do_object = false;	if ( is_object($term) )		$do_object = true;	$term_id = $do_object ? $term->term_id : (isset($term['term_id']) ? $term['term_id'] : 0);	foreach ( (array) $fields as $field ) {		if ( $do_object ) {			if ( isset($term->$field) )				$term->$field = sanitize_term_field($field, $term->$field, $term_id, $taxonomy, $context);		} else {			if ( isset($term[$field]) )				$term[$field] = sanitize_term_field($field, $term[$field], $term_id, $taxonomy, $context);		}	}	if ( $do_object )		$term->filter = $context;	else		$term['filter'] = $context;	return $term;}/** * Cleanse the field value in the term based on the context. * * Passing a term field value through the function should be assumed to have * cleansed the value for whatever context the term field is going to be used. * * If no context or an unsupported context is given, then default filters will * be applied. * * There are enough filters for each context to support a custom filtering * without creating your own filter function. Simply create a function that * hooks into the filter you need. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * * @param string $field Term field to sanitize * @param string $value Search for this term value * @param int $term_id Term ID * @param string $taxonomy Taxonomy Name * @param string $context Either edit, db, display, attribute, or js. * @return mixed sanitized field */function sanitize_term_field($field, $value, $term_id, $taxonomy, $context) {	if ( 'parent' == $field  || 'term_id' == $field || 'count' == $field || 'term_group' == $field ) {		$value = (int) $value;		if ( $value < 0 )			$value = 0;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$value = apply_filters("edit_term_$field", $value, $term_id, $taxonomy);		$value = apply_filters("edit_${taxonomy}_$field", $value, $term_id);		if ( 'description' == $field )			$value = format_to_edit($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		$value = apply_filters("pre_term_$field", $value, $taxonomy);		$value = apply_filters("pre_${taxonomy}_$field", $value);		// Back compat filters		if ( 'slug' == $field )			$value = apply_filters('pre_category_nicename', $value);	} else if ( 'rss' == $context ) {		$value = apply_filters("term_${field}_rss", $value, $taxonomy);		$value = apply_filters("${taxonomy}_${field}_rss", $value);	} else {		// Use display filters by default.		$value = apply_filters("term_$field", $value, $term_id, $taxonomy, $context);		$value = apply_filters("${taxonomy}_$field", $value, $term_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Count how many terms are in Taxonomy. * * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true). * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses get_terms() * @uses wp_parse_args() Turns strings into arrays and merges defaults into an array. * * @param string $taxonomy Taxonomy name * @param array|string $args Overwrite defaults. See get_terms() * @return int How many terms are in $taxonomy */function wp_count_terms( $taxonomy, $args = array() ) {	$defaults = array('hide_empty' => false);	$args = wp_parse_args($args, $defaults);	// backwards compatibility	if ( isset($args['ignore_empty']) ) {		$args['hide_empty'] = $args['ignore_empty'];		unset($args['ignore_empty']);	}	$args['fields'] = 'count';	return get_terms($taxonomy, $args);}/** * Will unlink the term from the taxonomy. * * Will remove the term's relationship to the taxonomy, not the term or taxonomy * itself. The term and taxonomy will still exist. Will require the term's * object ID to perform the operation. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The term Object Id that refers to the term * @param string|array $taxonomy List of Taxonomy Names or single Taxonomy name. */function wp_delete_object_term_relationships( $object_id, $taxonomies ) {	global $wpdb;	$object_id = (int) $object_id;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		$tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		$in_tt_ids = "'" . implode("', '", $tt_ids) . "'";		do_action( 'delete_term_relationships', $object_id, $tt_ids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_tt_ids)", $object_id) );		do_action( 'deleted_term_relationships', $object_id, $tt_ids );		wp_update_term_count($tt_ids, $taxonomy);	}}/** * Removes a term from the database. * * If the term is a parent of other terms, then the children will be updated to * that term's parent. * * The $args 'default' will only override the terms found, if there is only one * term found. Any other and the found terms are used. * * The $args 'force_default' will force the term supplied as default to be * assigned even if the object was not going to be termless * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Calls both 'delete_term' and 'delete_$taxonomy' action *	hooks, passing term object, term id. 'delete_term' gets an additional *	parameter with the $taxonomy parameter. * * @param int $term Term ID * @param string $taxonomy Taxonomy Name * @param array|string $args Optional. Change 'default' term id and override found term ids. * @return bool|WP_Error Returns false if not term; true if completes delete action. */function wp_delete_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	$term = (int) $term;	if ( ! $ids = term_exists($term, $taxonomy) )		return false;	if ( is_wp_error( $ids ) )		return $ids;	$tt_id = $ids['term_taxonomy_id'];	$defaults = array();	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	if ( isset($default) ) {		$default = (int) $default;		if ( ! term_exists($default, $taxonomy) )			unset($default);	}	// Update children to point to new parent	if ( is_taxonomy_hierarchical($taxonomy) ) {		$term_obj = get_term($term, $taxonomy);		if ( is_wp_error( $term_obj ) )			return $term_obj;		$parent = $term_obj->parent;		$edit_tt_ids = $wpdb->get_col( "SELECT `term_taxonomy_id` FROM $wpdb->term_taxonomy WHERE `parent` = " . (int)$term_obj->term_id );		do_action( 'edit_term_taxonomies', $edit_tt_ids );		$wpdb->update( $wpdb->term_taxonomy, compact( 'parent' ), array( 'parent' => $term_obj->term_id) + compact( 'taxonomy' ) );		do_action( 'edited_term_taxonomies', $edit_tt_ids );	}	$objects = $wpdb->get_col( $wpdb->prepare( "SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $tt_id ) );	foreach ( (array) $objects as $object ) {		$terms = wp_get_object_terms($object, $taxonomy, array('fields' => 'ids', 'orderby' => 'none'));		if ( 1 == count($terms) && isset($default) ) {			$terms = array($default);		} else {			$terms = array_diff($terms, array($term));			if (isset($default) && isset($force_default) && $force_default)				$terms = array_merge($terms, array($default));		}		$terms = array_map('intval', $terms);		wp_set_object_terms($object, $terms, $taxonomy);	}	do_action( 'delete_term_taxonomy', $tt_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->term_taxonomy WHERE term_taxonomy_id = %d", $tt_id ) );	do_action( 'deleted_term_taxonomy', $tt_id );	// Delete the term if no taxonomies use it.	if ( !$wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_taxonomy WHERE term_id = %d", $term) ) )		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->terms WHERE term_id = %d", $term) );	clean_term_cache($term, $taxonomy);	do_action('delete_term', $term, $tt_id, $taxonomy);	do_action("delete_$taxonomy", $term, $tt_id);	return true;}/** * Retrieves the terms associated with the given object(s), in the supplied taxonomies. * * The following information has to do the $args parameter and for what can be * contained in the string or array of that parameter, if it exists. * * The first argument is called, 'orderby' and has the default value of 'name'. * The other value that is supported is 'count'. * * The second argument is called, 'order' and has the default value of 'ASC'. * The only other value that will be acceptable is 'DESC'. * * The final argument supported is called, 'fields' and has the default value of * 'all'. There are multiple other options that can be used instead. Supported * values are as follows: 'all', 'ids', 'names', and finally * 'all_with_object_id'. * * The fields argument also decides what will be returned. If 'all' or * 'all_with_object_id' is choosen or the default kept intact, then all matching * terms objects will be returned. If either 'ids' or 'names' is used, then an * array of all matching term ids or term names will be returned respectively. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $object_id The id of the object(s) to retrieve. * @param string|array $taxonomies The taxonomies to retrieve terms from. * @param array|string $args Change what is returned * @return array|WP_Error The requested term data or empty array if no terms found. WP_Error if $taxonomy does not exist. */function wp_get_object_terms($object_ids, $taxonomies, $args = array()) {	global $wpdb;	if ( !is_array($taxonomies) )		$taxonomies = array($taxonomies);	foreach ( (array) $taxonomies as $taxonomy ) {		if ( ! taxonomy_exists($taxonomy) )			return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	}	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	$object_ids = array_map('intval', $object_ids);	$defaults = array('orderby' => 'name', 'order' => 'ASC', 'fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$terms = array();	if ( count($taxonomies) > 1 ) {		foreach ( $taxonomies as $index => $taxonomy ) {			$t = get_taxonomy($taxonomy);			if ( isset($t->args) && is_array($t->args) && $args != array_merge($args, $t->args) ) {				unset($taxonomies[$index]);				$terms = array_merge($terms, wp_get_object_terms($object_ids, $taxonomy, array_merge($args, $t->args)));			}		}	} else {		$t = get_taxonomy($taxonomies[0]);		if ( isset($t->args) && is_array($t->args) )			$args = array_merge($args, $t->args);	}	extract($args, EXTR_SKIP);	if ( 'count' == $orderby )		$orderby = 'tt.count';	else if ( 'name' == $orderby )		$orderby = 't.name';	else if ( 'slug' == $orderby )		$orderby = 't.slug';	else if ( 'term_group' == $orderby )		$orderby = 't.term_group';	else if ( 'term_order' == $orderby )		$orderby = 'tr.term_order';	else if ( 'none' == $orderby ) {		$orderby = '';		$order = '';	} else {		$orderby = 't.term_id';	}	// tt_ids queries can only be none or tr.term_taxonomy_id	if ( ('tt_ids' == $fields) && !empty($orderby) )		$orderby = 'tr.term_taxonomy_id';	if ( !empty($orderby) )		$orderby = "ORDER BY $orderby";	$taxonomies = "'" . implode("', '", $taxonomies) . "'";	$object_ids = implode(', ', $object_ids);	$select_this = '';	if ( 'all' == $fields )		$select_this = 't.*, tt.*';	else if ( 'ids' == $fields )		$select_this = 't.term_id';	else if ( 'names' == $fields )		$select_this = 't.name';	else if ( 'all_with_object_id' == $fields )		$select_this = 't.*, tt.*, tr.object_id';	$query = "SELECT $select_this FROM $wpdb->terms AS t INNER JOIN $wpdb->term_taxonomy AS tt ON tt.term_id = t.term_id INNER JOIN $wpdb->term_relationships AS tr ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tt.taxonomy IN ($taxonomies) AND tr.object_id IN ($object_ids) $orderby $order";	if ( 'all' == $fields || 'all_with_object_id' == $fields ) {		$terms = array_merge($terms, $wpdb->get_results($query));		update_term_cache($terms);	} else if ( 'ids' == $fields || 'names' == $fields ) {		$terms = array_merge($terms, $wpdb->get_col($query));	} else if ( 'tt_ids' == $fields ) {		$terms = $wpdb->get_col("SELECT tr.term_taxonomy_id FROM $wpdb->term_relationships AS tr INNER JOIN $wpdb->term_taxonomy AS tt ON tr.term_taxonomy_id = tt.term_taxonomy_id WHERE tr.object_id IN ($object_ids) AND tt.taxonomy IN ($taxonomies) $orderby $order");	}	if ( ! $terms )		$terms = array();	return apply_filters('wp_get_object_terms', $terms, $object_ids, $taxonomies, $args);}/** * Adds a new term to the database. Optionally marks it as an alias of an existing term. * * Error handling is assigned for the nonexistance of the $taxonomy and $term * parameters before inserting. If both the term id and taxonomy exist * previously, then an array will be returned that contains the term id and the * contents of what is returned. The keys of the array are 'term_id' and * 'term_taxonomy_id' containing numeric values. * * It is assumed that the term does not yet exist or the above will apply. The * term will be first added to the term table and then related to the taxonomy * if everything is well. If everything is correct, then several actions will be * run prior to a filter and then several actions will be run after the filter * is run. * * The arguments decide how the term is handled based on the $args parameter. * The following is a list of the available overrides and the defaults. * * 'alias_of'. There is no default, but if added, expected is the slug that the * term will be an alias of. Expected to be a string. * * 'description'. There is no default. If exists, will be added to the database * along with the term. Expected to be a string. * * 'parent'. Expected to be numeric and default is 0 (zero). Will assign value * of 'parent' to the term. * * 'slug'. Expected to be a string. There is no default. * * If 'slug' argument exists then the slug will be checked to see if it is not * a valid term. If that check succeeds (it is not a valid term), then it is * added and the term id is given. If it fails, then a check is made to whether * the taxonomy is hierarchical and the parent argument is not empty. If the * second check succeeds, the term will be inserted and the term id will be * given. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @uses apply_filters() Calls 'pre_insert_term' hook with term and taxonomy as parameters. * @uses do_action() Calls 'create_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'create_$taxonomy' hook with term id and taxonomy id as parameters. * @uses apply_filters() Calls 'term_id_filter' hook with term id and taxonomy id as parameters. * @uses do_action() Calls 'created_term' hook with the term id and taxonomy id as parameters. * @uses do_action() Calls 'created_$taxonomy' hook with term id and taxonomy id as parameters. * * @param string $term The term to add or update. * @param string $taxonomy The taxonomy to which to add the term * @param array|string $args Change the values of the inserted term * @return array|WP_Error The Term ID and Term Taxonomy ID */function wp_insert_term( $term, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term = apply_filters( 'pre_insert_term', $term, $taxonomy );		if ( is_wp_error( $term ) )			return $term;	if ( is_int($term) && 0 == $term )		return new WP_Error('invalid_term_id', __('Invalid term ID'));	if ( '' == trim($term) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args['name'] = $term;	$args['taxonomy'] = $taxonomy;	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( empty($slug) )		$slug = sanitize_title($name);	$term_group = 0;	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update($wpdb->terms, compact('term_group'), array('term_id' => $alias->term_id) );			do_action( 'edited_terms', $alias->term_id );		}	}	if ( $term_id = term_exists($slug) ) {		$existing_term = $wpdb->get_row( $wpdb->prepare( "SELECT name FROM $wpdb->terms WHERE term_id = %d", $term_id), ARRAY_A );		// We've got an existing term in the same taxonomy, which matches the name of the new term:		if ( is_taxonomy_hierarchical($taxonomy) && $existing_term['name'] == $name && term_exists( (int) $term_id, $taxonomy ) ) {			// Hierarchical, and it matches an existing term, Do not allow same "name" in the same level.			$siblings = get_terms($taxonomy, array('fields' => 'names', 'get' => 'all', 'parent' => (int)$parent) );			if ( in_array($name, $siblings) ) {				return new WP_Error('term_exists', __('A term with the name provided already exists with this parent.'));			} else {				$slug = wp_unique_term_slug($slug, (object) $args);				if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )					return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);				$term_id = (int) $wpdb->insert_id;			}		} elseif ( $existing_term['name'] != $name ) {			// We've got an existing term, with a different name, Create the new term.			$slug = wp_unique_term_slug($slug, (object) $args);			if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )				return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);			$term_id = (int) $wpdb->insert_id;		} elseif ( term_exists( (int) $term_id, $taxonomy ) )  {			// Same name, same slug.			return new WP_Error('term_exists', __('A term with the name provided already exists.'));		}	} else {		// This term does not exist at all in the database, Create it.		$slug = wp_unique_term_slug($slug, (object) $args);		if ( false === $wpdb->insert( $wpdb->terms, compact( 'name', 'slug', 'term_group' ) ) )			return new WP_Error('db_insert_error', __('Could not insert term into the database'), $wpdb->last_error);		$term_id = (int) $wpdb->insert_id;	}	// Seems unreachable, However, Is used in the case that a term name is provided, which sanitizes to an empty string.	if ( empty($slug) ) {		$slug = sanitize_title($slug, $term_id);		do_action( 'edit_terms', $term_id );		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );		do_action( 'edited_terms', $term_id );	}	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id ) );	if ( !empty($tt_id) )		return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);	$wpdb->insert( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent') + array( 'count' => 0 ) );	$tt_id = (int) $wpdb->insert_id;	do_action("create_term", $term_id, $tt_id, $taxonomy);	do_action("create_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("created_term", $term_id, $tt_id, $taxonomy);	do_action("created_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Create Term and Taxonomy Relationships. * * Relates an object (post, link etc) to a term and taxonomy type. Creates the * term and taxonomy relationship if it doesn't already exist. Creates a term if * it doesn't exist (using the slug). * * A relationship means that the term is grouped in or belongs to the taxonomy. * A term has no meaning until it is given context by defining which taxonomy it * exists under. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int $object_id The object to relate to. * @param array|int|string $term The slug or id of the term, will replace all existing * related terms in this taxonomy. * @param array|string $taxonomy The context in which to relate the term to the object. * @param bool $append If false will delete difference of terms. * @return array|WP_Error Affected Term IDs */function wp_set_object_terms($object_id, $terms, $taxonomy, $append = false) {	global $wpdb;	$object_id = (int) $object_id;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid Taxonomy'));	if ( !is_array($terms) )		$terms = array($terms);	if ( ! $append )		$old_tt_ids =  wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids', 'orderby' => 'none'));	else		$old_tt_ids = array();	$tt_ids = array();	$term_ids = array();	foreach ( (array) $terms as $term) {		if ( !strlen(trim($term)) )			continue;		if ( !$term_info = term_exists($term, $taxonomy) ) {			// Skip if a non-existent term ID is passed.			if ( is_int($term) )				continue;			$term_info = wp_insert_term($term, $taxonomy);		}		if ( is_wp_error($term_info) )			return $term_info;		$term_ids[] = $term_info['term_id'];		$tt_id = $term_info['term_taxonomy_id'];		$tt_ids[] = $tt_id;		if ( $wpdb->get_var( $wpdb->prepare( "SELECT term_taxonomy_id FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id = %d", $object_id, $tt_id ) ) )			continue;		do_action( 'add_term_relationship', $object_id, $tt_id );		$wpdb->insert( $wpdb->term_relationships, array( 'object_id' => $object_id, 'term_taxonomy_id' => $tt_id ) );		do_action( 'added_term_relationship', $object_id, $tt_id );	}	wp_update_term_count($tt_ids, $taxonomy);	if ( ! $append ) {		$delete_terms = array_diff($old_tt_ids, $tt_ids);		if ( $delete_terms ) {			$in_delete_terms = "'" . implode("', '", $delete_terms) . "'";			do_action( 'delete_term_relationships', $object_id, $delete_terms );			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->term_relationships WHERE object_id = %d AND term_taxonomy_id IN ($in_delete_terms)", $object_id) );			do_action( 'deleted_term_relationships', $object_id, $delete_terms );			wp_update_term_count($delete_terms, $taxonomy);		}	}	$t = get_taxonomy($taxonomy);	if ( ! $append && isset($t->sort) && $t->sort ) {		$values = array();		$term_order = 0;		$final_tt_ids = wp_get_object_terms($object_id, $taxonomy, array('fields' => 'tt_ids'));		foreach ( $tt_ids as $tt_id )			if ( in_array($tt_id, $final_tt_ids) )				$values[] = $wpdb->prepare( "(%d, %d, %d)", $object_id, $tt_id, ++$term_order);		if ( $values )			$wpdb->query("INSERT INTO $wpdb->term_relationships (object_id, term_taxonomy_id, term_order) VALUES " . join(',', $values) . " ON DUPLICATE KEY UPDATE term_order = VALUES(term_order)");	}	do_action('set_object_terms', $object_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids);	return $tt_ids;}/** * Will make slug unique, if it isn't already. * * The $slug has to be unique global to every taxonomy, meaning that one * taxonomy term can't have a matching slug with another taxonomy term. Each * slug has to be globally unique for every taxonomy. * * The way this works is that if the taxonomy that the term belongs to is * hierarchical and has a parent, it will append that parent to the $slug. * * If that still doesn't return an unique slug, then it try to append a number * until it finds a number that is truely unique. * * The only purpose for $term is for appending a parent, if one exists. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param string $slug The string that will be tried for a unique slug * @param object $term The term object that the $slug will belong too * @return string Will return a true unique slug. */function wp_unique_term_slug($slug, $term) {	global $wpdb;	if ( ! term_exists( $slug ) )		return $slug;	// If the taxonomy supports hierarchy and the term has a parent, make the slug unique	// by incorporating parent slugs.	if ( is_taxonomy_hierarchical($term->taxonomy) && !empty($term->parent) ) {		$the_parent = $term->parent;		while ( ! empty($the_parent) ) {			$parent_term = get_term($the_parent, $term->taxonomy);			if ( is_wp_error($parent_term) || empty($parent_term) )				break;			$slug .= '-' . $parent_term->slug;			if ( ! term_exists( $slug ) )				return $slug;			if ( empty($parent_term->parent) )				break;			$the_parent = $parent_term->parent;		}	}	// If we didn't get a unique slug, try appending a number to make it unique.	if ( !empty($args['term_id']) )		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s AND term_id != %d", $slug, $args['term_id'] );	else		$query = $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $slug );	if ( $wpdb->get_var( $query ) ) {		$num = 2;		do {			$alt_slug = $slug . "-$num";			$num++;			$slug_check = $wpdb->get_var( $wpdb->prepare( "SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug ) );		} while ( $slug_check );		$slug = $alt_slug;	}	return $slug;}/** * Update term based on arguments provided. * * The $args will indiscriminately override all values with the same field name. * Care must be taken to not override important information need to update or * update will fail (or perhaps create a new term, neither would be acceptable). * * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not * defined in $args already. * * 'alias_of' will create a term group, if it doesn't already exist, and update * it for the $term. * * If the 'slug' argument in $args is missing, then the 'name' in $args will be * used. It should also be noted that if you set 'slug' and it isn't unique then * a WP_Error will be passed back. If you don't pass any slug, then a unique one * will be created for you. * * For what can be overrode in $args, check the term scheme can contain and stay * away from the term keys. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses $wpdb * @uses do_action() Will call both 'edit_term' and 'edit_$taxonomy' twice. * @uses apply_filters() Will call the 'term_id_filter' filter and pass the term *	id and taxonomy id. * * @param int $term_id The ID of the term * @param string $taxonomy The context in which to relate the term to the object. * @param array|string $args Overwrite term field values * @return array|WP_Error Returns Term ID and Taxonomy Term ID */function wp_update_term( $term_id, $taxonomy, $args = array() ) {	global $wpdb;	if ( ! taxonomy_exists($taxonomy) )		return new WP_Error('invalid_taxonomy', __('Invalid taxonomy'));	$term_id = (int) $term_id;	// First, get all of the original args	$term = get_term ($term_id, $taxonomy, ARRAY_A);	if ( is_wp_error( $term ) )		return $term;	// Escape data pulled from DB.	$term = add_magic_quotes($term);	// Merge old and new args with new args overwriting old ones.	$args = array_merge($term, $args);	$defaults = array( 'alias_of' => '', 'description' => '', 'parent' => 0, 'slug' => '');	$args = wp_parse_args($args, $defaults);	$args = sanitize_term($args, $taxonomy, 'db');	extract($args, EXTR_SKIP);	// expected_slashed ($name)	$name = stripslashes($name);	$description = stripslashes($description);	if ( '' == trim($name) )		return new WP_Error('empty_term_name', __('A name is required for this term'));	$empty_slug = false;	if ( empty($slug) ) {		$empty_slug = true;		$slug = sanitize_title($name);	}	if ( $alias_of ) {		$alias = $wpdb->get_row( $wpdb->prepare( "SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $alias_of) );		if ( $alias->term_group ) {			// The alias we want is already in a group, so let's use that one.			$term_group = $alias->term_group;		} else {			// The alias isn't in a group, so let's create a new one and firstly add the alias term to it.			$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms") + 1;			do_action( 'edit_terms', $alias->term_id );			$wpdb->update( $wpdb->terms, compact('term_group'), array( 'term_id' => $alias->term_id ) );			do_action( 'edited_terms', $alias->term_id );		}	}	// Check for duplicate slug	$id = $wpdb->get_var( $wpdb->prepare( "SELECT term_id FROM $wpdb->terms WHERE slug = %s", $slug ) );	if ( $id && ($id != $term_id) ) {		// If an empty slug was passed or the parent changed, reset the slug to something unique.		// Otherwise, bail.		if ( $empty_slug || ( $parent != $term['parent']) )			$slug = wp_unique_term_slug($slug, (object) $args);		else			return new WP_Error('duplicate_term_slug', sprintf(__('The slug &#8220;%s&#8221; is already in use by another term'), $slug));	}	do_action( 'edit_terms', $term_id );	$wpdb->update($wpdb->terms, compact( 'name', 'slug', 'term_group' ), compact( 'term_id' ) );	if ( empty($slug) ) {		$slug = sanitize_title($name, $term_id);		$wpdb->update( $wpdb->terms, compact( 'slug' ), compact( 'term_id' ) );	}	do_action( 'edited_terms', $term_id );	$tt_id = $wpdb->get_var( $wpdb->prepare( "SELECT tt.term_taxonomy_id FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = %s AND t.term_id = %d", $taxonomy, $term_id) );	do_action( 'edit_term_taxonomy', $tt_id, $taxonomy );	$wpdb->update( $wpdb->term_taxonomy, compact( 'term_id', 'taxonomy', 'description', 'parent' ), array( 'term_taxonomy_id' => $tt_id ) );	do_action( 'edited_term_taxonomy', $tt_id, $taxonomy );	do_action("edit_term", $term_id, $tt_id, $taxonomy);	do_action("edit_$taxonomy", $term_id, $tt_id);	$term_id = apply_filters('term_id_filter', $term_id, $tt_id);	clean_term_cache($term_id, $taxonomy);	do_action("edited_term", $term_id, $tt_id, $taxonomy);	do_action("edited_$taxonomy", $term_id, $tt_id);	return array('term_id' => $term_id, 'term_taxonomy_id' => $tt_id);}/** * Enable or disable term counting. * * @since 2.5.0 * * @param bool $defer Optional. Enable if true, disable if false. * @return bool Whether term counting is enabled or disabled. */function wp_defer_term_counting($defer=null) {	static $_defer = false;	if ( is_bool($defer) ) {		$_defer = $defer;		// flush any deferred counts		if ( !$defer )			wp_update_term_count( null, null, true );	}	return $_defer;}/** * Updates the amount of terms in taxonomy. * * If there is a taxonomy callback applyed, then it will be called for updating * the count. * * The default action is to count what the amount of terms have the relationship * of term ID. Once that is done, then update the database. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $terms The term_taxonomy_id of the terms * @param string $taxonomy The context of the term. * @return bool If no terms will return false, and if successful will return true. */function wp_update_term_count( $terms, $taxonomy, $do_deferred=false ) {	static $_deferred = array();	if ( $do_deferred ) {		foreach ( (array) array_keys($_deferred) as $tax ) {			wp_update_term_count_now( $_deferred[$tax], $tax );			unset( $_deferred[$tax] );		}	}	if ( empty($terms) )		return false;	if ( !is_array($terms) )		$terms = array($terms);	if ( wp_defer_term_counting() ) {		if ( !isset($_deferred[$taxonomy]) )			$_deferred[$taxonomy] = array();		$_deferred[$taxonomy] = array_unique( array_merge($_deferred[$taxonomy], $terms) );		return true;	}	return wp_update_term_count_now( $terms, $taxonomy );}/** * Perform term count update immediately. * * @since 2.5.0 * * @param array $terms The term_taxonomy_id of terms to update. * @param string $taxonomy The context of the term. * @return bool Always true when complete. */function wp_update_term_count_now( $terms, $taxonomy ) {	global $wpdb;	$terms = array_map('intval', $terms);	$taxonomy = get_taxonomy($taxonomy);	if ( !empty($taxonomy->update_count_callback) ) {		call_user_func($taxonomy->update_count_callback, $terms, $taxonomy);	} else {		// Default count updater		foreach ( (array) $terms as $term) {			$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term) );			do_action( 'edit_term_taxonomy', $term, $taxonomy );			$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );			do_action( 'edited_term_taxonomy', $term, $taxonomy );		}	}	clean_term_cache($terms, '', false);	return true;}//// Cache///** * Removes the taxonomy relationship to terms from the cache. * * Will remove the entire taxonomy relationship containing term $object_id. The * term IDs have to exist within the taxonomy $object_type for the deletion to * take place. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @see get_object_taxonomies() for more on $object_type * @uses do_action() Will call action hook named, 'clean_object_term_cache' after completion. *	Passes, function params in same order. * * @param int|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type */function clean_object_term_cache($object_ids, $object_type) {	if ( !is_array($object_ids) )		$object_ids = array($object_ids);	foreach ( $object_ids as $id )		foreach ( get_object_taxonomies($object_type) as $taxonomy )			wp_cache_delete($id, "{$taxonomy}_relationships");	do_action('clean_object_term_cache', $object_ids, $object_type);}/** * Will remove all of the term ids from the cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses $wpdb * * @param int|array $ids Single or list of Term IDs * @param string $taxonomy Can be empty and will assume tt_ids, else will use for context. * @param bool $clean_taxonomy Whether to clean taxonomy wide caches (true), or just individual term object caches (false). Default is true. */function clean_term_cache($ids, $taxonomy = '', $clean_taxonomy = true) {	global $wpdb;	static $cleaned = array();	if ( !is_array($ids) )		$ids = array($ids);	$taxonomies = array();	// If no taxonomy, assume tt_ids.	if ( empty($taxonomy) ) {		$tt_ids = array_map('intval', $ids);		$tt_ids = implode(', ', $tt_ids);		$terms = $wpdb->get_results("SELECT term_id, taxonomy FROM $wpdb->term_taxonomy WHERE term_taxonomy_id IN ($tt_ids)");		$ids = array();		foreach ( (array) $terms as $term ) {			$taxonomies[] = $term->taxonomy;			$ids[] = $term->term_id;			wp_cache_delete($term->term_id, $term->taxonomy);		}		$taxonomies = array_unique($taxonomies);	} else {		$taxonomies = array($taxonomy);		foreach ( $taxonomies as $taxonomy ) {			foreach ( $ids as $id ) {				wp_cache_delete($id, $taxonomy);			}		}	}	foreach ( $taxonomies as $taxonomy ) {		if ( isset($cleaned[$taxonomy]) )			continue;		$cleaned[$taxonomy] = true;		if ( $clean_taxonomy ) {			wp_cache_delete('all_ids', $taxonomy);			wp_cache_delete('get', $taxonomy);			delete_option("{$taxonomy}_children");			// Regenerate {$taxonomy}_children			_get_term_hierarchy($taxonomy);		}		do_action('clean_term_cache', $ids, $taxonomy);	}	wp_cache_set('last_changed', time(), 'terms');}/** * Retrieves the taxonomy relationship to the term object id. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @uses wp_cache_get() Retrieves taxonomy relationship from cache * * @param int|array $id Term object ID * @param string $taxonomy Taxonomy Name * @return bool|array Empty array if $terms found, but not $taxonomy. False if nothing is in cache for $taxonomy and $id. */function &get_object_term_cache($id, $taxonomy) {	$cache = wp_cache_get($id, "{$taxonomy}_relationships");	return $cache;}/** * Updates the cache for Term ID(s). * * Will only update the cache for terms not already cached. * * The $object_ids expects that the ids be separated by commas, if it is a * string. * * It should be noted that update_object_term_cache() is very time extensive. It * is advised that the function is not called very often or at least not for a * lot of terms that exist in a lot of taxonomies. The amount of time increases * for each term and it also increases for each taxonomy the term belongs to. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * @uses wp_get_object_terms() Used to get terms from the database to update * * @param string|array $object_ids Single or list of term object ID(s) * @param array|string $object_type The taxonomy object type * @return null|bool Null value is given with empty $object_ids. False if */function update_object_term_cache($object_ids, $object_type) {	if ( empty($object_ids) )		return;	if ( !is_array($object_ids) )		$object_ids = explode(',', $object_ids);	$object_ids = array_map('intval', $object_ids);	$taxonomies = get_object_taxonomies($object_type);	$ids = array();	foreach ( (array) $object_ids as $id ) {		foreach ( $taxonomies as $taxonomy ) {			if ( false === wp_cache_get($id, "{$taxonomy}_relationships") ) {				$ids[] = $id;				break;			}		}	}	if ( empty( $ids ) )		return false;	$terms = wp_get_object_terms($ids, $taxonomies, array('fields' => 'all_with_object_id'));	$object_terms = array();	foreach ( (array) $terms as $term )		$object_terms[$term->object_id][$term->taxonomy][$term->term_id] = $term;	foreach ( $ids as $id ) {		foreach ( $taxonomies  as $taxonomy ) {			if ( ! isset($object_terms[$id][$taxonomy]) ) {				if ( !isset($object_terms[$id]) )					$object_terms[$id] = array();				$object_terms[$id][$taxonomy] = array();			}		}	}	foreach ( $object_terms as $id => $value ) {		foreach ( $value as $taxonomy => $terms ) {			wp_cache_set($id, $terms, "{$taxonomy}_relationships");		}	}}/** * Updates Terms to Taxonomy in cache. * * @package WordPress * @subpackage Taxonomy * @since 2.3.0 * * @param array $terms List of Term objects to change * @param string $taxonomy Optional. Update Term to this taxonomy in cache */function update_term_cache($terms, $taxonomy = '') {	foreach ( (array) $terms as $term ) {		$term_taxonomy = $taxonomy;		if ( empty($term_taxonomy) )			$term_taxonomy = $term->taxonomy;		wp_cache_add($term->term_id, $term, $term_taxonomy);	}}//// Private///** * Retrieves children of taxonomy as Term IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @uses update_option() Stores all of the children in "$taxonomy_children" *	 option. That is the name of the taxonomy, immediately followed by '_children'. * * @param string $taxonomy Taxonomy Name * @return array Empty if $taxonomy isn't hierarchical or returns children as Term IDs. */function _get_term_hierarchy($taxonomy) {	if ( !is_taxonomy_hierarchical($taxonomy) )		return array();	$children = get_option("{$taxonomy}_children");	if ( is_array($children) )		return $children;	$children = array();	$terms = get_terms($taxonomy, array('get' => 'all', 'orderby' => 'id', 'fields' => 'id=>parent'));	foreach ( $terms as $term_id => $parent ) {		if ( $parent > 0 )			$children[$parent][] = $term_id;	}	update_option("{$taxonomy}_children", $children);	return $children;}/** * Get the subset of $terms that are descendants of $term_id. * * If $terms is an array of objects, then _get_term_children returns an array of objects. * If $terms is an array of IDs, then _get_term_children returns an array of IDs. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * * @param int $term_id The ancestor term: all returned terms should be descendants of $term_id. * @param array $terms The set of terms---either an array of term objects or term IDs---from which those that are descendants of $term_id will be chosen. * @param string $taxonomy The taxonomy which determines the hierarchy of the terms. * @return array The subset of $terms that are descendants of $term_id. */function &_get_term_children($term_id, $terms, $taxonomy) {	$empty_array = array();	if ( empty($terms) )		return $empty_array;	$term_list = array();	$has_children = _get_term_hierarchy($taxonomy);	if  ( ( 0 != $term_id ) && ! isset($has_children[$term_id]) )		return $empty_array;	foreach ( (array) $terms as $term ) {		$use_id = false;		if ( !is_object($term) ) {			$term = get_term($term, $taxonomy);			if ( is_wp_error( $term ) )				return $term;			$use_id = true;		}		if ( $term->term_id == $term_id )			continue;		if ( $term->parent == $term_id ) {			if ( $use_id )				$term_list[] = $term->term_id;			else				$term_list[] = $term;			if ( !isset($has_children[$term->term_id]) )				continue;			if ( $children = _get_term_children($term->term_id, $terms, $taxonomy) )				$term_list = array_merge($term_list, $children);		}	}	return $term_list;}/** * Add count of children to parent count. * * Recalculates term counts by including items from child terms. Assumes all * relevant children are already in the $terms argument. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term IDs * @param string $taxonomy Term Context * @return null Will break from function if conditions are not met. */function _pad_term_counts(&$terms, $taxonomy) {	global $wpdb;	// This function only works for hierarchical taxonomies like post categories.	if ( !is_taxonomy_hierarchical( $taxonomy ) )		return;	$term_hier = _get_term_hierarchy($taxonomy);	if ( empty($term_hier) )		return;	$term_items = array();	foreach ( (array) $terms as $key => $term ) {		$terms_by_id[$term->term_id] = & $terms[$key];		$term_ids[$term->term_taxonomy_id] = $term->term_id;	}	// Get the object and term ids and stick them in a lookup table	$tax_obj = get_taxonomy($taxonomy);	$object_types = esc_sql($tax_obj->object_type);	$results = $wpdb->get_results("SELECT object_id, term_taxonomy_id FROM $wpdb->term_relationships INNER JOIN $wpdb->posts ON object_id = ID WHERE term_taxonomy_id IN (" . implode(',', array_keys($term_ids)) . ") AND post_type IN ('" . implode("', '", $object_types) . "') AND post_status = 'publish'");	foreach ( $results as $row ) {		$id = $term_ids[$row->term_taxonomy_id];		$term_items[$id][$row->object_id] = isset($term_items[$id][$row->object_id]) ? ++$term_items[$id][$row->object_id] : 1;	}	// Touch every ancestor's lookup row for each post in each term	foreach ( $term_ids as $term_id ) {		$child = $term_id;		while ( $parent = $terms_by_id[$child]->parent ) {			if ( !empty($term_items[$term_id]) )				foreach ( $term_items[$term_id] as $item_id => $touches ) {					$term_items[$parent][$item_id] = isset($term_items[$parent][$item_id]) ? ++$term_items[$parent][$item_id]: 1;				}			$child = $parent;		}	}	// Transfer the touched cells	foreach ( (array) $term_items as $id => $items )		if ( isset($terms_by_id[$id]) )			$terms_by_id[$id]->count = count($items);}//// Default callbacks///** * Will update term count based on object types of the current taxonomy. * * Private function for the default callback for post_tag and category * taxonomies. * * @package WordPress * @subpackage Taxonomy * @access private * @since 2.3.0 * @uses $wpdb * * @param array $terms List of Term taxonomy IDs * @param object $taxonomy Current taxonomy object of terms */function _update_post_term_count( $terms, $taxonomy ) {	global $wpdb;	$object_types = is_array($taxonomy->object_type) ? $taxonomy->object_type : array($taxonomy->object_type);	$object_types = esc_sql($object_types);	foreach ( (array) $terms as $term ) {		$count = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type IN ('" . implode("', '", $object_types) . "') AND term_taxonomy_id = %d", $term ) );		do_action( 'edit_term_taxonomy', $term, $taxonomy );		$wpdb->update( $wpdb->term_taxonomy, compact( 'count' ), array( 'term_taxonomy_id' => $term ) );		do_action( 'edited_term_taxonomy', $term, $taxonomy );	}}/** * Generates a permalink for a taxonomy term archive. * * @since 2.5.0 * * @param object|int|string $term * @param string $taxonomy * @return string HTML link to taxonomy term archive */function get_term_link( $term, $taxonomy ) {	global $wp_rewrite;	if ( !is_object($term) ) {		if ( is_int($term) ) {			$term = &get_term($term, $taxonomy);		} else {			$term = &get_term_by('slug', $term, $taxonomy);		}	}	if ( !is_object($term) )		$term = new WP_Error('invalid_term', __('Empty Term'));	if ( is_wp_error( $term ) )		return $term;	// use legacy functions for core taxonomies until they are fully plugged in	if ( $taxonomy == 'category' )		return get_category_link((int) $term->term_id);	if ( $taxonomy == 'post_tag' )		return get_tag_link((int) $term->term_id);	$termlink = $wp_rewrite->get_extra_permastruct($taxonomy);	$slug = $term->slug;	if ( empty($termlink) ) {		$t = get_taxonomy($taxonomy);		if ( $t->query_var )			$termlink = "?$t->query_var=$slug";		else			$termlink = "?taxonomy=$taxonomy&term=$slug";		$termlink = home_url($termlink);	} else {		$termlink = str_replace("%$taxonomy%", $slug, $termlink);		$termlink = home_url( user_trailingslashit($termlink, 'category') );	}	return apply_filters('term_link', $termlink, $term, $taxonomy);}/** * Display the taxonomies of a post with available options. * * This function can be used within the loop to display the taxonomies for a * post without specifying the Post ID. You can also use it outside the Loop to * display the taxonomies for a specific post. * * The available defaults are: * 'post' : default is 0. The post ID to get taxonomies of. * 'before' : default is empty string. Display before taxonomies list. * 'sep' : default is empty string. Separate every taxonomy with value in this. * 'after' : default is empty string. Display this after the taxonomies list. * * @since 2.5.0 * @uses get_the_taxonomies() * * @param array $args Override the defaults. */function the_taxonomies($args = array()) {	$defaults = array(		'post' => 0,		'before' => '',		'sep' => ' ',		'after' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	echo $before . join($sep, get_the_taxonomies($post)) . $after;}/** * Retrieve all taxonomies associated with a post. * * This function can be used within the loop. It will also return an array of * the taxonomies with links to the taxonomy and name. * * @since 2.5.0 * * @param int $post Optional. Post ID or will use Global Post ID (in loop). * @return array */function get_the_taxonomies($post = 0) {	if ( is_int($post) )		$post =& get_post($post);	elseif ( !is_object($post) )		$post =& $GLOBALS['post'];	$taxonomies = array();	if ( !$post )		return $taxonomies;	$template = apply_filters('taxonomy_template', '%s: %l.');	foreach ( get_object_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		if ( empty($t['template']) )			$t['template'] = $template;		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$links = array();		foreach ( $terms as $term )			$links[] = "<a href='" . esc_attr(get_term_link($term, $taxonomy)) . "'>$term->name</a>";		if ( $links )			$taxonomies[$taxonomy] = wp_sprintf($t['template'], $t['label'], $links, $terms);	}	return $taxonomies;}/** * Retrieve all taxonomies of a post with just the names. * * @since 2.5.0 * @uses get_object_taxonomies() * * @param int $post Optional. Post ID * @return array */function get_post_taxonomies($post = 0) {	$post =& get_post($post);	return get_object_taxonomies($post);}/** * Determine if the given object is associated with any of the given terms. * * The given terms are checked against the object's terms' term_ids, names and slugs. * Terms given as integers will only be checked against the object's terms' term_ids. * If no terms are given, determines if object is associated with any terms in the given taxonomy. * * @since 2.7.0 * @uses get_object_term_cache() * @uses wp_get_object_terms() * * @param int $object_id.  ID of the object (post ID, link ID, ...) * @param string $taxonomy.  Single taxonomy name * @param int|string|array $terms Optional.  Term term_id, name, slug or array of said * @return bool|WP_Error. WP_Error on input error. */function is_object_in_term( $object_id, $taxonomy, $terms = null ) {	if ( !$object_id = (int) $object_id )		return new WP_Error( 'invalid_object', __( 'Invalid object ID' ) );	$object_terms = get_object_term_cache( $object_id, $taxonomy );	if ( empty( $object_terms ) )		 $object_terms = wp_get_object_terms( $object_id, $taxonomy );	if ( is_wp_error( $object_terms ) )		return $object_terms;	if ( empty( $object_terms ) )		return false;	if ( empty( $terms ) )		return ( !empty( $object_terms ) );	$terms = (array) $terms;	if ( $ints = array_filter( $terms, 'is_int' ) )		$strs = array_diff( $terms, $ints );	else		$strs =& $terms;	foreach ( $object_terms as $object_term ) {		if ( $ints && in_array( $object_term->term_id, $ints ) ) return true; // If int, check against term_id		if ( $strs ) {			if ( in_array( $object_term->term_id, $strs ) ) return true;			if ( in_array( $object_term->name, $strs ) )    return true;			if ( in_array( $object_term->slug, $strs ) )    return true;		}	}	return false;}/** * Determine if the given object type is associated with the given taxonomy. * * @since 3.0.0 * @uses get_object_taxonomies() * * @param string $object_type Object type string * @param string $taxonomy.  Single taxonomy name * @return bool True if object is associated with the taxonomy, otherwise false. */function is_object_in_taxonomy($object_type, $taxonomy) {	$taxonomies = get_object_taxonomies($object_type);	if ( empty($taxonomies) )		return false;	if ( in_array($taxonomy, $taxonomies) )		return true;	return false;}
<?php/** * WordPress Administration Update API * * @package WordPress * @subpackage Administration */// The admin side of our 1.1 update system/** * Selects the first update version from the update_core option * * @return object the response from the API */function get_preferred_from_update_core() {	$updates = get_core_updates();	if ( !is_array( $updates ) )		return false;	if ( empty( $updates ) )		return (object)array('response' => 'latest');	return $updates[0];}/** * Get available core updates * * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too, * 	set $options['available'] to false to skip not-dimissed updates. * @return array Array of the update objects */function get_core_updates( $options = array() ) {	$options = array_merge( array('available' => true, 'dismissed' => false ), $options );	$dismissed = get_site_option( 'dismissed_update_core' );	if ( !is_array( $dismissed ) ) $dismissed = array();	$from_api = get_site_transient( 'update_core' );	if ( empty($from_api) )		return false;	if ( !isset( $from_api->updates ) || !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	if ( !is_array( $updates ) ) return false;	$result = array();	foreach($updates as $update) {		if ( array_key_exists( $update->current.'|'.$update->locale, $dismissed ) ) {			if ( $options['dismissed'] ) {				$update->dismissed = true;				$result[]= $update;			}		} else {			if ( $options['available'] ) {				$update->dismissed = false;				$result[]= $update;			}		}	}	return $result;}function dismiss_core_update( $update ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$dismissed[ $update->current.'|'.$update->locale ] = true;	return update_site_option( 'dismissed_update_core', $dismissed );}function undismiss_core_update( $version, $locale ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$key = $version.'|'.$locale;	if ( !isset( $dismissed[$key] ) ) return false;	unset( $dismissed[$key] );	return update_site_option( 'dismissed_update_core', $dismissed );}function find_core_update( $version, $locale ) {	$from_api = get_site_transient( 'update_core' );	if ( !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	foreach($updates as $update) {		if ( $update->current == $version && $update->locale == $locale )			return $update;	}	return false;}function core_update_footer( $msg = '' ) {	if ( is_multisite() && !current_user_can('update_core') )		return false;	if ( !current_user_can('update_core') )		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->current ) )		$cur->current = '';	if ( ! isset( $cur->url ) )		$cur->url = '';	if ( ! isset( $cur->response ) )		$cur->response = '';	switch ( $cur->response ) {	case 'development' :		return sprintf( __( 'You are using a development version (%1$s). Cool! Please <a href="%2$s">stay updated</a>.' ), $GLOBALS['wp_version'], 'update-core.php');	break;	case 'upgrade' :		return sprintf( '<strong>'.__( '<a href="%1$s">Get Version %2$s</a>' ).'</strong>', 'update-core.php', $cur->current);	break;	case 'latest' :	default :		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	break;	}}add_filter( 'update_footer', 'core_update_footer' );function update_nag() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	global $pagenow;	if ( 'update-core.php' == $pagenow )		return;	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->response ) || $cur->response != 'upgrade' )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! <a href="%2$s">Please update now</a>.'), $cur->current, 'update-core.php' );	else		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! Please notify the site administrator.'), $cur->current );	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'update_nag', 3 );// Called directly from dashboardfunction update_right_now_message() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	$cur = get_preferred_from_update_core();	$msg = sprintf( __('You are using <span class="b">WordPress %s</span>.'), $GLOBALS['wp_version'] );	if ( isset( $cur->response ) && $cur->response == 'upgrade' && current_user_can('update_core') )		$msg .= " <a href='update-core.php' class='button'>" . sprintf( __('Update to %s'), $cur->current ? $cur->current : __( 'Latest' ) ) . '</a>';	echo "<span id='wp-version-message'>$msg</span>";}function get_plugin_updates() {	$all_plugins = get_plugins();	$upgrade_plugins = array();	$current = get_site_transient( 'update_plugins' );	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {		if ( isset( $current->response[ $plugin_file ] ) ) {			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];		}	}	return $upgrade_plugins;}function wp_plugin_update_rows() {	if ( !current_user_can('update_plugins' ) )		return;	$plugins = get_site_transient( 'update_plugins' );	if ( isset($plugins->response) && is_array($plugins->response) ) {		$plugins = array_keys( $plugins->response );		foreach( $plugins as $plugin_file ) {			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );		}	}}add_action( 'admin_init', 'wp_plugin_update_rows' );function wp_plugin_update_row( $file, $plugin_data ) {	$current = get_site_transient( 'update_plugins' );	if ( !isset( $current->response[ $file ] ) )		return false;	$r = $current->response[ $file ];	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );	$details_url = admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&TB_iframe=true&width=600&height=800');	echo '<tr class="plugin-update-tr"><td colspan="3" class="plugin-update"><div class="update-message">';	if ( ! current_user_can('update_plugins') )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else if ( empty($r->package) )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> <em>automatic upgrade unavailable for this plugin</em>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> or <a href="%5$s">upgrade automatically</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version, wp_nonce_url('update.php?action=upgrade-plugin&plugin=' . $file, 'upgrade-plugin_' . $file) );	do_action( "in_plugin_update_message-$file", $plugin_data, $r );	echo '</div></td></tr>';}function wp_update_plugin($plugin, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Plugin_Upgrader();	return $upgrader->upgrade($plugin);}function get_theme_updates() {	$themes = get_themes();	$current = get_site_transient('update_themes');	$update_themes = array();	foreach ( $themes as $theme ) {		$theme = (object) $theme;		if ( isset($current->response[ $theme->Stylesheet ]) ) {			$update_themes[$theme->Stylesheet] = $theme;			$update_themes[$theme->Stylesheet]->update = $current->response[ $theme->Stylesheet ];		}	}	return $update_themes;}function wp_update_theme($theme, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Theme_Upgrader();	return $upgrader->upgrade($theme);}function wp_update_core($current, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Core_Upgrader();	return $upgrader->upgrade($current);}function maintenance_nag() {	global $upgrading;	if ( ! isset( $upgrading ) )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );	else		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'maintenance_nag' );?>
<?php/** * WordPress Administration for Navigation Menus * Interface functions * * @version 2.0.0 * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once( 'admin.php' );// Load all the nav menu interface functionsrequire_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );if ( ! current_theme_supports( 'menus' ) && ! current_theme_supports( 'widgets' ) )	wp_die( __( 'Your theme does not support navigation menus or widgets.' ) );// Permissions Checkif ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );// Nav Menu CSSwp_admin_css( 'nav-menu' );// jQuerywp_enqueue_script( 'jquery' );wp_enqueue_script( 'jquery-ui-draggable' );wp_enqueue_script( 'jquery-ui-droppable' );wp_enqueue_script( 'jquery-ui-sortable' );// Nav Menu functionswp_enqueue_script( 'nav-menu' );// Metaboxeswp_enqueue_script( 'common' );wp_enqueue_script( 'wp-lists' );wp_enqueue_script( 'postbox' );// Container for any messages displayed to the user$messages = array();// Container that stores the name of the active menu$nav_menu_selected_title = '';// The menu id of the current menu being edited$nav_menu_selected_id = isset( $_REQUEST['menu'] ) ? (int) $_REQUEST['menu'] : 0;// Allowed actions: add, update, delete$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'edit';switch ( $action ) {	case 'add-menu-item':		check_admin_referer( 'add-menu_item', 'menu-settings-column-nonce' );		if ( isset( $_REQUEST['nav-menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_REQUEST['menu-locations'] ) );		elseif ( isset( $_REQUEST['menu-item'] ) )			wp_save_nav_menu_items( $nav_menu_selected_id, $_REQUEST['menu-item'] );		break;	case 'move-down-menu-item' :		// moving down a menu item is the same as moving up the next in order		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// get next in order				if (					isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1] )				) {					$next_item_id = $orders_to_dbids[$dbids_to_orders[$menu_item_id] + 1];					$next_item_data = (array) wp_setup_nav_menu_item( get_post( $next_item_id ) );					// if not siblings of same parent, bubble menu item up but keep order					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						(							empty( $next_item_data['menu_item_parent'] ) ||							$next_item_data['menu_item_parent'] != $menu_item_data['menu_item_parent']						)					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						}					// make menu item a child of its next sibling					} else {						$next_item_data['menu_order'] = $next_item_data['menu_order'] - 1;						$menu_item_data['menu_order'] = $menu_item_data['menu_order'] + 1;						$menu_item_data['menu_item_parent'] = $next_item_data['ID'];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);						wp_update_post($next_item_data);					}				// the item is last but still has a parent, so bubble up				} elseif (					! empty( $menu_item_data['menu_item_parent'] ) &&					in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids )				) {					$menu_item_data['menu_item_parent'] = (int) get_post_meta( $menu_item_data['menu_item_parent'], '_menu_item_menu_item_parent', true);					update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );				}			}		}		break;	case 'move-up-menu-item' :		check_admin_referer( 'move-menu_item' );		$menu_item_id = isset( $_REQUEST['menu-item'] ) ? (int) $_REQUEST['menu-item'] : 0;		if ( is_nav_menu_item( $menu_item_id ) ) {			$menus = isset( $_REQUEST['menu'] ) ? array( (int) $_REQUEST['menu'] ) : wp_get_object_terms( $menu_item_id, 'nav_menu', array( 'fields' => 'ids' ) );			if ( ! is_wp_error( $menus ) && ! empty( $menus[0] ) ) {				$menu_id = (int) $menus[0];				$ordered_menu_items = wp_get_nav_menu_items( $menu_id );				$menu_item_data = (array) wp_setup_nav_menu_item( get_post( $menu_item_id ) );				// setup the data we need in one pass through the array of menu items				$dbids_to_orders = array();				$orders_to_dbids = array();				foreach( (array) $ordered_menu_items as $ordered_menu_item_object ) {					if ( isset( $ordered_menu_item_object->ID ) ) {						if ( isset( $ordered_menu_item_object->menu_order ) ) {							$dbids_to_orders[$ordered_menu_item_object->ID] = $ordered_menu_item_object->menu_order;							$orders_to_dbids[$ordered_menu_item_object->menu_order] = $ordered_menu_item_object->ID;						}					}				}				// if this menu item is not first				if ( ! empty( $dbids_to_orders[$menu_item_id] ) && ! empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ) {					// if this menu item is a child of the previous					if (						! empty( $menu_item_data['menu_item_parent'] ) &&						in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) &&						isset( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) &&						( $menu_item_data['menu_item_parent'] == $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] )					) {						$parent_db_id = in_array( $menu_item_data['menu_item_parent'], $orders_to_dbids ) ? (int) $menu_item_data['menu_item_parent'] : 0;						$parent_object = wp_setup_nav_menu_item( get_post( $parent_db_id ) );						if ( ! is_wp_error( $parent_object ) ) {							$parent_data = (array) $parent_object;							// if there is something before the parent and parent a child of it, make menu item a child also of it							if (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] ) &&								! empty( $parent_data['menu_item_parent'] )							) {								$menu_item_data['menu_item_parent'] = $parent_data['menu_item_parent'];							// else if there is something before parent and parent not a child of it, make menu item a child of that something's parent							} elseif (								! empty( $dbids_to_orders[$parent_db_id] ) &&								! empty( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1] )							) {								$_possible_parent_id = (int) get_post_meta( $orders_to_dbids[$dbids_to_orders[$parent_db_id] - 1], '_menu_item_menu_item_parent', true);								if ( in_array( $_possible_parent_id, array_keys( $dbids_to_orders ) ) )									$menu_item_data['menu_item_parent'] = $_possible_parent_id;								else									$menu_item_data['menu_item_parent'] = 0;							// else there isn't something before the parent							} else {								$menu_item_data['menu_item_parent'] = 0;							}							// set former parent's [menu_order] to that of menu-item's							$parent_data['menu_order'] = $parent_data['menu_order'] + 1;							// set menu-item's [menu_order] to that of former parent							$menu_item_data['menu_order'] = $menu_item_data['menu_order'] - 1;							// save changes							update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );							wp_update_post($menu_item_data);							wp_update_post($parent_data);						}					// else this menu item is not a child of the previous					} elseif (						empty( $menu_item_data['menu_order'] ) ||						empty( $menu_item_data['menu_item_parent'] ) ||						! in_array( $menu_item_data['menu_item_parent'], array_keys( $dbids_to_orders ) ) ||						empty( $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] ) ||						$orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1] != $menu_item_data['menu_item_parent']					) {						// just make it a child of the previous; keep the order						$menu_item_data['menu_item_parent'] = (int) $orders_to_dbids[$dbids_to_orders[$menu_item_id] - 1];						update_post_meta( $menu_item_data['ID'], '_menu_item_menu_item_parent', (int) $menu_item_data['menu_item_parent'] );						wp_update_post($menu_item_data);					}				}			}		}		break;	case 'delete-menu-item':		$menu_item_id = (int) $_REQUEST['menu-item'];		check_admin_referer( 'delete-menu_item_' . $menu_item_id );		if ( is_nav_menu_item( $menu_item_id ) && wp_delete_post( $menu_item_id, true ) )			$messages[] = '<div id="message" class="updated"><p>' . __('The menu item has been successfully deleted.') . '</p></div>';		break;	case 'delete':		check_admin_referer( 'delete-nav_menu-' . $nav_menu_selected_id );		if ( is_nav_menu( $nav_menu_selected_id ) ) {			$deleted_nav_menu = wp_get_nav_menu_object( $nav_menu_selected_id );			$delete_nav_menu = wp_delete_nav_menu( $nav_menu_selected_id );			if ( is_wp_error($delete_nav_menu) ) {				$messages[] = '<div id="message" class="error"><p>' . $delete_nav_menu->get_error_message() . '</p></div>';			} else {				// Remove this menu from any locations.				$locations = get_theme_mod( 'nav_menu_locations' );				foreach ( (array) $locations as $location => $menu_id ) {					if ( $menu_id == $nav_menu_selected_id )						$locations[ $location ] = 0;				}				set_theme_mod( 'nav_menu_locations', $locations );				$messages[] = '<div id="message" class="updated"><p>' . __('The menu has been successfully deleted.') . '</p></div>';				// Select the next available menu				$nav_menu_selected_id = 0;				$_nav_menus = wp_get_nav_menus( array('orderby' => 'name') );				foreach( $_nav_menus as $index => $_nav_menu ) {					if ( strcmp( $_nav_menu->name, $deleted_nav_menu->name ) >= 0					 || $index == count( $_nav_menus ) - 1 ) {						$nav_menu_selected_id = $_nav_menu->term_id;						break;					}				}			}			unset( $delete_nav_menu, $deleted_nav_menu, $_nav_menus );		} else {			// Reset the selected menu			$nav_menu_selected_id = 0;			unset( $_REQUEST['menu'] );		}		break;	case 'update':		check_admin_referer( 'update-nav_menu', 'update-nav-menu-nonce' );		// Update menu theme locations		if ( isset( $_POST['menu-locations'] ) )			set_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );		// Add Menu		if ( 0 == $nav_menu_selected_id ) {			$new_menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( $new_menu_title ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( 0, array('menu-name' => $new_menu_title) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					if ( ( $_menu_locations = get_registered_nav_menus() ) && 1 == count( wp_get_nav_menus() ) )						set_theme_mod( 'nav_menu_locations', array( key( $_menu_locations ) => $_nav_menu_selected_id ) );					unset( $_menu_locations );					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_id = $_nav_menu_selected_id;					$nav_menu_selected_title = $_menu_object->name;					$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been successfully created.'), $nav_menu_selected_title ) . '</p></div>';				}			} else {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';			}		// update existing menu		} else {			$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );			$menu_title = trim( esc_html( $_POST['menu-name'] ) );			if ( ! $menu_title ) {				$messages[] = '<div id="message" class="error"><p>' . __('Please enter a valid menu name.') . '</p></div>';				$menu_title = $_menu_object->name;			}			if ( ! is_wp_error( $_menu_object ) ) {				$_nav_menu_selected_id = wp_update_nav_menu_object( $nav_menu_selected_id, array( 'menu-name' => $menu_title ) );				if ( is_wp_error( $_nav_menu_selected_id ) ) {					$_menu_object = $_nav_menu_selected_id;					$messages[] = '<div id="message" class="error"><p>' . $_nav_menu_selected_id->get_error_message() . '</p></div>';				} else {					$_menu_object = wp_get_nav_menu_object( $_nav_menu_selected_id );					$nav_menu_selected_title = $_menu_object->name;				}			}			// Update menu items			if ( ! is_wp_error( $_menu_object ) ) {				$unsorted_menu_items = wp_get_nav_menu_items( $nav_menu_selected_id, array('orderby' => 'ID', 'output' => ARRAY_A, 'output_key' => 'ID', 'post_status' => 'draft,publish') );				$menu_items = array();				// Index menu items by db ID				foreach( $unsorted_menu_items as $_item )					$menu_items[$_item->db_id] = $_item;				$post_fields = array( 'menu-item-db-id', 'menu-item-object-id', 'menu-item-object', 'menu-item-parent-id', 'menu-item-position', 'menu-item-type', 'menu-item-title', 'menu-item-url', 'menu-item-description', 'menu-item-attr-title', 'menu-item-target', 'menu-item-classes', 'menu-item-xfn' );				wp_defer_term_counting(true);				// Loop through all the menu items' POST variables				if ( ! empty( $_POST['menu-item-db-id'] ) ) {					foreach( (array) $_POST['menu-item-db-id'] as $_key => $k ) {						// Menu item title can't be blank						if ( empty( $_POST['menu-item-title'][$_key] ) )							continue;						$args = array();						foreach ( $post_fields as $field )							$args[$field] = isset( $_POST[$field][$_key] ) ? $_POST[$field][$_key] : '';						$menu_item_db_id = wp_update_nav_menu_item( $nav_menu_selected_id, ( $_POST['menu-item-db-id'][$_key] != $_key ? 0 : $_key ), $args );						if ( is_wp_error( $menu_item_db_id ) )							$messages[] = '<div id="message" class="error"><p>' . $menu_item_db_id->get_error_message() . '</p></div>';						elseif ( isset( $menu_items[$menu_item_db_id] ) )							unset( $menu_items[$menu_item_db_id] );					}				}				// Remove menu items from the menu that weren't in $_POST				if ( ! empty( $menu_items ) ) {					foreach ( array_keys( $menu_items ) as $menu_item_id ) {						if ( is_nav_menu_item( $menu_item_id ) ) {							wp_delete_post( $menu_item_id );						}					}				}				// Store 'auto-add' pages.				$auto_add = ! empty( $_POST['auto-add-pages'] );				$nav_menu_option = (array) get_option( 'nav_menu_options' );				if ( ! isset( $nav_menu_option['auto_add'] ) )					$nav_menu_option['auto_add'] = array();				if ( $auto_add ) {					if ( ! in_array( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) )						$nav_menu_option['auto_add'][] = $nav_menu_selected_id;				} else {					if ( false !== ( $key = array_search( $nav_menu_selected_id, $nav_menu_option['auto_add'] ) ) )						unset( $nav_menu_option['auto_add'][$key] );				}				// Remove nonexistent/deleted menus				$nav_menu_option['auto_add'] = array_intersect( $nav_menu_option['auto_add'], wp_get_nav_menus( array( 'fields' => 'ids' ) ) );				update_option( 'nav_menu_options', $nav_menu_option );				wp_defer_term_counting(false);				do_action( 'wp_update_nav_menu', $nav_menu_selected_id );				$messages[] = '<div id="message" class="updated"><p>' . sprintf( __('The <strong>%s</strong> menu has been updated.'), $nav_menu_selected_title ) . '</p></div>';				unset( $menu_items, $unsorted_menu_items );			}		}		break;}// Get all nav menus$nav_menus = wp_get_nav_menus( array('orderby' => 'name') );// Get recently edited nav menu$recently_edited = (int) get_user_option( 'nav_menu_recently_edited' );// If there was no recently edited menu, and $nav_menu_selected_id is a nav menu, update recently edited menu.if ( !$recently_edited && is_nav_menu( $nav_menu_selected_id ) ) {	$recently_edited = $nav_menu_selected_id;// Else if $nav_menu_selected_id is not a menu and not requesting that we create a new menu, but $recently_edited is a menu, grab that one.} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && is_nav_menu( $recently_edited ) ) {	$nav_menu_selected_id = $recently_edited;// Else try to grab the first menu from the menus list} elseif ( 0 == $nav_menu_selected_id && ! isset( $_REQUEST['menu'] ) && ! empty($nav_menus) ) {	$nav_menu_selected_id = $nav_menus[0]->term_id;}// Update the user's settingif ( $nav_menu_selected_id != $recently_edited && is_nav_menu( $nav_menu_selected_id ) )	update_user_meta( $current_user->ID, 'nav_menu_recently_edited', $nav_menu_selected_id );// If there's a menu, get its name.if ( ! $nav_menu_selected_title && is_nav_menu( $nav_menu_selected_id ) ) {	$_menu_object = wp_get_nav_menu_object( $nav_menu_selected_id );	$nav_menu_selected_title = ! is_wp_error( $_menu_object ) ? $_menu_object->name : '';}// Generate truncated menu namesforeach( (array) $nav_menus as $key => $_nav_menu ) {	$_nav_menu->truncated_name = trim( wp_html_excerpt( $_nav_menu->name, 40 ) );	if ( $_nav_menu->truncated_name != $_nav_menu->name )		$_nav_menu->truncated_name .= '&hellip;';	$nav_menus[$key]->truncated_name = $_nav_menu->truncated_name;}// Ensure the user will be able to scroll horizontally// by adding a class for the max menu depth.global $_wp_nav_menu_max_depth;$_wp_nav_menu_max_depth = 0;// Calling wp_get_nav_menu_to_edit generates $_wp_nav_menu_max_depthif ( is_nav_menu( $nav_menu_selected_id ) )	$edit_markup = wp_get_nav_menu_to_edit( $nav_menu_selected_id  );function wp_nav_menu_max_depth() {	global $_wp_nav_menu_max_depth;	return "menu-max-depth-$_wp_nav_menu_max_depth";}add_action('admin_body_class','wp_nav_menu_max_depth');wp_nav_menu_setup();wp_initial_nav_menu_meta_boxes();if ( ! current_theme_supports( 'menus' ) && ! wp_get_nav_menus() )	echo '<div id="message" class="updated"><p>' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p></div>';$help =  '<p>' . __('This feature is new in version 3.0; to use a custom menu in place of your theme&#8217;s default menus, support for this feature must be registered in the theme&#8217;s functions.php file. If your theme does not support the custom menus feature yet (the new default theme, Twenty Ten, does), you can learn about adding support yourself by following the below link.') . '</p>';$help .= '<p>' . __('You can create custom menus for your site. These menus may contain links to pages, categories, custom links or other content types (use the Screen Options tab to decide which ones to show on the screen). You can specify a different navigation label for a menu item as well as other attributes. You can create multiple menus. If your theme includes more than one menu, you can choose which custom menu to associate with each. You can also use custom menus in conjunction with the Custom Menus widget.') . '</p>';$help .= '<p>' . __('To create a new custom menu, click on the + tab, give the menu a name, and click Create Menu. Next, add menu items from the appropriate boxes. You&#8217;ll be able to edit the information for each menu item, and can drag and drop to put them in order. You can also drag a menu item a little to the right to make it a submenu, to create menus with hierarchy. You&#8217;ll see when the position of the drop target shifts over to create the nested placement. Don&#8217;t forget to click Save when you&#8217;re finished.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Menus_SubPanel" target="_blank">Menus Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// Get the admin headerrequire_once( 'admin-header.php' );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e('Menus'); ?></h2>	<?php	foreach( $messages as $message ) :		echo $message . "\n";	endforeach;	?>	<div id="nav-menus-frame">	<div id="menu-settings-column" class="metabox-holder<?php if ( !$nav_menu_selected_id ) { echo ' metabox-holder-disabled'; } ?>">		<form id="nav-menu-meta" action="<?php echo admin_url( 'nav-menus.php' ); ?>" class="nav-menu-meta" method="post" enctype="multipart/form-data">			<input type="hidden" name="menu" id="nav-menu-meta-object-id" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />			<input type="hidden" name="action" value="add-menu-item" />			<?php wp_nonce_field( 'add-menu_item', 'menu-settings-column-nonce' ); ?>			<?php do_meta_boxes( 'nav-menus', 'side', null ); ?>		</form>	</div><!-- /#menu-settings-column -->	<div id="menu-management-liquid">		<div id="menu-management">			<div id="select-nav-menu-container" class="hide-if-js">				<form id="select-nav-menu" action="">					<strong><label for="select-nav-menu"><?php esc_html_e( 'Select Menu:' ); ?></label></strong>					<select class="select-nav-menu" name="menu">						<?php foreach( (array) $nav_menus as $_nav_menu ) : ?>							<option value="<?php echo esc_attr($_nav_menu->term_id) ?>" <?php selected($nav_menu_selected_id, $_nav_menu->term_id); ?>>								<?php echo esc_html( $_nav_menu->truncated_name ); ?>							</option>						<?php endforeach; ?>						<option value="0"><?php esc_html_e('Add New Menu'); ?></option>					</select>					<input type="hidden" name="action" value="edit" />					<input class="button-secondary" name="select_menu" type="submit" value="<?php esc_attr_e('Select'); ?>" />				</form>			</div>			<div class="nav-tabs-wrapper">			<div class="nav-tabs">				<?php				foreach( (array) $nav_menus as $_nav_menu ) :					if ( $nav_menu_selected_id == $_nav_menu->term_id ) : ?><span class="nav-tab nav-tab-active">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</span><?php else : ?><a href="<?php							echo esc_url(add_query_arg(								array(									'action' => 'edit',									'menu' => $_nav_menu->term_id,								),								admin_url( 'nav-menus.php' )							));						?>" class="nav-tab hide-if-no-js">							<?php echo esc_html( $_nav_menu->truncated_name ); ?>						</a><?php endif;				endforeach;				if ( 0 == $nav_menu_selected_id ) : ?><span class="nav-tab menu-add-new nav-tab-active">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</span><?php else : ?><a href="<?php					echo esc_url(add_query_arg(						array(							'action' => 'edit',							'menu' => 0,						),						admin_url( 'nav-menus.php' )					));				?>" class="nav-tab menu-add-new">					<?php printf( '<abbr title="%s">+</abbr>', esc_html__( 'Add menu' ) ); ?>				</a><?php endif; ?>			</div>			</div>			<div class="menu-edit">				<form id="update-nav-menu" action="<?php echo admin_url( 'nav-menus.php' ); ?>" method="post" enctype="multipart/form-data">					<div id="nav-menu-header">						<div id="submitpost" class="submitbox">							<div class="major-publishing-actions">								<label class="menu-name-label howto open-label" for="menu-name">									<span><?php _e('Menu Name'); ?></span>									<input name="menu-name" id="menu-name" type="text" class="menu-name regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Enter menu name here'); ?>" value="<?php echo esc_attr( $nav_menu_selected_title  ); ?>" />								</label>								<?php if ( !empty( $nav_menu_selected_id ) ) :									if ( ! isset( $auto_add ) ) {										$auto_add = get_option( 'nav_menu_options' );										if ( ! isset( $auto_add['auto_add'] ) )											$auto_add = false;										elseif ( false !== array_search( $nav_menu_selected_id, $auto_add['auto_add'] ) )											$auto_add = true;										else											$auto_add = false;									}								?>								<div class="auto-add-pages">									<label class="howto"><input type="checkbox"<?php checked( $auto_add ); ?> name="auto-add-pages" value="1" /> <?php printf( __('Automatically add new top-level pages' ), esc_url( admin_url( 'edit.php?post_type=page' ) ) ); ?></label>								</div>								<?php endif; ?>								<br class="clear" />								<div class="publishing-action">									<input class="button-primary menu-save" name="save_menu" type="submit" value="<?php empty($nav_menu_selected_id) ? esc_attr_e('Create Menu') : esc_attr_e('Save Menu'); ?>" />								</div><!-- END .publishing-action -->								<?php if ( ! empty( $nav_menu_selected_id ) ) : ?>								<div class="delete-action">									<a class="submitdelete deletion menu-delete" href="<?php echo esc_url( wp_nonce_url( admin_url('nav-menus.php?action=delete&amp;menu=' . $nav_menu_selected_id), 'delete-nav_menu-' . $nav_menu_selected_id ) ); ?>"><?php _e('Delete Menu'); ?></a>								</div><!-- END .delete-action -->								<?php endif; ?>							</div><!-- END .major-publishing-actions -->						</div><!-- END #submitpost .submitbox -->						<?php						wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );						wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );						wp_nonce_field( 'update-nav_menu', 'update-nav-menu-nonce' );						?>						<input type="hidden" name="action" value="update" />						<input type="hidden" name="menu" id="menu" value="<?php echo esc_attr( $nav_menu_selected_id ); ?>" />					</div><!-- END #nav-menu-header -->					<div id="post-body">						<div id="post-body-content">							<?php							if ( isset( $edit_markup ) ) {								if ( ! is_wp_error( $edit_markup ) )									echo $edit_markup;							} else if ( empty( $nav_menu_selected_id ) ) {								echo '<div class="post-body-plain">';								echo '<p>' . __('To create a custom menu, give it a name above and click Create Menu. Then choose items like pages, categories or custom links from the left column to add to this menu.') . '</p>';								echo '<p>' . __('After you have added your items, drag and drop to put them in the order you want. You can also click each item to reveal additional configuration options.') . '</p>';								echo '<p>' . __('When you have finished building your custom menu, make sure you click the Save Menu button.') . '</p>';								echo '</div>';							}							?>						</div><!-- /#post-body-content -->					</div><!-- /#post-body -->				</form><!-- /#update-nav-menu -->			</div><!-- /.menu-edit -->		</div><!-- /#menu-management -->	</div><!-- /#menu-management-liquid -->	</div><!-- /#nav-menus-frame --></div><!-- /.wrap--><?php include( 'admin-footer.php' ); ?>
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * WordPress User API * * @package WordPress *//** * Authenticate user with remember capability. * * The credentials is an array that has 'user_login', 'user_password', and * 'remember' indices. If the credentials is not given, then the log in form * will be assumed and used if set. * * The various authentication cookies will be set by this function and will be * set for a longer period depending on if the 'remember' credential is set to * true. * * @since 2.5.0 * * @param array $credentials Optional. User info in order to sign on. * @param bool $secure_cookie Optional. Whether to use secure cookie. * @return object Either WP_Error on failure, or WP_User on success. */function wp_signon( $credentials = '', $secure_cookie = '' ) {	if ( empty($credentials) ) {		if ( ! empty($_POST['log']) )			$credentials['user_login'] = $_POST['log'];		if ( ! empty($_POST['pwd']) )			$credentials['user_password'] = $_POST['pwd'];		if ( ! empty($_POST['rememberme']) )			$credentials['remember'] = $_POST['rememberme'];	}	if ( !empty($credentials['remember']) )		$credentials['remember'] = true;	else		$credentials['remember'] = false;	// TODO do we deprecate the wp_authentication action?	do_action_ref_array('wp_authenticate', array(&$credentials['user_login'], &$credentials['user_password']));	if ( '' === $secure_cookie )		$secure_cookie = is_ssl();	global $auth_secure_cookie; // XXX ugly hack to pass this to wp_authenticate_cookie	$auth_secure_cookie = $secure_cookie;	add_filter('authenticate', 'wp_authenticate_cookie', 30, 3);	$user = wp_authenticate($credentials['user_login'], $credentials['user_password']);	if ( is_wp_error($user) ) {		if ( $user->get_error_codes() == array('empty_username', 'empty_password') ) {			$user = new WP_Error('', '');		}		return $user;	}	wp_set_auth_cookie($user->ID, $credentials['remember'], $secure_cookie);	do_action('wp_login', $credentials['user_login']);	return $user;}/** * Authenticate the user using the username and password. */add_filter('authenticate', 'wp_authenticate_username_password', 20, 3);function wp_authenticate_username_password($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) || empty($password) ) {		$error = new WP_Error();		if ( empty($username) )			$error->add('empty_username', __('<strong>ERROR</strong>: The username field is empty.'));		if ( empty($password) )			$error->add('empty_password', __('<strong>ERROR</strong>: The password field is empty.'));		return $error;	}	$userdata = get_user_by('login', $username);	if ( !$userdata )		return new WP_Error('invalid_username', sprintf(__('<strong>ERROR</strong>: Invalid username. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	if ( is_multisite() ) {		// Is user marked as spam?		if ( 1 == $userdata->spam)			return new WP_Error('invalid_username', __('<strong>ERROR</strong>: Your account has been marked as a spammer.'));		// Is a user's blog marked as spam?		if ( !is_super_admin( $userdata->ID ) && isset($userdata->primary_blog) ) {			$details = get_blog_details( $userdata->primary_blog );			if ( is_object( $details ) && $details->spam == 1 )				return new WP_Error('blog_suspended', __('Site Suspended.'));		}	}	$userdata = apply_filters('wp_authenticate_user', $userdata, $password);	if ( is_wp_error($userdata) )		return $userdata;	if ( !wp_check_password($password, $userdata->user_pass, $userdata->ID) )		return new WP_Error('incorrect_password', sprintf(__('<strong>ERROR</strong>: Incorrect password. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	$user =  new WP_User($userdata->ID);	return $user;}/** * Authenticate the user using the WordPress auth cookie. */function wp_authenticate_cookie($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) && empty($password) ) {		$user_id = wp_validate_auth_cookie();		if ( $user_id )			return new WP_User($user_id);		global $auth_secure_cookie;		if ( $auth_secure_cookie )			$auth_cookie = SECURE_AUTH_COOKIE;		else			$auth_cookie = AUTH_COOKIE;		if ( !empty($_COOKIE[$auth_cookie]) )			return new WP_Error('expired_session', __('Please log in again.'));		// If the cookie is not set, be silent.	}	return $user;}/** * Number of posts user has written. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries. * * @param int $userid User ID. * @return int Amount of posts user has written. */function count_user_posts($userid) {	global $wpdb;	$where = get_posts_by_author_sql('post', TRUE, $userid);	$count = $wpdb->get_var( "SELECT COUNT(*) FROM $wpdb->posts $where" );	return apply_filters('get_usernumposts', $count, $userid);}/** * Number of posts written by a list of users. * * @since 3.0.0 * @param array $userid User ID number list. * @return array Amount of posts each user has written. */function count_many_users_posts($users) {	global $wpdb;	$count = array();	if ( ! is_array($users) || empty( $users ) )		return $count;	$userlist = implode( ',', $users );	$where = get_posts_by_author_sql( 'post' );	$result = $wpdb->get_results( "SELECT post_author, COUNT(*) FROM $wpdb->posts $where AND post_author IN ($userlist) GROUP BY post_author", ARRAY_N );	foreach ( $result as $row ) {		$count[ $row[0] ] = $row[1];	}	foreach ( $users as $id ) {		if ( ! isset( $count[ $id ] ) )			$count[ $id ] = 0;	}	return $count;}/** * Check that the user login name and password is correct. * * @since 0.71 * @todo xmlrpc only. Maybe move to xmlrpc.php. * * @param string $user_login User name. * @param string $user_pass User password. * @return bool False if does not authenticate, true if username and password authenticates. */function user_pass_ok($user_login, $user_pass) {	$user = wp_authenticate($user_login, $user_pass);	if ( is_wp_error($user) )		return false;	return true;}//// User option functions///** * Get the current user's ID * * @since MU * * @uses wp_get_current_user * * @return int The current user's ID */function get_current_user_id() {	$user = wp_get_current_user();	return ( isset( $user->ID ) ? (int) $user->ID : 0 );}/** * Retrieve user option that can be either per Site or per Network. * * If the user ID is not given, then the current user will be used instead. If * the user ID is given, then the user data will be retrieved. The filter for * the result, will also pass the original option name and finally the user data * object as the third parameter. * * The option will first check for the per site name and then the per Network name. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries. * @uses apply_filters() Calls 'get_user_option_$option' hook with result, *		option parameter, and user data object. * * @param string $option User option name. * @param int $user Optional. User ID. * @param bool $deprecated Use get_option() to check for an option in the options table. * @return mixed */function get_user_option( $option, $user = 0, $deprecated = '' ) {	global $wpdb;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	if ( empty($user) ) {		$user = wp_get_current_user();		$user = $user->ID;	}	$user = get_userdata($user);	// Keys used as object vars cannot have dashes.	$key = str_replace('-', '', $option);	if ( isset( $user->{$wpdb->prefix . $key} ) ) // Blog specific		$result = $user->{$wpdb->prefix . $key};	elseif ( isset( $user->{$key} ) ) // User specific and cross-blog		$result = $user->{$key};	else		$result = false;	return apply_filters("get_user_option_{$option}", $result, $option, $user);}/** * Update user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * Deletes the user option if $newvalue is empty. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param mixed $newvalue User option value. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function update_user_option( $user_id, $option_name, $newvalue, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	// For backward compatibility. See differences between update_user_meta() and deprecated update_usermeta().	// http://core.trac.wordpress.org/ticket/13088	if ( is_null( $newvalue ) || is_scalar( $newvalue ) && empty( $newvalue ) )		return delete_user_meta( $user_id, $option_name );	return update_user_meta( $user_id, $option_name, $newvalue );}/** * Delete user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function delete_user_option( $user_id, $option_name, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	return delete_user_meta( $user_id, $option_name );}/** * Get users for the blog. * * For setups that use the multi-blog feature. Can be used outside of the * multi-blog feature. * * @since 2.2.0 * @uses $wpdb WordPress database object for queries * @uses $blog_id The Blog id of the blog for those that use more than one blog * * @param int $id Blog ID. * @return array List of users that are part of that Blog ID */function get_users_of_blog( $id = '' ) {	global $wpdb, $blog_id;	if ( empty($id) )		$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$users = $wpdb->get_results( "SELECT user_id, user_id AS ID, user_login, display_name, user_email, meta_value FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities' ORDER BY {$wpdb->usermeta}.user_id" );	return $users;}/** * Add meta data field to a user. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 3.0.0 * @uses add_metadata() * @link http://codex.wordpress.org/Function_Reference/add_user_meta * * @param int $user_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_user_meta($user_id, $meta_key, $meta_value, $unique = false) {	return add_metadata('user', $user_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a user. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 3.0.0 * @uses delete_metadata() * @link http://codex.wordpress.org/Function_Reference/delete_user_meta * * @param int $user_id user ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_user_meta($user_id, $meta_key, $meta_value = '') {	return delete_metadata('user', $user_id, $meta_key, $meta_value);}/** * Retrieve user meta field for a user. * * @since 3.0.0 * @uses get_metadata() * @link http://codex.wordpress.org/Function_Reference/get_user_meta * * @param int $user_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_user_meta($user_id, $key, $single = false) {	return get_metadata('user', $user_id, $key, $single);}/** * Update user meta field based on user ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and user ID. * * If the meta field for the user does not exist, it will be added. * * @since 3.0.0 * @uses update_metadata * @link http://codex.wordpress.org/Function_Reference/update_user_meta * * @param int $user_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_user_meta($user_id, $meta_key, $meta_value, $prev_value = '') {	return update_metadata('user', $user_id, $meta_key, $meta_value, $prev_value);}/** * Count number of users who have each of the user roles. * * Assumes there are neither duplicated nor orphaned capabilities meta_values. * Assumes role names are unique phrases.  Same assumption made by WP_User_Search::prepare_query() * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users. * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257. * * @since 3.0.0 * @param string $strategy 'time' or 'memory' * @return array Includes a grand total and an array of counts indexed by role strings. */function count_users($strategy = 'time') {	global $wpdb, $blog_id, $wp_roles;	// Initialize	$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$result = array();	if ( 'time' == $strategy ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$avail_roles = $wp_roles->get_names();		// Build a CPU-intensive query that will return concise information.		$select_count = array();		foreach ( $avail_roles as $this_role => $name ) {			$select_count[] = "COUNT(NULLIF(`meta_value` LIKE '%" . like_escape($this_role) . "%', FALSE))";		}		$select_count = implode(', ', $select_count);		// Add the meta_value index to the selection list, then run the query.		$row = $wpdb->get_row( "SELECT $select_count, COUNT(*) FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'", ARRAY_N );		// Run the previous loop again to associate results with role names.		$col = 0;		$role_counts = array();		foreach ( $avail_roles as $this_role => $name ) {			$count = (int) $row[$col++];			if ($count > 0) {				$role_counts[$this_role] = $count;			}		}		// Get the meta_value index from the end of the result set.		$total_users = (int) $row[$col];		$result['total_users'] = $total_users;		$result['avail_roles'] =& $role_counts;	} else {		$avail_roles = array();		$users_of_blog = $wpdb->get_col( "SELECT meta_value FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'" );		foreach ( $users_of_blog as $caps_meta ) {			$b_roles = unserialize($caps_meta);			if ( is_array($b_roles) ) {				foreach ( $b_roles as $b_role => $val ) {					if ( isset($avail_roles[$b_role]) ) {						$avail_roles[$b_role]++;					} else {						$avail_roles[$b_role] = 1;					}				}			}		}		$result['total_users'] = count( $users_of_blog );		$result['avail_roles'] =& $avail_roles;	}	return $result;}//// Private helper functions///** * Set up global user vars. * * Used by wp_set_current_user() for back compat. Might be deprecated in the future. * * @since 2.0.4 * @global string $userdata User description. * @global string $user_login The user username for logging in * @global int $user_level The level of the user * @global int $user_ID The ID of the user * @global string $user_email The email address of the user * @global string $user_url The url in the user's profile * @global string $user_pass_md5 MD5 of the user's password * @global string $user_identity The display name of the user * * @param int $for_user_id Optional. User ID to set up global data. */function setup_userdata($for_user_id = '') {	global $user_login, $userdata, $user_level, $user_ID, $user_email, $user_url, $user_pass_md5, $user_identity;	if ( '' == $for_user_id )		$user = wp_get_current_user();	else		$user = new WP_User($for_user_id);	$userdata   = $user->data;	$user_ID    = (int) $user->ID;	$user_level = (int) isset($user->user_level) ? $user->user_level : 0;	if ( 0 == $user->ID ) {		$user_login = $user_email = $user_url = $user_pass_md5 = $user_identity = '';		return;	}	$user_login	= $user->user_login;	$user_email	= $user->user_email;	$user_url	= $user->user_url;	$user_pass_md5	= md5($user->user_pass);	$user_identity	= $user->display_name;}/** * Create dropdown HTML content of users. * * The content can either be displayed, which it is by default or retrieved by * setting the 'echo' argument. The 'include' and 'exclude' arguments do not * need to be used; all users will be displayed in that case. Only one can be * used, either 'include' or 'exclude', but not both. * * The available arguments are as follows: * <ol> * <li>show_option_all - Text to show all and whether HTML option exists.</li> * <li>show_option_none - Text for show none and whether HTML option exists. *     </li> * <li>orderby - SQL order by clause for what order the users appear. Default is * 'display_name'.</li> * <li>order - Default is 'ASC'. Can also be 'DESC'.</li> * <li>include - User IDs to include.</li> * <li>exclude - User IDs to exclude.</li> * <li>multi - Default is 'false'. Whether to skip the ID attribute on the 'select' element. A 'true' value is overridden when id argument is set.</li> * <li>show - Default is 'display_name'. User table column to display. If the selected item is empty then the user_login will be displayed in parentesis</li> * <li>echo - Default is '1'. Whether to display or retrieve content.</li> * <li>selected - Which User ID is selected.</li> * <li>name - Default is 'user'. Name attribute of select element.</li> * <li>id - Default is the value of the 'name' parameter. ID attribute of select element.</li> * <li>class - Class attribute of select element.</li> * <li>blog_id - ID of blog (Multisite only). Defaults to ID of current blog.</li> * </ol> * * @since 2.3.0 * @uses $wpdb WordPress database object for queries * * @param string|array $args Optional. Override defaults. * @return string|null Null on display. String of HTML content on retrieve. */function wp_dropdown_users( $args = '' ) {	global $wpdb;	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'display_name', 'order' => 'ASC',		'include' => '', 'exclude' => '', 'multi' => 0,		'show' => 'display_name', 'echo' => 1,		'selected' => 0, 'name' => 'user', 'class' => '', 'blog_id' => $GLOBALS['blog_id'],		'id' => '',	);	$defaults['selected'] = is_author() ? get_query_var( 'author' ) : 0;	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	$query = "SELECT {$wpdb->users}.* FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities'";	$query_where = array();	if ( is_array($include) )		$include = join(',', $include);	$include = preg_replace('/[^0-9,]/', '', $include); // (int)	if ( $include )		$query_where[] = "ID IN ($include)";	if ( is_array($exclude) )		$exclude = join(',', $exclude);	$exclude = preg_replace('/[^0-9,]/', '', $exclude); // (int)	if ( $exclude )		$query_where[] = "ID NOT IN ($exclude)";	if ( $query_where )		$query .= " AND " . join(' AND', $query_where);	$query .= " ORDER BY $orderby $order";	$users = $wpdb->get_results( $query );	$output = '';	if ( !empty($users) ) {		$name = esc_attr( $name );		if ( $multi && ! $id )			$id = '';		else			$id = $id ? " id='" . esc_attr( $id ) . "'" : " id='$name'";		$output = "<select name='{$name}'{$id} class='$class'>\n";		if ( $show_option_all )			$output .= "\t<option value='0'>$show_option_all</option>\n";		if ( $show_option_none ) {			$_selected = selected( -1, $selected, false );			$output .= "\t<option value='-1'$_selected>$show_option_none</option>\n";		}		foreach ( (array) $users as $user ) {			$user->ID = (int) $user->ID;			$_selected = selected( $user->ID, $selected, false );			$display = !empty($user->$show) ? $user->$show : '('. $user->user_login . ')';			$output .= "\t<option value='$user->ID'$_selected>" . esc_html($display) . "</option>\n";		}		$output .= "</select>";	}	$output = apply_filters('wp_dropdown_users', $output);	if ( $echo )		echo $output;	return $output;}/** * Add user meta data as properties to given user object. * * The finished user data is cached, but the cache is not used to fill in the * user data for the given object. Once the function has been used, the cache * should be used to retrieve user data. The intention is if the current data * had been cached already, there would be no need to call this function. * * @access private * @since 2.5.0 * @uses $wpdb WordPress database object for queries * * @param object $user The user data object. */function _fill_user( &$user ) {	$metavalues = get_user_metavalues(array($user->ID));	_fill_single_user($user, $metavalues[$user->ID]);}/** * Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users * * @since 3.0.0 * @param array $ids User ID numbers list. * @return array of arrays. The array is indexed by user_id, containing $metavalues object arrays. */function get_user_metavalues($ids) {	global $wpdb;	$clean = array_map('intval', $ids);	if ( 0 == count($clean) )		return $objects;	$list = implode(',', $clean);	$show = $wpdb->hide_errors();	$metavalues = $wpdb->get_results("SELECT user_id, meta_key, meta_value FROM $wpdb->usermeta WHERE user_id IN ($list)");	$wpdb->show_errors($show);	$objects = array();	foreach($clean as $id) {		$objects[$id] = array();	}	foreach($metavalues as $meta_object) {		$objects[$meta_object->user_id][] = $meta_object;	}	return $objects;}/** * Unserialize user metadata, fill $user object, then cache everything. * * @since 3.0.0 * @param object $user The User object. * @param array $metavalues An array of objects provided by get_user_metavalues() */function _fill_single_user( &$user, &$metavalues ) {	global $wpdb;	foreach ( $metavalues as $meta ) {		$value = maybe_unserialize($meta->meta_value);		// Keys used as object vars cannot have dashes.		$key = str_replace('-', '', $meta->meta_key);		$user->{$key} = $value;	}	$level = $wpdb->prefix . 'user_level';	if ( isset( $user->{$level} ) )		$user->user_level = $user->{$level};	// For backwards compat.	if ( isset($user->first_name) )		$user->user_firstname = $user->first_name;	if ( isset($user->last_name) )		$user->user_lastname = $user->last_name;	if ( isset($user->description) )		$user->user_description = $user->description;	update_user_caches($user);}/** * Take an array of user objects, fill them with metas, and cache them. * * @since 3.0.0 * @param array $users User objects */function _fill_many_users( &$users ) {	$ids = array();	foreach($users as $user_object) {		$ids[] = $user_object->ID;	}    $metas = get_user_metavalues($ids);	foreach($users as $user_object) {		if (isset($metas[$user_object->ID])) {	        _fill_single_user($user_object, $metas[$user_object->ID]);		}	}}/** * Sanitize every user field. * * If the context is 'raw', then the user object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_user_field() Used to sanitize the fields. * * @param object|array $user The User Object or Array * @param string $context Optional, default is 'display'. How to sanitize user fields. * @return object|array The now sanitized User Object or Array (will be the same type as $user) */function sanitize_user_object($user, $context = 'display') {	if ( is_object($user) ) {		if ( !isset($user->ID) )			$user->ID = 0;		if ( isset($user->data) )			$vars = get_object_vars( $user->data );		else			$vars = get_object_vars($user);		foreach ( array_keys($vars) as $field ) {			if ( is_string($user->$field) || is_numeric($user->$field) )				$user->$field = sanitize_user_field($field, $user->$field, $user->ID, $context);		}		$user->filter = $context;	} else {		if ( !isset($user['ID']) )			$user['ID'] = 0;		foreach ( array_keys($user) as $field )			$user[$field] = sanitize_user_field($field, $user[$field], $user['ID'], $context);		$user['filter'] = $context;	}	return $user;}/** * Sanitize user field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $user_id if $context == 'edit' and field name prefix == 'user_'. * * @uses apply_filters() Calls 'edit_user_$field' passing $value and $user_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'user_'. * * @uses apply_filters() Calls '$field' passing $value, $user_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls 'user_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'user_'. * * @param string $field The user Object field name. * @param mixed $value The user Object value. * @param int $user_id user ID. * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_user_field($field, $value, $user_id, $context) {	$int_fields = array('ID');	if ( in_array($field, $int_fields) )		$value = (int) $value;	if ( 'raw' == $context )		return $value;	if ( !is_string($value) && !is_numeric($value) )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'user_') ) {		$prefixed = true;		$field_no_prefix = str_replace('user_', '', $field);	}	if ( 'edit' == $context ) {		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $user_id);		} else {			$value = apply_filters("edit_user_$field", $value, $user_id);		}		if ( 'description' == $field )			$value = esc_html($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);		} else {			$value = apply_filters("pre_user_$field", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $user_id, $context);		else			$value = apply_filters("user_$field", $value, $user_id, $context);	}	if ( 'user_url' == $field )		$value = esc_url($value);	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Update all user caches * * @since 3.0.0 * * @param object $user User object to be cached */function update_user_caches(&$user) {	wp_cache_add($user->ID, $user, 'users');	wp_cache_add($user->user_login, $user->ID, 'userlogins');	wp_cache_add($user->user_email, $user->ID, 'useremail');	wp_cache_add($user->user_nicename, $user->ID, 'userslugs');}/** * Clean all user caches * * @since 3.0.0 * * @param int $id User ID */function clean_user_cache($id) {	$user = new WP_User($id);	wp_cache_delete($id, 'users');	wp_cache_delete($user->user_login, 'userlogins');	wp_cache_delete($user->user_email, 'useremail');	wp_cache_delete($user->user_nicename, 'userslugs');}?>
<?phpdefine( "WP_INSTALLING", true );/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );require( './wp-blog-header.php' );if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}require_once( ABSPATH . WPINC . '/registration.php');if ( is_object( $wp_object_cache ) )	$wp_object_cache->cache_enabled = false;do_action("activate_header");function do_activate_header() {	do_action("activate_wp_head");}add_action( 'wp_head', 'do_activate_header' );function wpmu_activate_stylesheet() {	?>	<style type="text/css">		form { margin-top: 2em; }		#submit, #key { width: 90%; font-size: 24px; }		#language { margin-top: .5em; }		.error { background: #f66; }		span.h3 { padding:0 8px; font-size:1.3em; font-family:'Trebuchet MS','Lucida Grande',Verdana,Arial,Sans-Serif; font-weight:700; color:#333333; }	</style>	<?php}add_action( 'wp_head', 'wpmu_activate_stylesheet' );get_header();?><div id="content" class="widecolumn">	<?php if ( empty($_GET['key']) && empty($_POST['key']) ) { ?>		<h2><?php _e('Activation Key Required') ?></h2>		<form name="activateform" id="activateform" method="post" action="<?php echo network_site_url('wp-activate.php'); ?>">			<p>			    <label for="key"><?php _e('Activation Key:') ?></label>			    <br /><input type="text" name="key" id="key" value="" size="50" />			</p>			<p class="submit">			    <input id="submit" type="submit" name="Submit" class="submit" value="<?php esc_attr_e('Activate') ?>" />			</p>		</form>	<?php } else {		$key = !empty($_GET['key']) ? $_GET['key'] : $_POST['key'];		$result = wpmu_activate_signup($key);		if ( is_wp_error($result) ) {			if ( 'already_active' == $result->get_error_code() || 'blog_taken' == $result->get_error_code() ) {			    $signup = $result->get_error_data();				?>				<h2><?php _e('Your account is now active!'); ?></h2>				<?php				echo '<p class="lead-in">';				if ( $signup->domain . $signup->path == '' ) {					printf( __('Your account has been activated. You may now <a href="%1$s">login</a> to the site using your chosen username of &#8220;%2$s&#8221;.  Please check your email inbox at %3$s for your password and login instructions. If you do not receive an email, please check your junk or spam folder. If you still do not receive an email within an hour, you can <a href="%4$s">reset your password</a>.'), network_site_url( 'wp-login.php', 'login' ), $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword', 'login' ) );				} else {					printf( __('Your site at <a href="%1$s">%2$s</a> is active. You may now log in to your site using your chosen username of &#8220;%3$s&#8221;.  Please check your email inbox at %4$s for your password and login instructions.  If you do not receive an email, please check your junk or spam folder.  If you still do not receive an email within an hour, you can <a href="%5$s">reset your password</a>.'), 'http://' . $signup->domain, $signup->domain, $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword' ) );				}				echo '</p>';			} else {				?>				<h2><?php _e('An error occurred during the activation'); ?></h2>				<?php			    echo '<p>'.$result->get_error_message().'</p>';			}		} else {			extract($result);			$url = get_blogaddress_by_id( (int) $blog_id);			$user = new WP_User( (int) $user_id);			?>			<h2><?php _e('Your account is now active!'); ?></h2>			<div id="signup-welcome">				<p><span class="h3"><?php _e('Username:'); ?></span> <?php echo $user->user_login ?></p>				<p><span class="h3"><?php _e('Password:'); ?></span> <?php echo $password; ?></p>			</div>			<?php if ( $url != network_home_url('', 'http') ) : ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">View your site</a> or <a href="%2$s">Login</a>'), $url, $url . 'wp-login.php' ); ?></p>			<?php else: ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">Login</a> or go back to the <a href="%2$s">homepage</a>.' ), network_site_url('wp-login.php', 'login'), network_home_url() ); ?></p>			<?php endif;		}	}	?></div><script type="text/javascript">	var key_input = document.getElementById('key');	key_input && key_input.focus();</script><?php get_footer(); ?>
<?php/** * Edit user administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'redirect', 'profile', 'user_id', 'wp_http_referer'));$user_id = (int) $user_id;$current_user = wp_get_current_user();if ( ! defined( 'IS_PROFILE_PAGE' ) )	define( 'IS_PROFILE_PAGE', ( $user_id == $current_user->ID ) );if ( ! $user_id && IS_PROFILE_PAGE )	$user_id = $current_user->ID;elseif ( ! $user_id && ! IS_PROFILE_PAGE )	wp_die(__( 'Invalid user ID.' ) );elseif ( ! get_userdata( $user_id ) )	wp_die( __('Invalid user ID.') );wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');$title = IS_PROFILE_PAGE ? __('Profile') : __('Edit User');if ( current_user_can('edit_users') && !IS_PROFILE_PAGE )	$submenu_file = 'users.php';else	$submenu_file = 'profile.php';$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('Your profile contains information about you (your &#8220;account&#8221;) as well as some personal options related to using WordPress.') . '</p>' .    '<p>' . __('You can change your password, turn on keyboard shortcuts, change the color scheme of your WordPress administration screens, and turn off the WYSIWYG (Visual) editor, among other things.') . '</p>' .    '<p>' . __('Your username cannot be changed, but you can use other fields to enter your real name or a nickname, and change which name to display on your posts.') . '</p>' .    '<p>' . __('Required fields are indicated; the rest are optional. Profile information will only be displayed if your theme is set up to do so.') . '</p>' .    '<p>' . __('Remember to click the Update Profile button when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Your_Profile_SubPanel" target="_blank">Documentation on User Profiles</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$wp_http_referer = remove_query_arg(array('update', 'delete_count'), stripslashes($wp_http_referer));$all_post_caps = array('posts', 'pages');$user_can_edit = false;foreach ( $all_post_caps as $post_cap )	$user_can_edit |= current_user_can("edit_$post_cap");/** * Optional SSL preference that can be turned on by hooking to the 'personal_options' action. * * @since 2.7.0 * * @param object $user User data object */function use_ssl_preference($user) {?>	<tr>		<th scope="row"><?php _e('Use https')?></th>		<td><label for="use_ssl"><input name="use_ssl" type="checkbox" id="use_ssl" value="1" <?php checked('1', $user->use_ssl); ?> /> <?php _e('Always use https when visiting the admin'); ?></label></td>	</tr><?php}// Only allow super admins on multisite to edit every user.if ( is_multisite() && ! current_user_can( 'manage_network_users' ) && $user_id != $current_user->ID && ! apply_filters( 'enable_edit_any_user_configuration', true ) )	wp_die( __( 'You do not have permission to edit this user.' ) );// Execute confirmed email change. See send_confirmation_on_profile_email().if ( is_multisite() && IS_PROFILE_PAGE && isset( $_GET[ 'newuseremail' ] ) && $current_user->ID ) {	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email[ 'hash' ] == $_GET[ 'newuseremail' ] ) {		$user->ID = $current_user->ID;		$user->user_email = esc_html( trim( $new_email[ 'newemail' ] ) );		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $current_user->user_login ) ) )			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $user->user_email, $current_user->user_login ) );		wp_update_user( get_object_vars( $user ) );		delete_option( $current_user->ID . '_new_email' );		wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );		die();	}} elseif ( is_multisite() && IS_PROFILE_PAGE && !empty( $_GET['dismiss'] ) && $current_user->ID . '_new_email' == $_GET['dismiss'] ) {	delete_option( $current_user->ID . '_new_email' );	wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );	die();}switch ($action) {case 'switchposts':check_admin_referer();/* TODO: Switch all posts from one user to another user */break;case 'update':check_admin_referer('update-user_' . $user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));if ( IS_PROFILE_PAGE )	do_action('personal_options_update', $user_id);else	do_action('edit_user_profile_update', $user_id);if ( !is_multisite() ) {	$errors = edit_user($user_id);} else {	$user = get_userdata( $user_id );	// Update the email address in signups, if present.	if ( $user->user_login && isset( $_POST[ 'email' ] ) && is_email( $_POST[ 'email' ] ) && $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $user->user_login ) ) )		$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $_POST[ 'email' ], $user_login ) );	// WPMU must delete the user from the current blog if WP added him after editing.	$delete_role = false;	$blog_prefix = $wpdb->get_blog_prefix();	if ( $user_id != $current_user->ID ) {		$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$user_id}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );		if ( null == $cap && $_POST[ 'role' ] == '' ) {			$_POST[ 'role' ] = 'contributor';			$delete_role = true;		}	}	if ( !isset( $errors ) || ( isset( $errors ) && is_object( $errors ) && false == $errors->get_error_codes() ) )		$errors = edit_user($user_id);	if ( $delete_role ) // stops users being added to current blog when they are edited		delete_user_meta( $user_id, $blog_prefix . 'capabilities' );	if ( is_multisite() && !IS_PROFILE_PAGE && current_user_can( 'manage_network_options' ) && !isset($super_admins) && empty( $_POST['super_admin'] ) == is_super_admin( $user_id ) )		empty( $_POST['super_admin'] ) ? revoke_super_admin( $user_id ) : grant_super_admin( $user_id );}if ( !is_wp_error( $errors ) ) {	$redirect = (IS_PROFILE_PAGE ? "profile.php?" : "user-edit.php?user_id=$user_id&"). "updated=true";	$redirect = add_query_arg('wp_http_referer', urlencode($wp_http_referer), $redirect);	wp_redirect($redirect);	exit;}default:$profileuser = get_user_to_edit($user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));include ('admin-header.php');?><?php if ( !IS_PROFILE_PAGE && is_super_admin( $profileuser->ID ) && current_user_can( 'manage_network_options' ) ) { ?>	<div class="updated"><p><strong><?php _e('Important:'); ?></strong> <?php _e('This user has super admin privileges.'); ?></p></div><?php } ?><?php if ( isset($_GET['updated']) ) : ?><div id="message" class="updated">	<p><strong><?php _e('User updated.') ?></strong></p>	<?php if ( $wp_http_referer && !IS_PROFILE_PAGE ) : ?>	<p><a href="users.php"><?php _e('&larr; Back to Authors and Users'); ?></a></p>	<?php endif; ?></div><?php endif; ?><?php if ( isset( $errors ) && is_wp_error( $errors ) ) : ?><div class="error"><p><?php echo implode( "</p>\n<p>", $errors->get_error_messages() ); ?></p></div><?php endif; ?><div class="wrap" id="profile-page"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="your-profile" action="<?php echo esc_url( admin_url( IS_PROFILE_PAGE ? 'profile.php' : 'user-edit.php' ) ); ?>" method="post"<?php do_action('user_edit_form_tag'); ?>><?php wp_nonce_field('update-user_' . $user_id) ?><?php if ( $wp_http_referer ) : ?>	<input type="hidden" name="wp_http_referer" value="<?php echo esc_url($wp_http_referer); ?>" /><?php endif; ?><p><input type="hidden" name="from" value="profile" /><input type="hidden" name="checkuser_id" value="<?php echo $user_ID ?>" /></p><h3><?php _e('Personal Options'); ?></h3><table class="form-table"><?php if ( rich_edit_exists() && !( IS_PROFILE_PAGE && !$user_can_edit ) ) : // don't bother showing the option if the editor has been removed ?>	<tr>		<th scope="row"><?php _e('Visual Editor')?></th>		<td><label for="rich_editing"><input name="rich_editing" type="checkbox" id="rich_editing" value="false" <?php checked('false', $profileuser->rich_editing); ?> /> <?php _e('Disable the visual editor when writing'); ?></label></td>	</tr><?php endif; ?><?php if ( count($_wp_admin_css_colors) > 1 && has_action('admin_color_scheme_picker') ) : ?><tr><th scope="row"><?php _e('Admin Color Scheme')?></th><td><?php do_action( 'admin_color_scheme_picker' ); ?></td></tr><?phpendif; // $_wp_admin_css_colorsif ( !( IS_PROFILE_PAGE && !$user_can_edit ) ) : ?><tr><th scope="row"><?php _e( 'Keyboard Shortcuts' ); ?></th><td><label for="comment_shortcuts"><input type="checkbox" name="comment_shortcuts" id="comment_shortcuts" value="true" <?php if ( !empty($profileuser->comment_shortcuts) ) checked('true', $profileuser->comment_shortcuts); ?> /> <?php _e('Enable keyboard shortcuts for comment moderation.'); ?></label> <?php _e('<a href="http://codex.wordpress.org/Keyboard_Shortcuts">More information</a>'); ?></td></tr><?phpendif;do_action('personal_options', $profileuser);?></table><?php	if ( IS_PROFILE_PAGE )		do_action('profile_personal_options', $profileuser);?><h3><?php _e('Name') ?></h3><table class="form-table">	<tr>		<th><label for="user_login"><?php _e('Username'); ?></label></th>		<td><input type="text" name="user_login" id="user_login" value="<?php echo esc_attr($profileuser->user_login); ?>" disabled="disabled" class="regular-text" /> <span class="description"><?php _e('Usernames cannot be changed.'); ?></span></td>	</tr><?php if ( !IS_PROFILE_PAGE ): ?><tr><th><label for="role"><?php _e('Role:') ?></label></th><td><select name="role" id="role"><?php// Get the highest/primary role for this user// TODO: create a function that does this: wp_get_user_role()$user_roles = $profileuser->roles;$user_role = array_shift($user_roles);// print the full list of roles with the primary one selected.wp_dropdown_roles($user_role);// print the 'no role' option. Make it selected if the user has no role yet.if ( $user_role )	echo '<option value="">' . __('&mdash; No role for this site &mdash;') . '</option>';else	echo '<option value="" selected="selected">' . __('&mdash; No role for this site &mdash;') . '</option>';?></select><?php if ( is_multisite() && current_user_can( 'manage_network_options' ) && !isset($super_admins) ) { ?><p><label><input type="checkbox" id="super_admin" name="super_admin"<?php checked( is_super_admin( $profileuser->ID ) ); ?> /> <?php _e( 'Grant this user super admin privileges for the Network.'); ?></label></p><?php } ?></td></tr><?php endif; //!IS_PROFILE_PAGE ?><tr>	<th><label for="first_name"><?php _e('First Name') ?></label></th>	<td><input type="text" name="first_name" id="first_name" value="<?php echo esc_attr($profileuser->first_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="last_name"><?php _e('Last Name') ?></label></th>	<td><input type="text" name="last_name" id="last_name" value="<?php echo esc_attr($profileuser->last_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="nickname"><?php _e('Nickname'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="nickname" id="nickname" value="<?php echo esc_attr($profileuser->nickname) ?>" class="regular-text" /></td></tr><tr>	<th><label for="display_name"><?php _e('Display name publicly as') ?></label></th>	<td>		<select name="display_name" id="display_name">		<?php			$public_display = array();			$public_display['display_username']  = $profileuser->user_login;			$public_display['display_nickname']  = $profileuser->nickname;			if ( !empty($profileuser->first_name) )				$public_display['display_firstname'] = $profileuser->first_name;			if ( !empty($profileuser->last_name) )				$public_display['display_lastname'] = $profileuser->last_name;			if ( !empty($profileuser->first_name) && !empty($profileuser->last_name) ) {				$public_display['display_firstlast'] = $profileuser->first_name . ' ' . $profileuser->last_name;				$public_display['display_lastfirst'] = $profileuser->last_name . ' ' . $profileuser->first_name;			}			if ( !in_array( $profileuser->display_name, $public_display ) ) // Only add this if it isn't duplicated elsewhere				$public_display = array( 'display_displayname' => $profileuser->display_name ) + $public_display;			$public_display = array_map( 'trim', $public_display );			$public_display = array_unique( $public_display );			foreach ( $public_display as $id => $item ) {		?>			<option id="<?php echo $id; ?>" value="<?php echo esc_attr($item); ?>"<?php selected( $profileuser->display_name, $item ); ?>><?php echo $item; ?></option>		<?php			}		?>		</select>	</td></tr></table><h3><?php _e('Contact Info') ?></h3><table class="form-table"><tr>	<th><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="email" id="email" value="<?php echo esc_attr($profileuser->user_email) ?>" class="regular-text" />	<?php	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email && $new_email != $current_user->user_email ) : ?>	<div class="updated inline">	<p><?php printf( __('There is a pending change of your e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_email['newemail'], esc_url( admin_url( 'profile.php?dismiss=' . $current_user->ID . '_new_email' ) ) ); ?></p>	</div>	<?php endif; ?>	</td></tr><tr>	<th><label for="url"><?php _e('Website') ?></label></th>	<td><input type="text" name="url" id="url" value="<?php echo esc_attr($profileuser->user_url) ?>" class="regular-text code" /></td></tr><?php	foreach (_wp_get_user_contactmethods() as $name => $desc) {?><tr>	<th><label for="<?php echo $name; ?>"><?php echo apply_filters('user_'.$name.'_label', $desc); ?></label></th>	<td><input type="text" name="<?php echo $name; ?>" id="<?php echo $name; ?>" value="<?php echo esc_attr($profileuser->$name) ?>" class="regular-text" /></td></tr><?php	}?></table><h3><?php IS_PROFILE_PAGE ? _e('About Yourself') : _e('About the user'); ?></h3><table class="form-table"><tr>	<th><label for="description"><?php _e('Biographical Info'); ?></label></th>	<td><textarea name="description" id="description" rows="5" cols="30"><?php echo esc_html($profileuser->description); ?></textarea><br />	<span class="description"><?php _e('Share a little biographical information to fill out your profile. This may be shown publicly.'); ?></span></td></tr><?php$show_password_fields = apply_filters('show_password_fields', true, $profileuser);if ( $show_password_fields ) :?><tr id="password">	<th><label for="pass1"><?php _e('New Password'); ?></label></th>	<td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("If you would like to change the password type a new one. Otherwise leave this blank."); ?></span><br />		<input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("Type your new password again."); ?></span><br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>	</td></tr><?php endif; ?></table><?php	if ( IS_PROFILE_PAGE )		do_action( 'show_user_profile', $profileuser );	else		do_action( 'edit_user_profile', $profileuser );?><?php if ( count($profileuser->caps) > count($profileuser->roles) && apply_filters('additional_capabilities_display', true, $profileuser) ) { ?><br class="clear" />	<table width="99%" style="border: none;" cellspacing="2" cellpadding="3" class="editform">		<tr>			<th scope="row"><?php _e('Additional Capabilities') ?></th>			<td><?php			$output = '';			foreach ( $profileuser->caps as $cap => $value ) {				if ( !$wp_roles->is_role($cap) ) {					if ( $output != '' )						$output .= ', ';					$output .= $value ? $cap : "Denied: {$cap}";				}			}			echo $output;			?></td>		</tr>	</table><?php } ?><p class="submit">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="<?php echo esc_attr($user_id); ?>" />	<input type="submit" class="button-primary" value="<?php IS_PROFILE_PAGE ? esc_attr_e('Update Profile') : esc_attr_e('Update User') ?>" name="submit" /></p></form></div><?phpbreak;}?><script type="text/javascript" charset="utf-8">	if (window.location.hash == '#password') {		document.getElementById('pass1').focus();	}</script><?phpinclude('./admin-footer.php');?>
<?php/** * WordPress user administration API. * * @package WordPress * @subpackage Administration *//** * Creates a new user from the "Users" form using $_POST information. * * It seems that the first half is for backwards compatibility, but only * has the ability to alter the user's role. WordPress core seems to * use this function only in the second way, running edit_user() with * no id so as to create a new user. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return null|WP_Error|int Null when adding user, WP_Error or User ID integer when no parameters. */function add_user() {	if ( func_num_args() ) { // The hackiest hack that ever did hack		global $current_user, $wp_roles;		$user_id = (int) func_get_arg( 0 );		if ( isset( $_POST['role'] ) ) {			$new_role = sanitize_text_field( $_POST['role'] );			// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.			if ( $user_id != $current_user->id || $wp_roles->role_objects[$new_role]->has_cap( 'edit_users' ) ) {				// If the new role isn't editable by the logged-in user die with error				$editable_roles = get_editable_roles();				if ( empty( $editable_roles[$new_role] ) )					wp_die(__('You can&#8217;t give users that role.'));				$user = new WP_User( $user_id );				$user->set_role( $new_role );			}		}	} else {		add_action( 'user_register', 'add_user' ); // See above		return edit_user();	}}/** * Edit user settings based on contents of $_POST * * Used on user-edit.php and profile.php to manage and process user options, passwords etc. * * @since 2.0 * * @param int $user_id Optional. User ID. * @return int user id of the updated user */function edit_user( $user_id = 0 ) {	global $current_user, $wp_roles, $wpdb;	if ( $user_id != 0 ) {		$update = true;		$user->ID = (int) $user_id;		$userdata = get_userdata( $user_id );		$user->user_login = $wpdb->escape( $userdata->user_login );	} else {		$update = false;		$user = '';	}	if ( !$update && isset( $_POST['user_login'] ) )		$user->user_login = sanitize_user($_POST['user_login'], true);	$pass1 = $pass2 = '';	if ( isset( $_POST['pass1'] ))		$pass1 = $_POST['pass1'];	if ( isset( $_POST['pass2'] ))		$pass2 = $_POST['pass2'];	if ( isset( $_POST['role'] ) && current_user_can( 'edit_users' ) ) {		$new_role = sanitize_text_field( $_POST['role'] );		$potential_role = isset($wp_roles->role_objects[$new_role]) ? $wp_roles->role_objects[$new_role] : false;		// Don't let anyone with 'edit_users' (admins) edit their own role to something without it.		// Multisite super admins can freely edit their blog roles -- they possess all caps.		if ( ( is_multisite() && current_user_can( 'manage_sites' ) ) || $user_id != $current_user->id || ($potential_role && $potential_role->has_cap( 'edit_users' ) ) )			$user->role = $new_role;		// If the new role isn't editable by the logged-in user die with error		$editable_roles = get_editable_roles();		if ( ! empty( $new_role ) && empty( $editable_roles[$new_role] ) )			wp_die(__('You can&#8217;t give users that role.'));	}	if ( isset( $_POST['email'] ))		$user->user_email = sanitize_text_field( $_POST['email'] );	if ( isset( $_POST['url'] ) ) {		if ( empty ( $_POST['url'] ) || $_POST['url'] == 'http://' ) {			$user->user_url = '';		} else {			$user->user_url = esc_url_raw( $_POST['url'] );			$user->user_url = preg_match('/^(https?|ftps?|mailto|news|irc|gopher|nntp|feed|telnet):/is', $user->user_url) ? $user->user_url : 'http://'.$user->user_url;		}	}	if ( isset( $_POST['first_name'] ) )		$user->first_name = sanitize_text_field( $_POST['first_name'] );	if ( isset( $_POST['last_name'] ) )		$user->last_name = sanitize_text_field( $_POST['last_name'] );	if ( isset( $_POST['nickname'] ) )		$user->nickname = sanitize_text_field( $_POST['nickname'] );	if ( isset( $_POST['display_name'] ) )		$user->display_name = sanitize_text_field( $_POST['display_name'] );	if ( isset( $_POST['description'] ) )		$user->description = trim( $_POST['description'] );	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( isset( $_POST[$method] ))			$user->$method = sanitize_text_field( $_POST[$method] );	}	if ( $update ) {		$user->rich_editing = isset( $_POST['rich_editing'] ) && 'false' == $_POST['rich_editing'] ? 'false' : 'true';		$user->admin_color = isset( $_POST['admin_color'] ) ? sanitize_text_field( $_POST['admin_color'] ) : 'fresh';	}	$user->comment_shortcuts = isset( $_POST['comment_shortcuts'] ) && 'true' == $_POST['comment_shortcuts'] ? 'true' : '';	$user->use_ssl = 0;	if ( !empty($_POST['use_ssl']) )		$user->use_ssl = 1;	$errors = new WP_Error();	/* checking that username has been typed */	if ( $user->user_login == '' )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: Please enter a username.' ));	/* checking the password has been typed twice */	do_action_ref_array( 'check_passwords', array ( $user->user_login, & $pass1, & $pass2 ));	if ( $update ) {		if ( empty($pass1) && !empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass1' ) );		elseif ( !empty($pass1) && empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: You entered your new password only once.' ), array( 'form-field' => 'pass2' ) );	} else {		if ( empty($pass1) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password.' ), array( 'form-field' => 'pass1' ) );		elseif ( empty($pass2) )			$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter your password twice.' ), array( 'form-field' => 'pass2' ) );	}	/* Check for "\" in password */	if ( false !== strpos( stripslashes($pass1), "\\" ) )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Passwords may not contain the character "\\".' ), array( 'form-field' => 'pass1' ) );	/* checking the password has been typed twice the same */	if ( $pass1 != $pass2 )		$errors->add( 'pass', __( '<strong>ERROR</strong>: Please enter the same password in the two password fields.' ), array( 'form-field' => 'pass1' ) );	if ( !empty( $pass1 ) )		$user->user_pass = $pass1;	if ( !$update && isset( $_POST['user_login'] ) && !validate_username( $_POST['user_login'] ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ));	if ( !$update && username_exists( $user->user_login ) )		$errors->add( 'user_login', __( '<strong>ERROR</strong>: This username is already registered. Please choose another one.' ));	/* checking e-mail address */	if ( empty( $user->user_email ) ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please enter an e-mail address.' ), array( 'form-field' => 'email' ) );	} elseif ( !is_email( $user->user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The e-mail address isn&#8217;t correct.' ), array( 'form-field' => 'email' ) );	} elseif ( ( $owner_id = email_exists($user->user_email) ) && $owner_id != $user->ID ) {		$errors->add( 'email_exists', __('<strong>ERROR</strong>: This email is already registered, please choose another one.'), array( 'form-field' => 'email' ) );	}	// Allow plugins to return their own errors.	do_action_ref_array('user_profile_update_errors', array ( &$errors, $update, &$user ) );	if ( $errors->get_error_codes() )		return $errors;	if ( $update ) {		$user_id = wp_update_user( get_object_vars( $user ) );	} else {		$user_id = wp_insert_user( get_object_vars( $user ) );		wp_new_user_notification( $user_id, isset($_POST['send_password']) ? $pass1 : '' );	}	return $user_id;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return array List of user IDs. */function get_author_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value != '0'", $level_key) );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @return array|bool List of editable authors. False if no editable users. */function get_editable_authors( $user_id ) {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( !$editable ) {		return false;	} else {		$editable = join(',', $editable);		$authors = $wpdb->get_results( "SELECT * FROM $wpdb->users WHERE ID IN ($editable) ORDER BY display_name" );	}	return apply_filters('get_editable_authors', $authors);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. * @param bool $exclude_zeros Optional, default is true. Whether to exclude zeros. * @return unknown */function get_editable_user_ids( $user_id, $exclude_zeros = true, $post_type = 'post' ) {	global $wpdb;	$user = new WP_User( $user_id );	$post_type_obj = get_post_type_object($post_type);	if ( ! $user->has_cap($post_type_obj->cap->edit_others_posts) ) {		if ( $user->has_cap($post_type_obj->cap->edit_posts) || ! $exclude_zeros )			return array($user->id);		else			return array();	}	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	$query = $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s", $level_key);	if ( $exclude_zeros )		$query .= " AND meta_value != '0'";	return $wpdb->get_col( $query );}/** * Fetch a filtered list of user roles that the current user is * allowed to edit. * * Simple function who's main purpose is to allow filtering of the * list of roles in the $wp_roles object so that plugins can remove * innappropriate ones depending on the situation or user making edits. * Specifically because without filtering anyone with the edit_users * capability can edit others to be administrators, even if they are * only editors or authors. This filter allows admins to delegate * user management. * * @since 2.8 * * @return unknown */function get_editable_roles() {	global $wp_roles;	$all_roles = $wp_roles->roles;	$editable_roles = apply_filters('editable_roles', $all_roles);	return $editable_roles;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function get_nonauthor_user_ids() {	global $wpdb;	if ( !is_multisite() )		$level_key = $wpdb->get_blog_prefix() . 'user_level';	else		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels	return $wpdb->get_col( $wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value = '0'", $level_key) );}/** * Retrieve editable posts from other users. * * @since unknown * * @param int $user_id User ID to not retrieve posts from. * @param string $type Optional, defaults to 'any'. Post type to retrieve, can be 'draft' or 'pending'. * @return array List of posts from others. */function get_others_unpublished_posts($user_id, $type='any') {	global $wpdb;	$editable = get_editable_user_ids( $user_id );	if ( in_array($type, array('draft', 'pending')) )		$type_sql = " post_status = '$type' ";	else		$type_sql = " ( post_status = 'draft' OR post_status = 'pending' ) ";	$dir = ( 'pending' == $type ) ? 'ASC' : 'DESC';	if ( !$editable ) {		$other_unpubs = '';	} else {		$editable = join(',', $editable);		$other_unpubs = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_title, post_author FROM $wpdb->posts WHERE post_type = 'post' AND $type_sql AND post_author IN ($editable) AND post_author != %d ORDER BY post_modified $dir", $user_id) );	}	return apply_filters('get_others_drafts', $other_unpubs);}/** * Retrieve drafts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of drafts from other users. */function get_others_drafts($user_id) {	return get_others_unpublished_posts($user_id, 'draft');}/** * Retrieve pending review posts from other users. * * @since unknown * * @param int $user_id User ID. * @return array List of posts with pending review post type from other users. */function get_others_pending($user_id) {	return get_others_unpublished_posts($user_id, 'pending');}/** * Retrieve user data and filter it. * * @since unknown * * @param int $user_id User ID. * @return object WP_User object with user data. */function get_user_to_edit( $user_id ) {	$user = new WP_User( $user_id );	$user_contactmethods = _wp_get_user_contactmethods();	foreach ($user_contactmethods as $method => $name) {		if ( empty( $user->{$method} ) )			$user->{$method} = '';	}	if ( empty($user->description) )		$user->description = '';	$user = sanitize_user_object($user, 'edit');	return $user;}/** * Retrieve the user's drafts. * * @since unknown * * @param int $user_id User ID. * @return array */function get_users_drafts( $user_id ) {	global $wpdb;	$query = $wpdb->prepare("SELECT ID, post_title FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'draft' AND post_author = %d ORDER BY post_modified DESC", $user_id);	$query = apply_filters('get_users_drafts', $query);	return $wpdb->get_results( $query );}/** * Remove user and optionally reassign posts and links to another user. * * If the $reassign parameter is not assigned to an User ID, then all posts will * be deleted of that user. The action 'delete_user' that is passed the User ID * being deleted will be run after the posts are either reassigned or deleted. * The user meta will also be deleted that are for that User ID. * * @since unknown * * @param int $id User ID. * @param int $reassign Optional. Reassign posts and links to new User ID. * @return bool True when finished. */function wp_delete_user( $id, $reassign = 'novalue' ) {	global $wpdb;	$id = (int) $id;	// allow for transaction statement	do_action('delete_user', $id);	if ( 'novalue' === $reassign || null === $reassign ) {		$post_ids = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id) );		if ( $post_ids ) {			foreach ( $post_ids as $post_id )				wp_delete_post($post_id);		}		// Clean links		$link_ids = $wpdb->get_col( $wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id) );		if ( $link_ids ) {			foreach ( $link_ids as $link_id )				wp_delete_link($link_id);		}	} else {		$reassign = (int) $reassign;		$wpdb->update( $wpdb->posts, array('post_author' => $reassign), array('post_author' => $id) );		$wpdb->update( $wpdb->links, array('link_owner' => $reassign), array('link_owner' => $id) );	}	clean_user_cache($id);	// FINALLY, delete user	if ( !is_multisite() ) {		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id) );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->users WHERE ID = %d", $id) );	} else {		$level_key = $wpdb->get_blog_prefix() . 'capabilities'; // wpmu site admins don't have user_levels		$wpdb->query("DELETE FROM $wpdb->usermeta WHERE user_id = $id AND meta_key = '{$level_key}'");	}	// allow for commit transaction	do_action('deleted_user', $id);	return true;}/** * Remove all capabilities from user. * * @since unknown * * @param int $id User ID. */function wp_revoke_user($id) {	$id = (int) $id;	$user = new WP_User($id);	$user->remove_all_caps();}if ( !class_exists('WP_User_Search') ) :/** * WordPress User Search class. * * @since unknown */class WP_User_Search {	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $results;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_term;	/**	 * Page number.	 *	 * @since unknown	 * @access private	 * @var int	 */	var $page;	/**	 * Role name that users have.	 *	 * @since unknown	 * @access private	 * @var string	 */	var $role;	/**	 * Raw page number.	 *	 * @since unknown	 * @access private	 * @var int|bool	 */	var $raw_page;	/**	 * Amount of users to display per page.	 *	 * @since unknown	 * @access public	 * @var int	 */	var $users_per_page = 50;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $first_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $last_user;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var string	 */	var $query_limit;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_orderby;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_from;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access private	 * @var string	 */	var $query_where;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var int	 */	var $total_users_for_query = 0;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var bool	 */	var $too_many_total_users = false;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $search_errors;	/**	 * {@internal Missing Description}}	 *	 * @since unknown	 * @access private	 * @var unknown_type	 */	var $paging_text;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * @since unknown	 *	 * @param string $search_term Search terms string.	 * @param int $page Optional. Page ID.	 * @param string $role Role name.	 * @return WP_User_Search	 */	function WP_User_Search ($search_term = '', $page = '', $role = '') {		$this->search_term = $search_term;		$this->raw_page = ( '' == $page ) ? false : (int) $page;		$this->page = (int) ( '' == $page ) ? 1 : $page;		$this->role = $role;		$this->prepare_query();		$this->query();		$this->prepare_vars_for_template_usage();		$this->do_paging();	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_query() {		global $wpdb;		$this->first_user = ($this->page - 1) * $this->users_per_page;		$this->query_limit = $wpdb->prepare(" LIMIT %d, %d", $this->first_user, $this->users_per_page);		$this->query_orderby = ' ORDER BY user_login';		$search_sql = '';		if ( $this->search_term ) {			$searches = array();			$search_sql = 'AND (';			foreach ( array('user_login', 'user_nicename', 'user_email', 'user_url', 'display_name') as $col )				$searches[] = $col . " LIKE '%$this->search_term%'";			$search_sql .= implode(' OR ', $searches);			$search_sql .= ')';		}		$this->query_from = " FROM $wpdb->users";		$this->query_where = " WHERE 1=1 $search_sql";		if ( $this->role ) {			$this->query_from .= " INNER JOIN $wpdb->usermeta ON $wpdb->users.ID = $wpdb->usermeta.user_id";			$this->query_where .= $wpdb->prepare(" AND $wpdb->usermeta.meta_key = '{$wpdb->prefix}capabilities' AND $wpdb->usermeta.meta_value LIKE %s", '%' . $this->role . '%');		} elseif ( is_multisite() ) {			$level_key = $wpdb->prefix . 'capabilities'; // wpmu site admins don't have user_levels			$this->query_from .= ", $wpdb->usermeta";			$this->query_where .= " AND $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '{$level_key}'";		}		do_action_ref_array( 'pre_user_search', array( &$this ) );	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function query() {		global $wpdb;		$this->results = $wpdb->get_col("SELECT DISTINCT($wpdb->users.ID)" . $this->query_from . $this->query_where . $this->query_orderby . $this->query_limit);		if ( $this->results )			$this->total_users_for_query = $wpdb->get_var("SELECT COUNT(DISTINCT($wpdb->users.ID))" . $this->query_from . $this->query_where); // no limit		else			$this->search_errors = new WP_Error('no_matching_users_found', __('No matching users were found!'));	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function prepare_vars_for_template_usage() {		$this->search_term = stripslashes($this->search_term); // done with DB, from now on we want slashes gone	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 */	function do_paging() {		if ( $this->total_users_for_query > $this->users_per_page ) { // have to page the results			$args = array();			if( ! empty($this->search_term) )				$args['usersearch'] = urlencode($this->search_term);			if( ! empty($this->role) )				$args['role'] = urlencode($this->role);			$this->paging_text = paginate_links( array(				'total' => ceil($this->total_users_for_query / $this->users_per_page),				'current' => $this->page,				'base' => 'users.php?%_%',				'format' => 'userspage=%#%',				'add_args' => $args			) );			if ( $this->paging_text ) {				$this->paging_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',					number_format_i18n( ( $this->page - 1 ) * $this->users_per_page + 1 ),					number_format_i18n( min( $this->page * $this->users_per_page, $this->total_users_for_query ) ),					number_format_i18n( $this->total_users_for_query ),					$this->paging_text				);			}		}	}	/**	 * {@internal Missing Short Description}}	 *	 * {@internal Missing Long Description}}	 *	 * @since unknown	 * @access public	 *	 * @return unknown	 */	function get_results() {		return (array) $this->results;	}	/**	 * Displaying paging text.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 */	function page_links() {		echo $this->paging_text;	}	/**	 * Whether paging is enabled.	 *	 * @see do_paging() Builds paging text.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function results_are_paged() {		if ( $this->paging_text )			return true;		return false;	}	/**	 * Whether there are search terms.	 *	 * @since unknown	 * @access public	 *	 * @return bool	 */	function is_search() {		if ( $this->search_term )			return true;		return false;	}}endif;add_action('admin_init', 'default_password_nag_handler');function default_password_nag_handler($errors = false) {	global $user_ID;	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	//get_user_setting = JS saved UI setting. else no-js-falback code.	if ( 'hide' == get_user_setting('default_password_nag') || isset($_GET['default_password_nag']) && '0' == $_GET['default_password_nag'] ) {		delete_user_setting('default_password_nag');		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('profile_update', 'default_password_nag_edit_user', 10, 2);function default_password_nag_edit_user($user_ID, $old_data) {	if ( ! get_user_option('default_password_nag', $user_ID) ) //Short circuit it.		return;	$new_data = get_userdata($user_ID);	if ( $new_data->user_pass != $old_data->user_pass ) { //Remove the nag if the password has been changed.		delete_user_setting('default_password_nag', $user_ID);		update_user_option($user_ID, 'default_password_nag', false, true);	}}add_action('admin_notices', 'default_password_nag');function default_password_nag() {	if ( ! get_user_option('default_password_nag') ) //Short circuit it.		return;	echo '<div class="error default-password-nag">';	echo '<p>';	echo '<strong>' . __('Notice:') . '</strong> ';	_e('You&rsquo;re using the auto-generated password for your account. Would you like to change it to something you&rsquo;ll remember easier?');	echo '</p><p>';	printf( '<a href="%s">' . __('Yes, take me to my profile page') . '</a> | ', admin_url('profile.php') . '#password' );	printf( '<a href="%s" id="default-password-nag-no">' . __('No thanks, do not remind me again') . '</a>', '?default_password_nag=0' );	echo '</p></div>';}?>
<?php/** * WordPress DB Class * * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)} * * @package WordPress * @subpackage Database * @since 0.71 *//** * @since 0.71 */define( 'EZSQL_VERSION', 'WP1.25' );/** * @since 0.71 */define( 'OBJECT', 'OBJECT', true );/** * @since 2.5.0 */define( 'OBJECT_K', 'OBJECT_K' );/** * @since 0.71 */define( 'ARRAY_A', 'ARRAY_A' );/** * @since 0.71 */define( 'ARRAY_N', 'ARRAY_N' );/** * WordPress Database Access Abstraction Object * * It is possible to replace this class with your own * by setting the $wpdb global variable in wp-content/db.php * file with your class. You can name it wpdb also, since * this file will not be included, if the other file is * available. * * @link http://codex.wordpress.org/Function_Reference/wpdb_Class * * @package WordPress * @subpackage Database * @since 0.71 * @final */class wpdb {	/**	 * Whether to show SQL/DB errors	 *	 * @since 0.71	 * @access private	 * @var bool	 */	var $show_errors = false;	/**	 * Whether to suppress errors during the DB bootstrapping.	 *	 * @access private	 * @since 2.5	 * @var bool	 */	var $suppress_errors = false;	/**	 * The last error during query.	 *	 * @see get_last_error()	 * @since 2.5	 * @access private	 * @var string	 */	var $last_error = '';	/**	 * Amount of queries made	 *	 * @since 1.2.0	 * @access private	 * @var int	 */	var $num_queries = 0;	/**	 * Count of rows returned by previous query	 *	 * @since 1.2	 * @access private	 * @var int	 */	var $num_rows = 0;	/**	 * Count of affected rows by previous query	 *	 * @since 0.71	 * @access private	 * @var int	 */	var $rows_affected = 0;	/**	 * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).	 *	 * @since 0.71	 * @access public	 * @var int	 */	var $insert_id = 0;	/**	 * Saved result of the last query made	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $last_query;	/**	 * Results of the last query made	 *	 * @since 1.0.0	 * @access private	 * @var array|null	 */	var $last_result;	/**	 * Saved info on the table column	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $col_info;	/**	 * Saved queries that were executed	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queries;	/**	 * WordPress table prefix	 *	 * You can set this to have multiple WordPress installations	 * in a single database. The second reason is for possible	 * security precautions.	 *	 * @since 0.71	 * @access private	 * @var string	 */	var $prefix = '';	/**	 * Whether the database queries are ready to start executing.	 *	 * @since 2.5.0	 * @access private	 * @var bool	 */	var $ready = false;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $blogid = 0;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $siteid = 0;	/**	 * List of WordPress per-blog tables	 *	 * @since 2.5.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',		'terms', 'term_taxonomy', 'term_relationships', 'commentmeta' );	/**	 * List of deprecated WordPress tables	 *	 * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539	 *	 * @since 2.9.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $old_tables = array( 'categories', 'post2cat', 'link2cat' );	/**	 * List of WordPress global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $global_tables = array( 'users', 'usermeta' );	/**	 * List of Multisite global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',		'sitecategories', 'registration_log', 'blog_versions' );	/**	 * WordPress Comments table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $comments;	/**	 * WordPress Comment Metadata table	 *	 * @since 2.9.0	 * @access public	 * @var string	 */	var $commentmeta;	/**	 * WordPress Links table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $links;	/**	 * WordPress Options table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $options;	/**	 * WordPress Post Metadata table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $postmeta;	/**	 * WordPress Posts table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $posts;	/**	 * WordPress Terms table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $terms;	/**	 * WordPress Term Relationships table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_relationships;	/**	 * WordPress Term Taxonomy table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_taxonomy;	/*	 * Global and Multisite tables	 */	/**	 * WordPress User Metadata table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $usermeta;	/**	 * WordPress Users table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $users;	/**	 * Multisite Blogs table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blogs;	/**	 * Multisite Blog Versions table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blog_versions;	/**	 * Multisite Registration Log table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $registration_log;	/**	 * Multisite Signups table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $signups;	/**	 * Multisite Sites table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $site;	/**	 * Multisite Sitewide Terms table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitecategories;	/**	 * Multisite Site Metadata table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitemeta;	/**	 * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.	 *	 * Keys are column names, values are format types: 'ID' => '%d'	 *	 * @since 2.8.0	 * @see wpdb:prepare()	 * @see wpdb:insert()	 * @see wpdb:update()	 * @see wp_set_wpdb_vars()	 * @access public	 * @var array	 */	var $field_types = array();	/**	 * Database table columns charset	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $charset;	/**	 * Database table columns collate	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $collate;	/**	 * Whether to use mysql_real_escape_string	 *	 * @since 2.8.0	 * @access public	 * @var bool	 */	var $real_escape = false;	/**	 * Database Username	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $dbuser;	/**	 * A textual description of the last query/get_row/get_var call	 *	 * @since unknown	 * @access public	 * @var string	 */	var $func_call;	/**	 * Connects to the database server and selects a database	 *	 * PHP4 compatibility layer for calling the PHP5 constructor.	 *	 * @uses wpdb::__construct() Passes parameters and returns result	 * @since 0.71	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function wpdb( $dbuser, $dbpassword, $dbname, $dbhost ) {		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB )			$this->db_connect();		return $this->__construct( $dbuser, $dbpassword, $dbname, $dbhost );	}	/**	 * Connects to the database server and selects a database	 *	 * PHP5 style constructor for compatibility with PHP5. Does	 * the actual setting up of the class properties and connection	 * to the database.	 *	 * @link http://core.trac.wordpress.org/ticket/3354	 * @since 2.0.8	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {		register_shutdown_function( array( &$this, '__destruct' ) );		if ( WP_DEBUG )			$this->show_errors();		if ( is_multisite() ) {			$this->charset = 'utf8';			if ( defined( 'DB_COLLATE' ) && DB_COLLATE )				$this->collate = DB_COLLATE;			else				$this->collate = 'utf8_general_ci';		} elseif ( defined( 'DB_COLLATE' ) ) {			$this->collate = DB_COLLATE;		}		if ( defined( 'DB_CHARSET' ) )			$this->charset = DB_CHARSET;		$this->dbuser = $dbuser;		$this->dbh = @mysql_connect( $dbhost, $dbuser, $dbpassword, true );		if ( !$this->dbh ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $dbhost ), 'db_connect_fail' );			return;		}		$this->ready = true;		if ( $this->has_cap( 'collation' ) && !empty( $this->charset ) ) {			if ( function_exists( 'mysql_set_charset' ) ) {				mysql_set_charset( $this->charset, $this->dbh );				$this->real_escape = true;			} else {				$query = $this->prepare( 'SET NAMES %s', $this->charset );				if ( ! empty( $this->collate ) )					$query .= $this->prepare( ' COLLATE %s', $this->collate );				$this->query( $query );			}		}		$this->select( $dbname, $this->dbh );	}	/**	 * PHP5 style destructor and will run when database object is destroyed.	 *	 * @see wpdb::__construct()	 * @since 2.0.8	 * @return bool true	 */	function __destruct() {		return true;	}	/**	 * Sets the table prefix for the WordPress tables.	 *	 * @since 2.5.0	 *	 * @param string $prefix Alphanumeric name for the new prefix.	 * @return string|WP_Error Old prefix or WP_Error on error	 */	function set_prefix( $prefix, $set_table_names = true ) {		if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )			return new WP_Error('invalid_db_prefix', /*WP_I18N_DB_BAD_PREFIX*/'Invalid database prefix'/*/WP_I18N_DB_BAD_PREFIX*/);		$old_prefix = is_multisite() ? '' : $prefix;		if ( isset( $this->base_prefix ) )			$old_prefix = $this->base_prefix;		$this->base_prefix = $prefix;		if ( $set_table_names ) {			foreach ( $this->tables( 'global' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			if ( is_multisite() && empty( $this->blogid ) )				return $old_prefix;			$this->prefix = $this->get_blog_prefix();			foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			foreach ( $this->tables( 'old' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;		}		return $old_prefix;	}	/**	 * Sets blog id.	 *	 * @since 3.0.0	 * @access public	 * @param int $blog_id	 * @param int $site_id Optional.	 * @return string previous blog id	 */	function set_blog_id( $blog_id, $site_id = 0 ) {		if ( ! empty( $site_id ) )			$this->siteid = $site_id;		$old_blog_id  = $this->blogid;		$this->blogid = $blog_id;		$this->prefix = $this->get_blog_prefix();		foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		foreach ( $this->tables( 'old' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		return $old_blog_id;	}	/**	 * Gets blog prefix.	 *	 * @uses is_multisite()	 * @since 3.0.0	 * @param int $blog_id Optional.	 * @return string Blog prefix.	 */	function get_blog_prefix( $blog_id = null ) {		if ( is_multisite() ) {			if ( null === $blog_id )				$blog_id = $this->blogid;			if ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )				return $this->base_prefix;			else				return $this->base_prefix . $blog_id . '_';		} else {			return $this->base_prefix;		}	}	/**	 * Returns an array of WordPress tables.	 *	 * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to	 * override the WordPress users and usersmeta tables that would otherwise	 * be determined by the prefix.	 *	 * The scope argument can take one of the following:	 *	 * 'all' - returns 'all' and 'global' tables. No old tables are returned.	 * 'blog' - returns the blog-level tables for the queried blog.	 * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.	 * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.	 * 'old' - returns tables which are deprecated.	 *	 * @since 3.0.0	 * @uses wpdb::$tables	 * @uses wpdb::$old_tables	 * @uses wpdb::$global_tables	 * @uses wpdb::$ms_global_tables	 * @uses is_multisite()	 *	 * @param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.	 * @param bool $prefix Optional. Whether to include table prefixes. Default true. If blog	 * 	prefix is requested, then the custom users and usermeta tables will be mapped.	 * @param int $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.	 * @return array Table names. When a prefix is requested, the key is the unprefixed table name.	 */	function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {		switch ( $scope ) {			case 'all' :				$tables = array_merge( $this->global_tables, $this->tables );				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'blog' :				$tables = $this->tables;				break;			case 'global' :				$tables = $this->global_tables;				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'ms_global' :				$tables = $this->ms_global_tables;				break;			case 'old' :				$tables = $this->old_tables;				break;			default :				return array();				break;		}		if ( $prefix ) {			if ( ! $blog_id )				$blog_id = $this->blogid;			$blog_prefix = $this->get_blog_prefix( $blog_id );			$base_prefix = $this->base_prefix;			$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );			foreach ( $tables as $k => $table ) {				if ( in_array( $table, $global_tables ) )					$tables[ $table ] = $base_prefix . $table;				else					$tables[ $table ] = $blog_prefix . $table;				unset( $tables[ $k ] );			}			if ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )				$tables['users'] = CUSTOM_USER_TABLE;			if ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )				$tables['usermeta'] = CUSTOM_USER_META_TABLE;		}		return $tables;	}	/**	 * Selects a database using the current database connection.	 *	 * The database name will be changed based on the current database	 * connection. On failure, the execution will bail and display an DB error.	 *	 * @since 0.71	 *	 * @param string $db MySQL database name	 * @param resource $dbh Optional link identifier.	 * @return null Always null.	 */	function select( $db, $dbh = null) {		if ( is_null($dbh) ) 			$dbh = $this->dbh;		if ( !@mysql_select_db( $db, $dbh ) ) {			$this->ready = false;			$this->bail( sprintf( /*WP_I18N_DB_SELECT_DB*/'<h1>Can&#8217;t select database</h1><p>We were able to connect to the database server (which means your username and password is okay) but not able to select the <code>%1$s</code> database.</p><ul><li>Are you sure it exists?</li><li>Does the user <code>%2$s</code> have permission to use the <code>%1$s</code> database?</li><li>On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?</li></ul><p>If you don\'t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href="http://wordpress.org/support/">WordPress Support Forums</a>.</p>'/*/WP_I18N_DB_SELECT_DB*/, $db, $this->dbuser ), 'db_select_fail' );			return;		}	}	/**	 * Weak escape, using addslashes()	 *	 * @see addslashes()	 * @since 2.8.0	 * @access private	 *	 * @param string $string	 * @return string	 */	function _weak_escape( $string ) {		return addslashes( $string );	}	/**	 * Real escape, using mysql_real_escape_string() or addslashes()	 *	 * @see mysql_real_escape_string()	 * @see addslashes()	 * @since 2.8	 * @access private	 *	 * @param  string $string to escape	 * @return string escaped	 */	function _real_escape( $string ) {		if ( $this->dbh && $this->real_escape )			return mysql_real_escape_string( $string, $this->dbh );		else			return addslashes( $string );	}	/**	 * Escape data. Works on arrays.	 *     * @uses wpdb::_escape()     * @uses wpdb::_real_escape()	 * @since  2.8	 * @access private	 *	 * @param  string|array $data	 * @return string|array escaped	 */	function _escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array($v) )					$data[$k] = $this->_escape( $v );				else					$data[$k] = $this->_real_escape( $v );			}		} else {			$data = $this->_real_escape( $data );		}		return $data;	}	/**	 * Escapes content for insertion into the database using addslashes(), for security.	 *	 * Works on arrays.	 *	 * @since 0.71	 * @param string|array $data to escape	 * @return string|array escaped as query safe string	 */	function escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array( $v ) )					$data[$k] = $this->escape( $v );				else					$data[$k] = $this->_weak_escape( $v );			}		} else {			$data = $this->_weak_escape( $data );		}		return $data;	}	/**	 * Escapes content by reference for insertion into the database, for security	 *	 * @uses wpdb::_real_escape()	 * @since 2.3.0	 * @param string $string to escape	 * @return void	 */	function escape_by_ref( &$string ) {		$string = $this->_real_escape( $string );	}	/**	 * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.	 *	 * The following directives can be used in the query format string:	 *   %d (decimal number)	 *   %s (string)	 *   %% (literal percentage sign - no argument needed)	 *	 * Both %d and %s are to be left unquoted in the query string and they need an argument passed for them.	 * Literals (%) as parts of the query must be properly written as %%.	 *	 * This function only supports a small subset of the sprintf syntax; it only supports %d (decimal number), %s (string).	 * Does not support sign, padding, alignment, width or precision specifiers.	 * Does not support argument numbering/swapping.	 *	 * May be called like {@link http://php.net/sprintf sprintf()} or like {@link http://php.net/vsprintf vsprintf()}.	 *	 * Both %d and %s should be left unquoted in the query string.	 *	 * <code>	 * wpdb::prepare( "SELECT * FROM `table` WHERE `column` = %s AND `field` = %d", 'foo', 1337 )	 * wpdb::prepare( "SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s", 'foo' );	 * </code>	 *	 * @link http://php.net/sprintf Description of syntax.	 * @since 2.3.0	 *	 * @param string $query Query statement with sprintf()-like placeholders	 * @param array|mixed $args The array of variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/vsprintf vsprintf()}, or the first variable to substitute into the query's placeholders if	 * 	being called like {@link http://php.net/sprintf sprintf()}.	 * @param mixed $args,... further variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/sprintf sprintf()}.	 * @return null|false|string Sanitized query string, null if there is no query, false if there is an error and string	 * 	if there was something to prepare	 */	function prepare( $query = null ) { // ( $query, *$args )		if ( is_null( $query ) )			return;		$args = func_get_args();		array_shift( $args );		// If args were passed as an array (as in vsprintf), move them up		if ( isset( $args[0] ) && is_array($args[0]) )			$args = $args[0];		$query = str_replace( "'%s'", '%s', $query ); // in case someone mistakenly already singlequoted it		$query = str_replace( '"%s"', '%s', $query ); // doublequote unquoting		$query = preg_replace( '|(?<!%)%s|', "'%s'", $query ); // quote the strings, avoiding escaped strings like %%s		array_walk( $args, array( &$this, 'escape_by_ref' ) );		return @vsprintf( $query, $args );	}	/**	 * Print SQL/DB error.	 *	 * @since 0.71	 * @global array $EZSQL_ERROR Stores error information of query and error string	 *	 * @param string $str The error to display	 * @return bool False if the showing of errors is disabled.	 */	function print_error( $str = '' ) {		global $EZSQL_ERROR;		if ( !$str )			$str = mysql_error( $this->dbh );		$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );		if ( $this->suppress_errors )			return false;		if ( $caller = $this->get_caller() )			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR_FULL*/'WordPress database error %1$s for query %2$s made by %3$s'/*/WP_I18N_DB_QUERY_ERROR_FULL*/, $str, $this->last_query, $caller );		else			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR*/'WordPress database error %1$s for query %2$s'/*/WP_I18N_DB_QUERY_ERROR*/, $str, $this->last_query );		if ( function_exists( 'error_log' )			&& ( $log_file = @ini_get( 'error_log' ) )			&& ( 'syslog' == $log_file || @is_writable( $log_file ) )			)			@error_log( $error_str );		// Are we showing errors?		if ( ! $this->show_errors )			return false;		// If there is an error then take note of it		if ( is_multisite() ) {			$msg = "WordPress database error: [$str]\n{$this->last_query}\n";			if ( defined( 'ERRORLOGFILE' ) )				error_log( $msg, 3, ERRORLOGFILE );			if ( defined( 'DIEONDBERROR' ) )				wp_die( $msg );		} else {			$str   = htmlspecialchars( $str, ENT_QUOTES );			$query = htmlspecialchars( $this->last_query, ENT_QUOTES );			print "<div id='error'>			<p class='wpdberror'><strong>WordPress database error:</strong> [$str]<br />			<code>$query</code></p>			</div>";		}	}	/**	 * Enables showing of database errors.	 *	 * This function should be used only to enable showing of errors.	 * wpdb::hide_errors() should be used instead for hiding of errors. However,	 * this function can be used to enable and disable showing of database	 * errors.	 *	 * @since 0.71	 * @see wpdb::hide_errors()	 *	 * @param bool $show Whether to show or hide errors	 * @return bool Old value for showing errors.	 */	function show_errors( $show = true ) {		$errors = $this->show_errors;		$this->show_errors = $show;		return $errors;	}	/**	 * Disables showing of database errors.	 *	 * By default database errors are not shown.	 *	 * @since 0.71	 * @see wpdb::show_errors()	 *	 * @return bool Whether showing of errors was active	 */	function hide_errors() {		$show = $this->show_errors;		$this->show_errors = false;		return $show;	}	/**	 * Whether to suppress database errors.	 *	 * By default database errors are suppressed, with a simple	 * call to this function they can be enabled.	 *	 * @since 2.5	 * @see wpdb::hide_errors()	 * @param bool $suppress Optional. New value. Defaults to true.	 * @return bool Old value	 */	function suppress_errors( $suppress = true ) {		$errors = $this->suppress_errors;		$this->suppress_errors = (bool) $suppress;		return $errors;	}	/**	 * Kill cached query results.	 *	 * @since 0.71	 * @return void	 */	function flush() {		$this->last_result = array();		$this->col_info    = null;		$this->last_query  = null;	}	function db_connect( $query = "SELECT" ) {		global $db_list, $global_db_list;		if ( ! is_array( $db_list ) )			return true;		if ( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {			$action = 'global';			$details = $global_db_list[ mt_rand( 0, count( $global_db_list ) -1 ) ];			$this->db_global = $details;		} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {			$action = 'write';			$details = $db_list[ 'write' ][ mt_rand( 0, count( $db_list[ 'write' ] ) -1 ) ];			$this->db_write = $details;		} else {			$action = '';			$details = $db_list[ 'read' ][ mt_rand( 0, count( $db_list[ 'read' ] ) -1 ) ];			$this->db_read = $details;		}		$dbhname = "dbh" . $action;		$this->$dbhname = @mysql_connect( $details[ 'db_host' ], $details[ 'db_user' ], $details[ 'db_password' ] );		if (!$this->$dbhname ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $details['db_host'] ), 'db_connect_fail' );		}		$this->select( $details[ 'db_name' ], $this->$dbhname );	}	/**	 * Perform a MySQL database query, using current database connection.	 *	 * More information can be found on the codex page.	 *	 * @since 0.71	 *	 * @param string $query Database query	 * @return int|false Number of rows affected/selected or false on error	 */	function query( $query ) {		if ( ! $this->ready )			return false;		// some queries are made before the plugins have been loaded, and thus cannot be filtered with this method		if ( function_exists( 'apply_filters' ) )			$query = apply_filters( 'query', $query );		$return_val = 0;		$this->flush();		// Log how the function was called		$this->func_call = "\$db->query(\"$query\")";		// Keep track of the last query for debug..		$this->last_query = $query;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->timer_start();		// use $this->dbh for read ops, and $this->dbhwrite for write ops		// use $this->dbhglobal for gloal table ops		unset( $dbh );		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB ) {			if( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {				if( false == isset( $this->dbhglobal ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhglobal;				$this->last_db_used = "global";			} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {				if( false == isset( $this->dbhwrite ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhwrite;				$this->last_db_used = "write";			} else {				$dbh =& $this->dbh;				$this->last_db_used = "read";			}		} else {			$dbh =& $this->dbh;			$this->last_db_used = "other/read";		}		$this->result = @mysql_query( $query, $dbh );		$this->num_queries++;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );		// If there is an error then take note of it..		if ( $this->last_error = mysql_error( $dbh ) ) {			$this->print_error();			return false;		}		if ( preg_match( "/^\\s*(insert|delete|update|replace|alter) /i", $query ) ) {			$this->rows_affected = mysql_affected_rows( $dbh );			// Take note of the insert_id			if ( preg_match( "/^\\s*(insert|replace) /i", $query ) ) {				$this->insert_id = mysql_insert_id($dbh);			}			// Return number of rows affected			$return_val = $this->rows_affected;		} else {			$i = 0;			while ( $i < @mysql_num_fields( $this->result ) ) {				$this->col_info[$i] = @mysql_fetch_field( $this->result );				$i++;			}			$num_rows = 0;			while ( $row = @mysql_fetch_object( $this->result ) ) {				$this->last_result[$num_rows] = $row;				$num_rows++;			}			@mysql_free_result( $this->result );			// Log number of rows the query returned			// and return number of rows selected			$this->num_rows = $num_rows;			$return_val     = $num_rows;		}		return $return_val;	}	/**	 * Insert a row into a table.	 *	 * <code>	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows inserted, or false on error.	 */	function insert( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );	}	/**	 * Replace a row into a table.	 *	 * <code>	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function replace( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );	}	/**	 * Helper function for insert and replace.	 *	 * Runs an insert or replace query based on $type argument.	 *	 * @access private	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs).  Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {		if ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) )			return false;		$formats = $format = (array) $format;		$fields = array_keys( $data );		$formatted_fields = array();		foreach ( $fields as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$formatted_fields[] = $form;		}		$sql = "{$type} INTO `$table` (`" . implode( '`,`', $fields ) . "`) VALUES ('" . implode( "','", $formatted_fields ) . "')";		return $this->query( $this->prepare( $sql, $data ) );	}	/**	 * Update a row in the table	 *	 * <code>	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to update (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be "raw".	 * @param array|string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @param array|string $format_where Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where.  A format is one of '%d', '%s' (decimal number, string).  If omitted, all values in $where will be treated as strings.	 * @return int|false The number of rows updated, or false on error.	 */	function update( $table, $data, $where, $format = null, $where_format = null ) {		if ( ! is_array( $data ) || ! is_array( $where ) )			return false;		$formats = $format = (array) $format;		$bits = $wheres = array();		foreach ( (array) array_keys( $data ) as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset($this->field_types[$field]) )				$form = $this->field_types[$field];			else				$form = '%s';			$bits[] = "`$field` = {$form}";		}		$where_formats = $where_format = (array) $where_format;		foreach ( (array) array_keys( $where ) as $field ) {			if ( !empty( $where_format ) )				$form = ( $form = array_shift( $where_formats ) ) ? $form : $where_format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$wheres[] = "`$field` = {$form}";		}		$sql = "UPDATE `$table` SET " . implode( ', ', $bits ) . ' WHERE ' . implode( ' AND ', $wheres );		return $this->query( $this->prepare( $sql, array_merge( array_values( $data ), array_values( $where ) ) ) );	}	/**	 * Retrieve one variable from the database.	 *	 * Executes a SQL query and returns the value from the SQL result.	 * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.	 * If $query is null, this function returns the value in the specified column and row from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.	 * @param int $x Optional. Column of value to return.  Indexed from 0.	 * @param int $y Optional. Row of value to return.  Indexed from 0.	 * @return string|null Database query result (as string), or null on failure	 */	function get_var( $query = null, $x = 0, $y = 0 ) {		$this->func_call = "\$db->get_var(\"$query\", $x, $y)";		if ( $query )			$this->query( $query );		// Extract var out of cached results based x,y vals		if ( !empty( $this->last_result[$y] ) ) {			$values = array_values( get_object_vars( $this->last_result[$y] ) );		}		// If there is a value return it else return null		return ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;	}	/**	 * Retrieve one row from the database.	 *	 * Executes a SQL query and returns the row from the SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query SQL query.	 * @param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...),	 * 	a numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.	 * @param int $y Optional. Row to return. Indexed from 0.	 * @return mixed Database query result in format specifed by $output or null on failure	 */	function get_row( $query = null, $output = OBJECT, $y = 0 ) {		$this->func_call = "\$db->get_row(\"$query\",$output,$y)";		if ( $query )			$this->query( $query );		else			return null;		if ( !isset( $this->last_result[$y] ) )			return null;		if ( $output == OBJECT ) {			return $this->last_result[$y] ? $this->last_result[$y] : null;		} elseif ( $output == ARRAY_A ) {			return $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;		} elseif ( $output == ARRAY_N ) {			return $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;		} else {			$this->print_error(/*WP_I18N_DB_GETROW_ERROR*/" \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N"/*/WP_I18N_DB_GETROW_ERROR*/);		}	}	/**	 * Retrieve one column from the database.	 *	 * Executes a SQL query and returns the column from the SQL result.	 * If the SQL result contains more than one column, this function returns the column specified.	 * If $query is null, this function returns the specified column from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to previous query.	 * @param int $x Optional. Column to return. Indexed from 0.	 * @return array Database query result. Array indexed from 0 by SQL result row number.	 */	function get_col( $query = null , $x = 0 ) {		if ( $query )			$this->query( $query );		$new_array = array();		// Extract the column values		for ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {			$new_array[$i] = $this->get_var( null, $x, $i );		}		return $new_array;	}	/**	 * Retrieve an entire SQL result set from the database (i.e., many rows)	 *	 * Executes a SQL query and returns the entire SQL result.	 *	 * @since 0.71	 *	 * @param string $query SQL query.	 * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number.	 * 	Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.	 * 	With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.  Duplicate keys are discarded.	 * @return mixed Database query results	 */	function get_results( $query = null, $output = OBJECT ) {		$this->func_call = "\$db->get_results(\"$query\", $output)";		if ( $query )			$this->query( $query );		else			return null;		$new_array = array();		if ( $output == OBJECT ) {			// Return an integer-keyed array of row objects			return $this->last_result;		} elseif ( $output == OBJECT_K ) {			// Return an array of row objects with keys from column 1			// (Duplicates are discarded)			foreach ( $this->last_result as $row ) {				$key = array_shift( get_object_vars( $row ) );				if ( ! isset( $new_array[ $key ] ) )					$new_array[ $key ] = $row;			}			return $new_array;		} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {			// Return an integer-keyed array of...			if ( $this->last_result ) {				foreach( (array) $this->last_result as $row ) {					if ( $output == ARRAY_N ) {						// ...integer-keyed row arrays						$new_array[] = array_values( get_object_vars( $row ) );					} else {						// ...column name-keyed row arrays						$new_array[] = get_object_vars( $row );					}				}			}			return $new_array;		}		return null;	}	/**	 * Retrieve column metadata from the last query.	 *	 * @since 0.71	 *	 * @param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill	 * @param int $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type	 * @return mixed Column Results	 */	function get_col_info( $info_type = 'name', $col_offset = -1 ) {		if ( $this->col_info ) {			if ( $col_offset == -1 ) {				$i = 0;				$new_array = array();				foreach( (array) $this->col_info as $col ) {					$new_array[$i] = $col->{$info_type};					$i++;				}				return $new_array;			} else {				return $this->col_info[$col_offset]->{$info_type};			}		}	}	/**	 * Starts the timer, for debugging purposes.	 *	 * @since 1.5.0	 *	 * @return true	 */	function timer_start() {		$mtime            = explode( ' ', microtime() );		$this->time_start = $mtime[1] + $mtime[0];		return true;	}	/**	 * Stops the debugging timer.	 *	 * @since 1.5.0	 *	 * @return int Total time spent on the query, in milliseconds	 */	function timer_stop() {		$mtime      = explode( ' ', microtime() );		$time_end   = $mtime[1] + $mtime[0];		$time_total = $time_end - $this->time_start;		return $time_total;	}	/**	 * Wraps errors in a nice header and footer and dies.	 *	 * Will not die if wpdb::$show_errors is true	 *	 * @since 1.5.0	 *	 * @param string $message The Error message	 * @param string $error_code Optional. A Computer readable string to identify the error.	 * @return false|void	 */	function bail( $message, $error_code = '500' ) {		if ( !$this->show_errors ) {			if ( class_exists( 'WP_Error' ) )				$this->error = new WP_Error($error_code, $message);			else				$this->error = $message;			return false;		}		wp_die($message);	}	/**	 * Whether MySQL database is at least the required minimum version.	 *	 * @since 2.5.0	 * @uses $wp_version	 * @uses $required_mysql_version	 *	 * @return WP_Error	 */	function check_database_version() {		global $wp_version, $required_mysql_version;		// Make sure the server has the required MySQL version		if ( version_compare($this->db_version(), $required_mysql_version, '<') )			return new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));	}	/**	 * Whether the database supports collation.	 *	 * Called when WordPress is generating the table scheme.	 *	 * @since 2.5.0	 *	 * @return bool True if collation is supported, false if version does not	 */	function supports_collation() {		return $this->has_cap( 'collation' );	}	/**	 * Determine if a database supports a particular feature	 *	 * @since 2.7	 * @see   wpdb::db_version()	 *	 * @param string $db_cap the feature	 * @return bool	 */	function has_cap( $db_cap ) {		$version = $this->db_version();		switch ( strtolower( $db_cap ) ) {			case 'collation' :    // @since 2.5.0			case 'group_concat' : // @since 2.7			case 'subqueries' :   // @since 2.7				return version_compare( $version, '4.1', '>=' );		};		return false;	}	/**	 * Retrieve the name of the function that called wpdb.	 *	 * Searches up the list of functions until it reaches	 * the one that would most logically had called this method.	 *	 * @since 2.5.0	 *	 * @return string The name of the calling function	 */	function get_caller() {		$trace  = array_reverse( debug_backtrace() );		$caller = array();		foreach ( $trace as $call ) {			if ( isset( $call['class'] ) && __CLASS__ == $call['class'] )				continue; // Filter out wpdb calls.			$caller[] = isset( $call['class'] ) ? "{$call['class']}->{$call['function']}" : $call['function'];		}		return join( ', ', $caller );	}	/**	 * The database version number.	 *	 * @return false|string false on failure, version number on success	 */	function db_version() {		return preg_replace( '/[^0-9.].*/', '', mysql_get_server_info( $this->dbh ) );	}}if ( ! isset( $wpdb ) ) {	/**	 * WordPress Database Object, if it isn't set already in wp-content/db.php	 * @global object $wpdb Creates a new wpdb object based on wp-config.php Constants for the database	 * @since 0.71	 */	$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );}?>
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
<?php/** * Options Management Administration Panel. * * If accessed directly in a browser this page shows a list of all saved options * along with editable fields for their values. Serialized data is not supported * and there is no way to remove options via this page. It is not linked to from * anywhere else in the admin. * * This file is also the target of the forms in core and custom options pages * that use the Settings API. In this case it saves the new option values * and returns the user to their page of origin. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Settings');$this_file = 'options.php';$parent_file = 'options-general.php';wp_reset_vars(array('action', 'option_page'));if ( empty($option_page) ) // This is for back compat and will eventually be removed.	$option_page = 'options';if ( !current_user_can('manage_options') )	wp_die(__('Cheatin&#8217; uh?'));// Handle admin email change requestsif ( is_multisite() ) {	if ( ! empty($_GET[ 'adminhash' ] ) ) {		$new_admin_details = get_option( 'adminhash' );		$redirect = 'options-general.php?updated=false';		if ( is_array( $new_admin_details ) && $new_admin_details[ 'hash' ] == $_GET[ 'adminhash' ] && !empty($new_admin_details[ 'newemail' ]) ) {			update_option( 'admin_email', $new_admin_details[ 'newemail' ] );			delete_option( 'adminhash' );			delete_option( 'new_admin_email' );			$redirect = 'options-general.php?updated=true';		}		wp_redirect( admin_url( $redirect ) );		exit;	} elseif ( ! empty( $_GET['dismiss'] ) && 'new_admin_email' == $_GET['dismiss'] ) {		delete_option( 'adminhash' );		delete_option( 'new_admin_email' );		wp_redirect( admin_url( 'options-general.php?updated=true' ) );		exit;	}}if ( is_multisite() && !is_super_admin() && 'update' != $action )	wp_die(__('Cheatin&#8217; uh?'));$whitelist_options = array(	'general' => array( 'blogname', 'blogdescription', 'gmt_offset', 'date_format', 'time_format', 'start_of_week', 'timezone_string' ),	'discussion' => array( 'default_pingback_flag', 'default_ping_status', 'default_comment_status', 'comments_notify', 'moderation_notify', 'comment_moderation', 'require_name_email', 'comment_whitelist', 'comment_max_links', 'moderation_keys', 'blacklist_keys', 'show_avatars', 'avatar_rating', 'avatar_default', 'close_comments_for_old_posts', 'close_comments_days_old', 'thread_comments', 'thread_comments_depth', 'page_comments', 'comments_per_page', 'default_comments_page', 'comment_order', 'comment_registration' ),	'media' => array( 'thumbnail_size_w', 'thumbnail_size_h', 'thumbnail_crop', 'medium_size_w', 'medium_size_h', 'large_size_w', 'large_size_h', 'image_default_size', 'image_default_align', 'image_default_link_type', 'embed_autourls', 'embed_size_w', 'embed_size_h' ),	'privacy' => array( 'blog_public' ),	'reading' => array( 'posts_per_page', 'posts_per_rss', 'rss_use_excerpt', 'blog_charset', 'show_on_front', 'page_on_front', 'page_for_posts' ),	'writing' => array( 'default_post_edit_rows', 'use_smilies', 'default_category', 'default_email_category', 'use_balanceTags', 'default_link_category', 'enable_app', 'enable_xmlrpc' ),	'options' => array( '' ) );$mail_options = array('mailserver_url', 'mailserver_port', 'mailserver_login', 'mailserver_pass');$uploads_options = array('uploads_use_yearmonth_folders', 'upload_path', 'upload_url_path');if ( !is_multisite() ) {	if ( !defined( 'WP_SITEURL' ) )		$whitelist_options['general'][] = 'siteurl';	if ( !defined( 'WP_HOME' ) )		$whitelist_options['general'][] = 'home';	$whitelist_options['general'][] = 'admin_email';	$whitelist_options['general'][] = 'users_can_register';	$whitelist_options['general'][] = 'default_role';	$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options['writing'][] = 'ping_sites';	$whitelist_options['media'] = array_merge($whitelist_options['media'], $uploads_options);} else {	$whitelist_options['general'][] = 'new_admin_email';	$whitelist_options['general'][] = 'WPLANG';	$whitelist_options['general'][] = 'language';	if ( apply_filters( 'enable_post_by_email_configuration', true ) )		$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options[ 'misc' ] = array();}$whitelist_options = apply_filters( 'whitelist_options', $whitelist_options );/* * If $_GET['action'] == 'update' we are saving settings sent from a settings page */if ( 'update' == $action ) {	if ( 'options' == $option_page && !isset( $_POST['option_page'] ) ) { // This is for back compat and will eventually be removed.		$unregistered = true;		check_admin_referer( 'update-options' );	} else {		$unregistered = false;		check_admin_referer( $option_page . '-options' );	}	if ( !isset( $whitelist_options[ $option_page ] ) )		wp_die( __( 'Error: options page not found.' ) );	if ( 'options' == $option_page ) {		if ( is_multisite() && ! is_super_admin() )			wp_die( __( 'You do not have sufficient permissions to modify unregistered settings for this site.' ) );		$options = explode( ',', stripslashes( $_POST[ 'page_options' ] ) );	} else {		$options = $whitelist_options[ $option_page ];	}	// Handle custom date/time formats	if ( 'general' == $option_page ) {		if ( !empty($_POST['date_format']) && isset($_POST['date_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['date_format'] ) )			$_POST['date_format'] = $_POST['date_format_custom'];		if ( !empty($_POST['time_format']) && isset($_POST['time_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['time_format'] ) )			$_POST['time_format'] = $_POST['time_format_custom'];		// Map UTC+- timezones to gmt_offsets and set timezone_string to empty.		if ( !empty($_POST['timezone_string']) && preg_match('/^UTC[+-]/', $_POST['timezone_string']) ) {			$_POST['gmt_offset'] = $_POST['timezone_string'];			$_POST['gmt_offset'] = preg_replace('/UTC\+?/', '', $_POST['gmt_offset']);			$_POST['timezone_string'] = '';		}	}	if ( $options ) {		foreach ( $options as $option ) {			if ( $unregistered )				_deprecated_argument( 'options.php', '2.7', sprintf( __( 'The <code>%1$s</code> setting is unregistered. Unregistered settings are deprecated. See http://codex.wordpress.org/Settings_API' ), $option, $option_page ) );			$option = trim($option);			$value = null;			if ( isset($_POST[$option]) )				$value = $_POST[$option];			if ( !is_array($value) )				$value = trim($value);			$value = stripslashes_deep($value);			update_option($option, $value);		}	}	/**	 *  Handle settings errors and return to options page	 */	// If no settings errors were registered add a general 'updated' message.	if ( !count( get_settings_errors() ) )		add_settings_error('general', 'settings_updated', __('Settings saved.'), 'updated');	set_transient('settings_errors', get_settings_errors(), 30);	/**	 * Redirect back to the settings page that was submitted	 */	$goback = add_query_arg( 'updated', 'true',  wp_get_referer() );	wp_redirect( $goback );	exit;}include('./admin-header.php'); ?><div class="wrap"><?php screen_icon(); ?>  <h2><?php esc_html_e('All Settings'); ?></h2>  <form name="form" action="options.php" method="post" id="all-options">  <?php wp_nonce_field('options-options') ?>  <input type="hidden" name="action" value="update" />  <input type='hidden' name='option_page' value='options' />  <table class="form-table"><?php$options = $wpdb->get_results( "SELECT * FROM $wpdb->options ORDER BY option_name" );foreach ( (array) $options as $option ) :	$disabled = false;	if ( $option->option_name == '' )		continue;	if ( is_serialized( $option->option_value ) ) {		if ( is_serialized_string( $option->option_value ) ) {			// this is a serialized string, so we should display it			$value = maybe_unserialize( $option->option_value );			$options_to_update[] = $option->option_name;			$class = 'all-options';		} else {			$value = 'SERIALIZED DATA';			$disabled = true;			$class = 'all-options disabled';		}	} else {		$value = $option->option_value;		$options_to_update[] = $option->option_name;		$class = 'all-options';	}	$name = esc_attr( $option->option_name );	echo "<tr>	<th scope='row'><label for='$name'>" . esc_html( $option->option_name ) . "</label></th><td>";	if ( strpos( $value, "\n" ) !== false )		echo "<textarea class='$class' name='$name' id='$name' cols='30' rows='5'>" . wp_htmledit_pre( $value ) . "</textarea>";	else		echo "<input class='regular-text $class' type='text' name='$name' id='$name' value='" . esc_attr( $value ) . "'" . disabled( $disabled, true, false ) . " />";	echo "</td></tr>";endforeach;?>  </table><p class="submit"><input type="hidden" name="page_options" value="<?php echo esc_attr( implode( ',', $options_to_update ) ); ?>" /><input type="submit" name="Update" value="<?php esc_attr_e( 'Save Changes' ); ?>" class="button-primary" /></p>  </form></div><?phpinclude('./admin-footer.php');?>
<?php/** * WordPress Feed API * * Many of the functions used in here belong in The Loop, or The Loop for the * Feeds. * * @package WordPress * @subpackage Feed *//** * RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.5.1 * @uses apply_filters() Calls 'get_bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. * @return string */function get_bloginfo_rss($show = '') {	$info = strip_tags(get_bloginfo($show));	return apply_filters('get_bloginfo_rss', convert_chars($info), $show);}/** * Display RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. */function bloginfo_rss($show = '') {	echo apply_filters('bloginfo_rss', get_bloginfo_rss($show), $show);}/** * Retrieve the default feed. * * The default feed is 'rss2', unless a plugin changes it through the * 'default_feed' filter. * * @package WordPress * @subpackage Feed * @since 2.5 * @uses apply_filters() Calls 'default_feed' hook on the default feed string. * * @return string Default feed, or for example 'rss2', 'atom', etc. */function get_default_feed() {	return apply_filters('default_feed', 'rss2');}/** * Retrieve the blog title for the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'get_wp_title_rss' hook on title. * @uses wp_title() See function for $sep parameter usage. * * @param string $sep Optional.How to separate the title. See wp_title() for more info. * @return string Error message on failure or blog title on success. */function get_wp_title_rss($sep = '&#187;') {	$title = wp_title($sep, false);	if ( is_wp_error( $title ) )		return $title->get_error_message();	$title = apply_filters('get_wp_title_rss', $title);	return $title;}/** * Display the blog title for display of the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'wp_title_rss' on the blog title. * @see wp_title() $sep parameter usage. * * @param string $sep Optional. */function wp_title_rss($sep = '&#187;') {	echo apply_filters('wp_title_rss', get_wp_title_rss($sep));}/** * Retrieve the current post title for the feed. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'the_title_rss' on the post title. * * @return string Current post title. */function get_the_title_rss() {	$title = get_the_title();	$title = apply_filters('the_title_rss', $title);	return $title;}/** * Display the post title in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses get_the_title_rss() Used to retrieve current post title. */function the_title_rss() {	echo get_the_title_rss();}/** * Retrieve the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function get_the_content_feed($feed_type = null) {	if ( !$feed_type )		$feed_type = get_default_feed();	$content = apply_filters('the_content', get_the_content());	$content = str_replace(']]>', ']]&gt;', $content);	return apply_filters('the_content_feed', $content, $feed_type);}/** * Display the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function the_content_feed($feed_type = null) {	echo get_the_content_feed();}/** * Display the post excerpt for the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_excerpt_rss' hook on the excerpt. */function the_excerpt_rss() {	$output = get_the_excerpt();	echo apply_filters('the_excerpt_rss', $output);}/** * Display the permalink to the post for use in feeds. * * @package WordPress * @subpackage Feed * @since 2.3.0 * @uses apply_filters() Call 'the_permalink_rss' on the post permalink */function the_permalink_rss() {	echo esc_url( apply_filters('the_permalink_rss', get_permalink() ));}/** * Outputs the link to the comments for the current post in an xml safe way * * @since 3.0.0 * @return none */function comments_link_feed() {	echo esc_url( get_comments_link() );}/** * Display the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. */function comment_guid($comment_id = null) {	echo esc_url( get_comment_guid($comment_id) );}/** * Retrieve the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. * @return bool|string false on failure or guid for comment on success. */function get_comment_guid($comment_id = null) {	$comment = get_comment($comment_id);	if ( !is_object($comment) )		return false;	return get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;}/** * Display the link to the comments. * * @since 1.5.0 */function comment_link() {	echo esc_url( get_comment_link() );}/** * Retrieve the current comment author for use in the feeds. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'comment_author_rss' hook on comment author. * @uses get_comment_author() * * @return string Comment Author */function get_comment_author_rss() {	return apply_filters('comment_author_rss', get_comment_author() );}/** * Display the current comment author in the feed. * * @package WordPress * @subpackage Feed * @since 1.0.0 */function comment_author_rss() {	echo get_comment_author_rss();}/** * Display the current comment content for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.0.0 * @uses apply_filters() Calls 'comment_text_rss' filter on comment content. * @uses get_comment_text() */function comment_text_rss() {	$comment_text = get_comment_text();	$comment_text = apply_filters('comment_text_rss', $comment_text);	echo $comment_text;}/** * Retrieve all of the post categories, formatted for use in feeds. * * All of the categories for the current post in the feed loop, will be * retrieved and have feed markup added, so that they can easily be added to the * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds. * * @package WordPress * @subpackage Feed * @since 2.1.0 * @uses apply_filters() * * @param string $type Optional, default is the type returned by get_default_feed(). * @return string All of the post categories for displaying in the feed. */function get_the_category_rss($type = null) {	if ( empty($type) )		$type = get_default_feed();	$categories = get_the_category();	$tags = get_the_tags();	$the_list = '';	$cat_names = array();	$filter = 'rss';	if ( 'atom' == $type )		$filter = 'raw';	if ( !empty($categories) ) foreach ( (array) $categories as $category ) {		$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);	}	if ( !empty($tags) ) foreach ( (array) $tags as $tag ) {		$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);	}	$cat_names = array_unique($cat_names);	foreach ( $cat_names as $cat_name ) {		if ( 'rdf' == $type )			$the_list .= "\t\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\n";		elseif ( 'atom' == $type )			$the_list .= sprintf( '<category scheme="%1$s" term="%2$s" />', esc_attr( apply_filters( 'get_bloginfo_rss', get_bloginfo( 'url' ) ) ), esc_attr( $cat_name ) );		else			$the_list .= "\t\t<category><![CDATA[" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . "]]></category>\n";	}	return apply_filters('the_category_rss', $the_list, $type);}/** * Display the post categories in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @see get_the_category_rss() For better explanation. * * @param string $type Optional, default is the type returned by get_default_feed(). */function the_category_rss($type = null) {	echo get_the_category_rss($type);}/** * Display the HTML type based on the blog setting. * * The two possible values are either 'xhtml' or 'html'. * * @package WordPress * @subpackage Feed * @since 2.2.0 */function html_type_rss() {	$type = get_bloginfo('html_type');	if (strpos($type, 'xhtml') !== false)		$type = 'xhtml';	else		$type = 'html';	echo $type;}/** * Display the rss enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of enclosure HTML tag(s) with a URI and other * attributes. * * @package WordPress * @subpackage Template * @since 1.5.0 * @uses apply_filters() Calls 'rss_enclosure' hook on rss enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function rss_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = explode("\n", $enc);				//only get the the first element eg, audio/mpeg from 'audio/mpeg mpga mp2 mp3'				$t = preg_split('/[ \t]/', trim($enclosure[2]) );				$type = $t[0];				echo apply_filters('rss_enclosure', '<enclosure url="' . trim(htmlspecialchars($enclosure[0])) . '" length="' . trim($enclosure[1]) . '" type="' . $type . '" />' . "\n");			}		}	}}/** * Display the atom enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of link HTML tag(s) with a URI and other attributes. * * @package WordPress * @subpackage Template * @since 2.2.0 * @uses apply_filters() Calls 'atom_enclosure' hook on atom enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function atom_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val ) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = split("\n", $enc);				echo apply_filters('atom_enclosure', '<link href="' . trim(htmlspecialchars($enclosure[0])) . '" rel="enclosure" length="' . trim($enclosure[1]) . '" type="' . trim($enclosure[2]) . '" />' . "\n");			}		}	}}/** * Determine the type of a string of data with the data formatted. * * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1. * * In the case of WordPress, text is defined as containing no markup, * xhtml is defined as "well formed", and html as tag soup (i.e., the rest). * * Container div tags are added to xhtml values, per section 3.1.1.3. * * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1 * * @package WordPress * @subpackage Feed * @since 2.5 * * @param string $data Input string * @return array array(type, value) */function prep_atom_text_construct($data) {	if (strpos($data, '<') === false && strpos($data, '&') === false) {		return array('text', $data);	}	$parser = xml_parser_create();	xml_parse($parser, '<div>' . $data . '</div>', true);	$code = xml_get_error_code($parser);	xml_parser_free($parser);	if (!$code) {		if (strpos($data, '<') === false) {			return array('text', $data);		} else {			$data = "<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>";			return array('xhtml', $data);		}	}	if (strpos($data, ']]>') == false) {		return array('html', "<![CDATA[$data]]>");	} else {		return array('html', htmlspecialchars($data));	}}/** * Display the link for the currently displayed feed in a XSS safe way. * * Generate a correct link for the atom:self element. * * @package WordPress * @subpackage Feed * @since 2.5 */function self_link() {	$host = @parse_url(home_url());	$host = $host['host'];	echo esc_url(		'http'		. ( (isset($_SERVER['https']) && $_SERVER['https'] == 'on') ? 's' : '' ) . '://'		. $host		. stripslashes($_SERVER['REQUEST_URI'])		);}/** * Return the content type for specified feed type. * * @package WordPress * @subpackage Feed * @since 2.8.0 */function feed_content_type( $type = '' ) {	if ( empty($type) )		$type = get_default_feed();	$types = array(		'rss'  => 'application/rss+xml',		'rss2' => 'application/rss+xml',		'rss-http'  => 'text/xml',		'atom' => 'application/atom+xml',		'rdf'  => 'application/rdf+xml'	);	$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';	return apply_filters( 'feed_content_type', $content_type, $type );}/** * Build SimplePie object based on RSS or Atom feed from URL. * * @since 2.8 * * @param string $url URL to retrieve feed * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success */function fetch_feed($url) {	require_once (ABSPATH . WPINC . '/class-feed.php');	$feed = new SimplePie();	$feed->set_feed_url($url);	$feed->set_cache_class('WP_Feed_Cache');	$feed->set_file_class('WP_SimplePie_File');	$feed->set_cache_duration(apply_filters('wp_feed_cache_transient_lifetime', 43200, $url));	do_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );	$feed->init();	$feed->handle_content_type();	if ( $feed->error() )		return new WP_Error('simplepie-error', $feed->error());	return $feed;}
<?php/** * WordPress Rewrite API * * @package WordPress * @subpackage Rewrite *//** * Add a straight rewrite rule. * * @see WP_Rewrite::add_rule() for long description. * @since 2.1.0 * * @param string $regex Regular Expression to match request against. * @param string $redirect Page to redirect to. * @param string $after Optional, default is 'bottom'. Where to add rule, can also be 'top'. */function add_rewrite_rule($regex, $redirect, $after = 'bottom') {	global $wp_rewrite;	$wp_rewrite->add_rule($regex, $redirect, $after);}/** * Add a new tag (like %postname%). * * Warning: you must call this on init or earlier, otherwise the query var * addition stuff won't work. * * @since 2.1.0 * * @param string $tagname * @param string $regex */function add_rewrite_tag($tagname, $regex) {	//validation	if ( strlen($tagname) < 3 || $tagname{0} != '%' || $tagname{strlen($tagname)-1} != '%' )		return;	$qv = trim($tagname, '%');	global $wp_rewrite, $wp;	$wp->add_query_var($qv);	$wp_rewrite->add_rewrite_tag($tagname, $regex, $qv . '=');}/** * Add permalink structure. * * @see WP_Rewrite::add_permastruct() * @since 3.0.0 * * @param string $name Name for permalink structure. * @param string $struct Permalink structure. * @param bool $with_front Prepend front base to permalink structure. */function add_permastruct( $name, $struct, $with_front = true, $ep_mask = EP_NONE ) {	global $wp_rewrite;	return $wp_rewrite->add_permastruct( $name, $struct, $with_front, $ep_mask );}/** * Add a new feed type like /atom1/. * * @since 2.1.0 * * @param string $feedname * @param callback $function Callback to run on feed display. * @return string Feed action name. */function add_feed($feedname, $function) {	global $wp_rewrite;	if ( ! in_array($feedname, $wp_rewrite->feeds) ) //override the file if it is		$wp_rewrite->feeds[] = $feedname;	$hook = 'do_feed_' . $feedname;	// Remove default function hook	remove_action($hook, $hook, 10, 1);	add_action($hook, $function, 10, 1);	return $hook;}/** * Remove rewrite rules and then recreate rewrite rules. * * @see WP_Rewrite::flush_rules() * @since 3.0.0 * * @param bool $hard Whether to update .htaccess (hard flush) or just update * 	rewrite_rules transient (soft flush). Default is true (hard). */function flush_rewrite_rules( $hard = true ) {	global $wp_rewrite;	$wp_rewrite->flush_rules( $hard );}//pseudo-places/** * Endpoint Mask for default, which is nothing. * * @since 2.1.0 */define('EP_NONE', 0);/** * Endpoint Mask for Permalink. * * @since 2.1.0 */define('EP_PERMALINK', 1);/** * Endpoint Mask for Attachment. * * @since 2.1.0 */define('EP_ATTACHMENT', 2);/** * Endpoint Mask for date. * * @since 2.1.0 */define('EP_DATE', 4);/** * Endpoint Mask for year * * @since 2.1.0 */define('EP_YEAR', 8);/** * Endpoint Mask for month. * * @since 2.1.0 */define('EP_MONTH', 16);/** * Endpoint Mask for day. * * @since 2.1.0 */define('EP_DAY', 32);/** * Endpoint Mask for root. * * @since 2.1.0 */define('EP_ROOT', 64);/** * Endpoint Mask for comments. * * @since 2.1.0 */define('EP_COMMENTS', 128);/** * Endpoint Mask for searches. * * @since 2.1.0 */define('EP_SEARCH', 256);/** * Endpoint Mask for categories. * * @since 2.1.0 */define('EP_CATEGORIES', 512);/** * Endpoint Mask for tags. * * @since 2.3.0 */define('EP_TAGS', 1024);/** * Endpoint Mask for authors. * * @since 2.1.0 */define('EP_AUTHORS', 2048);/** * Endpoint Mask for pages. * * @since 2.1.0 */define('EP_PAGES', 4096);/** * Endpoint Mask for everything. * * @since 2.1.0 */define('EP_ALL', 8191);/** * Add an endpoint, like /trackback/. * * The endpoints are added to the end of the request. So a request matching * "/2008/10/14/my_post/myep/", the endpoint will be "/myep/". * * Be sure to flush the rewrite rules (wp_rewrite->flush()) when your plugin gets * activated (register_activation_hook()) and deactivated (register_deactivation_hook()) * * @since 2.1.0 * @see WP_Rewrite::add_endpoint() Parameters and more description. * @uses $wp_rewrite * * @param unknown_type $name * @param unknown_type $places */function add_rewrite_endpoint($name, $places) {	global $wp_rewrite;	$wp_rewrite->add_endpoint($name, $places);}/** * Filter the URL base for taxonomies. * * To remove any manually prepended /index.php/. * * @access private * @since 2.6.0 * * @param string $base The taxonomy base that we're going to filter * @return string */function _wp_filter_taxonomy_base( $base ) {	if ( !empty( $base ) ) {		$base = preg_replace( '|^/index\.php/|', '', $base );		$base = trim( $base, '/' );	}	return $base;}/** * Examine a url and try to determine the post ID it represents. * * Checks are supposedly from the hosted site blog. * * @since 1.0.0 * * @param string $url Permalink to check. * @return int Post ID, or 0 on failure. */function url_to_postid($url) {	global $wp_rewrite;	$url = apply_filters('url_to_postid', $url);	// First, check to see if there is a 'p=N' or 'page_id=N' to match against	if ( preg_match('#[?&](p|page_id|attachment_id)=(\d+)#', $url, $values) )	{		$id = absint($values[2]);		if ( $id )			return $id;	}	// Check to see if we are using rewrite rules	$rewrite = $wp_rewrite->wp_rewrite_rules();	// Not using rewrite rules, and 'p=N' and 'page_id=N' methods failed, so we're out of options	if ( empty($rewrite) )		return 0;	// $url cleanup by Mark Jaquith	// This fixes things like #anchors, ?query=strings, missing 'www.',	// added 'www.', or added 'index.php/' that will mess up our WP_Query	// and return a false negative	// Get rid of the #anchor	$url_split = explode('#', $url);	$url = $url_split[0];	// Get rid of URL ?query=string	$url_split = explode('?', $url);	$url = $url_split[0];	// Add 'www.' if it is absent and should be there	if ( false !== strpos(home_url(), '://www.') && false === strpos($url, '://www.') )		$url = str_replace('://', '://www.', $url);	// Strip 'www.' if it is present and shouldn't be	if ( false === strpos(home_url(), '://www.') )		$url = str_replace('://www.', '://', $url);	// Strip 'index.php/' if we're not using path info permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$url = str_replace('index.php/', '', $url);	if ( false !== strpos($url, home_url()) ) {		// Chop off http://domain.com		$url = str_replace(home_url(), '', $url);	} else {		// Chop off /path/to/blog		$home_path = parse_url(home_url());		$home_path = $home_path['path'];		$url = str_replace($home_path, '', $url);	}	// Trim leading and lagging slashes	$url = trim($url, '/');	$request = $url;	// Done with cleanup	// Look for matches.	$request_match = $request;	foreach ( (array)$rewrite as $match => $query) {		// If the requesting file is the anchor of the match, prepend it		// to the path info.		if ( !empty($url) && ($url != $request) && (strpos($match, $url) === 0) )			$request_match = $url . '/' . $request;		if ( preg_match("!^$match!", $request_match, $matches) ) {			// Got a match.			// Trim the query of everything up to the '?'.			$query = preg_replace("!^.+\?!", '', $query);			// Substitute the substring matches into the query.			$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));			// Filter out non-public query vars			global $wp;			parse_str($query, $query_vars);			$query = array();			foreach ( (array) $query_vars as $key => $value ) {				if ( in_array($key, $wp->public_query_vars) )					$query[$key] = $value;			}			// Do the query			$query = new WP_Query($query);			if ( $query->is_single || $query->is_page )				return $query->post->ID;			else				return 0;		}	}	return 0;}/** * WordPress Rewrite Component. * * The WordPress Rewrite class writes the rewrite module rules to the .htaccess * file. It also handles parsing the request to get the correct setup for the * WordPress Query class. * * The Rewrite along with WP class function as a front controller for WordPress. * You can add rules to trigger your page view and processing using this * component. The full functionality of a front controller does not exist, * meaning you can't define how the template files load based on the rewrite * rules. * * @since 1.5.0 */class WP_Rewrite {	/**	 * Default permalink structure for WordPress.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $permalink_structure;	/**	 * Whether to add trailing slashes.	 *	 * @since 2.2.0	 * @access private	 * @var bool	 */	var $use_trailing_slashes;	/**	 * Customized or default category permalink base ( example.com/xx/tagname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_base;	/**	 * Customized or default tag permalink base ( example.com/xx/tagname ).	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_base;	/**	 * Permalink request structure for categories.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_structure;	/**	 * Permalink request structure for tags.	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_structure;	/**	 * Permalink author request base ( example.com/author/authorname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_base = 'author';	/**	 * Permalink request structure for author pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_structure;	/**	 * Permalink request structure for dates.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $date_structure;	/**	 * Permalink request structure for pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $page_structure;	/**	 * Search permalink base ( example.com/search/query ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_base = 'search';	/**	 * Permalink request structure for searches.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_structure;	/**	 * Comments permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_base = 'comments';	/**	 * Feed permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_base = 'feed';	/**	 * Comments feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_feed_structure;	/**	 * Feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_structure;	/**	 * Front URL path.	 *	 * The difference between the root property is that WordPress might be	 * located at example/WordPress/index.php, if permalinks are turned off. The	 * WordPress/index.php will be the front portion. If permalinks are turned	 * on, this will most likely be empty or not set.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $front;	/**	 * Root URL path to WordPress (without domain).	 *	 * The difference between front property is that WordPress might be located	 * at example.com/WordPress/. The root is the 'WordPress/' portion.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $root = '';	/**	 * Permalink to the home page.	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $index = 'index.php';	/**	 * Request match string.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $matches = '';	/**	 * Rewrite rules to match against the request to find the redirect or query.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rules;	/**	 * Additional rules added external to the rewrite class.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_rules = array(); //	/**	 * Additional rules that belong at the beginning to match first.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.3.0	 * @access private	 * @var array	 */	var $extra_rules_top = array(); //	/**	 * Rules that don't redirect to WP's index.php.	 *	 * These rules are written to the mod_rewrite portion of the .htaccess.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $non_wp_rules = array(); //	/**	 * Extra permalink structures.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_permastructs = array();	/**	 * Endpoints permalinks	 *	 * @since unknown	 * @access private	 * @var array	 */	var $endpoints;	/**	 * Whether to write every mod_rewrite rule for WordPress.	 *	 * This is off by default, turning it on might print a lot of rewrite rules	 * to the .htaccess file.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $use_verbose_rules = false;	/**	 * Whether to write every mod_rewrite rule for WordPress pages.	 *	 * @since 2.5.0	 * @access public	 * @var bool	 */	var $use_verbose_page_rules = true;	/**	 * Permalink structure search for preg_replace.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritecode =		array(					'%year%',					'%monthnum%',					'%day%',					'%hour%',					'%minute%',					'%second%',					'%postname%',					'%post_id%',					'%category%',					'%tag%',					'%author%',					'%pagename%',					'%search%'					);	/**	 * Preg_replace values for the search, see {@link WP_Rewrite::$rewritecode}.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritereplace =		array(					'([0-9]{4})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([^/]+)',					'([0-9]+)',					'(.+?)',					'(.+?)',					'([^/]+)',					'([^/]+?)',					'(.+)'					);	/**	 * Search for the query to look for replacing.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queryreplace =		array (					'year=',					'monthnum=',					'day=',					'hour=',					'minute=',					'second=',					'name=',					'p=',					'category_name=',					'tag=',					'author_name=',					'pagename=',					's='					);	/**	 * Supported default feeds.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $feeds = array ( 'feed', 'rdf', 'rss', 'rss2', 'atom' );	/**	 * Whether permalinks are being used.	 *	 * This can be either rewrite module or permalink in the HTTP query string.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool True, if permalinks are enabled.	 */	function using_permalinks() {		return ! empty($this->permalink_structure);	}	/**	 * Whether permalinks are being used and rewrite module is not enabled.	 *	 * Means that permalink links are enabled and index.php is in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_index_permalinks() {		if ( empty($this->permalink_structure) )			return false;		// If the index is not in the permalink, we're using mod_rewrite.		if ( preg_match('#^/*' . $this->index . '#', $this->permalink_structure) )			return true;		return false;	}	/**	 * Whether permalinks are being used and rewrite module is enabled.	 *	 * Using permalinks and index.php is not in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_mod_rewrite_permalinks() {		if ( $this->using_permalinks() && ! $this->using_index_permalinks() )			return true;		else			return false;	}	/**	 * Index for matches for usage in preg_*() functions.	 *	 * The format of the string is, with empty matches property value, '$NUM'.	 * The 'NUM' will be replaced with the value in the $number parameter. With	 * the matches property not empty, the value of the returned string will	 * contain that value of the matches property. The format then will be	 * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the	 * value of the $number parameter.	 *	 * @since 1.5.0	 * @access public	 *	 * @param int $number Index number.	 * @return string	 */	function preg_index($number) {		$match_prefix = '$';		$match_suffix = '';		if ( ! empty($this->matches) ) {			$match_prefix = '$' . $this->matches . '[';			$match_suffix = ']';		}		return "$match_prefix$number$match_suffix";	}	/**	 * Retrieve all page and attachments for pages URIs.	 *	 * The attachments are for those that have pages as parents and will be	 * retrieved.	 *	 * @since 2.5.0	 * @access public	 *	 * @return array Array of page URIs as first element and attachment URIs as second element.	 */	function page_uri_index() {		global $wpdb;		//get pages in order of hierarchy, i.e. children after parents		$posts = get_page_hierarchy($wpdb->get_results("SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'page'"));		// If we have no pages get out quick		if ( !$posts )			return array( array(), array() );		//now reverse it, because we need parents after children for rewrite rules to work properly		$posts = array_reverse($posts, true);		$page_uris = array();		$page_attachment_uris = array();		foreach ( $posts as $id => $post ) {			// URL => page name			$uri = get_page_uri($id);			$attachments = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'attachment' AND post_parent = %d", $id ));			if ( !empty($attachments) ) {				foreach ( $attachments as $attachment ) {					$attach_uri = get_page_uri($attachment->ID);					$page_attachment_uris[$attach_uri] = $attachment->ID;				}			}			$page_uris[$uri] = $id;		}		return array( $page_uris, $page_attachment_uris );	}	/**	 * Retrieve all of the rewrite rules for pages.	 *	 * If the 'use_verbose_page_rules' property is false, then there will only	 * be a single rewrite rule for pages for those matching '%pagename%'. With	 * the property set to true, the attachments and the pages will be added for	 * each individual attachment URI and page URI, respectively.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array	 */	function page_rewrite_rules() {		$rewrite_rules = array();		$page_structure = $this->get_page_permastruct();		if ( ! $this->use_verbose_page_rules ) {			$this->add_rewrite_tag('%pagename%', "(.+?)", 'pagename=');			$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			return $rewrite_rules;		}		$page_uris = $this->page_uri_index();		$uris = $page_uris[0];		$attachment_uris = $page_uris[1];		if ( is_array( $attachment_uris ) ) {			foreach ( $attachment_uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'attachment=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		if ( is_array( $uris ) ) {			foreach ( $uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'pagename=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		return $rewrite_rules;	}	/**	 * Retrieve date permalink structure, with year, month, and day.	 *	 * The permalink structure for the date, if not set already depends on the	 * permalink structure. It can be one of three formats. The first is year,	 * month, day; the second is day, month, year; and the last format is month,	 * day, year. These are matched against the permalink structure for which	 * one is used. If none matches, then the default will be used, which is	 * year, month, day.	 *	 * Prevents post ID and date permalinks from overlapping. In the case of	 * post_id, the date permalink will be prepended with front permalink with	 * 'date/' before the actual permalink to form the complete date permalink	 * structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on no permalink structure. Date permalink structure.	 */	function get_date_permastruct() {		if ( isset($this->date_structure) )			return $this->date_structure;		if ( empty($this->permalink_structure) ) {			$this->date_structure = '';			return false;		}		// The date permalink must have year, month, and day separated by slashes.		$endians = array('%year%/%monthnum%/%day%', '%day%/%monthnum%/%year%', '%monthnum%/%day%/%year%');		$this->date_structure = '';		$date_endian = '';		foreach ( $endians as $endian ) {			if ( false !== strpos($this->permalink_structure, $endian) ) {				$date_endian= $endian;				break;			}		}		if ( empty($date_endian) )			$date_endian = '%year%/%monthnum%/%day%';		// Do not allow the date tags and %post_id% to overlap in the permalink		// structure. If they do, move the date tags to $front/date/.		$front = $this->front;		preg_match_all('/%.+?%/', $this->permalink_structure, $tokens);		$tok_index = 1;		foreach ( (array) $tokens[0] as $token) {			if ( '%post_id%' == $token && ($tok_index <= 3) ) {				$front = $front . 'date/';				break;			}			$tok_index++;		}		$this->date_structure = $front . $date_endian;		return $this->date_structure;	}	/**	 * Retrieve the year permalink structure without month and day.	 *	 * Gets the date permalink structure and strips out the month and day	 * permalink structures.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year structure on success.	 */	function get_year_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%monthnum%', '', $structure);		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the month permalink structure without day and with year.	 *	 * Gets the date permalink structure and strips out the day permalink	 * structures. Keeps the year permalink structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month structure on success.	 */	function get_month_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the day permalink structure with month and year.	 *	 * Keeps date permalink structure with all year, month, and day.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month/Day structure on success.	 */	function get_day_permastruct() {		return $this->get_date_permastruct($this->permalink_structure);	}	/**	 * Retrieve the permalink structure for categories.	 *	 * If the category_base property has no value, then the category structure	 * will have the front property value, followed by 'category', and finally	 * '%category%'. If it does, then the root property will be used, along with	 * the category_base property value.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Category permalink structure.	 */	function get_category_permastruct() {		if ( isset($this->category_structure) )			return $this->category_structure;		if ( empty($this->permalink_structure) ) {			$this->category_structure = '';			return false;		}		if ( empty($this->category_base) )			$this->category_structure = trailingslashit( $this->front . 'category' );		else			$this->category_structure = trailingslashit( '/' . $this->root . $this->category_base );		$this->category_structure .= '%category%';		return $this->category_structure;	}	/**	 * Retrieve the permalink structure for tags.	 *	 * If the tag_base property has no value, then the tag structure will have	 * the front property value, followed by 'tag', and finally '%tag%'. If it	 * does, then the root property will be used, along with the tag_base	 * property value.	 *	 * @since 2.3.0	 * @access public	 *	 * @return bool|string False on failure. Tag permalink structure.	 */	function get_tag_permastruct() {		if ( isset($this->tag_structure) )			return $this->tag_structure;		if ( empty($this->permalink_structure) ) {			$this->tag_structure = '';			return false;		}		if ( empty($this->tag_base) )			$this->tag_structure = trailingslashit( $this->front . 'tag' );		else			$this->tag_structure = trailingslashit( '/' . $this->root . $this->tag_base );		$this->tag_structure .= '%tag%';		return $this->tag_structure;	}	/**	 * Retrieve extra permalink structure by name.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Permalink structure name.	 * @return string|bool False if not found. Permalink structure string.	 */	function get_extra_permastruct($name) {		if ( empty($this->permalink_structure) )			return false;		if ( isset($this->extra_permastructs[$name]) )			return $this->extra_permastructs[$name][0];		return false;	}	/**	 * Retrieve the author permalink structure.	 *	 * The permalink structure is front property, author base, and finally	 * '/%author%'. Will set the author_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_author_permastruct() {		if ( isset($this->author_structure) )			return $this->author_structure;		if ( empty($this->permalink_structure) ) {			$this->author_structure = '';			return false;		}		$this->author_structure = $this->front . $this->author_base . '/%author%';		return $this->author_structure;	}	/**	 * Retrieve the search permalink structure.	 *	 * The permalink structure is root property, search base, and finally	 * '/%search%'. Will set the search_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_search_permastruct() {		if ( isset($this->search_structure) )			return $this->search_structure;		if ( empty($this->permalink_structure) ) {			$this->search_structure = '';			return false;		}		$this->search_structure = $this->root . $this->search_base . '/%search%';		return $this->search_structure;	}	/**	 * Retrieve the page permalink structure.	 *	 * The permalink structure is root property, and '%pagename%'. Will set the	 * page_structure property and then return it without attempting to set the	 * value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_page_permastruct() {		if ( isset($this->page_structure) )			return $this->page_structure;		if (empty($this->permalink_structure)) {			$this->page_structure = '';			return false;		}		$this->page_structure = $this->root . '%pagename%';		return $this->page_structure;	}	/**	 * Retrieve the feed permalink structure.	 *	 * The permalink structure is root property, feed base, and finally	 * '/%feed%'. Will set the feed_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_feed_permastruct() {		if ( isset($this->feed_structure) )			return $this->feed_structure;		if ( empty($this->permalink_structure) ) {			$this->feed_structure = '';			return false;		}		$this->feed_structure = $this->root . $this->feed_base . '/%feed%';		return $this->feed_structure;	}	/**	 * Retrieve the comment feed permalink structure.	 *	 * The permalink structure is root property, comment base property, feed	 * base and finally '/%feed%'. Will set the comment_feed_structure property	 * and then return it without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_comment_feed_permastruct() {		if ( isset($this->comment_feed_structure) )			return $this->comment_feed_structure;		if (empty($this->permalink_structure)) {			$this->comment_feed_structure = '';			return false;		}		$this->comment_feed_structure = $this->root . $this->comments_base . '/' . $this->feed_base . '/%feed%';		return $this->comment_feed_structure;	}	/**	 * Append or update tag, pattern, and query for replacement.	 *	 * If the tag already exists, replace the existing pattern and query for	 * that tag, otherwise add the new tag, pattern, and query to the end of the	 * arrays.	 *	 * @internal What is the purpose of this function again? Need to finish long	 *           description.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $tag Append tag to rewritecode property array.	 * @param string $pattern Append pattern to rewritereplace property array.	 * @param string $query Append query to queryreplace property array.	 */	function add_rewrite_tag($tag, $pattern, $query) {		$position = array_search($tag, $this->rewritecode);		if ( false !== $position && null !== $position ) {			$this->rewritereplace[$position] = $pattern;			$this->queryreplace[$position] = $query;		} else {			$this->rewritecode[] = $tag;			$this->rewritereplace[] = $pattern;			$this->queryreplace[] = $query;		}	}	/**	 * Generate the rules from permalink structure.	 *	 * The main WP_Rewrite function for building the rewrite rule list. The	 * contents of the function is a mix of black magic and regular expressions,	 * so best just ignore the contents and move to the parameters.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure.	 * @param int $ep_mask Optional, default is EP_NONE. Endpoint constant, see EP_* constants.	 * @param bool $paged Optional, default is true. Whether permalink request is paged.	 * @param bool $feed Optional, default is true. Whether for feed.	 * @param bool $forcomments Optional, default is false. Whether for comments.	 * @param bool $walk_dirs Optional, default is true. Whether to create list of directories to walk over.	 * @param bool $endpoints Optional, default is true. Whether endpoints are enabled.	 * @return array Rewrite rule list.	 */	function generate_rewrite_rules($permalink_structure, $ep_mask = EP_NONE, $paged = true, $feed = true, $forcomments = false, $walk_dirs = true, $endpoints = true) {		//build a regex to match the feed section of URLs, something like (feed|atom|rss|rss2)/?		$feedregex2 = '';		foreach ( (array) $this->feeds as $feed_name)			$feedregex2 .= $feed_name . '|';		$feedregex2 = '(' . trim($feedregex2, '|') .  ')/?$';		//$feedregex is identical but with /feed/ added on as well, so URLs like <permalink>/feed/atom		//and <permalink>/atom are both possible		$feedregex = $this->feed_base  . '/' . $feedregex2;		//build a regex to match the trackback and page/xx parts of URLs		$trackbackregex = 'trackback/?$';		$pageregex = 'page/?([0-9]{1,})/?$';		$commentregex = 'comment-page-([0-9]{1,})/?$';		//build up an array of endpoint regexes to append => queries to append		if ( $endpoints ) {			$ep_query_append = array ();			foreach ( (array) $this->endpoints as $endpoint) {				//match everything after the endpoint name, but allow for nothing to appear there				$epmatch = $endpoint[1] . '(/(.*))?/?$';				//this will be appended on to the rest of the query for each dir				$epquery = '&' . $endpoint[1] . '=';				$ep_query_append[$epmatch] = array ( $endpoint[0], $epquery );			}		}		//get everything up to the first rewrite tag		$front = substr($permalink_structure, 0, strpos($permalink_structure, '%'));		//build an array of the tags (note that said array ends up being in $tokens[0])		preg_match_all('/%.+?%/', $permalink_structure, $tokens);		$num_tokens = count($tokens[0]);		$index = $this->index; //probably 'index.php'		$feedindex = $index;		$trackbackindex = $index;		//build a list from the rewritecode and queryreplace arrays, that will look something like		//tagname=$matches[i] where i is the current $i		for ( $i = 0; $i < $num_tokens; ++$i ) {			if ( 0 < $i )				$queries[$i] = $queries[$i - 1] . '&';			else				$queries[$i] = '';			$query_token = str_replace($this->rewritecode, $this->queryreplace, $tokens[0][$i]) . $this->preg_index($i+1);			$queries[$i] .= $query_token;		}		//get the structure, minus any cruft (stuff that isn't tags) at the front		$structure = $permalink_structure;		if ( $front != '/' )			$structure = str_replace($front, '', $structure);		//create a list of dirs to walk over, making rewrite rules for each level		//so for example, a $structure of /%year%/%month%/%postname% would create		//rewrite rules for /%year%/, /%year%/%month%/ and /%year%/%month%/%postname%		$structure = trim($structure, '/');		$dirs = $walk_dirs ? explode('/', $structure) : array( $structure );		$num_dirs = count($dirs);		//strip slashes from the front of $front		$front = preg_replace('|^/+|', '', $front);		//the main workhorse loop		$post_rewrite = array();		$struct = $front;		for ( $j = 0; $j < $num_dirs; ++$j ) {			//get the struct for this dir, and trim slashes off the front			$struct .= $dirs[$j] . '/'; //accumulate. see comment near explode('/', $structure) above			$struct = ltrim($struct, '/');			//replace tags with regexes			$match = str_replace($this->rewritecode, $this->rewritereplace, $struct);			//make a list of tags, and store how many there are in $num_toks			$num_toks = preg_match_all('/%.+?%/', $struct, $toks);			//get the 'tagname=$matches[i]'			$query = ( isset($queries) && is_array($queries) ) ? $queries[$num_toks - 1] : '';			//set up $ep_mask_specific which is used to match more specific URL types			switch ( $dirs[$j] ) {				case '%year%':					$ep_mask_specific = EP_YEAR;					break;				case '%monthnum%':					$ep_mask_specific = EP_MONTH;					break;				case '%day%':					$ep_mask_specific = EP_DAY;					break;				default:					$ep_mask_specific = EP_NONE;			}			//create query for /page/xx			$pagematch = $match . $pageregex;			$pagequery = $index . '?' . $query . '&paged=' . $this->preg_index($num_toks + 1);			//create query for /comment-page-xx			$commentmatch = $match . $commentregex;			$commentquery = $index . '?' . $query . '&cpage=' . $this->preg_index($num_toks + 1);			if ( get_option('page_on_front') ) {				//create query for Root /comment-page-xx				$rootcommentmatch = $match . $commentregex;				$rootcommentquery = $index . '?' . $query . '&page_id=' . get_option('page_on_front') . '&cpage=' . $this->preg_index($num_toks + 1);			}			//create query for /feed/(feed|atom|rss|rss2|rdf)			$feedmatch = $match . $feedregex;			$feedquery = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//create query for /(feed|atom|rss|rss2|rdf) (see comment near creation of $feedregex)			$feedmatch2 = $match . $feedregex2;			$feedquery2 = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//if asked to, turn the feed queries into comment feed ones			if ( $forcomments ) {				$feedquery .= '&withcomments=1';				$feedquery2 .= '&withcomments=1';			}			//start creating the array of rewrites for this dir			$rewrite = array();			if ( $feed ) //...adding on /feed/ regexes => queries				$rewrite = array($feedmatch => $feedquery, $feedmatch2 => $feedquery2);			if ( $paged ) //...and /page/xx ones				$rewrite = array_merge($rewrite, array($pagematch => $pagequery));			//only on pages with comments add ../comment-page-xx/			if ( EP_PAGES & $ep_mask || EP_PERMALINK & $ep_mask )				$rewrite = array_merge($rewrite, array($commentmatch => $commentquery));			else if ( EP_ROOT & $ep_mask && get_option('page_on_front') )				$rewrite = array_merge($rewrite, array($rootcommentmatch => $rootcommentquery));			//do endpoints			if ( $endpoints ) {				foreach ( (array) $ep_query_append as $regex => $ep) {					//add the endpoints on if the mask fits					if ( $ep[0] & $ep_mask || $ep[0] & $ep_mask_specific )						$rewrite[$match . $regex] = $index . '?' . $query . $ep[1] . $this->preg_index($num_toks + 2);				}			}			//if we've got some tags in this dir			if ( $num_toks ) {				$post = false;				$page = false;				//check to see if this dir is permalink-level: i.e. the structure specifies an				//individual post. Do this by checking it contains at least one of 1) post name,				//2) post ID, 3) page name, 4) timestamp (year, month, day, hour, second and				//minute all present). Set these flags now as we need them for the endpoints.				if ( strpos($struct, '%postname%') !== false						|| strpos($struct, '%post_id%') !== false						|| strpos($struct, '%pagename%') !== false						|| (strpos($struct, '%year%') !== false && strpos($struct, '%monthnum%') !== false && strpos($struct, '%day%') !== false && strpos($struct, '%hour%') !== false && strpos($struct, '%minute%') !== false && strpos($struct, '%second%') !== false)						) {					$post = true;					if ( strpos($struct, '%pagename%') !== false )						$page = true;				}				if ( ! $post ) {					// For custom post types, we need to add on endpoints as well.					foreach ( get_post_types( array('_builtin' => false ) ) as $ptype ) {						if ( strpos($struct, "%$ptype%") !== false ) {							$post = true;							$page = is_post_type_hierarchical( $ptype ); // This is for page style attachment url's							break;						}					}				}				//if we're creating rules for a permalink, do all the endpoints like attachments etc				if ( $post ) {					//create query and regex for trackback					$trackbackmatch = $match . $trackbackregex;					$trackbackquery = $trackbackindex . '?' . $query . '&tb=1';					//trim slashes from the end of the regex for this dir					$match = rtrim($match, '/');					//get rid of brackets					$submatchbase = str_replace( array('(', ')'), '', $match);					//add a rule for at attachments, which take the form of <permalink>/some-text					$sub1 = $submatchbase . '/([^/]+)/';					$sub1tb = $sub1 . $trackbackregex; //add trackback regex <permalink>/trackback/...					$sub1feed = $sub1 . $feedregex; //and <permalink>/feed/(atom|...)					$sub1feed2 = $sub1 . $feedregex2; //and <permalink>/(feed|atom...)					$sub1comment = $sub1 . $commentregex; //and <permalink>/comment-page-xx					//add an ? as we don't have to match that last slash, and finally a $ so we					//match to the end of the URL					//add another rule to match attachments in the explicit form:					//<permalink>/attachment/some-text					$sub2 = $submatchbase . '/attachment/([^/]+)/';					$sub2tb = $sub2 . $trackbackregex; //and add trackbacks <permalink>/attachment/trackback					$sub2feed = $sub2 . $feedregex;    //feeds, <permalink>/attachment/feed/(atom|...)					$sub2feed2 = $sub2 . $feedregex2;  //and feeds again on to this <permalink>/attachment/(feed|atom...)					$sub2comment = $sub2 . $commentregex; //and <permalink>/comment-page-xx					//create queries for these extra tag-ons we've just dealt with					$subquery = $index . '?attachment=' . $this->preg_index(1);					$subtbquery = $subquery . '&tb=1';					$subfeedquery = $subquery . '&feed=' . $this->preg_index(2);					$subcommentquery = $subquery . '&cpage=' . $this->preg_index(2);					//do endpoints for attachments					if ( !empty($endpoints) ) {						foreach ( (array) $ep_query_append as $regex => $ep ) {							if ( $ep[0] & EP_ATTACHMENT ) {								$rewrite[$sub1 . $regex] = $subquery . $ep[1] . $this->preg_index(2);								$rewrite[$sub2 . $regex] = $subquery . $ep[1] . $this->preg_index(2);							}						}					}					//now we've finished with endpoints, finish off the $sub1 and $sub2 matches					$sub1 .= '?$';					$sub2 .= '?$';					//allow URLs like <permalink>/2 for <permalink>/page/2					$match = $match . '(/[0-9]+)?/?$';					$query = $index . '?' . $query . '&page=' . $this->preg_index($num_toks + 1);				} else { //not matching a permalink so this is a lot simpler					//close the match and finalise the query					$match .= '?$';					$query = $index . '?' . $query;				}				//create the final array for this dir by joining the $rewrite array (which currently				//only contains rules/queries for trackback, pages etc) to the main regex/query for				//this dir				$rewrite = array_merge($rewrite, array($match => $query));				//if we're matching a permalink, add those extras (attachments etc) on				if ( $post ) {					//add trackback					$rewrite = array_merge(array($trackbackmatch => $trackbackquery), $rewrite);					//add regexes/queries for attachments, attachment trackbacks and so on					if ( ! $page ) //require <permalink>/attachment/stuff form for pages because of confusion with subpages						$rewrite = array_merge($rewrite, array($sub1 => $subquery, $sub1tb => $subtbquery, $sub1feed => $subfeedquery, $sub1feed2 => $subfeedquery, $sub1comment => $subcommentquery));					$rewrite = array_merge(array($sub2 => $subquery, $sub2tb => $subtbquery, $sub2feed => $subfeedquery, $sub2feed2 => $subfeedquery, $sub2comment => $subcommentquery), $rewrite);				}			} //if($num_toks)			//add the rules for this dir to the accumulating $post_rewrite			$post_rewrite = array_merge($rewrite, $post_rewrite);		} //foreach ($dir)		return $post_rewrite; //the finished rules. phew!	}	/**	 * Generate Rewrite rules with permalink structure and walking directory only.	 *	 * Shorten version of {@link WP_Rewrite::generate_rewrite_rules()} that	 * allows for shorter list of parameters. See the method for longer	 * description of what generating rewrite rules does.	 *	 * @uses WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure to generate rules.	 * @param bool $walk_dirs Optional, default is false. Whether to create list of directories to walk over.	 * @return array	 */	function generate_rewrite_rule($permalink_structure, $walk_dirs = false) {		return $this->generate_rewrite_rules($permalink_structure, EP_NONE, false, false, false, $walk_dirs);	}	/**	 * Construct rewrite matches and queries from permalink structure.	 *	 * Runs the action 'generate_rewrite_rules' with the parameter that is an	 * reference to the current WP_Rewrite instance to further manipulate the	 * permalink structures and rewrite rules. Runs the 'rewrite_rules_array'	 * filter on the full rewrite rule array.	 *	 * There are two ways to manipulate the rewrite rules, one by hooking into	 * the 'generate_rewrite_rules' action and gaining full control of the	 * object or just manipulating the rewrite rule array before it is passed	 * from the function.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array An associate array of matches and queries.	 */	function rewrite_rules() {		$rewrite = array();		if ( empty($this->permalink_structure) )			return $rewrite;		// robots.txt -only if installed at the root		$home_path = parse_url( home_url() );		$robots_rewrite = ( empty( $home_path['path'] ) || '/' == $home_path['path'] ) ? array( 'robots\.txt$' => $this->index . '?robots=1' ) : array();		// Default Feed rules - These are require to allow for the direct access files to work with permalink structure starting with %category%		$default_feeds = array(	'.*wp-atom.php$'	=>	$this->index . '?feed=atom',								'.*wp-rdf.php$'		=>	$this->index . '?feed=rdf',								'.*wp-rss.php$'		=>	$this->index . '?feed=rss',								'.*wp-rss2.php$'	=>	$this->index . '?feed=rss2',								'.*wp-feed.php$'	=>	$this->index . '?feed=feed',								'.*wp-commentsrss2.php$'	=>	$this->index . '?feed=rss2&withcomments=1');		// Registration rules		$registration_pages = array();		if ( is_multisite() && is_main_site() ) {			$registration_pages['.*wp-signup.php$'] = $this->index . '?signup=true';			$registration_pages['.*wp-activate.php$'] = $this->index . '?activate=true';		}		// Post		$post_rewrite = $this->generate_rewrite_rules($this->permalink_structure, EP_PERMALINK);		$post_rewrite = apply_filters('post_rewrite_rules', $post_rewrite);		// Date		$date_rewrite = $this->generate_rewrite_rules($this->get_date_permastruct(), EP_DATE);		$date_rewrite = apply_filters('date_rewrite_rules', $date_rewrite);		// Root		$root_rewrite = $this->generate_rewrite_rules($this->root . '/', EP_ROOT);		$root_rewrite = apply_filters('root_rewrite_rules', $root_rewrite);		// Comments		$comments_rewrite = $this->generate_rewrite_rules($this->root . $this->comments_base, EP_COMMENTS, true, true, true, false);		$comments_rewrite = apply_filters('comments_rewrite_rules', $comments_rewrite);		// Search		$search_structure = $this->get_search_permastruct();		$search_rewrite = $this->generate_rewrite_rules($search_structure, EP_SEARCH);		$search_rewrite = apply_filters('search_rewrite_rules', $search_rewrite);		// Categories		$category_rewrite = $this->generate_rewrite_rules($this->get_category_permastruct(), EP_CATEGORIES);		$category_rewrite = apply_filters('category_rewrite_rules', $category_rewrite);		// Tags		$tag_rewrite = $this->generate_rewrite_rules($this->get_tag_permastruct(), EP_TAGS);		$tag_rewrite = apply_filters('tag_rewrite_rules', $tag_rewrite);		// Authors		$author_rewrite = $this->generate_rewrite_rules($this->get_author_permastruct(), EP_AUTHORS);		$author_rewrite = apply_filters('author_rewrite_rules', $author_rewrite);		// Pages		$page_rewrite = $this->page_rewrite_rules();		$page_rewrite = apply_filters('page_rewrite_rules', $page_rewrite);		// Extra permastructs		foreach ( $this->extra_permastructs as $permastruct ) {			if ( is_array($permastruct) )				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct[0], $permastruct[1]));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct, EP_NONE));		}		// Put them together.		if ( $this->use_verbose_page_rules )			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $page_rewrite, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $this->extra_rules);		else			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $page_rewrite, $this->extra_rules);		do_action_ref_array('generate_rewrite_rules', array(&$this));		$this->rules = apply_filters('rewrite_rules_array', $this->rules);		return $this->rules;	}	/**	 * Retrieve the rewrite rules.	 *	 * The difference between this method and {@link	 * WP_Rewrite::rewrite_rules()} is that this method stores the rewrite rules	 * in the 'rewrite_rules' option and retrieves it. This prevents having to	 * process all of the permalinks to get the rewrite rules in the form of	 * caching.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array Rewrite rules.	 */	function wp_rewrite_rules() {		$this->rules = get_option('rewrite_rules');		if ( empty($this->rules) ) {			$this->matches = 'matches';			$this->rewrite_rules();			update_option('rewrite_rules', $this->rules);		}		return $this->rules;	}	/**	 * Retrieve mod_rewrite formatted rewrite rules to write to .htaccess.	 *	 * Does not actually write to the .htaccess file, but creates the rules for	 * the process that will.	 *	 * Will add  the non_wp_rules property rules to the .htaccess file before	 * the WordPress rewrite rules one.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string	 */	function mod_rewrite_rules() {		if ( ! $this->using_permalinks() )			return '';		$site_root = parse_url(get_option('siteurl'));		if ( isset( $site_root['path'] ) )			$site_root = trailingslashit($site_root['path']);		$home_root = parse_url(home_url());		if ( isset( $home_root['path'] ) )			$home_root = trailingslashit($home_root['path']);		else			$home_root = '/';		$rules = "<IfModule mod_rewrite.c>\n";		$rules .= "RewriteEngine On\n";		$rules .= "RewriteBase $home_root\n";		$rules .= "RewriteRule ^index\.php$ - [L]\n"; // Prevent -f checks on index.php.		//add in the rules that don't redirect to WP's index.php (and thus shouldn't be handled by WP at all)		foreach ( (array) $this->non_wp_rules as $match => $query) {			// Apache 1.3 does not support the reluctant (non-greedy) modifier.			$match = str_replace('.+?', '.+', $match);			// If the match is unanchored and greedy, prepend rewrite conditions			// to avoid infinite redirects and eclipsing of real files.			//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {				//nada.			//}			$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";		}		if ( $this->use_verbose_rules ) {			$this->matches = '';			$rewrite = $this->rewrite_rules();			$num_rules = count($rewrite);			$rules .= "RewriteCond %{REQUEST_FILENAME} -f [OR]\n" .				"RewriteCond %{REQUEST_FILENAME} -d\n" .				"RewriteRule ^.*$ - [S=$num_rules]\n";			foreach ( (array) $rewrite as $match => $query) {				// Apache 1.3 does not support the reluctant (non-greedy) modifier.				$match = str_replace('.+?', '.+', $match);				// If the match is unanchored and greedy, prepend rewrite conditions				// to avoid infinite redirects and eclipsing of real files.				//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {					//nada.				//}				if ( strpos($query, $this->index) !== false )					$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";				else					$rules .= 'RewriteRule ^' . $match . ' ' . $site_root . $query . " [QSA,L]\n";			}		} else {			$rules .= "RewriteCond %{REQUEST_FILENAME} !-f\n" .				"RewriteCond %{REQUEST_FILENAME} !-d\n" .				"RewriteRule . {$home_root}{$this->index} [L]\n";		}		$rules .= "</IfModule>\n";		$rules = apply_filters('mod_rewrite_rules', $rules);		$rules = apply_filters('rewrite_rules', $rules);  // Deprecated		return $rules;	}	/**	 * Retrieve IIS7 URL Rewrite formatted rewrite rules to write to web.config file.	 *	 * Does not actually write to the web.config file, but creates the rules for	 * the process that will.	 *	 * @since 2.8.0	 * @access public	 *	 * @return string	 */	function iis7_url_rewrite_rules( $add_parent_tags = false ) {		if ( ! $this->using_permalinks() )			return '';		$rules = '';		if ( $add_parent_tags ) {			$rules .= '<configuration>	<system.webServer>		<rewrite>			<rules>';		}		if ( !is_multisite() ) {			$rules .= '				<rule name="wordpress" patternSyntax="Wildcard">					<match url="*" />						<conditions>							<add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />							<add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />						</conditions>					<action type="Rewrite" url="index.php" />				</rule>';		} else {			if (is_subdomain_install()) {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			} else {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />					<action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 5" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 6" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 7" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			}		}		if ( $add_parent_tags ) {			$rules .= '			</rules>		</rewrite>	</system.webServer></configuration>';		}		$rules = apply_filters('iis7_url_rewrite_rules', $rules);		return $rules;	}	/**	 * Add a straight rewrite rule.	 *	 * Any value in the $after parameter that isn't 'bottom' will be placed at	 * the top of the rules.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 * @param string $after Optional, default is bottom. Location to place rule.	 */	function add_rule($regex, $redirect, $after = 'bottom') {		//get everything up to the first ?		$index = (strpos($redirect, '?') == false ? strlen($redirect) : strpos($redirect, '?'));		$front = substr($redirect, 0, $index);		if ( $front != $this->index ) { //it doesn't redirect to WP's index.php			$this->add_external_rule($regex, $redirect);		} else {			if ( 'bottom' == $after)				$this->extra_rules = array_merge($this->extra_rules, array($regex => $redirect));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, array($regex => $redirect));			//$this->extra_rules[$regex] = $redirect;		}	}	/**	 * Add a rule that doesn't redirect to index.php.	 *	 * Can redirect to any place.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 */	function add_external_rule($regex, $redirect) {		$this->non_wp_rules[$regex] = $redirect;	}	/**	 * Add an endpoint, like /trackback/.	 *	 * To be inserted after certain URL types (specified in $places).	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $name Name of endpoint.	 * @param array $places URL types that endpoint can be used.	 */	function add_endpoint($name, $places) {		global $wp;		$this->endpoints[] = array ( $places, $name );		$wp->add_query_var($name);	}	/**	 * Add permalink structure.	 *	 * These are added along with the extra rewrite rules that are merged to the	 * top.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Name for permalink structure.	 * @param string $struct Permalink structure.	 * @param bool $with_front Prepend front base to permalink structure.	 */	function add_permastruct($name, $struct, $with_front = true, $ep_mask = EP_NONE) {		if ( $with_front )			$struct = $this->front . $struct;		$this->extra_permastructs[$name] = array($struct, $ep_mask);	}	/**	 * Remove rewrite rules and then recreate rewrite rules.	 *	 * Calls {@link WP_Rewrite::wp_rewrite_rules()} after removing the	 * 'rewrite_rules' option. If the function named 'save_mod_rewrite_rules'	 * exists, it will be called.	 *	 * @since 2.0.1	 * @access public	 * @param $hard bool Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).	 */	function flush_rules($hard = true) {		delete_option('rewrite_rules');		$this->wp_rewrite_rules();		if ( $hard && function_exists('save_mod_rewrite_rules') )			save_mod_rewrite_rules();		if ( $hard && function_exists('iis7_save_url_rewrite_rules') )			iis7_save_url_rewrite_rules();	}	/**	 * Sets up the object's properties.	 *	 * The 'use_verbose_page_rules' object property will be set to true if the	 * permalink structure begins with one of the following: '%postname%', '%category%',	 * '%tag%', or '%author%'.	 *	 * @since 1.5.0	 * @access public	 */	function init() {		$this->extra_rules = $this->non_wp_rules = $this->endpoints = array();		$this->permalink_structure = get_option('permalink_structure');		$this->front = substr($this->permalink_structure, 0, strpos($this->permalink_structure, '%'));		$this->root = '';		if ( $this->using_index_permalinks() )			$this->root = $this->index . '/';		$this->category_base = get_option( 'category_base' );		$this->tag_base = get_option( 'tag_base' );		unset($this->category_structure);		unset($this->author_structure);		unset($this->date_structure);		unset($this->page_structure);		unset($this->search_structure);		unset($this->feed_structure);		unset($this->comment_feed_structure);		$this->use_trailing_slashes = ( '/' == substr($this->permalink_structure, -1, 1) );		// Enable generic rules for pages if permalink structure doesn't begin with a wildcard.		if ( preg_match("/^[^%]*%(?:postname|category|tag|author)%/", $this->permalink_structure) )			 $this->use_verbose_page_rules = true;		else			$this->use_verbose_page_rules = false;	}	/**	 * Set the main permalink structure for the blog.	 *	 * Will update the 'permalink_structure' option, if there is a difference	 * between the current permalink structure and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * Fires the 'permalink_structure_changed' action once the init call has	 * processed passing the old and new values	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure Permalink structure.	 */	function set_permalink_structure($permalink_structure) {		if ( $permalink_structure != $this->permalink_structure ) {			update_option('permalink_structure', $permalink_structure);			$this->init();			do_action('permalink_structure_changed', $this->permalink_structure, $permalink_structure);		}	}	/**	 * Set the category base for the category permalink.	 *	 * Will update the 'category_base' option, if there is a difference between	 * the current category base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $category_base Category permalink structure base.	 */	function set_category_base($category_base) {		if ( $category_base != $this->category_base ) {			update_option('category_base', $category_base);			$this->init();		}	}	/**	 * Set the tag base for the tag permalink.	 *	 * Will update the 'tag_base' option, if there is a difference between the	 * current tag base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 2.3.0	 * @access public	 *	 * @param string $tag_base Tag permalink structure base.	 */	function set_tag_base( $tag_base ) {		if ( $tag_base != $this->tag_base ) {			update_option( 'tag_base', $tag_base );			$this->init();		}	}	/**	 * PHP4 Constructor - Calls init(), which runs setup.	 *	 * @since 1.5.0	 * @access public	 *	 * @return WP_Rewrite	 */	function WP_Rewrite() {		$this->init();	}}?>
<?php/** * WordPress Widgets Administration API * * @package WordPress * @subpackage Administration *//** * Display list of the available widgets, either all or matching search. * * The search parameter are search terms separated by spaces. * * @since unknown * * @param string $show Optional, default is all. What to display, can be 'all', 'unused', or 'used'. * @param string $_search Optional. Search for widgets. Should be unsanitized. */function wp_list_widgets() {	global $wp_registered_widgets, $sidebars_widgets, $wp_registered_widget_controls;	$sort = $wp_registered_widgets;	usort( $sort, create_function( '$a, $b', 'return strnatcasecmp( $a["name"], $b["name"] );' ) );	$done = array();	foreach ( $sort as $widget ) {		if ( in_array( $widget['callback'], $done, true ) ) // We already showed this multi-widget			continue;		$sidebar = is_active_widget( $widget['callback'], $widget['id'], false, false );		$done[] = $widget['callback'];		if ( ! isset( $widget['params'][0] ) )			$widget['params'][0] = array();		$args = array( 'widget_id' => $widget['id'], 'widget_name' => $widget['name'], '_display' => 'template' );		if ( isset($wp_registered_widget_controls[$widget['id']]['id_base']) && isset($widget['params'][0]['number']) ) {			$id_base = $wp_registered_widget_controls[$widget['id']]['id_base'];			$args['_temp_id'] = "$id_base-__i__";			$args['_multi_num'] = next_widget_id_number($id_base);			$args['_add'] = 'multi';		} else {			$args['_add'] = 'single';			if ( $sidebar )				$args['_hide'] = '1';		}		$args = wp_list_widget_controls_dynamic_sidebar( array( 0 => $args, 1 => $widget['params'][0] ) );		call_user_func_array( 'wp_widget_control', $args );	}}/** * Show the widgets and their settings for a sidebar. * Used in the the admin widget config screen. * * @since unknown * * @param string $sidebar id slug of the sidebar */function wp_list_widget_controls( $sidebar ) {	add_filter( 'dynamic_sidebar_params', 'wp_list_widget_controls_dynamic_sidebar' );	echo "<div id='$sidebar' class='widgets-sortables'>\n";	$description = wp_sidebar_description( $sidebar );	if ( !empty( $description ) ) {		echo "<div class='sidebar-description'>\n";		echo "\t<p class='description'>$description</p>";		echo "</div>\n";	}	dynamic_sidebar( $sidebar );	echo "</div>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $params * @return array */function wp_list_widget_controls_dynamic_sidebar( $params ) {	global $wp_registered_widgets;	static $i = 0;	$i++;	$widget_id = $params[0]['widget_id'];	$id = isset($params[0]['_temp_id']) ? $params[0]['_temp_id'] : $widget_id;	$hidden = isset($params[0]['_hide']) ? ' style="display:none;"' : '';	$params[0]['before_widget'] = "<div id='widget-${i}_$id' class='widget'$hidden>";	$params[0]['after_widget'] = "</div>";	$params[0]['before_title'] = "%BEG_OF_TITLE%"; // deprecated	$params[0]['after_title'] = "%END_OF_TITLE%"; // deprecated	if ( is_callable( $wp_registered_widgets[$widget_id]['callback'] ) ) {		$wp_registered_widgets[$widget_id]['_callback'] = $wp_registered_widgets[$widget_id]['callback'];		$wp_registered_widgets[$widget_id]['callback'] = 'wp_widget_control';	}	return $params;}function next_widget_id_number($id_base) {	global $wp_registered_widgets;	$number = 1;	foreach ( $wp_registered_widgets as $widget_id => $widget ) {		if ( preg_match( '/' . $id_base . '-([0-9]+)$/', $widget_id, $matches ) )			$number = max($number, $matches[1]);	}	$number++;	return $number;}/** * Meta widget used to display the control form for a widget. * * Called from dynamic_sidebar(). * * @since unknown * * @param array $sidebar_args * @return array */function wp_widget_control( $sidebar_args ) {	global $wp_registered_widgets, $wp_registered_widget_controls, $sidebars_widgets;	$widget_id = $sidebar_args['widget_id'];	$sidebar_id = isset($sidebar_args['id']) ? $sidebar_args['id'] : false;	$key = $sidebar_id ? array_search( $widget_id, $sidebars_widgets[$sidebar_id] ) : '-1'; // position of widget in sidebar	$control = isset($wp_registered_widget_controls[$widget_id]) ? $wp_registered_widget_controls[$widget_id] : array();	$widget = $wp_registered_widgets[$widget_id];	$id_format = $widget['id'];	$widget_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $widget_id;	$multi_number = isset($sidebar_args['_multi_num']) ? $sidebar_args['_multi_num'] : '';	$add_new = isset($sidebar_args['_add']) ? $sidebar_args['_add'] : '';	$query_arg = array( 'editwidget' => $widget['id'] );	if ( $add_new ) {		$query_arg['addnew'] = 1;		if ( $multi_number ) {			$query_arg['num'] = $multi_number;			$query_arg['base'] = $id_base;		}	} else {		$query_arg['sidebar'] = $sidebar_id;		$query_arg['key'] = $key;	}	// We aren't showing a widget control, we're outputing a template for a mult-widget control	if ( isset($sidebar_args['_display']) && 'template' == $sidebar_args['_display'] && $widget_number ) {		// number == -1 implies a template where id numbers are replaced by a generic '__i__'		$control['params'][0]['number'] = -1;		// with id_base widget id's are constructed like {$id_base}-{$id_number}		if ( isset($control['id_base']) )			$id_format = $control['id_base'] . '-__i__';	}	$wp_registered_widgets[$widget_id]['callback'] = $wp_registered_widgets[$widget_id]['_callback'];	unset($wp_registered_widgets[$widget_id]['_callback']);	$widget_title = esc_html( strip_tags( $sidebar_args['widget_name'] ) );	$has_form = 'noform';	echo $sidebar_args['before_widget']; ?>	<div class="widget-top">	<div class="widget-title-action">		<a class="widget-action hide-if-no-js" href="#available-widgets"></a>		<a class="widget-control-edit hide-if-js" href="<?php echo esc_url( add_query_arg( $query_arg ) ); ?>"><span class="edit"><?php _e('Edit'); ?></span><span class="add"><?php _e('Add'); ?></span></a>	</div>	<div class="widget-title"><h4><?php echo $widget_title ?><span class="in-widget-title"></span></h4></div>	</div>	<div class="widget-inside">	<form action="" method="post">	<div class="widget-content"><?php	if ( isset($control['callback']) )		$has_form = call_user_func_array( $control['callback'], $control['params'] );	else		echo "\t\t<p>" . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($id_format); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="widget-width" class="widget-width" value="<?php if (isset( $control['width'] )) echo esc_attr($control['width']); ?>" />	<input type="hidden" name="widget-height" class="widget-height" value="<?php if (isset( $control['height'] )) echo esc_attr($control['height']); ?>" />	<input type="hidden" name="widget_number" class="widget_number" value="<?php echo esc_attr($widget_number); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" />	<input type="hidden" name="add_new" class="add_new" value="<?php echo esc_attr($add_new); ?>" />	<div class="widget-control-actions">		<div class="alignleft">		<a class="widget-control-remove" href="#remove"><?php _e('Delete'); ?></a> |		<a class="widget-control-close" href="#close"><?php _e('Close'); ?></a>		</div>		<div class="alignright<?php if ( 'noform' === $has_form ) echo ' widget-control-noform'; ?>">		<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback " title="" alt="" />		<input type="submit" name="savewidget" class="button-primary widget-control-save" value="<?php esc_attr_e('Save'); ?>" />		</div>		<br class="clear" />	</div>	</form>	</div>	<div class="widget-description"><?php echo ( $widget_description = wp_widget_description($widget_id) ) ? "$widget_description\n" : "$widget_title\n"; ?>	</div><?php	echo $sidebar_args['after_widget'];	return $sidebar_args;}
<?php/** * Users administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( !current_user_can('list_users') )	wp_die(__('Cheatin&#8217; uh?'));$title = __('Users');$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('This screen lists all the existing users for your site. Each user has one of five defined roles as set by the site admin: Site Administrator, Editor, Author, Contributor, or Subscriber. Users with roles other than Administrator will see fewer options when they are logged in, based on their role.') . '</p>' .    '<p>' . __('You can customize the display of information on this screen as you can on other screens, by using the Screen Options tab and the on-screen filters.') . '</p>' .    '<p>' . __('To add a new user for your site, click the Add New button at the top of the screen or Add New in the Users menu section.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Authors_and_Users_SubPanel" target="_blank">Documentation on Authors and Users</a>') . '</p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Roles_and_Capabilities" target="_blank">Roles and Capabilities Descriptions</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$update = $doaction = '';if ( isset($_REQUEST['action']) )	$doaction = $_REQUEST['action'] ? $_REQUEST['action'] : $_REQUEST['action2'];if ( empty($doaction) ) {	if ( isset($_GET['changeit']) && !empty($_GET['new_role']) )		$doaction = 'promote';}if ( empty($_REQUEST) ) {	$referer = '<input type="hidden" name="wp_http_referer" value="'. esc_attr(stripslashes($_SERVER['REQUEST_URI'])) . '" />';} elseif ( isset($_REQUEST['wp_http_referer']) ) {	$redirect = remove_query_arg(array('wp_http_referer', 'updated', 'delete_count'), stripslashes($_REQUEST['wp_http_referer']));	$referer = '<input type="hidden" name="wp_http_referer" value="' . esc_attr($redirect) . '" />';} else {	$redirect = 'users.php';	$referer = '';}switch ($doaction) {/* Bulk Dropdown menu Role changes */case 'promote':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	$editable_roles = get_editable_roles();	if ( empty( $editable_roles[$_REQUEST['new_role']] ) )		wp_die(__('You can&#8217;t give users that role.'));	$userids = $_REQUEST['users'];	$update = 'promote';	foreach ( $userids as $id ) {		$id = (int) $id;		if ( ! current_user_can('promote_user', $id) )			wp_die(__('You can&#8217;t edit that user.'));		// The new role of the current user must also have promote_users caps		if ( $id == $current_user->ID && !$wp_roles->role_objects[$_REQUEST['new_role']]->has_cap('promote_users') ) {			$update = 'err_admin_role';			continue;		}		// If the user doesn't already belong to the blog, bail.		if ( is_multisite() && !is_user_member_of_blog( $id ) )			wp_die(__('Cheatin&#8217; uh?'));		$user = new WP_User($id);		$user->set_role($_REQUEST['new_role']);	}	wp_redirect(add_query_arg('update', $update, $redirect));	exit();break;case 'dodelete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('delete-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		wp_die(__('You can&#8217;t delete users.'));	$userids = $_REQUEST['users'];	$update = 'del';	$delete_count = 0;	foreach ( (array) $userids as $id) {		$id = (int) $id;		if ( ! current_user_can( 'delete_user', $id ) )			wp_die(__( 'You can&#8217;t delete that user.' ) );		if ( $id == $current_user->ID ) {			$update = 'err_admin_del';			continue;		}		switch ( $_REQUEST['delete_option'] ) {		case 'delete':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id);			break;		case 'reassign':			if ( current_user_can('delete_user', $id) )				wp_delete_user($id, $_REQUEST['reassign_user']);			break;		}		++$delete_count;	}	$redirect = add_query_arg( array('delete_count' => $delete_count, 'update' => $update), $redirect);	wp_redirect($redirect);	exit();break;case 'delete':	if ( is_multisite() )		wp_die( __('User deletion is not allowed from this screen.') );	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( ! current_user_can( 'delete_users' ) )		$errors = new WP_Error( 'edit_users', __( 'You can&#8217;t delete users.' ) );	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('delete-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Delete Users'); ?></h2><p><?php _e('You have specified these users for deletion:'); ?></p><ul><?php	$go_delete = false;	foreach ( (array) $userids as $id ) {		$id = (int) $id;		$user = new WP_User($id);		if ( $id == $current_user->ID ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be deleted.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"" . esc_attr($id) . "\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_delete = true;		}	}	// @todo Delete is always for !is_multisite(). Use API.	if ( !is_multisite() ) {		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users ORDER BY user_login");	} else {		// WPMU only searches users of current blog		$all_logins = $wpdb->get_results("SELECT ID, user_login FROM $wpdb->users, $wpdb->usermeta WHERE $wpdb->users.ID = $wpdb->usermeta.user_id AND meta_key = '".$wpdb->prefix."capabilities' ORDER BY user_login");	}	$user_dropdown = '<select name="reassign_user">';	foreach ( (array) $all_logins as $login )		if ( $login->ID == $current_user->ID || !in_array($login->ID, $userids) )			$user_dropdown .= "<option value=\"" . esc_attr($login->ID) . "\">{$login->user_login}</option>";	$user_dropdown .= '</select>';	?>	</ul><?php if ( $go_delete ) : ?>	<fieldset><p><legend><?php _e('What should be done with posts and links owned by this user?'); ?></legend></p>	<ul style="list-style:none;">		<li><label><input type="radio" id="delete_option0" name="delete_option" value="delete" checked="checked" />		<?php _e('Delete all posts and links.'); ?></label></li>		<li><input type="radio" id="delete_option1" name="delete_option" value="reassign" />		<?php echo '<label for="delete_option1">'.__('Attribute all posts and links to:')."</label> $user_dropdown"; ?></li>	</ul></fieldset>	<input type="hidden" name="action" value="dodelete" />	<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Deletion'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for deletion.'); ?></p><?php endif; ?></div></form><?phpbreak;case 'doremove':	check_admin_referer('remove-users');	if ( empty($_REQUEST['users']) ) {		wp_redirect($redirect);		exit;	}	if ( !current_user_can('remove_users')  )		die(__('You can&#8217;t remove users.'));	$userids = $_REQUEST['users'];	$update = 'remove'; 	foreach ( $userids as $id ) {		$id = (int) $id;		if ( $id == $current_user->id && !is_super_admin() ) {			$update = 'err_admin_remove';			continue;		}		if ( !current_user_can('remove_user', $id) ) {			$update = 'err_admin_remove';			continue;		}		remove_user_from_blog($id, $blog_id);	}	$redirect = add_query_arg( array('update' => $update), $redirect);	wp_redirect($redirect);	exit;break;case 'remove':	check_admin_referer('bulk-users');	if ( empty($_REQUEST['users']) && empty($_REQUEST['user']) ) {		wp_redirect($redirect);		exit();	}	if ( !current_user_can('remove_users') )		$error = new WP_Error('edit_users', __('You can&#8217;t remove users.'));	if ( empty($_REQUEST['users']) )		$userids = array(intval($_REQUEST['user']));	else		$userids = $_REQUEST['users'];	include ('admin-header.php');?><form action="" method="post" name="updateusers" id="updateusers"><?php wp_nonce_field('remove-users') ?><?php echo $referer; ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Remove Users from Site'); ?></h2><p><?php _e('You have specified these users for removal:'); ?></p><ul><?php	$go_remove = false; 	foreach ( $userids as $id ) {		$id = (int) $id; 		$user = new WP_User($id);		if ( $id == $current_user->id && !is_super_admin() ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>The current user will not be removed.</strong>'), $id, $user->user_login) . "</li>\n";		} elseif ( !current_user_can('remove_user', $id) ) {			echo "<li>" . sprintf(__('ID #%1s: %2s <strong>You don\'t have permission to remove this user.</strong>'), $id, $user->user_login) . "</li>\n";		} else {			echo "<li><input type=\"hidden\" name=\"users[]\" value=\"{$id}\" />" . sprintf(__('ID #%1s: %2s'), $id, $user->user_login) . "</li>\n";			$go_remove = true;		} 	} 	?><?php if ( $go_remove ) : ?>		<input type="hidden" name="action" value="doremove" />		<p class="submit"><input type="submit" name="submit" value="<?php esc_attr_e('Confirm Removal'); ?>" class="button-secondary" /></p><?php else : ?>	<p><?php _e('There are no valid users selected for removal.'); ?></p><?php endif; ?></div></form><?phpbreak;default:	if ( !empty($_GET['_wp_http_referer']) ) {		wp_redirect(remove_query_arg(array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI'])));		exit;	}	include('./admin-header.php');	$usersearch = isset($_GET['usersearch']) ? $_GET['usersearch'] : null;	$userspage = isset($_GET['userspage']) ? $_GET['userspage'] : null;	$role = isset($_GET['role']) ? $_GET['role'] : null;	// Query the user IDs for this page	$wp_user_search = new WP_User_Search($usersearch, $userspage, $role);	// Query the post counts for this page	$post_counts = count_many_users_posts($wp_user_search->get_results());	// Query the users for this page	cache_users($wp_user_search->get_results());	$messages = array();	if ( isset($_GET['update']) ) :		switch($_GET['update']) {		case 'del':		case 'del_many':			$delete_count = isset($_GET['delete_count']) ? (int) $_GET['delete_count'] : 0;			$messages[] = '<div id="message" class="updated"><p>' . sprintf(_n('%s user deleted', '%s users deleted', $delete_count), $delete_count) . '</p></div>';			break;		case 'add':			$messages[] = '<div id="message" class="updated"><p>' . __('New user created.') . '</p></div>';			break;		case 'promote':			$messages[] = '<div id="message" class="updated"><p>' . __('Changed roles.') . '</p></div>';			break;		case 'err_admin_role':			$messages[] = '<div id="message" class="error"><p>' . __('The current user&#8217;s role must have user editing capabilities.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other user roles have been changed.') . '</p></div>';			break;		case 'err_admin_del':			$messages[] = '<div id="message" class="error"><p>' . __('You can&#8217;t delete the current user.') . '</p></div>';			$messages[] = '<div id="message" class="updated"><p>' . __('Other users have been deleted.') . '</p></div>';			break;		case 'remove':			$messages[] = '<div id="message" class="updated fade"><p>' . __('User removed from this site.') . '</p></div>';			break;		case 'err_admin_remove':			$messages[] = '<div id="message" class="error"><p>' . __("You can't remove the current user.") . '</p></div>';			$messages[] = '<div id="message" class="updated fade"><p>' . __('Other users have been removed.') . '</p></div>';			break;		}	endif; ?><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty($messages) ) {	foreach ( $messages as $msg )		echo $msg;} ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can( 'create_users' ) ) { ?>  <a href="user-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'user'); ?></a><?php }if ( isset($_GET['usersearch']) && $_GET['usersearch'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( $_GET['usersearch'] ) ); ?></h2><div class="filter"><form id="list-filter" action="" method="get"><ul class="subsubsub"><?php$users_of_blog = count_users();$total_users = $users_of_blog['total_users'];$avail_roles =& $users_of_blog['avail_roles'];unset($users_of_blog);$current_role = false;$class = empty($role) ? ' class="current"' : '';$role_links = array();$role_links[] = "<li><a href='users.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';foreach ( $wp_roles->get_names() as $this_role => $name ) {	if ( !isset($avail_roles[$this_role]) )		continue;	$class = '';	if ( $this_role == $role ) {		$current_role = $role;		$class = ' class="current"';	}	$name = translate_user_role( $name );	/* translators: User role name with count */	$name = sprintf( __('%1$s <span class="count">(%2$s)</span>'), $name, $avail_roles[$this_role] );	$role_links[] = "<li><a href='users.php?role=$this_role'$class>$name</a>";}echo implode( " |</li>\n", $role_links) . '</li>';unset($role_links);?></ul></form></div><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="user-search-input"><?php _e( 'Search Users' ); ?>:</label>	<input type="text" id="user-search-input" name="usersearch" value="<?php echo esc_attr($wp_user_search->search_term); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><label class="screen-reader-text" for="new_role"><?php _e('Change role to&hellip;') ?></label><select name="new_role" id="new_role"><option value=''><?php _e('Change role to&hellip;') ?></option><?php wp_dropdown_roles(); ?></select><input type="submit" value="<?php esc_attr_e('Change'); ?>" name="changeit" class="button-secondary" /><?php wp_nonce_field('bulk-users'); ?></div><br class="clear" /></div>	<?php if ( is_wp_error( $wp_user_search->search_errors ) ) : ?>		<div class="error">			<ul>			<?php				foreach ( $wp_user_search->search_errors->get_error_messages() as $message )					echo "<li>$message</li>";			?>			</ul>		</div>	<?php endif; ?><?php if ( $wp_user_search->get_results() ) : ?>	<?php if ( $wp_user_search->is_search() ) : ?>		<p><a href="users.php"><?php _e('&larr; Back to All Users'); ?></a></p>	<?php endif; ?><table class="widefat fixed" cellspacing="0"><thead><tr class="thead"><?php print_column_headers('users') ?></tr></thead><tfoot><tr class="thead"><?php print_column_headers('users', false) ?></tr></tfoot><tbody id="users" class="list:user user-list"><?php$style = '';foreach ( $wp_user_search->get_results() as $userid ) {	$user_object = new WP_User($userid);	$roles = $user_object->roles;	$role = array_shift($roles);	if ( is_multisite() && empty( $role ) )		continue;	$style = ( ' class="alternate"' == $style ) ? '' : ' class="alternate"';	echo "\n\t", user_row( $user_object, $style, $role, $post_counts[ $userid ] );}?></tbody></table><div class="tablenav"><?php if ( $wp_user_search->results_are_paged() ) : ?>	<div class="tablenav-pages"><?php $wp_user_search->page_links(); ?></div><?php endif; ?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( !is_multisite() && current_user_can('delete_users') ) { ?><option value="delete"><?php _e('Delete'); ?></option><?php } else { ?><option value="remove"><?php _e('Remove'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><?php endif; ?></form></div><?phpif ( is_multisite() ) {	foreach ( array('user_login' => 'user_login', 'first_name' => 'user_firstname', 'last_name' => 'user_lastname', 'email' => 'user_email', 'url' => 'user_uri', 'role' => 'user_role') as $formpost => $var ) {		$var = 'new_' . $var;		$$var = isset($_REQUEST[$formpost]) ? esc_attr(stripslashes($_REQUEST[$formpost])) : '';	}	unset($name);}?><br class="clear" /><?phpbreak;} // end of the $doaction switchinclude('./admin-footer.php');?>
<?php/** * The loop that displays posts. * * The loop displays the posts and the post content.  See * http://codex.wordpress.org/The_Loop to understand it and * http://codex.wordpress.org/Template_Tags to understand * the tags used in it. * * This can be overridden in child themes with loop.php or * loop-template.php, where 'template' is the loop context * requested by a template. For example, loop-index.php would * be used if it exists and we ask for the loop with: * <code>get_template_part( 'loop', 'index' );</code> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if ( $wp_query->max_num_pages > 1 ) : ?>	<div id="nav-above" class="navigation">		<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>		<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>	</div><!-- #nav-above --><?php endif; ?><?php /* If there are no posts to display, such as an empty archive page */ ?><?php if ( ! have_posts() ) : ?>	<div id="post-0" class="post error404 not-found">		<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>		<div class="entry-content">			<p><?php _e( 'Apologies, but no results were found for the requested archive. Perhaps searching will help find a related post.', 'twentyten' ); ?></p>			<?php get_search_form(); ?>		</div><!-- .entry-content -->	</div><!-- #post-0 --><?php endif; ?><?php	/* Start the Loop.	 *	 * In Twenty Ten we use the same loop in multiple contexts.	 * It is broken into three main parts: when we're displaying	 * posts that are in the gallery category, when we're displaying	 * posts in the asides category, and finally all other posts.	 *	 * Additionally, we sometimes check for whether we are on an	 * archive page, a search page, etc., allowing for small differences	 * in the loop on each template without actually duplicating	 * the rest of the loop that is shared.	 *	 * Without further ado, the loop:	 */ ?><?php while ( have_posts() ) : the_post(); ?><?php /* How to display posts in the Gallery category. */ ?>	<?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->			<div class="entry-content"><?php if ( post_password_required() ) : ?>				<?php the_content(); ?><?php else : ?>				<div class="gallery-thumb"><?php	$images = get_children( array( 'post_parent' => $post->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image', 'orderby' => 'menu_order', 'order' => 'ASC', 'numberposts' => 999 ) );	$total_images = count( $images );	$image = array_shift( $images );	$image_img_tag = wp_get_attachment_image( $image->ID, 'thumbnail' );?>					<a class="size-thumbnail" href="<?php the_permalink(); ?>"><?php echo $image_img_tag; ?></a>				</div><!-- .gallery-thumb -->				<p><em><?php printf( __( 'This gallery contains <a %1$s>%2$s photos</a>.', 'twentyten' ),						'href="' . get_permalink() . '" title="' . sprintf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ) . '" rel="bookmark"',						$total_images					); ?></em></p>				<?php the_excerpt(); ?><?php endif; ?>			</div><!-- .entry-content -->			<div class="entry-utility">				<a href="<?php echo get_term_link( _x('gallery', 'gallery category slug', 'twentyten'), 'category' ); ?>" title="<?php esc_attr_e( 'View posts in the Gallery category', 'twentyten' ); ?>"><?php _e( 'More Galleries', 'twentyten' ); ?></a>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display posts in the asides category */ ?>	<?php elseif ( in_category( _x('asides', 'asides category slug', 'twentyten') ) ) : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>		<?php if ( is_archive() || is_search() ) : // Display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->		<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>			</div><!-- .entry-content -->		<?php endif; ?>			<div class="entry-utility">				<?php twentyten_posted_on(); ?>				<span class="meta-sep">|</span>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## --><?php /* How to display all other posts. */ ?>	<?php else : ?>		<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>			<h2 class="entry-title"><a href="<?php the_permalink(); ?>" title="<?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?>" rel="bookmark"><?php the_title(); ?></a></h2>			<div class="entry-meta">				<?php twentyten_posted_on(); ?>			</div><!-- .entry-meta -->	<?php if ( is_archive() || is_search() ) : // Only display excerpts for archives and search. ?>			<div class="entry-summary">				<?php the_excerpt(); ?>			</div><!-- .entry-summary -->	<?php else : ?>			<div class="entry-content">				<?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?>				<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>			</div><!-- .entry-content -->	<?php endif; ?>			<div class="entry-utility">				<?php if ( count( get_the_category() ) ) : ?>					<span class="cat-links">						<?php printf( __( '<span class="%1$s">Posted in</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-cat-links', get_the_category_list( ', ' ) ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<?php					$tags_list = get_the_tag_list( '', ', ' );					if ( $tags_list ):				?>					<span class="tag-links">						<?php printf( __( '<span class="%1$s">Tagged</span> %2$s', 'twentyten' ), 'entry-utility-prep entry-utility-prep-tag-links', $tags_list ); ?>					</span>					<span class="meta-sep">|</span>				<?php endif; ?>				<span class="comments-link"><?php comments_popup_link( __( 'Leave a comment', 'twentyten' ), __( '1 Comment', 'twentyten' ), __( '% Comments', 'twentyten' ) ); ?></span>				<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>			</div><!-- .entry-utility -->		</div><!-- #post-## -->		<?php comments_template( '', true ); ?>	<?php endif; // This was the if statement that broke the loop into three parts based on categories. ?><?php endwhile; // End the loop. Whew. ?><?php /* Display navigation to next/previous pages when applicable */ ?><?php if (  $wp_query->max_num_pages > 1 ) : ?>				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php next_posts_link( __( '<span class="meta-nav">&larr;</span> Older posts', 'twentyten' ) ); ?></div>					<div class="nav-next"><?php previous_posts_link( __( 'Newer posts <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>				</div><!-- #nav-below --><?php endif; ?>
<?php/** * Edit tag form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( empty($tag_ID) ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'You did not select an item for editing.' ); ?></strong></p></div><?php	return;}if ( 'category' == $taxonomy )	do_action('edit_category_form_pre', $tag );else	do_action('edit_tag_form_pre', $tag);do_action($taxonomy . '_pre_edit_form', $tag, $taxonomy);  ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo $tax->labels->edit_item; ?></h2><div id="ajax-response"></div><form name="edittag" id="edittag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="editedtag" /><input type="hidden" name="tag_ID" value="<?php echo esc_attr($tag->term_id) ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('update-tag_' . $tag_ID); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _ex('Name', 'Taxonomy Name'); ?></label></th>			<td><input name="name" id="name" type="text" value="<?php if ( isset( $tag->name ) ) echo esc_attr($tag->name); ?>" size="40" aria-required="true" />			<p class="description"><?php _e('The name is how it appears on your site.'); ?></p></td>		</tr><?php if ( !global_terms_enabled() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php if ( isset( $tag->slug ) ) echo esc_attr(apply_filters('editable_slug', $tag->slug)); ?>" size="40" />			<p class="description"><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></td>		</tr><?php } ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label></th>			<td>				<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'name' => 'parent', 'orderby' => 'name', 'taxonomy' => $taxonomy, 'selected' => $tag->parent, 'exclude' => $tag->term_id, 'hierarchical' => true, 'show_option_none' => __('None'))); ?><br />				<?php if ( 'category' == $taxonomy ) : ?>				<span class="description"><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></span>				<?php endif; ?>			</td>		</tr><?php endif; // is_taxonomy_hierarchical() ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _ex('Description', 'Taxonomy Description'); ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo esc_html($tag->description); ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default, however some themes may show it.'); ?></span></td>		</tr>		<?php		if ( 'category' == $taxonomy )			do_action('edit_category_form_fields', $tag);		else			do_action('edit_tag_form_fields', $tag);		do_action($taxonomy . '_edit_form_fields', $tag, $taxonomy);		?>	</table><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form', $tag);else	do_action('edit_tag_form', $tag);do_action($taxonomy . '_edit_form', $tag, $taxonomy);?><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr( __( 'Update' ) ); ?>" /></p></form></div>
<?php/** * Install plugin administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_plugins') )	wp_die(__('You do not have sufficient permissions to install plugins on this site.'));include(ABSPATH . 'wp-admin/includes/plugin-install.php');$title = __('Install Plugins');$parent_file = 'plugins.php';wp_reset_vars( array('tab', 'paged') );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Plugin Installer');$tabs['popular']  = _x('Popular','Plugin Installer');$tabs['new']      = _x('Newest','Plugin Installer');$tabs['updated']  = _x('Recently Updated','Plugin Installer');$nonmenu_tabs = array('plugin-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_plugins_tabs', $tabs );$nonmenu_tabs = apply_filters('install_plugins_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;wp_enqueue_style( 'plugin-install' );wp_enqueue_script( 'plugin-install' );if ( 'plugin-information' != $tab )	add_thickbox();$body_id = $tab;do_action('install_plugins_pre_' . $tab); //Used to override the general interface, Eg, install or plugin information.add_contextual_help($current_screen,	'<p>' . sprintf(__('Plugins hook into WordPress to extend its functionality with custom features. Plugins are developed independently from WordPress core by thousands of developers all over the world. All plugins in the official <a href="%s" target="_blank">WordPress.org Plugin Directory</a> are compatible with the WordPress GPL v2 license. You can find new plugins to install by searching or browsing the Directory right here in your own Plugins section.'), 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('If you know what you&#8217;re looking for, Search is your best bet. The Search screen has options to search the WordPress.org Plugin Directory for a particular Term, Author, or Tag. You can also search the directory by selecting a popular tags. Tags in larger type mean more plugins have been labeled with that tag.') . '</p>' .	'<p>' . __('If you just want to get an idea of what&#8217;s available, you can browse Featured, Popular, Newest, and Recently Updated plugins by using the links in the upper left of the screen. These sections rotate regularly.') . '</p>' .	'<p>' . __('If you want to install a plugin that you&#8217;ve downloaded elsewhere, click Upload in the upper left. You will be prompted to upload the .zip package, and once uploaded, you can activate the new plugin.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Add_New_SubPanel" target="_blank">Documentation on Installing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('plugin-install.php?tab=' . $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_plugins_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * Edit plugin editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_plugins') )	wp_die( __('You do not have sufficient permissions to edit plugins for this site.') );$title = __("Edit Plugins");$parent_file = 'plugins.php';wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'plugin'));wp_admin_css( 'theme-editor' );$plugins = get_plugins();if ( empty($plugins) )	wp_die( __('There are no plugins installed on this site.') );if ( isset($_REQUEST['file']) )	$plugin = stripslashes($_REQUEST['file']);if ( empty($plugin) ) {	$plugin = array_keys($plugins);	$plugin = $plugin[0];}$plugin_files = get_plugin_files($plugin);if ( empty($file) )	$file = $plugin_files[0];else	$file = stripslashes($file);$file = validate_file_to_edit($file, $plugin_files);$real_file = WP_PLUGIN_DIR . '/' . $file;$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;switch ( $action ) {case 'update':	check_admin_referer('edit-plugin_' . $file);	$newcontent = stripslashes($_POST['newcontent']);	if ( is_writeable($real_file) ) {		$f = fopen($real_file, 'w+');		fwrite($f, $newcontent);		fclose($f);		$network_wide = is_plugin_active_for_network( $file );		// Deactivate so we can test it.		if ( is_plugin_active($file) || isset($_POST['phperror']) ) {			if ( is_plugin_active($file) )				deactivate_plugins($file, true);			update_option('recently_activated', array($file => time()) + (array)get_option('recently_activated'));			wp_redirect(add_query_arg('_wpnonce', wp_create_nonce('edit-plugin-test_' . $file), "plugin-editor.php?file=$file&liveupdate=1&scrollto=$scrollto&networkwide=" . $network_wide));			exit;		}		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");	} else {		wp_redirect("plugin-editor.php?file=$file&scrollto=$scrollto");	}	exit;break;default:	if ( isset($_GET['liveupdate']) ) {		check_admin_referer('edit-plugin-test_' . $file);		$error = validate_plugin($file);		if ( is_wp_error($error) )			wp_die( $error );		if ( ! is_plugin_active($file) )			activate_plugin($file, "plugin-editor.php?file=$file&phperror=1", ! empty( $_GET['networkwide'] ) ); // we'll override this later if the plugin can be included without fatal error		wp_redirect("plugin-editor.php?file=$file&a=te&scrollto=$scrollto");		exit;	}	// List of allowable extensions	$editable_extensions = array('php', 'txt', 'text', 'js', 'css', 'html', 'htm', 'xml', 'inc', 'include');	$editable_extensions = (array) apply_filters('editable_extensions', $editable_extensions);	if ( ! is_file($real_file) ) {		wp_die(sprintf('<p>%s</p>', __('No such file exists! Double check the name and try again.')));	} else {		// Get the extension of the file		if ( preg_match('/\.([^.]+)$/', $real_file, $matches) ) {			$ext = strtolower($matches[1]);			// If extension is not in the acceptable list, skip it			if ( !in_array( $ext, $editable_extensions) )				wp_die(sprintf('<p>%s</p>', __('Files of this type are not editable.')));		}	}	add_contextual_help($current_screen,		'<p>' . __('You can use the editor to make changes to any of your plugins&#8217; individual PHP files. Be aware that if you make changes, plugins updates will overwrite your customizations.') . '</p>' .		'<p>' . __('Choose a plugin to edit from the menu in the upper right and click the Select button. Click once on any file name to load it in the editor, and make your changes. Don&#8217;t forget to save your changes (Update File) when you&#8217;re finished.') . '</p>' .		'<p>' . __('The Documentation menu below the editor lists the PHP functions recognized in the plugin file. Clicking Lookup takes you to a web page about that particular function.') . '</p>' .		'<p>' . __('If you want to make changes but don&#8217;t want them to be overwritten when the plugin is updated, you may be ready to think about writing your own plugin. For information on how to edit a plugin or start from scratch, check out the links below.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Plugins_Editor_SubPanel" target="_blank">Documentation on Editing Plugins</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php');	update_recently_edited(WP_PLUGIN_DIR . '/' . $file);	$content = file_get_contents( $real_file );	if ( '.php' == substr( $real_file, strrpos( $real_file, '.' ) ) ) {		$functions = wp_doc_link_parse( $content );		if ( !empty($functions) ) {			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . __( 'Function Name&hellip;' ) . '</option>';			foreach ( $functions as $function) {				$docs_select .= '<option value="' . esc_attr( $function ) . '">' . esc_html( $function ) . '()</option>';			}			$docs_select .= '</select>';		}	}	$content = htmlspecialchars( $content );	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php elseif (isset($_GET['phperror'])) : ?> <div id="message" class="updated"><p><?php _e('This plugin has been deactivated because your changes resulted in a <strong>fatal error</strong>.') ?></p>	<?php		if ( wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $file) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php bloginfo('wpurl'); ?>/wp-admin/plugins.php?action=error_scrape&amp;plugin=<?php echo esc_attr($file); ?>&amp;_wpnonce=<?php echo esc_attr($_GET['_error_nonce']); ?>"></iframe>	<?php } ?></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php	if ( is_plugin_active($plugin) ) {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (active)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (active)'), $file);	} else {		if ( is_writeable($real_file) )			echo sprintf(__('Editing <strong>%s</strong> (inactive)'), $file);		else			echo sprintf(__('Browsing <strong>%s</strong> (inactive)'), $file);	}	?></big></div><div class="alignright">	<form action="plugin-editor.php" method="post">		<strong><label for="plugin"><?php _e('Select plugin to edit:'); ?> </label></strong>		<select name="plugin" id="plugin"><?php	foreach ( $plugins as $plugin_key => $a_plugin ) {		$plugin_name = $a_plugin['Name'];		if ( $plugin_key == $plugin )			$selected = " selected='selected'";		else			$selected = '';		$plugin_name = esc_attr($plugin_name);		$plugin_key = esc_attr($plugin_key);		echo "\n\t<option value=\"$plugin_key\" $selected>$plugin_name</option>";	}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div><div id="templateside">	<h3><?php _e('Plugin Files'); ?></h3>	<ul><?phpforeach ( $plugin_files as $plugin_file ) :	// Get the extension of the file	if ( preg_match('/\.([^.]+)$/', $plugin_file, $matches) ) {		$ext = strtolower($matches[1]);		// If extension is not in the acceptable list, skip it		if ( !in_array( $ext, $editable_extensions ) )			continue;	} else {		// No extension found		continue;	}?>		<li<?php echo $file == $plugin_file ? ' class="highlight"' : ''; ?>><a href="plugin-editor.php?file=<?php echo $plugin_file; ?>&amp;plugin=<?php echo $plugin; ?>"><?php echo $plugin_file ?></a></li><?php endforeach; ?>	</ul></div><form name="template" id="template" action="plugin-editor.php" method="post">	<?php wp_nonce_field('edit-plugin_' . $file) ?>		<div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		<input type="hidden" name="action" value="update" />		<input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		<input type="hidden" name="plugin" value="<?php echo esc_attr($plugin) ?>" />		<input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		</div>		<?php if ( !empty( $docs_select ) ) : ?>		<div id="documentation" class="hide-if-no-js"><label for="docs-list"><?php _e('Documentation:') ?></label> <?php echo $docs_select ?> <input type="button" class="button" value="<?php esc_attr_e( 'Lookup' ) ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" /></div>		<?php endif; ?><?php if ( is_writeable($real_file) ) : ?>	<?php if ( in_array( $file, (array) get_option( 'active_plugins', array() ) ) ) { ?>		<p><?php _e('<strong>Warning:</strong> Making changes to active plugins is not recommended.  If your changes cause a fatal error, the plugin will be automatically deactivated.'); ?></p>	<?php } ?>	<p class="submit">	<?php		if ( isset($_GET['phperror']) )			echo "<input type='hidden' name='phperror' value='1' /><input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File and Attempt to Reactivate') . "' tabindex='2' />";		else			echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";	?>	</p><?php else : ?>	<p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?></form><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?php	break;}include("./admin-footer.php");
<?php/** * Manages WordPress comments * * @package WordPress * @subpackage Comment *//** * Checks whether a comment passes internal checks to be allowed to add. * * If comment moderation is set in the administration, then all comments, * regardless of their type and whitelist will be set to false. If the number of * links exceeds the amount in the administration, then the check fails. If any * of the parameter contents match the blacklist of words, then the check fails. * * If the number of links exceeds the amount in the administration, then the * check fails. If any of the parameter contents match the blacklist of words, * then the check fails. * * If the comment is a trackback and part of the blogroll, then the trackback is * automatically whitelisted. If the comment author was approved before, then * the comment is automatically whitelisted. * * If none of the checks fail, then the failback is to set the check to pass * (return true). * * @since 1.2.0 * @uses $wpdb * * @param string $author Comment Author's name * @param string $email Comment Author's email * @param string $url Comment Author's URL * @param string $comment Comment contents * @param string $user_ip Comment Author's IP address * @param string $user_agent Comment Author's User Agent * @param string $comment_type Comment type, either user submitted comment, *		trackback, or pingback * @return bool Whether the checks passed (true) and the comments should be *		displayed or set to moderated */function check_comment($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type) {	global $wpdb;	if ( 1 == get_option('comment_moderation') )		return false; // If moderation is set to manual	// Check # of external links	if ( $max_links = get_option( 'comment_max_links' ) ) {		$num_links = preg_match_all( '/<a [^>]*href/i', apply_filters( 'comment_text', $comment ), $out );		$num_links = apply_filters( 'comment_max_links_url', $num_links, $url ); // provide for counting of $url as a link		if ( $num_links >= $max_links )			return false;	}	$mod_keys = trim(get_option('moderation_keys'));	if ( !empty($mod_keys) ) {		$words = explode("\n", $mod_keys );		foreach ( (array) $words as $word) {			$word = trim($word);			// Skip empty lines			if ( empty($word) )				continue;			// Do some escaping magic so that '#' chars in the			// spam words don't break things:			$word = preg_quote($word, '#');			$pattern = "#$word#i";			if ( preg_match($pattern, $author) ) return false;			if ( preg_match($pattern, $email) ) return false;			if ( preg_match($pattern, $url) ) return false;			if ( preg_match($pattern, $comment) ) return false;			if ( preg_match($pattern, $user_ip) ) return false;			if ( preg_match($pattern, $user_agent) ) return false;		}	}	// Comment whitelisting:	if ( 1 == get_option('comment_whitelist')) {		if ( 'trackback' == $comment_type || 'pingback' == $comment_type ) { // check if domain is in blogroll			$uri = parse_url($url);			$domain = $uri['host'];			$uri = parse_url( home_url() );			$home_domain = $uri['host'];			if ( $wpdb->get_var($wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_url LIKE (%s) LIMIT 1", '%'.$domain.'%')) || $domain == $home_domain )				return true;			else				return false;		} elseif ( $author != '' && $email != '' ) {			// expected_slashed ($author, $email)			$ok_to_comment = $wpdb->get_var("SELECT comment_approved FROM $wpdb->comments WHERE comment_author = '$author' AND comment_author_email = '$email' and comment_approved = '1' LIMIT 1");			if ( ( 1 == $ok_to_comment ) &&				( empty($mod_keys) || false === strpos( $email, $mod_keys) ) )					return true;			else				return false;		} else {			return false;		}	}	return true;}/** * Retrieve the approved comments for post $post_id. * * @since 2.0.0 * @uses $wpdb * * @param int $post_id The ID of the post * @return array $comments The approved comments */function get_approved_comments($post_id) {	global $wpdb;	return $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_approved = '1' ORDER BY comment_date", $post_id));}/** * Retrieves comment data given a comment ID or comment object. * * If an object is passed then the comment data will be cached and then returned * after being passed through a filter. If the comment is empty, then the global * comment variable will be used, if it is set. * * If the comment is empty, then the global comment variable will be used, if it * is set. * * @since 2.0.0 * @uses $wpdb * * @param object|string|int $comment Comment to retrieve. * @param string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants. * @return object|array|null Depends on $output value. */function &get_comment(&$comment, $output = OBJECT) {	global $wpdb;	$null = null;	if ( empty($comment) ) {		if ( isset($GLOBALS['comment']) )			$_comment = & $GLOBALS['comment'];		else			$_comment = null;	} elseif ( is_object($comment) ) {		wp_cache_add($comment->comment_ID, $comment, 'comment');		$_comment = $comment;	} else {		if ( isset($GLOBALS['comment']) && ($GLOBALS['comment']->comment_ID == $comment) ) {			$_comment = & $GLOBALS['comment'];		} elseif ( ! $_comment = wp_cache_get($comment, 'comment') ) {			$_comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID = %d LIMIT 1", $comment));			if ( ! $_comment )				return $null;			wp_cache_add($_comment->comment_ID, $_comment, 'comment');		}	}	$_comment = apply_filters('get_comment', $_comment);	if ( $output == OBJECT ) {		return $_comment;	} elseif ( $output == ARRAY_A ) {		$__comment = get_object_vars($_comment);		return $__comment;	} elseif ( $output == ARRAY_N ) {		$__comment = array_values(get_object_vars($_comment));		return $__comment;	} else {		return $_comment;	}}/** * Retrieve a list of comments. * * The comment list can be for the blog as a whole or for an individual post. * * The list of comment arguments are 'status', 'orderby', 'comment_date_gmt', * 'order', 'number', 'offset', and 'post_id'. * * @since 2.7.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options to override defaults. * @return array List of comments. */function get_comments( $args = '' ) {	global $wpdb;	$defaults = array(		'author_email' => '',		'ID' => '',		'karma' => '',		'number' => '',		'offset' => '',		'orderby' => '',		'order' => 'DESC',		'parent' => '',		'post_ID' => '',		'post_id' => 0,		'status' => '',		'type' => '',		'user_id' => '',	);	$args = wp_parse_args( $args, $defaults );	extract( $args, EXTR_SKIP );	// $args can be whatever, only use the args defined in defaults to compute the key	$key = md5( serialize( compact(array_keys($defaults)) )  );	$last_changed = wp_cache_get('last_changed', 'comment');	if ( !$last_changed ) {		$last_changed = time();		wp_cache_set('last_changed', $last_changed, 'comment');	}	$cache_key = "get_comments:$key:$last_changed";	if ( $cache = wp_cache_get( $cache_key, 'comment' ) ) {		return $cache;	}	$post_id = absint($post_id);	if ( 'hold' == $status )		$approved = "comment_approved = '0'";	elseif ( 'approve' == $status )		$approved = "comment_approved = '1'";	elseif ( 'spam' == $status )		$approved = "comment_approved = 'spam'";	elseif ( 'trash' == $status )		$approved = "comment_approved = 'trash'";	else		$approved = "( comment_approved = '0' OR comment_approved = '1' )";	$order = ( 'ASC' == $order ) ? 'ASC' : 'DESC';	if ( ! empty( $orderby ) ) {		$ordersby = is_array($orderby) ? $orderby : preg_split('/[,\s]/', $orderby);		$ordersby = array_intersect(			$ordersby,			array(				'comment_agent',				'comment_approved',				'comment_author',				'comment_author_email',				'comment_author_IP',				'comment_author_url',				'comment_content',				'comment_date',				'comment_date_gmt',				'comment_ID',				'comment_karma',				'comment_parent',				'comment_post_ID',				'comment_type',				'user_id',			)		);		$orderby = empty( $ordersby ) ? 'comment_date_gmt' : implode(', ', $ordersby);	} else {		$orderby = 'comment_date_gmt';	}	$number = absint($number);	$offset = absint($offset);	if ( !empty($number) ) {		if ( $offset )			$number = 'LIMIT ' . $offset . ',' . $number;		else			$number = 'LIMIT ' . $number;	} else {		$number = '';	}	$post_where = '';	if ( ! empty($post_id) )		$post_where .= $wpdb->prepare( 'comment_post_ID = %d AND ', $post_id );	if ( '' !== $author_email )		$post_where .= $wpdb->prepare( 'comment_author_email = %s AND ', $author_email );	if ( '' !== $karma )		$post_where .= $wpdb->prepare( 'comment_karma = %d AND ', $karma );	if ( 'comment' == $type )		$post_where .= "comment_type = '' AND ";	elseif ( ! empty( $type ) )		$post_where .= $wpdb->prepare( 'comment_type = %s AND ', $type );	if ( '' !== $parent )		$post_where .= $wpdb->prepare( 'comment_parent = %d AND ', $parent );	if ( '' !== $user_id )		$post_where .= $wpdb->prepare( 'user_id = %d AND ', $user_id );	$comments = $wpdb->get_results( "SELECT * FROM $wpdb->comments WHERE $post_where $approved ORDER BY $orderby $order $number" );	wp_cache_add( $cache_key, $comments, 'comment' );	return $comments;}/** * Retrieve all of the WordPress supported comment statuses. * * Comments have a limited set of valid status values, this provides the comment * status values and descriptions. * * @package WordPress * @subpackage Post * @since 2.7.0 * * @return array List of comment statuses. */function get_comment_statuses( ) {	$status = array(		'hold'		=> __('Unapproved'),		/* translators: comment status  */		'approve'	=> _x('Approved', 'adjective'),		/* translators: comment status */		'spam'		=> _x('Spam', 'adjective'),	);	return $status;}/** * The date the last comment was modified. * * @since 1.5.0 * @uses $wpdb * @global array $cache_lastcommentmodified * * @param string $timezone Which timezone to use in reference to 'gmt', 'blog', *		or 'server' locations. * @return string Last comment modified date. */function get_lastcommentmodified($timezone = 'server') {	global $cache_lastcommentmodified, $wpdb;	if ( isset($cache_lastcommentmodified[$timezone]) )		return $cache_lastcommentmodified[$timezone];	$add_seconds_server = date('Z');	switch ( strtolower($timezone)) {		case 'gmt':			$lastcommentmodified = $wpdb->get_var("SELECT comment_date_gmt FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1");			break;		case 'blog':			$lastcommentmodified = $wpdb->get_var("SELECT comment_date FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1");			break;		case 'server':			$lastcommentmodified = $wpdb->get_var($wpdb->prepare("SELECT DATE_ADD(comment_date_gmt, INTERVAL %s SECOND) FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1", $add_seconds_server));			break;	}	$cache_lastcommentmodified[$timezone] = $lastcommentmodified;	return $lastcommentmodified;}/** * The amount of comments in a post or total comments. * * A lot like {@link wp_count_comments()}, in that they both return comment * stats (albeit with different types). The {@link wp_count_comments()} actual * caches, but this function does not. * * @since 2.0.0 * @uses $wpdb * * @param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide. * @return array The amount of spam, approved, awaiting moderation, and total comments. */function get_comment_count( $post_id = 0 ) {	global $wpdb;	$post_id = (int) $post_id;	$where = '';	if ( $post_id > 0 ) {		$where = $wpdb->prepare("WHERE comment_post_ID = %d", $post_id);	}	$totals = (array) $wpdb->get_results("		SELECT comment_approved, COUNT( * ) AS total		FROM {$wpdb->comments}		{$where}		GROUP BY comment_approved	", ARRAY_A);	$comment_count = array(		"approved"              => 0,		"awaiting_moderation"   => 0,		"spam"                  => 0,		"total_comments"        => 0	);	foreach ( $totals as $row ) {		switch ( $row['comment_approved'] ) {			case 'spam':				$comment_count['spam'] = $row['total'];				$comment_count["total_comments"] += $row['total'];				break;			case 1:				$comment_count['approved'] = $row['total'];				$comment_count['total_comments'] += $row['total'];				break;			case 0:				$comment_count['awaiting_moderation'] = $row['total'];				$comment_count['total_comments'] += $row['total'];				break;			default:				break;		}	}	return $comment_count;}//// Comment meta functions///** * Add meta data field to a comment. * * @since 2.9.0 * @uses add_metadata * @link http://codex.wordpress.org/Function_Reference/add_comment_meta * * @param int $comment_id Comment ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_comment_meta($comment_id, $meta_key, $meta_value, $unique = false) {	return add_metadata('comment', $comment_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a comment. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 2.9.0 * @uses delete_metadata * @link http://codex.wordpress.org/Function_Reference/delete_comment_meta * * @param int $comment_id comment ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_comment_meta($comment_id, $meta_key, $meta_value = '') {	return delete_metadata('comment', $comment_id, $meta_key, $meta_value);}/** * Retrieve comment meta field for a comment. * * @since 2.9.0 * @uses get_metadata * @link http://codex.wordpress.org/Function_Reference/get_comment_meta * * @param int $comment_id Comment ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_comment_meta($comment_id, $key, $single = false) {	return get_metadata('comment', $comment_id, $key, $single);}/** * Update comment meta field based on comment ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and comment ID. * * If the meta field for the comment does not exist, it will be added. * * @since 2.9.0 * @uses update_metadata * @link http://codex.wordpress.org/Function_Reference/update_comment_meta * * @param int $comment_id Comment ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_comment_meta($comment_id, $meta_key, $meta_value, $prev_value = '') {	return update_metadata('comment', $comment_id, $meta_key, $meta_value, $prev_value);}/** * Sanitizes the cookies sent to the user already. * * Will only do anything if the cookies have already been created for the user. * Mostly used after cookies had been sent to use elsewhere. * * @since 2.0.4 */function sanitize_comment_cookies() {	if ( isset($_COOKIE['comment_author_'.COOKIEHASH]) ) {		$comment_author = apply_filters('pre_comment_author_name', $_COOKIE['comment_author_'.COOKIEHASH]);		$comment_author = stripslashes($comment_author);		$comment_author = esc_attr($comment_author);		$_COOKIE['comment_author_'.COOKIEHASH] = $comment_author;	}	if ( isset($_COOKIE['comment_author_email_'.COOKIEHASH]) ) {		$comment_author_email = apply_filters('pre_comment_author_email', $_COOKIE['comment_author_email_'.COOKIEHASH]);		$comment_author_email = stripslashes($comment_author_email);		$comment_author_email = esc_attr($comment_author_email);		$_COOKIE['comment_author_email_'.COOKIEHASH] = $comment_author_email;	}	if ( isset($_COOKIE['comment_author_url_'.COOKIEHASH]) ) {		$comment_author_url = apply_filters('pre_comment_author_url', $_COOKIE['comment_author_url_'.COOKIEHASH]);		$comment_author_url = stripslashes($comment_author_url);		$_COOKIE['comment_author_url_'.COOKIEHASH] = $comment_author_url;	}}/** * Validates whether this comment is allowed to be made. * * @since 2.0.0 * @uses $wpdb * @uses apply_filters() Calls 'pre_comment_approved' hook on the type of comment * @uses apply_filters() Calls 'comment_duplicate_trigger' hook on commentdata. * @uses do_action() Calls 'check_comment_flood' hook on $comment_author_IP, $comment_author_email, and $comment_date_gmt * * @param array $commentdata Contains information on the comment * @return mixed Signifies the approval status (0|1|'spam') */function wp_allow_comment($commentdata) {	global $wpdb;	extract($commentdata, EXTR_SKIP);	// Simple duplicate check	// expected_slashed ($comment_post_ID, $comment_author, $comment_author_email, $comment_content)	$dupe = "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = '$comment_post_ID' AND comment_approved != 'trash' AND ( comment_author = '$comment_author' ";	if ( $comment_author_email )		$dupe .= "OR comment_author_email = '$comment_author_email' ";	$dupe .= ") AND comment_content = '$comment_content' LIMIT 1";	if ( $wpdb->get_var($dupe) ) {		do_action( 'comment_duplicate_trigger', $commentdata );		if ( defined('DOING_AJAX') )			die( __('Duplicate comment detected; it looks as though you&#8217;ve already said that!') );		wp_die( __('Duplicate comment detected; it looks as though you&#8217;ve already said that!') );	}	do_action( 'check_comment_flood', $comment_author_IP, $comment_author_email, $comment_date_gmt );	if ( isset($user_id) && $user_id) {		$userdata = get_userdata($user_id);		$user = new WP_User($user_id);		$post_author = $wpdb->get_var($wpdb->prepare("SELECT post_author FROM $wpdb->posts WHERE ID = %d LIMIT 1", $comment_post_ID));	}	if ( isset($userdata) && ( $user_id == $post_author || $user->has_cap('moderate_comments') ) ) {		// The author and the admins get respect.		$approved = 1;	 } else {		// Everyone else's comments will be checked.		if ( check_comment($comment_author, $comment_author_email, $comment_author_url, $comment_content, $comment_author_IP, $comment_agent, $comment_type) )			$approved = 1;		else			$approved = 0;		if ( wp_blacklist_check($comment_author, $comment_author_email, $comment_author_url, $comment_content, $comment_author_IP, $comment_agent) )			$approved = 'spam';	}	$approved = apply_filters('pre_comment_approved', $approved);	return $approved;}/** * Check whether comment flooding is occurring. * * Won't run, if current user can manage options, so to not block * administrators. * * @since 2.3.0 * @uses $wpdb * @uses apply_filters() Calls 'comment_flood_filter' filter with first *		parameter false, last comment timestamp, new comment timestamp. * @uses do_action() Calls 'comment_flood_trigger' action with parameters with *		last comment timestamp and new comment timestamp. * * @param string $ip Comment IP. * @param string $email Comment author email address. * @param string $date MySQL time string. */function check_comment_flood_db( $ip, $email, $date ) {	global $wpdb;	if ( current_user_can( 'manage_options' ) )		return; // don't throttle admins	$hour_ago = gmdate( 'Y-m-d H:i:s', time() - 3600 );	if ( $lasttime = $wpdb->get_var( $wpdb->prepare( "SELECT `comment_date_gmt` FROM `$wpdb->comments` WHERE `comment_date_gmt` >= %s AND ( `comment_author_IP` = %s OR `comment_author_email` = %s ) ORDER BY `comment_date_gmt` DESC LIMIT 1", $hour_ago, $ip, $email ) ) ) {		$time_lastcomment = mysql2date('U', $lasttime, false);		$time_newcomment  = mysql2date('U', $date, false);		$flood_die = apply_filters('comment_flood_filter', false, $time_lastcomment, $time_newcomment);		if ( $flood_die ) {			do_action('comment_flood_trigger', $time_lastcomment, $time_newcomment);			if ( defined('DOING_AJAX') )				die( __('You are posting comments too quickly.  Slow down.') );			wp_die( __('You are posting comments too quickly.  Slow down.'), '', array('response' => 403) );		}	}}/** * Separates an array of comments into an array keyed by comment_type. * * @since 2.7.0 * * @param array $comments Array of comments * @return array Array of comments keyed by comment_type. */function &separate_comments(&$comments) {	$comments_by_type = array('comment' => array(), 'trackback' => array(), 'pingback' => array(), 'pings' => array());	$count = count($comments);	for ( $i = 0; $i < $count; $i++ ) {		$type = $comments[$i]->comment_type;		if ( empty($type) )			$type = 'comment';		$comments_by_type[$type][] = &$comments[$i];		if ( 'trackback' == $type || 'pingback' == $type )			$comments_by_type['pings'][] = &$comments[$i];	}	return $comments_by_type;}/** * Calculate the total number of comment pages. * * @since 2.7.0 * @uses get_query_var() Used to fill in the default for $per_page parameter. * @uses get_option() Used to fill in defaults for parameters. * @uses Walker_Comment * * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments * @param int $per_page Optional comments per page. * @param boolean $threaded Optional control over flat or threaded comments. * @return int Number of comment pages. */function get_comment_pages_count( $comments = null, $per_page = null, $threaded = null ) {	global $wp_query;	if ( null === $comments && null === $per_page && null === $threaded && !empty($wp_query->max_num_comment_pages) )		return $wp_query->max_num_comment_pages;	if ( !$comments || !is_array($comments) )		$comments = $wp_query->comments;	if ( empty($comments) )		return 0;	if ( !isset($per_page) )		$per_page = (int) get_query_var('comments_per_page');	if ( 0 === $per_page )		$per_page = (int) get_option('comments_per_page');	if ( 0 === $per_page )		return 1;	if ( !isset($threaded) )		$threaded = get_option('thread_comments');	if ( $threaded ) {		$walker = new Walker_Comment;		$count = ceil( $walker->get_number_of_root_elements( $comments ) / $per_page );	} else {		$count = ceil( count( $comments ) / $per_page );	}	return $count;}/** * Calculate what page number a comment will appear on for comment paging. * * @since 2.7.0 * @uses get_comment() Gets the full comment of the $comment_ID parameter. * @uses get_option() Get various settings to control function and defaults. * @uses get_page_of_comment() Used to loop up to top level comment. * * @param int $comment_ID Comment ID. * @param array $args Optional args. * @return int|null Comment page number or null on error. */function get_page_of_comment( $comment_ID, $args = array() ) {	global $wpdb;	if ( !$comment = get_comment( $comment_ID ) )		return;	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_query_var('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] < 1 )		return 1;	if ( '' === $args['max_depth'] ) {		if ( get_option('thread_comments') )			$args['max_depth'] = get_option('thread_comments_depth');		else			$args['max_depth'] = -1;	}	// Find this comment's top level parent if threading is enabled	if ( $args['max_depth'] > 1 && 0 != $comment->comment_parent )		return get_page_of_comment( $comment->comment_parent, $args );	$allowedtypes = array(		'comment' => '',		'pingback' => 'pingback',		'trackback' => 'trackback',	);	$comtypewhere = ( 'all' != $args['type'] && isset($allowedtypes[$args['type']]) ) ? " AND comment_type = '" . $allowedtypes[$args['type']] . "'" : '';	// Count comments older than this one	$oldercoms = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(comment_ID) FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_parent = 0 AND comment_approved = '1' AND comment_date_gmt < '%s'" . $comtypewhere, $comment->comment_post_ID, $comment->comment_date_gmt ) );	// No older comments? Then it's page #1.	if ( 0 == $oldercoms )		return 1;	// Divide comments older than this one by comments per page to get this comment's page number	return ceil( ( $oldercoms + 1 ) / $args['per_page'] );}/** * Does comment contain blacklisted characters or words. * * @since 1.5.0 * @uses do_action() Calls 'wp_blacklist_check' hook for all parameters. * * @param string $author The author of the comment * @param string $email The email of the comment * @param string $url The url used in the comment * @param string $comment The comment content * @param string $user_ip The comment author IP address * @param string $user_agent The author's browser user agent * @return bool True if comment contains blacklisted content, false if comment does not */function wp_blacklist_check($author, $email, $url, $comment, $user_ip, $user_agent) {	do_action('wp_blacklist_check', $author, $email, $url, $comment, $user_ip, $user_agent);	$mod_keys = trim( get_option('blacklist_keys') );	if ( '' == $mod_keys )		return false; // If moderation keys are empty	$words = explode("\n", $mod_keys );	foreach ( (array) $words as $word ) {		$word = trim($word);		// Skip empty lines		if ( empty($word) ) { continue; }		// Do some escaping magic so that '#' chars in the		// spam words don't break things:		$word = preg_quote($word, '#');		$pattern = "#$word#i";		if (			   preg_match($pattern, $author)			|| preg_match($pattern, $email)			|| preg_match($pattern, $url)			|| preg_match($pattern, $comment)			|| preg_match($pattern, $user_ip)			|| preg_match($pattern, $user_agent)		 )			return true;	}	return false;}/** * Retrieve total comments for blog or single post. * * The properties of the returned object contain the 'moderated', 'approved', * and spam comments for either the entire blog or single post. Those properties * contain the amount of comments that match the status. The 'total_comments' * property contains the integer of total comments. * * The comment stats are cached and then retrieved, if they already exist in the * cache. * * @since 2.5.0 * * @param int $post_id Optional. Post ID. * @return object Comment stats. */function wp_count_comments( $post_id = 0 ) {	global $wpdb;	$post_id = (int) $post_id;	$stats = apply_filters('wp_count_comments', array(), $post_id);	if ( !empty($stats) )		return $stats;	$count = wp_cache_get("comments-{$post_id}", 'counts');	if ( false !== $count )		return $count;	$where = '';	if ( $post_id > 0 )		$where = $wpdb->prepare( "WHERE comment_post_ID = %d", $post_id );	$count = $wpdb->get_results( "SELECT comment_approved, COUNT( * ) AS num_comments FROM {$wpdb->comments} {$where} GROUP BY comment_approved", ARRAY_A );	$total = 0;	$approved = array('0' => 'moderated', '1' => 'approved', 'spam' => 'spam', 'trash' => 'trash', 'post-trashed' => 'post-trashed');	$known_types = array_keys( $approved );	foreach ( (array) $count as $row ) {		// Don't count post-trashed toward totals		if ( 'post-trashed' != $row['comment_approved'] && 'trash' != $row['comment_approved'] )			$total += $row['num_comments'];		if ( in_array( $row['comment_approved'], $known_types ) )			$stats[$approved[$row['comment_approved']]] = $row['num_comments'];	}	$stats['total_comments'] = $total;	foreach ( $approved as $key ) {		if ( empty($stats[$key]) )			$stats[$key] = 0;	}	$stats = (object) $stats;	wp_cache_set("comments-{$post_id}", $stats, 'counts');	return $stats;}/** * Trashes or deletes a comment. * * The comment is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * The post comment count will be updated if the comment was approved and has a * post ID available. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_comment' hook on comment ID * @uses do_action() Calls 'deleted_comment' hook on comment ID after deletion, on success * @uses do_action() Calls 'wp_set_comment_status' hook on comment ID with 'delete' set for the second parameter * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param int $comment_id Comment ID * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return bool False if delete comment query failure, true on success. */function wp_delete_comment($comment_id, $force_delete = false) {	global $wpdb;	if (!$comment = get_comment($comment_id))		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && !in_array( wp_get_comment_status($comment_id), array( 'trash', 'spam' ) ) )		return wp_trash_comment($comment_id);	do_action('delete_comment', $comment_id);	// Move children up a level.	$children = $wpdb->get_col( $wpdb->prepare("SELECT comment_ID FROM $wpdb->comments WHERE comment_parent = %d", $comment_id) );	if ( !empty($children) ) {		$wpdb->update($wpdb->comments, array('comment_parent' => $comment->comment_parent), array('comment_parent' => $comment_id));		clean_comment_cache($children);	}	// Delete metadata	$meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->commentmeta WHERE comment_id = %d ", $comment_id ) );	if ( !empty($meta_ids) ) {		do_action( 'delete_commentmeta', $meta_ids );		$in_meta_ids = "'" . implode("', '", $meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->commentmeta WHERE meta_id IN ($in_meta_ids)" );		do_action( 'deleted_commentmeta', $meta_ids );	}	if ( ! $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->comments WHERE comment_ID = %d LIMIT 1", $comment_id) ) )		return false;	do_action('deleted_comment', $comment_id);	$post_id = $comment->comment_post_ID;	if ( $post_id && $comment->comment_approved == 1 )		wp_update_comment_count($post_id);	clean_comment_cache($comment_id);	do_action('wp_set_comment_status', $comment_id, 'delete');	wp_transition_comment_status('delete', $comment->comment_approved, $comment);	return true;}/** * Moves a comment to the Trash * * If trash is disabled, comment is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_comment' before trashing * @uses do_action() on 'trashed_comment' after trashing * @uses wp_delete_comment() if trash is disabled * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_trash_comment($comment_id) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_comment($comment_id, true);	if ( !$comment = get_comment($comment_id) )		return false;	do_action('trash_comment', $comment_id);	if ( wp_set_comment_status($comment_id, 'trash') ) {		add_comment_meta($comment_id, '_wp_trash_meta_status', $comment->comment_approved);		add_comment_meta($comment_id, '_wp_trash_meta_time', time() );		do_action('trashed_comment', $comment_id);		return true;	}	return false;}/** * Removes a comment from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_comment' before untrashing * @uses do_action() on 'untrashed_comment' after untrashing * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_untrash_comment($comment_id) {	if ( ! (int)$comment_id )		return false;	do_action('untrash_comment', $comment_id);	$status = (string) get_comment_meta($comment_id, '_wp_trash_meta_status', true);	if ( empty($status) )		$status = '0';	if ( wp_set_comment_status($comment_id, $status) ) {		delete_comment_meta($comment_id, '_wp_trash_meta_time');		delete_comment_meta($comment_id, '_wp_trash_meta_status');		do_action('untrashed_comment', $comment_id);		return true;	}	return false;}/** * Marks a comment as Spam * * @since 2.9.0 * @uses do_action() on 'spam_comment' before spamming * @uses do_action() on 'spammed_comment' after spamming * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_spam_comment($comment_id) {	if ( !$comment = get_comment($comment_id) )		return false;	do_action('spam_comment', $comment_id);	if ( wp_set_comment_status($comment_id, 'spam') ) {		add_comment_meta($comment_id, '_wp_trash_meta_status', $comment->comment_approved);		do_action('spammed_comment', $comment_id);		return true;	}	return false;}/** * Removes a comment from the Spam * * @since 2.9.0 * @uses do_action() on 'unspam_comment' before unspamming * @uses do_action() on 'unspammed_comment' after unspamming * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_unspam_comment($comment_id) {	if ( ! (int)$comment_id )		return false;	do_action('unspam_comment', $comment_id);	$status = (string) get_comment_meta($comment_id, '_wp_trash_meta_status', true);	if ( empty($status) )		$status = '0';	if ( wp_set_comment_status($comment_id, $status) ) {		delete_comment_meta($comment_id, '_wp_trash_meta_status');		do_action('unspammed_comment', $comment_id);		return true;	}	return false;}/** * The status of a comment by ID. * * @since 1.0.0 * * @param int $comment_id Comment ID * @return string|bool Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure. */function wp_get_comment_status($comment_id) {	$comment = get_comment($comment_id);	if ( !$comment )		return false;	$approved = $comment->comment_approved;	if ( $approved == NULL )		return false;	elseif ( $approved == '1' )		return 'approved';	elseif ( $approved == '0' )		return 'unapproved';	elseif ( $approved == 'spam' )		return 'spam';	elseif ( $approved == 'trash' )		return 'trash';	else		return false;}/** * Call hooks for when a comment status transition occurs. * * Calls hooks for comment status transitions. If the new comment status is not the same * as the previous comment status, then two hooks will be ran, the first is * 'transition_comment_status' with new status, old status, and comment data. The * next action called is 'comment_OLDSTATUS_to_NEWSTATUS' the NEWSTATUS is the * $new_status parameter and the OLDSTATUS is $old_status parameter; it has the * comment data. * * The final action will run whether or not the comment statuses are the same. The * action is named 'comment_NEWSTATUS_COMMENTTYPE', NEWSTATUS is from the $new_status * parameter and COMMENTTYPE is comment_type comment data. * * @since 2.7.0 * * @param string $new_status New comment status. * @param string $old_status Previous comment status. * @param object $comment Comment data. */function wp_transition_comment_status($new_status, $old_status, $comment) {	// Translate raw statuses to human readable formats for the hooks	// This is not a complete list of comment status, it's only the ones that need to be renamed	$comment_statuses = array(		0         => 'unapproved',		'hold'    => 'unapproved', // wp_set_comment_status() uses "hold"		1         => 'approved',		'approve' => 'approved', // wp_set_comment_status() uses "approve"	);	if ( isset($comment_statuses[$new_status]) ) $new_status = $comment_statuses[$new_status];	if ( isset($comment_statuses[$old_status]) ) $old_status = $comment_statuses[$old_status];	// Call the hooks	if ( $new_status != $old_status ) {		do_action('transition_comment_status', $new_status, $old_status, $comment);		do_action("comment_${old_status}_to_$new_status", $comment);	}	do_action("comment_${new_status}_$comment->comment_type", $comment->comment_ID, $comment);}/** * Get current commenter's name, email, and URL. * * Expects cookies content to already be sanitized. User of this function might * wish to recheck the returned array for validity. * * @see sanitize_comment_cookies() Use to sanitize cookies * * @since 2.0.4 * * @return array Comment author, email, url respectively. */function wp_get_current_commenter() {	// Cookies should already be sanitized.	$comment_author = '';	if ( isset($_COOKIE['comment_author_'.COOKIEHASH]) )		$comment_author = $_COOKIE['comment_author_'.COOKIEHASH];	$comment_author_email = '';	if ( isset($_COOKIE['comment_author_email_'.COOKIEHASH]) )		$comment_author_email = $_COOKIE['comment_author_email_'.COOKIEHASH];	$comment_author_url = '';	if ( isset($_COOKIE['comment_author_url_'.COOKIEHASH]) )		$comment_author_url = $_COOKIE['comment_author_url_'.COOKIEHASH];	return compact('comment_author', 'comment_author_email', 'comment_author_url');}/** * Inserts a comment to the database. * * The available comment data key names are 'comment_author_IP', 'comment_date', * 'comment_date_gmt', 'comment_parent', 'comment_approved', and 'user_id'. * * @since 2.0.0 * @uses $wpdb * * @param array $commentdata Contains information on the comment. * @return int The new comment's ID. */function wp_insert_comment($commentdata) {	global $wpdb;	extract(stripslashes_deep($commentdata), EXTR_SKIP);	if ( ! isset($comment_author_IP) )		$comment_author_IP = '';	if ( ! isset($comment_date) )		$comment_date = current_time('mysql');	if ( ! isset($comment_date_gmt) )		$comment_date_gmt = get_gmt_from_date($comment_date);	if ( ! isset($comment_parent) )		$comment_parent = 0;	if ( ! isset($comment_approved) )		$comment_approved = 1;	if ( ! isset($comment_karma) )		$comment_karma = 0;	if ( ! isset($user_id) )		$user_id = 0;	if ( ! isset($comment_type) )		$comment_type = '';	$data = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_author_IP', 'comment_date', 'comment_date_gmt', 'comment_content', 'comment_karma', 'comment_approved', 'comment_agent', 'comment_type', 'comment_parent', 'user_id');	$wpdb->insert($wpdb->comments, $data);	$id = (int) $wpdb->insert_id;	if ( $comment_approved == 1 )		wp_update_comment_count($comment_post_ID);	$comment = get_comment($id);	do_action('wp_insert_comment', $id, $comment);	return $id;}/** * Filters and sanitizes comment data. * * Sets the comment data 'filtered' field to true when finished. This can be * checked as to whether the comment should be filtered and to keep from * filtering the same comment more than once. * * @since 2.0.0 * @uses apply_filters() Calls 'pre_user_id' hook on comment author's user ID * @uses apply_filters() Calls 'pre_comment_user_agent' hook on comment author's user agent * @uses apply_filters() Calls 'pre_comment_author_name' hook on comment author's name * @uses apply_filters() Calls 'pre_comment_content' hook on the comment's content * @uses apply_filters() Calls 'pre_comment_user_ip' hook on comment author's IP * @uses apply_filters() Calls 'pre_comment_author_url' hook on comment author's URL * @uses apply_filters() Calls 'pre_comment_author_email' hook on comment author's email address * * @param array $commentdata Contains information on the comment. * @return array Parsed comment information. */function wp_filter_comment($commentdata) {	if ( isset($commentdata['user_ID']) )		$commentdata['user_id'] = apply_filters('pre_user_id', $commentdata['user_ID']);	elseif ( isset($commentdata['user_id']) )		$commentdata['user_id'] = apply_filters('pre_user_id', $commentdata['user_id']);	$commentdata['comment_agent']        = apply_filters('pre_comment_user_agent', ( isset( $commentdata['comment_agent'] ) ? $commentdata['comment_agent'] : '' ) );	$commentdata['comment_author']       = apply_filters('pre_comment_author_name', $commentdata['comment_author']);	$commentdata['comment_content']      = apply_filters('pre_comment_content', $commentdata['comment_content']);	$commentdata['comment_author_IP']    = apply_filters('pre_comment_user_ip', $commentdata['comment_author_IP']);	$commentdata['comment_author_url']   = apply_filters('pre_comment_author_url', $commentdata['comment_author_url']);	$commentdata['comment_author_email'] = apply_filters('pre_comment_author_email', $commentdata['comment_author_email']);	$commentdata['filtered'] = true;	return $commentdata;}/** * Whether comment should be blocked because of comment flood. * * @since 2.1.0 * * @param bool $block Whether plugin has already blocked comment. * @param int $time_lastcomment Timestamp for last comment. * @param int $time_newcomment Timestamp for new comment. * @return bool Whether comment should be blocked. */function wp_throttle_comment_flood($block, $time_lastcomment, $time_newcomment) {	if ( $block ) // a plugin has already blocked... we'll let that decision stand		return $block;	if ( ($time_newcomment - $time_lastcomment) < 15 )		return true;	return false;}/** * Adds a new comment to the database. * * Filters new comment to ensure that the fields are sanitized and valid before * inserting comment into database. Calls 'comment_post' action with comment ID * and whether comment is approved by WordPress. Also has 'preprocess_comment' * filter for processing the comment data before the function handles it. * * @since 1.5.0 * @uses apply_filters() Calls 'preprocess_comment' hook on $commentdata parameter array before processing * @uses do_action() Calls 'comment_post' hook on $comment_ID returned from adding the comment and if the comment was approved. * @uses wp_filter_comment() Used to filter comment before adding comment. * @uses wp_allow_comment() checks to see if comment is approved. * @uses wp_insert_comment() Does the actual comment insertion to the database. * * @param array $commentdata Contains information on the comment. * @return int The ID of the comment after adding. */function wp_new_comment( $commentdata ) {	$commentdata = apply_filters('preprocess_comment', $commentdata);	$commentdata['comment_post_ID'] = (int) $commentdata['comment_post_ID'];	if ( isset($commentdata['user_ID']) )		$commentdata['user_id'] = $commentdata['user_ID'] = (int) $commentdata['user_ID'];	elseif ( isset($commentdata['user_id']) )		$commentdata['user_id'] = (int) $commentdata['user_id'];	$commentdata['comment_parent'] = isset($commentdata['comment_parent']) ? absint($commentdata['comment_parent']) : 0;	$parent_status = ( 0 < $commentdata['comment_parent'] ) ? wp_get_comment_status($commentdata['comment_parent']) : '';	$commentdata['comment_parent'] = ( 'approved' == $parent_status || 'unapproved' == $parent_status ) ? $commentdata['comment_parent'] : 0;	$commentdata['comment_author_IP'] = preg_replace( '/[^0-9a-fA-F:., ]/', '',$_SERVER['REMOTE_ADDR'] );	$commentdata['comment_agent']     = substr($_SERVER['HTTP_USER_AGENT'], 0, 254);	$commentdata['comment_date']     = current_time('mysql');	$commentdata['comment_date_gmt'] = current_time('mysql', 1);	$commentdata = wp_filter_comment($commentdata);	$commentdata['comment_approved'] = wp_allow_comment($commentdata);	$comment_ID = wp_insert_comment($commentdata);	do_action('comment_post', $comment_ID, $commentdata['comment_approved']);	if ( 'spam' !== $commentdata['comment_approved'] ) { // If it's spam save it silently for later crunching		if ( '0' == $commentdata['comment_approved'] )			wp_notify_moderator($comment_ID);		$post = &get_post($commentdata['comment_post_ID']); // Don't notify if it's your own comment		if ( get_option('comments_notify') && $commentdata['comment_approved'] && ( ! isset( $commentdata['user_id'] ) || $post->post_author != $commentdata['user_id'] ) )			wp_notify_postauthor($comment_ID, empty( $commentdata['comment_type'] ) ? $commentdata['comment_type'] : '' );	}	return $comment_ID;}/** * Sets the status of a comment. * * The 'wp_set_comment_status' action is called after the comment is handled and * will only be called, if the comment status is either 'hold', 'approve', or * 'spam'. If the comment status is not in the list, then false is returned and * if the status is 'delete', then the comment is deleted without calling the * action. * * @since 1.0.0 * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param int $comment_id Comment ID. * @param string $comment_status New comment status, either 'hold', 'approve', 'spam', or 'delete'. * @param bool $wp_error Whether to return a WP_Error object if there is a failure. Default is false. * @return bool False on failure or deletion and true on success. */function wp_set_comment_status($comment_id, $comment_status, $wp_error = false) {	global $wpdb;	$status = '0';	switch ( $comment_status ) {		case 'hold':		case '0':			$status = '0';			break;		case 'approve':		case '1':			$status = '1';			if ( get_option('comments_notify') ) {				$comment = get_comment($comment_id);				wp_notify_postauthor($comment_id, $comment->comment_type);			}			break;		case 'spam':			$status = 'spam';			break;		case 'trash':			$status = 'trash';			break;		default:			return false;	}	$comment_old = wp_clone(get_comment($comment_id));	if ( !$wpdb->update( $wpdb->comments, array('comment_approved' => $status), array('comment_ID' => $comment_id) ) ) {		if ( $wp_error )			return new WP_Error('db_update_error', __('Could not update comment status'), $wpdb->last_error);		else			return false;	}	clean_comment_cache($comment_id);	$comment = get_comment($comment_id);	do_action('wp_set_comment_status', $comment_id, $comment_status);	wp_transition_comment_status($comment_status, $comment_old->comment_approved, $comment);	wp_update_comment_count($comment->comment_post_ID);	return true;}/** * Updates an existing comment in the database. * * Filters the comment and makes sure certain fields are valid before updating. * * @since 2.0.0 * @uses $wpdb * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param array $commentarr Contains information on the comment. * @return int Comment was updated if value is 1, or was not updated if value is 0. */function wp_update_comment($commentarr) {	global $wpdb;	// First, get all of the original fields	$comment = get_comment($commentarr['comment_ID'], ARRAY_A);	// Escape data pulled from DB.	$comment = esc_sql($comment);	$old_status = $comment['comment_approved'];	// Merge old and new fields with new fields overwriting old ones.	$commentarr = array_merge($comment, $commentarr);	$commentarr = wp_filter_comment( $commentarr );	// Now extract the merged array.	extract(stripslashes_deep($commentarr), EXTR_SKIP);	$comment_content = apply_filters('comment_save_pre', $comment_content);	$comment_date_gmt = get_gmt_from_date($comment_date);	if ( !isset($comment_approved) )		$comment_approved = 1;	else if ( 'hold' == $comment_approved )		$comment_approved = 0;	else if ( 'approve' == $comment_approved )		$comment_approved = 1;	$data = compact('comment_content', 'comment_author', 'comment_author_email', 'comment_approved', 'comment_karma', 'comment_author_url', 'comment_date', 'comment_date_gmt');	$rval = $wpdb->update( $wpdb->comments, $data, compact( 'comment_ID' ) );	clean_comment_cache($comment_ID);	wp_update_comment_count($comment_post_ID);	do_action('edit_comment', $comment_ID);	$comment = get_comment($comment_ID);	wp_transition_comment_status($comment->comment_approved, $old_status, $comment);	return $rval;}/** * Whether to defer comment counting. * * When setting $defer to true, all post comment counts will not be updated * until $defer is set to false. When $defer is set to false, then all * previously deferred updated post comment counts will then be automatically * updated without having to call wp_update_comment_count() after. * * @since 2.5.0 * @staticvar bool $_defer * * @param bool $defer * @return unknown */function wp_defer_comment_counting($defer=null) {	static $_defer = false;	if ( is_bool($defer) ) {		$_defer = $defer;		// flush any deferred counts		if ( !$defer )			wp_update_comment_count( null, true );	}	return $_defer;}/** * Updates the comment count for post(s). * * When $do_deferred is false (is by default) and the comments have been set to * be deferred, the post_id will be added to a queue, which will be updated at a * later date and only updated once per post ID. * * If the comments have not be set up to be deferred, then the post will be * updated. When $do_deferred is set to true, then all previous deferred post * IDs will be updated along with the current $post_id. * * @since 2.1.0 * @see wp_update_comment_count_now() For what could cause a false return value * * @param int $post_id Post ID * @param bool $do_deferred Whether to process previously deferred post comment counts * @return bool True on success, false on failure */function wp_update_comment_count($post_id, $do_deferred=false) {	static $_deferred = array();	if ( $do_deferred ) {		$_deferred = array_unique($_deferred);		foreach ( $_deferred as $i => $_post_id ) {			wp_update_comment_count_now($_post_id);			unset( $_deferred[$i] ); /** @todo Move this outside of the foreach and reset $_deferred to an array instead */		}	}	if ( wp_defer_comment_counting() ) {		$_deferred[] = $post_id;		return true;	}	elseif ( $post_id ) {		return wp_update_comment_count_now($post_id);	}}/** * Updates the comment count for the post. * * @since 2.5.0 * @uses $wpdb * @uses do_action() Calls 'wp_update_comment_count' hook on $post_id, $new, and $old * @uses do_action() Calls 'edit_posts' hook on $post_id and $post * * @param int $post_id Post ID * @return bool False on '0' $post_id or if post with ID does not exist. True on success. */function wp_update_comment_count_now($post_id) {	global $wpdb;	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( !$post = get_post($post_id) )		return false;	$old = (int) $post->comment_count;	$new = (int) $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_approved = '1'", $post_id) );	$wpdb->update( $wpdb->posts, array('comment_count' => $new), array('ID' => $post_id) );	if ( 'page' == $post->post_type )		clean_page_cache( $post_id );	else		clean_post_cache( $post_id );	do_action('wp_update_comment_count', $post_id, $new, $old);	do_action('edit_post', $post_id, $post);	return true;}//// Ping and trackback functions.///** * Finds a pingback server URI based on the given URL. * * Checks the HTML for the rel="pingback" link and x-pingback headers. It does * a check for the x-pingback headers first and returns that, if available. The * check for the rel="pingback" has more overhead than just the header. * * @since 1.5.0 * * @param string $url URL to ping. * @param int $deprecated Not Used. * @return bool|string False on failure, string containing URI on success. */function discover_pingback_server_uri( $url, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.7' );	$pingback_str_dquote = 'rel="pingback"';	$pingback_str_squote = 'rel=\'pingback\'';	/** @todo Should use Filter Extension or custom preg_match instead. */	$parsed_url = parse_url($url);	if ( ! isset( $parsed_url['host'] ) ) // Not an URL. This should never happen.		return false;	//Do not search for a pingback server on our own uploads	$uploads_dir = wp_upload_dir();	if ( 0 === strpos($url, $uploads_dir['baseurl']) )		return false;	$response = wp_remote_head( $url, array( 'timeout' => 2, 'httpversion' => '1.0' ) );	if ( is_wp_error( $response ) )		return false;	if ( isset( $response['headers']['x-pingback'] ) )		return $response['headers']['x-pingback'];	// Not an (x)html, sgml, or xml page, no use going further.	if ( isset( $response['headers']['content-type'] ) && preg_match('#(image|audio|video|model)/#is', $response['headers']['content-type']) )		return false;	// Now do a GET since we're going to look in the html headers (and we're sure its not a binary file)	$response = wp_remote_get( $url, array( 'timeout' => 2, 'httpversion' => '1.0' ) );	if ( is_wp_error( $response ) )		return false;	$contents = $response['body'];	$pingback_link_offset_dquote = strpos($contents, $pingback_str_dquote);	$pingback_link_offset_squote = strpos($contents, $pingback_str_squote);	if ( $pingback_link_offset_dquote || $pingback_link_offset_squote ) {		$quote = ($pingback_link_offset_dquote) ? '"' : '\'';		$pingback_link_offset = ($quote=='"') ? $pingback_link_offset_dquote : $pingback_link_offset_squote;		$pingback_href_pos = @strpos($contents, 'href=', $pingback_link_offset);		$pingback_href_start = $pingback_href_pos+6;		$pingback_href_end = @strpos($contents, $quote, $pingback_href_start);		$pingback_server_url_len = $pingback_href_end - $pingback_href_start;		$pingback_server_url = substr($contents, $pingback_href_start, $pingback_server_url_len);		// We may find rel="pingback" but an incomplete pingback URL		if ( $pingback_server_url_len > 0 ) { // We got it!			return $pingback_server_url;		}	}	return false;}/** * Perform all pingbacks, enclosures, trackbacks, and send to pingback services. * * @since 2.1.0 * @uses $wpdb */function do_all_pings() {	global $wpdb;	// Do pingbacks	while ($ping = $wpdb->get_row("SELECT * FROM {$wpdb->posts}, {$wpdb->postmeta} WHERE {$wpdb->posts}.ID = {$wpdb->postmeta}.post_id AND {$wpdb->postmeta}.meta_key = '_pingme' LIMIT 1")) {		$mid = $wpdb->get_var( "SELECT meta_id FROM {$wpdb->postmeta} WHERE post_id = {$ping->ID} AND meta_key = '_pingme' LIMIT 1");		do_action( 'delete_postmeta', $mid );		$wpdb->query( $wpdb->prepare( "DELETE FROM {$wpdb->postmeta} WHERE meta_id = %d", $mid ) );		do_action( 'deleted_postmeta', $mid );		pingback($ping->post_content, $ping->ID);	}	// Do Enclosures	while ($enclosure = $wpdb->get_row("SELECT * FROM {$wpdb->posts}, {$wpdb->postmeta} WHERE {$wpdb->posts}.ID = {$wpdb->postmeta}.post_id AND {$wpdb->postmeta}.meta_key = '_encloseme' LIMIT 1")) {		$mid = $wpdb->get_var( $wpdb->prepare("SELECT meta_id FROM {$wpdb->postmeta} WHERE post_id = %d AND meta_key = '_encloseme'", $enclosure->ID) );		do_action( 'delete_postmeta', $mid );		$wpdb->query( $wpdb->prepare("DELETE FROM {$wpdb->postmeta} WHERE meta_id =  %d", $mid) );		do_action( 'deleted_postmeta', $mid );		do_enclose($enclosure->post_content, $enclosure->ID);	}	// Do Trackbacks	$trackbacks = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE to_ping <> '' AND post_status = 'publish'");	if ( is_array($trackbacks) )		foreach ( $trackbacks as $trackback )			do_trackbacks($trackback);	//Do Update Services/Generic Pings	generic_ping();}/** * Perform trackbacks. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID to do trackbacks on. */function do_trackbacks($post_id) {	global $wpdb;	$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) );	$to_ping = get_to_ping($post_id);	$pinged  = get_pung($post_id);	if ( empty($to_ping) ) {		$wpdb->update($wpdb->posts, array('to_ping' => ''), array('ID' => $post_id) );		return;	}	if ( empty($post->post_excerpt) )		$excerpt = apply_filters('the_content', $post->post_content);	else		$excerpt = apply_filters('the_excerpt', $post->post_excerpt);	$excerpt = str_replace(']]>', ']]&gt;', $excerpt);	$excerpt = wp_html_excerpt($excerpt, 252) . '...';	$post_title = apply_filters('the_title', $post->post_title);	$post_title = strip_tags($post_title);	if ( $to_ping ) {		foreach ( (array) $to_ping as $tb_ping ) {			$tb_ping = trim($tb_ping);			if ( !in_array($tb_ping, $pinged) ) {				trackback($tb_ping, $post_title, $excerpt, $post_id);				$pinged[] = $tb_ping;			} else {				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '$tb_ping', '')) WHERE ID = %d", $post_id) );			}		}	}}/** * Sends pings to all of the ping site services. * * @since 1.2.0 * * @param int $post_id Post ID. Not actually used. * @return int Same as Post ID from parameter */function generic_ping($post_id = 0) {	$services = get_option('ping_sites');	$services = explode("\n", $services);	foreach ( (array) $services as $service ) {		$service = trim($service);		if ( '' != $service )			weblog_ping($service);	}	return $post_id;}/** * Pings back the links found in a post. * * @since 0.71 * @uses $wp_version * @uses IXR_Client * * @param string $content Post content to check for links. * @param int $post_ID Post ID. */function pingback($content, $post_ID) {	global $wp_version;	include_once(ABSPATH . WPINC . '/class-IXR.php');	// original code by Mort (http://mort.mine.nu:8080)	$post_links = array();	$pung = get_pung($post_ID);	// Variables	$ltrs = '\w';	$gunk = '/#~:.?+=&%@!\-';	$punc = '.:?\-';	$any = $ltrs . $gunk . $punc;	// Step 1	// Parsing the post, external links (if any) are stored in the $post_links array	// This regexp comes straight from phpfreaks.com	// http://www.phpfreaks.com/quickcode/Extract_All_URLs_on_a_Page/15.php	preg_match_all("{\b http : [$any] +? (?= [$punc] * [^$any] | $)}x", $content, $post_links_temp);	// Step 2.	// Walking thru the links array	// first we get rid of links pointing to sites, not to specific files	// Example:	// http://dummy-weblog.org	// http://dummy-weblog.org/	// http://dummy-weblog.org/post.php	// We don't wanna ping first and second types, even if they have a valid <link/>	foreach ( (array) $post_links_temp[0] as $link_test ) :		if ( !in_array($link_test, $pung) && (url_to_postid($link_test) != $post_ID) // If we haven't pung it already and it isn't a link to itself				&& !is_local_attachment($link_test) ) : // Also, let's never ping local attachments.			if ( $test = @parse_url($link_test) ) {				if ( isset($test['query']) )					$post_links[] = $link_test;				elseif ( ($test['path'] != '/') && ($test['path'] != '') )					$post_links[] = $link_test;			}		endif;	endforeach;	do_action_ref_array('pre_ping', array(&$post_links, &$pung));	foreach ( (array) $post_links as $pagelinkedto ) {		$pingback_server_url = discover_pingback_server_uri($pagelinkedto, 2048);		if ( $pingback_server_url ) {			@ set_time_limit( 60 );			 // Now, the RPC call			$pagelinkedfrom = get_permalink($post_ID);			// using a timeout of 3 seconds should be enough to cover slow servers			$client = new IXR_Client($pingback_server_url);			$client->timeout = 3;			$client->useragent = apply_filters( 'pingback_useragent', $client->useragent . ' -- WordPress/' . $wp_version, $client->useragent, $pingback_server_url, $pagelinkedto, $pagelinkedfrom);			// when set to true, this outputs debug messages by itself			$client->debug = false;			if ( $client->query('pingback.ping', $pagelinkedfrom, $pagelinkedto) || ( isset($client->error->code) && 48 == $client->error->code ) ) // Already registered				add_ping( $post_ID, $pagelinkedto );		}	}}/** * Check whether blog is public before returning sites. * * @since 2.1.0 * * @param mixed $sites Will return if blog is public, will not return if not public. * @return mixed Empty string if blog is not public, returns $sites, if site is public. */function privacy_ping_filter($sites) {	if ( '0' != get_option('blog_public') )		return $sites;	else		return '';}/** * Send a Trackback. * * Updates database when sending trackback to prevent duplicates. * * @since 0.71 * @uses $wpdb * * @param string $trackback_url URL to send trackbacks. * @param string $title Title of post. * @param string $excerpt Excerpt of post. * @param int $ID Post ID. * @return mixed Database query from update. */function trackback($trackback_url, $title, $excerpt, $ID) {	global $wpdb;	if ( empty($trackback_url) )		return;	$options = array();	$options['timeout'] = 4;	$options['body'] = array(		'title' => $title,		'url' => get_permalink($ID),		'blog_name' => get_option('blogname'),		'excerpt' => $excerpt	);	$response = wp_remote_post($trackback_url, $options);	if ( is_wp_error( $response ) )		return;	$tb_url = addslashes( $trackback_url );	$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET pinged = CONCAT(pinged, '\n', '$tb_url') WHERE ID = %d", $ID) );	return $wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '$tb_url', '')) WHERE ID = %d", $ID) );}/** * Send a pingback. * * @since 1.2.0 * @uses $wp_version * @uses IXR_Client * * @param string $server Host of blog to connect to. * @param string $path Path to send the ping. */function weblog_ping($server = '', $path = '') {	global $wp_version;	include_once(ABSPATH . WPINC . '/class-IXR.php');	// using a timeout of 3 seconds should be enough to cover slow servers	$client = new IXR_Client($server, ((!strlen(trim($path)) || ('/' == $path)) ? false : $path));	$client->timeout = 3;	$client->useragent .= ' -- WordPress/'.$wp_version;	// when set to true, this outputs debug messages by itself	$client->debug = false;	$home = trailingslashit( home_url() );	if ( !$client->query('weblogUpdates.extendedPing', get_option('blogname'), $home, get_bloginfo('rss2_url') ) ) // then try a normal ping		$client->query('weblogUpdates.ping', get_option('blogname'), $home);}//// Cache///** * Removes comment ID from the comment cache. * * @since 2.3.0 * @package WordPress * @subpackage Cache * * @param int|array $id Comment ID or array of comment IDs to remove from cache */function clean_comment_cache($ids) {	foreach ( (array) $ids as $id )		wp_cache_delete($id, 'comment');}/** * Updates the comment cache of given comments. * * Will add the comments in $comments to the cache. If comment ID already exists * in the comment cache then it will not be updated. The comment is added to the * cache using the comment group with the key using the ID of the comments. * * @since 2.3.0 * @package WordPress * @subpackage Cache * * @param array $comments Array of comment row objects */function update_comment_cache($comments) {	foreach ( (array) $comments as $comment )		wp_cache_add($comment->comment_ID, $comment, 'comment');}//// Internal///** * Close comments on old posts on the fly, without any extra DB queries.  Hooked to the_posts. * * @access private * @since 2.7.0 * * @param object $posts Post data object. * @return object */function _close_comments_for_old_posts( $posts ) {	if ( empty($posts) || !is_singular() || !get_option('close_comments_for_old_posts') )		return $posts;	$days_old = (int) get_option('close_comments_days_old');	if ( !$days_old )		return $posts;	if ( time() - strtotime( $posts[0]->post_date_gmt ) > ( $days_old * 24 * 60 * 60 ) ) {		$posts[0]->comment_status = 'closed';		$posts[0]->ping_status = 'closed';	}	return $posts;}/** * Close comments on an old post.  Hooked to comments_open and pings_open. * * @access private * @since 2.7.0 * * @param bool $open Comments open or closed * @param int $post_id Post ID * @return bool $open */function _close_comments_for_old_post( $open, $post_id ) {	if ( ! $open )		return $open;	if ( !get_option('close_comments_for_old_posts') )		return $open;	$days_old = (int) get_option('close_comments_days_old');	if ( !$days_old )		return $open;	$post = get_post($post_id);	if ( time() - strtotime( $post->post_date_gmt ) > ( $days_old * 24 * 60 * 60 ) )		return false;	return $open;}?>
<?php/** * Upgrade WordPress Page. * * @package WordPress * @subpackage Administration *//** * We are upgrading WordPress. * * @since unknown * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require( '../wp-load.php' );timer_start();require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );delete_site_transient('update_core');if ( isset( $_GET['step'] ) )	$step = $_GET['step'];else	$step = 0;// Do it.  No output.if ( 'upgrade_db' === $step ) {	wp_upgrade();	die( '0' );}$step = (int) $step;$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo( 'html_type' ); ?>; charset=<?php echo get_option( 'blog_charset' ); ?>" />	<title><?php _e( 'WordPress &rsaquo; Upgrade' ); ?></title>	<?php	wp_admin_css( 'install', true );	wp_admin_css( 'ie', true );	?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php if ( get_option( 'db_version' ) == $wp_db_version || !is_blog_installed() ) : ?><h2><?php _e( 'No Upgrade Required' ); ?></h2><p><?php _e( 'Your WordPress database is already up-to-date!' ); ?></p><p class="step"><a class="button" href="<?php echo get_option( 'home' ); ?>/"><?php _e( 'Continue' ); ?></a></p><?php elseif ( !$php_compat || !$mysql_compat ) :	if ( !$mysql_compat && !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );	elseif ( !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );	elseif ( !$mysql_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );?><?php else :switch ( $step ) :	case 0:		$goback = stripslashes( wp_get_referer() );		$goback = esc_url_raw( $goback );		$goback = urlencode( $goback );?><h2><?php _e( 'Database Upgrade Required' ); ?></h2><p><?php _e( 'WordPress has been updated! Before we send you on your way, we have to upgrade your database to the newest version.' ); ?></p><p><?php _e( 'The upgrade process may take a little while, so please be patient.' ); ?></p><p class="step"><a class="button" href="upgrade.php?step=1&amp;backto=<?php echo $goback; ?>"><?php _e( 'Upgrade WordPress Database' ); ?></a></p><?php		break;	case 1:		wp_upgrade();			$backto = !empty($_GET['backto']) ? stripslashes( urldecode( $_GET['backto'] ) ) :  __get_option( 'home' ) . '/';			$backto = esc_url_raw( $backto );			$backto = wp_validate_redirect($backto, __get_option( 'home' ) . '/');?><h2><?php _e( 'Upgrade Complete' ); ?></h2>	<p><?php _e( 'Your WordPress database has been successfully upgraded!' ); ?></p>	<p class="step"><a class="button" href="<?php echo $backto; ?>"><?php _e( 'Continue' ); ?></a></p><!--<pre><?php printf( __( '%s queries' ), $wpdb->num_queries ); ?><?php printf( __( '%s seconds' ), timer_stop( 0 ) ); ?></pre>--><?php		break;endswitch;endif;?></body></html>
<?php/** * Comment template functions * * These functions are meant to live inside of the WordPress loop. * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current comment. * * If the comment has an empty comment_author field, then 'Anonymous' person is * assumed. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author' hook on the comment author * * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional. * @return string The comment author */function get_comment_author( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( empty($comment->comment_author) ) {		if (!empty($comment->user_id)){			$user=get_userdata($comment->user_id);			$author=$user->user_login;		} else {			$author = __('Anonymous');		}	} else {		$author = $comment->comment_author;	}	return apply_filters('get_comment_author', $author);}/** * Displays the author of the current comment. * * @since 0.71 * @uses apply_filters() Calls 'comment_author' on comment author before displaying * * @param int $comment_ID The ID of the comment for which to print the author. Optional. */function comment_author( $comment_ID = 0 ) {	$author = apply_filters('comment_author', get_comment_author( $comment_ID ) );	echo $author;}/** * Retrieve the email of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the author's email.  Optional. * @return string The current comment author's email */function get_comment_author_email( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_email', $comment->comment_author_email);}/** * Display the email of the author of the current global $comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'author_email' hook on the author email * * @param int $comment_ID The ID of the comment for which to print the author's email. Optional. */function comment_author_email( $comment_ID = 0 ) {	echo apply_filters('author_email', get_comment_author_email( $comment_ID ) );}/** * Display the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @uses get_comment_author_email_link() For generating the link * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_email_link($linktext='', $before='', $after='') {	if ( $link = get_comment_author_email_link( $linktext, $before, $after ) )		echo $link;}/** * Return the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 2.7 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function get_comment_author_email_link($linktext='', $before='', $after='') {	global $comment;	$email = apply_filters('comment_email', $comment->comment_author_email);	if ((!empty($email)) && ($email != '@')) {	$display = ($linktext != '') ? $linktext : $email;		$return  = $before;		$return .= "<a href='mailto:$email'>$display</a>";	 	$return .= $after;		return $return;	} else {		return '';	}}/** * Retrieve the html link to the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author * * @param int $comment_ID The ID of the comment for which to get the author's link.  Optional. * @return string Comment Author name or HTML link for author's URL */function get_comment_author_link( $comment_ID = 0 ) {	/** @todo Only call these functions when they are needed. Include in if... else blocks */	$url    = get_comment_author_url( $comment_ID );	$author = get_comment_author( $comment_ID );	if ( empty( $url ) || 'http://' == $url )		$return = $author;	else		$return = "<a href='$url' rel='external nofollow' class='url'>$author</a>";	return apply_filters('get_comment_author_link', $return);}/** * Display the html link to the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_link() Echoes result * * @param int The ID of the comment for which to print the author's link. Optional. */function comment_author_link( $comment_ID = 0 ) {	echo get_comment_author_link( $comment_ID );}/** * Retrieve the IP address of the author of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() * * @param int $comment_ID The ID of the comment for which to get the author's IP address. Optional. * @return string The comment author's IP address. */function get_comment_author_IP( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_IP', $comment->comment_author_IP);}/** * Display the IP address of the author of the current comment. * * @since 0.71 * @see get_comment_author_IP() Echoes Result * * @param int $comment_ID The ID of the comment for which to print the author's IP address.  Optional. */function comment_author_IP( $comment_ID = 0 ) {	echo get_comment_author_IP( $comment_ID );}/** * Retrieve the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_url' hook on the comment author's URL * * @param int $comment_ID The ID of the comment for which to get the author's URL.  Optional. * @return string */function get_comment_author_url( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$url = ('http://' == $comment->comment_author_url) ? '' : $comment->comment_author_url;	$url = esc_url( $url, array('http', 'https') );	return apply_filters('get_comment_author_url', $url);}/** * Display the url of the author of the current comment. * * @since 0.71 * @uses apply_filters() * @uses get_comment_author_url() Retrieves the comment author's URL * * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional. */function comment_author_url( $comment_ID = 0 ) {	echo apply_filters('comment_url', get_comment_author_url( $comment_ID ));}/** * Retrieves the HTML link of the url of the author of the current comment. * * $linktext parameter is only used if the URL does not exist for the comment * author. If the URL does exist then the URL will be used and the $linktext * will be ignored. * * Encapsulate the HTML link between the $before and $after. So it will appear * in the order of $before, link, and finally $after. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_url_link' on the complete HTML before returning. * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. * @return string The HTML link between the $before and $after parameters */function get_comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	$url = get_comment_author_url();	$display = ($linktext != '') ? $linktext : $url;	$display = str_replace( 'http://www.', '', $display );	$display = str_replace( 'http://', '', $display );	if ( '/' == substr($display, -1) )		$display = substr($display, 0, -1);	$return = "$before<a href='$url' rel='external'>$display</a>$after";	return apply_filters('get_comment_author_url_link', $return);}/** * Displays the HTML link of the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_url_link() Echoes result * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	echo get_comment_author_url_link( $linktext, $before, $after );}/** * Generates semantic classes for each comment element * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @param bool $echo Whether comment_class should echo or return */function comment_class( $class = '', $comment_id = null, $post_id = null, $echo = true ) {	// Separates classes with a single space, collates classes for comment DIV	$class = 'class="' . join( ' ', get_comment_class( $class, $comment_id, $post_id ) ) . '"';	if ( $echo)		echo $class;	else		return $class;}/** * Returns the classes for the comment div as an array * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @return array Array of classes */function get_comment_class( $class = '', $comment_id = null, $post_id = null ) {	global $comment_alt, $comment_depth, $comment_thread_alt;	$comment = get_comment($comment_id);	$classes = array();	// Get the comment type (comment, trackback),	$classes[] = ( empty( $comment->comment_type ) ) ? 'comment' : $comment->comment_type;	// If the comment author has an id (registered), then print the log in name	if ( $comment->user_id > 0 && $user = get_userdata($comment->user_id) ) {		// For all registered users, 'byuser'		$classes[] = 'byuser';		$classes[] = 'comment-author-' . sanitize_html_class($user->user_nicename, $comment->user_id);		// For comment authors who are the author of the post		if ( $post = get_post($post_id) ) {			if ( $comment->user_id === $post->post_author )				$classes[] = 'bypostauthor';		}	}	if ( empty($comment_alt) )		$comment_alt = 0;	if ( empty($comment_depth) )		$comment_depth = 1;	if ( empty($comment_thread_alt) )		$comment_thread_alt = 0;	if ( $comment_alt % 2 ) {		$classes[] = 'odd';		$classes[] = 'alt';	} else {		$classes[] = 'even';	}	$comment_alt++;	// Alt for top-level comments	if ( 1 == $comment_depth ) {		if ( $comment_thread_alt % 2 ) {			$classes[] = 'thread-odd';			$classes[] = 'thread-alt';		} else {			$classes[] = 'thread-even';		}		$comment_thread_alt++;	}	$classes[] = "depth-$comment_depth";	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('comment_class', $classes, $class, $comment_id, $post_id);}/** * Retrieve the comment date of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_date' hook with the formated date and the $d parameter respectively * @uses $comment * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to get the date. Optional. * @return string The comment's date */function get_comment_date( $d = '', $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $d )		$date = mysql2date(get_option('date_format'), $comment->comment_date);	else		$date = mysql2date($d, $comment->comment_date);	return apply_filters('get_comment_date', $date, $d);}/** * Display the comment date of the current comment. * * @since 0.71 * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to print the date.  Optional. */function comment_date( $d = '', $comment_ID = 0 ) {	echo get_comment_date( $d, $comment_ID );}/** * Retrieve the excerpt of the current comment. * * Will cut each word and only output the first 20 words with '...' at the end. * If the word count is less than 20, then no truncating is done and no '...' * will appear. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls 'get_comment_excerpt' on truncated comment * * @param int $comment_ID The ID of the comment for which to get the excerpt. Optional. * @return string The maybe truncated comment with 20 words or less */function get_comment_excerpt( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$comment_text = strip_tags($comment->comment_content);	$blah = explode(' ', $comment_text);	if (count($blah) > 20) {		$k = 20;		$use_dotdotdot = 1;	} else {		$k = count($blah);		$use_dotdotdot = 0;	}	$excerpt = '';	for ($i=0; $i<$k; $i++) {		$excerpt .= $blah[$i] . ' ';	}	$excerpt .= ($use_dotdotdot) ? '...' : '';	return apply_filters('get_comment_excerpt', $excerpt);}/** * Display the excerpt of the current comment. * * @since 1.2.0 * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt * * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional. */function comment_excerpt( $comment_ID = 0 ) {	echo apply_filters('comment_excerpt', get_comment_excerpt($comment_ID) );}/** * Retrieve the comment id of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_ID' hook for the comment ID * * @return int The comment ID */function get_comment_ID() {	global $comment;	return apply_filters('get_comment_ID', $comment->comment_ID);}/** * Displays the comment id of the current comment. * * @since 0.71 * @see get_comment_ID() Echoes Result */function comment_ID() {	echo get_comment_ID();}/** * Retrieve the link to a given comment. * * @since 1.5.0 * @uses $comment * * @param object|string|int $comment Comment to retrieve. * @param array $args Optional args. * @return string The permalink to the given comment. */function get_comment_link( $comment = null, $args = array() ) {	global $wp_rewrite, $in_comment_loop;	$comment = get_comment($comment);	// Backwards compat	if ( !is_array($args) ) {		$page = $args;		$args = array();		$args['page'] = $page;	}	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_option('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] ) {		if ( '' == $args['page'] )			$args['page'] = ( !empty($in_comment_loop) ) ? get_query_var('cpage') : get_page_of_comment( $comment->comment_ID, $args );		if ( $wp_rewrite->using_permalinks() )			$link = user_trailingslashit( trailingslashit( get_permalink( $comment->comment_post_ID ) ) . 'comment-page-' . $args['page'], 'comment' );		else			$link = add_query_arg( 'cpage', $args['page'], get_permalink( $comment->comment_post_ID ) );	} else {		$link = get_permalink( $comment->comment_post_ID );	}	return apply_filters( 'get_comment_link', $link . '#comment-' . $comment->comment_ID, $comment, $args );}/** * Retrieves the link to the current post comments. * * @since 1.5.0 * * @param int $post_id Optional post id * @return string The link to the comments */function get_comments_link($post_id = 0) {	return get_permalink($post_id) . '#comments';}/** * Displays the link to the current post comments. * * @since 0.71 * * @param string $deprecated Not Used * @param bool $deprecated_2 Not Used */function comments_link( $deprecated = '', $deprecated_2 = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.72' );	if ( !empty( $deprecated_2 ) )		_deprecated_argument( __FUNCTION__, '1.3' );	echo get_comments_link();}/** * Retrieve the amount of comments a post has. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comments_number' hook on the number of comments * * @param int $post_id The Post ID * @return int The number of comments a post has */function get_comments_number( $post_id = 0 ) {	global $id;	$post_id = (int) $post_id;	if ( !$post_id )		$post_id = (int) $id;	$post = get_post($post_id);	if ( ! isset($post->comment_count) )		$count = 0;	else		$count = $post->comment_count;	return apply_filters('get_comments_number', $count, $post_id);}/** * Display the language string for the number of comments the current post has. * * @since 0.71 * @uses $id * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively. * * @param string $zero Text for no comments * @param string $one Text for one comment * @param string $more Text for more than one comment * @param string $deprecated Not used. */function comments_number( $zero = false, $one = false, $more = false, $deprecated = '' ) {	global $id;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	$number = get_comments_number($id);	if ( $number > 1 )		$output = str_replace('%', number_format_i18n($number), ( false === $more ) ? __('% Comments') : $more);	elseif ( $number == 0 )		$output = ( false === $zero ) ? __('No Comments') : $zero;	else // must be one		$output = ( false === $one ) ? __('1 Comment') : $one;	echo apply_filters('comments_number', $output, $number);}/** * Retrieve the text of the current comment. * * @since 1.5.0 * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the text. Optional. * @return string The comment content */function get_comment_text( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_text', $comment->comment_content);}/** * Displays the text of the current comment. * * @since 0.71 * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display * @uses get_comment_text() Gets the comment content * * @param int $comment_ID The ID of the comment for which to print the text. Optional. */function comment_text( $comment_ID = 0 ) {	echo apply_filters('comment_text', get_comment_text() );}/** * Retrieve the comment time of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filter() Calls 'get_comment_time' hook with the formatted time, the $d parameter, and $gmt parameter passed. * * @param string $d Optional. The format of the time (defaults to user's config) * @param bool $gmt Whether to use the GMT date * @param bool $translate Whether to translate the time (for use in feeds) * @return string The formatted time */function get_comment_time( $d = '', $gmt = false, $translate = true ) {	global $comment;	$comment_date = $gmt ? $comment->comment_date_gmt : $comment->comment_date;	if ( '' == $d )		$date = mysql2date(get_option('time_format'), $comment_date, $translate);	else		$date = mysql2date($d, $comment_date, $translate);	return apply_filters('get_comment_time', $date, $d, $gmt, $translate);}/** * Display the comment time of the current comment. * * @since 0.71 * * @param string $d Optional. The format of the time (defaults to user's config) */function comment_time( $d = '' ) {	echo get_comment_time($d);}/** * Retrieve the comment type of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_type' hook on the comment type * * @param int $comment_ID The ID of the comment for which to get the type. Optional. * @return string The comment type */function get_comment_type( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $comment->comment_type )		$comment->comment_type = 'comment';	return apply_filters('get_comment_type', $comment->comment_type);}/** * Display the comment type of the current comment. * * @since 0.71 * * @param string $commenttxt The string to display for comment type * @param string $trackbacktxt The string to display for trackback type * @param string $pingbacktxt The string to display for pingback type */function comment_type($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false) {    if ( false === $commenttxt ) $commenttxt = _x( 'Comment', 'noun' );    if ( false === $trackbacktxt ) $trackbacktxt = __( 'Trackback' );    if ( false === $pingbacktxt ) $pingbacktxt = __( 'Pingback' );	$type = get_comment_type();	switch( $type ) {		case 'trackback' :			echo $trackbacktxt;			break;		case 'pingback' :			echo $pingbacktxt;			break;		default :			echo $commenttxt;	}}/** * Retrieve The current post's trackback URL. * * There is a check to see if permalink's have been enabled and if so, will * retrieve the pretty path. If permalinks weren't enabled, the ID of the * current post is used and appended to the correct page to go to. * * @since 1.5.0 * @uses apply_filters() Calls 'trackback_url' on the resulting trackback URL * @uses $id * * @return string The trackback URL after being filtered */function get_trackback_url() {	global $id;	if ( '' != get_option('permalink_structure') ) {		$tb_url = trailingslashit(get_permalink()) . user_trailingslashit('trackback', 'single_trackback');	} else {		$tb_url = get_option('siteurl') . '/wp-trackback.php?p=' . $id;	}	return apply_filters('trackback_url', $tb_url);}/** * Displays the current post's trackback URL. * * @since 0.71 * @uses get_trackback_url() Gets the trackback url for the current post * * @param bool $deprecated_echo Remove backwards compat in 2.5 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead. */function trackback_url( $deprecated_echo = true ) {	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '2.5', __('Use <code>get_trackback_url()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_trackback_url();	else		return get_trackback_url();}/** * Whether the current post is open for comments. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if the comments are open */function comments_open( $post_id=NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->comment_status );	return apply_filters( 'comments_open', $open, $post_id );}/** * Whether the current post is open for pings. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if pings are accepted */function pings_open( $post_id = NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->ping_status );	return apply_filters( 'pings_open', $open, $post_id );}/** * Displays form token for unfiltered comments. * * Will only display nonce token if the current user has permissions for * unfiltered html. Won't display the token for other users. * * The function was backported to 2.0.10 and was added to versions 2.1.3 and * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0. * * Backported to 2.0.10. * * @since 2.1.3 * @uses $post Gets the ID of the current post for the token */function wp_comment_form_unfiltered_html_nonce() {	global $post;	$post_id = 0;	if ( !empty($post) )		$post_id = $post->ID;	if ( current_user_can('unfiltered_html') )		wp_nonce_field('unfiltered-html-comment_' . $post_id, '_wp_unfiltered_html_comment', false);}/** * Loads the comment template specified in $file. * * Will not display the comments template if not on single post or page, or if * the post does not have comments. * * Uses the WordPress database object to query for the comments. The comments * are passed through the 'comments_array' filter hook with the list of comments * and the post ID respectively. * * The $file path is passed through a filter hook called, 'comments_template' * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path * first and if it fails it will require the default comment themplate from the * default theme. If either does not exist, then the WordPress process will be * halted. It is advised for that reason, that the default theme is not deleted. * * @since 1.5.0 * @global array $comment List of comment objects for the current post * @uses $wpdb * @uses $id * @uses $post * @uses $withcomments Will not try to get the comments if the post has none. * * @param string $file Optional, default '/comments.php'. The file to load * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false. * @return null Returns null if no comments appear */function comments_template( $file = '/comments.php', $separate_comments = false ) {	global $wp_query, $withcomments, $post, $wpdb, $id, $comment, $user_login, $user_ID, $user_identity, $overridden_cpage;	if ( !(is_single() || is_page() || $withcomments) || empty($post) )		return;	if ( empty($file) )		$file = '/comments.php';	$req = get_option('require_name_email');	/**	 * Comment author information fetched from the comment cookies.	 *	 * @uses wp_get_current_commenter()	 */	$commenter = wp_get_current_commenter();	/**	 * The name of the current comment author escaped for use in attributes.	 */	$comment_author = $commenter['comment_author']; // Escaped by sanitize_comment_cookies()	/**	 * The email address of the current comment author escaped for use in attributes.	 */	$comment_author_email = $commenter['comment_author_email'];  // Escaped by sanitize_comment_cookies()	/**	 * The url of the current comment author escaped for use in attributes.	 */	$comment_author_url = esc_url($commenter['comment_author_url']);	/** @todo Use API instead of SELECTs. */	if ( $user_ID) {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND (comment_approved = '1' OR ( user_id = %d AND comment_approved = '0' ) )  ORDER BY comment_date_gmt", $post->ID, $user_ID));	} else if ( empty($comment_author) ) {		$comments = get_comments( array('post_id' => $post->ID, 'status' => 'approve', 'order' => 'ASC') );	} else {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND ( comment_approved = '1' OR ( comment_author = %s AND comment_author_email = %s AND comment_approved = '0' ) ) ORDER BY comment_date_gmt", $post->ID, wp_specialchars_decode($comment_author,ENT_QUOTES), $comment_author_email));	}	// keep $comments for legacy's sake	$wp_query->comments = apply_filters( 'comments_array', $comments, $post->ID );	$comments = &$wp_query->comments;	$wp_query->comment_count = count($wp_query->comments);	update_comment_cache($wp_query->comments);	if ( $separate_comments ) {		$wp_query->comments_by_type = &separate_comments($comments);		$comments_by_type = &$wp_query->comments_by_type;	}	$overridden_cpage = FALSE;	if ( '' == get_query_var('cpage') && get_option('page_comments') ) {		set_query_var( 'cpage', 'newest' == get_option('default_comments_page') ? get_comment_pages_count() : 1 );		$overridden_cpage = TRUE;	}	if ( !defined('COMMENTS_TEMPLATE') || !COMMENTS_TEMPLATE)		define('COMMENTS_TEMPLATE', true);	$include = apply_filters('comments_template', STYLESHEETPATH . $file );	if ( file_exists( $include ) )		require( $include );	elseif ( file_exists( TEMPLATEPATH . $file ) )		require( TEMPLATEPATH .  $file );	else // Backward compat code will be removed in a future release		require( WPINC . '/theme-compat/comments.php');}/** * Displays the JS popup script to show a comment. * * If the $file parameter is empty, then the home page is assumed. The defaults * for the window are 400px by 400px. * * For the comment link popup to work, this function has to be called or the * normal comment link will be assumed. * * @since 0.71 * @global string $wpcommentspopupfile The URL to use for the popup window * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called * * @param int $width Optional. The width of the popup window * @param int $height Optional. The height of the popup window * @param string $file Optional. Sets the location of the popup window */function comments_popup_script($width=400, $height=400, $file='') {	global $wpcommentspopupfile, $wpcommentsjavascript;	if (empty ($file)) {		$wpcommentspopupfile = '';  // Use the index.	} else {		$wpcommentspopupfile = $file;	}	$wpcommentsjavascript = 1;	$javascript = "<script type='text/javascript'>\nfunction wpopen (macagna) {\n    window.open(macagna, '_blank', 'width=$width,height=$height,scrollbars=yes,status=yes');\n}\n</script>\n";	echo $javascript;}/** * Displays the link to the comments popup window for the current post ID. * * Is not meant to be displayed on single posts and pages. Should be used on the * lists of posts * * @since 0.71 * @uses $id * @uses $wpcommentspopupfile * @uses $wpcommentsjavascript * @uses $post * * @param string $zero The string to display when no comments * @param string $one The string to display when only one comment is available * @param string $more The string to display when there are more than one comment * @param string $css_class The CSS class to use for comments * @param string $none The string to display when comments have been turned off * @return null Returns null on single posts and pages. */function comments_popup_link( $zero = false, $one = false, $more = false, $css_class = '', $none = false ) {	global $id, $wpcommentspopupfile, $wpcommentsjavascript;    if ( false === $zero ) $zero = __( 'No Comments' );    if ( false === $one ) $one = __( '1 Comment' );    if ( false === $more ) $more = __( '% Comments' );    if ( false === $none ) $none = __( 'Comments Off' );	$number = get_comments_number( $id );	if ( 0 == $number && !comments_open() && !pings_open() ) {		echo '<span' . ((!empty($css_class)) ? ' class="' . esc_attr( $css_class ) . '"' : '') . '>' . $none . '</span>';		return;	}	if ( post_password_required() ) {		echo __('Enter your password to view comments.');		return;	}	echo '<a href="';	if ( $wpcommentsjavascript ) {		if ( empty( $wpcommentspopupfile ) )			$home = home_url();		else			$home = get_option('siteurl');		echo $home . '/' . $wpcommentspopupfile . '?comments_popup=' . $id;		echo '" onclick="wpopen(this.href); return false"';	} else { // if comments_popup_script() is not in the template, display simple comment link		if ( 0 == $number )			echo get_permalink() . '#respond';		else			comments_link();		echo '"';	}	if ( !empty( $css_class ) ) {		echo ' class="'.$css_class.'" ';	}	$title = the_title_attribute( array('echo' => 0 ) );	echo apply_filters( 'comments_popup_link_attributes', '' );	echo ' title="' . esc_attr( sprintf( __('Comment on %s'), $title ) ) . '">';	comments_number( $zero, $one, $more );	echo '</a>';}/** * Retrieve HTML content for reply to comment link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_comment_reply_link($args = array(), $comment = null, $post = null) {	global $user_ID;	$defaults = array('add_below' => 'comment', 'respond_id' => 'respond', 'reply_text' => __('Reply'),		'login_text' => __('Log in to Reply'), 'depth' => 0, 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	if ( 0 == $args['depth'] || $args['max_depth'] <= $args['depth'] )		return;	extract($args, EXTR_SKIP);	$comment = get_comment($comment);	if ( empty($post) )		$post = $comment->comment_post_ID;	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	$link = '';	if ( get_option('comment_registration') && !$user_ID )		$link = '<a rel="nofollow" class="comment-reply-login" href="' . esc_url( wp_login_url( get_permalink() ) ) . '">' . $login_text . '</a>';	else		$link = "<a rel='nofollow' class='comment-reply-link' href='" . esc_url( add_query_arg( 'replytocom', $comment->comment_ID ) ) . "#" . $respond_id . "' onclick='return addComment.moveForm(\"$add_below-$comment->comment_ID\", \"$comment->comment_ID\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	return apply_filters('comment_reply_link', $before . $link . $after, $args, $comment, $post);}/** * Displays the HTML content for reply to comment link. * * @since 2.7.0 * @see get_comment_reply_link() Echoes result * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function comment_reply_link($args = array(), $comment = null, $post = null) {	echo get_comment_reply_link($args, $comment, $post);}/** * Retrieve HTML content for reply to post link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on.  Defaults to current post. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_post_reply_link($args = array(), $post = null) {	global $user_ID;	$defaults = array('add_below' => 'post', 'respond_id' => 'respond', 'reply_text' => __('Leave a Comment'),		'login_text' => __('Log in to leave a Comment'), 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	if ( get_option('comment_registration') && !$user_ID ) {		$link = '<a rel="nofollow" href="' . wp_login_url( get_permalink() ) . '">' . $login_text . '</a>';	} else {		$link = "<a rel='nofollow' class='comment-reply-link' href='" . get_permalink($post->ID) . "#$respond_id' onclick='return addComment.moveForm(\"$add_below-$post->ID\", \"0\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	}	return apply_filters('post_comments_link', $before . $link . $after, $post);}/** * Displays the HTML content for reply to post link. * @since 2.7.0 * @see get_post_reply_link() * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function post_reply_link($args = array(), $post = null) {	echo get_post_reply_link($args, $post);}/** * Retrieve HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function get_cancel_comment_reply_link($text = '') {	if ( empty($text) )		$text = __('Click here to cancel reply.');	$style = isset($_GET['replytocom']) ? '' : ' style="display:none;"';	$link = esc_html( remove_query_arg('replytocom') ) . '#respond';	return apply_filters('cancel_comment_reply_link', '<a rel="nofollow" id="cancel-comment-reply-link" href="' . $link . '"' . $style . '>' . $text . '</a>', $link, $text);}/** * Display HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function cancel_comment_reply_link($text = '') {	echo get_cancel_comment_reply_link($text);}/** * Retrieve hidden input HTML for replying to comments. * * @since 3.0.0 * * @return string Hidden input HTML for replying to comments */function get_comment_id_fields() {	global $id;	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	$result  = "<input type='hidden' name='comment_post_ID' value='$id' id='comment_post_ID' />\n";	$result .= "<input type='hidden' name='comment_parent' id='comment_parent' value='$replytoid' />\n";	return apply_filters('comment_id_fields', $result, $id, $replytoid);}/** * Output hidden input HTML for replying to comments. * * @since 2.7.0 * @see get_comment_id_fields() Echoes result */function comment_id_fields() {	echo get_comment_id_fields();}/** * Display text based on comment reply status. Only affects users with Javascript disabled. * * @since 2.7.0 * * @param string $noreplytext Optional. Text to display when not replying to a comment. * @param string $replytext Optional. Text to display when replying to a comment. Accepts "%s" for the author of the comment being replied to. * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment. */function comment_form_title( $noreplytext = false, $replytext = false, $linktoparent = TRUE ) {	global $comment;	if ( false === $noreplytext ) $noreplytext = __( 'Leave a Reply' );	if ( false === $replytext ) $replytext = __( 'Leave a Reply to %s' );	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	if ( 0 == $replytoid )		echo $noreplytext;	else {		$comment = get_comment($replytoid);		$author = ( $linktoparent ) ? '<a href="#comment-' . get_comment_ID() . '">' . get_comment_author() . '</a>' : get_comment_author();		printf( $replytext, $author );	}}/** * HTML comment list class. * * @package WordPress * @uses Walker * @since unknown */class Walker_Comment extends Walker {	/**	 * @see Walker::$tree_type	 * @since unknown	 * @var string	 */	var $tree_type = 'comment';	/**	 * @see Walker::$db_fields	 * @since unknown	 * @var array	 */	var $db_fields = array ('parent' => 'comment_parent', 'id' => 'comment_ID');	/**	 * @see Walker::start_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Uses 'style' argument for type of HTML list.	 */	function start_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "<ol class='children'>\n";				break;			default:			case 'ul':				echo "<ul class='children'>\n";				break;		}	}	/**	 * @see Walker::end_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Will only append content if style argument value is 'ol' or 'ul'.	 */	function end_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "</ol>\n";				break;			default:			case 'ul':				echo "</ul>\n";				break;		}	}	/**	 * This function is designed to enhance Walker::display_element() to	 * display children of higher nesting levels than selected inline on	 * the highest depth level displayed. This prevents them being orphaned	 * at the end of the comment list.	 *	 * Example: max_depth = 2, with 5 levels of nested content.	 * 1	 *  1.1	 *    1.1.1	 *    1.1.1.1	 *    1.1.1.1.1	 *    1.1.2	 *    1.1.2.1	 * 2	 *  2.2	 *	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		$id = $element->$id_field;		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );		// If we're at the max depth, and the current element still has children, loop over those and display them at this level		// This is to prevent them being orphaned to the end of the list.		if ( $max_depth <= $depth + 1 && isset( $children_elements[$id]) ) {			foreach ( $children_elements[ $id ] as $child )				$this->display_element( $child, $children_elements, $max_depth, $depth, $args, $output );			unset( $children_elements[ $id ] );		}	}	/**	 * @see Walker::start_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment Comment data object.	 * @param int $depth Depth of comment in reference to parents.	 * @param array $args	 */	function start_el(&$output, $comment, $depth, $args) {		$depth++;		$GLOBALS['comment_depth'] = $depth;		if ( !empty($args['callback']) ) {			call_user_func($args['callback'], $comment, $args, $depth);			return;		}		$GLOBALS['comment'] = $comment;		extract($args, EXTR_SKIP);		if ( 'div' == $args['style'] ) {			$tag = 'div';			$add_below = 'comment';		} else {			$tag = 'li';			$add_below = 'div-comment';		}?>		<<?php echo $tag ?> <?php comment_class(empty( $args['has_children'] ) ? '' : 'parent') ?> id="comment-<?php comment_ID() ?>">		<?php if ( 'div' != $args['style'] ) : ?>		<div id="div-comment-<?php comment_ID() ?>" class="comment-body">		<?php endif; ?>		<div class="comment-author vcard">		<?php if ($args['avatar_size'] != 0) echo get_avatar( $comment, $args['avatar_size'] ); ?>		<?php printf(__('<cite class="fn">%s</cite> <span class="says">says:</span>'), get_comment_author_link()) ?>		</div><?php if ($comment->comment_approved == '0') : ?>		<em><?php _e('Your comment is awaiting moderation.') ?></em>		<br /><?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo htmlspecialchars( get_comment_link( $comment->comment_ID ) ) ?>">			<?php				/* translators: 1: date, 2: time */				printf( __('%1$s at %2$s'), get_comment_date(),  get_comment_time()) ?></a><?php edit_comment_link(__('(Edit)'),'&nbsp;&nbsp;','' );			?>		</div>		<?php comment_text() ?>		<div class="reply">		<?php comment_reply_link(array_merge( $args, array('add_below' => $add_below, 'depth' => $depth, 'max_depth' => $args['max_depth']))) ?>		</div>		<?php if ( 'div' != $args['style'] ) : ?>		</div>		<?php endif; ?><?php	}	/**	 * @see Walker::end_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment	 * @param int $depth Depth of comment.	 * @param array $args	 */	function end_el(&$output, $comment, $depth, $args) {		if ( !empty($args['end-callback']) ) {			call_user_func($args['end-callback'], $comment, $args, $depth);			return;		}		if ( 'div' == $args['style'] )			echo "</div>\n";		else			echo "</li>\n";	}}/** * List comments * * Used in the comments.php template to list comments for a particular post * * @since 2.7.0 * @uses Walker_Comment * * @param string|array $args Formatting options * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments */function wp_list_comments($args = array(), $comments = null ) {	global $wp_query, $comment_alt, $comment_depth, $comment_thread_alt, $overridden_cpage, $in_comment_loop;	$in_comment_loop = true;	$comment_alt = $comment_thread_alt = 0;	$comment_depth = 1;	$defaults = array('walker' => null, 'max_depth' => '', 'style' => 'ul', 'callback' => null, 'end-callback' => null, 'type' => 'all',		'page' => '', 'per_page' => '', 'avatar_size' => 32, 'reverse_top_level' => null, 'reverse_children' => '');	$r = wp_parse_args( $args, $defaults );	// Figure out what comments we'll be looping through ($_comments)	if ( null !== $comments ) {		$comments = (array) $comments;		if ( empty($comments) )			return;		if ( 'all' != $r['type'] ) {			$comments_by_type = &separate_comments($comments);			if ( empty($comments_by_type[$r['type']]) )				return;			$_comments = $comments_by_type[$r['type']];		} else {			$_comments = $comments;		}	} else {		if ( empty($wp_query->comments) )			return;		if ( 'all' != $r['type'] ) {			if ( empty($wp_query->comments_by_type) )				$wp_query->comments_by_type = &separate_comments($wp_query->comments);			if ( empty($wp_query->comments_by_type[$r['type']]) )				return;			$_comments = $wp_query->comments_by_type[$r['type']];		} else {			$_comments = $wp_query->comments;		}	}	if ( '' === $r['per_page'] && get_option('page_comments') )		$r['per_page'] = get_query_var('comments_per_page');	if ( empty($r['per_page']) ) {		$r['per_page'] = 0;		$r['page'] = 0;	}	if ( '' === $r['max_depth'] ) {		if ( get_option('thread_comments') )			$r['max_depth'] = get_option('thread_comments_depth');		else			$r['max_depth'] = -1;	}	if ( '' === $r['page'] ) {		if ( empty($overridden_cpage) ) {			$r['page'] = get_query_var('cpage');		} else {			$threaded = ( -1 != $r['max_depth'] );			$r['page'] = ( 'newest' == get_option('default_comments_page') ) ? get_comment_pages_count($_comments, $r['per_page'], $threaded) : 1;			set_query_var( 'cpage', $r['page'] );		}	}	// Validation check	$r['page'] = intval($r['page']);	if ( 0 == $r['page'] && 0 != $r['per_page'] )		$r['page'] = 1;	if ( null === $r['reverse_top_level'] )		$r['reverse_top_level'] = ( 'desc' == get_option('comment_order') );	extract( $r, EXTR_SKIP );	if ( empty($walker) )		$walker = new Walker_Comment;	$walker->paged_walk($_comments, $max_depth, $page, $per_page, $r);	$wp_query->max_num_comment_pages = $walker->max_pages;	$in_comment_loop = false;}/** * Outputs a complete commenting form for use within a template. * Most strings and form fields may be controlled through the $args array passed * into the function, while you may also choose to use the comment_form_default_fields * filter to modify the array of default fields if you'd just like to add a new * one or remove a single field. All fields are also individually passed through * a filter of the form comment_form_field_$name where $name is the key used * in the array of fields. * * @since 3.0.0 * @param array $args Options for strings, fields etc in the form * @param mixed $post_id Post ID to generate the form for, uses the current post if null * @return void */function comment_form( $args = array(), $post_id = null ) {	global $user_identity, $id;	if ( null === $post_id )		$post_id = $id;	else		$id = $post_id;	$commenter = wp_get_current_commenter();	$req = get_option( 'require_name_email' );	$aria_req = ( $req ? " aria-required='true'" : '' );	$fields =  array(		'author' => '<p class="comment-form-author">' . '<label for="author">' . __( 'Name' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30"' . $aria_req . ' /></p>',		'email'  => '<p class="comment-form-email"><label for="email">' . __( 'Email' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="email" name="email" type="text" value="' . esc_attr(  $commenter['comment_author_email'] ) . '" size="30"' . $aria_req . ' /></p>',		'url'    => '<p class="comment-form-url"><label for="url">' . __( 'Website' ) . '</label>' .		            '<input id="url" name="url" type="text" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" /></p>',	);	$required_text = sprintf( ' ' . __('Required fields are marked %s'), '<span class="required">*</span>' );	$defaults = array(		'fields'               => apply_filters( 'comment_form_default_fields', $fields ),		'comment_field'        => '<p class="comment-form-comment"><label for="comment">' . _x( 'Comment', 'noun' ) . '</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>',		'must_log_in'          => '<p class="must-log-in">' .  sprintf( __( 'You must be <a href="%s">logged in</a> to post a comment.' ), wp_login_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'logged_in_as'         => '<p class="logged-in-as">' . sprintf( __( 'Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out?</a>' ), admin_url( 'profile.php' ), $user_identity, wp_logout_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'comment_notes_before' => '<p class="comment-notes">' . __( 'Your email address will not be published.' ) . ( $req ? $required_text : '' ) . '</p>',		'comment_notes_after'  => '<p class="form-allowed-tags">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s' ), ' <code>' . allowed_tags() . '</code>' ) . '</p>',		'id_form'              => 'commentform',		'id_submit'            => 'submit',		'title_reply'          => __( 'Leave a Reply' ),		'title_reply_to'       => __( 'Leave a Reply to %s' ),		'cancel_reply_link'    => __( 'Cancel reply' ),		'label_submit'         => __( 'Post Comment' ),	);	$args = wp_parse_args( $args, apply_filters( 'comment_form_defaults', $defaults ) );	?>		<?php if ( comments_open() ) : ?>			<?php do_action( 'comment_form_before' ); ?>			<div id="respond">				<h3 id="reply-title"><?php comment_form_title( $args['title_reply'], $args['title_reply_to'] ); ?> <small><?php cancel_comment_reply_link( $args['cancel_reply_link'] ); ?></small></h3>				<?php if ( get_option( 'comment_registration' ) && !is_user_logged_in() ) : ?>					<?php echo $args['must_log_in']; ?>					<?php do_action( 'comment_form_must_log_in_after' ); ?>				<?php else : ?>					<form action="<?php echo site_url( '/wp-comments-post.php' ); ?>" method="post" id="<?php echo esc_attr( $args['id_form'] ); ?>">						<?php do_action( 'comment_form_top' ); ?>						<?php if ( is_user_logged_in() ) : ?>							<?php echo apply_filters( 'comment_form_logged_in', $args['logged_in_as'], $commenter, $user_identity ); ?>							<?php do_action( 'comment_form_logged_in_after', $commenter, $user_identity ); ?>						<?php else : ?>							<?php echo $args['comment_notes_before']; ?>							<?php							do_action( 'comment_form_before_fields' );							foreach ( (array) $args['fields'] as $name => $field ) {								echo apply_filters( "comment_form_field_{$name}", $field ) . "\n";							}							do_action( 'comment_form_after_fields' );							?>						<?php endif; ?>						<?php echo apply_filters( 'comment_form_field_comment', $args['comment_field'] ); ?>						<?php echo $args['comment_notes_after']; ?>						<p class="form-submit">							<input name="submit" type="submit" id="<?php echo esc_attr( $args['id_submit'] ); ?>" value="<?php echo esc_attr( $args['label_submit'] ); ?>" />							<?php comment_id_fields(); ?>						</p>						<?php do_action( 'comment_form', $post_id ); ?>					</form>				<?php endif; ?>			</div><!-- #respond -->			<?php do_action( 'comment_form_after' ); ?>		<?php else : ?>			<?php do_action( 'comment_form_comments_closed' ); ?>		<?php endif; ?>	<?php}?>
<?php/** * Atom Publishing Protocol support for WordPress * * @version 1.0.5-dc *//** * WordPress is handling an Atom Publishing Protocol request. * * @var bool */define('APP_REQUEST', true);/** Set up WordPress environment */require_once('./wp-load.php');/** Atom Publishing Protocol Class */require_once(ABSPATH . WPINC . '/atomlib.php');/** Admin Image API for metadata updating */require_once(ABSPATH . '/wp-admin/includes/image.php');$_SERVER['PATH_INFO'] = preg_replace( '/.*\/wp-app\.php/', '', $_SERVER['REQUEST_URI'] );/** * Whether to enable Atom Publishing Protocol Logging. * * @name app_logging * @var int|bool */$app_logging = 0;/** * Whether to always authenticate user. Permanently set to true. * * @name always_authenticate * @var int|bool * @todo Should be an option somewhere */$always_authenticate = 1;/** * Writes logging info to a file. * * @since 2.2.0 * @uses $app_logging * @package WordPress * @subpackage Logging * * @param string $label Type of logging * @param string $msg Information describing logging reason. */function log_app($label,$msg) {	global $app_logging;	if ($app_logging) {		$fp = fopen( 'wp-app.log', 'a+');		$date = gmdate( 'Y-m-d H:i:s' );		fwrite($fp, "\n\n$date - $label\n$msg\n");		fclose($fp);	}}/** * Filter to add more post statuses. * * @since 2.2.0 * * @param string $where SQL statement to filter. * @return string Filtered SQL statement with added post_status for where clause. */function wa_posts_where_include_drafts_filter($where) {	$where = str_replace("post_status = 'publish'","post_status = 'publish' OR post_status = 'future' OR post_status = 'draft' OR post_status = 'inherit'", $where);	return $where;}add_filter('posts_where', 'wa_posts_where_include_drafts_filter');/** * WordPress AtomPub API implementation. * * @package WordPress * @subpackage Publishing * @since 2.2.0 */class AtomServer {	/**	 * ATOM content type.	 *	 * @since 2.2.0	 * @var string	 */	var $ATOM_CONTENT_TYPE = 'application/atom+xml';	/**	 * Categories ATOM content type.	 *	 * @since 2.2.0	 * @var string	 */	var $CATEGORIES_CONTENT_TYPE = 'application/atomcat+xml';	/**	 * Service ATOM content type.	 *	 * @since 2.3.0	 * @var string	 */	var $SERVICE_CONTENT_TYPE = 'application/atomsvc+xml';	/**	 * ATOM XML namespace.	 *	 * @since 2.3.0	 * @var string	 */	var $ATOM_NS = 'http://www.w3.org/2005/Atom';	/**	 * ATOMPUB XML namespace.	 *	 * @since 2.3.0	 * @var string	 */	var $ATOMPUB_NS = 'http://www.w3.org/2007/app';	/**	 * Entries path.	 *	 * @since 2.2.0	 * @var string	 */	var $ENTRIES_PATH = "posts";	/**	 * Categories path.	 *	 * @since 2.2.0	 * @var string	 */	var $CATEGORIES_PATH = "categories";	/**	 * Media path.	 *	 * @since 2.2.0	 * @var string	 */	var $MEDIA_PATH = "attachments";	/**	 * Entry path.	 *	 * @since 2.2.0	 * @var string	 */	var $ENTRY_PATH = "post";	/**	 * Service path.	 *	 * @since 2.2.0	 * @var string	 */	var $SERVICE_PATH = "service";	/**	 * Media single path.	 *	 * @since 2.2.0	 * @var string	 */	var $MEDIA_SINGLE_PATH = "attachment";	/**	 * ATOMPUB parameters.	 *	 * @since 2.2.0	 * @var array	 */	var $params = array();	/**	 * Supported ATOMPUB media types.	 *	 * @since 2.3.0	 * @var array	 */	var $media_content_types = array('image/*','audio/*','video/*');	/**	 * ATOMPUB content type(s).	 *	 * @since 2.2.0	 * @var array	 */	var $atom_content_types = array('application/atom+xml');	/**	 * ATOMPUB methods.	 *	 * @since 2.2.0	 * @var unknown_type	 */	var $selectors = array();	/**	 * Whether to do output.	 *	 * Support for head.	 *	 * @since 2.2.0	 * @var bool	 */	var $do_output = true;	/**	 * PHP4 constructor - Sets up object properties.	 *	 * @since 2.2.0	 * @return AtomServer	 */	function AtomServer() {		$this->script_name = array_pop(explode('/',$_SERVER['SCRIPT_NAME']));		$this->app_base = site_url( $this->script_name . '/' );		$this->selectors = array(			'@/service$@' =>				array('GET' => 'get_service'),			'@/categories$@' =>				array('GET' => 'get_categories_xml'),			'@/post/(\d+)$@' =>				array('GET' => 'get_post',						'PUT' => 'put_post',						'DELETE' => 'delete_post'),			'@/posts/?(\d+)?$@' =>				array('GET' => 'get_posts',						'POST' => 'create_post'),			'@/attachments/?(\d+)?$@' =>				array('GET' => 'get_attachment',						'POST' => 'create_attachment'),			'@/attachment/file/(\d+)$@' =>				array('GET' => 'get_file',						'PUT' => 'put_file',						'DELETE' => 'delete_file'),			'@/attachment/(\d+)$@' =>				array('GET' => 'get_attachment',						'PUT' => 'put_attachment',						'DELETE' => 'delete_attachment'),		);	}	/**	 * Handle ATOMPUB request.	 *	 * @since 2.2.0	 */	function handle_request() {		global $always_authenticate;		if ( !empty( $_SERVER['ORIG_PATH_INFO'] ) )			$path = $_SERVER['ORIG_PATH_INFO'];		else			$path = $_SERVER['PATH_INFO'];		$method = $_SERVER['REQUEST_METHOD'];		log_app('REQUEST',"$method $path\n================");		$this->process_conditionals();		//$this->process_conditionals();		// exception case for HEAD (treat exactly as GET, but don't output)		if ($method == 'HEAD') {			$this->do_output = false;			$method = 'GET';		}		// redirect to /service in case no path is found.		if (strlen($path) == 0 || $path == '/')			$this->redirect($this->get_service_url());		// check to see if AtomPub is enabled		if ( !get_option( 'enable_app' ) )			$this->forbidden( sprintf( __( 'AtomPub services are disabled on this site.  An admin user can enable them at %s' ), admin_url('options-writing.php') ) );		// dispatch		foreach ( $this->selectors as $regex => $funcs ) {			if ( preg_match($regex, $path, $matches) ) {				if ( isset($funcs[$method]) ) {					// authenticate regardless of the operation and set the current					// user. each handler will decide if auth is required or not.					if ( !$this->authenticate() ) {						if ( $always_authenticate )							$this->auth_required('Credentials required.');					}					array_shift($matches);					call_user_func_array(array(&$this,$funcs[$method]), $matches);					exit();				} else {					// only allow what we have handlers for...					$this->not_allowed(array_keys($funcs));				}			}		}		// oops, nothing found		$this->not_found();	}	/**	 * Retrieve XML for ATOMPUB service.	 *	 * @since 2.2.0	 */	function get_service() {		log_app('function','get_service()');		if ( !current_user_can( 'edit_posts' ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this site.' ) );		$entries_url = esc_attr($this->get_entries_url());		$categories_url = esc_attr($this->get_categories_url());		$media_url = esc_attr($this->get_attachments_url());		$accepted_media_types = '';		foreach ($this->media_content_types as $med) {			$accepted_media_types = $accepted_media_types . "<accept>" . $med . "</accept>";		}		$atom_prefix="atom";		$atom_blogname = get_bloginfo('name');		$service_doc = <<<EOD<service xmlns="$this->ATOMPUB_NS" xmlns:$atom_prefix="$this->ATOM_NS">  <workspace>    <$atom_prefix:title>$atom_blogname Workspace</$atom_prefix:title>    <collection href="$entries_url">      <$atom_prefix:title>$atom_blogname Posts</$atom_prefix:title>      <accept>$this->ATOM_CONTENT_TYPE;type=entry</accept>      <categories href="$categories_url" />    </collection>    <collection href="$media_url">      <$atom_prefix:title>$atom_blogname Media</$atom_prefix:title>      $accepted_media_types    </collection>  </workspace></service>EOD;		$this->output($service_doc, $this->SERVICE_CONTENT_TYPE);	}	/**	 * Retrieve categories list in XML format.	 *	 * @since 2.2.0	 */	function get_categories_xml() {		log_app('function','get_categories_xml()');		if ( !current_user_can( 'edit_posts' ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this site.' ) );		$home = esc_attr(get_bloginfo_rss('url'));		$categories = "";		$cats = get_categories(array('hierarchical' => 0, 'hide_empty' => 0));		foreach ( (array) $cats as $cat ) {			$categories .= "    <category term=\"" . esc_attr($cat->name) .  "\" />\n";		}		$output = <<<EOD<app:categories xmlns:app="$this->ATOMPUB_NS"	xmlns="$this->ATOM_NS"	fixed="yes" scheme="$home">	$categories</app:categories>EOD;		$this->output($output, $this->CATEGORIES_CONTENT_TYPE);	}	/**	 * Create new post.	 *	 * @since 2.2.0	 */	function create_post() {		global $blog_id, $user_ID;		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if ( !$parser->parse() )			$this->client_error();		$entry = array_pop($parser->feed->entries);		log_app('Received entry:', print_r($entry,true));		$catnames = array();		foreach ( $entry->categories as $cat ) {			array_push($catnames, $cat["term"]);		}		$wp_cats = get_categories(array('hide_empty' => false));		$post_category = array();		foreach ( $wp_cats as $cat ) {			if ( in_array($cat->name, $catnames) )				array_push($post_category, $cat->term_id);		}		$publish = ! ( isset( $entry->draft ) && 'yes' == trim( $entry->draft ) );		$cap = ($publish) ? 'publish_posts' : 'edit_posts';		if ( !current_user_can($cap) )			$this->auth_required(__('Sorry, you do not have the right to edit/publish new posts.'));		$blog_ID = (int ) $blog_id;		$post_status = ($publish) ? 'publish' : 'draft';		$post_author = (int) $user_ID;		$post_title = $entry->title[1];		$post_content = $entry->content[1];		$post_excerpt = $entry->summary[1];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		if ( isset( $_SERVER['HTTP_SLUG'] ) )			$post_name = $_SERVER['HTTP_SLUG'];		$post_data = compact('blog_ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_name');		$this->escape($post_data);		log_app('Inserting Post. Data:', print_r($post_data,true));		$postID = wp_insert_post($post_data);		if ( is_wp_error( $postID ) )			$this->internal_error($postID->get_error_message());		if ( !$postID )			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		// getting warning here about unable to set headers		// because something in the cache is printing to the buffer		// could we clean up wp_set_post_categories or cache to not print		// this could affect our ability to send back the right headers		@wp_set_post_categories($postID, $post_category);		do_action( 'atompub_create_post', $postID, $entry );		$output = $this->get_entry($postID);		log_app('function',"create_post($postID)");		$this->created($postID, $output);	}	/**	 * Retrieve post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function get_post($postID) {		global $entry;		if ( !current_user_can( 'edit_post', $postID ) )			$this->auth_required( __( 'Sorry, you do not have the right to access this post.' ) );		$this->set_current_entry($postID);		$output = $this->get_entry($postID);		log_app('function',"get_post($postID)");		$this->output($output);	}	/**	 * Update post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_post($postID) {		// checked for valid content-types (atom+xml)		// quick check and exit		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if ( !$parser->parse() )			$this->bad_request();		$parsed = array_pop($parser->feed->entries);		log_app('Received UPDATED entry:', print_r($parsed,true));		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $entry['ID']) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$publish = ! ( isset($parsed->draft) && 'yes' == trim($parsed->draft) );		$post_status = ($publish) ? 'publish' : 'draft';		extract($entry);		$post_title = $parsed->title[1];		$post_content = $parsed->content[1];		$post_excerpt = $parsed->summary[1];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt');		$this->escape($postdata);		$result = wp_update_post($postdata);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be edited.'));		do_action( 'atompub_put_post', $ID, $parsed );		log_app('function',"put_post($postID)");		$this->ok();	}	/**	 * Remove post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function delete_post($postID) {		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to delete this post.'));		if ( $entry['post_type'] == 'attachment' ) {			$this->delete_attachment($postID);		} else {			$result = wp_delete_post($postID);			if ( !$result ) {				$this->internal_error(__('For some strange yet very annoying reason, this post could not be deleted.'));			}			log_app('function',"delete_post($postID)");			$this->ok();		}	}	/**	 * Retrieve attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Optional. Post ID.	 */	function get_attachment($postID = null) {		if ( !current_user_can( 'upload_files' ) )			$this->auth_required( __( 'Sorry, you do not have permission to upload files.' ) );		if ( !isset($postID) ) {			$this->get_attachments();		} else {			$this->set_current_entry($postID);			$output = $this->get_entry($postID, 'attachment');			log_app('function',"get_attachment($postID)");			$this->output($output);		}	}	/**	 * Create new attachment.	 *	 * @since 2.2.0	 */	function create_attachment() {		$type = $this->get_accepted_content_type();		if ( !current_user_can('upload_files') )			$this->auth_required(__('You do not have permission to upload files.'));		$fp = fopen("php://input", "rb");		$bits = null;		while ( !feof($fp) ) {			$bits .= fread($fp, 4096);		}		fclose($fp);		$slug = '';		if ( isset( $_SERVER['HTTP_SLUG'] ) )			$slug = sanitize_file_name( $_SERVER['HTTP_SLUG'] );		elseif ( isset( $_SERVER['HTTP_TITLE'] ) )			$slug = sanitize_file_name( $_SERVER['HTTP_TITLE'] );		elseif ( empty( $slug ) ) // just make a random name			$slug = substr( md5( uniqid( microtime() ) ), 0, 7);		$ext = preg_replace( '|.*/([a-z0-9]+)|', '$1', $_SERVER['CONTENT_TYPE'] );		$slug = "$slug.$ext";		$file = wp_upload_bits( $slug, NULL, $bits);		log_app('wp_upload_bits returns:',print_r($file,true));		$url = $file['url'];		$file = $file['file'];		do_action('wp_create_file_in_uploads', $file); // replicate		// Construct the attachment array		$attachment = array(			'post_title' => $slug,			'post_content' => $slug,			'post_status' => 'attachment',			'post_parent' => 0,			'post_mime_type' => $type,			'guid' => $url			);		// Save the data		$postID = wp_insert_attachment($attachment, $file);		if (!$postID)			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		$output = $this->get_entry($postID, 'attachment');		$this->created($postID, $output, 'attachment');		log_app('function',"create_attachment($postID)");	}	/**	 * Update attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_attachment($postID) {		// checked for valid content-types (atom+xml)		// quick check and exit		$this->get_accepted_content_type($this->atom_content_types);		$parser = new AtomParser();		if (!$parser->parse()) {			$this->bad_request();		}		$parsed = array_pop($parser->feed->entries);		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $entry['ID']) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		extract($entry);		$post_title = $parsed->title[1];		$post_content = $parsed->summary[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'post_modified', 'post_modified_gmt');		$this->escape($postdata);		$result = wp_update_post($postdata);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be edited.'));		log_app('function',"put_attachment($postID)");		$this->ok();	}	/**	 * Remove attachment.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function delete_attachment($postID) {		log_app('function',"delete_attachment($postID). File '$location' deleted.");		// check for not found		global $entry;		$this->set_current_entry($postID);		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to delete this post.'));		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$filetype = wp_check_filetype($location);		if ( !isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']) )			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		// delete file		@unlink($location);		// delete attachment		$result = wp_delete_post($postID);		if ( !$result )			$this->internal_error(__('For some strange yet very annoying reason, this post could not be deleted.'));		log_app('function',"delete_attachment($postID). File '$location' deleted.");		$this->ok();	}	/**	 * Retrieve attachment from post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function get_file($postID) {		// check for not found		global $entry;		$this->set_current_entry($postID);		// then whether user can edit the specific post		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$location = get_option ('upload_path') . '/' . $location;		$filetype = wp_check_filetype($location);		if ( !isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']) )			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		status_header('200');		header('Content-Type: ' . $entry['post_mime_type']);		header('Connection: close');		if ( $fp = fopen($location, "rb") ) {			status_header('200');			header('Content-Type: ' . $entry['post_mime_type']);			header('Connection: close');			while ( !feof($fp) ) {				echo fread($fp, 4096);			}			fclose($fp);		} else {			status_header ('404');		}		log_app('function',"get_file($postID)");		exit;	}	/**	 * Upload file to blog and add attachment to post.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function put_file($postID) {		// first check if user can upload		if ( !current_user_can('upload_files') )			$this->auth_required(__('You do not have permission to upload files.'));		// check for not found		global $entry;		$this->set_current_entry($postID);		// then whether user can edit the specific post		if ( !current_user_can('edit_post', $postID) )			$this->auth_required(__('Sorry, you do not have the right to edit this post.'));		$upload_dir = wp_upload_dir( );		$location = get_post_meta($entry['ID'], '_wp_attached_file', true);		$filetype = wp_check_filetype($location);		$location = "{$upload_dir['basedir']}/{$location}";		if (!isset($location) || 'attachment' != $entry['post_type'] || empty($filetype['ext']))			$this->internal_error(__('Error ocurred while accessing post metadata for file location.'));		$fp = fopen("php://input", "rb");		$localfp = fopen($location, "w+");		while ( !feof($fp) ) {			fwrite($localfp,fread($fp, 4096));		}		fclose($fp);		fclose($localfp);		$ID = $entry['ID'];		$pubtimes = $this->get_publish_time($entry->published);		$post_date = $pubtimes[0];		$post_date_gmt = $pubtimes[1];		$pubtimes = $this->get_publish_time($parsed->updated);		$post_modified = $pubtimes[0];		$post_modified_gmt = $pubtimes[1];		$post_data = compact('ID', 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt');		$result = wp_update_post($post_data);		if ( !$result )			$this->internal_error(__('Sorry, your entry could not be posted. Something wrong happened.'));		wp_update_attachment_metadata( $postID, wp_generate_attachment_metadata( $postID, $location ) );		log_app('function',"put_file($postID)");		$this->ok();	}	/**	 * Retrieve entries URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @return string	 */	function get_entries_url($page = null) {		if ( isset($GLOBALS['post_type']) && ( $GLOBALS['post_type'] == 'attachment' ) )			$path = $this->MEDIA_PATH;		else			$path = $this->ENTRIES_PATH;		$url = $this->app_base . $path;		if ( isset($page) && is_int($page) )			$url .= "/$page";		return $url;	}	/**	 * Display entries URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 */	function the_entries_url($page = null) {		echo $this->get_entries_url($page);	}	/**	 * Retrieve categories URL.	 *	 * @since 2.2.0	 *	 * @param mixed $deprecated Not used.	 * @return string	 */	function get_categories_url($deprecated = '') {		if ( !empty( $deprecated ) )			_deprecated_argument( __FUNCTION__, '2.5' );		return $this->app_base . $this->CATEGORIES_PATH;	}	/**	 * Display category URL.	 *	 * @since 2.2.0	 */	function the_categories_url() {		echo $this->get_categories_url();	}	/**	 * Retrieve attachment URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @return string	 */	function get_attachments_url($page = null) {		$url = $this->app_base . $this->MEDIA_PATH;		if (isset($page) && is_int($page)) {			$url .= "/$page";		}		return $url;	}	/**	 * Display attachment URL.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 */	function the_attachments_url($page = null) {		echo $this->get_attachments_url($page);	}	/**	 * Retrieve service URL.	 *	 * @since 2.3.0	 *	 * @return string	 */	function get_service_url() {		return $this->app_base . $this->SERVICE_PATH;	}	/**	 * Retrieve entry URL.	 *	 * @since 2.7.0	 *	 * @param int $postID Post ID.	 * @return string	 */	function get_entry_url($postID = null) {		if (!isset($postID)) {			global $post;			$postID = (int) $post->ID;		}		$url = $this->app_base . $this->ENTRY_PATH . "/$postID";		log_app('function',"get_entry_url() = $url");		return $url;	}	/**	 * Display entry URL.	 *	 * @since 2.7.0	 *	 * @param int $postID Post ID.	 */	function the_entry_url($postID = null) {		echo $this->get_entry_url($postID);	}	/**	 * Retrieve media URL.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 * @return string	 */	function get_media_url($postID = null) {		if (!isset($postID)) {			global $post;			$postID = (int) $post->ID;		}		$url = $this->app_base . $this->MEDIA_SINGLE_PATH ."/file/$postID";		log_app('function',"get_media_url() = $url");		return $url;	}	/**	 * Display the media URL.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function the_media_url($postID = null) {		echo $this->get_media_url($postID);	}	/**	 * Set the current entry to post ID.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 */	function set_current_entry($postID) {		global $entry;		log_app('function',"set_current_entry($postID)");		if (!isset($postID)) {			// $this->bad_request();			$this->not_found();		}		$entry = wp_get_single_post($postID,ARRAY_A);		if (!isset($entry) || !isset($entry['ID']))			$this->not_found();		return;	}	/**	 * Display posts XML.	 *	 * @since 2.2.0	 *	 * @param int $page Optional. Page ID.	 * @param string $post_type Optional, default is 'post'. Post Type.	 */	function get_posts($page = 1, $post_type = 'post') {			log_app('function',"get_posts($page, '$post_type')");			$feed = $this->get_feed($page, $post_type);			$this->output($feed);	}	/**	 * Display attachment XML.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @param string $post_type Optional, default is 'attachment'. Post type.	 */	function get_attachments($page = 1, $post_type = 'attachment') {		log_app('function',"get_attachments($page, '$post_type')");		$GLOBALS['post_type'] = $post_type;		$feed = $this->get_feed($page, $post_type);		$this->output($feed);	}	/**	 * Retrieve feed XML.	 *	 * @since 2.2.0	 *	 * @param int $page Page ID.	 * @param string $post_type Optional, default is post. Post type.	 * @return string	 */	function get_feed($page = 1, $post_type = 'post') {		global $post, $wp, $wp_query, $posts, $wpdb, $blog_id;		log_app('function',"get_feed($page, '$post_type')");		ob_start();		$this->ENTRY_PATH = $post_type;		if (!isset($page)) {			$page = 1;		}		$page = (int) $page;		$count = get_option('posts_per_rss');		wp('posts_per_page=' . $count . '&offset=' . ($count * ($page-1) . '&orderby=modified'));		$post = $GLOBALS['post'];		$posts = $GLOBALS['posts'];		$wp = $GLOBALS['wp'];		$wp_query = $GLOBALS['wp_query'];		$wpdb = $GLOBALS['wpdb'];		$blog_id = (int) $GLOBALS['blog_id'];		log_app('function',"query_posts(# " . print_r($wp_query, true) . "#)");		log_app('function',"total_count(# $wp_query->max_num_pages #)");		$last_page = $wp_query->max_num_pages;		$next_page = (($page + 1) > $last_page) ? NULL : $page + 1;		$prev_page = ($page - 1) < 1 ? NULL : $page - 1;		$last_page = ((int)$last_page == 1 || (int)$last_page == 0) ? NULL : (int) $last_page;		$self_page = $page > 1 ? $page : NULL;?><feed xmlns="<?php echo $this->ATOM_NS ?>" xmlns:app="<?php echo $this->ATOMPUB_NS ?>" xml:lang="<?php echo get_option('rss_language'); ?>" <?php do_action('app_ns'); ?> ><id><?php $this->the_entries_url() ?></id><updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated><title type="text"><?php bloginfo_rss('name') ?></title><subtitle type="text"><?php bloginfo_rss("description") ?></subtitle><link rel="first" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url() ?>" /><?php if (isset($prev_page)): ?><link rel="previous" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($prev_page) ?>" /><?php endif; ?><?php if (isset($next_page)): ?><link rel="next" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($next_page) ?>" /><?php endif; ?><link rel="last" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($last_page) ?>" /><link rel="self" type="<?php echo $this->ATOM_CONTENT_TYPE ?>" href="<?php $this->the_entries_url($self_page) ?>" /><rights type="text">Copyright <?php echo date('Y'); ?></rights><?php do_action('app_head'); ?><?php if ( have_posts() ) {			while ( have_posts() ) {				the_post();				$this->echo_entry();			}		}?></feed><?php		$feed = ob_get_contents();		ob_end_clean();		return $feed;	}	/**	 * Display entry XML.	 *	 * @since 2.2.0	 *	 * @param int $postID Post ID.	 * @param string $post_type Optional, default is post. Post type.	 * @return string.	 */	function get_entry($postID, $post_type = 'post') {		log_app('function',"get_entry($postID, '$post_type')");		ob_start();		switch($post_type) {			case 'post':				$varname = 'p';				break;			case 'attachment':				$this->ENTRY_PATH = 'attachment';				$varname = 'attachment_id';				break;		}		query_posts($varname . '=' . $postID);		if ( have_posts() ) {			while ( have_posts() ) {				the_post();				$this->echo_entry();				log_app('$post',print_r($GLOBALS['post'],true));				$entry = ob_get_contents();				break;			}		}		ob_end_clean();		log_app('get_entry returning:',$entry);		return $entry;	}	/**	 * Display post content XML.	 *	 * @since 2.3.0	 */	function echo_entry() { ?><entry xmlns="<?php echo $this->ATOM_NS ?>"       xmlns:app="<?php echo $this->ATOMPUB_NS ?>" xml:lang="<?php echo get_option('rss_language'); ?>">	<id><?php the_guid( $GLOBALS['post']->ID ); ?></id><?php list($content_type, $content) = prep_atom_text_construct(get_the_title()); ?>	<title type="<?php echo $content_type ?>"><?php echo $content ?></title>	<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>	<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>	<app:edited><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></app:edited>	<app:control>		<app:draft><?php echo ($GLOBALS['post']->post_status == 'draft' ? 'yes' : 'no') ?></app:draft>	</app:control>	<author>		<name><?php the_author()?></name><?php if ( get_the_author_meta('url') && get_the_author_meta('url') != 'http://' ) { ?>		<uri><?php the_author_meta('url') ?></uri><?php } ?>	</author><?php if ($GLOBALS['post']->post_type == 'attachment') { ?>	<link rel="edit-media" href="<?php $this->the_media_url() ?>" />	<content type="<?php echo $GLOBALS['post']->post_mime_type ?>" src="<?php the_guid() ; ?>"/><?php } else { ?>	<link href="<?php the_permalink_rss() ?>" /><?php if ( strlen( $GLOBALS['post']->post_content ) ) :list($content_type, $content) = prep_atom_text_construct(get_the_content()); ?>	<content type="<?php echo $content_type ?>"><?php echo $content ?></content><?php endif; ?><?php } ?>	<link rel="edit" href="<?php $this->the_entry_url() ?>" />	<?php the_category_rss( 'atom' ); ?><?php list($content_type, $content) = prep_atom_text_construct(get_the_excerpt()); ?>	<summary type="<?php echo $content_type ?>"><?php echo $content ?></summary>	<?php do_action('app_entry'); ?></entry><?php }	/**	 * Set 'OK' (200) status header.	 *	 * @since 2.2.0	 */	function ok() {		log_app('Status','200: OK');		header('Content-Type: text/plain');		status_header('200');		exit;	}	/**	 * Set 'No Content' (204) status header.	 *	 * @since 2.2.0	 */	function no_content() {		log_app('Status','204: No Content');		header('Content-Type: text/plain');		status_header('204');		echo "Moved to Trash.";		exit;	}	/**	 * Display 'Internal Server Error' (500) status header.	 *	 * @since 2.2.0	 *	 * @param string $msg Optional. Status string.	 */	function internal_error($msg = 'Internal Server Error') {		log_app('Status','500: Server Error');		header('Content-Type: text/plain');		status_header('500');		echo $msg;		exit;	}	/**	 * Set 'Bad Request' (400) status header.	 *	 * @since 2.2.0	 */	function bad_request() {		log_app('Status','400: Bad Request');		header('Content-Type: text/plain');		status_header('400');		exit;	}	/**	 * Set 'Length Required' (411) status header.	 *	 * @since 2.2.0	 */	function length_required() {		log_app('Status','411: Length Required');		header("HTTP/1.1 411 Length Required");		header('Content-Type: text/plain');		status_header('411');		exit;	}	/**	 * Set 'Unsupported Media Type' (415) status header.	 *	 * @since 2.2.0	 */	function invalid_media() {		log_app('Status','415: Unsupported Media Type');		header("HTTP/1.1 415 Unsupported Media Type");		header('Content-Type: text/plain');		exit;	}	/**	 * Set 'Forbidden' (403) status header.	 *	 * @since 2.6.0	 */	function forbidden($reason='') {		log_app('Status','403: Forbidden');		header('Content-Type: text/plain');		status_header('403');		echo $reason;		exit;	}	/**	 * Set 'Not Found' (404) status header.	 *	 * @since 2.2.0	 */	function not_found() {		log_app('Status','404: Not Found');		header('Content-Type: text/plain');		status_header('404');		exit;	}	/**	 * Set 'Not Allowed' (405) status header.	 *	 * @since 2.2.0	 */	function not_allowed($allow) {		log_app('Status','405: Not Allowed');		header('Allow: ' . join(',', $allow));		status_header('405');		exit;	}	/**	 * Display Redirect (302) content and set status headers.	 *	 * @since 2.3.0	 */	function redirect($url) {		log_app('Status','302: Redirect');		$escaped_url = esc_attr($url);		$content = <<<EOD<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html>  <head>    <title>302 Found</title>  </head><body>  <h1>Found</h1>  <p>The document has moved <a href="$escaped_url">here</a>.</p>  </body></html>EOD;		header('HTTP/1.1 302 Moved');		header('Content-Type: text/html');		header('Location: ' . $url);		echo $content;		exit;	}	/**	 * Set 'Client Error' (400) status header.	 *	 * @since 2.2.0	 */	function client_error($msg = 'Client Error') {		log_app('Status','400: Client Error');		header('Content-Type: text/plain');		status_header('400');		exit;	}	/**	 * Set created status headers (201).	 *	 * Sets the 'content-type', 'content-location', and 'location'.	 *	 * @since 2.2.0	 */	function created($post_ID, $content, $post_type = 'post') {		log_app('created()::$post_ID',"$post_ID, $post_type");		$edit = $this->get_entry_url($post_ID);		switch($post_type) {			case 'post':				$ctloc = $this->get_entry_url($post_ID);				break;			case 'attachment':				$edit = $this->app_base . "attachments/$post_ID";				break;		}		header("Content-Type: $this->ATOM_CONTENT_TYPE");		if (isset($ctloc))			header('Content-Location: ' . $ctloc);		header('Location: ' . $edit);		status_header('201');		echo $content;		exit;	}	/**	 * Set 'Auth Required' (401) headers.	 *	 * @since 2.2.0	 *	 * @param string $msg Status header content and HTML content.	 */	function auth_required($msg) {		log_app('Status','401: Auth Required');		nocache_headers();		header('WWW-Authenticate: Basic realm="WordPress Atom Protocol"');		header("HTTP/1.1 401 $msg");		header('Status: 401 ' . $msg);		header('Content-Type: text/html');		$content = <<<EOD<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html>  <head>    <title>401 Unauthorized</title>  </head><body>    <h1>401 Unauthorized</h1>    <p>$msg</p>  </body></html>EOD;		echo $content;		exit;	}	/**	 * Display XML and set headers with content type.	 *	 * @since 2.2.0	 *	 * @param string $xml Display feed content.	 * @param string $ctype Optional, default is 'atom+xml'. Feed content type.	 */	function output($xml, $ctype = 'application/atom+xml') {			status_header('200');			$xml = '<?xml version="1.0" encoding="' . strtolower(get_option('blog_charset')) . '"?>'."\n".$xml;			header('Connection: close');			header('Content-Length: '. strlen($xml));			header('Content-Type: ' . $ctype);			header('Content-Disposition: attachment; filename=atom.xml');			header('Date: '. date('r'));			if ($this->do_output)				echo $xml;			log_app('function', "output:\n$xml");			exit;	}	/**	 * Sanitize content for database usage.	 *	 * @since 2.2.0	 *	 * @param array $array Sanitize array and multi-dimension array.	 */	function escape(&$array) {		global $wpdb;		foreach ($array as $k => $v) {				if (is_array($v)) {						$this->escape($array[$k]);				} else if (is_object($v)) {						//skip				} else {						$array[$k] = $wpdb->escape($v);				}		}	}	/**	 * Access credential through various methods and perform login.	 *	 * @since 2.2.0	 *	 * @return bool	 */	function authenticate() {		log_app("authenticate()",print_r($_ENV, true));		// if using mod_rewrite/ENV hack		// http://www.besthostratings.com/articles/http-auth-php-cgi.html		if (isset($_SERVER['HTTP_AUTHORIZATION'])) {			list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) =				explode(':', base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6)));		} else if (isset($_SERVER['REDIRECT_REMOTE_USER'])) {			// Workaround for setups that do not forward HTTP_AUTHORIZATION			// See http://trac.wordpress.org/ticket/7361			list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) =				explode(':', base64_decode(substr($_SERVER['REDIRECT_REMOTE_USER'], 6)));		}		// If Basic Auth is working...		if (isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {			log_app("Basic Auth",$_SERVER['PHP_AUTH_USER']);			$user = wp_authenticate($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']);			if ( $user && !is_wp_error($user) ) {				wp_set_current_user($user->ID);				log_app("authenticate()", $user->user_login);				return true;			}		}		return false;	}	/**	 * Retrieve accepted content types.	 *	 * @since 2.2.0	 *	 * @param array $types Optional. Content Types.	 * @return string	 */	function get_accepted_content_type($types = null) {		if (!isset($types)) {			$types = $this->media_content_types;		}		if (!isset($_SERVER['CONTENT_LENGTH']) || !isset($_SERVER['CONTENT_TYPE'])) {			$this->length_required();		}		$type = $_SERVER['CONTENT_TYPE'];		list($type,$subtype) = explode('/',$type);		list($subtype) = explode(";",$subtype); // strip MIME parameters		log_app("get_accepted_content_type", "type=$type, subtype=$subtype");		foreach($types as $t) {			list($acceptedType,$acceptedSubtype) = explode('/',$t);			if ($acceptedType == '*' || $acceptedType == $type) {				if ($acceptedSubtype == '*' || $acceptedSubtype == $subtype)					return $type . "/" . $subtype;			}		}		$this->invalid_media();	}	/**	 * Process conditionals for posts.	 *	 * @since 2.2.0	 */	function process_conditionals() {		if (empty($this->params)) return;		if ($_SERVER['REQUEST_METHOD'] == 'DELETE') return;		switch($this->params[0]) {			case $this->ENTRY_PATH:				global $post;				$post = wp_get_single_post($this->params[1]);				$wp_last_modified = get_post_modified_time('D, d M Y H:i:s', true);				$post = NULL;				break;			case $this->ENTRIES_PATH:				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';				break;			default:				return;		}		$wp_etag = md5($wp_last_modified);		@header("Last-Modified: $wp_last_modified");		@header("ETag: $wp_etag");		// Support for Conditional GET		if (isset($_SERVER['HTTP_IF_NONE_MATCH']))			$client_etag = stripslashes($_SERVER['HTTP_IF_NONE_MATCH']);		else			$client_etag = false;		$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE']);		// If string is empty, return 0. If not, attempt to parse into a timestamp		$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;		// Make a timestamp for our most recent modification...		$wp_modified_timestamp = strtotime($wp_last_modified);		if ( ($client_last_modified && $client_etag) ?		(($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :		(($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {			status_header( 304 );			exit;		}	}	/**	 * Convert RFC3339 time string to timestamp.	 *	 * @since 2.3.0	 *	 * @param string $str String to time.	 * @return bool|int false if format is incorrect.	 */	function rfc3339_str2time($str) {		$match = false;		if (!preg_match("/(\d{4}-\d{2}-\d{2})T(\d{2}\:\d{2}\:\d{2})\.?\d{0,3}(Z|[+-]+\d{2}\:\d{2})/", $str, $match))			return false;		if ($match[3] == 'Z')			$match[3] = '+0000';		return strtotime($match[1] . " " . $match[2] . " " . $match[3]);	}	/**	 * Retrieve published time to display in XML.	 *	 * @since 2.3.0	 *	 * @param string $published Time string.	 * @return string	 */	function get_publish_time($published) {		$pubtime = $this->rfc3339_str2time($published);		if (!$pubtime) {			return array(current_time('mysql'),current_time('mysql',1));		} else {			return array(date("Y-m-d H:i:s", $pubtime), gmdate("Y-m-d H:i:s", $pubtime));		}	}}/** * AtomServer * @var AtomServer * @global object $server */$server = new AtomServer();$server->handle_request();?>
<?php/** * Misc WordPress Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function got_mod_rewrite() {	$got_rewrite = apache_mod_loaded('mod_rewrite', true);	return apply_filters('got_rewrite', $got_rewrite);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @return array An array of strings from a file (.htaccess ) from between BEGIN and END markers. */function extract_from_markers( $filename, $marker ) {	$result = array ();	if (!file_exists( $filename ) ) {		return $result;	}	if ( $markerdata = explode( "\n", implode( '', file( $filename ) ) ));	{		$state = false;		foreach ( $markerdata as $markerline ) {			if (strpos($markerline, '# END ' . $marker) !== false)				$state = false;			if ( $state )				$result[] = $markerline;			if (strpos($markerline, '# BEGIN ' . $marker) !== false)				$state = true;		}	}	return $result;}/** * {@internal Missing Short Description}} * * Inserts an array of strings into a file (.htaccess ), placing it between * BEGIN and END markers. Replaces existing marked info. Retains surrounding * data. Creates file if none exists. * * @since unknown * * @param unknown_type $filename * @param unknown_type $marker * @param unknown_type $insertion * @return bool True on write success, false on failure. */function insert_with_markers( $filename, $marker, $insertion ) {	if (!file_exists( $filename ) || is_writeable( $filename ) ) {		if (!file_exists( $filename ) ) {			$markerdata = '';		} else {			$markerdata = explode( "\n", implode( '', file( $filename ) ) );		}		if ( !$f = @fopen( $filename, 'w' ) )			return false;		$foundit = false;		if ( $markerdata ) {			$state = true;			foreach ( $markerdata as $n => $markerline ) {				if (strpos($markerline, '# BEGIN ' . $marker) !== false)					$state = false;				if ( $state ) {					if ( $n + 1 < count( $markerdata ) )						fwrite( $f, "{$markerline}\n" );					else						fwrite( $f, "{$markerline}" );				}				if (strpos($markerline, '# END ' . $marker) !== false) {					fwrite( $f, "# BEGIN {$marker}\n" );					if ( is_array( $insertion ))						foreach ( $insertion as $insertline )							fwrite( $f, "{$insertline}\n" );					fwrite( $f, "# END {$marker}\n" );					$state = true;					$foundit = true;				}			}		}		if (!$foundit) {			fwrite( $f, "\n# BEGIN {$marker}\n" );			foreach ( $insertion as $insertline )				fwrite( $f, "{$insertline}\n" );			fwrite( $f, "# END {$marker}\n" );		}		fclose( $f );		return true;	} else {		return false;	}}/** * Updates the htaccess file with the current rules if it is writable. * * Always writes to the file if it exists and is writable to ensure that we * blank out old rules. * * @since unknown */function save_mod_rewrite_rules() {	if ( is_multisite() )		return;	global $wp_rewrite;	$home_path = get_home_path();	$htaccess_file = $home_path.'.htaccess';	// If the file doesn't already exist check for write access to the directory and whether we have some rules.	// else check for write access to the file.	if ((!file_exists($htaccess_file) && is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks()) || is_writable($htaccess_file)) {		if ( got_mod_rewrite() ) {			$rules = explode( "\n", $wp_rewrite->mod_rewrite_rules() );			return insert_with_markers( $htaccess_file, 'WordPress', $rules );		}	}	return false;}/** * Updates the IIS web.config file with the current rules if it is writable. * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file. * * @since 2.8.0 * * @return bool True if web.config was updated successfully */function iis7_save_url_rewrite_rules(){	global $wp_rewrite;	$home_path = get_home_path();	$web_config_file = $home_path . 'web.config';	// Using win_is_writable() instead of is_writable() because of a bug in Windows PHP	if ( ( ! file_exists($web_config_file) && win_is_writable($home_path) && $wp_rewrite->using_mod_rewrite_permalinks() ) || win_is_writable($web_config_file) ) {		if ( iis7_supports_permalinks() ) {			$rule = $wp_rewrite->iis7_url_rewrite_rules(false, '', '');			if ( ! empty($rule) ) {				return iis7_add_rewrite_rule($web_config_file, $rule);			} else {				return iis7_delete_rewrite_rule($web_config_file);			}		}	}	return false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file */function update_recently_edited( $file ) {	$oldfiles = (array ) get_option( 'recently_edited' );	if ( $oldfiles ) {		$oldfiles = array_reverse( $oldfiles );		$oldfiles[] = $file;		$oldfiles = array_reverse( $oldfiles );		$oldfiles = array_unique( $oldfiles );		if ( 5 < count( $oldfiles ))			array_pop( $oldfiles );	} else {		$oldfiles[] = $file;	}	update_option( 'recently_edited', $oldfiles );}/** * If siteurl or home changed, flush rewrite rules. * * @since unknown * * @param unknown_type $old_value * @param unknown_type $value */function update_home_siteurl( $old_value, $value ) {	global $wp_rewrite;	if ( defined( "WP_INSTALLING" ) )		return;	// If home changed, write rewrite rules to new location.	$wp_rewrite->flush_rules();}add_action( 'update_option_home', 'update_home_siteurl', 10, 2 );add_action( 'update_option_siteurl', 'update_home_siteurl', 10, 2 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $url * @return unknown */function url_shorten( $url ) {	$short_url = str_replace( 'http://', '', stripslashes( $url ));	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	return $short_url;}/** * Resets global variables based on $_GET and $_POST * * This function resets global variables based on the names passed * in the $vars array to the value of $_POST[$var] or $_GET[$var] or '' * if neither is defined. * * @since unknown * * @param array $vars An array of globals to reset. */function wp_reset_vars( $vars ) {	for ( $i=0; $i<count( $vars ); $i += 1 ) {		$var = $vars[$i];		global $$var;		if ( empty( $_POST[$var] ) ) {			if ( empty( $_GET[$var] ) )				$$var = '';			else				$$var = $_GET[$var];		} else {			$$var = $_POST[$var];		}	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $message */function show_message($message) {	if ( is_wp_error($message) ){		if ( $message->get_error_data() )			$message = $message->get_error_message() . ': ' . $message->get_error_data();		else			$message = $message->get_error_message();	}	echo "<p>$message</p>\n";	wp_ob_end_flush_all();	flush();}function wp_doc_link_parse( $content ) {	if ( !is_string( $content ) || empty( $content ) )		return array();	if ( !function_exists('token_get_all') )		return array();	$tokens = token_get_all( $content );	$functions = array();	$ignore_functions = array();	for ( $t = 0, $count = count( $tokens ); $t < $count; $t++ ) {		if ( !is_array( $tokens[$t] ) ) continue;		if ( T_STRING == $tokens[$t][0] && ( '(' == $tokens[ $t + 1 ] || '(' == $tokens[ $t + 2 ] ) ) {			// If it's a function or class defined locally, there's not going to be any docs available			if ( ( isset( $tokens[ $t - 2 ][1] ) && in_array( $tokens[ $t - 2 ][1], array( 'function', 'class' ) ) ) || ( isset( $tokens[ $t - 2 ][0] ) && T_OBJECT_OPERATOR == $tokens[ $t - 1 ][0] ) ) {				$ignore_functions[] = $tokens[$t][1];			}			// Add this to our stack of unique references			$functions[] = $tokens[$t][1];		}	}	$functions = array_unique( $functions );	sort( $functions );	$ignore_functions = apply_filters( 'documentation_ignore_functions', $ignore_functions );	$ignore_functions = array_unique( $ignore_functions );	$out = array();	foreach ( $functions as $function ) {		if ( in_array( $function, $ignore_functions ) )			continue;		$out[] = $function;	}	return $out;}/** * Saves option for number of rows when listing posts, pages, comments, etc. * * @since 2.8**/function set_screen_options() {	if ( isset($_POST['wp_screen_options']) && is_array($_POST['wp_screen_options']) ) {		check_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );		if ( !$user = wp_get_current_user() )			return;		$option = $_POST['wp_screen_options']['option'];		$value = $_POST['wp_screen_options']['value'];		if ( !preg_match( '/^[a-z_-]+$/', $option ) )			return;		$option = str_replace('-', '_', $option);		$map_option = $option;		$type = str_replace('edit_', '', $map_option);		$type = str_replace('_per_page', '', $type);		if ( in_array($type, get_post_types()) )			$map_option = 'edit_per_page';		if ( in_array( $type, get_taxonomies()) )			$map_option = 'edit_tags_per_page';		switch ( $map_option ) {			case 'edit_per_page':			case 'ms_sites_per_page':			case 'ms_users_per_page':			case 'edit_comments_per_page':			case 'upload_per_page':			case 'edit_tags_per_page':			case 'plugins_per_page':				$value = (int) $value;				if ( $value < 1 || $value > 999 )					return;				break;			default:				$value = apply_filters('set-screen-option', false, $option, $value);				if ( false === $value )					return;				break;		}		update_user_meta($user->ID, $option, $value);		wp_redirect( remove_query_arg( array('pagenum', 'apage', 'paged'), wp_get_referer() ) );		exit;	}}function wp_menu_unfold() {	if ( isset($_GET['unfoldmenu']) ) {		delete_user_setting('mfold');		wp_redirect( remove_query_arg( 'unfoldmenu', stripslashes($_SERVER['REQUEST_URI']) ) );	 	exit;	}}/** * Check if IIS 7 supports pretty permalinks * * @since 2.8.0 * * @return bool */function iis7_supports_permalinks() {	global $is_iis7;	$supports_permalinks = false;	if ( $is_iis7 ) {		/* First we check if the DOMDocument class exists. If it does not exist,		 * which is the case for PHP 4.X, then we cannot easily update the xml configuration file,		 * hence we just bail out and tell user that pretty permalinks cannot be used.		 * This is not a big issue because PHP 4.X is going to be depricated and for IIS it		 * is recommended to use PHP 5.X NTS.		 * Next we check if the URL Rewrite Module 1.1 is loaded and enabled for the web site. When		 * URL Rewrite 1.1 is loaded it always sets a server variable called 'IIS_UrlRewriteModule'.		 * Lastly we make sure that PHP is running via FastCGI. This is important because if it runs		 * via ISAPI then pretty permalinks will not work.		 */		$supports_permalinks = class_exists('DOMDocument') && isset($_SERVER['IIS_UrlRewriteModule']) && ( php_sapi_name() == 'cgi-fcgi' );	}	return apply_filters('iis7_supports_permalinks', $supports_permalinks);}/** * Check if rewrite rule for WordPress already exists in the IIS 7 configuration file * * @since 2.8.0 * * @return bool * @param string $filename The file path to the configuration file */function iis7_rewrite_rule_exists($filename) {	if ( ! file_exists($filename) )		return false;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length == 0 )		return false;	else		return true;}/** * Delete WordPress rewrite rule from web.config file if it exists there * * @since 2.8.0 * * @param string $filename Name of the configuration file * @return bool */function iis7_delete_rewrite_rule($filename) {	// If configuration file does not exist then rules also do not exist so there is nothing to delete	if ( ! file_exists($filename) )		return true;	if ( ! class_exists('DOMDocument') )		return false;	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc -> load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	$rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $rules->length > 0 ) {		$child = $rules->item(0);		$parent = $child->parentNode;		$parent->removeChild($child);		$doc->formatOutput = true;		saveDomDocument($doc, $filename);	}	return true;}/** * Add WordPress rewrite rule to the IIS 7 configuration file. * * @since 2.8.0 * * @param string $filename The file path to the configuration file * @param string $rewrite_rule The XML fragment with URL Rewrite rule * @return bool */function iis7_add_rewrite_rule($filename, $rewrite_rule) {	if ( ! class_exists('DOMDocument') )		return false;	// If configuration file does not exist then we create one.	if ( ! file_exists($filename) ) {		$fp = fopen( $filename, 'w');		fwrite($fp, '<configuration/>');		fclose($fp);	}	$doc = new DOMDocument();	$doc->preserveWhiteSpace = false;	if ( $doc->load($filename) === false )		return false;	$xpath = new DOMXPath($doc);	// First check if the rule already exists as in that case there is no need to re-add it	$wordpress_rules = $xpath->query('/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\'wordpress\')]');	if ( $wordpress_rules->length > 0 )		return true;	// Check the XPath to the rewrite rule and create XML nodes if they do not exist	$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite/rules');	if ( $xmlnodes->length > 0 ) {		$rules_node = $xmlnodes->item(0);	} else {		$rules_node = $doc->createElement('rules');		$xmlnodes = $xpath->query('/configuration/system.webServer/rewrite');		if ( $xmlnodes->length > 0 ) {			$rewrite_node = $xmlnodes->item(0);			$rewrite_node->appendChild($rules_node);		} else {			$rewrite_node = $doc->createElement('rewrite');			$rewrite_node->appendChild($rules_node);			$xmlnodes = $xpath->query('/configuration/system.webServer');			if ( $xmlnodes->length > 0 ) {				$system_webServer_node = $xmlnodes->item(0);				$system_webServer_node->appendChild($rewrite_node);			} else {				$system_webServer_node = $doc->createElement('system.webServer');				$system_webServer_node->appendChild($rewrite_node);				$xmlnodes = $xpath->query('/configuration');				if ( $xmlnodes->length > 0 ) {					$config_node = $xmlnodes->item(0);					$config_node->appendChild($system_webServer_node);				} else {					$config_node = $doc->createElement('configuration');					$doc->appendChild($config_node);					$config_node->appendChild($system_webServer_node);				}			}		}	}	$rule_fragment = $doc->createDocumentFragment();	$rule_fragment->appendXML($rewrite_rule);	$rules_node->appendChild($rule_fragment);	$doc->encoding = "UTF-8";	$doc->formatOutput = true;	saveDomDocument($doc, $filename);	return true;}/** * Saves the XML document into a file * * @since 2.8.0 * * @param DOMDocument $doc * @param string $filename */function saveDomDocument($doc, $filename) {	$config = $doc->saveXML();	$config = preg_replace("/([^\r])\n/", "$1\r\n", $config);	$fp = fopen($filename, 'w');	fwrite($fp, $config);	fclose($fp);}/** * Workaround for Windows bug in is_writable() function * * @since 2.8.0 * * @param object $path * @return bool */function win_is_writable($path) {	/* will work in despite of Windows ACLs bug	 * NOTE: use a trailing slash for folders!!!	 * see http://bugs.php.net/bug.php?id=27609	 * see http://bugs.php.net/bug.php?id=30931	 */    if ( $path{strlen($path)-1} == '/' ) // recursively return a temporary file path        return win_is_writable($path . uniqid(mt_rand()) . '.tmp');    else if ( is_dir($path) )        return win_is_writable($path . '/' . uniqid(mt_rand()) . '.tmp');    // check tmp file for read/write capabilities    $rm = file_exists($path);    $f = @fopen($path, 'a');    if ($f===false)        return false;    fclose($f);    if ( ! $rm )        unlink($path);    return true;}/** * Display the default admin color scheme picker (Used in user-edit.php) * * @since 3.0.0 */function admin_color_scheme_picker() {	global $_wp_admin_css_colors, $user_id; ?><fieldset><legend class="screen-reader-text"><span><?php _e('Admin Color Scheme')?></span></legend><?php$current_color = get_user_option('admin_color', $user_id);if ( empty($current_color) )	$current_color = 'fresh';foreach ( $_wp_admin_css_colors as $color => $color_info ): ?><div class="color-option"><input name="admin_color" id="admin_color_<?php echo $color; ?>" type="radio" value="<?php echo esc_attr($color) ?>" class="tog" <?php checked($color, $current_color); ?> />	<table class="color-palette">	<tr>	<?php foreach ( $color_info->colors as $html_color ): ?>	<td style="background-color: <?php echo $html_color ?>" title="<?php echo $color ?>">&nbsp;</td>	<?php endforeach; ?>	</tr>	</table>	<label for="admin_color_<?php echo $color; ?>"><?php echo $color_info->name ?></label></div>	<?php endforeach; ?></fieldset><?php}?>
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * Action handler for Multisite administration panels. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( empty( $_GET['action'] ) )	wp_redirect( admin_url( 'ms-admin.php' ) );do_action( 'wpmuadminedit' , '');if ( isset( $_GET['id' ]) )	$id = intval( $_GET['id'] );elseif ( isset( $_POST['id'] ) )	$id = intval( $_POST['id'] );switch ( $_GET['action'] ) {	case 'siteoptions':		check_admin_referer( 'siteoptions' );		if ( ! current_user_can( 'manage_network_options' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">options page</a>.', esc_url( admin_url( 'ms-options.php' ) ) ) ) );		if ( isset($_POST['WPLANG']) && ( '' === $_POST['WPLANG'] || in_array( $_POST['WPLANG'], get_available_languages() ) ) )			update_site_option( 'WPLANG', $_POST['WPLANG'] );		if ( is_email( $_POST['admin_email'] ) )			update_site_option( 'admin_email', $_POST['admin_email'] );		$illegal_names = split( ' ', $_POST['illegal_names'] );		foreach ( (array) $illegal_names as $name ) {			$name = trim( $name );			if ( $name != '' )				$names[] = trim( $name );		}		update_site_option( 'illegal_names', $names );		if ( $_POST['limited_email_domains'] != '' ) {			$limited_email_domains = str_replace( ' ', "\n", $_POST['limited_email_domains'] );			$limited_email_domains = split( "\n", stripslashes( $limited_email_domains ) );			$limited_email = array();			foreach ( (array) $limited_email_domains as $domain ) {					$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$limited_email[] = trim( $domain );			}			update_site_option( 'limited_email_domains', $limited_email );		} else {			update_site_option( 'limited_email_domains', '' );		}		if ( $_POST['banned_email_domains'] != '' ) {			$banned_email_domains = split( "\n", stripslashes( $_POST['banned_email_domains'] ) );			$banned = array();			foreach ( (array) $banned_email_domains as $domain ) {				$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$banned[] = trim( $domain );			}			update_site_option( 'banned_email_domains', $banned );		} else {			update_site_option( 'banned_email_domains', '' );		}		update_site_option( 'default_user_role', $_POST['default_user_role'] );		if ( trim( $_POST['dashboard_blog_orig'] ) == '' )			$_POST['dashboard_blog_orig'] = $current_site->blog_id;		if ( trim( $_POST['dashboard_blog'] ) == '' ) {			$_POST['dashboard_blog'] = $current_site->blog_id;			$dashboard_blog_id = $current_site->blog_id;		} elseif ( ! preg_match( '/(--|\.)/', $_POST['dashboard_blog'] ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $_POST['dashboard_blog'] ) ) {			$dashboard_blog = $_POST['dashboard_blog'];			$blog_details = get_blog_details( $dashboard_blog );			if ( false === $blog_details ) {				if ( is_numeric( $dashboard_blog ) )					wp_die( __( 'A dashboard site referenced by ID must already exist' ) );				if ( is_subdomain_install() ) {					$domain = $dashboard_blog . '.' . $current_site->domain;					$path = $current_site->path;				} else {					$domain = $current_site->domain;					$path = trailingslashit( $current_site->path . $dashboard_blog );				}				$wpdb->hide_errors();				$dashboard_blog_id = wpmu_create_blog( $domain, $path, __( 'My Dashboard' ), $current_user->id , array( 'public' => 0 ), $current_site->id );				$wpdb->show_errors();			} else {				$dashboard_blog_id = $blog_details->blog_id;			}		}		if ( is_wp_error( $dashboard_blog_id ) )			wp_die( __( 'Problem creating dashboard site: ' ) . $dashboard_blog_id->get_error_message() );		if ( $_POST['dashboard_blog_orig'] != $_POST['dashboard_blog'] ) {			$users = get_users_of_blog( get_site_option( 'dashboard_blog' ) );			$move_users = array();			foreach ( (array)$users as $user ) {				$user_meta_value = unserialize( $user->meta_value );				if ( is_array( $user_meta_value ) && array_pop( array_keys( $user_meta_value ) ) == 'subscriber' )					$move_users[] = $user->user_id;			}			if ( false == empty( $move_users ) ) {				foreach ( (array)$move_users as $user_id ) {					remove_user_from_blog($user_id, get_site_option( 'dashboard_blog' ) );					add_user_to_blog( $dashboard_blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );					update_user_meta( $user_id, 'primary_blog', $dashboard_blog_id );				}			}		}		update_site_option( 'dashboard_blog', $dashboard_blog_id );		$options = array( 'registrationnotification', 'registration', 'add_new_users', 'menu_items', 'mu_media_buttons', 'upload_space_check_disabled', 'blog_upload_space', 'upload_filetypes', 'site_name', 'first_post', 'first_page', 'first_comment', 'first_comment_url', 'first_comment_author', 'welcome_email', 'welcome_user_email', 'fileupload_maxk', 'admin_notice_feed', 'global_terms_enabled' );		$checked_options = array( 'mu_media_buttons' => array(), 'menu_items' => array(), 'registrationnotification' => 'no', 'upload_space_check_disabled' => 1 );		foreach ( $checked_options as $option_name => $option_unchecked_value ) {			if ( ! isset( $_POST[$option_name] ) )				$_POST[$option_name] = $option_unchecked_value;		}		foreach ( $options as $option_name ) {			if ( ! isset($_POST[$option_name]) )				continue;			$value = stripslashes_deep( $_POST[$option_name] );			update_site_option( $option_name, $value );		}		// Update more options here		do_action( 'update_wpmu_options' );		wp_redirect( add_query_arg( 'updated', 'true', admin_url( 'ms-options.php' ) ) );		exit();	break;	case 'addblog':		check_admin_referer( 'add-blog', '_wpnonce_add-blog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['blog'] ) == false )			wp_die(  __( 'Can&#8217;t create an empty site.' ) );		$blog = $_POST['blog'];		$domain = '';		if ( ! preg_match( '/(--)/', $blog['domain'] ) && preg_match( '|^([a-zA-Z0-9-])+$|', $blog['domain'] ) )			$domain = strtolower( $blog['domain'] );		// If not a subdomain install, make sure the domain isn't a reserved word		if ( ! is_subdomain_install() ) {			$subdirectory_reserved_names = apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) );			if ( in_array( $domain, $subdirectory_reserved_names ) )				wp_die( sprintf( __('The following words are reserved for use by WordPress functions and cannot be used as blog names: <code>%s</code>' ), implode( '</code>, <code>', $subdirectory_reserved_names ) ) );		}		$email = sanitize_email( $blog['email'] );		$title = $blog['title'];		if ( empty( $domain ) )			wp_die( __( 'Missing or invalid site address.' ) );		if ( empty( $email ) )			wp_die( __( 'Missing email address.' ) );		if ( !is_email( $email ) )			wp_die( __( 'Invalid email address.' ) );		if ( is_subdomain_install() ) {			$newdomain = $domain . '.' . preg_replace( '|^www\.|', '', $current_site->domain );			$path = $base;		} else {			$newdomain = $current_site->domain;			$path = $base . $domain . '/';		}		$password = 'N/A';		$user_id = email_exists($email);		if ( !$user_id ) { // Create a new user with a random password			$password = wp_generate_password();			$user_id = wpmu_create_user( $domain, $password, $email );			if ( false == $user_id )				wp_die( __( 'There was an error creating the user.' ) );			else				wp_new_user_notification( $user_id, $password );		}		$wpdb->hide_errors();		$id = wpmu_create_blog( $newdomain, $path, $title, $user_id , array( 'public' => 1 ), $current_site->id );		$wpdb->show_errors();		if ( !is_wp_error( $id ) ) {			$dashboard_blog = get_dashboard_blog();			if ( !is_super_admin( $user_id ) && get_user_option( 'primary_blog', $user_id ) == $dashboard_blog->blog_id )				update_user_option( $user_id, 'primary_blog', $id, true );			$content_mail = sprintf( __( "New site created by %1s\n\nAddress: http://%2s\nName: %3s"), $current_user->user_login , $newdomain . $path, stripslashes( $title ) );			wp_mail( get_site_option('admin_email'),  sprintf( __( '[%s] New Site Created' ), $current_site->site_name ), $content_mail, 'From: "Site Admin" <' . get_site_option( 'admin_email' ) . '>' );			wpmu_welcome_notification( $id, $user_id, $password, $title, array( 'public' => 1 ) );			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add-blog' ), wp_get_referer() ) );			exit();		} else {			wp_die( $id->get_error_message() );		}	break;	case 'updateblog':		check_admin_referer( 'editblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">sites page</a>', esc_url( admin_url( 'ms-sites.php' ) ) ) ) );		switch_to_blog( $id );		// themes		$allowedthemes = array();		if ( isset($_POST['theme']) && is_array( $_POST['theme'] ) ) {			foreach ( $_POST['theme'] as $theme => $val ) {				if ( 'on' == $val )					$allowedthemes[$theme] = true;			}		}		update_option( 'allowedthemes',  $allowedthemes );		// options		if ( is_array( $_POST['option'] ) ) {			$c = 1;			$count = count( $_POST['option'] );			foreach ( (array) $_POST['option'] as $key => $val ) {				if ( $key === 0 || is_array( $val ) )					continue; // Avoids "0 is a protected WP option and may not be modified" error when edit blog options				if ( $c == $count )					update_option( $key, stripslashes( $val ) );				else					update_option( $key, stripslashes( $val ), false ); // no need to refresh blog details yet				$c++;			}		}		// home and siteurl		if ( isset( $_POST['update_home_url'] ) && $_POST['update_home_url'] == 'update' ) {			$blog_address = get_blogaddress_by_domain( $_POST['blog']['domain'], $_POST['blog']['path'] );			if ( get_option( 'siteurl' ) !=  $blog_address )				update_option( 'siteurl', $blog_address );			if ( get_option( 'home' ) != $blog_address )				update_option( 'home', $blog_address );		}		// rewrite rules can't be flushed during switch to blog		delete_option( 'rewrite_rules' );		// update blogs table		$blog_data = stripslashes_deep( $_POST['blog'] );		update_blog_details( $id, $blog_data );		// get blog prefix		$blog_prefix = $wpdb->get_blog_prefix( $id );		// user roles		if ( isset( $_POST['role'] ) && is_array( $_POST['role'] ) == true ) {			$newroles = $_POST['role'];			reset( $newroles );			foreach ( (array) $newroles as $userid => $role ) {				$user = new WP_User( $userid );				if ( ! $user )					continue;				$user->for_blog( $id );				$user->set_role( $role );			}		}		// remove user		if ( isset( $_POST['blogusers'] ) && is_array( $_POST['blogusers'] ) ) {			reset( $_POST['blogusers'] );			foreach ( (array) $_POST['blogusers'] as $key => $val )				remove_user_from_blog( $key, $id );		}		// change password		if ( isset( $_POST['user_password'] ) && is_array( $_POST['user_password'] ) ) {			reset( $_POST['user_password'] );			$newroles = $_POST['role'];			foreach ( (array) $_POST['user_password'] as $userid => $pass ) {				unset( $_POST['role'] );				$_POST['role'] = $newroles[ $userid ];				if ( $pass != '' ) {					$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );					$userdata = get_userdata($userid);					$_POST['pass1'] = $_POST['pass2'] = $pass;					$_POST['email'] = $userdata->user_email;					$_POST['rich_editing'] = $userdata->rich_editing;					edit_user( $userid );					if ( $cap == null )						$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );				}			}			unset( $_POST['role'] );			$_POST['role'] = $newroles;		}		// add user		if ( !empty( $_POST['newuser'] ) ) {			$newuser = $_POST['newuser'];			$userid = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM " . $wpdb->users . " WHERE user_login = %s", $newuser ) );			if ( $userid ) {				$user = $wpdb->get_var( "SELECT user_id FROM " . $wpdb->usermeta . " WHERE user_id='$userid' AND meta_key='{$blog_prefix}capabilities'" );				if ( $user == false )					add_user_to_blog( $id, $userid, $_POST['new_role'] );			}		}		do_action( 'wpmu_update_blog_options' );		restore_current_blog();		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'editblog', 'id' => $id ), wp_get_referer() ) );	break;	case 'deleteblog':		check_admin_referer('deleteblog');		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( $id != '0' && $id != $current_site->blog_id )			wpmu_delete_blog( $id, true );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'delete' ), wp_get_referer() ) );		exit();	break;	case 'allblogs':		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' );			if ( ! current_user_can( 'manage_sites' ) )				wp_die( __( 'You do not have permission to access this page.' ) );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allblogs'] as $key => $val ) {				if ( $val != '0' && $val != $current_site->blog_id ) {					switch ( $doaction ) {						case 'delete':							$blogfunction = 'all_delete';							wpmu_delete_blog( $val, true );						break;						case 'spam':							$blogfunction = 'all_spam';							update_blog_status( $val, 'spam', '1', 0 );							set_time_limit( 60 );						break;						case 'notspam':							$blogfunction = 'all_notspam';							update_blog_status( $val, 'spam', '0', 0 );							set_time_limit( 60 );						break;					}				} else {					wp_die( __( 'You are not allowed to change the current site.' ) );				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $blogfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-sites.php' ) );		}	break;	case 'archiveblog':		check_admin_referer( 'archiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'archived', '1' );		do_action( 'archive_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'archive' ), wp_get_referer() ) );		exit();	break;	case 'unarchiveblog':		check_admin_referer( 'unarchiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'unarchive_blog', $id );		update_blog_status( $id, 'archived', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unarchive' ), wp_get_referer() ) );		exit();	break;	case 'activateblog':		check_admin_referer( 'activateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'deleted', '0' );		do_action( 'activate_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'activate' ), wp_get_referer() ) );		exit();	break;	case 'deactivateblog':		check_admin_referer( 'deactivateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'deactivate_blog', $id );		update_blog_status( $id, 'deleted', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'deactivate' ), wp_get_referer() ) );		exit();	break;	case 'unspamblog':		check_admin_referer( 'unspamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unspam' ), wp_get_referer() ) );		exit();	break;	case 'spamblog':		check_admin_referer( 'spamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'spam' ), wp_get_referer() ) );		exit();	break;	// Themes    case 'updatethemes':	if ( ! current_user_can( 'manage_network_themes' ) )		wp_die( __( 'You do not have permission to access this page.' ) );    	if ( is_array( $_POST['theme'] ) ) {			$themes = get_themes();			reset( $themes );			$allowed_themes = array();			foreach ( (array) $themes as $key => $theme ) {				if ( $_POST['theme'][ esc_html( $theme['Stylesheet'] ) ] == 'enabled' )					$allowed_themes[ esc_html( $theme['Stylesheet'] ) ] = true;			}			update_site_option( 'allowedthemes', $allowed_themes );		}		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'themes' ),  wp_get_referer() ) );		exit();	break;	// Common	case 'confirm':		if ( !headers_sent() ) {			nocache_headers();			header( 'Content-Type: text/html; charset=utf-8' );		}		if ( $current_site->blog_id == $id )			wp_die( __( 'You are not allowed to change the current site.' ) );		?>		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">		<html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>>			<head>				<title><?php _e( 'WordPress &rsaquo; Confirm your action' ); ?></title>				<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />				<?php				wp_admin_css( 'install', true );				wp_admin_css( 'ie', true );				?>			</head>			<body>				<h1 id="logo"><img alt="WordPress" src="<?php echo esc_attr( admin_url( 'images/wordpress-logo.png' ) ); ?>" /></h1>				<form action="ms-edit.php?action=<?php echo esc_attr( $_GET['action2'] ) ?>" method="post">					<input type="hidden" name="action" value="<?php echo esc_attr( $_GET['action2'] ) ?>" />					<input type="hidden" name="id" value="<?php echo esc_attr( $id ); ?>" />					<input type="hidden" name="_wp_http_referer" value="<?php echo esc_attr( wp_get_referer() ); ?>" />					<?php wp_nonce_field( $_GET['action2'], '_wpnonce', false ); ?>					<p><?php echo esc_html( stripslashes( $_GET['msg'] ) ); ?></p>					<p class="submit"><input class="button" type="submit" value="<?php _e( 'Confirm' ); ?>" /></p>				</form>			</body>		</html>		<?php	break;	// Users	case 'deleteuser':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		check_admin_referer( 'deleteuser' );		if ( $id != '0' && $id != '1' ) {			$_POST['allusers'] = array( $id ); // confirm_delete_users() can only handle with arrays			$title = __( 'Users' );			$parent_file = 'ms-admin.php';			require_once( 'admin-header.php' );			echo '<div class="wrap">';			confirm_delete_users( $_POST['allusers'] );			echo '</div>';            require_once( 'admin-footer.php' );            exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'allusers':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-users', '_wpnonce_bulk-ms-users' );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allusers'] as $key => $val ) {				if ( !empty( $val ) ) {					switch ( $doaction ) {						case 'delete':							$title = __( 'Users' );							$parent_file = 'ms-admin.php';							require_once( 'admin-header.php' );							echo '<div class="wrap">';							confirm_delete_users( $_POST['allusers'] );							echo '</div>';				            require_once( 'admin-footer.php' );				            exit();       					break;						case 'spam':							$user = new WP_User( $val );							if ( in_array( $user->user_login, get_super_admins() ) )								wp_die( sprintf( __( 'Warning! User cannot be modified. The user %s is a network administrator.' ), esc_html( $user->user_login ) ) );							$userfunction = 'all_spam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details ) {								if ( $details->userblog_id != $current_site->blog_id ) // main blog not a spam !									update_blog_status( $details->userblog_id, 'spam', '1' );							}							update_user_status( $val, 'spam', '1', 1 );						break;						case 'notspam':							$userfunction = 'all_notspam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details )								update_blog_status( $details->userblog_id, 'spam', '0' );							update_user_status( $val, 'spam', '0', 1 );						break;					}				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $userfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'dodelete':		check_admin_referer( 'ms-users-delete' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( ! empty( $_POST['blog'] ) && is_array( $_POST['blog'] ) ) {			foreach ( $_POST['blog'] as $id => $users ) {				foreach ( $users as $blogid => $user_id ) {					if ( ! empty( $_POST['delete'] ) && 'reassign' == $_POST['delete'][$blogid][$id] )						remove_user_from_blog( $id, $blogid, $user_id );					else						remove_user_from_blog( $id, $blogid );				}			}		}		$i = 0;		if ( is_array( $_POST['user'] ) && ! empty( $_POST['user'] ) )			foreach( $_POST['user'] as $id ) {				wpmu_delete_user( $id );				$i++;			}		if ( $i == 1 )			$deletefunction = 'delete';		else			$deletefunction = 'all_delete';		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $deletefunction ), admin_url( 'ms-users.php' ) ) );	break;	case 'adduser':		check_admin_referer( 'add-user', '_wpnonce_add-user' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['user'] ) == false )			wp_die( __( 'Cannot create an empty user.' ) );		$user = $_POST['user'];		if ( empty($user['username']) && empty($user['email']) )			wp_die( __( 'Missing username and email.' ) );		elseif ( empty($user['username']) )			wp_die( __( 'Missing username.' ) );		elseif ( empty($user['email']) )			wp_die( __( 'Missing email.' ) );		$password = wp_generate_password();		$user_id = wpmu_create_user( esc_html( strtolower( $user['username'] ) ), $password, esc_html( $user['email'] ) );		if ( false == $user_id ) 			wp_die( __( 'Duplicated username or email address.' ) );		else			wp_new_user_notification( $user_id, $password );		if ( get_site_option( 'dashboard_blog' ) == false )			add_user_to_blog( $current_site->blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( get_site_option( 'dashboard_blog' ), $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add' ), wp_get_referer() ) );		exit();	break;	default:		wp_redirect( admin_url( 'ms-admin.php' ) );	break;}?>
<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * Update Core administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('update_plugins') )	wp_die(__('You do not have sufficient permissions to update plugins for this site.'));function list_core_update( $update ) {	global $wp_local_package, $wpdb;	$version_string = ('en_US' == $update->locale && 'en_US' == get_locale() ) ?			$update->current : sprintf("%s&ndash;<strong>%s</strong>", $update->current, $update->locale);	$current = false;	if ( !isset($update->response) || 'latest' == $update->response )		$current = true;	$submit = __('Update Automatically');	$form_action = 'update-core.php?action=do-core-upgrade';	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$show_buttons = true;	if ( 'development' == $update->response ) {		$message = __('You are using a development version of WordPress.  You can update to the latest nightly build automatically or download the nightly build and install it manually:');		$download = __('Download nightly build');	} else {		if ( $current ) {			$message = sprintf(__('You have the latest version of WordPress. You do not need to update. However, if you want to re-install version %s, you can do so automatically or download the package and re-install manually:'), $version_string);			$submit = __('Re-install Automatically');			$form_action = 'update-core.php?action=do-core-reinstall';		} else {			$php_compat     = version_compare( $php_version, $update->php_version, '>=' );			$mysql_compat   = version_compare( $mysql_version, $update->mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );			if ( !$mysql_compat && !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $update->current, $update->php_version, $update->mysql_version, $php_version, $mysql_version );			elseif ( !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $update->current, $update->php_version, $php_version );			elseif ( !$mysql_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $update->current, $update->mysql_version, $mysql_version );			else				$message = 	sprintf(__('You can update to <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> automatically or download the package and install it manually:'), $version_string);			if ( !$mysql_compat || !$php_compat )				$show_buttons = false;		}		$download = sprintf(__('Download %s'), $version_string);	}	echo '<p>';	echo $message;	echo '</p>';	echo '<form method="post" action="' . $form_action . '" name="upgrade" class="upgrade">';	wp_nonce_field('upgrade-core');	echo '<p>';	echo '<input name="version" value="'. esc_attr($update->current) .'" type="hidden"/>';	echo '<input name="locale" value="'. esc_attr($update->locale) .'" type="hidden"/>';	if ( $show_buttons ) {		echo '<input id="upgrade" class="button" type="submit" value="' . esc_attr($submit) . '" name="upgrade" />&nbsp;';		echo '<a href="' . esc_url($update->package) . '" class="button">' . $download . '</a>&nbsp;';	}	if ( 'en_US' != $update->locale )		if ( !isset( $update->dismissed ) || !$update->dismissed )			echo '<input id="dismiss" class="button" type="submit" value="' . esc_attr__('Hide this update') . '" name="dismiss" />';		else			echo '<input id="undismiss" class="button" type="submit" value="' . esc_attr__('Bring back this update') . '" name="undismiss" />';	echo '</p>';	if ( 'en_US' != $update->locale && ( !isset($wp_local_package) || $wp_local_package != $update->locale ) )	    echo '<p class="hint">'.__('This localized version contains both the translation and various other localization fixes. You can skip upgrading if you want to keep your current translation.').'</p>';	else if ( 'en_US' == $update->locale && get_locale() != 'en_US' ) {	    echo '<p class="hint">'.sprintf( __('You are about to install WordPress %s <strong>in English.</strong> There is a chance this upgrade will break your translation. You may prefer to wait for the localized version to be released.'), $update->current ).'</p>';	}	echo '</form>';}function dismissed_updates() {	$dismissed = get_core_updates( array( 'dismissed' => true, 'available' => false ) );	if ( $dismissed ) {		$show_text = esc_js(__('Show hidden updates'));		$hide_text = esc_js(__('Hide hidden updates'));	?>	<script type="text/javascript">		jQuery(function($) {			$('dismissed-updates').show();			$('#show-dismissed').toggle(function(){$(this).text('<?php echo $hide_text; ?>');}, function() {$(this).text('<?php echo $show_text; ?>')});			$('#show-dismissed').click(function() { $('#dismissed-updates').toggle('slow');});		});	</script>	<?php		echo '<p class="hide-if-no-js"><a id="show-dismissed" href="#">'.__('Show hidden updates').'</a></p>';		echo '<ul id="dismissed-updates" class="core-updates dismissed">';		foreach( (array) $dismissed as $update) {			echo '<li>';			list_core_update( $update );			echo '</li>';		}		echo '</ul>';	}}/** * Display upgrade WordPress for downloading latest or upgrading automatically form. * * @since 2.7 * * @return null */function core_upgrade_preamble() {	global $upgrade_error;	$updates = get_core_updates();?>	<div class="wrap">	<?php screen_icon('tools'); ?>	<h2><?php _e('WordPress Updates'); ?></h2><?php	if ( $upgrade_error ) {		echo '<div class="error"><p>';		_e('Please select one or more plugins to upgrade.');		echo '</p></div>';	}	if ( !isset($updates[0]->response) || 'latest' == $updates[0]->response ) {		echo '<h3>';		_e('You have the latest version of WordPress.');		echo '</h3>';	} else {		echo '<div class="updated"><p>';		_e('<strong>Important:</strong> before updating, please <a href="http://codex.wordpress.org/WordPress_Backups">backup your database and files</a>. For help with updates, visit the <a href="http://codex.wordpress.org/Updating_WordPress">Updating WordPress</a> Codex page.');		echo '</p></div>';		echo '<h3 class="response">';		_e( 'An updated version of WordPress is available.' );		echo '</h3>';	}	echo '<ul class="core-updates">';	$alternate = true;	foreach( (array) $updates as $update ) {		$class = $alternate? ' class="alternate"' : '';		$alternate = !$alternate;		echo "<li $class>";		list_core_update( $update );		echo '</li>';	}	echo '</ul>';	echo '<p>' . __( 'While your site is being updated, it will be in maintenance mode. As soon as your updates are complete, your site will return to normal.' ) . '</p>';	dismissed_updates();	list_plugin_updates();	list_theme_updates();	do_action('core_upgrade_preamble');	echo '</div>';}function list_plugin_updates() {	global $wp_version;	$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);	require_once(ABSPATH . 'wp-admin/includes/plugin-install.php');	$plugins = get_plugin_updates();	if ( empty( $plugins ) ) {		echo '<h3>' . __( 'Plugins' ) . '</h3>';		echo '<p>' . __( 'Your plugins are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-plugin-upgrade';	$core_updates = get_core_updates();	if ( !isset($core_updates[0]->response) || 'latest' == $core_updates[0]->response || 'development' == $core_updates[0]->response || version_compare( $core_updates[0]->current, $cur_wp_version, '=') )		$core_update_version = false;	else		$core_update_version = $core_updates[0]->current;	?><h3><?php _e( 'Plugins' ); ?></h3><p><?php _e( 'The following plugins have new versions available. Check the ones you want to update and then click &#8220;Update Plugins&#8221;.' ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-plugins" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-plugins" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $plugins as $plugin_file => $plugin_data) {		$info = plugins_api('plugin_information', array('slug' => $plugin_data->update->slug ));		// Get plugin compat for running version of WordPress.		if ( isset($info->tested) && version_compare($info->tested, $cur_wp_version, '>=') ) {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: 100%% (according to its author)'), $cur_wp_version);		} elseif ( isset($info->compatibility[$cur_wp_version][$plugin_data->update->new_version]) ) {			$compat = $info->compatibility[$cur_wp_version][$plugin_data->update->new_version];			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $cur_wp_version, $compat[0], $compat[2], $compat[1]);		} else {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $cur_wp_version);		}		// Get plugin compat for updated version of WordPress.		if ( $core_update_version ) {			if ( isset($info->compatibility[$core_update_version][$plugin_data->update->new_version]) ) {				$update_compat = $info->compatibility[$core_update_version][$plugin_data->update->new_version];				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $core_update_version, $update_compat[0], $update_compat[2], $update_compat[1]);			} else {				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $core_update_version);			}		}		// Get the upgrade notice for the new plugin version.		if ( isset($plugin_data->update->upgrade_notice) ) {			$upgrade_notice = '<br />' . strip_tags($plugin_data->update->upgrade_notice);		} else {			$upgrade_notice = '';		}		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' /></th>		<td class='plugin-title'><strong>{$plugin_data->Name}</strong>" . sprintf(__('You have version %1$s installed. Update to %2$s.'), $plugin_data->Version, $plugin_data->update->new_version) . $compat . $upgrade_notice . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-plugins-2" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p></form><?php}function list_theme_updates() {	$themes = get_theme_updates();	if ( empty( $themes ) ) {		echo '<h3>' . __( 'Themes' ) . '</h3>';		echo '<p>' . __( 'Your themes are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-theme-upgrade';?><h3><?php _e( 'Themes' ); ?></h3><p><?php _e( 'The following themes have new versions available. Check the ones you want to update and then click &#8220;Update Themes&#8221;.' ); ?></p><p><?php printf( __('<strong>Please Note:</strong> Any customizations you have made to the Themes files will be lost. Please consider using <a href="%s">child themes</a> for modifications.'), _x('http://codex.wordpress.org/Child_Themes', 'Link used in suggestion to use child themes in GUU') ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-themes" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-themes" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-themes-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $themes as $stylesheet => $theme_data) {		$screenshot = $theme_data->{'Theme Root URI'} . '/' . $stylesheet . '/' . $theme_data->Screenshot;		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($stylesheet) . "' /></th>		<td class='plugin-title'><img src='$screenshot' width='64' height='64' style='float:left; padding: 5px' /><strong>{$theme_data->Name}</strong>" .  sprintf(__('You have version %1$s installed. Update to %2$s.'), $theme_data->Version, $theme_data->update['new_version']) . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-themes-2" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p></form><?php}/** * Upgrade WordPress core display. * * @since 2.7 * * @return null */function do_core_upgrade( $reinstall = false ) {	global $wp_filesystem;	if ( $reinstall )		$url = 'update-core.php?action=do-core-reinstall';	else		$url = 'update-core.php?action=do-core-upgrade';	$url = wp_nonce_url($url, 'upgrade-core');	if ( false === ($credentials = request_filesystem_credentials($url, '', false, ABSPATH)) )		return;	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	if ( ! WP_Filesystem($credentials, ABSPATH) ) {		request_filesystem_credentials($url, '', true, ABSPATH); //Failed to connect, Error and request again		return;	}?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e('Update WordPress'); ?></h2><?php	if ( $wp_filesystem->errors->get_error_code() ) {		foreach ( $wp_filesystem->errors->get_error_messages() as $message )			show_message($message);		echo '</div>';		return;	}	if ( $reinstall )		$update->response = 'reinstall';	$result = wp_update_core($update, 'show_message');	if ( is_wp_error($result) ) {		show_message($result);		if ('up_to_date' != $result->get_error_code() )			show_message( __('Installation Failed') );	} else {		show_message( __('WordPress updated successfully') );		show_message( '<strong>' . __('Actions:') . '</strong> <a href="' . esc_url( admin_url() ) . '">' . __('Go to Dashboard') . '</a>' );	}	echo '</div>';}function do_dismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	dismiss_core_update( $update );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function do_undismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	undismiss_core_update( $version, $locale );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function no_update_actions($actions) {	return '';}$action = isset($_GET['action']) ? $_GET['action'] : 'upgrade-core';$upgrade_error = false;if ( 'do-plugin-upgrade' == $action && !isset($_GET['plugins']) && !isset($_POST['checked']) ) {	$upgrade_error = true;	$action = 'upgrade-core';}$title = __('WordPress Updates');$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen lets you update to the latest version of WordPress as well as update your themes and plugins from the WordPress.org repository. When updates are available, the number of available updates will appear in a bubble on the left hand menu as a notification. It is very important to keep your WordPress installation up to date for security reasons, so when you see a number appear, make sure you take the time to update, which is an easy process.') . '</p>' .	'<p>' . __('Updating your WordPress installation is a simple one-click procedure; just click on the Update button when it says a new version is available.') . '</p>' .	'<p>' . __('To upgrade themes or plugins from this screen, use the checkboxes to make your selection and click on the appropriate Update button. Check the box at the top of the Themes or Plugins section to select all and update them all at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_Updates_SubPanel" target="_blank">Documentation on Updating WordPress</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( 'upgrade-core' == $action ) {	wp_version_check();	require_once('./admin-header.php');	core_upgrade_preamble();} elseif ( 'do-core-upgrade' == $action || 'do-core-reinstall' == $action ) {	check_admin_referer('upgrade-core');	// do the (un)dismiss actions before headers,	// so that they can redirect	if ( isset( $_POST['dismiss'] ) )		do_dismiss_core_update();	elseif ( isset( $_POST['undismiss'] ) )		do_undismiss_core_update();	require_once('./admin-header.php');	if ( 'do-core-reinstall' == $action )		$reinstall = true;	else		$reinstall = false;	if ( isset( $_POST['upgrade'] ) )		do_core_upgrade($reinstall);} elseif ( 'do-plugin-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['plugins'] ) ) {		$plugins = explode( ',', $_GET['plugins'] );	} elseif ( isset( $_POST['checked'] ) ) {		$plugins = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected&plugins=' . urlencode(implode(',', $plugins));	$url = wp_nonce_url($url, 'bulk-update-plugins');	$title = __('Update Plugins');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('plugins');	echo '<h2>' . esc_html__('Update Plugins') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';} elseif ( 'do-theme-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['themes'] ) ) {		$themes = explode( ',', $_GET['themes'] );	} elseif ( isset( $_POST['checked'] ) ) {		$themes = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected-themes&themes=' . urlencode(implode(',', $themes));	$url = wp_nonce_url($url, 'bulk-update-themes');	$title = __('Update Themes');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('themes');	echo '<h2>' . esc_html__('Update Themes') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';}include('./admin-footer.php');
<?php/** * WordPress Plugin Administration API * * @package WordPress * @subpackage Administration *//** * Parse the plugin contents to retrieve plugin's metadata. * * The metadata of the plugin's data searches for the following in the plugin's * header. All plugin data must be on its own line. For plugin description, it * must not have any newlines or only parts of the description will be displayed * and the same goes for the plugin data. The below is formatted for printing. * * <code> * /* * Plugin Name: Name of Plugin * Plugin URI: Link to plugin information * Description: Plugin Description * Author: Plugin author's name * Author URI: Link to the author's web site * Version: Must be set in the plugin for WordPress 2.3+ * Text Domain: Optional. Unique identifier, should be same as the one used in *		plugin_text_domain() * Domain Path: Optional. Only useful if the translations are located in a *		folder above the plugin's base path. For example, if .mo files are *		located in the locale folder then Domain Path will be "/locale/" and *		must have the first slash. Defaults to the base folder the plugin is *		located in. * Network: Optional. Specify "Network: true" to require that a plugin is activated *		across all sites in an installation. This will prevent a plugin from being *		activated on a single site when Multisite is enabled. *  * / # Remove the space to close comment * </code> * * Plugin data returned array contains the following: *		'Name' - Name of the plugin, must be unique. *		'Title' - Title of the plugin and the link to the plugin's web site. *		'Description' - Description of what the plugin does and/or notes *		from the author. *		'Author' - The author's name *		'AuthorURI' - The authors web site address. *		'Version' - The plugin version number. *		'PluginURI' - Plugin web site address. *		'TextDomain' - Plugin's text domain for localization. *		'DomainPath' - Plugin's relative directory path to .mo files. *		'Network' - Boolean. Whether the plugin can only be activated network wide. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the plugin contents when it has all of the required plugin data. * * The first 8kiB of the file will be pulled in and if the plugin data is not * within that first 8kiB, then the plugin author should correct their plugin * and move the plugin data headers to the top. * * The plugin file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @link http://trac.wordpress.org/ticket/5651 Previous Optimizations. * @link http://trac.wordpress.org/ticket/7372 Further and better Optimizations. * @since 1.5.0 * * @param string $plugin_file Path to the plugin file * @param bool $markup If the returned data should have HTML markup applied * @param bool $translate If the returned data should be translated * @return array See above for description. */function get_plugin_data( $plugin_file, $markup = true, $translate = true ) {	$default_headers = array(		'Name' => 'Plugin Name',		'PluginURI' => 'Plugin URI',		'Version' => 'Version',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'TextDomain' => 'Text Domain',		'DomainPath' => 'Domain Path',		'Network' => 'Network',		// Site Wide Only is deprecated in favor of Network.		'_sitewide' => 'Site Wide Only',	);	$plugin_data = get_file_data( $plugin_file, $default_headers, 'plugin' );	// Site Wide Only is the old header for Network	if ( empty( $plugin_data['Network'] ) && ! empty( $plugin_data['_sitewide'] ) ) {		_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The <code>%1$s</code> plugin header is deprecated. Use <code>%2$s</code> instead.' ), 'Site Wide Only: true', 'Network: true' ) );		$plugin_data['Network'] = $plugin_data['_sitewide'];	}	$plugin_data['Network'] = ( 'true' == strtolower( $plugin_data['Network'] ) );	unset( $plugin_data['_sitewide'] );	//For backward compatibility by default Title is the same as Name.	$plugin_data['Title'] = $plugin_data['Name'];	if ( $markup || $translate )		$plugin_data = _get_plugin_data_markup_translate( $plugin_file, $plugin_data, $markup, $translate );	return $plugin_data;}function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = true, $translate = true) {	//Translate fields30	if ( $translate && ! empty($plugin_data['TextDomain']) ) {		if ( ! empty( $plugin_data['DomainPath'] ) )			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file). $plugin_data['DomainPath']);		else			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file));		foreach ( array('Name', 'PluginURI', 'Description', 'Author', 'AuthorURI', 'Version') as $field )			$plugin_data[ $field ] = translate($plugin_data[ $field ], $plugin_data['TextDomain']);	}	//Apply Markup	if ( $markup ) {		if ( ! empty($plugin_data['PluginURI']) && ! empty($plugin_data['Name']) )			$plugin_data['Title'] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin homepage' ) . '">' . $plugin_data['Name'] . '</a>';		else			$plugin_data['Title'] = $plugin_data['Name'];		if ( ! empty($plugin_data['AuthorURI']) && ! empty($plugin_data['Author']) )			$plugin_data['Author'] = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';		$plugin_data['Description'] = wptexturize( $plugin_data['Description'] );		if ( ! empty($plugin_data['Author']) )			$plugin_data['Description'] .= ' <cite>' . sprintf( __('By %s'), $plugin_data['Author'] ) . '.</cite>';	}	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	// Sanitize all displayed data	$plugin_data['Title']       = wp_kses($plugin_data['Title'], $plugins_allowedtags);	$plugin_data['Version']     = wp_kses($plugin_data['Version'], $plugins_allowedtags);	$plugin_data['Description'] = wp_kses($plugin_data['Description'], $plugins_allowedtags);	$plugin_data['Author']      = wp_kses($plugin_data['Author'], $plugins_allowedtags);	return $plugin_data;}/** * Get a list of a plugin's files. * * @since 2.8.0 * * @param string $plugin Plugin ID * @return array List of files relative to the plugin root. */function get_plugin_files($plugin) {	$plugin_file = WP_PLUGIN_DIR . '/' . $plugin;	$dir = dirname($plugin_file);	$plugin_files = array($plugin);	if ( is_dir($dir) && $dir != WP_PLUGIN_DIR ) {		$plugins_dir = @ opendir( $dir );		if ( $plugins_dir ) {			while (($file = readdir( $plugins_dir ) ) !== false ) {				if ( substr($file, 0, 1) == '.' )					continue;				if ( is_dir( $dir . '/' . $file ) ) {					$plugins_subdir = @ opendir( $dir . '/' . $file );					if ( $plugins_subdir ) {						while (($subfile = readdir( $plugins_subdir ) ) !== false ) {							if ( substr($subfile, 0, 1) == '.' )								continue;							$plugin_files[] = plugin_basename("$dir/$file/$subfile");						}						@closedir( $plugins_subdir );					}				} else {					if ( plugin_basename("$dir/$file") != $plugin )						$plugin_files[] = plugin_basename("$dir/$file");				}			}			@closedir( $plugins_dir );		}	}	return $plugin_files;}/** * Check the plugins directory and retrieve all plugin files with plugin data. * * WordPress only supports plugin files in the base plugins directory * (wp-content/plugins) and in one directory above the plugins directory * (wp-content/plugins/my-plugin). The file it looks for has the plugin data and * must be found in those two locations. It is recommended that do keep your * plugin files in directories. * * The file with the plugin data is the file that will be included and therefore * needs to have the main execution for the plugin. This does not mean * everything must be contained in the file and it is recommended that the file * be split for maintainability. Keep everything in one file for extreme * optimization purposes. * * @since unknown * * @param string $plugin_folder Optional. Relative path to single plugin folder. * @return array Key is the plugin file path and the value is an array of the plugin data. */function get_plugins($plugin_folder = '') {	if ( ! $cache_plugins = wp_cache_get('plugins', 'plugins') )		$cache_plugins = array();	if ( isset($cache_plugins[ $plugin_folder ]) )		return $cache_plugins[ $plugin_folder ];	$wp_plugins = array ();	$plugin_root = WP_PLUGIN_DIR;	if ( !empty($plugin_folder) )		$plugin_root .= $plugin_folder;	// Files in wp-content/plugins directory	$plugins_dir = @ opendir( $plugin_root);	$plugin_files = array();	if ( $plugins_dir ) {		while (($file = readdir( $plugins_dir ) ) !== false ) {			if ( substr($file, 0, 1) == '.' )				continue;			if ( is_dir( $plugin_root.'/'.$file ) ) {				$plugins_subdir = @ opendir( $plugin_root.'/'.$file );				if ( $plugins_subdir ) {					while (($subfile = readdir( $plugins_subdir ) ) !== false ) {						if ( substr($subfile, 0, 1) == '.' )							continue;						if ( substr($subfile, -4) == '.php' )							$plugin_files[] = "$file/$subfile";					}				}			} else {				if ( substr($file, -4) == '.php' )					$plugin_files[] = $file;			}		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	@closedir( $plugins_subdir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( "$plugin_root/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( "$plugin_root/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			continue;		$wp_plugins[plugin_basename( $plugin_file )] = $plugin_data;	}	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	$cache_plugins[ $plugin_folder ] = $wp_plugins;	wp_cache_set('plugins', $cache_plugins, 'plugins');	return $wp_plugins;}/** * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data. * * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins). * * @since 3.0.0 * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data. */function get_mu_plugins() {	$wp_plugins = array();	// Files in wp-content/mu-plugins directory	$plugin_files = array();	if ( ! is_dir( WPMU_PLUGIN_DIR ) )		return $wp_plugins;	if ( $plugins_dir = @ opendir( WPMU_PLUGIN_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( substr( $file, -4 ) == '.php' )				$plugin_files[] = $file;		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WPMU_PLUGIN_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WPMU_PLUGIN_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$wp_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $wp_plugins['index.php'] ) && filesize( WPMU_PLUGIN_DIR . '/index.php') <= 30 ) // silence is golden		unset( $wp_plugins['index.php'] );	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	return $wp_plugins;}/** * Check the wp-content directory and retrieve all drop-ins with any plugin data. * * @since 3.0.0 * @return array Key is the file path and the value is an array of the plugin data. */function get_dropins() {	$dropins = array();	$plugin_files = array();	$_dropins = _get_dropins();	// These exist in the wp-content directory	if ( $plugins_dir = @ opendir( WP_CONTENT_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( isset( $_dropins[ $file ] ) )				$plugin_files[] = $file;		}	} else {		return $dropins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $dropins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WP_CONTENT_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WP_CONTENT_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$dropins[ $plugin_file ] = $plugin_data;	}	uksort( $dropins, create_function( '$a, $b', 'return strnatcasecmp( $a, $b );' ));	return $dropins;}/** * Returns drop-ins that WordPress uses. * * Includes Multisite drop-ins only when is_multisite() * * @since 3.0.0 * @return array Key is file name. The value is an array, with the first value the *	purpose of the drop-in and the second value the name of the constant that must be *	true for the drop-in to be used, or true if no constant is required. */function _get_dropins() {	$dropins = array(		'advanced-cache.php' => array( __( 'Advanced caching plugin.'       ), 'WP_CACHE' ), // WP_CACHE		'db.php'             => array( __( 'Custom database class.'         ), true ), // auto on load		'db-error.php'       => array( __( 'Custom database error message.' ), true ), // auto on error		'install.php'        => array( __( 'Custom install script.'         ), true ), // auto on install		'maintenance.php'    => array( __( 'Custom maintenance message.'    ), true ), // auto on maintenance		'object-cache.php'   => array( __( 'External object cache.'         ), true ), // auto on load	);	if ( is_multisite() ) {		$dropins['sunrise.php'       ] = array( __( 'Executed before Multisite is loaded.' ), 'SUNRISE' ); // SUNRISE		$dropins['blog-deleted.php'  ] = array( __( 'Custom site deleted message.'   ), true ); // auto on deleted blog		$dropins['blog-inactive.php' ] = array( __( 'Custom site inactive message.'  ), true ); // auto on inactive blog		$dropins['blog-suspended.php'] = array( __( 'Custom site suspended message.' ), true ); // auto on archived or spammed blog	}	return $dropins;}/** * Check whether the plugin is active by checking the active_plugins list. * * @since 2.5.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if in the active plugins list. False, not in the list. */function is_plugin_active( $plugin ) {	return in_array( $plugin, (array) get_option( 'active_plugins', array() ) ) || is_plugin_active_for_network( $plugin );}/** * Check whether the plugin is active for the entire network. * * @since 3.0.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if active for the network, otherwise false. */function is_plugin_active_for_network( $plugin ) {	if ( !is_multisite() )		return false;	$plugins = get_site_option( 'active_sitewide_plugins');	if ( isset($plugins[$plugin]) )		return true;	return false;}/** * Checks for "Network: true" in the plugin header to see if this should * be activated only as a network wide plugin. The plugin would also work * when Multisite is not enabled. * * Checks for "Site Wide Only: true" for backwards compatibility. * * @since 3.0.0 * * @param $file Plugin to check * $return bool True if plugin is network only, false otherwise. */function is_network_only_plugin( $plugin ) {	$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );	if ( $plugin_data )		return $plugin_data['Network'];	return false;}/** * Attempts activation of plugin in a "sandbox" and redirects on success. * * A plugin that is already activated will not attempt to be activated again. * * The way it works is by setting the redirection to the error before trying to * include the plugin file. If the plugin fails, then the redirection will not * be overwritten with the success message. Also, the options will not be * updated and the activation hook will not be called on plugin error. * * It should be noted that in no way the below code will actually prevent errors * within the file. The code should not be used elsewhere to replicate the * "sandbox", which uses redirection to work. * {@source 13 1} * * If any errors are found or text is outputted, then it will be captured to * ensure that the success redirection will update the error redirection. * * @since unknown * * @param string $plugin Plugin path to main plugin file with plugin data. * @param string $redirect Optional. URL to redirect to. * @param bool $network_wide Whether to enable the plugin for all sites in the network or just the current site.  Multisite only. Default is false. * @return WP_Error|null WP_Error on invalid file or null on success. */function activate_plugin( $plugin, $redirect = '', $network_wide = false) {	$plugin  = plugin_basename( trim( $plugin ) );	if ( is_multisite() && ( $network_wide || is_network_only_plugin($plugin) ) ) {		$network_wide = true;		$current = get_site_option( 'active_sitewide_plugins', array() );	} else {		$current = get_option( 'active_plugins', array() );	}	$valid = validate_plugin($plugin);	if ( is_wp_error($valid) )		return $valid;	if ( !in_array($plugin, $current) ) {		if ( !empty($redirect) )			wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect)); // we'll override this later if the plugin can be included without fatal error		ob_start();		include(WP_PLUGIN_DIR . '/' . $plugin);		do_action( 'activate_plugin', trim( $plugin) );		if ( $network_wide ) {			$current[$plugin] = time();			update_site_option( 'active_sitewide_plugins', $current );		} else {			$current[] = $plugin;			sort($current);			update_option('active_plugins', $current);		}		do_action( 'activate_' . trim( $plugin ) );		do_action( 'activated_plugin', trim( $plugin) );		if ( ob_get_length() > 0 ) {			$output = ob_get_clean();			return new WP_Error('unexpected_output', __('The plugin generated unexpected output.'), $output);		}		ob_end_clean();	}	return null;}/** * Deactivate a single plugin or multiple plugins. * * The deactivation hook is disabled by the plugin upgrader by using the $silent * parameter. * * @since unknown * * @param string|array $plugins Single plugin or list of plugins to deactivate. * @param bool $silent Optional, default is false. Prevent calling deactivate hook. */function deactivate_plugins( $plugins, $silent = false ) {	$network_current = get_site_option( 'active_sitewide_plugins', array() );	$current = get_option( 'active_plugins', array() );	$do_blog = $do_network = false;	foreach ( (array) $plugins as $plugin ) {		$plugin = plugin_basename($plugin);		if ( ! is_plugin_active($plugin) )			continue;		if ( ! $silent )			do_action( 'deactivate_plugin', trim( $plugin ) );		if ( is_plugin_active_for_network($plugin) ) {			// Deactivate network wide			$do_network = true;			unset( $network_current[ $plugin ] );		} else {			// Deactivate for this blog only			$key = array_search( $plugin, (array) $current );			if ( false !== $key ) {				$do_blog = true;				array_splice( $current, $key, 1 );			}		}		//Used by Plugin updater to internally deactivate plugin, however, not to notify plugins of the fact to prevent plugin output.		if ( ! $silent ) {			do_action( 'deactivate_' . trim( $plugin ) );			do_action( 'deactivated_plugin', trim( $plugin ) );		}	}	if ( $do_blog )		update_option('active_plugins', $current);	if ( $do_network )		update_site_option( 'active_sitewide_plugins', $network_current );}/** * Activate multiple plugins. * * When WP_Error is returned, it does not mean that one of the plugins had * errors. It means that one or more of the plugins file path was invalid. * * The execution will be halted as soon as one of the plugins has an error. * * @since unknown * * @param string|array $plugins * @param string $redirect Redirect to page after successful activation. * @param bool $network_wide Whether to enable the plugin for all sites in the network. * @return bool|WP_Error True when finished or WP_Error if there were errors during a plugin activation. */function activate_plugins($plugins, $redirect = '', $network_wide) {	if ( !is_array($plugins) )		$plugins = array($plugins);	$errors = array();	foreach ( (array) $plugins as $plugin ) {		if ( !empty($redirect) )			$redirect = add_query_arg('plugin', $plugin, $redirect);		$result = activate_plugin($plugin, $redirect, $network_wide);		if ( is_wp_error($result) )			$errors[$plugin] = $result;	}	if ( !empty($errors) )		return new WP_Error('plugins_invalid', __('One of the plugins is invalid.'), $errors);	return true;}/** * Remove directory and files of a plugin for a single or list of plugin(s). * * If the plugins parameter list is empty, false will be returned. True when * completed. * * @since unknown * * @param array $plugins List of plugin * @param string $redirect Redirect to page when complete. * @return mixed */function delete_plugins($plugins, $redirect = '' ) {	global $wp_filesystem;	if ( empty($plugins) )		return false;	$checked = array();	foreach( $plugins as $plugin )		$checked[] = 'checked[]=' . $plugin;	ob_start();	$url = wp_nonce_url('plugins.php?action=delete-selected&verify-delete=1&' . implode('&', $checked), 'bulk-manage-plugins');	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); //Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$plugins_dir = $wp_filesystem->wp_plugins_dir();	if ( empty($plugins_dir) )		return new WP_Error('fs_no_plugins_dir', __('Unable to locate WordPress Plugin directory.'));	$plugins_dir = trailingslashit( $plugins_dir );	$errors = array();	foreach( $plugins as $plugin_file ) {		// Run Uninstall hook		if ( is_uninstallable_plugin( $plugin_file ) )			uninstall_plugin($plugin_file);		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin_file) );		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin_file, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin_file);		if ( ! $deleted )			$errors[] = $plugin_file;	}	if ( ! empty($errors) )		return new WP_Error('could_not_remove_plugin', sprintf(__('Could not fully remove the plugin(s) %s.'), implode(', ', $errors)) );	// Force refresh of plugin update information	if ( $current = get_site_transient('update_plugins') ) {		unset( $current->response[ $plugin_file ] );		set_site_transient('update_plugins', $current);	}	return true;}/** * Validate active plugins * * Validate all active plugins, deactivates invalid and * returns an array of deactivated ones. * * @since unknown * @return array invalid plugins, plugin as key, error as value */function validate_active_plugins() {	$plugins = get_option( 'active_plugins', array() );	// validate vartype: array	if ( ! is_array( $plugins ) ) {		update_option( 'active_plugins', array() );		$plugins = array();	}	if ( is_multisite() && is_super_admin() ) {		$network_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		$plugins = array_merge( $plugins, array_keys( $network_plugins ) );	}	if ( empty( $plugins ) )		return;	$invalid = array();	// invalid plugins get deactivated	foreach ( $plugins as $plugin ) {		$result = validate_plugin( $plugin );		if ( is_wp_error( $result ) ) {			$invalid[$plugin] = $result;			deactivate_plugins( $plugin, true );		}	}	return $invalid;}/** * Validate the plugin path. * * Checks that the file exists and {@link validate_file() is valid file}. * * @since unknown * * @param string $plugin Plugin Path * @return WP_Error|int 0 on success, WP_Error on failure. */function validate_plugin($plugin) {	if ( validate_file($plugin) )		return new WP_Error('plugin_invalid', __('Invalid plugin path.'));	if ( ! file_exists(WP_PLUGIN_DIR . '/' . $plugin) )		return new WP_Error('plugin_not_found', __('Plugin file does not exist.'));	$installed_plugins = get_plugins();	if ( ! isset($installed_plugins[$plugin]) )		return new WP_Error('no_plugin_header', __('The plugin does not have a valid header.'));	return 0;}/** * Whether the plugin can be uninstalled. * * @since 2.7.0 * * @param string $plugin Plugin path to check. * @return bool Whether plugin can be uninstalled. */function is_uninstallable_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( isset( $uninstallable_plugins[$file] ) || file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) )		return true;	return false;}/** * Uninstall a single plugin. * * Calls the uninstall hook, if it is available. * * @since 2.7.0 * * @param string $plugin Relative plugin path from Plugin Directory. */function uninstall_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) ) {		if ( isset( $uninstallable_plugins[$file] ) ) {			unset($uninstallable_plugins[$file]);			update_option('uninstall_plugins', $uninstallable_plugins);		}		unset($uninstallable_plugins);		define('WP_UNINSTALL_PLUGIN', $file);		include WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php';		return true;	}	if ( isset( $uninstallable_plugins[$file] ) ) {		$callable = $uninstallable_plugins[$file];		unset($uninstallable_plugins[$file]);		update_option('uninstall_plugins', $uninstallable_plugins);		unset($uninstallable_plugins);		include WP_PLUGIN_DIR . '/' . $file;		add_action( 'uninstall_' . $file, $callable );		do_action( 'uninstall_' . $file );	}}//// Menu///** * Add a top level menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu * @param int $position The position in the menu order this one should appear */function add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = NULL ) {	global $menu, $admin_page_hooks, $_registered_pages, $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$admin_page_hooks[$menu_slug] = sanitize_title( $menu_title );	$hookname = get_plugin_page_hookname( $menu_slug, '' );	if ( !empty( $function ) && !empty( $hookname ) && current_user_can( $capability ) )		add_action( $hookname, $function );	if ( empty($icon_url) )		$icon_url = esc_url( admin_url( 'images/generic.png' ) );	elseif ( is_ssl() && 0 === strpos($icon_url, 'http://') )		$icon_url = 'https://' . substr($icon_url, 7);	$new_menu = array( $menu_title, $capability, $menu_slug, $page_title, 'menu-top ' . $hookname, $hookname, $icon_url );	if ( null === $position  )		$menu[] = $new_menu;	else		$menu[$position] = $new_menu;	$_registered_pages[$hookname] = true;	// No parent as top level	$_parent_pages[$menu_slug] = false;	return $hookname;}/** * Add a top level menu page in the 'objects' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_object_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_object_menu;	$_wp_last_object_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_object_menu);}/** * Add a top level menu page in the 'utility' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_utility_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_utility_menu;	$_wp_last_utility_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_utility_menu);}/** * Add a sub menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page) * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_submenu_page( $parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	global $submenu;	global $menu;	global $_wp_real_parent_file;	global $_wp_submenu_nopriv;	global $_registered_pages;	global $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$parent_slug = plugin_basename( $parent_slug);	if ( isset( $_wp_real_parent_file[$parent_slug] ) )		$parent_slug = $_wp_real_parent_file[$parent_slug];	if ( !current_user_can( $capability ) ) {		$_wp_submenu_nopriv[$parent_slug][$menu_slug] = true;		return false;	}	// If the parent doesn't already have a submenu, add a link to the parent	// as the first item in the submenu.  If the submenu file is the same as the	// parent file someone is trying to link back to the parent manually.  In	// this case, don't automatically add a link back to avoid duplication.	if (!isset( $submenu[$parent_slug] ) && $menu_slug != $parent_slug  ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $parent_slug && current_user_can( $parent_menu[1] ) )				$submenu[$parent_slug][] = $parent_menu;		}	}	$submenu[$parent_slug][] = array ( $menu_title, $capability, $menu_slug, $page_title );	$hookname = get_plugin_page_hookname( $menu_slug, $parent_slug);	if (!empty ( $function ) && !empty ( $hookname ))		add_action( $hookname, $function );	$_registered_pages[$hookname] = true;	// backwards-compatibility for plugins using add_management page.  See wp-admin/admin.php for redirect from edit.php to tools.php	if ( 'tools.php' == $parent_slug )		$_registered_pages[get_plugin_page_hookname( $menu_slug, 'edit.php')] = true;	// No parent as top level	$_parent_pages[$menu_slug] = $parent_slug;	return $hookname;}/** * Add sub menu page to the tools main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_management_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'tools.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the options main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_options_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'options-general.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the themes main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_theme_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'themes.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the plugins main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_plugins_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'plugins.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Users/Profile main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_users_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	if ( current_user_can('edit_users') )		$parent = 'users.php';	else		$parent = 'profile.php';	return add_submenu_page( $parent, $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Dashboard main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_dashboard_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'index.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the posts main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_posts_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the media main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_media_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'upload.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the links main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_links_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'link-manager.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the pages main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_pages_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php?post_type=page', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the comments main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_comments_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit-comments.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Get the url to access a particular menu page based on the slug it was registered with. * * If the slug hasn't been registered properly no url will be returned * * @since 3.0 * * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param bool $echo Whether or not to echo the url - default is true * @return string the url */function menu_page_url($menu_slug, $echo = true) {	global $_parent_pages;	if ( isset( $_parent_pages[$menu_slug] ) ) {		if ( $_parent_pages[$menu_slug] ) {			$url = admin_url( add_query_arg( 'page', $menu_slug, $_parent_pages[$menu_slug] ) );		} else {			$url = admin_url('admin.php?page=' . $menu_slug);		}	} else {		$url = '';	}	$url = esc_url($url);	if ( $echo )		echo $url;	return $url;}//// Pluggable Menu Support -- Private//function get_admin_page_parent( $parent = '' ) {	global $parent_file;	global $menu;	global $submenu;	global $pagenow;	global $typenow;	global $plugin_page;	global $_wp_real_parent_file;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	if ( !empty ( $parent ) && 'admin.php' != $parent ) {		if ( isset( $_wp_real_parent_file[$parent] ) )			$parent = $_wp_real_parent_file[$parent];		return $parent;	}	/*	if ( !empty ( $parent_file ) ) {		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	*/	if ( $pagenow == 'admin.php' && isset( $plugin_page ) ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $plugin_page ) {				$parent_file = $plugin_page;				if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];				return $parent_file;			}		}		if ( isset( $_wp_menu_nopriv[$plugin_page] ) ) {			$parent_file = $plugin_page;			if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];			return $parent_file;		}	}	if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) ) {		$parent_file = $pagenow;		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	foreach (array_keys( (array)$submenu ) as $parent) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $_wp_real_parent_file[$parent] ) )				$parent = $_wp_real_parent_file[$parent];			if ( !empty($typenow) && ($submenu_array[2] == "$pagenow?post_type=$typenow") ) {				$parent_file = $parent;				return $parent;			} elseif ( $submenu_array[2] == $pagenow && empty($typenow) && ( empty($parent_file) || false === strpos($parent_file, '?') ) ) {				$parent_file = $parent;				return $parent;			} else				if ( isset( $plugin_page ) && ($plugin_page == $submenu_array[2] ) ) {					$parent_file = $parent;					return $parent;				}		}	}	if ( empty($parent_file) )		$parent_file = '';	return '';}function get_admin_page_title() {	global $title;	global $menu;	global $submenu;	global $pagenow;	global $plugin_page;	global $typenow;	if ( ! empty ( $title ) )		return $title;	$hook = get_plugin_page_hook( $plugin_page, $pagenow );	$parent = $parent1 = get_admin_page_parent();	if ( empty ( $parent) ) {		foreach ( (array)$menu as $menu_array ) {			if ( isset( $menu_array[3] ) ) {				if ( $menu_array[2] == $pagenow ) {					$title = $menu_array[3];					return $menu_array[3];				} else					if ( isset( $plugin_page ) && ($plugin_page == $menu_array[2] ) && ($hook == $menu_array[3] ) ) {						$title = $menu_array[3];						return $menu_array[3];					}			} else {				$title = $menu_array[0];				return $title;			}		}	} else {		foreach ( array_keys( $submenu ) as $parent ) {			foreach ( $submenu[$parent] as $submenu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $submenu_array[2] ) &&					(						( $parent == $pagenow ) ||						( $parent == $plugin_page ) ||						( $plugin_page == $hook ) ||						( $pagenow == 'admin.php' && $parent1 != $submenu_array[2] ) ||						( !empty($typenow) && $parent == $pagenow . '?post_type=' . $typenow)					)					) {						$title = $submenu_array[3];						return $submenu_array[3];					}				if ( $submenu_array[2] != $pagenow || isset( $_GET['page'] ) ) // not the current page					continue;				if ( isset( $submenu_array[3] ) ) {					$title = $submenu_array[3];					return $submenu_array[3];				} else {					$title = $submenu_array[0];					return $title;				}			}		}		if ( empty ( $title ) ) {			foreach ( $menu as $menu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $menu_array[2] ) &&					( $pagenow == 'admin.php' ) &&					( $parent1 == $menu_array[2] ) )					{						$title = $menu_array[3];						return $menu_array[3];					}			}		}	}	return $title;}function get_plugin_page_hook( $plugin_page, $parent_page ) {	$hook = get_plugin_page_hookname( $plugin_page, $parent_page );	if ( has_action($hook) )		return $hook;	else		return null;}function get_plugin_page_hookname( $plugin_page, $parent_page ) {	global $admin_page_hooks;	$parent = get_admin_page_parent( $parent_page );	$page_type = 'admin';	if ( empty ( $parent_page ) || 'admin.php' == $parent_page || isset( $admin_page_hooks[$plugin_page] ) ) {		if ( isset( $admin_page_hooks[$plugin_page] ) )			$page_type = 'toplevel';		else			if ( isset( $admin_page_hooks[$parent] ))				$page_type = $admin_page_hooks[$parent];	} else if ( isset( $admin_page_hooks[$parent] ) ) {		$page_type = $admin_page_hooks[$parent];	}	$plugin_name = preg_replace( '!\.php!', '', $plugin_page );	return $page_type . '_page_' . $plugin_name;}function user_can_access_admin_page() {	global $pagenow;	global $menu;	global $submenu;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	global $plugin_page;	global $_registered_pages;	$parent = get_admin_page_parent();	if ( !isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$parent][$pagenow] ) )		return false;	if ( isset( $plugin_page ) ) {		if ( isset( $_wp_submenu_nopriv[$parent][$plugin_page] ) )			return false;		$hookname = get_plugin_page_hookname($plugin_page, $parent);		if ( !isset($_registered_pages[$hookname]) )			return false;	}	if ( empty( $parent) ) {		if ( isset( $_wp_menu_nopriv[$pagenow] ) )			return false;		if ( isset( $_wp_submenu_nopriv[$pagenow][$pagenow] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_menu_nopriv[$plugin_page] ) )			return false;		foreach (array_keys( $_wp_submenu_nopriv ) as $key ) {			if ( isset( $_wp_submenu_nopriv[$key][$pagenow] ) )				return false;			if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$key][$plugin_page] ) )			return false;		}		return true;	}	if ( isset( $plugin_page ) && ( $plugin_page == $parent ) && isset( $_wp_menu_nopriv[$plugin_page] ) )		return false;	if ( isset( $submenu[$parent] ) ) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $plugin_page ) && ( $submenu_array[2] == $plugin_page ) ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			} else if ( $submenu_array[2] == $pagenow ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			}		}	}	foreach ( $menu as $menu_array ) {		if ( $menu_array[2] == $parent) {			if ( current_user_can( $menu_array[1] ))				return true;			else				return false;		}	}	return true;}/* Whitelist functions *//** * Register a setting and its sanitization callback * * @since 2.7.0 * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function register_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$new_whitelist_options[ $option_group ][] = $option_name;	if ( $sanitize_callback != '' )		add_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function unregister_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$pos = array_search( $option_name, (array) $new_whitelist_options );	if ( $pos !== false )		unset( $new_whitelist_options[ $option_group ][ $pos ] );	if ( $sanitize_callback != '' )		remove_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $options * @return unknown */function option_update_filter( $options ) {	global $new_whitelist_options;	if ( is_array( $new_whitelist_options ) )		$options = add_option_whitelist( $new_whitelist_options, $options );	return $options;}add_filter( 'whitelist_options', 'option_update_filter' );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $new_options * @param unknown_type $options * @return unknown */function add_option_whitelist( $new_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $new_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( !isset($whitelist_options[ $page ]) || !is_array($whitelist_options[ $page ]) ) {				$whitelist_options[ $page ] = array();				$whitelist_options[ $page ][] = $key;			} else {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos === false )					$whitelist_options[ $page ][] = $key;			}		}	}	return $whitelist_options;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $del_options * @param unknown_type $options * @return unknown */function remove_option_whitelist( $del_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $del_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( isset($whitelist_options[ $page ]) && is_array($whitelist_options[ $page ]) ) {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos !== false )					unset( $whitelist_options[ $page ][ $pos ] );			}		}	}	return $whitelist_options;}/** * Output nonce, action, and option_page fields for a settings page. * * @since 2.7.0 * * @param string $option_group A settings group name.  This should match the group name used in register_setting(). */function settings_fields($option_group) {	echo "<input type='hidden' name='option_page' value='" . esc_attr($option_group) . "' />";	echo '<input type="hidden" name="action" value="update" />';	wp_nonce_field("$option_group-options");}?>
<?php/** * WordPress AJAX Process Execution. * * @package WordPress * @subpackage Administration *//** * Executing AJAX process. * * @since unknown */define('DOING_AJAX', true);define('WP_ADMIN', true);require_once('../wp-load.php');if ( ! isset( $_REQUEST['action'] ) )	die('-1');require_once('./includes/admin.php');@header('Content-Type: text/html; charset=' . get_option('blog_charset'));send_nosniff_header();do_action('admin_init');if ( ! is_user_logged_in() ) {	if ( isset( $_POST['action'] ) && $_POST['action'] == 'autosave' ) {		$id = isset($_POST['post_ID'])? (int) $_POST['post_ID'] : 0;		if ( ! $id )			die('-1');		$message = sprintf( __('<strong>ALERT: You are logged out!</strong> Could not save draft. <a href="%s" target="_blank">Please log in again.</a>'), wp_login_url() );		$x = new WP_Ajax_Response( array(			'what' => 'autosave',			'id' => $id,			'data' => $message		) );		$x->send();	}	if ( !empty( $_REQUEST['action'] ) )		do_action( 'wp_ajax_nopriv_' . $_REQUEST['action'] );	die('-1');}if ( isset( $_GET['action'] ) ) :switch ( $action = $_GET['action'] ) :case 'ajax-tag-search' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$s = $_GET['q']; // is this slashed already?	if ( isset($_GET['tax']) )		$taxonomy = sanitize_title($_GET['tax']);	else		die('0');	if ( false !== strpos( $s, ',' ) ) {		$s = explode( ',', $s );		$s = $s[count( $s ) - 1];	}	$s = trim( $s );	if ( strlen( $s ) < 2 )		die; // require 2 chars for matching	$results = $wpdb->get_col( "SELECT t.name FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = '$taxonomy' AND t.name LIKE ('%" . $s . "%')" );	echo join( $results, "\n" );	die;	break;case 'wp-compression-test' :	if ( !current_user_can( 'manage_options' ) )		die('-1');	if ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {		update_site_option('can_compress_scripts', 0);		die('0');	}	if ( isset($_GET['test']) ) {		header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );		header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );		header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );		header( 'Pragma: no-cache' );		header('Content-Type: application/x-javascript; charset=UTF-8');		$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );		$test_str = '"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh."';		 if ( 1 == $_GET['test'] ) {		 	echo $test_str;		 	die;		 } elseif ( 2 == $_GET['test'] ) {			if ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )				die('-1');			if ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {				header('Content-Encoding: deflate');				$out = gzdeflate( $test_str, 1 );			} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {				header('Content-Encoding: gzip');				$out = gzencode( $test_str, 1 );			} else {				die('-1');			}			echo $out;			die;		} elseif ( 'no' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 0);		} elseif ( 'yes' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 1);		}	}	die('0');	break;case 'imgedit-preview' :	$post_id = intval($_GET['postid']);	if ( empty($post_id) || !current_user_can('edit_post', $post_id) )		die('-1');	check_ajax_referer( "image_editor-$post_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	if ( ! stream_preview_image($post_id) )		die('-1');	die();	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'oembed-cache' :	$return = ( $wp_embed->cache_oembed( $_GET['post'] ) ) ? '1' : '0';	die( $return );	break;default :	do_action( 'wp_ajax_' . $_GET['action'] );	die('0');	break;endswitch;endif;/** * Sends back current comment total and new page links if they need to be updated. * * Contrary to normal success AJAX response ("1"), die with time() on success. * * @since 2.7 * * @param int $comment_id * @return die */function _wp_ajax_delete_comment_response( $comment_id ) {	$total = (int) @$_POST['_total'];	$per_page = (int) @$_POST['_per_page'];	$page = (int) @$_POST['_page'];	$url = esc_url_raw( @$_POST['_url'] );	// JS didn't send us everything we need to know. Just die with success message	if ( !$total || !$per_page || !$page || !$url )		die( (string) time() );	if ( --$total < 0 ) // Take the total from POST and decrement it (since we just deleted one)		$total = 0;	if ( 0 != $total % $per_page && 1 != mt_rand( 1, $per_page ) ) // Only do the expensive stuff on a page-break, and about 1 other time per page		die( (string) time() );	$post_id = 0;	$status = 'total_comments'; // What type of comment count are we looking for?	$parsed = parse_url( $url );	if ( isset( $parsed['query'] ) ) {		parse_str( $parsed['query'], $query_vars );		if ( !empty( $query_vars['comment_status'] ) )			$status = $query_vars['comment_status'];		if ( !empty( $query_vars['p'] ) )			$post_id = (int) $query_vars['p'];	}	$comment_count = wp_count_comments($post_id);	$time = time(); // The time since the last comment count	if ( isset( $comment_count->$status ) ) // We're looking for a known type of comment count		$total = $comment_count->$status;	// else use the decremented value from above	$page_links = paginate_links( array(		'base' => add_query_arg( 'apage', '%#%', $url ),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => ceil($total / $per_page),		'current' => $page	) );	$x = new WP_Ajax_Response( array(		'what' => 'comment',		'id' => $comment_id, // here for completeness - not used		'supplemental' => array(			'pageLinks' => $page_links,			'total' => $total,			'time' => $time		)	) );	$x->send();}function _wp_ajax_add_hierarchical_term() {	$action = $_POST['action'];	$taxonomy = get_taxonomy(substr($action, 4));	check_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );	if ( !current_user_can( $taxonomy->cap->edit_terms ) )		die('-1');	$names = explode(',', $_POST['new'.$taxonomy->name]);	$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;	if ( 0 > $parent )		$parent = 0;	if ( $taxonomy->name == 'category' )		$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();	else		$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();	$checked_categories = array_map( 'absint', (array) $post_category );	$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$category_nicename = sanitize_title($cat_name);		if ( '' === $category_nicename )			continue;		if ( !($cat_id = term_exists($cat_name, $taxonomy->name, $parent)) ) {			$new_term = wp_insert_term($cat_name, $taxonomy->name, array('parent' => $parent));			$cat_id = $new_term['term_id'];		}		$checked_categories[] = $cat_id;		if ( $parent ) // Do these all at once in a second			continue;		$category = get_term( $cat_id, $taxonomy->name );		ob_start();			wp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $cat_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	if ( $parent ) { // Foncy - replace the parent and all its children		$parent = get_term( $parent, $taxonomy->name );		$term_id = $parent->term_id;		while ( $parent->parent ) { // get the top parent			$parent = &get_term( $parent->parent, $taxonomy->name );			if ( is_wp_error( $parent ) )				break;			$term_id = $parent->term_id;		}		ob_start();			wp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $term_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	ob_start();		wp_dropdown_categories( array(			'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',			'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'		) );	$sup = ob_get_contents();	ob_end_clean();	$add['supplemental'] = array( 'newcat_parent' => $sup );	$x = new WP_Ajax_Response( $add );	$x->send();}$id = isset($_POST['id'])? (int) $_POST['id'] : 0;switch ( $action = $_POST['action'] ) :case 'delete-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) )		die( (string) time() );	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) )		die('-1');	check_ajax_referer( "delete-comment_$id" );	$status = wp_get_comment_status( $comment->comment_ID );	if ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {		if ( 'trash' == $status )			die( (string) time() );		$r = wp_trash_comment( $comment->comment_ID );	} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {		if ( 'trash' != $status )			die( (string) time() );		$r = wp_untrash_comment( $comment->comment_ID );	} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {		if ( 'spam' == $status )			die( (string) time() );		$r = wp_spam_comment( $comment->comment_ID );	} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {		if ( 'spam' != $status )			die( (string) time() );		$r = wp_unspam_comment( $comment->comment_ID );	} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {		$r = wp_delete_comment( $comment->comment_ID );	} else {		die('-1');	}	if ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts		_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'delete-tag' :	$tag_id = (int) $_POST['tag_ID'];	check_ajax_referer( "delete-tag_$tag_id" );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	if ( !current_user_can( $tax->cap->delete_terms ) )		die('-1');	$tag = get_term( $tag_id, $taxonomy );	if ( !$tag || is_wp_error( $tag ) )		die('1');	if ( wp_delete_term($tag_id, $taxonomy))		die('1');	else		die('0');	break;case 'delete-link-cat' :	check_ajax_referer( "delete-link-category_$id" );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$cat = get_term( $id, 'link_category' );	if ( !$cat || is_wp_error( $cat ) )		die('1');	$cat_name = get_term_field('name', $id, 'link_category');	$default = get_option('default_link_category');	// Don't delete the default cats.	if ( $id == $default ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => new WP_Error( 'default-link-cat', sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name) )		) );		$x->send();	}	$r = wp_delete_term($id, 'link_category', array('default' => $default));	if ( !$r )		die('0');	if ( is_wp_error($r) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => $r		) );		$x->send();	}	die('1');	break;case 'delete-link' :	check_ajax_referer( "delete-bookmark_$id" );	if ( !current_user_can( 'manage_links' ) )		die('-1');	$link = get_bookmark( $id );	if ( !$link || is_wp_error( $link ) )		die('1');	if ( wp_delete_link( $id ) )		die('1');	else		die('0');	break;case 'delete-meta' :	check_ajax_referer( "delete-meta_$id" );	if ( !$meta = get_post_meta_by_id( $id ) )		die('1');	if ( !current_user_can( 'edit_post', $meta->post_id ) )		die('-1');	if ( delete_meta( $meta->meta_id ) )		die('1');	die('0');	break;case 'delete-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'trash-post' :case 'untrash-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( 'trash-post' == $action )		$done = wp_trash_post( $id );	else		$done = wp_untrash_post( $id );	if ( $done )		die('1');	die('0');	break;case 'delete-page' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_page', $id ) )		die('-1');	if ( !get_page( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'dim-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))		) );		$x->send();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) && !current_user_can( 'moderate_comments' ) )		die('-1');	$current = wp_get_comment_status( $comment->comment_ID );	if ( $_POST['new'] == $current )		die( (string) time() );	check_ajax_referer( "approve-comment_$id" );	if ( in_array( $current, array( 'unapproved', 'spam' ) ) )		$result = wp_set_comment_status( $comment->comment_ID, 'approve', true );	else		$result = wp_set_comment_status( $comment->comment_ID, 'hold', true );	if ( is_wp_error($result) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => $result		) );		$x->send();	}	// Decide if we need to send back '1' or a more complicated response including page links and comment counts	_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'add-link-category' : // On the Fly	check_ajax_referer( $action );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$names = explode(',', $_POST['newcat']);	$x = new WP_Ajax_Response();	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$slug = sanitize_title($cat_name);		if ( '' === $slug )			continue;		if ( !$cat_id = term_exists( $cat_name, 'link_category' ) ) {			$cat_id = wp_insert_term( $cat_name, 'link_category' );		}		$cat_id = $cat_id['term_id'];		$cat_name = esc_html(stripslashes($cat_name));		$x->add( array(			'what' => 'link-category',			'id' => $cat_id,			'data' => "<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='" . esc_attr($cat_id) . "' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>",			'position' => -1		) );	}	$x->send();	break;case 'add-link-cat' : // From Blogroll -> Categories	check_ajax_referer( 'add-link-category' );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	if ( '' === trim($_POST['name']) ) {		$x = new WP_Ajax_Response( array(			'what' => 'link-cat',			'id' => new WP_Error( 'name', __('You did not enter a category name.') )		) );		$x->send();	}	$r = wp_insert_term($_POST['name'], 'link_category', $_POST );	if ( is_wp_error( $r ) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $r		) );		$x->send();	}	extract($r, EXTR_SKIP);	if ( !$link_cat = link_cat_row( $term_id ) )		die('0');	$x = new WP_Ajax_Response( array(		'what' => 'link-cat',		'id' => $term_id,		'position' => -1,		'data' => $link_cat	) );	$x->send();	break;case 'add-tag' : // From Manage->Tags	check_ajax_referer( 'add-tag' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	$x = new WP_Ajax_Response();	if ( !current_user_can( $tax->cap->edit_terms ) )		die('-1');	$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );	if ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {		$message = __('An error has occured. Please reload the page and try again.');		if ( is_wp_error($tag) && $tag->get_error_message() )			$message = $tag->get_error_message();		$x->add( array(			'what' => 'taxonomy',			'data' => new WP_Error('error', $message )		) );		$x->send();	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	$level = 0;	$tag_full_name = false;	$tag_full_name = $tag->name;	if ( is_taxonomy_hierarchical($taxonomy) ) {		$_tag = $tag;		while ( $_tag->parent  ) {			$_tag = get_term( $_tag->parent, $taxonomy );			$tag_full_name = $_tag->name . ' &#8212; ' . $tag_full_name;			$level++;		}		$noparents = _tag_row( $tag, $level, $taxonomy );	}	$tag->name = $tag_full_name;	$parents = _tag_row( $tag, 0, $taxonomy);	$x->add( array(		'what' => 'taxonomy',		'supplemental' => compact('parents', 'noparents')		) );	$x->add( array(		'what' => 'term',		'position' => $level,		'supplemental' => get_term( $tag->term_id, $taxonomy, ARRAY_A ) //Refetch as $tag has been contaminated by the full name.		) );	$x->send();	break;case 'get-tagcloud' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	if ( isset($_POST['tax']) )		$taxonomy = sanitize_title($_POST['tax']);	else		die('0');	$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );	if ( empty( $tags ) ) {		$tax = get_taxonomy( $taxonomy );		die( isset( $tax->no_tagcloud ) ? $tax->no_tagcloud : __('No tags found!') );	}	if ( is_wp_error($tags) )		die($tags->get_error_message());	foreach ( $tags as $key => $tag ) {		$tags[ $key ]->link = '#';		$tags[ $key ]->id = $tag->term_id;	}	// We need raw tag names here, so don't filter the output	$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );	if ( empty($return) )		die('0');	echo $return;	exit;	break;case 'add-comment' :	check_ajax_referer( $action );	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$search = isset($_POST['s']) ? $_POST['s'] : false;	$status = isset($_POST['comment_status']) ? $_POST['comment_status'] : 'all';	$per_page = isset($_POST['per_page']) ?  (int) $_POST['per_page'] + 8 : 28;	$start = isset($_POST['page']) ? ( intval($_POST['page']) * $per_page ) -1 : $per_page - 1;	if ( 1 > $start )		$start = 27;	$mode = isset($_POST['mode']) ? $_POST['mode'] : 'detail';	$p = isset($_POST['p']) ? $_POST['p'] : 0;	$comment_type = isset($_POST['comment_type']) ? $_POST['comment_type'] : '';	list($comments, $total) = _wp_get_comment_list( $status, $search, $start, 1, $p, $comment_type );	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );	if ( !$comments )		die('1');	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, $mode, $status, true, true );			$comment_list_item = ob_get_contents();		ob_end_clean();		$x->add( array(			'what' => 'comment',			'id' => $comment->comment_ID,			'data' => $comment_list_item		) );	}	$x->send();	break;case 'get-comments' :	check_ajax_referer( $action );	$post_ID = (int) $_POST['post_ID'];	if ( !current_user_can( 'edit_post', $post_ID ) )		die('-1');	$start = isset($_POST['start']) ? intval($_POST['start']) : 0;	$num = isset($_POST['num']) ? intval($_POST['num']) : 10;	list($comments, $total) = _wp_get_comment_list( false, false, $start, $num, $post_ID );	if ( !$comments )		die('1');	$comment_list_item = '';	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, 'single', false, false );			$comment_list_item .= ob_get_contents();		ob_end_clean();	}	$x->add( array(		'what' => 'comments',		'data' => $comment_list_item	) );	$x->send();	break;case 'replyto-comment' :	check_ajax_referer( $action, '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( !current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	$status = $wpdb->get_var( $wpdb->prepare("SELECT post_status FROM $wpdb->posts WHERE ID = %d", $comment_post_ID) );	if ( empty($status) )		die('1');	elseif ( in_array($status, array('draft', 'pending', 'trash') ) )		die( __('Error: you are replying to a comment on a draft post.') );	$user = wp_get_current_user();	if ( $user->ID ) {		$comment_author       = $wpdb->escape($user->display_name);		$comment_author_email = $wpdb->escape($user->user_email);		$comment_author_url   = $wpdb->escape($user->user_url);		$comment_content      = trim($_POST['content']);		if ( current_user_can('unfiltered_html') ) {			if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {				kses_remove_filters(); // start with a clean slate				kses_init_filters(); // set up the filters			}		}	} else {		die( __('Sorry, you must be logged in to reply to a comment.') );	}	if ( '' == $comment_content )		die( __('Error: please type a comment.') );	$comment_parent = absint($_POST['comment_ID']);	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');	$comment_id = wp_new_comment( $commentdata );	$comment = get_comment($comment_id);	if ( ! $comment ) die('1');	$modes = array( 'single', 'detail', 'dashboard' );	$mode = isset($_POST['mode']) && in_array( $_POST['mode'], $modes ) ? $_POST['mode'] : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		if ( 'dashboard' == $mode ) {			require_once( ABSPATH . 'wp-admin/includes/dashboard.php' );			_wp_dashboard_recent_comments_row( $comment, false );		} else {			_wp_comment_row( $comment->comment_ID, $mode, false, $checkbox );		}		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'edit-comment' :	check_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( ! current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	if ( '' == $_POST['content'] )		die( __('Error: please type a comment.') );	$comment_id = (int) $_POST['comment_ID'];	$_POST['comment_status'] = $_POST['status'];	edit_comment();	$mode = ( isset($_POST['mode']) && 'single' == $_POST['mode'] ) ? 'single' : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	$comments_listing = isset($_POST['comments_listing']) ? $_POST['comments_listing'] : '';	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		_wp_comment_row( $comment_id, $mode, $comments_listing, $checkbox );		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'edit_comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'add-menu-item' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	$item_ids = wp_save_nav_menu_items( 0, $_POST['menu-item'] );	if ( is_wp_error( $item_ids ) )		die('-1');	foreach ( (array) $item_ids as $menu_item_id ) {		$menu_obj = get_post( $menu_item_id );		if ( ! empty( $menu_obj->ID ) ) {			$menu_obj = wp_setup_nav_menu_item( $menu_obj );			$menu_obj->label = $menu_obj->title; // don't show "(pending)" in ajax-added items			$menu_items[] = $menu_obj;		}	}	if ( ! empty( $menu_items ) ) {		$args = array(			'after' => '',			'before' => '',			'link_after' => '',			'link_before' => '',			'walker' => new Walker_Nav_Menu_Edit,		);		echo walk_nav_menu_tree( $menu_items, 0, (object) $args );	}	break;case 'add-meta' :	check_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );	$c = 0;	$pid = (int) $_POST['post_id'];	$post = get_post( $pid );	if ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {		if ( !current_user_can( 'edit_post', $pid ) )			die('-1');		if ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )			die('1');		if ( $post->post_status == 'auto-draft' ) {			$save_POST = $_POST; // Backup $_POST			$_POST = array(); // Make it empty for edit_post()			$_POST['action'] = 'draft'; // Warning fix			$_POST['post_ID'] = $pid;			$_POST['post_type'] = $post->post_type;			$_POST['post_status'] = 'draft';			$now = current_time('timestamp', 1);			$_POST['post_title'] = sprintf('Draft created on %s at %s', date(get_option('date_format'), $now), date(get_option('time_format'), $now));			if ( $pid = edit_post() ) {				if ( is_wp_error( $pid ) ) {					$x = new WP_Ajax_Response( array(						'what' => 'meta',						'data' => $pid					) );					$x->send();				}				$_POST = $save_POST; // Now we can restore original $_POST again				if ( !$mid = add_meta( $pid ) )					die(__('Please provide a custom field value.'));			} else {				die('0');			}		} else if ( !$mid = add_meta( $pid ) ) {			die(__('Please provide a custom field value.'));		}		$meta = get_post_meta_by_id( $mid );		$pid = (int) $meta->post_id;		$meta = get_object_vars( $meta );		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid,			'data' => _list_meta_row( $meta, $c ),			'position' => 1,			'supplemental' => array('postid' => $pid)		) );	} else { // Update?		$mid = (int) array_pop(array_keys($_POST['meta']));		$key = $_POST['meta'][$mid]['key'];		$value = $_POST['meta'][$mid]['value'];		if ( '' == trim($key) )			die(__('Please provide a custom field name.'));		if ( '' == trim($value) )			die(__('Please provide a custom field value.'));		if ( !$meta = get_post_meta_by_id( $mid ) )			die('0'); // if meta doesn't exist		if ( !current_user_can( 'edit_post', $meta->post_id ) )			die('-1');		if ( $meta->meta_value != stripslashes($value) || $meta->meta_key != stripslashes($key) ) {			if ( !$u = update_meta( $mid, $key, $value ) )				die('0'); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).		}		$key = stripslashes($key);		$value = stripslashes($value);		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid, 'old_id' => $mid,			'data' => _list_meta_row( array(				'meta_key' => $key,				'meta_value' => $value,				'meta_id' => $mid			), $c ),			'position' => 0,			'supplemental' => array('postid' => $meta->post_id)		) );	}	$x->send();	break;case 'add-user' :	check_ajax_referer( $action );	if ( !current_user_can('create_users') )		die('-1');	require_once(ABSPATH . WPINC . '/registration.php');	if ( !$user_id = add_user() )		die('0');	elseif ( is_wp_error( $user_id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'user',			'id' => $user_id		) );		$x->send();	}	$user_object = new WP_User( $user_id );	$x = new WP_Ajax_Response( array(		'what' => 'user',		'id' => $user_id,		'data' => user_row( $user_object, '', $user_object->roles[0] ),		'supplemental' => array(			'show-link' => sprintf(__( 'User <a href="#%s">%s</a> added' ), "user-$user_id", $user_object->user_login),			'role' => $user_object->roles[0]		)	) );	$x->send();	break;case 'autosave' : // The name of this action is hardcoded in edit_post()	define( 'DOING_AUTOSAVE', true );	$nonce_age = check_ajax_referer( 'autosave', 'autosavenonce' );	global $current_user;	$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$do_autosave = (bool) $_POST['autosave'];	$do_lock = true;	$data = '';	/* translators: draft saved date format, see http://php.net/date */	$draft_saved_date_format = __('g:i:s a');	/* translators: %s: date and time */	$message = sprintf( __('Draft saved at %s.'), date_i18n( $draft_saved_date_format ) );	$supplemental = array();	if ( isset($login_grace_period) )		$supplemental['session_expired'] = add_query_arg( 'interim-login', 1, wp_login_url() );	$id = $revision_id = 0;	$post_ID = (int) $_POST['post_ID'];	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'auto-draft' == $post->post_status )		$_POST['post_status'] = 'draft';	if ( $last = wp_check_post_lock( $post->ID ) ) {		$do_autosave = $do_lock = false;		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		$data = new WP_Error( 'locked', sprintf(			$_POST['post_type'] == 'page' ? __( 'Autosave disabled: %s is currently editing this page.' ) : __( 'Autosave disabled: %s is currently editing this post.' ),			esc_html( $last_user_name )		) );		$supplemental['disable_autosave'] = 'disable';	}	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			die(__('You are not allowed to edit this post.'));	}	if ( $do_autosave ) {		// Drafts and auto-drafts are just overwritten by autosave		if ( 'auto-draft' == $post->post_status || 'draft' == $post->post_status ) {			$id = edit_post();		} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.			$revision_id = wp_create_post_autosave( $post->ID );			if ( is_wp_error($revision_id) )				$id = $revision_id;			else				$id = $post->ID;		}		$data = $message;	} else {		if ( isset( $_POST['auto_draft'] ) && '1' == $_POST['auto_draft'] )			$id = 0; // This tells us it didn't actually save		else			$id = $post->ID;	}	if ( $do_lock && ( isset( $_POST['auto_draft'] ) && ( $_POST['auto_draft'] != '1' ) ) && $id && is_numeric($id) )		wp_set_post_lock( $id );	if ( $nonce_age == 2 ) {		$supplemental['replace-autosavenonce'] = wp_create_nonce('autosave');		$supplemental['replace-getpermalinknonce'] = wp_create_nonce('getpermalink');		$supplemental['replace-samplepermalinknonce'] = wp_create_nonce('samplepermalink');		$supplemental['replace-closedpostboxesnonce'] = wp_create_nonce('closedpostboxes');		if ( $id ) {			if ( $_POST['post_type'] == 'post' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-post_' . $id);			elseif ( $_POST['post_type'] == 'page' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-page_' . $id);		}	}	$x = new WP_Ajax_Response( array(		'what' => 'autosave',		'id' => $id,		'data' => $id ? $data : '',		'supplemental' => $supplemental	) );	$x->send();	break;case 'closed-postboxes' :	check_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );	$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();	$closed = array_filter($closed);	$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();	$hidden = array_filter($hidden);	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($closed) )		update_user_option($user->ID, "closedpostboxes_$page", $closed, true);	if ( is_array($hidden) ) {		$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown		update_user_option($user->ID, "metaboxhidden_$page", $hidden, true);	}	die('1');	break;case 'hidden-columns' :	check_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );	$hidden = isset( $_POST['hidden'] ) ? $_POST['hidden'] : '';	$hidden = explode( ',', $_POST['hidden'] );	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($hidden) )		update_user_option($user->ID, "manage{$page}columnshidden", $hidden, true);	die('1');	break;case 'menu-get-metabox' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	if ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {		$type = 'posttype';		$callback = 'wp_nav_menu_item_post_type_meta_box';		$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {		$type = 'taxonomy';		$callback = 'wp_nav_menu_item_taxonomy_meta_box';		$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );	}	if ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {		$item = apply_filters( 'nav_menu_meta_box_object', $items[ $_POST['item-object'] ] );		ob_start();		call_user_func_array($callback, array(			null,			array(				'id' => 'add-' . $item->name,				'title' => $item->labels->name,				'callback' => $callback,				'args' => $item,			)		));		$markup = ob_get_clean();		echo json_encode(array(			'replace-id' => $type . '-' . $item->name,			'markup' => $markup,		));	}	exit;	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'menu-locations-save':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	if ( ! isset( $_POST['menu-locations'] ) )		die('0');	set_theme_mod( 'nav_menu_locations', $_POST['menu-locations'] );	die('1');	break;case 'meta-box-order':	check_ajax_referer( 'meta-box-order' );	$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;	$page_columns = isset( $_POST['page_columns'] ) ? (int) $_POST['page_columns'] : 0;	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( $order )		update_user_option($user->ID, "meta-box-order_$page", $order, true);	if ( $page_columns )		update_user_option($user->ID, "screen_layout_$page", $page_columns, true);	die('1');	break;case 'get-permalink':	check_ajax_referer( 'getpermalink', 'getpermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	die(add_query_arg(array('preview' => 'true'), get_permalink($post_id)));break;case 'sample-permalink':	check_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	$title = isset($_POST['new_title'])? $_POST['new_title'] : '';	$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;	die(get_sample_permalink_html($post_id, $title, $slug));break;case 'inline-save':	check_ajax_referer( 'inlineeditnonce', '_inline_edit' );	if ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )		exit;	if ( 'page' == $_POST['post_type'] ) {		if ( ! current_user_can( 'edit_page', $post_ID ) )			die( __('You are not allowed to edit this page.') );	} else {		if ( ! current_user_can( 'edit_post', $post_ID ) )			die( __('You are not allowed to edit this post.') );	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	if ( $last = wp_check_post_lock( $post_ID ) ) {		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		printf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),	esc_html( $last_user_name ) );		exit;	}	$data = &$_POST;	$post = get_post( $post_ID, ARRAY_A );	$post = add_magic_quotes($post); //since it is from db	$data['content'] = $post['post_content'];	$data['excerpt'] = $post['post_excerpt'];	// rename	$data['user_ID'] = $GLOBALS['user_ID'];	if ( isset($data['post_parent']) )		$data['parent_id'] = $data['post_parent'];	// status	if ( isset($data['keep_private']) && 'private' == $data['keep_private'] )		$data['post_status'] = 'private';	else		$data['post_status'] = $data['_status'];	if ( empty($data['comment_status']) )		$data['comment_status'] = 'closed';	if ( empty($data['ping_status']) )		$data['ping_status'] = 'closed';	// update the post	edit_post();	$post = array();	if ( 'page' == $_POST['post_type'] ) {		$post[] = get_post($_POST['post_ID']);		page_rows($post);	} elseif ( 'post' == $_POST['post_type'] || in_array($_POST['post_type'], get_post_types( array('public' => true) ) ) ) {		$mode = $_POST['post_view'];		$post[] = get_post($_POST['post_ID']);		post_rows($post);	}	exit;	break;case 'inline-save-tax':	check_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : false;	if ( ! $taxonomy )		die( __('Cheatin&#8217; uh?') );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		die( __('Cheatin&#8217; uh?') );	if ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )		die(-1);	switch ($_POST['tax_type']) {		case 'link-cat' :			$updated = wp_update_term($id, 'link_category', $_POST);			if ( $updated && !is_wp_error($updated) )				echo link_cat_row($updated['term_id']);			else				die( __('Category not updated.') );			break;		case 'tag' :			$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';			$tag = get_term( $id, $taxonomy );			$_POST['description'] = $tag->description;			$updated = wp_update_term($id, $taxonomy, $_POST);			if ( $updated && !is_wp_error($updated) ) {				$tag = get_term( $updated['term_id'], $taxonomy );				if ( !$tag || is_wp_error( $tag ) ) {					if ( is_wp_error($tag) && $tag->get_error_message() )						die( $tag->get_error_message() );					die( __('Item not updated.') );				}				set_current_screen( 'edit-' . $taxonomy );				echo _tag_row($tag, 0, $taxonomy);			} else {				if ( is_wp_error($updated) && $updated->get_error_message() )					die( $updated->get_error_message() );				die( __('Item not updated.') );			}			break;	}	exit;	break;case 'find_posts':	check_ajax_referer( 'find-posts' );	if ( empty($_POST['ps']) )		exit;	if ( !empty($_POST['post_type']) && in_array( $_POST['post_type'], get_post_types() ) )		$what = $_POST['post_type'];	else		$what = 'post';	$s = stripslashes($_POST['ps']);	preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $s, $matches);	$search_terms = array_map('_search_terms_tidy', $matches[0]);	$searchand = $search = '';	foreach ( (array) $search_terms as $term ) {		$term = addslashes_gpc($term);		$search .= "{$searchand}(($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%'))";		$searchand = ' AND ';	}	$term = $wpdb->escape($s);	if ( count($search_terms) > 1 && $search_terms[0] != $s )		$search .= " OR ($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%')";	$posts = $wpdb->get_results( "SELECT ID, post_title, post_status, post_date FROM $wpdb->posts WHERE post_type = '$what' AND post_status IN ('draft', 'publish') AND ($search) ORDER BY post_date_gmt DESC LIMIT 50" );	if ( ! $posts ) {		$posttype = get_post_type_object($what);		exit($posttype->labels->not_found);	}	$html = '<table class="widefat" cellspacing="0"><thead><tr><th class="found-radio"><br /></th><th>'.__('Title').'</th><th>'.__('Date').'</th><th>'.__('Status').'</th></tr></thead><tbody>';	foreach ( $posts as $post ) {		switch ( $post->post_status ) {			case 'publish' :			case 'private' :				$stat = __('Published');				break;			case 'future' :				$stat = __('Scheduled');				break;			case 'pending' :				$stat = __('Pending Review');				break;			case 'draft' :				$stat = __('Draft');				break;		}		if ( '0000-00-00 00:00:00' == $post->post_date ) {			$time = '';		} else {			/* translators: date format in table columns, see http://php.net/date */			$time = mysql2date(__('Y/m/d'), $post->post_date);		}		$html .= '<tr class="found-posts"><td class="found-radio"><input type="radio" id="found-'.$post->ID.'" name="found_post_id" value="' . esc_attr($post->ID) . '"></td>';		$html .= '<td><label for="found-'.$post->ID.'">'.esc_html( $post->post_title ).'</label></td><td>'.esc_html( $time ).'</td><td>'.esc_html( $stat ).'</td></tr>'."\n\n";	}	$html .= '</tbody></table>';	$x = new WP_Ajax_Response();	$x->add( array(		'what' => $what,		'data' => $html	));	$x->send();	break;case 'lj-importer' :	check_ajax_referer( 'lj-api-import' );	if ( !current_user_can( 'publish_posts' ) )		die('-1');	if ( empty( $_POST['step'] ) )		die( '-1' );	define('WP_IMPORTING', true);	include( ABSPATH . 'wp-admin/import/livejournal.php' );	$result = $lj_api_import->{ 'step' . ( (int) $_POST['step'] ) }();	if ( is_wp_error( $result ) )		echo $result->get_error_message();	die;	break;case 'widgets-order' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	// save widgets order for all sidebars	if ( is_array($_POST['sidebars']) ) {		$sidebars = array();		foreach ( $_POST['sidebars'] as $key => $val ) {			$sb = array();			if ( !empty($val) ) {				$val = explode(',', $val);				foreach ( $val as $k => $v ) {					if ( strpos($v, 'widget-') === false )						continue;					$sb[$k] = substr($v, strpos($v, '_') + 1);				}			}			$sidebars[$key] = $sb;		}		wp_set_sidebars_widgets($sidebars);		die('1');	}	die('-1');	break;case 'save-widget' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	do_action('load-widgets.php');	do_action('widgets.php');	do_action('sidebar_admin_setup');	$id_base = $_POST['id_base'];	$widget_id = $_POST['widget-id'];	$sidebar_id = $_POST['sidebar'];	$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;	$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;	$error = '<p>' . __('An error has occured. Please reload the page and try again.') . '</p>';	$sidebars = wp_get_sidebars_widgets();	$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();	// delete	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		if ( !isset($wp_registered_widgets[$widget_id]) )			die($error);		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {		if ( !$multi_number )			die($error);		$_POST['widget-' . $id_base] = array( $multi_number => array_shift($settings) );		$widget_id = $id_base . '-' . $multi_number;		$sidebar[] = $widget_id;	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name == $id_base ) {			if ( !is_callable( $control['callback'] ) )				continue;			ob_start();				call_user_func_array( $control['callback'], $control['params'] );			ob_end_clean();			break;		}	}	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		$sidebars[$sidebar_id] = $sidebar;		wp_set_sidebars_widgets($sidebars);		echo "deleted:$widget_id";		die();	}	if ( !empty($_POST['add_new']) )		die();	if ( $form = $wp_registered_widget_controls[$widget_id] )		call_user_func_array( $form['callback'], $form['params'] );	die();	break;case 'image-editor':	$attachment_id = intval($_POST['postid']);	if ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )		die('-1');	check_ajax_referer( "image_editor-$attachment_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	$msg = false;	switch ( $_POST['do'] ) {		case 'save' :			$msg = wp_save_image($attachment_id);			$msg = json_encode($msg);			die($msg);			break;		case 'scale' :			$msg = wp_save_image($attachment_id);			break;		case 'restore' :			$msg = wp_restore_image($attachment_id);			break;	}	wp_image_editor($attachment_id, $msg);	die();	break;case 'set-post-thumbnail':	$post_ID = intval( $_POST['post_id'] );	if ( !current_user_can( 'edit_post', $post_ID ) )		die( '-1' );	$thumbnail_id = intval( $_POST['thumbnail_id'] );	check_ajax_referer( "set_post_thumbnail-$post_ID" );	if ( $thumbnail_id == '-1' ) {		delete_post_meta( $post_ID, '_thumbnail_id' );		die( _wp_post_thumbnail_html() );	}	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'thumbnail' );		if ( !empty( $thumbnail_html ) ) {			update_post_meta( $post_ID, '_thumbnail_id', $thumbnail_id );			die( _wp_post_thumbnail_html( $thumbnail_id ) );		}	}	die( '0' );	break;default :	do_action( 'wp_ajax_' . $_POST['action'] );	die('0');	break;endswitch;?>
<?php/** * New User Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('create_users') )	wp_die(__('Cheatin&#8217; uh?'));if ( is_multisite() && !get_site_option( 'add_new_users' ) )	wp_die( __('Page disabled by the administrator') );/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( is_multisite() ) {	function admin_created_user_email( $text ) {		return sprintf( __( "Hi,You've been invited to join '%s' at%s as a %s.If you do not want to join this site please ignorethis email. This invitation will expire in a few days.Please click the following link to activate your user account:%%s" ), get_bloginfo('name'), site_url(), esc_html( $_REQUEST[ 'role' ] ) );	}	add_filter( 'wpmu_signup_user_notification_email', 'admin_created_user_email' );	function admin_created_user_subject( $text ) {		return "[" . get_bloginfo('name') . "] Your site invite";	}}if ( isset($_REQUEST['action']) && 'adduser' == $_REQUEST['action'] ) {	check_admin_referer('add-user');	if ( !is_multisite() ) {		$user_id = add_user();		if ( is_wp_error( $user_id ) ) {			$add_user_errors = $user_id;		} else {			if ( current_user_can('edit_users') ) {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				$redirect = 'users.php?usersearch='. urlencode($new_user_login) . '&update=add' . '#user-' . $user_id;			} else {				$redirect = add_query_arg( 'update', 'add', 'user-new.php' );			}			wp_redirect( $redirect );			die();		}	} else {		$user_login = preg_replace( "/\s+/", '', sanitize_user( $_REQUEST[ 'user_login' ], true ) );		$user_details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->users} WHERE user_login = %s AND user_email = %s", $user_login, $_REQUEST[ 'email' ] ) );		if ( $user_details ) {			// Adding an existing user to this blog			$new_user_email = esc_html(trim($_REQUEST['email']));			$redirect = 'user-new.php';			$username = $user_details->user_login;			$user_id = $user_details->ID;			if ( ( $username != null && !is_super_admin( $user_id ) ) && ( array_key_exists($blog_id, get_blogs_of_user($user_id)) ) ) {				$redirect = add_query_arg( array('update' => 'addexisting'), 'user-new.php' );			} else {				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_existing_user_to_blog( array( 'user_id' => $user_id, 'role' => $_REQUEST[ 'role' ] ) );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$newuser_key = substr( md5( $user_id ), 0, 5 );					add_option( 'new_user_' . $newuser_key, array( 'user_id' => $user_id, 'email' => $user_details->user_email, 'role' => $_REQUEST[ 'role' ] ) );					$message = __("Hi,\n\nYou have been invited to join '%s' at\n%s as a %s.\nPlease click the following link to confirm the invite:\n%s\n");					wp_mail( $new_user_email, sprintf( __( '[%s] Joining confirmation' ), get_option( 'blogname' ) ),  sprintf($message, get_option('blogname'), site_url(), $_REQUEST[ 'role' ], site_url("/newbloguser/$newuser_key/")));					$redirect = add_query_arg( array('update' => 'add'), 'user-new.php' );				}			}			wp_redirect( $redirect );			die();		} else {			// Adding a new user to this blog			$user_details = wpmu_validate_user_signup( $_REQUEST[ 'user_login' ], $_REQUEST[ 'email' ] );			unset( $user_details[ 'errors' ]->errors[ 'user_email_used' ] );			if ( is_wp_error( $user_details[ 'errors' ] ) && !empty( $user_details[ 'errors' ]->errors ) ) {				$add_user_errors = $user_details[ 'errors' ];			} else {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_filter( 'wpmu_signup_user_notification', '__return_false' ); // Disable confirmation email				}				wpmu_signup_user( $new_user_login, $_REQUEST[ 'email' ], array( 'add_to_blog' => $wpdb->blogid, 'new_role' => $_REQUEST[ 'role' ] ) );				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					$key = $wpdb->get_var( $wpdb->prepare( "SELECT activation_key FROM {$wpdb->signups} WHERE user_login = %s AND user_email = %s", $new_user_login, $_REQUEST[ 'email' ] ) );					wpmu_activate_signup( $key );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$redirect = add_query_arg( array('update' => 'newuserconfimation'), 'user-new.php' );				}				wp_redirect( $redirect );				die();			}		}	}}$title = __('Add New User');$parent_file = 'users.php';add_contextual_help($current_screen,    '<p>' . __('To add a new user to your site, fill in the form on this screen. If you&#8217;re not sure which role to assign, you can use the link below to review the different roles and their capabilities. Here is a basic overview of roles:') . '</p>' .    '<ul>' .        '<li>' . __('Administrators have access to all the administration features.') . '</li>' .        '<li>' . __('Editors can publish posts, manage posts as well as manage other people&#8217;s posts, etc.')  . '</li>' .        '<li>' . __('Authors can publish and manage their own posts.') . '</li>' .        '<li>' . __('Contributors can write and manage their posts but not publish posts or upload media files.') . '</li>' .        '<li>' . __('Subscribers can read comments/comment/receive newsletters, etc.') . '</li>' .    '</ul>' .    '<p>' . __('You must assign a password to the new user, but don&#8217;t worry; when they log in for the first time they will be prompted to change it. The username, however, cannot be changed.') . '</p>' .    '<p>' . __('New users will receive an email letting them know they&#8217;ve been added as a user for your site. By default, this email will also contain their password. Uncheck the box if you do not the password to be included in the welcome email.') . '</p>' .    '<p>' . __('Remember to click the Add User button at the bottom of this screen when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Add_New_SubPanel" target="_blank">Documentation on Adding New Users</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script('wp-ajax-response');wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');require_once ('admin-header.php');if ( isset($_GET['update']) ) {	$messages = array();	if ( is_multisite() ) {		switch ( $_GET['update'] ) {			case "newuserconfimation":				$messages[] = __('Invitation email sent to new user. A confirmation link must be clicked before their account is created.');				break;			case "add":				$messages[] = __('Invitation email sent to user. A confirmation link must be clicked for them to be added to your site.');				break;			case "addnoconfirmation":				$messages[] = __('User has been added to your site.');				break;			case "addexisting":				$messages[] = __('That user is already a member of this site.');				break;		}	} else {		if ( 'add' == $_GET['update'] )			$messages[] = __('User added.');	}}?><div class="wrap"><?php screen_icon(); ?><h2 id="add-new-user"><?php _e('Add New User') ?></h2><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty( $messages ) ) {	foreach ( $messages as $msg )		echo '<div id="message" class="updated"><p>' . $msg . '</p></div>';} ?><?php if ( isset($add_user_errors) && is_wp_error( $add_user_errors ) ) : ?>	<div class="error">		<?php			foreach ( $add_user_errors->get_error_messages() as $message )				echo "<p>$message</p>";		?>	</div><?php endif; ?><div id="ajax-response"></div><?phpif ( !is_multisite() ) {	if ( get_option('users_can_register') )		echo '<p>' . sprintf(__('Users can <a href="%1$s">register themselves</a> or you can manually create users here.'), site_url('wp-register.php')) . '</p>';	else		echo '<p>' . sprintf(__('Users cannot currently <a href="%1$s">register themselves</a>, but you can manually create users here.'), admin_url('options-general.php#users_can_register')) . '</p>';} else {	echo '<p>' . __( 'You can add new users to your site in two ways:' ) . '<ol><li> ' . __( 'Enter the username and email address of an existing user on this site.' ) . '</li><li> ' . __( 'Enter the username and the email address of a person who is not already a member of this site. Choose the username carefully, it cannot be changed.' ) . '</li></ol></p>';	echo '<p>' . __( 'That person will be sent an email asking them to click a link confirming the invite. New users will then be sent an email with a randomly generated password and a login link.' ) . '</p>';}?><form action="#add-new-user" method="post" name="adduser" id="adduser" class="add:users: validate"<?php do_action('user_new_form_tag');?>><?php wp_nonce_field('add-user') ?><?php//Load up the passed data, else set to a default.foreach ( array('user_login' => 'login', 'first_name' => 'firstname', 'last_name' => 'lastname',				'email' => 'email', 'url' => 'uri', 'role' => 'role') as $post_field => $var ) {	$var = "new_user_$var";	if ( ! isset($$var) )		$$var = isset($_POST[$post_field]) ? stripslashes($_POST[$post_field]) : '';}$new_user_send_password = !$_POST || isset($_POST['send_password']);?><table class="form-table">	<tr class="form-field form-required">		<th scope="row"><label for="user_login"><?php _e('Username'); ?> <span class="description"><?php _e('(required)'); ?></span></label>		<input name="action" type="hidden" id="action" value="adduser" /></th>		<td><input name="user_login" type="text" id="user_login" value="<?php echo esc_attr($new_user_login); ?>" aria-required="true" /></td>	</tr>	<tr class="form-field form-required">		<th scope="row"><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>		<td><input name="email" type="text" id="email" value="<?php echo esc_attr($new_user_email); ?>" /></td>	</tr><?php if ( !is_multisite() ) { ?>	<tr class="form-field">		<th scope="row"><label for="first_name"><?php _e('First Name') ?> </label></th>		<td><input name="first_name" type="text" id="first_name" value="<?php echo esc_attr($new_user_firstname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="last_name"><?php _e('Last Name') ?> </label></th>		<td><input name="last_name" type="text" id="last_name" value="<?php echo esc_attr($new_user_lastname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="url"><?php _e('Website') ?></label></th>		<td><input name="url" type="text" id="url" class="code" value="<?php echo esc_attr($new_user_uri); ?>" /></td>	</tr><?php if ( apply_filters('show_password_fields', true) ) : ?>	<tr class="form-field form-required">		<th scope="row"><label for="pass1"><?php _e('Password'); ?> <span class="description"><?php /* translators: password input field */_e('(twice, required)'); ?></span></label></th>		<td><input name="pass1" type="password" id="pass1" autocomplete="off" />		<br />		<input name="pass2" type="password" id="pass2" autocomplete="off" />		<br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>		</td>	</tr>	<tr>		<th scope="row"><label for="send_password"><?php _e('Send Password?') ?></label></th>		<td><label for="send_password"><input type="checkbox" name="send_password" id="send_password" <?php checked($new_user_send_password, true); ?> /> <?php _e('Send this password to the new user by email.'); ?></label></td>	</tr><?php endif; ?><?php } // !is_multisite ?>	<tr class="form-field">		<th scope="row"><label for="role"><?php _e('Role'); ?></label></th>		<td><select name="role" id="role">			<?php			if ( !$new_user_role )				$new_user_role = !empty($current_role) ? $current_role : get_option('default_role');			wp_dropdown_roles($new_user_role);			?>			</select>		</td>	</tr>	<?php if ( is_multisite() && is_super_admin() ) { ?>	<tr>		<th scope="row"><label for="noconfirmation"><?php _e('Skip Confirmation Email') ?></label></th>		<td><label for="noconfirmation"><input type="checkbox" name="noconfirmation" id="noconfirmation" value="1" /> <?php _e( 'Site administrators can add a user without sending the confirmation email.' ); ?></label></td>	</tr>	<?php } ?></table><p class="submit">	<input name="adduser" type="submit" id="addusersub" class="button-primary" value="<?php esc_attr_e('Add User') ?>" /></p></form></div><?phpinclude('./admin-footer.php');?>
<?php/** * Link Management Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');// Handle bulk deletesif ( isset($_GET['action']) && isset($_GET['linkcheck']) ) {	check_admin_referer('bulk-bookmarks');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( ! current_user_can('manage_links') )		wp_die( __('You do not have sufficient permissions to edit the links for this site.') );	if ( 'delete' == $doaction ) {		$bulklinks = (array) $_GET['linkcheck'];		foreach ( $bulklinks as $link_id ) {			$link_id = (int) $link_id;			wp_delete_link($link_id);		}		wp_safe_redirect( wp_get_referer() );		exit;	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( empty($cat_id) )	$cat_id = 'all';if ( empty($order_by) )	$order_by = 'order_name';$title = __('Links');$this_file = $parent_file = 'link-manager.php';add_contextual_help( $current_screen,	'<p>' . sprintf(__('You can add links here to be displayed on your site, usually using <a href="%s">Widgets</a>. By default, links to several sites in the WordPress community are included as examples.'), 'widgets.php') . '</p>' .    '<p>' . __('Links may be separated into categories; these are different than the categories used on your posts.') . '</p>' .    '<p>' . __('You can customize the display of this screen using the Screen Options tab and/or the dropdown filters above the links table.') . '</p>' .    '<p>' . __('If you delete a link, it will be removed permanently, as Links do not have a Trash function yet.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Edit_SubPanel" target="_blank">Link Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include_once ('./admin-header.php');if ( ! current_user_can('manage_links') )	wp_die(__("You do not have sufficient permissions to edit the links for this site."));switch ($order_by) {	case 'order_id' :		$sqlorderby = 'id';		break;	case 'order_url' :		$sqlorderby = 'url';		break;	case 'order_desc' :		$sqlorderby = 'description';		break;	case 'order_owner' :		$sqlorderby = 'owner';		break;	case 'order_rating' :		$sqlorderby = 'rating';		break;	case 'order_name' :	default :		$sqlorderby = 'name';		break;} ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="link-add.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'link'); ?></a> <?phpif ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?phpif ( isset($_GET['deleted']) ) {	echo '<div id="message" class="updated"><p>';	$deleted = (int) $_GET['deleted'];	printf(_n('%s link deleted.', '%s links deleted', $deleted), $deleted);	echo '</p></div>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-search-input"><?php _e( 'Search Links' ); ?>:</label>	<input type="text" id="link-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Links' ); ?>" class="button" /></p></form><br class="clear" /><form id="posts-filter" action="" method="get"><div class="tablenav"><?phpif ( 'all' == $cat_id )	$cat_id = '';$args = array( 'category' => $cat_id, 'hide_invisible' => 0, 'orderby' => $sqlorderby, 'hide_empty' => 0 );if ( ! empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$links = get_bookmarks( $args );if ( $links ) {?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php$categories = get_terms('link_category', array("hide_empty" => 1));$select_cat = "<select name=\"cat_id\">\n";$select_cat .= '<option value="all"'  . (($cat_id == 'all') ? " selected='selected'" : '') . '>' . __('View all Categories') . "</option>\n";foreach ((array) $categories as $cat)	$select_cat .= '<option value="' . esc_attr($cat->term_id) . '"' . (($cat->term_id == $cat_id) ? " selected='selected'" : '') . '>' . sanitize_term_field('name', $cat->name, $cat->term_id, 'link_category', 'display') . "</option>\n";$select_cat .= "</select>\n";$select_order = "<select name=\"order_by\">\n";$select_order .= '<option value="order_id"' . (($order_by == 'order_id') ? " selected='selected'" : '') . '>' .  __('Order by Link ID') . "</option>\n";$select_order .= '<option value="order_name"' . (($order_by == 'order_name') ? " selected='selected'" : '') . '>' .  __('Order by Name') . "</option>\n";$select_order .= '<option value="order_url"' . (($order_by == 'order_url') ? " selected='selected'" : '') . '>' .  __('Order by Address') . "</option>\n";$select_order .= '<option value="order_rating"' . (($order_by == 'order_rating') ? " selected='selected'" : '') . '>' .  __('Order by Rating') . "</option>\n";$select_order .= "</select>\n";echo $select_cat;echo $select_order;?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /></div><br class="clear" /></div><div class="clear"></div><?php	$link_columns = get_column_headers('link-manager');	$hidden = get_hidden_columns('link-manager');?><?php wp_nonce_field('bulk-bookmarks') ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('link-manager'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('link-manager', false); ?>	</tr>	</tfoot>	<tbody><?php	$alt = 0;	foreach ($links as $link) {		$link = sanitize_bookmark($link);		$link->link_name = esc_attr($link->link_name);		$link->link_category = wp_get_link_cats($link->link_id);		$short_url = str_replace('http://', '', $link->link_url);		$short_url = preg_replace('/^www\./i', '', $short_url);		if ('/' == substr($short_url, -1))			$short_url = substr($short_url, 0, -1);		if (strlen($short_url) > 35)			$short_url = substr($short_url, 0, 32).'...';		$visible = ($link->link_visible == 'Y') ? __('Yes') : __('No');		$rating  = $link->link_rating;		$style = ($alt % 2) ? '' : ' class="alternate"';		++ $alt;		$edit_link = get_edit_bookmark_link();		?><tr id="link-<?php echo $link->link_id; ?>" valign="middle" <?php echo $style; ?>><?php		foreach($link_columns as $column_name=>$column_display_name) {			$class = "class=\"column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch($column_name) {				case 'cb':					echo '<th scope="row" class="check-column"><input type="checkbox" name="linkcheck[]" value="'. esc_attr($link->link_id) .'" /></th>';					break;				case 'name':					echo "<td $attributes><strong><a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $link->link_name)) . "'>$link->link_name</a></strong><br />";					$actions = array();					$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';					$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id) . "' onclick=\"if ( confirm('" . esc_js(sprintf( __("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )) . "') ) { return true;}return false;\">" . __('Delete') . "</a>";					$action_count = count($actions);					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $linkaction ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						echo "<span class='$action'>$linkaction$sep</span>";					}					echo '</div>';					echo '</td>';					break;				case 'url':					echo "<td $attributes><a href='$link->link_url' title='".sprintf(__('Visit %s'), $link->link_name)."'>$short_url</a></td>";					break;				case 'categories':					?><td <?php echo $attributes ?>><?php					$cat_names = array();					foreach ($link->link_category as $category) {						$cat = get_term($category, 'link_category', OBJECT, 'display');						if ( is_wp_error( $cat ) )							echo $cat->get_error_message();						$cat_name = $cat->name;						if ( $cat_id != $category )							$cat_name = "<a href='link-manager.php?cat_id=$category'>$cat_name</a>";						$cat_names[] = $cat_name;					}					echo implode(', ', $cat_names);					?></td><?php					break;				case 'rel':					?><td <?php echo $attributes ?>><?php echo empty($link->link_rel) ? '<br />' : $link->link_rel; ?></td><?php					break;				case 'visible':					?><td <?php echo $attributes ?>><?php echo $visible; ?></td><?php					break;				case 'rating': 					?><td <?php echo $attributes ?>><?php echo $rating; ?></td><?php					break;				default:					?>					<td <?php echo $attributes ?>><?php do_action('manage_link_custom_column', $column_name, $link->link_id); ?></td>					<?php					break;			}		}		echo "\n    </tr>\n";	}?>	</tbody></table><div class="tablenav"><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><?php } else { ?><p><?php _e( 'No links found.' ) ?></p><?php } ?><br class="clear" /></div></form><div id="ajax-response"></div></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Upgrade API * * Most of the functions are pluggable and can be overwritten * * @package WordPress * @subpackage Administration *//** Include user install customize script. */if ( file_exists(WP_CONTENT_DIR . '/install.php') )	require (WP_CONTENT_DIR . '/install.php');/** WordPress Administration API */require_once(ABSPATH . 'wp-admin/includes/admin.php');/** WordPress Schema API */require_once(ABSPATH . 'wp-admin/includes/schema.php');if ( !function_exists('wp_install') ) :/** * Installs the blog * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $user_name User's username. * @param string $user_email User's email. * @param bool $public Whether blog is public. * @param null $deprecated Optional. Not used. * @param string $user_password Optional. User's chosen password. Will default to a random password. * @return array Array keys 'url', 'user_id', 'password', 'password_message'. */function wp_install( $blog_title, $user_name, $user_email, $public, $deprecated = '', $user_password = '' ) {	global $wp_rewrite;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.6' );	wp_check_mysql_version();	wp_cache_flush();	make_db_current_silent();	populate_options();	populate_roles();	update_option('blogname', $blog_title);	update_option('admin_email', $user_email);	update_option('blog_public', $public);	$guessurl = wp_guess_url();	update_option('siteurl', $guessurl);	// If not a public blog, don't ping.	if ( ! $public )		update_option('default_pingback_flag', 0);	// Create default user.  If the user already exists, the user tables are	// being shared among blogs.  Just set the role in that case.	$user_id = username_exists($user_name);	$user_password = trim($user_password);	$email_password = false;	if ( !$user_id && empty($user_password) ) {		$user_password = wp_generate_password();		$message = __('<strong><em>Note that password</em></strong> carefully! It is a <em>random</em> password that was generated just for you.');		$user_id = wp_create_user($user_name, $user_password, $user_email);		update_user_option($user_id, 'default_password_nag', true, true);		$email_password = true;	} else if ( !$user_id ) {		// Password has been provided		$message = '<em>'.__('Your chosen password.').'</em>';		$user_id = wp_create_user($user_name, $user_password, $user_email);	} else {		$message =  __('User already exists. Password inherited.');	}	$user = new WP_User($user_id);	$user->set_role('administrator');	wp_install_defaults($user_id);	$wp_rewrite->flush_rules();	wp_new_blog_notification($blog_title, $guessurl, $user_id, ($email_password ? $user_password : __('The password you chose during the install.') ) );	wp_cache_flush();	return array('url' => $guessurl, 'user_id' => $user_id, 'password' => $user_password, 'password_message' => $message);}endif;if ( !function_exists('wp_install_defaults') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param int $user_id User ID. */function wp_install_defaults($user_id) {	global $wpdb, $wp_rewrite, $current_site, $table_prefix;	// Default category	$cat_name = __('Uncategorized');	/* translators: Default category slug */	$cat_slug = sanitize_title(_x('Uncategorized', 'Default category slug'));	if ( global_terms_enabled() ) {		$cat_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $cat_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$cat_id = $wpdb->insert_id;		}		update_option('default_category', $cat_id);	} else {		$cat_id = 1;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $cat_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $cat_id, 'taxonomy' => 'category', 'description' => '', 'parent' => 0, 'count' => 1));	$cat_tt_id = $wpdb->insert_id;	// Default link category	$cat_name = __('Blogroll');	/* translators: Default link category slug */	$cat_slug = sanitize_title(_x('Blogroll', 'Default link category slug'));	if ( global_terms_enabled() ) {		$blogroll_id = $wpdb->get_var( $wpdb->prepare( "SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s", $cat_slug ) );		if ( $blogroll_id == null ) {			$wpdb->insert( $wpdb->sitecategories, array('cat_ID' => 0, 'cat_name' => $cat_name, 'category_nicename' => $cat_slug, 'last_updated' => current_time('mysql', true)) );			$blogroll_id = $wpdb->insert_id;		}		update_option('default_link_category', $blogroll_id);	} else {		$blogroll_id = 2;	}	$wpdb->insert( $wpdb->terms, array('term_id' => $blogroll_id, 'name' => $cat_name, 'slug' => $cat_slug, 'term_group' => 0) );	$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $blogroll_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 7));	$blogroll_tt_id = $wpdb->insert_id;	// Now drop in some default links	$default_links = array();	$default_links[] = array(	'link_url' => 'http://codex.wordpress.org/',								'link_name' => 'Documentation',								'link_rss' => '',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/development/',								'link_name' => 'WordPress Blog',								'link_rss' => 'http://wordpress.org/development/feed/',								'link_notes' => '');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/ideas/',								'link_name' => 'Suggest Ideas',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/support/',								'link_name' => 'Support Forum',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/plugins/',								'link_name' => 'Plugins',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://wordpress.org/extend/themes/',								'link_name' => 'Themes',								'link_rss' => '',								'link_notes' =>'');	$default_links[] = array(	'link_url' => 'http://planet.wordpress.org/',								'link_name' => 'WordPress Planet',								'link_rss' => '',								'link_notes' =>'');	foreach ( $default_links as $link ) {		$wpdb->insert( $wpdb->links, $link);		$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $blogroll_tt_id, 'object_id' => $wpdb->insert_id) );	}	// First post	$now = date('Y-m-d H:i:s');	$now_gmt = gmdate('Y-m-d H:i:s');	$first_post_guid = get_option('home') . '/?p=1';	if ( is_multisite() ) {		$first_post = get_site_option( 'first_post' );		if ( empty($first_post) )			$first_post = stripslashes( __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ) );		$first_post = str_replace( "SITE_URL", esc_url( network_home_url() ), $first_post );		$first_post = str_replace( "SITE_NAME", $current_site->site_name, $first_post );	} else {		$first_post = __('Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!');	}	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_post,								'post_excerpt' => '',								'post_title' => __('Hello world!'),								/* translators: Default post slug */								'post_name' => sanitize_title( _x('hello-world', 'Default post slug') ),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'comment_count' => 1,								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->term_relationships, array('term_taxonomy_id' => $cat_tt_id, 'object_id' => 1) );	// Default comment	$first_comment_author = __('Mr WordPress');	$first_comment_url = 'http://wordpress.org/';	$first_comment = __('Hi, this is a comment.<br />To delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.');	if ( is_multisite() ) {		$first_comment_author = get_site_option( 'first_comment_author', $first_comment_author );		$first_comment_url = get_site_option( 'first_comment_url', network_home_url() );		$first_comment = get_site_option( 'first_comment', $first_comment );	}	$wpdb->insert( $wpdb->comments, array(								'comment_post_ID' => 1,								'comment_author' => $first_comment_author,								'comment_author_email' => '',								'comment_author_url' => $first_comment_url,								'comment_date' => $now,								'comment_date_gmt' => $now_gmt,								'comment_content' => $first_comment								));	// First Page	$first_page = __('This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.');	if ( is_multisite() )		$first_page = get_site_option( 'first_page', $first_page );	$first_post_guid = get_option('home') . '/?page_id=2';	$wpdb->insert( $wpdb->posts, array(								'post_author' => $user_id,								'post_date' => $now,								'post_date_gmt' => $now_gmt,								'post_content' => $first_page,								'post_excerpt' => '',								'post_title' => __('About'),								/* translators: Default page slug */								'post_name' => _x('about', 'Default page slug'),								'post_modified' => $now,								'post_modified_gmt' => $now_gmt,								'guid' => $first_post_guid,								'post_type' => 'page',								'to_ping' => '',								'pinged' => '',								'post_content_filtered' => ''								));	$wpdb->insert( $wpdb->postmeta, array( 'post_id' => 2, 'meta_key' => '_wp_page_template', 'meta_value' => 'default' ) );	// Setup default widgets for default theme.	update_option( 'widget_search', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-posts', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_recent-comments', array ( 2 => array ( 'title' => '', 'number' => 5 ), '_multiwidget' => 1 ) );	update_option( 'widget_archives', array ( 2 => array ( 'title' => '', 'count' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_categories', array ( 2 => array ( 'title' => '', 'count' => 0, 'hierarchical' => 0, 'dropdown' => 0 ), '_multiwidget' => 1 ) );	update_option( 'widget_meta', array ( 2 => array ( 'title' => '' ), '_multiwidget' => 1 ) );	update_option( 'sidebars_widgets', array ( 'wp_inactive_widgets' => array ( ), 'primary-widget-area' => array ( 0 => 'search-2', 1 => 'recent-posts-2', 2 => 'recent-comments-2', 3 => 'archives-2', 4 => 'categories-2', 5 => 'meta-2', ), 'secondary-widget-area' => array ( ), 'first-footer-widget-area' => array ( ), 'second-footer-widget-area' => array ( ), 'third-footer-widget-area' => array ( ), 'fourth-footer-widget-area' => array ( ), 'array_version' => 3 ) );	if ( is_multisite() ) {		// Flush rules to pick up the new page.		$wp_rewrite->init();		$wp_rewrite->flush_rules();		$user = new WP_User($user_id);		$wpdb->update( $wpdb->options, array('option_value' => $user->user_email), array('option_name' => 'admin_email') );		// Remove all perms except for the login user.		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'user_level') );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id != %d AND meta_key = %s", $user_id, $table_prefix.'capabilities') );		// Delete any caps that snuck into the previously active blog. (Hardcoded to blog 1 for now.) TODO: Get previous_blog_id.		if ( !is_super_admin( $user_id ) && $user_id != 1 )			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $wpdb->base_prefix.'1_capabilities') );	}}endif;if ( !function_exists('wp_new_blog_notification') ) :/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $blog_title Blog title. * @param string $blog_url Blog url. * @param int $user_id User ID. * @param string $password User's Password. */function wp_new_blog_notification($blog_title, $blog_url, $user_id, $password) {	$user = new WP_User($user_id);	$email = $user->user_email;	$name = $user->user_login;	$message = sprintf(__("Your new WordPress site has been successfully set up at:%1\$sYou can log in to the administrator account with the following information:Username: %2\$sPassword: %3\$sWe hope you enjoy your new site. Thanks!--The WordPress Teamhttp://wordpress.org/"), $blog_url, $name, $password);	@wp_mail($email, __('New WordPress Site'), $message);}endif;if ( !function_exists('wp_upgrade') ) :/** * Run WordPress Upgrade functions. * * {@internal Missing Long Description}} * * @since unknown * * @return null */function wp_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	if ( ! is_blog_installed() )		return;	wp_check_mysql_version();	wp_cache_flush();	pre_schema_upgrade();	make_db_current_silent();	upgrade_all();	if ( is_multisite() && is_main_site() )		upgrade_network();	wp_cache_flush();	if ( is_multisite() ) {		if ( $wpdb->get_row( "SELECT blog_id FROM {$wpdb->blog_versions} WHERE blog_id = '{$wpdb->blogid}'" ) )			$wpdb->query( "UPDATE {$wpdb->blog_versions} SET db_version = '{$wp_db_version}' WHERE blog_id = '{$wpdb->blogid}'" );		else			$wpdb->query( "INSERT INTO {$wpdb->blog_versions} ( `blog_id` , `db_version` , `last_updated` ) VALUES ( '{$wpdb->blogid}', '{$wp_db_version}', NOW());" );	}}endif;/** * Functions to be called in install and upgrade scripts. * * {@internal Missing Long Description}} * * @since unknown */function upgrade_all() {	global $wp_current_db_version, $wp_db_version, $wp_rewrite;	$wp_current_db_version = __get_option('db_version');	// We are up-to-date.  Nothing to do.	if ( $wp_db_version == $wp_current_db_version )		return;	// If the version is not set in the DB, try to guess the version.	if ( empty($wp_current_db_version) ) {		$wp_current_db_version = 0;		// If the template option exists, we have 1.5.		$template = __get_option('template');		if ( !empty($template) )			$wp_current_db_version = 2541;	}	if ( $wp_current_db_version < 6039 )		upgrade_230_options_table();	populate_options();	if ( $wp_current_db_version < 2541 ) {		upgrade_100();		upgrade_101();		upgrade_110();		upgrade_130();	}	if ( $wp_current_db_version < 3308 )		upgrade_160();	if ( $wp_current_db_version < 4772 )		upgrade_210();	if ( $wp_current_db_version < 4351 )		upgrade_old_slugs();	if ( $wp_current_db_version < 5539 )		upgrade_230();	if ( $wp_current_db_version < 6124 )		upgrade_230_old_tables();	if ( $wp_current_db_version < 7499 )		upgrade_250();	if ( $wp_current_db_version < 7935 )		upgrade_252();	if ( $wp_current_db_version < 8201 )		upgrade_260();	if ( $wp_current_db_version < 8989 )		upgrade_270();	if ( $wp_current_db_version < 10360 )		upgrade_280();	if ( $wp_current_db_version < 11958 )		upgrade_290();	if ( $wp_current_db_version < 15260 )		upgrade_300();	maybe_disable_automattic_widgets();	update_option( 'db_version', $wp_db_version );	update_option( 'db_upgraded', true );}/** * Execute changes made in WordPress 1.0. * * @since 1.0.0 */function upgrade_100() {	global $wpdb;	// Get the title and ID of every post, post_name to check if it already has a value	$posts = $wpdb->get_results("SELECT ID, post_title, post_name FROM $wpdb->posts WHERE post_name = ''");	if ($posts) {		foreach($posts as $post) {			if ('' == $post->post_name) {				$newtitle = sanitize_title($post->post_title);				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_name = %s WHERE ID = %d", $newtitle, $post->ID) );			}		}	}	$categories = $wpdb->get_results("SELECT cat_ID, cat_name, category_nicename FROM $wpdb->categories");	foreach ($categories as $category) {		if ('' == $category->category_nicename) {			$newtitle = sanitize_title($category->cat_name);			$wpdb>update( $wpdb->categories, array('category_nicename' => $newtitle), array('cat_ID' => $category->cat_ID) );		}	}	$wpdb->query("UPDATE $wpdb->options SET option_value = REPLACE(option_value, 'wp-links/links-images/', 'wp-images/links/')	WHERE option_name LIKE 'links_rating_image%'	AND option_value LIKE 'wp-links/links-images/%'");	$done_ids = $wpdb->get_results("SELECT DISTINCT post_id FROM $wpdb->post2cat");	if ($done_ids) :		foreach ($done_ids as $done_id) :			$done_posts[] = $done_id->post_id;		endforeach;		$catwhere = ' AND ID NOT IN (' . implode(',', $done_posts) . ')';	else:		$catwhere = '';	endif;	$allposts = $wpdb->get_results("SELECT ID, post_category FROM $wpdb->posts WHERE post_category != '0' $catwhere");	if ($allposts) :		foreach ($allposts as $post) {			// Check to see if it's already been imported			$cat = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->post2cat WHERE post_id = %d AND category_id = %d", $post->ID, $post->post_category) );			if (!$cat && 0 != $post->post_category) { // If there's no result				$wpdb->insert( $wpdb->post2cat, array('post_id' => $post->ID, 'category_id' => $post->post_category) );			}		}	endif;}/** * Execute changes made in WordPress 1.0.1. * * @since 1.0.1 */function upgrade_101() {	global $wpdb;	// Clean up indices, add a few	add_clean_index($wpdb->posts, 'post_name');	add_clean_index($wpdb->posts, 'post_status');	add_clean_index($wpdb->categories, 'category_nicename');	add_clean_index($wpdb->comments, 'comment_approved');	add_clean_index($wpdb->comments, 'comment_post_ID');	add_clean_index($wpdb->links , 'link_category');	add_clean_index($wpdb->links , 'link_visible');}/** * Execute changes made in WordPress 1.2. * * @since 1.2.0 */function upgrade_110() {	global $wpdb;	// Set user_nicename.	$users = $wpdb->get_results("SELECT ID, user_nickname, user_nicename FROM $wpdb->users");	foreach ($users as $user) {		if ('' == $user->user_nicename) {			$newname = sanitize_title($user->user_nickname);			$wpdb->update( $wpdb->users, array('user_nicename' => $newname), array('ID' => $user->ID) );		}	}	$users = $wpdb->get_results("SELECT ID, user_pass from $wpdb->users");	foreach ($users as $row) {		if (!preg_match('/^[A-Fa-f0-9]{32}$/', $row->user_pass)) {			$wpdb->update( $wpdb->users, array('user_pass' => md5($row->user_pass)), array('ID' => $row->ID) );		}	}	// Get the GMT offset, we'll use that later on	$all_options = get_alloptions_110();	$time_difference = $all_options->time_difference;	$server_time = time()+date('Z');	$weblogger_time = $server_time + $time_difference*3600;	$gmt_time = time();	$diff_gmt_server = ($gmt_time - $server_time) / 3600;	$diff_weblogger_server = ($weblogger_time - $server_time) / 3600;	$diff_gmt_weblogger = $diff_gmt_server - $diff_weblogger_server;	$gmt_offset = -$diff_gmt_weblogger;	// Add a gmt_offset option, with value $gmt_offset	add_option('gmt_offset', $gmt_offset);	// Check if we already set the GMT fields (if we did, then	// MAX(post_date_gmt) can't be '0000-00-00 00:00:00'	// <michel_v> I just slapped myself silly for not thinking about it earlier	$got_gmt_fields = ! ($wpdb->get_var("SELECT MAX(post_date_gmt) FROM $wpdb->posts") == '0000-00-00 00:00:00');	if (!$got_gmt_fields) {		// Add or substract time to all dates, to get GMT dates		$add_hours = intval($diff_gmt_weblogger);		$add_minutes = intval(60 * ($diff_gmt_weblogger - $add_hours));		$wpdb->query("UPDATE $wpdb->posts SET post_date_gmt = DATE_ADD(post_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->posts SET post_modified = post_date");		$wpdb->query("UPDATE $wpdb->posts SET post_modified_gmt = DATE_ADD(post_modified, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE) WHERE post_modified != '0000-00-00 00:00:00'");		$wpdb->query("UPDATE $wpdb->comments SET comment_date_gmt = DATE_ADD(comment_date, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");		$wpdb->query("UPDATE $wpdb->users SET user_registered = DATE_ADD(user_registered, INTERVAL '$add_hours:$add_minutes' HOUR_MINUTE)");	}}/** * Execute changes made in WordPress 1.5. * * @since 1.5.0 */function upgrade_130() {	global $wpdb;	// Remove extraneous backslashes.	$posts = $wpdb->get_results("SELECT ID, post_title, post_content, post_excerpt, guid, post_date, post_name, post_status, post_author FROM $wpdb->posts");	if ($posts) {		foreach($posts as $post) {			$post_content = addslashes(deslash($post->post_content));			$post_title = addslashes(deslash($post->post_title));			$post_excerpt = addslashes(deslash($post->post_excerpt));			if ( empty($post->guid) )				$guid = get_permalink($post->ID);			else				$guid = $post->guid;			$wpdb->update( $wpdb->posts, compact('post_title', 'post_content', 'post_excerpt', 'guid'), array('ID' => $post->ID) );		}	}	// Remove extraneous backslashes.	$comments = $wpdb->get_results("SELECT comment_ID, comment_author, comment_content FROM $wpdb->comments");	if ($comments) {		foreach($comments as $comment) {			$comment_content = deslash($comment->comment_content);			$comment_author = deslash($comment->comment_author);			$wpdb->update($wpdb->comments, compact('comment_content', 'comment_author'), array('comment_ID' => $comment->comment_ID) );		}	}	// Remove extraneous backslashes.	$links = $wpdb->get_results("SELECT link_id, link_name, link_description FROM $wpdb->links");	if ($links) {		foreach($links as $link) {			$link_name = deslash($link->link_name);			$link_description = deslash($link->link_description);			$wpdb->update( $wpdb->links, compact('link_name', 'link_description'), array('link_id' => $link->link_id) );		}	}	$active_plugins = __get_option('active_plugins');	// If plugins are not stored in an array, they're stored in the old	// newline separated format.  Convert to new format.	if ( !is_array( $active_plugins ) ) {		$active_plugins = explode("\n", trim($active_plugins));		update_option('active_plugins', $active_plugins);	}	// Obsolete tables	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optionvalues');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiontypes');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroups');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'optiongroup_options');	// Update comments table to use comment_type	$wpdb->query("UPDATE $wpdb->comments SET comment_type='trackback', comment_content = REPLACE(comment_content, '<trackback />', '') WHERE comment_content LIKE '<trackback />%'");	$wpdb->query("UPDATE $wpdb->comments SET comment_type='pingback', comment_content = REPLACE(comment_content, '<pingback />', '') WHERE comment_content LIKE '<pingback />%'");	// Some versions have multiple duplicate option_name rows with the same values	$options = $wpdb->get_results("SELECT option_name, COUNT(option_name) AS dupes FROM `$wpdb->options` GROUP BY option_name");	foreach ( $options as $option ) {		if ( 1 != $option->dupes ) { // Could this be done in the query?			$limit = $option->dupes - 1;			$dupe_ids = $wpdb->get_col( $wpdb->prepare("SELECT option_id FROM $wpdb->options WHERE option_name = %s LIMIT %d", $option->option_name, $limit) );			if ( $dupe_ids ) {				$dupe_ids = join($dupe_ids, ',');				$wpdb->query("DELETE FROM $wpdb->options WHERE option_id IN ($dupe_ids)");			}		}	}	make_site_theme();}/** * Execute changes made in WordPress 2.0. * * @since 2.0.0 */function upgrade_160() {	global $wpdb, $wp_current_db_version;	populate_roles_160();	$users = $wpdb->get_results("SELECT * FROM $wpdb->users");	foreach ( $users as $user ) :		if ( !empty( $user->user_firstname ) )			update_user_meta( $user->ID, 'first_name', $wpdb->escape($user->user_firstname) );		if ( !empty( $user->user_lastname ) )			update_user_meta( $user->ID, 'last_name', $wpdb->escape($user->user_lastname) );		if ( !empty( $user->user_nickname ) )			update_user_meta( $user->ID, 'nickname', $wpdb->escape($user->user_nickname) );		if ( !empty( $user->user_level ) )			update_user_meta( $user->ID, $wpdb->prefix . 'user_level', $user->user_level );		if ( !empty( $user->user_icq ) )			update_user_meta( $user->ID, 'icq', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_aim ) )			update_user_meta( $user->ID, 'aim', $wpdb->escape($user->user_aim) );		if ( !empty( $user->user_msn ) )			update_user_meta( $user->ID, 'msn', $wpdb->escape($user->user_msn) );		if ( !empty( $user->user_yim ) )			update_user_meta( $user->ID, 'yim', $wpdb->escape($user->user_icq) );		if ( !empty( $user->user_description ) )			update_user_meta( $user->ID, 'description', $wpdb->escape($user->user_description) );		if ( isset( $user->user_idmode ) ):			$idmode = $user->user_idmode;			if ($idmode == 'nickname') $id = $user->user_nickname;			if ($idmode == 'login') $id = $user->user_login;			if ($idmode == 'firstname') $id = $user->user_firstname;			if ($idmode == 'lastname') $id = $user->user_lastname;			if ($idmode == 'namefl') $id = $user->user_firstname.' '.$user->user_lastname;			if ($idmode == 'namelf') $id = $user->user_lastname.' '.$user->user_firstname;			if (!$idmode) $id = $user->user_nickname;			$wpdb->update( $wpdb->users, array('display_name' => $id), array('ID' => $user->ID) );		endif;		// FIXME: RESET_CAPS is temporary code to reset roles and caps if flag is set.		$caps = get_user_meta( $user->ID, $wpdb->prefix . 'capabilities');		if ( empty($caps) || defined('RESET_CAPS') ) {			$level = get_user_meta($user->ID, $wpdb->prefix . 'user_level', true);			$role = translate_level_to_role($level);			update_user_meta( $user->ID, $wpdb->prefix . 'capabilities', array($role => true) );		}	endforeach;	$old_user_fields = array( 'user_firstname', 'user_lastname', 'user_icq', 'user_aim', 'user_msn', 'user_yim', 'user_idmode', 'user_ip', 'user_domain', 'user_browser', 'user_description', 'user_nickname', 'user_level' );	$wpdb->hide_errors();	foreach ( $old_user_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->users DROP $old");	$wpdb->show_errors();	// populate comment_count field of posts table	$comments = $wpdb->get_results( "SELECT comment_post_ID, COUNT(*) as c FROM $wpdb->comments WHERE comment_approved = '1' GROUP BY comment_post_ID" );	if ( is_array( $comments ) )		foreach ($comments as $comment)			$wpdb->update( $wpdb->posts, array('comment_count' => $comment->c), array('ID' => $comment->comment_post_ID) );	// Some alpha versions used a post status of object instead of attachment and put	// the mime type in post_type instead of post_mime_type.	if ( $wp_current_db_version > 2541 && $wp_current_db_version <= 3091 ) {		$objects = $wpdb->get_results("SELECT ID, post_type FROM $wpdb->posts WHERE post_status = 'object'");		foreach ($objects as $object) {			$wpdb->update( $wpdb->posts, array(	'post_status' => 'attachment',												'post_mime_type' => $object->post_type,												'post_type' => ''),										 array( 'ID' => $object->ID ) );			$meta = get_post_meta($object->ID, 'imagedata', true);			if ( ! empty($meta['file']) )				update_attached_file( $object->ID, $meta['file'] );		}	}}/** * Execute changes made in WordPress 2.1. * * @since 2.1.0 */function upgrade_210() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 3506 ) {		// Update status and type.		$posts = $wpdb->get_results("SELECT ID, post_status FROM $wpdb->posts");		if ( ! empty($posts) ) foreach ($posts as $post) {			$status = $post->post_status;			$type = 'post';			if ( 'static' == $status ) {				$status = 'publish';				$type = 'page';			} else if ( 'attachment' == $status ) {				$status = 'inherit';				$type = 'attachment';			}			$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_status = %s, post_type = %s WHERE ID = %d", $status, $type, $post->ID) );		}	}	if ( $wp_current_db_version < 3845 ) {		populate_roles_210();	}	if ( $wp_current_db_version < 3531 ) {		// Give future posts a post_status of future.		$now = gmdate('Y-m-d H:i:59');		$wpdb->query ("UPDATE $wpdb->posts SET post_status = 'future' WHERE post_status = 'publish' AND post_date_gmt > '$now'");		$posts = $wpdb->get_results("SELECT ID, post_date FROM $wpdb->posts WHERE post_status ='future'");		if ( !empty($posts) )			foreach ( $posts as $post )				wp_schedule_single_event(mysql2date('U', $post->post_date, false), 'publish_future_post', array($post->ID));	}}/** * Execute changes made in WordPress 2.3. * * @since 2.3.0 */function upgrade_230() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 5200 ) {		populate_roles_230();	}	// Convert categories to terms.	$tt_ids = array();	$have_tags = false;	$categories = $wpdb->get_results("SELECT * FROM $wpdb->categories ORDER BY cat_ID");	foreach ($categories as $category) {		$term_id = (int) $category->cat_ID;		$name = $category->cat_name;		$description = $category->category_description;		$slug = $category->category_nicename;		$parent = $category->category_parent;		$term_group = 0;		// Associate terms with the same slug in a term group and make slugs unique.		if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {			$term_group = $exists[0]->term_group;			$id = $exists[0]->term_id;			$num = 2;			do {				$alt_slug = $slug . "-$num";				$num++;				$slug_check = $wpdb->get_var( $wpdb->prepare("SELECT slug FROM $wpdb->terms WHERE slug = %s", $alt_slug) );			} while ( $slug_check );			$slug = $alt_slug;			if ( empty( $term_group ) ) {				$term_group = $wpdb->get_var("SELECT MAX(term_group) FROM $wpdb->terms GROUP BY term_group") + 1;				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->terms SET term_group = %d WHERE term_id = %d", $term_group, $id) );			}		}		$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->terms (term_id, name, slug, term_group) VALUES		(%d, %s, %s, %d)", $term_id, $name, $slug, $term_group) );		$count = 0;		if ( !empty($category->category_count) ) {			$count = (int) $category->category_count;			$taxonomy = 'category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->link_count) ) {			$count = (int) $category->link_count;			$taxonomy = 'link_category';			$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->term_taxonomy (term_id, taxonomy, description, parent, count) VALUES ( %d, %s, %s, %d, %d)", $term_id, $taxonomy, $description, $parent, $count) );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( !empty($category->tag_count) ) {			$have_tags = true;			$count = (int) $category->tag_count;			$taxonomy = 'post_tag';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}		if ( empty($count) ) {			$count = 0;			$taxonomy = 'category';			$wpdb->insert( $wpdb->term_taxonomy, compact('term_id', 'taxonomy', 'description', 'parent', 'count') );			$tt_ids[$term_id][$taxonomy] = (int) $wpdb->insert_id;		}	}	$select = 'post_id, category_id';	if ( $have_tags )		$select .= ', rel_type';	$posts = $wpdb->get_results("SELECT $select FROM $wpdb->post2cat GROUP BY post_id, category_id");	foreach ( $posts as $post ) {		$post_id = (int) $post->post_id;		$term_id = (int) $post->category_id;		$taxonomy = 'category';		if ( !empty($post->rel_type) && 'tag' == $post->rel_type)			$taxonomy = 'tag';		$tt_id = $tt_ids[$term_id][$taxonomy];		if ( empty($tt_id) )			continue;		$wpdb->insert( $wpdb->term_relationships, array('object_id' => $post_id, 'term_taxonomy_id' => $tt_id) );	}	// < 3570 we used linkcategories.  >= 3570 we used categories and link2cat.	if ( $wp_current_db_version < 3570 ) {		// Create link_category terms for link categories.  Create a map of link cat IDs		// to link_category terms.		$link_cat_id_map = array();		$default_link_cat = 0;		$tt_ids = array();		$link_cats = $wpdb->get_results("SELECT cat_id, cat_name FROM " . $wpdb->prefix . 'linkcategories');		foreach ( $link_cats as $category) {			$cat_id = (int) $category->cat_id;			$term_id = 0;			$name = $wpdb->escape($category->cat_name);			$slug = sanitize_title($name);			$term_group = 0;			// Associate terms with the same slug in a term group and make slugs unique.			if ( $exists = $wpdb->get_results( $wpdb->prepare("SELECT term_id, term_group FROM $wpdb->terms WHERE slug = %s", $slug) ) ) {				$term_group = $exists[0]->term_group;				$term_id = $exists[0]->term_id;			}			if ( empty($term_id) ) {				$wpdb->insert( $wpdb->terms, compact('name', 'slug', 'term_group') );				$term_id = (int) $wpdb->insert_id;			}			$link_cat_id_map[$cat_id] = $term_id;			$default_link_cat = $term_id;			$wpdb->insert( $wpdb->term_taxonomy, array('term_id' => $term_id, 'taxonomy' => 'link_category', 'description' => '', 'parent' => 0, 'count' => 0) );			$tt_ids[$term_id] = (int) $wpdb->insert_id;		}		// Associate links to cats.		$links = $wpdb->get_results("SELECT link_id, link_category FROM $wpdb->links");		if ( !empty($links) ) foreach ( $links as $link ) {			if ( 0 == $link->link_category )				continue;			if ( ! isset($link_cat_id_map[$link->link_category]) )				continue;			$term_id = $link_cat_id_map[$link->link_category];			$tt_id = $tt_ids[$term_id];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link->link_id, 'term_taxonomy_id' => $tt_id) );		}		// Set default to the last category we grabbed during the upgrade loop.		update_option('default_link_category', $default_link_cat);	} else {		$links = $wpdb->get_results("SELECT link_id, category_id FROM $wpdb->link2cat GROUP BY link_id, category_id");		foreach ( $links as $link ) {			$link_id = (int) $link->link_id;			$term_id = (int) $link->category_id;			$taxonomy = 'link_category';			$tt_id = $tt_ids[$term_id][$taxonomy];			if ( empty($tt_id) )				continue;			$wpdb->insert( $wpdb->term_relationships, array('object_id' => $link_id, 'term_taxonomy_id' => $tt_id) );		}	}	if ( $wp_current_db_version < 4772 ) {		// Obsolete linkcategories table		$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'linkcategories');	}	// Recalculate all counts	$terms = $wpdb->get_results("SELECT term_taxonomy_id, taxonomy FROM $wpdb->term_taxonomy");	foreach ( (array) $terms as $term ) {		if ( ('post_tag' == $term->taxonomy) || ('category' == $term->taxonomy) )			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships, $wpdb->posts WHERE $wpdb->posts.ID = $wpdb->term_relationships.object_id AND post_status = 'publish' AND post_type = 'post' AND term_taxonomy_id = %d", $term->term_taxonomy_id) );		else			$count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d", $term->term_taxonomy_id) );		$wpdb->update( $wpdb->term_taxonomy, array('count' => $count), array('term_taxonomy_id' => $term->term_taxonomy_id) );	}}/** * Remove old options from the database. * * @since 2.3.0 */function upgrade_230_options_table() {	global $wpdb;	$old_options_fields = array( 'option_can_override', 'option_type', 'option_width', 'option_height', 'option_description', 'option_admin_level' );	$wpdb->hide_errors();	foreach ( $old_options_fields as $old )		$wpdb->query("ALTER TABLE $wpdb->options DROP $old");	$wpdb->show_errors();}/** * Remove old categories, link2cat, and post2cat database tables. * * @since 2.3.0 */function upgrade_230_old_tables() {	global $wpdb;	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'categories');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'link2cat');	$wpdb->query('DROP TABLE IF EXISTS ' . $wpdb->prefix . 'post2cat');}/** * Upgrade old slugs made in version 2.2. * * @since 2.2.0 */function upgrade_old_slugs() {	// upgrade people who were using the Redirect Old Slugs plugin	global $wpdb;	$wpdb->query("UPDATE $wpdb->postmeta SET meta_key = '_wp_old_slug' WHERE meta_key = 'old_slug'");}/** * Execute changes made in WordPress 2.5.0. * * @since 2.5.0 */function upgrade_250() {	global $wp_current_db_version;	if ( $wp_current_db_version < 6689 ) {		populate_roles_250();	}}/** * Execute changes made in WordPress 2.5.2. * * @since 2.5.2 */function upgrade_252() {	global $wpdb;	$wpdb->query("UPDATE $wpdb->users SET user_activation_key = ''");}/** * Execute changes made in WordPress 2.6. * * @since 2.6.0 */function upgrade_260() {	global $wp_current_db_version;	if ( $wp_current_db_version < 8000 )		populate_roles_260();	if ( $wp_current_db_version < 8201 ) {		update_option('enable_app', 1);		update_option('enable_xmlrpc', 1);	}}/** * Execute changes made in WordPress 2.7. * * @since 2.7.0 */function upgrade_270() {	global $wpdb, $wp_current_db_version;	if ( $wp_current_db_version < 8980 )		populate_roles_270();	// Update post_date for unpublished posts with empty timestamp	if ( $wp_current_db_version < 8921 )		$wpdb->query( "UPDATE $wpdb->posts SET post_date = post_modified WHERE post_date = '0000-00-00 00:00:00'" );}/** * Execute changes made in WordPress 2.8. * * @since 2.8.0 */function upgrade_280() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 10360 )		populate_roles_280();	if ( is_multisite() ) {		$start = 0;		while( $rows = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options ORDER BY option_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->option_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->option_value ) {					update_option( $row->option_name, $value );				}			}			$start += 20;		}		refresh_blog_details( $wpdb->blogid );	}}/** * Execute changes made in WordPress 2.9. * * @since 2.9.0 */function upgrade_290() {	global $wp_current_db_version;	if ( $wp_current_db_version < 11958 ) {		// Previously, setting depth to 1 would redundantly disable threading, but now 2 is the minimum depth to avoid confusion		if ( get_option( 'thread_comments_depth' ) == '1' ) {			update_option( 'thread_comments_depth', 2 );			update_option( 'thread_comments', 0 );		}	}}/** * Execute changes made in WordPress 3.0. * * @since 3.0.0 */function upgrade_300() {	global $wp_current_db_version, $wpdb;	if ( $wp_current_db_version < 15093 )		populate_roles_300();	if ( $wp_current_db_version < 14139 && is_multisite() && is_main_site() && ! defined( 'MULTISITE' ) && get_site_option( 'siteurl' ) === false )		add_site_option( 'siteurl', '' );	// 3.0-alpha nav menu postmeta changes. can be removed before release. // r13802	if ( $wp_current_db_version >= 13226 && $wp_current_db_version < 13974 )		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_key IN( 'menu_type', 'object_id', 'menu_new_window', 'menu_link', '_menu_item_append', 'menu_item_append', 'menu_item_type', 'menu_item_object_id', 'menu_item_target', 'menu_item_classes', 'menu_item_xfn', 'menu_item_url' )" );	// 3.0-beta1 remove_user primitive->meta cap. can be removed before release. r13956	if ( $wp_current_db_version >= 12751 && $wp_current_db_version < 13974 ) {		$role =& get_role( 'administrator' );		if ( ! empty( $role ) )			$role->remove_cap( 'remove_user' );	}	// 3.0-beta1 nav menu postmeta changes. can be removed before release. r13974	if ( $wp_current_db_version >= 13802 && $wp_current_db_version < 13974 )		$wpdb->update( $wpdb->postmeta, array( 'meta_value' => '' ), array( 'meta_key' => '_menu_item_target', 'meta_value' => '_self' ) );	// 3.0 screen options key name changes.	if ( !is_multisite() || is_main_site() ) {		$prefix = like_escape($wpdb->base_prefix);		$wpdb->query( "DELETE FROM $wpdb->usermeta WHERE meta_key LIKE '{$prefix}%meta-box-hidden%' OR meta_key LIKE '{$prefix}%closedpostboxes%' OR meta_key LIKE '{$prefix}%manage-%-columns-hidden%' OR meta_key LIKE '{$prefix}%meta-box-order%' OR meta_key LIKE '{$prefix}%metaboxorder%' OR meta_key LIKE '{$prefix}%screen_layout%'					 OR meta_key = 'manageedittagscolumnshidden' OR meta_key='managecategoriescolumnshidden' OR meta_key = 'manageedit-tagscolumnshidden' OR meta_key = 'manageeditcolumnshidden' OR meta_key = 'categories_per_page' OR meta_key = 'edit_tags_per_page'" );	}}/** * Execute network level changes * * @since 3.0.0 */function upgrade_network() {	global $wp_current_db_version, $wpdb;	// 2.8	if ( $wp_current_db_version < 11549 ) {		$wpmu_sitewide_plugins = get_site_option( 'wpmu_sitewide_plugins' );		$active_sitewide_plugins = get_site_option( 'active_sitewide_plugins' );		if ( $wpmu_sitewide_plugins ) {			if ( !$active_sitewide_plugins )				$sitewide_plugins = (array) $wpmu_sitewide_plugins;			else				$sitewide_plugins = array_merge( (array) $active_sitewide_plugins, (array) $wpmu_sitewide_plugins );			update_site_option( 'active_sitewide_plugins', $sitewide_plugins );		}		delete_site_option( 'wpmu_sitewide_plugins' );		delete_site_option( 'deactivated_sitewide_plugins' );		$start = 0;		while( $rows = $wpdb->get_results( "SELECT meta_key, meta_value FROM {$wpdb->sitemeta} ORDER BY meta_id LIMIT $start, 20" ) ) {			foreach( $rows as $row ) {				$value = $row->meta_value;				if ( !@unserialize( $value ) )					$value = stripslashes( $value );				if ( $value !== $row->meta_value ) {					update_site_option( $row->meta_key, $value );				}			}			$start += 20;		}	}	// 3.0	if ( $wp_current_db_version < 13576 )		update_site_option( 'global_terms_enabled', '1' );}// The functions we use to actually do stuff// General/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table_name Database table name to create. * @param string $create_ddl SQL statement to create table. * @return bool If table already exists or was created by function. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	if ( $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name )		return true;	return false;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Index name to drop. * @return bool True, when finished. */function drop_index($table, $index) {	global $wpdb;	$wpdb->hide_errors();	$wpdb->query("ALTER TABLE `$table` DROP INDEX `$index`");	// Now we need to take out all the extra ones we may have created	for ($i = 0; $i < 25; $i++) {		$wpdb->query("ALTER TABLE `$table` DROP INDEX `{$index}_$i`");	}	$wpdb->show_errors();	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $table Database table name. * @param string $index Database table index column. * @return bool True, when done with execution. */function add_clean_index($table, $index) {	global $wpdb;	drop_index($table, $index);	$wpdb->query("ALTER TABLE `$table` ADD INDEX ( `$index` )");	return true;}/** ** maybe_add_column() ** Add column to db table if it doesn't exist. ** Returns:  true if already exists or on successful completion **           false on error */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$q = $wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name", 0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}/** * Retrieve all options as it was for 1.2. * * @since 1.2.0 * * @return array List of options. */function get_alloptions_110() {	global $wpdb;	if ($options = $wpdb->get_results("SELECT option_name, option_value FROM $wpdb->options")) {		foreach ($options as $option) {			// "When trying to design a foolproof system,			//  never underestimate the ingenuity of the fools :)" -- Dougal			if ('siteurl' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('home' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			if ('category_base' == $option->option_name) $option->option_value = preg_replace('|/+$|', '', $option->option_value);			$all_options->{$option->option_name} = stripslashes($option->option_value);		}	}	return $all_options;}/** * Version of get_option that is private to install/upgrade. * * @since unknown * @access private * * @param string $setting Option name. * @return mixed */function __get_option($setting) {	global $wpdb;	if ( $setting == 'home' && defined( 'WP_HOME' ) ) {		return preg_replace( '|/+$|', '', WP_HOME );	}	if ( $setting == 'siteurl' && defined( 'WP_SITEURL' ) ) {		return preg_replace( '|/+$|', '', WP_SITEURL );	}	$option = $wpdb->get_var( $wpdb->prepare("SELECT option_value FROM $wpdb->options WHERE option_name = %s", $setting) );	if ( 'home' == $setting && '' == $option )		return __get_option('siteurl');	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$option = preg_replace('|/+$|', '', $option);	@ $kellogs = unserialize($option);	if ($kellogs !== FALSE)		return $kellogs;	else		return $option;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param string $content * @return string */function deslash($content) {	// Note: \\\ inside a regex denotes a single backslash.	// Replace one or more backslashes followed by a single quote with	// a single quote.	$content = preg_replace("/\\\+'/", "'", $content);	// Replace one or more backslashes followed by a double quote with	// a double quote.	$content = preg_replace('/\\\+"/', '"', $content);	// Replace one or more backslashes with one backslash.	$content = preg_replace("/\\\+/", "\\", $content);	return $content;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $queries * @param unknown_type $execute * @return unknown */function dbDelta($queries, $execute = true) {	global $wpdb;	// Separate individual queries into an array	if ( !is_array($queries) ) {		$queries = explode( ';', $queries );		if ('' == $queries[count($queries) - 1]) array_pop($queries);	}	$cqueries = array(); // Creation Queries	$iqueries = array(); // Insertion Queries	$for_update = array();	// Create a tablename index for an array ($cqueries) of queries	foreach($queries as $qry) {		if (preg_match("|CREATE TABLE ([^ ]*)|", $qry, $matches)) {			$cqueries[trim( strtolower($matches[1]), '`' )] = $qry;			$for_update[$matches[1]] = 'Created table '.$matches[1];		} else if (preg_match("|CREATE DATABASE ([^ ]*)|", $qry, $matches)) {			array_unshift($cqueries, $qry);		} else if (preg_match("|INSERT INTO ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else if (preg_match("|UPDATE ([^ ]*)|", $qry, $matches)) {			$iqueries[] = $qry;		} else {			// Unrecognized query type		}	}	// Check to see which tables and fields exist	if ($tables = $wpdb->get_col('SHOW TABLES;')) {		// For every table in the database		foreach ($tables as $table) {			// If a table query exists for the database table...			if ( array_key_exists(strtolower($table), $cqueries) ) {				// Clear the field and index arrays				$cfields = $indices = array();				// Get all of the field names in the query from between the parens				preg_match("|\((.*)\)|ms", $cqueries[strtolower($table)], $match2);				$qryline = trim($match2[1]);				// Separate field lines into an array				$flds = explode("\n", $qryline);				//echo "<hr/><pre>\n".print_r(strtolower($table), true).":\n".print_r($cqueries, true)."</pre><hr/>";				// For every field line specified in the query				foreach ($flds as $fld) {					// Extract the field name					preg_match("|^([^ ]*)|", trim($fld), $fvals);					$fieldname = trim( $fvals[1], '`' );					// Verify the found field name					$validfield = true;					switch (strtolower($fieldname)) {					case '':					case 'primary':					case 'index':					case 'fulltext':					case 'unique':					case 'key':						$validfield = false;						$indices[] = trim(trim($fld), ", \n");						break;					}					$fld = trim($fld);					// If it's a valid field, add it to the field array					if ($validfield) {						$cfields[strtolower($fieldname)] = trim($fld, ", \n");					}				}				// Fetch the table column structure from the database				$tablefields = $wpdb->get_results("DESCRIBE {$table};");				// For every field in the table				foreach ($tablefields as $tablefield) {					// If the table field exists in the field array...					if (array_key_exists(strtolower($tablefield->Field), $cfields)) {						// Get the field type from the query						preg_match("|".$tablefield->Field." ([^ ]*( unsigned)?)|i", $cfields[strtolower($tablefield->Field)], $matches);						$fieldtype = $matches[1];						// Is actual field type different from the field type in query?						if ($tablefield->Type != $fieldtype) {							// Add a query to change the column type							$cqueries[] = "ALTER TABLE {$table} CHANGE COLUMN {$tablefield->Field} " . $cfields[strtolower($tablefield->Field)];							$for_update[$table.'.'.$tablefield->Field] = "Changed type of {$table}.{$tablefield->Field} from {$tablefield->Type} to {$fieldtype}";						}						// Get the default value from the array							//echo "{$cfields[strtolower($tablefield->Field)]}<br>";						if (preg_match("| DEFAULT '(.*)'|i", $cfields[strtolower($tablefield->Field)], $matches)) {							$default_value = $matches[1];							if ($tablefield->Default != $default_value) {								// Add a query to change the column's default value								$cqueries[] = "ALTER TABLE {$table} ALTER COLUMN {$tablefield->Field} SET DEFAULT '{$default_value}'";								$for_update[$table.'.'.$tablefield->Field] = "Changed default value of {$table}.{$tablefield->Field} from {$tablefield->Default} to {$default_value}";							}						}						// Remove the field from the array (so it's not added)						unset($cfields[strtolower($tablefield->Field)]);					} else {						// This field exists in the table, but not in the creation queries?					}				}				// For every remaining field specified for the table				foreach ($cfields as $fieldname => $fielddef) {					// Push a query line into $cqueries that adds the field to that table					$cqueries[] = "ALTER TABLE {$table} ADD COLUMN $fielddef";					$for_update[$table.'.'.$fieldname] = 'Added column '.$table.'.'.$fieldname;				}				// Index stuff goes here				// Fetch the table index structure from the database				$tableindices = $wpdb->get_results("SHOW INDEX FROM {$table};");				if ($tableindices) {					// Clear the index array					unset($index_ary);					// For every index in the table					foreach ($tableindices as $tableindex) {						// Add the index to the index data array						$keyname = $tableindex->Key_name;						$index_ary[$keyname]['columns'][] = array('fieldname' => $tableindex->Column_name, 'subpart' => $tableindex->Sub_part);						$index_ary[$keyname]['unique'] = ($tableindex->Non_unique == 0)?true:false;					}					// For each actual index in the index array					foreach ($index_ary as $index_name => $index_data) {						// Build a create string to compare to the query						$index_string = '';						if ($index_name == 'PRIMARY') {							$index_string .= 'PRIMARY ';						} else if($index_data['unique']) {							$index_string .= 'UNIQUE ';						}						$index_string .= 'KEY ';						if ($index_name != 'PRIMARY') {							$index_string .= $index_name;						}						$index_columns = '';						// For each column in the index						foreach ($index_data['columns'] as $column_data) {							if ($index_columns != '') $index_columns .= ',';							// Add the field to the column list string							$index_columns .= $column_data['fieldname'];							if ($column_data['subpart'] != '') {								$index_columns .= '('.$column_data['subpart'].')';							}						}						// Add the column list to the index create string						$index_string .= ' ('.$index_columns.')';						if (!(($aindex = array_search($index_string, $indices)) === false)) {							unset($indices[$aindex]);							//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br />Found index:".$index_string."</pre>\n";						}						//else echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">{$table}:<br /><b>Did not find index:</b>".$index_string."<br />".print_r($indices, true)."</pre>\n";					}				}				// For every remaining index specified for the table				foreach ( (array) $indices as $index ) {					// Push a query line into $cqueries that adds the index to that table					$cqueries[] = "ALTER TABLE {$table} ADD $index";					$for_update[$table.'.'.$fieldname] = 'Added index '.$table.' '.$index;				}				// Remove the original table creation query from processing				unset($cqueries[strtolower($table)]);				unset($for_update[strtolower($table)]);			} else {				// This table exists in the database, but not in the creation queries?			}		}	}	$allqueries = array_merge($cqueries, $iqueries);	if ($execute) {		foreach ($allqueries as $query) {			//echo "<pre style=\"border:1px solid #ccc;margin-top:5px;\">".print_r($query, true)."</pre>\n";			$wpdb->query($query);		}	}	return $for_update;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current() {	global $wp_queries;	$alterations = dbDelta($wp_queries);	echo "<ol>\n";	foreach($alterations as $alteration) echo "<li>$alteration</li>\n";	echo "</ol>\n";}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function make_db_current_silent() {	global $wp_queries;	$alterations = dbDelta($wp_queries);}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_oldschool($theme_name, $template) {	$home_path = get_home_path();	$site_dir = WP_CONTENT_DIR . "/themes/$template";	if (! file_exists("$home_path/index.php"))		return false;	// Copy files from the old locations to the site theme.	// TODO: This does not copy arbitarary include dependencies.  Only the	// standard WP files are copied.	$files = array('index.php' => 'index.php', 'wp-layout.css' => 'style.css', 'wp-comments.php' => 'comments.php', 'wp-comments-popup.php' => 'comments-popup.php');	foreach ($files as $oldfile => $newfile) {		if ($oldfile == 'index.php')			$oldpath = $home_path;		else			$oldpath = ABSPATH;		if ($oldfile == 'index.php') { // Check to make sure it's not a new index			$index = implode('', file("$oldpath/$oldfile"));			if (strpos($index, 'WP_USE_THEMES') !== false) {				if (! @copy(WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME . '/index.php', "$site_dir/$newfile"))					return false;				continue; // Don't copy anything				}		}		if (! @copy("$oldpath/$oldfile", "$site_dir/$newfile"))			return false;		chmod("$site_dir/$newfile", 0777);		// Update the blog header include in each file.		$lines = explode("\n", implode('', file("$site_dir/$newfile")));		if ($lines) {			$f = fopen("$site_dir/$newfile", 'w');			foreach ($lines as $line) {				if (preg_match('/require.*wp-blog-header/', $line))					$line = '//' . $line;				// Update stylesheet references.				$line = str_replace("<?php echo __get_option('siteurl'); ?>/wp-layout.css", "<?php bloginfo('stylesheet_url'); ?>", $line);				// Update comments template inclusion.				$line = str_replace("<?php include(ABSPATH . 'wp-comments.php'); ?>", "<?php comments_template(); ?>", $line);				fwrite($f, "{$line}\n");			}			fclose($f);		}	}	// Add a theme header.	$header = "/*\nTheme Name: $theme_name\nTheme URI: " . __get_option('siteurl') . "\nDescription: A theme automatically created by the upgrade.\nVersion: 1.0\nAuthor: Moi\n*/\n";	$stylelines = file_get_contents("$site_dir/style.css");	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		fwrite($f, $header);		fwrite($f, $stylelines);		fclose($f);	}	return true;}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @param unknown_type $theme_name * @param unknown_type $template * @return unknown */function make_site_theme_from_default($theme_name, $template) {	$site_dir = WP_CONTENT_DIR . "/themes/$template";	$default_dir = WP_CONTENT_DIR . '/themes/' . WP_DEFAULT_THEME;	// Copy files from the default theme to the site theme.	//$files = array('index.php', 'comments.php', 'comments-popup.php', 'footer.php', 'header.php', 'sidebar.php', 'style.css');	$theme_dir = @ opendir($default_dir);	if ($theme_dir) {		while(($theme_file = readdir( $theme_dir )) !== false) {			if (is_dir("$default_dir/$theme_file"))				continue;			if (! @copy("$default_dir/$theme_file", "$site_dir/$theme_file"))				return;			chmod("$site_dir/$theme_file", 0777);		}	}	@closedir($theme_dir);	// Rewrite the theme header.	$stylelines = explode("\n", implode('', file("$site_dir/style.css")));	if ($stylelines) {		$f = fopen("$site_dir/style.css", 'w');		foreach ($stylelines as $line) {			if (strpos($line, 'Theme Name:') !== false) $line = 'Theme Name: ' . $theme_name;			elseif (strpos($line, 'Theme URI:') !== false) $line = 'Theme URI: ' . __get_option('url');			elseif (strpos($line, 'Description:') !== false) $line = 'Description: Your theme.';			elseif (strpos($line, 'Version:') !== false) $line = 'Version: 1';			elseif (strpos($line, 'Author:') !== false) $line = 'Author: You';			fwrite($f, $line . "\n");		}		fclose($f);	}	// Copy the images.	umask(0);	if (! mkdir("$site_dir/images", 0777)) {		return false;	}	$images_dir = @ opendir("$default_dir/images");	if ($images_dir) {		while(($image = readdir($images_dir)) !== false) {			if (is_dir("$default_dir/images/$image"))				continue;			if (! @copy("$default_dir/images/$image", "$site_dir/images/$image"))				return;			chmod("$site_dir/images/$image", 0777);		}	}	@closedir($images_dir);}// Create a site theme from the default theme./** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown * * @return unknown */function make_site_theme() {	// Name the theme after the blog.	$theme_name = __get_option('blogname');	$template = sanitize_title($theme_name);	$site_dir = WP_CONTENT_DIR . "/themes/$template";	// If the theme already exists, nothing to do.	if ( is_dir($site_dir)) {		return false;	}	// We must be able to write to the themes dir.	if (! is_writable(WP_CONTENT_DIR . "/themes")) {		return false;	}	umask(0);	if (! mkdir($site_dir, 0777)) {		return false;	}	if (file_exists(ABSPATH . 'wp-layout.css')) {		if (! make_site_theme_from_oldschool($theme_name, $template)) {			// TODO:  rm -rf the site theme directory.			return false;		}	} else {		if (! make_site_theme_from_default($theme_name, $template))			// TODO:  rm -rf the site theme directory.			return false;	}	// Make the new site theme active.	$current_template = __get_option('template');	if ($current_template == WP_DEFAULT_THEME) {		update_option('template', $template);		update_option('stylesheet', $template);	}	return $template;}/** * Translate user level to user role name. * * @since unknown * * @param int $level User level. * @return string User role name. */function translate_level_to_role($level) {	switch ($level) {	case 10:	case 9:	case 8:		return 'administrator';	case 7:	case 6:	case 5:		return 'editor';	case 4:	case 3:	case 2:		return 'author';	case 1:		return 'contributor';	case 0:		return 'subscriber';	}}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function wp_check_mysql_version() {	global $wpdb;	$result = $wpdb->check_database_version();	if ( is_wp_error( $result ) )		die( $result->get_error_message() );}/** * {@internal Missing Short Description}} * * {@internal Missing Long Description}} * * @since unknown */function maybe_disable_automattic_widgets() {	$plugins = __get_option( 'active_plugins' );	foreach ( (array) $plugins as $plugin ) {		if ( basename( $plugin ) == 'widgets.php' ) {			array_splice( $plugins, array_search( $plugin, $plugins ), 1 );			update_option( 'active_plugins', $plugins );			break;		}	}}/** * Runs before the schema is upgraded. */function pre_schema_upgrade() {	global $wp_current_db_version, $wp_db_version, $wpdb;	// Upgrade versions prior to 2.9	if ( $wp_current_db_version < 11557 ) {		// Delete duplicate options.  Keep the option with the highest option_id.		$wpdb->query("DELETE o1 FROM $wpdb->options AS o1 JOIN $wpdb->options AS o2 USING (`option_name`) WHERE o2.option_id > o1.option_id");		// Drop the old primary key and add the new.		$wpdb->query("ALTER TABLE $wpdb->options DROP PRIMARY KEY, ADD PRIMARY KEY(option_id)");		// Drop the old option_name index. dbDelta() doesn't do the drop.		$wpdb->query("ALTER TABLE $wpdb->options DROP INDEX option_name");	}}/** * Install Network. * * @since 3.0.0 * */if ( !function_exists( 'install_network' ) ) :function install_network() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->blogs (  blog_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  public tinyint(2) NOT NULL default '1',  archived enum('0','1') NOT NULL default '0',  mature tinyint(2) NOT NULL default '0',  spam tinyint(2) NOT NULL default '0',  deleted tinyint(2) NOT NULL default '0',  lang_id int(11) NOT NULL default '0',  PRIMARY KEY  (blog_id),  KEY domain (domain(50),path(5)),  KEY lang_id (lang_id)) $charset_collate;CREATE TABLE $wpdb->blog_versions (  blog_id bigint(20) NOT NULL default '0',  db_version varchar(20) NOT NULL default '',  last_updated datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (blog_id),  KEY db_version (db_version)) $charset_collate;CREATE TABLE $wpdb->registration_log (  ID bigint(20) NOT NULL auto_increment,  email varchar(255) NOT NULL default '',  IP varchar(30) NOT NULL default '',  blog_id bigint(20) NOT NULL default '0',  date_registered datetime NOT NULL default '0000-00-00 00:00:00',  PRIMARY KEY  (ID),  KEY IP (IP)) $charset_collate;CREATE TABLE $wpdb->site (  id bigint(20) NOT NULL auto_increment,  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  PRIMARY KEY  (id),  KEY domain (domain,path)) $charset_collate;CREATE TABLE $wpdb->sitemeta (  meta_id bigint(20) NOT NULL auto_increment,  site_id bigint(20) NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY meta_key (meta_key),  KEY site_id (site_id)) $charset_collate;CREATE TABLE $wpdb->signups (  domain varchar(200) NOT NULL default '',  path varchar(100) NOT NULL default '',  title longtext NOT NULL,  user_login varchar(60) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  registered datetime NOT NULL default '0000-00-00 00:00:00',  activated datetime NOT NULL default '0000-00-00 00:00:00',  active tinyint(1) NOT NULL default '0',  activation_key varchar(50) NOT NULL default '',  meta longtext,  KEY activation_key (activation_key),  KEY domain (domain)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;/** * Install global terms. * * @since 3.0.0 * */if ( !function_exists( 'install_global_terms' ) ) :function install_global_terms() {	global $wpdb, $charset_collate;	$ms_queries = "CREATE TABLE $wpdb->sitecategories (  cat_ID bigint(20) NOT NULL auto_increment,  cat_name varchar(55) NOT NULL default '',  category_nicename varchar(200) NOT NULL default '',  last_updated timestamp NOT NULL,  PRIMARY KEY  (cat_ID),  KEY category_nicename (category_nicename),  KEY last_updated (last_updated)) $charset_collate;";// now create tables	dbDelta( $ms_queries );}endif;?>
<?php/** * Multisite administration functions. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Determine if uploaded file exceeds space quota. * * @since 3.0.0 * * @param array $file $_FILES array for a given file. * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise. */function check_upload_size( $file ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return $file;	if ( $file['error'] != '0' ) // there's already an error		return $file;	if ( defined( 'WP_IMPORTING' ) )		return $file;	$space_allowed = 1048576 * get_space_allowed();	$space_used = get_dirsize( BLOGUPLOADDIR );	$space_left = $space_allowed - $space_used;	$file_size = filesize( $file['tmp_name'] );	if ( $space_left < $file_size )		$file['error'] = sprintf( __( 'Not enough space to upload. %1$s KB needed.' ), number_format( ($file_size - $space_left) /1024 ) );	if ( $file_size > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		$file['error'] = sprintf(__('This file is too big. Files must be less than %1$s KB in size.'), get_site_option( 'fileupload_maxk', 1500 ) );	if ( upload_is_user_over_quota( false ) ) {		$file['error'] = __( 'You have used your space quota. Please delete files before uploading.' );	}	if ( $file['error'] != '0' && !isset($_POST['html-upload']) )		wp_die( $file['error'] . ' <a href="javascript:history.go(-1)">' . __( 'Back' ) . '</a>' );	return $file;}add_filter( 'wp_handle_upload_prefilter', 'check_upload_size' );/** * Delete a blog * * @since 3.0.0 * * @param int $blog_id Blog ID * @param bool $drop True if blog's table should be dropped.  Default is false. * @return void */function wpmu_delete_blog( $blog_id, $drop = false ) {	global $wpdb;	$switch = false;	if ( $blog_id != $wpdb->blogid ) {		$switch = true;		switch_to_blog( $blog_id );	}	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	do_action( 'delete_blog', $blog_id, $drop );	$users = get_users_of_blog( $blog_id );	// Remove users from this blog.	if ( ! empty( $users ) ) {		foreach ( $users as $user ) {			remove_user_from_blog( $user->user_id, $blog_id) ;		}	}	update_blog_status( $blog_id, 'deleted', 1 );	if ( $drop ) {		if ( substr( $blog_prefix, -1 ) == '_' )			$blog_prefix =  substr( $blog_prefix, 0, -1 ) . '\_';		$drop_tables = $wpdb->get_results( "SHOW TABLES LIKE '{$blog_prefix}%'", ARRAY_A );		$drop_tables = apply_filters( 'wpmu_drop_tables', $drop_tables );		reset( $drop_tables );		foreach ( (array) $drop_tables as $drop_table) {			$wpdb->query( "DROP TABLE IF EXISTS ". current( $drop_table ) ."" );		}		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->blogs WHERE blog_id = %d", $blog_id ) );		$dir = apply_filters( 'wpmu_delete_blog_upload_dir', WP_CONTENT_DIR . "/blogs.dir/{$blog_id}/files/", $blog_id );		$dir = rtrim( $dir, DIRECTORY_SEPARATOR );		$top_dir = $dir;		$stack = array($dir);		$index = 0;		while ( $index < count( $stack ) ) {			# Get indexed directory from stack			$dir = $stack[$index];			$dh = @opendir( $dir );			if ( $dh ) {				while ( ( $file = @readdir( $dh ) ) !== false ) {					if ( $file == '.' || $file == '..' )						continue;					if ( @is_dir( $dir . DIRECTORY_SEPARATOR . $file ) )						$stack[] = $dir . DIRECTORY_SEPARATOR . $file;					else if ( @is_file( $dir . DIRECTORY_SEPARATOR . $file ) )						@unlink( $dir . DIRECTORY_SEPARATOR . $file );				}			}			$index++;		}		$stack = array_reverse( $stack );  // Last added dirs are deepest		foreach( (array) $stack as $dir ) {			if ( $dir != $top_dir)			@rmdir( $dir );		}	}	$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE meta_key = '{$blog_prefix}autosave_draft_ids'" );	$blogs = get_site_option( 'blog_list' );	if ( is_array( $blogs ) ) {		foreach ( $blogs as $n => $blog ) {			if ( $blog['blog_id'] == $blog_id )				unset( $blogs[$n] );		}		update_site_option( 'blog_list', $blogs );	}	if ( $switch === true )		restore_current_blog();}// @todo Merge with wp_delete_user() ?function wpmu_delete_user( $id ) {	global $wpdb;	$id = (int) $id;	do_action( 'wpmu_delete_user', $id );	$blogs = get_blogs_of_user( $id );	if ( ! empty( $blogs ) ) {		foreach ( $blogs as $blog ) {			switch_to_blog( $blog->userblog_id );			remove_user_from_blog( $id, $blog->userblog_id );			$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );			foreach ( (array) $post_ids as $post_id ) {				wp_delete_post( $post_id );			}			// Clean links			$link_ids = $wpdb->get_col( $wpdb->prepare( "SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id ) );			if ( $link_ids ) {				foreach ( $link_ids as $link_id )					wp_delete_link( $link_id );			}			restore_current_blog();		}	}	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->users WHERE ID = %d", $id ) );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id ) );	clean_user_cache( $id );	// allow for commit transaction	do_action( 'deleted_user', $id );	return true;}function confirm_delete_users( $users ) {	global $current_user;	if ( !is_array( $users ) )		return false;    screen_icon();    ?>	<h2><?php esc_html_e( 'Users' ); ?></h2>	<p><?php _e( 'Transfer or delete posts and links before deleting users.' ); ?></p>	<form action="ms-edit.php?action=dodelete" method="post">	<input type="hidden" name="dodelete" />    <?php	wp_nonce_field( 'ms-users-delete' );	$site_admins = get_super_admins();	$admin_out = "<option value='$current_user->ID'>$current_user->user_login</option>";	foreach ( ( $allusers = (array) $_POST['allusers'] ) as $key => $val ) {		if ( $val != '' && $val != '0' ) {			$delete_user = new WP_User( $val );			if ( in_array( $delete_user->user_login, $site_admins ) )				wp_die( sprintf( __( 'Warning! User cannot be deleted. The user %s is a network admnistrator.' ), $delete_user->user_login ) );			echo "<input type='hidden' name='user[]' value='{$val}'/>\n";			$blogs = get_blogs_of_user( $val, true );			if ( !empty( $blogs ) ) {				?>				<br /><fieldset><p><legend><?php printf( __( "What should be done with posts and links owned by <em>%s</em>?" ), $delete_user->user_login ); ?></legend></p>				<?php				foreach ( (array) $blogs as $key => $details ) {					$blog_users = get_users_of_blog( $details->userblog_id );					if ( is_array( $blog_users ) && !empty( $blog_users ) ) {						$user_site = "<a href='" . esc_url( get_home_url( $details->userblog_id ) ) . "'>{$details->blogname}</a>";						$user_dropdown = "<select name='blog[$val][{$key}]'>";						$user_list = '';						foreach ( $blog_users as $user ) {							if ( $user->user_id != $val && !in_array( $user->user_id, $allusers ) )								$user_list .= "<option value='{$user->user_id}'>{$user->user_login}</option>";						}						if ( '' == $user_list )							$user_list = $admin_out;						$user_dropdown .= $user_list;						$user_dropdown .= "</select>\n";						?>						<ul style="list-style:none;">							<li><?php printf( __( 'Site: %s' ), $user_site ); ?></li>							<li><label><input type="radio" id="delete_option0" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="delete" checked="checked" />							<?php _e( 'Delete all posts and links.' ); ?></label></li>							<li><label><input type="radio" id="delete_option1" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="reassign" />							<?php echo __( 'Attribute all posts and links to:' ) . '</label>' . $user_dropdown; ?></li>						</ul>						<?php					}				}				echo "</fieldset>";			}		}	}	?>	<p class="submit"><input type="submit" class="button-secondary delete" value="<?php esc_attr_e( 'Confirm Deletion' ); ?>" /></p>	</form>    <?php	return true;}function wpmu_get_blog_allowedthemes( $blog_id = 0 ) {	$themes = get_themes();	if ( $blog_id != 0 )		switch_to_blog( $blog_id );	$blog_allowed_themes = get_option( 'allowedthemes' );	if ( !is_array( $blog_allowed_themes ) || empty( $blog_allowed_themes ) ) { // convert old allowed_themes to new allowedthemes		$blog_allowed_themes = get_option( 'allowed_themes' );		if ( is_array( $blog_allowed_themes ) ) {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $blog_allowed_themes[$key] ) == true ) {					$blog_allowedthemes[$theme_key] = 1;				}			}			$blog_allowed_themes = $blog_allowedthemes;			add_option( 'allowedthemes', $blog_allowed_themes );			delete_option( 'allowed_themes' );		}	}	if ( $blog_id != 0 )		restore_current_blog();	return $blog_allowed_themes;}function update_option_new_admin_email( $old_value, $value ) {	$email = get_option( 'admin_email' );	if ( $value == get_option( 'admin_email' ) || !is_email( $value ) )		return;	$hash = md5( $value. time() .mt_rand() );	$new_admin_email = array(		'hash' => $hash,		'newemail' => $value	);	update_option( 'adminhash', $new_admin_email );	$content = apply_filters( 'new_admin_email_content', __( "Dear user,You recently requested to have the administration email address onyour site changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL### "), $new_admin_email );	$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'options.php?adminhash='.$hash ) ), $content );	$content = str_replace( '###EMAIL###', $value, $content );	$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );	$content = str_replace( '###SITEURL###', network_home_url(), $content );	wp_mail( $value, sprintf( __( '[%s] New Admin Email Address' ), get_option( 'blogname' ) ), $content );}add_action( 'update_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );add_action( 'add_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );function send_confirmation_on_profile_email() {	global $errors, $wpdb, $current_user;	if ( ! is_object($errors) )		$errors = new WP_Error();	if ( $current_user->id != $_POST['user_id'] )		return false;	if ( $current_user->user_email != $_POST['email'] ) {		if ( !is_email( $_POST['email'] ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address isn't correct." ), array( 'form-field' => 'email' ) );			return;		}		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_email FROM {$wpdb->users} WHERE user_email=%s", $_POST['email'] ) ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address is already used." ), array( 'form-field' => 'email' ) );			delete_option( $current_user->ID . '_new_email' );			return;		}		$hash = md5( $_POST['email'] . time() . mt_rand() );		$new_user_email = array(				'hash' => $hash,				'newemail' => $_POST['email']				);		update_option( $current_user->ID . '_new_email', $new_user_email );		$content = apply_filters( 'new_user_email_content', __( "Dear user,You recently requested to have the email address on your account changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL###" ), $new_user_email );		$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'profile.php?newuseremail='.$hash ) ), $content );		$content = str_replace( '###EMAIL###', $_POST['email'], $content);		$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );		$content = str_replace( '###SITEURL###', network_home_url(), $content );		wp_mail( $_POST['email'], sprintf( __( '[%s] New Email Address' ), get_option( 'blogname' ) ), $content );		$_POST['email'] = $current_user->user_email;	}}add_action( 'personal_options_update', 'send_confirmation_on_profile_email' );function new_user_email_admin_notice() {	global $current_user;	if ( strpos( $_SERVER['PHP_SELF'], 'profile.php' ) && isset( $_GET['updated'] ) && $email = get_option( $current_user->ID . '_new_email' ) )		echo "<div class='update-nag'>" . sprintf( __( "Your email address has not been updated yet. Please check your inbox at %s for a confirmation email." ), $email['newemail'] ) . "</div>";}add_action( 'admin_notices', 'new_user_email_admin_notice' );function get_site_allowed_themes() {	$themes = get_themes();	$allowed_themes = get_site_option( 'allowedthemes' );	if ( !is_array( $allowed_themes ) || empty( $allowed_themes ) ) {		$allowed_themes = get_site_option( 'allowed_themes' ); // convert old allowed_themes format		if ( !is_array( $allowed_themes ) ) {			$allowed_themes = array();		} else {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $allowed_themes[ $key ] ) == true ) {					$allowedthemes[ $theme_key ] = 1;				}			}			$allowed_themes = $allowedthemes;		}	}	return $allowed_themes;}/** * Determines if there is any upload space left in the current blog's quota. * * @since 3.0.0 * @return bool True if space is available, false otherwise. */function is_upload_space_available() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	if ( !( $space_allowed = get_upload_space_available() ) )		return false;	return true;}/* * @since 3.0.0 * * @return int of upload size limit in bytes */function upload_size_limit_filter( $size ) {	$fileupload_maxk = 1024 * get_site_option( 'fileupload_maxk', 1500 );	return min( $size, $fileupload_maxk, get_upload_space_available() );}/** * Determines if there is any upload space left in the current blog's quota. * * @return int of upload space available in bytes */function get_upload_space_available() {	$space_allowed = get_space_allowed() * 1024 * 1024;	if ( get_site_option( 'upload_space_check_disabled' ) )		return $space_allowed;	$dir_name = trailingslashit( BLOGUPLOADDIR );	if ( !( is_dir( $dir_name) && is_readable( $dir_name ) ) )		return $space_allowed;  	$dir = dir( $dir_name );   	$size = 0;	while ( $file = $dir->read() ) {		if ( $file != '.' && $file != '..' ) {			if ( is_dir( $dir_name . $file) ) {				$size += get_dirsize( $dir_name . $file );			} else {				$size += filesize( $dir_name . $file );			}		}	}	$dir->close();	if ( ( $space_allowed - $size ) <= 0 )		return 0;	return $space_allowed - $size;}/** * Returns the upload quota for the current blog. * * @return int Quota */function get_space_allowed() {	$space_allowed = get_option( 'blog_upload_space' );	if ( $space_allowed == false )		$space_allowed = get_site_option( 'blog_upload_space' );	if ( empty( $space_allowed ) || !is_numeric( $space_allowed ) )		$space_allowed = 50;	return $space_allowed;}function display_space_usage() {	$space = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	$percentused = ( $used / $space ) * 100;	if ( $space > 1000 ) {		$space = number_format( $space / 1024 );		/* translators: Gigabytes */		$space .= __( 'GB' );	} else {		/* translators: Megabytes */		$space .= __( 'MB' );	}	?>	<strong><?php printf( __( 'Used: %1s%% of %2s' ), number_format( $percentused ), $space ); ?></strong>	<?php}// Display File upload quota on dashboardfunction dashboard_quota() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$quota = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	if ( $used > $quota )		$percentused = '100';	else		$percentused = ( $used / $quota ) * 100;	$used_color = ( $percentused < 70 ) ? ( ( $percentused >= 40 ) ? 'waiting' : 'approved' ) : 'spam';	$used = round( $used, 2 );	$percentused = number_format( $percentused );	?>	<p class="sub musub"><?php _e( 'Storage Space' ); ?></p>	<div class="table table_content musubtable">	<table>		<tr class="first">			<td class="first b b-posts"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB</a>' ), esc_url( admin_url( 'upload.php' ) ), $quota ); ?></td>			<td class="t posts"><?php _e( 'Space Allowed' ); ?></td>		</tr>	</table>	</div>	<div class="table table_discussion musubtable">	<table>		<tr class="first">			<td class="b b-comments"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB (%3$s%%)</a>' ), esc_url( admin_url( 'upload.php' ) ), $used, $percentused ); ?></td>			<td class="last t comments <?php echo $used_color;?>"><?php _e( 'Space Used' );?></td>		</tr>	</table>	</div>	<br class="clear" />	<?php}if ( current_user_can( 'edit_posts' ) )	add_action( 'activity_box_end', 'dashboard_quota' );// Edit blog upload space setting on Edit Blog pagefunction upload_space_setting( $id ) {	$quota = get_blog_option( $id, 'blog_upload_space' );	if ( !$quota )		$quota = '';	?>	<tr>		<th><?php _e( 'Site Upload Space Quota '); ?></th>		<td><input type="text" size="3" name="option[blog_upload_space]" value="<?php echo $quota; ?>" /> <?php _e( 'MB (Leave blank for network default)' ); ?></td>	</tr>	<?php}add_action( 'wpmueditblogaction', 'upload_space_setting' );function update_user_status( $id, $pref, $value, $refresh = 1 ) {	global $wpdb;	$wpdb->update( $wpdb->users, array( $pref => $value ), array( 'ID' => $id ) );	if ( $refresh == 1 )		refresh_user_details( $id );	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( 'make_spam_user', $id );		else			do_action( 'make_ham_user', $id );	}	return $value;}function refresh_user_details( $id ) {	$id = (int) $id;	if ( !$user = get_userdata( $id ) )		return false;	clean_user_cache( $id );	return $id;}function format_code_lang( $code = '' ) {	$code = strtolower( substr( $code, 0, 2 ) );	$lang_codes = array(		'aa' => 'Afar', 'ab' => 'Abkhazian', 'af' => 'Afrikaans', 'ak' => 'Akan', 'sq' => 'Albanian', 'am' => 'Amharic', 'ar' => 'Arabic', 'an' => 'Aragonese', 'hy' => 'Armenian', 'as' => 'Assamese', 'av' => 'Avaric', 'ae' => 'Avestan', 'ay' => 'Aymara', 'az' => 'Azerbaijani', 'ba' => 'Bashkir', 'bm' => 'Bambara', 'eu' => 'Basque', 'be' => 'Belarusian', 'bn' => 'Bengali',		'bh' => 'Bihari', 'bi' => 'Bislama', 'bs' => 'Bosnian', 'br' => 'Breton', 'bg' => 'Bulgarian', 'my' => 'Burmese', 'ca' => 'Catalan; Valencian', 'ch' => 'Chamorro', 'ce' => 'Chechen', 'zh' => 'Chinese', 'cu' => 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic', 'cv' => 'Chuvash', 'kw' => 'Cornish', 'co' => 'Corsican', 'cr' => 'Cree',		'cs' => 'Czech', 'da' => 'Danish', 'dv' => 'Divehi; Dhivehi; Maldivian', 'nl' => 'Dutch; Flemish', 'dz' => 'Dzongkha', 'en' => 'English', 'eo' => 'Esperanto', 'et' => 'Estonian', 'ee' => 'Ewe', 'fo' => 'Faroese', 'fj' => 'Fijjian', 'fi' => 'Finnish', 'fr' => 'French', 'fy' => 'Western Frisian', 'ff' => 'Fulah', 'ka' => 'Georgian', 'de' => 'German', 'gd' => 'Gaelic; Scottish Gaelic',		'ga' => 'Irish', 'gl' => 'Galician', 'gv' => 'Manx', 'el' => 'Greek, Modern', 'gn' => 'Guarani', 'gu' => 'Gujarati', 'ht' => 'Haitian; Haitian Creole', 'ha' => 'Hausa', 'he' => 'Hebrew', 'hz' => 'Herero', 'hi' => 'Hindi', 'ho' => 'Hiri Motu', 'hu' => 'Hungarian', 'ig' => 'Igbo', 'is' => 'Icelandic', 'io' => 'Ido', 'ii' => 'Sichuan Yi', 'iu' => 'Inuktitut', 'ie' => 'Interlingue',		'ia' => 'Interlingua (International Auxiliary Language Association)', 'id' => 'Indonesian', 'ik' => 'Inupiaq', 'it' => 'Italian', 'jv' => 'Javanese', 'ja' => 'Japanese', 'kl' => 'Kalaallisut; Greenlandic', 'kn' => 'Kannada', 'ks' => 'Kashmiri', 'kr' => 'Kanuri', 'kk' => 'Kazakh', 'km' => 'Central Khmer', 'ki' => 'Kikuyu; Gikuyu', 'rw' => 'Kinyarwanda', 'ky' => 'Kirghiz; Kyrgyz',		'kv' => 'Komi', 'kg' => 'Kongo', 'ko' => 'Korean', 'kj' => 'Kuanyama; Kwanyama', 'ku' => 'Kurdish', 'lo' => 'Lao', 'la' => 'Latin', 'lv' => 'Latvian', 'li' => 'Limburgan; Limburger; Limburgish', 'ln' => 'Lingala', 'lt' => 'Lithuanian', 'lb' => 'Luxembourgish; Letzeburgesch', 'lu' => 'Luba-Katanga', 'lg' => 'Ganda', 'mk' => 'Macedonian', 'mh' => 'Marshallese', 'ml' => 'Malayalam',		'mi' => 'Maori', 'mr' => 'Marathi', 'ms' => 'Malay', 'mg' => 'Malagasy', 'mt' => 'Maltese', 'mo' => 'Moldavian', 'mn' => 'Mongolian', 'na' => 'Nauru', 'nv' => 'Navajo; Navaho', 'nr' => 'Ndebele, South; South Ndebele', 'nd' => 'Ndebele, North; North Ndebele', 'ng' => 'Ndonga', 'ne' => 'Nepali', 'nn' => 'Norwegian Nynorsk; Nynorsk, Norwegian', 'nb' => 'Bokml, Norwegian, Norwegian Bokml',		'no' => 'Norwegian', 'ny' => 'Chichewa; Chewa; Nyanja', 'oc' => 'Occitan, Provenal', 'oj' => 'Ojibwa', 'or' => 'Oriya', 'om' => 'Oromo', 'os' => 'Ossetian; Ossetic', 'pa' => 'Panjabi; Punjabi', 'fa' => 'Persian', 'pi' => 'Pali', 'pl' => 'Polish', 'pt' => 'Portuguese', 'ps' => 'Pushto', 'qu' => 'Quechua', 'rm' => 'Romansh', 'ro' => 'Romanian', 'rn' => 'Rundi', 'ru' => 'Russian',		'sg' => 'Sango', 'sa' => 'Sanskrit', 'sr' => 'Serbian', 'hr' => 'Croatian', 'si' => 'Sinhala; Sinhalese', 'sk' => 'Slovak', 'sl' => 'Slovenian', 'se' => 'Northern Sami', 'sm' => 'Samoan', 'sn' => 'Shona', 'sd' => 'Sindhi', 'so' => 'Somali', 'st' => 'Sotho, Southern', 'es' => 'Spanish; Castilian', 'sc' => 'Sardinian', 'ss' => 'Swati', 'su' => 'Sundanese', 'sw' => 'Swahili',		'sv' => 'Swedish', 'ty' => 'Tahitian', 'ta' => 'Tamil', 'tt' => 'Tatar', 'te' => 'Telugu', 'tg' => 'Tajik', 'tl' => 'Tagalog', 'th' => 'Thai', 'bo' => 'Tibetan', 'ti' => 'Tigrinya', 'to' => 'Tonga (Tonga Islands)', 'tn' => 'Tswana', 'ts' => 'Tsonga', 'tk' => 'Turkmen', 'tr' => 'Turkish', 'tw' => 'Twi', 'ug' => 'Uighur; Uyghur', 'uk' => 'Ukrainian', 'ur' => 'Urdu', 'uz' => 'Uzbek',		've' => 'Venda', 'vi' => 'Vietnamese', 'vo' => 'Volapk', 'cy' => 'Welsh','wa' => 'Walloon','wo' => 'Wolof', 'xh' => 'Xhosa', 'yi' => 'Yiddish', 'yo' => 'Yoruba', 'za' => 'Zhuang; Chuang', 'zu' => 'Zulu' );	$lang_codes = apply_filters( 'lang_codes', $lang_codes, $code );	return strtr( $code, $lang_codes );}function sync_category_tag_slugs( $term, $taxonomy ) {	if ( global_terms_enabled() && ( $taxonomy == 'category' || $taxonomy == 'post_tag' ) ) {		if ( is_object( $term ) ) {			$term->slug = sanitize_title( $term->name );		} else {			$term['slug'] = sanitize_title( $term['name'] );		}	}	return $term;}add_filter( 'get_term', 'sync_category_tag_slugs', 10, 2 );function redirect_user_to_blog() {	global $current_user;	$c = 0;	if ( isset( $_GET['c'] ) )		$c = (int) $_GET['c'];	if ( $c >= 5 ) {		wp_die( __( "You don&#8217;t have permission to view this site. Please contact the system administrator." ) );	}	$c ++;	$blog = get_active_blog_for_user( $current_user->ID );	$dashboard_blog = get_dashboard_blog();	if ( is_object( $blog ) ) {		wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) ); // redirect and count to 5, "just in case"		exit;	}	/*	   If the user is a member of only 1 blog and the user's primary_blog isn't set to that blog,	   then update the primary_blog record to match the user's blog	 */	$blogs = get_blogs_of_user( $current_user->ID );	if ( !empty( $blogs ) ) {		foreach( $blogs as $blogid => $blog ) {			if ( $blogid != $dashboard_blog->blog_id && get_user_meta( $current_user->ID , 'primary_blog', true ) == $dashboard_blog->blog_id ) {				update_user_meta( $current_user->ID, 'primary_blog', $blogid );				continue;			}		}		$blog = get_blog_details( get_user_meta( $current_user->ID, 'primary_blog', true ) );			wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) );		exit;	}	wp_die( __( 'You do not have sufficient permissions to access this page.' ) );}add_action( 'admin_page_access_denied', 'redirect_user_to_blog', 99 );function check_import_new_users( $permission ) {	if ( !is_super_admin() )		return false;	return true;}add_filter( 'import_allow_create_users', 'check_import_new_users' );// See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.function mu_dropdown_languages( $lang_files = array(), $current = '' ) {	$flag = false;	$output = array();	foreach ( (array) $lang_files as $val ) {		$code_lang = basename( $val, '.mo' );		if ( $code_lang == 'en_US' ) { // American English			$flag = true;			$ae = __( 'American English' );			$output[$ae] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $ae . '</option>';		} elseif ( $code_lang == 'en_GB' ) { // British English			$flag = true;			$be = __( 'British English' );			$output[$be] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $be . '</option>';		} else {			$translated = format_code_lang( $code_lang );			$output[$translated] =  '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . esc_html ( $translated ) . '</option>';		}	}	if ( $flag === false ) // WordPress english		$output[] = '<option value=""' . selected( $current, '' ) . '>' . __( 'English' ) . "</option>";	// Order by name	uksort( $output, 'strnatcasecmp' );	$output = apply_filters( 'mu_dropdown_languages', $output, $lang_files, $current );	echo implode( "\n\t", $output );}/* Warn the admin if SECRET SALT information is missing from wp-config.php */function secret_salt_warning() {	if ( !is_super_admin() )		return;	$secret_keys = array( 'AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT' );	$out = '';	foreach( $secret_keys as $key ) {		if ( ! defined( $key ) )			$out .= "define( '$key', '" . esc_html( wp_generate_password( 64, true, true ) ) . "' );<br />";	}	if ( $out != '' ) {		$msg  = __( 'Warning! WordPress encrypts user cookies, but you must add the following lines to <strong>wp-config.php</strong> for it to be more secure.' );		$msg .= '<br/>' . __( "Before the line <code>/* That's all, stop editing! Happy blogging. */</code> please add this code:" );		$msg .= "<br/><br/><code>$out</code>";		echo "<div class='update-nag'>$msg</div>";	}}add_action( 'admin_notices', 'secret_salt_warning' );function admin_notice_feed() {	global $current_user, $current_screen;	if ( $current_screen->id != 'dashboard' )		return;	if ( !empty( $_GET['feed_dismiss'] ) ) {		update_user_option( $current_user->id, 'admin_feed_dismiss', $_GET['feed_dismiss'], true );		return;	}	$url = get_site_option( 'admin_notice_feed' );	if ( empty( $url ) )		return;	$rss = fetch_feed( $url );	if ( ! is_wp_error( $rss ) && $item = $rss->get_item() ) {		$title = $item->get_title();		if ( md5( $title ) == get_user_option( 'admin_feed_dismiss' ) )			return;		$msg = "<h3>" . esc_html( $title ) . "</h3>\n";		$content = $item->get_description();		$content = $content ? wp_html_excerpt( $content, 200 ) . ' &hellip; ' : '';		$link = esc_url( strip_tags( $item->get_link() ) );		$msg .= "<p>" . $content . "<a href='$link'>" . __( 'Read More' ) . "</a> <a href='index.php?feed_dismiss=" . md5( $title ) . "'>" . __( 'Dismiss' ) . "</a></p>";		echo "<div class='updated'>$msg</div>";	} elseif ( is_super_admin() ) {		printf( '<div class="update-nag">' . __( 'Your feed at %s is empty.' ) . '</div>', esc_html( $url ) );	}}add_action( 'admin_notices', 'admin_notice_feed' );function site_admin_notice() {	global $current_user, $wp_db_version;	if ( !is_super_admin() )		return false;	if ( get_site_option( 'wpmu_upgrade_site' ) != $wp_db_version )		echo "<div class='update-nag'>" . sprintf( __( 'Thank you for Updating! Please visit the <a href="%s">Update Network</a> page to update all your sites.' ), esc_url( admin_url( 'ms-upgrade-network.php' ) ) ) . "</div>";}add_action( 'admin_notices', 'site_admin_notice' );function avoid_blog_page_permalink_collision( $data, $postarr ) {	if ( is_subdomain_install() )		return $data;	if ( $data['post_type'] != 'page' )		return $data;	if ( !isset( $data['post_name'] ) || $data['post_name'] == '' )		return $data;	if ( !is_main_site() )		return $data;	$post_name = $data['post_name'];	$c = 0;	while( $c < 10 && get_id_from_blogname( $post_name ) ) {		$post_name .= mt_rand( 1, 10 );		$c ++;	}	if ( $post_name != $data['post_name'] ) {		$data['post_name'] = $post_name;	}	return $data;}add_filter( 'wp_insert_post_data', 'avoid_blog_page_permalink_collision', 10, 2 );function choose_primary_blog() {	global $current_user;	?>	<table class="form-table">	<tr>	<?php /* translators: My sites label */ ?>		<th scope="row"><?php _e( 'Primary Site' ); ?></th>		<td>		<?php		$all_blogs = get_blogs_of_user( $current_user->ID );		$primary_blog = get_user_meta( $current_user->ID, 'primary_blog', true );		if ( count( $all_blogs ) > 1 ) {			$found = false;			?>			<select name="primary_blog">				<?php foreach( (array) $all_blogs as $blog ) {					if ( $primary_blog == $blog->userblog_id )						$found = true;					?><option value="<?php echo $blog->userblog_id ?>"<?php selected( $primary_blog,  $blog->userblog_id ); ?>><?php echo esc_url( get_home_url( $blog->userblog_id ) ) ?></option><?php				} ?>			</select>			<?php			if ( !$found ) {				$blog = array_shift( $all_blogs );				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );			}		} elseif ( count( $all_blogs ) == 1 ) {			$blog = array_shift( $all_blogs );			echo $blog->domain;			if ( $primary_blog != $blog->userblog_id ) // Set the primary blog again if it's out of sync with blog list.				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );		} else {			echo "N/A";		}		?>		</td>	</tr>	<?php if ( in_array( get_site_option( 'registration' ), array( 'all', 'blog' ) ) ) : ?>		<tr>			<th scope="row" colspan="2" class="th-full">				<a href="<?php echo apply_filters( 'wp_signup_location', network_home_url( 'wp-signup.php' ) ); ?>"><?php _e( 'Create a New Site' ); ?></a>			</th>		</tr>	<?php endif; ?>	</table>	<?php}function show_post_thumbnail_warning() {	if ( ! is_super_admin() )		return;	$mu_media_buttons = get_site_option( 'mu_media_buttons', array() );	if ( empty($mu_media_buttons['image']) && current_theme_supports( 'post-thumbnails' ) ) {		echo "<div class='update-nag'>" . sprintf( __( "Warning! The current theme supports Featured Images. You must enable image uploads on <a href='%s'>the options page</a> for it to work." ), esc_url( admin_url( 'ms-options.php' ) ) ) . "</div>";	}}add_action( 'admin_notices', 'show_post_thumbnail_warning' );function ms_deprecated_blogs_file() {	if ( ! is_super_admin() )		return;	if ( ! file_exists( WP_CONTENT_DIR . '/blogs.php' ) )		return;	echo '<div class="update-nag">' . sprintf( __( 'The <code>%1$s</code> file is deprecated. Please remove it and update your server rewrite rules to use <code>%2$s</code> instead.' ), 'wp-content/blogs.php', 'wp-includes/ms-files.php' ) . '</div>';}add_action( 'admin_notices', 'ms_deprecated_blogs_file' );/** * Outputs the notice message for multisite regarding activation of plugin page. * * @since 3.0.0 * @return none */function _admin_notice_multisite_activate_plugins_page() {	$message = sprintf( __( 'The plugins page is not visible to normal users. It must be activated first. %s' ), '<a href="' . esc_url( admin_url( 'ms-options.php#menu' ) ) . '">' . __( 'Activate' ) . '</a>' );	echo "<div class='error'><p>$message</p></div>";}/** * Grants super admin privileges. * * @since 3.0.0 * @param $user_id */function grant_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'grant_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( ! in_array( $user->user_login, $super_admins ) ) {		$super_admins[] = $user->user_login;		update_site_option( 'site_admins' , $super_admins );		do_action( 'granted_super_admin', $user_id );		return true;	}	return false;}/** * Revokes super admin privileges. * * @since 3.0.0 * @param $user_id */function revoke_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'revoke_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( $user->user_email != get_site_option( 'admin_email' ) ) {		if ( false !== ( $key = array_search( $user->user_login, $super_admins ) ) ) {			unset( $super_admins[$key] );			update_site_option( 'site_admins', $super_admins );			do_action( 'revoked_super_admin', $user_id );			return true;		}	}	return false;}?>
<?php/** * Category Template Tags and API. * * @package WordPress * @subpackage Template *//** * Retrieve category link URL. * * @since 1.0.0 * @uses apply_filters() Calls 'category_link' filter on category link and category ID. * * @param int $category_id Category ID. * @return string */function get_category_link( $category_id ) {	global $wp_rewrite;	$catlink = $wp_rewrite->get_category_permastruct();	if ( empty( $catlink ) ) {		$catlink = home_url('?cat=' . $category_id);	} else {		$category = &get_category( $category_id );		if ( is_wp_error( $category ) )			return $category;		$category_nicename = $category->slug;		if ( $category->parent == $category_id ) // recursive recursion			$category->parent = 0;		elseif ($category->parent != 0 )			$category_nicename = get_category_parents( $category->parent, false, '/', true ) . $category_nicename;		$catlink = str_replace( '%category%', $category_nicename, $catlink );		$catlink = home_url( user_trailingslashit( $catlink, 'category' ) );	}	return apply_filters( 'category_link', $catlink, $category_id );}/** * Retrieve category parents with separator. * * @since 1.2.0 * * @param int $id Category ID. * @param bool $link Optional, default is false. Whether to format with link. * @param string $separator Optional, default is '/'. How to separate categories. * @param bool $nicename Optional, default is false. Whether to use nice name for display. * @param array $visited Optional. Already linked to categories to prevent duplicates. * @return string */function get_category_parents( $id, $link = false, $separator = '/', $nicename = false, $visited = array() ) {	$chain = '';	$parent = &get_category( $id );	if ( is_wp_error( $parent ) )		return $parent;	if ( $nicename )		$name = $parent->slug;	else		$name = $parent->cat_name;	if ( $parent->parent && ( $parent->parent != $parent->term_id ) && !in_array( $parent->parent, $visited ) ) {		$visited[] = $parent->parent;		$chain .= get_category_parents( $parent->parent, $link, $separator, $nicename, $visited );	}	if ( $link )		$chain .= '<a href="' . get_category_link( $parent->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $parent->cat_name ) ) . '">'.$name.'</a>' . $separator;	else		$chain .= $name.$separator;	return $chain;}/** * Retrieve post categories. * * @since 0.71 * @uses $post * * @param int $id Optional, default to current post ID. The post ID. * @return array */function get_the_category( $id = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	$categories = get_object_term_cache( $id, 'category' );	if ( false === $categories ) {		$categories = wp_get_object_terms( $id, 'category' );		wp_cache_add($id, $categories, 'category_relationships');	}	if ( !empty( $categories ) )		usort( $categories, '_usort_terms_by_name' );	else		$categories = array();	foreach ( (array) array_keys( $categories ) as $key ) {		_make_cat_compat( $categories[$key] );	}	return $categories;}/** * Sort categories by name. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_name( $a, $b ) {	return strcmp( $a->name, $b->name );}/** * Sort categories by ID. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_ID( $a, $b ) {	if ( $a->term_id > $b->term_id )		return 1;	elseif ( $a->term_id < $b->term_id )		return -1;	else		return 0;}/** * Retrieve category name based on category ID. * * @since 0.71 * * @param int $cat_ID Category ID. * @return string Category name. */function get_the_category_by_ID( $cat_ID ) {	$cat_ID = (int) $cat_ID;	$category = &get_category( $cat_ID );	if ( is_wp_error( $category ) )		return $category;	return $category->name;}/** * Retrieve category list in either HTML list or custom format. * * @since 1.5.1 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. * @return string */function get_the_category_list( $separator = '', $parents='', $post_id = false ) {	global $wp_rewrite;	$categories = get_the_category( $post_id );	if ( !is_object_in_taxonomy( get_post_type( $post_id ), 'category' ) )		return apply_filters( 'the_category', '', $separator, $parents );	if ( empty( $categories ) )		return apply_filters( 'the_category', __( 'Uncategorized' ), $separator, $parents );	$rel = ( is_object( $wp_rewrite ) && $wp_rewrite->using_permalinks() ) ? 'rel="category tag"' : 'rel="category"';	$thelist = '';	if ( '' == $separator ) {		$thelist .= '<ul class="post-categories">';		foreach ( $categories as $category ) {			$thelist .= "\n\t<li>";			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a></li>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= $category->name.'</a></li>';					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a></li>';			}		}		$thelist .= '</ul>';	} else {		$i = 0;		foreach ( $categories as $category ) {			if ( 0 < $i )				$thelist .= $separator;			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= "$category->cat_name</a>";					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a>';			}			++$i;		}	}	return apply_filters( 'the_category', $thelist, $separator, $parents );}/** * Check if the current post in within any of the given categories. * * The given categories are checked against the post's categories' term_ids, names and slugs. * Categories given as integers will only be checked against the post's categories' term_ids. * * Prior to v2.5 of WordPress, category names were not supported. * Prior to v2.7, category slugs were not supported. * Prior to v2.7, only one category could be compared: in_category( $single_category ). * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 1.2.0 * * @uses is_object_in_term() * * @param int|string|array $category. Category ID, name or slug, or array of said. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post is in any of the given categories. */function in_category( $category, $_post = null ) {	if ( empty( $category ) )		return false;	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'category', $category );	if ( is_wp_error( $r ) )		return false;	return $r;}/** * Display the category list for the post. * * @since 0.71 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. */function the_category( $separator = '', $parents='', $post_id = false ) {	echo get_the_category_list( $separator, $parents, $post_id );}/** * Retrieve category description. * * @since 1.0.0 * * @param int $category Optional. Category ID. Will use global category ID by default. * @return string Category description, available. */function category_description( $category = 0 ) {	return term_description( $category, 'category' );}/** * Display or retrieve the HTML dropdown list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'show_option_none' (string) - Text to display for showing no categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link get_categories()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'depth' (int) - The max depth. *     'tab_index' (int) - Tab index for select element. *     'name' (string) - The name attribute value for select element. *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted. *     'class' (string) - The class attribute value for select element. *     'selected' (int) - Which category ID is selected. *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category. * * The 'hierarchical' argument, which is disabled by default, will override the * depth argument, unless it is true. When the argument is false, it will * display all of the categories. When it is enabled it will use the value in * the 'depth' argument. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_dropdown_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'id', 'order' => 'ASC',		'show_last_update' => 0, 'show_count' => 0,		'hide_empty' => 1, 'child_of' => 0,		'exclude' => '', 'echo' => 1,		'selected' => 0, 'hierarchical' => 0,		'name' => 'cat', 'id' => '',		'class' => 'postform', 'depth' => 0,		'tab_index' => 0, 'taxonomy' => 'category',		'hide_if_empty' => false	);	$defaults['selected'] = ( is_category() ) ? get_query_var( 'cat' ) : 0;	// Back compat.	if ( isset( $args['type'] ) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$args['taxonomy'] = 'link_category';	}	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	$r['include_last_update_time'] = $r['show_last_update'];	extract( $r );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	$categories = get_terms( $taxonomy, $r );	$name = esc_attr( $name );	$class = esc_attr( $class );	$id = $id ? esc_attr( $id ) : $name;	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output = "<select name='$name' id='$id' class='$class' $tab_index_attribute>\n";	else		$output = '';	if ( empty($categories) && ! $r['hide_if_empty'] && !empty($show_option_none) ) {		$show_option_none = apply_filters( 'list_cats', $show_option_none );		$output .= "\t<option value='-1' selected='selected'>$show_option_none</option>\n";	}	if ( ! empty( $categories ) ) {		if ( $show_option_all ) {			$show_option_all = apply_filters( 'list_cats', $show_option_all );			$selected = ( '0' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='0'$selected>$show_option_all</option>\n";		}		if ( $show_option_none ) {			$show_option_none = apply_filters( 'list_cats', $show_option_none );			$selected = ( '-1' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='-1'$selected>$show_option_none</option>\n";		}		if ( $hierarchical )			$depth = $r['depth'];  // Walk the full depth.		else			$depth = -1; // Flat.		$output .= walk_category_dropdown_tree( $categories, $depth, $r );	}	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output .= "</select>\n";	$output = apply_filters( 'wp_dropdown_cats', $output );	if ( $echo )		echo $output;	return $output;}/** * Display or retrieve the HTML list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link * walk_category_dropdown_tree()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the * description instead of the category title. *     'feed' - See {@link get_categories()}. *     'feed_type' - See {@link get_categories()}. *     'feed_image' - See {@link get_categories()}. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'exclude_tree' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'current_category' (int) - See {@link get_categories()}. *     'hierarchical' (bool) - See {@link get_categories()}. *     'title_li' (string) - See {@link get_categories()}. *     'depth' (int) - The max depth. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_list_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => __('No categories'),		'orderby' => 'name', 'order' => 'ASC',		'show_last_update' => 0, 'style' => 'list',		'show_count' => 0, 'hide_empty' => 1,		'use_desc_for_title' => 1, 'child_of' => 0,		'feed' => '', 'feed_type' => '',		'feed_image' => '', 'exclude' => '',		'exclude_tree' => '', 'current_category' => 0,		'hierarchical' => true, 'title_li' => __( 'Categories' ),		'echo' => 1, 'depth' => 0,		'taxonomy' => 'category'	);	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] )		$r['pad_counts'] = true;	if ( isset( $r['show_date'] ) )		$r['include_last_update_time'] = $r['show_date'];	if ( true == $r['hierarchical'] ) {		$r['exclude_tree'] = $r['exclude'];		$r['exclude'] = '';	}	if ( !isset( $r['class'] ) )		$r['class'] = ( 'category' == $r['taxonomy'] ) ? 'categories' : $r['taxonomy'];	extract( $r );	if ( !taxonomy_exists($taxonomy) )		return false;	$categories = get_categories( $r );	$output = '';	if ( $title_li && 'list' == $style )			$output = '<li class="' . $class . '">' . $title_li . '<ul>';	if ( empty( $categories ) ) {		if ( ! empty( $show_option_none ) ) {			if ( 'list' == $style )				$output .= '<li>' . $show_option_none . '</li>';			else				$output .= $show_option_none;		}	} else {		global $wp_query;		if( !empty( $show_option_all ) )			if ( 'list' == $style )				$output .= '<li><a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a></li>';			else				$output .= '<a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a>';		if ( empty( $r['current_category'] ) && ( is_category() || is_tax() ) )			$r['current_category'] = $wp_query->get_queried_object_id();		if ( $hierarchical )			$depth = $r['depth'];		else			$depth = -1; // Flat.		$output .= walk_category_tree( $categories, $depth, $r );	}	if ( $title_li && 'list' == $style )		$output .= '</ul></li>';	$output = apply_filters( 'wp_list_categories', $output, $args );	if ( $echo )		echo $output;	else		return $output;}/** * Display tag cloud. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the top 45 tags in the tag cloud list. * * The 'topic_count_text_callback' argument is a function, which, given the count * of the posts  with that tag, returns a text for the tooltip of the tag link. * * The 'exclude' and 'include' arguments are used for the {@link get_tags()} * function. Only one should be used, because only one will be used and the * other ignored, if they are both set. * * @since 2.3.0 * * @param array|string $args Optional. Override default arguments. * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument. */function wp_tag_cloud( $args = '' ) {	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag', 'echo' => true	);	$args = wp_parse_args( $args, $defaults );	$tags = get_terms( $args['taxonomy'], array_merge( $args, array( 'orderby' => 'count', 'order' => 'DESC' ) ) ); // Always query top tags	if ( empty( $tags ) )		return;	foreach ( $tags as $key => $tag ) {		if ( 'edit' == $args['link'] )			$link = get_edit_tag_link( $tag->term_id, $args['taxonomy'] );		else			$link = get_term_link( intval($tag->term_id), $args['taxonomy'] );		if ( is_wp_error( $link ) )			return false;		$tags[ $key ]->link = $link;		$tags[ $key ]->id = $tag->term_id;	}	$return = wp_generate_tag_cloud( $tags, $args ); // Here's where those top tags get sorted according to $args	$return = apply_filters( 'wp_tag_cloud', $return, $args );	if ( 'array' == $args['format'] || empty($args['echo']) )		return $return;	echo $return;}/** * Default text for tooltip for tag links * * @param integer $count number of posts with that tag * @return string text for the tooltip of a tag link. */function default_topic_count_text( $count ) {	return sprintf( _n('%s topic', '%s topics', $count), number_format_i18n( $count ) );}/** * Default topic count scaling for tag links * * @param integer $count number of posts with that tag * @return integer scaled count */function default_topic_count_scale( $count ) {	return round(log10($count + 1) * 100);}/** * Generates a tag cloud (heatmap) from provided data. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'tag_cloud_sort' filter allows you to override the sorting. * Passed to the filter: $tags array and $args array, has to return the $tags array * after sorting it. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or * 'RAND'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the entire tag cloud list. * * The 'topic_count_text_callback' argument is a function, which given the count * of the posts  with that tag returns a text for the tooltip of the tag link. * * @todo Complete functionality. * @since 2.3.0 * * @param array $tags List of tags. * @param string|array $args Optional, override default arguments. * @return string */function wp_generate_tag_cloud( $tags, $args = '' ) {	global $wp_rewrite;	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 0,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'topic_count_text_callback' => 'default_topic_count_text',		'topic_count_scale_callback' => 'default_topic_count_scale', 'filter' => 1,	);	if ( !isset( $args['topic_count_text_callback'] ) && isset( $args['single_text'] ) && isset( $args['multiple_text'] ) ) {		$body = 'return sprintf (			_n(' . var_export($args['single_text'], true) . ', ' . var_export($args['multiple_text'], true) . ', $count),			number_format_i18n( $count ));';		$args['topic_count_text_callback'] = create_function('$count', $body);	}	$args = wp_parse_args( $args, $defaults );	extract( $args );	if ( empty( $tags ) )		return;	$tags_sorted = apply_filters( 'tag_cloud_sort', $tags, $args );	if ( $tags_sorted != $tags  ) { // the tags have been sorted by a plugin		$tags = $tags_sorted;		unset($tags_sorted);	} else {		if ( 'RAND' == $order ) {			shuffle($tags);		} else {			// SQL cannot save you; this is a second (potentially different) sort on a subset of data.			if ( 'name' == $orderby )				uasort( $tags, create_function('$a, $b', 'return strnatcasecmp($a->name, $b->name);') );			else				uasort( $tags, create_function('$a, $b', 'return ($a->count > $b->count);') );			if ( 'DESC' == $order )				$tags = array_reverse( $tags, true );		}	}	if ( $number > 0 )		$tags = array_slice($tags, 0, $number);	$counts = array();	$real_counts = array(); // For the alt tag	foreach ( (array) $tags as $key => $tag ) {		$real_counts[ $key ] = $tag->count;		$counts[ $key ] = $topic_count_scale_callback($tag->count);	}	$min_count = min( $counts );	$spread = max( $counts ) - $min_count;	if ( $spread <= 0 )		$spread = 1;	$font_spread = $largest - $smallest;	if ( $font_spread < 0 )		$font_spread = 1;	$font_step = $font_spread / $spread;	$a = array();	foreach ( $tags as $key => $tag ) {		$count = $counts[ $key ];		$real_count = $real_counts[ $key ];		$tag_link = '#' != $tag->link ? esc_url( $tag->link ) : '#';		$tag_id = isset($tags[ $key ]->id) ? $tags[ $key ]->id : $key;		$tag_name = $tags[ $key ]->name;		$a[] = "<a href='$tag_link' class='tag-link-$tag_id' title='" . esc_attr( $topic_count_text_callback( $real_count ) ) . "' style='font-size: " .			( $smallest + ( ( $count - $min_count ) * $font_step ) )			. "$unit;'>$tag_name</a>";	}	switch ( $format ) :	case 'array' :		$return =& $a;		break;	case 'list' :		$return = "<ul class='wp-tag-cloud'>\n\t<li>";		$return .= join( "</li>\n\t<li>", $a );		$return .= "</li>\n</ul>\n";		break;	default :		$return = join( $separator, $a );		break;	endswitch;    if ( $filter )		return apply_filters( 'wp_generate_tag_cloud', $return, $tags, $args );    else		return $return;}//// Helper functions///** * Retrieve HTML list content for category list. * * @uses Walker_Category to create HTML list content. * @since 2.1.0 * @see Walker_Category::walk() for parameters and return description. */function walk_category_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_Category;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}/** * Retrieve HTML dropdown (select) content for category list. * * @uses Walker_CategoryDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_CategoryDropdown::walk() for parameters and return description. */function walk_category_dropdown_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_CategoryDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}//// Tags///** * Retrieve the link to the tag. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters. * * @param int $tag_id Tag (term) ID. * @return string */function get_tag_link( $tag_id ) {	global $wp_rewrite;	$taglink = $wp_rewrite->get_tag_permastruct();	$tag = &get_term( $tag_id, 'post_tag' );	if ( is_wp_error( $tag ) )		return $tag;	$slug = $tag->slug;	if ( empty( $taglink ) ) {		$file = get_option( 'home' ) . '/';		$taglink = $file . '?tag=' . $slug;	} else {		$taglink = str_replace( '%tag%', $slug, $taglink );		$taglink = get_option( 'home' ) . user_trailingslashit( $taglink, 'category' );	}	return apply_filters( 'tag_link', $taglink, $tag_id );}/** * Retrieve the tags for a post. * * @since 2.3.0 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags. * * @param int $id Post ID. * @return array */function get_the_tags( $id = 0 ) {	return apply_filters( 'get_the_tags', get_the_terms( $id, 'post_tag' ) );}/** * Retrieve the tags for a post formatted as a string. * * @since 2.3.0 * @uses apply_filters() Calls 'the_tags' filter on string list of tags. * * @param string $before Optional. Before tags. * @param string $sep Optional. Between tags. * @param string $after Optional. After tags. * @return string */function get_the_tag_list( $before = '', $sep = '', $after = '' ) {	return apply_filters( 'the_tags', get_the_term_list( 0, 'post_tag', $before, $sep, $after ), $before, $sep, $after);}/** * Retrieve the tags for a post. * * @since 2.3.0 * * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function the_tags( $before = null, $sep = ', ', $after = '' ) {	if ( null === $before )		$before = __('Tags: ');	echo get_the_tag_list($before, $sep, $after);}/** * Retrieve tag description. * * @since 2.8 * * @param int $tag Optional. Tag ID. Will use global tag ID by default. * @return string Tag description, available. */function tag_description( $tag = 0 ) {	return term_description( $tag );}/** * Retrieve term description. * * @since 2.8 * * @param int $term Optional. Term ID. Will use global term ID by default. * @return string Term description, available. */function term_description( $term = 0, $taxonomy = 'post_tag' ) {	if ( !$term && ( is_tax() || is_tag() || is_category() ) ) {		global $wp_query;		$term = $wp_query->get_queried_object();		$taxonomy = $term->taxonomy;		$term = $term->term_id;	}	$description = get_term_field( 'description', $term, $taxonomy );	return is_wp_error( $description ) ? '' : $description;}/** * Retrieve the terms of the taxonomy that are attached to the post. * * This function can only be used within the loop. * * @since 2.5.0 * * @param int $id Post ID. Is not optional. * @param string $taxonomy Taxonomy name. * @return array|bool False on failure. Array of term objects on success. */function get_the_terms( $id = 0, $taxonomy ) {	global $post; 	$id = (int) $id;	if ( !$id ) {		if ( !$post->ID )			return false;		else			$id = (int) $post->ID;	}	$terms = get_object_term_cache( $id, $taxonomy );	if ( false === $terms )		$terms = wp_get_object_terms( $id, $taxonomy );	if ( empty( $terms ) )		return false;	return $terms;}/** * Retrieve a post's terms as a list with specified format. * * @since 2.5.0 * * @param int $id Post ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function get_the_term_list( $id = 0, $taxonomy, $before = '', $sep = '', $after = '' ) {	$terms = get_the_terms( $id, $taxonomy );	if ( is_wp_error( $terms ) )		return $terms;	if ( empty( $terms ) )		return false;	foreach ( $terms as $term ) {		$link = get_term_link( $term, $taxonomy );		if ( is_wp_error( $link ) )			return $link;		$term_links[] = '<a href="' . $link . '" rel="tag">' . $term->name . '</a>';	}	$term_links = apply_filters( "term_links-$taxonomy", $term_links );	return $before . join( $sep, $term_links ) . $after;}/** * Display the terms in a list. * * @since 2.5.0 * * @param int $id Term ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return null|bool False on WordPress error. Returns null when displaying. */function the_terms( $id, $taxonomy, $before = '', $sep = ', ', $after = '' ) {	$term_list = get_the_term_list( $id, $taxonomy, $before, $sep, $after );	if ( is_wp_error( $term_list ) )		return false;	echo apply_filters('the_terms', $term_list, $taxonomy, $before, $sep, $after);}/** * Check if the current post has any of given tags. * * The given tags are checked against the post's tags' term_ids, names and slugs. * Tags given as integers will only be checked against the post's tags' term_ids. * If no tags are given, determines if post has any tags. * * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 2.6.0 * * @uses is_object_in_term() * * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified). */function has_tag( $tag = '', $_post = null ) {	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'post_tag', $tag );	if ( is_wp_error( $r ) )		return false;	return $r;}?>
<?php/** * WordPress User Page * * Handles authentication, registering, resetting passwords, forgot password, * and other user handling. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php' );// Redirect to https login if forced to use SSLif ( force_ssl_admin() && !is_ssl() ) {	if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {		wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));		exit();	} else {		wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);		exit();	}}/** * Outputs the header for the login page. * * @uses do_action() Calls the 'login_head' for outputting HTML in the Log In *		header. * @uses apply_filters() Calls 'login_headerurl' for the top login link. * @uses apply_filters() Calls 'login_headertitle' for the top login title. * @uses apply_filters() Calls 'login_message' on the message to display in the *		header. * @uses $error The error global, which is checked for displaying errors. * * @param string $title Optional. WordPress Log In Page title to display in *		<title/> element. * @param string $message Optional. Message to display in header. * @param WP_Error $wp_error Optional. WordPress Error Object */function login_header($title = 'Log In', $message = '', $wp_error = '') {	global $error, $is_iphone, $interim_login, $current_site;	// Don't index any of these forms	add_filter( 'pre_option_blog_public', '__return_zero' );	add_action( 'login_head', 'noindex' );	if ( empty($wp_error) )		$wp_error = new WP_Error();	// Shake it!	$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );	$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );	if ( $shake_error_codes && $wp_error->get_error_code() && in_array( $wp_error->get_error_code(), $shake_error_codes ) )		add_action( 'login_head', 'wp_shake_js', 12 );	?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<title><?php bloginfo('name'); ?> &rsaquo; <?php echo $title; ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><?php	wp_admin_css( 'login', true );	wp_admin_css( 'colors-fresh', true );	if ( $is_iphone ) { ?>	<meta name="viewport" content="width=320; initial-scale=0.9; maximum-scale=1.0; user-scalable=0;" />	<style type="text/css" media="screen">	form { margin-left: 0px; }	#login { margin-top: 20px; }	</style><?php	} elseif ( isset($interim_login) && $interim_login ) { ?>	<style type="text/css" media="all">	.login #login { margin: 20px auto; }	</style><?php	}	do_action('login_head'); ?></head><body class="login"><?php   if ( !is_multisite() ) { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', 'http://wordpress.org/'); ?>" title="<?php echo apply_filters('login_headertitle', __('Powered by WordPress')); ?>"><?php bloginfo('name'); ?></a></h1><?php   } else { ?><div id="login"><h1><a href="<?php echo apply_filters('login_headerurl', network_home_url() ); ?>" title="<?php echo apply_filters('login_headertitle', $current_site->site_name ); ?>"><span class="hide"><?php bloginfo('name'); ?></span></a></h1><?php   }	$message = apply_filters('login_message', $message);	if ( !empty( $message ) ) echo $message . "\n";	// Incase a plugin uses $error rather than the $errors object	if ( !empty( $error ) ) {		$wp_error->add('error', $error);		unset($error);	}	if ( $wp_error->get_error_code() ) {		$errors = '';		$messages = '';		foreach ( $wp_error->get_error_codes() as $code ) {			$severity = $wp_error->get_error_data($code);			foreach ( $wp_error->get_error_messages($code) as $error ) {				if ( 'message' == $severity )					$messages .= '	' . $error . "<br />\n";				else					$errors .= '	' . $error . "<br />\n";			}		}		if ( !empty($errors) )			echo '<div id="login_error">' . apply_filters('login_errors', $errors) . "</div>\n";		if ( !empty($messages) )			echo '<p class="message">' . apply_filters('login_messages', $messages) . "</p>\n";	}} // End of login_header()function wp_shake_js() {	global $is_iphone;	if ( $is_iphone )		return;?><script type="text/javascript">addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function s(id,pos){g(id).left=pos+'px';}function g(id){return document.getElementById(id).style;}function shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}addLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});</script><?php}/** * Handles sending password retrieval email to user. * * @uses $wpdb WordPress Database object * * @return bool|WP_Error True: when finish. WP_Error on error */function retrieve_password() {	global $wpdb, $current_site;	$errors = new WP_Error();	if ( empty( $_POST['user_login'] ) && empty( $_POST['user_email'] ) )		$errors->add('empty_username', __('<strong>ERROR</strong>: Enter a username or e-mail address.'));	if ( strpos($_POST['user_login'], '@') ) {		$user_data = get_user_by_email(trim($_POST['user_login']));		if ( empty($user_data) )			$errors->add('invalid_email', __('<strong>ERROR</strong>: There is no user registered with that email address.'));	} else {		$login = trim($_POST['user_login']);		$user_data = get_userdatabylogin($login);	}	do_action('lostpassword_post');	if ( $errors->get_error_code() )		return $errors;	if ( !$user_data ) {		$errors->add('invalidcombo', __('<strong>ERROR</strong>: Invalid username or e-mail.'));		return $errors;	}	// redefining user_login ensures we return the right case in the email	$user_login = $user_data->user_login;	$user_email = $user_data->user_email;	do_action('retreive_password', $user_login);  // Misspelled and deprecated	do_action('retrieve_password', $user_login);	$allow = apply_filters('allow_password_reset', true, $user_data->ID);	if ( ! $allow )		return new WP_Error('no_password_reset', __('Password reset is not allowed for this user'));	else if ( is_wp_error($allow) )		return $allow;	$key = $wpdb->get_var($wpdb->prepare("SELECT user_activation_key FROM $wpdb->users WHERE user_login = %s", $user_login));	if ( empty($key) ) {		// Generate something random for a key...		$key = wp_generate_password(20, false);		do_action('retrieve_password_key', $user_login, $key);		// Now insert the new md5 key into the db		$wpdb->update($wpdb->users, array('user_activation_key' => $key), array('user_login' => $user_login));	}	$message = __('Someone has asked to reset the password for the following site and username.') . "\r\n\r\n";	$message .= network_site_url() . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= __('To reset your password visit the following address, otherwise just ignore this email and nothing will happen.') . "\r\n\r\n";	$message .= network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Password Reset'), $blogname );	$title = apply_filters('retrieve_password_title', $title);	$message = apply_filters('retrieve_password_message', $message, $key);	if ( $message && !wp_mail($user_email, $title, $message) )		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	return true;}/** * Handles resetting the user's password. * * @uses $wpdb WordPress Database object * * @param string $key Hash to validate sending user's password * @return bool|WP_Error */function reset_password($key, $login) {	global $wpdb;	$key = preg_replace('/[^a-z0-9]/i', '', $key);	if ( empty( $key ) || !is_string( $key ) )		return new WP_Error('invalid_key', __('Invalid key'));	if ( empty($login) || !is_string($login) )		return new WP_Error('invalid_key', __('Invalid key'));	$user = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->users WHERE user_activation_key = %s AND user_login = %s", $key, $login));	if ( empty( $user ) )		return new WP_Error('invalid_key', __('Invalid key'));	// Generate something random for a password...	$new_pass = wp_generate_password();	do_action('password_reset', $user, $new_pass);	wp_set_password($new_pass, $user->ID);	update_user_option($user->ID, 'default_password_nag', true, true); //Set up the Password change nag.	$message  = sprintf(__('Username: %s'), $user->user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $new_pass) . "\r\n";	$message .= site_url('wp-login.php', 'login') . "\r\n";	if ( is_multisite() )		$blogname = $GLOBALS['current_site']->site_name;	else		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$title = sprintf( __('[%s] Your new password'), $blogname );	$title = apply_filters('password_reset_title', $title);	$message = apply_filters('password_reset_message', $message, $new_pass);	if ( $message && !wp_mail($user->user_email, $title, $message) )  		wp_die( __('The e-mail could not be sent.') . "<br />\n" . __('Possible reason: your host may have disabled the mail() function...') );	wp_password_change_notification($user);	return true;}/** * Handles registering a new user. * * @param string $user_login User's username for logging in * @param string $user_email User's email address to send password and add * @return int|WP_Error Either user's ID or error on failure. */function register_new_user( $user_login, $user_email ) {	$errors = new WP_Error();	$sanitized_user_login = sanitize_user( $user_login );	$user_email = apply_filters( 'user_registration_email', $user_email );	// Check the username	if ( $sanitized_user_login == '' ) {		$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Please enter a username.' ) );	} elseif ( ! validate_username( $user_login ) ) {		$errors->add( 'invalid_username', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ) );		$sanitized_user_login = '';	} elseif ( username_exists( $sanitized_user_login ) ) {		$errors->add( 'username_exists', __( '<strong>ERROR</strong>: This username is already registered, please choose another one.' ) );	}	// Check the e-mail address	if ( $user_email == '' ) {		$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please type your e-mail address.' ) );	} elseif ( ! is_email( $user_email ) ) {		$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The email address isn&#8217;t correct.' ) );		$user_email = '';	} elseif ( email_exists( $user_email ) ) {		$errors->add( 'email_exists', __( '<strong>ERROR</strong>: This email is already registered, please choose another one.' ) );	}	do_action( 'register_post', $sanitized_user_login, $user_email, $errors );	$errors = apply_filters( 'registration_errors', $errors, $sanitized_user_login, $user_email );	if ( $errors->get_error_code() )		return $errors;	$user_pass = wp_generate_password();	$user_id = wp_create_user( $sanitized_user_login, $user_pass, $user_email );	if ( ! $user_id ) {		$errors->add( 'registerfail', sprintf( __( '<strong>ERROR</strong>: Couldn&#8217;t register you... please contact the <a href="mailto:%s">webmaster</a> !' ), get_option( 'admin_email' ) ) );		return $errors;	}	update_user_option( $user_id, 'default_password_nag', true, true ); //Set up the Password change nag.	wp_new_user_notification( $user_id, $user_pass );	return $user_id;}//// Main//$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : 'login';$errors = new WP_Error();if ( isset($_GET['key']) )	$action = 'resetpass';// validate action so as to default to the login screenif ( !in_array($action, array('logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login'), true) && false === has_filter('login_form_' . $action) )	$action = 'login';nocache_headers();header('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));if ( defined('RELOCATE') ) { // Move flag is set	if ( isset( $_SERVER['PATH_INFO'] ) && ($_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF']) )		$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );	$schema = is_ssl() ? 'https://' : 'http://';	if ( dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) != get_option('siteurl') )		update_option('siteurl', dirname($schema . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']) );}//Set a cookie now to see if they are supported by the browser.setcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN);if ( SITECOOKIEPATH != COOKIEPATH )	setcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN);// allow plugins to override the default actions, and to add extra actions if they wantdo_action('login_form_' . $action);$http_post = ('POST' == $_SERVER['REQUEST_METHOD']);switch ($action) {case 'logout' :	check_admin_referer('log-out');	wp_logout();	$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?loggedout=true';	wp_safe_redirect( $redirect_to );	exit();break;case 'lostpassword' :case 'retrievepassword' :	if ( $http_post ) {		$errors = retrieve_password();		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';			wp_safe_redirect( $redirect_to );			exit();		}	}	if ( isset($_GET['error']) && 'invalidkey' == $_GET['error'] ) $errors->add('invalidkey', __('Sorry, that key does not appear to be valid.'));	$redirect_to = apply_filters( 'lostpassword_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	do_action('lost_password');	login_header(__('Lost Password'), '<p class="message">' . __('Please enter your username or e-mail address. You will receive a new password via e-mail.') . '</p>', $errors);	$user_login = isset($_POST['user_login']) ? stripslashes($_POST['user_login']) : '';?><form name="lostpasswordform" id="lostpasswordform" action="<?php echo site_url('wp-login.php?action=lostpassword', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username or E-mail:') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p><?php do_action('lostpassword_form'); ?>	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Get New Password'); ?>" tabindex="100" /></p></form><p id="nav"><?php if (get_option('users_can_register')) : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'resetpass' :case 'rp' :	$errors = reset_password($_GET['key'], $_GET['login']);	if ( ! is_wp_error($errors) ) {		wp_redirect('wp-login.php?checkemail=newpass');		exit();	}	wp_redirect('wp-login.php?action=lostpassword&error=invalidkey');	exit();break;case 'register' :	if ( is_multisite() ) {		// Multisite uses wp-signup.php		wp_redirect( apply_filters( 'wp_signup_location', get_bloginfo('wpurl') . '/wp-signup.php' ) );		exit;	}	if ( !get_option('users_can_register') ) {		wp_redirect('wp-login.php?registration=disabled');		exit();	}	$user_login = '';	$user_email = '';	if ( $http_post ) {		require_once( ABSPATH . WPINC . '/registration.php');		$user_login = $_POST['user_login'];		$user_email = $_POST['user_email'];		$errors = register_new_user($user_login, $user_email);		if ( !is_wp_error($errors) ) {			$redirect_to = !empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';			wp_safe_redirect( $redirect_to );			exit();		}	}	$redirect_to = apply_filters( 'registration_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );	login_header(__('Registration Form'), '<p class="message register">' . __('Register For This Site') . '</p>', $errors);?><form name="registerform" id="registerform" action="<?php echo site_url('wp-login.php?action=register', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="user_login" id="user_login" class="input" value="<?php echo esc_attr(stripslashes($user_login)); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('E-mail') ?><br />		<input type="text" name="user_email" id="user_email" class="input" value="<?php echo esc_attr(stripslashes($user_email)); ?>" size="25" tabindex="20" /></label>	</p><?php do_action('register_form'); ?>	<p id="reg_passmail"><?php _e('A password will be e-mailed to you.') ?></p>	<br class="clear" />	<input type="hidden" name="redirect_to" value="<?php echo esc_attr( $redirect_to ); ?>" />	<p class="submit"><input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Register'); ?>" tabindex="100" /></p></form><p id="nav"><a href="<?php echo site_url('wp-login.php', 'login') ?>"><?php _e('Log in') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><script type="text/javascript">try{document.getElementById('user_login').focus();}catch(e){}if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;case 'login' :default:	$secure_cookie = '';	$interim_login = isset($_REQUEST['interim-login']);	// If the user wants ssl but the session is not ssl, force a secure cookie.	if ( !empty($_POST['log']) && !force_ssl_admin() ) {		$user_name = sanitize_user($_POST['log']);		if ( $user = get_userdatabylogin($user_name) ) {			if ( get_user_option('use_ssl', $user->ID) ) {				$secure_cookie = true;				force_ssl_admin(true);			}		}	}	if ( isset( $_REQUEST['redirect_to'] ) ) {		$redirect_to = $_REQUEST['redirect_to'];		// Redirect to https if user wants ssl		if ( $secure_cookie && false !== strpos($redirect_to, 'wp-admin') )			$redirect_to = preg_replace('|^http://|', 'https://', $redirect_to);	} else {		$redirect_to = admin_url();	}	$reauth = empty($_REQUEST['reauth']) ? false : true;	// If the user was redirected to a secure login form from a non-secure admin page, and secure login is required but secure admin is not, then don't use a secure	// cookie and redirect back to the referring non-secure admin page.  This allows logins to always be POSTed over SSL while allowing the user to choose visiting	// the admin via http or https.	if ( !$secure_cookie && is_ssl() && force_ssl_login() && !force_ssl_admin() && ( 0 !== strpos($redirect_to, 'https') ) && ( 0 === strpos($redirect_to, 'http') ) )		$secure_cookie = false;	$user = wp_signon('', $secure_cookie);	$redirect_to = apply_filters('login_redirect', $redirect_to, isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '', $user);	if ( !is_wp_error($user) && !$reauth ) {		if ( $interim_login ) {			$message = '<p class="message">' . __('You have logged in successfully.') . '</p>';			login_header( '', $message ); ?>			<script type="text/javascript">setTimeout( function(){window.close()}, 8000);</script>			<p class="alignright">			<input type="button" class="button-primary" value="<?php esc_attr_e('Close'); ?>" onclick="window.close()" /></p>			</div></body></html><?php		exit;		}		// If the user can't edit posts, send them to their profile.		if ( !$user->has_cap('edit_posts') && ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) )			$redirect_to = admin_url('profile.php');		wp_safe_redirect($redirect_to);		exit();	}	$errors = $user;	// Clear errors if loggedout is set.	if ( !empty($_GET['loggedout']) || $reauth )		$errors = new WP_Error();	// If cookies are disabled we can't log in even with a valid user+pass	if ( isset($_POST['testcookie']) && empty($_COOKIE[TEST_COOKIE]) )		$errors->add('test_cookie', __("<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href='http://www.google.com/cookies.html'>enable cookies</a> to use WordPress."));	// Some parts of this script use the main login form to display a message	if		( isset($_GET['loggedout']) && TRUE == $_GET['loggedout'] )		$errors->add('loggedout', __('You are now logged out.'), 'message');	elseif	( isset($_GET['registration']) && 'disabled' == $_GET['registration'] )		$errors->add('registerdisabled', __('User registration is currently not allowed.'));	elseif	( isset($_GET['checkemail']) && 'confirm' == $_GET['checkemail'] )		$errors->add('confirm', __('Check your e-mail for the confirmation link.'), 'message');	elseif	( isset($_GET['checkemail']) && 'newpass' == $_GET['checkemail'] )		$errors->add('newpass', __('Check your e-mail for your new password.'), 'message');	elseif	( isset($_GET['checkemail']) && 'registered' == $_GET['checkemail'] )		$errors->add('registered', __('Registration complete. Please check your e-mail.'), 'message');	elseif	( $interim_login )		$errors->add('expired', __('Your session has expired. Please log-in again.'), 'message');	// Clear any stale cookies.	if ( $reauth )		wp_clear_auth_cookie();	login_header(__('Log In'), '', $errors);	if ( isset($_POST['log']) )		$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr(stripslashes($_POST['log'])) : '';	$rememberme = ! empty( $_POST['rememberme'] );?><form name="loginform" id="loginform" action="<?php echo site_url('wp-login.php', 'login_post') ?>" method="post">	<p>		<label><?php _e('Username') ?><br />		<input type="text" name="log" id="user_login" class="input" value="<?php echo esc_attr($user_login); ?>" size="20" tabindex="10" /></label>	</p>	<p>		<label><?php _e('Password') ?><br />		<input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="20" /></label>	</p><?php do_action('login_form'); ?>	<p class="forgetmenot"><label><input name="rememberme" type="checkbox" id="rememberme" value="forever" tabindex="90"<?php checked( $rememberme ); ?> /> <?php esc_attr_e('Remember Me'); ?></label></p>	<p class="submit">		<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="<?php esc_attr_e('Log In'); ?>" tabindex="100" /><?php	if ( $interim_login ) { ?>		<input type="hidden" name="interim-login" value="1" /><?php	} else { ?>		<input type="hidden" name="redirect_to" value="<?php echo esc_attr($redirect_to); ?>" /><?php 	} ?>		<input type="hidden" name="testcookie" value="1" />	</p></form><?php if ( !$interim_login ) { ?><p id="nav"><?php if ( isset($_GET['checkemail']) && in_array( $_GET['checkemail'], array('confirm', 'newpass') ) ) : ?><?php elseif ( get_option('users_can_register') ) : ?><a href="<?php echo site_url('wp-login.php?action=register', 'login') ?>"><?php _e('Register') ?></a> |<a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php else : ?><a href="<?php echo site_url('wp-login.php?action=lostpassword', 'login') ?>" title="<?php _e('Password Lost and Found') ?>"><?php _e('Lost your password?') ?></a><?php endif; ?></p></div><p id="backtoblog"><a href="<?php bloginfo('url'); ?>/" title="<?php _e('Are you lost?') ?>"><?php printf(__('&larr; Back to %s'), get_bloginfo('title', 'display' )); ?></a></p><?php } else { ?></div><?php } ?><script type="text/javascript">function wp_attempt_focus(){setTimeout( function(){ try{<?php if ( $user_login || $interim_login ) { ?>d = document.getElementById('user_pass');<?php } else { ?>d = document.getElementById('user_login');<?php } ?>d.value = '';d.focus();} catch(e){}}, 200);}<?php if ( !$error ) { ?>wp_attempt_focus();<?php } ?>if(typeof wpOnload=='function')wpOnload();</script></body></html><?phpbreak;} // end action switch?>
<?php/** * WordPress Administration Media API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_tabs() {	$_default_tabs = array(		'type' => __('From Computer'), // handler action suffix => tab text		'type_url' => __('From URL'),		'gallery' => __('Gallery'),		'library' => __('Media Library')	);	return apply_filters('media_upload_tabs', $_default_tabs);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tabs * @return unknown */function update_gallery_tab($tabs) {	global $wpdb;	if ( !isset($_REQUEST['post_id']) ) {		unset($tabs['gallery']);		return $tabs;	}	$post_id = intval($_REQUEST['post_id']);	if ( $post_id )		$attachments = intval( $wpdb->get_var( $wpdb->prepare( "SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d", $post_id ) ) );	if ( empty($attachments) ) {		unset($tabs['gallery']);		return $tabs;	}	$tabs['gallery'] = sprintf(__('Gallery (%s)'), "<span id='attachments-count'>$attachments</span>");	return $tabs;}add_filter('media_upload_tabs', 'update_gallery_tab');/** * {@internal Missing Short Description}} * * @since unknown */function the_media_upload_tabs() {	global $redir_tab;	$tabs = media_upload_tabs();	if ( !empty($tabs) ) {		echo "<ul id='sidemenu'>\n";		if ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) )			$current = $redir_tab;		elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) )			$current = $_GET['tab'];		else			$current = apply_filters('media_upload_default_tab', 'type');		foreach ( $tabs as $callback => $text ) {			$class = '';			if ( $current == $callback )				$class = " class='current'";			$href = add_query_arg(array('tab'=>$callback, 's'=>false, 'paged'=>false, 'post_mime_type'=>false, 'm'=>false));			$link = "<a href='" . esc_url($href) . "'$class>$text</a>";			echo "\t<li id='" . esc_attr("tab-$callback") . "'>$link</li>\n";		}		echo "</ul>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $rel * @param unknown_type $size * @return unknown */function get_image_send_to_editor($id, $caption, $title, $align, $url='', $rel = false, $size='medium', $alt = '') {	$html = get_image_tag($id, $alt, $title, $align, $size);	$rel = $rel ? ' rel="attachment wp-att-' . esc_attr($id).'"' : '';	if ( $url )		$html = '<a href="' . esc_attr($url) . "\"$rel>$html</a>";	$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );	return $html;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $size * @return unknown */function image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {	if ( empty($caption) || apply_filters( 'disable_captions', '' ) )		return $html;	$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';	if ( ! preg_match( '/width="([0-9]+)/', $html, $matches ) )		return $html;	$width = $matches[1];	$html = preg_replace( '/(class=["\'][^\'"]*)align(none|left|right|center)\s?/', '$1', $html );	if ( empty($align) )		$align = 'none';	$shcode = '[caption id="' . $id . '" align="align' . $align	. '" width="' . $width . '" caption="' . addslashes($caption) . '"]' . $html . '[/caption]';	return apply_filters( 'image_add_caption_shortcode', $shcode, $html );}add_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html */function media_send_to_editor($html) {?><script type="text/javascript">/* <![CDATA[ */var win = window.dialogArguments || opener || parent || top;win.send_to_editor('<?php echo addslashes($html); ?>');/* ]]> */</script><?php	exit;}/** * {@internal Missing Short Description}} * * This handles the file upload POST itself, creating the attachment post. * * @since unknown * * @param string $file_id Index into the {@link $_FILES} array of the upload * @param int $post_id The post ID the media is associated with * @param array $post_data allows you to overwrite some of the attachment * @param array $overrides allows you to override the {@link wp_handle_upload()} behavior * @return int the ID of the attachment */function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {	$time = current_time('mysql');	if ( $post = get_post($post_id) ) {		if ( substr( $post->post_date, 0, 4 ) > 0 )			$time = $post->post_date;	}	$name = $_FILES[$file_id]['name'];	$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$name_parts = pathinfo($name);	$name = trim( substr( $name, 0, -(1 + strlen($name_parts['extension'])) ) );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = $name;	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the data	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );	}	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file_array * @param unknown_type $post_id * @param unknown_type $desc * @param unknown_type $post_data * @return unknown */function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array()) {	$overrides = array('test_form'=>false);	$file = wp_handle_sideload($file_array, $overrides);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = preg_replace('/\.[^.]+$/', '', basename($file));	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	$title = @$desc;	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the attachment metadata	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		return $url;	}	return $id;}/** * {@internal Missing Short Description}} * * Wrap iframe content (produced by $content_func) in a doctype, html head/body * etc any additional function args will be passed to content_func. * * @since unknown * * @param unknown_type $content_func */function wp_iframe($content_func /* ... */) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );// Check callback name for 'media'if ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) ) || 0 === strpos( $content_func, 'media' ) )	wp_enqueue_style( 'media' );wp_enqueue_style( 'ie' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time(); ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup';//]]></script><?phpdo_action('admin_enqueue_scripts', 'media-upload-popup');do_action('admin_print_styles-media-upload-popup');do_action('admin_print_styles');do_action('admin_print_scripts-media-upload-popup');do_action('admin_print_scripts');do_action('admin_head-media-upload-popup');do_action('admin_head');if ( is_string($content_func) )	do_action( "admin_head_{$content_func}" );?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>><?php	$args = func_get_args();	$args = array_slice($args, 1);	call_user_func_array($content_func, $args);	do_action('admin_print_footer_scripts');?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html><?php}/** * {@internal Missing Short Description}} * * @since unknown */function media_buttons() {	$do_image = $do_audio = $do_video = true;	if ( is_multisite() ) {		$media_buttons = get_site_option( 'mu_media_buttons' );		if ( empty($media_buttons['image']) )			$do_image = false;		if ( empty($media_buttons['audio']) )			$do_audio = false;		if ( empty($media_buttons['video']) )			$do_video = false;	}	$out = '';	if ( $do_image )		$out .= _media_button(__('Add an Image'), 'images/media-button-image.gif?ver=20100531', 'image');	if ( $do_video )		$out .= _media_button(__('Add Video'), 'images/media-button-video.gif?ver=20100531', 'video');	if ( $do_audio )		$out .= _media_button(__('Add Audio'), 'images/media-button-music.gif?ver=20100531', 'audio');	$out .= _media_button(__('Add Media'), 'images/media-button-other.gif?ver=20100531', 'media');	$context = apply_filters('media_buttons_context', __('Upload/Insert %s'));	printf($context, $out);}add_action( 'media_buttons', 'media_buttons' );function _media_button($title, $icon, $type) {	return "<a href='" . esc_url( get_upload_iframe_src($type) ) . "' id='add_$type' class='thickbox' title='$title'><img src='" . esc_url( admin_url( $icon ) ) . "' alt='$title' /></a>";}function get_upload_iframe_src($type) {	global $post_ID, $temp_ID;	$uploading_iframe_ID = (int) (0 == $post_ID ? $temp_ID : $post_ID);	$upload_iframe_src = add_query_arg('post_id', $uploading_iframe_ID, 'media-upload.php');	if ( 'media' != $type )		$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);	$upload_iframe_src = apply_filters($type . '_upload_iframe_src', $upload_iframe_src);	return add_query_arg('TB_iframe', true, $upload_iframe_src);}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_form_handler() {	check_admin_referer('media-form');	$errors = null;	if ( isset($_POST['send']) ) {		$keys = array_keys($_POST['send']);		$send_id = (int) array_shift($keys);	}	if ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {		$post = $_post = get_post($attachment_id, ARRAY_A);		if ( isset($attachment['post_content']) )			$post['post_content'] = $attachment['post_content'];		if ( isset($attachment['post_title']) )			$post['post_title'] = $attachment['post_title'];		if ( isset($attachment['post_excerpt']) )			$post['post_excerpt'] = $attachment['post_excerpt'];		if ( isset($attachment['menu_order']) )			$post['menu_order'] = $attachment['menu_order'];		if ( isset($send_id) && $attachment_id == $send_id ) {			if ( isset($attachment['post_parent']) )				$post['post_parent'] = $attachment['post_parent'];		}		$post = apply_filters('attachment_fields_to_save', $post, $attachment);		if ( isset($attachment['image_alt']) ) {			$image_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);			if ( $image_alt != stripslashes($attachment['image_alt']) ) {				$image_alt = wp_strip_all_tags( stripslashes($attachment['image_alt']), true );				// update_meta expects slashed				update_post_meta( $attachment_id, '_wp_attachment_image_alt', addslashes($image_alt) );			}		}		if ( isset($post['errors']) ) {			$errors[$attachment_id] = $post['errors'];			unset($post['errors']);		}		if ( $post != $_post )			wp_update_post($post);		foreach ( get_attachment_taxonomies($post) as $t ) {			if ( isset($attachment[$t]) )				wp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);		}	}	if ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>		<script type="text/javascript">		/* <![CDATA[ */		var win = window.dialogArguments || opener || parent || top;		win.tb_remove();		/* ]]> */		</script>		<?php		exit;	}	if ( isset($send_id) ) {		$attachment = stripslashes_deep( $_POST['attachments'][$send_id] );		$html = $attachment['post_title'];		if ( !empty($attachment['url']) ) {			$rel = '';			if ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )				$rel = " rel='attachment wp-att-" . esc_attr($send_id) . "'";			$html = "<a href='{$attachment['url']}'$rel>$html</a>";		}		$html = apply_filters('media_send_to_editor', $html, $send_id, $attachment);		return media_send_to_editor($html);	}	return $errors;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_image() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$alt = $align = '';		$src = $_POST['insertonly']['src'];		if ( !empty($src) && !strpos($src, '://') )			$src = "http://$src";		$alt = esc_attr($_POST['insertonly']['alt']);		if ( isset($_POST['insertonly']['align']) ) {			$align = esc_attr($_POST['insertonly']['align']);			$class = " class='align$align'";		}		if ( !empty($src) )			$html = "<img src='" . esc_url($src) . "' alt='$alt'$class />";		$html = apply_filters('image_send_to_editor_url', $html, esc_url_raw($src), $alt, $align);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'image', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'image', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $post_id * @param unknown_type $desc * @return unknown */function media_sideload_image($file, $post_id, $desc = null) {	if (!empty($file) ) {		// Download file to temp location		$tmp = download_url($file);		// Set variables for storage		// fix file filename for query strings		preg_match('/[^\?]+\.(jpg|JPG|jpe|JPE|jpeg|JPEG|gif|GIF|png|PNG)/', $file, $matches);		$file_array['name'] = basename($matches[0]);		$file_array['tmp_name'] = $tmp;		// If error storing temporarily, unlink		if ( is_wp_error($tmp) ) {			@unlink($file_array['tmp_name']);			$file_array['tmp_name'] = '';		}		// do the validation and storage stuff		$id = media_handle_sideload($file_array, $post_id, @$desc);		$src = $id;		// If error storing permanently, unlink		if ( is_wp_error($id) ) {			@unlink($file_array['tmp_name']);			return $id;		}	}	// Finally check to make sure the file has been saved, then return the html	if ( !empty($src) ) {		$alt = @$desc;		$html = "<img src='$src' alt='$alt' />";		return $html;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_audio() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('audio_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'audio', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'audio', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_video() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);        if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('video_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'video', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'video', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_file() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )			$title = basename($href);		if ( !empty($title) && !empty($href) )			$html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('file_send_to_editor_url', $html, esc_url_raw($href), $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'file', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'file', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_gallery() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	wp_enqueue_script('admin-gallery');	return wp_iframe( 'media_upload_gallery_form', $errors );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_library() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	return wp_iframe( 'media_upload_library_form', $errors );}/** * Retrieve HTML for the image alignment radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_align_input_fields( $post, $checked = '' ) {	if ( empty($checked) )		$checked = get_user_setting('align', 'none');	$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));	if ( !array_key_exists( (string) $checked, $alignments ) )		$checked = 'none';	$out = array();	foreach ( $alignments as $name => $label ) {		$name = esc_attr($name);		$out[] = "<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'".		 	( $checked == $name ? " checked='checked'" : "" ) .			" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>";	}	return join("\n", $out);}/** * Retrieve HTML for the size radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_size_input_fields( $post, $check = '' ) {		// get a list of the actual pixel dimensions of each possible intermediate version of this image		$size_names = array('thumbnail' => __('Thumbnail'), 'medium' => __('Medium'), 'large' => __('Large'), 'full' => __('Full Size'));		if ( empty($check) )			$check = get_user_setting('imgsize', 'medium');		foreach ( $size_names as $size => $label ) {			$downsize = image_downsize($post->ID, $size);			$checked = '';			// is this size selectable?			$enabled = ( $downsize[3] || 'full' == $size );			$css_id = "image-size-{$size}-{$post->ID}";			// if this size is the default but that's not available, don't select it			if ( $size == $check ) {				if ( $enabled )					$checked = " checked='checked'";				else					$check = '';			} elseif ( !$check && $enabled && 'thumbnail' != $size ) {				// if $check is not enabled, default to the first available size that's bigger than a thumbnail				$check = $size;				$checked = " checked='checked'";			}			$html = "<div class='image-size-item'><input type='radio' " . disabled( $enabled, false, false ) . "name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />";			$html .= "<label for='{$css_id}'>$label</label>";			// only show the dimensions if that choice is available			if ( $enabled )				$html .= " <label for='{$css_id}' class='help'>" . sprintf( "(%d&nbsp;&times;&nbsp;%d)", $downsize[1], $downsize[2] ). "</label>";			$html .= '</div>';			$out[] = $html;		}		return array(			'label' => __('Size'),			'input' => 'html',			'html'  => join("\n", $out),		);}/** * Retrieve HTML for the Link URL buttons with the default link type as specified. * * @since unknown * * @param unknown_type $post * @param unknown_type $url_type * @return unknown */function image_link_input_fields($post, $url_type = '') {	$file = wp_get_attachment_url($post->ID);	$link = get_attachment_link($post->ID);	if ( empty($url_type) )		$url_type = get_user_setting('urlbutton', 'post');	$url = '';	if ( $url_type == 'file' )		$url = $file;	elseif ( $url_type == 'post' )		$url = $link;	return "	<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='" . esc_attr($url) . "' /><br />	<button type='button' class='button urlnone' title=''>" . __('None') . "</button>	<button type='button' class='button urlfile' title='" . esc_attr($file) . "'>" . __('File URL') . "</button>	<button type='button' class='button urlpost' title='" . esc_attr($link) . "'>" . __('Post URL') . "</button>";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function image_attachment_fields_to_edit($form_fields, $post) {	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);		if ( empty($alt) )			$alt = '';		$form_fields['post_title']['required'] = true;		$form_fields['image_alt'] = array(			'value' => $alt,			'label' => __('Alternate Text'),			'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')		);		$form_fields['align'] = array(			'label' => __('Alignment'),			'input' => 'html',			'html'  => image_align_input_fields($post, get_option('image_default_align')),		);		$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );	} else {		unset( $form_fields['image_alt'] );	}	return $form_fields;}add_filter('attachment_fields_to_edit', 'image_attachment_fields_to_edit', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function media_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);	return $form_fields;}function media_post_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['image_url']);	return $form_fields;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $attachment * @return unknown */function image_attachment_fields_to_save($post, $attachment) {	if ( substr($post['post_mime_type'], 0, 5) == 'image' ) {		if ( strlen(trim($post['post_title'])) == 0 ) {			$post['post_title'] = preg_replace('/\.\w+$/', '', basename($post['guid']));			$post['errors']['post_title']['errors'][] = __('Empty Title filled from filename.');		}	}	return $post;}add_filter('attachment_fields_to_save', 'image_attachment_fields_to_save', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $attachment_id * @param unknown_type $attachment * @return unknown */function image_media_send_to_editor($html, $attachment_id, $attachment) {	$post =& get_post($attachment_id);	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$url = $attachment['url'];		$align = !empty($attachment['align']) ? $attachment['align'] : 'none';		$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';		$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';		$rel = ( $url == get_attachment_link($attachment_id) );		return get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);	}	return $html;}add_filter('media_send_to_editor', 'image_media_send_to_editor', 10, 3);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $errors * @return unknown */function get_attachment_fields_to_edit($post, $errors = null) {	if ( is_int($post) )		$post =& get_post($post);	if ( is_array($post) )		$post = (object) $post;	$image_url = wp_get_attachment_url($post->ID);	$edit_post = sanitize_post($post, 'edit');	$form_fields = array(		'post_title'   => array(			'label'      => __('Title'),			'value'      => $edit_post->post_title		),		'image_alt'   => array(),		'post_excerpt' => array(			'label'      => __('Caption'),			'value'      => $edit_post->post_excerpt		),		'post_content' => array(			'label'      => __('Description'),			'value'      => $edit_post->post_content,			'input'      => 'textarea'		),		'url'          => array(			'label'      => __('Link URL'),			'input'      => 'html',			'html'       => image_link_input_fields($post, get_option('image_default_link_type')),			'helps'      => __('Enter a link URL or click above for presets.')		),		'menu_order'   => array(			'label'      => __('Order'),			'value'      => $edit_post->menu_order		),		'image_url'	=> array(			'label'      => __('File URL'),			'input'      => 'html',			'html'       => "<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='" . esc_attr($image_url) . "' /><br />",			'value'      => wp_get_attachment_url($post->ID),			'helps'      => __('Location of the uploaded file.')		)	);	foreach ( get_attachment_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$values = array();		foreach ( $terms as $term )			$values[] = $term->name;		$t['value'] = join(', ', $values);		$form_fields[$taxonomy] = $t;	}	// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default	// The recursive merge is easily traversed with array casting: foreach( (array) $things as $thing )	$form_fields = array_merge_recursive($form_fields, (array) $errors);	$form_fields = apply_filters('attachment_fields_to_edit', $form_fields, $post);	return $form_fields;}/** * Retrieve HTML for media items of post gallery. * * The HTML markup retrieved will be created for the progress of SWF Upload * component. Will also create link for showing and hiding the form to modify * the image attachment. * * @since unknown * * @param int $post_id Optional. Post ID. * @param array $errors Errors for attachment, if any. * @return string */function get_media_items( $post_id, $errors ) {	$attachments = array();	if ( $post_id ) {		$post = get_post($post_id);		if ( $post && $post->post_type == 'attachment' )			$attachments = array($post->ID => $post);		else			$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );	} else {		if ( is_array($GLOBALS['wp_the_query']->posts) )			foreach ( $GLOBALS['wp_the_query']->posts as $attachment )				$attachments[$attachment->ID] = $attachment;	}	$output = '';	foreach ( (array) $attachments as $id => $attachment ) {		if ( $attachment->post_status == 'trash' )			continue;		if ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )			$output .= "\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress'><div class='bar'></div></div><div id='media-upload-error-$id'></div><div class='filename'></div>$item\n</div>";	}	return $output;}/** * Retrieve HTML form for modifying the image attachment. * * @since unknown * * @param int $attachment_id Attachment ID for modification. * @param string|array $args Optional. Override defaults. * @return string HTML form for attachment. */function get_media_item( $attachment_id, $args = null ) {	global $redir_tab;	if ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )		$thumb_url = $thumb_url[0];	else		$thumb_url = false;	$post = get_post( $attachment_id );	$default_args = array( 'errors' => null, 'send' => post_type_supports(get_post_type($post->post_parent), 'editor'), 'delete' => true, 'toggle' => true, 'show_title' => true );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$toggle_on  = __( 'Show' );	$toggle_off = __( 'Hide' );	$filename = basename( $post->guid );	$title = esc_attr( $post->post_title );	if ( $_tags = get_the_tags( $attachment_id ) ) {		foreach ( $_tags as $tag )			$tags[] = $tag->name;		$tags = esc_attr( join( ', ', $tags ) );	}	$post_mime_types = get_post_mime_types();	$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );	$type = array_shift( $keys );	$type_html = "<input type='hidden' id='type-of-$attachment_id' value='" . esc_attr( $type ) . "' />";	$form_fields = get_attachment_fields_to_edit( $post, $errors );	if ( $toggle ) {		$class = empty( $errors ) ? 'startclosed' : 'startopen';		$toggle_links = "	<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>	<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>";	} else {		$class = 'form-table';		$toggle_links = '';	}	$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case	$display_title = $show_title ? "<div class='filename new'><span class='title'>" . wp_html_excerpt( $display_title, 60 ) . "</span></div>" : '';	$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );	$order = '';	foreach ( $form_fields as $key => $val ) {		if ( 'menu_order' == $key ) {			if ( $gallery )				$order = "<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ). "' /></div>";			else				$order = "<input type='hidden' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ) . "' />";			unset( $form_fields['menu_order'] );			break;		}	}	$media_dims = '';	$meta = wp_get_attachment_metadata( $post->ID );	if ( is_array( $meta ) && array_key_exists( 'width', $meta ) && array_key_exists( 'height', $meta ) )		$media_dims .= "<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> ";	$media_dims = apply_filters( 'media_meta', $media_dims, $post );	$image_edit_button = '';	if ( gd_edit_image_support( $post->post_mime_type ) ) {		$nonce = wp_create_nonce( "image_editor-$post->ID" );		$image_edit_button = "<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \"$nonce\" )' class='button' value='" . esc_attr__( 'Edit Image' ) . "' /> <img src='" . esc_url( admin_url( 'images/wpspin_light.gif' ) ) . "' class='imgedit-wait-spin' alt='' />";	}	$attachment_url = get_permalink( $attachment_id );	$item = "	$type_html	$toggle_links	$order	$display_title	<table class='slidetoggle describe $class'>		<thead class='media-item-info' id='media-head-$post->ID'>		<tr valign='top'>			<td class='A1B1' id='thumbnail-head-$post->ID'>			<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' style='margin-top: 3px' /></a></p>			<p>$image_edit_button</p>			</td>			<td>			<p><strong>" . __('File name:') . "</strong> $filename</p>			<p><strong>" . __('File type:') . "</strong> $post->post_mime_type</p>			<p><strong>" . __('Upload date:') . "</strong> " . mysql2date( get_option('date_format'), $post->post_date ). '</p>';			if ( !empty( $media_dims ) )				$item .= "<p><strong>" . __('Dimensions:') . "</strong> $media_dims</p>\n";			$item .= "</td></tr>\n";	$item .= "		</thead>		<tbody>		<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>		<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\n";	$defaults = array(		'input'      => 'text',		'required'   => false,		'value'      => '',		'extra_rows' => array(),	);	if ( $send )		$send = "<input type='submit' class='button' name='send[$attachment_id]' value='" . esc_attr__( 'Insert into Post' ) . "' />";	if ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {		if ( !EMPTY_TRASH_DAYS ) {			$delete = "<a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Delete Permanently' ) . '</a>';		} elseif ( !MEDIA_TRASH ) {			$delete = "<a href='#' class='del-link' onclick=\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\">" . __( 'Delete' ) . "</a>			 <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>" . sprintf( __( 'You are about to delete <strong>%s</strong>.' ), $filename ) . "			 <a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='button'>" . __( 'Continue' ) . "</a>			 <a href='#' class='button' onclick=\"this.parentNode.style.display='none';return false;\">" . __( 'Cancel' ) . "</a>			 </div>";		} else {			$delete = "<a href='" . wp_nonce_url( "post.php?action=trash&amp;post=$attachment_id", 'trash-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Move to Trash' ) . "</a>			<a href='" . wp_nonce_url( "post.php?action=untrash&amp;post=$attachment_id", 'untrash-attachment_' . $attachment_id ) . "' id='undo[$attachment_id]' class='undo hidden'>" . __( 'Undo' ) . "</a>";		}	} else {		$delete = '';	}	$thumbnail = '';	$calling_post_id = 0;	if ( isset( $_GET['post_id'] ) )		$calling_post_id = absint( $_GET['post_id'] );	elseif ( isset( $_POST ) && count( $_POST ) ) // Like for async-upload where $_GET['post_id'] isn't set		$calling_post_id = $post->post_parent;	if ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {		$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$calling_post_id" );		$thumbnail = "<a class='wp-post-thumbnail' id='wp-post-thumbnail-" . $attachment_id . "' href='#' onclick='WPSetAsThumbnail(\"$attachment_id\", \"$ajax_nonce\");return false;'>" . esc_html__( "Use as featured image" ) . "</a>";	}	if ( ( $send || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) )		$form_fields['buttons'] = array( 'tr' => "\t\t<tr class='submit'><td></td><td class='savesend'>$send $thumbnail $delete</td></tr>\n" );	$hidden_fields = array();	foreach ( $form_fields as $id => $field ) {		if ( $id{0} == '_' )			continue;		if ( !empty( $field['tr'] ) ) {			$item .= $field['tr'];			continue;		}		$field = array_merge( $defaults, $field );		$name = "attachments[$attachment_id][$id]";		if ( $field['input'] == 'hidden' ) {			$hidden_fields[$name] = $field['value'];			continue;		}		$required      = $field['required'] ? '<span class="alignright"><abbr title="required" class="required">*</abbr></span>' : '';		$aria_required = $field['required'] ? " aria-required='true' " : '';		$class  = $id;		$class .= $field['required'] ? ' form-required' : '';		$item .= "\t\t<tr class='$class'>\n\t\t\t<th valign='top' scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label></th>\n\t\t\t<td class='field'>";		if ( !empty( $field[ $field['input'] ] ) )			$item .= $field[ $field['input'] ];		elseif ( $field['input'] == 'textarea' ) {			$item .= "<textarea type='text' id='$name' name='$name' $aria_required>" . esc_html( $field['value'] ) . '</textarea>';		} else {			$item .= "<input type='text' class='text' id='$name' name='$name' value='" . esc_attr( $field['value'] ) . "' $aria_required />";		}		if ( !empty( $field['helps'] ) )			$item .= "<p class='help'>" . join( "</p>\n<p class='help'>", array_unique( (array) $field['helps'] ) ) . '</p>';		$item .= "</td>\n\t\t</tr>\n";		$extra_rows = array();		if ( !empty( $field['errors'] ) )			foreach ( array_unique( (array) $field['errors'] ) as $error )				$extra_rows['error'][] = $error;		if ( !empty( $field['extra_rows'] ) )			foreach ( $field['extra_rows'] as $class => $rows )				foreach ( (array) $rows as $html )					$extra_rows[$class][] = $html;		foreach ( $extra_rows as $class => $rows )			foreach ( $rows as $html )				$item .= "\t\t<tr><td></td><td class='$class'>$html</td></tr>\n";	}	if ( !empty( $form_fields['_final'] ) )		$item .= "\t\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\n";	$item .= "\t</tbody>\n";	$item .= "\t</table>\n";	foreach ( $hidden_fields as $name => $value )		$item .= "\t<input type='hidden' name='$name' id='$name' value='" . esc_attr( $value ) . "' />\n";	if ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {		$parent = (int) $_REQUEST['post_id'];		$parent_name = "attachments[$attachment_id][post_parent]";		$item .= "\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\n";	}	return $item;}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_header() {	?>	<script type="text/javascript">post_id = <?php echo intval($_REQUEST['post_id']); ?>;</script>	<div id="media-upload-header">	<?php the_media_upload_tabs(); ?>	</div>	<?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_form( $errors = null ) {	global $type, $tab;	$flash_action_url = admin_url('async-upload.php');	// If Mac and mod_security, no Flash. :(	$flash = true;	if ( false !== stripos($_SERVER['HTTP_USER_AGENT'], 'mac') && apache_mod_loaded('mod_security') )		$flash = false;	$flash = apply_filters('flash_uploader', $flash);	$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;	$upload_size_unit = $max_upload_size =  wp_max_upload_size();	$sizes = array( 'KB', 'MB', 'GB' );	for ( $u = -1; $upload_size_unit > 1024 && $u < count( $sizes ) - 1; $u++ )		$upload_size_unit /= 1024;	if ( $u < 0 ) {		$upload_size_unit = 0;		$u = 0;	} else {		$upload_size_unit = (int) $upload_size_unit;	}?><script type="text/javascript">//<![CDATA[var uploaderMode = 0;jQuery(document).ready(function($){	uploaderMode = getUserSetting('uploader');	$('.upload-html-bypass a').click(function(){deleteUserSetting('uploader');uploaderMode=0;swfuploadPreLoad();return false;});	$('.upload-flash-bypass a').click(function(){setUserSetting('uploader', '1');uploaderMode=1;swfuploadPreLoad();return false;});});//]]></script><div id="media-upload-notice"><?php if (isset($errors['upload_notice']) ) { ?>	<?php echo $errors['upload_notice']; ?><?php } ?></div><div id="media-upload-error"><?php if (isset($errors['upload_error']) && is_wp_error($errors['upload_error'])) { ?>	<?php echo $errors['upload_error']->get_error_message(); ?><?php } ?></div><?php// Check quota for this blog if multisiteif ( is_multisite() && !is_upload_space_available() ) {	echo '<p>' . sprintf( __( 'Sorry, you have filled your storage quota (%s MB).' ), get_space_allowed() ) . '</p>';	return;}do_action('pre-upload-ui');if ( $flash ) : ?><script type="text/javascript">//<![CDATA[var swfu;SWFUpload.onload = function() {	var settings = {			button_text: '<span class="button"><?php _e('Select Files'); ?><\/span>',			button_text_style: '.button { text-align: center; font-weight: bold; font-family:"Lucida Grande",Verdana,Arial,"Bitstream Vera Sans",sans-serif; font-size: 11px; text-shadow: 0 1px 0 #FFFFFF; color:#464646; }',			button_height: "23",			button_width: "132",			button_text_top_padding: 3,			button_image_url: '<?php echo includes_url('images/upload.png?ver=20100531'); ?>',			button_placeholder_id: "flash-browse-button",			upload_url : "<?php echo esc_attr( $flash_action_url ); ?>",			flash_url : "<?php echo includes_url('js/swfupload/swfupload.swf'); ?>",			file_post_name: "async-upload",			file_types: "<?php echo apply_filters('upload_file_glob', '*.*'); ?>",			post_params : {				"post_id" : "<?php echo $post_id; ?>",				"auth_cookie" : "<?php echo (is_ssl() ? $_COOKIE[SECURE_AUTH_COOKIE] : $_COOKIE[AUTH_COOKIE]); ?>",				"logged_in_cookie": "<?php echo $_COOKIE[LOGGED_IN_COOKIE]; ?>",				"_wpnonce" : "<?php echo wp_create_nonce('media-form'); ?>",				"type" : "<?php echo $type; ?>",				"tab" : "<?php echo $tab; ?>",				"short" : "1"			},			file_size_limit : "<?php echo $max_upload_size; ?>b",			file_dialog_start_handler : fileDialogStart,			file_queued_handler : fileQueued,			upload_start_handler : uploadStart,			upload_progress_handler : uploadProgress,			upload_error_handler : uploadError,			upload_success_handler : uploadSuccess,			upload_complete_handler : uploadComplete,			file_queue_error_handler : fileQueueError,			file_dialog_complete_handler : fileDialogComplete,			swfupload_pre_load_handler: swfuploadPreLoad,			swfupload_load_failed_handler: swfuploadLoadFailed,			custom_settings : {				degraded_element_id : "html-upload-ui", // id of the element displayed when swfupload is unavailable				swfupload_element_id : "flash-upload-ui" // id of the element displayed when swfupload is available			},			debug: false		};		swfu = new SWFUpload(settings);};//]]></script><div id="flash-upload-ui" class="hide-if-no-js"><?php do_action('pre-flash-upload-ui'); ?>	<div>	<?php _e( 'Choose files to upload' ); ?>	<div id="flash-browse-button"></div>	<span><input id="cancel-upload" disabled="disabled" onclick="cancelUpload()" type="button" value="<?php esc_attr_e('Cancel Upload'); ?>" class="button" /></span>	</div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p><?php do_action('post-flash-upload-ui'); ?>	<p class="howto"><?php _e('After a file has been uploaded, you can add titles and descriptions.'); ?></p></div><?php endif; // $flash ?><div id="html-upload-ui"><?php do_action('pre-html-upload-ui'); ?>	<p id="async-upload-wrap">	<label class="screen-reader-text" for="async-upload"><?php _e('Upload'); ?></label>	<input type="file" name="async-upload" id="async-upload" /> <input type="submit" class="button" name="html-upload" value="<?php esc_attr_e('Upload'); ?>" /> <a href="#" onclick="try{top.tb_remove();}catch(e){}; return false;"><?php _e('Cancel'); ?></a>	</p>	<div class="clear"></div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p>	<?php if ( is_lighttpd_before_150() ): ?>	<p><?php _e('If you want to use all capabilities of the uploader, like uploading multiple files at once, please upgrade to lighttpd 1.5.'); ?></p>	<?php endif;?><?php do_action('post-html-upload-ui', $flash); ?></div><?php do_action('post-upload-ui'); ?><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="submit" class="hidden" name="save" value="" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><h3 class="media-title"><?php _e('Add media files from your computer'); ?></h3><?php media_upload_form( $errors ); ?><script type="text/javascript">//<![CDATA[jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});	}	updateMediaForm();});//]]></script><div id="media-items"><?phpif ( $id ) {	if ( !is_wp_error($id) ) {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_items( $id, $errors );	} else {		echo '<div id="media-upload-error">'.esc_html($id->get_error_message()).'</div>';		exit;	}}?></div><p class="savebutton ml-submit"><input type="submit" class="button" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_url_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$callback = "type_url_form_$type";?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><?php if ( is_callable($callback) ) { ?><h3 class="media-title"><?php _e('Add media file from URL'); ?></h3><script type="text/javascript">//<![CDATA[var addExtImage = {	width : '',	height : '',	align : 'alignnone',	insert : function() {		var t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';		if ( '' == f.src.value || '' == t.width )			return false;		if ( f.title.value ) {			title = f.title.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');			title = ' title="'+title+'"';		}		if ( f.alt.value )			alt = f.alt.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php if ( ! apply_filters( 'disable_captions', '' ) ) { ?>		if ( f.caption.value )			caption = f.caption.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php } ?>		cls = caption ? '' : ' class="'+t.align+'"';		html = '<img alt="'+alt+'" src="'+f.src.value+'"'+title+cls+' width="'+t.width+'" height="'+t.height+'" />';		if ( f.url.value )			html = '<a href="'+f.url.value+'">'+html+'</a>';		if ( caption )			html = '[caption id="" align="'+t.align+'" width="'+t.width+'" caption="'+caption+'"]'+html+'[/caption]';		var win = window.dialogArguments || opener || parent || top;		win.send_to_editor(html);		return false;	},	resetImageData : function() {		var t = addExtImage;		t.width = t.height = '';		document.getElementById('go_button').style.color = '#bbb';		if ( ! document.forms[0].src.value )			document.getElementById('status_img').innerHTML = '*';		else document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>" alt="" />';	},	updateImageData : function() {		var t = addExtImage;		t.width = t.preloadImg.width;		t.height = t.preloadImg.height;		document.getElementById('go_button').style.color = '#333';		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>" alt="" />';	},	getImageData : function() {		var t = addExtImage, src = document.forms[0].src.value;		if ( ! src ) {			t.resetImageData();			return false;		}		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />';		t.preloadImg = new Image();		t.preloadImg.onload = t.updateImageData;		t.preloadImg.onerror = t.resetImageData;		t.preloadImg.src = src;	}}//]]></script><div id="media-items"><div class="media-item media-blank"><?php echo apply_filters($callback, call_user_func($callback)); ?></div></div></form><?php	} else {		wp_die( __('Unknown action.') );	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_gallery_form($errors) {	global $redir_tab, $type;	$redir_tab = 'gallery';	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=gallery&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="sort-buttons" class="hide-if-no-js"><span><?php _e('All Tabs:'); ?><a href="#" id="showall"><?php _e('Show'); ?></a><a href="#" id="hideall" style="display:none;"><?php _e('Hide'); ?></a></span><?php _e('Sort Order:'); ?><a href="#" id="asc"><?php _e('Ascending'); ?></a> |<a href="#" id="desc"><?php _e('Descending'); ?></a> |<a href="#" id="clear"><?php _ex('Clear', 'verb'); ?></a></div><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="gallery-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><table class="widefat" cellspacing="0"><thead><tr><th><?php _e('Media'); ?></th><th class="order-head"><?php _e('Order'); ?></th><th class="actions-head"><?php _e('Actions'); ?></th></tr></thead></table><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items($post_id, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" style="display:none;" name="save" id="save-all" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="type" value="<?php echo esc_attr( $GLOBALS['type'] ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $GLOBALS['tab'] ); ?>" /></p><div id="gallery-settings" style="display:none;"><div class="title"><?php _e('Gallery Settings'); ?></div><table id="basic" class="describe"><tbody>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Link thumbnails to:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" name="linkto" id="linkto-file" value="file" />		<label for="linkto-file" class="radio"><?php _e('Image File'); ?></label>		<input type="radio" checked="checked" name="linkto" id="linkto-post" value="post" />		<label for="linkto-post" class="radio"><?php _e('Attachment Page'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order images by:'); ?></span>		</label>	</th>	<td class="field">		<select id="orderby" name="orderby">			<option value="menu_order" selected="selected"><?php _e('Menu order'); ?></option>			<option value="title"><?php _e('Title'); ?></option>			<option value="ID"><?php _e('Date/Time'); ?></option>			<option value="rand"><?php _e('Random'); ?></option>		</select>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" checked="checked" name="order" id="order-asc" value="asc" />		<label for="order-asc" class="radio"><?php _e('Ascending'); ?></label>		<input type="radio" name="order" id="order-desc" value="desc" />		<label for="order-desc" class="radio"><?php _e('Descending'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Gallery columns:'); ?></span>		</label>	</th>	<td class="field">		<select id="columns" name="columns">			<option value="2">2</option>			<option value="3" selected="selected">3</option>			<option value="4">4</option>			<option value="5">5</option>			<option value="6">6</option>			<option value="7">7</option>			<option value="8">8</option>			<option value="9">9</option>		</select>	</td>	</tr></tbody></table><p class="ml-submit"><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="insert-gallery" id="insert-gallery" value="<?php esc_attr_e( 'Insert gallery' ); ?>" /><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="update-gallery" id="update-gallery" value="<?php esc_attr_e( 'Update gallery settings' ); ?>" /></p></div></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_library_form($errors) {	global $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=library&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$_GET['paged'] = isset( $_GET['paged'] ) ? intval($_GET['paged']) : 0;	if ( $_GET['paged'] < 1 )		$_GET['paged'] = 1;	$start = ( $_GET['paged'] - 1 ) * 10;	if ( $start < 1 )		$start = 0;	add_filter( 'post_limits', create_function( '$a', "return 'LIMIT $start, 10';" ) );	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();?><form id="filter" action="" method="get"><input type="hidden" name="type" value="<?php echo esc_attr( $type ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $tab ); ?>" /><input type="hidden" name="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="post_mime_type" value="<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>" /><p id="media-search" class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e('Search Media');?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $_type => $reals )	foreach ( $reals as $real )		if ( isset($num_posts[$_type]) )			$num_posts[$_type] += $_num_posts[$real];		else			$num_posts[$_type] = $_num_posts[$real];// If available type specified by media button clicked, filter by that typeif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {	$_GET['post_mime_type'] = $type;	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}if ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )	$class = ' class="current"';else	$class = '';$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . "'$class>".__('All Types')."</a>";foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . "'$class>" . sprintf(_n($label[2][0], $label[2][1], $num_posts[$mime_type]), "<span id='$mime_type-counter'>" . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';}echo implode(' | </li>', $type_links) . '</li>';unset($type_links);?></ul><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($wp_query->found_posts / 10),	'current' => $_GET['paged']));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><?php$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?><select name='m'><option<?php selected( @$_GET['m'], 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . "'>";	echo esc_html( $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear" );	echo "</option>\n";}?></select><?php } ?><input type="submit" id="post-query-submit" value="<?php echo esc_attr( __( 'Filter &#187;' ) ); ?>" class="button-secondary" /></div><br class="clear" /></div></form><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="library-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items(null, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_image() {	if ( !apply_filters( 'disable_captions', '' ) ) {		$caption = '		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="caption">' . __('Image Caption') . '</label></span>			</th>			<td class="field"><input id="caption" name="caption" value="" type="text" /></td>		</tr>';	} else {		$caption = '';	}	$default_align = get_option('image_default_align');	if ( empty($default_align) )		$default_align = 'none';	return '	<h4 class="media-sub-title">' . __('Insert an image from another web site') . '</h4>	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label" style="width:130px;">				<span class="alignleft"><label for="src">' . __('Image URL') . '</label></span>				<span class="alignright"><abbr id="status_img" title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="src" name="src" value="" type="text" aria-required="true" onblur="addExtImage.getImageData()" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="title">' . __('Image Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="title" name="title" value="" type="text" aria-required="true" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="alt">' . __('Alternate Text') . '</label></span>			</th>			<td class="field"><input id="alt" name="alt" value="" type="text" aria-required="true" />			<p class="help">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>		</tr>		' . $caption . '		<tr class="align">			<th valign="top" scope="row" class="label"><p><label for="align">' . __('Alignment') . '</label></p></th>			<td class="field">				<input name="align" id="align-none" value="none" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'none' ? ' checked="checked"' : '').' />				<label for="align-none" class="align image-align-none-label">' . __('None') . '</label>				<input name="align" id="align-left" value="left" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'left' ? ' checked="checked"' : '').' />				<label for="align-left" class="align image-align-left-label">' . __('Left') . '</label>				<input name="align" id="align-center" value="center" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'center' ? ' checked="checked"' : '').' />				<label for="align-center" class="align image-align-center-label">' . __('Center') . '</label>				<input name="align" id="align-right" value="right" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'right' ? ' checked="checked"' : '').' />				<label for="align-right" class="align image-align-right-label">' . __('Right') . '</label>			</td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="url">' . __('Link Image To:') . '</label></span>			</th>			<td class="field"><input id="url" name="url" value="" type="text" /><br />			<button type="button" class="button" value="" onclick="document.forms[0].url.value=null">' . __('None') . '</button>			<button type="button" class="button" value="" onclick="document.forms[0].url.value=document.forms[0].src.value">' . __('Link to image') . '</button>			<p class="help">' . __('Enter a link URL or click above for presets.') . '</p></td>		</tr>	' . _insert_into_post_button('image') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_audio() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Audio File URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Still Alive by Jonathan Coulton&#8221;') . '</td></tr>	' . _insert_into_post_button('audio') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_video() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Video URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Lucy on YouTube&#8220;') . '</td></tr>	' . _insert_into_post_button('video') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_file() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</td></tr>	' . _insert_into_post_button('file') . '	</tbody></table>';}function _insert_into_post_button($type) {	if ( !post_type_supports(get_post_type($_GET['post_id']), 'editor') )		return '';	if ( 'image' == $type )	return '		<tr>			<td></td>			<td>				<input type="button" class="button" id="go_button" style="color:#bbb;" onclick="addExtImage.insert()" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';	return '		<tr>			<td></td>			<td>				<input type="submit" class="button" name="insertonlybutton" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';}/** * {@internal Missing Short Description}} * * Support a GET parameter for disabling the flash uploader. * * @since unknown * * @param unknown_type $flash * @return unknown */function media_upload_use_flash($flash) {	if ( array_key_exists('flash', $_REQUEST) )		$flash = !empty($_REQUEST['flash']);	return $flash;}add_filter('flash_uploader', 'media_upload_use_flash');/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_flash_bypass() {	echo '<p class="upload-flash-bypass">';	printf( __('You are using the Flash uploader.  Problems?  Try the <a href="%s">Browser uploader</a> instead.'), esc_url(add_query_arg('flash', 0)) );	echo '</p>';}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_html_bypass($flash = true) {	echo '<p class="upload-html-bypass hide-if-no-js">';	_e('You are using the Browser uploader.');	if ( $flash ) {		// the user manually selected the browser uploader, so let them switch back to Flash		echo ' ';		printf( __('Try the <a href="%s">Flash uploader</a> instead.'), esc_url(add_query_arg('flash', 1)) );	}	echo "</p>\n";}add_action('post-flash-upload-ui', 'media_upload_flash_bypass');add_action('post-html-upload-ui', 'media_upload_html_bypass');/** * {@internal Missing Short Description}} * * Make sure the GET parameter sticks when we submit a form. * * @since unknown * * @param unknown_type $url * @return unknown */function media_upload_bypass_url($url) {	if ( array_key_exists('flash', $_REQUEST) )		$url = add_query_arg('flash', intval($_REQUEST['flash']));	return $url;}add_filter('media_upload_form_url', 'media_upload_bypass_url');add_filter('async_upload_image', 'get_media_item', 10, 2);add_filter('async_upload_audio', 'get_media_item', 10, 2);add_filter('async_upload_video', 'get_media_item', 10, 2);add_filter('async_upload_file', 'get_media_item', 10, 2);add_action('media_upload_image', 'media_upload_image');add_action('media_upload_audio', 'media_upload_audio');add_action('media_upload_video', 'media_upload_video');add_action('media_upload_file', 'media_upload_file');add_filter('media_upload_gallery', 'media_upload_gallery');add_filter('media_upload_library', 'media_upload_library');
<?php/** * WordPress Plugin Install Administration API * * @package WordPress * @subpackage Administration *//** * Retrieve plugin installer pages from WordPress Plugins API. * * It is possible for a plugin to override the Plugin API result with three * filters. Assume this is for plugins, which can extend on the Plugin Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'plugins_api_args', is for the args and gives the action as * the second parameter. The hook for 'plugins_api_args' must ensure that an * object is returned. * * The second filter, 'plugins_api', is the result that would be returned. * * @since 2.7.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Plugin Info API. * @return object plugins_api response object on success, WP_Error on failure. */function plugins_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	// Allows a plugin to override the WordPress.org API entirely.	// Use the filter 'plugins_api_result' to mearly add results.	// Please ensure that a object is returned from the following filters.	$args = apply_filters('plugins_api_args', $args, $action);	$res = apply_filters('plugins_api', false, $action, $args);	if ( false === $res ) {		$request = wp_remote_post('http://api.wordpress.org/plugins/info/1.0/', array( 'timeout' => 15, 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('plugins_api_failed', __('An Unexpected HTTP Error occurred during the API request.'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( false === $res )				$res = new WP_Error('plugins_api_failed', __('An unknown error occurred.'), $request['body']);		}	} elseif ( !is_wp_error($res) ) {		$res->external = true;	}	return apply_filters('plugins_api_result', $res, $action, $args);}/** * Retrieve popular WordPress plugin tags. * * @since 2.7.0 * * @param array $args * @return array */function install_popular_tags( $args = array() ) {	if ( ! ($cache = wp_cache_get('popular_tags', 'api')) && ! ($cache = get_option('wporg_popular_tags')) )		add_option('wporg_popular_tags', array(), '', 'no'); ///No autoload.	if ( $cache && $cache->timeout + 3 * 60 * 60 > time() )		return $cache->cached;	$tags = plugins_api('hot_tags', $args);	if ( is_wp_error($tags) )		return $tags;	$cache = (object) array('timeout' => time(), 'cached' => $tags);	update_option('wporg_popular_tags', $cache);	wp_cache_set('popular_tags', $cache, 'api');	return $tags;}add_action('install_plugins_search', 'install_search', 10, 1);/** * Display search results and display as tag cloud. * * @since 2.7.0 * * @param string $page */function install_search($page) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$args['tag'] = sanitize_title_with_dashes($term);			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_plugins_table_header', 'install_search_form');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);	return;}add_action('install_plugins_dashboard', 'install_dashboard');function install_dashboard() {	?>	<p><?php _e('Plugins extend and expand the functionality of WordPress. You may automatically install plugins from the <a href="http://wordpress.org/extend/plugins/">WordPress Plugin Directory</a> or upload a plugin in .zip format via this page.') ?></p>	<h4><?php _e('Search') ?></h4>	<p class="install-help"><?php _e('Search for plugins by keyword, author, or tag.') ?></p>	<?php install_search_form(); ?>	<h4><?php _e('Popular tags') ?></h4>	<p class="install-help"><?php _e('You may also browse based on the most popular tags in the Plugin Directory:') ?></p>	<?php	$api_tags = install_popular_tags();	echo '<p class="popular-tags">';	if ( is_wp_error($api_tags) ) {		echo $api_tags->get_error_message();	} else {		//Set up the tags in a way which can be interprated by wp_generate_tag_cloud()		$tags = array();		foreach ( (array)$api_tags as $tag )			$tags[ $tag['name'] ] = (object) array(									'link' => esc_url( admin_url('plugin-install.php?tab=search&type=tag&s=' . urlencode($tag['name'])) ),									'name' => $tag['name'],									'id' => sanitize_title_with_dashes($tag['name']),									'count' => $tag['count'] );		echo wp_generate_tag_cloud($tags, array( 'single_text' => __('%d plugin'), 'multiple_text' => __('%d plugins') ) );	}	echo '</p><br class="clear" />';}/** * Display search form for searching plugins. * * @since 2.7.0 */function install_search_form(){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><form id="search-plugins" method="post" action="<?php echo admin_url('plugin-install.php?tab=search'); ?>">		<select name="type" id="typeselector">			<option value="term"<?php selected('term', $type) ?>><?php _e('Term'); ?></option>			<option value="author"<?php selected('author', $type) ?>><?php _e('Author'); ?></option>			<option value="tag"<?php selected('tag', $type) ?>><?php _ex('Tag', 'Plugin Installer'); ?></option>		</select>		<input type="text" name="s" value="<?php echo esc_attr($term) ?>" />		<label class="screen-reader-text" for="plugin-search-input"><?php _e('Search Plugins'); ?></label>		<input type="submit" id="plugin-search-input" name="search" value="<?php esc_attr_e('Search Plugins'); ?>" class="button" />	</form><?php}add_action('install_plugins_featured', 'install_featured', 10, 1);/** * Display featured plugins. * * @since 2.7.0 * * @param string $page */function install_featured($page = 1) {	$args = array('browse' => 'featured', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_popular', 'install_popular', 10, 1);/** * Display popular plugins. * * @since 2.7.0 * * @param string $page */function install_popular($page = 1) {	$args = array('browse' => 'popular', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_upload', 'install_plugins_upload', 10, 1);/** * Upload from zip * @since 2.8.0 * * @param string $page */function install_plugins_upload( $page = 1 ) {?>	<h4><?php _e('Install a plugin in .zip format') ?></h4>	<p class="install-help"><?php _e('If you have a plugin in a .zip format, you may install it by uploading it here.') ?></p>	<form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-plugin') ?>">		<?php wp_nonce_field( 'plugin-upload') ?>		<label class="screen-reader-text" for="pluginzip"><?php _e('Plugin zip file'); ?></label>		<input type="file" id="pluginzip" name="pluginzip" />		<input type="submit" class="button" value="<?php esc_attr_e('Install Now') ?>" />	</form><?php}add_action('install_plugins_new', 'install_new', 10, 1);/** * Display new plugins. * * @since 2.7.0 * * @param string $page */function install_new($page = 1) {	$args = array('browse' => 'new', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_updated', 'install_updated', 10, 1);/** * Display recently updated plugins. * * @since 2.7.0 * * @param string $page */function install_updated($page = 1) {	$args = array('browse' => 'updated', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}/** * Display plugin content based on plugin list. * * @since 2.7.0 * * @param array $plugins List of plugins. * @param string $page * @param int $totalpages Number of pages. */function display_plugins_table($plugins, $page = 1, $totalpages = 1){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array(), 'target' => array()),								'abbr' => array('title' => array()),'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(),'strong' => array(),								'ul' => array(), 'ol' => array(), 'li' => array(), 'p' => array(), 'br' => array());?>	<div class="tablenav">		<div class="alignleft actions">		<?php do_action('install_plugins_table_header'); ?>		</div>		<?php			$url = esc_url($_SERVER['REQUEST_URI']);			if ( ! empty($term) )				$url = add_query_arg('s', $term, $url);			if ( ! empty($type) )				$url = add_query_arg('type', $type, $url);			$page_links = paginate_links( array(				'base' => add_query_arg('paged', '%#%', $url),				'format' => '',				'prev_text' => __('&laquo;'),				'next_text' => __('&raquo;'),				'total' => $totalpages,				'current' => $page			));			if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>";?>		<br class="clear" />	</div>	<table class="widefat" id="install-plugins" cellspacing="0">		<thead>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</thead>		<tfoot>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</tfoot>		<tbody class="plugins">		<?php			if ( empty($plugins) )				echo '<tr><td colspan="5">', __('No plugins match your request.'), '</td></tr>';			foreach ( (array) $plugins as $plugin ){				if ( is_object($plugin) )					$plugin = (array) $plugin;				$title = wp_kses($plugin['name'], $plugins_allowedtags);				//Limit description to 400char, and remove any HTML.				$description = strip_tags($plugin['description']);				if ( strlen($description) > 400 )					$description = mb_substr($description, 0, 400) . '&#8230;';				//remove any trailing entities				$description = preg_replace('/&[^;\s]{0,6}$/', '', $description);				//strip leading/trailing & multiple consecutive lines				$description = trim($description);				$description = preg_replace("|(\r?\n)+|", "\n", $description);				//\n => <br>				$description = nl2br($description);				$version = wp_kses($plugin['version'], $plugins_allowedtags);				$name = strip_tags($title . ' ' . $version);				$author = $plugin['author'];				if ( ! empty($plugin['author']) )					$author = ' <cite>' . sprintf( __('By %s'), $author ) . '.</cite>';				$author = wp_kses($author, $plugins_allowedtags);				$action_links = array();				$action_links[] = '<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $plugin['slug'] .									'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox" title="' .									esc_attr( sprintf( __( 'More information about %s' ), $name ) ) . '">' . __('Details') . '</a>';				if ( current_user_can('install_plugins') || current_user_can('update_plugins') ) {					$status = install_plugin_install_status($plugin);					switch ( $status['status'] ) {						case 'install':							if ( $status['url'] )								$action_links[] = '<a class="install-now" href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Install %s' ), $name ) ) . '">' . __('Install Now') . '</a>';							break;						case 'update_available':							if ( $status['url'] )								$action_links[] = '<a href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Update to version %s' ), $status['version'] ) ) . '">' . sprintf( __('Update Now'), $status['version'] ) . '</a>';							break;						case 'latest_installed':						case 'newer_installed':							$action_links[] = '<span title="' . esc_attr__( 'This plugin is already installed and is up to date' ) . ' ">' . __('Installed') . '</span>';							break;					}				}				$action_links = apply_filters( 'plugin_install_action_links', $action_links, $plugin );			?>			<tr>				<td class="name"><strong><?php echo $title; ?></strong>					<div class="action-links"><?php if ( !empty($action_links) ) echo implode(' | ', $action_links); ?></div>				</td>				<td class="vers"><?php echo $version; ?></td>				<td class="vers">					<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $plugin['num_ratings']), number_format_i18n($plugin['num_ratings'])) ?>">						<div class="star star-rating" style="width: <?php echo esc_attr($plugin['rating']) ?>px"></div>						<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>						<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>						<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>						<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>						<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>					</div>				</td>				<td class="desc"><?php echo $description, $author; ?></td>			</tr>			<?php			}			?>		</tbody>	</table>	<div class="tablenav">		<?php if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?>		<br class="clear" />	</div><?php}add_action('install_plugins_pre_plugin-information', 'install_plugin_information');/** * Determine the status we can perform on a plugin. * * @since 3.0.0 */function install_plugin_install_status($api, $loop = false) {	// this function is called recursivly, $loop prevents futhur loops.	if ( is_array($api) )		$api = (object) $api;	//Default to a "new" plugin	$status = 'install';	$url = false;	//Check to see if this plugin is known to be installed, and has an update awaiting it.	$update_plugins = get_site_transient('update_plugins');	if ( is_object( $update_plugins ) ) {		foreach ( (array)$update_plugins->response as $file => $plugin ) {			if ( $plugin->slug === $api->slug ) {				$status = 'update_available';				$update_file = $file;				$version = $plugin->new_version;				if ( current_user_can('update_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=upgrade-plugin&plugin=' . $update_file), 'upgrade-plugin_' . $update_file);				break;			}		}	}	if ( 'install' == $status ) {		if ( is_dir( WP_PLUGIN_DIR  . '/' . $api->slug ) ) {			$installed_plugin = get_plugins('/' . $api->slug);			if ( empty($installed_plugin) ) {				if ( current_user_can('install_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);			} else {				$key = array_shift( $key = array_keys($installed_plugin) ); //Use the first plugin regardless of the name, Could have issues for multiple-plugins in one directory if they share different version numbers				if ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '=') ){					$status = 'latest_installed';				} elseif ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '<') ) {					$status = 'newer_installed';					$version = $installed_plugin[ $key ]['Version'];				} else {					//If the above update check failed, Then that probably means that the update checker has out-of-date information, force a refresh					if ( ! $loop ) {						delete_site_transient('update_plugins');						wp_update_plugins();						return install_plugin_install_status($api, true);					}				}			}		} else {			// "install" & no directory with that slug			if ( current_user_can('install_plugins') )				$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);		}	}	if ( isset($_GET['from']) )		$url .= '&amp;from=' . urlencode(stripslashes($_GET['from']));	return compact('status', 'url', 'version');}/** * Display plugin information in dialog box form. * * @since 2.7.0 */function install_plugin_information() {	global $tab;	$api = plugins_api('plugin_information', array('slug' => stripslashes( $_REQUEST['plugin'] ) ));	if ( is_wp_error($api) )		wp_die($api);	$plugins_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),								'abbr' => array('title' => array()), 'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),								'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),								'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),								'img' => array('src' => array(), 'class' => array(), 'alt' => array()));	//Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $plugins_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key )		$api->$key = wp_kses($api->$key, $plugins_allowedtags);	$section = isset($_REQUEST['section']) ? stripslashes( $_REQUEST['section'] ) : 'description'; //Default to the Description tab, Do not translate, API returns English.	if ( empty($section) || ! isset($api->sections[ $section ]) )		$section = array_shift( $section_titles = array_keys((array)$api->sections) );	iframe_header( __('Plugin Install') );	echo "<div id='$tab-header'>\n";	echo "<ul id='sidemenu'>\n";	foreach ( (array)$api->sections as $section_name => $content ) {		$title = $section_name;		$title = ucwords(str_replace('_', ' ', $title));		$class = ( $section_name == $section ) ? ' class="current"' : '';		$href = add_query_arg( array('tab' => $tab, 'section' => $section_name) );		$href = esc_url($href);		$san_title = esc_attr(sanitize_title_with_dashes($title));		echo "\t<li><a name='$san_title' target='' href='$href'$class>$title</a></li>\n";	}	echo "</ul>\n";	echo "</div>\n";	?>	<div class="alignright fyi">		<?php if ( ! empty($api->download_link) && ( current_user_can('install_plugins') || current_user_can('update_plugins') ) ) : ?>		<p class="action-button">		<?php		$status = install_plugin_install_status($api);		switch ( $status['status'] ) {			case 'install':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Now') . '</a>';				break;			case 'update_available':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Update Now') .'</a>';				break;			case 'newer_installed':				echo '<a>' . sprintf(__('Newer Version (%s) Installed'), $status['version']) . '</a>';				break;			case 'latest_installed':				echo '<a>' . __('Latest Version Installed') . '</a>';				break;		}		?>		</p>		<?php endif; ?>		<h2 class="mainheader"><?php /* translators: For Your Information */ _e('FYI') ?></h2>		<ul><?php if ( ! empty($api->version) ) : ?>			<li><strong><?php _e('Version:') ?></strong> <?php echo $api->version ?></li><?php endif; if ( ! empty($api->author) ) : ?>			<li><strong><?php _e('Author:') ?></strong> <?php echo links_add_target($api->author, '_blank') ?></li><?php endif; if ( ! empty($api->last_updated) ) : ?>			<li><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $api->last_updated ?>"><?php							printf( __('%s ago'), human_time_diff(strtotime($api->last_updated)) ) ?></span></li><?php endif; if ( ! empty($api->requires) ) : ?>			<li><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $api->requires) ?></li><?php endif; if ( ! empty($api->tested) ) : ?>			<li><strong><?php _e('Compatible up to:') ?></strong> <?php echo $api->tested ?></li><?php endif; if ( ! empty($api->downloaded) ) : ?>			<li><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $api->downloaded), number_format_i18n($api->downloaded)) ?></li><?php endif; if ( ! empty($api->slug) && empty($api->external) ) : ?>			<li><a target="_blank" href="http://wordpress.org/extend/plugins/<?php echo $api->slug ?>/"><?php _e('WordPress.org Plugin Page &#187;') ?></a></li><?php endif; if ( ! empty($api->homepage) ) : ?>			<li><a target="_blank" href="<?php echo $api->homepage ?>"><?php _e('Plugin Homepage  &#187;') ?></a></li><?php endif; ?>		</ul>		<?php if ( ! empty($api->rating) ) : ?>		<h2><?php _e('Average Rating') ?></h2>		<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?>">			<div class="star star-rating" style="width: <?php echo esc_attr($api->rating) ?>px"></div>			<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>			<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>			<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>			<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>			<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>		</div>		<small><?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?></small>		<?php endif; ?>	</div>	<div id="section-holder" class="wrap">	<?php		if ( !empty($api->tested) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->tested)), $api->tested, '>') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';		else if ( !empty($api->requires) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->requires)), $api->requires, '<') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been marked as compatible</strong> with your version of WordPress.') . '</p></div>';		foreach ( (array)$api->sections as $section_name => $content ) {			$title = $section_name;			$title[0] = strtoupper($title[0]);			$title = str_replace('_', ' ', $title);			$content = links_add_base_url($content, 'http://wordpress.org/extend/plugins/' . $api->slug . '/');			$content = links_add_target($content, '_blank');			$san_title = esc_attr(sanitize_title_with_dashes($title));			$display = ( $section_name == $section ) ? 'block' : 'none';			echo "\t<div id='section-{$san_title}' class='section' style='display: {$display};'>\n";			echo "\t\t<h2 class='long-header'>$title</h2>";			echo $content;			echo "\t</div>\n";		}	echo "</div>\n";	iframe_footer();	exit;}
<?php/** * Permalink settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Permalink Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides some common options for your default permalinks URL structure.') . '</p>' .	'<p>' . __('If you pick an option other than Default, your general URL path with structure tags, terms surrounded by <code>%</code>, will also appear in the custom structure field and your path can be further modified there.') . '</p>' .	'<p>' . __('When you assign multiple categories or tags to a post, only one can show up in the permalink: the lowest numbered category. This applies if your custom structure includes <code>%category%</code> or <code>%tag%</code>.') . '</p>' .	'<p>' . __('Note that permalinks beginning with the category, tag, author or postname structure tags require more advanced server resources. Double-check your hosting details to make sure those are in place or start your permalinks with other structure tags.') . '</p>' .	'<p>' . __('The Optional fields let you customize the &#8220;category&#8221; and &#8220;tag&#8221; base names that will appear in archive URLs. For example, the page listing all posts in the &#8220;Uncategorized&#8221; category could be <code>/topics/uncategorized</code> instead of <code>/category/uncategorized</code>.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Permalinks_SubPanel" target="_blank">Permalinks Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Using_Permalinks" target="_blank">Using Permalinks Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');/** * Display JavaScript on the page. * * @package WordPress * @subpackage Permalink_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[function GetElementsWithClassName(elementName, className) {var allElements = document.getElementsByTagName(elementName);var elemColl = new Array();for (i = 0; i < allElements.length; i++) {if (allElements[i].className == className) {elemColl[elemColl.length] = allElements[i];}}return elemColl;}function upit() {var inputColl = GetElementsWithClassName('input', 'tog');var structure = document.getElementById('permalink_structure');var inputs = '';for (i = 0; i < inputColl.length; i++) {if ( inputColl[i].checked && inputColl[i].value != '') {inputs += inputColl[i].value + ' ';}}inputs = inputs.substr(0,inputs.length - 1);if ( 'custom' != inputs )structure.value = inputs;}function blurry() {if (!document.getElementById) return;var structure = document.getElementById('permalink_structure');structure.onfocus = function () { document.getElementById('custom_selection').checked = 'checked'; }var aInputs = document.getElementsByTagName('input');for (var i = 0; i < aInputs.length; i++) {aInputs[i].onclick = aInputs[i].onkeyup = upit;}}window.onload = blurry;//]]></script><?php}add_filter('admin_head', 'add_js');include('./admin-header.php');$home_path = get_home_path();$iis7_permalinks = iis7_supports_permalinks();$prefix = $blog_prefix = '';if ( ! got_mod_rewrite() && ! $iis7_permalinks )	$prefix = '/index.php';if ( is_multisite() && !is_subdomain_install() && is_main_site() )	$blog_prefix = '/blog';if ( isset($_POST['permalink_structure']) || isset($_POST['category_base']) ) {	check_admin_referer('update-permalink');	if ( isset( $_POST['permalink_structure'] ) ) {		if ( isset( $_POST['selection'] ) && 'custom' != $_POST['selection'] )			$permalink_structure = $_POST['selection'];		else			$permalink_structure = $_POST['permalink_structure'];		if ( ! empty( $permalink_structure ) ) {			$permalink_structure = preg_replace( '#/+#', '/', '/' . str_replace( '#', '', $permalink_structure ) );			if ( $prefix && $blog_prefix )				$permalink_structure = $prefix . preg_replace( '#^/?index\.php#', '', $permalink_structure );			else				$permalink_structure = $blog_prefix . $permalink_structure;		}		$wp_rewrite->set_permalink_structure( $permalink_structure );	}	if ( isset( $_POST['category_base'] ) ) {		$category_base = $_POST['category_base'];		if ( ! empty( $category_base ) )			$category_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $category_base ) );		$wp_rewrite->set_category_base( $category_base );	}	if ( isset( $_POST['tag_base'] ) ) {		$tag_base = $_POST['tag_base'];		if ( ! empty( $tag_base ) )			$tag_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $tag_base ) );		$wp_rewrite->set_tag_base( $tag_base );	}}$permalink_structure = get_option('permalink_structure');$category_base = get_option('category_base');$tag_base = get_option( 'tag_base' );if ( $iis7_permalinks ) {	if ( ( ! file_exists($home_path . 'web.config') && win_is_writable($home_path) ) || win_is_writable($home_path . 'web.config') )		$writable = true;	else		$writable = false;} else {	if ( ( ! file_exists($home_path . '.htaccess') && is_writable($home_path) ) || is_writable($home_path . '.htaccess') )		$writable = true;	else		$writable = false;}if ( $wp_rewrite->using_index_permalinks() )	$usingpi = true;else	$usingpi = false;$wp_rewrite->flush_rules();if (isset($_POST['submit'])) : ?><div id="message" class="updated"><p><?phpif ( ! is_multisite() ) {	if ( $iis7_permalinks ) {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your web.config now');		else if ( $permalink_structure && ! $usingpi && $writable )			_e('Permalink structure updated. Remove write access on web.config file now!');		else			_e('Permalink structure updated');	} else {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your .htaccess now.');		else			_e('Permalink structure updated.');	}} else {	_e('Permalink structure updated.');}?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form" action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>  <p><?php _e('By default WordPress uses web <abbr title="Universal Resource Locator">URL</abbr>s which have question marks and lots of numbers in them, however WordPress offers you the ability to create a custom URL structure for your permalinks and archives. This can improve the aesthetics, usability, and forward-compatibility of your links. A <a href="http://codex.wordpress.org/Using_Permalinks">number of tags are available</a>, and here are some examples to get you started.'); ?></p><?phpif ( is_multisite() && !is_subdomain_install() && is_main_site() ) {	$permalink_structure = preg_replace( '|^/?blog|', '', $permalink_structure );	$category_base = preg_replace( '|^/?blog|', '', $category_base );	$tag_base = preg_replace( '|^/?blog|', '', $tag_base );}$structures = array(	'',	$prefix . '/%year%/%monthnum%/%day%/%postname%/',	$prefix . '/%year%/%monthnum%/%postname%/',	$prefix . '/archives/%post_id%'	);?><h3><?php _e('Common settings'); ?></h3><table class="form-table">	<tr>		<th><label><input name="selection" type="radio" value="" class="tog" <?php checked('', $permalink_structure); ?> /> <?php _e('Default'); ?></label></th>		<td><code><?php echo get_option('home'); ?>/?p=123</code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[1]); ?>" class="tog" <?php checked($structures[1], $permalink_structure); ?> /> <?php _e('Day and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/' . date('d') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[2]); ?>" class="tog" <?php checked($structures[2], $permalink_structure); ?> /> <?php _e('Month and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[3]); ?>" class="tog" <?php checked($structures[3], $permalink_structure); ?> /> <?php _e('Numeric'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix; ?>/archives/123</code></td>	</tr>	<tr>		<th>			<label><input name="selection" id="custom_selection" type="radio" value="custom" class="tog" <?php checked( !in_array($permalink_structure, $structures) ); ?> />			<?php _e('Custom Structure'); ?>			</label>		</th>		<td>			<?php echo $blog_prefix; ?>			<input name="permalink_structure" id="permalink_structure" type="text" value="<?php echo esc_attr($permalink_structure); ?>" class="regular-text code" />		</td>	</tr></table><h3><?php _e('Optional'); ?></h3><?php if ( $is_apache || $iis7_permalinks ) : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <kbd>topics</kbd> as your category base would make your category links like <code>http://example.org/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php else : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <code>topics</code> as your category base would make your category links like <code>http://example.org/index.php/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php endif; ?><table class="form-table">	<tr>		<th><label for="category_base"><?php /* translators: prefix for category permalinks */ _e('Category base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="category_base" id="category_base" type="text" value="<?php echo esc_attr( $category_base ); ?>" class="regular-text code" /></td>	</tr>	<tr>		<th><label for="tag_base"><?php _e('Tag base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="tag_base" id="tag_base" type="text" value="<?php echo esc_attr($tag_base); ?>" class="regular-text code" /></td>	</tr>	<?php do_settings_fields('permalink', 'optional'); ?></table><?php do_settings_sections('permalink'); ?><p class="submit">	<input type="submit" name="submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p>  </form><?php if ( !is_multisite() ) { ?><?php if ( $iis7_permalinks ) :	if ( isset($_POST['submit']) && $permalink_structure && ! $usingpi && ! $writable ) :		if ( file_exists($home_path . 'web.config') ) : ?><p><?php _e('If your <code>web.config</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this rule inside of the <code>/&lt;configuration&gt;/&lt;system.webServer&gt;/&lt;rewrite&gt;/&lt;rules&gt;</code> element in <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="9" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules()); ?></textarea></p></form><p><?php _e('If you temporarily make your <code>web.config</code> file writable for us to generate rewrite rules automatically, do not forget to revert the permissions after rule has been saved.')  ?></p>		<?php else : ?><p><?php _e('If the root directory of your site were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Create a new file, called <code>web.config</code> in the root directory of your site. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this code into the <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="18" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules(true)); ?></textarea></p></form><p><?php _e('If you temporarily make your site&#8217;s root directory writable for us to generate the <code>web.config</code> file automatically, do not forget to revert the permissions after the file has been created.')  ?></p>		<?php endif; ?>	<?php endif; ?><?php else :	if ( $permalink_structure && ! $usingpi && ! $writable ) : ?><p><?php _e('If your <code>.htaccess</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so these are the mod_rewrite rules you should have in your <code>.htaccess</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="6" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->mod_rewrite_rules()); ?></textarea></p></form>	<?php endif; ?><?php endif; ?><?php } // multisite ?></div><?php require('./admin-footer.php'); ?>
<?php/** * Metadata API * * Functions for retrieving and manipulating metadata of various WordPress object types.  Metadata * for an object is a represented by a simple key-value pair.  Objects may contain multiple * metadata entries that share the same key and differ only in their value. * * @package WordPress * @subpackage Meta * @since 2.9.0 *//** * Add metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry, * 		object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param bool $unique Optional, default is false.  Whether the specified metadata key should be * 		unique for the object.  If true, and the object already has a value for the specified * 		metadata key, no change will be made * @return bool True on successful update, false on failure. */function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( $unique && $wpdb->get_var( $wpdb->prepare(		"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",		$meta_key, $object_id ) ) )		return false;	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$wpdb->insert( $table, array(		$column => $object_id,		'meta_key' => $meta_key,		'meta_value' => $meta_value	) );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "added_{$meta_type}_meta", $wpdb->insert_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Update metadata for the specified object.  If no value already exists for the specified object * ID and metadata key, the metadata will be added. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of * 		metadata entry to update, object ID, meta key, and meta value * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of * 		updated metadata entry, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param string $prev_value Optional.  If specified, only update existing metadata entries with * 		the specified value.  Otherwise, update all entries. * @return bool True on successful update, false on failure. */function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( ! $meta_id = $wpdb->get_var( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) ) )		return add_metadata($meta_type, $object_id, $meta_key, $meta_value);	// Compare existing value to new value if no prev value given and the key exists only once.	if ( empty($prev_value) ) {		$old_value = get_metadata($meta_type, $object_id, $meta_key);		if ( count($old_value) == 1 ) {			if ( $old_value[0] == $meta_value )				return false;		}	}	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$data  = compact( 'meta_value' );	$where = array( $column => $object_id, 'meta_key' => $meta_key );	if ( !empty( $prev_value ) ) {		$prev_value = maybe_serialize($prev_value);		$where['meta_value'] = $prev_value;	}	do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	$wpdb->update( $table, $data, $where );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Delete metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of * 		deleted metadata entries, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Optional. Metadata value.  If specified, only delete metadata entries * 		with this value.  Otherwise, delete all entries with the specified meta_key. * @param bool $delete_all Optional, default is false.  If true, delete matching metadata entries * 		for all objects, ignoring the specified object_id.  Otherwise, only delete matching * 		metadata entries for the specified object_id. * @return bool True on successful delete, false on failure. */function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( (!$object_id = absint($object_id)) && !$delete_all )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$type_column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );	if ( !$delete_all )		$query .= $wpdb->prepare(" AND $type_column = %d", $object_id );	if ( $meta_value )		$query .= $wpdb->prepare(" AND meta_value = %s", $meta_value );	$meta_ids = $wpdb->get_col( $query );	if ( !count( $meta_ids ) )		return false;	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . " )";	$count = $wpdb->query($query);	if ( !$count )		return false;	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $meta_value );	return true;}/** * Retrieve metadata for the specified object. * * @since 2.9.0 * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Optional.  Metadata key.  If not specified, retrieve all metadata for * 		the specified object. * @param bool $single Optional, default is false.  If true, return only the first value of the * 		specified meta_key.  This parameter has no effect if meta_key is not specified. * @return string|array Single metadata value, or array of values */function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {	if ( !$meta_type )		return false;	if ( !$object_id = absint($object_id) )		return false;	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	if ( !$meta_cache ) {		update_meta_cache($meta_type, $object_id);		$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	}	if ( ! $meta_key )		return $meta_cache;	if ( isset($meta_cache[$meta_key]) ) {		if ( $single )			return maybe_unserialize( $meta_cache[$meta_key][0] );		else			return array_map('maybe_unserialize', $meta_cache[$meta_key]);	}	if ($single)		return '';	else		return array();}/** * Update the metadata cache for the specified objects. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int|array $object_ids array or comma delimited list of object IDs to update cache for * @return mixed Metadata cache for the specified objects, or false on failure. */function update_meta_cache($meta_type, $object_ids) {	if ( empty( $meta_type ) || empty( $object_ids ) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	$column = esc_sql($meta_type . '_id');	global $wpdb;	if ( !is_array($object_ids) ) {		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);		$object_ids = explode(',', $object_ids);	}	$object_ids = array_map('intval', $object_ids);	$cache_key = $meta_type . '_meta';	$ids = array();	foreach ( $object_ids as $id ) {		if ( false === wp_cache_get($id, $cache_key) )			$ids[] = $id;	}	if ( empty( $ids ) )		return false;	// Get meta info	$id_list = join(',', $ids);	$cache = array();	$meta_list = $wpdb->get_results( $wpdb->prepare("SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list)",		$meta_type), ARRAY_A );	if ( !empty($meta_list) ) {		foreach ( $meta_list as $metarow) {			$mpid = intval($metarow[$column]);			$mkey = $metarow['meta_key'];			$mval = $metarow['meta_value'];			// Force subkeys to be array type:			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )				$cache[$mpid] = array();			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )				$cache[$mpid][$mkey] = array();			// Add a value to the current pid/key:			$cache[$mpid][$mkey][] = $mval;		}	}	foreach ( $ids as $id ) {		if ( ! isset($cache[$id]) )			$cache[$id] = array();	}	foreach ( array_keys($cache) as $object)		wp_cache_set($object, $cache[$object], $cache_key);	return $cache;}/** * Retrieve the name of the metadata table for the specified object type. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object to get metadata table for (e.g., comment, post, or user) * @return mixed Metadata table name, or false if no metadata table exists */function _get_meta_table($type) {	global $wpdb;	$table_name = $type . 'meta';	if ( empty($wpdb->$table_name) )		return false;	return $wpdb->$table_name;}?>
<?php/** * Post functions and post utility function. * * @package WordPress * @subpackage Post * @since 1.5.0 *///// Post Type Registration///** * Creates the initial post types when 'init' action is fired. */function create_initial_post_types() {	register_post_type( 'post', array(		'public'  => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'page', array(		'public' => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'page',		'hierarchical' => true,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'attachment', array(		'labels' => array(			'name' => __( 'Media' ),		),		'public' => true,		'show_ui' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'media.php?attachment_id=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'can_export' => false,		'show_in_nav_menus' => false,	) );	register_post_type( 'revision', array(		'labels' => array(			'name' => __( 'Revisions' ),			'singular_name' => __( 'Revision' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_type( 'nav_menu_item', array(		'labels' => array(			'name' => __( 'Navigation Menu Items' ),			'singular_name' => __( 'Navigation Menu Item' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_status( 'publish', array(		'label'       => _x( 'Published', 'post' ),		'public'      => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Published <span class="count">(%s)</span>', 'Published <span class="count">(%s)</span>' ),	) );	register_post_status( 'future', array(		'label'       => _x( 'Scheduled', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop('Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' ),	) );	register_post_status( 'draft', array(		'label'       => _x( 'Draft', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Draft <span class="count">(%s)</span>', 'Drafts <span class="count">(%s)</span>' ),	) );	register_post_status( 'pending', array(		'label'       => _x( 'Pending', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Pending <span class="count">(%s)</span>', 'Pending <span class="count">(%s)</span>' ),	) );	register_post_status( 'private', array(		'label'       => _x( 'Private', 'post' ),		'private'     => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Private <span class="count">(%s)</span>', 'Private <span class="count">(%s)</span>' ),	) );	register_post_status( 'trash', array(		'label'       => _x( 'Trash', 'post' ),		'internal'    => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>' ),		'show_in_admin_status_list' => true,	) );	register_post_status( 'auto-draft', array(		'label'    => 'auto-draft',		'internal' => true,		'_builtin' => true, /* internal use only. */	) );	register_post_status( 'inherit', array(		'label'    => 'inherit',		'internal' => true,		'_builtin' => true, /* internal use only. */		'exclude_from_search' => false,	) );}add_action( 'init', 'create_initial_post_types', 0 ); // highest priority/** * Retrieve attached file path based on attachment ID. * * You can optionally send it through the 'get_attached_file' filter, but by * default it will just return the file path unfiltered. * * The function works by getting the single post meta name, named * '_wp_attached_file' and returning it. This is a convenience function to * prevent looking up the meta name and provide a mechanism for sending the * attached filename through a filter. * * @since 2.0.0 * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID. * @param bool $unfiltered Whether to apply filters. * @return string The file path to the attached file. */function get_attached_file( $attachment_id, $unfiltered = false ) {	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );	// If the file is relative, prepend upload dir	if ( 0 !== strpos($file, '/') && !preg_match('|^.:\\\|', $file) && ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) )		$file = $uploads['basedir'] . "/$file";	if ( $unfiltered )		return $file;	return apply_filters( 'get_attached_file', $file, $attachment_id );}/** * Update attachment file path based on attachment ID. * * Used to update the file path of the attachment, which uses post meta name * '_wp_attached_file' to store the path of the attachment. * * @since 2.1.0 * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID * @param string $file File path for the attachment * @return bool False on failure, true on success. */function update_attached_file( $attachment_id, $file ) {	if ( !get_post( $attachment_id ) )		return false;	$file = apply_filters( 'update_attached_file', $file, $attachment_id );	$file = _wp_relative_upload_path($file);	return update_post_meta( $attachment_id, '_wp_attached_file', $file );}/** * Return relative path to an uploaded file. * * The path is relative to the current upload dir. * * @since 2.9.0 * @uses apply_filters() Calls '_wp_relative_upload_path' on file path. * * @param string $path Full path to the file * @return string relative path on success, unchanged path on failure. */function _wp_relative_upload_path( $path ) {	$new_path = $path;	if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) {		if ( 0 === strpos($new_path, $uploads['basedir']) ) {				$new_path = str_replace($uploads['basedir'], '', $new_path);				$new_path = ltrim($new_path, '/');		}	}	return apply_filters( '_wp_relative_upload_path', $new_path, $path );}/** * Retrieve all children of the post parent ID. * * Normally, without any enhancements, the children would apply to pages. In the * context of the inner workings of WordPress, pages, posts, and attachments * share the same table, so therefore the functionality could apply to any one * of them. It is then noted that while this function does not work on posts, it * does not mean that it won't work on posts. It is recommended that you know * what context you wish to retrieve the children of. * * Attachments may also be made the child of a post, so if that is an accurate * statement (which needs to be verified), it would then be possible to get * all of the attachments for a post. Attachments have since changed since * version 2.5, so this is most likely unaccurate, but serves generally as an * example of what is possible. * * The arguments listed as defaults are for this function and also of the * {@link get_posts()} function. The arguments are combined with the * get_children defaults and are then passed to the {@link get_posts()} * function, which accepts additional arguments. You can replace the defaults in * this function, listed below and the additional arguments listed in the * {@link get_posts()} function. * * The 'post_parent' is the most important argument and important attention * needs to be paid to the $args parameter. If you pass either an object or an * integer (number), then just the 'post_parent' is grabbed and everything else * is lost. If you don't specify any arguments, then it is assumed that you are * in The Loop and the post parent will be grabbed for from the current post. * * The 'post_parent' argument is the ID to get the children. The 'numberposts' * is the amount of posts to retrieve that has a default of '-1', which is * used to get all of the posts. Giving a number higher than 0 will only * retrieve that amount of posts. * * The 'post_type' and 'post_status' arguments can be used to choose what * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress * post types are 'post', 'pages', and 'attachments'. The 'post_status' * argument will accept any post status within the write administration panels. * * @see get_posts() Has additional arguments that can be replaced. * @internal Claims made in the long description might be inaccurate. * * @since 2.0.0 * * @param mixed $args Optional. User defined arguments for replacing the defaults. * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N. * @return array|bool False on failure and the type will be determined by $output parameter. */function &get_children($args = '', $output = OBJECT) {	$kids = array();	if ( empty( $args ) ) {		if ( isset( $GLOBALS['post'] ) ) {			$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );		} else {			return $kids;		}	} elseif ( is_object( $args ) ) {		$args = array('post_parent' => (int) $args->post_parent );	} elseif ( is_numeric( $args ) ) {		$args = array('post_parent' => (int) $args);	}	$defaults = array(		'numberposts' => -1, 'post_type' => 'any',		'post_status' => 'any', 'post_parent' => 0,	);	$r = wp_parse_args( $args, $defaults );	$children = get_posts( $r );	if ( !$children )		return $kids;	update_post_cache($children);	foreach ( $children as $key => $child )		$kids[$child->ID] =& $children[$key];	if ( $output == OBJECT ) {		return $kids;	} elseif ( $output == ARRAY_A ) {		foreach ( (array) $kids as $kid )			$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);		return $weeuns;	} elseif ( $output == ARRAY_N ) {		foreach ( (array) $kids as $kid )			$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));		return $babes;	} else {		return $kids;	}}/** * Get extended entry info (<!--more-->). * * There should not be any space after the second dash and before the word * 'more'. There can be text or space(s) after the word 'more', but won't be * referenced. * * The returned array has 'main' and 'extended' keys. Main has the text before * the <code><!--more--></code>. The 'extended' key has the content after the * <code><!--more--></code> comment. * * @since 1.0.0 * * @param string $post Post content. * @return array Post before ('main') and after ('extended'). */function get_extended($post) {	//Match the new style more links	if ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {		list($main, $extended) = explode($matches[0], $post, 2);	} else {		$main = $post;		$extended = '';	}	// Strip leading and trailing whitespace	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);	return array('main' => $main, 'extended' => $extended);}/** * Retrieves post data given a post ID or post object. * * See {@link sanitize_post()} for optional $filter values. Also, the parameter * $post, must be given as a variable, since it is passed by reference. * * @since 1.5.1 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post * * @param int|object $post Post ID or post object. * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional, default is raw. * @return mixed Post data */function &get_post(&$post, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($post) ) {		if ( isset($GLOBALS['post']) )			$_post = & $GLOBALS['post'];		else			return $null;	} elseif ( is_object($post) && empty($post->filter) ) {		_get_post_ancestors($post);		$_post = sanitize_post($post, 'raw');		wp_cache_add($post->ID, $_post, 'posts');	} else {		if ( is_object($post) )			$post_id = $post->ID;		else			$post_id = $post;		$post_id = (int) $post_id;		if ( ! $_post = wp_cache_get($post_id, 'posts') ) {			$_post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $post_id));			if ( ! $_post )				return $null;			_get_post_ancestors($_post);			$_post = sanitize_post($_post, 'raw');			wp_cache_add($_post->ID, $_post, 'posts');		}	}	if ($filter != 'raw')		$_post = sanitize_post($_post, $filter);	if ( $output == OBJECT ) {		return $_post;	} elseif ( $output == ARRAY_A ) {		$__post = get_object_vars($_post);		return $__post;	} elseif ( $output == ARRAY_N ) {		$__post = array_values(get_object_vars($_post));		return $__post;	} else {		return $_post;	}}/** * Retrieve ancestors of a post. * * @since 2.5.0 * * @param int|object $post Post ID or post object * @return array Ancestor IDs or empty array if none are found. */function get_post_ancestors($post) {	$post = get_post($post);	if ( !empty($post->ancestors) )		return $post->ancestors;	return array();}/** * Retrieve data from a post field based on Post ID. * * Examples of the post field will be, 'post_type', 'post_status', 'content', * etc and based off of the post object property or key names. * * The context values are based off of the taxonomy filter functions and * supported values are found within those functions. * * @since 2.3.0 * @uses sanitize_post_field() See for possible $context values. * * @param string $field Post field name * @param id $post Post ID * @param string $context Optional. How to filter the field. Default is display. * @return WP_Error|string Value in post field or WP_Error on failure */function get_post_field( $field, $post, $context = 'display' ) {	$post = (int) $post;	$post = get_post( $post );	if ( is_wp_error($post) )		return $post;	if ( !is_object($post) )		return '';	if ( !isset($post->$field) )		return '';	return sanitize_post_field($field, $post->$field, $post->ID, $context);}/** * Retrieve the mime type of an attachment based on the ID. * * This function can be used with any post type, but it makes more sense with * attachments. * * @since 2.0.0 * * @param int $ID Optional. Post ID. * @return bool|string False on failure or returns the mime type */function get_post_mime_type($ID = '') {	$post = & get_post($ID);	if ( is_object($post) )		return $post->post_mime_type;	return false;}/** * Retrieve the post status based on the Post ID. * * If the post ID is of an attachment, then the parent post status will be given * instead. * * @since 2.0.0 * * @param int $ID Post ID * @return string|bool Post status or false on failure. */function get_post_status($ID = '') {	$post = get_post($ID);	if ( !is_object($post) )		return false;	// Unattached attachments are assumed to be published.	if ( ('attachment' == $post->post_type) && ('inherit' == $post->post_status) && ( 0 == $post->post_parent) )		return 'publish';	if ( ('attachment' == $post->post_type) && $post->post_parent && ($post->ID != $post->post_parent) )		return get_post_status($post->post_parent);	return $post->post_status;}/** * Retrieve all of the WordPress supported post statuses. * * Posts have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of post statuses. */function get_post_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'pending'		=> __('Pending Review'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Retrieve all of the WordPress support page statuses. * * Pages have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of page statuses. */function get_page_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post status based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post status name. * * * Optional $args contents: * * label - A descriptive name for the post status marked for translation. Defaults to $post_status. * public - Whether posts of this status should be shown in the admin UI. Defaults to true. * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to true. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses Inserts new post status object into the list * * @param string $post_status Name of the post status. * @param array|string $args See above description. */function register_post_status($post_status, $args = array()) {	global $wp_post_statuses;	if (!is_array($wp_post_statuses))		$wp_post_statuses = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array('label' => false, 'label_count' => false, 'exclude_from_search' => null, '_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'hierarchical' => false, 'public' => null, 'internal' => null, 'protected' => null, 'private' => null, 'show_in_admin_all' => null, 'publicly_queryable' => null, 'show_in_admin_status_list' => null, 'show_in_admin_all_list' => null, 'single_view_cap' => null);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_status = sanitize_user($post_status, true);	$args->name = $post_status;	if ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )		$args->internal = true;	if ( null === $args->public  )		$args->public = false;	if ( null === $args->private  )		$args->private = false;	if ( null === $args->protected  )		$args->protected = false;	if ( null === $args->internal  )		$args->internal = false;	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	if ( null === $args->exclude_from_search )		$args->exclude_from_search = $args->internal;	if ( null === $args->show_in_admin_all_list )		$args->show_in_admin_all_list = !$args->internal;	if ( null === $args->show_in_admin_status_list )			$args->show_in_admin_status_list = !$args->internal;	if ( null === $args->single_view_cap )		$args->single_view_cap = $args->public ? '' : 'edit';	if ( false === $args->label )		$args->label = $post_status;	if ( false === $args->label_count )		$args->label_count = array( $args->label, $args->label );	$wp_post_statuses[$post_status] = $args;	return $args;}/** * Retrieve a post status object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_statuses * * @param string $post_type The name of a registered post status * @return object A post status object */function get_post_status_object( $post_status ) {	global $wp_post_statuses;	if ( empty($wp_post_statuses[$post_status]) )		return null;	return $wp_post_statuses[$post_status];}/** * Get a list of all registered post status objects. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_status_object * * @param array|string $args An array of key => value arguments to match against the post status objects. * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_statuses;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);}/** * Whether the post type is hierarchical. * * A false return value might also mean that the post type does not exist. * * @since 3.0.0 * @see get_post_type_object * * @param string $post Post type name * @return bool Whether post type is hierarchical. */function is_post_type_hierarchical( $post_type ) {	if ( ! post_type_exists( $post_type ) )		return false;	$post_type = get_post_type_object( $post_type );	return $post_type->hierarchical;}/** * Checks if a post type is registered. * * @since 3.0.0 * @uses get_post_type_object() * * @param string Post type name * @return bool Whether post type is registered. */function post_type_exists( $post_type ) {	return (bool) get_post_type_object( $post_type );}/** * Retrieve the post type of the current post or of a given post. * * @since 2.1.0 * * @uses $post The Loop current post global * * @param mixed $the_post Optional. Post object or post ID. * @return bool|string post type or false on failure. */function get_post_type( $the_post = false ) {	global $post;	if ( false === $the_post )		$the_post = $post;	elseif ( is_numeric($the_post) )		$the_post = get_post($the_post);	if ( is_object($the_post) )		return $the_post->post_type;	return false;}/** * Retrieve a post type object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_types * @see register_post_type * @see get_post_types * * @param string $post_type The name of a registered post type * @return object A post type object */function get_post_type_object( $post_type ) {	global $wp_post_types;	if ( empty($wp_post_types[$post_type]) )		return null;	return $wp_post_types[$post_type];}/** * Get a list of all registered post type objects. * * @package WordPress * @subpackage Post * @since 2.9.0 * @uses $wp_post_types * @see register_post_type * * @param array|string $args An array of key => value arguments to match against the post type objects. * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_types;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_types, $args, $operator, $field);}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post type based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post type name. * * * Optional $args contents: * * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used. * - description - A short descriptive summary of what the post type is. Defaults to blank. * - public - Whether posts of this type should be shown in the admin UI. Defaults to false. * - exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. * - publicly_queryable - Whether post_type queries can be performed from the front page.  Defaults to whatever public is set as. * - show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. * - menu_position - The position in the menu order the post type should appear. Defaults to the bottom. * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. * - capability_type - The post type to use for checking read, edit, and delete capabilities. Defaults to "post". * - capabilities - Array of capabilities for this post type. You can see accepted values in {@link get_post_type_capabilities()}. By default the capability_type is used to construct capabilities. * - hierarchical - Whether the post type is hierarchical. Defaults to false. * - supports - An alias for calling add_post_type_support() directly. See add_post_type_support() for Documentation. Defaults to none. * - register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form.  Do remove_meta_box() and add_meta_box() calls in the callback. * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.  Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). * - labels - An array of labels for this post type. You can see accepted values in {@link get_post_type_labels()}. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. * - permalink_epmask - The default rewrite endpoint bitmasks. * - rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize permastruct; default will use $post_type as slug. * - query_var - false to prevent queries, or string to value of the query var to use for this post type * - can_export - true allows this post type to be exported. * - show_in_nav_menus - true makes this post type available for selection in navigation menus. * - _builtin - true if this post type is a native or "built-in" post_type.  THIS IS FOR INTERNAL USE ONLY! * - _edit_link - URL segement to use for edit link of this post type.  Set to 'post.php?post=%d'.  THIS IS FOR INTERNAL USE ONLY! * * @since 2.9.0 * @uses $wp_post_types Inserts new post type object into the list * * @param string $post_type Name of the post type. * @param array|string $args See above description. * @return object the registered post type object */function register_post_type($post_type, $args = array()) {	global $wp_post_types, $wp_rewrite, $wp;	if ( !is_array($wp_post_types) )		$wp_post_types = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array(		'labels' => array(), 'description' => '', 'publicly_queryable' => null, 'exclude_from_search' => null,		'_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'capabilities' => array(), 'hierarchical' => false,		'public' => false, 'rewrite' => true, 'query_var' => true, 'supports' => array(), 'register_meta_box_cb' => null,		'taxonomies' => array(), 'show_ui' => null, 'menu_position' => null, 'menu_icon' => null,		'permalink_epmask' => EP_PERMALINK, 'can_export' => true, 'show_in_nav_menus' => null	);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_type = sanitize_user($post_type, true);	$args->name = $post_type;	// If not set, default to the setting for public.	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	// If not set, default to the setting for public.	if ( null === $args->show_ui )		$args->show_ui = $args->public;	// Whether to show this type in nav-menus.php.  Defaults to the setting for public.	if ( null === $args->show_in_nav_menus )		$args->show_in_nav_menus = $args->public;	// If not set, default to true if not public, false if public.	if ( null === $args->exclude_from_search )		$args->exclude_from_search = !$args->public;	if ( empty($args->capability_type) )		$args->capability_type = 'post';	$args->cap = get_post_type_capabilities( $args );	unset($args->capabilities);	if ( ! empty($args->supports) ) {		add_post_type_support($post_type, $args->supports);		unset($args->supports);	} else {		// Add default features		add_post_type_support($post_type, array('title', 'editor'));	}	if ( false !== $args->query_var && !empty($wp) ) {		if ( true === $args->query_var )			$args->query_var = $post_type;		$args->query_var = sanitize_title_with_dashes($args->query_var);		$wp->add_query_var($args->query_var);	}	if ( false !== $args->rewrite && '' != get_option('permalink_structure') ) {		if ( !is_array($args->rewrite) )			$args->rewrite = array();		if ( !isset($args->rewrite['slug']) )			$args->rewrite['slug'] = $post_type;		if ( !isset($args->rewrite['with_front']) )			$args->rewrite['with_front'] = true;		if ( $args->hierarchical )			$wp_rewrite->add_rewrite_tag("%$post_type%", '(.+?)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		else			$wp_rewrite->add_rewrite_tag("%$post_type%", '([^/]+)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		$wp_rewrite->add_permastruct($post_type, "{$args->rewrite['slug']}/%$post_type%", $args->rewrite['with_front'], $args->permalink_epmask);	}	if ( $args->register_meta_box_cb )		add_action('add_meta_boxes_' . $post_type, $args->register_meta_box_cb, 10, 1);	$args->labels = get_post_type_labels( $args );	$args->label = $args->labels->name;	$wp_post_types[$post_type] = $args;	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );	foreach ( $args->taxonomies as $taxonomy ) {		register_taxonomy_for_object_type( $taxonomy, $post_type );	}	return $args;}/** * Builds an object with all post type capabilities out of a post type object * * Accepted keys of the capabilities array in the post type object: * - edit_post - The meta capability that controls editing a particular object of this post type. Defaults to "edit_ . $capability_type" (edit_post). * - edit_posts - The capability that controls editing objects of this post type as a class. Defaults to "edit_ . $capability_type . s" (edit_posts). * - edit_others_posts - The capability that controls editing objects of this post type that are owned by other users. Defaults to "edit_others_ . $capability_type . s" (edit_others_posts). * - publish_posts - The capability that controls publishing objects of this post type. Defaults to "publish_ . $capability_type . s" (publish_posts). * - read_post - The meta capability that controls reading a particular object of this post type. Defaults to "read_ . $capability_type" (read_post). * - read_private_posts - The capability that controls reading private posts. Defaults to "read_private . $capability_type . s" (read_private_posts). * - delete_post - The meta capability that controls deleting a particular object of this post type. Defaults to "delete_ . $capability_type" (delete_post). * * @since 3.0.0 * @param object $args * @return object object with all the capabilities as member variables */function get_post_type_capabilities( $args ) {	$defaults = array(		'edit_post'          => 'edit_'         . $args->capability_type,		'edit_posts'         => 'edit_'         . $args->capability_type . 's',		'edit_others_posts'  => 'edit_others_'  . $args->capability_type . 's',		'publish_posts'      => 'publish_'      . $args->capability_type . 's',		'read_post'          => 'read_'         . $args->capability_type,		'read_private_posts' => 'read_private_' . $args->capability_type . 's',		'delete_post'        => 'delete_'       . $args->capability_type,	);	$labels = array_merge( $defaults, $args->capabilities );	return (object) $labels;}/** * Builds an object with all post type labels out of a post type object * * Accepted keys of the label array in the post type object: * - name - general name for the post type, usually plural. The same and overriden by $post_type_object->label. Default is Posts/Pages * - singular_name - name for one object of this post type. Default is Post/Page * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');</code> * - add_new_item - Default is Add New Post/Add New Page * - edit_item - Default is Edit Post/Edit Page * - new_item - Default is New Post/New Page * - view_item - Default is View Post/View Page * - search_items - Default is Search Posts/Search Pages * - not_found - Default is No posts found/No pages found * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page: * * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages.) * * @since 3.0.0 * @param object $post_type_object * @return object object with all the labels as member variables */function get_post_type_labels( $post_type_object ) {	$nohier_vs_hier_defaults = array(		'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),		'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),		'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),		'add_new_item' => array( __('Add New Post'), __('Add New Page') ),		'edit_item' => array( __('Edit Post'), __('Edit Page') ),		'new_item' => array( __('New Post'), __('New Page') ),		'view_item' => array( __('View Post'), __('View Page') ),		'search_items' => array( __('Search Posts'), __('Search Pages') ),		'not_found' => array( __('No posts found'), __('No pages found') ),		'not_found_in_trash' => array( __('No posts found in Trash'), __('No pages found in Trash') ),		'parent_item_colon' => array( null, __('Parent Page:') )	);	return _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );}/** * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object * * @access private */function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {	if ( isset( $object->label ) && empty( $object->labels['name'] ) )		$object->labels['name'] = $object->label;	if ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )		$object->labels['singular_name'] = $object->labels['name'];	$defaults = array_map( create_function( '$x', $object->hierarchical? 'return $x[1];' : 'return $x[0];' ), $nohier_vs_hier_defaults );	$labels = array_merge( $defaults, $object->labels );	return (object)$labels;}/** * Register support of certain features for a post type. * * All features are directly associated with a functional area of the edit screen, such as the * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'. * * Additionally, the 'revisions' feature dictates whether the post type will store revisions, * and the 'comments' feature dicates whether the comments count will show on the edit screen. * * @since 3.0.0 * @param string $post_type The post type for which to add the feature * @param string|array $feature the feature being added, can be an array of feature strings or a single string */function add_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	$features = (array) $feature;	foreach ($features as $feature) {		if ( func_num_args() == 2 )			$_wp_post_type_features[$post_type][$feature] = true;		else			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );	}}/** * Remove support for a feature from a post type. * * @since 3.0.0 * @param string $post_type The post type for which to remove the feature * @param string $feature The feature being removed */function remove_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset($_wp_post_type_features[$post_type]) )		return;	if ( isset($_wp_post_type_features[$post_type][$feature]) )		unset($_wp_post_type_features[$post_type][$feature]);}/** * Checks a post type's support for a given feature * * @since 3.0.0 * @param string $post_type The post type being checked * @param string $feature the feature being checked * @return boolean */function post_type_supports( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset( $_wp_post_type_features[$post_type][$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 2 )		return true;	// @todo Allow pluggable arg checking	//$args = array_slice( func_get_args(), 2 );	return true;}/** * Updates the post type for the post ID. * * The page or post cache will be cleaned for the post ID. * * @since 2.5.0 * * @uses $wpdb * * @param int $post_id Post ID to change post type. Not actually optional. * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to *  name a few. * @return int Amount of rows changed. Should be 1 for success and 0 for failure. */function set_post_type( $post_id = 0, $post_type = 'post' ) {	global $wpdb;	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');	$return = $wpdb->update($wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );	if ( 'page' == $post_type )		clean_page_cache($post_id);	else		clean_post_cache($post_id);	return $return;}/** * Retrieve list of latest posts or posts matching criteria. * * The defaults are as follows: *     'numberposts' - Default is 5. Total number of posts to retrieve. *     'offset' - Default is 0. See {@link WP_Query::query()} for more. *     'category' - What category to pull the posts from. *     'orderby' - Default is 'post_date'. How to order the posts. *     'order' - Default is 'DESC'. The order to retrieve the posts. *     'include' - See {@link WP_Query::query()} for more. *     'exclude' - See {@link WP_Query::query()} for more. *     'meta_key' - See {@link WP_Query::query()} for more. *     'meta_value' - See {@link WP_Query::query()} for more. *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few. *     'post_parent' - The parent of the post or post type. *     'post_status' - Default is 'published'. Post status to retrieve. * * @since 1.2.0 * @uses $wpdb * @uses WP_Query::query() See for more default arguments and information. * @link http://codex.wordpress.org/Template_Tags/get_posts * * @param array $args Optional. Overrides defaults. * @return array List of posts. */function get_posts($args = null) {	$defaults = array(		'numberposts' => 5, 'offset' => 0,		'category' => 0, 'orderby' => 'post_date',		'order' => 'DESC', 'include' => array(),		'exclude' => array(), 'meta_key' => '',		'meta_value' =>'', 'post_type' => 'post',		'suppress_filters' => true	);	$r = wp_parse_args( $args, $defaults );	if ( empty( $r['post_status'] ) )		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';	if ( ! empty($r['numberposts']) )		$r['posts_per_page'] = $r['numberposts'];	if ( ! empty($r['category']) )		$r['cat'] = $r['category'];	if ( ! empty($r['include']) ) {		$incposts = wp_parse_id_list( $r['include'] );		$r['posts_per_page'] = count($incposts);  // only the number of posts included		$r['post__in'] = $incposts;	} elseif ( ! empty($r['exclude']) )		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );	$r['caller_get_posts'] = true;	$get_posts = new WP_Query;	return $get_posts->query($r);}//// Post meta functions///** * Add meta data field to a post. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/add_post_meta * * @param int $post_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a post. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/delete_post_meta * * @param int $post_id post ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_post_meta($post_id, $meta_key, $meta_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return delete_metadata('post', $post_id, $meta_key, $meta_value);}/** * Retrieve post meta field for a post. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post_meta * * @param int $post_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_post_meta($post_id, $key, $single = false) {	return get_metadata('post', $post_id, $key, $single);}/** * Update post meta field based on post ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and post ID. * * If the meta field for the post does not exist, it will be added. * * @since 1.5 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/update_post_meta * * @param int $post_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);}/** * Delete everything from post meta matching meta key. * * @since 2.3.0 * @uses $wpdb * * @param string $post_meta_key Key to search for when deleting. * @return bool Whether the post meta key was deleted from the database */function delete_post_meta_by_key($post_meta_key) {	if ( !$post_meta_key )		return false;	global $wpdb;	$post_ids = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key));	if ( $post_ids ) {		$postmetaids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key ) );		$in = implode( ',', array_fill(1, count($postmetaids), '%d'));		do_action( 'delete_postmeta', $postmetaids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN($in)", $postmetaids ));		do_action( 'deleted_postmeta', $postmetaids );		foreach ( $post_ids as $post_id )			wp_cache_delete($post_id, 'post_meta');		return true;	}	return false;}/** * Retrieve post meta fields, based on post ID. * * The post meta fields are retrieved from the cache, so the function is * optimized to be called more than once. It also applies to the functions, that * use this function. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom * * @uses $id Current Loop Post ID * * @param int $post_id post ID * @return array */function get_post_custom($post_id = 0) {	global $id;	if ( !$post_id )		$post_id = (int) $id;	$post_id = (int) $post_id;	if ( ! wp_cache_get($post_id, 'post_meta') )		update_postmeta_cache($post_id);	return wp_cache_get($post_id, 'post_meta');}/** * Retrieve meta field names for a post. * * If there are no meta fields, then nothing (null) will be returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_keys * * @param int $post_id post ID * @return array|null Either array of the keys, or null if keys could not be retrieved. */function get_post_custom_keys( $post_id = 0 ) {	$custom = get_post_custom( $post_id );	if ( !is_array($custom) )		return;	if ( $keys = array_keys($custom) )		return $keys;}/** * Retrieve values for a custom post field. * * The parameters must not be considered optional. All of the post meta fields * will be retrieved and only the meta field key values returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_values * * @param string $key Meta field key. * @param int $post_id Post ID * @return array Meta field values. */function get_post_custom_values( $key = '', $post_id = 0 ) {	if ( !$key )		return null;	$custom = get_post_custom($post_id);	return isset($custom[$key]) ? $custom[$key] : null;}/** * Check if post is sticky. * * Sticky posts should remain at the top of The Loop. If the post ID is not * given, then The Loop ID for the current post will be used. * * @since 2.7.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post is sticky. */function is_sticky($post_id = null) {	global $id;	$post_id = absint($post_id);	if ( !$post_id )		$post_id = absint($id);	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return false;	if ( in_array($post_id, $stickies) )		return true;	return false;}/** * Sanitize every post field. * * If the context is 'raw', then the post object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_post_field() Used to sanitize the fields. * * @param object|array $post The Post Object or Array * @param string $context Optional, default is 'display'. How to sanitize post fields. * @return object|array The now sanitized Post Object or Array (will be the same type as $post) */function sanitize_post($post, $context = 'display') {	if ( is_object($post) ) {		// Check if post already filtered for this context		if ( isset($post->filter) && $context == $post->filter )			return $post;		if ( !isset($post->ID) )			$post->ID = 0;		foreach ( array_keys(get_object_vars($post)) as $field )			$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);		$post->filter = $context;	} else {		// Check if post already filtered for this context		if ( isset($post['filter']) && $context == $post['filter'] )			return $post;		if ( !isset($post['ID']) )			$post['ID'] = 0;		foreach ( array_keys($post) as $field )			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);		$post['filter'] = $context;	}	return $post;}/** * Sanitize post field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $post_id if $context == 'edit' and field name prefix == 'post_'. * * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'. * * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'post_'. * * @param string $field The Post Object field name. * @param mixed $value The Post Object value. * @param int $post_id Post ID. * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_post_field($field, $value, $post_id, $context) {	$int_fields = array('ID', 'post_parent', 'menu_order');	if ( in_array($field, $int_fields) )		$value = (int) $value;	// Fields which contain arrays of ints.	$array_int_fields = array( 'ancestors' );	if ( in_array($field, $array_int_fields) ) {		$value = array_map( 'absint', $value);		return $value;	}	if ( 'raw' == $context )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'post_') ) {		$prefixed = true;		$field_no_prefix = str_replace('post_', '', $field);	}	if ( 'edit' == $context ) {		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $post_id);			// Old school			$value = apply_filters("${field_no_prefix}_edit_pre", $value, $post_id);		} else {			$value = apply_filters("edit_post_$field", $value, $post_id);		}		if ( in_array($field, $format_to_edit) ) {			if ( 'post_content' == $field )				$value = format_to_edit($value, user_can_richedit());			else				$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);			$value = apply_filters("${field_no_prefix}_save_pre", $value);		} else {			$value = apply_filters("pre_post_$field", $value);			$value = apply_filters("${field}_pre", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $post_id, $context);		else			$value = apply_filters("post_$field", $value, $post_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Make a post sticky. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function stick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		$stickies = array($post_id);	if ( ! in_array($post_id, $stickies) )		$stickies[] = $post_id;	update_option('sticky_posts', $stickies);}/** * Unstick a post. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function unstick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return;	if ( ! in_array($post_id, $stickies) )		return;	$offset = array_search($post_id, $stickies);	if ( false === $offset )		return;	array_splice($stickies, $offset, 1);	update_option('sticky_posts', $stickies);}/** * Count number of posts of a post type and is user has permissions to view. * * This function provides an efficient method of finding the amount of post's * type a blog has. Another method is to count the amount of items in * get_posts(), but that method has a lot of overhead with doing so. Therefore, * when developing for 2.5+, use this function instead. * * The $perm parameter checks for 'readable' value and if the user can read * private posts, it will display that for the user that is signed in. * * @since 2.5.0 * @link http://codex.wordpress.org/Template_Tags/wp_count_posts * * @param string $type Optional. Post type to retrieve count * @param string $perm Optional. 'readable' or empty. * @return object Number of posts for each status */function wp_count_posts( $type = 'post', $perm = '' ) {	global $wpdb;	$user = wp_get_current_user();	$cache_key = $type;	$query = "SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s";	if ( 'readable' == $perm && is_user_logged_in() ) {		$post_type_object = get_post_type_object($type);		if ( !current_user_can( $post_type_object->cap->read_private_posts ) ) {			$cache_key .= '_' . $perm . '_' . $user->ID;			$query .= " AND (post_status != 'private' OR ( post_author = '$user->ID' AND post_status = 'private' ))";		}	}	$query .= ' GROUP BY post_status';	$count = wp_cache_get($cache_key, 'counts');	if ( false !== $count )		return $count;	$count = $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );	$stats = array();	foreach ( get_post_stati() as $state )		$stats[$state] = 0;	foreach ( (array) $count as $row )		$stats[$row['post_status']] = $row['num_posts'];	$stats = (object) $stats;	wp_cache_set($cache_key, $stats, 'counts');	return $stats;}/** * Count number of attachments for the mime type(s). * * If you set the optional mime_type parameter, then an array will still be * returned, but will only have the item you are looking for. It does not give * you the number of attachments that are children of a post. You can get that * by counting the number of children that post has. * * @since 2.5.0 * * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns. * @return array Number of posts for each mime type. */function wp_count_attachments( $mime_type = '' ) {	global $wpdb;	$and = wp_post_mime_type_where( $mime_type );	$count = $wpdb->get_results( "SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type", ARRAY_A );	$stats = array( );	foreach( (array) $count as $row ) {		$stats[$row['post_mime_type']] = $row['num_posts'];	}	$stats['trash'] = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and");	return (object) $stats;}/** * Check a MIME-Type against a list. * * If the wildcard_mime_types parameter is a string, it must be comma separated * list. If the real_mime_types is a string, it is also comma separated to * create the list. * * @since 2.5.0 * * @param string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or *  flash (same as *flash*). * @param string|array $real_mime_types post_mime_type values * @return array array(wildcard=>array(real types)) */function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {	$matches = array();	if ( is_string($wildcard_mime_types) )		$wildcard_mime_types = array_map('trim', explode(',', $wildcard_mime_types));	if ( is_string($real_mime_types) )		$real_mime_types = array_map('trim', explode(',', $real_mime_types));	$wild = '[-._a-z0-9]*';	foreach ( (array) $wildcard_mime_types as $type ) {		$type = str_replace('*', $wild, $type);		$patternses[1][$type] = "^$type$";		if ( false === strpos($type, '/') ) {			$patternses[2][$type] = "^$type/";			$patternses[3][$type] = $type;		}	}	asort($patternses);	foreach ( $patternses as $patterns )		foreach ( $patterns as $type => $pattern )			foreach ( (array) $real_mime_types as $real )				if ( preg_match("#$pattern#", $real) && ( empty($matches[$type]) || false === array_search($real, $matches[$type]) ) )					$matches[$type][] = $real;	return $matches;}/** * Convert MIME types into SQL. * * @since 2.5.0 * * @param string|array $mime_types List of mime types or comma separated string of mime types. * @param string $table_alias Optional. Specify a table alias, if needed. * @return string The SQL AND clause for mime searching. */function wp_post_mime_type_where($post_mime_types, $table_alias = '') {	$where = '';	$wildcards = array('', '%', '%/%');	if ( is_string($post_mime_types) )		$post_mime_types = array_map('trim', explode(',', $post_mime_types));	foreach ( (array) $post_mime_types as $mime_type ) {		$mime_type = preg_replace('/\s/', '', $mime_type);		$slashpos = strpos($mime_type, '/');		if ( false !== $slashpos ) {			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));			if ( empty($mime_subgroup) )				$mime_subgroup = '*';			else				$mime_subgroup = str_replace('/', '', $mime_subgroup);			$mime_pattern = "$mime_group/$mime_subgroup";		} else {			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);			if ( false === strpos($mime_pattern, '*') )				$mime_pattern .= '/*';		}		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);		if ( in_array( $mime_type, $wildcards ) )			return '';		if ( false !== strpos($mime_pattern, '%') )			$wheres[] = empty($table_alias) ? "post_mime_type LIKE '$mime_pattern'" : "$table_alias.post_mime_type LIKE '$mime_pattern'";		else			$wheres[] = empty($table_alias) ? "post_mime_type = '$mime_pattern'" : "$table_alias.post_mime_type = '$mime_pattern'";	}	if ( !empty($wheres) )		$where = ' AND (' . join(' OR ', $wheres) . ') ';	return $where;}/** * Trashes or deletes a post or page. * * When the post and page is permanently deleted, everything that is tied to it is deleted also. * This includes comments, post meta fields, and terms associated with the post. * * The post or page is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * @since 1.0.0 * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'. * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'. * @uses wp_delete_attachment() if post type is 'attachment'. * @uses wp_trash_post() if item should be trashed. * * @param int $postid Post ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure */function wp_delete_post( $postid = 0, $force_delete = false ) {	global $wpdb, $wp_rewrite;	if ( !$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $postid)) )		return $post;	if ( !$force_delete && ( $post->post_type == 'post' || $post->post_type == 'page') && get_post_status( $postid ) != 'trash' && EMPTY_TRASH_DAYS )			return wp_trash_post($postid);	if ( $post->post_type == 'attachment' )		return wp_delete_attachment( $postid, $force_delete );	do_action('delete_post', $postid);	delete_post_meta($postid,'_wp_trash_meta_status');	delete_post_meta($postid,'_wp_trash_meta_time');	wp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));	$parent_data = array( 'post_parent' => $post->post_parent );	$parent_where = array( 'post_parent' => $postid );	if ( 'page' == $post->post_type) {	 	// if the page is defined in option page_on_front or post_for_posts,		// adjust the corresponding options		if ( get_option('page_on_front') == $postid ) {			update_option('show_on_front', 'posts');			delete_option('page_on_front');		}		if ( get_option('page_for_posts') == $postid ) {			delete_option('page_for_posts');		}		// Point children of this page to its parent, also clean the cache of affected children		$children_query = $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type='page'", $postid);		$children = $wpdb->get_results($children_query);		$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'page' ) );	} else {		unstick_post($postid);	}	// Do raw query.  wp_get_post_revisions() is filtered	$revision_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'", $postid ) );	// Use wp_delete_post (via wp_delete_post_revision) again.  Ensures any meta/misplaced data gets cleaned up.	foreach ( $revision_ids as $revision_id )		wp_delete_post_revision( $revision_id );	// Point all attachments to this post up one level	$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $postid ));	if ( ! empty($comment_ids) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $postid ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $postid );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $postid ));	do_action( 'deleted_post', $postid );	if ( 'page' == $post->post_type ) {		clean_page_cache($postid);		foreach ( (array) $children as $child )			clean_page_cache($child->ID);		$wp_rewrite->flush_rules(false);	} else {		clean_post_cache($postid);	}	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );	do_action('deleted_post', $postid);	return $post;}/** * Moves a post or page to the Trash * * If trash is disabled, the post or page is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_post' before trashing * @uses do_action() on 'trashed_post' after trashing * @uses wp_delete_post() if trash is disabled * * @param int $postid Post ID. * @return mixed False on failure */function wp_trash_post($post_id = 0) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_post($post_id, true);	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] == 'trash' )		return false;	do_action('trash_post', $post_id);	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);	add_post_meta($post_id,'_wp_trash_meta_time', time());	$post['post_status'] = 'trash';	wp_insert_post($post);	wp_trash_post_comments($post_id);	do_action('trashed_post', $post_id);	return $post;}/** * Restores a post or page from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_post' before undeletion * @uses do_action() on 'untrashed_post' after undeletion * * @param int $postid Post ID. * @return mixed False on failure */function wp_untrash_post($post_id = 0) {	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] != 'trash' )		return false;	do_action('untrash_post', $post_id);	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);	$post['post_status'] = $post_status;	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	wp_insert_post($post);	wp_untrash_post_comments($post_id);	do_action('untrashed_post', $post_id);	return $post;}/** * Moves comments for a post to the trash * * @since 2.9.0 * @uses do_action() on 'trash_post_comments' before trashing * @uses do_action() on 'trashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_trash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	do_action('trash_post_comments', $post_id);	$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id) );	if ( empty($comments) )		return;	// Cache current status for each comment	$statuses = array();	foreach ( $comments as $comment )		$statuses[$comment->comment_ID] = $comment->comment_approved;	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);	// Set status for all comments to post-trashed	$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));	clean_comment_cache( array_keys($statuses) );	do_action('trashed_post_comments', $post_id, $statuses);	return $result;}/** * Restore comments for a post from the trash * * @since 2.9.0 * @uses do_action() on 'untrash_post_comments' before trashing * @uses do_action() on 'untrashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_untrash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);	if ( empty($statuses) )		return true;	do_action('untrash_post_comments', $post_id);	// Restore each comment to its original status	$group_by_status = array();	foreach ( $statuses as $comment_id => $comment_status )		$group_by_status[$comment_status][] = $comment_id;	foreach ( $group_by_status as $status => $comments ) {		// Sanity check. This shouldn't happen.		if ( 'post-trashed' == $status )			$status = '0';		$comments_in = implode( "', '", $comments );		$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );	}	clean_comment_cache( array_keys($statuses) );	delete_post_meta($post_id, '_wp_trash_meta_comments_status');	do_action('untrashed_post_comments', $post_id);}/** * Retrieve the list of categories for a post. * * Compatibility layer for themes and plugins. Also an easy layer of abstraction * away from the complexity of the taxonomy layer. * * @since 2.1.0 * * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here. * * @param int $post_id Optional. The Post ID. * @param array $args Optional. Overwrite the defaults. * @return array */function wp_get_post_categories( $post_id = 0, $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'ids');	$args = wp_parse_args( $args, $defaults );	$cats = wp_get_object_terms($post_id, 'category', $args);	return $cats;}/** * Retrieve the tags for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_tags( $post_id = 0, $args = array() ) {	return wp_get_post_terms( $post_id, 'post_tag', $args);}/** * Retrieve the terms for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.8.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag. * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$tags = wp_get_object_terms($post_id, $taxonomy, $args);	return $tags;}/** * Retrieve number of recent posts. * * @since 1.0.0 * @uses $wpdb * * @param int $num Optional, default is 10. Number of posts to get. * @return array List of posts. */function wp_get_recent_posts($num = 10) {	global $wpdb;	// Set the limit clause, if we got a limit	$num = (int) $num;	if ( $num ) {		$limit = "LIMIT $num";	}	$sql = "SELECT * FROM $wpdb->posts WHERE post_type = 'post' AND post_status IN ( 'draft', 'publish', 'future', 'pending', 'private' ) ORDER BY post_date DESC $limit";	$result = $wpdb->get_results($sql, ARRAY_A);	return $result ? $result : array();}/** * Retrieve a single post, based on post ID. * * Has categories in 'post_category' property or key. Has tags in 'tags_input' * property or key. * * @since 1.0.0 * * @param int $postid Post ID. * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A. * @return object|array Post object or array holding post contents and information */function wp_get_single_post($postid = 0, $mode = OBJECT) {	$postid = (int) $postid;	$post = get_post($postid, $mode);	// Set categories and tags	if ( $mode == OBJECT ) {		$post->post_category = array();		if ( is_object_in_taxonomy($post->post_type, 'category') )			$post->post_category = wp_get_post_categories($postid);		$post->tags_input = array();		if ( is_object_in_taxonomy($post->post_type, 'post_tag') )			$post->tags_input = wp_get_post_tags($postid, array('fields' => 'names'));	} else {		$post['post_category'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'category') )			$post['post_category'] = wp_get_post_categories($postid);		$post['tags_input'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'post_tag') )			$post['tags_input'] = wp_get_post_tags($postid, array('fields' => 'names'));	}	return $post;}/** * Insert a post. * * If the $postarr parameter has 'ID' set to a value, then post will be updated. * * You can set the post date manually, but setting the values for 'post_date' * and 'post_date_gmt' keys. You can close the comments or open the comments by * setting the value for 'comment_status' key. * * The defaults for the parameter $postarr are: *     'post_status'   - Default is 'draft'. *     'post_type'     - Default is 'post'. *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post. *     'ping_status'   - Default is the value in 'default_ping_status' option. *                       Whether the attachment can accept pings. *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Post content filtered. *     'post_excerpt'  - Post excerpt. * * @since 1.0.0 * @link http://core.trac.wordpress.org/ticket/9084 Bug report on 'wp_insert_post_data' filter. * @uses $wpdb * @uses $wp_rewrite * @uses $user_ID * * @uses do_action() Calls 'pre_post_update' on post ID if this is an update. * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update. * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before *                   returning. * * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database *                       update or insert. * @uses wp_transition_post_status() * * @param array $postarr Optional. Overrides defaults. * @param bool $wp_error Optional. Allow return of WP_Error on failure. * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success. */function wp_insert_post($postarr = array(), $wp_error = false) {	global $wpdb, $wp_rewrite, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0,		'post_content' => '', 'post_title' => '');	$postarr = wp_parse_args($postarr, $defaults);	$postarr = sanitize_post($postarr, 'db');	// export array as variables	extract($postarr, EXTR_SKIP);	// Are we updating or creating?	$update = false;	if ( !empty($ID) ) {		$update = true;		$previous_status = get_post_field('post_status', $ID);	} else {		$previous_status = 'new';	}	if ( ('' == $post_content) && ('' == $post_title) && ('' == $post_excerpt) && ('attachment' != $post_type) ) {		if ( $wp_error )			return new WP_Error('empty_content', __('Content, title, and excerpt are empty.'));		else			return 0;	}	if ( empty($post_type) )		$post_type = 'post';	if ( empty($post_status) )		$post_status = 'draft';	if ( !empty($post_category) )		$post_category = array_filter($post_category); // Filter out empty terms	// Make sure we set a valid category.	if ( empty($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	if ( empty($post_author) )		$post_author = $user_ID;	$post_ID = 0;	// Get the post ID and GUID	if ( $update ) {		$post_ID = (int) $ID;		$guid = get_post_field( 'guid', $post_ID );		$post_before = get_post($post_ID);	}	// Don't allow contributors to set to set the post slug for pending review posts	if ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) )		$post_name = '';	// Create a valid post name.  Drafts and pending posts are allowed to have an empty	// post name.	if ( empty($post_name) ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_name = sanitize_title($post_title);		else			$post_name = '';	} else {		$post_name = sanitize_title($post_name);	}	// If the post date is empty (due to having been new or a draft) and status is not 'draft' or 'pending', set date to now	if ( empty($post_date) || '0000-00-00 00:00:00' == $post_date )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) || '0000-00-00 00:00:00' == $post_date_gmt ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_date_gmt = get_gmt_from_date($post_date);		else			$post_date_gmt = '0000-00-00 00:00:00';	}	if ( $update || '0000-00-00 00:00:00' == $post_date ) {		$post_modified     = current_time( 'mysql' );		$post_modified_gmt = current_time( 'mysql', 1 );	} else {		$post_modified     = $post_date;		$post_modified_gmt = $post_date_gmt;	}	if ( 'publish' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) )			$post_status = 'future';	} elseif( 'future' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) )			$post_status = 'publish';	}	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( ! isset($pinged) )		$pinged = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( !empty($post_ID) ) {		if ( $post_parent == $post_ID ) {			// Post can't be its own parent			$post_parent = 0;		} elseif ( !empty($post_parent) ) {			$parent_post = get_post($post_parent);			// Check for circular dependency			if ( isset( $parent_post->post_parent ) && $parent_post->post_parent == $post_ID )				$post_parent = 0;		}	}	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) || 'private' == $post_status )		$post_password = '';	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'guid' ) );	$data = apply_filters('wp_insert_post_data', $data, $postarr);	$data = stripslashes_deep( $data );	$where = array( 'ID' => $post_ID );	if ( $update ) {		do_action( 'pre_post_update', $post_ID );		if ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {			if ( $wp_error )				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);			else				return 0;		}	} else {		if ( isset($post_mime_type) )			$data['post_mime_type'] = stripslashes( $post_mime_type ); // This isn't in the update		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		if ( false === $wpdb->insert( $wpdb->posts, $data ) ) {			if ( $wp_error )				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);			else				return 0;		}		$post_ID = (int) $wpdb->insert_id;		// use the newly generated $post_ID		$where = array( 'ID' => $post_ID );	}	if ( empty($data['post_name']) && !in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {		$data['post_name'] = sanitize_title($data['post_title'], $post_ID);		$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );	}	if ( is_object_in_taxonomy($post_type, 'category') )		wp_set_post_categories( $post_ID, $post_category );	if ( isset( $tags_input ) && is_object_in_taxonomy($post_type, 'post_tag') )		wp_set_post_tags( $post_ID, $tags_input );	// new-style support for all custom taxonomies	if ( !empty($tax_input) ) {		foreach ( $tax_input as $taxonomy => $tags ) {			$taxonomy_obj = get_taxonomy($taxonomy);			if ( is_array($tags) ) // array = hierarchical, string = non-hierarchical.				$tags = array_filter($tags);			if ( current_user_can($taxonomy_obj->cap->assign_terms) )				wp_set_post_terms( $post_ID, $tags, $taxonomy );		}	}	$current_guid = get_post_field( 'guid', $post_ID );	if ( 'page' == $data['post_type'] )		clean_page_cache($post_ID);	else		clean_post_cache($post_ID);	// Set GUID	if ( !$update && '' == $current_guid )		$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );	$post = get_post($post_ID);	if ( !empty($page_template) && 'page' == $data['post_type'] ) {		$post->page_template = $page_template;		$page_templates = get_page_templates();		if ( 'default' != $page_template && !in_array($page_template, $page_templates) ) {			if ( $wp_error )				return new WP_Error('invalid_page_template', __('The page template is invalid.'));			else				return 0;		}		update_post_meta($post_ID, '_wp_page_template',  $page_template);	}	wp_transition_post_status($data['post_status'], $previous_status, $post);	if ( $update ) {		do_action('edit_post', $post_ID, $post);		$post_after = get_post($post_ID);		do_action( 'post_updated', $post_ID, $post_after, $post_before);	}	do_action('save_post', $post_ID, $post);	do_action('wp_insert_post', $post_ID, $post);	return $post_ID;}/** * Update a post with new post data. * * The date does not have to be set for drafts. You can set the date and it will * not be overridden. * * @since 1.0.0 * * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not. * @return int 0 on failure, Post ID on success. */function wp_update_post($postarr = array()) {	if ( is_object($postarr) ) {		// non-escaped post was passed		$postarr = get_object_vars($postarr);		$postarr = add_magic_quotes($postarr);	}	// First, get all of the original fields	$post = wp_get_single_post($postarr['ID'], ARRAY_A);	// Escape data pulled from DB.	$post = add_magic_quotes($post);	// Passed post category list overwrites existing category list if not empty.	if ( isset($postarr['post_category']) && is_array($postarr['post_category'])			 && 0 != count($postarr['post_category']) )		$post_cats = $postarr['post_category'];	else		$post_cats = $post['post_category'];	// Drafts shouldn't be assigned a date unless explicitly done so by the user	if ( in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )		$clear_date = true;	else		$clear_date = false;	// Merge old and new fields with new fields overwriting old ones.	$postarr = array_merge($post, $postarr);	$postarr['post_category'] = $post_cats;	if ( $clear_date ) {		$postarr['post_date'] = current_time('mysql');		$postarr['post_date_gmt'] = '';	}	if ($postarr['post_type'] == 'attachment')		return wp_insert_attachment($postarr);	return wp_insert_post($postarr);}/** * Publish a post by transitioning the post status. * * @since 2.1.0 * @uses $wpdb * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data. * * @param int $post_id Post ID. * @return null */function wp_publish_post($post_id) {	global $wpdb;	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'publish' == $post->post_status )		return;	$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post_id ) );	$old_status = $post->post_status;	$post->post_status = 'publish';	wp_transition_post_status('publish', $old_status, $post);	// Update counts for the post's terms.	foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {		$tt_ids = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'tt_ids'));		wp_update_term_count($tt_ids, $taxonomy);	}	do_action('edit_post', $post_id, $post);	do_action('save_post', $post_id, $post);	do_action('wp_insert_post', $post_id, $post);}/** * Publish future post and make sure post ID has future post status. * * Invoked by cron 'publish_future_post' event. This safeguard prevents cron * from publishing drafts, etc. * * @since 2.5.0 * * @param int $post_id Post ID. * @return null Nothing is returned. Which can mean that no action is required or post was published. */function check_and_publish_future_post($post_id) {	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'future' != $post->post_status )		return;	$time = strtotime( $post->post_date_gmt . ' GMT' );	if ( $time > time() ) { // Uh oh, someone jumped the gun!		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );		return;	}	return wp_publish_post($post_id);}/** * Computes a unique slug for the post, when given the desired slug and some post details. * * @global wpdb $wpdb * @global WP_Rewrite $wp_rewrite * @param string $slug the desired slug (post_name) * @param integer $post_ID * @param string $post_status no uniqueness checks are made if the post is still draft or pending * @param string $post_type * @param integer $post_parent * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) */function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )		return $slug;	global $wpdb, $wp_rewrite;	$feeds = $wp_rewrite->feeds;	if ( ! is_array( $feeds ) )		$feeds = array();	$hierarchical_post_types = apply_filters( 'hierarchical_post_types', array( 'page' ) );	if ( 'attachment' == $post_type ) {		// Attachment slugs must be unique across all types.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {		// Page slugs must be unique within their own trees. Pages are in a separate		// namespace than posts so page slugs are allowed to overlap post slugs.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( '" . implode( "', '", esc_sql( $hierarchical_post_types ) ) . "' ) AND ID != %d AND post_parent = %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID, $post_parent ) );		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( '@^(page)?\d+$@', $slug ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} else {		// Post slugs must be unique across all posts.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	}	return $slug;}/** * Adds tags to a post. * * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @param int $post_id Post ID * @param string $tags The tags to set for the post, separated by commas. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_add_post_tags($post_id = 0, $tags = '') {	return wp_set_post_tags($post_id, $tags, true);}/** * Set the tags for a post. * * @since 2.3.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);}/** * Set the terms for a post. * * @since 2.8.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( empty($tags) )		$tags = array();	$tags = is_array($tags) ? $tags : explode( ',', trim($tags, " \n\t\r\0\x0B,") );	// Hierarchical taxonomies must always pass IDs rather than names so that children with the same	// names but different parents aren't confused.	if ( is_taxonomy_hierarchical( $taxonomy ) ) {		$tags = array_map( 'intval', $tags );		$tags = array_unique( $tags );	}	wp_set_object_terms($post_id, $tags, $taxonomy, $append);}/** * Set categories for a post. * * If the post categories parameter is not set, then the default category is * going used. * * @since 2.1.0 * * @param int $post_ID Post ID. * @param array $post_categories Optional. List of categories. * @return bool|mixed */function wp_set_post_categories($post_ID = 0, $post_categories = array()) {	$post_ID = (int) $post_ID;	$post_type = get_post_type( $post_ID );	$post_status = get_post_status( $post_ID );	// If $post_categories isn't already an array, make it one:	if ( !is_array($post_categories) || empty($post_categories) ) {		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_categories = array( get_option('default_category') );		else			$post_categories = array();	} else if ( 1 == count($post_categories) && '' == reset($post_categories) ) {		return true;	}	if ( !empty($post_categories) ) {		$post_categories = array_map('intval', $post_categories);		$post_categories = array_unique($post_categories);	}	return wp_set_object_terms($post_ID, $post_categories, 'category');}/** * Transition the post status of a post. * * Calls hooks to transition post status. * * The first is 'transition_post_status' with new status, old status, and post data. * * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the * post data. * * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status * parameter and POSTTYPE is post_type post data. * * @since 2.3.0 * @link http://codex.wordpress.org/Post_Status_Transitions * * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and *  $post if there is a status change. * @uses do_action() Calls '${old_status}_to_$new_status' on $post if there is a status change. * @uses do_action() Calls '${new_status}_$post->post_type' on post ID and $post. * * @param string $new_status Transition to this post status. * @param string $old_status Previous post status. * @param object $post Post data. */function wp_transition_post_status($new_status, $old_status, $post) {	do_action('transition_post_status', $new_status, $old_status, $post);	do_action("${old_status}_to_$new_status", $post);	do_action("${new_status}_$post->post_type", $post->ID, $post);}//// Trackback and ping functions///** * Add a URL to those already pung. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @param string $uri Ping URI. * @return int How many rows were updated. */function add_ping($post_id, $uri) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung[] = $uri;	$new = implode("\n", $pung);	$new = apply_filters('add_ping', $new);	// expected_slashed ($new)	$new = stripslashes($new);	return $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post_id ) );}/** * Retrieve enclosures already enclosed for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array List of enclosures */function get_enclosed($post_id) {	$custom_fields = get_post_custom( $post_id );	$pung = array();	if ( !is_array( $custom_fields ) )		return $pung;	foreach ( $custom_fields as $key => $val ) {		if ( 'enclosure' != $key || !is_array( $val ) )			continue;		foreach( $val as $enc ) {			$enclosure = split( "\n", $enc );			$pung[] = trim( $enclosure[ 0 ] );		}	}	$pung = apply_filters('get_enclosed', $pung);	return $pung;}/** * Retrieve URLs already pinged for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array */function get_pung($post_id) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung = apply_filters('get_pung', $pung);	return $pung;}/** * Retrieve URLs that need to be pinged. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID * @return array */function get_to_ping($post_id) {	global $wpdb;	$to_ping = $wpdb->get_var( $wpdb->prepare( "SELECT to_ping FROM $wpdb->posts WHERE ID = %d", $post_id ));	$to_ping = trim($to_ping);	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);	$to_ping = apply_filters('get_to_ping',  $to_ping);	return $to_ping;}/** * Do trackbacks for a list of URLs. * * @since 1.0.0 * * @param string $tb_list Comma separated list of URLs * @param int $post_id Post ID */function trackback_url_list($tb_list, $post_id) {	if ( ! empty( $tb_list ) ) {		// get post data		$postdata = wp_get_single_post($post_id, ARRAY_A);		// import postdata as variables		extract($postdata, EXTR_SKIP);		// form an excerpt		$excerpt = strip_tags($post_excerpt ? $post_excerpt : $post_content);		if (strlen($excerpt) > 255) {			$excerpt = substr($excerpt,0,252) . '...';		}		$trackback_urls = explode(',', $tb_list);		foreach( (array) $trackback_urls as $tb_url) {			$tb_url = trim($tb_url);			trackback($tb_url, stripslashes($post_title), $excerpt, $post_id);		}	}}//// Page functions///** * Get a list of page IDs. * * @since 2.0.0 * @uses $wpdb * * @return array List of page IDs. */function get_all_page_ids() {	global $wpdb;	if ( ! $page_ids = wp_cache_get('all_page_ids', 'posts') ) {		$page_ids = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'page'");		wp_cache_add('all_page_ids', $page_ids, 'posts');	}	return $page_ids;}/** * Retrieves page data given a page ID or page object. * * @since 1.5.1 * * @param mixed $page Page object or page ID. Passed by reference. * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter How the return value should be filtered. * @return mixed Page data. */function &get_page(&$page, $output = OBJECT, $filter = 'raw') {	$p = get_post($page, $output, $filter);	return $p;}/** * Retrieves a page given its path. * * @since 2.1.0 * @uses $wpdb * * @param string $page_path Page path * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed Null when complete. */function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {	global $wpdb;	$page_path = rawurlencode(urldecode($page_path));	$page_path = str_replace('%2F', '/', $page_path);	$page_path = str_replace('%20', ' ', $page_path);	$page_paths = '/' . trim($page_path, '/');	$leaf_path  = sanitize_title(basename($page_paths));	$page_paths = explode('/', $page_paths);	$full_path = '';	foreach ( (array) $page_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);	$pages = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_name = %s AND (post_type = %s OR post_type = 'attachment')", $leaf_path, $post_type ));	if ( empty($pages) )		return null;	foreach ( $pages as $page ) {		$path = '/' . $leaf_path;		$curpage = $page;		while ( $curpage->post_parent != 0 ) {			$curpage = $wpdb->get_row( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE ID = %d and post_type = %s", $curpage->post_parent, $post_type ));			$path = '/' . $curpage->post_name . $path;		}		if ( $path == $full_path )			return get_page($page->ID, $output, $post_type);	}	return null;}/** * Retrieve a page given its title. * * @since 2.1.0 * @uses $wpdb * * @param string $page_title Page title * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed */function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page' ) {	global $wpdb;	$page = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type= %s", $page_title, $post_type ) );	if ( $page )		return get_page($page, $output);	return null;}/** * Retrieve child pages from list of pages matching page ID. * * Matches against the pages parameter against the page ID. Also matches all * children for the same to retrieve all children of a page. Does not make any * SQL queries to get the children. * * @since 1.5.1 * * @param int $page_id Page ID. * @param array $pages List of pages' objects. * @return array */function &get_page_children($page_id, $pages) {	$page_list = array();	foreach ( (array) $pages as $page ) {		if ( $page->post_parent == $page_id ) {			$page_list[] = $page;			if ( $children = get_page_children($page->ID, $pages) )				$page_list = array_merge($page_list, $children);		}	}	return $page_list;}/** * Order the pages with children under parents in a flat list. * * It uses auxiliary structure to hold parent-children relationships and * runs in O(N) complexity * * @since 2.0.0 * * @param array $posts Posts array. * @param int $parent Parent page ID. * @return array A list arranged by hierarchy. Children immediately follow their parents. */function &get_page_hierarchy( &$pages, $page_id = 0 ) {	if ( empty( $pages ) ) {		$result = array();		return $result;	}	$children = array();	foreach ( (array) $pages as $p ) {		$parent_id = intval( $p->post_parent );		$children[ $parent_id ][] = $p;	 }	 $result = array();	 _page_traverse_name( $page_id, $children, $result );	return $result;}/** * function to traverse and return all the nested children post names of a root page. * $children contains parent-chilren relations * */function _page_traverse_name( $page_id, &$children, &$result ){	if ( isset( $children[ $page_id ] ) ){		foreach( (array)$children[ $page_id ] as $child ) {			$result[ $child->ID ] = $child->post_name;			_page_traverse_name( $child->ID, $children, $result );		}	}}/** * Builds URI for a page. * * Sub pages will be in the "directory" under the parent page post name. * * @since 1.5.0 * * @param mixed $page Page object or page ID. * @return string Page URI. */function get_page_uri($page) {	if ( ! is_object($page) )		$page = get_page($page);	$uri = $page->post_name;	// A page cannot be it's own parent.	if ( $page->post_parent == $page->ID )		return $uri;	while ($page->post_parent != 0) {		$page = get_page($page->post_parent);		$uri = $page->post_name . "/" . $uri;	}	return $uri;}/** * Retrieve a list of pages. * * The defaults that can be overridden are the following: 'child_of', * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude', * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'. * * @since 1.5.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options that overrides defaults. * @return array List of pages matching defaults or $args */function &get_pages($args = '') {	global $wpdb;	$defaults = array(		'child_of' => 0, 'sort_order' => 'ASC',		'sort_column' => 'post_title', 'hierarchical' => 1,		'exclude' => array(), 'include' => array(),		'meta_key' => '', 'meta_value' => '',		'authors' => '', 'parent' => -1, 'exclude_tree' => '',		'number' => '', 'offset' => 0,		'post_type' => 'page', 'post_status' => 'publish',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$number = (int) $number;	$offset = (int) $offset;	// Make sure the post type is hierarchical	$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );	if ( !in_array( $post_type, $hierarchical_post_types ) )		return false;	// Make sure we have a valid post status	if ( !in_array($post_status, get_post_stati()) )		return false;	$cache = array();	$key = md5( serialize( compact(array_keys($defaults)) ) );	if ( $cache = wp_cache_get( 'get_pages', 'posts' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			$pages = apply_filters('get_pages', $cache[ $key ], $r );			return $pages;		}	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include		$parent = -1;		$exclude = '';		$meta_key = '';		$meta_value = '';		$hierarchical = false;		$incpages = wp_parse_id_list( $include );		if ( ! empty( $incpages ) ) {			foreach ( $incpages as $incpage ) {				if (empty($inclusions))					$inclusions = $wpdb->prepare(' AND ( ID = %d ', $incpage);				else					$inclusions .= $wpdb->prepare(' OR ID = %d ', $incpage);			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$expages = wp_parse_id_list( $exclude );		if ( ! empty( $expages ) ) {			foreach ( $expages as $expage ) {				if (empty($exclusions))					$exclusions = $wpdb->prepare(' AND ( ID <> %d ', $expage);				else					$exclusions .= $wpdb->prepare(' AND ID <> %d ', $expage);			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	$author_query = '';	if (!empty($authors)) {		$post_authors = preg_split('/[\s,]+/',$authors);		if ( ! empty( $post_authors ) ) {			foreach ( $post_authors as $post_author ) {				//Do we have an author id or an author login?				if ( 0 == intval($post_author) ) {					$post_author = get_userdatabylogin($post_author);					if ( empty($post_author) )						continue;					if ( empty($post_author->ID) )						continue;					$post_author = $post_author->ID;				}				if ( '' == $author_query )					$author_query = $wpdb->prepare(' post_author = %d ', $post_author);				else					$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);			}			if ( '' != $author_query )				$author_query = " AND ($author_query)";		}	}	$join = '';	$where = "$exclusions $inclusions ";	if ( ! empty( $meta_key ) || ! empty( $meta_value ) ) {		$join = " LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )";		// meta_key and meta_value might be slashed		$meta_key = stripslashes($meta_key);		$meta_value = stripslashes($meta_value);		if ( ! empty( $meta_key ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s", $meta_key);		if ( ! empty( $meta_value ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_value = %s", $meta_value);	}	if ( $parent >= 0 )		$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);	$where_post_type = $wpdb->prepare( "post_type = '%s' AND post_status = '%s'", $post_type, $post_status );	$query = "SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where ";	$query .= $author_query;	$query .= " ORDER BY " . $sort_column . " " . $sort_order ;	if ( !empty($number) )		$query .= ' LIMIT ' . $offset . ',' . $number;	$pages = $wpdb->get_results($query);	if ( empty($pages) ) {		$pages = apply_filters('get_pages', array(), $r);		return $pages;	}	// Sanitize before caching so it'll only get done once	$num_pages = count($pages);	for ($i = 0; $i < $num_pages; $i++) {		$pages[$i] = sanitize_post($pages[$i], 'raw');	}	// Update cache.	update_page_cache($pages);	if ( $child_of || $hierarchical )		$pages = & get_page_children($child_of, $pages);	if ( !empty($exclude_tree) ) {		$exclude = (int) $exclude_tree;		$children = get_page_children($exclude, $pages);		$excludes = array();		foreach ( $children as $child )			$excludes[] = $child->ID;		$excludes[] = $exclude;		$num_pages = count($pages);		for ( $i = 0; $i < $num_pages; $i++ ) {			if ( in_array($pages[$i]->ID, $excludes) )				unset($pages[$i]);		}	}	$cache[ $key ] = $pages;	wp_cache_set( 'get_pages', $cache, 'posts' );	$pages = apply_filters('get_pages', $pages, $r);	return $pages;}//// Attachment functions///** * Check if the attachment URI is local one and is really an attachment. * * @since 2.0.0 * * @param string $url URL to check * @return bool True on success, false on failure. */function is_local_attachment($url) {	if (strpos($url, home_url()) === false)		return false;	if (strpos($url, home_url('/?attachment_id=')) !== false)		return true;	if ( $id = url_to_postid($url) ) {		$post = & get_post($id);		if ( 'attachment' == $post->post_type )			return true;	}	return false;}/** * Insert an attachment. * * If you set the 'ID' in the $object parameter, it will mean that you are * updating and attempt to update the attachment. You can also set the * attachment name or title by setting the key 'post_name' or 'post_title'. * * You can set the dates for the attachment manually by setting the 'post_date' * and 'post_date_gmt' keys' values. * * By default, the comments will use the default settings for whether the * comments are allowed. You can close them manually or keep them open by * setting the value for the 'comment_status' key. * * The $object parameter can have the following: *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post. *     'post_type'     - Default is 'post', will be set to attachment. Can not override. *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment. *     'ping_status'   - Default is the value in default ping status option. Whether the attachment *                       can accept pings. *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs *                       to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Attachment post content filtered. *     'post_excerpt'  - Attachment excerpt. * * @since 2.0.0 * @uses $wpdb * @uses $user_ID * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update. * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update. * * @param string|array $object Arguments to override defaults. * @param string $file Optional filename. * @param int $post_parent Parent post ID. * @return int Attachment ID. */function wp_insert_attachment($object, $file = false, $parent = 0) {	global $wpdb, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0);	$object = wp_parse_args($object, $defaults);	if ( !empty($parent) )		$object['post_parent'] = $parent;	$object = sanitize_post($object, 'db');	// export array as variables	extract($object, EXTR_SKIP);	if ( empty($post_author) )		$post_author = $user_ID;	$post_type = 'attachment';	$post_status = 'inherit';	// Make sure we set a valid category.	if ( !isset($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	// Are we updating or creating?	if ( !empty($ID) ) {		$update = true;		$post_ID = (int) $ID;	} else {		$update = false;		$post_ID = 0;	}	// Create a valid post name.	if ( empty($post_name) )		$post_name = sanitize_title($post_title);	else		$post_name = sanitize_title($post_name);	// expected_slashed ($post_name)	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	if ( empty($post_date) )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) )		$post_date_gmt = current_time('mysql', 1);	if ( empty($post_modified) )		$post_modified = $post_date;	if ( empty($post_modified_gmt) )		$post_modified_gmt = $post_date_gmt;	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) )		$post_password = '';	if ( ! isset($pinged) )		$pinged = '';	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' ) );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->posts, $data, array( 'ID' => $post_ID ) );	} else {		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		$wpdb->insert( $wpdb->posts, $data );		$post_ID = (int) $wpdb->insert_id;	}	if ( empty($post_name) ) {		$post_name = sanitize_title($post_title, $post_ID);		$wpdb->update( $wpdb->posts, compact("post_name"), array( 'ID' => $post_ID ) );	}	wp_set_post_categories($post_ID, $post_category);	if ( $file )		update_attached_file( $post_ID, $file );	clean_post_cache($post_ID);	if ( isset($post_parent) && $post_parent < 0 )		add_post_meta($post_ID, '_wp_attachment_temp_parent', $post_parent, true);	if ( $update) {		do_action('edit_attachment', $post_ID);	} else {		do_action('add_attachment', $post_ID);	}	return $post_ID;}/** * Trashes or deletes an attachment. * * When an attachment is permanently deleted, the file will also be removed. * Deletion removes all post meta fields, taxonomy, comments, etc. associated * with the attachment (except the main post). * * The attachment is moved to the trash instead of permanently deleted unless trash * for media is disabled, item is already in the trash, or $force_delete is true. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_attachment' hook on Attachment ID. * * @param int $postid Attachment ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure. Post data on success. */function wp_delete_attachment( $post_id, $force_delete = false ) {	global $wpdb;	if ( !$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) ) )		return $post;	if ( 'attachment' != $post->post_type )		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' != $post->post_status )		return wp_trash_post( $post_id );	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	$meta = wp_get_attachment_metadata( $post_id );	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	$file = get_attached_file( $post_id );	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	do_action('delete_attachment', $post_id);	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->postmeta WHERE meta_key = '_thumbnail_id' AND meta_value = %d", $post_id ));	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id ));	if ( ! empty( $comment_ids ) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $post_id ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $post_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $post_id ));	do_action( 'deleted_post', $post_id );	$uploadpath = wp_upload_dir();	if ( ! empty($meta['thumb']) ) {		// Don't delete the thumb if another attachment uses it		if (! $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d", '%' . $meta['thumb'] . '%', $post_id)) ) {			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);			$thumbfile = apply_filters('wp_delete_file', $thumbfile);			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );		}	}	// remove intermediate and backup images if there are any	foreach ( get_intermediate_image_sizes() as $size ) {		if ( $intermediate = image_get_intermediate_size($post_id, $size) ) {			$intermediate_file = apply_filters('wp_delete_file', $intermediate['path']);			@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );		}	}	if ( is_array($backup_sizes) ) {		foreach ( $backup_sizes as $size ) {			$del_file = path_join( dirname($meta['file']), $size['file'] );			$del_file = apply_filters('wp_delete_file', $del_file);            @ unlink( path_join($uploadpath['basedir'], $del_file) );		}	}	$file = apply_filters('wp_delete_file', $file);	if ( ! empty($file) )		@ unlink($file);	clean_post_cache($post_id);	return $post;}/** * Retrieve attachment meta field for attachment ID. * * @since 2.1.0 * * @param int $post_id Attachment ID * @param bool $unfiltered Optional, default is false. If true, filters are not run. * @return string|bool Attachment meta field. False on failure. */function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );	if ( $unfiltered )		return $data;	return apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );}/** * Update metadata for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @param array $data Attachment data. * @return int */function wp_update_attachment_metadata( $post_id, $data ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID );	return update_post_meta( $post->ID, '_wp_attachment_metadata', $data);}/** * Retrieve the URL for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return string */function wp_get_attachment_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$url = '';	if ( $file = get_post_meta( $post->ID, '_wp_attached_file', true) ) { //Get attached file		if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) { //Get upload directory			if ( 0 === strpos($file, $uploads['basedir']) ) //Check that the upload base exists in the file location				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file); //replace file location with url location            elseif ( false !== strpos($file, 'wp-content/uploads') )                $url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );            else                $url = $uploads['baseurl'] . "/$file"; //Its a newly uploaded file, therefor $file is relative to the basedir.		}	}	if ( empty($url) ) //If any of the above options failed, Fallback on the GUID as used pre-2.7, not recomended to rely upon this.		$url = get_the_guid( $post->ID );	if ( 'attachment' != $post->post_type || empty($url) )		return false;	return apply_filters( 'wp_get_attachment_url', $url, $post->ID );}/** * Retrieve thumbnail for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return mixed False on failure. Thumbnail file path on success. */function wp_get_attachment_thumb_file( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )		return false;	$file = get_attached_file( $post->ID );	if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) )		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );	return false;}/** * Retrieve URL for an attachment thumbnail. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return string|bool False on failure. Thumbnail URL on success. */function wp_get_attachment_thumb_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$url = wp_get_attachment_url( $post->ID ) )		return false;	$sized = image_downsize( $post_id, 'thumbnail' );	if ( $sized )		return $sized[0];	if ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )		return false;	$url = str_replace(basename($url), basename($thumb), $url);	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );}/** * Check if the attachment is an image. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return bool */function wp_attachment_is_image( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$file = get_attached_file( $post->ID ) )		return false;	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;	$image_exts = array('jpg', 'jpeg', 'gif', 'png');	if ( 'image/' == substr($post->post_mime_type, 0, 6) || $ext && 'import' == $post->post_mime_type && in_array($ext, $image_exts) )		return true;	return false;}/** * Retrieve the icon for a MIME type. * * @since 2.1.0 * * @param string $mime MIME type * @return string|bool */function wp_mime_type_icon( $mime = 0 ) {	if ( !is_numeric($mime) )		$icon = wp_cache_get("mime_type_icon_$mime");	if ( empty($icon) ) {		$post_id = 0;		$post_mimes = array();		if ( is_numeric($mime) ) {			$mime = (int) $mime;			if ( $post =& get_post( $mime ) ) {				$post_id = (int) $post->ID;				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post->guid);				if ( !empty($ext) ) {					$post_mimes[] = $ext;					if ( $ext_type = wp_ext2type( $ext ) )						$post_mimes[] = $ext_type;				}				$mime = $post->post_mime_type;			} else {				$mime = 0;			}		} else {			$post_mimes[] = $mime;		}		$icon_files = wp_cache_get('icon_files');		if ( !is_array($icon_files) ) {			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url('images/crystal') );			$dirs = apply_filters( 'icon_dirs', array($icon_dir => $icon_dir_uri) );			$icon_files = array();			while ( $dirs ) {				$dir = array_shift($keys = array_keys($dirs));				$uri = array_shift($dirs);				if ( $dh = opendir($dir) ) {					while ( false !== $file = readdir($dh) ) {						$file = basename($file);						if ( substr($file, 0, 1) == '.' )							continue;						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {							if ( is_dir("$dir/$file") )								$dirs["$dir/$file"] = "$uri/$file";							continue;						}						$icon_files["$dir/$file"] = "$uri/$file";					}					closedir($dh);				}			}			wp_cache_set('icon_files', $icon_files, 600);		}		// Icon basename - extension = MIME wildcard		foreach ( $icon_files as $file => $uri )			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];		if ( ! empty($mime) ) {			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);			$post_mimes[] = str_replace('/', '_', $mime);		}		$matches = wp_match_mime_types(array_keys($types), $post_mimes);		$matches['default'] = array('default');		foreach ( $matches as $match => $wilds ) {			if ( isset($types[$wilds[0]])) {				$icon = $types[$wilds[0]];				if ( !is_numeric($mime) )					wp_cache_set("mime_type_icon_$mime", $icon);				break;			}		}	}	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id ); // Last arg is 0 if function pass mime type.}/** * Checked for changed slugs for published posts and save old slug. * * The function is used along with form POST data. It checks for the wp-old-slug * POST field. Will only be concerned with published posts and the slug actually * changing. * * If the slug was changed and not already part of the old slugs then it will be * added to the post meta field ('_wp_old_slug') for storing old slugs for that * post. * * The most logically usage of this function is redirecting changed posts, so * that those that linked to an changed post will be redirected to the new post. * * @since 2.1.0 * * @param int $post_id Post ID. * @return int Same as $post_id */function wp_check_for_changed_slugs($post_id, $post, $post_before) {	// dont bother if it hasnt changed	if ( $post->post_name == $post_before->post_name )		return;	// we're only concerned with published posts	if ( $post->post_status != 'publish' || $post->post_type != 'post' )		return;	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');	// if we haven't added this old slug before, add it now	if ( !in_array($post_before->post_name, $old_slugs) )		add_post_meta($post_id, '_wp_old_slug', $post_before->post_name);	// if the new slug was used previously, delete it from the list	if ( in_array($post->post_name, $old_slugs) )		delete_post_meta($post_id, '_wp_old_slug', $post->post_name);}/** * Retrieve the private post SQL based on capability. * * This function provides a standardized way to appropriately select on the * post_status of posts/pages. The function will return a piece of SQL code that * can be added to a WHERE clause; this SQL is constructed to allow all * published posts, and all private posts to which the user has access. * * It also allows plugins that define their own post type to control the cap by * using the hook 'pub_priv_sql_capability'. The plugin is expected to return * the capability the user must have to read the private post type. * * @since 2.2.0 * * @uses $user_ID * @uses apply_filters() Call 'pub_priv_sql_capability' filter for plugins with different post types. * * @param string $post_type currently only supports 'post' or 'page'. * @return string SQL code that can be added to a where clause. */function get_private_posts_cap_sql($post_type) {	return get_posts_by_author_sql($post_type, FALSE);}/** * Retrieve the post SQL based on capability, author, and type. * * See above for full description. * * @since 3.0.0 * @param string $post_type currently only supports 'post' or 'page'. * @param bool $full Optional.  Returns a full WHERE statement instead of just an 'andalso' term. * @param int $post_author Optional.  Query posts having a single author ID. * @return string SQL WHERE code that can be added to a query. */function get_posts_by_author_sql($post_type, $full = TRUE, $post_author = NULL) {	global $user_ID, $wpdb;	// Private posts	if ($post_type == 'post') {		$cap = 'read_private_posts';	// Private pages	} elseif ($post_type == 'page') {		$cap = 'read_private_pages';	// Dunno what it is, maybe plugins have their own post type?	} else {		$cap = '';		$cap = apply_filters('pub_priv_sql_capability', $cap);		if (empty($cap)) {			// We don't know what it is, filters don't change anything,			// so set the SQL up to return nothing.			return ' 1 = 0 ';		}	}	if ($full) {		if (is_null($post_author)) {			$sql = $wpdb->prepare('WHERE post_type = %s AND ', $post_type);		} else {			$sql = $wpdb->prepare('WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type);		}	} else {		$sql = '';	}	$sql .= "(post_status = 'publish'";	if (current_user_can($cap)) {		// Does the user have the capability to view private posts? Guess so.		$sql .= " OR post_status = 'private'";	} elseif (is_user_logged_in()) {		// Users can view their own private posts.		$id = (int) $user_ID;		if (is_null($post_author) || !$full) {			$sql .= " OR post_status = 'private' AND post_author = $id";		} elseif ($id == (int)$post_author) {			$sql .= " OR post_status = 'private'";		} // else none	} // else none	$sql .= ')';	return $sql;}/** * Retrieve the date that the last post was published. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is the date when the last post was posted. The * 'gmt' is when the last post was posted in GMT formatted date. * * @since 0.71 * * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostdate' filter * * @global mixed $cache_lastpostdate Stores the last post date * @global mixed $pagenow The current page being viewed * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date of the last post. */function get_lastpostdate($timezone = 'server') {	global $cache_lastpostdate, $wpdb, $blog_id;	$add_seconds_server = date('Z');	if ( !isset($cache_lastpostdate[$blog_id][$timezone]) ) {		switch(strtolower($timezone)) {			case 'gmt':				$lastpostdate = $wpdb->get_var("SELECT post_date_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'blog':				$lastpostdate = $wpdb->get_var("SELECT post_date FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'server':				$lastpostdate = $wpdb->get_var("SELECT DATE_ADD(post_date_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;		}		$cache_lastpostdate[$blog_id][$timezone] = $lastpostdate;	} else {		$lastpostdate = $cache_lastpostdate[$blog_id][$timezone];	}	return apply_filters( 'get_lastpostdate', $lastpostdate, $timezone );}/** * Retrieve last post modified date depending on timezone. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is just when the last post was modified. The * 'gmt' is when the last post was modified in GMT time. * * @since 1.2.0 * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostmodified' filter * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date the post was last modified. */function get_lastpostmodified($timezone = 'server') {	global $wpdb;	$add_seconds_server = date('Z');	$timezone = strtolower( $timezone );	$lastpostmodified = wp_cache_get( "lastpostmodified:$timezone", 'timeinfo' );	if ( $lastpostmodified )		return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );	switch ( strtolower($timezone) ) {		case 'gmt':			$lastpostmodified = $wpdb->get_var("SELECT post_modified_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'blog':			$lastpostmodified = $wpdb->get_var("SELECT post_modified FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'server':			$lastpostmodified = $wpdb->get_var("SELECT DATE_ADD(post_modified_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;	}	$lastpostdate = get_lastpostdate($timezone);	if ( $lastpostdate > $lastpostmodified )		$lastpostmodified = $lastpostdate;	if ( $lastpostmodified )		wp_cache_set( "lastpostmodified:$timezone", $lastpostmodified, 'timeinfo' );	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );}/** * Updates posts in cache. * * @usedby update_page_cache() Aliased by this function. * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $posts Array of post objects */function update_post_cache(&$posts) {	if ( !$posts )		return;	foreach ( $posts as $post )		wp_cache_add($post->ID, $post, 'posts');}/** * Will clean the post in the cache. * * Cleaning means delete from the cache of the post. Will call to clean the term * object cache associated with the post ID. * * clean_post_cache() will call itself recursively for each child post. * * This function not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any). * * @param int $id The Post ID in the cache to clean */function clean_post_cache($id) {	global $_wp_suspend_cache_invalidation, $wpdb;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	clean_object_term_cache($id, 'post');	wp_cache_delete( 'wp_get_archives', 'general' );	do_action('clean_post_cache', $id);	if ( $children = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d", $id) ) ) {		foreach( $children as $cid )			clean_post_cache( $cid );	}	if ( is_multisite() )		wp_cache_delete( $wpdb->blogid . '-' . $id, 'global-posts' );}/** * Alias of update_post_cache(). * * @see update_post_cache() Posts and pages are the same, alias is intentional * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $pages list of page objects */function update_page_cache(&$pages) {	update_post_cache($pages);}/** * Will clean the page in the cache. * * Clean (read: delete) page from cache that matches $id. Will also clean cache * associated with 'all_page_ids' and 'get_pages'. * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Will call the 'clean_page_cache' hook action. * * @param int $id Page ID to clean */function clean_page_cache($id) {	clean_post_cache($id);	wp_cache_delete( 'all_page_ids', 'posts' );	wp_cache_delete( 'get_pages', 'posts' );	do_action('clean_page_cache', $id);}/** * Call major cache updating functions for list of Post objects. * * @package WordPress * @subpackage Cache * @since 1.5.0 * * @uses $wpdb * @uses update_post_cache() * @uses update_object_term_cache() * @uses update_postmeta_cache() * * @param array $posts Array of Post objects * @param string $post_type The post type of the posts in $posts. Default is 'post'. * @param bool $update_term_cache Whether to update the term cache. Default is true. * @param bool $update_meta_cache Whether to update the meta cache. Default is true. */function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {	// No point in doing all this work if we didn't match any posts.	if ( !$posts )		return;	update_post_cache($posts);	$post_ids = array();	foreach ( $posts as $post )		$post_ids[] = $post->ID;	if ( empty($post_type) )		$post_type = 'post';	if ( !is_array($post_type) && 'any' != $post_type && $update_term_cache )		update_object_term_cache($post_ids, $post_type);	if ( $update_meta_cache )		update_postmeta_cache($post_ids);}/** * Updates metadata cache for list of post IDs. * * Performs SQL query to retrieve the metadata for the post IDs and updates the * metadata cache for the posts. Therefore, the functions, which call this * function, do not need to perform SQL queries on their own. * * @package WordPress * @subpackage Cache * @since 2.1.0 * * @uses $wpdb * * @param array $post_ids List of post IDs. * @return bool|array Returns false if there is nothing to update or an array of metadata. */function update_postmeta_cache($post_ids) {	return update_meta_cache('post', $post_ids);}/** * Will clean the attachment in the cache. * * Cleaning means delete from the cache. Optionaly will clean the term * object cache associated with the attachment ID. * * This function will not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 3.0.0 * * @uses do_action() Calls 'clean_attachment_cache' on $id. * * @param int $id The attachment ID in the cache to clean * @param bool $clean_terms optional. Whether to clean terms cache */function clean_attachment_cache($id, $clean_terms = false) {	global $_wp_suspend_cache_invalidation;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	if ( $clean_terms )		clean_object_term_cache($id, 'attachment');	do_action('clean_attachment_cache', $id);}//// Hooks///** * Hook for managing future post transitions to published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call. * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID. * * @param string $new_status New post status * @param string $old_status Previous post status * @param object $post Object type containing the post information */function _transition_post_status($new_status, $old_status, $post) {	global $wpdb;	if ( $old_status != 'publish' && $new_status == 'publish' ) {		// Reset GUID if transitioning to publish and it is empty		if ( '' == get_the_guid($post->ID) )			$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );		do_action('private_to_published', $post->ID);  // Deprecated, use private_to_publish	}	// If published posts changed clear the lastpostmodified cache	if ( 'publish' == $new_status || 'publish' == $old_status) {		wp_cache_delete( 'lastpostmodified:server', 'timeinfo' );		wp_cache_delete( 'lastpostmodified:gmt',    'timeinfo' );		wp_cache_delete( 'lastpostmodified:blog',   'timeinfo' );	}	// Always clears the hook in case the post status bounced from future to draft.	wp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );}/** * Hook used to schedule publication for a post marked for the future. * * The $post properties used and must exist are 'ID' and 'post_date_gmt'. * * @since 2.3.0 * @access private * * @param int $deprecated Not used. Can be set to null. Never implemented. *   Not marked as deprecated with _deprecated_argument() as it conflicts with *   wp_transition_post_status() and the default filter for _future_post_hook(). * @param object $post Object type containing the post information */function _future_post_hook( $deprecated = '', $post ) {	wp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );	wp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );}/** * Hook to schedule pings and enclosures when a post is published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses XMLRPC_REQUEST and APP_REQUEST constants. * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined. * @uses do_action() Calls 'app_publish_post' on post ID if APP_REQUEST is defined. * * @param int $post_id The ID in the database table of the post being published */function _publish_post_hook($post_id) {	global $wpdb;	if ( defined('XMLRPC_REQUEST') )		do_action('xmlrpc_publish_post', $post_id);	if ( defined('APP_REQUEST') )		do_action('app_publish_post', $post_id);	if ( defined('WP_IMPORTING') )		return;	$data = array( 'post_id' => $post_id, 'meta_value' => '1' );	if ( get_option('default_pingback_flag') ) {		$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_pingme' ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_pingme', 1 );	}	$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_encloseme' ) );	do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_encloseme', 1 );	wp_schedule_single_event(time(), 'do_pings');}/** * Hook used to prevent page/post cache and rewrite rules from staying dirty. * * Does two things. If the post is a page and has a template then it will * update/add that template to the meta. For both pages and posts, it will clean * the post cache to make sure that the cache updates to the changes done * recently. For pages, the rewrite rules of WordPress are flushed to allow for * any changes. * * The $post parameter, only uses 'post_type' property and 'page_template' * property. * * @since 2.3.0 * @access private * @uses $wp_rewrite Flushes Rewrite Rules. * * @param int $post_id The ID in the database table for the $post * @param object $post Object type containing the post information */function _save_post_hook($post_id, $post) {	if ( $post->post_type == 'page' ) {		clean_page_cache($post_id);		// Avoid flushing rules for every post during import.		if ( !defined('WP_IMPORTING') ) {			global $wp_rewrite;			$wp_rewrite->flush_rules(false);		}	} else {		clean_post_cache($post_id);	}}/** * Retrieve post ancestors and append to post ancestors property. * * Will only retrieve ancestors once, if property is already set, then nothing * will be done. If there is not a parent post, or post ID and post parent ID * are the same then nothing will be done. * * The parameter is passed by reference, so nothing needs to be returned. The * property will be updated and can be referenced after the function is * complete. The post parent will be an ancestor and the parent of the post * parent will be an ancestor. There will only be two ancestors at the most. * * @since unknown * @access private * @uses $wpdb * * @param object $_post Post data. * @return null When nothing needs to be done. */function _get_post_ancestors(&$_post) {	global $wpdb;	if ( isset($_post->ancestors) )		return;	$_post->ancestors = array();	if ( empty($_post->post_parent) || $_post->ID == $_post->post_parent )		return;	$id = $_post->ancestors[] = $_post->post_parent;	while ( $ancestor = $wpdb->get_var( $wpdb->prepare("SELECT `post_parent` FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id) ) ) {		if ( $id == $ancestor )			break;		$id = $_post->ancestors[] = $ancestor;	}}/** * Determines which fields of posts are to be saved in revisions. * * Does two things. If passed a post *array*, it will return a post array ready * to be insterted into the posts table as a post revision. Otherwise, returns * an array whose keys are the post fields to be saved for post revisions. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * @access private * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields. * * @param array $post Optional a post array to be processed for insertion as a post revision. * @param bool $autosave optional Is the revision an autosave? * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned. */function _wp_post_revision_fields( $post = null, $autosave = false ) {	static $fields = false;	if ( !$fields ) {		// Allow these to be versioned		$fields = array(			'post_title' => __( 'Title' ),			'post_content' => __( 'Content' ),			'post_excerpt' => __( 'Excerpt' ),		);		// Runs only once		$fields = apply_filters( '_wp_post_revision_fields', $fields );		// WP uses these internally either in versioning or elsewhere - they cannot be versioned		foreach ( array( 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', 'post_author' ) as $protect )			unset( $fields[$protect] );	}	if ( !is_array($post) )		return $fields;	$return = array();	foreach ( array_intersect( array_keys( $post ), array_keys( $fields ) ) as $field )		$return[$field] = $post[$field];	$return['post_parent']   = $post['ID'];	$return['post_status']   = 'inherit';	$return['post_type']     = 'revision';	$return['post_name']     = $autosave ? "$post[ID]-autosave" : "$post[ID]-revision";	$return['post_date']     = isset($post['post_modified']) ? $post['post_modified'] : '';	$return['post_date_gmt'] = isset($post['post_modified_gmt']) ? $post['post_modified_gmt'] : '';	return $return;}/** * Saves an already existing post as a post revision. * * Typically used immediately prior to post updates. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_put_post_revision() * * @param int $post_id The ID of the post to save as a revision. * @return mixed Null or 0 if error, new revision ID, if success. */function wp_save_post_revision( $post_id ) {	// We do autosaves manually with wp_create_post_autosave()	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )		return;	// WP_POST_REVISIONS = 0, false	if ( ! WP_POST_REVISIONS )		return;	if ( !$post = get_post( $post_id, ARRAY_A ) )		return;	if ( !post_type_supports($post['post_type'], 'revisions') )		return;	$return = _wp_put_post_revision( $post );	// WP_POST_REVISIONS = true (default), -1	if ( !is_numeric( WP_POST_REVISIONS ) || WP_POST_REVISIONS < 0 )		return $return;	// all revisions and (possibly) one autosave	$revisions = wp_get_post_revisions( $post_id, array( 'order' => 'ASC' ) );	// WP_POST_REVISIONS = (int) (# of autosaves to save)	$delete = count($revisions) - WP_POST_REVISIONS;	if ( $delete < 1 )		return $return;	$revisions = array_slice( $revisions, 0, $delete );	for ( $i = 0; isset($revisions[$i]); $i++ ) {		if ( false !== strpos( $revisions[$i]->post_name, 'autosave' ) )			continue;		wp_delete_post_revision( $revisions[$i]->ID );	}	return $return;}/** * Retrieve the autosaved data of the specified post. * * Returns a post object containing the information that was autosaved for the * specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int $post_id The post ID. * @return object|bool The autosaved data or false on failure or when no autosave exists. */function wp_get_post_autosave( $post_id ) {	if ( !$post = get_post( $post_id ) )		return false;	$q = array(		'name' => "{$post->ID}-autosave",		'post_parent' => $post->ID,		'post_type' => 'revision',		'post_status' => 'inherit'	);	// Use WP_Query so that the result gets cached	$autosave_query = new WP_Query;	add_action( 'parse_query', '_wp_get_post_autosave_hack' );	$autosave = $autosave_query->query( $q );	remove_action( 'parse_query', '_wp_get_post_autosave_hack' );	if ( $autosave && is_array($autosave) && is_object($autosave[0]) )		return $autosave[0];	return false;}/** * Internally used to hack WP_Query into submission. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param object $query WP_Query object */function _wp_get_post_autosave_hack( $query ) {	$query->is_single = false;}/** * Determines if the specified post is a revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of revision's parent otherwise. */function wp_is_post_revision( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	return (int) $post->post_parent;}/** * Determines if the specified post is an autosave. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of autosave's parent otherwise */function wp_is_post_autosave( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	if ( "{$post->post_parent}-autosave" !== $post->post_name )		return false;	return (int) $post->post_parent;}/** * Inserts post data into the posts table as a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_insert_post() * * @param int|object|array $post Post ID, post object OR post array. * @param bool $autosave Optional. Is the revision an autosave? * @return mixed Null or 0 if error, new revision ID if success. */function _wp_put_post_revision( $post = null, $autosave = false ) {	if ( is_object($post) )		$post = get_object_vars( $post );	elseif ( !is_array($post) )		$post = get_post($post, ARRAY_A);	if ( !$post || empty($post['ID']) )		return;	if ( isset($post['post_type']) && 'revision' == $post['post_type'] )		return new WP_Error( 'post_type', __( 'Cannot create a revision of a revision' ) );	$post = _wp_post_revision_fields( $post, $autosave );	$post = add_magic_quotes($post); //since data is from db	$revision_id = wp_insert_post( $post );	if ( is_wp_error($revision_id) )		return $revision_id;	if ( $revision_id )		do_action( '_wp_put_post_revision', $revision_id );	return $revision_id;}/** * Gets a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_post() * * @param int|object $post Post ID or post object * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional sanitation filter.  @see sanitize_post() * @return mixed Null if error or post object if success */function &wp_get_post_revision(&$post, $output = OBJECT, $filter = 'raw') {	$null = null;	if ( !$revision = get_post( $post, OBJECT, $filter ) )		return $revision;	if ( 'revision' !== $revision->post_type )		return $null;	if ( $output == OBJECT ) {		return $revision;	} elseif ( $output == ARRAY_A ) {		$_revision = get_object_vars($revision);		return $_revision;	} elseif ( $output == ARRAY_N ) {		$_revision = array_values(get_object_vars($revision));		return $_revision;	}	return $revision;}/** * Restores a post to the specified revision. * * Can restore a past revision using all fields of the post revision, or only selected fields. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_update_post() * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post() *  is successful. * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from. Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_restore_post_revision( $revision_id, $fields = null ) {	if ( !$revision = wp_get_post_revision( $revision_id, ARRAY_A ) )		return $revision;	if ( !is_array( $fields ) )		$fields = array_keys( _wp_post_revision_fields() );	$update = array();	foreach( array_intersect( array_keys( $revision ), $fields ) as $field )		$update[$field] = $revision[$field];	if ( !$update )		return false;	$update['ID'] = $revision['post_parent'];	$update = add_magic_quotes( $update ); //since data is from db	$post_id = wp_update_post( $update );	if ( is_wp_error( $post_id ) )		return $post_id;	if ( $post_id )		do_action( 'wp_restore_post_revision', $post_id, $revision['ID'] );	return $post_id;}/** * Deletes a revision. * * Deletes the row from the posts table corresponding to the specified revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_delete_post() * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from.  Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_delete_post_revision( $revision_id ) {	if ( !$revision = wp_get_post_revision( $revision_id ) )		return $revision;	$delete = wp_delete_post( $revision->ID );	if ( is_wp_error( $delete ) )		return $delete;	if ( $delete )		do_action( 'wp_delete_post_revision', $revision->ID, $revision );	return $delete;}/** * Returns all revisions of specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_children() * * @param int|object $post_id Post ID or post object * @return array empty if no revisions */function wp_get_post_revisions( $post_id = 0, $args = null ) {	if ( ! WP_POST_REVISIONS )		return array();	if ( ( !$post = get_post( $post_id ) ) || empty( $post->ID ) )		return array();	$defaults = array( 'order' => 'DESC', 'orderby' => 'date' );	$args = wp_parse_args( $args, $defaults );	$args = array_merge( $args, array( 'post_parent' => $post->ID, 'post_type' => 'revision', 'post_status' => 'inherit' ) );	if ( !$revisions = get_children( $args ) )		return array();	return $revisions;}function _set_preview($post) {	if ( ! is_object($post) )		return $post;	$preview = wp_get_post_autosave($post->ID);	if ( ! is_object($preview) )		return $post;	$preview = sanitize_post($preview);	$post->post_content = $preview->post_content;	$post->post_title = $preview->post_title;	$post->post_excerpt = $preview->post_excerpt;	return $post;}function _show_post_preview() {	if ( isset($_GET['preview_id']) && isset($_GET['preview_nonce']) ) {		$id = (int) $_GET['preview_id'];		if ( false == wp_verify_nonce( $_GET['preview_nonce'], 'post_preview_' . $id ) )			wp_die( __('You do not have permission to preview drafts.') );		add_filter('the_preview', '_set_preview');	}}
<?php/** * WordPress Export Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('export') )	wp_die(__('You do not have sufficient permissions to export the content of this site.'));/** Load WordPress export API */require_once('./includes/export.php');$title = __('Export');add_contextual_help($current_screen,	'<p>' . __('You can export a file of your site&#8217;s content in order to import it into another installation or platform. The export file will be an XML file format called WXR. Posts, pages, comments, custom fields, categories, and tags can be included. You can set filters to have the WXR file only include a certain date, author, category, tag, all posts or all pages, certain publishing statuses.') . '</p>' .	'<p>' . __('Once generated, your WXR file can be imported by another WordPress site or by another blogging platform able to access this format.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Export_SubPanel" target="_blank">Export Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( isset( $_GET['download'] ) ) {		$author = isset($_GET['author']) ? $_GET['author'] : 'all';		$taxonomy = array();		foreach ( get_taxonomies( array( 'show_ui' => true ) ) as $tax )			$taxonomy[ $tax ] = ! empty( $_GET['taxonomy'][ $tax ] ) ? $_GET['taxonomy'][ $tax ] : 'all';		$post_type = isset($_GET['post_type']) ? stripslashes_deep($_GET['post_type']) : 'all';		$status = isset($_GET['status']) ? stripslashes_deep($_GET['status']) : 'all';		$mm_start = isset($_GET['mm_start']) ? $_GET['mm_start'] : 'all';		$mm_end = isset($_GET['mm_end']) ? $_GET['mm_end'] : 'all';		if( $mm_start != 'all' ) {			$start_date = sprintf( "%04d-%02d-%02d", substr( $mm_start, 0, 4 ), substr( $mm_start, 5, 2 ), 1 );		} else {			$start_date = 'all';		}		if( $mm_end != 'all' ) {			$end_date = sprintf( "%04d-%02d-%02d", substr( $mm_end, 0, 4 ), substr( $mm_end, 5, 2 ), 1 );		} else {			$end_date = 'all';		}	export_wp( array( 'author' => $author, 'taxonomy' => $taxonomy, 'post_type' => $post_type, 'post_status' => $status, 'start_date' => $start_date, 'end_date' => $end_date ) );	die();}require_once ('admin-header.php');$dateoptions = $edateoptions = '';$types = "'" . implode("', '", get_post_types( array( 'public' => true, 'can_export' => true ), 'names' )) . "'";$stati = "'" . implode("', '", get_post_stati( array( 'internal' => false ), 'names' )) . "'";if ( $monthyears = $wpdb->get_results("SELECT DISTINCT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, YEAR(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `eyear`, MONTH(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `emonth` FROM $wpdb->posts WHERE post_type IN ($types) AND post_status IN ($stati) ORDER BY post_date ASC ") ) {	foreach ( $monthyears as $k => $monthyear )		$monthyears[$k]->lmonth = $wp_locale->get_month( $monthyear->month, 2 );	for( $s = 0, $e = count( $monthyears ) - 1; $e >= 0; $s++, $e-- ) {		$dateoptions .= "\t<option value=\"" . $monthyears[$s]->year . '-' . zeroise( $monthyears[$s]->month, 2 ) . '">' . $monthyears[$s]->lmonth . ' ' . $monthyears[$s]->year . "</option>\n";		$edateoptions .= "\t<option value=\"" . $monthyears[$e]->eyear . '-' . zeroise( $monthyears[$e]->emonth, 2 ) . '">' . $monthyears[$e]->lmonth . ' ' . $monthyears[$e]->year . "</option>\n";	}}?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><p><?php _e('When you click the button below WordPress will create an XML file for you to save to your computer.'); ?></p><p><?php _e('This format, which we call WordPress eXtended RSS or WXR, will contain your posts, pages, comments, custom fields, categories, and tags.'); ?></p><p><?php _e('Once you&#8217;ve saved the download file, you can use the Import function on another WordPress site to import this site.'); ?></p><form action="" method="get"><h3><?php _e('Filters'); ?></h3><table class="form-table"><tr><th><label for="mm_start"><?php _e('Start Date'); ?></label></th><td><select name="mm_start" id="mm_start">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $dateoptions; ?></select></td></tr><tr><th><label for="mm_end" id="mm_end"><?php _e('End Date'); ?></label></th><td><select name="mm_end" id="mm_end">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $edateoptions; ?></select></td></tr><tr><th><label for="author"><?php _e('Authors'); ?></label></th><td><select name="author" id="author"><option value="all" selected="selected"><?php _e('All Authors'); ?></option><?php$authors = $wpdb->get_results( "SELECT DISTINCT u.id, u.display_name FROM $wpdb->users u INNER JOIN $wpdb->posts p WHERE u.id = p.post_author ORDER BY u.display_name" );foreach ( (array) $authors as $author ) {	echo "<option value='{$author->id}'>{$author->display_name}</option>\n";}?></select></td></tr><?php foreach ( get_taxonomies( array( 'show_ui' => true ), 'objects' ) as $tax_obj ) {	$term_dropdown = wp_dropdown_categories( array( 'taxonomy' => $tax_obj->name, 'hide_if_empty' => true, 'show_option_all' => __( 'All Terms' ), 'name' => 'taxonomy[' . $tax_obj->name . ']', 'id' => 'taxonomy-' . $tax_obj->name, 'class' => '', 'echo' => false ) );	if ( $term_dropdown )		echo '<tr><th><label for="taxonomy-' . $tax_obj->name . '">' . $tax_obj->labels->name . '</label></th><td>' . $term_dropdown . '</td></tr>';}?><tr><th><label for="post_type"><?php _e('Content Types'); ?></label></th><td><select name="post_type" id="post_type">	<option value="all" selected="selected"><?php _e('All Content'); ?></option>	<?php foreach ( get_post_types( array( 'public' => true, 'can_export' => true ), 'objects' ) as $post_type_obj ) { ?>		<option value="<?php echo $post_type_obj->name; ?>"><?php echo $post_type_obj->labels->name; ?></option>	<?php } ?></select></td></tr><tr><th><label for="status"><?php _e('Statuses'); ?></label></th><td><select name="status" id="status">	<option value="all" selected="selected"><?php _e('All Statuses'); ?></option><?php foreach ( get_post_stati( array( 'internal' => false ), 'objects' ) as $post_status_obj ) { ?>	<option value="<?php echo $post_status_obj->name; ?>"><?php echo $post_status_obj->label; ?></option><?php } ?></select></td></tr></table><p class="submit"><input type="submit" name="submit" class="button" value="<?php esc_attr_e('Download Export File'); ?>" /><input type="hidden" name="download" value="true" /></p></form></div><?phpinclude ('admin-footer.php');?>
<?php/** * Install theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('install_themes') )	wp_die(__('You do not have sufficient permissions to install themes on this site.'));include(ABSPATH . 'wp-admin/includes/theme-install.php');$title = __('Install Themes');$parent_file = 'themes.php';$submenu_file = 'themes.php';wp_reset_vars( array('tab', 'paged') );wp_enqueue_style( 'theme-install' );wp_enqueue_script( 'theme-install' );add_thickbox();wp_enqueue_script( 'theme-preview' );//These are the tabs which are shown on the page,$tabs = array();$tabs['dashboard'] = __('Search');if ( 'search' == $tab )	$tabs['search']	= __('Search Results');$tabs['upload'] = __('Upload');$tabs['featured'] = _x('Featured','Theme Installer');//$tabs['popular']  = _x('Popular','Theme Installer');$tabs['new']      = _x('Newest','Theme Installer');$tabs['updated']  = _x('Recently Updated','Theme Installer');$nonmenu_tabs = array('theme-information'); //Valid actions to perform which do not have a Menu item.$tabs = apply_filters('install_themes_tabs', $tabs );$nonmenu_tabs = apply_filters('install_themes_nonmenu_tabs', $nonmenu_tabs);//If a non-valid menu tab has been selected, And its not a non-menu action.if ( empty($tab) || ( ! isset($tabs[ $tab ]) && ! in_array($tab, (array)$nonmenu_tabs) ) ) {	$tab_actions = array_keys($tabs);	$tab = $tab_actions[0];}if ( empty($paged) )	$paged = 1;$body_id = $tab;do_action('install_themes_pre_' . $tab); //Used to override the general interface, Eg, install or theme information.$help = '<p>' . sprintf(__('You can find additional themes for your site by using the Theme Browser/Installer on this screen, which will display themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. These themes are designed and developed by third parties, are available free of charge, and are licensed under the GNU General Public License, version 2, just like WordPress.'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p>' . __('You can Search for themes by keyword, author, or tag, or can get more specific and search by criteria listed in the feature filter. Alternately, you can browse the themes that are Featured, Newest, or Recently Updated. When you find a theme you like, you can preview it or install it.') . '</p>';$help .= '<p>' . __('You can Upload a theme manually if you have already downloaded its ZIP archive onto your computer (make sure it is from a trusted and original source). You can also do it the old-fashioned way and copy a downloaded theme&#8217;s folder via FTP into your <code>/wp-content/themes</code> directory.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes#Adding_New_Themes" target="_blank">Documentation on Adding New Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab"><?php echo esc_html_x('Manage Themes', 'theme'); ?></a><a href="theme-install.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a></h2>	<ul class="subsubsub"><?php$display_tabs = array();foreach ( (array)$tabs as $action => $text ) {	$sep = ( end($tabs) != $text ) ? ' | ' : '';	$class = ( $action == $tab ) ? ' class="current"' : '';	$href = admin_url('theme-install.php?tab='. $action);	echo "\t\t<li><a href='$href'$class>$text</a>$sep</li>\n";}?>	</ul>	<br class="clear" />	<?php do_action('install_themes_' . $tab, $paged); ?></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
<?php/** * WordPress Administration Template Header * * @package WordPress * @subpackage Administration */@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! defined( 'WP_ADMIN' ) )	require_once( './admin.php' );get_admin_page_title();$title = esc_html( strip_tags( $title ) );wp_user_settings();wp_menu_unfold();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php echo $title; ?> &lsaquo; <?php bloginfo('name') ?>  &#8212; WordPress</title><?phpwp_admin_css( 'css/global' );wp_admin_css();wp_admin_css( 'css/colors' );wp_admin_css( 'css/ie' );if ( is_multisite() )	wp_admin_css( 'css/ms' );wp_enqueue_script('utils');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {		'url': '<?php echo SITECOOKIEPATH; ?>',		'uid': '<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>',		'time':'<?php echo time() ?>'	},	ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>',	pagenow = '<?php echo $current_screen->id; ?>',	typenow = '<?php if ( isset($current_screen->post_type) ) echo $current_screen->post_type; ?>',	adminpage = '<?php echo $admin_body_class; ?>',	thousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',	decimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',	isRtl = <?php echo (int) is_rtl(); ?>;//]]></script><?phpif ( in_array( $pagenow, array('post.php', 'post-new.php') ) ) {	add_action( 'admin_print_footer_scripts', 'wp_tiny_mce', 25 );	wp_enqueue_script('quicktags');}do_action('admin_enqueue_scripts', $hook_suffix);do_action("admin_print_styles-$hook_suffix");do_action('admin_print_styles');do_action("admin_print_scripts-$hook_suffix");do_action('admin_print_scripts');do_action("admin_head-$hook_suffix");do_action('admin_head');if ( get_user_setting('mfold') == 'f' )	$admin_body_class .= ' folded';if ( $is_iphone ) { ?><style type="text/css">.row-actions{visibility:visible;}</style><?php } ?></head><body class="wp-admin no-js <?php echo apply_filters( 'admin_body_class', '' ) . " $admin_body_class"; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><div id="wpwrap"><div id="wpcontent"><div id="wphead"><?php$blog_name = get_bloginfo('name', 'display');if ( '' == $blog_name ) {	$blog_name = '&nbsp;';} else {	$blog_name_excerpt = wp_html_excerpt($blog_name, 40);	if ( $blog_name != $blog_name_excerpt )		$blog_name_excerpt = trim($blog_name_excerpt) . '&hellip;';	$blog_name = $blog_name_excerpt;	unset($blog_name_excerpt);}$title_class = '';if ( function_exists('mb_strlen') ) {	if ( mb_strlen($blog_name, 'UTF-8') > 30 )		$title_class = 'class="long-title"';} else {	if ( strlen($blog_name) > 30 )		$title_class = 'class="long-title"';}?><img id="header-logo" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" alt="" width="32" height="32" /><h1 id="site-heading" <?php echo $title_class ?>>	<a href="<?php echo trailingslashit( get_bloginfo( 'url' ) ); ?>" title="<?php esc_attr_e('Visit Site') ?>">		<span id="site-title"><?php echo $blog_name ?></span>	</a><?php if ( current_user_can('manage_options') && '1' != get_option('blog_public') ): ?>	<a id="privacy-on-link" href="options-privacy.php" title="<?php echo esc_attr( apply_filters('privacy_on_link_title', __('Your site is asking search engines not to index its content') ) ); ?>"><?php echo apply_filters('privacy_on_link_text', __('Search Engines Blocked') ); ?></a><?php endif; ?></h1><?php do_action('in_admin_header'); ?><div id="wphead-info"><div id="user_info"><p><?php$links = array();$links[5] = sprintf(__('Howdy, <a href="%1$s" title="Edit your profile">%2$s</a>'), 'profile.php', $user_identity);$links[15] = '| <a href="' . wp_logout_url() . '" title="' . __('Log Out') . '">' . __('Log Out') . '</a>';$links = apply_filters('admin_user_info_links', $links, $current_user);ksort($links);echo implode(' ', $links);?></p></div><?php favorite_actions($current_screen); ?></div></div><div id="wpbody"><?phpunset($title_class, $blog_name);require(ABSPATH . 'wp-admin/menu-header.php');$current_screen->parent_file = $parent_file;$current_screen->parent_base = preg_replace('/\?.*$/', '', $parent_file);$current_screen->parent_base = str_replace('.php', '', $current_screen->parent_base);?><div id="wpbody-content"><?phpscreen_meta($current_screen);do_action('admin_notices');if ( $parent_file == 'options-general.php' )	require(ABSPATH . 'wp-admin/options-head.php');
<?php/** * WordPress Theme Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function current_theme_info() {	$themes = get_themes();	$current_theme = get_current_theme();	if ( ! isset( $themes[$current_theme] ) ) {		delete_option( 'current_theme' );		$current_theme = get_current_theme();	}	$ct->name = $current_theme;	$ct->title = $themes[$current_theme]['Title'];	$ct->version = $themes[$current_theme]['Version'];	$ct->parent_theme = $themes[$current_theme]['Parent Theme'];	$ct->template_dir = $themes[$current_theme]['Template Dir'];	$ct->stylesheet_dir = $themes[$current_theme]['Stylesheet Dir'];	$ct->template = $themes[$current_theme]['Template'];	$ct->stylesheet = $themes[$current_theme]['Stylesheet'];	$ct->screenshot = $themes[$current_theme]['Screenshot'];	$ct->description = $themes[$current_theme]['Description'];	$ct->author = $themes[$current_theme]['Author'];	$ct->tags = $themes[$current_theme]['Tags'];	$ct->theme_root = $themes[$current_theme]['Theme Root'];	$ct->theme_root_uri = $themes[$current_theme]['Theme Root URI'];	return $ct;}/** * Remove a theme * * @since 2.8.0 * * @param string $template Template directory of the theme to delete * @return mixed */function delete_theme($template) {	global $wp_filesystem;	if ( empty($template) )		return false;	ob_start();	$url = wp_nonce_url('themes.php?action=delete&template=' . $template, 'delete-theme_' . $template);	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); // Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ) {			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$themes_dir = $wp_filesystem->wp_themes_dir();	if ( empty($themes_dir) )		return new WP_Error('fs_no_themes_dir', __('Unable to locate WordPress theme directory.'));	$themes_dir = trailingslashit( $themes_dir );	$theme_dir = trailingslashit($themes_dir . $template);	$deleted = $wp_filesystem->delete($theme_dir, true);	if ( ! $deleted )		return new WP_Error('could_not_remove_theme', sprintf(__('Could not fully remove the theme %s.'), $template) );	// Force refresh of theme update information	delete_site_transient('update_themes');	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_broken_themes() {	global $wp_broken_themes;	get_themes();	return $wp_broken_themes;}/** * Get the allowed themes for the current blog. * * @since 3.0.0 * * @uses get_themes() * @uses current_theme_info() * @uses get_site_allowed_themes() * @uses wpmu_get_blog_allowedthemes * * @return array $themes Array of allowed themes. */function get_allowed_themes() {	if ( !is_multisite() )		return get_themes();	$themes = get_themes();	$ct = current_theme_info();	$allowed_themes = apply_filters("allowed_themes", get_site_allowed_themes() );	if ( $allowed_themes == false )		$allowed_themes = array();	$blog_allowed_themes = wpmu_get_blog_allowedthemes();	if ( is_array( $blog_allowed_themes ) )		$allowed_themes = array_merge( $allowed_themes, $blog_allowed_themes );	if ( isset( $allowed_themes[ esc_html( $ct->stylesheet ) ] ) == false )		$allowed_themes[ esc_html( $ct->stylesheet ) ] = true;	reset( $themes );	foreach ( $themes as $key => $theme ) {		if ( isset( $allowed_themes[ esc_html( $theme[ 'Stylesheet' ] ) ] ) == false )			unset( $themes[ $key ] );	}	reset( $themes );	return $themes;}/** * Get the Page Templates available in this theme * * @since unknown * * @return array Key is template name, Value is template name */function get_page_templates() {	$themes = get_themes();	$theme = get_current_theme();	$templates = $themes[$theme]['Template Files'];	$page_templates = array();	if ( is_array( $templates ) ) {		$base = array( trailingslashit(get_template_directory()), trailingslashit(get_stylesheet_directory()) );		foreach ( $templates as $template ) {			$basename = str_replace($base, '', $template);			// don't allow template files in subdirectories			if ( false !== strpos($basename, '/') )				continue;			$template_data = implode( '', file( $template ));			$name = '';			if ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ) )				$name = _cleanup_header_comment($name[1]);			if ( !empty( $name ) ) {				$page_templates[trim( $name )] = $basename;			}		}	}	return $page_templates;}/** * Tidies a filename for url display by the theme editor. * * @since 2.9.0 * @access private * * @param string $fullpath Full path to the theme file * @param string $containingfolder Path of the theme parent folder * @return string */function _get_template_edit_filename($fullpath, $containingfolder) {	return str_replace(dirname(dirname( $containingfolder )) , '', $fullpath);}/** * Check if there is an update for a theme available. * * Will display link, if there is an update available. * * @since 2.7.0 * * @param object $theme Theme data object. * @return bool False if no valid info was passed. */function theme_update_available( $theme ) {	static $themes_update;	if ( !current_user_can('update_themes' ) )		return;	if ( !isset($themes_update) )		$themes_update = get_site_transient('update_themes');	if ( is_object($theme) && isset($theme->stylesheet) )		$stylesheet = $theme->stylesheet;	elseif ( is_array($theme) && isset($theme['Stylesheet']) )		$stylesheet = $theme['Stylesheet'];	else		return false; //No valid info passed.	if ( isset($themes_update->response[ $stylesheet ]) ) {		$update = $themes_update->response[ $stylesheet ];		$theme_name = is_object($theme) ? $theme->name : (is_array($theme) ? $theme['Name'] : '');		$details_url = add_query_arg(array('TB_iframe' => 'true', 'width' => 1024, 'height' => 800), $update['url']); //Theme browser inside WP? replace this, Also, theme preview JS will override this on the available list.		$update_url = wp_nonce_url('update.php?action=upgrade-theme&amp;theme=' . urlencode($stylesheet), 'upgrade-theme_' . $stylesheet);		$update_onclick = 'onclick="if ( confirm(\'' . esc_js( __("Upgrading this theme will lose any customizations you have made.  'Cancel' to stop, 'OK' to upgrade.") ) . '\') ) {return true;}return false;"';		if ( ! current_user_can('update_themes') )			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a>.') . '</strong></p>', $theme_name, $details_url, $update['new_version']);		else if ( empty($update['package']) )			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a> <em>automatic upgrade unavailable for this theme</em>.') . '</strong></p>', $theme_name, $details_url, $update['new_version']);		else			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a> or <a href="%4$s" %5$s>upgrade automatically</a>.') . '</strong></p>', $theme_name, $details_url, $update['new_version'], $update_url, $update_onclick );	}}?>
