<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Edit comment form for inclusion in another file. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');/** * @var string */$submitbutton_text = __('Edit Comment');$toprow_title = sprintf(__('Editing Comment # %s'), $comment->comment_ID);$form_action = 'editedcomment';$form_extra = "' />\n<input type='hidden' name='comment_ID' value='" . esc_attr($comment->comment_ID) . "' />\n<input type='hidden' name='comment_post_ID' value='" . esc_attr($comment->comment_post_ID);$comment->comment_author_email = esc_attr($comment->comment_author_email);?><form name="post" action="comment.php" method="post" id="post"><?php wp_nonce_field('update-comment_' . $comment->comment_ID) ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Edit Comment'); ?></h2><div id="poststuff" class="metabox-holder has-right-sidebar"><input type="hidden" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" name="action" value='<?php echo $form_action . $form_extra ?>' /><div id="side-info-column" class="inner-sidebar"><div id="submitdiv" class="stuffbox" ><h3><span class='hndle'><?php _e('Status') ?></span></h3><div class="inside"><div class="submitbox" id="submitcomment"><div id="minor-publishing"><div id="minor-publishing-actions"><div id="preview-action"><a class="preview button" href="<?php echo get_comment_link(); ?>" target="_blank"><?php _e('View Comment'); ?></a></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section" id="comment-status-radio"><label class="approved"><input type="radio"<?php checked( $comment->comment_approved, '1' ); ?> name="comment_status" value="1" /><?php /* translators: comment type radio button */ _ex('Approved', 'adjective') ?></label><br /><label class="waiting"><input type="radio"<?php checked( $comment->comment_approved, '0' ); ?> name="comment_status" value="0" /><?php /* translators: comment type radio button */ _ex('Pending', 'adjective') ?></label><br /><label class="spam"><input type="radio"<?php checked( $comment->comment_approved, 'spam' ); ?> name="comment_status" value="spam" /><?php /* translators: comment type radio button */ _ex('Spam', 'adjective'); ?></label></div><div class="misc-pub-section curtime misc-pub-section-last"><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );$stamp = __('Submitted on: <b>%1$s</b>');$date = date_i18n( $datef, strtotime( $comment->comment_date ) );?><span id="timestamp"><?php printf($stamp, $date); ?></span>&nbsp;<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id='timestampdiv' class='hide-if-js'><?php touch_time(('editcomment' == $action), 0, 5); ?></div></div></div> <!-- misc actions --><div class="clear"></div></div><div id="major-publishing-actions"><div id="delete-action"><?php echo "<a class='submitdelete deletion' href='" . wp_nonce_url("comment.php?action=" . ( !EMPTY_TRASH_DAYS ? 'deletecomment' : 'trashcomment' ) . "&amp;c=$comment->comment_ID&amp;_wp_original_http_referer=" . urlencode(wp_get_referer()), 'delete-comment_' . $comment->comment_ID) . "'>" . ( !EMPTY_TRASH_DAYS ? __('Delete Permanently') : __('Move to Trash') ) . "</a>\n"; ?></div><div id="publishing-action"><input type="submit" name="save" value="<?php esc_attr_e('Update Comment'); ?>" tabindex="4" class="button-primary" /></div><div class="clear"></div></div></div></div></div></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="name"><?php _e( 'Author' ) ?></label></h3><div class="inside"><table class="form-table editcomment"><tbody><tr valign="top">	<td class="first"><?php _e( 'Name:' ); ?></td>	<td><input type="text" name="newcomment_author" size="30" value="<?php echo esc_attr( $comment->comment_author ); ?>" tabindex="1" id="name" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( $comment->comment_author_email ) {			printf( __( 'E-mail (%s):' ), get_comment_author_email_link( __( 'send e-mail' ), '', '' ) );		} else {			_e( 'E-mail:' );		}?></td>	<td><input type="text" name="newcomment_author_email" size="30" value="<?php echo $comment->comment_author_email; ?>" tabindex="2" id="email" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( ! empty( $comment->comment_author_url ) && 'http://' != $comment->comment_author_url ) {			$link = '<a href="' . $comment->comment_author_url . '" rel="external nofollow" target="_blank">' . __('visit site') . '</a>';			printf( __( 'URL (%s):' ), apply_filters('get_comment_author_link', $link ) );		} else {			_e( 'URL:' );		} ?></td>	<td><input type="text" id="newcomment_author_url" name="newcomment_author_url" size="30" class="code" value="<?php echo esc_attr($comment->comment_author_url); ?>" tabindex="3" /></td></tr></tbody></table><br /></div></div><div id="postdiv" class="postarea"><?php the_editor($comment->comment_content, 'content', 'newcomment_author_url', false, 4); ?><?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?></div><?phpdo_action('add_meta_boxes', 'comment', $comment);do_action('add_meta_boxes_comment', $comment);do_meta_boxes('comment', 'normal', $comment);?><input type="hidden" name="c" value="<?php echo esc_attr($comment->comment_ID) ?>" /><input type="hidden" name="p" value="<?php echo esc_attr($comment->comment_post_ID) ?>" /><input name="referredby" type="hidden" id="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?php wp_original_referer_field(true, 'previous'); ?><input type="hidden" name="noredir" value="1" /></div></div></div></div></form><script type="text/javascript">try{document.post.name.focus();}catch(e){}</script>
<?php/** * Tools Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Tools');add_contextual_help($current_screen,	'<p>' . __('Press This is a bookmarklet that makes it easy to blog about something you come across on the web. You can use it to just grab a link, or to post an excerpt. Press This will even allow you to choose from images included on the page and use them in your post. Just drag the Press This link on this screen to your bookmarks bar in your browser, and you&#8217;ll be on your way to easier content creation.') . '</p>' .	'<p>' . __('Note: Turbo/Gears is no longer promoted on this screen as it was in previous versions due to the fact that Google has discontinued support for it.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Tools_SubPanel" target="_blank">Tools Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( current_user_can('edit_posts') ) : ?><div class="tool-box">	<h3 class="title"><?php _e('Press This') ?></h3>	<p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p>	<p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p>	<p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p>	<p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p></div><?phpendif;if ( current_user_can( 'import' ) ) :$cats = get_taxonomy('category');$tags = get_taxonomy('post_tag');if ( current_user_can($cats->cap->manage_terms) || current_user_can($tags->cap->manage_terms) ) : ?><div class="tool-box">    <h3 class="title"><?php _e( 'Categories and Tags Converter' ) ?></h3>    <p><?php printf( __('<a href="%s">Use this</a> to convert categories to tags or tags to categories.'), 'import.php' ); ?></p></div><?phpendif;endif;do_action( 'tool_box' );?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Redirects to the RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss2_url' ), 301 );?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Socket Based FTP implementation * * @package PemFTP * @subpackage Socket * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(true, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@socket_set_option($sock, SOL_SOCKET, SO_RCVTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set receive timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		if(!@socket_set_option($sock, SOL_SOCKET , SO_SNDTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set send timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		return true;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		if(!($sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {			$this->PushError('_connect','socket create failed',socket_strerror(socket_last_error($sock)));			return FALSE;		}		if(!$this->_settimeout($sock)) return FALSE;		$this->SendMSG("Connecting to \"".$host.":".$port."\"");		if (!($res = @socket_connect($sock, $host, $port))) {			$this->PushError('_connect','socket connect failed',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@socket_read($this->_ftp_control_sock, 4096, PHP_BINARY_READ);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed', socket_strerror(socket_last_error($this->_ftp_control_sock)));			} else {				$this->_message.=$tmp;				$go = !preg_match("/^([0-9]{3})(-.+\\1)? [^".CRLF."]+".CRLF."$/Us", $this->_message, $regs);			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@socket_write($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed', socket_strerror(socket_last_error($this->stream)));			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		$this->SendMSG("Creating data socket");		$this->_ftp_data_sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);		if ($this->_ftp_data_sock < 0) {			$this->PushError('_data_prepare','socket create failed',socket_strerror(socket_last_error($this->_ftp_data_sock)));			return FALSE;		}		if(!$this->_settimeout($this->_ftp_data_sock)) {			$this->_data_close();			return FALSE;		}		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			if(!@socket_connect($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","socket_connect", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			else $this->_ftp_temp_sock=$this->_ftp_data_sock;		} else {			if(!@socket_getsockname($this->_ftp_control_sock, $addr, $port)) {				$this->PushError("_data_prepare","can't get control socket information", socket_strerror(socket_last_error($this->_ftp_control_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_bind($this->_ftp_data_sock,$addr)){				$this->PushError("_data_prepare","can't bind data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_listen($this->_ftp_data_sock)) {				$this->PushError("_data_prepare","can't listen data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_getsockname($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","can't get data socket information", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!$this->_exec('PORT '.str_replace('.',',',$this->_datahost.'.'.($this->_dataport>>8).'.'.($this->_dataport&0x00FF)), "_port")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_read","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}		}		while(($block=@socket_read($this->_ftp_temp_sock, $this->_ftp_buff_size, PHP_BINARY_READ))!==false) {			if($block==="") break;			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_write","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return false;			}		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return true;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@socket_write($this->_ftp_temp_sock, $block))===FALSE) {				$this->PushError("_data_write","socket_write", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@socket_close($this->_ftp_temp_sock);		@socket_close($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit() {		if($this->_connected) {			@socket_close($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Edit Link Categories Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');// Handle bulk actionsif ( isset($_GET['action']) && isset($_GET['delete']) ) {	check_admin_referer('bulk-link-categories');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	if ( 'delete' == $doaction ) {		$cats = (array) $_GET['delete'];		$default_cat_id = get_option('default_link_category');		foreach( $cats as $cat_ID ) {			$cat_ID = (int) $cat_ID;			// Don't delete the default cats.			if ( $cat_ID == $default_cat_id )				wp_die( sprintf( __("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), get_term_field('name', $cat_ID, 'link_category') ) );			wp_delete_term($cat_ID, 'link_category', array('default' => $default_cat_id));		}		$location = 'edit-link-categories.php';		if ( $referer = wp_get_referer() ) {			if ( false !== strpos($referer, 'edit-link-categories.php') )				$location = $referer;		}		$location = add_query_arg('message', 6, $location);		wp_redirect($location);		exit();	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}$title = __('Link Categories');wp_enqueue_script('admin-categories');if ( current_user_can('manage_categories') )	wp_enqueue_script('inline-edit-tax');add_contextual_help($current_screen, '<p>' . __('You can create groups of links by using link categories. Link category names must be unique and link categories are separate from the categories you use for posts.') . '</p>' .	'<p>' . __('You can delete link categories, but that action does not delete the links within the category. Instead, it moves them to the default link category.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Link_Categories_SubPanel" target="_blank">Link Categories Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once ('admin-header.php');$messages[1] = __('Category added.');$messages[2] = __('Category deleted.');$messages[3] = __('Category updated.');$messages[4] = __('Category not added.');$messages[5] = __('Category not updated.');$messages[6] = __('Categories deleted.'); ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-category-search-input"><?php _e( 'Search Categories' ); ?>:</label>	<input type="text" id="link-category-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Categories' ); ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;if ( ! isset( $catsperpage ) || $catsperpage < 0 )	$catsperpage = 20;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms('link_category') / $catsperpage),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-link-categories'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('edit-link-categories'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('edit-link-categories', false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:link-cat"><?php$start = ($pagenum - 1) * $catsperpage;$args = array('offset' => $start, 'number' => $catsperpage, 'hide_empty' => 0);if ( !empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$categories = get_terms( 'link_category', $args );if ( $categories ) {	$output = '';	foreach ( $categories as $category ) {		$output .= link_cat_row($category);	}	echo $output;	unset($category);}?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the links in that category. Instead, links that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), get_term_field('name', get_option('default_link_category'), 'link_category')) ?></p></div></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?php if ( current_user_can('manage_categories') ) {	$category = (object) array(); $category->parent = 0; do_action('add_link_category_form_pre', $category); ?><div class="form-wrap"><h3><?php _e('Add Link Category'); ?></h3><div id="ajax-response"></div><form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php"><input type="hidden" name="action" value="addcat" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field('add-link-category'); ?><div class="form-field form-required">	<label for="name"><?php _e('Link Category name') ?></label>	<input name="name" id="link-name" type="text" value="" size="40" aria-required="true" /></div><?php if ( !global_terms_enabled() ) { ?><div class="form-field">	<label for="slug"><?php _e('Link Category slug') ?></label>	<input name="slug" id="link-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php } ?><div class="form-field">	<label for="description"><?php _e('Description (optional)') ?></label>	<textarea name="description" id="link-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><p class="submit"><input type="submit" class="button" name="submit" value="<?php esc_attr_e('Add Category'); ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-link-categories', 'link_category'); ?><?php include('./admin-footer.php'); ?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?>	<div id="sidebar" role="complementary">		<ul>			<?php 	/* Widgetized sidebar, if you have the plugin installed. */					if ( !function_exists('dynamic_sidebar') || !dynamic_sidebar() ) : ?>			<li>				<?php get_search_form(); ?>			</li>			<!-- Author information is disabled per default. Uncomment and fill in your details if you want to use it.			<li><h2><?php _e('Author'); ?></h2>			<p>A little something about you, the author. Nothing lengthy, just an overview.</p>			</li>			-->			<?php if ( is_404() || is_category() || is_day() || is_month() ||						is_year() || is_search() || is_paged() ) {			?> <li>			<?php /* If this is a 404 page */ if (is_404()) { ?>			<?php /* If this is a category archive */ } elseif (is_category()) { ?>			<p><?php printf(__('You are currently browsing the archives for the %s category.'), single_cat_title('', false)); ?></p>			<?php /* If this is a daily archive */ } elseif (is_day()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the day %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('l, F jS, Y'))); ?></p>			<?php /* If this is a monthly archive */ } elseif (is_month()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('F, Y'))); ?></p>			<?php /* If this is a yearly archive */ } elseif (is_year()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the year %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time('Y')); ?></p>			<?php /* If this is a search result */ } elseif (is_search()) { ?>			<p><?php printf(__('You have searched the <a href="%1$s/">%2$s</a> blog archives for <strong>&#8216;%3$s&#8217;</strong>. If you are unable to find anything in these search results, you can try one of these links.'), get_bloginfo('url'), get_bloginfo('name'), esc_html( get_search_query() ) ); ?></p>			<?php /* If this set is paginated */ } elseif (isset($_GET['paged']) && !empty($_GET['paged'])) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives.'), get_bloginfo('url'), get_bloginfo('name')); ?></p>			<?php } ?>			</li>		<?php }?>		</ul>		<ul role="navigation">			<?php wp_list_pages('title_li=<h2>' . __('Pages') . '</h2>' ); ?>			<li><h2><?php _e('Archives'); ?></h2>				<ul>				<?php wp_get_archives(array('type' => 'monthly')); ?>				</ul>			</li>			<?php wp_list_categories(array('show_count' => 1, 'title_li' => '<h2>' . __('Categories') . '</h2>')); ?>		</ul>		<ul>			<?php /* If this is the frontpage */ if ( is_home() || is_page() ) { ?>				<?php wp_list_bookmarks(); ?>				<li><h2><?php _e('Meta'); ?></h2>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<li><a href="http://validator.w3.org/check/referer" title="<?php _e('This page validates as XHTML 1.0 Transitional'); ?>"><?php _e('Valid <abbr title="eXtensible HyperText Markup Language">XHTML</abbr>'); ?></a></li>					<li><a href="http://gmpg.org/xfn/"><abbr title="<?php _e('XHTML Friends Network'); ?>"><?php _e('XFN'); ?></abbr></a></li>					<li><a href="http://wordpress.org/" title="<?php _e('Powered by WordPress, state-of-the-art semantic personal publishing platform.'); ?>">WordPress</a></li>					<?php wp_meta(); ?>				</ul>				</li>			<?php } ?>			<?php endif; ?>		</ul>	</div>
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * Plugins may load this file to gain access to special helper functions for * plugin installation. This file is not included by WordPress and it is * recommended, to prevent fatal errors, that this file is included using * require_once(). * * These functions are not optimized for speed, but they should only be used * once in a while, so speed shouldn't be a concern. If it is and you are * needing to use these functions a lot, you might experience time outs. If you * do, then it is advised to just write the SQL code yourself. * * You can turn debugging on, by setting $debug to 1 after you include this * file. * * <code> * check_column('wp_links', 'link_description', 'mediumtext'); * if (check_column($wpdb->comments, 'comment_author', 'tinytext')) *     echo "ok\n"; * * $error_count = 0; * $tablename = $wpdb->links; * // check the column * if (!check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $ddl = "ALTER TABLE $wpdb->links MODIFY COLUMN link_description varchar(255) NOT NULL DEFAULT '' "; *     $q = $wpdb->query($ddl); * } * * if (check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $res .= $tablename . ' - ok <br />'; * } else { *     $res .= 'There was a problem with ' . $tablename . '<br />'; *     ++$error_count; * } * </code> * * @package WordPress * @subpackage Plugin *//** * @global bool $wp_only_load_config * @name $wp_only_load_config * @var bool * @since unknown */$wp_only_load_config = true;/** Load WordPress Bootstrap */require_once(dirname(dirname(__FILE__)).'/wp-load.php');/** * Turn debugging on or off. * @global bool|int $debug * @name $debug * @var bool|int * @since unknown */$debug = 0;if ( ! function_exists('maybe_create_table') ) :/** * Create database table, if it doesn't already exist. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Database table name. * @param string $create_ddl Create database table SQL. * @return bool False on error, true if already exists or success. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	return false;}endif;if ( ! function_exists('maybe_add_column') ) :/** * Add column to database table, if column doesn't already exist in table. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * @uses $debug * * @param string $table_name Database table name * @param string $column_name Table column name * @param string $create_ddl SQL to add column to table. * @return bool False on failure. True, if already exists or was successful. */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}endif;/** * Drop column from database table, if it exists. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Table name * @param string $column_name Column name * @param string $drop_ddl SQL statement to drop column. * @return bool False on failure, true on success or doesn't exist. */function maybe_drop_column($table_name, $column_name, $drop_ddl) {	global $wpdb;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			//found it try to drop it.			$wpdb->query($drop_ddl);			// we cannot directly tell that whether this succeeded!			foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {				if ($column == $column_name) {					return false;				}			}		}	}	// else didn't find it	return true;}/** * Check column matches criteria. * * Uses the SQL DESC for retrieving the table info for the column. It will help * understand the parameters, if you do more research on what column information * is returned by the SQL statement. Pass in null to skip checking that * criteria. * * Column names returned from DESC table are case sensitive and are listed: *      Field *      Type *      Null *      Key *      Default *      Extra * * @since unknown * @package WordPress * @subpackage Plugin * * @param string $table_name Table name * @param string $col_name Column name * @param string $col_type Column type * @param bool $is_null Optional. Check is null. * @param mixed $key Optional. Key info. * @param mixed $default Optional. Default value. * @param mixed $extra Optional. Extra value. * @return bool True, if matches. False, if not matching. */function check_column($table_name, $col_name, $col_type, $is_null = null, $key = null, $default = null, $extra = null) {	global $wpdb, $debug;	$diffs = 0;	$results = $wpdb->get_results("DESC $table_name");	foreach ($results as $row ) {		if ($debug > 1) print_r($row);		if ($row->Field == $col_name) {			// got our column, check the params			if ($debug) echo ("checking $row->Type against $col_type\n");			if (($col_type != null) && ($row->Type != $col_type)) {				++$diffs;			}			if (($is_null != null) && ($row->Null != $is_null)) {				++$diffs;			}			if (($key != null) && ($row->Key  != $key)) {				++$diffs;			}			if (($default != null) && ($row->Default != $default)) {				++$diffs;			}			if (($extra != null) && ($row->Extra != $extra)) {				++$diffs;			}			if ($diffs > 0) {				if ($debug) echo ("diffs = $diffs returning false\n");				return false;			}			return true;		} // end if found our column	}	return false;}?>
<?php/** * Atom Syndication Format PHP Library * * @package AtomLib * @link http://code.google.com/p/phpatomlib/ * * @author Elias Torres <elias@torrez.us> * @version 0.4 * @since 2.3 *//** * Structure that store common Atom Feed Properties * * @package AtomLib */class AtomFeed {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array     * @access public     */    var $categories = array();	/**	 * Stores Entries	 *	 * @var array	 * @access public	 */    var $entries = array();}/** * Structure that store Atom Entry Properties * * @package AtomLib */class AtomEntry {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array	 * @access public     */    var $categories = array();}/** * AtomLib Atom Parser API * * @package AtomLib */class AtomParser {    var $NS = 'http://www.w3.org/2005/Atom';    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');    var $debug = false;    var $depth = 0;    var $indent = 2;    var $in_content;    var $ns_contexts = array();    var $ns_decls = array();    var $content_ns_decls = array();    var $content_ns_contexts = array();    var $is_xhtml = false;    var $is_html = false;    var $is_text = true;    var $skipped_div = false;    var $FILE = "php://input";    var $feed;    var $current;    function AtomParser() {        $this->feed = new AtomFeed();        $this->current = null;        $this->map_attrs_func = create_function('$k,$v', 'return "$k=\"$v\"";');        $this->map_xmlns_func = create_function('$p,$n', '$xd = "xmlns"; if(strlen($n[0])>0) $xd .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');    }    function _p($msg) {        if($this->debug) {            print str_repeat(" ", $this->depth * $this->indent) . $msg ."\n";        }    }    function error_handler($log_level, $log_text, $error_file, $error_line) {        $this->error = $log_text;    }    function parse() {        set_error_handler(array(&$this, 'error_handler'));        array_unshift($this->ns_contexts, array());        $parser = xml_parser_create_ns();        xml_set_object($parser, $this);        xml_set_element_handler($parser, "start_element", "end_element");        xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);        xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,0);        xml_set_character_data_handler($parser, "cdata");        xml_set_default_handler($parser, "_default");        xml_set_start_namespace_decl_handler($parser, "start_ns");        xml_set_end_namespace_decl_handler($parser, "end_ns");        $this->content = '';        $ret = true;        $fp = fopen($this->FILE, "r");        while ($data = fread($fp, 4096)) {            if($this->debug) $this->content .= $data;            if(!xml_parse($parser, $data, feof($fp))) {                trigger_error(sprintf(__('XML error: %s at line %d')."\n",                    xml_error_string(xml_get_error_code($xml_parser)),                    xml_get_current_line_number($xml_parser)));                $ret = false;                break;            }        }        fclose($fp);        xml_parser_free($parser);        restore_error_handler();        return $ret;    }    function start_element($parser, $name, $attrs) {        $tag = array_pop(split(":", $name));        switch($name) {            case $this->NS . ':feed':                $this->current = $this->feed;                break;            case $this->NS . ':entry':                $this->current = new AtomEntry();                break;        };        $this->_p("start_element('$name')");        #$this->_p(print_r($this->ns_contexts,true));        #$this->_p('current(' . $this->current . ')');        array_unshift($this->ns_contexts, $this->ns_decls);        $this->depth++;        if(!empty($this->in_content)) {            $this->content_ns_decls = array();            if($this->is_html || $this->is_text)                trigger_error("Invalid content in element found. Content must not be of type text or html if it contains markup.");            $attrs_prefix = array();            // resolve prefixes for attributes            foreach($attrs as $key => $value) {                $with_prefix = $this->ns_to_prefix($key, true);                $attrs_prefix[$with_prefix[1]] = $this->xml_escape($value);            }            $attrs_str = join(' ', array_map($this->map_attrs_func, array_keys($attrs_prefix), array_values($attrs_prefix)));            if(strlen($attrs_str) > 0) {                $attrs_str = " " . $attrs_str;            }            $with_prefix = $this->ns_to_prefix($name);            if(!$this->is_declared_content_ns($with_prefix[0])) {                array_push($this->content_ns_decls, $with_prefix[0]);            }            $xmlns_str = '';            if(count($this->content_ns_decls) > 0) {                array_unshift($this->content_ns_contexts, $this->content_ns_decls);                $xmlns_str .= join(' ', array_map($this->map_xmlns_func, array_keys($this->content_ns_contexts[0]), array_values($this->content_ns_contexts[0])));                if(strlen($xmlns_str) > 0) {                    $xmlns_str = " " . $xmlns_str;                }            }            array_push($this->in_content, array($tag, $this->depth, "<". $with_prefix[1] ."{$xmlns_str}{$attrs_str}" . ">"));        } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {            $this->in_content = array();            $this->is_xhtml = $attrs['type'] == 'xhtml';            $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';            $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';            $type = $this->is_xhtml ? 'XHTML' : ($this->is_html ? 'HTML' : ($this->is_text ? 'TEXT' : $attrs['type']));            if(in_array('src',array_keys($attrs))) {                $this->current->$tag = $attrs;            } else {                array_push($this->in_content, array($tag,$this->depth, $type));            }        } else if($tag == 'link') {            array_push($this->current->links, $attrs);        } else if($tag == 'category') {            array_push($this->current->categories, $attrs);        }        $this->ns_decls = array();    }    function end_element($parser, $name) {        $tag = array_pop(split(":", $name));        $ccount = count($this->in_content);        # if we are *in* content, then let's proceed to serialize it        if(!empty($this->in_content)) {            # if we are ending the original content element            # then let's finalize the content            if($this->in_content[0][0] == $tag &&                $this->in_content[0][1] == $this->depth) {                $origtype = $this->in_content[0][2];                array_shift($this->in_content);                $newcontent = array();                foreach($this->in_content as $c) {                    if(count($c) == 3) {                        array_push($newcontent, $c[2]);                    } else {                        if($this->is_xhtml || $this->is_text) {                            array_push($newcontent, $this->xml_escape($c));                        } else {                            array_push($newcontent, $c);                        }                    }                }                if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {                    $this->current->$tag = array($origtype, join('',$newcontent));                } else {                    $this->current->$tag = join('',$newcontent);                }                $this->in_content = array();            } else if($this->in_content[$ccount-1][0] == $tag &&                $this->in_content[$ccount-1][1] == $this->depth) {                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . "/>";            } else {                # else, just finalize the current element's content                $endtag = $this->ns_to_prefix($name);                array_push($this->in_content, array($tag, $this->depth, "</$endtag[1]>"));            }        }        array_shift($this->ns_contexts);        $this->depth--;        if($name == ($this->NS . ':entry')) {            array_push($this->feed->entries, $this->current);            $this->current = null;        }        $this->_p("end_element('$name')");    }    function start_ns($parser, $prefix, $uri) {        $this->_p("starting: " . $prefix . ":" . $uri);        array_push($this->ns_decls, array($prefix,$uri));    }    function end_ns($parser, $prefix) {        $this->_p("ending: #" . $prefix . "#");    }    function cdata($parser, $data) {        $this->_p("data: #" . str_replace(array("\n"), array("\\n"), trim($data)) . "#");        if(!empty($this->in_content)) {            array_push($this->in_content, $data);        }    }    function _default($parser, $data) {        # when does this gets called?    }    function ns_to_prefix($qname, $attr=false) {        # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')        $components = split(":", $qname);        # grab the last one (e.g 'div')        $name = array_pop($components);        if(!empty($components)) {            # re-join back the namespace component            $ns = join(":",$components);            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {                        return array($mapping, "$mapping[0]:$name");                    }                }            }        }        if($attr) {            return array(null, $name);        } else {            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if(strlen($mapping[0]) == 0) {                        return array($mapping, $name);                    }                }            }        }    }    function is_declared_content_ns($new_mapping) {        foreach($this->content_ns_contexts as $context) {            foreach($context as $mapping) {                if($new_mapping == $mapping) {                    return true;                }            }        }        return false;    }    function xml_escape($string)    {             return str_replace(array('&','"',"'",'<','>'),                array('&amp;','&quot;','&apos;','&lt;','&gt;'),                $string );    }}?>
<?php// Silence is golden.?>
<?php/** * The Sidebar containing the primary and secondary widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>		<div id="primary" class="widget-area" role="complementary">			<ul class="xoxo"><?php	/* When we call the dynamic_sidebar() function, it'll spit out	 * the widgets for that widget area. If it instead returns false,	 * then the sidebar simply doesn't exist, so we'll hard-code in	 * some default sidebar stuff just in case.	 */	if ( ! dynamic_sidebar( 'primary-widget-area' ) ) : ?>				<li id="search" class="widget-container widget_search">				<?php get_search_form(); ?>			</li>			<li id="archives" class="widget-container">				<h3 class="widget-title"><?php _e( 'Archives', 'twentyten' ); ?></h3>				<ul>					<?php wp_get_archives( 'type=monthly' ); ?>				</ul>			</li>			<li id="meta" class="widget-container">				<h3 class="widget-title"><?php _e( 'Meta', 'twentyten' ); ?></h3>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<?php wp_meta(); ?>				</ul>			</li>		<?php endif; // end primary widget area ?>			</ul>		</div><!-- #primary .widget-area --><?php	// A second sidebar for widgets, just because.	if ( is_active_sidebar( 'secondary-widget-area' ) ) : ?>		<div id="secondary" class="widget-area" role="complementary">			<ul class="xoxo">				<?php dynamic_sidebar( 'secondary-widget-area' ); ?>			</ul>		</div><!-- #secondary .widget-area --><?php endif; ?>
<?php/** * WP_Importer base class */class WP_Importer {	/**	 * Class Constructor	 *	 * @return void	 */	function __construct() {}	function WP_Importer() {		$this->__construct();	}	/**	 * Returns array with imported permalinks from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_posts( $importer_name, $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all posts in chunks		do {			$meta_key = $importer_name . '_' . $bid . '_permalink';			$sql = $wpdb->prepare( "SELECT post_id, meta_value FROM $wpdb->postmeta WHERE meta_key = '%s' LIMIT %d,%d", $meta_key, $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Set permalinks into array					$hashtable[$r->meta_value] = intval( $r->post_id );				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	/**	 * Return count of imported permalinks from WordPress database	 *	 * @param string $bid	 * @return int	 */	function count_imported_posts( $importer_name, $bid ) {		global $wpdb;		$count = 0;		// Get count of permalinks		$meta_key = $importer_name . '_' . $bid . '_permalink';		$sql = $wpdb->prepare( "SELECT COUNT( post_id ) AS cnt FROM $wpdb->postmeta WHERE meta_key = '%s'", $meta_key );		$result = $wpdb->get_results( $sql );		if ( !empty( $result ) )			$count = intval( $result[0]->cnt );		// unset to save memory		unset( $results );		return $count;	}	/**	 * Set array with imported comments from WordPress database	 *	 * @param string $bid	 * @return array	 */	function get_imported_comments( $bid ) {		global $wpdb;		$hashtable = array();		$limit = 100;		$offset = 0;		// Grab all comments in chunks		do {			$sql = $wpdb->prepare( "SELECT comment_ID, comment_agent FROM $wpdb->comments LIMIT %d,%d", $offset, $limit );			$results = $wpdb->get_results( $sql );			// Increment offset			$offset = ( $limit + $offset );			if ( !empty( $results ) ) {				foreach ( $results as $r ) {					// Explode comment_agent key					list ( $ca_bid, $source_comment_id ) = explode( '-', $r->comment_agent );					$source_comment_id = intval( $source_comment_id );					// Check if this comment came from this blog					if ( $bid == $ca_bid ) {						$hashtable[$source_comment_id] = intval( $r->comment_ID );					}				}			}		} while ( count( $results ) == $limit );		// unset to save memory		unset( $results, $r );		return $hashtable;	}	function set_blog( $blog_id ) {		if ( is_numeric( $blog_id ) ) {			$blog_id = (int) $blog_id;		} else {			$blog = 'http://' . preg_replace( '#^https?://#', '', $blog_id );			if ( ( !$parsed = parse_url( $blog ) ) || empty( $parsed['host'] ) ) {				fwrite( STDERR, "Error: can not determine blog_id from $blog_id\n" );				exit();			}			if ( empty( $parsed['path'] ) )				$parsed['path'] = '/';			if ( !$blog = get_blog_info( $parsed['host'], $parsed['path'] ) ) {				fwrite( STDERR, "Error: Could not find blog\n" );				exit();			}			$blog_id = (int) $blog->blog_id;			// Restore global $current_blog			global $current_blog;			$current_blog = $blog;		}		if ( function_exists( 'is_multisite' ) ) {			if ( is_multisite() )				switch_to_blog( $blog_id );		}		return $blog_id;	}	function set_user( $user_id ) {		if ( is_numeric( $user_id ) ) {			$user_id = (int) $user_id;		} else {			$user_id = (int) username_exists( $user_id );		}		if ( !$user_id || !wp_set_current_user( $user_id ) ) {			fwrite( STDERR, "Error: can not find user\n" );			exit();		}		return $user_id;	}	/**	 * Sort by strlen, longest string first	 *	 * @param string $a	 * @param string $b	 * @return int	 */	function cmpr_strlen( $a, $b ) {		return strlen( $b ) - strlen( $a );	}	/**	 * GET URL	 *	 * @param string $url	 * @param string $username	 * @param string $password	 * @param bool $head	 * @return array	 */	function get_page( $url, $username = '', $password = '', $head = false ) {		// Increase the timeout		add_filter( 'http_request_timeout', array( &$this, 'bump_request_timeout' ) );		$headers = array();		$args = array();		if ( true === $head )			$args['method'] = 'HEAD';		if ( !empty( $username ) && !empty( $password ) )			$headers['Authorization'] = 'Basic ' . base64_encode( "$username:$password" );		$args['headers'] = $headers;		return wp_remote_request( $url, $args );	}	/**	 * Bump up the request timeout for http requests	 *	 * @param int $val	 * @return int	 */	function bump_request_timeout( $val ) {		return 60;	}	/**	 * Check if user has exceeded disk quota	 *	 * @return bool	 */	function is_user_over_quota() {		global $current_user, $current_blog;		if ( function_exists( 'upload_is_user_over_quota' ) ) {			if ( upload_is_user_over_quota( 1 ) ) {				echo "Sorry, you have used your upload quota.\n";				return true;			}		}		return false;	}	/**	 * Replace newlines, tabs, and multiple spaces with a single space	 *	 * @param string $string	 * @return string	 */	function min_whitespace( $string ) {		return preg_replace( '|[\r\n\t ]+|', ' ', $string );	}	/**	 * Reset global variables that grow out of control during imports	 *	 * @return void	 */	function stop_the_insanity() {		global $wpdb, $wp_actions;		// Or define( 'WP_IMPORTING', true );		$wpdb->queries = array();		// Reset $wp_actions to keep it from growing out of control		$wp_actions = array();	}}/** * Returns value of command line params. * Exits when a required param is not set. * * @param string $param * @param bool $required * @return mixed */function get_cli_args( $param, $required = false ) {	$args = $_SERVER['argv'];	$out = array();	$last_arg = null;	$return = null;	$il = sizeof( $args );	for ( $i = 1, $il; $i < $il; $i++ ) {		if ( (bool) preg_match( "/^--(.+)/", $args[$i], $match ) ) {			$parts = explode( "=", $match[1] );			$key = preg_replace( "/[^a-z0-9]+/", "", $parts[0] );			if ( isset( $parts[1] ) ) {				$out[$key] = $parts[1];			} else {				$out[$key] = true;			}			$last_arg = $key;		} else if ( (bool) preg_match( "/^-([a-zA-Z0-9]+)/", $args[$i], $match ) ) {			for ( $j = 0, $jl = strlen( $match[1] ); $j < $jl; $j++ ) {				$key = $match[1]{$j};				$out[$key] = true;			}			$last_arg = $key;		} else if ( $last_arg !== null ) {			$out[$last_arg] = $args[$i];		}	}	// Check array for specified param	if ( isset( $out[$param] ) ) {		// Set return value		$return = $out[$param];	}	// Check for missing required param	if ( !isset( $out[$param] ) && $required ) {		// Display message and exit		echo "\"$param\" parameter is required but was not specified\n";		exit();	}	return $return;}
<?php// Silence is golden.?>
<?php// --------------------------------------------------------------------------------// PhpConcept Library - Zip Module 2.8.2// --------------------------------------------------------------------------------// License GNU/LGPL - Vincent Blavet - August 2009// http://www.phpconcept.net// --------------------------------------------------------------------------------//// Presentation ://   PclZip is a PHP library that manage ZIP archives.//   So far tests show that archives generated by PclZip are readable by//   WinZip application and other tools.//// Description ://   See readme.txt and http://www.phpconcept.net//// Warning ://   This library and the associated files are non commercial, non professional//   work.//   It should not have unexpected results. However if any damage is caused by//   this software the author can not be responsible.//   The use of this software is at the risk of the user.//// --------------------------------------------------------------------------------// $Id: pclzip.lib.php,v 1.60 2009/09/30 21:01:04 vblavet Exp $// --------------------------------------------------------------------------------  // ----- Constants  if (!defined('PCLZIP_READ_BLOCK_SIZE')) {    define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );  }  // ----- File list separator  // In version 1.x of PclZip, the separator for file list is a space  // (which is not a very smart choice, specifically for windows paths !).  // A better separator should be a comma (,). This constant gives you the  // abilty to change that.  // However notice that changing this value, may have impact on existing  // scripts, using space separated filenames.  // Recommanded values for compatibility with older versions :  //define( 'PCLZIP_SEPARATOR', ' ' );  // Recommanded values for smart separation of filenames.  if (!defined('PCLZIP_SEPARATOR')) {    define( 'PCLZIP_SEPARATOR', ',' );  }  // ----- Error configuration  // 0 : PclZip Class integrated error handling  // 1 : PclError external library error handling. By enabling this  //     you must ensure that you have included PclError library.  // [2,...] : reserved for futur use  if (!defined('PCLZIP_ERROR_EXTERNAL')) {    define( 'PCLZIP_ERROR_EXTERNAL', 0 );  }  // ----- Optional static temporary directory  //       By default temporary files are generated in the script current  //       path.  //       If defined :  //       - MUST BE terminated by a '/'.  //       - MUST be a valid, already created directory  //       Samples :  // define( 'PCLZIP_TEMPORARY_DIR', '/temp/' );  // define( 'PCLZIP_TEMPORARY_DIR', 'C:/Temp/' );  if (!defined('PCLZIP_TEMPORARY_DIR')) {    define( 'PCLZIP_TEMPORARY_DIR', '' );  }  // ----- Optional threshold ratio for use of temporary files  //       Pclzip sense the size of the file to add/extract and decide to  //       use or not temporary file. The algorythm is looking for  //       memory_limit of PHP and apply a ratio.  //       threshold = memory_limit * ratio.  //       Recommended values are under 0.5. Default 0.47.  //       Samples :  // define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.5 );  if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {    define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );  }// --------------------------------------------------------------------------------// ***** UNDER THIS LINE NOTHING NEEDS TO BE MODIFIED *****// --------------------------------------------------------------------------------  // ----- Global variables  $g_pclzip_version = "2.8.2";  // ----- Error codes  //   -1 : Unable to open file in binary write mode  //   -2 : Unable to open file in binary read mode  //   -3 : Invalid parameters  //   -4 : File does not exist  //   -5 : Filename is too long (max. 255)  //   -6 : Not a valid zip file  //   -7 : Invalid extracted file size  //   -8 : Unable to create directory  //   -9 : Invalid archive extension  //  -10 : Invalid archive format  //  -11 : Unable to delete file (unlink)  //  -12 : Unable to rename file (rename)  //  -13 : Invalid header checksum  //  -14 : Invalid archive size  define( 'PCLZIP_ERR_USER_ABORTED', 2 );  define( 'PCLZIP_ERR_NO_ERROR', 0 );  define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );  define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );  define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );  define( 'PCLZIP_ERR_MISSING_FILE', -4 );  define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );  define( 'PCLZIP_ERR_INVALID_ZIP', -6 );  define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );  define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );  define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );  define( 'PCLZIP_ERR_BAD_FORMAT', -10 );  define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );  define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );  define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );  define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );  define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );  define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );  define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );  define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );  define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );  define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );  define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );  // ----- Options values  define( 'PCLZIP_OPT_PATH', 77001 );  define( 'PCLZIP_OPT_ADD_PATH', 77002 );  define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );  define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );  define( 'PCLZIP_OPT_SET_CHMOD', 77005 );  define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );  define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );  define( 'PCLZIP_OPT_BY_NAME', 77008 );  define( 'PCLZIP_OPT_BY_INDEX', 77009 );  define( 'PCLZIP_OPT_BY_EREG', 77010 );  define( 'PCLZIP_OPT_BY_PREG', 77011 );  define( 'PCLZIP_OPT_COMMENT', 77012 );  define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );  define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );  define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );  define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );  define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );  // Having big trouble with crypt. Need to multiply 2 long int  // which is not correctly supported by PHP ...  //define( 'PCLZIP_OPT_CRYPT', 77018 );  define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );  define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD', 77020 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_ON', 77021 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_OFF', 77022 ); // alias  // ----- File description attributes  define( 'PCLZIP_ATT_FILE_NAME', 79001 );  define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );  define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );  define( 'PCLZIP_ATT_FILE_MTIME', 79004 );  define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );  define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );  // ----- Call backs values  define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );  define( 'PCLZIP_CB_POST_EXTRACT', 78002 );  define( 'PCLZIP_CB_PRE_ADD', 78003 );  define( 'PCLZIP_CB_POST_ADD', 78004 );  /* For futur use  define( 'PCLZIP_CB_PRE_LIST', 78005 );  define( 'PCLZIP_CB_POST_LIST', 78006 );  define( 'PCLZIP_CB_PRE_DELETE', 78007 );  define( 'PCLZIP_CB_POST_DELETE', 78008 );  */  // --------------------------------------------------------------------------------  // Class : PclZip  // Description :  //   PclZip is the class that represent a Zip archive.  //   The public methods allow the manipulation of the archive.  // Attributes :  //   Attributes must not be accessed directly.  // Methods :  //   PclZip() : Object creator  //   create() : Creates the Zip archive  //   listContent() : List the content of the Zip archive  //   extract() : Extract the content of the archive  //   properties() : List the properties of the archive  // --------------------------------------------------------------------------------  class PclZip  {    // ----- Filename of the zip file    var $zipname = '';    // ----- File descriptor of the zip file    var $zip_fd = 0;    // ----- Internal error handling    var $error_code = 1;    var $error_string = '';    // ----- Current status of the magic_quotes_runtime    // This value store the php configuration for magic_quotes    // The class can then disable the magic_quotes and reset it after    var $magic_quotes_status;  // --------------------------------------------------------------------------------  // Function : PclZip()  // Description :  //   Creates a PclZip object and set the name of the associated Zip archive  //   filename.  //   Note that no real action is taken, if the archive does not exist it is not  //   created. Use create() for that.  // --------------------------------------------------------------------------------  function PclZip($p_zipname)  {    // ----- Tests the zlib    if (!function_exists('gzopen'))    {      die('Abort '.basename(__FILE__).' : Missing zlib extensions');    }    // ----- Set the attributes    $this->zipname = $p_zipname;    $this->zip_fd = 0;    $this->magic_quotes_status = -1;    // ----- Return    return;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   create($p_filelist, $p_add_dir="", $p_remove_dir="")  //   create($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two different synopsis. The first one is historical.  //   This method creates a Zip Archive. The Zip file is created in the  //   filesystem. The files and directories indicated in $p_filelist  //   are added in the archive. See the parameters description for the  //   supported format of $p_filelist.  //   When a directory is in the list, the directory and its content is added  //   in the archive.  //   In this synopsis, the function takes an optional variable list of  //   options. See bellow the supported options.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function create($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove from the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'                                             ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Invalid number / type of arguments");          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        if ($v_string != '') {          $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;        }        else {        }      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   add($p_filelist, $p_add_dir="", $p_remove_dir="")  //   add($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two synopsis. The first one is historical.  //   This methods add the list of files in an existing archive.  //   If a file with the same name already exists, it is added at the end of the  //   archive, the first one is still present.  //   If the archive does not exist, it is created.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_OPT_ADD_COMMENT :  //   PCLZIP_OPT_PREPEND_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function add($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_ADD_COMMENT => 'optional',                                                   PCLZIP_OPT_PREPEND_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'												   ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : listContent()  // Description :  //   This public method, gives the list of the files and directories, with their  //   properties.  //   The properties of each entries in the list are (used also in other functions) :  //     filename : Name of the file. For a create or add action it is the filename  //                given by the user. For an extract function it is the filename  //                of the extracted file.  //     stored_filename : Name of the file / directory stored in the archive.  //     size : Size of the stored file.  //     compressed_size : Size of the file's data compressed in the archive  //                       (without the headers overhead)  //     mtime : Last known modification date of the file (UNIX timestamp)  //     comment : Comment associated with the file  //     folder : true | false  //     index : index of the file in the archive  //     status : status of the action (depending of the action) :  //              Values are :  //                ok : OK !  //                filtered : the file / dir is not extracted (filtered by user)  //                already_a_directory : the file can not be extracted because a  //                                      directory with the same name already exists  //                write_protected : the file can not be extracted because a file  //                                  with the same name already exists and is  //                                  write protected  //                newer_exist : the file was not extracted because a newer file exists  //                path_creation_fail : the file is not extracted because the folder  //                                     does not exist and can not be created  //                write_error : the file was not extracted because there was a  //                              error while writing the file  //                read_error : the file was not extracted because there was a error  //                             while reading the file  //                invalid_header : the file was not extracted because of an archive  //                                 format error (bad file header)  //   Note that each time a method can continue operating when there  //   is an action error on a file, the error is only logged in the file status.  // Return Values :  //   0 on an unrecoverable failure,  //   The list of the files in the archive.  // --------------------------------------------------------------------------------  function listContent()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Call the extracting fct    $p_list = array();    if (($v_result = $this->privList($p_list)) != 1)    {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extract($p_path="./", $p_remove_path="")  //   extract([$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method extract all the files / directories from the archive to the  //   folder indicated in $p_path.  //   If you want to ignore the 'root' part of path of the memorized files  //   you can indicate this in the optional $p_remove_path parameter.  //   By default, if a newer file with the same name already exists, the  //   file is not extracted.  //  //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH aoptions  //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append  //   at the end of the path value of PCLZIP_OPT_PATH.  // Parameters :  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 or a negative value on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function extract()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_BY_NAME => 'optional',                                                   PCLZIP_OPT_BY_EREG => 'optional',                                                   PCLZIP_OPT_BY_PREG => 'optional',                                                   PCLZIP_OPT_BY_INDEX => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												    ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Trace    // ----- Call the extracting fct    $p_list = array();    $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,	                                     $v_remove_all_path, $v_options);    if ($v_result < 1) {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extractByIndex($p_index, $p_path="./", $p_remove_path="")  //   extractByIndex($p_index, [$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method is doing a partial extract of the archive.  //   The extracted files or folders are identified by their index in the  //   archive (from 0 to n).  //   Note that if the index identify a folder, only the folder entry is  //   extracted, not all the files included in the archive.  // Parameters :  //   $p_index : A single index (integer) or a string of indexes of files to  //              extract. The form of the string is "0,4-6,8-12" with only numbers  //              and '-' for range or ',' to separate ranges. No spaces or ';'  //              are allowed.  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and  //     not as files.  //     The resulting content is in a new field 'content' in the file  //     structure.  //     This option must be used alone (any other options are ignored).  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  //function extractByIndex($p_index, options...)  function extractByIndex($p_index)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												   ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }        if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {          $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;        }        else {        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Trace    // ----- Trick    // Here I want to reuse extractByRule(), so I need to parse the $p_index    // with privParseOptions()    $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);    $v_options_trick = array();    $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,                                        array (PCLZIP_OPT_BY_INDEX => 'optional' ));    if ($v_result != 1) {        return 0;    }    $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Call the extracting fct    if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {        return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   delete([$p_option, $p_option_value, ...])  // Description :  //   This method removes files from the archive.  //   If no parameters are given, then all the archive is emptied.  // Parameters :  //   None or optional arguments.  // Options :  //   PCLZIP_OPT_BY_INDEX :  //   PCLZIP_OPT_BY_NAME :  //   PCLZIP_OPT_BY_EREG :  //   PCLZIP_OPT_BY_PREG :  // Return Values :  //   0 on failure,  //   The list of the files which are still present in the archive.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function delete()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Parse the options      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                        array (PCLZIP_OPT_BY_NAME => 'optional',                                               PCLZIP_OPT_BY_EREG => 'optional',                                               PCLZIP_OPT_BY_PREG => 'optional',                                               PCLZIP_OPT_BY_INDEX => 'optional' ));      if ($v_result != 1) {          return 0;      }    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Call the delete fct    $v_list = array();    if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {      $this->privSwapBackMagicQuotes();      unset($v_list);      return(0);    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : deleteByIndex()  // Description :  //   ***** Deprecated *****  //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be prefered.  // --------------------------------------------------------------------------------  function deleteByIndex($p_index)  {    $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : properties()  // Description :  //   This method gives the properties of the archive.  //   The properties are :  //     nb : Number of files in the archive  //     comment : Comment associated with the archive file  //     status : not_exist, ok  // Parameters :  //   None  // Return Values :  //   0 on failure,  //   An array with the archive properties.  // --------------------------------------------------------------------------------  function properties()  {    // ----- Reset the error handler    $this->privErrorReset();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check archive    if (!$this->privCheckFormat()) {      $this->privSwapBackMagicQuotes();      return(0);    }    // ----- Default properties    $v_prop = array();    $v_prop['comment'] = '';    $v_prop['nb'] = 0;    $v_prop['status'] = 'not_exist';    // ----- Look if file exists    if (@is_file($this->zipname))    {      // ----- Open the zip file      if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)      {        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');        // ----- Return        return 0;      }      // ----- Read the central directory informations      $v_central_dir = array();      if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)      {        $this->privSwapBackMagicQuotes();        return 0;      }      // ----- Close the zip file      $this->privCloseFd();      // ----- Set the user attributes      $v_prop['comment'] = $v_central_dir['comment'];      $v_prop['nb'] = $v_central_dir['entries'];      $v_prop['status'] = 'ok';    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_prop;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : duplicate()  // Description :  //   This method creates an archive by copying the content of an other one. If  //   the archive already exist, it is replaced by the new one without any warning.  // Parameters :  //   $p_archive : The filename of a valid archive, or  //                a valid PclZip object.  // Return Values :  //   1 on success.  //   0 or a negative value on error (error code).  // --------------------------------------------------------------------------------  function duplicate($p_archive)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the $p_archive is a PclZip object    if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))    {      // ----- Duplicate the archive      $v_result = $this->privDuplicate($p_archive->zipname);    }    // ----- Look if the $p_archive is a string (so a filename)    else if (is_string($p_archive))    {      // ----- Check that $p_archive is a valid zip file      // TBC : Should also check the archive format      if (!is_file($p_archive)) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");        $v_result = PCLZIP_ERR_MISSING_FILE;      }      else {        // ----- Duplicate the archive        $v_result = $this->privDuplicate($p_archive);      }    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : merge()  // Description :  //   This method merge the $p_archive_to_add archive at the end of the current  //   one ($this).  //   If the archive ($this) does not exist, the merge becomes a duplicate.  //   If the $p_archive_to_add archive does not exist, the merge is a success.  // Parameters :  //   $p_archive_to_add : It can be directly the filename of a valid zip archive,  //                       or a PclZip object archive.  // Return Values :  //   1 on success,  //   0 or negative values on error (see below).  // --------------------------------------------------------------------------------  function merge($p_archive_to_add)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Look if the $p_archive_to_add is a PclZip object    if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))    {      // ----- Merge the archive      $v_result = $this->privMerge($p_archive_to_add);    }    // ----- Look if the $p_archive_to_add is a string (so a filename)    else if (is_string($p_archive_to_add))    {      // ----- Create a temporary archive      $v_object_archive = new PclZip($p_archive_to_add);      // ----- Merge the archive      $v_result = $this->privMerge($v_object_archive);    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorCode()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorCode()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorCode());    }    else {      return($this->error_code);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorName()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorName($p_with_code=false)  {    $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',                      PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',                      PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',                      PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',                      PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',                      PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',                      PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',                      PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',                      PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',                      PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',                      PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',                      PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',                      PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',                      PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',                      PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',                      PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',                      PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',                      PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',                      PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'                      ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'                      ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'                    );    if (isset($v_name[$this->error_code])) {      $v_value = $v_name[$this->error_code];    }    else {      $v_value = 'NoName';    }    if ($p_with_code) {      return($v_value.' ('.$this->error_code.')');    }    else {      return($v_value);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorInfo()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorInfo($p_full=false)  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorString());    }    else {      if ($p_full) {        return($this->errorName(true)." : ".$this->error_string);      }      else {        return($this->error_string." [code ".$this->error_code."]");      }    }  }unction : privCheckFormat()  // Description :  //   This method check that the archive exists and is a valid zip archive.  //   Several level of check exists. (futur)  // Parameters :  //   $p_level : Level of check. Default 0.  //              0 : Check the first bytes (magic codes) (default value))  //              1 : 0 + Check the central directory (futur)  //              2 : 1 + Check each file header (futur)  // Return Values :  //   true on success,  //   false on error, the error code is set.  // --------------------------------------------------------------------------------  function privCheckFormat($p_level=0)  {    $v_result = true;	// ----- Reset the file system cache    clearstatcache();    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the file exits    if (!is_file($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");      return(false);    }    // ----- Check that the file is readeable    if (!is_readable($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");      return(false);    }    // ----- Check the magic code    // TBC    // ----- Check the central header    // TBC    // ----- Check each file header    // TBC    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privParseOptions()  // Description :  //   This internal methods reads the variable list of arguments ($p_options_list,  //   $p_size) and generate an array with the options and values ($v_result_list).  //   $v_requested_options contains the options that can be present and those that  //   must be present.  //   $v_requested_options is an array, with the option value as key, and 'optional',  //   or 'mandatory' as value.  // Parameters :  //   See above.  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)  {    $v_result=1;    // ----- Read the options    $i=0;    while ($i<$p_size) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$p_options_list[$i]])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for next option      switch ($p_options_list[$i]) {        // ----- Look for options that request a path value        case PCLZIP_OPT_PATH :        case PCLZIP_OPT_REMOVE_PATH :        case PCLZIP_OPT_ADD_PATH :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_THRESHOLD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          // ----- Check the value          $v_value = $p_options_list[$i+1];          if ((!is_integer($v_value)) || ($v_value<0)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Get the value (and convert it in bytes)          $v_result_list[$p_options_list[$i]] = $v_value*1048576;          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_ON :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_TEMP_FILE_OFF :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (   is_string($p_options_list[$i+1])              && ($p_options_list[$i+1] != '')) {            $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);            $i++;          }          else {          }        break;        // ----- Look for options that request an array of string for value        case PCLZIP_OPT_BY_NAME :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an EREG or PREG expression        case PCLZIP_OPT_BY_EREG :          // ereg() is deprecated starting with PHP 5.3. Move PCLZIP_OPT_BY_EREG          // to PCLZIP_OPT_BY_PREG          $p_options_list[$i] = PCLZIP_OPT_BY_PREG;        case PCLZIP_OPT_BY_PREG :        //case PCLZIP_OPT_CRYPT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that takes a string        case PCLZIP_OPT_COMMENT :        case PCLZIP_OPT_ADD_COMMENT :        case PCLZIP_OPT_PREPEND_COMMENT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,			                     "Missing parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,			                     "Wrong parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an array of index        case PCLZIP_OPT_BY_INDEX :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_work_list = array();          if (is_string($p_options_list[$i+1])) {              // ----- Remove spaces              $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');              // ----- Parse items              $v_work_list = explode(",", $p_options_list[$i+1]);          }          else if (is_integer($p_options_list[$i+1])) {              $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_work_list = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Reduce the index list          // each index item in the list must be a couple with a start and          // an end value : [0,3], [5-5], [8-10], ...          // ----- Check the format of each item          $v_sort_flag=false;          $v_sort_value=0;          for ($j=0; $j<sizeof($v_work_list); $j++) {              // ----- Explode the item              $v_item_list = explode("-", $v_work_list[$j]);              $v_size_item_list = sizeof($v_item_list);              // ----- TBC : Here we might check that each item is a              // real integer ...              // ----- Look for single value              if ($v_size_item_list == 1) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];              }              elseif ($v_size_item_list == 2) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];              }              else {                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              // ----- Look for list sort              if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {                  $v_sort_flag=true;                  // ----- TBC : An automatic sort should be writen ...                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];          }          // ----- Sort the items          if ($v_sort_flag) {              // TBC : To Be Completed          }          // ----- Next option          $i++;        break;        // ----- Look for options that request no value        case PCLZIP_OPT_REMOVE_ALL_PATH :        case PCLZIP_OPT_EXTRACT_AS_STRING :        case PCLZIP_OPT_NO_COMPRESSION :        case PCLZIP_OPT_EXTRACT_IN_OUTPUT :        case PCLZIP_OPT_REPLACE_NEWER :        case PCLZIP_OPT_STOP_ON_ERROR :          $v_result_list[$p_options_list[$i]] = true;        break;        // ----- Look for options that request an octal value        case PCLZIP_OPT_SET_CHMOD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          $i++;        break;        // ----- Look for options that request a call-back        case PCLZIP_CB_PRE_EXTRACT :        case PCLZIP_CB_POST_EXTRACT :        case PCLZIP_CB_PRE_ADD :        case PCLZIP_CB_POST_ADD :        /* for futur use        case PCLZIP_CB_PRE_DELETE :        case PCLZIP_CB_POST_DELETE :        case PCLZIP_CB_PRE_LIST :        case PCLZIP_CB_POST_LIST :        */          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_function_name = $p_options_list[$i+1];          // ----- Check that the value is a valid existing function          if (!function_exists($v_function_name)) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Set the attribute          $v_result_list[$p_options_list[$i]] = $v_function_name;          $i++;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Unknown parameter '"							   .$p_options_list[$i]."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Next options      $i++;    }    // ----- Look for mandatory options    if ($v_requested_options !== false) {      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {        // ----- Look for mandatory option        if ($v_requested_options[$key] == 'mandatory') {          // ----- Look if present          if (!isset($v_result_list[$key])) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");            // ----- Return            return PclZip::errorCode();          }        }      }    }    // ----- Look for default values    if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOptionDefaultThreshold()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privOptionDefaultThreshold(&$p_options)  {    $v_result=1;    if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])        || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {      return $v_result;    }    // ----- Get 'memory_limit' configuration value    $v_memory_limit = ini_get('memory_limit');    $v_memory_limit = trim($v_memory_limit);    $last = strtolower(substr($v_memory_limit, -1));    if($last == 'g')        //$v_memory_limit = $v_memory_limit*1024*1024*1024;        $v_memory_limit = $v_memory_limit*1073741824;    if($last == 'm')        //$v_memory_limit = $v_memory_limit*1024*1024;        $v_memory_limit = $v_memory_limit*1048576;    if($last == 'k')        $v_memory_limit = $v_memory_limit*1024;    $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);    // ----- Sanity check : No threshold if value lower than 1M    if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {      unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrParseAtt()  // Description :  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)  {    $v_result=1;    // ----- For each file in the list check the attributes    foreach ($p_file_list as $v_key => $v_value) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$v_key])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for attribute      switch ($v_key) {        case PCLZIP_ATT_FILE_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['filename'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_SHORT_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_short_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_FULL_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_full_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        // ----- Look for options that takes a string        case PCLZIP_ATT_FILE_COMMENT :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['comment'] = $v_value;        break;        case PCLZIP_ATT_FILE_MTIME :          if (!is_integer($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['mtime'] = $v_value;        break;        case PCLZIP_ATT_FILE_CONTENT :          $p_filedescr['content'] = $v_value;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                           "Unknown parameter '".$v_key."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Look for mandatory options      if ($v_requested_options !== false) {        for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {          // ----- Look for mandatory option          if ($v_requested_options[$key] == 'mandatory') {            // ----- Look if present            if (!isset($p_file_list[$key])) {              PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");              return PclZip::errorCode();            }          }        }      }    // end foreach    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrExpand()  // Description :  //   This method look for each item of the list to see if its a file, a folder  //   or a string to be added as file. For any other type of files (link, other)  //   just ignore the item.  //   Then prepare the information that will be stored for that file.  //   When its a folder, expand the folder with all the files that are in that  //   folder (recursively).  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrExpand(&$p_filedescr_list, &$p_options)  {    $v_result=1;    // ----- Create a result list    $v_result_list = array();    // ----- Look each entry    for ($i=0; $i<sizeof($p_filedescr_list); $i++) {      // ----- Get filedescr      $v_descr = $p_filedescr_list[$i];      // ----- Reduce the filename      $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);      $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);      // ----- Look for real file or folder      if (file_exists($v_descr['filename'])) {        if (@is_file($v_descr['filename'])) {          $v_descr['type'] = 'file';        }        else if (@is_dir($v_descr['filename'])) {          $v_descr['type'] = 'folder';        }        else if (@is_link($v_descr['filename'])) {          // skip          continue;        }        else {          // skip          continue;        }      }      // ----- Look for string added as file      else if (isset($v_descr['content'])) {        $v_descr['type'] = 'virtual_file';      }      // ----- Missing file      else {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");        // ----- Return        return PclZip::errorCode();      }      // ----- Calculate the stored filename      $this->privCalculateStoredFilename($v_descr, $p_options);      // ----- Add the descriptor in result list      $v_result_list[sizeof($v_result_list)] = $v_descr;      // ----- Look for folder      if ($v_descr['type'] == 'folder') {        // ----- List of items in folder        $v_dirlist_descr = array();        $v_dirlist_nb = 0;        if ($v_folder_handler = @opendir($v_descr['filename'])) {          while (($v_item_handler = @readdir($v_folder_handler)) !== false) {            // ----- Skip '.' and '..'            if (($v_item_handler == '.') || ($v_item_handler == '..')) {                continue;            }            // ----- Compose the full filename            $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;            // ----- Look for different stored filename            // Because the name of the folder was changed, the name of the            // files/sub-folders also change            if (($v_descr['stored_filename'] != $v_descr['filename'])                 && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {              if ($v_descr['stored_filename'] != '') {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;              }              else {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;              }            }            $v_dirlist_nb++;          }          @closedir($v_folder_handler);        }        else {          // TBC : unable to open folder in read mode        }        // ----- Expand each element of the list        if ($v_dirlist_nb != 0) {          // ----- Expand          if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {            return $v_result;          }          // ----- Concat the resulting list          $v_result_list = array_merge($v_result_list, $v_dirlist_descr);        }        else {        }        // ----- Free local array        unset($v_dirlist_descr);      }    }    // ----- Get the result list    $p_filedescr_list = $v_result_list;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCreate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCreate($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the file in write mode    if (($v_result = $this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Add the list of files    $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);    // ----- Close    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAdd()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAdd($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Look if the archive exists or is empty    if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))    {      // ----- Do a create      $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);      // ----- Return      return $v_result;    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      fclose($v_zip_temp_fd);      $this->privCloseFd();      @unlink($v_zip_temp_name);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Create the Central Dir files header    for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          fclose($v_zip_temp_fd);          $this->privCloseFd();          @unlink($v_zip_temp_name);          $this->privSwapBackMagicQuotes();          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = $v_central_dir['comment'];    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {      $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOpenFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privOpenFd($p_mode)  {    $v_result=1;    // ----- Look if already open    if ($this->zip_fd != 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');      // ----- Return      return PclZip::errorCode();    }    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCloseFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privCloseFd()  {    $v_result=1;    if ($this->zip_fd != 0)      @fclose($this->zip_fd);    $this->zip_fd = 0;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddList()  // Description :  //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is  //   different from the real path of the file. This is usefull if you want to have PclTar  //   running in any directory, and memorize relative path from an other directory.  // Parameters :  //   $p_list : An array containing the file or directory names to add in the tar  //   $p_result_list : list of added files with their properties (specially the status field)  //   $p_add_dir : Path to add in the filename path archived  //   $p_remove_dir : Path to remove in the filename path archived  // Return Values :  // --------------------------------------------------------------------------------//  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)  function privAddList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Create the Central Dir files header    for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = '';    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileList()  // Description :  // Parameters :  //   $p_filedescr_list : An array containing the file description  //                      or directory names to add in the zip  //   $p_result_list : list of added files with their properties (specially the status field)  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_header = array();    // ----- Recuperate the current number of elt in list    $v_nb = sizeof($p_result_list);    // ----- Loop on the files    for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {      // ----- Format the filename      $p_filedescr_list[$j]['filename']      = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);      // ----- Skip empty file names      // TBC : Can this be possible ? not checked in DescrParseAtt ?      if ($p_filedescr_list[$j]['filename'] == "") {        continue;      }      // ----- Check the filename      if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')          && (!file_exists($p_filedescr_list[$j]['filename']))) {        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");        return PclZip::errorCode();      }      // ----- Look if it is a file or a dir with no all path remove option      // or a dir with all its path removed//      if (   (is_file($p_filedescr_list[$j]['filename']))//          || (   is_dir($p_filedescr_list[$j]['filename'])      if (   ($p_filedescr_list[$j]['type'] == 'file')          || ($p_filedescr_list[$j]['type'] == 'virtual_file')          || (   ($p_filedescr_list[$j]['type'] == 'folder')              && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])                  || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))          ) {        // ----- Add the file        $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,                                       $p_options);        if ($v_result != 1) {          return $v_result;        }        // ----- Store the file infos        $p_result_list[$v_nb++] = $v_header;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=1;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // TBC : Already done in the fileAtt check ... ?    if ($p_filename == "") {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");      // ----- Return      return PclZip::errorCode();    }    // ----- Look for a stored different filename    /* TBC : Removed    if (isset($p_filedescr['stored_filename'])) {      $v_stored_filename = $p_filedescr['stored_filename'];    }    else {      $v_stored_filename = $p_filedescr['stored_filename'];    }    */    // ----- Set the file properties    clearstatcache();    $p_header['version'] = 20;    $p_header['version_extracted'] = 10;    $p_header['flag'] = 0;    $p_header['compression'] = 0;    $p_header['crc'] = 0;    $p_header['compressed_size'] = 0;    $p_header['filename_len'] = strlen($p_filename);    $p_header['extra_len'] = 0;    $p_header['disk'] = 0;    $p_header['internal'] = 0;    $p_header['offset'] = 0;    $p_header['filename'] = $p_filename;// TBC : Removed    $p_header['stored_filename'] = $v_stored_filename;    $p_header['stored_filename'] = $p_filedescr['stored_filename'];    $p_header['extra'] = '';    $p_header['status'] = 'ok';    $p_header['index'] = -1;    // ----- Look for regular file    if ($p_filedescr['type']=='file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = filesize($p_filename);    }    // ----- Look for regular folder    else if ($p_filedescr['type']=='folder') {      $p_header['external'] = 0x00000010;      $p_header['mtime'] = filemtime($p_filename);      $p_header['size'] = filesize($p_filename);    }    // ----- Look for virtual file    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = strlen($p_filedescr['content']);    }    // ----- Look for filetime    if (isset($p_filedescr['mtime'])) {      $p_header['mtime'] = $p_filedescr['mtime'];    }    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['mtime'] = time();    }    else {      $p_header['mtime'] = filemtime($p_filename);    }    // ------ Look for file comment    if (isset($p_filedescr['comment'])) {      $p_header['comment_len'] = strlen($p_filedescr['comment']);      $p_header['comment'] = $p_filedescr['comment'];    }    else {      $p_header['comment_len'] = 0;      $p_header['comment'] = '';    }    // ----- Look for pre-add callback    if (isset($p_options[PCLZIP_CB_PRE_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_header['status'] = "skipped";        $v_result = 1;      }      // ----- Update the informations      // Only some fields can be modified      if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {        $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);      }    }    // ----- Look for empty stored filename    if ($p_header['stored_filename'] == "") {      $p_header['status'] = "filtered";    }    // ----- Check the path length    if (strlen($p_header['stored_filename']) > 0xFF) {      $p_header['status'] = 'filename_too_long';    }    // ----- Look if no error, or file not skipped    if ($p_header['status'] == 'ok') {      // ----- Look for a file      if ($p_filedescr['type'] == 'file') {        // ----- Look for using temporary file to zip        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {          $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);          if ($v_result < PCLZIP_ERR_NO_ERROR) {            return $v_result;          }        }        // ----- Use "in memory" zip algo        else {        // ----- Open the source file        if (($v_file = @fopen($p_filename, "rb")) == 0) {          PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");          return PclZip::errorCode();        }        // ----- Read the file content        $v_content = @fread($v_file, $p_header['size']);        // ----- Close the file        @fclose($v_file);        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);        }      }      // ----- Look for a virtual file (a file from string)      else if ($p_filedescr['type'] == 'virtual_file') {        $v_content = $p_filedescr['content'];        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);      }      // ----- Look for a directory      else if ($p_filedescr['type'] == 'folder') {        // ----- Look for directory last '/'        if (@substr($p_header['stored_filename'], -1) != '/') {          $p_header['stored_filename'] .= '/';        }        // ----- Set the file properties        $p_header['size'] = 0;        //$p_header['external'] = 0x41FF0010;   // Value for a folder : to be checked        $p_header['external'] = 0x00000010;   // Value for a folder : to be checked        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1)        {          return $v_result;        }      }    }    // ----- Look for post-add callback    if (isset($p_options[PCLZIP_CB_POST_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Ignored        $v_result = 1;      }      // ----- Update the informations      // Nothing can be modified    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=PCLZIP_ERR_NO_ERROR;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // ----- Open the source file    if (($v_file = @fopen($p_filename, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");      return PclZip::errorCode();    }    // ----- Creates a compressed temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = filesize($p_filename);    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @gzputs($v_file_compressed, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file);    @gzclose($v_file_compressed);    // ----- Check the minimum file size    if (filesize($v_gzip_temp_name) < 18) {      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');      return PclZip::errorCode();    }    // ----- Extract the compressed attributes    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the gzip file header    $v_binary_data = @fread($v_file_compressed, 10);    $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);    // ----- Check some parameters    $v_data_header['os'] = bin2hex($v_data_header['os']);    // ----- Read the gzip file footer    @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);    $v_binary_data = @fread($v_file_compressed, 8);    $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);    // ----- Set the attributes    $p_header['compression'] = ord($v_data_header['cm']);    //$p_header['mtime'] = $v_data_header['mtime'];    $p_header['crc'] = $v_data_footer['crc'];    $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;    // ----- Close the file    @fclose($v_file_compressed);    // ----- Call the header generation    if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {      return $v_result;    }    // ----- Add the compressed data    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)    {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    fseek($v_file_compressed, 10);    $v_size = $p_header['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file_compressed, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file_compressed);    // ----- Unlink the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCalculateStoredFilename()  // Description :  //   Based on file descriptor properties and global options, this method  //   calculate the filename that will be stored in the archive.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCalculateStoredFilename(&$p_filedescr, &$p_options)  {    $v_result=1;    // ----- Working variables    $p_filename = $p_filedescr['filename'];    if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {      $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];    }    else {      $p_add_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {      $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];    }    else {      $p_remove_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {      $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];    }    else {      $p_remove_all_dir = 0;    }    // ----- Look for full name change    if (isset($p_filedescr['new_full_name'])) {      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);    }    // ----- Look for path and/or short name change    else {      // ----- Look for short name change      // Its when we cahnge just the filename but not the path      if (isset($p_filedescr['new_short_name'])) {        $v_path_info = pathinfo($p_filename);        $v_dir = '';        if ($v_path_info['dirname'] != '') {          $v_dir = $v_path_info['dirname'].'/';        }        $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];      }      else {        // ----- Calculate the stored filename        $v_stored_filename = $p_filename;      }      // ----- Look for all path to remove      if ($p_remove_all_dir) {        $v_stored_filename = basename($p_filename);      }      // ----- Look for partial path remove      else if ($p_remove_dir != "") {        if (substr($p_remove_dir, -1) != '/')          $p_remove_dir .= "/";        if (   (substr($p_filename, 0, 2) == "./")            || (substr($p_remove_dir, 0, 2) == "./")) {          if (   (substr($p_filename, 0, 2) == "./")              && (substr($p_remove_dir, 0, 2) != "./")) {            $p_remove_dir = "./".$p_remove_dir;          }          if (   (substr($p_filename, 0, 2) != "./")              && (substr($p_remove_dir, 0, 2) == "./")) {            $p_remove_dir = substr($p_remove_dir, 2);          }        }        $v_compare = PclZipUtilPathInclusion($p_remove_dir,                                             $v_stored_filename);        if ($v_compare > 0) {          if ($v_compare == 2) {            $v_stored_filename = "";          }          else {            $v_stored_filename = substr($v_stored_filename,                                        strlen($p_remove_dir));          }        }      }      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);      // ----- Look for path to add      if ($p_add_dir != "") {        if (substr($p_add_dir, -1) == "/")          $v_stored_filename = $p_add_dir.$v_stored_filename;        else          $v_stored_filename = $p_add_dir."/".$v_stored_filename;      }    }    // ----- Filename (reduce the path of stored name)    $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);    $p_filedescr['stored_filename'] = $v_stored_filename;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteFileHeader(&$p_header)  {    $v_result=1;    // ----- Store the offset position of the file    $p_header['offset'] = ftell($this->zip_fd);    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,	                      $p_header['version_extracted'], $p_header['flag'],                          $p_header['compression'], $v_mtime, $v_mdate,                          $p_header['crc'], $p_header['compressed_size'],						  $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len']);    // ----- Write the first 148 bytes of the header in the archive    fputs($this->zip_fd, $v_binary_data, 30);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralFileHeader(&$p_header)  {    $v_result=1;    // TBC    //for(reset($p_header); $key = key($p_header); next($p_header)) {    //}    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,	                      $p_header['version'], $p_header['version_extracted'],                          $p_header['flag'], $p_header['compression'],						  $v_mtime, $v_mdate, $p_header['crc'],                          $p_header['compressed_size'], $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len'], $p_header['comment_len'],                          $p_header['disk'], $p_header['internal'],						  $p_header['external'], $p_header['offset']);    // ----- Write the 42 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 46);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    if ($p_header['comment_len'] != 0)    {      fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)  {    $v_result=1;    // ----- Packed data    $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,	                      $p_nb_entries, $p_size,						  $p_offset, strlen($p_comment));    // ----- Write the 22 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 22);    // ----- Write the variable fields    if (strlen($p_comment) != 0)    {      fputs($this->zip_fd, $p_comment, strlen($p_comment));    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privList()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privList(&$p_list)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of Central Dir    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_central_dir['offset']))    {      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    for ($i=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        $this->privSwapBackMagicQuotes();        return $v_result;      }      $v_header['index'] = $i;      // ----- Get the only interesting attributes      $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);      unset($v_header);    }    // ----- Close the zip file    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privConvertHeader2FileInfo()  // Description :  //   This function takes the file informations from the central directory  //   entries and extract the interesting parameters that will be given back.  //   The resulting file infos are set in the array $p_info  //     $p_info['filename'] : Filename with full path. Given by user (add),  //                           extracted in the filesystem (extract).  //     $p_info['stored_filename'] : Stored filename in the archive.  //     $p_info['size'] = Size of the file.  //     $p_info['compressed_size'] = Compressed size of the file.  //     $p_info['mtime'] = Last modification date of the file.  //     $p_info['comment'] = Comment associated with the file.  //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.  //     $p_info['status'] = status of the action on the file.  //     $p_info['crc'] = CRC of the file content.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privConvertHeader2FileInfo($p_header, &$p_info)  {    $v_result=1;    // ----- Get the interesting attributes    $v_temp_path = PclZipUtilPathReduction($p_header['filename']);    $p_info['filename'] = $v_temp_path;    $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);    $p_info['stored_filename'] = $v_temp_path;    $p_info['size'] = $p_header['size'];    $p_info['compressed_size'] = $p_header['compressed_size'];    $p_info['mtime'] = $p_header['mtime'];    $p_info['comment'] = $p_header['comment'];    $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);    $p_info['index'] = $p_header['index'];    $p_info['status'] = $p_header['status'];    $p_info['crc'] = $p_header['crc'];    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractByRule()  // Description :  //   Extract a file or directory depending of rules (by index, by name, ...)  // Parameters :  //   $p_file_list : An array where will be placed the properties of each  //                  extracted file  //   $p_path : Path to add while writing the extracted files  //   $p_remove_path : Path to remove (from the file memorized path) while writing the  //                    extracted files. If the path does not match the file path,  //                    the file is extracted with its memorized path.  //                    $p_remove_path does not apply to 'list' mode.  //                    $p_path and $p_remove_path are commulative.  // Return Values :  //   1 on success,0 or less on error (see error code list)  // --------------------------------------------------------------------------------  function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check the path    if (   ($p_path == "")	    || (   (substr($p_path, 0, 1) != "/")		    && (substr($p_path, 0, 3) != "../")			&& (substr($p_path,1,2)!=":/")))      $p_path = "./".$p_path;    // ----- Reduce the path last (and duplicated) '/'    if (($p_path != "./") && ($p_path != "/"))    {      // ----- Look for the path end '/'      while (substr($p_path, -1) == "/")      {        $p_path = substr($p_path, 0, strlen($p_path)-1);      }    }    // ----- Look for path to remove format (should end by /)    if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))    {      $p_remove_path .= '/';    }    $p_remove_path_size = strlen($p_remove_path);    // ----- Open the zip file    if (($v_result = $this->privOpenFd('rb')) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      // ----- Close the zip file      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    // ----- Read each entry    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read next Central dir entry      @rewind($this->zip_fd);      if (@fseek($this->zip_fd, $v_pos_entry))      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');        // ----- Return        return PclZip::errorCode();      }      // ----- Read the file header      $v_header = array();      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        return $v_result;      }      // ----- Store the index      $v_header['index'] = $i;      // ----- Store the file position      $v_pos_entry = ftell($this->zip_fd);      // ----- Look for the specific extract rules      $v_extract = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_extract = true;                  }              }              // ----- Look for a filename              elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_extract = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_extract = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      // ----- Look for no rule, which means extract all the archive      else {          $v_extract = true;      }	  // ----- Check compression method	  if (   ($v_extract)	      && (   ($v_header['compression'] != 8)		      && ($v_header['compression'] != 0))) {          $v_header['status'] = 'unsupported_compression';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,			                       "Filename '".$v_header['stored_filename']."' is "				  	    	  	   ."compressed by an unsupported compression "				  	    	  	   ."method (".$v_header['compression'].") ");              return PclZip::errorCode();		  }	  }	  // ----- Check encrypted files	  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {          $v_header['status'] = 'unsupported_encryption';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,			                       "Unsupported encryption for "				  	    	  	   ." filename '".$v_header['stored_filename']								   ."'");              return PclZip::errorCode();		  }    }      // ----- Look for real extraction      if (($v_extract) && ($v_header['status'] != 'ok')) {          $v_result = $this->privConvertHeader2FileInfo($v_header,		                                        $p_file_list[$v_nb_extracted++]);          if ($v_result != 1) {              $this->privCloseFd();              $this->privSwapBackMagicQuotes();              return $v_result;          }          $v_extract = false;      }      // ----- Look for real extraction      if ($v_extract)      {        // ----- Go to the file position        @rewind($this->zip_fd);        if (@fseek($this->zip_fd, $v_header['offset']))        {          // ----- Close the zip file          $this->privCloseFd();          $this->privSwapBackMagicQuotes();          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');          // ----- Return          return PclZip::errorCode();        }        // ----- Look for extraction as string        if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {          $v_string = '';          // ----- Extracting the file          $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Set the file content          $p_file_list[$v_nb_extracted]['content'] = $v_string;          // ----- Next extracted file          $v_nb_extracted++;          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for extraction in standard output        elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))		        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {          // ----- Extracting the file in standard output          $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for normal extraction        else {          // ----- Extracting the file          $v_result1 = $this->privExtractFile($v_header,		                                      $p_path, $p_remove_path,											  $p_remove_all_path,											  $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }      }    }    // ----- Close the zip file    $this->privCloseFd();    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFile()  // Description :  // Parameters :  // Return Values :  //  // 1 : ... ?  // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback  // --------------------------------------------------------------------------------  function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for all path to remove    if ($p_remove_all_path == true) {        // ----- Look for folder entry that not need to be extracted        if (($p_entry['external']&0x00000010)==0x00000010) {            $p_entry['status'] = "filtered";            return $v_result;        }        // ----- Get the basename of the path        $p_entry['filename'] = basename($p_entry['filename']);    }    // ----- Look for path to remove    else if ($p_remove_path != "")    {      if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)      {        // ----- Change the file status        $p_entry['status'] = "filtered";        // ----- Return        return $v_result;      }      $p_remove_path_size = strlen($p_remove_path);      if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)      {        // ----- Remove the path        $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);      }    }    // ----- Add the path    if ($p_path != '') {      $p_entry['filename'] = $p_path."/".$p_entry['filename'];    }    // ----- Check a base_dir_restriction    if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {      $v_inclusion      = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],                                $p_entry['filename']);      if ($v_inclusion == 0) {        PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,			                     "Filename '".$p_entry['filename']."' is "								 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");        return PclZip::errorCode();      }    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {    // ----- Look for specific actions while the file exist    if (file_exists($p_entry['filename']))    {      // ----- Look if file is a directory      if (is_dir($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "already_a_directory";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,			                     "Filename '".$p_entry['filename']."' is "								 ."already used by an existing directory");            return PclZip::errorCode();		    }      }      // ----- Look if file is write protected      else if (!is_writeable($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "write_protected";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			                     "Filename '".$p_entry['filename']."' exists "								 ."and is write protected");            return PclZip::errorCode();		    }      }      // ----- Look if the extracted file is older      else if (filemtime($p_entry['filename']) > $p_entry['mtime'])      {        // ----- Change the file status        if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))		    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {	  	  }		    else {            $p_entry['status'] = "newer_exist";            // ----- Look for PCLZIP_OPT_STOP_ON_ERROR            // For historical reason first PclZip implementation does not stop            // when this kind of error occurs.            if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {                PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			             "Newer version of '".$p_entry['filename']."' exists "					    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");                return PclZip::errorCode();		      }		    }      }      else {      }    }    // ----- Check the directory availability and create it if necessary    else {      if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))        $v_dir_to_check = $p_entry['filename'];      else if (!strstr($p_entry['filename'], "/"))        $v_dir_to_check = "";      else        $v_dir_to_check = dirname($p_entry['filename']);        if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {          // ----- Change the file status          $p_entry['status'] = "path_creation_fail";          // ----- Return          //return $v_result;          $v_result = 1;        }      }    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010))      {        // ----- Look for not compressed file        if ($p_entry['compression'] == 0) {    		  // ----- Opening destination file          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)          {            // ----- Change the file status            $p_entry['status'] = "write_error";            // ----- Return            return $v_result;          }          // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks          $v_size = $p_entry['compressed_size'];          while ($v_size != 0)          {            $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);            $v_buffer = @fread($this->zip_fd, $v_read_size);            /* Try to speed up the code            $v_binary_data = pack('a'.$v_read_size, $v_buffer);            @fwrite($v_dest_file, $v_binary_data, $v_read_size);            */            @fwrite($v_dest_file, $v_buffer, $v_read_size);            $v_size -= $v_read_size;          }          // ----- Closing the destination file          fclose($v_dest_file);          // ----- Change the file mtime          touch($p_entry['filename'], $p_entry['mtime']);        }        else {          // ----- TBC          // Need to be finished          if (($p_entry['flag'] & 1) == 1) {            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');            return PclZip::errorCode();          }          // ----- Look for using temporary file to unzip          if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))              && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                  || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                      && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {            $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);            if ($v_result < PCLZIP_ERR_NO_ERROR) {              return $v_result;            }          }          // ----- Look for extract in memory          else {            // ----- Read the compressed file in a buffer (one shot)            $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);            // ----- Decompress the file            $v_file_content = @gzinflate($v_buffer);            unset($v_buffer);            if ($v_file_content === FALSE) {              // ----- Change the file status              // TBC              $p_entry['status'] = "error";              return $v_result;            }            // ----- Opening destination file            if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {              // ----- Change the file status              $p_entry['status'] = "write_error";              return $v_result;            }            // ----- Write the uncompressed data            @fwrite($v_dest_file, $v_file_content, $p_entry['size']);            unset($v_file_content);            // ----- Closing the destination file            @fclose($v_dest_file);          }          // ----- Change the file mtime          @touch($p_entry['filename'], $p_entry['mtime']);        }        // ----- Look for chmod option        if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {          // ----- Change the mode of the file          @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);        }      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileUsingTempFile(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Creates a temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Write gz file format header    $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));    @fwrite($v_dest_file, $v_binary_data, 10);    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Write gz file format footer    $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);    @fwrite($v_dest_file, $v_binary_data, 8);    // ----- Close the temporary file    @fclose($v_dest_file);    // ----- Opening destination file    if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {      $p_entry['status'] = "write_error";      return $v_result;    }    // ----- Open the temporary gz file    if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {      @fclose($v_dest_file);      $p_entry['status'] = "read_error";      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['size'];    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @gzread($v_src_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    @fclose($v_dest_file);    @gzclose($v_src_file);    // ----- Delete the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileInOutput()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileInOutput(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1) {      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.//      eval('$v_result = '.$p_options[PCLZIP_CB_PRE_EXTRACT].'(PCLZIP_CB_PRE_EXTRACT, $v_local_header);');      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Trace    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file        if ($p_entry['compressed_size'] == $p_entry['size']) {          // ----- Read the file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Send the file to the output          echo $v_buffer;          unset($v_buffer);        }        else {          // ----- Read the compressed file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          $v_file_content = gzinflate($v_buffer);          unset($v_buffer);          // ----- Send the file to the output          echo $v_file_content;          unset($v_file_content);        }      }    }	// ----- Change abort status	if ($p_entry['status'] == "aborted") {      $p_entry['status'] = "skipped";	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileAsString()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)  {    $v_result=1;    // ----- Read the file header    $v_header = array();    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file  //      if ($p_entry['compressed_size'] == $p_entry['size'])        if ($p_entry['compression'] == 0) {          // ----- Reading the file          $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);        }        else {          // ----- Reading the file          $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          if (($p_string = @gzinflate($v_data)) === FALSE) {              // TBC          }        }        // ----- Trace      }      else {          // TBC : error : can not extract a folder in a string      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Swap the content to header      $v_local_header['content'] = $p_string;      $p_string = '';      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Swap back the content to header      $p_string = $v_local_header['content'];      unset($v_local_header['content']);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x04034b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 26);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 26)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);    // ----- Get filename    $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);    // ----- Get extra_fields    if ($v_data['extra_len'] != 0) {      $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);    }    else {      $p_header['extra'] = '';    }    // ----- Extract properties    $p_header['version_extracted'] = $v_data['version'];    $p_header['compression'] = $v_data['compression'];    $p_header['size'] = $v_data['size'];    $p_header['compressed_size'] = $v_data['compressed_size'];    $p_header['crc'] = $v_data['crc'];    $p_header['flag'] = $v_data['flag'];    $p_header['filename_len'] = $v_data['filename_len'];    // ----- Recuperate date in UNIX format    $p_header['mdate'] = $v_data['mdate'];    $p_header['mtime'] = $v_data['mtime'];    if ($p_header['mdate'] && $p_header['mtime'])    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // TBC    //for(reset($v_data); $key = key($v_data); next($v_data)) {    //}    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set the status field    $p_header['status'] = "ok";    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadCentralFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x02014b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 42);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 42)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);    // ----- Get filename    if ($p_header['filename_len'] != 0)      $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);    else      $p_header['filename'] = '';    // ----- Get extra    if ($p_header['extra_len'] != 0)      $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);    else      $p_header['extra'] = '';    // ----- Get comment    if ($p_header['comment_len'] != 0)      $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);    else      $p_header['comment'] = '';    // ----- Extract properties    // ----- Recuperate date in UNIX format    //if ($p_header['mdate'] && $p_header['mtime'])    // TBC : bug : this was ignoring time with 0/0/0    if (1)    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set default status to ok    $p_header['status'] = 'ok';    // ----- Look if it is a directory    if (substr($p_header['filename'], -1) == '/') {      //$p_header['external'] = 0x41FF0010;      $p_header['external'] = 0x00000010;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCheckFileHeaders()  // Description :  // Parameters :  // Return Values :  //   1 on success,  //   0 on error;  // --------------------------------------------------------------------------------  function privCheckFileHeaders(&$p_local_header, &$p_central_header)  {    $v_result=1;  	// ----- Check the static values  	// TBC  	if ($p_local_header['filename'] != $p_central_header['filename']) {  	}  	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {  	}  	if ($p_local_header['flag'] != $p_central_header['flag']) {  	}  	if ($p_local_header['compression'] != $p_central_header['compression']) {  	}  	if ($p_local_header['mtime'] != $p_central_header['mtime']) {  	}  	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {  	}  	// ----- Look for flag bit 3  	if (($p_local_header['flag'] & 8) == 8) {          $p_local_header['size'] = $p_central_header['size'];          $p_local_header['compressed_size'] = $p_central_header['compressed_size'];          $p_local_header['crc'] = $p_central_header['crc'];  	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadEndCentralDir()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadEndCentralDir(&$p_central_dir)  {    $v_result=1;    // ----- Go to the end of the zip file    $v_size = filesize($this->zipname);    @fseek($this->zip_fd, $v_size);    if (@ftell($this->zip_fd) != $v_size)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');      // ----- Return      return PclZip::errorCode();    }    // ----- First try : look if this is an archive with no commentaries (most of the time)    // in this case the end of central dir is at 22 bytes of the file end    $v_found = 0;    if ($v_size > 26) {      @fseek($this->zip_fd, $v_size-22);      if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read for bytes      $v_binary_data = @fread($this->zip_fd, 4);      $v_data = @unpack('Vid', $v_binary_data);      // ----- Check signature      if ($v_data['id'] == 0x06054b50) {        $v_found = 1;      }      $v_pos = ftell($this->zip_fd);    }    // ----- Go back to the maximum possible size of the Central Dir End Record    if (!$v_found) {      $v_maximum_size = 65557; // 0xFFFF + 22;      if ($v_maximum_size > $v_size)        $v_maximum_size = $v_size;      @fseek($this->zip_fd, $v_size-$v_maximum_size);      if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read byte per byte in order to find the signature      $v_pos = ftell($this->zip_fd);      $v_bytes = 0x00000000;      while ($v_pos < $v_size)      {        // ----- Read a byte        $v_byte = @fread($this->zip_fd, 1);        // -----  Add the byte        //$v_bytes = ($v_bytes << 8) | Ord($v_byte);        // Note we mask the old value down such that once shifted we can never end up with more than a 32bit number        // Otherwise on systems where we have 64bit integers the check below for the magic number will fail.        $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte);        // ----- Compare the bytes        if ($v_bytes == 0x504b0506)        {          $v_pos++;          break;        }        $v_pos++;      }      // ----- Look if not found end of central dir      if ($v_pos == $v_size)      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");        // ----- Return        return PclZip::errorCode();      }    }    // ----- Read the first 18 bytes of the header    $v_binary_data = fread($this->zip_fd, 18);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 18)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);    // ----- Check the global size    if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {	  // ----- Removed in release 2.2 see readme file	  // The check of the file size is a little too strict.	  // Some bugs where found when a zip is encrypted/decrypted with 'crypt'.	  // While decrypted, zip has training 0 bytes	  if (0) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,	                       'The central dir is not at the end of the archive.'						   .' Some trailing bytes exists after the archive.');      // ----- Return      return PclZip::errorCode();	  }    }    // ----- Get comment    if ($v_data['comment_size'] != 0) {      $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);    }    else      $p_central_dir['comment'] = '';    $p_central_dir['entries'] = $v_data['entries'];    $p_central_dir['disk_entries'] = $v_data['disk_entries'];    $p_central_dir['offset'] = $v_data['offset'];    $p_central_dir['size'] = $v_data['size'];    $p_central_dir['disk'] = $v_data['disk'];    $p_central_dir['disk_start'] = $v_data['disk_start'];    // TBC    //for(reset($p_central_dir); $key = key($p_central_dir); next($p_central_dir)) {    //}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDeleteByRule()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDeleteByRule(&$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Scan all the files    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_pos_entry))    {      // ----- Close the zip file      $this->privCloseFd();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    $v_header_list = array();    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      $v_header_list[$v_nb_extracted] = array();      if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        return $v_result;      }      // ----- Store the index      $v_header_list[$v_nb_extracted]['index'] = $i;      // ----- Look for the specific extract rules      $v_found = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }                  elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) /* Indicates a folder */                          && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }              }              // ----- Look for a filename              elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_found = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_found = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      else {      	$v_found = true;      }      // ----- Look for deletion      if ($v_found)      {        unset($v_header_list[$v_nb_extracted]);      }      else      {        $v_nb_extracted++;      }    }    // ----- Look if something need to be deleted    if ($v_nb_extracted > 0) {        // ----- Creates a temporay file        $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';        // ----- Creates a temporary zip archive        $v_temp_zip = new PclZip($v_zip_temp_name);        // ----- Open the temporary zip file in write mode        if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {            $this->privCloseFd();            // ----- Return            return $v_result;        }        // ----- Look which file need to be kept        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Calculate the position of the header            @rewind($this->zip_fd);            if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Error log                PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');                // ----- Return                return PclZip::errorCode();            }            // ----- Read the file header            $v_local_header = array();            if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Check that local file header is same as central file header            if ($this->privCheckFileHeaders($v_local_header,			                                $v_header_list[$i]) != 1) {                // TBC            }            unset($v_local_header);            // ----- Write the file header            if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Read/write the data block            if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }        }        // ----- Store the offset of the central dir        $v_offset = @ftell($v_temp_zip->zip_fd);        // ----- Re-Create the Central Dir files header        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Create the file header            if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {                $v_temp_zip->privCloseFd();                $this->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Transform the header to a 'usable' info            $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);        }        // ----- Zip file comment        $v_comment = '';        if (isset($p_options[PCLZIP_OPT_COMMENT])) {          $v_comment = $p_options[PCLZIP_OPT_COMMENT];        }        // ----- Calculate the size of the central header        $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;        // ----- Create the central dir footer        if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {            // ----- Reset the file list            unset($v_header_list);            $v_temp_zip->privCloseFd();            $this->privCloseFd();            @unlink($v_zip_temp_name);            // ----- Return            return $v_result;        }        // ----- Close        $v_temp_zip->privCloseFd();        $this->privCloseFd();        // ----- Delete the zip file        // TBC : I should test the result ...        @unlink($this->zipname);        // ----- Rename the temporary file        // TBC : I should test the result ...        //@rename($v_zip_temp_name, $this->zipname);        PclZipUtilRename($v_zip_temp_name, $this->zipname);        // ----- Destroy the temporary archive        unset($v_temp_zip);    }    // ----- Remove every files : reset the file    else if ($v_central_dir['entries'] != 0) {        $this->privCloseFd();        if (($v_result = $this->privOpenFd('wb')) != 1) {          return $v_result;        }        if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {          return $v_result;        }        $this->privCloseFd();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDirCheck()  // Description :  //   Check if a directory exists, if not it creates it and all the parents directory  //   which may be useful.  // Parameters :  //   $p_dir : Directory path to check.  // Return Values :  //    1 : OK  //   -1 : Unable to create directory  // --------------------------------------------------------------------------------  function privDirCheck($p_dir, $p_is_dir=false)  {    $v_result = 1;    // ----- Remove the final '/'    if (($p_is_dir) && (substr($p_dir, -1)=='/'))    {      $p_dir = substr($p_dir, 0, strlen($p_dir)-1);    }    // ----- Check the directory availability    if ((is_dir($p_dir)) || ($p_dir == ""))    {      return 1;    }    // ----- Extract parent directory    $p_parent_dir = dirname($p_dir);    // ----- Just a check    if ($p_parent_dir != $p_dir)    {      // ----- Look for parent directory      if ($p_parent_dir != "")      {        if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)        {          return $v_result;        }      }    }    // ----- Create the directory    if (!@mkdir($p_dir, 0777))    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privMerge()  // Description :  //   If $p_archive_to_add does not exist, the function exit with a success result.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privMerge(&$p_archive_to_add)  {    $v_result=1;    // ----- Look if the archive_to_add exists    if (!is_file($p_archive_to_add->zipname))    {      // ----- Nothing to merge, so merge is a success      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Look if the archive exists    if (!is_file($this->zipname))    {      // ----- Do a duplicate      $v_result = $this->privDuplicate($p_archive_to_add->zipname);      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Open the archive_to_add file    if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)    {      $this->privCloseFd();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir_to_add = array();    if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($p_archive_to_add->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the files from the archive_to_add into the temporary file    $v_size = $v_central_dir_to_add['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($v_zip_temp_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the block of file headers from the archive_to_add    $v_size = $v_central_dir_to_add['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Merge the file comments    $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];    // ----- Calculate the size of the (new) central header    $v_size = @ftell($v_zip_temp_fd)-$v_offset;    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive fd    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      @fclose($v_zip_temp_fd);      $this->zip_fd = null;      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    $p_archive_to_add->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDuplicate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDuplicate($p_archive_filename)  {    $v_result=1;    // ----- Look if the $p_archive_filename exists    if (!is_file($p_archive_filename))    {      // ----- Nothing to duplicate, so duplicate is a success.      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)    {      $this->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = filesize($p_archive_filename);    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorLog()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorLog($p_error_code=0, $p_error_string='')  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclError($p_error_code, $p_error_string);    }    else {      $this->error_code = $p_error_code;      $this->error_string = $p_error_string;    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorReset()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorReset()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclErrorReset();    }    else {      $this->error_code = 0;      $this->error_string = '';    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDisableMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDisableMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if already done    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Get and memorize the magic_quote value	$this->magic_quotes_status = @get_magic_quotes_runtime();	// ----- Disable magic_quotes	if ($this->magic_quotes_status == 1) {	  @set_magic_quotes_runtime(0);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privSwapBackMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privSwapBackMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if something to do    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Swap back magic_quotes	if ($this->magic_quotes_status == 1) {  	  @set_magic_quotes_runtime($this->magic_quotes_status);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  }  // End of class  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathReduction()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilPathReduction($p_dir)  {    $v_result = "";    // ----- Look for not empty path    if ($p_dir != "") {      // ----- Explode path by directory names      $v_list = explode("/", $p_dir);      // ----- Study directories from last to first      $v_skip = 0;      for ($i=sizeof($v_list)-1; $i>=0; $i--) {        // ----- Look for current path        if ($v_list[$i] == ".") {          // ----- Ignore this directory          // Should be the first $i=0, but no check is done        }        else if ($v_list[$i] == "..") {		  $v_skip++;        }        else if ($v_list[$i] == "") {		  // ----- First '/' i.e. root slash		  if ($i == 0) {            $v_result = "/".$v_result;		    if ($v_skip > 0) {		        // ----- It is an invalid path, so the path is not modified		        // TBC		        $v_result = $p_dir;                $v_skip = 0;		    }		  }		  // ----- Last '/' i.e. indicates a directory		  else if ($i == (sizeof($v_list)-1)) {            $v_result = $v_list[$i];		  }		  // ----- Double '/' inside the path		  else {            // ----- Ignore only the double '//' in path,            // but not the first and last '/'		  }        }        else {		  // ----- Look for item to skip		  if ($v_skip > 0) {		    $v_skip--;		  }		  else {            $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");		  }        }      }      // ----- Look for skip      if ($v_skip > 0) {        while ($v_skip > 0) {            $v_result = '../'.$v_result;            $v_skip--;        }      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathInclusion()  // Description :  //   This function indicates if the path $p_path is under the $p_dir tree. Or,  //   said in an other way, if the file or sub-dir $p_path is inside the dir  //   $p_dir.  //   The function indicates also if the path is exactly the same as the dir.  //   This function supports path with duplicated '/' like '//', but does not  //   support '.' or '..' statements.  // Parameters :  // Return Values :  //   0 if $p_path is not inside directory $p_dir  //   1 if $p_path is inside directory $p_dir  //   2 if $p_path is exactly the same as $p_dir  // --------------------------------------------------------------------------------  function PclZipUtilPathInclusion($p_dir, $p_path)  {    $v_result = 1;    // ----- Look for path beginning by ./    if (   ($p_dir == '.')        || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {      $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);    }    if (   ($p_path == '.')        || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {      $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);    }    // ----- Explode dir and path by directory separator    $v_list_dir = explode("/", $p_dir);    $v_list_dir_size = sizeof($v_list_dir);    $v_list_path = explode("/", $p_path);    $v_list_path_size = sizeof($v_list_path);    // ----- Study directories paths    $i = 0;    $j = 0;    while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {      // ----- Look for empty dir (path reduction)      if ($v_list_dir[$i] == '') {        $i++;        continue;      }      if ($v_list_path[$j] == '') {        $j++;        continue;      }      // ----- Compare the items      if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {        $v_result = 0;      }      // ----- Next items      $i++;      $j++;    }    // ----- Look if everything seems to be the same    if ($v_result) {      // ----- Skip all the empty items      while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;      while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;      if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {        // ----- There are exactly the same        $v_result = 2;      }      else if ($i < $v_list_dir_size) {        // ----- The path is shorter than the dir        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilCopyBlock()  // Description :  // Parameters :  //   $p_mode : read/write compression mode  //             0 : src & dest normal  //             1 : src gzip, dest normal  //             2 : src normal, dest gzip  //             3 : src & dest gzip  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)  {    $v_result = 1;    if ($p_mode==0)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==1)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==2)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==3)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilRename()  // Description :  //   This function tries to do a simple rename() function. If it fails, it  //   tries to copy the $p_src file in a new $p_dest file and then unlink the  //   first one.  // Parameters :  //   $p_src : Old filename  //   $p_dest : New filename  // Return Values :  //   1 on success, 0 on failure.  // --------------------------------------------------------------------------------  function PclZipUtilRename($p_src, $p_dest)  {    $v_result = 1;    // ----- Try to rename the files    if (!@rename($p_src, $p_dest)) {      // ----- Try to copy & unlink the src      if (!@copy($p_src, $p_dest)) {        $v_result = 0;      }      else if (!@unlink($p_src)) {        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilOptionText()  // Description :  //   Translate option value in text. Mainly for debug purpose.  // Parameters :  //   $p_option : the option value.  // Return Values :  //   The option text value.  // --------------------------------------------------------------------------------  function PclZipUtilOptionText($p_option)  {    $v_list = get_defined_constants();    for (reset($v_list); $v_key = key($v_list); next($v_list)) {	    $v_prefix = substr($v_key, 0, 10);	    if ((   ($v_prefix == 'PCLZIP_OPT')           || ($v_prefix == 'PCLZIP_CB_')           || ($v_prefix == 'PCLZIP_ATT'))	        && ($v_list[$v_key] == $p_option)) {        return $v_key;	    }    }    $v_result = 'Unknown';    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilTranslateWinPath()  // Description :  //   Translate windows path by replacing '\' by '/' and optionally removing  //   drive letter.  // Parameters :  //   $p_path : path to translate.  //   $p_remove_disk_letter : true | false  // Return Values :  //   The path translated.  // --------------------------------------------------------------------------------  function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)  {    if (stristr(php_uname(), 'windows')) {      // ----- Look for potential disk letter      if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {          $p_path = substr($p_path, $v_position+1);      }      // ----- Change potential windows directory separator      if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {          $p_path = strtr($p_path, '\\', '/');      }    }    return $p_path;  }  // --------------------------------------------------------------------------------?>
<?php/** * Edit links form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( ! empty($link_id) ) {	$heading = sprintf( __( '<a href="%s">Links</a> / Edit Link' ), 'link-manager.php' );	$submit_text = __('Update Link');	$form = '<form name="editlink" id="editlink" method="post" action="link.php">';	$nonce_action = 'update-bookmark_' . $link_id;} else {	$heading = sprintf( __( '<a href="%s">Links</a> / Add New Link' ), 'link-manager.php' );	$submit_text = __('Add Link');	$form = '<form name="addlink" id="addlink" method="post" action="link.php">';	$nonce_action = 'add-bookmark';}require_once('./includes/meta-boxes.php');add_meta_box('linksubmitdiv', __('Save'), 'link_submit_meta_box', 'link', 'side', 'core');add_meta_box('linkcategorydiv', __('Categories'), 'link_categories_meta_box', 'link', 'normal', 'core');add_meta_box('linktargetdiv', __('Target'), 'link_target_meta_box', 'link', 'normal', 'core');add_meta_box('linkxfndiv', __('Link Relationship (XFN)'), 'link_xfn_meta_box', 'link', 'normal', 'core');add_meta_box('linkadvanceddiv', __('Advanced'), 'link_advanced_meta_box', 'link', 'normal', 'core');do_action('add_meta_boxes', 'link', $link);do_action('add_meta_boxes_link', $link);do_action('do_meta_boxes', 'link', 'normal', $link);do_action('do_meta_boxes', 'link', 'advanced', $link);do_action('do_meta_boxes', 'link', 'side', $link);add_contextual_help($current_screen,	'<p>' . __( 'You can add or edit links on this screen by entering information in each of the boxes. Only the link&#8217;s web address and name (the text you want to display on your site as the link) are required fields.' ) . '</p>' .	'<p>' . __( 'The boxes for link name, web address, and description have fixed positions, while the others may be repositioned using drag and drop. You can also hide boxes you don&#8217;t use in the Screen Options tab, or minimize boxes by clicking on the title bar of the box.' ) . '</p>' .	'<p>' . __( 'XFN stands for <a href="http://gmpg.org/xfn/" target="_blank">XHTML Friends Network</a>, which is optional. WordPress allows the generation of XFN attributes to show how you are related to the authors/owners of the site to which you are linking.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Links_Add_New_SubPanel" target="_blank">Documentation on Creating Links</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>');require_once ('admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset( $_GET['added'] ) ) : ?><div id="message" class="updated"><p><?php _e('Link added.'); ?></p></div><?php endif; ?><?phpif ( !empty($form) )	echo $form;if ( !empty($link_added) )	echo $link_added;wp_nonce_field( $nonce_action );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?phpdo_action('submitlink_box');$side_meta_boxes = do_meta_boxes( 'link', 'side', $link );?></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="link_name"><?php _e('Name') ?></label></h3><div class="inside">	<input type="text" name="link_name" size="30" tabindex="1" value="<?php echo esc_attr($link->link_name); ?>" id="link_name" />    <p><?php _e('Example: Nifty blogging software'); ?></p></div></div><div id="addressdiv" class="stuffbox"><h3><label for="link_url"><?php _e('Web Address') ?></label></h3><div class="inside">	<input type="text" name="link_url" size="30" class="code" tabindex="1" value="<?php echo esc_attr($link->link_url); ?>" id="link_url" />    <p><?php _e('Example: <code>http://wordpress.org/</code> &#8212; don&#8217;t forget the <code>http://</code>'); ?></p></div></div><div id="descriptiondiv" class="stuffbox"><h3><label for="link_description"><?php _e('Description') ?></label></h3><div class="inside">	<input type="text" name="link_description" size="30" tabindex="1" value="<?php echo isset($link->link_description) ? esc_attr($link->link_description) : ''; ?>" id="link_description" />    <p><?php _e('This will be shown when someone hovers over the link in the blogroll, or optionally below the link.'); ?></p></div></div><?phpdo_meta_boxes('link', 'normal', $link);do_meta_boxes('link', 'advanced', $link);if ( $link_id ) : ?><input type="hidden" name="action" value="save" /><input type="hidden" name="link_id" value="<?php echo (int) $link_id; ?>" /><input type="hidden" name="order_by" value="<?php echo esc_attr($order_by); ?>" /><input type="hidden" name="cat_id" value="<?php echo (int) $cat_id ?>" /><?php else: ?><input type="hidden" name="action" value="add" /><?php endif; ?></div></div></div></form></div>
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Defines Multisite upload constants. * * @since 3.0.0 */function ms_upload_constants(  ) {	global $wpdb;	/** @since 3.0.0 */	// Base uploads dir relative to ABSPATH	if ( !defined( 'UPLOADBLOGSDIR' ) )		define( 'UPLOADBLOGSDIR', 'wp-content/blogs.dir' );	/** @since 3.0.0 */	if ( !defined( 'UPLOADS' ) ) {		// Uploads dir relative to ABSPATH		define( 'UPLOADS', UPLOADBLOGSDIR . "/{$wpdb->blogid}/files/" );		if ( 'wp-content/blogs.dir' == UPLOADBLOGSDIR )			define( 'BLOGUPLOADDIR', WP_CONTENT_DIR . "/blogs.dir/{$wpdb->blogid}/files/" );	}}/** * Defines Multisite cookie constants. * * @since 3.0.0 */function ms_cookie_constants(  ) {	global $current_site;	/**	 * @since 1.2.0	 */	if ( !defined( 'COOKIEPATH' ) )		define( 'COOKIEPATH', $current_site->path );	/**	 * @since 1.5.0	 */	if ( !defined( 'SITECOOKIEPATH' ) )		define( 'SITECOOKIEPATH', $current_site->path );	/**	 * @since 2.6.0	 */	if ( !defined( 'ADMIN_COOKIE_PATH' ) ) {		if( !is_subdomain_install() ) {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH );		} else {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );		}	}	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') && is_subdomain_install() ) {		if ( !empty( $current_site->cookie_domain ) )			define('COOKIE_DOMAIN', '.' . $current_site->cookie_domain);		else			define('COOKIE_DOMAIN', '.' . $current_site->domain);	}}/** * Defines Multisite file constants. * * @since 3.0.0 */function ms_file_constants(  ) {	/**	 * Optional support for X-Sendfile header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_SENDFILE' ) )		define( 'WPMU_SENDFILE', false );	/**	 * Optional support for X-Accel-Redirect header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_ACCEL_REDIRECT' ) )		define( 'WPMU_ACCEL_REDIRECT', false );}/** * Defines Multisite subdomain constants and handles warnings and notices. * * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool. * * On first call, the constants are checked and defined. On second call, * we will have translations loaded and can trigger warnings easily. * * @since 3.0.0 */function ms_subdomain_constants() {	static $error = null;	static $error_warn = false;	if ( false === $error )		return;	if ( $error ) {		$vhost_deprecated = __( 'The constant <code>VHOST</code> <strong>is deprecated</strong>. Use the boolean constant <code>SUBDOMAIN_INSTALL</code> in wp-config.php to enable a subdomain configuration. Use is_subdomain_install() to check whether a subdomain configuration is enabled.' );		if ( $error_warn ) {			trigger_error( __( '<strong>Conflicting values for the constants VHOST and SUBDOMAIN_INSTALL.</strong> The value of SUBDOMAIN_INSTALL will be assumed to be your subdomain configuration setting.' ) . ' ' . $vhost_deprecated, E_USER_WARNING );		} else {	 		_deprecated_argument( 'define()', '3.0', $vhost_deprecated );		}		return;	}	if ( defined( 'SUBDOMAIN_INSTALL' ) && defined( 'VHOST' ) ) {		if ( SUBDOMAIN_INSTALL == ( 'yes' == VHOST ) ) {			$error = true;		} else {			$error = $error_warn = true;		}	} elseif ( defined( 'SUBDOMAIN_INSTALL' ) ) {		define( 'VHOST', SUBDOMAIN_INSTALL ? 'yes' : 'no' );	} elseif ( defined( 'VHOST' ) ) {		$error = true;		define( 'SUBDOMAIN_INSTALL', 'yes' == VHOST );	} else {		define( 'SUBDOMAIN_INSTALL', false );		define( 'VHOST', 'no' );	}}add_action( 'init', 'ms_subdomain_constants' );?>
<?phpdefine('WP_REPAIRING', true);require_once('../../wp-load.php');header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e('WordPress &rsaquo; Database Repair'); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="../images/wordpress-logo.png" /></h1><?phpif ( !defined('WP_ALLOW_REPAIR') ) {	echo '<p>'.__('To allow use of this page to automatically repair database problems, please add the following line to your wp-config.php file.  Once this line is added to your config, reload this page.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";} elseif ( isset($_GET['repair']) ) {	$problems = array();	check_admin_referer('repair_db');	if ( 2 == $_GET['repair'] )		$optimize = true;	else		$optimize = false;	$okay = true;	$tables = $wpdb->tables();	// Sitecategories may not exist if global terms are disabled.	if ( is_multisite() && ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->sitecategories'" ) )		unset( $tables['sitecategories'] );	$tables = array_merge( $tables, (array) apply_filters( 'tables_to_repair', array() ) ); // Return tables with table prefixes.	// Loop over the tables, checking and repairing as needed.	foreach ( $tables as $table ) {		$check = $wpdb->get_row("CHECK TABLE $table");		if ( 'OK' == $check->Msg_text ) {			echo "<p>The $table table is okay.";		} else {			echo "<p>The $table table is not okay. It is reporting the following error: <code>$check->Msg_text</code>.  WordPress will attempt to repair this table&hellip;";			$repair = $wpdb->get_row("REPAIR TABLE $table");			if ( 'OK' == $check->Msg_text ) {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully repaired the $table table.";			} else {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to repair the $table table. Error: $check->Msg_text<br />";				$problems["$table"] = $check->Msg_text;				$okay = false;			}		}		if ( $okay && $optimize ) {			$check = $wpdb->get_row("ANALYZE TABLE $table");			if ( 'Table is already up to date' == $check->Msg_text )  {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;The $table table is already optimized.";			} else {				$check = $wpdb->get_row("OPTIMIZE TABLE $table");				if ( 'OK' == $check->Msg_text || 'Table is already up to date' == $check->Msg_text )					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully optimized the $table table.";				else					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to optimize the $table table. Error: $check->Msg_text";			}		}		echo '</p>';	}	if ( !empty($problems) ) {		printf('<p>'.__('Some database problems could not be repaired. Please copy-and-paste the following list of errors to the <a href="%s">WordPress support forums</a> to get additional assistance.').'</p>', 'http://wordpress.org/support/forum/3');		$problem_output = array();		foreach ( $problems as $table => $problem )			$problem_output[] = "$table: $problem";		echo '<textarea name="errors" id="errors" rows="20" cols="60">' . format_to_edit(implode("\n", $problem_output)) . '</textarea>';	} else {		echo '<p>'.__('Repairs complete.  Please remove the following line from wp-config.php to prevent this page from being used by unauthorized users.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";	}} else {	if ( isset($_GET['referrer']) && 'is_blog_installed' == $_GET['referrer'] )		_e('One or more database tables is unavailable.  To allow WordPress to attempt to repair these tables, press the "Repair Database" button. Repairing can take awhile, so please be patient.');	else		_e('WordPress can automatically look for some common database problems and repair them.  Repairing can take awhile, so please be patient.')?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=1', 'repair_db') ?>"><?php _e( 'Repair Database' ); ?></a></p>	<?php _e('WordPress can also attempt to optimize the database.  This improves performance in some situations.  Repairing and optimizing the database can take a long time and the database will be locked while optimizing.'); ?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=2', 'repair_db') ?>"><?php _e( 'Repair and Optimize Database' ); ?></a></p><?php}?></body></html>
<?php/** * Default Embed Handlers * * @package WordPress * @subpackage Embeds *//** * The Google Video embed handler callback. Google Video does not support oEmbed. * * @see WP_Embed::register_handler() * @see WP_Embed::shortcode() * * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}. * @param array $attr Embed attributes. * @param string $url The original URL that was matched by the regex. * @param array $rawattr The original unmodified attributes. * @return string The embed HTML. */function wp_embed_handler_googlevideo( $matches, $attr, $url, $rawattr ) {	// If the user supplied a fixed width AND height, use it	if ( !empty($rawattr['width']) && !empty($rawattr['height']) ) {		$width  = (int) $rawattr['width'];		$height = (int) $rawattr['height'];	} else {		list( $width, $height ) = wp_expand_dimensions( 425, 344, $attr['width'], $attr['height'] );	}	return apply_filters( 'embed_googlevideo', '<embed type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docid=' . esc_attr($matches[2]) . '&amp;hl=en&amp;fs=true" style="width:' . esc_attr($width) . 'px;height:' . esc_attr($height) . 'px" allowFullScreen="true" allowScriptAccess="always"></embed>', $matches, $attr, $url, $rawattr );}wp_embed_register_handler( 'googlevideo', '#http://video\.google\.([A-Za-z.]{2,5})/videoplay\?docid=([\d-]+)(.*?)#i', 'wp_embed_handler_googlevideo' );?>
<?php/** * Manage link administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for link actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( ! current_user_can('manage_links') )	wp_die( __('You do not have sufficient permissions to edit the links for this site.') );if ( !empty($_POST['deletebookmarks']) )	$action = 'deletebookmarks';if ( !empty($_POST['move']) )	$action = 'move';if ( !empty($_POST['linkcheck']) )	$linkcheck = $_POST['linkcheck'];$this_file = 'link-manager.php';switch ($action) {	case 'deletebookmarks' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$deleted = 0;		foreach ($linkcheck as $link_id) {			$link_id = (int) $link_id;			if ( wp_delete_link($link_id) )				$deleted++;		}		wp_redirect("$this_file?deleted=$deleted");		exit;		break;	case 'move' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$all_links = join(',', $linkcheck);		// should now have an array of links we can change		//$q = $wpdb->query("update $wpdb->links SET link_category='$category' WHERE link_id IN ($all_links)");		wp_redirect($this_file);		exit;		break;	case 'add' :		check_admin_referer('add-bookmark');		$redir = wp_get_referer();		if ( add_link() )			$redir = add_query_arg( 'added', 'true', $redir );		wp_redirect( $redir );		exit;		break;	case 'save' :		$link_id = (int) $_POST['link_id'];		check_admin_referer('update-bookmark_' . $link_id);		edit_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'delete' :		$link_id = (int) $_GET['link_id'];		check_admin_referer('delete-bookmark_' . $link_id);		wp_delete_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'edit' :		wp_enqueue_script('link');		wp_enqueue_script('xfn');		$parent_file = 'link-manager.php';		$submenu_file = 'link-manager.php';		$title = __('Edit Link');		$link_id = (int) $_GET['link_id'];		if (!$link = get_link_to_edit($link_id))			wp_die(__('Link not found.'));		include ('edit-link-form.php');		include ('admin-footer.php');		break;	default :		break;}?>
<?php/** * RSS2 Feed Template for displaying RSS2 Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>';?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	<?php do_action('rss2_ns'); do_action('rss2_comments_ns'); ?>	><channel>	<title><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on: %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %s searching on %s')), get_bloginfo_rss( 'name' ), esc_attr($wp_query->query_vars['s']));		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php (is_single()) ? the_permalink_rss() : bloginfo_rss("url") ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('r', get_lastcommentmodified('GMT')); ?></lastBuildDate>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('commentsrss2_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<item>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link><?php comment_link() ?></link>		<dc:creator><?php echo get_comment_author_rss() ?></dc:creator>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_comment_time('Y-m-d H:i:s', true, false), false); ?></pubDate>		<guid isPermaLink="false"><?php comment_guid() ?></guid><?php if ( post_password_required($comment_post) ) : ?>		<description><?php echo ent2ncr(__('Protected Comments: Please enter your password to view comments.')); ?></description>		<content:encoded><![CDATA[<?php echo get_the_password_form() ?>]]></content:encoded><?php else : // post pass ?>		<description><?php comment_text_rss() ?></description>		<content:encoded><![CDATA[<?php comment_text() ?>]]></content:encoded><?php endif; // post pass	do_action('commentrss2_item', $comment->comment_ID, $comment_post->ID);?>	</item><?php endwhile; endif; ?></channel></rss>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress enqueued dependiences class. * * @package BackPress * @uses _WP_Dependency * @since r74 */class WP_Dependencies {	var $registered = array();	var $queue = array();	var $to_do = array();	var $done = array();	var $args = array();	var $groups = array();	var $group = 0;	function WP_Dependencies() {		$args = func_get_args();		call_user_func_array( array(&$this, '__construct'), $args );	}	function __construct() {}	/**	 * Do the dependencies	 *	 * Process the items passed to it or the queue.  Processes all dependencies.	 *	 * @param mixed handles (optional) items to be processed.  (void) processes queue, (string) process that item, (array of strings) process those items	 * @return array Items that have been processed	 */	function do_items( $handles = false, $group = false ) {		// Print the queue if nothing is passed.  If a string is passed, print that script.  If an array is passed, print those scripts.		$handles = false === $handles ? $this->queue : (array) $handles;		$this->all_deps( $handles );		foreach( $this->to_do as $key => $handle ) {			if ( !in_array($handle, $this->done) && isset($this->registered[$handle]) ) {				if ( ! $this->registered[$handle]->src ) { // Defines a group.					$this->done[] = $handle;					continue;				}				if ( $this->do_item( $handle, $group ) )					$this->done[] = $handle;				unset( $this->to_do[$key] );			}		}		return $this->done;	}	function do_item( $handle ) {		return isset($this->registered[$handle]);	}	/**	 * Determines dependencies	 *	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.	 *	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names	 * @param bool recursion Used internally when function calls itself	 */	function all_deps( $handles, $recursion = false, $group = false ) {		if ( !$handles = (array) $handles )			return false;		foreach ( $handles as $handle ) {			$handle_parts = explode('?', $handle);			$handle = $handle_parts[0];			$queued = in_array($handle, $this->to_do, true);			if ( in_array($handle, $this->done, true) ) // Already done				continue;			$moved = $this->set_group( $handle, $recursion, $group );			if ( $queued && !$moved ) // already queued and in the right group				continue;			$keep_going = true;			if ( !isset($this->registered[$handle]) )				$keep_going = false; // Script doesn't exist			elseif ( $this->registered[$handle]->deps && array_diff($this->registered[$handle]->deps, array_keys($this->registered)) )				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)			elseif ( $this->registered[$handle]->deps && !$this->all_deps( $this->registered[$handle]->deps, true, $group ) )				$keep_going = false; // Script requires deps which don't exist			if ( !$keep_going ) { // Either script or its deps don't exist.				if ( $recursion )					return false; // Abort this branch.				else					continue; // We're at the top level.  Move on to the next one.			}			if ( $queued ) // Already grobbed it and its deps				continue;			if ( isset($handle_parts[1]) )				$this->args[$handle] = $handle_parts[1];			$this->to_do[] = $handle;		}		return true;	}	/**	 * Adds item	 *	 * Adds the item only if no item of that name already exists	 *	 * @param string handle Script name	 * @param string src Script url	 * @param array deps (optional) Array of script names on which this script depends	 * @param string ver (optional) Script version (used for cache busting)	 * @return array Hierarchical array of dependencies	 */	function add( $handle, $src, $deps = array(), $ver = false, $args = null ) {		if ( isset($this->registered[$handle]) )			return false;		$this->registered[$handle] = new _WP_Dependency( $handle, $src, $deps, $ver, $args );		return true;	}	/**	 * Adds extra data	 *	 * Adds data only if script has already been added	 *	 * @param string handle Script name	 * @param string data_name Name of object in which to store extra data	 * @param array data Array of extra data	 * @return bool success	 */	function add_data( $handle, $data_name, $data ) {		if ( !isset($this->registered[$handle]) )			return false;		return $this->registered[$handle]->add_data( $data_name, $data );	}	function remove( $handles ) {		foreach ( (array) $handles as $handle )			unset($this->registered[$handle]);	}	function enqueue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			if ( !in_array($handle[0], $this->queue) && isset($this->registered[$handle[0]]) ) {				$this->queue[] = $handle[0];				if ( isset($handle[1]) )					$this->args[$handle[0]] = $handle[1];			}		}	}	function dequeue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			$key = array_search($handle[0], $this->queue);			if ( false !== $key ) {				unset($this->queue[$key]);				unset($this->args[$handle[0]]);			}		}	}	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do		switch ( $list ) :		case 'registered':		case 'scripts': // back compat			if ( isset($this->registered[$handle]) )				return $this->registered[$handle];			break;		case 'to_print': // back compat		case 'printed': // back compat			if ( 'to_print' == $list )				$list = 'to_do';			else				$list = 'printed';		default:			if ( in_array($handle, $this->$list) )				return true;			break;		endswitch;		return false;	}	function set_group( $handle, $recursion, $group ) {		$group = (int) $group;		if ( $recursion )			$group = min($this->group, $group);		else			$this->group = $group;		if ( isset($this->groups[$handle]) && $this->groups[$handle] <= $group )			return false;		$this->groups[$handle] = $group;		return true;	}}class _WP_Dependency {	var $handle;	var $src;	var $deps = array();	var $ver = false;	var $args = null;	var $extra = array();	function _WP_Dependency() {		@list($this->handle, $this->src, $this->deps, $this->ver, $this->args) = func_get_args();		if ( !is_array($this->deps) )			$this->deps = array();	}	function add_data( $name, $data ) {		if ( !is_scalar($name) )			return false;		$this->extra[$name] = $data;		return true;	}}
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><title><?php wp_title('&laquo;', true, 'right'); ?> <?php bloginfo('name'); ?></title><link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" type="text/css" media="screen" /><link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" /><style type="text/css" media="screen"><?php// Checks to see whether it needs a sidebarif ( empty($withcomments) && !is_single() ) {?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbg-<?php bloginfo('text_direction'); ?>.jpg") repeat-y top; border: none; }<?php } else { // No sidebar ?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbgwide.jpg") repeat-y top; border: none; }<?php } ?></style><?php if ( is_singular() ) wp_enqueue_script( 'comment-reply' ); ?><?php wp_head(); ?></head><body <?php body_class(); ?>><div id="page"><div id="header" role="banner">	<div id="headerimg">		<h1><a href="<?php echo home_url(); ?>/"><?php bloginfo('name'); ?></a></h1>		<div class="description"><?php bloginfo('description'); ?></div>	</div></div><hr />
<?php/** * Accepts file uploads from swfupload or other asynchronous upload methods. * * @package WordPress * @subpackage Administration */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');// Flash often fails to send cookies with the POST or upload, so we need to pass it in GET or POST insteadif ( is_ssl() && empty($_COOKIE[SECURE_AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[SECURE_AUTH_COOKIE] = $_REQUEST['auth_cookie'];elseif ( empty($_COOKIE[AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[AUTH_COOKIE] = $_REQUEST['auth_cookie'];if ( empty($_COOKIE[LOGGED_IN_COOKIE]) && !empty($_REQUEST['logged_in_cookie']) )	$_COOKIE[LOGGED_IN_COOKIE] = $_REQUEST['logged_in_cookie'];unset($current_user);require_once('./admin.php');header('Content-Type: text/plain; charset=' . get_option('blog_charset'));if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));// just fetch the detail form for that attachmentif ( isset($_REQUEST['attachment_id']) && ($id = intval($_REQUEST['attachment_id'])) && $_REQUEST['fetch'] ) {	if ( 2 == $_REQUEST['fetch'] ) {		add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id, array( 'send' => false, 'delete' => true ));	} else {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id);	}	exit;}check_admin_referer('media-form');$id = media_handle_upload('async-upload', $_REQUEST['post_id']);if ( is_wp_error($id) ) {	echo '<div class="error-div">	<a class="dismiss" href="#" onclick="jQuery(this).parents(\'div.media-item\').slideUp(200, function(){jQuery(this).remove();});">' . __('Dismiss') . '</a>	<strong>' . sprintf(__('&#8220;%s&#8221; has failed to upload due to an error'), esc_html($_FILES['async-upload']['name']) ) . '</strong><br />' .	esc_html($id->get_error_message()) . '</div>';	exit;}if ( $_REQUEST['short'] ) {	// short form response - attachment ID only	echo $id;} else {	// long form response - big chunk o html	$type = $_REQUEST['type'];	echo apply_filters("async_upload_{$type}", $id);}?>
<?php/** * Multisite upload handler. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite */define( 'SHORTINIT', true );require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );if( !is_multisite() )	die( 'Multisite support not enabled' );ms_file_constants();error_reporting( 0 );if ( $current_blog->archived == '1' || $current_blog->spam == '1' || $current_blog->deleted == '1' ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$file = BLOGUPLOADDIR . str_replace( '..', '', $_GET[ 'file' ] );if ( !is_file( $file ) ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$mime = wp_check_filetype( $_SERVER[ 'REQUEST_URI' ] );if( false === $mime[ 'type' ] && function_exists( 'mime_content_type' ) )	$mime[ 'type' ] = mime_content_type( $file );if( $mime[ 'type' ] )	$mimetype = $mime[ 'type' ];else	$mimetype = 'image/' . substr( $_SERVER[ 'REQUEST_URI' ], strrpos( $_SERVER[ 'REQUEST_URI' ], '.' ) + 1 );header( 'Content-type: ' . $mimetype ); // always send thisif ( false === strpos( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) )	header( 'Content-Length: ' . filesize( $file ) );// Optional support for X-Sendfile and X-Accel-Redirectif ( WPMU_ACCEL_REDIRECT ) {	header( 'X-Accel-Redirect: ' . str_replace( WP_CONTENT_DIR, '', $file ) );	exit;} elseif ( WPMU_SENDFILE ) {	header( 'X-Sendfile: ' . $file );	exit;}$last_modified = gmdate( 'D, d M Y H:i:s', filemtime( $file ) );$etag = '"' . md5( $last_modified ) . '"';header( "Last-Modified: $last_modified GMT" );header( 'ETag: ' . $etag );header( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 100000000 ) . ' GMT' );// Support for Conditional GET$client_etag = isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) ? stripslashes( $_SERVER['HTTP_IF_NONE_MATCH'] ) : false;if( ! isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = false;$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );// If string is empty, return 0. If not, attempt to parse into a timestamp$client_modified_timestamp = $client_last_modified ? strtotime( $client_last_modified ) : 0;// Make a timestamp for our most recent modification...$modified_timestamp = strtotime($last_modified);if ( ( $client_last_modified && $client_etag )	? ( ( $client_modified_timestamp >= $modified_timestamp) && ( $client_etag == $etag ) )	: ( ( $client_modified_timestamp >= $modified_timestamp) || ( $client_etag == $etag ) )	) {	status_header( 304 );	exit;}// If we made it this far, just serve the filereadfile( $file );?>
<?php/** * The template for displaying Archive pages. * * Used to display archive-type pages if nothing more specific matches a query. * For example, puts together date-based pages if no date.php file exists. * * Learn more: http://codex.wordpress.org/Template_Hierarchy * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know	 * what date we're dealing with (if that is the case).	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>			<h1 class="page-title"><?php if ( is_day() ) : ?>				<?php printf( __( 'Daily Archives: <span>%s</span>', 'twentyten' ), get_the_date() ); ?><?php elseif ( is_month() ) : ?>				<?php printf( __( 'Monthly Archives: <span>%s</span>', 'twentyten' ), get_the_date('F Y') ); ?><?php elseif ( is_year() ) : ?>				<?php printf( __( 'Yearly Archives: <span>%s</span>', 'twentyten' ), get_the_date('Y') ); ?><?php else : ?>				<?php _e( 'Blog Archives', 'twentyten' ); ?><?php endif; ?>			</h1><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the archives page to output the posts.	 * If you want to overload this in a child theme then include a file	 * called loop-archives.php and that will be used instead.	 */	 get_template_part( 'loop', 'archive' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * API for fetching the HTML to embed remote content based on a provided URL. * Used internally by the {@link WP_Embed} class, but is designed to be generic. * * @link http://codex.wordpress.org/oEmbed oEmbed Codex Article * @link http://oembed.com/ oEmbed Homepage * * @package WordPress * @subpackage oEmbed *//** * oEmbed class. * * @package WordPress * @subpackage oEmbed * @since 2.9.0 */class WP_oEmbed {	var $providers = array();	/**	 * PHP4 constructor	 */	function WP_oEmbed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 *	 * @uses apply_filters() Filters a list of pre-defined oEmbed providers.	 */	function __construct() {		// List out some popular sites that support oEmbed.		// The WP_Embed class disables discovery for non-unfiltered_html users, so only providers in this array will be used for them.		// Add to this list using the wp_oembed_add_provider() function (see it's PHPDoc for details).		$this->providers = apply_filters( 'oembed_providers', array(			'#http://(www\.)?youtube.com/watch.*#i'         => array( 'http://www.youtube.com/oembed',            true  ),			'http://youtu.be/*'                             => array( 'http://www.youtube.com/oembed',            false ),			'http://blip.tv/file/*'                         => array( 'http://blip.tv/oembed/',                   false ),			'#http://(www\.)?vimeo\.com/.*#i'               => array( 'http://www.vimeo.com/api/oembed.{format}', true  ),			'#http://(www\.)?dailymotion\.com/.*#i'         => array( 'http://www.dailymotion.com/api/oembed',    true  ),			'#http://(www\.)?flickr\.com/.*#i'              => array( 'http://www.flickr.com/services/oembed/',   true  ),			'#http://(.+)?smugmug\.com/.*#i'                => array( 'http://api.smugmug.com/services/oembed/',  true  ),			'#http://(www\.)?hulu\.com/watch/.*#i'          => array( 'http://www.hulu.com/api/oembed.{format}',  true  ),			'#http://(www\.)?viddler\.com/.*#i'             => array( 'http://lab.viddler.com/services/oembed/',  true  ),			'http://qik.com/*'                              => array( 'http://qik.com/api/oembed.{format}',       false ),			'http://revision3.com/*'                        => array( 'http://revision3.com/api/oembed/',         false ),			'http://i*.photobucket.com/albums/*'            => array( 'http://photobucket.com/oembed',            false ),			'http://gi*.photobucket.com/groups/*'           => array( 'http://photobucket.com/oembed',            false ),			'#http://(www\.)?scribd\.com/.*#i'              => array( 'http://www.scribd.com/services/oembed',    true  ),			'http://wordpress.tv/*'                         => array( 'http://wordpress.tv/oembed/',              false ),			'#http://(answers|surveys)\.polldaddy.com/.*#i' => array( 'http://polldaddy.com/oembed/',             true  ),			'#http://(www\.)?funnyordie\.com/videos/.*#i'   => array( 'http://www.funnyordie.com/oembed',         true  ),		) );		// Fix any embeds that contain new lines in the middle of the HTML which breaks wpautop().		add_filter( 'oembed_dataparse', array(&$this, '_strip_newlines'), 10, 3 );	}	/**	 * The do-it-all function that takes a URL and attempts to return the HTML.	 *	 * @see WP_oEmbed::discover()	 * @see WP_oEmbed::fetch()	 * @see WP_oEmbed::data2html()	 *	 * @param string $url The URL to the content that should be attempted to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed.	 */	function get_html( $url, $args = '' ) {		$provider = false;		if ( !isset($args['discover']) )			$args['discover'] = true;		foreach ( $this->providers as $matchmask => $data ) {			list( $providerurl, $regex ) = $data;			// Turn the asterisk-type provider URLs into regex			if ( !$regex )				$matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote( str_replace( '*', '___wildcard___', $matchmask ), '#' ) ) . '#i';			if ( preg_match( $matchmask, $url ) ) {				$provider = str_replace( '{format}', 'json', $providerurl ); // JSON is easier to deal with than XML				break;			}		}		if ( !$provider && $args['discover'] )			$provider = $this->discover( $url );		if ( !$provider || false === $data = $this->fetch( $provider, $url, $args ) )			return false;		return apply_filters( 'oembed_result', $this->data2html( $data, $url ), $url, $args );	}	/**	 * Attempts to find oEmbed provider discovery <link> tags at the given URL.	 *	 * @param string $url The URL that should be inspected for discovery <link> tags.	 * @return bool|string False on failure, otherwise the oEmbed provider URL.	 */	function discover( $url ) {		$providers = array();		// Fetch URL content		if ( $html = wp_remote_retrieve_body( wp_remote_get( $url ) ) ) {			// <link> types that contain oEmbed provider URLs			$linktypes = apply_filters( 'oembed_linktypes', array(				'application/json+oembed' => 'json',				'text/xml+oembed' => 'xml',				'application/xml+oembed' => 'xml', // Incorrect, but used by at least Vimeo			) );			// Strip <body>			$html = substr( $html, 0, stripos( $html, '</head>' ) );			// Do a quick check			$tagfound = false;			foreach ( $linktypes as $linktype => $format ) {				if ( stripos($html, $linktype) ) {					$tagfound = true;					break;				}			}			if ( $tagfound && preg_match_all( '/<link([^<>]+)>/i', $html, $links ) ) {				foreach ( $links[1] as $link ) {					$atts = shortcode_parse_atts( $link );					if ( !empty($atts['type']) && !empty($linktypes[$atts['type']]) && !empty($atts['href']) ) {						$providers[$linktypes[$atts['type']]] = $atts['href'];						// Stop here if it's JSON (that's all we need)						if ( 'json' == $linktypes[$atts['type']] )							break;					}				}			}		}		// JSON is preferred to XML		if ( !empty($providers['json']) )			return $providers['json'];		elseif ( !empty($providers['xml']) )			return $providers['xml'];		else			return false;	}	/**	 * Connects to a oEmbed provider and returns the result.	 *	 * @param string $provider The URL to the oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function fetch( $provider, $url, $args = '' ) {		$args = wp_parse_args( $args, wp_embed_defaults() );		$provider = add_query_arg( 'maxwidth', $args['width'], $provider );		$provider = add_query_arg( 'maxheight', $args['height'], $provider );		$provider = add_query_arg( 'url', urlencode($url), $provider );		foreach( array( 'json', 'xml' ) as $format ) {			$result = $this->_fetch_with_format( $provider, $format );			if ( is_wp_error( $result ) && 'not-implemented' == $result->get_error_code() )				continue;			return ( $result && ! is_wp_error( $result ) ) ? $result : false;		}		return false;	}	/**	 * Fetches result from an oEmbed provider for a specific format and complete provider URL	 *	 * @since 3.0.0	 * @access private	 * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)	 * @param string $format Format to use	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function _fetch_with_format( $provider_url_with_args, $format ) {		$provider_url_with_args = add_query_arg( 'format', $format, $provider_url_with_args );		$response = wp_remote_get( $provider_url_with_args );		if ( 501 == wp_remote_retrieve_response_code( $response ) )			return new WP_Error( 'not-implemented' );		if ( ! $body = wp_remote_retrieve_body( $response ) )			return false;		$parse_method = "_parse_$format";		return $this->$parse_method( $body );	}	/**	 * Parses a json response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_json( $response_body ) {		return ( ( $data = json_decode( trim( $response_body ) ) ) && is_object( $data ) ) ? $data : false;	}	/**	 * Parses an XML response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_xml( $response_body ) {		if ( function_exists('simplexml_load_string') ) {			$errors = libxml_use_internal_errors( 'true' );			$data = simplexml_load_string( $response_body );			libxml_use_internal_errors( $errors );			if ( is_object( $data ) )				return $data;		}		return false;	}	/**	 * Converts a data object from {@link WP_oEmbed::fetch()} and returns the HTML.	 *	 * @param object $data A data object result from an oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @return bool|string False on error, otherwise the HTML needed to embed.	 */	function data2html( $data, $url ) {		if ( !is_object($data) || empty($data->type) )			return false;		switch ( $data->type ) {			case 'photo':				if ( empty($data->url) || empty($data->width) || empty($data->height) )					return false;				$title = ( !empty($data->title) ) ? $data->title : '';				$return = '<img src="' . esc_url( $data->url ) . '" alt="' . esc_attr($title) . '" width="' . esc_attr($data->width) . '" height="' . esc_attr($data->height) . '" />';				break;			case 'video':			case 'rich':				$return = ( !empty($data->html) ) ? $data->html : false;				break;			case 'link':				$return = ( !empty($data->title) ) ? '<a href="' . esc_url($url) . '">' . esc_html($data->title) . '</a>' : false;				break;			default;				$return = false;		}		// You can use this filter to add support for custom data types or to filter the result		return apply_filters( 'oembed_dataparse', $return, $data, $url );	}	/**	 * Strip any new lines from the HTML.	 *	 * @access private	 * @param string $html Existing HTML.	 * @param object $data Data object from WP_oEmbed::data2html()	 * @param string $url The original URL passed to oEmbed.	 * @return string Possibly modified $html	 */	function _strip_newlines( $html, $data, $url ) {		if ( false !== strpos( $html, "\n" ) )			$html = str_replace( array( "\r\n", "\n" ), '', $html );		return $html;	}}/** * Returns the initialized {@link WP_oEmbed} object * * @since 2.9.0 * @access private * * @see WP_oEmbed * @uses WP_oEmbed * * @return WP_oEmbed object. */function &_wp_oembed_get_object() {	static $wp_oembed;	if ( is_null($wp_oembed) )		$wp_oembed = new WP_oEmbed();	return $wp_oembed;}?>
<?php/** * Multisite upgrade administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once('admin.php');if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );require_once( ABSPATH . WPINC . '/http.php' );$title = __( 'Update Network' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Only use this screen once you have updated to a new version of WordPress through Dashboard > Updates. Clicking the Update Network button will step through each site in the network, five at a time, and make sure any database upgrades are applied.') . '</p>' .	'<p>' . __('If a version update to core has not happened, clicking this button won&#8217;t affect anything.') . '</p>' .	'<p>' . __('If this process fails for any reason, users logging in to their sites will force the same update.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Update_SubPanel" target="_blank">Update Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('admin-header.php');if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );echo '<div class="wrap">';screen_icon();echo '<h2>' . __( 'Update Network' ) . '</h2>';$action = isset($_GET['action']) ? $_GET['action'] : 'show';switch ( $action ) {	case "upgrade":		$n = ( isset($_GET['n']) ) ? intval($_GET['n']) : 0;		if ( $n < 5 ) {			global $wp_db_version;			update_site_option( 'wpmu_upgrade_site', $wp_db_version );		}		$blogs = $wpdb->get_results( "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' AND spam = '0' AND deleted = '0' AND archived = '0' ORDER BY registered DESC LIMIT {$n}, 5", ARRAY_A );		if ( empty( $blogs ) ) {			echo '<p>' . __( 'All done!' ) . '</p>';			break;		}		echo "<ul>";		foreach ( (array) $blogs as $details ) {			$siteurl = get_blog_option( $details['blog_id'], 'siteurl' );			echo "<li>$siteurl</li>";			$response = wp_remote_get( trailingslashit( $siteurl ) . "wp-admin/upgrade.php?step=upgrade_db", array( 'timeout' => 120, 'httpversion' => '1.1' ) );			if ( is_wp_error( $response ) )				wp_die( sprintf( __( 'Warning! Problem updating %1$s. Your server may not be able to connect to sites running on it. Error message: <em>%2$s</em>' ), $siteurl, $response->get_error_message() ) );			do_action( 'after_mu_upgrade', $response );			do_action( 'wpmu_upgrade_site', $details[ 'blog_id' ] );		}		echo "</ul>";		?><p><?php _e( 'If your browser doesn&#8217;t start loading the next page automatically, click this link:' ); ?> <a class="button" href="ms-upgrade-network.php?action=upgrade&amp;n=<?php echo ($n + 5) ?>"><?php _e("Next Sites"); ?></a></p>		<script type='text/javascript'>		<!--		function nextpage() {			location.href = "ms-upgrade-network.php?action=upgrade&n=<?php echo ($n + 5) ?>";		}		setTimeout( "nextpage()", 250 );		//-->		</script><?php	break;	case 'show':	default:		?><p><?php _e( 'You can update all the sites on your network through this page. It works by calling the update script of each site automatically. Hit the link below to update.' ); ?></p>		<p><a class="button" href="ms-upgrade-network.php?action=upgrade"><?php _e("Update Network"); ?></a></p><?php		do_action( 'wpmu_upgrade_page' );	break;}?></div><?php include('./admin-footer.php'); ?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );// Do not delete these lines	if (!empty($_SERVER['SCRIPT_FILENAME']) && 'comments.php' == basename($_SERVER['SCRIPT_FILENAME']))		die ('Please do not load this page directly. Thanks!');		if ( post_password_required() ) { ?>		<p class="nocomments"><?php _e('This post is password protected. Enter the password to view comments.'); ?></p> 	<?php		return;	}?><!-- You can start editing here. --><?php if ( have_comments() ) : ?>	<h3 id="comments"><?php	printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number() ),									number_format_i18n( get_comments_number() ), '&#8220;' . get_the_title() . '&#8221;' ); ?></h3>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div>	<ol class="commentlist">	<?php wp_list_comments();?>	</ol>	<div class="navigation">		<div class="alignleft"><?php previous_comments_link() ?></div>		<div class="alignright"><?php next_comments_link() ?></div>	</div> <?php else : // this is displayed if there are no comments so far ?>	<?php if ( comments_open() ) : ?>		<!-- If comments are open, but there are no comments. -->	 <?php else : // comments are closed ?>		<!-- If comments are closed. -->		<p class="nocomments"><?php _e('Comments are closed.'); ?></p>	<?php endif; ?><?php endif; ?><?php if ( comments_open() ) : ?><div id="respond"><h3><?php comment_form_title( __('Leave a Reply'), __('Leave a Reply to %s' ) ); ?></h3><div id="cancel-comment-reply"> 	<small><?php cancel_comment_reply_link() ?></small></div> <?php if ( get_option('comment_registration') && !is_user_logged_in() ) : ?><p><?php printf(__('You must be <a href="%s">logged in</a> to post a comment.'), wp_login_url( get_permalink() )); ?></p><?php else : ?><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( is_user_logged_in() ) : ?><p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>.'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity); ?> <a href="<?php echo wp_logout_url(get_permalink()); ?>" title="<?php _e('Log out of this account'); ?>"><?php _e('Log out &raquo;'); ?></a></p><?php else : ?><p><input type="text" name="author" id="author" value="<?php echo esc_attr($comment_author); ?>" size="22" tabindex="1" <?php if ($req) echo "aria-required='true'"; ?> /><label for="author"><small><?php _e('Name'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="22" tabindex="2" <?php if ($req) echo "aria-required='true'"; ?> /><label for="email"><small><?php _e('Mail (will not be published)'); ?> <?php if ($req) _e('(required)'); ?></small></label></p><p><input type="text" name="url" id="url" value="<?php echo  esc_attr($comment_author_url); ?>" size="22" tabindex="3" /><label for="url"><small><?php _e('Website'); ?></small></label></p><?php endif; ?><!--<p><small><?php printf(__('<strong>XHTML:</strong> You can use these tags: <code>%s</code>'), allowed_tags()); ?></small></p>--><p><textarea name="comment" id="comment" cols="58" rows="10" tabindex="4"></textarea></p><p><input name="submit" type="submit" id="submit" tabindex="5" value="<?php _e('Submit Comment'); ?>" /><?php comment_id_fields(); ?> </p><?php do_action('comment_form', $post->ID); ?></form><?php endif; // If registration required and not logged in ?></div><?php endif; // if you delete this the sky will fall on your head ?>
<?php/** * The custom header image script. * * @package WordPress * @subpackage Administration *//** * The custom header image class. * * @since 2.1.0 * @package WordPress * @subpackage Administration */class Custom_Image_Header {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since 2.1.0	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds default headers.	 *	 * @var array	 * @since 3.0.0	 * @access private	 */	var $default_headers = array();	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 2.1.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Image_Header	 */	function Custom_Image_Header($admin_header_callback, $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Header admin page.	 *	 * @since 2.1.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Header'), __('Header'), 'edit_theme_options', 'custom-header', array(&$this, 'admin_page'));		add_action("admin_print_scripts-$page", array(&$this, 'js_includes'));		add_action("admin_print_styles-$page", array(&$this, 'css_includes'));		add_action("admin_head-$page", array(&$this, 'help') );		add_action("admin_head-$page", array(&$this, 'take_action'), 50);		add_action("admin_head-$page", array(&$this, 'js'), 50);		add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Adds contextual help.	 *	 * @since 3.0.0	 */	function help() {		add_contextual_help( $this->page, '<p>' . __( 'You can set a custom image header for your site. Simply upload the image and crop it, and the new header will go live immediately.' ) . '</p>' .		'<p>' . __( 'If you want to discard your custom header and go back to the default included in your theme, click on the buttons to remove the custom image and restore the original header image.' ) . '</p>' .		'<p>' . __( 'Some themes come with additional header images bundled. If you see multiple images displayed, select the one you&#8217;d like and click the Save Changes button.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Header_SubPanel" target="_blank">Documentation on Custom Header</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );	}	/**	 * Get the current step.	 *	 * @since 2.6.0	 *	 * @return int Current step	 */	function step() {		if ( ! isset( $_GET['step'] ) )			return 1;		$step = (int) $_GET['step'];		if ( $step < 1 || 3 < $step )			$step = 1;		return $step;	}	/**	 * Set up the enqueue for the JavaScript files.	 *	 * @since 2.1.0	 */	function js_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_script('farbtastic');		elseif ( 2 == $step )			wp_enqueue_script('imgareaselect');	}	/**	 * Set up the enqueue for the CSS files	 *	 * @since 2.7	 */	function css_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_style('farbtastic');		elseif ( 2 == $step )			wp_enqueue_style('imgareaselect');	}	/**	 * Check if header text is allowed	 *	 * @since 3.0.0	 */	function header_text() {		if ( defined( 'NO_HEADER_TEXT' ) && NO_HEADER_TEXT )			return false;		return true;	}	/**	 * Execute custom header modification.	 *	 * @since 2.6.0	 */	function take_action() {		if ( ! current_user_can('edit_theme_options') )			return;		if ( empty( $_POST ) )			return;		$this->updated = true;		if ( isset( $_POST['resetheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod( 'header_image' );			return;		}		if ( isset( $_POST['resettext'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod('header_textcolor');			return;		}		if ( isset( $_POST['removeheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			set_theme_mod( 'header_image', '' );			return;		}		if ( isset( $_POST['text-color'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$_POST['text-color'] = str_replace( '#', '', $_POST['text-color'] );			if ( 'blank' == $_POST['text-color'] ) {				set_theme_mod( 'header_textcolor', 'blank' );			} else {				$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['text-color']);				if ( strlen($color) == 6 || strlen($color) == 3 )					set_theme_mod('header_textcolor', $color);			}		}		if ( isset($_POST['default-header']) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$this->process_default_headers();			if ( isset($this->default_headers[$_POST['default-header']]) )				set_theme_mod('header_image', esc_url($this->default_headers[$_POST['default-header']]['url']));		}	}	/**	 * Process the default headers	 *	 * @since 3.0.0	 */	function process_default_headers() {		global $_wp_default_headers;		if ( !empty($this->headers) )			return;		if ( !isset($_wp_default_headers) )			return;		$this->default_headers = $_wp_default_headers;		foreach ( array_keys($this->default_headers) as $header ) {			$this->default_headers[$header]['url'] =  sprintf( $this->default_headers[$header]['url'], get_template_directory_uri(), get_stylesheet_directory_uri() );			$this->default_headers[$header]['thumbnail_url'] =  sprintf( $this->default_headers[$header]['thumbnail_url'], get_template_directory_uri(), get_stylesheet_directory_uri() );		}	}	/**	 * Display UI for selecting one of several default headers.	 *	 * @since 3.0.0	 */	function show_default_header_selector() {		echo '<div id="available-headers">';		foreach ( $this->default_headers as $header_key => $header ) {			$header_thumbnail = $header['thumbnail_url'];			$header_url = $header['url'];			$header_desc = $header['description'];			echo '<div class="default-header">';			echo '<label><input name="default-header" type="radio" value="' . esc_attr($header_key) . '" ' . checked($header_url, get_theme_mod( 'header_image' ), false) . ' />';			echo '<img src="' . $header_thumbnail . '" alt="' . esc_attr($header_desc) .'" title="' . esc_attr($header_desc) .'" /></label>';			echo '</div>';		}		echo '<div class="clear"></div></div>';	}	/**	 * Execute Javascript depending on step.	 *	 * @since 2.1.0	 */	function js() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			$this->js_1();		elseif ( 2 == $step )			$this->js_2();	}	/**	 * Display Javascript based on Step 1 and 3.	 *	 * @since 2.6.0	 */	function js_1() { ?><script type="text/javascript">/* <![CDATA[ */	var text_objects = ['#name', '#desc', '#text-color-row'];	var farbtastic;	var default_color = '#<?php echo HEADER_TEXTCOLOR; ?>';	var old_color = null;	function pickColor(color) {		jQuery('#name').css('color', color);		jQuery('#desc').css('color', color);		jQuery('#text-color').val(color);		farbtastic.setColor(color);	}	function toggle_text(s) {		if (jQuery(s).attr('id') == 'showtext' && jQuery('#text-color').val() != 'blank')			return;		if (jQuery(s).attr('id') == 'hidetext' && jQuery('#text-color').val() == 'blank')			return;		if (jQuery('#text-color').val() == 'blank') {			//Show text			if (old_color == '#blank')				old_color = default_color;			jQuery( text_objects.toString() ).show();			jQuery('#text-color').val(old_color);			jQuery('#name').css('color', old_color);			jQuery('#desc').css('color', old_color);			pickColor(old_color);		} else {			//Hide text			jQuery( text_objects.toString() ).hide();			old_color = jQuery('#text-color').val();			jQuery('#text-color').val('blank');		}	}	jQuery(document).ready(function() {		jQuery('#pickcolor').click(function() {			jQuery('#color-picker').show();		});		jQuery('input[name="hidetext"]').click(function() {			toggle_text(this);		});		jQuery('#defaultcolor').click(function() {			pickColor(default_color);			jQuery('#text-color').val(default_color)		});		jQuery('#text-color').keyup(function() {			var _hex = jQuery('#text-color').val();			var hex = _hex;			if ( hex[0] != '#' )				hex = '#' + hex;			hex = hex.replace(/[^#a-fA-F0-9]+/, '');			if ( hex != _hex )				jQuery('#text-color').val(hex);			if ( hex.length == 4 || hex.length == 7 )				pickColor( hex );		});		jQuery(document).mousedown(function(){			jQuery('#color-picker').each( function() {				var display = jQuery(this).css('display');				if (display == 'block')					jQuery(this).fadeOut(2);			});		});		farbtastic = jQuery.farbtastic('#color-picker', function(color) { pickColor(color); });		<?php if ( $color = get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) ) { ?>		pickColor('#<?php echo $color; ?>');		<?php } ?>		<?php if ( 'blank' == get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() ) { ?>		toggle_text();		<?php } ?>		});</script><?php	}	/**	 * Display Javascript based on Step 2.	 *	 * @since 2.6.0	 */	function js_2() { ?><script type="text/javascript">/* <![CDATA[ */	function onEndCrop( coords ) {		jQuery( '#x1' ).val(coords.x);		jQuery( '#y1' ).val(coords.y);		jQuery( '#width' ).val(coords.w);		jQuery( '#height' ).val(coords.h);	}	jQuery(document).ready(function() {		var xinit = <?php echo HEADER_IMAGE_WIDTH; ?>;		var yinit = <?php echo HEADER_IMAGE_HEIGHT; ?>;		var ratio = xinit / yinit;		var ximg = jQuery('img#upload').width();		var yimg = jQuery('img#upload').height();		if ( yimg < yinit || ximg < xinit ) {			if ( ximg / yimg > ratio ) {				yinit = yimg;				xinit = yinit * ratio;			} else {				xinit = ximg;				yinit = xinit / ratio;			}		}		jQuery('img#upload').imgAreaSelect({			handles: true,			keys: true,			aspectRatio: xinit + ':' + yinit,			show: true,			x1: 0,			y1: 0,			x2: xinit,			y2: yinit,			maxHeight: <?php echo HEADER_IMAGE_HEIGHT; ?>,			maxWidth: <?php echo HEADER_IMAGE_WIDTH; ?>,			onInit: function () {				jQuery('#width').val(xinit);				jQuery('#height').val(yinit);			},			onSelectChange: function(img, c) {				jQuery('#x1').val(c.x1);				jQuery('#y1').val(c.y1);				jQuery('#width').val(c.width);				jQuery('#height').val(c.height);			}		});	});/* ]]> */</script><?php	}	/**	 * Display first step of custom header image page.	 *	 * @since 2.1.0	 */	function step_1() {		$this->process_default_headers();?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Custom Header'); ?></h2><?php if ( ! empty( $this->updated ) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Header updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php } ?><h3><?php _e( 'Header Image' ) ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e( 'Preview' ); ?></th><td >	<?php if ( $this->admin_image_div_callback ) {	  call_user_func( $this->admin_image_div_callback );	} else {	?>	<div id="headimg" style="max-width:<?php echo HEADER_IMAGE_WIDTH; ?>px;height:<?php echo HEADER_IMAGE_HEIGHT; ?>px;background-image:url(<?php esc_url ( header_image() ) ?>);">		<?php		if ( 'blank' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() )			$style = ' style="display:none;"';		else			$style = ' style="color:#' . get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) . ';"';		?>		<h1><a id="name"<?php echo $style; ?> onclick="return false;" href="<?php bloginfo('url'); ?>"><?php bloginfo( 'name' ); ?></a></h1>		<div id="desc"<?php echo $style; ?>><?php bloginfo( 'description' ); ?></div>	</div>	<?php } ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'Upload Image' ); ?></th><td>	<p><?php _e( 'You can upload a custom header image to be shown at the top of your site instead of the default one. On the next screen you will be able to crop the image.' ); ?><br />	<?php printf( __( 'Images of exactly <strong>%1$d &times; %2$d pixels</strong> will be used as-is.' ), HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT ); ?></p>	<form enctype="multipart/form-data" id="upload-form" method="post" action="<?php echo esc_attr( add_query_arg( 'step', 2 ) ) ?>">	<p>		<label for="upload"><?php _e( 'Choose an image from your computer:' ); ?></label><br />		<input type="file" id="upload" name="import" />		<input type="hidden" name="action" value="save" />		<?php wp_nonce_field( 'custom-header-upload', '_wpnonce-custom-header-upload' ) ?>		<input type="submit" class="button" value="<?php esc_attr_e( 'Upload' ); ?>" />	</p>	</form></td></tr></tbody></table><form method="post" action="<?php echo esc_attr( add_query_arg( 'step', 1 ) ) ?>"><table class="form-table"><tbody>	<?php if ( ! empty( $this->default_headers ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Default Images' ); ?></th><td>	<p><?php _e( 'If you don&lsquo;t want to upload your own image, you can use one of these cool headers.' ) ?></p>	<?php		$this->show_default_header_selector();	?></td></tr>	<?php endif;	if ( get_header_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Remove Image' ); ?></th><td>	<p><?php _e( 'This will remove the header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="removeheader" value="<?php esc_attr_e( 'Remove Header Image' ); ?>" /></td></tr>	<?php endif;	if ( defined( 'HEADER_IMAGE' ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Reset Image' ); ?></th><td>	<p><?php _e( 'This will restore the original header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resetheader" value="<?php esc_attr_e( 'Restore Original Header Image' ); ?>" /></td></tr>	<?php endif; ?></tbody></table>	<?php if ( $this->header_text() ) : ?><h3><?php _e( 'Header Text' ) ?></h3><table class="form-table"><tbody><tr valign="top" class="hide-if-no-js"><th scope="row"><?php _e( 'Display Text' ); ?></th><td>	<p>	<?php $hidetext = get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ); ?>	<label><input type="radio" value="1" name="hidetext" id="hidetext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) )  ? true : false ); ?> /> <?php _e( 'No' ); ?></label>	<label><input type="radio" value="0" name="hidetext" id="showtext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) ) ? false : true ); ?> /> <?php _e( 'Yes' ); ?></label>	</p></td></tr><tr valign="top" id="text-color-row"><th scope="row"><?php _e( 'Text Color' ); ?></th><td>	<p>		<input type="text" name="text-color" id="text-color" value="#<?php echo esc_attr( get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) ); ?>" />		<span class="description hide-if-js"><?php _e( 'If you want to hide header text, add <strong>#blank</strong> as text color.' );?></span>		<input type="button" class="button hide-if-no-js" value="<?php esc_attr_e( 'Select a Color' ); ?>" id="pickcolor" />	</p>	<div id="color-picker" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></td></tr>	<?php if ( defined('HEADER_TEXTCOLOR') && get_theme_mod('header_textcolor') ) { ?><tr valign="top"><th scope="row"><?php _e('Reset Text Color'); ?></th><td>	<p><?php _e( 'This will restore the original header text. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resettext" value="<?php esc_attr_e( 'Restore Original Header Text' ); ?>" /></td></tr>	<?php } ?></tbody></table>	<?php endif;wp_nonce_field( 'custom-header-options', '_wpnonce-custom-header-options' ); ?><p class="submit"><input type="submit" class="button-primary" name="save-header-options" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php }	/**	 * Display second step of custom header image page.	 *	 * @since 2.1.0	 */	function step_2() {		check_admin_referer('custom-header-upload', '_wpnonce-custom-header-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'],  __( 'Image Upload Error' ) );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(		'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url);		// Save the data		$id = wp_insert_attachment($object, $file);		list($width, $height, $type, $attr) = getimagesize( $file );		if ( $width == HEADER_IMAGE_WIDTH && $height == HEADER_IMAGE_HEIGHT ) {			// Add the meta-data			wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );			set_theme_mod('header_image', esc_url($url));			do_action('wp_create_file_in_uploads', $file, $id); // For replication			return $this->finished();		} elseif ( $width > HEADER_IMAGE_WIDTH ) {			$oitar = $width / HEADER_IMAGE_WIDTH;			$image = wp_crop_image($file, 0, 0, $width, $height, HEADER_IMAGE_WIDTH, $height / $oitar, false, str_replace(basename($file), 'midsize-'.basename($file), $file));			if ( is_wp_error( $image ) )				wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );			$image = apply_filters('wp_create_file_in_uploads', $image, $id); // For replication			$url = str_replace(basename($url), basename($image), $url);			$width = $width / $oitar;			$height = $height / $oitar;		} else {			$oitar = 1;		}		?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Crop Header Image' ); ?></h2><form method="post" action="<?php echo esc_attr(add_query_arg('step', 3)); ?>">	<p class="hide-if-no-js"><?php _e('Choose the part of the image you want to use as your header.'); ?></p>	<p class="hide-if-js"><strong><?php _e( 'You need Javascript to choose a part of the image.'); ?></strong></p>	<div id="crop_image" style="position: relative">		<img src="<?php echo esc_url( $url ); ?>" id="upload" width="<?php echo $width; ?>" height="<?php echo $height; ?>" />	</div>	<p class="submit">	<input type="hidden" name="x1" id="x1" value="0"/>	<input type="hidden" name="y1" id="y1" value="0"/>	<input type="hidden" name="width" id="width" value="<?php echo esc_attr( $width ); ?>"/>	<input type="hidden" name="height" id="height" value="<?php echo esc_attr( $height ); ?>"/>	<input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr( $id ); ?>" />	<input type="hidden" name="oitar" id="oitar" value="<?php echo esc_attr( $oitar ); ?>" />	<?php wp_nonce_field( 'custom-header-crop-image' ) ?>	<input type="submit" class="button-primary" value="<?php esc_attr_e( 'Crop and Publish' ); ?>" />	</p></form></div>		<?php	}	/**	 * Display third step of custom header image page.	 *	 * @since 2.1.0	 */	function step_3() {		check_admin_referer('custom-header-crop-image');		if ( $_POST['oitar'] > 1 ) {			$_POST['x1'] = $_POST['x1'] * $_POST['oitar'];			$_POST['y1'] = $_POST['y1'] * $_POST['oitar'];			$_POST['width'] = $_POST['width'] * $_POST['oitar'];			$_POST['height'] = $_POST['height'] * $_POST['oitar'];		}		$original = get_attached_file( $_POST['attachment_id'] );		$cropped = wp_crop_image($_POST['attachment_id'], $_POST['x1'], $_POST['y1'], $_POST['width'], $_POST['height'], HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT);		if ( is_wp_error( $cropped ) )			wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );		$cropped = apply_filters('wp_create_file_in_uploads', $cropped, $_POST['attachment_id']); // For replication		$parent = get_post($_POST['attachment_id']);		$parent_url = $parent->guid;		$url = str_replace(basename($parent_url), basename($cropped), $parent_url);		// Construct the object array		$object = array(			'ID' => $_POST['attachment_id'],			'post_title' => basename($cropped),			'post_content' => $url,			'post_mime_type' => 'image/jpeg',			'guid' => $url		);		// Update the attachment		wp_insert_attachment($object, $cropped);		wp_update_attachment_metadata( $_POST['attachment_id'], wp_generate_attachment_metadata( $_POST['attachment_id'], $cropped ) );		set_theme_mod('header_image', $url);		// cleanup		$medium = str_replace(basename($original), 'midsize-'.basename($original), $original);		@unlink( apply_filters( 'wp_delete_file', $medium ) );		@unlink( apply_filters( 'wp_delete_file', $original ) );		return $this->finished();	}	/**	 * Display last step of custom header image page.	 *	 * @since 2.1.0	 */	function finished() {		$this->updated = true;		$this->step_1();	}	/**	 * Display the page based on the current step.	 *	 * @since 2.1.0	 */	function admin_page() {		if ( ! current_user_can('edit_theme_options') )			wp_die(__('You do not have permission to customize headers.'));		$step = $this->step();		if ( 1 == $step )			$this->step_1();		elseif ( 2 == $step )			$this->step_2();		elseif ( 3 == $step )			$this->step_3();	}}?>
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
<?php/** * Sets up the default filters and actions for Multisite. * * If you need to remove a default hook, this file will give you the priority * for which to use to remove the hook. * * Not all of the Multisite default hooks are found in ms-default-filters.php * * @package WordPress * @subpackage Multisite * @see default-filters.php * @since 3.0.0 */// Usersadd_filter( 'wpmu_validate_user_signup', 'signup_nonce_check' );add_action( 'init', 'maybe_add_existing_user_to_blog' );add_action( 'wpmu_new_user', 'newuser_notify_siteadmin' );add_action( 'wpmu_activate_user', 'add_new_user_to_blog', 10, 3 );add_action( 'sanitize_user', 'strtolower' );// Blogsadd_filter( 'wpmu_validate_blog_signup', 'signup_nonce_check' );add_action( 'wpmu_new_blog', 'wpmu_log_new_registrations', 10, 2 );add_action( 'wpmu_new_blog', 'newblog_notify_siteadmin', 10, 2 );// Register Nonceadd_action( 'signup_hidden_fields', 'signup_nonce_fields' );// Templateadd_action( 'template_redirect', 'maybe_redirect_404' );add_filter( 'allowed_redirect_hosts', 'redirect_this_site' );// Administrationadd_filter( 'term_id_filter', 'global_terms', 10, 2 );add_action( 'publish_post', 'update_posts_count' );add_action( 'delete_post', 'wpmu_update_blogs_date' );add_action( 'private_to_published', 'wpmu_update_blogs_date' );add_action( 'publish_phone', 'wpmu_update_blogs_date' );add_action( 'publish_post', 'wpmu_update_blogs_date' );// Filesadd_filter( 'wp_upload_bits', 'upload_is_file_too_big' );add_filter( 'import_upload_size_limit', 'fix_import_form_size' );add_filter( 'upload_mimes', 'check_upload_mimes' );add_filter( 'upload_size_limit', 'upload_size_limit_filter' );// Mailadd_filter( 'wp_mail_from', 'wordpressmu_wp_mail_from' );add_action( 'phpmailer_init', 'fix_phpmailer_messageid' );// Disable somethings by default for multisiteadd_filter( 'enable_update_services_configuration', '__return_false' );if ( ! defined('POST_BY_EMAIL') || ! POST_BY_EMAIL ) // back compat constant.	add_filter( 'enable_post_by_email_configuration', '__return_false' );if ( ! defined('EDIT_ANY_USER') || ! EDIT_ANY_USER ) // back compat constant.	add_filter( 'enable_edit_any_user_configuration', '__return_false' );// WP_HOME and WP_SITEURL should not have any effect in MSremove_filter( 'option_siteurl', '_config_wp_siteurl' );remove_filter( 'option_home',    '_config_wp_home'    );?>
<?php/** * Handle Trackbacks and Pingbacks sent to WordPress * * @package WordPress */if (empty($wp)) {	require_once('./wp-load.php');	wp( array( 'tb' => '1' ) );}/** * trackback_response() - Respond with error or success XML message * * @param int|bool $error Whether there was an error * @param string $error_message Error message if an error occurred */function trackback_response($error = 0, $error_message = '') {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ($error) {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>1</error>\n";		echo "<message>$error_message</message>\n";		echo "</response>";		die();	} else {		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";		echo "<response>\n";		echo "<error>0</error>\n";		echo "</response>";	}}// trackback is done by a POST$request_array = 'HTTP_POST_VARS';if ( !isset($_GET['tb_id']) || !$_GET['tb_id'] ) {	$tb_id = explode('/', $_SERVER['REQUEST_URI']);	$tb_id = intval( $tb_id[ count($tb_id) - 1 ] );}$tb_url  = isset($_POST['url'])     ? $_POST['url']     : '';$charset = isset($_POST['charset']) ? $_POST['charset'] : '';// These three are stripslashed here so that they can be properly escaped after mb_convert_encoding()$title     = isset($_POST['title'])     ? stripslashes($_POST['title'])      : '';$excerpt   = isset($_POST['excerpt'])   ? stripslashes($_POST['excerpt'])    : '';$blog_name = isset($_POST['blog_name']) ? stripslashes($_POST['blog_name'])  : '';if ($charset)	$charset = str_replace( array(',', ' '), '', strtoupper( trim($charset) ) );else	$charset = 'ASCII, UTF-8, ISO-8859-1, JIS, EUC-JP, SJIS';// No valid uses for UTF-7if ( false !== strpos($charset, 'UTF-7') )	die;if ( function_exists('mb_convert_encoding') ) { // For international trackbacks	$title     = mb_convert_encoding($title, get_option('blog_charset'), $charset);	$excerpt   = mb_convert_encoding($excerpt, get_option('blog_charset'), $charset);	$blog_name = mb_convert_encoding($blog_name, get_option('blog_charset'), $charset);}// Now that mb_convert_encoding() has been given a swing, we need to escape these three$title     = $wpdb->escape($title);$excerpt   = $wpdb->escape($excerpt);$blog_name = $wpdb->escape($blog_name);if ( is_single() || is_page() )	$tb_id = $posts[0]->ID;if ( !isset($tb_id) || !intval( $tb_id ) )	trackback_response(1, 'I really need an ID for this to work.');if (empty($title) && empty($tb_url) && empty($blog_name)) {	// If it doesn't look like a trackback at all...	wp_redirect(get_permalink($tb_id));	exit;}if ( !empty($tb_url) && !empty($title) ) {	header('Content-Type: text/xml; charset=' . get_option('blog_charset') );	if ( !pings_open($tb_id) )		trackback_response(1, 'Sorry, trackbacks are closed for this item.');	$title =  wp_html_excerpt( $title, 250 ).'...';	$excerpt = wp_html_excerpt( $excerpt, 252 ).'...';	$comment_post_ID = (int) $tb_id;	$comment_author = $blog_name;	$comment_author_email = '';	$comment_author_url = $tb_url;	$comment_content = "<strong>$title</strong>\n\n$excerpt";	$comment_type = 'trackback';	$dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $comment_post_ID, $comment_author_url) );	if ( $dupe )		trackback_response(1, 'We already have a ping from that URL for this post.');	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type');	wp_new_comment($commentdata);	do_action('trackback_post', $wpdb->insert_id);	trackback_response(0);}?>
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function home_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;require(ABSPATH . WPINC . '/script-loader.php');require(ABSPATH . WPINC . '/version.php');$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$expires_offset = 31536000;$out = '';$wp_scripts = new WP_Scripts();wp_default_scripts($wp_scripts);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_scripts->registered) )		continue;	$path = ABSPATH . $wp_scripts->registered[$handle]->src;	$out .= get_file($path) . "\n";}header('Content-Type: application/x-javascript; charset=UTF-8');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?phpif ( !class_exists( 'SimplePie' ) ) :/** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize =& new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize =& new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file =& new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file =& new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate =& new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer =& new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser =& new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file =& new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer =& new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] =& new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						$seconds = (int) array_pop($temp);					}					if (sizeof($temp) > 0)					{						$minutes = (int) array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						$hours = (int) array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser =& new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser =& new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder =& new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri =& new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri =& new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri =& new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri =& new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder =& new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '') {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative =& new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target =& new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object =& new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed =& new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else {			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml =& new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file =& new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}endif;?>
<?php/** * Simple and uniform HTTP request API. * * Will eventually replace and standardize the WordPress HTTP requests made. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * Returns the initialized WP_Http Object * * @since 2.7.0 * @access private * * @return WP_Http HTTP Transport object. */function &_wp_http_get_object() {	static $http;	if ( is_null($http) )		$http = new WP_Http();	return $http;}/** * Retrieve the raw response from the HTTP request. * * The array structure is a little complex. * * <code> * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) ); * </code> * * All of the headers in $res['headers'] are with the name as the key and the * value as the value. So to get the User-Agent, you would do the following. * * <code> * $user_agent = $res['headers']['user-agent']; * </code> * * The body is the raw response content and can be retrieved from $res['body']. * * This function is called first to make the request and there are other API * functions to abstract out the above convoluted setup. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_request($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->request($url, $args);}/** * Retrieve the raw response from the HTTP request using the GET method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_get($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->get($url, $args);}/** * Retrieve the raw response from the HTTP request using the POST method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_post($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->post($url, $args);}/** * Retrieve the raw response from the HTTP request using the HEAD method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_head($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->head($url, $args);}/** * Retrieve only the headers from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return array The headers of the response. Empty array if incorrect parameter given. */function wp_remote_retrieve_headers(&$response) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return array();	return $response['headers'];}/** * Retrieve a single header by name from the raw response. * * @since 2.7.0 * * @param array $response * @param string $header Header name to retrieve value from. * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. */function wp_remote_retrieve_header(&$response, $header) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return '';	if ( array_key_exists($header, $response['headers']) )		return $response['headers'][$header];	return '';}/** * Retrieve only the response code from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string the response code. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_code(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['code'];}/** * Retrieve only the response message from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The response message. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_message(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['message'];}/** * Retrieve only the body from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The body of the response. Empty string if no body or incorrect parameter given. */function wp_remote_retrieve_body(&$response) {	if ( is_wp_error($response) || ! isset($response['body']) )		return '';	return $response['body'];}?>
<?php/** * Author Template functions for use in themes. * * These functions must be used within the WordPress Loop. * * @link http://codex.wordpress.org/Author_Templates * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current post. * * @since 1.5 * @uses $authordata The current author's DB object. * @uses apply_filters() Calls 'the_author' hook on the author display name. * * @param string $deprecated Deprecated. * @return string The author's display name. */function get_the_author($deprecated = '') {	global $authordata;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	return apply_filters('the_author', is_object($authordata) ? $authordata->display_name : null);}/** * Display the name of the author of the current post. * * The behavior of this function is based off of old functionality predating * get_the_author(). This function is not deprecated, but is designed to echo * the value from get_the_author() and as an result of any old theme that might * still use the old behavior will also pass the value from get_the_author(). * * The normal, expected behavior of this function is to echo the author and not * return it. However, backwards compatiability has to be maintained. * * @since 0.71 * @see get_the_author() * @link http://codex.wordpress.org/Template_Tags/the_author * * @param string $deprecated Deprecated. * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. * @return string The author's display name, from get_the_author(). */function the_author( $deprecated = '', $deprecated_echo = true ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '1.5', __('Use <code>get_the_author()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_the_author();	return get_the_author();}/** * Retrieve the author who last edited the current post. * * @since 2.8 * @uses $post The current post's DB object. * @uses get_post_meta() Retrieves the ID of the author who last edited the current post. * @uses get_userdata() Retrieves the author's DB object. * @uses apply_filters() Calls 'the_modified_author' hook on the author display name. * @return string The author's display name. */function get_the_modified_author() {	global $post;	if ( $last_id = get_post_meta($post->ID, '_edit_last', true) ) {		$last_user = get_userdata($last_id);		return apply_filters('the_modified_author', $last_user->display_name);	}}/** * Display the name of the author who last edited the current post. * * @since 2.8 * @see get_the_author() * @return string The author's display name, from get_the_modified_author(). */function the_modified_author() {	echo get_the_modified_author();}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @uses $authordata The current author's DB object (if $user_id not specified). * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @return string The author's field from the current author's DB object. */function get_the_author_meta($field = '', $user_id = false) {	if ( ! $user_id )		global $authordata;	else		$authordata = get_userdata( $user_id );	$field = strtolower($field);	$user_field = "user_$field";	if ( 'id' == $field )		$value = isset($authordata->ID) ? (int)$authordata->ID : 0;	elseif ( isset($authordata->$user_field) )		$value = $authordata->$user_field;	else		$value = isset($authordata->$field) ? $authordata->$field : '';	return apply_filters('get_the_author_' . $field, $value, $user_id);}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @echo string The author's field from the current author's DB object. */function the_author_meta($field = '', $user_id = false) {	echo apply_filters('the_author_' . $field, get_the_author_meta($field, $user_id), $user_id);}/** * Retrieve either author's link or author's name. * * If the author has a home page set, return an HTML link, otherwise just return the * author's name. * * @uses get_the_author_meta() * @uses get_the_author() */function get_the_author_link() {	if ( get_the_author_meta('url') ) {		return '<a href="' . get_the_author_meta('url') . '" title="' . esc_attr( sprintf(__("Visit %s&#8217;s website"), get_the_author()) ) . '" rel="external">' . get_the_author() . '</a>';	} else {		return get_the_author();	}}/** * Display either author's link or author's name. * * If the author has a home page set, echo an HTML link, otherwise just echo the * author's name. * * @link http://codex.wordpress.org/Template_Tags/the_author_link * @since 2.1 * @uses get_the_author_link() */function the_author_link() {	echo get_the_author_link();}/** * Retrieve the number of posts by the author of the current post. * * @since 1.5 * @uses $post The current post in the Loop's DB object. * @uses count_user_posts() * @return int The number of posts by the author. */function get_the_author_posts() {	global $post;	return count_user_posts($post->post_author);}/** * Display the number of posts by the author of the current post. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts * @since 0.71 * @uses get_the_author_posts() Echoes returned value from function. */function the_author_posts() {	echo get_the_author_posts();}/** * Display an HTML link to the author page of the author of the current post. * * Does just echo get_author_posts_url() function, like the others do. The * reason for this, is that another function is used to help in printing the * link to the author's posts. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts_link * @since 1.2.0 * @uses $authordata The current author's DB object. * @uses get_author_posts_url() * @uses get_the_author() * @param string $deprecated Deprecated. */function the_author_posts_link($deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	global $authordata;	$link = sprintf(		'<a href="%1$s" title="%2$s">%3$s</a>',		get_author_posts_url( $authordata->ID, $authordata->user_nicename ),		esc_attr( sprintf( __( 'Posts by %s' ), get_the_author() ) ),		get_the_author()	);	echo apply_filters( 'the_author_posts_link', $link );}/** * Retrieve the URL to the author page of the author of the current post. * * @since 2.1.0 * @uses $wp_rewrite WP_Rewrite * @return string The URL to the author's page. */function get_author_posts_url($author_id, $author_nicename = '') {	global $wp_rewrite;	$auth_ID = (int) $author_id;	$link = $wp_rewrite->get_author_permastruct();	if ( empty($link) ) {		$file = home_url() . '/';		$link = $file . '?author=' . $auth_ID;	} else {		if ( '' == $author_nicename ) {			$user = get_userdata($author_id);			if ( !empty($user->user_nicename) )				$author_nicename = $user->user_nicename;		}		$link = str_replace('%author%', $author_nicename, $link);		$link = home_url() . trailingslashit($link);	}	$link = apply_filters('author_link', $link, $author_id, $author_nicename);	return $link;}/** * List all the authors of the blog, with several options available. * * <ul> * <li>optioncount (boolean) (false): Show the count in parenthesis next to the * author's name.</li> * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is * installed bydefault.</li> * <li>show_fullname (boolean) (false): Show their full names.</li> * <li>hide_empty (boolean) (true): Don't show authors without any posts.</li> * <li>feed (string) (''): If isn't empty, show links to author's feeds.</li> * <li>feed_image (string) (''): If isn't empty, use this image to link to * feeds.</li> * <li>echo (boolean) (true): Set to false to return the output, instead of * echoing.</li> * <li>style (string) ('list'): Whether to display list of authors in list form * or as a string.</li> * <li>html (bool) (true): Whether to list the items in html for or plaintext. * </li> * </ul> * * @link http://codex.wordpress.org/Template_Tags/wp_list_authors * @since 1.2.0 * @param array $args The argument array. * @return null|string The output, if echo is set to false. */function wp_list_authors($args = '') {	global $wpdb;	$defaults = array(		'optioncount' => false, 'exclude_admin' => true,		'show_fullname' => false, 'hide_empty' => true,		'feed' => '', 'feed_image' => '', 'feed_type' => '', 'echo' => true,		'style' => 'list', 'html' => true	);	$r = wp_parse_args( $args, $defaults );	extract($r, EXTR_SKIP);	$return = '';	/** @todo Move select to get_authors(). */	$users = get_users_of_blog();	$author_ids = array();	foreach ( (array) $users as $user )		$author_ids[] = $user->user_id;	if ( count($author_ids) > 0  ) {		$author_ids = implode(',', $author_ids );		$authors = $wpdb->get_results( "SELECT ID, user_nicename from $wpdb->users WHERE ID IN($author_ids) " . ($exclude_admin ? "AND user_login <> 'admin' " : '') . "ORDER BY display_name" );	} else {		$authors = array();	}	$author_count = array();	foreach ( (array) $wpdb->get_results("SELECT DISTINCT post_author, COUNT(ID) AS count FROM $wpdb->posts WHERE post_type = 'post' AND " . get_private_posts_cap_sql( 'post' ) . " GROUP BY post_author") as $row )		$author_count[$row->post_author] = $row->count;	foreach ( (array) $authors as $author ) {		$link = '';		$author = get_userdata( $author->ID );		$posts = (isset($author_count[$author->ID])) ? $author_count[$author->ID] : 0;		$name = $author->display_name;		if ( $show_fullname && ($author->first_name != '' && $author->last_name != '') )			$name = "$author->first_name $author->last_name";		if( !$html ) {			if ( $posts == 0 ) {				if ( ! $hide_empty )					$return .= $name . ', ';			} else				$return .= $name . ', ';			// No need to go further to process HTML.			continue;		}		if ( !($posts == 0 && $hide_empty) && 'list' == $style )			$return .= '<li>';		if ( $posts == 0 ) {			if ( ! $hide_empty )				$link = $name;		} else {			$link = '<a href="' . get_author_posts_url($author->ID, $author->user_nicename) . '" title="' . esc_attr( sprintf(__("Posts by %s"), $author->display_name) ) . '">' . $name . '</a>';			if ( (! empty($feed_image)) || (! empty($feed)) ) {				$link .= ' ';				if (empty($feed_image))					$link .= '(';				$link .= '<a href="' . get_author_feed_link($author->ID) . '"';				if ( !empty($feed) ) {					$title = ' title="' . esc_attr($feed) . '"';					$alt = ' alt="' . esc_attr($feed) . '"';					$name = $feed;					$link .= $title;				}				$link .= '>';				if ( !empty($feed_image) )					$link .= "<img src=\"" . esc_url($feed_image) . "\" style=\"border: none;\"$alt$title" . ' />';				else					$link .= $name;				$link .= '</a>';				if ( empty($feed_image) )					$link .= ')';			}			if ( $optioncount )				$link .= ' ('. $posts . ')';		}		if ( $posts || ! $hide_empty )			$return .= $link . ( ( 'list' == $style ) ? '</li>' : ', ' );	}	$return = trim($return, ', ');	if ( ! $echo )		return $return;	echo $return;}?>
<?phpif ( !defined('ABSPATH') )	exit;require(ABSPATH . 'wp-includes/version.php');$man_version = md5( $tinymce_version . $manifest_version );$mce_ver = "ver=$tinymce_version";/** * Retrieve list of all cacheable WP files * * Array format: file, version (optional), bool (whether to use src and set ignoreQuery, defaults to true) */function &get_manifest() {	global $mce_ver;	$files = array(		array('images/align-center.png'),		array('images/align-left.png'),		array('images/align-none.png'),		array('images/align-right.png'),		array('images/archive-link.png'),		array('images/blue-grad.png'),		array('images/bubble_bg.gif'),		array('images/bubble_bg-rtl.gif'),		array('images/button-grad.png'),		array('images/button-grad-active.png'),		array('images/comment-grey-bubble.png'),		array('images/date-button.gif'),		array('images/ed-bg.gif'),		array('images/fade-butt.png'),		array('images/fav.png'),		array('images/fav-arrow.gif'),		array('images/fav-arrow-rtl.gif'),		array('images/generic.png'),		array('images/gray-grad.png'),		array('images/icons32.png'),		array('images/icons32-vs.png'),		array('images/list.png'),		array('images/list-vs.png'),		array('images/wpspin_light.gif'),		array('images/wpspin_dark.gif'),		array('images/logo.gif'),		array('images/logo-ghost.png'),		array('images/logo-login.gif'),		array('images/media-button-image.gif'),		array('images/media-button-music.gif'),		array('images/media-button-other.gif'),		array('images/media-button-video.gif'),		array('images/menu.png'),		array('images/menu-vs.png'),		array('images/menu-arrows.gif'),		array('images/menu-bits.gif'),		array('images/menu-bits-rtl.gif'),		array('images/menu-dark.gif'),		array('images/menu-dark-rtl.gif'),		array('images/no.png'),		array('images/required.gif'),		array('images/resize.gif'),		array('images/screen-options-right.gif'),		array('images/screen-options-right-up.gif'),		array('images/se.png'),		array('images/star.gif'),		array('images/toggle-arrow.gif'),		array('images/toggle-arrow-rtl.gif'),		array('images/white-grad.png'),		array('images/white-grad-active.png'),		array('images/wordpress-logo.png'),		array('images/wp-logo.png'),		array('images/xit.gif'),		array('images/yes.png'),		array('../wp-includes/images/crystal/archive.png'),		array('../wp-includes/images/crystal/audio.png'),		array('../wp-includes/images/crystal/code.png'),		array('../wp-includes/images/crystal/default.png'),		array('../wp-includes/images/crystal/document.png'),		array('../wp-includes/images/crystal/interactive.png'),		array('../wp-includes/images/crystal/text.png'),		array('../wp-includes/images/crystal/video.png'),		array('../wp-includes/images/crystal/spreadsheet.png'),		array('../wp-includes/images/rss.png'),		array('../wp-includes/images/blank.gif'),		array('../wp-includes/images/upload.png'),		array('../wp-includes/js/thickbox/loadingAnimation.gif'),		array('../wp-includes/js/thickbox/tb-close.png'),	);	if ( @is_file('../wp-includes/js/tinymce/tiny_mce.js') ) :	$mce = array(		array('../wp-includes/js/tinymce/wp-tinymce.php', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce.js', $mce_ver),		array('../wp-includes/js/tinymce/langs/wp-langs-en.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/mctabs.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/validate.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/form_utils.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/editable_selects.js', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce_popup.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/editor_template.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/source_editor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/anchor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/image.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/link.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/color_picker.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/charmap.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/color_picker.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/charmap.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/image.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/link.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/source_editor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/anchor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/ui.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/content.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/dialog.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/fullscreen.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/template.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/window.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/js/media.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/media.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/media.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pasteword.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pastetext.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pasteword.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/blank.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pastetext.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/safari/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/tabfocus/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editimage.html', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/js/editimage.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage-rtl.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpgallery/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/img/icons.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/colorpicker.jpg'),		array('../wp-includes/js/tinymce/themes/advanced/img/fm.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/gotmoxie.png'),		array('../wp-includes/js/tinymce/themes/advanced/img/sflogo.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/butt2.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/fade-butt.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/tabs.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/down_arrow.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/progress.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_check.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_arrow.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/drag.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/corners.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/buttons.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/horizontal.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/alert.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/button.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/confirm.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/vertical.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flash.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flv_player.swf'),		array('../wp-includes/js/tinymce/plugins/media/img/quicktime.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/realmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/shockwave.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/windowsmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/trans.gif'),		array('../wp-includes/js/tinymce/plugins/spellchecker/img/wline.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/toolbars.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/help.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/image.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/media.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/video.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/audio.gif'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/image.png'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/edit.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/gallery.png')	);	$files = array_merge($files, $mce);	endif;	return $files;}
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * WordPress Options Header. * * Resets variables: 'action', 'standalone', and 'option_group_id'. Displays * updated message, if updated variable is part of the URL query. * * @package WordPress * @subpackage Administration */wp_reset_vars(array('action', 'standalone', 'option_group_id'));settings_errors();?>
<?phpfunction mce_put_file( $path, $content ) {	if ( function_exists('file_put_contents') )		return @file_put_contents( $path, $content );	$newfile = false;	$fp = @fopen( $path, 'wb' );	if ($fp) {		$newfile = fwrite( $fp, $content );		fclose($fp);	}	return $newfile;}// escape text only if it needs translatingfunction mce_escape($text) {	global $language;	if ( 'en' == $language ) return $text;	else return esc_js($text);}$lang = 'tinyMCE.addI18n({' . $language . ':{common:{edit_confirm:"' . mce_escape( __('Do you want to use the WYSIWYG mode for this textarea?') ) . '",apply:"' . mce_escape( __('Apply') ) . '",insert:"' . mce_escape( __('Insert') ) . '",update:"' . mce_escape( __('Update') ) . '",cancel:"' . mce_escape( __('Cancel') ) . '",close:"' . mce_escape( __('Close') ) . '",browse:"' . mce_escape( __('Browse') ) . '",class_name:"' . mce_escape( __('Class') ) . '",not_set:"' . mce_escape( __('-- Not set --') ) . '",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",clipboard_no_support:"' . mce_escape( __('Currently not supported by your browser, use keyboard shortcuts instead.') ) . '",popup_blocked:"' . mce_escape( __('Sorry, but we have noticed that your popup-blocker has disabled a window that provides application functionality. You will need to disable popup blocking on this site in order to fully utilize this tool.') ) . '",invalid_data:"' . mce_escape( __('Error: Invalid values entered, these are marked in red.') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '"},contextmenu:{align:"' . mce_escape( /* translators: alignment */ __('Alignment') ) . '",left:"' . mce_escape( /* translators: alignment */ __('Left') ) . '",center:"' . mce_escape( /* translators: alignment */ __('Center') ) . '",right:"' . mce_escape( /* translators: alignment */ __('Right') ) . '",full:"' . mce_escape( /* translators: alignment */ __('Full') ) . '"},insertdatetime:{date_fmt:"' . mce_escape( /* translators: year, month, date */ __('%Y-%m-%d') ) . '",time_fmt:"' . mce_escape( /* translators: hours, minutes, seconds */ __('%H:%M:%S') ) . '",insertdate_desc:"' . mce_escape( __('Insert date') ) . '",inserttime_desc:"' . mce_escape( __('Insert time') ) . '",months_long:"' . mce_escape( __('January').','.__('February').','.__('March').','.__('April').','.__('May').','.__('June').','.__('July').','.__('August').','.__('September').','.__('October').','.__('November').','.__('December') ) . '",months_short:"' . mce_escape( __('Jan_January_abbreviation').','.__('Feb_February_abbreviation').','.__('Mar_March_abbreviation').','.__('Apr_April_abbreviation').','.__('May_May_abbreviation').','.__('Jun_June_abbreviation').','.__('Jul_July_abbreviation').','.__('Aug_August_abbreviation').','.__('Sep_September_abbreviation').','.__('Oct_October_abbreviation').','.__('Nov_November_abbreviation').','.__('Dec_December_abbreviation') ) . '",day_long:"' . mce_escape( __('Sunday').','.__('Monday').','.__('Tuesday').','.__('Wednesday').','.__('Thursday').','.__('Friday').','.__('Saturday') ) . '",day_short:"' . mce_escape( __('Sun').','.__('Mon').','.__('Tue').','.__('Wed').','.__('Thu').','.__('Fri').','.__('Sat') ) . '"},print:{print_desc:"' . mce_escape( __('Print') ) . '"},preview:{preview_desc:"' . mce_escape( __('Preview') ) . '"},directionality:{ltr_desc:"' . mce_escape( __('Direction left to right') ) . '",rtl_desc:"' . mce_escape( __('Direction right to left') ) . '"},layer:{insertlayer_desc:"' . mce_escape( __('Insert new layer') ) . '",forward_desc:"' . mce_escape( __('Move forward') ) . '",backward_desc:"' . mce_escape( __('Move backward') ) . '",absolute_desc:"' . mce_escape( __('Toggle absolute positioning') ) . '",content:"' . mce_escape( __('New layer...') ) . '"},save:{save_desc:"' . mce_escape( __('Save') ) . '",cancel_desc:"' . mce_escape( __('Cancel all changes') ) . '"},nonbreaking:{nonbreaking_desc:"' . mce_escape( __('Insert non-breaking space character') ) . '"},iespell:{iespell_desc:"' . mce_escape( __('Run spell checking') ) . '",download:"' . mce_escape( __('ieSpell not detected. Do you want to install it now?') ) . '"},advhr:{advhr_desc:"' . mce_escape( __('Horizontale rule') ) . '"},emotions:{emotions_desc:"' . mce_escape( __('Emotions') ) . '"},searchreplace:{search_desc:"' . mce_escape( __('Find') ) . '",replace_desc:"' . mce_escape( __('Find/Replace') ) . '"},advimage:{image_desc:"' . mce_escape( __('Insert/edit image') ) . '"},advlink:{link_desc:"' . mce_escape( __('Insert/edit link') ) . '"},xhtmlxtras:{cite_desc:"' . mce_escape( __('Citation') ) . '",abbr_desc:"' . mce_escape( __('Abbreviation') ) . '",acronym_desc:"' . mce_escape( __('Acronym') ) . '",del_desc:"' . mce_escape( __('Deletion') ) . '",ins_desc:"' . mce_escape( __('Insertion') ) . '",attribs_desc:"' . mce_escape( __('Insert/Edit Attributes') ) . '"},style:{desc:"' . mce_escape( __('Edit CSS Style') ) . '"},paste:{paste_text_desc:"' . mce_escape( __('Paste as Plain Text') ) . '",paste_word_desc:"' . mce_escape( __('Paste from Word') ) . '",selectall_desc:"' . mce_escape( __('Select All') ) . '"},paste_dlg:{text_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '",text_linebreaks:"' . mce_escape( __('Keep linebreaks') ) . '",word_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '"},table:{desc:"' . mce_escape( __('Inserts a new table') ) . '",row_before_desc:"' . mce_escape( __('Insert row before') ) . '",row_after_desc:"' . mce_escape( __('Insert row after') ) . '",delete_row_desc:"' . mce_escape( __('Delete row') ) . '",col_before_desc:"' . mce_escape( __('Insert column before') ) . '",col_after_desc:"' . mce_escape( __('Insert column after') ) . '",delete_col_desc:"' . mce_escape( __('Remove column') ) . '",split_cells_desc:"' . mce_escape( __('Split merged table cells') ) . '",merge_cells_desc:"' . mce_escape( __('Merge table cells') ) . '",row_desc:"' . mce_escape( __('Table row properties') ) . '",cell_desc:"' . mce_escape( __('Table cell properties') ) . '",props_desc:"' . mce_escape( __('Table properties') ) . '",paste_row_before_desc:"' . mce_escape( __('Paste table row before') ) . '",paste_row_after_desc:"' . mce_escape( __('Paste table row after') ) . '",cut_row_desc:"' . mce_escape( __('Cut table row') ) . '",copy_row_desc:"' . mce_escape( __('Copy table row') ) . '",del:"' . mce_escape( __('Delete table') ) . '",row:"' . mce_escape( __('Row') ) . '",col:"' . mce_escape( __('Column') ) . '",cell:"' . mce_escape( __('Cell') ) . '"},autosave:{unload_msg:"' . mce_escape( __('The changes you made will be lost if you navigate away from this page.') ) . '"},fullscreen:{desc:"' . mce_escape( __('Toggle fullscreen mode') ) . ' (Alt+Shift+G)"},media:{desc:"' . mce_escape( __('Insert / edit embedded media') ) . '",delta_width:"' . /* translators: Extra width for the media popup in pixels */ mce_escape( _x('0', 'media popup width') ) . '",delta_height:"' . /* translators: Extra height for the media popup in pixels */ mce_escape( _x('0', 'media popup height') ) . '",edit:"' . mce_escape( __('Edit embedded media') ) . '"},fullpage:{desc:"' . mce_escape( __('Document properties') ) . '"},template:{desc:"' . mce_escape( __('Insert predefined template content') ) . '"},visualchars:{desc:"' . mce_escape( __('Visual control characters on/off.') ) . '"},spellchecker:{desc:"' . mce_escape( __('Toggle spellchecker') ) . ' (Alt+Shift+N)",menu:"' . mce_escape( __('Spellchecker settings') ) . '",ignore_word:"' . mce_escape( __('Ignore word') ) . '",ignore_words:"' . mce_escape( __('Ignore all') ) . '",langs:"' . mce_escape( __('Languages') ) . '",wait:"' . mce_escape( __('Please wait...') ) . '",sug:"' . mce_escape( __('Suggestions') ) . '",no_sug:"' . mce_escape( __('No suggestions') ) . '",no_mpell:"' . mce_escape( __('No misspellings found.') ) . '"},pagebreak:{desc:"' . mce_escape( __('Insert Page Break') ) . '"}}});tinyMCE.addI18n("' . $language . '.advanced",{style_select:"' . mce_escape( /* translators: TinyMCE font styles */ _x('Styles', 'TinyMCE font styles') ) . '",font_size:"' . mce_escape( __('Font size') ) . '",fontdefault:"' . mce_escape( __('Font family') ) . '",block:"' . mce_escape( __('Format') ) . '",paragraph:"' . mce_escape( __('Paragraph') ) . '",div:"' . mce_escape( __('Div') ) . '",address:"' . mce_escape( __('Address') ) . '",pre:"' . mce_escape( __('Preformatted') ) . '",h1:"' . mce_escape( __('Heading 1') ) . '",h2:"' . mce_escape( __('Heading 2') ) . '",h3:"' . mce_escape( __('Heading 3') ) . '",h4:"' . mce_escape( __('Heading 4') ) . '",h5:"' . mce_escape( __('Heading 5') ) . '",h6:"' . mce_escape( __('Heading 6') ) . '",blockquote:"' . mce_escape( __('Blockquote') ) . '",code:"' . mce_escape( __('Code') ) . '",samp:"' . mce_escape( __('Code sample') ) . '",dt:"' . mce_escape( __('Definition term ') ) . '",dd:"' . mce_escape( __('Definition description') ) . '",bold_desc:"' . mce_escape( __('Bold') ) . ' (Ctrl / Alt+Shift + B)",italic_desc:"' . mce_escape( __('Italic') ) . ' (Ctrl / Alt+Shift + I)",underline_desc:"' . mce_escape( __('Underline') ) . '",striketrough_desc:"' . mce_escape( __('Strikethrough') ) . ' (Alt+Shift+D)",justifyleft_desc:"' . mce_escape( __('Align Left') ) . ' (Alt+Shift+L)",justifycenter_desc:"' . mce_escape( __('Align Center') ) . ' (Alt+Shift+C)",justifyright_desc:"' . mce_escape( __('Align Right') ) . ' (Alt+Shift+R)",justifyfull_desc:"' . mce_escape( __('Align Full') ) . ' (Alt+Shift+J)",bullist_desc:"' . mce_escape( __('Unordered list') ) . ' (Alt+Shift+U)",numlist_desc:"' . mce_escape( __('Ordered list') ) . ' (Alt+Shift+O)",outdent_desc:"' . mce_escape( __('Outdent') ) . '",indent_desc:"' . mce_escape( __('Indent') ) . '",undo_desc:"' . mce_escape( __('Undo') ) . ' (Ctrl+Z)",redo_desc:"' . mce_escape( __('Redo') ) . ' (Ctrl+Y)",link_desc:"' . mce_escape( __('Insert/edit link') ) . ' (Alt+Shift+A)",link_delta_width:"' . /* translators: Extra width for the link popup in pixels */ mce_escape( _x('0', 'link popup width') ) . '",link_delta_height:"' . /* translators: Extra height for the link popup in pixels */ mce_escape( _x('0', 'link popup height') ) . '",unlink_desc:"' . mce_escape( __('Unlink') ) . ' (Alt+Shift+S)",image_desc:"' . mce_escape( __('Insert/edit image') ) . ' (Alt+Shift+M)",image_delta_width:"' . /* translators: Extra width for the image popup in pixels */ mce_escape( _x('0', 'image popup width') ) . '",image_delta_height:"' . /* translators: Extra height for the image popup in pixels */ mce_escape( _x('0', 'image popup height') ) . '",cleanup_desc:"' . mce_escape( __('Cleanup messy code') ) . '",code_desc:"' . mce_escape( __('Edit HTML Source') ) . '",sub_desc:"' . mce_escape( __('Subscript') ) . '",sup_desc:"' . mce_escape( __('Superscript') ) . '",hr_desc:"' . mce_escape( __('Insert horizontal ruler') ) . '",removeformat_desc:"' . mce_escape( __('Remove formatting') ) . '",forecolor_desc:"' . mce_escape( __('Select text color') ) . '",backcolor_desc:"' . mce_escape( __('Select background color') ) . '",charmap_desc:"' . mce_escape( __('Insert custom character') ) . '",visualaid_desc:"' . mce_escape( __('Toggle guidelines/invisible elements') ) . '",anchor_desc:"' . mce_escape( __('Insert/edit anchor') ) . '",cut_desc:"' . mce_escape( __('Cut') ) . '",copy_desc:"' . mce_escape( __('Copy') ) . '",paste_desc:"' . mce_escape( __('Paste') ) . '",image_props_desc:"' . mce_escape( __('Image properties') ) . '",newdocument_desc:"' . mce_escape( __('New document') ) . '",help_desc:"' . mce_escape( __('Help') ) . '",blockquote_desc:"' . mce_escape( __('Blockquote') ) . ' (Alt+Shift+Q)",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",path:"' . mce_escape( __('Path') ) . '",newdocument:"' . mce_escape( __('Are you sure you want to clear all contents?') ) . '",toolbar_focus:"' . mce_escape( __('Jump to tool buttons - Alt+Q, Jump to editor - Alt-Z, Jump to element path - Alt-X') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '",colorpicker_delta_width:"' . /* translators: Extra width for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup width') ) . '",colorpicker_delta_height:"' . /* translators: Extra height for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup height') ) . '"});tinyMCE.addI18n("' . $language . '.advanced_dlg",{about_title:"' . mce_escape( __('About TinyMCE') ) . '",about_general:"' . mce_escape( __('About') ) . '",about_help:"' . mce_escape( __('Help') ) . '",about_license:"' . mce_escape( __('License') ) . '",about_plugins:"' . mce_escape( __('Plugins') ) . '",about_plugin:"' . mce_escape( __('Plugin') ) . '",about_author:"' . mce_escape( __('Author') ) . '",about_version:"' . mce_escape( __('Version') ) . '",about_loaded:"' . mce_escape( __('Loaded plugins') ) . '",anchor_title:"' . mce_escape( __('Insert/edit anchor') ) . '",anchor_name:"' . mce_escape( __('Anchor name') ) . '",code_title:"' . mce_escape( __('HTML Source Editor') ) . '",code_wordwrap:"' . mce_escape( __('Word wrap') ) . '",colorpicker_title:"' . mce_escape( __('Select a color') ) . '",colorpicker_picker_tab:"' . mce_escape( __('Picker') ) . '",colorpicker_picker_title:"' . mce_escape( __('Color picker') ) . '",colorpicker_palette_tab:"' . mce_escape( __('Palette') ) . '",colorpicker_palette_title:"' . mce_escape( __('Palette colors') ) . '",colorpicker_named_tab:"' . mce_escape( __('Named') ) . '",colorpicker_named_title:"' . mce_escape( __('Named colors') ) . '",colorpicker_color:"' . mce_escape( __('Color:') ) . '",colorpicker_name:"' . mce_escape( __('Name:') ) . '",charmap_title:"' . mce_escape( __('Select custom character') ) . '",image_title:"' . mce_escape( __('Insert/edit image') ) . '",image_src:"' . mce_escape( __('Image URL') ) . '",image_alt:"' . mce_escape( __('Image description') ) . '",image_list:"' . mce_escape( __('Image list') ) . '",image_border:"' . mce_escape( __('Border') ) . '",image_dimensions:"' . mce_escape( __('Dimensions') ) . '",image_vspace:"' . mce_escape( __('Vertical space') ) . '",image_hspace:"' . mce_escape( __('Horizontal space') ) . '",image_align:"' . mce_escape( __('Alignment') ) . '",image_align_baseline:"' . mce_escape( __('Baseline') ) . '",image_align_top:"' . mce_escape( __('Top') ) . '",image_align_middle:"' . mce_escape( __('Middle') ) . '",image_align_bottom:"' . mce_escape( __('Bottom') ) . '",image_align_texttop:"' . mce_escape( __('Text top') ) . '",image_align_textbottom:"' . mce_escape( __('Text bottom') ) . '",image_align_left:"' . mce_escape( __('Left') ) . '",image_align_right:"' . mce_escape( __('Right') ) . '",link_title:"' . mce_escape( __('Insert/edit link') ) . '",link_url:"' . mce_escape( __('Link URL') ) . '",link_target:"' . mce_escape( __('Target') ) . '",link_target_same:"' . mce_escape( __('Open link in the same window') ) . '",link_target_blank:"' . mce_escape( __('Open link in a new window') ) . '",link_titlefield:"' . mce_escape( __('Title') ) . '",link_is_email:"' . mce_escape( __('The URL you entered seems to be an email address, do you want to add the required mailto: prefix?') ) . '",link_is_external:"' . mce_escape( __('The URL you entered seems to external link, do you want to add the required http:// prefix?') ) . '",link_list:"' . mce_escape( __('Link list') ) . '"});tinyMCE.addI18n("' . $language . '.media_dlg",{title:"' . mce_escape( __('Insert / edit embedded media') ) . '",general:"' . mce_escape( __('General') ) . '",advanced:"' . mce_escape( __('Advanced') ) . '",file:"' . mce_escape( __('File/URL') ) . '",list:"' . mce_escape( __('List') ) . '",size:"' . mce_escape( __('Dimensions') ) . '",preview:"' . mce_escape( __('Preview') ) . '",constrain_proportions:"' . mce_escape( __('Constrain proportions') ) . '",type:"' . mce_escape( __('Type') ) . '",id:"' . mce_escape( __('Id') ) . '",name:"' . mce_escape( __('Name') ) . '",class_name:"' . mce_escape( __('Class') ) . '",vspace:"' . mce_escape( __('V-Space') ) . '",hspace:"' . mce_escape( __('H-Space') ) . '",play:"' . mce_escape( __('Auto play') ) . '",loop:"' . mce_escape( __('Loop') ) . '",menu:"' . mce_escape( __('Show menu') ) . '",quality:"' . mce_escape( __('Quality') ) . '",scale:"' . mce_escape( __('Scale') ) . '",align:"' . mce_escape( __('Align') ) . '",salign:"' . mce_escape( __('SAlign') ) . '",wmode:"' . mce_escape( __('WMode') ) . '",bgcolor:"' . mce_escape( __('Background') ) . '",base:"' . mce_escape( __('Base') ) . '",flashvars:"' . mce_escape( __('Flashvars') ) . '",liveconnect:"' . mce_escape( __('SWLiveConnect') ) . '",autohref:"' . mce_escape( __('AutoHREF') ) . '",cache:"' . mce_escape( __('Cache') ) . '",hidden:"' . mce_escape( __('Hidden') ) . '",controller:"' . mce_escape( __('Controller') ) . '",kioskmode:"' . mce_escape( __('Kiosk mode') ) . '",playeveryframe:"' . mce_escape( __('Play every frame') ) . '",targetcache:"' . mce_escape( __('Target cache') ) . '",correction:"' . mce_escape( __('No correction') ) . '",enablejavascript:"' . mce_escape( __('Enable JavaScript') ) . '",starttime:"' . mce_escape( __('Start time') ) . '",endtime:"' . mce_escape( __('End time') ) . '",href:"' . mce_escape( __('href') ) . '",qtsrcchokespeed:"' . mce_escape( __('Choke speed') ) . '",target:"' . mce_escape( __('Target') ) . '",volume:"' . mce_escape( __('Volume') ) . '",autostart:"' . mce_escape( __('Auto start') ) . '",enabled:"' . mce_escape( __('Enabled') ) . '",fullscreen:"' . mce_escape( __('Fullscreen') ) . '",invokeurls:"' . mce_escape( __('Invoke URLs') ) . '",mute:"' . mce_escape( __('Mute') ) . '",stretchtofit:"' . mce_escape( __('Stretch to fit') ) . '",windowlessvideo:"' . mce_escape( __('Windowless video') ) . '",balance:"' . mce_escape( __('Balance') ) . '",baseurl:"' . mce_escape( __('Base URL') ) . '",captioningid:"' . mce_escape( __('Captioning id') ) . '",currentmarker:"' . mce_escape( __('Current marker') ) . '",currentposition:"' . mce_escape( __('Current position') ) . '",defaultframe:"' . mce_escape( __('Default frame') ) . '",playcount:"' . mce_escape( __('Play count') ) . '",rate:"' . mce_escape( __('Rate') ) . '",uimode:"' . mce_escape( __('UI Mode') ) . '",flash_options:"' . mce_escape( __('Flash options') ) . '",qt_options:"' . mce_escape( __('Quicktime options') ) . '",wmp_options:"' . mce_escape( __('Windows media player options') ) . '",rmp_options:"' . mce_escape( __('Real media player options') ) . '",shockwave_options:"' . mce_escape( __('Shockwave options') ) . '",autogotourl:"' . mce_escape( __('Auto goto URL') ) . '",center:"' . mce_escape( __('Center') ) . '",imagestatus:"' . mce_escape( __('Image status') ) . '",maintainaspect:"' . mce_escape( __('Maintain aspect') ) . '",nojava:"' . mce_escape( __('No java') ) . '",prefetch:"' . mce_escape( __('Prefetch') ) . '",shuffle:"' . mce_escape( __('Shuffle') ) . '",console:"' . mce_escape( __('Console') ) . '",numloop:"' . mce_escape( __('Num loops') ) . '",controls:"' . mce_escape( __('Controls') ) . '",scriptcallbacks:"' . mce_escape( __('Script callbacks') ) . '",swstretchstyle:"' . mce_escape( __('Stretch style') ) . '",swstretchhalign:"' . mce_escape( __('Stretch H-Align') ) . '",swstretchvalign:"' . mce_escape( __('Stretch V-Align') ) . '",sound:"' . mce_escape( __('Sound') ) . '",progress:"' . mce_escape( __('Progress') ) . '",qtsrc:"' . mce_escape( __('QT Src') ) . '",qt_stream_warn:"' . mce_escape( __('Streamed rtsp resources should be added to the QT Src field under the advanced tab.') ) . '",align_top:"' . mce_escape( __('Top') ) . '",align_right:"' . mce_escape( __('Right') ) . '",align_bottom:"' . mce_escape( __('Bottom') ) . '",align_left:"' . mce_escape( __('Left') ) . '",align_center:"' . mce_escape( __('Center') ) . '",align_top_left:"' . mce_escape( __('Top left') ) . '",align_top_right:"' . mce_escape( __('Top right') ) . '",align_bottom_left:"' . mce_escape( __('Bottom left') ) . '",align_bottom_right:"' . mce_escape( __('Bottom right') ) . '",flv_options:"' . mce_escape( __('Flash video options') ) . '",flv_scalemode:"' . mce_escape( __('Scale mode') ) . '",flv_buffer:"' . mce_escape( __('Buffer') ) . '",flv_startimage:"' . mce_escape( __('Start image') ) . '",flv_starttime:"' . mce_escape( __('Start time') ) . '",flv_defaultvolume:"' . mce_escape( __('Default volume') ) . '",flv_hiddengui:"' . mce_escape( __('Hidden GUI') ) . '",flv_autostart:"' . mce_escape( __('Auto start') ) . '",flv_loop:"' . mce_escape( __('Loop') ) . '",flv_showscalemodes:"' . mce_escape( __('Show scale modes') ) . '",flv_smoothvideo:"' . mce_escape( __('Smooth video') ) . '",flv_jscallback:"' . mce_escape( __('JS Callback') ) . '"});tinyMCE.addI18n("' . $language . '.wordpress",{wp_adv_desc:"' . mce_escape( __('Show/Hide Kitchen Sink') )  . ' (Alt+Shift+Z)",wp_more_desc:"' . mce_escape( __('Insert More Tag') ) . ' (Alt+Shift+T)",wp_page_desc:"' . mce_escape( __('Insert Page break') ) . ' (Alt+Shift+P)",wp_help_desc:"' . mce_escape( __('Help') ) . ' (Alt+Shift+H)",wp_more_alt:"' . mce_escape( __('More...') ) . '",wp_page_alt:"' . mce_escape( __('Next page...') ) . '",add_media:"' . mce_escape( __('Add Media') ) . '",add_image:"' . mce_escape( __('Add an Image') ) . '",add_video:"' . mce_escape( __('Add Video') ) . '",add_audio:"' . mce_escape( __('Add Audio') ) . '",editgallery:"' . mce_escape( __('Edit Gallery') ) . '",delgallery:"' . mce_escape( __('Delete Gallery') ) . '"});tinyMCE.addI18n("' . $language . '.wpeditimage",{edit_img:"' . mce_escape( __('Edit Image') )  . '",del_img:"' . mce_escape( __('Delete Image') )  . '",adv_settings:"' . mce_escape( __('Advanced Settings') )  . '",none:"' . mce_escape( __('None') )  . '",size:"' . mce_escape( __('Size') ) . '",thumbnail:"' . mce_escape( __('Thumbnail') ) . '",medium:"' . mce_escape( __('Medium') ) . '",full_size:"' . mce_escape( __('Full Size') ) . '",current_link:"' . mce_escape( __('Current Link') ) . '",link_to_img:"' . mce_escape( __('Link to Image') ) . '",link_help:"' . mce_escape( __('Enter a link URL or click above for presets.') ) . '",adv_img_settings:"' . mce_escape( __('Advanced Image Settings') ) . '",source:"' . mce_escape( __('Source') )  . '",width:"' . mce_escape( __('Width') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",adv_link_settings:"' . mce_escape( __('Advanced Link Settings') )  . '",link_rel:"' . mce_escape( __('Link Rel') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",s60:"' . mce_escape( __('60%') ) . '",s70:"' . mce_escape( __('70%') ) . '",s80:"' . mce_escape( __('80%') ) . '",s90:"' . mce_escape( __('90%') ) . '",s100:"' . mce_escape( __('100%') ) . '",s110:"' . mce_escape( __('110%') ) . '",s120:"' . mce_escape( __('120%') ) . '",s130:"' . mce_escape( __('130%') ) . '",img_title:"' . mce_escape( __('Edit Image Title') ) . '",caption:"' . mce_escape( __('Edit Image Caption') ) . '",alt:"' . mce_escape( __('Edit Alternate Text') ) . '"});';
<?php/** * Multisite delete site panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );// @todo Create a delete blog cap.if ( ! current_user_can( 'manage_options' ) )	wp_die(__( 'You do not have sufficient permissions to delete this site.'));if ( isset( $_GET['h'] ) && $_GET['h'] != '' && get_option( 'delete_blog_hash' ) != false ) {	if ( get_option( 'delete_blog_hash' ) == $_GET['h'] ) {		wpmu_delete_blog( $wpdb->blogid );		wp_die( sprintf( __( 'Thank you for using %s, your site has been deleted. Happy trails to you until we meet again.' ), $current_site->site_name ) );	} else {		wp_die( __( "I'm sorry, the link you clicked is stale. Please select another option." ) );	}}$title = __( 'Delete Site' );$parent_file = 'tools.php';require_once( './admin-header.php' );echo '<div class="wrap">';screen_icon();echo '<h2>' . esc_html( $title ) . '</h2>';if ( isset( $_POST['action'] ) && $_POST['action'] == 'deleteblog' && isset( $_POST['confirmdelete'] ) && $_POST['confirmdelete'] == '1' ) {	$hash = wp_generate_password( 20, false );	update_option( 'delete_blog_hash', $hash );	$url_delete = esc_url( admin_url( 'ms-delete-site.php?h=' . $hash ) );	$content = apply_filters( 'delete_site_email_content', __( "Dear User,You recently clicked the 'Delete Site' link on your site and filled in aform on that page.If you really want to delete your site, click the link below. You will notbe asked to confirm again so only click this link if you are absolutely certain:###URL_DELETE###If you delete your site, please consider opening a new site heresome time in the future! (But remember your current site and usernameare gone forever.)Thanks for using the site,Webmaster###SITE_NAME###" ) );	$content = str_replace( '###URL_DELETE###', $url_delete, $content );	$content = str_replace( '###SITE_NAME###', $current_site->site_name, $content );	wp_mail( get_option( 'admin_email' ), "[ " . get_option( 'blogname' ) . " ] ".__( 'Delete My Site' ), $content );	?>	<p><?php _e( 'Thank you. Please check your email for a link to confirm your action. Your site will not be deleted until this link is clicked. ') ?></p><?php } else {	?>	<p><?php printf( __( 'If you do not want to use your %s site any more, you can delete it using the form below. When you click <strong>Delete My Site Permanently</strong> you will be sent an email with a link in it. Click on this link to delete your site.'), $current_site->site_name); ?></p>	<p><?php _e( 'Remember, once deleted your site cannot be restored.' ) ?></p>	<form method="post" name="deletedirect">		<input type="hidden" name="action" value="deleteblog" />		<p><input id="confirmdelete" type="checkbox" name="confirmdelete" value="1" /> <label for="confirmdelete"><strong><?php printf( __( "I'm sure I want to permanently disable my site, and I am aware I can never get it back or use %s again." ), is_subdomain_install() ? $current_blog->domain : $current_blog->domain . $current_blog->path ); ?></strong></label></p>		<p class="submit"><input type="submit" value="<?php esc_attr_e( 'Delete My Site Permanently' ) ?>" /></p>	</form>	<?php}echo '</div>';include( './admin-footer.php' );?>
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * Object Cache API * * @link http://codex.wordpress.org/Function_Reference/WP_Cache * * @package WordPress * @subpackage Cache *//** * Adds data to the cache, if the cache key doesn't aleady exist. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::add() * * @param int|string $key The cache ID to use for retrieval later * @param mixed $data The data to add to the cache store * @param string $flag The group to add the cache to * @param int $expire When the cache data should be expired * @return unknown */function wp_cache_add($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->add($key, $data, $flag, $expire);}/** * Closes the cache. * * This function has ceased to do anything since WordPress 2.5. The * functionality was removed along with the rest of the persistant cache. This * does not mean that plugins can't implement this function when they need to * make sure that the cache is cleaned up after WordPress no longer needs it. * * @since 2.0.0 * * @return bool Always returns True */function wp_cache_close() {	return true;}/** * Removes the cache contents matching ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::delete() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool True on successful removal, false on failure */function wp_cache_delete($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->delete($id, $flag);}/** * Removes all cache items. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::flush() * * @return bool Always returns true */function wp_cache_flush() {	global $wp_object_cache;	return $wp_object_cache->flush();}/** * Retrieves the cache contents from the cache by ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::get() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool|mixed False on failure to retrieve contents or the cache *		contents on success */function wp_cache_get($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->get($id, $flag);}/** * Sets up Object Cache Global and assigns it. * * @since 2.0.0 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache */function wp_cache_init() {	$GLOBALS['wp_object_cache'] =& new WP_Object_Cache();}/** * Replaces the contents of the cache with new data. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::replace() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_replace($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->replace($key, $data, $flag, $expire);}/** * Saves the data to the cache. * * @since 2.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::set() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_set($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->set($key, $data, $flag, $expire);}/** * Adds a group or set of groups to the list of global groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_global_groups( $groups ) {	global $wp_object_cache;	return $wp_object_cache->add_global_groups($groups);}/** * Adds a group or set of groups to the list of non-persistent groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_non_persistent_groups( $groups ) {	// Default cache doesn't persist so nothing to do here.	return;}/** * Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, * this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_reset() {	global $wp_object_cache;	return $wp_object_cache->reset();}/** * WordPress Object Cache * * The WordPress Object Cache is used to save on trips to the database. The * Object Cache stores all of the cache data to memory and makes the cache * contents available by using a key, which is used to name and later retrieve * the cache contents. * * The Object Cache can be replaced by other caching mechanisms by placing files * in the wp-content folder which is looked at in wp-settings. If that file * exists, then this file will not be included. * * @package WordPress * @subpackage Cache * @since 2.0 */class WP_Object_Cache {	/**	 * Holds the cached objects	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $cache = array ();	/**	 * Cache objects that do not exist in the cache	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $non_existent_objects = array ();	/**	 * The amount of times the cache data was already stored in the cache.	 *	 * @since 2.5.0	 * @access private	 * @var int	 */	var $cache_hits = 0;	/**	 * Amount of times the cache did not have the request in cache	 *	 * @var int	 * @access public	 * @since 2.0.0	 */	var $cache_misses = 0;	/**	 * List of global groups	 *	 * @var array	 * @access protected	 * @since 3.0.0	 */	var $global_groups = array();	/**	 * Adds data to the cache if it doesn't already exist.	 *	 * @uses WP_Object_Cache::get Checks to see if the cache already has data.	 * @uses WP_Object_Cache::set Sets the data after the checking the cache	 *		contents existance.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if cache ID and group already exists, true on success	 */	function add( $id, $data, $group = 'default', $expire = '' ) {		if ( empty ($group) )			$group = 'default';		if (false !== $this->get($id, $group))			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Sets the list of global groups.	 *	 * @since 3.0.0	 *	 * @param array $groups List of groups that are global.	 */	function add_global_groups( $groups ) {		$groups = (array) $groups;		$this->global_groups = array_merge($this->global_groups, $groups);		$this->global_groups = array_unique($this->global_groups);	}	/**	 * Remove the contents of the cache ID in the group	 *	 * If the cache ID does not exist in the group and $force parameter is set	 * to false, then nothing will happen. The $force parameter is set to false	 * by default.	 *	 * On success the group and the id will be added to the	 * $non_existent_objects property in the class.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @param bool $force Optional. Whether to force the unsetting of the cache	 *		ID in the group	 * @return bool False if the contents weren't deleted and true on success	 */	function delete($id, $group = 'default', $force = false) {		if (empty ($group))			$group = 'default';		if (!$force && false === $this->get($id, $group))			return false;		unset ($this->cache[$group][$id]);		$this->non_existent_objects[$group][$id] = true;		return true;	}	/**	 * Clears the object cache of all data	 *	 * @since 2.0.0	 *	 * @return bool Always returns true	 */	function flush() {		$this->cache = array ();		return true;	}	/**	 * Retrieves the cache contents, if it exists	 *	 * The contents will be first attempted to be retrieved by searching by the	 * ID in the cache group. If the cache is hit (success) then the contents	 * are returned.	 *	 * On failure, the $non_existent_objects property is checked and if the	 * cache group and ID exist in there the cache misses will not be	 * incremented. If not in the nonexistent objects property, then the cache	 * misses will be incremented and the cache group and ID will be added to	 * the nonexistent objects.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @return bool|mixed False on failure to retrieve contents or the cache	 *		contents on success	 */	function get($id, $group = 'default') {		if ( empty ($group) )			$group = 'default';		if ( isset ($this->cache[$group][$id]) ) {			$this->cache_hits += 1;			if ( is_object($this->cache[$group][$id]) )				return wp_clone($this->cache[$group][$id]);			else				return $this->cache[$group][$id];		}		if ( isset ($this->non_existent_objects[$group][$id]) )			return false;		$this->non_existent_objects[$group][$id] = true;		$this->cache_misses += 1;		return false;	}	/**	 * Replace the contents in the cache, if contents already exist	 *	 * @since 2.0.0	 * @see WP_Object_Cache::set()	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if not exists, true if contents were replaced	 */	function replace($id, $data, $group = 'default', $expire = '') {		if (empty ($group))			$group = 'default';		if ( false === $this->get($id, $group) )			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Reset keys	 *	 * @since 3.0.0	 */	function reset() {		// Clear out non-global caches since the blog ID has changed.		foreach ( array_keys($this->cache) as $group ) {			if ( !in_array($group, $this->global_groups) )				unset($this->cache[$group]);		}	}	/**	 * Sets the data contents into the cache	 *	 * The cache contents is grouped by the $group parameter followed by the	 * $id. This allows for duplicate ids in unique groups. Therefore, naming of	 * the group should be used with care and should follow normal function	 * naming guidelines outside of core WordPress usage.	 *	 * The $expire parameter is not used, because the cache will automatically	 * expire for each time a page is accessed and PHP finishes. The method is	 * more for cache plugins which use files.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire Not Used	 * @return bool Always returns true	 */	function set($id, $data, $group = 'default', $expire = '') {		if ( empty ($group) )			$group = 'default';		if ( NULL === $data )			$data = '';		if ( is_object($data) )			$data = wp_clone($data);		$this->cache[$group][$id] = $data;		if ( isset($this->non_existent_objects[$group][$id]) )			unset ($this->non_existent_objects[$group][$id]);		return true;	}	/**	 * Echoes the stats of the caching.	 *	 * Gives the cache hits, and cache misses. Also prints every cached group,	 * key and the data.	 *	 * @since 2.0.0	 */	function stats() {		echo "<p>";		echo "<strong>Cache Hits:</strong> {$this->cache_hits}<br />";		echo "<strong>Cache Misses:</strong> {$this->cache_misses}<br />";		echo "</p>";		foreach ($this->cache as $group => $cache) {			echo "<p>";			echo "<strong>Group:</strong> $group<br />";			echo "<strong>Cache:</strong>";			echo "<pre>";			print_r($cache);			echo "</pre>";		}	}	/**	 * PHP4 constructor; Calls PHP 5 style constructor	 *	 * @since 2.0.0	 *	 * @return WP_Object_Cache	 */	function WP_Object_Cache() {		return $this->__construct();	}	/**	 * Sets up object properties; PHP 5 style constructor	 *	 * @since 2.0.8	 * @return null|WP_Object_Cache If cache is disabled, returns null.	 */	function __construct() {		/**		 * @todo This should be moved to the PHP4 style constructor, PHP5		 * already calls __destruct()		 */		register_shutdown_function(array(&$this, "__destruct"));	}	/**	 * Will save the object cache before object is completely destroyed.	 *	 * Called upon object destruction, which should be when PHP ends.	 *	 * @since  2.0.8	 *	 * @return bool True value. Won't be used by PHP	 */	function __destruct() {		return true;	}}?>
<?php/** * mail_fetch/setup.php * * @package SquirrelMail * * @copyright (c) 1999-2006 The SquirrelMail Project Team * * @copyright (c) 1999 CDI (cdi@thewebmasters.net) All Rights Reserved * Modified by Philippe Mingo 2001 mingo@rotedic.com * An RFC 1939 compliant wrapper class for the POP3 protocol. * * Licensed under the GNU GPL. For full terms see the file COPYING. * * pop3 class * * $Id$ */class POP3 {    var $ERROR      = '';       //  Error string.    var $TIMEOUT    = 60;       //  Default timeout before giving up on a                                //  network operation.    var $COUNT      = -1;       //  Mailbox msg count    var $BUFFER     = 512;      //  Socket buffer for socket fgets() calls.                                //  Per RFC 1939 the returned line a POP3                                //  server can send is 512 bytes.    var $FP         = '';       //  The connection to the server's                                //  file descriptor    var $MAILSERVER = '';       // Set this to hard code the server name    var $DEBUG      = FALSE;    // set to true to echo pop3                                // commands and responses to error_log                                // this WILL log passwords!    var $BANNER     = '';       //  Holds the banner returned by the                                //  pop server - used for apop()    var $ALLOWAPOP  = FALSE;    //  Allow or disallow apop()                                //  This must be set to true                                //  manually    function POP3 ( $server = '', $timeout = '' ) {        settype($this->BUFFER,"integer");        if( !empty($server) ) {            // Do not allow programs to alter MAILSERVER            // if it is already specified. They can get around            // this if they -really- want to, so don't count on it.            if(empty($this->MAILSERVER))                $this->MAILSERVER = $server;        }        if(!empty($timeout)) {            settype($timeout,"integer");            $this->TIMEOUT = $timeout;            if (!ini_get('safe_mode'))                set_time_limit($timeout);        }        return true;    }    function update_timer () {        if (!ini_get('safe_mode'))            set_time_limit($this->TIMEOUT);        return true;    }    function connect ($server, $port = 110)  {        //  Opens a socket to the specified server. Unless overridden,        //  port defaults to 110. Returns true on success, false on fail        // If MAILSERVER is set, override $server with it's value	if (!isset($port) || !$port) {$port = 110;}        if(!empty($this->MAILSERVER))            $server = $this->MAILSERVER;        if(empty($server)){            $this->ERROR = "POP3 connect: " . _("No server specified");            unset($this->FP);            return false;        }        $fp = @fsockopen("$server", $port, $errno, $errstr);        if(!$fp) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$errno] [$errstr]";            unset($this->FP);            return false;        }        socket_set_blocking($fp,-1);        $this->update_timer();        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG)            error_log("POP3 SEND [connect: $server] GOT [$reply]",0);        if(!$this->is_ok($reply)) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$reply]";            unset($this->FP);            return false;        }        $this->FP = $fp;        $this->BANNER = $this->parse_banner($reply);        return true;    }    function user ($user = "") {        // Sends the USER command, returns true or false        if( empty($user) ) {            $this->ERROR = "POP3 user: " . _("no login ID submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 user: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("USER $user");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 user: " . _("Error ") . "[$reply]";                return false;            } else                return true;        }    }    function pass ($pass = "")     {        // Sends the PASS command, returns # of msgs in mailbox,        // returns false (undef) on Auth failure        if(empty($pass)) {            $this->ERROR = "POP3 pass: " . _("No password submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 pass: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("PASS $pass");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 pass: " . _("Authentication failed") . " [$reply]";                $this->quit();                return false;            } else {                //  Auth successful.                $count = $this->last("count");                $this->COUNT = $count;                return $count;            }        }    }    function apop ($login,$pass) {        //  Attempts an APOP login. If this fails, it'll        //  try a standard login. YOUR SERVER MUST SUPPORT        //  THE USE OF THE APOP COMMAND!        //  (apop is optional per rfc1939)        if(!isset($this->FP)) {            $this->ERROR = "POP3 apop: " . _("No connection to server");            return false;        } elseif(!$this->ALLOWAPOP) {            $retVal = $this->login($login,$pass);            return $retVal;        } elseif(empty($login)) {            $this->ERROR = "POP3 apop: " . _("No login ID submitted");            return false;        } elseif(empty($pass)) {            $this->ERROR = "POP3 apop: " . _("No password submitted");            return false;        } else {            $banner = $this->BANNER;            if( (!$banner) or (empty($banner)) ) {                $this->ERROR = "POP3 apop: " . _("No server banner") . ' - ' . _("abort");                $retVal = $this->login($login,$pass);                return $retVal;            } else {                $AuthString = $banner;                $AuthString .= $pass;                $APOPString = md5($AuthString);                $cmd = "APOP $login $APOPString";                $reply = $this->send_cmd($cmd);                if(!$this->is_ok($reply)) {                    $this->ERROR = "POP3 apop: " . _("apop authentication failed") . ' - ' . _("abort");                    $retVal = $this->login($login,$pass);                    return $retVal;                } else {                    //  Auth successful.                    $count = $this->last("count");                    $this->COUNT = $count;                    return $count;                }            }        }    }    function login ($login = "", $pass = "") {        // Sends both user and pass. Returns # of msgs in mailbox or        // false on failure (or -1, if the error occurs while getting        // the number of messages.)        if( !isset($this->FP) ) {            $this->ERROR = "POP3 login: " . _("No connection to server");            return false;        } else {            $fp = $this->FP;            if( !$this->user( $login ) ) {                //  Preserve the error generated by user()                return false;            } else {                $count = $this->pass($pass);                if( (!$count) || ($count == -1) ) {                    //  Preserve the error generated by last() and pass()                    return false;                } else                    return $count;            }        }    }    function top ($msgNum, $numLines = "0") {        //  Gets the header and first $numLines of the msg body        //  returns data in an array with each returned line being        //  an array element. If $numLines is empty, returns        //  only the header information, and none of the body.        if(!isset($this->FP)) {            $this->ERROR = "POP3 top: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "TOP $msgNum $numLines";        fwrite($fp, "TOP $msgNum $numLines\r\n");        $reply = fgets($fp, $buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) {            @error_log("POP3 SEND [$cmd] GOT [$reply]",0);        }        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 top: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function pop_list ($msgNum = "") {        //  If called with an argument, returns that msgs' size in octets        //  No argument returns an associative array of undeleted        //  msg numbers and their sizes in octets        if(!isset($this->FP))        {            $this->ERROR = "POP3 pop_list: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $Total = $this->COUNT;        if( (!$Total) or ($Total == -1) )        {            return false;        }        if($Total == 0)        {            return array("0","0");            // return -1;   // mailbox empty        }        $this->update_timer();        if(!empty($msgNum))        {            $cmd = "LIST $msgNum";            fwrite($fp,"$cmd\r\n");            $reply = fgets($fp,$this->BUFFER);            $reply = $this->strip_clf($reply);            if($this->DEBUG) {                @error_log("POP3 SEND [$cmd] GOT [$reply]",0);            }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 pop_list: " . _("Error ") . "[$reply]";                return false;            }            list($junk,$num,$size) = preg_split('/\s+/',$reply);            return $size;        }        $cmd = "LIST";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $reply = $this->strip_clf($reply);            $this->ERROR = "POP3 pop_list: " . _("Error ") .  "[$reply]";            return false;        }        $MsgArray = array();        $MsgArray[0] = $Total;        for($msgC=1;$msgC <= $Total; $msgC++)        {            if($msgC > $Total) { break; }            $line = fgets($fp,$this->BUFFER);            $line = $this->strip_clf($line);            if(ereg("^\.",$line))            {                $this->ERROR = "POP3 pop_list: " . _("Premature end of list");                return false;            }            list($thisMsg,$msgSize) = preg_split('/\s+/',$line);            settype($thisMsg,"integer");            if($thisMsg != $msgC)            {                $MsgArray[$msgC] = "deleted";            }            else            {                $MsgArray[$msgC] = $msgSize;            }        }        return $MsgArray;    }    function get ($msgNum) {        //  Retrieve the specified msg number. Returns an array        //  where each line of the msg is an array element.        if(!isset($this->FP))        {            $this->ERROR = "POP3 get: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "RETR $msgNum";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 get: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            if ( $line{0} == '.' ) { $line = substr($line,1); }            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function last ( $type = "count" ) {        //  Returns the highest msg number in the mailbox.        //  returns -1 on error, 0+ on success, if type != count        //  results in a popstat() call (2 element array returned)        $last = -1;        if(!isset($this->FP))        {            $this->ERROR = "POP3 last: " . _("No connection to server");            return $last;        }        $reply = $this->send_cmd("STAT");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 last: " . _("Error ") . "[$reply]";            return $last;        }        $Vars = preg_split('/\s+/',$reply);        $count = $Vars[1];        $size = $Vars[2];        settype($count,"integer");        settype($size,"integer");        if($type != "count")        {            return array($count,$size);        }        return $count;    }    function reset () {        //  Resets the status of the remote server. This includes        //  resetting the status of ALL msgs to not be deleted.        //  This method automatically closes the connection to the server.        if(!isset($this->FP))        {            $this->ERROR = "POP3 reset: " . _("No connection to server");            return false;        }        $reply = $this->send_cmd("RSET");        if(!$this->is_ok($reply))        {            //  The POP3 RSET command -never- gives a -ERR            //  response - if it ever does, something truely            //  wild is going on.            $this->ERROR = "POP3 reset: " . _("Error ") . "[$reply]";            @error_log("POP3 reset: ERROR [$reply]",0);        }        $this->quit();        return true;    }    function send_cmd ( $cmd = "" )    {        //  Sends a user defined command string to the        //  POP server and returns the results. Useful for        //  non-compliant or custom POP servers.        //  Do NOT includ the \r\n as part of your command        //  string - it will be appended automatically.        //  The return value is a standard fgets() call, which        //  will read up to $this->BUFFER bytes of data, until it        //  encounters a new line, or EOF, whichever happens first.        //  This method works best if $cmd responds with only        //  one line of data.        if(!isset($this->FP))        {            $this->ERROR = "POP3 send_cmd: " . _("No connection to server");            return false;        }        if(empty($cmd))        {            $this->ERROR = "POP3 send_cmd: " . _("Empty command string");            return "";        }        $fp = $this->FP;        $buffer = $this->BUFFER;        $this->update_timer();        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        return $reply;    }    function quit() {        //  Closes the connection to the POP3 server, deleting        //  any msgs marked as deleted.        if(!isset($this->FP))        {            $this->ERROR = "POP3 quit: " . _("connection does not exist");            return false;        }        $fp = $this->FP;        $cmd = "QUIT";        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        fclose($fp);        unset($this->FP);        return true;    }    function popstat () {        //  Returns an array of 2 elements. The number of undeleted        //  msgs in the mailbox, and the size of the mbox in octets.        $PopArray = $this->last("array");        if($PopArray == -1) { return false; }        if( (!$PopArray) or (empty($PopArray)) )        {            return false;        }        return $PopArray;    }    function uidl ($msgNum = "")    {        //  Returns the UIDL of the msg specified. If called with        //  no arguments, returns an associative array where each        //  undeleted msg num is a key, and the msg's uidl is the element        //  Array element 0 will contain the total number of msgs        if(!isset($this->FP)) {            $this->ERROR = "POP3 uidl: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $buffer = $this->BUFFER;        if(!empty($msgNum)) {            $cmd = "UIDL $msgNum";            $reply = $this->send_cmd($cmd);            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            list ($ok,$num,$myUidl) = preg_split('/\s+/',$reply);            return $myUidl;        } else {            $this->update_timer();            $UIDLArray = array();            $Total = $this->COUNT;            $UIDLArray[0] = $Total;            if ($Total < 1)            {                return $UIDLArray;            }            $cmd = "UIDL";            fwrite($fp, "UIDL\r\n");            $reply = fgets($fp, $buffer);            $reply = $this->strip_clf($reply);            if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            $line = "";            $count = 1;            $line = fgets($fp,$buffer);            while ( !ereg("^\.\r\n",$line)) {                if(ereg("^\.\r\n",$line)) {                    break;                }                list ($msg,$msgUidl) = preg_split('/\s+/',$line);                $msgUidl = $this->strip_clf($msgUidl);                if($count == $msg) {                    $UIDLArray[$msg] = $msgUidl;                }                else                {                    $UIDLArray[$count] = 'deleted';                }                $count++;                $line = fgets($fp,$buffer);            }        }        return $UIDLArray;    }    function delete ($msgNum = "") {        //  Flags a specified msg as deleted. The msg will not        //  be deleted until a quit() method is called.        if(!isset($this->FP))        {            $this->ERROR = "POP3 delete: " . _("No connection to server");            return false;        }        if(empty($msgNum))        {            $this->ERROR = "POP3 delete: " . _("No msg number submitted");            return false;        }        $reply = $this->send_cmd("DELE $msgNum");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 delete: " . _("Command failed ") . "[$reply]";            return false;        }        return true;    }    //  *********************************************************    //  The following methods are internal to the class.    function is_ok ($cmd = "") {        //  Return true or false on +OK or -ERR        if( empty($cmd) )            return false;        else            return( ereg ("^\+OK", $cmd ) );    }    function strip_clf ($text = "") {        // Strips \r\n from server responses        if(empty($text))            return $text;        else {            $stripped = str_replace("\r",'',$text);            $stripped = str_replace("\n",'',$stripped);            return $stripped;        }    }    function parse_banner ( $server_text ) {        $outside = true;        $banner = "";        $length = strlen($server_text);        for($count =0; $count < $length; $count++)        {            $digit = substr($server_text,$count,1);            if(!empty($digit))             {                if( (!$outside) && ($digit != '<') && ($digit != '>') )                {                    $banner .= $digit;                }                if ($digit == '<')                {                    $outside = false;                }                if($digit == '>')                {                    $outside = true;                }            }        }        $banner = $this->strip_clf($banner);    // Just in case        return "<$banner>";    }}   // End class?>
<?php/** * Revisions administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script('list-revisions');wp_reset_vars(array('revision', 'left', 'right', 'action'));$revision_id = absint($revision);$left        = absint($left);$right       = absint($right);$redirect = 'edit.php';switch ( $action ) :case 'restore' :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !current_user_can( 'edit_post', $revision->post_parent ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	check_admin_referer( "restore-post_$post->ID|$revision->ID" );	wp_restore_post_revision( $revision->ID );	$redirect = add_query_arg( array( 'message' => 5, 'revision' => $revision->ID ), get_edit_post_link( $post->ID, 'url' ) );	break;case 'diff' :	if ( !$left_revision  = get_post( $left ) )		break;	if ( !$right_revision = get_post( $right ) )		break;	if ( !current_user_can( 'read_post', $left_revision->ID ) || !current_user_can( 'read_post', $right_revision->ID ) )		break;	// If we're comparing a revision to itself, redirect to the 'view' page for that revision or the edit page for that post	if ( $left_revision->ID == $right_revision->ID ) {		$redirect = get_edit_post_link( $left_revision->ID );		include( './js/revisions-js.php' );		break;	}	// Don't allow reverse diffs?	if ( strtotime($right_revision->post_modified_gmt) < strtotime($left_revision->post_modified_gmt) ) {		$redirect = add_query_arg( array( 'left' => $right, 'right' => $left ) );		break;	}	if ( $left_revision->ID == $right_revision->post_parent ) // right is a revision of left		$post =& $left_revision;	elseif ( $left_revision->post_parent == $right_revision->ID ) // left is a revision of right		$post =& $right_revision;	elseif ( $left_revision->post_parent == $right_revision->post_parent ) // both are revisions of common parent		$post = get_post( $left_revision->post_parent );	else		break; // Don't diff two unrelated revisions	if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) { // Revisions disabled		if (			// we're not looking at an autosave			( !wp_is_post_autosave( $left_revision ) && !wp_is_post_autosave( $right_revision ) )		||			// we're not comparing an autosave to the current post			( $post->ID !== $left_revision->ID && $post->ID !== $right_revision->ID )		) {			$redirect = 'edit.php?post_type=' . $post->post_type;			break;		}	}	if (		// They're the same		$left_revision->ID == $right_revision->ID	||		// Neither is a revision		( !wp_get_post_revision( $left_revision->ID ) && !wp_get_post_revision( $right_revision->ID ) )	)		break;	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$h2 = sprintf( __( 'Compare Revisions of &#8220;%1$s&#8221;' ), $post_title );	$title = __( 'Revisions' );	$left  = $left_revision->ID;	$right = $right_revision->ID;	$redirect = false;	break;case 'view' :default :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	if ( !current_user_can( 'read_post', $revision->ID ) || !current_user_can( 'read_post', $post->ID ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$revision_title = wp_post_revision_title( $revision, false );	$h2 = sprintf( __( 'Revision for &#8220;%1$s&#8221; created on %2$s' ), $post_title, $revision_title );	$title = __( 'Revisions' );	// Sets up the diff radio buttons	$left  = $revision->ID;	$right = $post->ID;	$redirect = false;	break;endswitch;// Empty post_type means either malformed object found, or no valid parent was found.if ( !$redirect && empty($post->post_type) )	$redirect = 'edit.php';if ( !empty($redirect) ) {	wp_redirect( $redirect );	exit;}// This is so that the correct "Edit" menu item is selected.if ( !empty($post->post_type) && 'post' != $post->post_type )	$parent_file = $submenu_file = 'edit.php?post_type=' . $post->post_type;else	$parent_file = $submenu_file = 'edit.php';require_once( './admin-header.php' );?><div class="wrap"><h2 class="long-header"><?php echo $h2; ?></h2><table class="form-table ie-fixed">	<col class="th" /><?php if ( 'diff' == $action ) : ?><tr id="revision">	<th scope="row"></th>	<th scope="col" class="th-full">		<span class="alignleft"><?php printf( __('Older: %s'), wp_post_revision_title( $left_revision ) ); ?></span>		<span class="alignright"><?php printf( __('Newer: %s'), wp_post_revision_title( $right_revision ) ); ?></span>	</th></tr><?php endif;// use get_post_to_edit filters?$identical = true;foreach ( _wp_post_revision_fields() as $field => $field_title ) :	if ( 'diff' == $action ) {		$left_content = apply_filters( "_wp_post_revision_field_$field", $left_revision->$field, $field );		$right_content = apply_filters( "_wp_post_revision_field_$field", $right_revision->$field, $field );		if ( !$content = wp_text_diff( $left_content, $right_content ) )			continue; // There is no difference between left and right		$identical = false;	} else {		add_filter( "_wp_post_revision_field_$field", 'htmlspecialchars' );		$content = apply_filters( "_wp_post_revision_field_$field", $revision->$field, $field );	}	?>	<tr id="revision-field-<?php echo $field; ?>">		<th scope="row"><?php echo esc_html( $field_title ); ?></th>		<td><div class="pre"><?php echo $content; ?></div></td>	</tr>	<?phpendforeach;if ( 'diff' == $action && $identical ) :	?>	<tr><td colspan="2"><div class="updated"><p><?php _e( 'These revisions are identical.' ); ?></p></div></td></tr>	<?phpendif;?></table><br class="clear" /><h2><?php echo $title; ?></h2><?php$args = array( 'format' => 'form-table', 'parent' => true, 'right' => $right, 'left' => $left );if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') )	$args['type'] = 'autosave';wp_list_post_revisions( $post, $args );?></div><?phprequire_once( './admin-footer.php' );
<?php/** * Privacy Options Settings Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Privacy Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can choose whether or not your site will be crawled by robots, ping services, and spiders. If you want those services to ignore your site, click the second option here. Note that your privacy is not complete; your site is still visible on the web.') . '</p>' .	'<p>' . __('When this setting is in effect a reminder is shown in the header of these administration screens that says, &#8220;Search Engines Blocked,&#8221; to remind you that your site is not being crawled.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Privacy_SubPanel" target="_blank">Privacy Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('privacy'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Site Visibility') ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Site Visibility') ?> </span></legend><input id="blog-public" type="radio" name="blog_public" value="1" <?php checked('1', get_option('blog_public')); ?> /><label for="blog-public"><?php _e('I would like my site to be visible to everyone, including search engines (like Google, Bing, Technorati) and archivers');?></label><br/><input id="blog-norobots" type="radio" name="blog_public" value="0" <?php checked('0', get_option('blog_public')); ?> /><label for="blog-norobots"><?php _e('I would like to block search engines, but allow normal visitors'); ?></label><?php do_action('blog_privacy_selector'); ?></fieldset></td></tr><?php do_settings_fields('privacy', 'default'); ?></table><?php do_settings_sections('privacy'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Comment Moderation Administration Panel. * * Redirects to edit-comments.php?comment_status=moderated. * * @package WordPress * @subpackage Administration */require_once('../wp-load.php');wp_redirect('edit-comments.php?comment_status=moderated');?>
<?php// Silence is golden.?>
<?php/** * WordPress SSH2 Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing SSH2. * * To use this class you must follow these steps for PHP 5.2.6+ * * @contrib http://kevin.vanzonneveld.net/techblog/article/make_ssh_connections_with_php/ - Installation Notes * * Complie libssh2 (Note: Only 0.14 is officaly working with PHP 5.2.6+ right now, But many users have found the latest versions work) * * cd /usr/src * wget http://surfnet.dl.sourceforge.net/sourceforge/libssh2/libssh2-0.14.tar.gz * tar -zxvf libssh2-0.14.tar.gz * cd libssh2-0.14/ * ./configure * make all install * * Note: Do not leave the directory yet! * * Enter: pecl install -f ssh2 * * Copy the ssh.so file it creates to your PHP Module Directory. * Open up your PHP.INI file and look for where extensions are placed. * Add in your PHP.ini file: extension=ssh2.so * * Restart Apache! * Check phpinfo() streams to confirm that: ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp  exist. * * Note: as of WordPress 2.8, This utilises the PHP5+ function 'stream_get_contents' * * @since 2.7 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_SSH2 extends WP_Filesystem_Base {	var $link = false;	var $sftp_link = false;	var $keys = false;	var $errors = array();	var $options = array();	function WP_Filesystem_SSH2($opt='') {		$this->method = 'ssh2';		$this->errors = new WP_Error();		//Check if possible to use ssh2 functions.		if ( ! extension_loaded('ssh2') ) {			$this->errors->add('no_ssh2_ext', __('The ssh2 PHP extension is not available'));			return false;		}		if ( !function_exists('stream_get_contents') ) {			$this->errors->add('ssh2_php_requirement', __('The ssh2 PHP extension is available, however, we require the PHP5 function <code>stream_get_contents()</code>'));			return false;		}		// Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 22;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('SSH2 hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( !empty ($opt['public_key']) && !empty ($opt['private_key']) ) {			$this->options['public_key'] = $opt['public_key'];			$this->options['private_key'] = $opt['private_key'];			$this->options['hostkey'] = array('hostkey' => 'ssh-rsa');			$this->keys = true;		} elseif ( empty ($opt['username']) ) {			$this->errors->add('empty_username', __('SSH2 username is required'));		}		if ( !empty($opt['username']) )			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) ) {			if ( !$this->keys )	//password can be blank if we are using keys				$this->errors->add('empty_password', __('SSH2 password is required'));		} else {			$this->options['password'] = $opt['password'];		}	}	function connect() {		if ( ! $this->keys ) {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port']);		} else {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port'], $this->options['hostkey']);		}		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to SSH2 Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( !$this->keys ) {			if ( ! @ssh2_auth_password($this->link, $this->options['username'], $this->options['password']) ) {				$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));				return false;			}		} else {			if ( ! @ssh2_auth_pubkey_file($this->link, $this->options['username'], $this->options['public_key'], $this->options['private_key'], $this->options['password'] ) ) {				$this->errors->add('auth', sprintf(__('Public and Private keys incorrect for %s'), $this->options['username']));				return false;			}		}		$this->sftp_link = ssh2_sftp($this->link);		return true;	}	function run_command( $command, $returnbool = false) {		if ( ! $this->link )			return false;		if ( ! ($stream = ssh2_exec($this->link, $command)) ) {			$this->errors->add('command', sprintf(__('Unable to perform command: %s'), $command));		} else {			stream_set_blocking( $stream, true );			stream_set_timeout( $stream, FS_TIMEOUT );			$data = stream_get_contents( $stream );			fclose( $stream );			if ( $returnbool )				return ( $data === false ) ? false : '' != trim($data);			else				return $data;		}		return false;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		$file = ltrim($file, '/');		return file_get_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function get_contents_array($file) {		$file = ltrim($file, '/');		return file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function put_contents($file, $contents, $mode = false ) {		$file = ltrim($file, '/');		$ret = file_put_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file, $contents);		$this->chmod($file, $mode);		return false !== $ret;	}	function cwd() {		$cwd = $this->run_command('pwd');		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return $this->run_command('cd ' . $dir, true);	}	function chgrp($file, $group, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chgrp %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chgrp -R %o %s', $mode, escapeshellarg($file)), true);	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chmod %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chmod -R %o %s', $mode, escapeshellarg($file)), true);	}	function chown($file, $owner, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chown %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chown -R %o %s', $mode, escapeshellarg($file)), true);	}	function owner($file) {		$owneruid = @fileowner('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $owneruid )			return false;		if ( ! function_exists('posix_getpwuid') )			return $owneruid;		$ownerarray = posix_getpwuid($owneruid);		return $ownerarray['name'];	}	function getchmod($file) {		return substr(decoct(@fileperms( 'ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/') )),3);	}	function group($file) {		$gid = @filegroup('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $gid )			return false;		if ( ! function_exists('posix_getgrgid') )			return $gid;		$grouparray = posix_getgrgid($gid);		return $grouparray['name'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return @ssh2_sftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false) {		if ( $this->is_file($file) )			return ssh2_sftp_unlink($this->sftp_link, $file);		if ( ! $recursive )			 return ssh2_sftp_rmdir($this->sftp_link, $file);		$filelist = $this->dirlist($file);		if ( is_array($filelist) ) {			foreach ( $filelist as $filename => $fileinfo) {				$this->delete($file . '/' . $filename, $recursive);			}		}		return ssh2_sftp_rmdir($this->sftp_link, $file);	}	function exists($file) {		$file = ltrim($file, '/');		return file_exists('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_file($file) {		$file = ltrim($file, '/');		return is_file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_dir($path) {		$path = ltrim($path, '/');		return is_dir('ssh2.sftp://' . $this->sftp_link . '/' . $path);	}	function is_readable($file) {		$file = ltrim($file, '/');		return is_readable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_writable($file) {		$file = ltrim($file, '/');		return is_writable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function atime($file) {		$file = ltrim($file, '/');		return fileatime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function mtime($file) {		$file = ltrim($file, '/');		return filemtime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function size($file) {		$file = ltrim($file, '/');		return filesize('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function touch($file, $time = 0, $atime = 0) {		//Not implmented.	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		$path = untrailingslashit($path);		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		if ( ! ssh2_sftp_mkdir($this->sftp_link, $path, $chmod, true) )			return false;		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function dirlist($path, $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path);		} else {			$limit_file = false;		}		if ( ! $this->is_dir($path) )			return false;		$ret = array();		$dir = @dir('ssh2.sftp://' . $this->sftp_link .'/' . ltrim($path, '/') );		if ( ! $dir )			return false;		while (false !== ($entry = $dir->read()) ) {			$struc = array();			$struc['name'] = $entry;			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue; //Do not care about these folders.			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			$struc['perms'] 	= $this->gethchmod($path.'/'.$entry);			$struc['permsn']	= $this->getnumchmodfromh($struc['perms']);			$struc['number'] 	= false;			$struc['owner']    	= $this->owner($path.'/'.$entry);			$struc['group']    	= $this->group($path.'/'.$entry);			$struc['size']    	= $this->size($path.'/'.$entry);			$struc['lastmodunix']= $this->mtime($path.'/'.$entry);			$struc['lastmod']   = date('M j',$struc['lastmodunix']);			$struc['time']    	= date('h:i:s',$struc['lastmodunix']);			$struc['type']		= $this->is_dir($path.'/'.$entry) ? 'd' : 'f';			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		$dir->close();		unset($dir);		return $ret;	}}
<?php/** * WordPress Bookmark Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function add_link() {	return edit_link();}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function edit_link( $link_id = '' ) {	if (!current_user_can( 'manage_links' ))		wp_die( __( 'Cheatin&#8217; uh?' ));	$_POST['link_url'] = esc_html( $_POST['link_url'] );	$_POST['link_url'] = esc_url($_POST['link_url']);	$_POST['link_name'] = esc_html( $_POST['link_name'] );	$_POST['link_image'] = esc_html( $_POST['link_image'] );	$_POST['link_rss'] = esc_url($_POST['link_rss']);	if ( !isset($_POST['link_visible']) || 'N' != $_POST['link_visible'] )		$_POST['link_visible'] = 'Y';	if ( !empty( $link_id ) ) {		$_POST['link_id'] = $link_id;		return wp_update_link( $_POST);	} else {		return wp_insert_link( $_POST);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_default_link_to_edit() {	if ( isset( $_GET['linkurl'] ) )		$link->link_url = esc_url( $_GET['linkurl']);	else		$link->link_url = '';	if ( isset( $_GET['name'] ) )		$link->link_name = esc_attr( $_GET['name']);	else		$link->link_name = '';	$link->link_visible = 'Y';	return $link;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_delete_link( $link_id ) {	global $wpdb;	do_action( 'delete_link', $link_id );	wp_delete_object_term_relationships( $link_id, 'link_category' );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->links WHERE link_id = %d", $link_id ) );	do_action( 'deleted_link', $link_id );	clean_bookmark_cache( $link_id );	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_get_link_cats( $link_id = 0 ) {	$cats = wp_get_object_terms( $link_id, 'link_category', array('fields' => 'ids') );	return array_unique( $cats );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function get_link_to_edit( $link_id ) {	return get_bookmark( $link_id, OBJECT, 'edit' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_insert_link( $linkdata, $wp_error = false ) {	global $wpdb, $current_user;	$defaults = array( 'link_id' => 0, 'link_name' => '', 'link_url' => '', 'link_rating' => 0 );	$linkdata = wp_parse_args( $linkdata, $defaults );	$linkdata = sanitize_bookmark( $linkdata, 'db' );	extract( stripslashes_deep( $linkdata ), EXTR_SKIP );	$update = false;	if ( !empty( $link_id ) )		$update = true;	if ( trim( $link_name ) == '' ) {		if ( trim( $link_url ) != '' ) {			$link_name = $link_url;		} else {			return 0;		}	}	if ( trim( $link_url ) == '' )		return 0;	if ( empty( $link_rating ) )		$link_rating = 0;	if ( empty( $link_image ) )		$link_image = '';	if ( empty( $link_target ) )		$link_target = '';	if ( empty( $link_visible ) )		$link_visible = 'Y';	if ( empty( $link_owner ) )		$link_owner = $current_user->id;	if ( empty( $link_notes ) )		$link_notes = '';	if ( empty( $link_description ) )		$link_description = '';	if ( empty( $link_rss ) )		$link_rss = '';	if ( empty( $link_rel ) )		$link_rel = '';	// Make sure we set a valid category	if ( ! isset( $link_category ) ||0 == count( $link_category ) || !is_array( $link_category ) ) {		$link_category = array( get_option( 'default_link_category' ) );	}	if ( $update ) {		if ( false === $wpdb->update( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_rating', 'link_rel', 'link_notes', 'link_rss'), compact('link_id') ) ) {			if ( $wp_error )				return new WP_Error( 'db_update_error', __( 'Could not update link in the database' ), $wpdb->last_error );			else				return 0;		}	} else {		if ( false === $wpdb->insert( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_rel', 'link_notes', 'link_rss') ) ) {			if ( $wp_error )				return new WP_Error( 'db_insert_error', __( 'Could not insert link into the database' ), $wpdb->last_error );			else				return 0;		}		$link_id = (int) $wpdb->insert_id;	}	wp_set_link_cats( $link_id, $link_category );	if ( $update )		do_action( 'edit_link', $link_id );	else		do_action( 'add_link', $link_id );	clean_bookmark_cache( $link_id );	return $link_id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @param unknown_type $link_categories */function wp_set_link_cats( $link_id = 0, $link_categories = array() ) {	// If $link_categories isn't already an array, make it one:	if ( !is_array( $link_categories ) || 0 == count( $link_categories ) )		$link_categories = array( get_option( 'default_link_category' ) );	$link_categories = array_map( 'intval', $link_categories );	$link_categories = array_unique( $link_categories );	wp_set_object_terms( $link_id, $link_categories, 'link_category' );	clean_bookmark_cache( $link_id );}	// wp_set_link_cats()/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_update_link( $linkdata ) {	$link_id = (int) $linkdata['link_id'];	$link = get_bookmark( $link_id, ARRAY_A );	// Escape data pulled from DB.	$link = add_magic_quotes( $link );	// Passed link category list overwrites existing category list if not empty.	if ( isset( $linkdata['link_category'] ) && is_array( $linkdata['link_category'] )			 && 0 != count( $linkdata['link_category'] ) )		$link_cats = $linkdata['link_category'];	else		$link_cats = $link['link_category'];	// Merge old and new fields with new fields overwriting old ones.	$linkdata = array_merge( $link, $linkdata );	$linkdata['link_category'] = $link_cats;	return wp_insert_link( $linkdata );}?>
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * WordPress Cron Implementation for hosts, which do not offer CRON or for which * the user has not set up a CRON job pointing to this file. * * The HTTP request to this file will not slow down the visitor who happens to * visit when the cron job is needed to run. * * @package WordPress */ignore_user_abort(true);if ( !empty($_POST) || defined('DOING_AJAX') || defined('DOING_CRON') )	die();/** * Tell WordPress we are doing the CRON task. * * @var bool */define('DOING_CRON', true);if ( !defined('ABSPATH') ) {	/** Set up WordPress environment */	require_once('./wp-load.php');}if ( false === $crons = _get_cron_array() )	die();$keys = array_keys( $crons );$local_time = time();if ( isset($keys[0]) && $keys[0] > $local_time )	die();foreach ($crons as $timestamp => $cronhooks) {	if ( $timestamp > $local_time )		break;	foreach ($cronhooks as $hook => $keys) {		foreach ($keys as $k => $v) {			$schedule = $v['schedule'];			if ($schedule != false) {				$new_args = array($timestamp, $schedule, $hook, $v['args']);				call_user_func_array('wp_reschedule_event', $new_args);			}			wp_unschedule_event($timestamp, $hook, $v['args']); 			do_action_ref_array($hook, $v['args']);		}	}}die();
<?php/** * WordPress Installer * * @package WordPress * @subpackage Administration */// Sanity check.if ( false ) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Error: PHP is not running</title></head><body>	<h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1>	<h2>Error: PHP is not running</h2>	<p>WordPress requires that your web server is running PHP. Your server does not have PHP installed, or PHP is turned off.</p></body></html><?php}/** * We are installing WordPress. * * @since 1.5.1 * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );/** Load WordPress Administration Upgrade API */require_once( dirname( __FILE__ ) . '/includes/upgrade.php' );/** Load wpdb */require_once(dirname(dirname(__FILE__)) . '/wp-includes/wp-db.php');$step = isset( $_GET['step'] ) ? $_GET['step'] : 0;/** * Display install header. * * @since 2.5.0 * @package WordPress * @subpackage Installer */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e( 'WordPress &rsaquo; Installation' ); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php} // end display_header()/** * Display installer setup form. * * @since 2.8.0 * @package WordPress * @subpackage Installer */function display_setup_form( $error = null ) {	global $wpdb;	$user_table = ( $wpdb->get_var("SHOW TABLES LIKE '$wpdb->users'") != null );	// Ensure that Blogs appear in search engines by default	$blog_public = 1;	if ( ! empty( $_POST ) )		$blog_public = isset( $_POST['blog_public'] );	$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';	$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';	$admin_password = isset($_POST['admin_password']) ? trim( stripslashes( $_POST['admin_password'] ) ) : '';	$admin_email  = isset( $_POST['admin_email']  ) ? trim( stripslashes( $_POST['admin_email'] ) ) : '';	if ( ! is_null( $error ) ) {?><p class="message"><?php printf( __( '<strong>ERROR</strong>: %s' ), $error ); ?></p><?php } ?><form id="setup" method="post" action="install.php?step=2">	<table class="form-table">		<tr>			<th scope="row"><label for="weblog_title"><?php _e( 'Site Title' ); ?></label></th>			<td><input name="weblog_title" type="text" id="weblog_title" size="25" value="<?php echo esc_attr( $weblog_title ); ?>" /></td>		</tr>		<tr>			<th scope="row"><label for="user_name"><?php _e('Username'); ?></label></th>			<td>			<?php			if ( $user_table ) {				_e('User(s) already exists.');			} else {				?><input name="user_name" type="text" id="user_login" size="25" value="<?php echo esc_attr( sanitize_user( $user_name, true ) ); ?>" />				<p><?php _e( 'Usernames can have only alphanumeric characters, spaces, underscores, hyphens, periods and the @ symbol.' ); ?></p>			<?php			} ?>			</td>		</tr>		<?php if ( ! $user_table ) : ?>		<tr>			<th scope="row">				<label for="admin_password"><?php _e('Password, twice'); ?></label>				<p><?php _e('A password will be automatically generated for you if you leave this blank.'); ?></p>			</th>			<td>				<input name="admin_password" type="password" id="pass1" size="25" value="" />				<p><input name="admin_password2" type="password" id="pass2" size="25" value="" /></p>				<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>				<p><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>			</td>		</tr>		<?php endif; ?>		<tr>			<th scope="row"><label for="admin_email"><?php _e( 'Your E-mail' ); ?></label></th>			<td><input name="admin_email" type="text" id="admin_email" size="25" value="<?php echo esc_attr( $admin_email ); ?>" />			<p><?php _e( 'Double-check your email address before continuing.' ); ?></p></td>		</tr>		<tr>			<td colspan="2"><label><input type="checkbox" name="blog_public" value="1" <?php checked( $blog_public ); ?> /> <?php _e( 'Allow my site to appear in search engines like Google and Technorati.' ); ?></label></td>		</tr>	</table>	<p class="step"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Install WordPress' ); ?>" class="button" /></p></form><?php} // end display_setup_form()// Let's check to make sure WP isn't already installed.if ( is_blog_installed() ) {	display_header();	die( '<h1>' . __( 'Already Installed' ) . '</h1><p>' . __( 'You appear to have already installed WordPress. To reinstall please clear your old database tables first.' ) . '</p><p class="step"><a href="../wp-login.php" class="button">' . __('Log In') . '</a></p></body></html>' );}$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );if ( !$mysql_compat && !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );elseif ( !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );elseif ( !$mysql_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );if ( !$mysql_compat || !$php_compat ) {	display_header();	die('<h1>' . __('Insufficient Requirements') . '</h1><p>' . $compat . '</p></body></html>');}switch($step) {	case 0: // Step 1	case 1: // Step 1, direct link.	  display_header();?><h1><?php _e( 'Welcome' ); ?></h1><p><?php printf( __( 'Welcome to the famous five minute WordPress installation process! You may want to browse the <a href="%s">ReadMe documentation</a> at your leisure. Otherwise, just fill in the information below and you&#8217;ll be on your way to using the most extendable and powerful personal publishing platform in the world.' ), '../readme.html' ); ?></p><h1><?php _e( 'Information needed' ); ?></h1><p><?php _e( 'Please provide the following information. Don&#8217;t worry, you can always change these settings later.' ); ?></p><?php		display_setup_form();		break;	case 2:		if ( ! empty( $wpdb->error ) )			wp_die( $wpdb->error->get_error_message() );		display_header();		// Fill in the data we gathered		$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';		$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';		$admin_password = isset($_POST['admin_password']) ? $_POST['admin_password'] : '';		$admin_password_check = isset($_POST['admin_password2']) ? $_POST['admin_password2'] : '';		$admin_email  = isset( $_POST['admin_email']  ) ?trim( stripslashes( $_POST['admin_email'] ) ) : '';		$public       = isset( $_POST['blog_public']  ) ? (int) $_POST['blog_public'] : 0;		// check e-mail address		$error = false;		if ( empty( $user_name ) ) {			// TODO: poka-yoke			display_setup_form( __('you must provide a valid username.') );			$error = true;		} elseif ( $user_name != sanitize_user( $user_name, true ) ) {			display_setup_form( __('the username you provided has invalid characters.') );			$error = true;		} elseif ( $admin_password != $admin_password_check ) {			// TODO: poka-yoke			display_setup_form( __( 'your passwords do not match. Please try again' ) );			$error = true;		} else if ( empty( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'you must provide an e-mail address.' ) );			$error = true;		} elseif ( ! is_email( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'that isn&#8217;t a valid e-mail address.  E-mail addresses look like: <code>username@example.com</code>' ) );			$error = true;		}		if ( $error === false ) {			$wpdb->show_errors();			$result = wp_install($weblog_title, $user_name, $admin_email, $public, '', $admin_password);			extract( $result, EXTR_SKIP );?><h1><?php _e( 'Success!' ); ?></h1><p><?php _e( 'WordPress has been installed. Were you expecting more steps? Sorry to disappoint.' ); ?></p><table class="form-table">	<tr>		<th><?php _e( 'Username' ); ?></th>		<td><code><?php echo esc_html( sanitize_user( $user_name, true ) ); ?></code></td>	</tr>	<tr>		<th><?php _e( 'Password' ); ?></th>		<td><?php		if ( ! empty( $password ) && empty($admin_password_check) )			echo '<code>'. esc_html($password) .'</code><br />';		echo "<p>$password_message</p>"; ?>		</td>	</tr></table><p class="step"><a href="../wp-login.php" class="button"><?php _e( 'Log In' ); ?></a></p><?php		}		break;}?><script type="text/javascript">var t = document.getElementById('weblog_title'); if (t){ t.focus(); }</script><script type="text/javascript" src="../wp-includes/js/jquery/jquery.js"></script><script type="text/javascript" src="js/password-strength-meter.js"></script><script type="text/javascript" src="js/user-profile.js"></script><script type="text/javascript" src="js/utils.js"></script><script type='text/javascript'>/* <![CDATA[ */var pwsL10n = { empty: "<?php echo esc_js( __( 'Strength indicator' ) ); ?>", short: "<?php echo esc_js( __( 'Very weak' ) ); ?>", bad: "<?php echo esc_js( __( 'Weak' ) ); ?>", good: "<?php echo esc_js( __( 'Medium' ) ); ?>", strong: "<?php echo esc_js( __( 'Strong' ) ); ?>", mismatch: "<?php echo esc_js( __( 'Mismatch' ) ); ?>"};try{convertEntities(pwsL10n);}catch(e){};/* ]]> */</script></body></html>
<?php/** * The template for displaying Author Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know who	 * the author is when we try to get their name,	 * URL, description, avatar, etc.	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>				<h1 class="page-title author"><?php printf( __( 'Author Archives: %s', 'twentyten' ), "<span class='vcard'><a class='url fn n' href='" . get_author_posts_url( get_the_author_meta( 'ID' ) ) . "' title='" . esc_attr( get_the_author() ) . "' rel='me'>" . get_the_author() . "</a></span>" ); ?></h1><?php// If a user has filled out their description, show a bio on their entries.if ( get_the_author_meta( 'description' ) ) : ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( __( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>						</div><!-- #author-description	-->					</div><!-- #entry-author-info --><?php endif; ?><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the author archive page to output the authors posts	 * If you want to overload this in a child theme then include a file	 * called loop-author.php and that will be used instead.	 */	 get_template_part( 'loop', 'author' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Atom Feed Template for displaying Atom Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="' . get_option('blog_charset') . '" ?' . '>';?><feed	xmlns="http://www.w3.org/2005/Atom"	xml:lang="<?php echo get_option('rss_language'); ?>"	xmlns:thr="http://purl.org/syndication/thread/1.0"	<?php do_action('atom_ns'); do_action('atom_comments_ns'); ?>>	<title type="text"><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %1$s searching on %2$s')), get_bloginfo_rss( 'name' ), get_search_query() );		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<subtitle type="text"><?php bloginfo_rss('description'); ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastcommentmodified('GMT'), false); ?></updated><?php if ( is_singular() ) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php comments_link_feed(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_post_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_post_comments_feed_link('', 'atom'); ?></id><?php } elseif(is_search()) { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php echo home_url() . '?s=' . get_search_query(); ?>" />	<link rel="self" type="application/atom+xml" href="<?php echo get_search_comments_feed_link('', 'atom'); ?>" />	<id><?php echo get_search_comments_feed_link('', 'atom'); ?></id><?php } else { ?>	<link rel="alternate" type="<?php bloginfo_rss('html_type'); ?>" href="<?php bloginfo_rss('url'); ?>" />	<link rel="self" type="application/atom+xml" href="<?php bloginfo_rss('comments_atom_url'); ?>" />	<id><?php bloginfo_rss('comments_atom_url'); ?></id><?php } ?><?php do_action('comments_atom_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<entry>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link rel="alternate" href="<?php comment_link(); ?>" type="<?php bloginfo_rss('html_type'); ?>" />		<author>			<name><?php comment_author_rss(); ?></name>			<?php if (get_comment_author_url()) echo '<uri>' . get_comment_author_url() . '</uri>'; ?>		</author>		<id><?php comment_guid(); ?></id>		<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></updated>		<published><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_comment_time('Y-m-d H:i:s', true, false), false); ?></published><?php if ( post_password_required($comment_post) ) : ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php echo get_the_password_form(); ?>]]></content><?php else : // post pass ?>		<content type="html" xml:base="<?php comment_link(); ?>"><![CDATA[<?php comment_text(); ?>]]></content><?php endif; // post pass	// Return comment threading information (http://www.ietf.org/rfc/rfc4685.txt)	if ( $comment->comment_parent == 0 ) : // This comment is top level ?>		<thr:in-reply-to ref="<?php the_guid(); ?>" href="<?php the_permalink_rss() ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php else : // This comment is in reply to another comment	$parent_comment = get_comment($comment->comment_parent);	// The rel attribute below and the id tag above should be GUIDs, but WP doesn't create them for comments (unlike posts). Either way, its more important that they both use the same system?>		<thr:in-reply-to ref="<?php comment_guid($parent_comment) ?>" href="<?php echo get_comment_link($parent_comment) ?>" type="<?php bloginfo_rss('html_type'); ?>" /><?php endif;	do_action('comment_atom_entry', $comment->comment_ID, $comment_post->ID);?>	</entry><?php endwhile; endif; ?></feed>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?php/** * Includes all of the WordPress Administration API files. * * @package WordPress * @subpackage Administration *//** WordPress Bookmark Administration API */require_once(ABSPATH . 'wp-admin/includes/bookmark.php');/** WordPress Comment Administration API */require_once(ABSPATH . 'wp-admin/includes/comment.php');/** WordPress Administration File API */require_once(ABSPATH . 'wp-admin/includes/file.php');/** WordPress Image Administration API */require_once(ABSPATH . 'wp-admin/includes/image.php');/** WordPress Media Administration API */require_once(ABSPATH . 'wp-admin/includes/media.php');/** WordPress Import Administration API */require_once(ABSPATH . 'wp-admin/includes/import.php');/** WordPress Misc Administration API */require_once(ABSPATH . 'wp-admin/includes/misc.php');/** WordPress Plugin Administration API */require_once(ABSPATH . 'wp-admin/includes/plugin.php');/** WordPress Post Administration API */require_once(ABSPATH . 'wp-admin/includes/post.php');/** WordPress Taxonomy Administration API */require_once(ABSPATH . 'wp-admin/includes/taxonomy.php');/** WordPress Template Administration API */require_once(ABSPATH . 'wp-admin/includes/template.php');/** WordPress Theme Administration API */require_once(ABSPATH . 'wp-admin/includes/theme.php');/** WordPress User Administration API */require_once(ABSPATH . 'wp-admin/includes/user.php');/** WordPress Update Administration API */require_once(ABSPATH . 'wp-admin/includes/update.php');/** WordPress Registration API */require_once(ABSPATH . WPINC . '/registration.php');/** WordPress Deprecated Administration API */require_once(ABSPATH . 'wp-admin/includes/deprecated.php');/** WordPress Multi-Site support API */if ( is_multisite() ) {	require_once(ABSPATH . 'wp-admin/includes/ms.php');	require_once(ABSPATH . 'wp-admin/includes/ms-deprecated.php');}?>
<?php/** * Classes, which help reading streams of data from files. * Based on the classes from Danilo Segan <danilo@kvota.net> * * @version $Id: streams.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage streams */if ( !class_exists( 'POMO_Reader' ) ):class POMO_Reader {	var $endian = 'little';	var $_post = '';	function POMO_Reader() {		$this->is_overloaded = ((ini_get("mbstring.func_overload") & 2) != 0) && function_exists('mb_substr');		$this->_pos = 0;	}	/**	 * Sets the endianness of the file.	 *	 * @param $endian string 'big' or 'little'	 */	function setEndian($endian) {		$this->endian = $endian;	}	/**	 * Reads a 32bit Integer from the Stream	 *	 * @return mixed The integer, corresponding to the next 32 bits from	 * 	the stream of false if there are not enough bytes or on error	 */	function readint32() {		$bytes = $this->read(4);		if (4 != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		$int = unpack($endian_letter, $bytes);		return array_shift($int);	}	/**	 * Reads an array of 32-bit Integers from the Stream	 *	 * @param integer count How many elements should be read	 * @return mixed Array of integers or false if there isn't	 * 	enough data or on error	 */	function readint32array($count) {		$bytes = $this->read(4 * $count);		if (4*$count != $this->strlen($bytes))			return false;		$endian_letter = ('big' == $this->endian)? 'N' : 'V';		return unpack($endian_letter.$count, $bytes);	}	function substr($string, $start, $length) {		if ($this->is_overloaded) {			return mb_substr($string, $start, $length, 'ascii');		} else {			return substr($string, $start, $length);		}	}	function strlen($string) {		if ($this->is_overloaded) {			return mb_strlen($string, 'ascii');		} else {			return strlen($string);		}	}	function str_split($string, $chunk_size) {		if (!function_exists('str_split')) {			$length = $this->strlen($string);			$out = array();			for ($i = 0; $i < $length; $i += $chunk_size)				$out[] = $this->substr($string, $i, $chunk_size);			return $out;		} else {			return str_split( $string, $chunk_size );		}	}	function pos() {		return $this->_pos;	}	function is_resource() {		return true;	}	function close() {		return true;	}}endif;if ( !class_exists( 'POMO_FileReader' ) ):class POMO_FileReader extends POMO_Reader {	function POMO_FileReader($filename) {		parent::POMO_Reader();		$this->_f = fopen($filename, 'r');	}	function read($bytes) {		return fread($this->_f, $bytes);	}	function seekto($pos) {		if ( -1 == fseek($this->_f, $pos, SEEK_SET)) {			return false;		}		$this->_pos = $pos;		return true;	}	function is_resource() {		return is_resource($this->_f);	}	function feof() {		return feof($this->_f);	}	function close() {		return fclose($this->_f);	}	function read_all() {		$all = '';		while ( !$this->feof() )			$all .= $this->read(4096);		return $all;	}}endif;if ( !class_exists( 'POMO_StringReader' ) ):/** * Provides file-like methods for manipulating a string instead * of a physical file. */class POMO_StringReader extends POMO_Reader {	var $_str = '';	function POMO_StringReader($str = '') {		parent::POMO_Reader();		$this->_str = $str;		$this->_pos = 0;	}	function read($bytes) {		$data = $this->substr($this->_str, $this->_pos, $bytes);		$this->_pos += $bytes;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $data;	}	function seekto($pos) {		$this->_pos = $pos;		if ($this->strlen($this->_str) < $this->_pos) $this->_pos = $this->strlen($this->_str);		return $this->_pos;	}	function length() {		return $this->strlen($this->_str);	}	function read_all() {		return $this->substr($this->_str, $this->_pos, $this->strlen($this->_str));	}}endif;if ( !class_exists( 'POMO_CachedFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedFileReader extends POMO_StringReader {	function POMO_CachedFileReader($filename) {		parent::POMO_StringReader();		$this->_str = file_get_contents($filename);		if (false === $this->_str)			return false;		$this->_pos = 0;	}}endif;if ( !class_exists( 'POMO_CachedIntFileReader' ) ):/** * Reads the contents of the file in the beginning. */class POMO_CachedIntFileReader extends POMO_CachedFileReader {	function POMO_CachedIntFileReader($filename) {		parent::POMO_CachedFileReader($filename);	}}endif;
<?php/** * Multisite themes administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! current_user_can( 'manage_network_themes' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Themes' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen enables and disables the inclusion of themes available to choose in the Appearance menu for each site. It does not activate or deactivate which theme a site is currently using.') . '</p>' .	'<p>' . __('If the network admin disables a theme that is in use, it can still remain selected on that site. If another theme is chosen, the disabled theme will not appear in the site&#8217;s Appearance > Themes screen.') . '</p>' .	'<p>' . __('Themes can be enabled on a site by site basis by the network admin on the Edit Site screen you go to via the Edit action link on the Sites screen.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Themes_SubPanel" target="_blank">Documentation on Network Themes</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) ) {	?>	<div id="message" class="updated"><p><?php _e( 'Site themes saved.' ) ?></p></div>	<?php}$themes = get_themes();$allowed_themes = get_site_allowed_themes();?><div class="wrap">	<form action="<?php echo esc_url( admin_url( 'ms-edit.php?action=updatethemes' ) ); ?>" method="post">		<?php screen_icon(); ?>		<h2><?php _e( 'Network Themes' ) ?></h2>		<p><?php _e( 'Themes must be enabled for your network before they will be available to individual sites.' ) ?></p>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>		<table class="widefat">			<thead>				<tr>					<th style="width:15%;"><?php _e( 'Enable' ) ?></th>					<th style="width:25%;"><?php _e( 'Theme' ) ?></th>					<th style="width:10%;"><?php _e( 'Version' ) ?></th>					<th style="width:60%;"><?php _e( 'Description' ) ?></th>				</tr>			</thead>			<tbody id="plugins">			<?php			$total_theme_count = $activated_themes_count = 0;			$class = '';			foreach ( (array) $themes as $key => $theme ) {				$total_theme_count++;				$theme_key = esc_html( $theme['Stylesheet'] );				$class = ( 'alt' == $class ) ? '' : 'alt';				$class1 = $enabled = $disabled = '';				$enabled = $disabled = false;				if ( isset( $allowed_themes[$theme_key] ) == true ) {					$enabled = true;					$activated_themes_count++;					$class1 = 'active';				} else {					$disabled = true;				}				?>				<tr valign="top" class="<?php echo $class . ' ' . $class1; ?>">					<td>						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="enabled_<?php echo $theme_key ?>" value="enabled" <?php checked( $enabled ) ?> /> <?php _e( 'Yes' ) ?></label>						&nbsp;&nbsp;&nbsp;						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="disabled_<?php echo $theme_key ?>" value="disabled" <?php checked( $disabled ) ?> /> <?php _e( 'No' ) ?></label>					</td>					<th scope="row" style="text-align:left;"><?php echo $key ?></th>					<td><?php echo $theme['Version'] ?></td>					<td><?php echo $theme['Description'] ?></td>				</tr>			<?php } ?>			</tbody>		</table>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>	</form>	<h3><?php _e( 'Total' )?></h3>	<p>		<?php printf( __( 'Themes Installed: %d' ), $total_theme_count); ?>		<br />		<?php printf( __( 'Themes Enabled: %d' ), $activated_themes_count); ?>	</p></div><?php include( './admin-footer.php' ); ?>
<?php/** * API for creating dynamic sidebar without hardcoding functionality into * themes. Includes both internal WordPress routines and theme use routines. * * This functionality was found in a plugin before WordPress 2.2 release which * included it in the core from that point on. * * @link http://codex.wordpress.org/Plugins/WordPress_Widgets WordPress Widgets * @link http://codex.wordpress.org/Plugins/WordPress_Widgets_Api Widgets API * * @package WordPress * @subpackage Widgets *//** * This class must be extended for each widget and WP_Widget::widget(), WP_Widget::update() * and WP_Widget::form() need to be over-ridden. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget {	var $id_base;			// Root id for all widgets of this type.	var $name;				// Name for this widget type.	var $widget_options;	// Option array passed to wp_register_sidebar_widget()	var $control_options;	// Option array passed to wp_register_widget_control()	var $number = false;	// Unique ID number of the current instance.	var $id = false;		// Unique ID string of the current instance (id_base-number)	var $updated = false;	// Set true when we update the data after a POST submit - makes sure we don't do it twice.	// Member functions that you must over-ride.	/** Echo the widget content.	 *	 * Subclasses should over-ride this function to generate their widget code.	 *	 * @param array $args Display arguments including before_title, after_title, before_widget, and after_widget.	 * @param array $instance The settings for the particular instance of the widget	 */	function widget($args, $instance) {		die('function WP_Widget::widget() must be over-ridden in a sub-class.');	}	/** Update a particular instance.	 *	 * This function should check that $new_instance is set correctly.	 * The newly calculated value of $instance should be returned.	 * If "false" is returned, the instance won't be saved/updated.	 *	 * @param array $new_instance New settings for this instance as input by the user via form()	 * @param array $old_instance Old settings for this instance	 * @return array Settings to save or bool false to cancel saving	 */	function update($new_instance, $old_instance) {		return $new_instance;	}	/** Echo the settings update form	 *	 * @param array $instance Current settings	 */	function form($instance) {		echo '<p class="no-options-widget">' . __('There are no options for this widget.') . '</p>';		return 'noform';	}	// Functions you'll need to call.	/**	 * PHP4 constructor	 */	function WP_Widget( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->__construct( $id_base, $name, $widget_options, $control_options );	}	/**	 * PHP5 constructor	 *	 * @param string $id_base Optional Base ID for the widget, lower case,	 * if left empty a portion of the widget's class name will be used. Has to be unique.	 * @param string $name Name for the widget displayed on the configuration page.	 * @param array $widget_options Optional Passed to wp_register_sidebar_widget()	 *	 - description: shown on the configuration page	 *	 - classname	 * @param array $control_options Optional Passed to wp_register_widget_control()	 *	 - width: required if more than 250px	 *	 - height: currently not used but may be needed in the future	 */	function __construct( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->id_base = empty($id_base) ? preg_replace( '/(wp_)?widget_/', '', strtolower(get_class($this)) ) : strtolower($id_base);		$this->name = $name;		$this->option_name = 'widget_' . $this->id_base;		$this->widget_options = wp_parse_args( $widget_options, array('classname' => $this->option_name) );		$this->control_options = wp_parse_args( $control_options, array('id_base' => $this->id_base) );	}	/**	 * Constructs name attributes for use in form() fields	 *	 * This function should be used in form() methods to create name attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string Name attribute for $field_name	 */	function get_field_name($field_name) {		return 'widget-' . $this->id_base . '[' . $this->number . '][' . $field_name . ']';	}	/**	 * Constructs id attributes for use in form() fields	 *	 * This function should be used in form() methods to create id attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string ID attribute for $field_name	 */	function get_field_id($field_name) {		return 'widget-' . $this->id_base . '-' . $this->number . '-' . $field_name;	}	// Private Functions. Don't worry about these.	function _register() {		$settings = $this->get_settings();		$empty = true;		if ( is_array($settings) ) {			foreach ( array_keys($settings) as $number ) {				if ( is_numeric($number) ) {					$this->_set($number);					$this->_register_one($number);					$empty = false;				}			}		}		if ( $empty ) {			// If there are none, we register the widget's existance with a			// generic template			$this->_set(1);			$this->_register_one();		}	}	function _set($number) {		$this->number = $number;		$this->id = $this->id_base . '-' . $number;	}	function _get_display_callback() {		return array(&$this, 'display_callback');	}	function _get_update_callback() {		return array(&$this, 'update_callback');	}	function _get_form_callback() {		return array(&$this, 'form_callback');	}	/** Generate the actual widget content.	 *	Just finds the instance and calls widget().	 *	Do NOT over-ride this function. */	function display_callback( $args, $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$this->_set( $widget_args['number'] );		$instance = $this->get_settings();		if ( array_key_exists( $this->number, $instance ) ) {			$instance = $instance[$this->number];			// filters the widget's settings, return false to stop displaying the widget			$instance = apply_filters('widget_display_callback', $instance, $this, $args);			if ( false !== $instance )				$this->widget($args, $instance);		}	}	/** Deal with changed settings.	 *	Do NOT over-ride this function. */	function update_callback( $widget_args = 1 ) {		global $wp_registered_widgets;		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		// We need to update the data		if ( $this->updated )			return;		$sidebars_widgets = wp_get_sidebars_widgets();		if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {			// Delete the settings for this instance of the widget			if ( isset($_POST['the-widget-id']) )				$del_id = $_POST['the-widget-id'];			else				return;			if ( isset($wp_registered_widgets[$del_id]['params'][0]['number']) ) {				$number = $wp_registered_widgets[$del_id]['params'][0]['number'];				if ( $this->id_base . '-' . $number == $del_id )					unset($all_instances[$number]);			}		} else {			if ( isset($_POST['widget-' . $this->id_base]) && is_array($_POST['widget-' . $this->id_base]) ) {				$settings = $_POST['widget-' . $this->id_base];			} elseif ( isset($_POST['id_base']) && $_POST['id_base'] == $this->id_base ) {				$num = $_POST['multi_number'] ? (int) $_POST['multi_number'] : (int) $_POST['widget_number'];				$settings = array( $num => array() );			} else {				return;			}			foreach ( $settings as $number => $new_instance ) {				$new_instance = stripslashes_deep($new_instance);				$this->_set($number);				$old_instance = isset($all_instances[$number]) ? $all_instances[$number] : array();				$instance = $this->update($new_instance, $old_instance);				// filters the widget's settings before saving, return false to cancel saving (keep the old settings if updating)				$instance = apply_filters('widget_update_callback', $instance, $new_instance, $old_instance, $this);				if ( false !== $instance )					$all_instances[$number] = $instance;				break; // run only once			}		}		$this->save_settings($all_instances);		$this->updated = true;	}	/** Generate the control form.	 *	Do NOT over-ride this function. */	function form_callback( $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		if ( -1 == $widget_args['number'] ) {			// We echo out a form where 'number' can be set later			$this->_set('__i__');			$instance = array();		} else {			$this->_set($widget_args['number']);			$instance = $all_instances[ $widget_args['number'] ];		}		// filters the widget admin form before displaying, return false to stop displaying it		$instance = apply_filters('widget_form_callback', $instance, $this);		$return = null;		if ( false !== $instance ) {			$return = $this->form($instance);			// add extra fields in the widget form - be sure to set $return to null if you add any			// if the widget has no form the text echoed from the default form method can be hidden using css			do_action_ref_array( 'in_widget_form', array(&$this, &$return, $instance) );		}		return $return;	}	/** Helper function: Registers a single instance. */	function _register_one($number = -1) {		wp_register_sidebar_widget(	$this->id, $this->name,	$this->_get_display_callback(), $this->widget_options, array( 'number' => $number ) );		_register_widget_update_callback( $this->id_base, $this->_get_update_callback(), $this->control_options, array( 'number' => -1 ) );		_register_widget_form_callback(	$this->id, $this->name,	$this->_get_form_callback(), $this->control_options, array( 'number' => $number ) );	}	function save_settings($settings) {		$settings['_multiwidget'] = 1;		update_option( $this->option_name, $settings );	}	function get_settings() {		$settings = get_option($this->option_name);		if ( false === $settings && isset($this->alt_option_name) )			$settings = get_option($this->alt_option_name);		if ( !is_array($settings) )			$settings = array();		if ( !array_key_exists('_multiwidget', $settings) ) {			// old format, conver if single widget			$settings = wp_convert_widget_settings($this->id_base, $this->option_name, $settings);		}		unset($settings['_multiwidget'], $settings['__i__']);		return $settings;	}}/** * Singleton that registers and instantiates WP_Widget classes. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget_Factory {	var $widgets = array();	function WP_Widget_Factory() {		add_action( 'widgets_init', array( &$this, '_register_widgets' ), 100 );	}	function register($widget_class) {		$this->widgets[$widget_class] = & new $widget_class();	}	function unregister($widget_class) {		if ( isset($this->widgets[$widget_class]) )			unset($this->widgets[$widget_class]);	}	function _register_widgets() {		global $wp_registered_widgets;		$keys = array_keys($this->widgets);		$registered = array_keys($wp_registered_widgets);		$registered = array_map('_get_widget_id_base', $registered);		foreach ( $keys as $key ) {			// don't register new widget if old widget with the same id is already registered			if ( in_array($this->widgets[$key]->id_base, $registered, true) ) {				unset($this->widgets[$key]);				continue;			}			$this->widgets[$key]->_register();		}	}}/* Global Variables *//** @ignore */global $wp_registered_sidebars, $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;/** * Stores the sidebars, since many themes can have more than one. * * @global array $wp_registered_sidebars * @since 2.2.0 */$wp_registered_sidebars = array();/** * Stores the registered widgets. * * @global array $wp_registered_widgets * @since 2.2.0 */$wp_registered_widgets = array();/** * Stores the registered widget control (options). * * @global array $wp_registered_widget_controls * @since 2.2.0 */$wp_registered_widget_controls = array();$wp_registered_widget_updates = array();/** * Private */$_wp_sidebars_widgets = array();/** * Private */ $_wp_deprecated_widgets_callbacks = array( 	'wp_widget_pages',	'wp_widget_pages_control',	'wp_widget_calendar',	'wp_widget_calendar_control',	'wp_widget_archives',	'wp_widget_archives_control',	'wp_widget_links',	'wp_widget_meta',	'wp_widget_meta_control',	'wp_widget_search',	'wp_widget_recent_entries',	'wp_widget_recent_entries_control',	'wp_widget_tag_cloud',	'wp_widget_tag_cloud_control',	'wp_widget_categories',	'wp_widget_categories_control',	'wp_widget_text',	'wp_widget_text_control',	'wp_widget_rss',	'wp_widget_rss_control',	'wp_widget_recent_comments',	'wp_widget_recent_comments_control' );/* Template tags & API functions *//** * Register a widget * * Registers a WP_Widget widget * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function register_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->register($widget_class);}/** * Unregister a widget * * Unregisters a WP_Widget widget. Useful for unregistering default widgets. * Run within a function hooked to the widgets_init action. * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function unregister_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->unregister($widget_class);}/** * Creates multiple sidebars. * * If you wanted to quickly create multiple sidebars for a theme or internally. * This function will allow you to do so. If you don't pass the 'name' and/or * 'id' in $args, then they will be built for you. * * The default for the name is "Sidebar #", with '#' being replaced with the * number the sidebar is currently when greater than one. If first sidebar, the * name will be just "Sidebar". The default for id is "sidebar-" followed by the * number the sidebar creation is currently at. If the id is provided, and mutliple * sidebars are being defined, the id will have "-2" appended, and so on. * * @since 2.2.0 * * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here. * @uses parse_str() Converts a string to an array to be used in the rest of the function. * @uses register_sidebar() Sends single sidebar information [name, id] to this *	function to handle building the sidebar. * * @param int $number Number of sidebars to create. * @param string|array $args Builds Sidebar based off of 'name' and 'id' values. */function register_sidebars($number = 1, $args = array()) {	global $wp_registered_sidebars;	$number = (int) $number;	if ( is_string($args) )		parse_str($args, $args);	for ( $i = 1; $i <= $number; $i++ ) {		$_args = $args;		if ( $number > 1 )			$_args['name'] = isset($args['name']) ? sprintf($args['name'], $i) : sprintf(__('Sidebar %d'), $i);		else			$_args['name'] = isset($args['name']) ? $args['name'] : __('Sidebar');		// Custom specified ID's are suffixed if they exist already.		// Automatically generated sidebar names need to be suffixed regardless starting at -0		if ( isset($args['id']) ) {			$_args['id'] = $args['id'];			$n = 2; // Start at -2 for conflicting custom ID's			while ( isset($wp_registered_sidebars[$_args['id']]) )				$_args['id'] = $args['id'] . '-' . $n++;		} else {			$n = count($wp_registered_sidebars);			do {				$_args['id'] = 'sidebar-' . ++$n;			} while ( isset($wp_registered_sidebars[$_args['id']]) );		}		register_sidebar($_args);	}}/** * Builds the definition for a single sidebar and returns the ID. * * The $args parameter takes either a string or an array with 'name' and 'id' * contained in either usage. It will be noted that the values will be applied * to all sidebars, so if creating more than one, it will be advised to allow * for WordPress to create the defaults for you. * * Example for string would be <code>'name=whatever;id=whatever1'</code> and for * the array it would be <code>array( *    'name' => 'whatever', *    'id' => 'whatever1')</code>. * * name - The name of the sidebar, which presumably the title which will be *     displayed. * id - The unique identifier by which the sidebar will be called by. * before_widget - The content that will prepended to the widgets when they are *     displayed. * after_widget - The content that will be appended to the widgets when they are *     displayed. * before_title - The content that will be prepended to the title when displayed. * after_title - the content that will be appended to the title when displayed. * * <em>Content</em> is assumed to be HTML and should be formatted as such, but * doesn't have to be. * * @since 2.2.0 * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string|array $args Builds Sidebar based off of 'name' and 'id' values * @return string The sidebar id that was added. */function register_sidebar($args = array()) {	global $wp_registered_sidebars;	$i = count($wp_registered_sidebars) + 1;	$defaults = array(		'name' => sprintf(__('Sidebar %d'), $i ),		'id' => "sidebar-$i",		'description' => '',		'before_widget' => '<li id="%1$s" class="widget %2$s">',		'after_widget' => "</li>\n",		'before_title' => '<h2 class="widgettitle">',		'after_title' => "</h2>\n",	);	$sidebar = wp_parse_args( $args, $defaults );	$wp_registered_sidebars[$sidebar['id']] = $sidebar;	add_theme_support('widgets');	do_action( 'register_sidebar', $sidebar );	return $sidebar['id'];}/** * Removes a sidebar from the list. * * @since 2.2.0 * * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string $name The ID of the sidebar when it was added. */function unregister_sidebar( $name ) {	global $wp_registered_sidebars;	if ( isset( $wp_registered_sidebars[$name] ) )		unset( $wp_registered_sidebars[$name] );}/** * Register widget for use in sidebars. * * The default widget option is 'classname' that can be override. * * The function can also be used to unregister widgets when $output_callback * parameter is an empty string. * * @since 2.2.0 * * @uses $wp_registered_widgets Uses stored registered widgets. * @uses $wp_register_widget_defaults Retrieves widget defaults. * * @param int|string $id Widget ID. * @param string $name Widget display title. * @param callback $output_callback Run when widget is called. * @param array|string Optional. $options Widget Options. * @param mixed $params,... Widget parameters to add to widget. * @return null Will return if $output_callback is empty after removing widget. */function wp_register_sidebar_widget($id, $name, $output_callback, $options = array()) {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	if ( empty($output_callback) ) {		unset($wp_registered_widgets[$id]);		return;	}	$id_base = _get_widget_id_base($id);	if ( in_array($output_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($output_callback) ) {		if ( isset($wp_registered_widget_controls[$id]) )			unset($wp_registered_widget_controls[$id]);		if ( isset($wp_registered_widget_updates[$id_base]) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$defaults = array('classname' => $output_callback);	$options = wp_parse_args($options, $defaults);	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $output_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	if ( is_callable($output_callback) && ( !isset($wp_registered_widgets[$id]) || did_action( 'widgets_init' ) ) ) {		do_action( 'wp_register_sidebar_widget', $widget );		$wp_registered_widgets[$id] = $widget;	}}/** * Retrieve description for widget. * * When registering widgets, the options can also include 'description' that * describes the widget for display on the widget administration panel or * in the theme. * * @since 2.5.0 * * @param int|string $id Widget ID. * @return string Widget description, if available. Null on failure to retrieve description. */function wp_widget_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_widgets;	if ( isset($wp_registered_widgets[$id]['description']) )		return esc_html( $wp_registered_widgets[$id]['description'] );}/** * Retrieve description for a sidebar. * * When registering sidebars a 'description' parameter can be included that * describes the sidebar for display on the widget administration panel. * * @since 2.9.0 * * @param int|string $id sidebar ID. * @return string Sidebar description, if available. Null on failure to retrieve description. */function wp_sidebar_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_sidebars;	if ( isset($wp_registered_sidebars[$id]['description']) )		return esc_html( $wp_registered_sidebars[$id]['description'] );}/** * Remove widget from sidebar. * * @since 2.2.0 * * @param int|string $id Widget ID. */function wp_unregister_sidebar_widget($id) {	do_action( 'wp_unregister_sidebar_widget', $id );	wp_register_sidebar_widget($id, '', '');	wp_unregister_widget_control($id);}/** * Registers widget control callback for customizing options. * * The options contains the 'height', 'width', and 'id_base' keys. The 'height' * option is never used. The 'width' option is the width of the fully expanded * control form, but try hard to use the default width. The 'id_base' is for * multi-widgets (widgets which allow multiple instances such as the text * widget), an id_base must be provided. The widget id will end up looking like * {$id_base}-{$unique_number}. * * @since 2.2.0 * * @param int|string $id Sidebar ID. * @param string $name Sidebar display name. * @param callback $control_callback Run when sidebar is displayed. * @param array|string $options Optional. Widget options. See above long description. * @param mixed $params,... Optional. Additional parameters to add to widget. */function wp_register_widget_control($id, $name, $control_callback, $options = array()) {	global $wp_registered_widget_controls, $wp_registered_widget_updates, $wp_registered_widgets, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	$id_base = _get_widget_id_base($id);	if ( empty($control_callback) ) {		unset($wp_registered_widget_controls[$id]);		unset($wp_registered_widget_updates[$id_base]);		return;	}	if ( in_array($control_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($control_callback) ) {		if ( isset($wp_registered_widgets[$id]) )			unset($wp_registered_widgets[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 ); // height is never used	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $control_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;	if ( isset($wp_registered_widget_updates[$id_base]) )		return;	if ( isset($widget['params'][0]['number']) )		$widget['params'][0]['number'] = -1;	unset($widget['width'], $widget['height'], $widget['name'], $widget['id']);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_update_callback($id_base, $update_callback, $options = array()) {	global $wp_registered_widget_updates;	if ( isset($wp_registered_widget_updates[$id_base]) ) {		if ( empty($update_callback) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$widget = array(		'callback' => $update_callback,		'params' => array_slice(func_get_args(), 3)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_form_callback($id, $name, $form_callback, $options = array()) {	global $wp_registered_widget_controls;	$id = strtolower($id);	if ( empty($form_callback) ) {		unset($wp_registered_widget_controls[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 );	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $form_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;}/** * Remove control callback for widget. * * @since 2.2.0 * @uses wp_register_widget_control() Unregisters by using empty callback. * * @param int|string $id Widget ID. */function wp_unregister_widget_control($id) {	return wp_register_widget_control($id, '', '');}/** * Display dynamic sidebar. * * By default it displays the default sidebar or 'sidebar-1'. The 'sidebar-1' is * not named by the theme, the actual name is '1', but 'sidebar-' is added to * the registered sidebars for the name. If you named your sidebar 'after-post', * then the parameter $index will still be 'after-post', but the lookup will be * for 'sidebar-after-post'. * * It is confusing for the $index parameter, but just know that it should just * work. When you register the sidebar in the theme, you will use the same name * for this function or "Pay no heed to the man behind the curtain." Just accept * it as an oddity of WordPress sidebar register and display. * * @since 2.2.0 * * @param int|string $index Optional, default is 1. Name or ID of dynamic sidebar. * @return bool True, if widget sidebar was found and called. False if not found or not called. */function dynamic_sidebar($index = 1) {	global $wp_registered_sidebars, $wp_registered_widgets;	if ( is_int($index) ) {		$index = "sidebar-$index";	} else {		$index = sanitize_title($index);		foreach ( (array) $wp_registered_sidebars as $key => $value ) {			if ( sanitize_title($value['name']) == $index ) {				$index = $key;				break;			}		}	}	$sidebars_widgets = wp_get_sidebars_widgets();	if ( empty($wp_registered_sidebars[$index]) || !array_key_exists($index, $sidebars_widgets) || !is_array($sidebars_widgets[$index]) || empty($sidebars_widgets[$index]) )		return false;	$sidebar = $wp_registered_sidebars[$index];	$did_one = false;	foreach ( (array) $sidebars_widgets[$index] as $id ) {		if ( !isset($wp_registered_widgets[$id]) ) continue;		$params = array_merge(			array( array_merge( $sidebar, array('widget_id' => $id, 'widget_name' => $wp_registered_widgets[$id]['name']) ) ),			(array) $wp_registered_widgets[$id]['params']		);		// Substitute HTML id and class attributes into before_widget		$classname_ = '';		foreach ( (array) $wp_registered_widgets[$id]['classname'] as $cn ) {			if ( is_string($cn) )				$classname_ .= '_' . $cn;			elseif ( is_object($cn) )				$classname_ .= '_' . get_class($cn);		}		$classname_ = ltrim($classname_, '_');		$params[0]['before_widget'] = sprintf($params[0]['before_widget'], $id, $classname_);		$params = apply_filters( 'dynamic_sidebar_params', $params );		$callback = $wp_registered_widgets[$id]['callback'];		do_action( 'dynamic_sidebar', $wp_registered_widgets[$id] );		if ( is_callable($callback) ) {			call_user_func_array($callback, $params);			$did_one = true;		}	}	return $did_one;}/** * Whether widget is displayied on the front-end. * * Either $callback or $id_base can be used * $id_base is the first argument when extending WP_Widget class * Without the optional $widget_id parameter, returns the ID of the first sidebar * in which the first instance of the widget with the given callback or $id_base is found. * With the $widget_id parameter, returns the ID of the sidebar where * the widget with that callback/$id_base AND that ID is found. * * NOTE: $widget_id and $id_base are the same for single widgets. To be effective * this function has to run after widgets have initialized, at action 'init' or later. * * @since 2.2.0 * * @param callback Optional, Widget callback to check. * @param int $widget_id Optional, but needed for checking. Widget ID. * @param string $id_base Optional, the base ID of a widget created by extending WP_Widget. * @param bool $skip_inactive Optional, whether to check in 'wp_inactive_widgets'. * @return mixed false if widget is not active or id of sidebar in which the widget is active. */function is_active_widget($callback = false, $widget_id = false, $id_base = false, $skip_inactive = true) {	global $wp_registered_widgets;	$sidebars_widgets = wp_get_sidebars_widgets();	if ( is_array($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $sidebar => $widgets ) {			if ( $skip_inactive && 'wp_inactive_widgets' == $sidebar )				continue;			if ( is_array($widgets) ) {				foreach ( $widgets as $widget ) {					if ( ( $callback && isset($wp_registered_widgets[$widget]['callback']) && $wp_registered_widgets[$widget]['callback'] == $callback ) || ( $id_base && _get_widget_id_base($widget) == $id_base ) ) {						if ( !$widget_id || $widget_id == $wp_registered_widgets[$widget]['id'] )							return $sidebar;					}				}			}		}	}	return false;}/** * Whether the dynamic sidebar is enabled and used by theme. * * @since 2.2.0 * * @return bool True, if using widgets. False, if not using widgets. */function is_dynamic_sidebar() {	global $wp_registered_widgets, $wp_registered_sidebars;	$sidebars_widgets = get_option('sidebars_widgets');	foreach ( (array) $wp_registered_sidebars as $index => $sidebar ) {		if ( count($sidebars_widgets[$index]) ) {			foreach ( (array) $sidebars_widgets[$index] as $widget )				if ( array_key_exists($widget, $wp_registered_widgets) )					return true;		}	}	return false;}/** * Whether a sidebar is in use. * * @since 2.8 * * @param mixed $index, sidebar name, id or number to check. * @return bool true if the sidebar is in use, false otherwise. */function is_active_sidebar( $index ) {	$index = ( is_int($index) ) ? "sidebar-$index" : sanitize_title($index);	$sidebars_widgets = wp_get_sidebars_widgets();	if ( !empty($sidebars_widgets[$index]) )		return true;	return false;}/* Internal Functions *//** * Retrieve full list of sidebars and their widgets. * * Will upgrade sidebar widget list, if needed. Will also save updated list, if * needed. * * @since 2.2.0 * @access private * * @param bool $deprecated. Not used. * @return array Upgraded list of widgets to version 3 array format when called from the admin. */function wp_get_sidebars_widgets($deprecated = true) {	if ( $deprecated !== true )		_deprecated_argument( __FUNCTION__, '2.8.1' );	global $wp_registered_widgets, $wp_registered_sidebars, $_wp_sidebars_widgets;	// If loading from front page, consult $_wp_sidebars_widgets rather than options	// to see if wp_convert_widget_settings() has made manipulations in memory.	if ( !is_admin() ) {		if ( empty($_wp_sidebars_widgets) )			$_wp_sidebars_widgets = get_option('sidebars_widgets', array());		$sidebars_widgets = $_wp_sidebars_widgets;	} else {		$sidebars_widgets = get_option('sidebars_widgets', array());		$_sidebars_widgets = array();		if ( isset($sidebars_widgets['wp_inactive_widgets']) || empty($sidebars_widgets) )			$sidebars_widgets['array_version'] = 3;		elseif ( !isset($sidebars_widgets['array_version']) )			$sidebars_widgets['array_version'] = 1;		switch ( $sidebars_widgets['array_version'] ) {			case 1 :				foreach ( (array) $sidebars_widgets as $index => $sidebar )				if ( is_array($sidebar) )				foreach ( (array) $sidebar as $i => $name ) {					$id = strtolower($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$id = sanitize_title($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$found = false;					foreach ( $wp_registered_widgets as $widget_id => $widget ) {						if ( strtolower($widget['name']) == strtolower($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						} elseif ( sanitize_title($widget['name']) == sanitize_title($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						}					}					if ( $found )						continue;					unset($_sidebars_widgets[$index][$i]);				}				$_sidebars_widgets['array_version'] = 2;				$sidebars_widgets = $_sidebars_widgets;				unset($_sidebars_widgets);			case 2 :				$sidebars = array_keys( $wp_registered_sidebars );				if ( !empty( $sidebars ) ) {					// Move the known-good ones first					foreach ( (array) $sidebars as $id ) {						if ( array_key_exists( $id, $sidebars_widgets ) ) {							$_sidebars_widgets[$id] = $sidebars_widgets[$id];							unset($sidebars_widgets[$id], $sidebars[$id]);						}					}					// move the rest to wp_inactive_widgets					if ( !isset($_sidebars_widgets['wp_inactive_widgets']) )						$_sidebars_widgets['wp_inactive_widgets'] = array();					if ( !empty($sidebars_widgets) ) {						foreach ( $sidebars_widgets as $lost => $val ) {							if ( is_array($val) )								$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );						}					}					$sidebars_widgets = $_sidebars_widgets;					unset($_sidebars_widgets);				}		}	}	if ( is_array( $sidebars_widgets ) && isset($sidebars_widgets['array_version']) )		unset($sidebars_widgets['array_version']);	$sidebars_widgets = apply_filters('sidebars_widgets', $sidebars_widgets);	return $sidebars_widgets;}/** * Set the sidebar widget option to update sidebars. * * @since 2.2.0 * @access private * * @param array $sidebars_widgets Sidebar widgets and their settings. */function wp_set_sidebars_widgets( $sidebars_widgets ) {	if ( !isset( $sidebars_widgets['array_version'] ) )		$sidebars_widgets['array_version'] = 3;	update_option( 'sidebars_widgets', $sidebars_widgets );}/** * Retrieve default registered sidebars list. * * @since 2.2.0 * @access private * * @return array */function wp_get_widget_defaults() {	global $wp_registered_sidebars;	$defaults = array();	foreach ( (array) $wp_registered_sidebars as $index => $sidebar )		$defaults[$index] = array();	return $defaults;}/** * Convert the widget settings from single to multi-widget format. * * @since 2.8.0 * * @return array */function wp_convert_widget_settings($base_name, $option_name, $settings) {	// This test may need expanding.	$single = $changed = false;	if ( empty($settings) ) {		$single = true;	} else {		foreach ( array_keys($settings) as $number ) {			if ( 'number' == $number )				continue;			if ( !is_numeric($number) ) {				$single = true;				break;			}		}	}	if ( $single ) {		$settings = array( 2 => $settings );		// If loading from the front page, update sidebar in memory but don't save to options		if ( is_admin() ) {			$sidebars_widgets = get_option('sidebars_widgets');		} else {			if ( empty($GLOBALS['_wp_sidebars_widgets']) )				$GLOBALS['_wp_sidebars_widgets'] = get_option('sidebars_widgets', array());			$sidebars_widgets = &$GLOBALS['_wp_sidebars_widgets'];		}		foreach ( (array) $sidebars_widgets as $index => $sidebar ) {			if ( is_array($sidebar) ) {				foreach ( $sidebar as $i => $name ) {					if ( $base_name == $name ) {						$sidebars_widgets[$index][$i] = "$name-2";						$changed = true;						break 2;					}				}			}		}		if ( is_admin() && $changed )			update_option('sidebars_widgets', $sidebars_widgets);	}	$settings['_multiwidget'] = 1;	if ( is_admin() )		update_option( $option_name, $settings );	return $settings;}/** * Output an arbitrary widget as a template tag * * @since 2.8 * * @param string $widget the widget's PHP class name (see default-widgets.php) * @param array $instance the widget's instance settings * @param array $args the widget's sidebar args * @return void **/function the_widget($widget, $instance = array(), $args = array()) {	global $wp_widget_factory;	$widget_obj = $wp_widget_factory->widgets[$widget];	if ( !is_a($widget_obj, 'WP_Widget') )		return;	$before_widget = sprintf('<div class="widget %s">', $widget_obj->widget_options['classname']);	$default_args = array('before_widget' => $before_widget, 'after_widget' => "</div>", 'before_title' => '<h2 class="widgettitle">', 'after_title' => '</h2>');	$args = wp_parse_args($args, $default_args);	$instance = wp_parse_args($instance);	do_action( 'the_widget', $widget, $instance, $args );	$widget_obj->_set(-1);	$widget_obj->widget($args, $instance);}/** * Private */function _get_widget_id_base($id) {	return preg_replace( '/-[0-9]+$/', '', $id );}
<?php/** * Redirects to the RDF feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rdf_url' ), 301 );?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * FTP implementation using fsockopen to connect. * * @package PemFTP * @subpackage Pure * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(false, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@stream_set_timeout($sock, $this->_timeout)) {			$this->PushError('_settimeout','socket set send timeout');			$this->_quit();			return FALSE;		}		return TRUE;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		$sock = @fsockopen($host, $port, $errno, $errstr, $this->_timeout);		if (!$sock) {			$this->PushError('_connect','socket connect failed', $errstr." (".$errno.")");			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction, 'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@fgets($this->_ftp_control_sock, 512);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed');			} else {				$this->_message.=$tmp;				if(preg_match("/^([0-9]{3})(-(.*[".CRLF."]{1,2})+\\1)? [^".CRLF."]+[".CRLF."]{1,2}$/", $this->_message, $regs)) $go=false;			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@fputs($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed');			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_data_sock=@fsockopen($this->_datahost, $this->_dataport, $errno, $errstr, $this->_timeout);			if(!$this->_ftp_data_sock) {				$this->PushError("_data_prepare","fsockopen fails", $errstr." (".$errno.")");				$this->_data_close();				return FALSE;			}			else $this->_ftp_data_sock;		} else {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		while (!feof($this->_ftp_data_sock)) {			$block=fread($this->_ftp_data_sock, $this->_ftp_buff_size);			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return TRUE;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@fwrite($this->_ftp_data_sock, $block))===FALSE) {				$this->PushError("_data_write","Can't write to socket");				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@fclose($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit($force=FALSE) {		if($this->_connected or $force) {			@fclose($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Edit link category form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( !current_user_can('manage_categories') )	wp_die(__('You do not have sufficient permissions to edit link categories for this site.'));/** * @var object */if ( ! isset( $category ) )	$category = (object) array();if ( ! empty($cat_ID) ) {	/**	 * @var string	 */	$heading = '<h2>' . __('Edit Link Category') . '</h2>';	$submit_text = __('Update Category');	$form = '<form name="editcat" id="editcat" method="post" action="link-category.php" class="validate">';	$action = 'editedcat';	$nonce_action = 'update-link-category_' . $cat_ID;	do_action('edit_link_category_form_pre', $category);} else {	$heading = '<h2>' . __('Add Link Category') . '</h2>';	$submit_text = __('Add Category');	$form = '<form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php">';	$action = 'addcat';	$nonce_action = 'add-link-category';	do_action('add_link_category_form_pre', $category);}/** * @ignore * @since 2.7 * @internal Used to prevent errors in page when no category is being edited. * * @param object $category */function _fill_empty_link_category(&$category) {	if ( ! isset( $category->name ) )		$category->name = '';	if ( ! isset( $category->slug ) )		$category->slug = '';	if ( ! isset( $category->description ) )		$category->description = '';}_fill_empty_link_category($category);?><div class="wrap"><?php screen_icon(); ?><?php echo $heading ?><div id="ajax-response"></div><?php echo $form ?><input type="hidden" name="action" value="<?php echo esc_attr($action) ?>" /><input type="hidden" name="cat_ID" value="<?php echo esc_attr($category->term_id) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field($nonce_action); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _e('Link Category name') ?></label></th>			<td><input name="name" id="name" type="text" value="<?php echo esc_attr($category->name); ?>" size="40" aria-required="true" /></td>		</tr><?php if ( !is_multisite() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _e('Link Category slug') ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php echo esc_attr(apply_filters('editable_slug', $category->slug)); ?>" size="40" /><br />            <?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></td>		</tr><?php } ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _e('Description (optional)') ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo $category->description; ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></span></td>		</tr>		<?php do_action('edit_link_category_form_fields', $category); ?>	</table><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr($submit_text) ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div>
<?php/** * The plugin API is located in this file, which allows for creating actions * and filters and hooking functions, and methods. The functions or methods will * then be run when the action or filter is called. * * The API callback examples reference functions, but can be methods of classes. * To hook methods, you'll need to pass an array one of two ways. * * Any of the syntaxes explained in the PHP documentation for the * {@link http://us2.php.net/manual/en/language.pseudo-types.php#language.types.callback 'callback'} * type are valid. * * Also see the {@link http://codex.wordpress.org/Plugin_API Plugin API} for * more information and examples on how to use a lot of these functions. * * @package WordPress * @subpackage Plugin * @since 1.5 *//** * Hooks a function or method to a specific filter action. * * Filters are the hooks that WordPress launches to modify text of various types * before adding it to the database or sending it to the browser screen. Plugins * can specify that one or more of its PHP functions is executed to * modify specific types of text at these times, using the Filter API. * * To use the API, the following code should be used to bind a callback to the * filter. * * <code> * function example_hook($example) { echo $example; } * add_filter('example_filter', 'example_hook'); * </code> * * In WordPress 1.5.1+, hooked functions can take extra arguments that are set * when the matching do_action() or apply_filters() call is run. The * $accepted_args allow for calling functions only when the number of args * match. Hooked functions can take extra arguments that are set when the * matching do_action() or apply_filters() call is run. For example, the action * comment_id_not_found will pass any functions that hook onto it the ID of the * requested comment. * * <strong>Note:</strong> the function will return true no matter if the * function was hooked fails or not. There are no checks for whether the * function exists beforehand and no checks to whether the <tt>$function_to_add * is even a string. It is up to you to take care and this is done for * optimization purposes, so everything is as quick as possible. * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters added in the form of *	wp_filter['tag']['array of priorities']['array of functions serialized']['array of ['array (functions, accepted_args)']'] * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added, it doesn't need to run through that process. * * @param string $tag The name of the filter to hook the $function_to_add to. * @param callback $function_to_add The name of the function to be called when the filter is applied. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). * @return boolean true */function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	global $wp_filter, $merged_filters;	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);	$wp_filter[$tag][$priority][$idx] = array('function' => $function_to_add, 'accepted_args' => $accepted_args);	unset( $merged_filters[ $tag ] );	return true;}/** * Check if any filter has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @global array $wp_filter Stores all of the filters * * @param string $tag The name of the filter hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_filter($tag, $function_to_check = false) {	global $wp_filter;	$has = !empty($wp_filter[$tag]);	if ( false === $function_to_check || false == $has )		return $has;	if ( !$idx = _wp_filter_build_unique_id($tag, $function_to_check, false) )		return false;	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {		if ( isset($wp_filter[$tag][$priority][$idx]) )			return $priority;	}	return false;}/** * Call the functions added to a filter hook. * * The callback functions attached to filter hook $tag are invoked by calling * this function. This function can be used to create a new filter hook by * simply calling this function with the name of the new hook specified using * the $tag parameter. * * The function allows for additional arguments to be added and passed to hooks. * <code> * function example_hook($string, $arg1, $arg2) * { *		//Do stuff *		return $string; * } * $value = apply_filters('example_filter', 'filter me', 'arg1', 'arg2'); * </code> * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param mixed $value The value on which the filters hooked to <tt>$tag</tt> are applied on. * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag</tt>. * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters($tag, $value) {	global $wp_filter, $merged_filters, $wp_current_filter;	$args = array();	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$args = func_get_args();		_wp_call_all_hook($args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $value;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	if ( empty($args) )		$args = func_get_args();	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) ){				$args[1] = $value;				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));			}	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $value;}/** * Execute functions hooked on a specific filter hook, specifying arguments in an array. * * @see apply_filters() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 3.0.0 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters_ref_array($tag, $args) {	global $wp_filter, $merged_filters, $wp_current_filter;	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $args[0];	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $args[0];}/** * Removes a function from a specified filter hook. * * This function removes a function attached to a specified filter hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * To remove a hook, the $function_to_remove and $priority arguments must match * when the hook was added. This goes for both filters and actions. No warning * will be given on removal failure. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The filter hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional. The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function existed before it was removed. */function remove_filter($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	$function_to_remove = _wp_filter_build_unique_id($tag, $function_to_remove, $priority);	$r = isset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);	if ( true === $r) {		unset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);		if ( empty($GLOBALS['wp_filter'][$tag][$priority]) )			unset($GLOBALS['wp_filter'][$tag][$priority]);		unset($GLOBALS['merged_filters'][$tag]);	}	return $r;}/** * Remove all of the hooks from a filter. * * @since 2.7 * * @param string $tag The filter to remove hooks from. * @param int $priority The priority number to remove. * @return bool True when finished. */function remove_all_filters($tag, $priority = false) {	global $wp_filter, $merged_filters;	if( isset($wp_filter[$tag]) ) {		if( false !== $priority && isset($wp_filter[$tag][$priority]) )			unset($wp_filter[$tag][$priority]);		else			unset($wp_filter[$tag]);	}	if( isset($merged_filters[$tag]) )		unset($merged_filters[$tag]);	return true;}/** * Retrieve the name of the current filter or action. * * @package WordPress * @subpackage Plugin * @since 2.5 * * @return string Hook name of the current filter or action. */function current_filter() {	global $wp_current_filter;	return end( $wp_current_filter );}/** * Hooks a function on to a specific action. * * Actions are the hooks that the WordPress core launches at specific points * during execution, or when specific events occur. Plugins can specify that * one or more of its PHP functions are executed at these points, using the * Action API. * * @uses add_filter() Adds an action. Parameter list and functionality are the same. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The name of the action to which the $function_to_add is hooked. * @param callback $function_to_add The name of the function you wish to be called. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). */function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	return add_filter($tag, $function_to_add, $priority, $accepted_args);}/** * Execute functions hooked on a specific action hook. * * This function invokes all functions attached to action hook $tag. It is * possible to create new action hooks by simply calling this function, * specifying the name of the new hook using the <tt>$tag</tt> parameter. * * You can pass extra arguments to the hooks, much like you can with * apply_filters(). * * @see apply_filters() This function works similar with the exception that * nothing is returned and only the functions or methods are called. * * @package WordPress * @subpackage Plugin * @since 1.2 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action. * @return null Will return null if $tag does not exist in $wp_filter array */function do_action($tag, $arg = '') {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	$args = array();	if ( is_array($arg) && 1 == count($arg) && isset($arg[0]) && is_object($arg[0]) ) // array(&$this)		$args[] =& $arg[0];	else		$args[] = $arg;	for ( $a = 2; $a < func_num_args(); $a++ )		$args[] = func_get_arg($a);	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach ( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Retrieve the number times an action is fired. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action hook. * @return int The number of times action hook <tt>$tag</tt> is fired */function did_action($tag) {	global $wp_actions;	if ( ! isset( $wp_actions ) || ! isset( $wp_actions[$tag] ) )		return 0;	return $wp_actions[$tag];}/** * Execute functions hooked on a specific action hook, specifying arguments in an array. * * @see do_action() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return null Will return null if $tag does not exist in $wp_filter array */function do_action_ref_array($tag, $args) {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Check if any action has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @see has_filter() has_action() is an alias of has_filter(). * * @param string $tag The name of the action hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_action($tag, $function_to_check = false) {	return has_filter($tag, $function_to_check);}/** * Removes a function from a specified action hook. * * This function removes a function attached to a specified action hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The action hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function is removed. */function remove_action($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	return remove_filter($tag, $function_to_remove, $priority, $accepted_args);}/** * Remove all of the hooks from an action. * * @since 2.7 * * @param string $tag The action to remove hooks from. * @param int $priority The priority number to remove them from. * @return bool True when finished. */function remove_all_actions($tag, $priority = false) {	return remove_all_filters($tag, $priority);}//// Functions for handling plugins.///** * Gets the basename of a plugin. * * This method extracts the name of a plugin from its filename. * * @package WordPress * @subpackage Plugin * @since 1.5 * * @access private * * @param string $file The filename of plugin. * @return string The name of a plugin. * @uses WP_PLUGIN_DIR */function plugin_basename($file) {	$file = str_replace('\\','/',$file); // sanitize for Win32 installs	$file = preg_replace('|/+|','/', $file); // remove any duplicate slash	$plugin_dir = str_replace('\\','/',WP_PLUGIN_DIR); // sanitize for Win32 installs	$plugin_dir = preg_replace('|/+|','/', $plugin_dir); // remove any duplicate slash	$mu_plugin_dir = str_replace('\\','/',WPMU_PLUGIN_DIR); // sanitize for Win32 installs	$mu_plugin_dir = preg_replace('|/+|','/', $mu_plugin_dir); // remove any duplicate slash	$file = preg_replace('#^' . preg_quote($plugin_dir, '#') . '/|^' . preg_quote($mu_plugin_dir, '#') . '/#','',$file); // get relative path from plugins dir	$file = trim($file, '/');	return $file;}/** * Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the filesystem path of the directory that contains the plugin */function plugin_dir_path( $file ) {	return trailingslashit( dirname( $file ) );}/** * Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the URL path of the directory that contains the plugin */function plugin_dir_url( $file ) {	return trailingslashit( plugins_url( '', $file ) );}/** * Set the activation hook for a plugin. * * When a plugin is activated, the action 'activate_PLUGINNAME' hook is * activated. In the name of this hook, PLUGINNAME is replaced with the name of * the plugin, including the optional subdirectory. For example, when the plugin * is located in wp-content/plugin/sampleplugin/sample.php, then the name of * this hook will become 'activate_sampleplugin/sample.php'. When the plugin * consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_activation_hook($file, $function) {	$file = plugin_basename($file);	add_action('activate_' . $file, $function);}/** * Set the deactivation hook for a plugin. * * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is * deactivated. In the name of this hook, PLUGINNAME is replaced with the name * of the plugin, including the optional subdirectory. For example, when the * plugin is located in wp-content/plugin/sampleplugin/sample.php, then * the name of this hook will become 'activate_sampleplugin/sample.php'. * * When the plugin consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_deactivation_hook($file, $function) {	$file = plugin_basename($file);	add_action('deactivate_' . $file, $function);}/** * Set the uninstallation hook for a plugin. * * Registers the uninstall hook that will be called when the user clicks on the * uninstall link that calls for the plugin to uninstall itself. The link won't * be active unless the plugin hooks into the action. * * The plugin should not run arbitrary code outside of functions, when * registering the uninstall hook. In order to run using the hook, the plugin * will have to be included, which means that any code laying outside of a * function will be run during the uninstall process. The plugin should not * hinder the uninstall process. * * If the plugin can not be written without running code within the plugin, then * the plugin should create a file named 'uninstall.php' in the base plugin * folder. This file will be called, if it exists, during the uninstall process * bypassing the uninstall hook. The plugin, when using the 'uninstall.php' * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before * executing. * * @since 2.7 * * @param string $file * @param callback $callback The callback to run when the hook is called. */function register_uninstall_hook($file, $callback) {	// The option should not be autoloaded, because it is not needed in most	// cases. Emphasis should be put on using the 'uninstall.php' way of	// uninstalling the plugin.	$uninstallable_plugins = (array) get_option('uninstall_plugins');	$uninstallable_plugins[plugin_basename($file)] = $callback;	update_option('uninstall_plugins', $uninstallable_plugins);}/** * Calls the 'all' hook, which will process the functions hooked into it. * * The 'all' hook passes all of the arguments or parameters that were used for * the hook, which this function was called for. * * This function is used internally for apply_filters(), do_action(), and * do_action_ref_array() and is not meant to be used from outside those * functions. This function does not check for the existence of the all hook, so * it will fail unless the all hook exists prior to this function call. * * @package WordPress * @subpackage Plugin * @since 2.5 * @access private * * @uses $wp_filter Used to process all of the functions in the 'all' hook * * @param array $args The collected parameters from the hook that was called. * @param string $hook Optional. The hook name that was used to call the 'all' hook. */function _wp_call_all_hook($args) {	global $wp_filter;	reset( $wp_filter['all'] );	do {		foreach( (array) current($wp_filter['all']) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], $args);	} while ( next($wp_filter['all']) !== false );}/** * Build Unique ID for storage and retrieval. * * The old way to serialize the callback caused issues and this function is the * solution. It works by checking for objects and creating an a new property in * the class to keep track of the object and new objects of the same class that * need to be added. * * It also allows for the removal of actions and filters for objects after they * change class properties. It is possible to include the property $wp_filter_id * in your class and set it to "null" or a number to bypass the workaround. * However this will prevent you from adding new classes and any new classes * will overwrite the previous hook by the same class. * * Functions and static method callbacks are just returned as strings and * shouldn't have any speed penalty. * * @package WordPress * @subpackage Plugin * @access private * @since 2.2.3 * @link http://trac.wordpress.org/ticket/3875 * * @global array $wp_filter Storage for all of the filters and actions * @param string $tag Used in counting how many hooks were applied * @param callback $function Used for creating unique id * @param int|bool $priority Used in counting how many hooks were applied.  If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise. * @param string $type filter or action * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a uniqe id. */function _wp_filter_build_unique_id($tag, $function, $priority) {	global $wp_filter;	static $filter_id_count = 0;	if ( is_string($function) )		return $function;	if ( is_object($function) ) {		// Closures are currently implemented as objects		$function = array( $function, '' );	} else {		$function = (array) $function;	}	if (is_object($function[0]) ) {		// Object Class Calling		if ( function_exists('spl_object_hash') ) {			return spl_object_hash($function[0]) . $function[1];		} else {			$obj_idx = get_class($function[0]).$function[1];			if ( !isset($function[0]->wp_filter_id) ) {				if ( false === $priority )					return false;				$obj_idx .= isset($wp_filter[$tag][$priority]) ? count((array)$wp_filter[$tag][$priority]) : $filter_id_count;				$function[0]->wp_filter_id = $filter_id_count;				++$filter_id_count;			} else {				$obj_idx .= $function[0]->wp_filter_id;			}			return $obj_idx;		}	} else if ( is_string($function[0]) ) {		// Static Calling		return $function[0].$function[1];	}}?>
<?php/** * The template for displaying attachments. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<p class="page-title"><a href="<?php echo get_permalink( $post->post_parent ); ?>" title="<?php esc_attr( printf( __( 'Return to %s', 'twentyten' ), get_the_title( $post->post_parent ) ) ); ?>" rel="gallery"><?php					/* translators: %s - title of parent post */					printf( __( '<span class="meta-nav">&larr;</span> %s', 'twentyten' ), get_the_title( $post->post_parent ) );				?></a></p>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h2 class="entry-title"><?php the_title(); ?></h2>					<div class="entry-meta">						<?php							printf(__('<span class="%1$s">By</span> %2$s', 'twentyten'),								'meta-prep meta-prep-author',								sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',									get_author_posts_url( get_the_author_meta( 'ID' ) ),									sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),									get_the_author()								)							);						?>						<span class="meta-sep">|</span>						<?php							printf( __('<span class="%1$s">Published</span> %2$s', 'twentyten'),								'meta-prep meta-prep-entry-date',								sprintf( '<span class="entry-date"><abbr class="published" title="%1$s">%2$s</abbr></span>',									esc_attr( get_the_time() ),									get_the_date()								)							);							if ( wp_attachment_is_image() ) {								echo ' <span class="meta-sep">|</span> ';								$metadata = wp_get_attachment_metadata();								printf( __( 'Full size is %s pixels', 'twentyten'),									sprintf( '<a href="%1$s" title="%2$s">%3$s &times; %4$s</a>',										wp_get_attachment_url(),										esc_attr( __('Link to full-size image', 'twentyten') ),										$metadata['width'],										$metadata['height']									)								);							}						?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<div class="entry-attachment"><?php if ( wp_attachment_is_image() ) :	$attachments = array_values( get_children( array( 'post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID' ) ) );	foreach ( $attachments as $k => $attachment ) {		if ( $attachment->ID == $post->ID )			break;	}	$k++;	// If there is more than 1 image attachment in a gallery	if ( count( $attachments ) > 1 ) {		if ( isset( $attachments[ $k ] ) )			// get the URL of the next image attachment			$next_attachment_url = get_attachment_link( $attachments[ $k ]->ID );		else			// or get the URL of the first image attachment			$next_attachment_url = get_attachment_link( $attachments[ 0 ]->ID );	} else {		// or, if there's only 1 image attachment, get the URL of the image		$next_attachment_url = wp_get_attachment_url();	}?>						<p class="attachment"><a href="<?php echo $next_attachment_url; ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php							$attachment_size = apply_filters( 'twentyten_attachment_size', 900 );							echo wp_get_attachment_image( $post->ID, array( $attachment_size, 9999 ) ); // filterable image width with, essentially, no limit for image height.						?></a></p>						<div id="nav-below" class="navigation">							<div class="nav-previous"><?php previous_image_link( false ); ?></div>							<div class="nav-next"><?php next_image_link( false ); ?></div>						</div><!-- #nav-below --><?php else : ?>						<a href="<?php echo wp_get_attachment_url(); ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php echo basename( get_permalink() ); ?></a><?php endif; ?>						</div><!-- .entry-attachment -->						<div class="entry-caption"><?php if ( !empty( $post->post_excerpt ) ) the_excerpt(); ?></div><?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?><?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content -->					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), ' <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## --><?php comments_template(); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
