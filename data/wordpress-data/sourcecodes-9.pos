<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** The descriptions for theme files. */$wp_file_descriptions = array (	'index.php' => __( 'Main Index Template' ),	'style.css' => __( 'Stylesheet' ),	'editor-style.css' => __( 'Visual Editor Stylesheet' ),	'rtl.css' => __( 'RTL Stylesheet' ),	'comments.php' => __( 'Comments' ),	'comments-popup.php' => __( 'Popup Comments' ),	'footer.php' => __( 'Footer' ),	'header.php' => __( 'Header' ),	'sidebar.php' => __( 'Sidebar' ),	'archive.php' => __( 'Archives' ),	'author.php' => __( 'Author Template' ),	'tag.php' => __( 'Tag Template' ),	'category.php' => __( 'Category Template' ),	'page.php' => __( 'Page Template' ),	'search.php' => __( 'Search Results' ),	'searchform.php' => __( 'Search Form' ),	'single.php' => __( 'Single Post' ),	'404.php' => __( '404 Template' ),	'link.php' => __( 'Links Template' ),	'functions.php' => __( 'Theme Functions' ),	'attachment.php' => __( 'Attachment Template' ),	'image.php' => __('Image Attachment Template'),	'video.php' => __('Video Attachment Template'),	'audio.php' => __('Audio Attachment Template'),	'application.php' => __('Application Attachment Template'),	'my-hacks.php' => __( 'my-hacks.php (legacy hacks support)' ),	'.htaccess' => __( '.htaccess (for rewrite rules )' ),	// Deprecated files	'wp-layout.css' => __( 'Stylesheet' ), 'wp-comments.php' => __( 'Comments Template' ), 'wp-comments-popup.php' => __( 'Popup Comments Template' ));/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_file_description( $file ) {	global $wp_file_descriptions;	if ( isset( $wp_file_descriptions[basename( $file )] ) ) {		return $wp_file_descriptions[basename( $file )];	}	elseif ( file_exists( $file ) && is_file( $file ) ) {		$template_data = implode( '', file( $file ) );		if ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ))			return _cleanup_header_comment($name[1]) . ' Page Template';	}	return basename( $file );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_home_path() {	$home = get_option( 'home' );	$siteurl = get_option( 'siteurl' );	if ( $home != '' && $home != $siteurl ) {	        $wp_path_rel_to_home = str_replace($home, '', $siteurl); /* $siteurl - $home */	        $pos = strpos($_SERVER["SCRIPT_FILENAME"], $wp_path_rel_to_home);	        $home_path = substr($_SERVER["SCRIPT_FILENAME"], 0, $pos);		$home_path = trailingslashit( $home_path );	} else {		$home_path = ABSPATH;	}	return $home_path;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_real_file_to_edit( $file ) {	if ('index.php' == $file || '.htaccess' == $file ) {		$real_file = get_home_path() . $file;	} else {		$real_file = WP_CONTENT_DIR . $file;	}	return $real_file;}/** * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep. * The depth of the recursiveness can be controlled by the $levels param. * * @since 2.6.0 * * @param string $folder Full path to folder * @param int $levels (optional) Levels of folders to follow, Default: 100 (PHP Loop limit). * @return bool|array False on failure, Else array of files */function list_files( $folder = '', $levels = 100 ) {	if ( empty($folder) )		return false;	if ( ! $levels )		return false;	$files = array();	if ( $dir = @opendir( $folder ) ) {		while (($file = readdir( $dir ) ) !== false ) {			if ( in_array($file, array('.', '..') ) )				continue;			if ( is_dir( $folder . '/' . $file ) ) {				$files2 = list_files( $folder . '/' . $file, $levels - 1);				if ( $files2 )					$files = array_merge($files, $files2 );				else					$files[] = $folder . '/' . $file . '/';			} else {				$files[] = $folder . '/' . $file;			}		}	}	@closedir( $dir );	return $files;}/** * Determines a writable directory for temporary files. * Function's preference is to WP_CONTENT_DIR followed by the return value of <code>sys_get_temp_dir()</code>, before finally defaulting to /tmp/ * * In the event that this function does not find a writable location, It may be overridden by the <code>WP_TEMP_DIR</code> constant in your <code>wp-config.php</code> file. * * @since 2.5.0 * * @return string Writable temporary directory */function get_temp_dir() {	static $temp;	if ( defined('WP_TEMP_DIR') )		return trailingslashit(WP_TEMP_DIR);	if ( $temp )		return trailingslashit($temp);	$temp = WP_CONTENT_DIR . '/';	if ( is_dir($temp) && @is_writable($temp) )		return $temp;	if  ( function_exists('sys_get_temp_dir') ) {		$temp = sys_get_temp_dir();		if ( @is_writable($temp) )			return trailingslashit($temp);	}	$temp = ini_get('upload_tmp_dir');	if ( is_dir($temp) && @is_writable($temp) )		return trailingslashit($temp);	$temp = '/tmp/';	return $temp;}/** * Returns a filename of a Temporary unique file. * Please note that the calling function must unlink() this itself. * * The filename is based off the passed parameter or defaults to the current unix timestamp, * while the directory can either be passed as well, or by leaving  it blank, default to a writable temporary directory. * * @since 2.6.0 * * @param string $filename (optional) Filename to base the Unique file off * @param string $dir (optional) Directory to store the file in * @return string a writable filename */function wp_tempnam($filename = '', $dir = '') {	if ( empty($dir) )		$dir = get_temp_dir();	$filename = basename($filename);	if ( empty($filename) )		$filename = time();	$filename = preg_replace('|\..*$|', '.tmp', $filename);	$filename = $dir . wp_unique_filename($dir, $filename);	touch($filename);	return $filename;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $allowed_files * @return unknown */function validate_file_to_edit( $file, $allowed_files = '' ) {	$code = validate_file( $file, $allowed_files );	if (!$code )		return $file;	switch ( $code ) {		case 1 :			wp_die( __('Sorry, can&#8217;t edit files with &#8220;..&#8221; in the name. If you are trying to edit a file in your WordPress home directory, you can just type the name of the file in.' ));		//case 2 :		//	wp_die( __('Sorry, can&#8217;t call files with their real path.' ));		case 3 :			wp_die( __('Sorry, that file cannot be edited.' ));	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $file Reference to a single element of $_FILES. Call the function once for each uploaded file. * @param array $overrides Optional. An associative array of names=>values to override default variables with extract( $overrides, EXTR_OVERWRITE ). * @return array On success, returns an associative array of file attributes. On failure, returns $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ). */function wp_handle_upload( &$file, $overrides = false, $time = null ) {	// The default error handler.	if ( ! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	$file = apply_filters( 'wp_handle_upload_prefilter', $file );	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may have had one or more 'wp_handle_upload_prefilter' functions error out the file.  Handle that gracefully.	if ( isset( $file['error'] ) && !is_numeric( $file['error'] ) && $file['error'] )		return $upload_error_handler( $file, $file['error'] );	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_upload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	$test_upload = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return call_user_func($upload_error_handler, $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( $file['error'] > 0 )		return call_user_func($upload_error_handler, $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !($file['size'] > 0 ) ) {		if ( is_multisite() )			$error_msg = __( 'File is empty. Please upload something more substantial.' );		else			$error_msg = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return call_user_func($upload_error_handler, $file, $error_msg);	}	// A properly uploaded file will pass this test. There should be no reason to override this one.	if ( $test_upload && ! @ is_uploaded_file( $file['tmp_name'] ) )		return call_user_func($upload_error_handler, $file, __( 'Specified file failed upload test.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return call_user_func($upload_error_handler, $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	} else {		$type = '';	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir($time) ) && false === $uploads['error'] ) )		return call_user_func($upload_error_handler, $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ move_uploaded_file( $file['tmp_name'], $new_file ) )		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	return apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'upload' );}/** * {@internal Missing Short Description}} * * Pass this function an array similar to that of a $_FILES POST array. * * @since unknown * * @param unknown_type $file * @param unknown_type $overrides * @return unknown */function wp_handle_sideload( &$file, $overrides = false ) {	// The default error handler.	if (! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_sideload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return $upload_error_handler( $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( ! empty( $file['error'] ) )		return $upload_error_handler( $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !(filesize($file['tmp_name']) > 0 ) )		return $upload_error_handler( $file, __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini.' ));	// A properly uploaded file will pass this test. There should be no reason to override this one.	if (! @ is_file( $file['tmp_name'] ) )		return $upload_error_handler( $file, __( 'Specified file does not exist.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return $upload_error_handler( $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )		return $upload_error_handler( $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Strip the query strings.	$filename = str_replace('?','-', $filename);	$filename = str_replace('&','-', $filename);	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ rename( $file['tmp_name'], $new_file ) ) {		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	}	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	$return = apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'sideload' );	return $return;}/** * Downloads a url to a local temporary file using the WordPress HTTP Class. * Please note, That the calling function must unlink() the  file. * * @since 2.5.0 * * @param string $url the URL of the file to download * @return mixed WP_Error on failure, string Filename on success. */function download_url( $url ) {	//WARNING: The file is not automatically deleted, The script must unlink() the file.	if ( ! $url )		return new WP_Error('http_no_url', __('Invalid URL Provided.'));	$tmpfname = wp_tempnam($url);	if ( ! $tmpfname )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$handle = @fopen($tmpfname, 'wb');	if ( ! $handle )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$response = wp_remote_get($url, array('timeout' => 300));	if ( is_wp_error($response) ) {		fclose($handle);		unlink($tmpfname);		return $response;	}	if ( $response['response']['code'] != '200' ){		fclose($handle);		unlink($tmpfname);		return new WP_Error('http_404', trim($response['response']['message']));	}	fwrite($handle, $response['body']);	fclose($handle);	return $tmpfname;}/** * Unzip's a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present. * * Attempts to increase the PHP Memory limit to 256M before uncompressing, * However, The most memory required shouldn't be much larger than the Archive itself. * * @since 2.5.0 * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @return mixed WP_Error on failure, True on success */function unzip_file($file, $to) {	global $wp_filesystem;	if ( ! $wp_filesystem || !is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	// Unzip can use a lot of memory, but not this much hopefully	@ini_set('memory_limit', '256M');	$needed_dirs = array();	$to = trailingslashit($to);	// Determine any parent dir's needed (of the upgrade directory)	if ( ! $wp_filesystem->is_dir($to) ) { //Only do parents if no children exist		$path = preg_split('![/\\\]!', untrailingslashit($to));		for ( $i = count($path); $i >= 0; $i-- ) {			if ( empty($path[$i]) )				continue;			$dir = implode('/', array_slice($path, 0, $i+1) );			if ( preg_match('!^[a-z]:$!i', $dir) ) // Skip it if it looks like a Windows Drive letter.				continue;			if ( ! $wp_filesystem->is_dir($dir) )				$needed_dirs[] = $dir;			else				break; // A folder exists, therefor, we dont need the check the levels below this		}	}	if ( class_exists('ZipArchive') && apply_filters('unzip_file_use_ziparchive', true ) ) {		$result = _unzip_file_ziparchive($file, $to, $needed_dirs);		if ( true === $result ) {			return $result;		} elseif ( is_wp_error($result) ) {			if ( 'incompatible_archive' != $result->get_error_code() )				return $result;		}	}	// Fall through to PclZip if ZipArchive is not available, or encountered an error opening the file.	return _unzip_file_pclzip($file, $to, $needed_dirs);}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {	global $wp_filesystem;	$z = new ZipArchive();	// PHP4-compat - php4 classes can't contain constants	$zopen = $z->open($file, /* ZIPARCHIVE::CHECKCONS */ 4);	if ( true !== $zopen )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'));	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		if ( '/' == substr($info['name'], -1) ) // directory			$needed_dirs[] = $to . untrailingslashit($info['name']);		else			$needed_dirs[] = $to . untrailingslashit(dirname($info['name']));	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the Dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '/' == substr($info['name'], -1) ) // directory			continue;		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		$contents = $z->getFromIndex($i);		if ( false === $contents )			return new WP_Error('extract_failed', __('Could not extract file from archive.'), $info['name']);		if ( ! $wp_filesystem->put_contents( $to . $info['name'], $contents, FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $info['filename']);	}	$z->close();	return true;}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_pclzip($file, $to, $needed_dirs = array()) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-pclzip.php');	$archive = new PclZip($file);	// Is the archive valid?	if ( false == ($archive_files = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING)) )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'), $archive->errorInfo(true));	if ( 0 == count($archive_files) )		return new WP_Error('empty_archive', __('Empty archive.'));	// Determine any children directories needed (From within the archive)	foreach ( $archive_files as $file ) {		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	// Extract the files from the zip	foreach ( $archive_files as $file ) {		if ( $file['folder'] )			continue;		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		if ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $file['filename']);	}	return true;}/** * Copies a directory from one location to another via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and setup. * * @since 2.5.0 * * @param string $from source directory * @param string $to destination directory * @return mixed WP_Error on failure, True on success. */function copy_dir($from, $to) {	global $wp_filesystem;	$dirlist = $wp_filesystem->dirlist($from);	$from = trailingslashit($from);	$to = trailingslashit($to);	foreach ( (array) $dirlist as $filename => $fileinfo ) {		if ( 'f' == $fileinfo['type'] ) {			if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) ) {				// If copy failed, chmod file to 0644 and try again.				$wp_filesystem->chmod($to . $filename, 0644);				if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) )					return new WP_Error('copy_failed', __('Could not copy file.'), $to . $filename);			}			$wp_filesystem->chmod($to . $filename, FS_CHMOD_FILE);		} elseif ( 'd' == $fileinfo['type'] ) {			if ( !$wp_filesystem->is_dir($to . $filename) ) {				if ( !$wp_filesystem->mkdir($to . $filename, FS_CHMOD_DIR) )					return new WP_Error('mkdir_failed', __('Could not create directory.'), $to . $filename);			}			$result = copy_dir($from . $filename, $to . $filename);			if ( is_wp_error($result) )				return $result;		}	}	return true;}/** * Initialises and connects the WordPress Filesystem Abstraction classes. * This function will include the chosen transport and attempt connecting. * * Plugins may add extra transports, And force WordPress to use them by returning the filename via the 'filesystem_method_file' filter. * * @since 2.5.0 * * @param array $args (optional) Connection args, These are passed directly to the WP_Filesystem_*() classes. * @param string $context (optional) Context for get_filesystem_method(), See function declaration for more information. * @return boolean false on failure, true on success */function WP_Filesystem( $args = false, $context = false ) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php');	$method = get_filesystem_method($args, $context);	if ( ! $method )		return false;	if ( ! class_exists("WP_Filesystem_$method") ) {		$abstraction_file = apply_filters('filesystem_method_file', ABSPATH . 'wp-admin/includes/class-wp-filesystem-' . $method . '.php', $method);		if ( ! file_exists($abstraction_file) )			return;		require_once($abstraction_file);	}	$method = "WP_Filesystem_$method";	$wp_filesystem = new $method($args);	//Define the timeouts for the connections. Only available after the construct is called to allow for per-transport overriding of the default.	if ( ! defined('FS_CONNECT_TIMEOUT') )		define('FS_CONNECT_TIMEOUT', 30);	if ( ! defined('FS_TIMEOUT') )		define('FS_TIMEOUT', 30);	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return false;	if ( !$wp_filesystem->connect() )		return false; //There was an erorr connecting to the server.	// Set the permission constants if not already set.	if ( ! defined('FS_CHMOD_DIR') )		define('FS_CHMOD_DIR', 0755 );	if ( ! defined('FS_CHMOD_FILE') )		define('FS_CHMOD_FILE', 0644 );	return true;}/** * Determines which Filesystem Method to use. * The priority of the Transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets (Via Sockets class, or fsoxkopen()) * * Note that the return value of this function can be overridden in 2 ways *  - By defining FS_METHOD in your <code>wp-config.php</code> file *  - By using the filesystem_method filter * Valid values for these are: 'direct', 'ssh', 'ftpext' or 'ftpsockets' * Plugins may also define a custom transport handler, See the WP_Filesystem function for more information. * * @since 2.5.0 * * @param array $args Connection details. * @param string $context Full path to the directory that is tested for being writable. * @return string The transport to use, see description for valid return values. */function get_filesystem_method($args = array(), $context = false) {	$method = defined('FS_METHOD') ? FS_METHOD : false; //Please ensure that this is either 'direct', 'ssh', 'ftpext' or 'ftpsockets'	if ( ! $method && function_exists('getmyuid') && function_exists('fileowner') ){		if ( !$context )			$context = WP_CONTENT_DIR;		$context = trailingslashit($context);		$temp_file_name = $context . 'temp-write-test-' . time();		$temp_handle = @fopen($temp_file_name, 'w');		if ( $temp_handle ) {			if ( getmyuid() == @fileowner($temp_file_name) )				$method = 'direct';			@fclose($temp_handle);			@unlink($temp_file_name);		} 	}	if ( ! $method && isset($args['connection_type']) && 'ssh' == $args['connection_type'] && extension_loaded('ssh2') && function_exists('stream_get_contents') ) $method = 'ssh2';	if ( ! $method && extension_loaded('ftp') ) $method = 'ftpext';	if ( ! $method && ( extension_loaded('sockets') || function_exists('fsockopen') ) ) $method = 'ftpsockets'; //Sockets: Socket extension; PHP Mode: FSockopen / fwrite / fread	return apply_filters('filesystem_method', $method, $args);}/** * Displays a form to the user to request for their FTP/SSH details in order to  connect to the filesystem. * All chosen/entered details are saved, Excluding the Password. * * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467) to specify an alternate FTP/SSH port. * * Plugins may override this form by returning true|false via the <code>request_filesystem_credentials</code> filter. * * @since 2.5.0 * * @param string $form_post the URL to post the form to * @param string $type the chosen Filesystem method in use * @param boolean $error if the current request has failed to connect * @param string $context The directory which is needed access to, The write-test will be performed on  this directory by get_filesystem_method() * @param string $extra_fields Extra POST fields which should be checked for to be included in the post. * @return boolean False on failure. True on success. */function request_filesystem_credentials($form_post, $type = '', $error = false, $context = false, $extra_fields = null) {	$req_cred = apply_filters( 'request_filesystem_credentials', '', $form_post, $type, $error, $context, $extra_fields );	if ( '' !== $req_cred )		return $req_cred;	if ( empty($type) )		$type = get_filesystem_method(array(), $context);	if ( 'direct' == $type )		return true;	if ( is_null( $extra_fields ) )		$extra_fields = array( 'version', 'locale' );	$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));	// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)	$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($_POST['hostname']) ? stripslashes($_POST['hostname']) : $credentials['hostname']);	$credentials['username'] = defined('FTP_USER') ? FTP_USER : (!empty($_POST['username']) ? stripslashes($_POST['username']) : $credentials['username']);	$credentials['password'] = defined('FTP_PASS') ? FTP_PASS : (!empty($_POST['password']) ? stripslashes($_POST['password']) : '');	// Check to see if we are setting the public/private keys for ssh	$credentials['public_key'] = defined('FTP_PUBKEY') ? FTP_PUBKEY : (!empty($_POST['public_key']) ? stripslashes($_POST['public_key']) : '');	$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($_POST['private_key']) ? stripslashes($_POST['private_key']) : '');	//sanitize the hostname, Some people might pass in odd-data:	$credentials['hostname'] = preg_replace('|\w+://|', '', $credentials['hostname']); //Strip any schemes off	if ( strpos($credentials['hostname'], ':') ) {		list( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);		if ( ! is_numeric($credentials['port']) )			unset($credentials['port']);	} else {		unset($credentials['port']);	}	if ( (defined('FTP_SSH') && FTP_SSH) || (defined('FS_METHOD') && 'ssh' == FS_METHOD) )		$credentials['connection_type'] = 'ssh';	else if ( (defined('FTP_SSL') && FTP_SSL) && 'ftpext' == $type ) //Only the FTP Extension understands SSL		$credentials['connection_type'] = 'ftps';	else if ( !empty($_POST['connection_type']) )		$credentials['connection_type'] = stripslashes($_POST['connection_type']);	else if ( !isset($credentials['connection_type']) ) //All else fails (And its not defaulted to something else saved), Default to FTP		$credentials['connection_type'] = 'ftp';	if ( ! $error &&			(				( !empty($credentials['password']) && !empty($credentials['username']) && !empty($credentials['hostname']) ) ||				( 'ssh' == $credentials['connection_type'] && !empty($credentials['public_key']) && !empty($credentials['private_key']) )			) ) {		$stored_credentials = $credentials;		if ( !empty($stored_credentials['port']) ) //save port as part of hostname to simplify above code.			$stored_credentials['hostname'] .= ':' . $stored_credentials['port'];		unset($stored_credentials['password'], $stored_credentials['port'], $stored_credentials['private_key'], $stored_credentials['public_key']);		update_option('ftp_credentials', $stored_credentials);		return $credentials;	}	$hostname = '';	$username = '';	$password = '';	$connection_type = '';	if ( !empty($credentials) )		extract($credentials, EXTR_OVERWRITE);	if ( $error ) {		$error_string = __('<strong>Error:</strong> There was an error connecting to the server, Please verify the settings are correct.');		if ( is_wp_error($error) )			$error_string = $error->get_error_message();		echo '<div id="message" class="error"><p>' . $error_string . '</p></div>';	}	$types = array();	if ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )		$types[ 'ftp' ] = __('FTP');	if ( extension_loaded('ftp') ) //Only this supports FTPS		$types[ 'ftps' ] = __('FTPS (SSL)');	if ( extension_loaded('ssh2') && function_exists('stream_get_contents') )		$types[ 'ssh' ] = __('SSH2');	$types = apply_filters('fs_ftp_connection_types', $types, $credentials, $type, $error, $context);?><script type="text/javascript"><!--jQuery(function($){	jQuery("#ssh").click(function () {		jQuery("#ssh_keys").show();	});	jQuery("#ftp, #ftps").click(function () {		jQuery("#ssh_keys").hide();	});	jQuery('form input[value=""]:first').focus();});--></script><form action="<?php echo $form_post ?>" method="post"><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Connection Information') ?></h2><p><?php	$label_user = __('Username');	$label_pass = __('Password');	_e('To perform the requested action, WordPress needs to access to your web server.');	echo ' ';	if ( ( isset( $types['ftp'] ) || isset( $types['ftps'] ) ) ) {		if ( isset( $types['ssh'] ) ) {			_e('Please enter your FTP or SSH credentials to proceed.');			$label_user = __('FTP/SSH Username');			$label_pass = __('FTP/SSH Password');		} else {			_e('Please enter your FTP credentials to proceed.');			$label_user = __('FTP Username');			$label_pass = __('FTP Password');		}		echo ' ';	}	_e('If you do not remember your credentials, you should contact your web host.');?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="hostname"><?php _e('Hostname') ?></label></th><td><input name="hostname" type="text" id="hostname" value="<?php echo esc_attr($hostname); if ( !empty($port) ) echo ":$port"; ?>"<?php disabled( defined('FTP_HOST') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="username"><?php echo $label_user; ?></label></th><td><input name="username" type="text" id="username" value="<?php echo esc_attr($username) ?>"<?php disabled( defined('FTP_USER') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="password"><?php echo $label_pass; ?></label></th><td><input name="password" type="password" id="password" value="<?php if ( defined('FTP_PASS') ) echo '*****'; ?>"<?php disabled( defined('FTP_PASS') ); ?> size="40" /></td></tr><?php if ( isset($types['ssh']) ) : ?><tr id="ssh_keys" valign="top" style="<?php if ( 'ssh' != $connection_type ) echo 'display:none' ?>"><th scope="row"><?php _e('Authentication Keys') ?><div class="key-labels textright"><label for="public_key"><?php _e('Public Key:') ?></label ><br /><label for="private_key"><?php _e('Private Key:') ?></label></div></th><td><br /><input name="public_key" type="text" id="public_key" value="<?php echo esc_attr($public_key) ?>"<?php disabled( defined('FTP_PUBKEY') ); ?> size="40" /><br /><input name="private_key" type="text" id="private_key" value="<?php echo esc_attr($private_key) ?>"<?php disabled( defined('FTP_PRIKEY') ); ?> size="40" /><div><?php _e('Enter the location on the server where the keys are located. If a passphrase is needed, enter that in the password field above.') ?></div></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Connection Type') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Connection Type') ?></span></legend><?php	$disabled = disabled( (defined('FTP_SSL') && FTP_SSL) || (defined('FTP_SSH') && FTP_SSH), true, false );	foreach ( $types as $name => $text ) : ?>	<label for="<?php echo esc_attr($name) ?>">		<input type="radio" name="connection_type" id="<?php echo esc_attr($name) ?>" value="<?php echo esc_attr($name) ?>"<?php checked($name, $connection_type); echo $disabled; ?> />		<?php echo $text ?>	</label>	<?php endforeach; ?></fieldset></td></tr></table><?phpforeach ( (array) $extra_fields as $field ) {	if ( isset( $_POST[ $field ] ) )		echo '<input type="hidden" name="' . esc_attr( $field ) . '" value="' . esc_attr( stripslashes( $_POST[ $field ] ) ) . '" />';}?><p class="submit"><input id="upgrade" name="upgrade" type="submit" class="button" value="<?php esc_attr_e('Proceed'); ?>" /></p></div></form><?php	return false;}?>
<?php/** * Object Cache API * * @link http://codex.wordpress.org/Function_Reference/WP_Cache * * @package WordPress * @subpackage Cache *//** * Adds data to the cache, if the cache key doesn't aleady exist. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::add() * * @param int|string $key The cache ID to use for retrieval later * @param mixed $data The data to add to the cache store * @param string $flag The group to add the cache to * @param int $expire When the cache data should be expired * @return unknown */function wp_cache_add($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->add($key, $data, $flag, $expire);}/** * Closes the cache. * * This function has ceased to do anything since WordPress 2.5. The * functionality was removed along with the rest of the persistant cache. This * does not mean that plugins can't implement this function when they need to * make sure that the cache is cleaned up after WordPress no longer needs it. * * @since 2.0.0 * * @return bool Always returns True */function wp_cache_close() {	return true;}/** * Removes the cache contents matching ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::delete() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool True on successful removal, false on failure */function wp_cache_delete($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->delete($id, $flag);}/** * Removes all cache items. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::flush() * * @return bool Always returns true */function wp_cache_flush() {	global $wp_object_cache;	return $wp_object_cache->flush();}/** * Retrieves the cache contents from the cache by ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::get() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool|mixed False on failure to retrieve contents or the cache *		contents on success */function wp_cache_get($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->get($id, $flag);}/** * Sets up Object Cache Global and assigns it. * * @since 2.0.0 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache */function wp_cache_init() {	$GLOBALS['wp_object_cache'] =& new WP_Object_Cache();}/** * Replaces the contents of the cache with new data. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::replace() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_replace($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->replace($key, $data, $flag, $expire);}/** * Saves the data to the cache. * * @since 2.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::set() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_set($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->set($key, $data, $flag, $expire);}/** * Adds a group or set of groups to the list of global groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_global_groups( $groups ) {	global $wp_object_cache;	return $wp_object_cache->add_global_groups($groups);}/** * Adds a group or set of groups to the list of non-persistent groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_non_persistent_groups( $groups ) {	// Default cache doesn't persist so nothing to do here.	return;}/** * Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, * this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_reset() {	global $wp_object_cache;	return $wp_object_cache->reset();}/** * WordPress Object Cache * * The WordPress Object Cache is used to save on trips to the database. The * Object Cache stores all of the cache data to memory and makes the cache * contents available by using a key, which is used to name and later retrieve * the cache contents. * * The Object Cache can be replaced by other caching mechanisms by placing files * in the wp-content folder which is looked at in wp-settings. If that file * exists, then this file will not be included. * * @package WordPress * @subpackage Cache * @since 2.0 */class WP_Object_Cache {	/**	 * Holds the cached objects	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $cache = array ();	/**	 * Cache objects that do not exist in the cache	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $non_existent_objects = array ();	/**	 * The amount of times the cache data was already stored in the cache.	 *	 * @since 2.5.0	 * @access private	 * @var int	 */	var $cache_hits = 0;	/**	 * Amount of times the cache did not have the request in cache	 *	 * @var int	 * @access public	 * @since 2.0.0	 */	var $cache_misses = 0;	/**	 * List of global groups	 *	 * @var array	 * @access protected	 * @since 3.0.0	 */	var $global_groups = array();	/**	 * Adds data to the cache if it doesn't already exist.	 *	 * @uses WP_Object_Cache::get Checks to see if the cache already has data.	 * @uses WP_Object_Cache::set Sets the data after the checking the cache	 *		contents existance.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if cache ID and group already exists, true on success	 */	function add( $id, $data, $group = 'default', $expire = '' ) {		if ( empty ($group) )			$group = 'default';		if (false !== $this->get($id, $group))			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Sets the list of global groups.	 *	 * @since 3.0.0	 *	 * @param array $groups List of groups that are global.	 */	function add_global_groups( $groups ) {		$groups = (array) $groups;		$this->global_groups = array_merge($this->global_groups, $groups);		$this->global_groups = array_unique($this->global_groups);	}	/**	 * Remove the contents of the cache ID in the group	 *	 * If the cache ID does not exist in the group and $force parameter is set	 * to false, then nothing will happen. The $force parameter is set to false	 * by default.	 *	 * On success the group and the id will be added to the	 * $non_existent_objects property in the class.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @param bool $force Optional. Whether to force the unsetting of the cache	 *		ID in the group	 * @return bool False if the contents weren't deleted and true on success	 */	function delete($id, $group = 'default', $force = false) {		if (empty ($group))			$group = 'default';		if (!$force && false === $this->get($id, $group))			return false;		unset ($this->cache[$group][$id]);		$this->non_existent_objects[$group][$id] = true;		return true;	}	/**	 * Clears the object cache of all data	 *	 * @since 2.0.0	 *	 * @return bool Always returns true	 */	function flush() {		$this->cache = array ();		return true;	}	/**	 * Retrieves the cache contents, if it exists	 *	 * The contents will be first attempted to be retrieved by searching by the	 * ID in the cache group. If the cache is hit (success) then the contents	 * are returned.	 *	 * On failure, the $non_existent_objects property is checked and if the	 * cache group and ID exist in there the cache misses will not be	 * incremented. If not in the nonexistent objects property, then the cache	 * misses will be incremented and the cache group and ID will be added to	 * the nonexistent objects.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @return bool|mixed False on failure to retrieve contents or the cache	 *		contents on success	 */	function get($id, $group = 'default') {		if ( empty ($group) )			$group = 'default';		if ( isset ($this->cache[$group][$id]) ) {			$this->cache_hits += 1;			if ( is_object($this->cache[$group][$id]) )				return wp_clone($this->cache[$group][$id]);			else				return $this->cache[$group][$id];		}		if ( isset ($this->non_existent_objects[$group][$id]) )			return false;		$this->non_existent_objects[$group][$id] = true;		$this->cache_misses += 1;		return false;	}	/**	 * Replace the contents in the cache, if contents already exist	 *	 * @since 2.0.0	 * @see WP_Object_Cache::set()	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if not exists, true if contents were replaced	 */	function replace($id, $data, $group = 'default', $expire = '') {		if (empty ($group))			$group = 'default';		if ( false === $this->get($id, $group) )			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Reset keys	 *	 * @since 3.0.0	 */	function reset() {		// Clear out non-global caches since the blog ID has changed.		foreach ( array_keys($this->cache) as $group ) {			if ( !in_array($group, $this->global_groups) )				unset($this->cache[$group]);		}	}	/**	 * Sets the data contents into the cache	 *	 * The cache contents is grouped by the $group parameter followed by the	 * $id. This allows for duplicate ids in unique groups. Therefore, naming of	 * the group should be used with care and should follow normal function	 * naming guidelines outside of core WordPress usage.	 *	 * The $expire parameter is not used, because the cache will automatically	 * expire for each time a page is accessed and PHP finishes. The method is	 * more for cache plugins which use files.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire Not Used	 * @return bool Always returns true	 */	function set($id, $data, $group = 'default', $expire = '') {		if ( empty ($group) )			$group = 'default';		if ( NULL === $data )			$data = '';		if ( is_object($data) )			$data = wp_clone($data);		$this->cache[$group][$id] = $data;		if ( isset($this->non_existent_objects[$group][$id]) )			unset ($this->non_existent_objects[$group][$id]);		return true;	}	/**	 * Echoes the stats of the caching.	 *	 * Gives the cache hits, and cache misses. Also prints every cached group,	 * key and the data.	 *	 * @since 2.0.0	 */	function stats() {		echo "<p>";		echo "<strong>Cache Hits:</strong> {$this->cache_hits}<br />";		echo "<strong>Cache Misses:</strong> {$this->cache_misses}<br />";		echo "</p>";		foreach ($this->cache as $group => $cache) {			echo "<p>";			echo "<strong>Group:</strong> $group<br />";			echo "<strong>Cache:</strong>";			echo "<pre>";			print_r($cache);			echo "</pre>";		}	}	/**	 * PHP4 constructor; Calls PHP 5 style constructor	 *	 * @since 2.0.0	 *	 * @return WP_Object_Cache	 */	function WP_Object_Cache() {		return $this->__construct();	}	/**	 * Sets up object properties; PHP 5 style constructor	 *	 * @since 2.0.8	 * @return null|WP_Object_Cache If cache is disabled, returns null.	 */	function __construct() {		/**		 * @todo This should be moved to the PHP4 style constructor, PHP5		 * already calls __destruct()		 */		register_shutdown_function(array(&$this, "__destruct"));	}	/**	 * Will save the object cache before object is completely destroyed.	 *	 * Called upon object destruction, which should be when PHP ends.	 *	 * @since  2.0.8	 *	 * @return bool True value. Won't be used by PHP	 */	function __destruct() {		return true;	}}?>
<?php/** * Edit comment form for inclusion in another file. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');/** * @var string */$submitbutton_text = __('Edit Comment');$toprow_title = sprintf(__('Editing Comment # %s'), $comment->comment_ID);$form_action = 'editedcomment';$form_extra = "' />\n<input type='hidden' name='comment_ID' value='" . esc_attr($comment->comment_ID) . "' />\n<input type='hidden' name='comment_post_ID' value='" . esc_attr($comment->comment_post_ID);$comment->comment_author_email = esc_attr($comment->comment_author_email);?><form name="post" action="comment.php" method="post" id="post"><?php wp_nonce_field('update-comment_' . $comment->comment_ID) ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Edit Comment'); ?></h2><div id="poststuff" class="metabox-holder has-right-sidebar"><input type="hidden" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" name="action" value='<?php echo $form_action . $form_extra ?>' /><div id="side-info-column" class="inner-sidebar"><div id="submitdiv" class="stuffbox" ><h3><span class='hndle'><?php _e('Status') ?></span></h3><div class="inside"><div class="submitbox" id="submitcomment"><div id="minor-publishing"><div id="minor-publishing-actions"><div id="preview-action"><a class="preview button" href="<?php echo get_comment_link(); ?>" target="_blank"><?php _e('View Comment'); ?></a></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section" id="comment-status-radio"><label class="approved"><input type="radio"<?php checked( $comment->comment_approved, '1' ); ?> name="comment_status" value="1" /><?php /* translators: comment type radio button */ _ex('Approved', 'adjective') ?></label><br /><label class="waiting"><input type="radio"<?php checked( $comment->comment_approved, '0' ); ?> name="comment_status" value="0" /><?php /* translators: comment type radio button */ _ex('Pending', 'adjective') ?></label><br /><label class="spam"><input type="radio"<?php checked( $comment->comment_approved, 'spam' ); ?> name="comment_status" value="spam" /><?php /* translators: comment type radio button */ _ex('Spam', 'adjective'); ?></label></div><div class="misc-pub-section curtime misc-pub-section-last"><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );$stamp = __('Submitted on: <b>%1$s</b>');$date = date_i18n( $datef, strtotime( $comment->comment_date ) );?><span id="timestamp"><?php printf($stamp, $date); ?></span>&nbsp;<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id='timestampdiv' class='hide-if-js'><?php touch_time(('editcomment' == $action), 0, 5); ?></div></div></div> <!-- misc actions --><div class="clear"></div></div><div id="major-publishing-actions"><div id="delete-action"><?php echo "<a class='submitdelete deletion' href='" . wp_nonce_url("comment.php?action=" . ( !EMPTY_TRASH_DAYS ? 'deletecomment' : 'trashcomment' ) . "&amp;c=$comment->comment_ID&amp;_wp_original_http_referer=" . urlencode(wp_get_referer()), 'delete-comment_' . $comment->comment_ID) . "'>" . ( !EMPTY_TRASH_DAYS ? __('Delete Permanently') : __('Move to Trash') ) . "</a>\n"; ?></div><div id="publishing-action"><input type="submit" name="save" value="<?php esc_attr_e('Update Comment'); ?>" tabindex="4" class="button-primary" /></div><div class="clear"></div></div></div></div></div></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="name"><?php _e( 'Author' ) ?></label></h3><div class="inside"><table class="form-table editcomment"><tbody><tr valign="top">	<td class="first"><?php _e( 'Name:' ); ?></td>	<td><input type="text" name="newcomment_author" size="30" value="<?php echo esc_attr( $comment->comment_author ); ?>" tabindex="1" id="name" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( $comment->comment_author_email ) {			printf( __( 'E-mail (%s):' ), get_comment_author_email_link( __( 'send e-mail' ), '', '' ) );		} else {			_e( 'E-mail:' );		}?></td>	<td><input type="text" name="newcomment_author_email" size="30" value="<?php echo $comment->comment_author_email; ?>" tabindex="2" id="email" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( ! empty( $comment->comment_author_url ) && 'http://' != $comment->comment_author_url ) {			$link = '<a href="' . $comment->comment_author_url . '" rel="external nofollow" target="_blank">' . __('visit site') . '</a>';			printf( __( 'URL (%s):' ), apply_filters('get_comment_author_link', $link ) );		} else {			_e( 'URL:' );		} ?></td>	<td><input type="text" id="newcomment_author_url" name="newcomment_author_url" size="30" class="code" value="<?php echo esc_attr($comment->comment_author_url); ?>" tabindex="3" /></td></tr></tbody></table><br /></div></div><div id="postdiv" class="postarea"><?php the_editor($comment->comment_content, 'content', 'newcomment_author_url', false, 4); ?><?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?></div><?phpdo_action('add_meta_boxes', 'comment', $comment);do_action('add_meta_boxes_comment', $comment);do_meta_boxes('comment', 'normal', $comment);?><input type="hidden" name="c" value="<?php echo esc_attr($comment->comment_ID) ?>" /><input type="hidden" name="p" value="<?php echo esc_attr($comment->comment_post_ID) ?>" /><input name="referredby" type="hidden" id="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?php wp_original_referer_field(true, 'previous'); ?><input type="hidden" name="noredir" value="1" /></div></div></div></div></form><script type="text/javascript">try{document.post.name.focus();}catch(e){}</script>
<?php/** * These functions can be replaced via plugins. If plugins do not redefine these * functions, then these will be used instead. * * @package WordPress */if ( !function_exists('wp_set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * Some WordPress functionality is based on the current user and not based on * the signed in user. Therefore, it opens the ability to edit and perform * actions on users who aren't signed in. * * @since 2.0.3 * @global object $current_user The current user object which holds the user data. * @uses do_action() Calls 'set_current_user' hook after setting the current user. * * @param int $id User ID * @param string $name User's username * @return WP_User Current user User object */function wp_set_current_user($id, $name = '') {	global $current_user;	if ( isset($current_user) && ($id == $current_user->ID) )		return $current_user;	$current_user = new WP_User($id, $name);	setup_userdata($current_user->ID);	do_action('set_current_user');	return $current_user;}endif;if ( !function_exists('wp_get_current_user') ) :/** * Retrieve the current user object. * * @since 2.0.3 * * @return WP_User Current user WP_User object */function wp_get_current_user() {	global $current_user;	get_currentuserinfo();	return $current_user;}endif;if ( !function_exists('get_currentuserinfo') ) :/** * Populate global variables with information about the currently logged in user. * * Will set the current user, if the current user is not set. The current user * will be set to the logged in person. If no user is logged in, then it will * set the current user to 0, which is invalid and won't have any permissions. * * @since 0.71 * @uses $current_user Checks if the current user is set * @uses wp_validate_auth_cookie() Retrieves current logged in user. * * @return bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set */function get_currentuserinfo() {	global $current_user;	if ( defined('XMLRPC_REQUEST') && XMLRPC_REQUEST )		return false;	if ( ! empty($current_user) )		return;	if ( ! $user = wp_validate_auth_cookie() ) {		 if ( is_admin() || empty($_COOKIE[LOGGED_IN_COOKIE]) || !$user = wp_validate_auth_cookie($_COOKIE[LOGGED_IN_COOKIE], 'logged_in') ) {		 	wp_set_current_user(0);		 	return false;		 }	}	wp_set_current_user($user);}endif;if ( !function_exists('get_userdata') ) :/** * Retrieve user info by user ID. * * @since 0.71 * * @param int $user_id User ID * @return bool|object False on failure, User DB row object */function get_userdata( $user_id ) {	global $wpdb;	if ( ! is_numeric( $user_id ) )		return false;	$user_id = absint( $user_id );	if ( ! $user_id )		return false;	$user = wp_cache_get( $user_id, 'users' );	if ( $user )		return $user;	if ( ! $user = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d LIMIT 1", $user_id ) ) )		return false;	_fill_user( $user );	return $user;}endif;if ( !function_exists('cache_users') ) :/** * Retrieve info for user lists to prevent multiple queries by get_userdata() * * @since 3.0.0 * * @param array $users User ID numbers list */function cache_users( $users ) {	global $wpdb;	$clean = array();	foreach($users as $id) {		$id = (int) $id;		if (wp_cache_get($id, 'users')) {			// seems to be cached already		} else {			$clean[] = $id;		}	}	if ( 0 == count($clean) )		return;	$list = implode(',', $clean);	$results = $wpdb->get_results("SELECT * FROM $wpdb->users WHERE ID IN ($list)");	_fill_many_users($results);}endif;if ( !function_exists('get_user_by') ) :/** * Retrieve user info by a given field * * @since 2.8.0 * * @param string $field The field to retrieve the user with.  id | slug | email | login * @param int|string $value A value for $field.  A user ID, slug, email address, or login name. * @return bool|object False on failure, User DB row object */function get_user_by($field, $value) {	global $wpdb;	switch ($field) {		case 'id':			return get_userdata($value);			break;		case 'slug':			$user_id = wp_cache_get($value, 'userslugs');			$field = 'user_nicename';			break;		case 'email':			$user_id = wp_cache_get($value, 'useremail');			$field = 'user_email';			break;		case 'login':			$value = sanitize_user( $value );			$user_id = wp_cache_get($value, 'userlogins');			$field = 'user_login';			break;		default:			return false;	}	 if ( false !== $user_id )		return get_userdata($user_id);	if ( !$user = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->users WHERE $field = %s", $value) ) )		return false;	_fill_user($user);	return $user;}endif;if ( !function_exists('get_userdatabylogin') ) :/** * Retrieve user info by login name. * * @since 0.71 * * @param string $user_login User's username * @return bool|object False on failure, User DB row object */function get_userdatabylogin($user_login) {	return get_user_by('login', $user_login);}endif;if ( !function_exists('get_user_by_email') ) :/** * Retrieve user info by email. * * @since 2.5 * * @param string $email User's email address * @return bool|object False on failure, User DB row object */function get_user_by_email($email) {	return get_user_by('email', $email);}endif;if ( !function_exists( 'wp_mail' ) ) :/** * Send mail, similar to PHP's mail * * A true return value does not automatically mean that the user received the * email successfully. It just only means that the method used was able to * process the request without any errors. * * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from * creating a from address like 'Name <email@address.com>' when both are set. If * just 'wp_mail_from' is set, then just the email address will be used with no * name. * * The default content type is 'text/plain' which does not allow using HTML. * However, you can set the content type of the email by using the * 'wp_mail_content_type' filter. * * The default charset is based on the charset used on the blog. The charset can * be set using the 'wp_mail_charset' filter. * * @since 1.2.1 * @uses apply_filters() Calls 'wp_mail' hook on an array of all of the parameters. * @uses apply_filters() Calls 'wp_mail_from' hook to get the from email address. * @uses apply_filters() Calls 'wp_mail_from_name' hook to get the from address name. * @uses apply_filters() Calls 'wp_mail_content_type' hook to get the email content type. * @uses apply_filters() Calls 'wp_mail_charset' hook to get the email charset * @uses do_action_ref_array() Calls 'phpmailer_init' hook on the reference to *		phpmailer object. * @uses PHPMailer * @ * * @param string|array $to Array or comma-separated list of email addresses to send message. * @param string $subject Email subject * @param string $message Message contents * @param string|array $headers Optional. Additional headers. * @param string|array $attachments Optional. Files to attach. * @return bool Whether the email contents were sent successfully. */function wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {	// Compact the input, apply the filters, and extract them back out	extract( apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) ) );	if ( !is_array($attachments) )		$attachments = explode( "\n", str_replace( "\r\n", "\n", $attachments ) );	global $phpmailer;	// (Re)create it, if it's gone missing	if ( !is_object( $phpmailer ) || !is_a( $phpmailer, 'PHPMailer' ) ) {		require_once ABSPATH . WPINC . '/class-phpmailer.php';		require_once ABSPATH . WPINC . '/class-smtp.php';		$phpmailer = new PHPMailer();	}	// Headers	if ( empty( $headers ) ) {		$headers = array();	} else {		if ( !is_array( $headers ) ) {			// Explode the headers out, so this function can take both			// string headers and an array of headers.			$tempheaders = explode( "\n", str_replace( "\r\n", "\n", $headers ) );		} else {			$tempheaders = $headers;		}		$headers = array();		// If it's actually got contents		if ( !empty( $tempheaders ) ) {			// Iterate through the raw headers			foreach ( (array) $tempheaders as $header ) {				if ( strpos($header, ':') === false ) {					if ( false !== stripos( $header, 'boundary=' ) ) {						$parts = preg_split('/boundary=/i', trim( $header ) );						$boundary = trim( str_replace( array( "'", '"' ), '', $parts[1] ) );					}					continue;				}				// Explode them out				list( $name, $content ) = explode( ':', trim( $header ), 2 );				// Cleanup crew				$name    = trim( $name    );				$content = trim( $content );				switch ( strtolower( $name ) ) {					// Mainly for legacy -- process a From: header if it's there					case 'from':						if ( strpos($content, '<' ) !== false ) {							// So... making my life hard again?							$from_name = substr( $content, 0, strpos( $content, '<' ) - 1 );							$from_name = str_replace( '"', '', $from_name );							$from_name = trim( $from_name );							$from_email = substr( $content, strpos( $content, '<' ) + 1 );							$from_email = str_replace( '>', '', $from_email );							$from_email = trim( $from_email );						} else {							$from_email = trim( $content );						}						break;					case 'content-type':						if ( strpos( $content, ';' ) !== false ) {							list( $type, $charset ) = explode( ';', $content );							$content_type = trim( $type );							if ( false !== stripos( $charset, 'charset=' ) ) {								$charset = trim( str_replace( array( 'charset=', '"' ), '', $charset ) );							} elseif ( false !== stripos( $charset, 'boundary=' ) ) {								$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '"' ), '', $charset ) );								$charset = '';							}						} else {							$content_type = trim( $content );						}						break;					case 'cc':						$cc = array_merge( (array) $cc, explode( ',', $content ) );						break;					case 'bcc':						$bcc = array_merge( (array) $bcc, explode( ',', $content ) );						break;					default:						// Add it to our grand headers array						$headers[trim( $name )] = trim( $content );						break;				}			}		}	}	// Empty out the values that may be set	$phpmailer->ClearAddresses();	$phpmailer->ClearAllRecipients();	$phpmailer->ClearAttachments();	$phpmailer->ClearBCCs();	$phpmailer->ClearCCs();	$phpmailer->ClearCustomHeaders();	$phpmailer->ClearReplyTos();	// From email and name	// If we don't have a name from the input headers	if ( !isset( $from_name ) )		$from_name = 'WordPress';	/* If we don't have an email from the input headers default to wordpress@$sitename	 * Some hosts will block outgoing mail from this address if it doesn't exist but	 * there's no easy alternative. Defaulting to admin_email might appear to be another	 * option but some hosts may refuse to relay mail from an unknown domain. See	 * http://trac.wordpress.org/ticket/5007.	 */	if ( !isset( $from_email ) ) {		// Get the site domain and get rid of www.		$sitename = strtolower( $_SERVER['SERVER_NAME'] );		if ( substr( $sitename, 0, 4 ) == 'www.' ) {			$sitename = substr( $sitename, 4 );		}		$from_email = 'wordpress@' . $sitename;	}	// Plugin authors can override the potentially troublesome default	$phpmailer->From     = apply_filters( 'wp_mail_from'     , $from_email );	$phpmailer->FromName = apply_filters( 'wp_mail_from_name', $from_name  );	// Set destination addresses	if ( !is_array( $to ) )		$to = explode( ',', $to );	foreach ( (array) $to as $recipient ) {		$phpmailer->AddAddress( trim( $recipient ) );	}	// Set mail's subject and body	$phpmailer->Subject = $subject;	$phpmailer->Body    = $message;	// Add any CC and BCC recipients	if ( !empty( $cc ) ) {		foreach ( (array) $cc as $recipient ) {			$phpmailer->AddCc( trim($recipient) );		}	}	if ( !empty( $bcc ) ) {		foreach ( (array) $bcc as $recipient) {			$phpmailer->AddBcc( trim($recipient) );		}	}	// Set to use PHP's mail()	$phpmailer->IsMail();	// Set Content-Type and charset	// If we don't have a content-type from the input headers	if ( !isset( $content_type ) )		$content_type = 'text/plain';	$content_type = apply_filters( 'wp_mail_content_type', $content_type );	$phpmailer->ContentType = $content_type;	// Set whether it's plaintext, depending on $content_type	if ( 'text/html' == $content_type )		$phpmailer->IsHTML( true );	// If we don't have a charset from the input headers	if ( !isset( $charset ) )		$charset = get_bloginfo( 'charset' );	// Set the content-type and charset	$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );	// Set custom headers	if ( !empty( $headers ) ) {		foreach( (array) $headers as $name => $content ) {			$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );		}		if ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )			$phpmailer->AddCustomHeader( sprintf( "Content-Type: %s;\n\t boundary=\"%s\"", $content_type, $boundary ) );	}	if ( !empty( $attachments ) ) {		foreach ( $attachments as $attachment ) {			$phpmailer->AddAttachment($attachment);		}	}	do_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );	// Send!	$result = @$phpmailer->Send();	return $result;}endif;if ( !function_exists('wp_authenticate') ) :/** * Checks a user's login information and logs them in if it checks out. * * @since 2.5.0 * * @param string $username User's username * @param string $password User's password * @return WP_Error|WP_User WP_User object if login successful, otherwise WP_Error object. */function wp_authenticate($username, $password) {	$username = sanitize_user($username);	$password = trim($password);	$user = apply_filters('authenticate', null, $username, $password);	if ( $user == null ) {		// TODO what should the error message be? (Or would these even happen?)		// Only needed if all authentication handlers fail to return anything.		$user = new WP_Error('authentication_failed', __('<strong>ERROR</strong>: Invalid username or incorrect password.'));	}	$ignore_codes = array('empty_username', 'empty_password');	if (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {		do_action('wp_login_failed', $username);	}	return $user;}endif;if ( !function_exists('wp_logout') ) :/** * Log the current user out. * * @since 2.5.0 */function wp_logout() {	wp_clear_auth_cookie();	do_action('wp_logout');}endif;if ( !function_exists('wp_validate_auth_cookie') ) :/** * Validates authentication cookie. * * The checks include making sure that the authentication cookie is set and * pulling in the contents (if $cookie is not used). * * Makes sure the cookie is not expired. Verifies the hash in cookie is what is * should be and compares the two. * * @since 2.5 * * @param string $cookie Optional. If used, will validate contents instead of cookie's * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return bool|int False if invalid cookie, User ID if valid. */function wp_validate_auth_cookie($cookie = '', $scheme = '') {	if ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {		do_action('auth_cookie_malformed', $cookie, $scheme);		return false;	}	extract($cookie_elements, EXTR_OVERWRITE);	$expired = $expiration;	// Allow a grace period for POST and AJAX requests	if ( defined('DOING_AJAX') || 'POST' == $_SERVER['REQUEST_METHOD'] )		$expired += 3600;	// Quick check to see if an honest cookie has expired	if ( $expired < time() ) {		do_action('auth_cookie_expired', $cookie_elements);		return false;	}	$user = get_userdatabylogin($username);	if ( ! $user ) {		do_action('auth_cookie_bad_username', $cookie_elements);		return false;	}	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($username . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $username . '|' . $expiration, $key);	if ( $hmac != $hash ) {		do_action('auth_cookie_bad_hash', $cookie_elements);		return false;	}	if ( $expiration < time() ) // AJAX/POST grace period set above		$GLOBALS['login_grace_period'] = 1;	do_action('auth_cookie_valid', $cookie_elements, $user);	return $user->ID;}endif;if ( !function_exists('wp_generate_auth_cookie') ) :/** * Generate authentication cookie contents. * * @since 2.5 * @uses apply_filters() Calls 'auth_cookie' hook on $cookie contents, User ID *		and expiration of cookie. * * @param int $user_id User ID * @param int $expiration Cookie expiration in seconds * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return string Authentication cookie contents */function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth') {	$user = get_userdata($user_id);	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($user->user_login . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $user->user_login . '|' . $expiration, $key);	$cookie = $user->user_login . '|' . $expiration . '|' . $hash;	return apply_filters('auth_cookie', $cookie, $user_id, $expiration, $scheme);}endif;if ( !function_exists('wp_parse_auth_cookie') ) :/** * Parse a cookie into its components * * @since 2.7 * * @param string $cookie * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return array Authentication cookie components */function wp_parse_auth_cookie($cookie = '', $scheme = '') {	if ( empty($cookie) ) {		switch ($scheme){			case 'auth':				$cookie_name = AUTH_COOKIE;				break;			case 'secure_auth':				$cookie_name = SECURE_AUTH_COOKIE;				break;			case "logged_in":				$cookie_name = LOGGED_IN_COOKIE;				break;			default:				if ( is_ssl() ) {					$cookie_name = SECURE_AUTH_COOKIE;					$scheme = 'secure_auth';				} else {					$cookie_name = AUTH_COOKIE;					$scheme = 'auth';				}	    }		if ( empty($_COOKIE[$cookie_name]) )			return false;		$cookie = $_COOKIE[$cookie_name];	}	$cookie_elements = explode('|', $cookie);	if ( count($cookie_elements) != 3 )		return false;	list($username, $expiration, $hmac) = $cookie_elements;	return compact('username', 'expiration', 'hmac', 'scheme');}endif;if ( !function_exists('wp_set_auth_cookie') ) :/** * Sets the authentication cookies based User ID. * * The $remember parameter increases the time that the cookie will be kept. The * default the cookie is kept without remembering is two days. When $remember is * set, the cookies will be kept for 14 days or two weeks. * * @since 2.5 * * @param int $user_id User ID * @param bool $remember Whether to remember the user */function wp_set_auth_cookie($user_id, $remember = false, $secure = '') {	if ( $remember ) {		$expiration = $expire = time() + apply_filters('auth_cookie_expiration', 1209600, $user_id, $remember);	} else {		$expiration = time() + apply_filters('auth_cookie_expiration', 172800, $user_id, $remember);		$expire = 0;	}	if ( '' === $secure )		$secure = is_ssl();	if ( $secure ) {		$auth_cookie_name = SECURE_AUTH_COOKIE;		$scheme = 'secure_auth';	} else {		$auth_cookie_name = AUTH_COOKIE;		$scheme = 'auth';	}	$auth_cookie = wp_generate_auth_cookie($user_id, $expiration, $scheme);	$logged_in_cookie = wp_generate_auth_cookie($user_id, $expiration, 'logged_in');	do_action('set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme);	do_action('set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in');	// Set httponly if the php version is >= 5.2.0	if ( version_compare(phpversion(), '5.2.0', 'ge') ) {		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, false, true);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, false, true);	} else {		$cookie_domain = COOKIE_DOMAIN;		if ( !empty($cookie_domain) )			$cookie_domain .= '; HttpOnly';		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, $cookie_domain, $secure);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, $cookie_domain, $secure);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, $cookie_domain);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, $cookie_domain);	}}endif;if ( !function_exists('wp_clear_auth_cookie') ) :/** * Removes all of the cookies associated with authentication. * * @since 2.5 */function wp_clear_auth_cookie() {	do_action('clear_auth_cookie');	setcookie(AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Old cookies	setcookie(AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Even older cookies	setcookie(USER_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(USER_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);}endif;if ( !function_exists('is_user_logged_in') ) :/** * Checks if the current visitor is a logged in user. * * @since 2.0.0 * * @return bool True if user is logged in, false if not logged in. */function is_user_logged_in() {	$user = wp_get_current_user();	if ( $user->id == 0 )		return false;	return true;}endif;if ( !function_exists('auth_redirect') ) :/** * Checks if a user is logged in, if not it redirects them to the login page. * * @since 1.5 */function auth_redirect() {	// Checks if a user is logged in, if not redirects them to the login page	$secure = ( is_ssl() || force_ssl_admin() );	// If https is required and request is http, redirect	if ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {		if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {			wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));			exit();		} else {			wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);			exit();		}	}	if ( $user_id = wp_validate_auth_cookie( '', apply_filters( 'auth_redirect_scheme', '' ) ) ) {		do_action('auth_redirect', $user_id);		// If the user wants ssl but the session is not ssl, redirect.		if ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {			if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {				wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));				exit();			} else {				wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);				exit();			}		}		return;  // The cookie is good so we're done	}	// The cookie is no good so force login	nocache_headers();	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$redirect = ( strpos($_SERVER['REQUEST_URI'], '/options.php') && wp_get_referer() ) ? wp_get_referer() : $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];	$login_url = wp_login_url($redirect, true);	wp_redirect($login_url);	exit();}endif;if ( !function_exists('check_admin_referer') ) :/** * Makes sure that a user was referred from another admin page. * * To avoid security exploits. * * @since 1.2.0 * @uses do_action() Calls 'check_admin_referer' on $action. * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_admin_referer($action = -1, $query_arg = '_wpnonce') {	$adminurl = strtolower(admin_url());	$referer = strtolower(wp_get_referer());	$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;	if ( !$result && !(-1 == $action && strpos($referer, $adminurl) !== false) ) {		wp_nonce_ays($action);		die();	}	do_action('check_admin_referer', $action, $result);	return $result;}endif;if ( !function_exists('check_ajax_referer') ) :/** * Verifies the AJAX request to prevent processing requests external of the blog. * * @since 2.0.3 * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {	if ( $query_arg )		$nonce = $_REQUEST[$query_arg];	else		$nonce = isset($_REQUEST['_ajax_nonce']) ? $_REQUEST['_ajax_nonce'] : $_REQUEST['_wpnonce'];	$result = wp_verify_nonce( $nonce, $action );	if ( $die && false == $result )		die('-1');	do_action('check_ajax_referer', $action, $result);	return $result;}endif;if ( !function_exists('wp_redirect') ) :/** * Redirects to another page, with a workaround for the IIS Set-Cookie bug. * * @link http://support.microsoft.com/kb/q176113/ * @since 1.5.1 * @uses apply_filters() Calls 'wp_redirect' hook on $location and $status. * * @param string $location The path to redirect to * @param int $status Status code to use * @return bool False if $location is not set */function wp_redirect($location, $status = 302) {	global $is_IIS;	$location = apply_filters('wp_redirect', $location, $status);	$status = apply_filters('wp_redirect_status', $status, $location);	if ( !$location ) // allows the wp_redirect filter to cancel a redirect		return false;	$location = wp_sanitize_redirect($location);	if ( $is_IIS ) {		header("Refresh: 0;url=$location");	} else {		if ( php_sapi_name() != 'cgi-fcgi' )			status_header($status); // This causes problems on IIS and some FastCGI setups		header("Location: $location", true, $status);	}}endif;if ( !function_exists('wp_sanitize_redirect') ) :/** * Sanitizes a URL for use in a redirect. * * @since 2.3 * * @return string redirect-sanitized URL **/function wp_sanitize_redirect($location) {	$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!]|i', '', $location);	$location = wp_kses_no_null($location);	// remove %0d and %0a from location	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	return $location;}endif;if ( !function_exists('wp_safe_redirect') ) :/** * Performs a safe (local) redirect, using wp_redirect(). * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to wp-admin on the siteurl * instead. This prevents malicious redirects which redirect to another host, * but only used in a few places. * * @since 2.3 * @uses wp_validate_redirect() To validate the redirect is to an allowed host. * * @return void Does not return anything **/function wp_safe_redirect($location, $status = 302) {	// Need to look at the URL the way it will end up in wp_redirect()	$location = wp_sanitize_redirect($location);	$location = wp_validate_redirect($location, admin_url());	wp_redirect($location, $status);}endif;if ( !function_exists('wp_validate_redirect') ) :/** * Validates a URL for use in a redirect. * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to $default supplied * * @since 2.8.1 * @uses apply_filters() Calls 'allowed_redirect_hosts' on an array containing *		WordPress host string and $location host string. * * @param string $location The redirect to validate * @param string $default The value to return is $location is not allowed * @return string redirect-sanitized URL **/function wp_validate_redirect($location, $default = '') {	// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'	if ( substr($location, 0, 2) == '//' )		$location = 'http:' . $location;	// In php 5 parse_url may fail if the URL query part contains http://, bug #38143	$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;	$lp  = parse_url($test);	// Give up if malformed URL	if ( false === $lp )		return $default;	// Allow only http and https schemes. No data:, etc.	if ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )		return $default;	// Reject if scheme is set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.	if ( isset($lp['scheme'])  && !isset($lp['host']) )		return $default;	$wpp = parse_url(home_url());	$allowed_hosts = (array) apply_filters('allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '');	if ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )		$location = $default;	return $location;}endif;if ( ! function_exists('wp_notify_postauthor') ) :/** * Notify an author of a comment/trackback/pingback to one of their posts. * * @since 1.0.0 * * @param int $comment_id Comment ID * @param string $comment_type Optional. The comment type either 'comment' (default), 'trackback', or 'pingback' * @return bool False if user email does not exist. True on completion. */function wp_notify_postauthor($comment_id, $comment_type='') {	$comment = get_comment($comment_id);	$post    = get_post($comment->comment_post_ID);	$user    = get_userdata( $post->post_author );	if ( $comment->user_id == $post->post_author ) return false; // The author moderated a comment on his own post	if ('' == $user->user_email) return false; // If there's no email to send the comment to	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	if ( empty( $comment_type ) ) $comment_type = 'comment';	if ('comment' == $comment_type) {		$notify_message  = sprintf( __( 'New comment on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";		$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all comments on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Comment: "%2$s"'), $blogname, $post->post_title );	} elseif ('trackback' == $comment_type) {		$notify_message  = sprintf( __( 'New trackback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: website name, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all trackbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Trackback: "%2$s"'), $blogname, $post->post_title );	} elseif ('pingback' == $comment_type) {		$notify_message  = sprintf( __( 'New pingback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . sprintf('[...] %s [...]', $comment->comment_content ) . "\r\n\r\n";		$notify_message .= __('You can see all pingbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Pingback: "%2$s"'), $blogname, $post->post_title );	}	$notify_message .= get_permalink($comment->comment_post_ID) . "#comments\r\n\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$wp_email = 'wordpress@' . preg_replace('#^www\.#', '', strtolower($_SERVER['SERVER_NAME']));	if ( '' == $comment->comment_author ) {		$from = "From: \"$blogname\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: $comment->comment_author_email";	} else {		$from = "From: \"$comment->comment_author\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: \"$comment->comment_author_email\" <$comment->comment_author_email>";	}	$message_headers = "$from\n"		. "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	if ( isset($reply_to) )		$message_headers .= $reply_to . "\n";	$notify_message = apply_filters('comment_notification_text', $notify_message, $comment_id);	$subject = apply_filters('comment_notification_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_notification_headers', $message_headers, $comment_id);	@wp_mail($user->user_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_notify_moderator') ) :/** * Notifies the moderator of the blog about a new comment that is awaiting approval. * * @since 1.0 * @uses $wpdb * * @param int $comment_id Comment ID * @return bool Always returns true */function wp_notify_moderator($comment_id) {	global $wpdb;	if( get_option( "moderation_notify" ) == 0 )		return true;	$comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID=%d LIMIT 1", $comment_id));	$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID=%d LIMIT 1", $comment->comment_post_ID));	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	$comments_waiting = $wpdb->get_var("SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'");	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	switch ($comment->comment_type)	{		case 'trackback':			$notify_message  = sprintf( __('A new trackback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Trackback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		case 'pingback':			$notify_message  = sprintf( __('A new pingback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Pingback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		default: //Comments			$notify_message  = sprintf( __('A new comment on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";			$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;	}	$notify_message .= sprintf( __('Approve it: %s'),  admin_url("comment.php?action=approve&c=$comment_id") ) . "\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:', 		'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . "\r\n";	$notify_message .= admin_url("edit-comments.php?comment_status=moderated") . "\r\n";	$subject = sprintf( __('[%1$s] Please moderate: "%2$s"'), $blogname, $post->post_title );	$admin_email = get_option('admin_email');	$message_headers = '';	$notify_message = apply_filters('comment_moderation_text', $notify_message, $comment_id);	$subject = apply_filters('comment_moderation_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_moderation_headers', $message_headers);	@wp_mail($admin_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_password_change_notification') ) :/** * Notify the blog admin of a user changing password, normally via email. * * @since 2.7 * * @param object $user User Object */function wp_password_change_notification(&$user) {	// send a copy of password change notification to the admin	// but check to see if it's the admin whose password we're changing, and skip this	if ( $user->user_email != get_option('admin_email') ) {		$message = sprintf(__('Password Lost and Changed for user: %s'), $user->user_login) . "\r\n";		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);		wp_mail(get_option('admin_email'), sprintf(__('[%s] Password Lost/Changed'), $blogname), $message);	}}endif;if ( !function_exists('wp_new_user_notification') ) :/** * Notify the blog admin of a new user, normally via email. * * @since 2.0 * * @param int $user_id User ID * @param string $plaintext_pass Optional. The user's plaintext password */function wp_new_user_notification($user_id, $plaintext_pass = '') {	$user = new WP_User($user_id);	$user_login = stripslashes($user->user_login);	$user_email = stripslashes($user->user_email);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$message  = sprintf(__('New user registration on your site %s:'), $blogname) . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= sprintf(__('E-mail: %s'), $user_email) . "\r\n";	@wp_mail(get_option('admin_email'), sprintf(__('[%s] New User Registration'), $blogname), $message);	if ( empty($plaintext_pass) )		return;	$message  = sprintf(__('Username: %s'), $user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $plaintext_pass) . "\r\n";	$message .= wp_login_url() . "\r\n";	wp_mail($user_email, sprintf(__('[%s] Your username and password'), $blogname), $message);}endif;if ( !function_exists('wp_nonce_tick') ) :/** * Get the time-dependent variable for nonce creation. * * A nonce has a lifespan of two ticks. Nonces in their second tick may be * updated, e.g. by autosave. * * @since 2.5 * * @return int */function wp_nonce_tick() {	$nonce_life = apply_filters('nonce_life', 86400);	return ceil(time() / ( $nonce_life / 2 ));}endif;if ( !function_exists('wp_verify_nonce') ) :/** * Verify that correct nonce was used with time limit. * * The user is given an amount of time to use the token, so therefore, since the * UID and $action remain the same, the independent variable is the time. * * @since 2.0.3 * * @param string $nonce Nonce that was used in the form to verify * @param string|int $action Should give context to what is taking place and be the same when nonce was created. * @return bool Whether the nonce check passed or failed. */function wp_verify_nonce($nonce, $action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	// Nonce generated 0-12 hours ago	if ( substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 1;	// Nonce generated 12-24 hours ago	if ( substr(wp_hash(($i - 1) . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 2;	// Invalid nonce	return false;}endif;if ( !function_exists('wp_create_nonce') ) :/** * Creates a random, one time use token. * * @since 2.0.3 * * @param string|int $action Scalar value to add context to the nonce. * @return string The one use form token */function wp_create_nonce($action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	return substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10);}endif;if ( !function_exists('wp_salt') ) :/** * Get salt to add to hashes to help prevent attacks. * * The secret key is located in two places: the database in case the secret key * isn't defined in the second place, which is in the wp-config.php file. If you * are going to set the secret key, then you must do so in the wp-config.php * file. * * The secret key in the database is randomly generated and will be appended to * the secret key that is in wp-config.php file in some instances. It is * important to have the secret key defined or changed in wp-config.php. * * If you have installed WordPress 2.5 or later, then you will have the * SECRET_KEY defined in the wp-config.php already. You will want to change the * value in it because hackers will know what it is. If you have upgraded to * WordPress 2.5 or later version from a version before WordPress 2.5, then you * should add the constant to your wp-config.php file. * * Below is an example of how the SECRET_KEY constant is defined with a value. * You must not copy the below example and paste into your wp-config.php. If you * need an example, then you can have a * {@link https://api.wordpress.org/secret-key/1.1/ secret key created} for you. * * <code> * define('SECRET_KEY', 'mAry1HadA15|\/|b17w55w1t3asSn09w'); * </code> * * Salting passwords helps against tools which has stored hashed values of * common dictionary strings. The added values makes it harder to crack if given * salt string is not weak. * * @since 2.5 * @link https://api.wordpress.org/secret-key/1.1/ Create a Secret Key for wp-config.php * * @param string $scheme Authentication scheme * @return string Salt value */function wp_salt($scheme = 'auth') {	global $wp_default_secret_key;	$secret_key = '';	if ( defined('SECRET_KEY') && ('' != SECRET_KEY) && ( $wp_default_secret_key != SECRET_KEY) )		$secret_key = SECRET_KEY;	if ( 'auth' == $scheme ) {		if ( defined('AUTH_KEY') && ('' != AUTH_KEY) && ( $wp_default_secret_key != AUTH_KEY) )			$secret_key = AUTH_KEY;		if ( defined('AUTH_SALT') && ('' != AUTH_SALT) && ( $wp_default_secret_key != AUTH_SALT) ) {			$salt = AUTH_SALT;		} elseif ( defined('SECRET_SALT') && ('' != SECRET_SALT) && ( $wp_default_secret_key != SECRET_SALT) ) {			$salt = SECRET_SALT;		} else {			$salt = get_site_option('auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('auth_salt', $salt);			}		}	} elseif ( 'secure_auth' == $scheme ) {		if ( defined('SECURE_AUTH_KEY') && ('' != SECURE_AUTH_KEY) && ( $wp_default_secret_key != SECURE_AUTH_KEY) )			$secret_key = SECURE_AUTH_KEY;		if ( defined('SECURE_AUTH_SALT') && ('' != SECURE_AUTH_SALT) && ( $wp_default_secret_key != SECURE_AUTH_SALT) ) {			$salt = SECURE_AUTH_SALT;		} else {			$salt = get_site_option('secure_auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('secure_auth_salt', $salt);			}		}	} elseif ( 'logged_in' == $scheme ) {		if ( defined('LOGGED_IN_KEY') && ('' != LOGGED_IN_KEY) && ( $wp_default_secret_key != LOGGED_IN_KEY) )			$secret_key = LOGGED_IN_KEY;		if ( defined('LOGGED_IN_SALT') && ('' != LOGGED_IN_SALT) && ( $wp_default_secret_key != LOGGED_IN_SALT) ) {			$salt = LOGGED_IN_SALT;		} else {			$salt = get_site_option('logged_in_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('logged_in_salt', $salt);			}		}	} elseif ( 'nonce' == $scheme ) {		if ( defined('NONCE_KEY') && ('' != NONCE_KEY) && ( $wp_default_secret_key != NONCE_KEY) )			$secret_key = NONCE_KEY;		if ( defined('NONCE_SALT') && ('' != NONCE_SALT) && ( $wp_default_secret_key != NONCE_SALT) ) {			$salt = NONCE_SALT;		} else {			$salt = get_site_option('nonce_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('nonce_salt', $salt);			}		}	} else {		// ensure each auth scheme has its own unique salt		$salt = hash_hmac('md5', $scheme, $secret_key);	}	return apply_filters('salt', $secret_key . $salt, $scheme);}endif;if ( !function_exists('wp_hash') ) :/** * Get hash of given string. * * @since 2.0.3 * @uses wp_salt() Get WordPress salt * * @param string $data Plain text to hash * @return string Hash of $data */function wp_hash($data, $scheme = 'auth') {	$salt = wp_salt($scheme);	return hash_hmac('md5', $data, $salt);}endif;if ( !function_exists('wp_hash_password') ) :/** * Create a hash (encrypt) of a plain text password. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object * @uses PasswordHash::HashPassword * * @param string $password Plain text user password to hash * @return string The hash string of the password */function wp_hash_password($password) {	global $wp_hasher;	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	return $wp_hasher->HashPassword($password);}endif;if ( !function_exists('wp_check_password') ) :/** * Checks the plaintext password against the encrypted Password. * * Maintains compatibility between old version and the new cookie authentication * protocol using PHPass library. The $hash parameter is the encrypted password * and the function compares the plain text password when encypted similarly * against the already encrypted password to see if they match. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object used for checking the password *	against the $hash + $password * @uses PasswordHash::CheckPassword * * @param string $password Plaintext user's password * @param string $hash Hash of the user's password to check against. * @return bool False, if the $password does not match the hashed password */function wp_check_password($password, $hash, $user_id = '') {	global $wp_hasher;	// If the hash is still md5...	if ( strlen($hash) <= 32 ) {		$check = ( $hash == md5($password) );		if ( $check && $user_id ) {			// Rehash using new hash.			wp_set_password($password, $user_id);			$hash = wp_hash_password($password);		}		return apply_filters('check_password', $check, $password, $hash, $user_id);	}	// If the stored hash is longer than an MD5, presume the	// new style phpass portable hash.	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	$check = $wp_hasher->CheckPassword($password, $hash);	return apply_filters('check_password', $check, $password, $hash, $user_id);}endif;if ( !function_exists('wp_generate_password') ) :/** * Generates a random password drawn from the defined set of characters. * * @since 2.5 * * @param int $length The length of password to generate * @param bool $special_chars Whether to include standard special characters. Default true. * @param bool $extra_special_chars Whether to include other special characters. Used when *   generating secret keys and salts. Default false. * @return string The random password **/function wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';	if ( $special_chars )		$chars .= '!@#$%^&*()';	if ( $extra_special_chars )		$chars .= '-_ []{}<>~`+=,.;:/?|';	$password = '';	for ( $i = 0; $i < $length; $i++ ) {		$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);	}	// random_password filter was previously in random_password function which was deprecated	return apply_filters('random_password', $password);}endif;if ( !function_exists('wp_rand') ) : /** * Generates a random number * * @since 2.6.2 * * @param int $min Lower limit for the generated number (optional, default is 0) * @param int $max Upper limit for the generated number (optional, default is 4294967295) * @return int A random number between min and max */function wp_rand( $min = 0, $max = 0 ) {	global $rnd_value;	// Reset $rnd_value after 14 uses	// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value	if ( strlen($rnd_value) < 8 ) {		if ( defined( 'WP_SETUP_CONFIG' ) )			static $seed = '';		else			$seed = get_transient('random_seed');		$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );		$rnd_value .= sha1($rnd_value);		$rnd_value .= sha1($rnd_value . $seed);		$seed = md5($seed . $rnd_value);		if ( ! defined( 'WP_SETUP_CONFIG' ) )			set_transient('random_seed', $seed);	}	// Take the first 8 digits for our value	$value = substr($rnd_value, 0, 8);	// Strip the first eight, leaving the remainder for the next call to wp_rand().	$rnd_value = substr($rnd_value, 8);	$value = abs(hexdec($value));	// Reduce the value to be within the min - max range	// 4294967295 = 0xffffffff = max random number	if ( $max != 0 )		$value = $min + (($max - $min + 1) * ($value / (4294967295 + 1)));	return abs(intval($value));}endif;if ( !function_exists('wp_set_password') ) :/** * Updates the user's password with a new encrypted one. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @uses $wpdb WordPress database object for queries * @uses wp_hash_password() Used to encrypt the user's password before passing to the database * * @param string $password The plaintext new user password * @param int $user_id User ID */function wp_set_password( $password, $user_id ) {	global $wpdb;	$hash = wp_hash_password($password);	$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );	wp_cache_delete($user_id, 'users');}endif;if ( !function_exists( 'get_avatar' ) ) :/** * Retrieve the avatar for a user who provided a user ID or email address. * * @since 2.5 * @param int|string|object $id_or_email A user ID,  email address, or comment object * @param int $size Size of the avatar image * @param string $default URL to a default image to use if no avatar is available * @param string $alt Alternate text to use in image tag. Defaults to blank * @return string <img> tag for the user's avatar*/function get_avatar( $id_or_email, $size = '96', $default = '', $alt = false ) {	if ( ! get_option('show_avatars') )		return false;	if ( false === $alt)		$safe_alt = '';	else		$safe_alt = esc_attr( $alt );	if ( !is_numeric($size) )		$size = '96';	$email = '';	if ( is_numeric($id_or_email) ) {		$id = (int) $id_or_email;		$user = get_userdata($id);		if ( $user )			$email = $user->user_email;	} elseif ( is_object($id_or_email) ) {		// No avatar for pingbacks or trackbacks		$allowed_comment_types = apply_filters( 'get_avatar_comment_types', array( 'comment' ) );		if ( ! empty( $id_or_email->comment_type ) && ! in_array( $id_or_email->comment_type, (array) $allowed_comment_types ) )			return false;		if ( !empty($id_or_email->user_id) ) {			$id = (int) $id_or_email->user_id;			$user = get_userdata($id);			if ( $user)				$email = $user->user_email;		} elseif ( !empty($id_or_email->comment_author_email) ) {			$email = $id_or_email->comment_author_email;		}	} else {		$email = $id_or_email;	}	if ( empty($default) ) {		$avatar_default = get_option('avatar_default');		if ( empty($avatar_default) )			$default = 'mystery';		else			$default = $avatar_default;	}	if ( !empty($email) )		$email_hash = md5( strtolower( $email ) );	if ( is_ssl() ) {		$host = 'https://secure.gravatar.com';	} else {		if ( !empty($email) )			$host = sprintf( "http://%d.gravatar.com", ( hexdec( $email_hash{0} ) % 2 ) );		else			$host = 'http://0.gravatar.com';	}	if ( 'mystery' == $default )		$default = "$host/avatar/ad516503a11cd5ca435acc9bb6523536?s={$size}"; // ad516503a11cd5ca435acc9bb6523536 == md5('unknown@gravatar.com')	elseif ( 'blank' == $default )		$default = includes_url('images/blank.gif');	elseif ( !empty($email) && 'gravatar_default' == $default )		$default = '';	elseif ( 'gravatar_default' == $default )		$default = "$host/avatar/s={$size}";	elseif ( empty($email) )		$default = "$host/avatar/?d=$default&amp;s={$size}";	elseif ( strpos($default, 'http://') === 0 )		$default = add_query_arg( 's', $size, $default );	if ( !empty($email) ) {		$out = "$host/avatar/";		$out .= $email_hash;		$out .= '?s='.$size;		$out .= '&amp;d=' . urlencode( $default );		$rating = get_option('avatar_rating');		if ( !empty( $rating ) )			$out .= "&amp;r={$rating}";		$avatar = "<img alt='{$safe_alt}' src='{$out}' class='avatar avatar-{$size} photo' height='{$size}' width='{$size}' />";	} else {		$avatar = "<img alt='{$safe_alt}' src='{$default}' class='avatar avatar-{$size} photo avatar-default' height='{$size}' width='{$size}' />";	}	return apply_filters('get_avatar', $avatar, $id_or_email, $size, $default, $alt);}endif;if ( !function_exists( 'wp_text_diff' ) ) :/** * Displays a human readable HTML representation of the difference between two strings. * * The Diff is available for getting the changes between versions. The output is * HTML, so the primary use is for displaying the changes. If the two strings * are equivalent, then an empty string will be returned. * * The arguments supported and can be changed are listed below. * * 'title' : Default is an empty string. Titles the diff in a manner compatible *		with the output. * 'title_left' : Default is an empty string. Change the HTML to the left of the *		title. * 'title_right' : Default is an empty string. Change the HTML to the right of *		the title. * * @since 2.6 * @see wp_parse_args() Used to change defaults to user defined settings. * @uses Text_Diff * @uses WP_Text_Diff_Renderer_Table * * @param string $left_string "old" (left) version of string * @param string $right_string "new" (right) version of string * @param string|array $args Optional. Change 'title', 'title_left', and 'title_right' defaults. * @return string Empty string if strings are equivalent or HTML with differences. */function wp_text_diff( $left_string, $right_string, $args = null ) {	$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );	$args = wp_parse_args( $args, $defaults );	if ( !class_exists( 'WP_Text_Diff_Renderer_Table' ) )		require( ABSPATH . WPINC . '/wp-diff.php' );	$left_string  = normalize_whitespace($left_string);	$right_string = normalize_whitespace($right_string);	$left_lines  = split("\n", $left_string);	$right_lines = split("\n", $right_string);	$text_diff = new Text_Diff($left_lines, $right_lines);	$renderer  = new WP_Text_Diff_Renderer_Table();	$diff = $renderer->render($text_diff);	if ( !$diff )		return '';	$r  = "<table class='diff'>\n";	$r .= "<col class='ltype' /><col class='content' /><col class='ltype' /><col class='content' />";	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "<thead>";	if ( $args['title'] )		$r .= "<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\n";	if ( $args['title_left'] || $args['title_right'] ) {		$r .= "<tr class='diff-sub-title'>\n";		$r .= "\t<td></td><th>$args[title_left]</th>\n";		$r .= "\t<td></td><th>$args[title_right]</th>\n";		$r .= "</tr>\n";	}	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "</thead>\n";	$r .= "<tbody>\n$diff\n</tbody>\n";	$r .= "</table>";	return $r;}endif;
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
<?php/** * Navigation Menu template functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Create HTML list of nav menu items. * * @package WordPress * @since 3.0.0 * @uses Walker */class Walker_Nav_Menu extends Walker {	/**	 * @see Walker::$tree_type	 * @since 3.0.0	 * @var string	 */	var $tree_type = array( 'post_type', 'taxonomy', 'custom' );	/**	 * @see Walker::$db_fields	 * @since 3.0.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array( 'parent' => 'menu_item_parent', 'id' => 'db_id' );	/**	 * @see Walker::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class=\"sub-menu\">\n";	}	/**	 * @see Walker::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $wp_query;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$class_names = $value = '';		$classes = empty( $item->classes ) ? array() : (array) $item->classes;		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item ) );		$class_names = ' class="' . esc_attr( $class_names ) . '"';		$output .= $indent . '<li id="menu-item-'. $item->ID . '"' . $value . $class_names .'>';		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';		$attributes .= ! empty( $item->target )     ? ' target="' . esc_attr( $item->target     ) .'"' : '';		$attributes .= ! empty( $item->xfn )        ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';		$attributes .= ! empty( $item->url )        ? ' href="'   . esc_attr( $item->url        ) .'"' : '';		$item_output = $args->before;		$item_output .= '<a'. $attributes .'>';		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;		$item_output .= '</a>';		$item_output .= $args->after;		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );	}	/**	 * @see Walker::end_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $item, $depth) {		$output .= "</li>\n";	}}/** * Displays a navigation menu. * * Optional $args contents: * * menu - The menu that is desired.  Accepts (matching in order) id, slug, name. Defaults to blank. * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'. * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented. * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'. * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'. * container_id - The ID that is applied to the container. Defaults to blank. * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'. * before - Text before the link text. * after - Text after the link text. * link_before - Text before the link. * link_after - Text after the link. * echo - Whether to echo the menu or return it. Defaults to echo. * depth - how many levels of the hierarchy are to be included.  0 means all.  Defaults to 0. * walker - allows a custom walker to be specified. * theme_location - the location in the theme to be used.  Must be registered with register_nav_menu() in order to be selectable by the user. * * @since 3.0.0 * * @param array $args Arguments */function wp_nav_menu( $args = array() ) {	static $menu_id_slugs = array();	$defaults = array( 'menu' => '', 'container' => 'div', 'container_class' => '', 'container_id' => '', 'menu_class' => 'menu', 'menu_id' => '',	'echo' => true, 'fallback_cb' => 'wp_page_menu', 'before' => '', 'after' => '', 'link_before' => '', 'link_after' => '',	'depth' => 0, 'walker' => '', 'theme_location' => '' );	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_nav_menu_args', $args );	$args = (object) $args;	// Get the nav menu based on the requested menu	$menu = wp_get_nav_menu_object( $args->menu );	// Get the nav menu based on the theme_location	if ( ! $menu && $args->theme_location && ( $locations = get_nav_menu_locations() ) && isset( $locations[ $args->theme_location ] ) )		$menu = wp_get_nav_menu_object( $locations[ $args->theme_location ] );	// get the first menu that has items if we still can't find a menu	if ( ! $menu && !$args->theme_location ) {		$menus = wp_get_nav_menus();		foreach ( $menus as $menu_maybe ) {			if ( $menu_items = wp_get_nav_menu_items($menu_maybe->term_id) ) {				$menu = $menu_maybe;				break;			}		}	}	// If the menu exists, get its items.	if ( $menu && ! is_wp_error($menu) && !isset($menu_items) )		$menu_items = wp_get_nav_menu_items( $menu->term_id );	// If no menu was found or if the menu has no items and no location was requested, call the fallback_cb if it exists	if ( ( !$menu || is_wp_error($menu) || ( isset($menu_items) && empty($menu_items) && !$args->theme_location ) )		&& ( function_exists($args->fallback_cb) || is_callable( $args->fallback_cb ) ) )			return call_user_func( $args->fallback_cb, (array) $args );	// If no fallback function was specified and the menu doesn't exists, bail.	if ( !$menu || is_wp_error($menu) )		return false;	$nav_menu = $items = '';	$show_container = false;	if ( $args->container ) {		$allowed_tags = apply_filters( 'wp_nav_menu_container_allowedtags', array( 'div', 'nav' ) );		if ( in_array( $args->container, $allowed_tags ) ) {			$show_container = true;			$class = $args->container_class ? ' class="' . esc_attr( $args->container_class ) . '"' : ' class="menu-'. $menu->slug .'-container"';			$id = $args->container_id ? ' id="' . esc_attr( $args->container_id ) . '"' : '';			$nav_menu .= '<'. $args->container . $id . $class . '>';		}	}	// Set up the $menu_item variables	_wp_menu_item_classes_by_context( $menu_items );	$sorted_menu_items = array();	foreach ( (array) $menu_items as $key => $menu_item )		$sorted_menu_items[$menu_item->menu_order] = $menu_item;	unset($menu_items);	$items .= walk_nav_menu_tree( $sorted_menu_items, $args->depth, $args );	unset($sorted_menu_items);	// Attributes	if ( ! empty( $args->menu_id ) ) {		$slug = $args->menu_id;	} else {		$slug = 'menu-' . $menu->slug;		while ( in_array( $slug, $menu_id_slugs ) ) {			if ( preg_match( '#-(\d+)$#', $slug, $matches ) )				$slug = preg_replace('#-(\d+)$#', '-' . ++$matches[1], $slug);			else				$slug = $slug . '-1';		}	}	$menu_id_slugs[] = $slug;	$attributes = ' id="' . $slug . '"';	$attributes .= $args->menu_class ? ' class="'. $args->menu_class .'"' : '';	$nav_menu .= '<ul'. $attributes .'>';	// Allow plugins to hook into the menu to add their own <li>'s	$items = apply_filters( 'wp_nav_menu_items', $items, $args );	$items = apply_filters( "wp_nav_menu_{$menu->slug}_items", $items, $args );	$nav_menu .= $items;	unset($items);	$nav_menu .= '</ul>';	if ( $show_container )		$nav_menu .= '</' . $args->container . '>';	$nav_menu = apply_filters( 'wp_nav_menu', $nav_menu, $args );	if ( $args->echo )		echo $nav_menu;	else		return $nav_menu;}/** * Add the class property classes for the current context, if applicable. * * @access private * @since 3.0 * * @param array $menu_items The current menu item objects to which to add the class property information. */function _wp_menu_item_classes_by_context( &$menu_items ) {	global $wp_query;	$queried_object = $wp_query->get_queried_object();	$queried_object_id = (int) $wp_query->queried_object_id;	$active_object = '';	$active_ancestor_item_ids = array();	$active_parent_item_ids = array();	$active_parent_object_ids = array();	$possible_taxonomy_ancestors = array();	$possible_object_parents = array();	$home_page_id = (int) get_option( 'page_for_posts' );	if ( $wp_query->is_singular && ! empty( $queried_object->post_type ) && ! is_post_type_hierarchical( $queried_object->post_type ) ) {		foreach ( (array) get_object_taxonomies( $queried_object->post_type ) as $taxonomy ) {			if ( is_taxonomy_hierarchical( $taxonomy ) ) {				$term_hierarchy = _get_term_hierarchy( $taxonomy );				$terms = wp_get_object_terms( $queried_object_id, $taxonomy, array( 'fields' => 'ids' ) );				if ( is_array( $terms ) ) {					$possible_object_parents = array_merge( $possible_object_parents, $terms );					$term_to_ancestor = array();					foreach ( (array) $term_hierarchy as $anc => $descs ) {						foreach ( (array) $descs as $desc )							$term_to_ancestor[ $desc ] = $anc;					}					foreach ( $terms as $desc ) {						do {							$possible_taxonomy_ancestors[ $taxonomy ][] = $desc;							if ( isset( $term_to_ancestor[ $desc ] ) ) {								$_desc = $term_to_ancestor[ $desc ];								unset( $term_to_ancestor[ $desc ] );								$desc = $_desc;							} else {								$desc = 0;							}						} while ( ! empty( $desc ) );					}				}			}		}	} elseif ( ! empty( $queried_object->post_type ) && is_post_type_hierarchical( $queried_object->post_type ) ) {		_get_post_ancestors( $queried_object );	} elseif ( ! empty( $queried_object->taxonomy ) && is_taxonomy_hierarchical( $queried_object->taxonomy ) ) {		$term_hierarchy = _get_term_hierarchy( $queried_object->taxonomy );		$term_to_ancestor = array();		foreach ( (array) $term_hierarchy as $anc => $descs ) {			foreach ( (array) $descs as $desc )				$term_to_ancestor[ $desc ] = $anc;		}		$desc = $queried_object->term_id;		do {			$possible_taxonomy_ancestors[ $queried_object->taxonomy ][] = $desc;			if ( isset( $term_to_ancestor[ $desc ] ) ) {				$_desc = $term_to_ancestor[ $desc ];				unset( $term_to_ancestor[ $desc ] );				$desc = $_desc;			} else {				$desc = 0;			}		} while ( ! empty( $desc ) );	}	$possible_object_parents = array_filter( $possible_object_parents );	foreach ( (array) $menu_items as $key => $menu_item ) {		$classes = (array) $menu_item->classes;		$classes[] = 'menu-item';		$classes[] = 'menu-item-type-' . $menu_item->type;		// if the menu item corresponds to a taxonomy term for the currently-queried non-hierarchical post object		if ( $wp_query->is_singular && 'taxonomy' == $menu_item->type && in_array( $menu_item->object_id, $possible_object_parents ) ) {			$active_parent_object_ids[] = (int) $menu_item->object_id;			$active_parent_item_ids[] = (int) $menu_item->db_id;			$active_object = $queried_object->post_type;		// if the menu item corresponds to the currently-queried post or taxonomy object		} elseif (			$menu_item->object_id == $queried_object_id &&			(				( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && $wp_query->is_home && $home_page_id == $menu_item->object_id ) ||				( 'post_type' == $menu_item->type && $wp_query->is_singular ) ||				( 'taxonomy' == $menu_item->type && ( $wp_query->is_category || $wp_query->is_tag || $wp_query->is_tax ) )			)		) {			$classes[] = 'current-menu-item';			$_anc_id = (int) $menu_item->db_id;			while(				( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&				! in_array( $_anc_id, $active_ancestor_item_ids )			) {				$active_ancestor_item_ids[] = $_anc_id;			}			if ( 'post_type' == $menu_item->type && 'page' == $menu_item->object ) {				// Back compat classes for pages to match wp_page_menu()				$classes[] = 'page_item';				$classes[] = 'page-item-' . $menu_item->object_id;				$classes[] = 'current_page_item';			}			$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;			$active_parent_object_ids[] = (int) $menu_item->post_parent;			$active_object = $menu_item->object;		// if the menu item corresponds to the currently-requested URL		} elseif ( 'custom' == $menu_item->object ) {			$current_url = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];			$item_url = strpos( $menu_item->url, '#' ) ? substr( $menu_item->url, 0, strpos( $menu_item->url, '#' ) ) : $menu_item->url;			if ( $item_url == $current_url ) {				$classes[] = 'current-menu-item';				$_anc_id = (int) $menu_item->db_id;				while(					( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&					! in_array( $_anc_id, $active_ancestor_item_ids )				) {					$active_ancestor_item_ids[] = $_anc_id;				}				if ( untrailingslashit($current_url) == home_url() ) {					$classes[] = 'menu-item-home';					// Back compat for home limk to match wp_page_menu()					$classes[] = 'current_page_item';				}				$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;				$active_parent_object_ids[] = (int) $menu_item->post_parent;				$active_object = $menu_item->object;			}		}		// back-compat with wp_page_menu: add "current_page_parent" to static home page link for any non-page query		if ( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && empty( $wp_query->is_page ) && $home_page_id == $menu_item->object_id )			$classes[] = 'current_page_parent';		$menu_items[$key]->classes = array_unique( $classes );	}	$active_ancestor_item_ids = array_filter( array_unique( $active_ancestor_item_ids ) );	$active_parent_item_ids = array_filter( array_unique( $active_parent_item_ids ) );	$active_parent_object_ids = array_filter( array_unique( $active_parent_object_ids ) );	// set parent's class	foreach ( (array) $menu_items as $key => $parent_item ) {		$classes = (array) $parent_item->classes;		if (			isset( $parent_item->type ) &&			(				// ancestral post object				(					'post_type' == $parent_item->type &&					! empty( $queried_object->post_type ) &&					is_post_type_hierarchical( $queried_object->post_type ) &&					in_array( $parent_item->object_id, $queried_object->ancestors )				) ||				// ancestral term				(					'taxonomy' == $parent_item->type &&					isset( $possible_taxonomy_ancestors[ $parent_item->object ] ) &&					in_array( $parent_item->object_id, $possible_taxonomy_ancestors[ $parent_item->object ] )				)			)		) {			$classes[] = empty( $queried_object->taxonomy ) ? 'current-' . $queried_object->post_type . '-ancestor' : 'current-' . $queried_object->taxonomy . '-ancestor';		}		if ( in_array(  intval( $parent_item->db_id ), $active_ancestor_item_ids ) ) {			$classes[] = 'current-menu-ancestor';		}		if ( in_array( $parent_item->db_id, $active_parent_item_ids ) )			$classes[] = 'current-menu-parent';		if ( in_array( $parent_item->object_id, $active_parent_object_ids ) )			$classes[] = 'current-' . $active_object . '-parent';		if ( 'post_type' == $parent_item->type && 'page' == $parent_item->object ) {			// Back compat classes for pages to match wp_page_menu()			if ( in_array('current-menu-parent', $classes) )				$classes[] = 'current_page_parent';			if ( in_array('current-menu-ancestor', $classes) )				$classes[] = 'current_page_ancestor';		}		$menu_items[$key]->classes = array_unique( $classes );	}}/** * Retrieve the HTML list content for nav menu items. * * @uses Walker_Nav_Menu to create HTML list content. * @since 2.1.0 * @see Walker::walk() for parameters and return description. */function walk_nav_menu_tree( $items, $depth, $r ) {	$walker = ( empty($r->walker) ) ? new Walker_Nav_Menu : $r->walker;	$args = array( $items, $depth, $r );	return call_user_func_array( array(&$walker, 'walk'), $args );}?>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress enqueued dependiences class. * * @package BackPress * @uses _WP_Dependency * @since r74 */class WP_Dependencies {	var $registered = array();	var $queue = array();	var $to_do = array();	var $done = array();	var $args = array();	var $groups = array();	var $group = 0;	function WP_Dependencies() {		$args = func_get_args();		call_user_func_array( array(&$this, '__construct'), $args );	}	function __construct() {}	/**	 * Do the dependencies	 *	 * Process the items passed to it or the queue.  Processes all dependencies.	 *	 * @param mixed handles (optional) items to be processed.  (void) processes queue, (string) process that item, (array of strings) process those items	 * @return array Items that have been processed	 */	function do_items( $handles = false, $group = false ) {		// Print the queue if nothing is passed.  If a string is passed, print that script.  If an array is passed, print those scripts.		$handles = false === $handles ? $this->queue : (array) $handles;		$this->all_deps( $handles );		foreach( $this->to_do as $key => $handle ) {			if ( !in_array($handle, $this->done) && isset($this->registered[$handle]) ) {				if ( ! $this->registered[$handle]->src ) { // Defines a group.					$this->done[] = $handle;					continue;				}				if ( $this->do_item( $handle, $group ) )					$this->done[] = $handle;				unset( $this->to_do[$key] );			}		}		return $this->done;	}	function do_item( $handle ) {		return isset($this->registered[$handle]);	}	/**	 * Determines dependencies	 *	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.	 *	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names	 * @param bool recursion Used internally when function calls itself	 */	function all_deps( $handles, $recursion = false, $group = false ) {		if ( !$handles = (array) $handles )			return false;		foreach ( $handles as $handle ) {			$handle_parts = explode('?', $handle);			$handle = $handle_parts[0];			$queued = in_array($handle, $this->to_do, true);			if ( in_array($handle, $this->done, true) ) // Already done				continue;			$moved = $this->set_group( $handle, $recursion, $group );			if ( $queued && !$moved ) // already queued and in the right group				continue;			$keep_going = true;			if ( !isset($this->registered[$handle]) )				$keep_going = false; // Script doesn't exist			elseif ( $this->registered[$handle]->deps && array_diff($this->registered[$handle]->deps, array_keys($this->registered)) )				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)			elseif ( $this->registered[$handle]->deps && !$this->all_deps( $this->registered[$handle]->deps, true, $group ) )				$keep_going = false; // Script requires deps which don't exist			if ( !$keep_going ) { // Either script or its deps don't exist.				if ( $recursion )					return false; // Abort this branch.				else					continue; // We're at the top level.  Move on to the next one.			}			if ( $queued ) // Already grobbed it and its deps				continue;			if ( isset($handle_parts[1]) )				$this->args[$handle] = $handle_parts[1];			$this->to_do[] = $handle;		}		return true;	}	/**	 * Adds item	 *	 * Adds the item only if no item of that name already exists	 *	 * @param string handle Script name	 * @param string src Script url	 * @param array deps (optional) Array of script names on which this script depends	 * @param string ver (optional) Script version (used for cache busting)	 * @return array Hierarchical array of dependencies	 */	function add( $handle, $src, $deps = array(), $ver = false, $args = null ) {		if ( isset($this->registered[$handle]) )			return false;		$this->registered[$handle] = new _WP_Dependency( $handle, $src, $deps, $ver, $args );		return true;	}	/**	 * Adds extra data	 *	 * Adds data only if script has already been added	 *	 * @param string handle Script name	 * @param string data_name Name of object in which to store extra data	 * @param array data Array of extra data	 * @return bool success	 */	function add_data( $handle, $data_name, $data ) {		if ( !isset($this->registered[$handle]) )			return false;		return $this->registered[$handle]->add_data( $data_name, $data );	}	function remove( $handles ) {		foreach ( (array) $handles as $handle )			unset($this->registered[$handle]);	}	function enqueue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			if ( !in_array($handle[0], $this->queue) && isset($this->registered[$handle[0]]) ) {				$this->queue[] = $handle[0];				if ( isset($handle[1]) )					$this->args[$handle[0]] = $handle[1];			}		}	}	function dequeue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			$key = array_search($handle[0], $this->queue);			if ( false !== $key ) {				unset($this->queue[$key]);				unset($this->args[$handle[0]]);			}		}	}	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do		switch ( $list ) :		case 'registered':		case 'scripts': // back compat			if ( isset($this->registered[$handle]) )				return $this->registered[$handle];			break;		case 'to_print': // back compat		case 'printed': // back compat			if ( 'to_print' == $list )				$list = 'to_do';			else				$list = 'printed';		default:			if ( in_array($handle, $this->$list) )				return true;			break;		endswitch;		return false;	}	function set_group( $handle, $recursion, $group ) {		$group = (int) $group;		if ( $recursion )			$group = min($this->group, $group);		else			$this->group = $group;		if ( isset($this->groups[$handle]) && $this->groups[$handle] <= $group )			return false;		$this->groups[$handle] = $group;		return true;	}}class _WP_Dependency {	var $handle;	var $src;	var $deps = array();	var $ver = false;	var $args = null;	var $extra = array();	function _WP_Dependency() {		@list($this->handle, $this->src, $this->deps, $this->ver, $this->args) = func_get_args();		if ( !is_array($this->deps) )			$this->deps = array();	}	function add_data( $name, $data ) {		if ( !is_scalar($name) )			return false;		$this->extra[$name] = $data;		return true;	}}
<?php/** * Edit link category form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( !current_user_can('manage_categories') )	wp_die(__('You do not have sufficient permissions to edit link categories for this site.'));/** * @var object */if ( ! isset( $category ) )	$category = (object) array();if ( ! empty($cat_ID) ) {	/**	 * @var string	 */	$heading = '<h2>' . __('Edit Link Category') . '</h2>';	$submit_text = __('Update Category');	$form = '<form name="editcat" id="editcat" method="post" action="link-category.php" class="validate">';	$action = 'editedcat';	$nonce_action = 'update-link-category_' . $cat_ID;	do_action('edit_link_category_form_pre', $category);} else {	$heading = '<h2>' . __('Add Link Category') . '</h2>';	$submit_text = __('Add Category');	$form = '<form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php">';	$action = 'addcat';	$nonce_action = 'add-link-category';	do_action('add_link_category_form_pre', $category);}/** * @ignore * @since 2.7 * @internal Used to prevent errors in page when no category is being edited. * * @param object $category */function _fill_empty_link_category(&$category) {	if ( ! isset( $category->name ) )		$category->name = '';	if ( ! isset( $category->slug ) )		$category->slug = '';	if ( ! isset( $category->description ) )		$category->description = '';}_fill_empty_link_category($category);?><div class="wrap"><?php screen_icon(); ?><?php echo $heading ?><div id="ajax-response"></div><?php echo $form ?><input type="hidden" name="action" value="<?php echo esc_attr($action) ?>" /><input type="hidden" name="cat_ID" value="<?php echo esc_attr($category->term_id) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field($nonce_action); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _e('Link Category name') ?></label></th>			<td><input name="name" id="name" type="text" value="<?php echo esc_attr($category->name); ?>" size="40" aria-required="true" /></td>		</tr><?php if ( !is_multisite() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _e('Link Category slug') ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php echo esc_attr(apply_filters('editable_slug', $category->slug)); ?>" size="40" /><br />            <?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></td>		</tr><?php } ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _e('Description (optional)') ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo $category->description; ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></span></td>		</tr>		<?php do_action('edit_link_category_form_fields', $category); ?>	</table><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr($submit_text) ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div>
<?php/** * The template for displaying Category Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );				?></h1>				<?php					$category_description = category_description();					if ( ! empty( $category_description ) )						echo '<div class="archive-meta">' . $category_description . '</div>';				/* Run the loop for the category page to output the posts.				 * If you want to overload this in a child theme then include a file				 * called loop-category.php and that will be used instead.				 */				get_template_part( 'loop', 'category' );				?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Multisite network settings administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_options' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Options' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen sets and changes options for the network as a whole. The first site is the main site in the network and network options are pulled from that original site&#8217;s options.') . '</p>' .	'<p>' . __('Operational settings has fields for the network&#8217;s name and admin email.') . '</p>' .	'<p>' . __('Dashboard Site is an option to give a site to users who do not have a site on the system. Their default role is Subscriber, but that default can be changed. The Admin Notice Feed can provide a notice on all dashboards of the latest post via RSS or Atom, or provide no such notice if left blank.') . '</p>' .	'<p>' . __('Registration settings can disable/enable public signups. If you let others sign up for a site, install spam plugins. Spaces, not commas, should separate names banned as sites for this network.') . '</p>' .	'<p>' . __('New site settings are defaults applied when a new site is created in the network. These include welcome email for when a new site or user account is registered, and what&#8127;s put in the first post, page, comment, comment author, and comment URL.') . '</p>' .	'<p>' . __('Upload settings control the size of the uploaded files and the amount of available upload space for each site. You can change the default value for specific sites when you edit a particular site. Allowed file types are also listed (space separated only).') . '</p>' .	'<p>' . __('Checkboxes for media upload buttons set which are shown in the visual editor. If unchecked, a generic upload button is still visible; other media types can still be uploaded if on the allowed file types list.') . '</p>' .	'<p>' . __('Menu setting enables/disables the plugin menus from appearing for non super admins, so that only super admins, not site admins, have access to activate plugins.') . '</p>' .	'<p>' . __('Super admins can no longer be added on the Options screen. You must now go to the list of existing users on Super Admin > Users and click on Username or the Edit action link below that name. This goes to an Edit User page where you can check a box to grant super admin privileges.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Options_SubPanel" target="_blank">Network Options Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );if (isset($_GET['updated'])) {	?>	<div id="message" class="updated"><p><?php _e( 'Options saved.' ) ?></p></div>	<?php}?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e( 'Network Options' ) ?></h2>	<form method="post" action="ms-edit.php?action=siteoptions">		<?php wp_nonce_field( 'siteoptions' ); ?>		<h3><?php _e( 'Operational Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="site_name"><?php _e( 'Network Name' ) ?></label></th>				<td>					<input name="site_name" type="text" id="site_name" class="regular-text" value="<?php echo esc_attr( $current_site->site_name ) ?>" />					<br />					<?php _e( 'What you would like to call this website.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_email"><?php _e( 'Network Admin Email' ) ?></label></th>				<td>					<input name="admin_email" type="text" id="admin_email" class="regular-text" value="<?php echo esc_attr( get_site_option('admin_email') ) ?>" />					<br />					<?php printf( __( 'Registration and support emails will come from this address. An address such as <code>support@%s</code> is recommended.' ), $current_site->domain ); ?>				</td>			</tr>		</table>		<h3><?php _e( 'Dashboard Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="dashboard_blog"><?php _e( 'Dashboard Site' ) ?></label></th>				<td>					<?php					if ( $dashboard_blog = get_site_option( 'dashboard_blog' ) ) {						$details = get_blog_details( $dashboard_blog );						$blogname = untrailingslashit( sanitize_user( str_replace( '.', '', str_replace( $current_site->domain . $current_site->path, '', $details->domain . $details->path ) ) ) );					} else {						$blogname = '';					}?>					<input name="dashboard_blog_orig" type="hidden" id="dashboard_blog_orig" value="<?php echo esc_attr( $blogname ); ?>" />					<input name="dashboard_blog" type="text" id="dashboard_blog" value="<?php echo esc_attr( $blogname ); ?>" class="regular-text" />					<br />					<?php _e( 'Site path (&#8220;dashboard&#8221;, &#8220;control&#8221;, &#8220;manager&#8221;, etc.) or blog ID.<br />New users are added to this site as the user role defined below if they don&#8217;t have a site. Leave blank for the main site. Users with the Subscriber role on the old site will be moved to the new site if changed. The new site will be created if it does not exist.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="default_user_role"><?php _e( 'Dashboard User Default Role' ) ?></label></th>				<td>					<select name="default_user_role" id="default_user_role"><?php					wp_dropdown_roles( get_site_option( 'default_user_role', 'subscriber' ) );					?>					</select>					<br />					<?php _e( 'The default role for new users on the Dashboard site. &#8220;Subscriber&#8221; or &#8220;Contributor&#8221; roles are recommended.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_notice_feed"><?php _e( 'Admin Notice Feed' ) ?></label></th>				<td><input name="admin_notice_feed" class="large-text" type="text" id="admin_notice_feed" value="<?php echo esc_attr( get_site_option( 'admin_notice_feed' ) ) ?>" size="80" /><br />				<?php _e( 'Display the latest post from this RSS or Atom feed on all site dashboards. Leave blank to disable.' ); ?><br />				<?php if ( get_site_option( 'admin_notice_feed' ) != get_home_url( $current_site->id, 'feed/' ) )					echo __( 'A good one to use would be the feed from your main site: ' ) . esc_url( get_home_url( $current_site->id, 'feed/' ) ) ?></td>			</tr>		</table>		<h3><?php _e( 'Registration Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Allow new registrations' ) ?></th>				<?php				if ( !get_site_option( 'registration' ) )					update_site_option( 'registration', 'none' );				$reg = get_site_option( 'registration' );				?>				<td>					<label><input name="registration" type="radio" id="registration1" value="none"<?php checked( $reg, 'none') ?> /> <?php _e( 'Registration is disabled.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration2" value="user"<?php checked( $reg, 'user') ?> /> <?php _e( 'User accounts may be registered.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration3" value="blog"<?php checked( $reg, 'blog') ?> /> <?php _e( 'Logged in users may register new sites.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration4" value="all"<?php checked( $reg, 'all') ?> /> <?php _e( 'Both sites and user accounts can be registered.' ); ?></label><br />					<p><?php _e( 'Disable or enable registration and who or what can be registered. (Default is disabled.)' ); ?></p>					<?php if ( is_subdomain_install() ) {						echo '<p>' . __( 'If registration is disabled, please set <code>NOBLOGREDIRECT</code> in <code>wp-config.php</code> to a URL you will redirect visitors to if they visit a non-existent site.' ) . '</p>';					} ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Registration notification' ) ?></th>				<?php				if ( !get_site_option( 'registrationnotification' ) )					update_site_option( 'registrationnotification', 'yes' );				?>				<td>					<label><input name="registrationnotification" type="checkbox" id="registrationnotification" value="yes"<?php checked( get_site_option( 'registrationnotification' ), 'yes' ) ?> /> <?php _e( 'Send the network admin an email notification every time someone registers a site or user account.' ) ?></label>				</td>			</tr>			<tr valign="top" id="addnewusers">				<th scope="row"><?php _e( 'Add New Users' ) ?></th>				<td>					<label><input name="add_new_users" type="checkbox" id="add_new_users" value="1"<?php checked( get_site_option( 'add_new_users' ) ) ?> /> <?php _e( 'Allow site administrators to add new users to their site via the "Users->Add New" page.' ); ?></label>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="illegal_names"><?php _e( 'Banned Names' ) ?></label></th>				<td>					<input name="illegal_names" type="text" id="illegal_names" class="large-text" value="<?php echo esc_attr( implode( " ", get_site_option( 'illegal_names' ) ) ); ?>" size="45" />					<br />					<?php _e( 'Users are not allowed to register these sites. Separate names by spaces.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="limited_email_domains"><?php _e( 'Limited Email Registrations' ) ?></label></th>				<td>					<?php $limited_email_domains = get_site_option( 'limited_email_domains' );					$limited_email_domains = str_replace( ' ', "\n", $limited_email_domains ); ?>					<textarea name="limited_email_domains" id="limited_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( $limited_email_domains == '' ? '' : implode( "\n", (array) $limited_email_domains ) ); ?></textarea>					<br />					<?php _e( 'If you want to limit site registrations to certain domains. One domain per line.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="banned_email_domains"><?php _e('Banned Email Domains') ?></label></th>				<td>					<textarea name="banned_email_domains" id="banned_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( get_site_option( 'banned_email_domains' ) == '' ? '' : implode( "\n", (array) get_site_option( 'banned_email_domains' ) ) ); ?></textarea>					<br />					<?php _e( 'If you want to ban domains from site registrations. One domain per line.' ) ?>				</td>			</tr>		</table>		<h3><?php _e('New Site Settings'); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="welcome_email"><?php _e( 'Welcome Email' ) ?></label></th>				<td>					<textarea name="welcome_email" id="welcome_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new site owners.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="welcome_user_email"><?php _e( 'Welcome User Email' ) ?></label></th>				<td>					<textarea name="welcome_user_email" id="welcome_user_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_user_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new users.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_post"><?php _e( 'First Post' ) ?></label></th>				<td>					<textarea name="first_post" id="first_post" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'first_post' ) ) ) ?></textarea>					<br />					<?php _e( 'The first post on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_page"><?php _e( 'First Page' ) ?></label></th>				<td>					<textarea name="first_page" id="first_page" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_page') ) ) ?></textarea>					<br />					<?php _e( 'The first page on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment"><?php _e( 'First Comment' ) ?></label></th>				<td>					<textarea name="first_comment" id="first_comment" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_comment') ) ) ?></textarea>					<br />					<?php _e( 'The first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_author"><?php _e( 'First Comment Author' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_author" id="first_comment_author" value="<?php echo get_site_option('first_comment_author') ?>" />					<br />					<?php _e( 'The author of the first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_url"><?php _e( 'First Comment URL' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_url" id="first_comment_url" value="<?php echo esc_attr( get_site_option( 'first_comment_url' ) ) ?>" />					<br />					<?php _e( 'The URL for the first comment on a new site.' ) ?>				</td>			</tr>		</table>		<h3><?php _e( 'Upload Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Media upload buttons' ) ?></th>				<?php $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ); ?>				<td><label><input type="checkbox" id="mu_media_buttons_image" name="mu_media_buttons[image]" value="1"<?php checked( ! empty( $mu_media_buttons['image'] ) ) ?>/> <?php _e( 'Images' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_video" name="mu_media_buttons[video]" value="1"<?php checked( ! empty( $mu_media_buttons['video'] ) ) ?>/> <?php _e( 'Videos' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_audio" name="mu_media_buttons[audio]" value="1"<?php checked( ! empty( $mu_media_buttons['audio'] ) ) ?>/> <?php _e( 'Music' ); ?></label><br />				<?php _e( 'The media upload buttons to display on the &#8220;Write Post&#8221; page. Make sure you update the allowed upload file types below as well.' ); ?></td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Site upload space' ) ?></th>				<td>				<label><input type="checkbox" id="upload_space_check_disabled" name="upload_space_check_disabled" value="0"<?php checked( get_site_option( 'upload_space_check_disabled' ), 0 ) ?>/> <?php printf( __( 'Limit total size of files uploaded to %s MB' ), '</label><label><input name="blog_upload_space" type="text" id="blog_upload_space" value="' . esc_attr( get_site_option('blog_upload_space', 10) ) . '" size="3" />' ); ?></label><br />				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="upload_filetypes"><?php _e( 'Upload file types' ) ?></label></th>				<td><input name="upload_filetypes" type="text" id="upload_filetypes" class="large-text" value="<?php echo esc_attr( get_site_option('upload_filetypes', 'jpg jpeg png gif') ) ?>" size="45" /></td>			</tr>			<tr valign="top">				<th scope="row"><label for="fileupload_maxk"><?php _e( 'Max upload file size' ) ?></label></th>				<td><?php printf( _x( '%s KB', 'File size in kilobytes' ), '<input name="fileupload_maxk" type="text" id="fileupload_maxk" value="' . esc_attr( get_site_option( 'fileupload_maxk', 300 ) ) . '" size="5" />' ); ?></td>			</tr>		</table><?php		$languages = get_available_languages();		if ( ! empty( $languages ) ) {			$lang = get_site_option( 'WPLANG' );?>		<h3><?php _e( 'Network Wide Settings' ); ?></h3>		<div class="updated inline"><p><strong><?php _e( 'Notice:' ); ?></strong> <?php _e( 'These settings may be overridden by site owners.' ); ?></p></div>		<table class="form-table">			<?php				?>				<tr valign="top">					<th><label for="WPLANG"><?php _e( 'Default Language' ) ?></label></th>					<td>						<select name="WPLANG" id="WPLANG">							<?php mu_dropdown_languages( $languages, get_site_option( 'WPLANG' ) ); ?>						</select>					</td>				</tr>		</table><?php		} // languages?>		<h3><?php _e( 'Menu Settings' ); ?></h3>		<table id="menu" class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Enable administration menus' ); ?></th>				<td>			<?php			$menu_perms = get_site_option( 'menu_items' );			$menu_items = apply_filters( 'mu_menu_items', array( 'plugins' => __( 'Plugins' ) ) );			foreach ( (array) $menu_items as $key => $val ) {				echo "<label><input type='checkbox' name='menu_items[" . $key . "]' value='1'" .  ( isset( $menu_perms[$key] ) ? checked( $menu_perms[$key], '1', false ) : '' ) . " /> " . esc_html( $val ) . "</label><br/>";			}			?>				</td>			</tr>		</table>		<?php do_action( 'wpmu_options' ); // Add more options here ?>		<p class="submit"><input type="submit" class="button-primary" name="Submit" value="<?php esc_attr_e( 'Save Changes' ) ?>" /></p>	</form></div><?php include( './admin-footer.php' ); ?>
<?php/** * XML-RPC protocol support for WordPress * * @license GPL v2 <./license.txt> * @package WordPress *//** * Whether this is a XMLRPC Request * * @var bool */define('XMLRPC_REQUEST', true);// Some browser-embedded clients send cookies. We don't want them.$_COOKIE = array();// A bug in PHP < 5.2.2 makes $HTTP_RAW_POST_DATA not set by default,// but we can do it ourself.if ( !isset( $HTTP_RAW_POST_DATA ) ) {	$HTTP_RAW_POST_DATA = file_get_contents( 'php://input' );}// fix for mozBlog and other cases where '<?xml' isn't on the very first lineif ( isset($HTTP_RAW_POST_DATA) )	$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);/** Include the bootstrap for setting up WordPress environment */include('./wp-load.php');if ( isset( $_GET['rsd'] ) ) { // http://archipelago.phrasewise.com/rsdheader('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);?><?php echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd">  <service>    <engineName>WordPress</engineName>    <engineLink>http://wordpress.org/</engineLink>    <homePageLink><?php bloginfo_rss('url') ?></homePageLink>    <apis>      <api name="WordPress" blogID="1" preferred="true" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Movable Type" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="MetaWeblog" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Blogger" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Atom" blogID="" preferred="false" apiLink="<?php echo apply_filters('atom_service_url', site_url('wp-app.php/service', 'rpc') ) ?>" />    </apis>  </service></rsd><?phpexit;}include_once(ABSPATH . 'wp-admin/includes/admin.php');include_once(ABSPATH . WPINC . '/class-IXR.php');// Turn off all warnings and errors.// error_reporting(0);/** * Posts submitted via the xmlrpc interface get that title * @name post_default_title * @var string */$post_default_title = "";/** * Whether to enable XMLRPC Logging. * * @name xmlrpc_logging * @var int|bool */$xmlrpc_logging = 0;/** * logIO() - Writes logging info to a file. * * @uses $xmlrpc_logging * @package WordPress * @subpackage Logging * * @param string $io Whether input or output * @param string $msg Information describing logging reason. * @return bool Always return true */function logIO($io,$msg) {	global $xmlrpc_logging;	if ($xmlrpc_logging) {		$fp = fopen("../xmlrpc.log","a+");		$date = gmdate("Y-m-d H:i:s ");		$iot = ($io == "I") ? " Input: " : " Output: ";		fwrite($fp, "\n\n".$date.$iot.$msg);		fclose($fp);	}	return true;}if ( isset($HTTP_RAW_POST_DATA) )	logIO("I", $HTTP_RAW_POST_DATA);/** * WordPress XMLRPC server implementation. * * Implements compatability for Blogger API, MetaWeblog API, MovableType, and * pingback. Additional WordPress API for managing comments, pages, posts, * options, etc. * * Since WordPress 2.6.0, WordPress XMLRPC server can be disabled in the * administration panels. * * @package WordPress * @subpackage Publishing * @since 1.5.0 */class wp_xmlrpc_server extends IXR_Server {	/**	 * Register all of the XMLRPC methods that XMLRPC server understands.	 *	 * PHP4 constructor and sets up server and method property. Passes XMLRPC	 * methods through the 'xmlrpc_methods' filter to allow plugins to extend	 * or replace XMLRPC methods.	 *	 * @since 1.5.0	 *	 * @return wp_xmlrpc_server	 */	function wp_xmlrpc_server() {		$this->methods = array(			// WordPress API			'wp.getUsersBlogs'		=> 'this:wp_getUsersBlogs',			'wp.getPage'			=> 'this:wp_getPage',			'wp.getPages'			=> 'this:wp_getPages',			'wp.newPage'			=> 'this:wp_newPage',			'wp.deletePage'			=> 'this:wp_deletePage',			'wp.editPage'			=> 'this:wp_editPage',			'wp.getPageList'		=> 'this:wp_getPageList',			'wp.getAuthors'			=> 'this:wp_getAuthors',			'wp.getCategories'		=> 'this:mw_getCategories',		// Alias			'wp.getTags'			=> 'this:wp_getTags',			'wp.newCategory'		=> 'this:wp_newCategory',			'wp.deleteCategory'		=> 'this:wp_deleteCategory',			'wp.suggestCategories'	=> 'this:wp_suggestCategories',			'wp.uploadFile'			=> 'this:mw_newMediaObject',	// Alias			'wp.getCommentCount'	=> 'this:wp_getCommentCount',			'wp.getPostStatusList'	=> 'this:wp_getPostStatusList',			'wp.getPageStatusList'	=> 'this:wp_getPageStatusList',			'wp.getPageTemplates'	=> 'this:wp_getPageTemplates',			'wp.getOptions'			=> 'this:wp_getOptions',			'wp.setOptions'			=> 'this:wp_setOptions',			'wp.getComment'			=> 'this:wp_getComment',			'wp.getComments'		=> 'this:wp_getComments',			'wp.deleteComment'		=> 'this:wp_deleteComment',			'wp.editComment'		=> 'this:wp_editComment',			'wp.newComment'			=> 'this:wp_newComment',			'wp.getCommentStatusList' => 'this:wp_getCommentStatusList',			// Blogger API			'blogger.getUsersBlogs' => 'this:blogger_getUsersBlogs',			'blogger.getUserInfo' => 'this:blogger_getUserInfo',			'blogger.getPost' => 'this:blogger_getPost',			'blogger.getRecentPosts' => 'this:blogger_getRecentPosts',			'blogger.getTemplate' => 'this:blogger_getTemplate',			'blogger.setTemplate' => 'this:blogger_setTemplate',			'blogger.newPost' => 'this:blogger_newPost',			'blogger.editPost' => 'this:blogger_editPost',			'blogger.deletePost' => 'this:blogger_deletePost',			// MetaWeblog API (with MT extensions to structs)			'metaWeblog.newPost' => 'this:mw_newPost',			'metaWeblog.editPost' => 'this:mw_editPost',			'metaWeblog.getPost' => 'this:mw_getPost',			'metaWeblog.getRecentPosts' => 'this:mw_getRecentPosts',			'metaWeblog.getCategories' => 'this:mw_getCategories',			'metaWeblog.newMediaObject' => 'this:mw_newMediaObject',			// MetaWeblog API aliases for Blogger API			// see http://www.xmlrpc.com/stories/storyReader$2460			'metaWeblog.deletePost' => 'this:blogger_deletePost',			'metaWeblog.getTemplate' => 'this:blogger_getTemplate',			'metaWeblog.setTemplate' => 'this:blogger_setTemplate',			'metaWeblog.getUsersBlogs' => 'this:blogger_getUsersBlogs',			// MovableType API			'mt.getCategoryList' => 'this:mt_getCategoryList',			'mt.getRecentPostTitles' => 'this:mt_getRecentPostTitles',			'mt.getPostCategories' => 'this:mt_getPostCategories',			'mt.setPostCategories' => 'this:mt_setPostCategories',			'mt.supportedMethods' => 'this:mt_supportedMethods',			'mt.supportedTextFilters' => 'this:mt_supportedTextFilters',			'mt.getTrackbackPings' => 'this:mt_getTrackbackPings',			'mt.publishPost' => 'this:mt_publishPost',			// PingBack			'pingback.ping' => 'this:pingback_ping',			'pingback.extensions.getPingbacks' => 'this:pingback_extensions_getPingbacks',			'demo.sayHello' => 'this:sayHello',			'demo.addTwoNumbers' => 'this:addTwoNumbers'		);		$this->initialise_blog_option_info( );		$this->methods = apply_filters('xmlrpc_methods', $this->methods);	}	function serve_request() {		$this->IXR_Server($this->methods);	}	/**	 * Test XMLRPC API by saying, "Hello!" to client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return string	 */	function sayHello($args) {		return 'Hello!';	}	/**	 * Test XMLRPC API by adding two numbers for client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return int	 */	function addTwoNumbers($args) {		$number1 = $args[0];		$number2 = $args[1];		return $number1 + $number2;	}	/**	 * Check user's credentials.	 *	 * @since 1.5.0	 *	 * @param string $user_login User's username.	 * @param string $user_pass User's password.	 * @return bool Whether authentication passed.	 * @deprecated use wp_xmlrpc_server::login	 * @see wp_xmlrpc_server::login	 */	function login_pass_ok($user_login, $user_pass) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		if (!user_pass_ok($user_login, $user_pass)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		return true;	}	/**	 * Log user in.	 *	 * @since 2.8	 *	 * @param string $username User's username.	 * @param string $password User's password.	 * @return mixed WP_User object if authentication passed, false otherwise	 */	function login($username, $password) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		$user = wp_authenticate($username, $password);		if (is_wp_error($user)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		wp_set_current_user( $user->ID );		return $user;	}	/**	 * Sanitize string or array of strings for database.	 *	 * @since 1.5.2	 *	 * @param string|array $array Sanitize single string or array of strings.	 * @return string|array Type matches $array and sanitized for the database.	 */	function escape(&$array) {		global $wpdb;		if (!is_array($array)) {			return($wpdb->escape($array));		} else {			foreach ( (array) $array as $k => $v ) {				if ( is_array($v) ) {					$this->escape($array[$k]);				} else if ( is_object($v) ) {					//skip				} else {					$array[$k] = $wpdb->escape($v);				}			}		}	}	/**	 * Retrieve custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @return array Custom fields, if exist.	 */	function get_custom_fields($post_id) {		$post_id = (int) $post_id;		$custom_fields = array();		foreach ( (array) has_meta($post_id) as $meta ) {			// Don't expose protected fields.			if ( strpos($meta['meta_key'], '_wp_') === 0 ) {				continue;			}			$custom_fields[] = array(				"id"    => $meta['meta_id'],				"key"   => $meta['meta_key'],				"value" => $meta['meta_value']			);		}		return $custom_fields;	}	/**	 * Set custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @param array $fields Custom fields.	 */	function set_custom_fields($post_id, $fields) {		$post_id = (int) $post_id;		foreach ( (array) $fields as $meta ) {			if ( isset($meta['id']) ) {				$meta['id'] = (int) $meta['id'];				if ( isset($meta['key']) ) {					update_meta($meta['id'], $meta['key'], $meta['value']);				}				else {					delete_meta($meta['id']);				}			}			else {				$_POST['metakeyinput'] = $meta['key'];				$_POST['metavalue'] = $meta['value'];				add_meta($post_id);			}		}	}	/**	 * Set up blog options property.	 *	 * Passes property through 'xmlrpc_blog_options' filter.	 *	 * @since 2.6.0	 */	function initialise_blog_option_info( ) {		global $wp_version;		$this->blog_options = array(			// Read only options			'software_name'		=> array(				'desc'			=> __( 'Software Name' ),				'readonly'		=> true,				'value'			=> 'WordPress'			),			'software_version'	=> array(				'desc'			=> __( 'Software Version' ),				'readonly'		=> true,				'value'			=> $wp_version			),			'blog_url'			=> array(				'desc'			=> __( 'Site URL' ),				'readonly'		=> true,				'option'		=> 'siteurl'			),			// Updatable options			'time_zone'			=> array(				'desc'			=> __( 'Time Zone' ),				'readonly'		=> false,				'option'		=> 'gmt_offset'			),			'blog_title'		=> array(				'desc'			=> __( 'Site Title' ),				'readonly'		=> false,				'option'			=> 'blogname'			),			'blog_tagline'		=> array(				'desc'			=> __( 'Site Tagline' ),				'readonly'		=> false,				'option'		=> 'blogdescription'			),			'date_format'		=> array(				'desc'			=> __( 'Date Format' ),				'readonly'		=> false,				'option'		=> 'date_format'			),			'time_format'		=> array(				'desc'			=> __( 'Time Format' ),				'readonly'		=> false,				'option'		=> 'time_format'			),			'users_can_register'	=> array(				'desc'			=> __( 'Allow new users to sign up' ),				'readonly'		=> false,				'option'		=> 'users_can_register'			)		);		$this->blog_options = apply_filters( 'xmlrpc_blog_options', $this->blog_options );	}	/**	 * Retrieve the blogs of the user.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getUsersBlogs( $args ) {		global $current_site;		// If this isn't on WPMU then just use blogger_getUsersBlogs		if ( !is_multisite() ) {			array_unshift( $args, 1 );			return $this->blogger_getUsersBlogs( $args );		}		$this->escape( $args );		$username = $args[0];		$password = $args[1];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action( 'xmlrpc_call', 'wp.getUsersBlogs' );		$blogs = (array) get_blogs_of_user( $user->ID );		$struct = array( );		foreach ( $blogs as $blog ) {			// Don't include blogs that aren't hosted at this site			if ( $blog->site_id != $current_site->id )				continue;			$blog_id = $blog->userblog_id;			switch_to_blog($blog_id);			$is_admin = current_user_can('manage_options');			$struct[] = array(				'isAdmin'		=> $is_admin,				'url'			=> get_option( 'home' ) . '/',				'blogid'		=> $blog_id,				'blogName'		=> get_option( 'blogname' ),				'xmlrpc'		=> site_url( 'xmlrpc.php' )			);			restore_current_blog( );		}		return $struct;	}	/**	 * Retrieve page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$page_id	= (int) $args[1];		$username	= $args[2];		$password	= $args[3];		if ( !$user = $this->login($username, $password) ) {			return $this->error;		}		if ( !current_user_can( 'edit_page', $page_id ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this page.' ) );		do_action('xmlrpc_call', 'wp.getPage');		// Lookup page info.		$page = get_page($page_id);		// If we found the page then format the data.		if ( $page->ID && ($page->post_type == "page") ) {			// Get all of the page content and link.			$full_page = get_extended($page->post_content);			$link = post_permalink($page->ID);			// Get info the page parent if there is one.			$parent_title = "";			if ( !empty($page->post_parent) ) {				$parent = get_page($page->post_parent);				$parent_title = $parent->post_title;			}			// Determine comment and ping settings.			$allow_comments = comments_open($page->ID) ? 1 : 0;			$allow_pings = pings_open($page->ID) ? 1 : 0;			// Format page date.			$page_date = mysql2date("Ymd\TH:i:s", $page->post_date, false);			$page_date_gmt = mysql2date("Ymd\TH:i:s", $page->post_date_gmt, false);			// For drafts use the GMT version of the date			if ( $page->post_status == 'draft' )				$page_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page->post_date ), 'Ymd\TH:i:s' );			// Pull the categories info together.			$categories = array();			foreach ( wp_get_post_categories($page->ID) as $cat_id ) {				$categories[] = get_cat_name($cat_id);			}			// Get the author info.			$author = get_userdata($page->post_author);			$page_template = get_post_meta( $page->ID, '_wp_page_template', true );			if ( empty( $page_template ) )				$page_template = 'default';			$page_struct = array(				"dateCreated"			=> new IXR_Date($page_date),				"userid"				=> $page->post_author,				"page_id"				=> $page->ID,				"page_status"			=> $page->post_status,				"description"			=> $full_page["main"],				"title"					=> $page->post_title,				"link"					=> $link,				"permaLink"				=> $link,				"categories"			=> $categories,				"excerpt"				=> $page->post_excerpt,				"text_more"				=> $full_page["extended"],				"mt_allow_comments"		=> $allow_comments,				"mt_allow_pings"		=> $allow_pings,				"wp_slug"				=> $page->post_name,				"wp_password"			=> $page->post_password,				"wp_author"				=> $author->display_name,				"wp_page_parent_id"		=> $page->post_parent,				"wp_page_parent_title"	=> $parent_title,				"wp_page_order"			=> $page->menu_order,				"wp_author_id"			=> $author->ID,				"wp_author_display_name"	=> $author->display_name,				"date_created_gmt"		=> new IXR_Date($page_date_gmt),				"custom_fields"			=> $this->get_custom_fields($page_id),				"wp_page_template"		=> $page_template			);			return($page_struct);		}		// If the page doesn't exist indicate that.		else {			return(new IXR_Error(404, __("Sorry, no such page.")));		}	}	/**	 * Retrieve Pages.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPages($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$num_pages	= isset($args[3]) ? (int) $args[3] : 10;		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPages');		$pages = get_posts( array('post_type' => 'page', 'post_status' => 'any', 'numberposts' => $num_pages) );		$num_pages = count($pages);		// If we have pages, put together their info.		if ( $num_pages >= 1 ) {			$pages_struct = array();			for ( $i = 0; $i < $num_pages; $i++ ) {				$page = wp_xmlrpc_server::wp_getPage(array(					$blog_id, $pages[$i]->ID, $username, $password				));				$pages_struct[] = $page;			}			return($pages_struct);		}		// If no pages were found return an error.		else {			return(array());		}	}	/**	 * Create new page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_newPage($args) {		// Items not escaped here will be escaped in newPost.		$username	= $this->escape($args[1]);		$password	= $this->escape($args[2]);		$page		= $args[3];		$publish	= $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newPage');		// Make sure the user is allowed to add new pages.		if ( !current_user_can("publish_pages") )			return(new IXR_Error(401, __("Sorry, you cannot add new pages.")));		// Mark this as content for a page.		$args[3]["post_type"] = "page";		// Let mw_newPost do all of the heavy lifting.		return($this->mw_newPost($args));	}	/**	 * Delete page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return bool True, if success.	 */	function wp_deletePage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$page_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deletePage');		// Get the current page based on the page_id and		// make sure it is a page and not a post.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user can delete pages.		if ( !current_user_can("delete_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to delete this page.")));		// Attempt to delete the page.		$result = wp_delete_post($page_id);		if ( !$result )			return(new IXR_Error(500, __("Failed to delete the page.")));		return(true);	}	/**	 * Edit page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_editPage($args) {		// Items not escaped here will be escaped in editPost.		$blog_id	= (int) $args[0];		$page_id	= (int) $this->escape($args[1]);		$username	= $this->escape($args[2]);		$password	= $this->escape($args[3]);		$content	= $args[4];		$publish	= $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.editPage');		// Get the page data and make sure it is a page.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user is allowed to edit pages.		if ( !current_user_can("edit_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to edit this page.")));		// Mark this as content for a page.		$content["post_type"] = "page";		// Arrange args in the way mw_editPost understands.		$args = array(			$page_id,			$username,			$password,			$content,			$publish		);		// Let mw_editPost do all of the heavy lifting.		return($this->mw_editPost($args));	}	/**	 * Retrieve page list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_getPageList($args) {		global $wpdb;		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPageList');		// Get list of pages ids and titles		$page_list = $wpdb->get_results("			SELECT ID page_id,				post_title page_title,				post_parent page_parent_id,				post_date_gmt,				post_date,				post_status			FROM {$wpdb->posts}			WHERE post_type = 'page'			ORDER BY ID		");		// The date needs to be formated properly.		$num_pages = count($page_list);		for ( $i = 0; $i < $num_pages; $i++ ) {			$post_date = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date, false);			$post_date_gmt = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date_gmt, false);			$page_list[$i]->dateCreated = new IXR_Date($post_date);			$page_list[$i]->date_created_gmt = new IXR_Date($post_date_gmt);			// For drafts use the GMT version of the date			if ( $page_list[$i]->post_status == 'draft' ) {				$page_list[$i]->date_created_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page_list[$i]->post_date ), 'Ymd\TH:i:s' );				$page_list[$i]->date_created_gmt = new IXR_Date( $page_list[$i]->date_created_gmt );			}			unset($page_list[$i]->post_date_gmt);			unset($page_list[$i]->post_date);			unset($page_list[$i]->post_status);		}		return($page_list);	}	/**	 * Retrieve authors list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getAuthors($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can("edit_posts") )			return(new IXR_Error(401, __("Sorry, you cannot edit posts on this site.")));		do_action('xmlrpc_call', 'wp.getAuthors');		$authors = array();		foreach ( (array) get_users_of_blog() as $row ) {			$authors[] = array(				"user_id"       => $row->user_id,				"user_login"    => $row->user_login,				"display_name"  => $row->display_name			);		}		return($authors);	}	/**	 * Get list of all tags	 *	 * @since 2.7	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getTags( $args ) {		$this->escape( $args );		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view tags.' ) );		do_action( 'xmlrpc_call', 'wp.getKeywords' );		$tags = array( );		if ( $all_tags = get_tags() ) {			foreach( (array) $all_tags as $tag ) {				$struct['tag_id']			= $tag->term_id;				$struct['name']				= $tag->name;				$struct['count']			= $tag->count;				$struct['slug']				= $tag->slug;				$struct['html_url']			= esc_html( get_tag_link( $tag->term_id ) );				$struct['rss_url']			= esc_html( get_tag_feed_link( $tag->term_id ) );				$tags[] = $struct;			}		}		return $tags;	}	/**	 * Create new category.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return int Category ID.	 */	function wp_newCategory($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newCategory');		// Make sure the user is allowed to add a category.		if ( !current_user_can("manage_categories") )			return(new IXR_Error(401, __("Sorry, you do not have the right to add a category.")));		// If no slug was provided make it empty so that		// WordPress will generate one.		if ( empty($category["slug"]) )			$category["slug"] = "";		// If no parent_id was provided make it empty		// so that it will be a top level page (no parent).		if ( !isset($category["parent_id"]) )			$category["parent_id"] = "";		// If no description was provided make it empty.		if ( empty($category["description"]) )			$category["description"] = "";		$new_category = array(			"cat_name"				=> $category["name"],			"category_nicename"		=> $category["slug"],			"category_parent"		=> $category["parent_id"],			"category_description"	=> $category["description"]		);		$cat_id = wp_insert_category($new_category);		if ( !$cat_id )			return(new IXR_Error(500, __("Sorry, the new category failed.")));		return($cat_id);	}	/**	 * Remove category.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return mixed See {@link wp_delete_category()} for return info.	 */	function wp_deleteCategory($args) {		$this->escape($args);		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		$category_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deleteCategory');		if ( !current_user_can("manage_categories") )			return new IXR_Error( 401, __( "Sorry, you do not have the right to delete a category." ) );		return wp_delete_category( $category_id );	}	/**	 * Retrieve category list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_suggestCategories($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		$max_results			= (int) $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts to this site in order to view categories.' ) );		do_action('xmlrpc_call', 'wp.suggestCategories');		$category_suggestions = array();		$args = array('get' => 'all', 'number' => $max_results, 'name__like' => $category);		foreach ( (array) get_categories($args) as $cat ) {			$category_suggestions[] = array(				"category_id"	=> $cat->cat_ID,				"category_name"	=> $cat->cat_name			);		}		return($category_suggestions);	}	/**	 * Retrieve comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.getComment');		if ( ! $comment = get_comment($comment_id) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		// Format page date.		$comment_date = mysql2date("Ymd\TH:i:s", $comment->comment_date, false);		$comment_date_gmt = mysql2date("Ymd\TH:i:s", $comment->comment_date_gmt, false);		if ( '0' == $comment->comment_approved )			$comment_status = 'hold';		else if ( 'spam' == $comment->comment_approved )			$comment_status = 'spam';		else if ( '1' == $comment->comment_approved )			$comment_status = 'approve';		else			$comment_status = $comment->comment_approved;		$link = get_comment_link($comment);		$comment_struct = array(			"date_created_gmt"		=> new IXR_Date($comment_date_gmt),			"user_id"				=> $comment->user_id,			"comment_id"			=> $comment->comment_ID,			"parent"				=> $comment->comment_parent,			"status"				=> $comment_status,			"content"				=> $comment->comment_content,			"link"					=> $link,			"post_id"				=> $comment->comment_post_ID,			"post_title"			=> get_the_title($comment->comment_post_ID),			"author"				=> $comment->comment_author,			"author_url"			=> $comment->comment_author_url,			"author_email"			=> $comment->comment_author_email,			"author_ip"				=> $comment->comment_author_IP,			"type"					=> $comment->comment_type,		);		return $comment_struct;	}	/**	 * Retrieve comments.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComments($args) {		$raw_args = $args;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$struct		= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit comments.' ) );		do_action('xmlrpc_call', 'wp.getComments');		if ( isset($struct['status']) )			$status = $struct['status'];		else			$status = '';		$post_id = '';		if ( isset($struct['post_id']) )			$post_id = absint($struct['post_id']);		$offset = 0;		if ( isset($struct['offset']) )			$offset = absint($struct['offset']);		$number = 10;		if ( isset($struct['number']) )			$number = absint($struct['number']);		$comments = get_comments( array('status' => $status, 'post_id' => $post_id, 'offset' => $offset, 'number' => $number ) );		$num_comments = count($comments);		if ( ! $num_comments )			return array();		$comments_struct = array();		for ( $i = 0; $i < $num_comments; $i++ ) {			$comment = wp_xmlrpc_server::wp_getComment(array(				$raw_args[0], $raw_args[1], $raw_args[2], $comments[$i]->comment_ID,			));			$comments_struct[] = $comment;		}		return $comments_struct;	}	/**	 * Remove comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_delete_comment()}	 */	function wp_deleteComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.deleteComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		return wp_delete_comment($comment_ID);	}	/**	 * Edit comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return bool True, on success.	 */	function wp_editComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		$content_struct = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.editComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		if ( isset($content_struct['status']) ) {			$statuses = get_comment_statuses();			$statuses = array_keys($statuses);			if ( ! in_array($content_struct['status'], $statuses) )				return new IXR_Error( 401, __( 'Invalid comment status.' ) );			$comment_approved = $content_struct['status'];		}		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) ) {			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force			$comment_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$comment_date_gmt = iso8601_to_datetime($dateCreated, GMT);		}		if ( isset($content_struct['content']) )			$comment_content = $content_struct['content'];		if ( isset($content_struct['author']) )			$comment_author = $content_struct['author'];		if ( isset($content_struct['author_url']) )			$comment_author_url = $content_struct['author_url'];		if ( isset($content_struct['author_email']) )			$comment_author_email = $content_struct['author_email'];		// We've got all the data -- post it:		$comment = compact('comment_ID', 'comment_content', 'comment_approved', 'comment_date', 'comment_date_gmt', 'comment_author', 'comment_author_email', 'comment_author_url');		$result = wp_update_comment($comment);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, the comment could not be edited. Something wrong happened.'));		return true;	}	/**	 * Create new comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_new_comment()}	 */	function wp_newComment($args) {		global $wpdb;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post		= $args[3];		$content_struct = $args[4];		$allow_anon = apply_filters('xmlrpc_allow_anonymous_comments', false);		$user = $this->login($username, $password);		if ( !$user ) {			$logged_in = false;			if ( $allow_anon && get_option('comment_registration') )				return new IXR_Error( 403, __( 'You must be registered to comment' ) );			else if ( !$allow_anon )				return $this->error;		} else {			$logged_in = true;		}		if ( is_numeric($post) )			$post_id = absint($post);		else			$post_id = url_to_postid($post);		if ( ! $post_id )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		if ( ! get_post($post_id) )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		$comment['comment_post_ID'] = $post_id;		if ( $logged_in ) {			$comment['comment_author'] = $wpdb->escape( $user->display_name );			$comment['comment_author_email'] = $wpdb->escape( $user->user_email );			$comment['comment_author_url'] = $wpdb->escape( $user->user_url );			$comment['user_ID'] = $user->ID;		} else {			$comment['comment_author'] = '';			if ( isset($content_struct['author']) )				$comment['comment_author'] = $content_struct['author'];			$comment['comment_author_email'] = '';			if ( isset($content_struct['author_email']) )				$comment['comment_author_email'] = $content_struct['author_email'];			$comment['comment_author_url'] = '';			if ( isset($content_struct['author_url']) )				$comment['comment_author_url'] = $content_struct['author_url'];			$comment['user_ID'] = 0;			if ( get_option('require_name_email') ) {				if ( 6 > strlen($comment['comment_author_email']) || '' == $comment['comment_author'] )					return new IXR_Error( 403, __( 'Comment author name and email are required' ) );				elseif ( !is_email($comment['comment_author_email']) )					return new IXR_Error( 403, __( 'A valid email address is required' ) );			}		}		$comment['comment_parent'] = isset($content_struct['comment_parent']) ? absint($content_struct['comment_parent']) : 0;		$comment['comment_content'] = $content_struct['content'];		do_action('xmlrpc_call', 'wp.newComment');		return wp_new_comment($comment);	}	/**	 * Retrieve all of the comment status.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentStatusList($args) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getCommentStatusList');		return get_comment_statuses( );	}	/**	 * Retrieve comment count.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentCount( $args ) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about comments.' ) );		do_action('xmlrpc_call', 'wp.getCommentCount');		$count = wp_count_comments( $post_id );		return array(			"approved" => $count->approved,			"awaiting_moderation" => $count->moderated,			"spam" => $count->spam,			"total_comments" => $count->total_comments		);	}	/**	 * Retrieve post statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPostStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPostStatusList');		return get_post_statuses( );	}	/**	 * Retrieve page statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPageStatusList');		return get_page_statuses( );	}	/**	 * Retrieve page templates.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageTemplates( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		$templates = get_page_templates( );		$templates['Default'] = 'default';		return $templates;	}	/**	 * Retrieve blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		// If no specific options where asked for, return all of them		if ( count( $options ) == 0 )			$options = array_keys($this->blog_options);		return $this->_getOptions($options);	}	/**	 * Retrieve blog options value from list.	 *	 * @since 2.6.0	 *	 * @param array $options Options to retrieve.	 * @return array	 */	function _getOptions($options) {		$data = array( );		foreach ( $options as $option ) {			if ( array_key_exists( $option, $this->blog_options ) ) {				$data[$option] = $this->blog_options[$option];				//Is the value static or dynamic?				if ( isset( $data[$option]['option'] ) ) {					$data[$option]['value'] = get_option( $data[$option]['option'] );					unset($data[$option]['option']);				}			}		}		return $data;	}	/**	 * Update blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_setOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'manage_options' ) )			return new IXR_Error( 403, __( 'You are not allowed to update options.' ) );		foreach ( $options as $o_name => $o_value ) {			$option_names[] = $o_name;			if ( !array_key_exists( $o_name, $this->blog_options ) )				continue;			if ( $this->blog_options[$o_name]['readonly'] == true )				continue;			update_option( $this->blog_options[$o_name]['option'], $o_value );		}		//Now return the updated values		return $this->_getOptions($option_names);	}	/* Blogger API functions.	 * specs on http://plant.blogger.com/api and http://groups.yahoo.com/group/bloggerDev/	 */	/**	 * Retrieve blogs that user owns.	 *	 * Will make more sense once we support multiple blogs.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUsersBlogs($args) {		if ( is_multisite() )			return $this->_multisite_getUsersBlogs($args);		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getUsersBlogs');		$is_admin = current_user_can('manage_options');		$struct = array(			'isAdmin'  => $is_admin,			'url'      => get_option('home') . '/',			'blogid'   => '1',			'blogName' => get_option('blogname'),			'xmlrpc'   => site_url( 'xmlrpc.php' )		);		return array($struct);	}	/**	 * Private function for retrieving a users blogs for multisite setups	 *	 * @access protected	 */	function _multisite_getUsersBlogs($args) {		global $current_blog;		$domain = $current_blog->domain;		$path = $current_blog->path . 'xmlrpc.php';		$protocol = is_ssl() ? 'https' : 'http';		$rpc = new IXR_Client("$protocol://{$domain}{$path}");		$rpc->query('wp.getUsersBlogs', $args[1], $args[2]);		$blogs = $rpc->getResponse();		if ( isset($blogs['faultCode']) )			return new IXR_Error($blogs['faultCode'], $blogs['faultString']);		if ( $_SERVER['HTTP_HOST'] == $domain && $_SERVER['REQUEST_URI'] == $path ) {			return $blogs;		} else {			foreach ( (array) $blogs as $blog ) {				if ( strpos($blog['url'], $_SERVER['HTTP_HOST']) )					return array($blog);			}			return array();		}	}	/**	 * Retrieve user's data.	 *	 * Gives your client some info about you, so you don't have to.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUserInfo($args) {		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you do not have access to user data on this site.' ) );		do_action('xmlrpc_call', 'blogger.getUserInfo');		$struct = array(			'nickname'  => $user->nickname,			'userid'    => $user->ID,			'url'       => $user->user_url,			'lastname'  => $user->last_name,			'firstname' => $user->first_name		);		return $struct;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getPost($args) {		$this->escape($args);		$post_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'blogger.getPost');		$post_data = wp_get_single_post($post_ID, ARRAY_A);		$categories = implode(',', wp_get_post_categories($post_ID));		$content  = '<title>'.stripslashes($post_data['post_title']).'</title>';		$content .= '<category>'.$categories.'</category>';		$content .= stripslashes($post_data['post_content']);		$struct = array(			'userid'    => $post_data['post_author'],			'dateCreated' => new IXR_Date(mysql2date('Ymd\TH:i:s', $post_data['post_date'], false)),			'content'     => $content,			'postid'  => $post_data['ID']		);		return $struct;	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getRecentPosts($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$num_posts  = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$categories = implode(',', wp_get_post_categories($entry['ID']));			$content  = '<title>'.stripslashes($entry['post_title']).'</title>';			$content .= '<category>'.$categories.'</category>';			$content .= stripslashes($entry['post_content']);			$struct[] = array(				'userid' => $entry['post_author'],				'dateCreated' => new IXR_Date($post_date),				'content' => $content,				'postid' => $entry['ID'],			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve blog_filename content.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return string	 */	function blogger_getTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$template   = $args[4]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user can not edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		$f = fopen($filename, 'r');		$content = fread($f, filesize($filename));		fclose($f);		/* so it is actually editable with a windows/mac client */		// FIXME: (or delete me) do we really want to cater to bad clients at the expense of good ones by BEEPing up their line breaks? commented.     $content = str_replace("\n", "\r\n", $content);		return $content;	}	/**	 * Updates the content of blog_filename.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when done.	 */	function blogger_setTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$template   = $args[5]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.setTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user cannot edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		if ($f = fopen($filename, 'w+')) {			fwrite($f, $content);			fclose($f);		} else {			return new IXR_Error(500, __('Either the file is not writable, or something wrong happened. The file has not been updated.'));		}		return true;	}	/**	 * Create new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function blogger_newPost($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$publish    = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.newPost');		$cap = ($publish) ? 'publish_posts' : 'edit_posts';		if ( !current_user_can($cap) )			return new IXR_Error(401, __('Sorry, you are not allowed to post on this site.'));		$post_status = ($publish) ? 'publish' : 'draft';		$post_author = $user->ID;		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$post_date = current_time('mysql');		$post_date_gmt = current_time('mysql', 1);		$post_data = compact('blog_ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status');		$post_ID = wp_insert_post($post_data);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return $post_ID;	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool true when done.	 */	function blogger_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$content     = $args[4];		$publish     = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.editPost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		$this->escape($actual_post);		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to edit this post.'));		extract($actual_post, EXTR_SKIP);		if ( ('publish' == $post_status) && !current_user_can('publish_posts') )			return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt');		$result = wp_update_post($postdata);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be edited.'));		$this->attach_uploads( $ID, $post_content );		return true;	}	/**	 * Remove a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when post is deleted.	 */	function blogger_deletePost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.deletePost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to delete this post.'));		$result = wp_delete_post($post_ID);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be deleted.'));		return true;	}	/* MetaWeblog API functions	 * specs on wherever Dave Winer wants them to be	 */	/**	 * Create a new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mw_newPost($args) {		$this->escape($args);		$blog_ID     = (int) $args[0]; // we will support this in the near future		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		// Let WordPress generate the post_name (slug) unless		// one has been provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was provided.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was provided.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $user->ID;		// If an author id was provided then use it instead.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to post as this user")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to create pages as this user")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch ( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$tags_input = $content_struct['mt_keywords'];		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		} else {			$comment_status = get_option("default_comment_status");		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct['mt_allow_pings'] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		} else {			$ping_status = get_option("default_ping_status");		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date = current_time('mysql');			$post_date_gmt = current_time('mysql', 1);		}		$catnames = $content_struct['categories'];		logIO('O', 'Post cats: ' . var_export($catnames,true));		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {				$post_category[] = get_cat_ID($cat);			}		}		// We've got all the data -- post it:		$postdata = compact('post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'to_ping', 'post_type', 'post_name', 'post_password', 'post_parent', 'menu_order', 'tags_input', 'page_template');		$post_ID = wp_insert_post($postdata, true);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return strval($post_ID);	}	function add_enclosure_if_new($post_ID, $enclosure) {		if ( is_array( $enclosure ) && isset( $enclosure['url'] ) && isset( $enclosure['length'] ) && isset( $enclosure['type'] ) ) {			$encstring = $enclosure['url'] . "\n" . $enclosure['length'] . "\n" . $enclosure['type'];			$found = false;			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						if ($enc == $encstring) {							$found = true;							break 2;						}					}				}			}			if (!$found)				add_post_meta( $post_ID, 'enclosure', $encstring );		}	}	/**	 * Attach upload to a post.	 *	 * @since 2.1.0	 *	 * @param int $post_ID Post ID.	 * @param string $post_content Post Content for attachment.	 */	function attach_uploads( $post_ID, $post_content ) {		global $wpdb;		// find any unattached files		$attachments = $wpdb->get_results( "SELECT ID, guid FROM {$wpdb->posts} WHERE post_parent = '0' AND post_type = 'attachment'" );		if ( is_array( $attachments ) ) {			foreach ( $attachments as $file ) {				if ( strpos( $post_content, $file->guid ) !== false )					$wpdb->update($wpdb->posts, array('post_parent' => $post_ID), array('ID' => $file->ID) );			}		}	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mw_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.editPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		$postdata = wp_get_single_post($post_ID, ARRAY_A);		// If there is no post data for the give post id, stop		// now and return an error.  Other wise a new post will be		// created (which was the old behavior).		if ( empty($postdata["ID"]) )			return(new IXR_Error(404, __("Invalid post ID.")));		$this->escape($postdata);		extract($postdata, EXTR_SKIP);		// Let WordPress manage slug if none was provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was given.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was given.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $postdata["post_author"];		// Only set the post_author if one is set.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to change the post author as this user.")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to change the page author as this user.")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct["mt_allow_pings"] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$catnames = $content_struct['categories'];		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {		 		$post_category[] = get_cat_ID($cat);			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$tags_input = $content_struct['mt_keywords'];		if ( ('publish' == $post_status) ) {			if ( ( 'page' == $post_type ) && !current_user_can('publish_pages') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this page.'));			else if ( !current_user_can('publish_posts') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date     = $postdata['post_date'];			$post_date_gmt = $postdata['post_date_gmt'];		}		// We've got all the data -- post it:		$newpost = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'post_date', 'post_date_gmt', 'to_ping', 'post_name', 'post_password', 'post_parent', 'menu_order', 'post_author', 'tags_input', 'page_template');		$result = wp_update_post($newpost, true);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, your entry could not be edited. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $ID, $post_content );		logIO('O',"(MW) Edited ! ID: $post_ID");		return true;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'metaWeblog.getPost');		$postdata = wp_get_single_post($post_ID, ARRAY_A);		if ($postdata['post_date'] != '') {			$post_date = mysql2date('Ymd\TH:i:s', $postdata['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $postdata['post_date_gmt'], false);			// For drafts use the GMT version of the post date			if ( $postdata['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $postdata['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($post_ID);			foreach($catids as $catid)				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $post_ID );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag )					$tagnames[] = $tag->name;				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($postdata['post_content']);			$link = post_permalink($postdata['ID']);			// Get the author info.			$author = get_userdata($postdata['post_author']);			$allow_comments = ('open' == $postdata['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $postdata['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $postdata['post_status'] === 'future' )				$postdata['post_status'] = 'publish';			$sticky = false;			if ( is_sticky( $post_ID ) )				$sticky = true;			$enclosure = array();			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						$encdata = split("\n", $enc);						$enclosure['url'] = trim(htmlspecialchars($encdata[0]));						$enclosure['length'] = (int) trim($encdata[1]);						$enclosure['type'] = trim($encdata[2]);						break 2;					}				}			}			$resp = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $postdata['post_author'],				'postid' => $postdata['ID'],				'description' => $post['main'],				'title' => $postdata['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				//	      'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $postdata['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $postdata['post_name'],				'wp_password' => $postdata['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name'	=> $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $postdata['post_status'],				'custom_fields' => $this->get_custom_fields($post_ID),				'sticky' => $sticky			);			if ( !empty($enclosure) ) $resp['enclosure'] = $enclosure;			return $resp;		} else {			return new IXR_Error(404, __('Sorry, no such post.'));		}	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getRecentPosts($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list )			return array( );		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($entry['ID']);			foreach( $catids as $catid )				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $entry['ID'] );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag ) {					$tagnames[] = $tag->name;				}				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($entry['post_content']);			$link = post_permalink($entry['ID']);			// Get the post author info.			$author = get_userdata($entry['post_author']);			$allow_comments = ('open' == $entry['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $entry['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $entry['post_status'] === 'future' )				$entry['post_status'] = 'publish';			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'description' => $post['main'],				'title' => $entry['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				// 'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $entry['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $entry['post_name'],				'wp_password' => $entry['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name' => $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $entry['post_status'],				'custom_fields' => $this->get_custom_fields($entry['ID'])			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve the list of categories on a given blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getCategories($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'metaWeblog.getCategories');		$categories_struct = array();		if ( $cats = get_categories(array('get' => 'all')) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['parentId'] = $cat->parent;				$struct['description'] = $cat->name;				$struct['categoryDescription'] = $cat->description;				$struct['categoryName'] = $cat->name;				$struct['htmlUrl'] = esc_html(get_category_link($cat->term_id));				$struct['rssUrl'] = esc_html(get_category_feed_link($cat->term_id, 'rss2'));				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Uploads a file, following your settings.	 *	 * Adapted from a patch by Johann Richard.	 *	 * @link http://mycvs.org/archives/2004/06/30/file-upload-to-wordpress-in-ecto/	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_newMediaObject($args) {		global $wpdb;		$blog_ID     = (int) $args[0];		$username  = $wpdb->escape($args[1]);		$password   = $wpdb->escape($args[2]);		$data        = $args[3];		$name = sanitize_file_name( $data['name'] );		$type = $data['type'];		$bits = $data['bits'];		logIO('O', '(MW) Received '.strlen($bits).' bytes');		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newMediaObject');		if ( !current_user_can('upload_files') ) {			logIO('O', '(MW) User does not have upload_files capability');			$this->error = new IXR_Error(401, __('You are not allowed to upload files to this site.'));			return $this->error;		}		if ( $upload_err = apply_filters( "pre_upload_error", false ) )			return new IXR_Error(500, $upload_err);		if ( !empty($data["overwrite"]) && ($data["overwrite"] == true) ) {			// Get postmeta info on the object.			$old_file = $wpdb->get_row("				SELECT ID				FROM {$wpdb->posts}				WHERE post_title = '{$name}'					AND post_type = 'attachment'			");			// Delete previous file.			wp_delete_attachment($old_file->ID);			// Make sure the new name is different by pre-pending the			// previous post id.			$filename = preg_replace("/^wpid\d+-/", "", $name);			$name = "wpid{$old_file->ID}-{$filename}";		}		$upload = wp_upload_bits($name, $type, $bits);		if ( ! empty($upload['error']) ) {			$errorString = sprintf(__('Could not write file %1$s (%2$s)'), $name, $upload['error']);			logIO('O', '(MW) ' . $errorString);			return new IXR_Error(500, $errorString);		}		// Construct the attachment array		// attach to post_id 0		$post_id = 0;		$attachment = array(			'post_title' => $name,			'post_content' => '',			'post_type' => 'attachment',			'post_parent' => $post_id,			'post_mime_type' => $type,			'guid' => $upload[ 'url' ]		);		// Save the data		$id = wp_insert_attachment( $attachment, $upload[ 'file' ], $post_id );		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );		return apply_filters( 'wp_handle_upload', array( 'file' => $name, 'url' => $upload[ 'url' ], 'type' => $type ), 'upload' );	}	/* MovableType API functions	 * specs on http://www.movabletype.org/docs/mtmanual_programmatic.html	 */	/**	 * Retrieve the post titles of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getRecentPostTitles($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.getRecentPostTitles');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'title' => $entry['post_title'],				'date_created_gmt' => new IXR_Date($post_date_gmt)			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve list of all categories on blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getCategoryList($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'mt.getCategoryList');		$categories_struct = array();		if ( $cats = get_categories(array('hide_empty' => 0, 'hierarchical' => 0)) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['categoryName'] = $cat->name;				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Retrieve post categories.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you can not edit this post.' ) );		do_action('xmlrpc_call', 'mt.getPostCategories');		$categories = array();		$catids = wp_get_post_categories(intval($post_ID));		// first listed category will be the primary category		$isPrimary = true;		foreach ( $catids as $catid ) {			$categories[] = array(				'categoryName' => get_cat_name($catid),				'categoryId' => (string) $catid,				'isPrimary' => $isPrimary			);			$isPrimary = false;		}		return $categories;	}	/**	 * Sets categories for a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mt_setPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$categories  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.setPostCategories');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		foreach ( $categories as $cat ) {			$catids[] = $cat['categoryId'];		}		wp_set_post_categories($post_ID, $catids);		return true;	}	/**	 * Retrieve an array of methods supported by this server.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_supportedMethods($args) {		do_action('xmlrpc_call', 'mt.supportedMethods');		$supported_methods = array();		foreach ( $this->methods as $key => $value ) {			$supported_methods[] = $key;		}		return $supported_methods;	}	/**	 * Retrieve an empty array because we don't support per-post text filters.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 */	function mt_supportedTextFilters($args) {		do_action('xmlrpc_call', 'mt.supportedTextFilters');		return apply_filters('xmlrpc_text_filters', array());	}	/**	 * Retrieve trackbacks sent to a given post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return mixed	 */	function mt_getTrackbackPings($args) {		global $wpdb;		$post_ID = intval($args);		do_action('xmlrpc_call', 'mt.getTrackbackPings');		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post )			return new IXR_Error(404, __('Sorry, no such post.'));		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$trackback_pings = array();		foreach ( $comments as $comment ) {			if ( 'trackback' == $comment->comment_type ) {				$content = $comment->comment_content;				$title = substr($content, 8, (strpos($content, '</strong>') - 8));				$trackback_pings[] = array(					'pingTitle' => $title,					'pingURL'   => $comment->comment_author_url,					'pingIP'    => $comment->comment_author_IP				);			}		}		return $trackback_pings;	}	/**	 * Sets a post's publish status to 'publish'.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mt_publishPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.publishPost');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		$postdata = wp_get_single_post($post_ID,ARRAY_A);		$postdata['post_status'] = 'publish';		// retain old cats		$cats = wp_get_post_categories($post_ID);		$postdata['post_category'] = $cats;		$this->escape($postdata);		$result = wp_update_post($postdata);		return $result;	}	/* PingBack functions	 * specs on www.hixie.ch/specs/pingback/pingback	 */	/**	 * Retrieves a pingback and registers it.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_ping($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.ping');		$this->escape($args);		$pagelinkedfrom = $args[0];		$pagelinkedto   = $args[1];		$title = '';		$pagelinkedfrom = str_replace('&amp;', '&', $pagelinkedfrom);		$pagelinkedto = str_replace('&amp;', '&', $pagelinkedto);		$pagelinkedto = str_replace('&', '&amp;', $pagelinkedto);		// Check if the page linked to is in our site		$pos1 = strpos($pagelinkedto, str_replace(array('http://www.','http://','https://www.','https://'), '', get_option('home')));		if ( !$pos1 )			return new IXR_Error(0, __('Is there no link to us?'));		// let's find which post is linked to		// FIXME: does url_to_postid() cover all these cases already?		//        if so, then let's use it and drop the old code.		$urltest = parse_url($pagelinkedto);		if ( $post_ID = url_to_postid($pagelinkedto) ) {			$way = 'url_to_postid()';		} elseif ( preg_match('#p/[0-9]{1,}#', $urltest['path'], $match) ) {			// the path defines the post_ID (archives/p/XXXX)			$blah = explode('/', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the path';		} elseif ( preg_match('#p=[0-9]{1,}#', $urltest['query'], $match) ) {			// the querystring defines the post_ID (?p=XXXX)			$blah = explode('=', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the querystring';		} elseif ( isset($urltest['fragment']) ) {			// an #anchor is there, it's either...			if ( intval($urltest['fragment']) ) {				// ...an integer #XXXX (simpliest case)				$post_ID = (int) $urltest['fragment'];				$way = 'from the fragment (numeric)';			} elseif ( preg_match('/post-[0-9]+/',$urltest['fragment']) ) {				// ...a post id in the form 'post-###'				$post_ID = preg_replace('/[^0-9]+/', '', $urltest['fragment']);				$way = 'from the fragment (post-###)';			} elseif ( is_string($urltest['fragment']) ) {				// ...or a string #title, a little more complicated				$title = preg_replace('/[^a-z0-9]/i', '.', $urltest['fragment']);				$sql = $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_title RLIKE %s", $title);				if (! ($post_ID = $wpdb->get_var($sql)) ) {					// returning unknown error '0' is better than die()ing			  		return new IXR_Error(0, '');				}				$way = 'from the fragment (title)';			}		} else {			// TODO: Attempt to extract a post ID from the given URL	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$post_ID = (int) $post_ID;		logIO("O","(PB) URL='$pagelinkedto' ID='$post_ID' Found='$way'");		$post = get_post($post_ID);		if ( !$post ) // Post_ID not found	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		if ( $post_ID == url_to_postid($pagelinkedfrom) )			return new IXR_Error(0, __('The source URL and the target URL cannot both point to the same resource.'));		// Check if pings are on		if ( !pings_open($post) )	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		// Let's check that the remote site didn't already pingback this entry		if ( $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $post_ID, $pagelinkedfrom) ) )			return new IXR_Error( 48, __( 'The pingback has already been registered.' ) );		// very stupid, but gives time to the 'from' server to publish !		sleep(1);		// Let's check the remote site		$linea = wp_remote_fopen( $pagelinkedfrom );		if ( !$linea )	  		return new IXR_Error(16, __('The source URL does not exist.'));		$linea = apply_filters('pre_remote_source', $linea, $pagelinkedto);		// Work around bug in strip_tags():		$linea = str_replace('<!DOC', '<DOC', $linea);		$linea = preg_replace( '/[\s\r\n\t]+/', ' ', $linea ); // normalize spaces		$linea = preg_replace( "/ <(h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body)[^>]*>/", "\n\n", $linea );		preg_match('|<title>([^<]*?)</title>|is', $linea, $matchtitle);		$title = $matchtitle[1];		if ( empty( $title ) )			return new IXR_Error(32, __('We cannot find a title on that page.'));		$linea = strip_tags( $linea, '<a>' ); // just keep the tag we need		$p = explode( "\n\n", $linea );		$preg_target = preg_quote($pagelinkedto, '|');		foreach ( $p as $para ) {			if ( strpos($para, $pagelinkedto) !== false ) { // it exists, but is it a link?				preg_match("|<a[^>]+?".$preg_target."[^>]*>([^>]+?)</a>|", $para, $context);				// If the URL isn't in a link context, keep looking				if ( empty($context) )					continue;				// We're going to use this fake tag to mark the context in a bit				// the marker is needed in case the link text appears more than once in the paragraph				$excerpt = preg_replace('|\</?wpcontext\>|', '', $para);				// prevent really long link text				if ( strlen($context[1]) > 100 )					$context[1] = substr($context[1], 0, 100) . '...';				$marker = '<wpcontext>'.$context[1].'</wpcontext>';    // set up our marker				$excerpt= str_replace($context[0], $marker, $excerpt); // swap out the link for our marker				$excerpt = strip_tags($excerpt, '<wpcontext>');        // strip all tags but our context marker				$excerpt = trim($excerpt);				$preg_marker = preg_quote($marker, '|');				$excerpt = preg_replace("|.*?\s(.{0,100}$preg_marker.{0,100})\s.*|s", '$1', $excerpt);				$excerpt = strip_tags($excerpt); // YES, again, to remove the marker wrapper				break;			}		}		if ( empty($context) ) // Link to target not found			return new IXR_Error(17, __('The source URL does not contain a link to the target URL, and so cannot be used as a source.'));		$pagelinkedfrom = str_replace('&', '&amp;', $pagelinkedfrom);		$context = '[...] ' . esc_html( $excerpt ) . ' [...]';		$pagelinkedfrom = $wpdb->escape( $pagelinkedfrom );		$comment_post_ID = (int) $post_ID;		$comment_author = $title;		$this->escape($comment_author);		$comment_author_url = $pagelinkedfrom;		$comment_content = $context;		$this->escape($comment_content);		$comment_type = 'pingback';		$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_url', 'comment_content', 'comment_type');		$comment_ID = wp_new_comment($commentdata);		do_action('pingback_post', $comment_ID);		return sprintf(__('Pingback from %1$s to %2$s registered. Keep the web talking! :-)'), $pagelinkedfrom, $pagelinkedto);	}	/**	 * Retrieve array of URLs that pingbacked the given URL.	 *	 * Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_extensions_getPingbacks($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.extensions.getPingbacks');		$this->escape($args);		$url = $args;		$post_ID = url_to_postid($url);		if ( !$post_ID ) {			// We aren't sure that the resource is available and/or pingback enabled	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post ) {			// No such post = resource not found	  		return new IXR_Error(32, __('The specified target URL does not exist.'));		}		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$pingbacks = array();		foreach ( $comments as $comment ) {			if ( 'pingback' == $comment->comment_type )				$pingbacks[] = $comment->comment_author_url;		}		return $pingbacks;	}}$wp_xmlrpc_server = new wp_xmlrpc_server();$wp_xmlrpc_server->serve_request();?>
<?php/** * MagpieRSS: a simple RSS integration tool * * A compiled file for RSS syndication * * @author Kellan Elliott-McCrea <kellan@protest.net> * @version 0.51 * @license GPL * * @package External * @subpackage MagpieRSS *//** * Deprecated. Use SimplePie (class-simplepie.php) instead. */_deprecated_file( basename( __FILE__ ), '3.0', WPINC . '/class-simplepie.php' );/* * Hook to use another RSS object instead of MagpieRSS */do_action('load_feed_engine');/** RSS feed constant. */define('RSS', 'RSS');define('ATOM', 'Atom');define('MAGPIE_USER_AGENT', 'WordPress/' . $GLOBALS['wp_version']);class MagpieRSS {	var $parser;	var $current_item	= array();	// item currently being parsed	var $items			= array();	// collection of parsed items	var $channel		= array();	// hash of channel fields	var $textinput		= array();	var $image			= array();	var $feed_type;	var $feed_version;	// parser variables	var $stack				= array(); // parser stack	var $inchannel			= false;	var $initem 			= false;	var $incontent			= false; // if in Atom <content mode="xml"> field	var $intextinput		= false;	var $inimage 			= false;	var $current_field		= '';	var $current_namespace	= false;	//var $ERROR = "";	var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');	function MagpieRSS ($source) {		# if PHP xml isn't compiled in, die		#		if ( !function_exists('xml_parser_create') )			trigger_error( "Failed to load PHP's XML Extension. http://www.php.net/manual/en/ref.xml.php" );		$parser = @xml_parser_create();		if ( !is_resource($parser) )			trigger_error( "Failed to create an instance of PHP's XML parser. http://www.php.net/manual/en/ref.xml.php");		$this->parser = $parser;		# pass in parser, and a reference to this object		# set up handlers		#		xml_set_object( $this->parser, $this );		xml_set_element_handler($this->parser,				'feed_start_element', 'feed_end_element' );		xml_set_character_data_handler( $this->parser, 'feed_cdata' );		$status = xml_parse( $this->parser, $source );		if (! $status ) {			$errorcode = xml_get_error_code( $this->parser );			if ( $errorcode != XML_ERROR_NONE ) {				$xml_error = xml_error_string( $errorcode );				$error_line = xml_get_current_line_number($this->parser);				$error_col = xml_get_current_column_number($this->parser);				$errormsg = "$xml_error at line $error_line, column $error_col";				$this->error( $errormsg );			}		}		xml_parser_free( $this->parser );		$this->normalize();	}	function feed_start_element($p, $element, &$attrs) {		$el = $element = strtolower($element);		$attrs = array_change_key_case($attrs, CASE_LOWER);		// check for a namespace, and split if found		$ns	= false;		if ( strpos( $element, ':' ) ) {			list($ns, $el) = split( ':', $element, 2);		}		if ( $ns and $ns != 'rdf' ) {			$this->current_namespace = $ns;		}		# if feed type isn't set, then this is first element of feed		# identify feed from root element		#		if (!isset($this->feed_type) ) {			if ( $el == 'rdf' ) {				$this->feed_type = RSS;				$this->feed_version = '1.0';			}			elseif ( $el == 'rss' ) {				$this->feed_type = RSS;				$this->feed_version = $attrs['version'];			}			elseif ( $el == 'feed' ) {				$this->feed_type = ATOM;				$this->feed_version = $attrs['version'];				$this->inchannel = true;			}			return;		}		if ( $el == 'channel' )		{			$this->inchannel = true;		}		elseif ($el == 'item' or $el == 'entry' )		{			$this->initem = true;			if ( isset($attrs['rdf:about']) ) {				$this->current_item['about'] = $attrs['rdf:about'];			}		}		// if we're in the default namespace of an RSS feed,		//  record textinput or image fields		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'textinput' )		{			$this->intextinput = true;		}		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'image' )		{			$this->inimage = true;		}		# handle atom content constructs		elseif ( $this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			// avoid clashing w/ RSS mod_content			if ($el == 'content' ) {				$el = 'atom_content';			}			$this->incontent = $el;		}		// if inside an Atom content construct (e.g. content or summary) field treat tags as text		elseif ($this->feed_type == ATOM and $this->incontent )		{			// if tags are inlined, then flatten			$attrs_str = join(' ',					array_map(array('MagpieRSS', 'map_attrs'),					array_keys($attrs),					array_values($attrs) ) );			$this->append_content( "<$element $attrs_str>"  );			array_unshift( $this->stack, $el );		}		// Atom support many links per containging element.		// Magpie treats link elements of type rel='alternate'		// as being equivalent to RSS's simple link element.		//		elseif ($this->feed_type == ATOM and $el == 'link' )		{			if ( isset($attrs['rel']) and $attrs['rel'] == 'alternate' )			{				$link_el = 'link';			}			else {				$link_el = 'link_' . $attrs['rel'];			}			$this->append($link_el, $attrs['href']);		}		// set stack[0] to current element		else {			array_unshift($this->stack, $el);		}	}	function feed_cdata ($p, $text) {		if ($this->feed_type == ATOM and $this->incontent)		{			$this->append_content( $text );		}		else {			$current_el = join('_', array_reverse($this->stack));			$this->append($current_el, $text);		}	}	function feed_end_element ($p, $el) {		$el = strtolower($el);		if ( $el == 'item' or $el == 'entry' )		{			$this->items[] = $this->current_item;			$this->current_item = array();			$this->initem = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'textinput' )		{			$this->intextinput = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'image' )		{			$this->inimage = false;		}		elseif ($this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			$this->incontent = false;		}		elseif ($el == 'channel' or $el == 'feed' )		{			$this->inchannel = false;		}		elseif ($this->feed_type == ATOM and $this->incontent  ) {			// balance tags properly			// note:  i don't think this is actually neccessary			if ( $this->stack[0] == $el )			{				$this->append_content("</$el>");			}			else {				$this->append_content("<$el />");			}			array_shift( $this->stack );		}		else {			array_shift( $this->stack );		}		$this->current_namespace = false;	}	function concat (&$str1, $str2="") {		if (!isset($str1) ) {			$str1="";		}		$str1 .= $str2;	}	function append_content($text) {		if ( $this->initem ) {			$this->concat( $this->current_item[ $this->incontent ], $text );		}		elseif ( $this->inchannel ) {			$this->concat( $this->channel[ $this->incontent ], $text );		}	}	// smart append - field and namespace aware	function append($el, $text) {		if (!$el) {			return;		}		if ( $this->current_namespace )		{			if ( $this->initem ) {				$this->concat(					$this->current_item[ $this->current_namespace ][ $el ], $text);			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $this->current_namespace][ $el ], $text );			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $this->current_namespace][ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $this->current_namespace ][ $el ], $text );			}		}		else {			if ( $this->initem ) {				$this->concat(					$this->current_item[ $el ], $text);			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $el ], $text );			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $el ], $text );			}		}	}	function normalize () {		// if atom populate rss fields		if ( $this->is_atom() ) {			$this->channel['descripton'] = $this->channel['tagline'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['summary']) )					$item['description'] = $item['summary'];				if ( isset($item['atom_content']))					$item['content']['encoded'] = $item['atom_content'];				$this->items[$i] = $item;			}		}		elseif ( $this->is_rss() ) {			$this->channel['tagline'] = $this->channel['description'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['description']))					$item['summary'] = $item['description'];				if ( isset($item['content']['encoded'] ) )					$item['atom_content'] = $item['content']['encoded'];				$this->items[$i] = $item;			}		}	}	function is_rss () {		if ( $this->feed_type == RSS ) {			return $this->feed_version;		}		else {			return false;		}	}	function is_atom() {		if ( $this->feed_type == ATOM ) {			return $this->feed_version;		}		else {			return false;		}	}	function map_attrs($k, $v) {		return "$k=\"$v\"";	}	function error( $errormsg, $lvl = E_USER_WARNING ) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		} else {			error_log( $errormsg, 0);		}	}}if ( !function_exists('fetch_rss') ) :/** * Build Magpie object based on RSS from URL. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve feed * @return bool|MagpieRSS false on failure or MagpieRSS object on success. */function fetch_rss ($url) {	// initialize constants	init();	if ( !isset($url) ) {		// error("fetch_rss called without a url");		return false;	}	// if cache is disabled	if ( !MAGPIE_CACHE_ON ) {		// fetch file, and parse it		$resp = _fetch_remote_file( $url );		if ( is_success( $resp->status ) ) {			return _response_to_rss( $resp );		}		else {			// error("Failed to fetch $url and cache is off");			return false;		}	}	// else cache is ON	else {		// Flow		// 1. check cache		// 2. if there is a hit, make sure its fresh		// 3. if cached obj fails freshness check, fetch remote		// 4. if remote fails, return stale object, or error		$cache = new RSSCache( MAGPIE_CACHE_DIR, MAGPIE_CACHE_AGE );		if (MAGPIE_DEBUG and $cache->ERROR) {			debug($cache->ERROR, E_USER_WARNING);		}		$cache_status 	 = 0;		// response of check_cache		$request_headers = array(); // HTTP headers to send with fetch		$rss 			 = 0;		// parsed RSS object		$errormsg		 = 0;		// errors, if any		if (!$cache->ERROR) {			// return cache HIT, MISS, or STALE			$cache_status = $cache->check_cache( $url );		}		// if object cached, and cache is fresh, return cached obj		if ( $cache_status == 'HIT' ) {			$rss = $cache->get( $url );			if ( isset($rss) and $rss ) {				$rss->from_cache = 1;				if ( MAGPIE_DEBUG > 1) {				debug("MagpieRSS: Cache HIT", E_USER_NOTICE);			}				return $rss;			}		}		// else attempt a conditional get		// set up headers		if ( $cache_status == 'STALE' ) {			$rss = $cache->get( $url );			if ( isset($rss->etag) and $rss->last_modified ) {				$request_headers['If-None-Match'] = $rss->etag;				$request_headers['If-Last-Modified'] = $rss->last_modified;			}		}		$resp = _fetch_remote_file( $url, $request_headers );		if (isset($resp) and $resp) {			if ($resp->status == '304' ) {				// we have the most current copy				if ( MAGPIE_DEBUG > 1) {					debug("Got 304 for $url");				}				// reset cache on 304 (at minutillo insistent prodding)				$cache->set($url, $rss);				return $rss;			}			elseif ( is_success( $resp->status ) ) {				$rss = _response_to_rss( $resp );				if ( $rss ) {					if (MAGPIE_DEBUG > 1) {						debug("Fetch successful");					}					// add object to cache					$cache->set( $url, $rss );					return $rss;				}			}			else {				$errormsg = "Failed to fetch $url. ";				if ( $resp->error ) {					# compensate for Snoopy's annoying habbit to tacking					# on '\n'					$http_error = substr($resp->error, 0, -2);					$errormsg .= "(HTTP Error: $http_error)";				}				else {					$errormsg .=  "(HTTP Response: " . $resp->response_code .')';				}			}		}		else {			$errormsg = "Unable to retrieve RSS file for unknown reasons.";		}		// else fetch failed		// attempt to return cached object		if ($rss) {			if ( MAGPIE_DEBUG ) {				debug("Returning STALE object for $url");			}			return $rss;		}		// else we totally failed		// error( $errormsg );		return false;	} // end if ( !MAGPIE_CACHE_ON ) {} // end fetch_rss()endif;/** * Retrieve URL headers and content using WP HTTP Request API. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve * @param array $headers Optional. Headers to send to the URL. * @return Snoopy style response */function _fetch_remote_file($url, $headers = "" ) {	$resp = wp_remote_request($url, array('headers' => $headers, 'timeout' => MAGPIE_FETCH_TIME_OUT));	if ( is_wp_error($resp) ) {		$error = array_shift($resp->errors);		$resp = new stdClass;		$resp->status = 500;		$resp->response_code = 500;		$resp->error = $error[0] . "\n"; //\n = Snoopy compatibility		return $resp;	}	// Snoopy returns headers unprocessed.	// Also note, WP_HTTP lowercases all keys, Snoopy did not.	$return_headers = array();	foreach ( $resp['headers'] as $key => $value ) {		if ( !is_array($value) ) {			$return_headers[] = "$key: $value";		} else {			foreach ( $value as $v )				$return_headers[] = "$key: $v";		}	}	$response = new stdClass;	$response->status = $resp['response']['code'];	$response->response_code = $resp['response']['code'];	$response->headers = $return_headers;	$response->results = $resp['body'];	return $response;}/** * Retrieve * * @since unknown * @package External * @subpackage MagpieRSS * * @param unknown_type $resp * @return unknown */function _response_to_rss ($resp) {	$rss = new MagpieRSS( $resp->results );	// if RSS parsed successfully	if ( $rss && (!isset($rss->ERROR) || !$rss->ERROR) ) {		// find Etag, and Last-Modified		foreach( (array) $resp->headers as $h) {			// 2003-03-02 - Nicola Asuni (www.tecnick.com) - fixed bug "Undefined offset: 1"			if (strpos($h, ": ")) {				list($field, $val) = explode(": ", $h, 2);			}			else {				$field = $h;				$val = "";			}			if ( $field == 'etag' ) {				$rss->etag = $val;			}			if ( $field == 'last-modified' ) {				$rss->last_modified = $val;			}		}		return $rss;	} // else construct error message	else {		$errormsg = "Failed to parse RSS file.";		if ($rss) {			$errormsg .= " (" . $rss->ERROR . ")";		}		// error($errormsg);		return false;	} // end if ($rss and !$rss->error)}/** * Set up constants with default values, unless user overrides. * * @since unknown * @package External * @subpackage MagpieRSS */function init () {	if ( defined('MAGPIE_INITALIZED') ) {		return;	}	else {		define('MAGPIE_INITALIZED', 1);	}	if ( !defined('MAGPIE_CACHE_ON') ) {		define('MAGPIE_CACHE_ON', 1);	}	if ( !defined('MAGPIE_CACHE_DIR') ) {		define('MAGPIE_CACHE_DIR', './cache');	}	if ( !defined('MAGPIE_CACHE_AGE') ) {		define('MAGPIE_CACHE_AGE', 60*60); // one hour	}	if ( !defined('MAGPIE_CACHE_FRESH_ONLY') ) {		define('MAGPIE_CACHE_FRESH_ONLY', 0);	}		if ( !defined('MAGPIE_DEBUG') ) {		define('MAGPIE_DEBUG', 0);	}	if ( !defined('MAGPIE_USER_AGENT') ) {		$ua = 'WordPress/' . $GLOBALS['wp_version'];		if ( MAGPIE_CACHE_ON ) {			$ua = $ua . ')';		}		else {			$ua = $ua . '; No cache)';		}		define('MAGPIE_USER_AGENT', $ua);	}	if ( !defined('MAGPIE_FETCH_TIME_OUT') ) {		define('MAGPIE_FETCH_TIME_OUT', 2);	// 2 second timeout	}	// use gzip encoding to fetch rss files if supported?	if ( !defined('MAGPIE_USE_GZIP') ) {		define('MAGPIE_USE_GZIP', true);	}}function is_info ($sc) {	return $sc >= 100 && $sc < 200;}function is_success ($sc) {	return $sc >= 200 && $sc < 300;}function is_redirect ($sc) {	return $sc >= 300 && $sc < 400;}function is_error ($sc) {	return $sc >= 400 && $sc < 600;}function is_client_error ($sc) {	return $sc >= 400 && $sc < 500;}function is_server_error ($sc) {	return $sc >= 500 && $sc < 600;}class RSSCache {	var $BASE_CACHE;	// where the cache files are stored	var $MAX_AGE	= 43200;  		// when are files stale, default twelve hours	var $ERROR 		= '';			// accumulate error messages	function RSSCache ($base='', $age='') {		$this->BASE_CACHE = WP_CONTENT_DIR . '/cache';		if ( $base ) {			$this->BASE_CACHE = $base;		}		if ( $age ) {			$this->MAX_AGE = $age;		}	}/*=======================================================================*\	Function:	set	Purpose:	add an item to the cache, keyed on url	Input:		url from wich the rss file was fetched	Output:		true on sucess\*=======================================================================*/	function set ($url, $rss) {		$cache_option = 'rss_' . $this->file_name( $url );		set_transient($cache_option, $rss, $this->MAX_AGE);		return $cache_option;	}/*=======================================================================*\	Function:	get	Purpose:	fetch an item from the cache	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function get ($url) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( ! $rss = get_transient( $cache_option ) ) {			$this->debug(				"Cache doesn't contain: $url (cache option: $cache_option)"			);			return 0;		}		return $rss;	}/*=======================================================================*\	Function:	check_cache	Purpose:	check a url for membership in the cache				and whether the object is older then MAX_AGE (ie. STALE)	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function check_cache ( $url ) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( get_transient($cache_option) ) {			// object exists and is current				return 'HIT';		} else {			// object does not exist			return 'MISS';		}	}/*=======================================================================*\	Function:	serialize\*=======================================================================*/	function serialize ( $rss ) {		return serialize( $rss );	}/*=======================================================================*\	Function:	unserialize\*=======================================================================*/	function unserialize ( $data ) {		return unserialize( $data );	}/*=======================================================================*\	Function:	file_name	Purpose:	map url to location in cache	Input:		url from wich the rss file was fetched	Output:		a file name\*=======================================================================*/	function file_name ($url) {		return md5( $url );	}/*=======================================================================*\	Function:	error	Purpose:	register error\*=======================================================================*/	function error ($errormsg, $lvl=E_USER_WARNING) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		$this->ERROR = $errormsg;		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		}		else {			error_log( $errormsg, 0);		}	}			function debug ($debugmsg, $lvl=E_USER_NOTICE) {		if ( MAGPIE_DEBUG ) {			$this->error("MagpieRSS [debug] $debugmsg", $lvl);		}	}}if ( !function_exists('parse_w3cdtf') ) :function parse_w3cdtf ( $date_str ) {	# regex to match wc3dtf	$pat = "/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/";	if ( preg_match( $pat, $date_str, $match ) ) {		list( $year, $month, $day, $hours, $minutes, $seconds) =			array( $match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);		# calc epoch for current date assuming GMT		$epoch = gmmktime( $hours, $minutes, $seconds, $month, $day, $year);		$offset = 0;		if ( $match[11] == 'Z' ) {			# zulu time, aka GMT		}		else {			list( $tz_mod, $tz_hour, $tz_min ) =				array( $match[8], $match[9], $match[10]);			# zero out the variables			if ( ! $tz_hour ) { $tz_hour = 0; }			if ( ! $tz_min ) { $tz_min = 0; }			$offset_secs = (($tz_hour*60)+$tz_min)*60;			# is timezone ahead of GMT?  then subtract offset			#			if ( $tz_mod == '+' ) {				$offset_secs = $offset_secs * -1;			}			$offset = $offset_secs;		}		$epoch = $epoch + $offset;		return $epoch;	}	else {		return -1;	}}endif;if ( !function_exists('wp_rss') ) :/** * Display all RSS items in a HTML ordered list. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. */function wp_rss( $url, $num_items = -1 ) {	if ( $rss = fetch_rss( $url ) ) {		echo '<ul>';		if ( $num_items !== -1 ) {			$rss->items = array_slice( $rss->items, 0, $num_items );		}		foreach ( (array) $rss->items as $item ) {			printf(				'<li><a href="%1$s" title="%2$s">%3$s</a></li>',				esc_url( $item['link'] ),				esc_attr( strip_tags( $item['description'] ) ),				htmlentities( $item['title'] )			);		}		echo '</ul>';	} else {		_e( 'An error has occurred, which probably means the feed is down. Try again later.' );	}}endif;if ( !function_exists('get_rss') ) :/** * Display RSS items in HTML list items. * * You have to specify which HTML list you want, either ordered or unordered * before using the function. You also have to specify how many items you wish * to display. You can't display all of them like you can with wp_rss() * function. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. * @return bool False on failure. */function get_rss ($url, $num_items = 5) { // Like get posts, but for RSS	$rss = fetch_rss($url);	if ( $rss ) {		$rss->items = array_slice($rss->items, 0, $num_items);		foreach ( (array) $rss->items as $item ) {			echo "<li>\n";			echo "<a href='$item[link]' title='$item[description]'>";			echo htmlentities($item['title']);			echo "</a><br />\n";			echo "</li>\n";		}	} else {		return false;	}}endif;?>
<?php/** * Simple and uniform HTTP request API. * * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * WordPress HTTP Class for managing HTTP Transports and making HTTP requests. * * This class is called for the functionality of making HTTP requests and replaces Snoopy * functionality. There is no available functionality to add HTTP transport implementations, since * most of the HTTP transports are added and available for use. * * There are no properties, because none are needed and for performance reasons. Some of the * functions are static and while they do have some overhead over functions in PHP4, the purpose is * maintainability. When PHP5 is finally the requirement, it will be easy to add the static keyword * to the code. It is not as easy to convert a function to a method after enough code uses the old * way. * * Debugging includes several actions, which pass different variables for debugging the HTTP API. * * <strong>http_transport_get_debug</strong> - gives working, nonblocking, and blocking transports. * * <strong>http_transport_post_debug</strong> - gives working, nonblocking, and blocking transports. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http {	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor	 *	 * @since 2.7.0	 * @return WP_Http	 */	function WP_Http() {		$this->__construct();	}	/**	 * PHP5 style Constructor - Set up available transport if not available.	 *	 * PHP4 does not have the 'self' keyword and since WordPress supports PHP4, the class needs to	 * be used for the static call. The transport are set up to save time and will only be created	 * once. This class can be created many times without having to go through the step of finding	 * which transports are available.	 *	 * @since 2.7.0	 * @return WP_Http	 */	function __construct() {		WP_Http::_getTransport();		WP_Http::_postTransport();	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches that object to be	 * used later.	 *	 * The order for the GET/HEAD requests are HTTP Extension, cURL, Streams, Fopen, and finally	 * Fsockopen. fsockopen() is used last, because it has the most overhead in its implementation.	 * There isn't any real way around it, since redirects have to be supported, much the same way	 * the other transports also handle redirects.	 *	 * There are currently issues with "localhost" not resolving correctly with DNS. This may cause	 * an error "failed to open stream: A connection attempt failed because the connected party did	 * not properly respond after a period of time, or established connection failed because [the]	 * connected host has failed to respond."	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_getTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fopen::test($args) ) {				$working_transport['fopen'] = new WP_Http_Fopen();				$blocking_transport[] = &$working_transport['fopen'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fopen', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_get_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches	 * that object to be used later. This is for posting content to a URL and	 * is used when there is a body. The plain Fopen Transport can not be used	 * to send content, but the streams transport can. This is a limitation that	 * is addressed here, by just not including that transport.	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_postTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_post_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Send a HTTP request to a URI.	 *	 * The body and headers are part of the arguments. The 'body' argument is for the body and will	 * accept either a string or an array. The 'headers' argument should be an array, but a string	 * is acceptable. If the 'body' argument is an array, then it will automatically be escaped	 * using http_build_query().	 *	 * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS	 * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send	 * headers. Other protocols are unsupported and most likely will fail.	 *	 * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and	 * 'user-agent'.	 *	 * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow	 * others, but should not be assumed. The 'timeout' is used to sent how long the connection	 * should stay open before failing when no response. 'redirection' is used to track how many	 * redirects were taken and used to sent the amount for other transports, but not all transports	 * accept setting that value.	 *	 * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and	 * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The	 * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is	 * 'WordPress/WP_Version', where WP_Version is the value from $wp_version.	 *	 * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP	 * while it performs the request or continue regardless. Actually, that isn't entirely correct.	 * Blocking mode really just means whether the fread should just pull what it can whenever it	 * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading	 * the entire content. It doesn't actually always mean that PHP will continue going after making	 * the request.	 *	 * @access public	 * @since 2.7.0	 * @todo Refactor this code. The code in this method extends the scope of its original purpose	 *		and should be refactored to allow for cleaner abstraction and reduce duplication of the	 *		code. One suggestion is to create a class specifically for the arguments, however	 *		preliminary refactoring to this affect has affect more than just the scope of the	 *		arguments. Something to ponder at least.	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array containing 'headers', 'body', 'response', 'cookies'	 */	function request( $url, $args = array() ) {		global $wp_version;		$defaults = array(			'method' => 'GET',			'timeout' => apply_filters( 'http_request_timeout', 5),			'redirection' => apply_filters( 'http_request_redirection_count', 5),			'httpversion' => apply_filters( 'http_request_version', '1.0'),			'user-agent' => apply_filters( 'http_headers_useragent', 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )  ),			'blocking' => true,			'headers' => array(),			'cookies' => array(),			'body' => null,			'compress' => false,			'decompress' => true,			'sslverify' => true		);		$r = wp_parse_args( $args, $defaults );		$r = apply_filters( 'http_request_args', $r, $url );		// Allow plugins to short-circuit the request		$pre = apply_filters( 'pre_http_request', false, $r, $url );		if ( false !== $pre )			return $pre;		$arrURL = parse_url($url);		if ( empty( $url ) || empty($url['scheme'] ) )			return new WP_Error('http_request_failed', __('A valid URL was not provided.'));		if ( $this->block_request( $url ) )			return new WP_Error('http_request_failed', __('User has blocked requests through HTTP.'));		// Determine if this is a https call and pass that on to the transport functions		// so that we can blacklist the transports that do not support ssl verification		$r['ssl'] = $arrURL['scheme'] == 'https' || $arrURL['scheme'] == 'ssl';		// Determine if this request is to OUR install of WordPress		$homeURL = parse_url( get_bloginfo('url') );		$r['local'] = $homeURL['host'] == $arrURL['host'] || 'localhost' == $arrURL['host'];		unset($homeURL);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( ! is_array($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		}		if ( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		if ( WP_Http_Encoding::is_available() )			$r['headers']['Accept-Encoding'] = WP_Http_Encoding::accept_encoding();		if ( empty($r['body']) ) {			// Some servers fail when sending content without the content-length header being set.			// Also, to fix another bug, we only send when doing POST and PUT and the content-length			// header isn't already set.			if( ($r['method'] == 'POST' || $r['method'] == 'PUT') && ! isset($r['headers']['Content-Length']) )				$r['headers']['Content-Length'] = 0;			// The method is ambiguous, because we aren't talking about HTTP methods, the "get" in			// this case is simply that we aren't sending any bodies and to get the transports that			// don't support sending bodies along with those which do.			$transports = WP_Http::_getTransport($r);		} else {			if ( is_array( $r['body'] ) || is_object( $r['body'] ) ) {				if ( ! version_compare(phpversion(), '5.1.2', '>=') )					$r['body'] = _http_build_query($r['body'], null, '&');				else					$r['body'] = http_build_query($r['body'], null, '&');				$r['headers']['Content-Type'] = 'application/x-www-form-urlencoded; charset=' . get_option('blog_charset');				$r['headers']['Content-Length'] = strlen($r['body']);			}			if ( ! isset( $r['headers']['Content-Length'] ) && ! isset( $r['headers']['content-length'] ) )				$r['headers']['Content-Length'] = strlen($r['body']);			// The method is ambiguous, because we aren't talking about HTTP methods, the "post" in			// this case is simply that we are sending HTTP body and to get the transports that do			// support sending the body. Not all do, depending on the limitations of the PHP core			// limitations.			$transports = WP_Http::_postTransport($r);		}		do_action( 'http_api_debug', $transports, 'transports_list' );		$response = array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		foreach ( (array) $transports as $transport ) {			$response = $transport->request($url, $r);			do_action( 'http_api_debug', $response, 'response', get_class($transport) );			if ( ! is_wp_error($response) )				return apply_filters( 'http_response', $response, $r, $url );		}		return $response;	}	/**	 * Uses the POST HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function post($url, $args = array()) {		$defaults = array('method' => 'POST');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the GET HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function get($url, $args = array()) {		$defaults = array('method' => 'GET');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the HEAD HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function head($url, $args = array()) {		$defaults = array('method' => 'HEAD');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Parses the responses and splits the parts into headers and body.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string $strResponse The full response string	 * @return array Array with 'headers' and 'body' keys.	 */	function processResponse($strResponse) {		$res = explode("\r\n\r\n", $strResponse, 2);		return array('headers' => isset($res[0]) ? $res[0] : array(), 'body' => isset($res[1]) ? $res[1] : '');	}	/**	 * Transform header string into an array.	 *	 * If an array is given then it is assumed to be raw header data with numeric keys with the	 * headers as the values. No headers must be passed that were already processed.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string|array $headers	 * @return array Processed string headers. If duplicate headers are encountered,	 * 					Then a numbered array is returned as the value of that header-key.	 */	function processHeaders($headers) {		// split headers, one per array element		if ( is_string($headers) ) {			// tolerate line terminator: CRLF = LF (RFC 2616 19.3)			$headers = str_replace("\r\n", "\n", $headers);			// unfold folded header fields. LWS = [CRLF] 1*( SP | HT ) <US-ASCII SP, space (32)>, <US-ASCII HT, horizontal-tab (9)> (RFC 2616 2.2)			$headers = preg_replace('/\n[ \t]/', ' ', $headers);			// create the headers array			$headers = explode("\n", $headers);		}		$response = array('code' => 0, 'message' => '');		// If a redirection has taken place, The headers for each page request may have been passed.		// In this case, determine the final HTTP header and parse from there.		for ( $i = count($headers)-1; $i >= 0; $i-- ) {			if ( !empty($headers[$i]) && false === strpos($headers[$i], ':') ) {				$headers = array_splice($headers, $i);				break;			}		}		$cookies = array();		$newheaders = array();		foreach ( $headers as $tempheader ) {			if ( empty($tempheader) )				continue;			if ( false === strpos($tempheader, ':') ) {				list( , $response['code'], $response['message']) = explode(' ', $tempheader, 3);				continue;			}			list($key, $value) = explode(':', $tempheader, 2);			if ( !empty( $value ) ) {				$key = strtolower( $key );				if ( isset( $newheaders[$key] ) ) {					if ( !is_array($newheaders[$key]) )						$newheaders[$key] = array($newheaders[$key]);					$newheaders[$key][] = trim( $value );				} else {					$newheaders[$key] = trim( $value );				}				if ( 'set-cookie' == strtolower( $key ) )					$cookies[] = new WP_Http_Cookie( $value );			}		}		return array('response' => $response, 'headers' => $newheaders, 'cookies' => $cookies);	}	/**	 * Takes the arguments for a ::request() and checks for the cookie array.	 *	 * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed	 * into strings and added to the Cookie: header (within the arguments array). Edits the array by	 * reference.	 *	 * @access public	 * @version 2.8.0	 * @static	 *	 * @param array $r Full array of args passed into ::request()	 */	function buildCookieHeader( &$r ) {		if ( ! empty($r['cookies']) ) {			$cookies_header = '';			foreach ( (array) $r['cookies'] as $cookie ) {				$cookies_header .= $cookie->getHeaderValue() . '; ';			}			$cookies_header = substr( $cookies_header, 0, -2 );			$r['headers']['cookie'] = $cookies_header;		}	}	/**	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.	 *	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support	 * returning footer headers. Shouldn't be too difficult to support it though.	 *	 * @todo Add support for footer chunked headers.	 * @access public	 * @since 2.7.0	 * @static	 *	 * @param string $body Body content	 * @return string Chunked decoded body on success or raw body on failure.	 */	function chunkTransferDecode($body) {		$body = str_replace(array("\r\n", "\r"), "\n", $body);		// The body is not chunked encoding or is malformed.		if ( ! preg_match( '/^[0-9a-f]+(\s|\n)+/mi', trim($body) ) )			return $body;		$parsedBody = '';		//$parsedHeaders = array(); Unsupported		while ( true ) {			$hasChunk = (bool) preg_match( '/^([0-9a-f]+)(\s|\n)+/mi', $body, $match );			if ( $hasChunk ) {				if ( empty( $match[1] ) )					return $body;				$length = hexdec( $match[1] );				$chunkLength = strlen( $match[0] );				$strBody = substr($body, $chunkLength, $length);				$parsedBody .= $strBody;				$body = ltrim(str_replace(array($match[0], $strBody), '', $body), "\n");				if ( "0" == trim($body) )					return $parsedBody; // Ignore footer headers.			} else {				return $body;			}		}	}	/**	 * Block requests through the proxy.	 *	 * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will	 * prevent plugins from working and core functionality, if you don't include api.wordpress.org.	 *	 * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php	 * file and this will only allow localhost and your blog to make requests. The constant	 * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the	 * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow.	 *	 * @since 2.8.0	 * @link http://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.	 *	 * @param string $uri URI of url.	 * @return bool True to block, false to allow.	 */	function block_request($uri) {		// We don't need to block requests, because nothing is blocked.		if ( ! defined( 'WP_HTTP_BLOCK_EXTERNAL' ) || ! WP_HTTP_BLOCK_EXTERNAL )			return false;		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		/* Malformed URL, can not process, but this could mean ssl, so let through anyway.		 *		 * This isn't very security sound. There are instances where a hacker might attempt		 * to bypass the proxy and this check. However, the reason for this behavior is that		 * WordPress does not do any checking currently for non-proxy requests, so it is keeps with		 * the default unsecure nature of the HTTP request.		 */		if ( $check === false )			return false;		$home = parse_url( get_option('siteurl') );		// Don't block requests back to ourselves by default		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return apply_filters('block_local_requests', false);		if ( !defined('WP_ACCESSIBLE_HOSTS') )			return true;		static $accessible_hosts;		if ( null == $accessible_hosts )			$accessible_hosts = preg_split('|,\s*|', WP_ACCESSIBLE_HOSTS);		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.	}}/** * HTTP request method uses fsockopen function to retrieve the url. * * This would be the preferred method, but the fsockopen implementation has the most overhead of all * the HTTP transport implementations. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fsockopen {	/**	 * Send a HTTP request to a URI using fsockopen().	 *	 * Does not support non-blocking mode.	 *	 * @see WP_Http::request For default options descriptions.	 *	 * @since 2.7	 * @access public	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$iError = null; // Store error number		$strError = null; // Store error string		$arrURL = parse_url($url);		$fsockopen_host = $arrURL['host'];		$secure_transport = false;		if ( ! isset( $arrURL['port'] ) ) {			if ( ( $arrURL['scheme'] == 'ssl' || $arrURL['scheme'] == 'https' ) && extension_loaded('openssl') ) {				$fsockopen_host = "ssl://$fsockopen_host";				$arrURL['port'] = 443;				$secure_transport = true;			} else {				$arrURL['port'] = 80;			}		}		//fsockopen has issues with 'localhost' with IPv6 with certain versions of PHP, It attempts to connect to ::1,		// which fails when the server is not set up for it. For compatibility, always connect to the IPv4 address.		if ( 'localhost' == strtolower($fsockopen_host) )			$fsockopen_host = '127.0.0.1';		// There are issues with the HTTPS and SSL protocols that cause errors that can be safely		// ignored and should be ignored.		if ( true === $secure_transport )			$error_reporting = error_reporting(0);		$startDelay = time();		$proxy = new WP_HTTP_Proxy();		if ( !WP_DEBUG ) {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = @fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = @fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		} else {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		}		$endDelay = time();		// If the delay is greater than the timeout then fsockopen should't be used, because it will		// cause a long delay.		$elapseDelay = ($endDelay-$startDelay) > $r['timeout'];		if ( true === $elapseDelay )			add_option( 'disable_fsockopen', $endDelay, null, true );		if ( false === $handle )			return new WP_Error('http_request_failed', $iError . ': ' . $strError);		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) //Some proxies require full URL in this field.			$requestPath = $url;		else			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );		if ( empty($requestPath) )			$requestPath .= '/';		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";		else			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";		if ( isset($r['user-agent']) )			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";		if ( is_array($r['headers']) ) {			foreach ( (array) $r['headers'] as $header => $headerValue )				$strHeaders .= $header . ': ' . $headerValue . "\r\n";		} else {			$strHeaders .= $r['headers'];		}		if ( $proxy->use_authentication() )			$strHeaders .= $proxy->authentication_header() . "\r\n";		$strHeaders .= "\r\n";		if ( ! is_null($r['body']) )			$strHeaders .= $r['body'];		fwrite($handle, $strHeaders);		if ( ! $r['blocking'] ) {			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		fclose($handle);		if ( true === $secure_transport )			error_reporting($error_reporting);		$process = WP_Http::processResponse($strResponse);		$arrHeaders = WP_Http::processHeaders($process['headers']);		// Is the response code within the 400 range?		if ( (int) $arrHeaders['response']['code'] >= 400 && (int) $arrHeaders['response']['code'] < 500 )			return new WP_Error('http_request_failed', $arrHeaders['response']['code'] . ': ' . $arrHeaders['response']['message']);		// If location is found, then assume redirect and redirect to location.		if ( 'HEAD' != $r['method'] && isset($arrHeaders['headers']['location']) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($arrHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		// If the body was chunk encoded, then decode it.		if ( ! empty( $process['body'] ) && isset( $arrHeaders['headers']['transfer-encoding'] ) && 'chunked' == $arrHeaders['headers']['transfer-encoding'] )			$process['body'] = WP_Http::chunkTransferDecode($process['body']);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($arrHeaders['headers']) )			$process['body'] = WP_Http_Encoding::decompress( $process['body'] );		return array('headers' => $arrHeaders['headers'], 'body' => $process['body'], 'response' => $arrHeaders['response'], 'cookies' => $arrHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test( $args = array() ) {		if ( false !== ($option = get_option( 'disable_fsockopen' )) && time()-$option < 43200 ) // 12 hours			return false;		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( ! $is_ssl && function_exists( 'fsockopen' ) )			$use = true;		elseif ( $is_ssl && extension_loaded('openssl') && function_exists( 'fsockopen' ) )			$use = true;		else			$use = false;		return apply_filters('use_fsockopen_transport', $use, $args);	}}/** * HTTP request method uses fopen function to retrieve the url. * * Requires PHP version greater than 4.3.0 for stream support. Does not allow for $context support, * but should still be okay, to write the headers, before getting the response. Also requires that * 'allow_url_fopen' to be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fopen {	/**	 * Send a HTTP request to a URI using fopen().	 *	 * This transport does not support sending of headers and body, therefore should not be used in	 * the instances, where there is a body and headers.	 *	 * Notes: Does not support non-blocking mode. Ignores 'redirection' option.	 *	 * @see WP_Http::retrieve For default options descriptions.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = str_replace($arrURL['scheme'], 'http', $url);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( is_string($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		$initial_user_agent = ini_get('user_agent');		if ( !empty($r['headers']) && is_array($r['headers']) ) {			$user_agent_extra_headers = '';			foreach ( $r['headers'] as $header => $value )				$user_agent_extra_headers .= "\r\n$header: $value";			@ini_set('user_agent', $r['user-agent'] . $user_agent_extra_headers);		} else {			@ini_set('user_agent', $r['user-agent']);		}		if ( !WP_DEBUG )			$handle = @fopen($url, 'r');		else			$handle = fopen($url, 'r');		if (! $handle)			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			fclose($handle);			@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		if ( function_exists('stream_get_meta_data') ) {			$meta = stream_get_meta_data($handle);			$theHeaders = $meta['wrapper_data'];			if ( isset( $meta['wrapper_data']['headers'] ) )				$theHeaders = $meta['wrapper_data']['headers'];		} else {			//$http_response_header is a PHP reserved variable which is set in the current-scope when using the HTTP Wrapper			//see http://php.oregonstate.edu/manual/en/reserved.variables.httpresponseheader.php			$theHeaders = $http_response_header;		}		fclose($handle);		@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added		$processedHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( isset($args['method']) && 'HEAD' == $args['method'] ) //This transport cannot make a HEAD request			return false;		$use = true;		//PHP does not verify SSL certs, We can only make a request via this transports if SSL Verification is turned off.		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl ) {			$is_local = isset($args['local']) && $args['local'];			$ssl_verify = isset($args['sslverify']) && $args['sslverify'];			if ( $is_local && true != apply_filters('https_local_ssl_verify', true) )				$use = true;			elseif ( !$is_local && true != apply_filters('https_ssl_verify', true) )				$use = true;			elseif ( !$ssl_verify )				$use = true;			else				$use = false;		}		return apply_filters('use_fopen_transport', $use, $args);	}}/** * HTTP request method uses Streams to retrieve the url. * * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting * to be enabled. * * Second preferred method for getting the URL, for PHP 5. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Streams {	/**	 * Send a HTTP request to a URI using streams with fopen().	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		// Convert Header array to string.		$strHeaders = '';		if ( is_array( $r['headers'] ) )			foreach ( $r['headers'] as $name => $value )				$strHeaders .= "{$name}: $value\r\n";		else if ( is_string( $r['headers'] ) )			$strHeaders = $r['headers'];		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$arrContext = array('http' =>			array(				'method' => strtoupper($r['method']),				'user_agent' => $r['user-agent'],				'max_redirects' => $r['redirection'] + 1, // See #11557				'protocol_version' => (float) $r['httpversion'],				'header' => $strHeaders,				'ignore_errors' => true, // Return non-200 requests.				'timeout' => $r['timeout'],				'ssl' => array(						'verify_peer' => $ssl_verify,						'verify_host' => $ssl_verify				)			)		);		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$arrContext['http']['proxy'] = 'tcp://' . $proxy->host() . ':' . $proxy->port();			$arrContext['http']['request_fulluri'] = true;			// We only support Basic authentication so this will only work if that is what your proxy supports.			if ( $proxy->use_authentication() )				$arrContext['http']['header'] .= $proxy->authentication_header() . "\r\n";		}		if ( 'HEAD' == $r['method'] ) // Disable redirects for HEAD requests			$arrContext['http']['max_redirects'] = 1;		if ( ! empty($r['body'] ) )			$arrContext['http']['content'] = $r['body'];		$context = stream_context_create($arrContext);		if ( !WP_DEBUG )			$handle = @fopen($url, 'r', false, $context);		else			$handle = fopen($url, 'r', false, $context);		if ( ! $handle )			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			stream_set_blocking($handle, 0);			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = stream_get_contents($handle);		$meta = stream_get_meta_data($handle);		fclose($handle);		$processedHeaders = array();		if ( isset( $meta['wrapper_data']['headers'] ) )			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']['headers']);		else			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @access public	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( version_compare(PHP_VERSION, '5.0', '<') )			return false;		//HTTPS via Proxy was added in 5.1.0		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl && version_compare(PHP_VERSION, '5.1.0', '<') ) {			$proxy = new WP_HTTP_Proxy();			/**			 * No URL check, as its not currently passed to the ::test() function			 * In the case where a Proxy is in use, Just bypass this transport for HTTPS.			 */			if ( $proxy->is_enabled() )				return false;		}		return apply_filters('use_streams_transport', true, $args);	}}/** * HTTP request method uses HTTP extension to retrieve the url. * * Requires the HTTP extension to be installed. This would be the preferred transport since it can * handle a lot of the problems that forces the others to use the HTTP version 1.0. Even if PHP 5.2+ * is being used, it doesn't mean that the HTTP extension will be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_ExtHTTP {	/**	 * Send a HTTP request to a URI using HTTP extension.	 *	 * Does not support non-blocking.	 *	 * @access public	 * @since 2.7	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		switch ( $r['method'] ) {			case 'POST':				$r['method'] = HTTP_METH_POST;				break;			case 'HEAD':				$r['method'] = HTTP_METH_HEAD;				break;			case 'PUT':				$r['method'] =  HTTP_METH_PUT;				break;			case 'GET':			default:				$r['method'] = HTTP_METH_GET;		}		$arrURL = parse_url($url);		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$r['timeout'] = (int) ceil( $r['timeout'] );		$options = array(			'timeout' => $r['timeout'],			'connecttimeout' => $r['timeout'],			'redirect' => $r['redirection'],			'useragent' => $r['user-agent'],			'headers' => $r['headers'],			'ssl' => array(				'verifypeer' => $ssl_verify,				'verifyhost' => $ssl_verify			)		);		if ( HTTP_METH_HEAD == $r['method'] )			$options['redirect'] = 0; // Assumption: Docs seem to suggest that this means do not follow. Untested.		// The HTTP extensions offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$options['proxyhost'] = $proxy->host();			$options['proxyport'] = $proxy->port();			$options['proxytype'] = HTTP_PROXY_HTTP;			if ( $proxy->use_authentication() ) {				$options['proxyauth'] = $proxy->authentication();				$options['proxyauthtype'] = HTTP_AUTH_ANY;			}		}		if ( !WP_DEBUG ) //Emits warning level notices for max redirects and timeouts			$strResponse = @http_request($r['method'], $url, $r['body'], $options, $info);		else			$strResponse = http_request($r['method'], $url, $r['body'], $options, $info); //Emits warning level notices for max redirects and timeouts		// Error may still be set, Response may return headers or partial document, and error		// contains a reason the request was aborted, eg, timeout expired or max-redirects reached.		if ( false === $strResponse || ! empty($info['error']) )			return new WP_Error('http_request_failed', $info['response_code'] . ': ' . $info['error']);		if ( ! $r['blocking'] )			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		$headers_body = WP_HTTP::processResponse($strResponse);		$theHeaders = $headers_body['headers'];		$theBody = $headers_body['body'];		unset($headers_body);		$theHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $theBody ) && isset( $theHeaders['headers']['transfer-encoding'] ) && 'chunked' == $theHeaders['headers']['transfer-encoding'] ) {			if ( !WP_DEBUG )				$theBody = @http_chunked_decode($theBody);			else				$theBody = http_chunked_decode($theBody);		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = http_inflate( $theBody );		$theResponse = array();		$theResponse['code'] = $info['response_code'];		$theResponse['message'] = get_status_header_desc($info['response_code']);		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $theResponse, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		return apply_filters('use_http_extension_transport', function_exists('http_request'), $args );	}}/** * HTTP request method uses Curl extension to retrieve the url. * * Requires the Curl extension to be installed. * * @package WordPress * @subpackage HTTP * @since 2.7 */class WP_Http_Curl {	/**	 * Send a HTTP request to a URI using cURL extension.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set.		WP_Http::buildCookieHeader( $r );		$handle = curl_init();		// cURL offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$isPHP5 = version_compare(PHP_VERSION, '5.0.0', '>=');			if ( $isPHP5 ) {				curl_setopt( $handle, CURLOPT_PROXYTYPE, CURLPROXY_HTTP );				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() );				curl_setopt( $handle, CURLOPT_PROXYPORT, $proxy->port() );			} else {				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() .':'. $proxy->port() );			}			if ( $proxy->use_authentication() ) {				if ( $isPHP5 )					curl_setopt( $handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );				curl_setopt( $handle, CURLOPT_PROXYUSERPWD, $proxy->authentication() );			}		}		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		// CURLOPT_TIMEOUT and CURLOPT_CONNECTTIMEOUT expect integers.  Have to use ceil since		// a value of 0 will allow an ulimited timeout.		$timeout = (int) ceil( $r['timeout'] );		curl_setopt( $handle, CURLOPT_CONNECTTIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_TIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_URL, $url);		curl_setopt( $handle, CURLOPT_RETURNTRANSFER, true );		curl_setopt( $handle, CURLOPT_SSL_VERIFYHOST, $ssl_verify );		curl_setopt( $handle, CURLOPT_SSL_VERIFYPEER, $ssl_verify );		curl_setopt( $handle, CURLOPT_USERAGENT, $r['user-agent'] );		curl_setopt( $handle, CURLOPT_MAXREDIRS, $r['redirection'] );		switch ( $r['method'] ) {			case 'HEAD':				curl_setopt( $handle, CURLOPT_NOBODY, true );				break;			case 'POST':				curl_setopt( $handle, CURLOPT_POST, true );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;			case 'PUT':				curl_setopt( $handle, CURLOPT_CUSTOMREQUEST, 'PUT' );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;		}		if ( true === $r['blocking'] )			curl_setopt( $handle, CURLOPT_HEADER, true );		else			curl_setopt( $handle, CURLOPT_HEADER, false );		// The option doesn't work with safe mode or when open_basedir is set.		// Disable HEAD when making HEAD requests.		if ( !ini_get('safe_mode') && !ini_get('open_basedir') && 'HEAD' != $r['method'] )			curl_setopt( $handle, CURLOPT_FOLLOWLOCATION, true );		if ( !empty( $r['headers'] ) ) {			// cURL expects full header strings in each element			$headers = array();			foreach ( $r['headers'] as $name => $value ) {				$headers[] = "{$name}: $value";			}			curl_setopt( $handle, CURLOPT_HTTPHEADER, $headers );		}		if ( $r['httpversion'] == '1.0' )			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0 );		else			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1 );		// Cookies are not handled by the HTTP API currently. Allow for plugin authors to handle it		// themselves... Although, it is somewhat pointless without some reference.		do_action_ref_array( 'http_api_curl', array(&$handle) );		// We don't need to return the body, so don't. Just execute request and return.		if ( ! $r['blocking'] ) {			curl_exec( $handle );			curl_close( $handle );			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$theResponse = curl_exec( $handle );		if ( !empty($theResponse) ) {			$headerLength = curl_getinfo($handle, CURLINFO_HEADER_SIZE);			$theHeaders = trim( substr($theResponse, 0, $headerLength) );			if ( strlen($theResponse) > $headerLength )				$theBody = substr( $theResponse, $headerLength );			else				$theBody = '';			if ( false !== strrpos($theHeaders, "\r\n\r\n") ) {				$headerParts = explode("\r\n\r\n", $theHeaders);				$theHeaders = $headerParts[ count($headerParts) -1 ];			}			$theHeaders = WP_Http::processHeaders($theHeaders);		} else {			if ( $curl_error = curl_error($handle) )				return new WP_Error('http_request_failed', $curl_error);			if ( in_array( curl_getinfo( $handle, CURLINFO_HTTP_CODE ), array(301, 302) ) )				return new WP_Error('http_request_failed', __('Too many redirects.'));			$theHeaders = array( 'headers' => array(), 'cookies' => array() );			$theBody = '';		}		$response = array();		$response['code'] = curl_getinfo( $handle, CURLINFO_HTTP_CODE );		$response['message'] = get_status_header_desc($response['code']);		curl_close( $handle );		// See #11305 - When running under safe mode, redirection is disabled above. Handle it manually.		if ( !empty($theHeaders['headers']['location']) && (ini_get('safe_mode') || ini_get('open_basedir')) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($theHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = WP_Http_Encoding::decompress( $theBody );		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $response, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( function_exists('curl_init') && function_exists('curl_exec') )			return apply_filters('use_curl_transport', true, $args);		return false;	}}/** * Adds Proxy support to the WordPress HTTP API. * * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to * enable proxy support. There are also a few filters that plugins can hook into for some of the * constants. * * Please note that only BASIC authentication is supported by most transports. * cURL and the PHP HTTP Extension MAY support more methods (such as NTLM authentication) depending on your environment. * * The constants are as follows: * <ol> * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li> * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li> * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li> * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li> * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy. * You do not need to have localhost and the blog host in this list, because they will not be passed * through the proxy. The list should be presented in a comma separated list</li> * </ol> * * An example can be as seen below. * <code> * define('WP_PROXY_HOST', '192.168.84.101'); * define('WP_PROXY_PORT', '8080'); * define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com'); * </code> * * @link http://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress. * @since 2.8 */class WP_HTTP_Proxy {	/**	 * Whether proxy connection should be used.	 *	 * @since 2.8	 * @use WP_PROXY_HOST	 * @use WP_PROXY_PORT	 *	 * @return bool	 */	function is_enabled() {		return defined('WP_PROXY_HOST') && defined('WP_PROXY_PORT');	}	/**	 * Whether authentication should be used.	 *	 * @since 2.8	 * @use WP_PROXY_USERNAME	 * @use WP_PROXY_PASSWORD	 *	 * @return bool	 */	function use_authentication() {		return defined('WP_PROXY_USERNAME') && defined('WP_PROXY_PASSWORD');	}	/**	 * Retrieve the host for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function host() {		if ( defined('WP_PROXY_HOST') )			return WP_PROXY_HOST;		return '';	}	/**	 * Retrieve the port for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function port() {		if ( defined('WP_PROXY_PORT') )			return WP_PROXY_PORT;		return '';	}	/**	 * Retrieve the username for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function username() {		if ( defined('WP_PROXY_USERNAME') )			return WP_PROXY_USERNAME;		return '';	}	/**	 * Retrieve the password for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function password() {		if ( defined('WP_PROXY_PASSWORD') )			return WP_PROXY_PASSWORD;		return '';	}	/**	 * Retrieve authentication string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication() {		return $this->username() . ':' . $this->password();	}	/**	 * Retrieve header string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication_header() {		return 'Proxy-Authorization: Basic ' . base64_encode( $this->authentication() );	}	/**	 * Whether URL should be sent through the proxy server.	 *	 * We want to keep localhost and the blog URL from being sent through the proxy server, because	 * some proxies can not handle this. We also have the constant available for defining other	 * hosts that won't be sent through the proxy.	 *	 * @uses WP_PROXY_BYPASS_HOSTS	 * @since unknown	 *	 * @param string $uri URI to check.	 * @return bool True, to send through the proxy and false if, the proxy should not be used.	 */	function send_through_proxy( $uri ) {		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		// Malformed URL, can not process, but this could mean ssl, so let through anyway.		if ( $check === false )			return true;		$home = parse_url( get_option('siteurl') );		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return false;		if ( !defined('WP_PROXY_BYPASS_HOSTS') )			return true;		static $bypass_hosts;		if ( null == $bypass_hosts )			$bypass_hosts = preg_split('|,\s*|', WP_PROXY_BYPASS_HOSTS);		return !in_array( $check['host'], $bypass_hosts );	}}/** * Internal representation of a single cookie. * * Returned cookies are represented using this class, and when cookies are set, if they are not * already a WP_Http_Cookie() object, then they are turned into one. * * @todo The WordPress convention is to use underscores instead of camelCase for function and method * names. Need to switch to use underscores instead for the methods. * * @package WordPress * @subpackage HTTP * @since 2.8.0 */class WP_Http_Cookie {	/**	 * Cookie name.	 *	 * @since 2.8.0	 * @var string	 */	var $name;	/**	 * Cookie value.	 *	 * @since 2.8.0	 * @var string	 */	var $value;	/**	 * When the cookie expires.	 *	 * @since 2.8.0	 * @var string	 */	var $expires;	/**	 * Cookie URL path.	 *	 * @since 2.8.0	 * @var string	 */	var $path;	/**	 * Cookie Domain.	 *	 * @since 2.8.0	 * @var string	 */	var $domain;	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor.	 *	 * @access public	 * @since 2.8.0	 * @param string|array $data Raw cookie data.	 */	function WP_Http_Cookie( $data ) {		$this->__construct( $data );	}	/**	 * Sets up this cookie object.	 *	 * The parameter $data should be either an associative array containing the indices names below	 * or a header string detailing it.	 *	 * If it's an array, it should include the following elements:	 * <ol>	 * <li>Name</li>	 * <li>Value - should NOT be urlencoded already.</li>	 * <li>Expires - (optional) String or int (UNIX timestamp).</li>	 * <li>Path (optional)</li>	 * <li>Domain (optional)</li>	 * </ol>	 *	 * @access public	 * @since 2.8.0	 *	 * @param string|array $data Raw cookie data.	 */	function __construct( $data ) {		if ( is_string( $data ) ) {			// Assume it's a header string direct from a previous request			$pairs = explode( ';', $data );			// Special handling for first pair; name=value. Also be careful of "=" in value			$name  = trim( substr( $pairs[0], 0, strpos( $pairs[0], '=' ) ) );			$value = substr( $pairs[0], strpos( $pairs[0], '=' ) + 1 );			$this->name  = $name;			$this->value = urldecode( $value );			array_shift( $pairs ); //Removes name=value from items.			// Set everything else as a property			foreach ( $pairs as $pair ) {				$pair = rtrim($pair);				if ( empty($pair) ) //Handles the cookie ending in ; which results in a empty final pair					continue;				list( $key, $val ) = strpos( $pair, '=' ) ? explode( '=', $pair ) : array( $pair, '' );				$key = strtolower( trim( $key ) );				if ( 'expires' == $key )					$val = strtotime( $val );				$this->$key = $val;			}		} else {			if ( !isset( $data['name'] ) )				return false;			// Set properties based directly on parameters			$this->name   = $data['name'];			$this->value  = isset( $data['value'] ) ? $data['value'] : '';			$this->path   = isset( $data['path'] ) ? $data['path'] : '';			$this->domain = isset( $data['domain'] ) ? $data['domain'] : '';			if ( isset( $data['expires'] ) )				$this->expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );			else				$this->expires = null;		}	}	/**	 * Confirms that it's OK to send this cookie to the URL checked against.	 *	 * Decision is based on RFC 2109/2965, so look there for details on validity.	 *	 * @access public	 * @since 2.8.0	 *	 * @param string $url URL you intend to send this cookie to	 * @return boolean TRUE if allowed, FALSE otherwise.	 */	function test( $url ) {		// Expires - if expired then nothing else matters		if ( time() > $this->expires )			return false;		// Get details on the URL we're thinking about sending to		$url = parse_url( $url );		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';		// Values to use for comparison against the URL		$path   = isset( $this->path )   ? $this->path   : '/';		$port   = isset( $this->port )   ? $this->port   : 80;		$domain = isset( $this->domain ) ? strtolower( $this->domain ) : strtolower( $url['host'] );		if ( false === stripos( $domain, '.' ) )			$domain .= '.local';		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;		if ( substr( $url['host'], -strlen( $domain ) ) != $domain )			return false;		// Port - supports "port-lists" in the format: "80,8000,8080"		if ( !in_array( $url['port'], explode( ',', $port) ) )			return false;		// Path - request path must start with path restriction		if ( substr( $url['path'], 0, strlen( $path ) ) != $path )			return false;		return true;	}	/**	 * Convert cookie name and value back to header string.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string Header encoded cookie name and value.	 */	function getHeaderValue() {		if ( empty( $this->name ) || empty( $this->value ) )			return '';		return $this->name . '=' . urlencode( $this->value );	}	/**	 * Retrieve cookie header for usage in the rest of the WordPress HTTP API.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string	 */	function getFullHeader() {		return 'Cookie: ' . $this->getHeaderValue();	}}/** * Implementation for deflate and gzip transfer encodings. * * Includes RFC 1950, RFC 1951, and RFC 1952. * * @since 2.8 * @package WordPress * @subpackage HTTP */class WP_Http_Encoding {	/**	 * Compress raw string using the deflate format.	 *	 * Supports the RFC 1951 standard.	 *	 * @since 2.8	 *	 * @param string $raw String to compress.	 * @param int $level Optional, default is 9. Compression level, 9 is highest.	 * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.	 * @return string|bool False on failure.	 */	function compress( $raw, $level = 9, $supports = null ) {		return gzdeflate( $raw, $level );	}	/**	 * Decompression of deflated string.	 *	 * Will attempt to decompress using the RFC 1950 standard, and if that fails	 * then the RFC 1951 standard deflate will be attempted. Finally, the RFC	 * 1952 standard gzip decode will be attempted. If all fail, then the	 * original compressed string will be returned.	 *	 * @since 2.8	 *	 * @param string $compressed String to decompress.	 * @param int $length The optional length of the compressed data.	 * @return string|bool False on failure.	 */	function decompress( $compressed, $length = null ) {		if ( empty($compressed) )			return $compressed;		if ( false !== ( $decompressed = @gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = WP_Http_Encoding::compatible_gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = @gzuncompress( $compressed ) ) )			return $decompressed;		if ( function_exists('gzdecode') ) {			$decompressed = @gzdecode( $compressed );			if ( false !== $decompressed )				return $decompressed;		}		return $compressed;	}	/**	 * Decompression of deflated string while staying compatible with the majority of servers.	 *	 * Certain Servers will return deflated data with headers which PHP's gziniflate()	 * function cannot handle out of the box. The following function lifted from	 * http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate	 * the various return forms used.	 *	 * @since 2.8.1	 * @link http://au2.php.net/manual/en/function.gzinflate.php#77336	 *	 * @param string $gzData String to decompress.	 * @return string|bool False on failure.	 */	function compatible_gzinflate($gzData) {		if ( substr($gzData, 0, 3) == "\x1f\x8b\x08" ) {			$i = 10;			$flg = ord( substr($gzData, 3, 1) );			if ( $flg > 0 ) {				if ( $flg & 4 ) {					list($xlen) = unpack('v', substr($gzData, $i, 2) );					$i = $i + 2 + $xlen;				}				if ( $flg & 8 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 16 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 2 )					$i = $i + 2;			}			return gzinflate( substr($gzData, $i, -8) );		} else {			return false;		}	}	/**	 * What encoding types to accept and their priority values.	 *	 * @since 2.8	 *	 * @return string Types of encoding to accept.	 */	function accept_encoding() {		$type = array();		if ( function_exists( 'gzinflate' ) )			$type[] = 'deflate;q=1.0';		if ( function_exists( 'gzuncompress' ) )			$type[] = 'compress;q=0.5';		if ( function_exists( 'gzdecode' ) )			$type[] = 'gzip;q=0.5';		return implode(', ', $type);	}	/**	 * What enconding the content used when it was compressed to send in the headers.	 *	 * @since 2.8	 *	 * @return string Content-Encoding string to send in the header.	 */	function content_encoding() {		return 'deflate';	}	/**	 * Whether the content be decoded based on the headers.	 *	 * @since 2.8	 *	 * @param array|string $headers All of the available headers.	 * @return bool	 */	function should_decode($headers) {		if ( is_array( $headers ) ) {			if ( array_key_exists('content-encoding', $headers) && ! empty( $headers['content-encoding'] ) )				return true;		} else if ( is_string( $headers ) ) {			return ( stripos($headers, 'content-encoding:') !== false );		}		return false;	}	/**	 * Whether decompression and compression are supported by the PHP version.	 *	 * Each function is tested instead of checking for the zlib extension, to	 * ensure that the functions all exist in the PHP version and aren't	 * disabled.	 *	 * @since 2.8	 *	 * @return bool	 */	function is_available() {		return ( function_exists('gzuncompress') || function_exists('gzdeflate') || function_exists('gzinflate') );	}}
<?php/** * The custom header image script. * * @package WordPress * @subpackage Administration *//** * The custom header image class. * * @since 2.1.0 * @package WordPress * @subpackage Administration */class Custom_Image_Header {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since 2.1.0	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds default headers.	 *	 * @var array	 * @since 3.0.0	 * @access private	 */	var $default_headers = array();	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 2.1.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Image_Header	 */	function Custom_Image_Header($admin_header_callback, $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Header admin page.	 *	 * @since 2.1.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Header'), __('Header'), 'edit_theme_options', 'custom-header', array(&$this, 'admin_page'));		add_action("admin_print_scripts-$page", array(&$this, 'js_includes'));		add_action("admin_print_styles-$page", array(&$this, 'css_includes'));		add_action("admin_head-$page", array(&$this, 'help') );		add_action("admin_head-$page", array(&$this, 'take_action'), 50);		add_action("admin_head-$page", array(&$this, 'js'), 50);		add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Adds contextual help.	 *	 * @since 3.0.0	 */	function help() {		add_contextual_help( $this->page, '<p>' . __( 'You can set a custom image header for your site. Simply upload the image and crop it, and the new header will go live immediately.' ) . '</p>' .		'<p>' . __( 'If you want to discard your custom header and go back to the default included in your theme, click on the buttons to remove the custom image and restore the original header image.' ) . '</p>' .		'<p>' . __( 'Some themes come with additional header images bundled. If you see multiple images displayed, select the one you&#8217;d like and click the Save Changes button.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Header_SubPanel" target="_blank">Documentation on Custom Header</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );	}	/**	 * Get the current step.	 *	 * @since 2.6.0	 *	 * @return int Current step	 */	function step() {		if ( ! isset( $_GET['step'] ) )			return 1;		$step = (int) $_GET['step'];		if ( $step < 1 || 3 < $step )			$step = 1;		return $step;	}	/**	 * Set up the enqueue for the JavaScript files.	 *	 * @since 2.1.0	 */	function js_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_script('farbtastic');		elseif ( 2 == $step )			wp_enqueue_script('imgareaselect');	}	/**	 * Set up the enqueue for the CSS files	 *	 * @since 2.7	 */	function css_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_style('farbtastic');		elseif ( 2 == $step )			wp_enqueue_style('imgareaselect');	}	/**	 * Check if header text is allowed	 *	 * @since 3.0.0	 */	function header_text() {		if ( defined( 'NO_HEADER_TEXT' ) && NO_HEADER_TEXT )			return false;		return true;	}	/**	 * Execute custom header modification.	 *	 * @since 2.6.0	 */	function take_action() {		if ( ! current_user_can('edit_theme_options') )			return;		if ( empty( $_POST ) )			return;		$this->updated = true;		if ( isset( $_POST['resetheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod( 'header_image' );			return;		}		if ( isset( $_POST['resettext'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod('header_textcolor');			return;		}		if ( isset( $_POST['removeheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			set_theme_mod( 'header_image', '' );			return;		}		if ( isset( $_POST['text-color'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$_POST['text-color'] = str_replace( '#', '', $_POST['text-color'] );			if ( 'blank' == $_POST['text-color'] ) {				set_theme_mod( 'header_textcolor', 'blank' );			} else {				$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['text-color']);				if ( strlen($color) == 6 || strlen($color) == 3 )					set_theme_mod('header_textcolor', $color);			}		}		if ( isset($_POST['default-header']) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$this->process_default_headers();			if ( isset($this->default_headers[$_POST['default-header']]) )				set_theme_mod('header_image', esc_url($this->default_headers[$_POST['default-header']]['url']));		}	}	/**	 * Process the default headers	 *	 * @since 3.0.0	 */	function process_default_headers() {		global $_wp_default_headers;		if ( !empty($this->headers) )			return;		if ( !isset($_wp_default_headers) )			return;		$this->default_headers = $_wp_default_headers;		foreach ( array_keys($this->default_headers) as $header ) {			$this->default_headers[$header]['url'] =  sprintf( $this->default_headers[$header]['url'], get_template_directory_uri(), get_stylesheet_directory_uri() );			$this->default_headers[$header]['thumbnail_url'] =  sprintf( $this->default_headers[$header]['thumbnail_url'], get_template_directory_uri(), get_stylesheet_directory_uri() );		}	}	/**	 * Display UI for selecting one of several default headers.	 *	 * @since 3.0.0	 */	function show_default_header_selector() {		echo '<div id="available-headers">';		foreach ( $this->default_headers as $header_key => $header ) {			$header_thumbnail = $header['thumbnail_url'];			$header_url = $header['url'];			$header_desc = $header['description'];			echo '<div class="default-header">';			echo '<label><input name="default-header" type="radio" value="' . esc_attr($header_key) . '" ' . checked($header_url, get_theme_mod( 'header_image' ), false) . ' />';			echo '<img src="' . $header_thumbnail . '" alt="' . esc_attr($header_desc) .'" title="' . esc_attr($header_desc) .'" /></label>';			echo '</div>';		}		echo '<div class="clear"></div></div>';	}	/**	 * Execute Javascript depending on step.	 *	 * @since 2.1.0	 */	function js() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			$this->js_1();		elseif ( 2 == $step )			$this->js_2();	}	/**	 * Display Javascript based on Step 1 and 3.	 *	 * @since 2.6.0	 */	function js_1() { ?><script type="text/javascript">/* <![CDATA[ */	var text_objects = ['#name', '#desc', '#text-color-row'];	var farbtastic;	var default_color = '#<?php echo HEADER_TEXTCOLOR; ?>';	var old_color = null;	function pickColor(color) {		jQuery('#name').css('color', color);		jQuery('#desc').css('color', color);		jQuery('#text-color').val(color);		farbtastic.setColor(color);	}	function toggle_text(s) {		if (jQuery(s).attr('id') == 'showtext' && jQuery('#text-color').val() != 'blank')			return;		if (jQuery(s).attr('id') == 'hidetext' && jQuery('#text-color').val() == 'blank')			return;		if (jQuery('#text-color').val() == 'blank') {			//Show text			if (old_color == '#blank')				old_color = default_color;			jQuery( text_objects.toString() ).show();			jQuery('#text-color').val(old_color);			jQuery('#name').css('color', old_color);			jQuery('#desc').css('color', old_color);			pickColor(old_color);		} else {			//Hide text			jQuery( text_objects.toString() ).hide();			old_color = jQuery('#text-color').val();			jQuery('#text-color').val('blank');		}	}	jQuery(document).ready(function() {		jQuery('#pickcolor').click(function() {			jQuery('#color-picker').show();		});		jQuery('input[name="hidetext"]').click(function() {			toggle_text(this);		});		jQuery('#defaultcolor').click(function() {			pickColor(default_color);			jQuery('#text-color').val(default_color)		});		jQuery('#text-color').keyup(function() {			var _hex = jQuery('#text-color').val();			var hex = _hex;			if ( hex[0] != '#' )				hex = '#' + hex;			hex = hex.replace(/[^#a-fA-F0-9]+/, '');			if ( hex != _hex )				jQuery('#text-color').val(hex);			if ( hex.length == 4 || hex.length == 7 )				pickColor( hex );		});		jQuery(document).mousedown(function(){			jQuery('#color-picker').each( function() {				var display = jQuery(this).css('display');				if (display == 'block')					jQuery(this).fadeOut(2);			});		});		farbtastic = jQuery.farbtastic('#color-picker', function(color) { pickColor(color); });		<?php if ( $color = get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) ) { ?>		pickColor('#<?php echo $color; ?>');		<?php } ?>		<?php if ( 'blank' == get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() ) { ?>		toggle_text();		<?php } ?>		});</script><?php	}	/**	 * Display Javascript based on Step 2.	 *	 * @since 2.6.0	 */	function js_2() { ?><script type="text/javascript">/* <![CDATA[ */	function onEndCrop( coords ) {		jQuery( '#x1' ).val(coords.x);		jQuery( '#y1' ).val(coords.y);		jQuery( '#width' ).val(coords.w);		jQuery( '#height' ).val(coords.h);	}	jQuery(document).ready(function() {		var xinit = <?php echo HEADER_IMAGE_WIDTH; ?>;		var yinit = <?php echo HEADER_IMAGE_HEIGHT; ?>;		var ratio = xinit / yinit;		var ximg = jQuery('img#upload').width();		var yimg = jQuery('img#upload').height();		if ( yimg < yinit || ximg < xinit ) {			if ( ximg / yimg > ratio ) {				yinit = yimg;				xinit = yinit * ratio;			} else {				xinit = ximg;				yinit = xinit / ratio;			}		}		jQuery('img#upload').imgAreaSelect({			handles: true,			keys: true,			aspectRatio: xinit + ':' + yinit,			show: true,			x1: 0,			y1: 0,			x2: xinit,			y2: yinit,			maxHeight: <?php echo HEADER_IMAGE_HEIGHT; ?>,			maxWidth: <?php echo HEADER_IMAGE_WIDTH; ?>,			onInit: function () {				jQuery('#width').val(xinit);				jQuery('#height').val(yinit);			},			onSelectChange: function(img, c) {				jQuery('#x1').val(c.x1);				jQuery('#y1').val(c.y1);				jQuery('#width').val(c.width);				jQuery('#height').val(c.height);			}		});	});/* ]]> */</script><?php	}	/**	 * Display first step of custom header image page.	 *	 * @since 2.1.0	 */	function step_1() {		$this->process_default_headers();?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Custom Header'); ?></h2><?php if ( ! empty( $this->updated ) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Header updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php } ?><h3><?php _e( 'Header Image' ) ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e( 'Preview' ); ?></th><td >	<?php if ( $this->admin_image_div_callback ) {	  call_user_func( $this->admin_image_div_callback );	} else {	?>	<div id="headimg" style="max-width:<?php echo HEADER_IMAGE_WIDTH; ?>px;height:<?php echo HEADER_IMAGE_HEIGHT; ?>px;background-image:url(<?php esc_url ( header_image() ) ?>);">		<?php		if ( 'blank' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() )			$style = ' style="display:none;"';		else			$style = ' style="color:#' . get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) . ';"';		?>		<h1><a id="name"<?php echo $style; ?> onclick="return false;" href="<?php bloginfo('url'); ?>"><?php bloginfo( 'name' ); ?></a></h1>		<div id="desc"<?php echo $style; ?>><?php bloginfo( 'description' ); ?></div>	</div>	<?php } ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'Upload Image' ); ?></th><td>	<p><?php _e( 'You can upload a custom header image to be shown at the top of your site instead of the default one. On the next screen you will be able to crop the image.' ); ?><br />	<?php printf( __( 'Images of exactly <strong>%1$d &times; %2$d pixels</strong> will be used as-is.' ), HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT ); ?></p>	<form enctype="multipart/form-data" id="upload-form" method="post" action="<?php echo esc_attr( add_query_arg( 'step', 2 ) ) ?>">	<p>		<label for="upload"><?php _e( 'Choose an image from your computer:' ); ?></label><br />		<input type="file" id="upload" name="import" />		<input type="hidden" name="action" value="save" />		<?php wp_nonce_field( 'custom-header-upload', '_wpnonce-custom-header-upload' ) ?>		<input type="submit" class="button" value="<?php esc_attr_e( 'Upload' ); ?>" />	</p>	</form></td></tr></tbody></table><form method="post" action="<?php echo esc_attr( add_query_arg( 'step', 1 ) ) ?>"><table class="form-table"><tbody>	<?php if ( ! empty( $this->default_headers ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Default Images' ); ?></th><td>	<p><?php _e( 'If you don&lsquo;t want to upload your own image, you can use one of these cool headers.' ) ?></p>	<?php		$this->show_default_header_selector();	?></td></tr>	<?php endif;	if ( get_header_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Remove Image' ); ?></th><td>	<p><?php _e( 'This will remove the header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="removeheader" value="<?php esc_attr_e( 'Remove Header Image' ); ?>" /></td></tr>	<?php endif;	if ( defined( 'HEADER_IMAGE' ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Reset Image' ); ?></th><td>	<p><?php _e( 'This will restore the original header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resetheader" value="<?php esc_attr_e( 'Restore Original Header Image' ); ?>" /></td></tr>	<?php endif; ?></tbody></table>	<?php if ( $this->header_text() ) : ?><h3><?php _e( 'Header Text' ) ?></h3><table class="form-table"><tbody><tr valign="top" class="hide-if-no-js"><th scope="row"><?php _e( 'Display Text' ); ?></th><td>	<p>	<?php $hidetext = get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ); ?>	<label><input type="radio" value="1" name="hidetext" id="hidetext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) )  ? true : false ); ?> /> <?php _e( 'No' ); ?></label>	<label><input type="radio" value="0" name="hidetext" id="showtext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) ) ? false : true ); ?> /> <?php _e( 'Yes' ); ?></label>	</p></td></tr><tr valign="top" id="text-color-row"><th scope="row"><?php _e( 'Text Color' ); ?></th><td>	<p>		<input type="text" name="text-color" id="text-color" value="#<?php echo esc_attr( get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) ); ?>" />		<span class="description hide-if-js"><?php _e( 'If you want to hide header text, add <strong>#blank</strong> as text color.' );?></span>		<input type="button" class="button hide-if-no-js" value="<?php esc_attr_e( 'Select a Color' ); ?>" id="pickcolor" />	</p>	<div id="color-picker" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></td></tr>	<?php if ( defined('HEADER_TEXTCOLOR') && get_theme_mod('header_textcolor') ) { ?><tr valign="top"><th scope="row"><?php _e('Reset Text Color'); ?></th><td>	<p><?php _e( 'This will restore the original header text. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resettext" value="<?php esc_attr_e( 'Restore Original Header Text' ); ?>" /></td></tr>	<?php } ?></tbody></table>	<?php endif;wp_nonce_field( 'custom-header-options', '_wpnonce-custom-header-options' ); ?><p class="submit"><input type="submit" class="button-primary" name="save-header-options" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php }	/**	 * Display second step of custom header image page.	 *	 * @since 2.1.0	 */	function step_2() {		check_admin_referer('custom-header-upload', '_wpnonce-custom-header-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'],  __( 'Image Upload Error' ) );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(		'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url);		// Save the data		$id = wp_insert_attachment($object, $file);		list($width, $height, $type, $attr) = getimagesize( $file );		if ( $width == HEADER_IMAGE_WIDTH && $height == HEADER_IMAGE_HEIGHT ) {			// Add the meta-data			wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );			set_theme_mod('header_image', esc_url($url));			do_action('wp_create_file_in_uploads', $file, $id); // For replication			return $this->finished();		} elseif ( $width > HEADER_IMAGE_WIDTH ) {			$oitar = $width / HEADER_IMAGE_WIDTH;			$image = wp_crop_image($file, 0, 0, $width, $height, HEADER_IMAGE_WIDTH, $height / $oitar, false, str_replace(basename($file), 'midsize-'.basename($file), $file));			if ( is_wp_error( $image ) )				wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );			$image = apply_filters('wp_create_file_in_uploads', $image, $id); // For replication			$url = str_replace(basename($url), basename($image), $url);			$width = $width / $oitar;			$height = $height / $oitar;		} else {			$oitar = 1;		}		?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Crop Header Image' ); ?></h2><form method="post" action="<?php echo esc_attr(add_query_arg('step', 3)); ?>">	<p class="hide-if-no-js"><?php _e('Choose the part of the image you want to use as your header.'); ?></p>	<p class="hide-if-js"><strong><?php _e( 'You need Javascript to choose a part of the image.'); ?></strong></p>	<div id="crop_image" style="position: relative">		<img src="<?php echo esc_url( $url ); ?>" id="upload" width="<?php echo $width; ?>" height="<?php echo $height; ?>" />	</div>	<p class="submit">	<input type="hidden" name="x1" id="x1" value="0"/>	<input type="hidden" name="y1" id="y1" value="0"/>	<input type="hidden" name="width" id="width" value="<?php echo esc_attr( $width ); ?>"/>	<input type="hidden" name="height" id="height" value="<?php echo esc_attr( $height ); ?>"/>	<input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr( $id ); ?>" />	<input type="hidden" name="oitar" id="oitar" value="<?php echo esc_attr( $oitar ); ?>" />	<?php wp_nonce_field( 'custom-header-crop-image' ) ?>	<input type="submit" class="button-primary" value="<?php esc_attr_e( 'Crop and Publish' ); ?>" />	</p></form></div>		<?php	}	/**	 * Display third step of custom header image page.	 *	 * @since 2.1.0	 */	function step_3() {		check_admin_referer('custom-header-crop-image');		if ( $_POST['oitar'] > 1 ) {			$_POST['x1'] = $_POST['x1'] * $_POST['oitar'];			$_POST['y1'] = $_POST['y1'] * $_POST['oitar'];			$_POST['width'] = $_POST['width'] * $_POST['oitar'];			$_POST['height'] = $_POST['height'] * $_POST['oitar'];		}		$original = get_attached_file( $_POST['attachment_id'] );		$cropped = wp_crop_image($_POST['attachment_id'], $_POST['x1'], $_POST['y1'], $_POST['width'], $_POST['height'], HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT);		if ( is_wp_error( $cropped ) )			wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );		$cropped = apply_filters('wp_create_file_in_uploads', $cropped, $_POST['attachment_id']); // For replication		$parent = get_post($_POST['attachment_id']);		$parent_url = $parent->guid;		$url = str_replace(basename($parent_url), basename($cropped), $parent_url);		// Construct the object array		$object = array(			'ID' => $_POST['attachment_id'],			'post_title' => basename($cropped),			'post_content' => $url,			'post_mime_type' => 'image/jpeg',			'guid' => $url		);		// Update the attachment		wp_insert_attachment($object, $cropped);		wp_update_attachment_metadata( $_POST['attachment_id'], wp_generate_attachment_metadata( $_POST['attachment_id'], $cropped ) );		set_theme_mod('header_image', $url);		// cleanup		$medium = str_replace(basename($original), 'midsize-'.basename($original), $original);		@unlink( apply_filters( 'wp_delete_file', $medium ) );		@unlink( apply_filters( 'wp_delete_file', $original ) );		return $this->finished();	}	/**	 * Display last step of custom header image page.	 *	 * @since 2.1.0	 */	function finished() {		$this->updated = true;		$this->step_1();	}	/**	 * Display the page based on the current step.	 *	 * @since 2.1.0	 */	function admin_page() {		if ( ! current_user_can('edit_theme_options') )			wp_die(__('You do not have permission to customize headers.'));		$step = $this->step();		if ( 1 == $step )			$this->step_1();		elseif ( 2 == $step )			$this->step_2();		elseif ( 3 == $step )			$this->step_3();	}}?>
<?php/** * WordPress Administration Generic POST Handler. * * @package WordPress * @subpackage Administration *//** We are located in WordPress Administration Panels */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');require_once(ABSPATH . 'wp-admin/includes/admin.php');nocache_headers();do_action('admin_init');$action = 'admin_post';if ( !wp_validate_auth_cookie() )	$action .= '_nopriv';if ( !empty($_REQUEST['action']) )	$action .= '_' . $_REQUEST['action'];do_action($action);?>
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * BackPress script procedural API. * * @package BackPress * @since r16 *//** * Prints script tags in document head. * * Called by admin-header.php and by wp_head hook. Since it is called by wp_head * on every page load, the function does not instantiate the WP_Scripts object * unless script names are explicitly passed. Does make use of already * instantiated $wp_scripts if present. Use provided wp_print_scripts hook to * register/enqueue new scripts. * * @since r16 * @see WP_Dependencies::print_scripts() */function wp_print_scripts( $handles = false ) {	do_action( 'wp_print_scripts' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_scripts = new WP_Scripts();	}	return $wp_scripts->do_items( $handles );}/** * Register new JavaScript file. * * @since r16 * @param string $handle Script name * @param string $src Script url * @param array $deps (optional) Array of script names on which this script depends * @param string|bool $ver (optional) Script version (used for cache busting), set to NULL to disable * @param bool (optional) Wether to enqueue the script before </head> or before </body> * @return null */function wp_register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->add( $handle, $src, $deps, $ver );	if ( $in_footer )		$wp_scripts->add_data( $handle, 'group', 1 );}/** * Localizes a script. * * Localizes only if script has already been added. * * @since r16 * @see WP_Scripts::localize() */function wp_localize_script( $handle, $object_name, $l10n ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return false;	return $wp_scripts->localize( $handle, $object_name, $l10n );}/** * Remove a registered script. * * @since r16 * @see WP_Scripts::remove() For parameter information. */function wp_deregister_script( $handle ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->remove( $handle );}/** * Enqueues script. * * Registers the script if src provided (does NOT overwrite) and enqueues. * * @since r16 * @see wp_register_script() For parameter information. */function wp_enqueue_script( $handle, $src = false, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_scripts->add( $_handle[0], $src, $deps, $ver );		if ( $in_footer )			$wp_scripts->add_data( $_handle[0], 'group', 1 );	}	$wp_scripts->enqueue( $handle );}/** * Check whether script has been added to WordPress Scripts. * * The values for list defaults to 'queue', which is the same as enqueue for * scripts. * * @since WP unknown; BP unknown * * @param string $handle Handle used to add script. * @param string $list Optional, defaults to 'queue'. Others values are 'registered', 'queue', 'done', 'to_do' * @return bool */function wp_script_is( $handle, $list = 'queue' ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$query = $wp_scripts->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * BackPress Styles enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress Styles enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r74 */class WP_Styles extends WP_Dependencies {	var $base_url;	var $content_url;	var $default_version;	var $text_direction = 'ltr';	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_styles', array(&$this) );	}	function do_item( $handle ) {		if ( !parent::do_item($handle) )			return false;		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		if ( $this->do_concat ) {			if ( $this->in_default_dir($this->registered[$handle]->src) && !isset($this->registered[$handle]->extra['conditional']) && !isset($this->registered[$handle]->extra['alt']) ) {				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			}		}		if ( isset($this->registered[$handle]->args) )			$media = esc_attr( $this->registered[$handle]->args );		else			$media = 'all';		$href = $this->_css_href( $this->registered[$handle]->src, $ver, $handle );		$rel = isset($this->registered[$handle]->extra['alt']) && $this->registered[$handle]->extra['alt'] ? 'alternate stylesheet' : 'stylesheet';		$title = isset($this->registered[$handle]->extra['title']) ? "title='" . esc_attr( $this->registered[$handle]->extra['title'] ) . "'" : '';		$end_cond = $tag = '';		if ( isset($this->registered[$handle]->extra['conditional']) && $this->registered[$handle]->extra['conditional'] ) {			$tag .= "<!--[if {$this->registered[$handle]->extra['conditional']}]>\n";			$end_cond = "<![endif]-->\n";		}		$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-css' $title href='$href' type='text/css' media='$media' />\n", $handle );		if ( 'rtl' === $this->text_direction && isset($this->registered[$handle]->extra['rtl']) && $this->registered[$handle]->extra['rtl'] ) {			if ( is_bool( $this->registered[$handle]->extra['rtl'] ) ) {				$suffix = isset( $this->registered[$handle]->extra['suffix'] ) ? $this->registered[$handle]->extra['suffix'] : '';				$rtl_href = str_replace( "{$suffix}.css", "-rtl{$suffix}.css", $this->_css_href( $this->registered[$handle]->src , $ver, "$handle-rtl" ));			} else {				$rtl_href = $this->_css_href( $this->registered[$handle]->extra['rtl'], $ver, "$handle-rtl" );			}			$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-rtl-css' $title href='$rtl_href' type='text/css' media='$media' />\n", $handle );		}		$tag .= $end_cond;		if ( $this->do_concat )			$this->print_html .= $tag;		else			echo $tag;		// Could do something with $this->registered[$handle]->extra here to print out extra CSS rules//		echo "<style type='text/css'>\n";//		echo "/* <![CDATA[ */\n";//		echo "/* ]]> */\n";//		echo "</style>\n";		return true;	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_styles_array', $this->to_do );		return $r;	}	function _css_href( $src, $ver, $handle ) {		if ( !is_bool($src) && !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = apply_filters( 'style_loader_src', $src, $handle );		return esc_url( $src );	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}}
<?php/** * Default Embed Handlers * * @package WordPress * @subpackage Embeds *//** * The Google Video embed handler callback. Google Video does not support oEmbed. * * @see WP_Embed::register_handler() * @see WP_Embed::shortcode() * * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}. * @param array $attr Embed attributes. * @param string $url The original URL that was matched by the regex. * @param array $rawattr The original unmodified attributes. * @return string The embed HTML. */function wp_embed_handler_googlevideo( $matches, $attr, $url, $rawattr ) {	// If the user supplied a fixed width AND height, use it	if ( !empty($rawattr['width']) && !empty($rawattr['height']) ) {		$width  = (int) $rawattr['width'];		$height = (int) $rawattr['height'];	} else {		list( $width, $height ) = wp_expand_dimensions( 425, 344, $attr['width'], $attr['height'] );	}	return apply_filters( 'embed_googlevideo', '<embed type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docid=' . esc_attr($matches[2]) . '&amp;hl=en&amp;fs=true" style="width:' . esc_attr($width) . 'px;height:' . esc_attr($height) . 'px" allowFullScreen="true" allowScriptAccess="always"></embed>', $matches, $attr, $url, $rawattr );}wp_embed_register_handler( 'googlevideo', '#http://video\.google\.([A-Za-z.]{2,5})/videoplay\?docid=([\d-]+)(.*?)#i', 'wp_embed_handler_googlevideo' );?>
<?php/** * Deprecated functions from WordPress MU and the multisite feature. You shouldn't * use these functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//* * Deprecated functions come here to die. *//** * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_generate_password() * @see wp_generate_password() */function generate_random_password( $len = 8 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_generate_password()' );	return wp_generate_password( $len );}/** * Determine if user is a site admin. * * Plugins should use is_multisite() instead of checking if this function exists * to determine if multisite is enabled. * * This function must reside in a file included only if is_multisite() due to * legacy function_exists() checks to determine if multisite is enabled. * * @since MU * @deprecated 3.0.0 * @deprecated Use is_super_admin() * @see is_super_admin() * @see is_multisite() * */function is_site_admin( $user_login = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'is_super_admin()' );	if ( empty( $user_login ) ) {		$user_id = get_current_user_id();		if ( !$user_id )			return false;	} else {		$user = new WP_User( null, $user_login) ;		if ( empty( $user->id ) )			return false;		$user_id = $user->id;	}	return is_super_admin( $user_id );}if ( !function_exists( 'graceful_fail' ) ) :/** * @since MU * @deprecated 3.0.0 * @deprecated Use wp_die() * @see wp_die() */function graceful_fail( $message ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_die()' );	$message = apply_filters( 'graceful_fail', $message );	$message_template = apply_filters( 'graceful_fail_template','<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Error!</title><style type="text/css">img {	border: 0;}body {line-height: 1.6em; font-family: Georgia, serif; width: 390px; margin: auto;text-align: center;}.message {	font-size: 22px;	width: 350px;	margin: auto;}</style></head><body><p class="message">%s</p></body></html>' );	die( sprintf( $message_template, $message ) );}endif;/** * @since MU * @deprecated 3.0.0 * @deprecated Use get_user_by() * @see get_user_by() */function get_user_details( $username ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_by()' );	return get_user_by('login', $username);}/** * @since MU * @deprecated 3.0.0 * @deprecated Use clean_post_cache() * @see clean_post_cache() */function clear_global_post_cache( $post_id ) {	_deprecated_function( __FUNCTION__, '3.0', 'clean_post_cache()' );}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_main_site() * @see is_main_site() */function is_main_blog() {	_deprecated_function( __FUNCTION__, '3.0', 'is_main_site()' );	return is_main_site();}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_email() * @see is_email() */function validate_email( $email, $check_domain = true) {	_deprecated_function( __FUNCTION__, '3.0', 'is_email()' );	return is_email( $email, $check_domain );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_blog_list( $start = 0, $num = 10, $deprecated = '' ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	global $wpdb;	$blogs = $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' ORDER BY registered DESC", $wpdb->siteid), ARRAY_A );	foreach ( (array) $blogs as $details ) {		$blog_list[ $details['blog_id'] ] = $details;		$blog_list[ $details['blog_id'] ]['postcount'] = $wpdb->get_var( "SELECT COUNT(ID) FROM " . $wpdb->get_blog_prefix( $details['blog_id'] ). "posts WHERE post_status='publish' AND post_type='post'" );	}	unset( $blogs );	$blogs = $blog_list;	if ( false == is_array( $blogs ) )		return array();	if ( $num == 'all' )		return array_slice( $blogs, $start, count( $blogs ) );	else		return array_slice( $blogs, $start, $num );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_most_active_blogs( $num = 10, $display = true ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	$blogs = get_blog_list( 0, 'all', false ); // $blog_id -> $details	if ( is_array( $blogs ) ) {		reset( $blogs );		foreach ( (array) $blogs as $key => $details ) {			$most_active[ $details['blog_id'] ] = $details['postcount'];			$blog_list[ $details['blog_id'] ] = $details; // array_slice() removes keys!!		}		arsort( $most_active );		reset( $most_active );		foreach ( (array) $most_active as $key => $details )			$t[ $key ] = $blog_list[ $key ];		unset( $most_active );		$most_active = $t;	}	if ( $display == true ) {		if ( is_array( $most_active ) ) {			reset( $most_active );			foreach ( (array) $most_active as $key => $details ) {				$url = esc_url('http://' . $details['domain'] . $details['path']);				echo '<li>' . $details['postcount'] . " <a href='$url'>$url</a></li>";			}		}	}	return array_slice( $most_active, 0, $num );}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?>	<div id="sidebar" role="complementary">		<ul>			<?php 	/* Widgetized sidebar, if you have the plugin installed. */					if ( !function_exists('dynamic_sidebar') || !dynamic_sidebar() ) : ?>			<li>				<?php get_search_form(); ?>			</li>			<!-- Author information is disabled per default. Uncomment and fill in your details if you want to use it.			<li><h2><?php _e('Author'); ?></h2>			<p>A little something about you, the author. Nothing lengthy, just an overview.</p>			</li>			-->			<?php if ( is_404() || is_category() || is_day() || is_month() ||						is_year() || is_search() || is_paged() ) {			?> <li>			<?php /* If this is a 404 page */ if (is_404()) { ?>			<?php /* If this is a category archive */ } elseif (is_category()) { ?>			<p><?php printf(__('You are currently browsing the archives for the %s category.'), single_cat_title('', false)); ?></p>			<?php /* If this is a daily archive */ } elseif (is_day()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the day %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('l, F jS, Y'))); ?></p>			<?php /* If this is a monthly archive */ } elseif (is_month()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time(__('F, Y'))); ?></p>			<?php /* If this is a yearly archive */ } elseif (is_year()) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives for the year %3$s.'), get_bloginfo('url'), get_bloginfo('name'), get_the_time('Y')); ?></p>			<?php /* If this is a search result */ } elseif (is_search()) { ?>			<p><?php printf(__('You have searched the <a href="%1$s/">%2$s</a> blog archives for <strong>&#8216;%3$s&#8217;</strong>. If you are unable to find anything in these search results, you can try one of these links.'), get_bloginfo('url'), get_bloginfo('name'), esc_html( get_search_query() ) ); ?></p>			<?php /* If this set is paginated */ } elseif (isset($_GET['paged']) && !empty($_GET['paged'])) { ?>			<p><?php printf(__('You are currently browsing the <a href="%1$s/">%2$s</a> blog archives.'), get_bloginfo('url'), get_bloginfo('name')); ?></p>			<?php } ?>			</li>		<?php }?>		</ul>		<ul role="navigation">			<?php wp_list_pages('title_li=<h2>' . __('Pages') . '</h2>' ); ?>			<li><h2><?php _e('Archives'); ?></h2>				<ul>				<?php wp_get_archives(array('type' => 'monthly')); ?>				</ul>			</li>			<?php wp_list_categories(array('show_count' => 1, 'title_li' => '<h2>' . __('Categories') . '</h2>')); ?>		</ul>		<ul>			<?php /* If this is the frontpage */ if ( is_home() || is_page() ) { ?>				<?php wp_list_bookmarks(); ?>				<li><h2><?php _e('Meta'); ?></h2>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<li><a href="http://validator.w3.org/check/referer" title="<?php _e('This page validates as XHTML 1.0 Transitional'); ?>"><?php _e('Valid <abbr title="eXtensible HyperText Markup Language">XHTML</abbr>'); ?></a></li>					<li><a href="http://gmpg.org/xfn/"><abbr title="<?php _e('XHTML Friends Network'); ?>"><?php _e('XFN'); ?></abbr></a></li>					<li><a href="http://wordpress.org/" title="<?php _e('Powered by WordPress, state-of-the-art semantic personal publishing platform.'); ?>">WordPress</a></li>					<?php wp_meta(); ?>				</ul>				</li>			<?php } ?>			<?php endif; ?>		</ul>	</div>
<?php/** * The Template for displaying all single posts. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="nav-above" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-above -->				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-meta">						<?php twentyten_posted_on(); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content --><?php if ( get_the_author_meta( 'description' ) ) : // If a user has filled out their description, show a bio on their entries  ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( esc_attr__( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>							<div id="author-link">								<a href="<?php echo get_author_posts_url( get_the_author_meta( 'ID' ) ); ?>">									<?php printf( __( 'View all posts by %s <span class="meta-nav">&rarr;</span>', 'twentyten' ), get_the_author() ); ?>								</a>							</div><!-- #author-link	-->						</div><!-- #author-description -->					</div><!-- #entry-author-info --><?php endif; ?>					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## -->				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-below -->				<?php comments_template( '', true ); ?><?php endwhile; // end of the loop. ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Press This Display and Handler. * * @package WordPress * @subpackage Press_This *//** WordPress Administration Bootstrap */require_once('./admin.php');header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! current_user_can('edit_posts') )	wp_die( __( 'Cheatin&#8217; uh?' ) );/** * Press It form handler. * * @package WordPress * @subpackage Press_This * @since 2.6.0 * * @return int Post ID */function press_it() {	// define some basic variables	$quick['post_status'] = 'draft'; // set as draft first	$quick['post_category'] = isset($_POST['post_category']) ? $_POST['post_category'] : null;	$quick['tax_input'] = isset($_POST['tax_input']) ? $_POST['tax_input'] : null;	$quick['post_title'] = ( trim($_POST['title']) != '' ) ? $_POST['title'] : '  ';	$quick['post_content'] = isset($_POST['post_content']) ? $_POST['post_content'] : '';	// insert the post with nothing in it, to get an ID	$post_ID = wp_insert_post($quick, true);	if ( is_wp_error($post_ID) )		wp_die($post_ID);	$content = isset($_POST['content']) ? $_POST['content'] : '';	$upload = false;	if ( !empty($_POST['photo_src']) && current_user_can('upload_files') ) {		foreach( (array) $_POST['photo_src'] as $key => $image) {			// see if files exist in content - we don't want to upload non-used selected files.			if ( strpos($_POST['content'], htmlspecialchars($image)) !== false ) {				$desc = isset($_POST['photo_description'][$key]) ? $_POST['photo_description'][$key] : '';				$upload = media_sideload_image($image, $post_ID, $desc);				// Replace the POSTED content <img> with correct uploaded ones. Regex contains fix for Magic Quotes				if ( !is_wp_error($upload) )					$content = preg_replace('/<img ([^>]*)src=\\\?(\"|\')'.preg_quote(htmlspecialchars($image), '/').'\\\?(\2)([^>\/]*)\/*>/is', $upload, $content);			}		}	}	// set the post_content and status	$quick['post_status'] = isset($_POST['publish']) ? 'publish' : 'draft';	$quick['post_content'] = $content;	// error handling for media_sideload	if ( is_wp_error($upload) ) {		wp_delete_post($post_ID);		wp_die($upload);	} else {		$quick['ID'] = $post_ID;		wp_update_post($quick);	}	return $post_ID;}// For submitted posts.if ( isset($_REQUEST['action']) && 'post' == $_REQUEST['action'] ) {	check_admin_referer('press-this');	$post_ID = press_it();	$posted =  $post_ID;} else {	$post_ID = 0;}// Set Variables$title = isset( $_GET['t'] ) ? trim( strip_tags( html_entity_decode( stripslashes( $_GET['t'] ) , ENT_QUOTES) ) ) : '';$selection = '';if ( !empty($_GET['s']) ) {	$selection = str_replace('&apos;', "'", stripslashes($_GET['s']));	$selection = trim( htmlspecialchars( html_entity_decode($selection, ENT_QUOTES) ) );}if ( ! empty($selection) ) {	$selection = preg_replace('/(\r?\n|\r)/', '</p><p>', $selection);	$selection = '<p>' . str_replace('<p></p>', '', $selection) . '</p>';}$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';$image = isset($_GET['i']) ? $_GET['i'] : '';if ( !empty($_REQUEST['ajax']) ) {	switch ($_REQUEST['ajax']) {		case 'video': ?>			<script type="text/javascript" charset="utf-8">			/* <![CDATA[ */				jQuery('.select').click(function() {					append_editor(jQuery('#embed-code').val());					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});				jQuery('.close').click(function() {					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});			/* ]]> */			</script>			<div class="postbox">				<h2><label for="embed-code"><?php _e('Embed Code') ?></label></h2>				<div class="inside">					<textarea name="embed-code" id="embed-code" rows="8" cols="40"><?php echo wp_htmledit_pre( $selection ); ?></textarea>					<p id="options"><a href="#" class="select button"><?php _e('Insert Video'); ?></a> <a href="#" class="close button"><?php _e('Cancel'); ?></a></p>				</div>			</div>			<?php break;		case 'photo_thickbox': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo_description"><?php _e('Description') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p class="centered">				<input type="hidden" name="this_photo" value="<?php echo esc_attr($image); ?>" id="this_photo" />				<a href="#" class="select">					<img src="<?php echo esc_url($image); ?>" alt="<?php echo esc_attr(__('Click to insert.')); ?>" title="<?php echo esc_attr(__('Click to insert.')); ?>" />				</a>			</p>			<p id="options"><a href="#" class="select button"><?php _e('Insert Image'); ?></a> <a href="#" class="cancel button"><?php _e('Cancel'); ?></a></p>			<?php break;		case 'photo_thickbox_url': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo"><?php _e('URL') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo" name="this_photo" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" />				</div>			</div>			<h3 class="tb"><label for="photo_description"><?php _e('Description') ?></label></h3>			<div id="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p id="options"><a href="#" class="select"><?php _e('Insert Image'); ?></a> | <a href="#" class="cancel"><?php _e('Cancel'); ?></a></p>			<?php break;	case 'photo_images':		/**		 * Retrieve all image URLs from given URI.		 *		 * @package WordPress		 * @subpackage Press_This		 * @since 2.6.0		 *		 * @param string $uri		 * @return string		 */		function get_images_from_uri($uri) {			$uri = preg_replace('/\/#.+?$/','', $uri);			if ( preg_match('/\.(jpg|jpe|jpeg|png|gif)$/', $uri) && !strpos($uri,'blogger.com') )				return "'" . esc_attr( html_entity_decode($uri) ) . "'";			$content = wp_remote_fopen($uri);			if ( false === $content )				return '';			$host = parse_url($uri);			$pattern = '/<img ([^>]*)src=(\"|\')([^<>\'\"]+)(\2)([^>]*)\/*>/i';			$content = str_replace(array("\n","\t","\r"), '', $content);			preg_match_all($pattern, $content, $matches);			if ( empty($matches[0]) )				return '';			$sources = array();			foreach ($matches[3] as $src) {				// if no http in url				if (strpos($src, 'http') === false)					// if it doesn't have a relative uri					if ( strpos($src, '../') === false && strpos($src, './') === false && strpos($src, '/') === 0)						$src = 'http://'.str_replace('//','/', $host['host'].'/'.$src);					else						$src = 'http://'.str_replace('//','/', $host['host'].'/'.dirname($host['path']).'/'.$src);				$sources[] = esc_attr($src);			}			return "'" . implode("','", $sources) . "'";		}		$url = wp_kses(urldecode($url), null);		echo 'new Array('.get_images_from_uri($url).')';		break;	case 'photo_js': ?>		// gather images and load some default JS		var last = null		var img, img_tag, aspect, w, h, skip, i, strtoappend = "";		if(photostorage == false) {		var my_src = eval(			jQuery.ajax({		   		type: "GET",		   		url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",				cache : false,				async : false,		   		data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",				dataType : "script"			}).responseText		);		if(my_src.length == 0) {			var my_src = eval(				jQuery.ajax({		   			type: "GET",		   			url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",					cache : false,					async : false,		   			data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",					dataType : "script"				}).responseText			);			if(my_src.length == 0) {				strtoappend = '<?php _e('Unable to retrieve images or no images on page.'); ?>';			}		}		}		for (i = 0; i < my_src.length; i++) {			img = new Image();			img.src = my_src[i];			img_attr = 'id="img' + i + '"';			skip = false;			maybeappend = '<a href="?ajax=photo_thickbox&amp;i=' + encodeURIComponent(img.src) + '&amp;u=<?php echo urlencode($url); ?>&amp;height=400&amp;width=500" title="" class="thickbox"><img src="' + img.src + '" ' + img_attr + '/></a>';			if (img.width && img.height) {				if (img.width >= 30 && img.height >= 30) {					aspect = img.width / img.height;					scale = (aspect > 1) ? (71 / img.width) : (71 / img.height);					w = img.width;					h = img.height;					if (scale < 1) {						w = parseInt(img.width * scale);						h = parseInt(img.height * scale);					}					img_attr += ' style="width: ' + w + 'px; height: ' + h + 'px;"';					strtoappend += maybeappend;				}			} else {				strtoappend += maybeappend;			}		}		function pick(img, desc) {			if (img) {				if('object' == typeof jQuery('.photolist input') && jQuery('.photolist input').length != 0) length = jQuery('.photolist input').length;				if(length == 0) length = 1;				jQuery('.photolist').append('<input name="photo_src[' + length + ']" value="' + img +'" type="hidden"/>');				jQuery('.photolist').append('<input name="photo_description[' + length + ']" value="' + desc +'" type="hidden"/>');				insert_editor( "\n\n" + encodeURI('<p style="text-align: center;"><a href="<?php echo $url; ?>"><img src="' + img +'" alt="' + desc + '" /></a></p>'));			}			return false;		}		function image_selector() {			tb_remove();			desc = jQuery('#this_photo_description').val();			src = jQuery('#this_photo').val();			pick(src, desc);			jQuery('#extra-fields').hide();			jQuery('#extra-fields').html('');			return false;		}			jQuery('#extra-fields').html('<div class="postbox"><h2>Add Photos <small id="photo_directions">(<?php _e("click images to select") ?>)</small></h2><ul class="actions"><li><a href="#" id="photo-add-url" class="thickbox button"><?php _e("Add from URL") ?> +</a></li></ul><div class="inside"><div class="titlewrap"><div id="img_container"></div></div><p id="options"><a href="#" class="close button"><?php _e('Cancel'); ?></a><a href="#" class="refresh button"><?php _e('Refresh'); ?></a></p></div>');			jQuery('#img_container').html(strtoappend);		<?php break;}die;}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<title><?php _e('Press This') ?></title><?php	add_thickbox();	wp_enqueue_style( 'press-this' );	wp_enqueue_style( 'press-this-ie');	wp_enqueue_style( 'colors' );	wp_enqueue_script( 'post' );	wp_enqueue_script( 'editor' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time() ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'press-this';var photostorage = false;//]]></script><?php	do_action('admin_print_styles');	do_action('admin_print_scripts');	do_action('admin_head');	if ( user_can_richedit() )		wp_tiny_mce( true, array( 'height' => '370' ) );?>	<script type="text/javascript">	function insert_plain_editor(text) {		edCanvas = document.getElementById('content');		edInsertContent(edCanvas, text);	}	function set_editor(text) {		if ( '' == text || '<p></p>' == text ) text = '<p><br /></p>';		if ( tinyMCE.activeEditor ) tinyMCE.execCommand('mceSetContent', false, text);	}	function insert_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceInsertContent', false, '<p>' + decodeURI(tinymce.DOM.decode(text)) + '</p>', {format : 'raw'});		} else {			insert_plain_editor(decodeURI(text));		}	}	function append_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceSetContent', false, tinyMCE.activeEditor.getContent({format : 'raw'}) + '<p>' + text + '</p>');			tinyMCE.execCommand('mceCleanup');		} else {			insert_plain_editor(text);		}	}	function show(tab_name) {		jQuery('#extra-fields').html('');		switch(tab_name) {			case 'video' :				jQuery('#extra-fields').load('<?php echo esc_url($_SERVER['PHP_SELF']); ?>', { ajax: 'video', s: '<?php echo esc_attr($selection); ?>'}, function() {					<?php					$content = '';					if ( preg_match("/youtube\.com\/watch/i", $url) ) {						list($domain, $video_id) = split("v=", $url);						$video_id = esc_attr($video_id);						$content = '<object width="425" height="350"><param name="movie" value="http://www.youtube.com/v/' . $video_id . '"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/' . $video_id . '" type="application/x-shockwave-flash" wmode="transparent" width="425" height="350"></embed></object>';					} elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) {						list($domain, $video_id) = split(".com/", $url);						$video_id = esc_attr($video_id);						$content = '<object width="400" height="225"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />	<embed src="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="225"></embed></object>';						if ( trim($selection) == '' )							$selection = '<p><a href="http://www.vimeo.com/' . $video_id . '?pg=embed&sec=' . $video_id . '">' . $title . '</a> on <a href="http://vimeo.com?pg=embed&sec=' . $video_id . '">Vimeo</a></p>';					} elseif ( strpos( $selection, '<object' ) !== false ) {						$content = $selection;					}					?>					jQuery('#embed-code').prepend('<?php echo htmlentities($content); ?>');				});				jQuery('#extra-fields').show();				return false;				break;			case 'photo' :				function setup_photo_actions() {					jQuery('.close').click(function() {						jQuery('#extra-fields').hide();						jQuery('#extra-fields').html('');					});					jQuery('.refresh').click(function() {						photostorage = false;						show('photo');					});					jQuery('#photo-add-url').attr('href', '?ajax=photo_thickbox_url&height=200&width=500');					tb_init('#extra-fields .thickbox');					jQuery('#waiting').hide();					jQuery('#extra-fields').show();				}				jQuery('#extra-fields').before('<div id="waiting"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /> <?php echo esc_js( __( 'Loading...' ) ); ?></div>');				if(photostorage == false) {					jQuery.ajax({						type: "GET",						cache : false,						url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",						data: "ajax=photo_js&u=<?php echo urlencode($url)?>",						dataType : "script",						success : function(data) {							eval(data);							photostorage = jQuery('#extra-fields').html();							setup_photo_actions();						}					});				} else {					jQuery('#extra-fields').html(photostorage);					setup_photo_actions();				}				return false;				break;		}	}	jQuery(document).ready(function($) {		//resize screen		window.resizeTo(720,540);		// set button actions    	jQuery('#photo_button').click(function() { show('photo'); return false; });		jQuery('#video_button').click(function() { show('video'); return false; });		// auto select		<?php if ( preg_match("/youtube\.com\/watch/i", $url) ) { ?>			show('video');		<?php } elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) { ?>			show('video');		<?php  } elseif ( preg_match("/flickr\.com/i", $url) ) { ?>			show('photo');		<?php } ?>		jQuery('#title').unbind();		jQuery('#publish, #save').click(function() { jQuery('#saving').css('display', 'inline'); });		$('#tagsdiv-post_tag, #categorydiv').children('h3, .handlediv').click(function(){			$(this).siblings('.inside').toggle();		});	});</script></head><body class="press-this wp-admin"><div id="wphead"></div><form action="press-this.php?action=post" method="post"><div id="poststuff" class="metabox-holder">	<div id="side-info-column">		<div class="sleeve">			<h1 id="viewsite"><a href="<?php echo get_option('home'); ?>/" target="_blank"><?php bloginfo('name'); ?> &rsaquo; <?php _e('Press This') ?></a></span></h1>			<?php wp_nonce_field('press-this') ?>			<input type="hidden" name="post_type" id="post_type" value="text"/>			<input type="hidden" name="autosave" id="autosave" />			<input type="hidden" id="original_post_status" name="original_post_status" value="draft" />			<input type="hidden" id="prev_status" name="prev_status" value="draft" />			<!-- This div holds the photo metadata -->			<div class="photolist"></div>			<div id="submitdiv" class="stuffbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><?php _e('Publish') ?></h3>				<div class="inside">					<p>						<input class="button" type="submit" name="draft" value="<?php esc_attr_e('Save Draft') ?>" id="save" />						<?php if ( current_user_can('publish_posts') ) { ?>							<input class="button-primary" type="submit" name="publish" value="<?php esc_attr_e('Publish') ?>" id="publish" />						<?php } else { ?>							<br /><br /><input class="button-primary" type="submit" name="review" value="<?php esc_attr_e('Submit for Review') ?>" id="review" />						<?php } ?>						<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" id="saving" style="display:none;" />					</p>				</div>			</div>			<?php $tax = get_taxonomy( 'category' ); ?>			<div id="categorydiv" class="postbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>"><br /></div>				<h3 class="hndle"><?php _e('Categories') ?></h3>				<div class="inside">				<div id="taxonomy-category" class="categorydiv">					<ul id="category-tabs" class="category-tabs">						<li class="tabs"><a href="#category-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>						<li class="hide-if-no-js"><a href="#category-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>					</ul>					<div id="category-pop" class="tabs-panel" style="display: none;">						<ul id="categorychecklist-pop" class="categorychecklist form-no-clear" >							<?php $popular_ids = wp_popular_terms_checklist( 'category' ); ?>						</ul>					</div>					<div id="category-all" class="tabs-panel">						<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">							<?php wp_terms_checklist($post_ID, array( 'taxonomy' => 'category', 'popular_cats' => $popular_ids ) ) ?>						</ul>					</div>					<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>					<p><em><?php _e('You cannot modify this Taxonomy.'); ?></em></p>					<?php endif; ?>					<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>						<div id="category-adder" class="wp-hidden-children">							<h4>								<a id="category-add-toggle" href="#category-add" class="hide-if-no-js" tabindex="3">									<?php printf( __( '+ %s' ), $tax->labels->add_new_item ); ?>								</a>							</h4>							<p id="category-add" class="category-add wp-hidden-child">								<label class="screen-reader-text" for="newcategory"><?php echo $tax->labels->add_new_item; ?></label>								<input type="text" name="newcategory" id="newcategory" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>								<label class="screen-reader-text" for="newcategory_parent">									<?php echo $tax->labels->parent_item_colon; ?>								</label>								<?php wp_dropdown_categories( array( 'taxonomy' => 'category', 'hide_empty' => 0, 'name' => 'newcategory_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>								<input type="button" id="category-add-submit" class="add:categorychecklist:category-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />								<?php wp_nonce_field( 'add-category', '_ajax_nonce', false ); ?>								<span id="category-ajax-response"></span>							</p>						</div>					<?php endif; ?>				</div>				</div>			</div>			<div id="tagsdiv-post_tag" class="stuffbox" >				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><span><?php _e('Post Tags'); ?></span></h3>				<div class="inside">					<div class="tagsdiv" id="post_tag">						<p class="jaxtag">							<label class="screen-reader-text" for="newtag"><?php _e('Post Tags'); ?></label>							<input type="hidden" name="tax_input[post_tag]" class="the-tags" id="tax-input[post_tag]" value="" />							<div class="ajaxtag">								<input type="text" name="newtag[post_tag]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />								<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" />							</div>						</p>						<div class="tagchecklist"></div>					</div>					<p class="tagcloud-link"><a href="#titlediv" class="tagcloud-link" id="link-post_tag"><?php _e('Choose from the most used tags in Post Tags'); ?></a></p>				</div>			</div>		</div>	</div>	<div class="posting">		<?php if ( isset($posted) && intval($posted) ) { $post_ID = intval($posted); ?>		<div id="message" class="updated"><p><strong><?php _e('Your post has been saved.'); ?></strong> <a onclick="window.opener.location.replace(this.href); window.close();" href="<?php echo get_permalink( $post_ID); ?>"><?php _e('View post'); ?></a> | <a href="<?php echo get_edit_post_link( $post_ID ); ?>" onclick="window.opener.location.replace(this.href); window.close();"><?php _e('Edit Post'); ?></a> | <a href="#" onclick="window.close();"><?php _e('Close Window'); ?></a></p></div>		<?php } ?>		<div id="titlediv">			<div class="titlewrap">				<input name="title" id="title" class="text" value="<?php echo esc_attr($title);?>"/>			</div>		</div>		<div id="extra-fields" style="display: none"></div>		<div class="postdivrich">			<ul id="actions" class="actions">				<li id="photo_button">					Add: <?php if ( current_user_can('upload_files') ) { ?><a title="<?php _e('Insert an Image'); ?>" href="#"><img alt="<?php _e('Insert an Image'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-image.gif?ver=20100531' ) ); ?>"/></a>					<?php } ?>				</li>				<li id="video_button">					<a title="<?php _e('Embed a Video'); ?>" href="#"><img alt="<?php _e('Embed a Video'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-video.gif?ver=20100531' ) ); ?>"/></a>				</li>				<?php if ( user_can_richedit() ) { ?>				<li id="switcher">					<?php wp_print_scripts( 'quicktags' ); ?>					<?php add_filter('the_editor_content', 'wp_richedit_pre'); ?>					<a id="edButtonHTML" onclick="switchEditors.go('content', 'html');"><?php _e('HTML'); ?></a>					<a id="edButtonPreview" class="active" onclick="switchEditors.go('content', 'tinymce');"><?php _e('Visual'); ?></a>					<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('content')" /></div>				</li>				<?php } ?>			</ul>			<div id="quicktags"></div>			<div class="editor-container">				<textarea name="content" id="content" style="width:100%;" class="theEditor" rows="15"><?php					if ( $selection )						echo wp_richedit_pre($selection);					if ( $url ) {						echo '<p>';						if ( $selection )							_e('via ');						printf( "<a href='%s'>%s</a>.</p>", esc_url( $url ), esc_html( $title ) );					}				?></textarea>			</div>		</div>	</div></div></form><?php do_action('admin_print_footer_scripts'); ?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * Atom Syndication Format PHP Library * * @package AtomLib * @link http://code.google.com/p/phpatomlib/ * * @author Elias Torres <elias@torrez.us> * @version 0.4 * @since 2.3 *//** * Structure that store common Atom Feed Properties * * @package AtomLib */class AtomFeed {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array     * @access public     */    var $categories = array();	/**	 * Stores Entries	 *	 * @var array	 * @access public	 */    var $entries = array();}/** * Structure that store Atom Entry Properties * * @package AtomLib */class AtomEntry {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array	 * @access public     */    var $categories = array();}/** * AtomLib Atom Parser API * * @package AtomLib */class AtomParser {    var $NS = 'http://www.w3.org/2005/Atom';    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');    var $debug = false;    var $depth = 0;    var $indent = 2;    var $in_content;    var $ns_contexts = array();    var $ns_decls = array();    var $content_ns_decls = array();    var $content_ns_contexts = array();    var $is_xhtml = false;    var $is_html = false;    var $is_text = true;    var $skipped_div = false;    var $FILE = "php://input";    var $feed;    var $current;    function AtomParser() {        $this->feed = new AtomFeed();        $this->current = null;        $this->map_attrs_func = create_function('$k,$v', 'return "$k=\"$v\"";');        $this->map_xmlns_func = create_function('$p,$n', '$xd = "xmlns"; if(strlen($n[0])>0) $xd .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');    }    function _p($msg) {        if($this->debug) {            print str_repeat(" ", $this->depth * $this->indent) . $msg ."\n";        }    }    function error_handler($log_level, $log_text, $error_file, $error_line) {        $this->error = $log_text;    }    function parse() {        set_error_handler(array(&$this, 'error_handler'));        array_unshift($this->ns_contexts, array());        $parser = xml_parser_create_ns();        xml_set_object($parser, $this);        xml_set_element_handler($parser, "start_element", "end_element");        xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);        xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,0);        xml_set_character_data_handler($parser, "cdata");        xml_set_default_handler($parser, "_default");        xml_set_start_namespace_decl_handler($parser, "start_ns");        xml_set_end_namespace_decl_handler($parser, "end_ns");        $this->content = '';        $ret = true;        $fp = fopen($this->FILE, "r");        while ($data = fread($fp, 4096)) {            if($this->debug) $this->content .= $data;            if(!xml_parse($parser, $data, feof($fp))) {                trigger_error(sprintf(__('XML error: %s at line %d')."\n",                    xml_error_string(xml_get_error_code($xml_parser)),                    xml_get_current_line_number($xml_parser)));                $ret = false;                break;            }        }        fclose($fp);        xml_parser_free($parser);        restore_error_handler();        return $ret;    }    function start_element($parser, $name, $attrs) {        $tag = array_pop(split(":", $name));        switch($name) {            case $this->NS . ':feed':                $this->current = $this->feed;                break;            case $this->NS . ':entry':                $this->current = new AtomEntry();                break;        };        $this->_p("start_element('$name')");        #$this->_p(print_r($this->ns_contexts,true));        #$this->_p('current(' . $this->current . ')');        array_unshift($this->ns_contexts, $this->ns_decls);        $this->depth++;        if(!empty($this->in_content)) {            $this->content_ns_decls = array();            if($this->is_html || $this->is_text)                trigger_error("Invalid content in element found. Content must not be of type text or html if it contains markup.");            $attrs_prefix = array();            // resolve prefixes for attributes            foreach($attrs as $key => $value) {                $with_prefix = $this->ns_to_prefix($key, true);                $attrs_prefix[$with_prefix[1]] = $this->xml_escape($value);            }            $attrs_str = join(' ', array_map($this->map_attrs_func, array_keys($attrs_prefix), array_values($attrs_prefix)));            if(strlen($attrs_str) > 0) {                $attrs_str = " " . $attrs_str;            }            $with_prefix = $this->ns_to_prefix($name);            if(!$this->is_declared_content_ns($with_prefix[0])) {                array_push($this->content_ns_decls, $with_prefix[0]);            }            $xmlns_str = '';            if(count($this->content_ns_decls) > 0) {                array_unshift($this->content_ns_contexts, $this->content_ns_decls);                $xmlns_str .= join(' ', array_map($this->map_xmlns_func, array_keys($this->content_ns_contexts[0]), array_values($this->content_ns_contexts[0])));                if(strlen($xmlns_str) > 0) {                    $xmlns_str = " " . $xmlns_str;                }            }            array_push($this->in_content, array($tag, $this->depth, "<". $with_prefix[1] ."{$xmlns_str}{$attrs_str}" . ">"));        } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {            $this->in_content = array();            $this->is_xhtml = $attrs['type'] == 'xhtml';            $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';            $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';            $type = $this->is_xhtml ? 'XHTML' : ($this->is_html ? 'HTML' : ($this->is_text ? 'TEXT' : $attrs['type']));            if(in_array('src',array_keys($attrs))) {                $this->current->$tag = $attrs;            } else {                array_push($this->in_content, array($tag,$this->depth, $type));            }        } else if($tag == 'link') {            array_push($this->current->links, $attrs);        } else if($tag == 'category') {            array_push($this->current->categories, $attrs);        }        $this->ns_decls = array();    }    function end_element($parser, $name) {        $tag = array_pop(split(":", $name));        $ccount = count($this->in_content);        # if we are *in* content, then let's proceed to serialize it        if(!empty($this->in_content)) {            # if we are ending the original content element            # then let's finalize the content            if($this->in_content[0][0] == $tag &&                $this->in_content[0][1] == $this->depth) {                $origtype = $this->in_content[0][2];                array_shift($this->in_content);                $newcontent = array();                foreach($this->in_content as $c) {                    if(count($c) == 3) {                        array_push($newcontent, $c[2]);                    } else {                        if($this->is_xhtml || $this->is_text) {                            array_push($newcontent, $this->xml_escape($c));                        } else {                            array_push($newcontent, $c);                        }                    }                }                if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {                    $this->current->$tag = array($origtype, join('',$newcontent));                } else {                    $this->current->$tag = join('',$newcontent);                }                $this->in_content = array();            } else if($this->in_content[$ccount-1][0] == $tag &&                $this->in_content[$ccount-1][1] == $this->depth) {                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . "/>";            } else {                # else, just finalize the current element's content                $endtag = $this->ns_to_prefix($name);                array_push($this->in_content, array($tag, $this->depth, "</$endtag[1]>"));            }        }        array_shift($this->ns_contexts);        $this->depth--;        if($name == ($this->NS . ':entry')) {            array_push($this->feed->entries, $this->current);            $this->current = null;        }        $this->_p("end_element('$name')");    }    function start_ns($parser, $prefix, $uri) {        $this->_p("starting: " . $prefix . ":" . $uri);        array_push($this->ns_decls, array($prefix,$uri));    }    function end_ns($parser, $prefix) {        $this->_p("ending: #" . $prefix . "#");    }    function cdata($parser, $data) {        $this->_p("data: #" . str_replace(array("\n"), array("\\n"), trim($data)) . "#");        if(!empty($this->in_content)) {            array_push($this->in_content, $data);        }    }    function _default($parser, $data) {        # when does this gets called?    }    function ns_to_prefix($qname, $attr=false) {        # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')        $components = split(":", $qname);        # grab the last one (e.g 'div')        $name = array_pop($components);        if(!empty($components)) {            # re-join back the namespace component            $ns = join(":",$components);            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {                        return array($mapping, "$mapping[0]:$name");                    }                }            }        }        if($attr) {            return array(null, $name);        } else {            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if(strlen($mapping[0]) == 0) {                        return array($mapping, $name);                    }                }            }        }    }    function is_declared_content_ns($new_mapping) {        foreach($this->content_ns_contexts as $context) {            foreach($context as $mapping) {                if($new_mapping == $mapping) {                    return true;                }            }        }        return false;    }    function xml_escape($string)    {             return str_replace(array('&','"',"'",'<','>'),                array('&amp;','&quot;','&apos;','&lt;','&gt;'),                $string );    }}?>
<?php/** * The template for displaying Comments. * * The area of the page that contains both current comments * and the comment form.  The actual display of comments is * handled by a callback to twentyten_comment which is * located in the functions.php file. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>			<div id="comments"><?php if ( post_password_required() ) : ?>				<p class="nopassword"><?php _e( 'This post is password protected. Enter the password to view any comments.', 'twentyten' ); ?></p>			</div><!-- #comments --><?php		/* Stop the rest of comments.php from being processed,		 * but don't kill the script entirely -- we still have		 * to fully load the template.		 */		return;	endif;?><?php	// You can start editing here -- including this comment!?><?php if ( have_comments() ) : ?>			<h3 id="comments-title"><?php			printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number(), 'twentyten' ),			number_format_i18n( get_comments_number() ), '<em>' . get_the_title() . '</em>' );			?></h3><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div> <!-- .navigation --><?php endif; // check for comment navigation ?>			<ol class="commentlist">				<?php					/* Loop through and list the comments. Tell wp_list_comments()					 * to use twentyten_comment() to format the comments.					 * If you want to overload this in a child theme then you can					 * define twentyten_comment() and that will be used instead.					 * See twentyten_comment() in twentyten/functions.php for more.					 */					wp_list_comments( array( 'callback' => 'twentyten_comment' ) );				?>			</ol><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div><!-- .navigation --><?php endif; // check for comment navigation ?><?php else : // or, if we don't have comments:	/* If there are no comments and comments are closed,	 * let's leave a little note, shall we?	 */	if ( ! comments_open() ) :?>	<p class="nocomments"><?php _e( 'Comments are closed.', 'twentyten' ); ?></p><?php endif; // end ! comments_open() ?><?php endif; // end have_comments() ?><?php comment_form(); ?></div><!-- #comments -->
<?php/** * Date and Time Locale object * * @package WordPress * @subpackage i18n *//** * Class that loads the calendar locale. * * @since 2.1.0 */class WP_Locale {	/**	 * Stores the translated strings for the full weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday;	/**	 * Stores the translated strings for the one character weekday names.	 *	 * There is a hack to make sure that Tuesday and Thursday, as well	 * as Sunday and Saturday don't conflict. See init() method for more.	 *	 * @see WP_Locale::init() for how to handle the hack.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_initial;	/**	 * Stores the translated strings for the abbreviated weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_abbrev;	/**	 * Stores the translated strings for the full month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month;	/**	 * Stores the translated strings for the abbreviated month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month_abbrev;	/**	 * Stores the translated strings for 'am' and 'pm'.	 *	 * Also the capalized versions.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $meridiem;	/**	 * The text direction of the locale language.	 *	 * Default is left to right 'ltr'.	 *	 * @since 2.1.0	 * @var string	 * @access private	 */	var $text_direction = 'ltr';	/**	 * Imports the global version to the class property.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $locale_vars = array('text_direction');	/**	 * Sets up the translated strings and object properties.	 *	 * The method creates the translatable strings for various	 * calendar elements. Which allows for specifying locale	 * specific calendar names and text direction.	 *	 * @since 2.1.0	 * @access private	 */	function init() {		// The Weekdays		$this->weekday[0] = /* translators: weekday */ __('Sunday');		$this->weekday[1] = /* translators: weekday */ __('Monday');		$this->weekday[2] = /* translators: weekday */ __('Tuesday');		$this->weekday[3] = /* translators: weekday */ __('Wednesday');		$this->weekday[4] = /* translators: weekday */ __('Thursday');		$this->weekday[5] = /* translators: weekday */ __('Friday');		$this->weekday[6] = /* translators: weekday */ __('Saturday');		// The first letter of each day.  The _%day%_initial suffix is a hack to make		// sure the day initials are unique.		$this->weekday_initial[__('Sunday')]    = /* translators: one-letter abbreviation of the weekday */ __('S_Sunday_initial');		$this->weekday_initial[__('Monday')]    = /* translators: one-letter abbreviation of the weekday */ __('M_Monday_initial');		$this->weekday_initial[__('Tuesday')]   = /* translators: one-letter abbreviation of the weekday */ __('T_Tuesday_initial');		$this->weekday_initial[__('Wednesday')] = /* translators: one-letter abbreviation of the weekday */ __('W_Wednesday_initial');		$this->weekday_initial[__('Thursday')]  = /* translators: one-letter abbreviation of the weekday */ __('T_Thursday_initial');		$this->weekday_initial[__('Friday')]    = /* translators: one-letter abbreviation of the weekday */ __('F_Friday_initial');		$this->weekday_initial[__('Saturday')]  = /* translators: one-letter abbreviation of the weekday */ __('S_Saturday_initial');		foreach ($this->weekday_initial as $weekday_ => $weekday_initial_) {			$this->weekday_initial[$weekday_] = preg_replace('/_.+_initial$/', '', $weekday_initial_);		}		// Abbreviations for each day.		$this->weekday_abbrev[__('Sunday')]    = /* translators: three-letter abbreviation of the weekday */ __('Sun');		$this->weekday_abbrev[__('Monday')]    = /* translators: three-letter abbreviation of the weekday */ __('Mon');		$this->weekday_abbrev[__('Tuesday')]   = /* translators: three-letter abbreviation of the weekday */ __('Tue');		$this->weekday_abbrev[__('Wednesday')] = /* translators: three-letter abbreviation of the weekday */ __('Wed');		$this->weekday_abbrev[__('Thursday')]  = /* translators: three-letter abbreviation of the weekday */ __('Thu');		$this->weekday_abbrev[__('Friday')]    = /* translators: three-letter abbreviation of the weekday */ __('Fri');		$this->weekday_abbrev[__('Saturday')]  = /* translators: three-letter abbreviation of the weekday */ __('Sat');		// The Months		$this->month['01'] = /* translators: month name */ __('January');		$this->month['02'] = /* translators: month name */ __('February');		$this->month['03'] = /* translators: month name */ __('March');		$this->month['04'] = /* translators: month name */ __('April');		$this->month['05'] = /* translators: month name */ __('May');		$this->month['06'] = /* translators: month name */ __('June');		$this->month['07'] = /* translators: month name */ __('July');		$this->month['08'] = /* translators: month name */ __('August');		$this->month['09'] = /* translators: month name */ __('September');		$this->month['10'] = /* translators: month name */ __('October');		$this->month['11'] = /* translators: month name */ __('November');		$this->month['12'] = /* translators: month name */ __('December');		// Abbreviations for each month. Uses the same hack as above to get around the		// 'May' duplication.		$this->month_abbrev[__('January')] = /* translators: three-letter abbreviation of the month */ __('Jan_January_abbreviation');		$this->month_abbrev[__('February')] = /* translators: three-letter abbreviation of the month */ __('Feb_February_abbreviation');		$this->month_abbrev[__('March')] = /* translators: three-letter abbreviation of the month */ __('Mar_March_abbreviation');		$this->month_abbrev[__('April')] = /* translators: three-letter abbreviation of the month */ __('Apr_April_abbreviation');		$this->month_abbrev[__('May')] = /* translators: three-letter abbreviation of the month */ __('May_May_abbreviation');		$this->month_abbrev[__('June')] = /* translators: three-letter abbreviation of the month */ __('Jun_June_abbreviation');		$this->month_abbrev[__('July')] = /* translators: three-letter abbreviation of the month */ __('Jul_July_abbreviation');		$this->month_abbrev[__('August')] = /* translators: three-letter abbreviation of the month */ __('Aug_August_abbreviation');		$this->month_abbrev[__('September')] = /* translators: three-letter abbreviation of the month */ __('Sep_September_abbreviation');		$this->month_abbrev[__('October')] = /* translators: three-letter abbreviation of the month */ __('Oct_October_abbreviation');		$this->month_abbrev[__('November')] = /* translators: three-letter abbreviation of the month */ __('Nov_November_abbreviation');		$this->month_abbrev[__('December')] = /* translators: three-letter abbreviation of the month */ __('Dec_December_abbreviation');		foreach ($this->month_abbrev as $month_ => $month_abbrev_) {			$this->month_abbrev[$month_] = preg_replace('/_.+_abbreviation$/', '', $month_abbrev_);		}		// The Meridiems		$this->meridiem['am'] = __('am');		$this->meridiem['pm'] = __('pm');		$this->meridiem['AM'] = __('AM');		$this->meridiem['PM'] = __('PM');		// Numbers formatting		// See http://php.net/number_format		/* translators: $thousands_sep argument for http://php.net/number_format, default is , */		$trans = __('number_format_thousands_sep');		$this->number_format['thousands_sep'] = ('number_format_thousands_sep' == $trans) ? ',' : $trans;		/* translators: $dec_point argument for http://php.net/number_format, default is . */		$trans = __('number_format_decimal_point');		$this->number_format['decimal_point'] = ('number_format_decimal_point' == $trans) ? '.' : $trans;		// Import global locale vars set during inclusion of $locale.php.		foreach ( (array) $this->locale_vars as $var ) {			if ( isset($GLOBALS[$var]) )				$this->$var = $GLOBALS[$var];		}	}	/**	 * Retrieve the full translated weekday word.	 *	 * Week starts on translated Sunday and can be fetched	 * by using 0 (zero). So the week starts with 0 (zero)	 * and ends on Saturday with is fetched by using 6 (six).	 *	 * @since 2.1.0	 * @access public	 *	 * @param int $weekday_number 0 for Sunday through 6 Saturday	 * @return string Full translated weekday	 */	function get_weekday($weekday_number) {		return $this->weekday[$weekday_number];	}	/**	 * Retrieve the translated weekday initial.	 *	 * The weekday initial is retrieved by the translated	 * full weekday word. When translating the weekday initial	 * pay attention to make sure that the starting letter does	 * not conflict.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name	 * @return string	 */	function get_weekday_initial($weekday_name) {		return $this->weekday_initial[$weekday_name];	}	/**	 * Retrieve the translated weekday abbreviation.	 *	 * The weekday abbreviation is retrieved by the translated	 * full weekday word.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name Full translated weekday word	 * @return string Translated weekday abbreviation	 */	function get_weekday_abbrev($weekday_name) {		return $this->weekday_abbrev[$weekday_name];	}	/**	 * Retrieve the full translated month by month number.	 *	 * The $month_number parameter has to be a string	 * because it must have the '0' in front of any number	 * that is less than 10. Starts from '01' and ends at	 * '12'.	 *	 * You can use an integer instead and it will add the	 * '0' before the numbers less than 10 for you.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $month_number '01' through '12'	 * @return string Translated full month name	 */	function get_month($month_number) {		return $this->month[zeroise($month_number, 2)];	}	/**	 * Retrieve translated version of month abbreviation string.	 *	 * The $month_name parameter is expected to be the translated or	 * translatable version of the month.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $month_name Translated month to get abbreviated version	 * @return string Translated abbreviated month	 */	function get_month_abbrev($month_name) {		return $this->month_abbrev[$month_name];	}	/**	 * Retrieve translated version of meridiem string.	 *	 * The $meridiem parameter is expected to not be translated.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.	 * @return string Translated version	 */	function get_meridiem($meridiem) {		return $this->meridiem[$meridiem];	}	/**	 * Global variables are deprecated. For backwards compatibility only.	 *	 * @deprecated For backwards compatibility only.	 * @access private	 *	 * @since 2.1.0	 */	function register_globals() {		$GLOBALS['weekday']         = $this->weekday;		$GLOBALS['weekday_initial'] = $this->weekday_initial;		$GLOBALS['weekday_abbrev']  = $this->weekday_abbrev;		$GLOBALS['month']           = $this->month;		$GLOBALS['month_abbrev']    = $this->month_abbrev;	}	/**	 * PHP4 style constructor which calls helper methods to set up object variables	 *	 * @uses WP_Locale::init()	 * @uses WP_Locale::register_globals()	 * @since 2.1.0	 *	 * @return WP_Locale	 */	function WP_Locale() {		$this->init();		$this->register_globals();	}	/**	 * Checks if current locale is RTL.	 *	 * @since 3.0.0	 * @return bool Whether locale is RTL.	 */	 function is_rtl() {	 	return 'rtl' == $this->text_direction;	 }}/** * Checks if current locale is RTL. * * @since 3.0.0 * @return bool Whether locale is RTL. */function is_rtl() {	global $wp_locale;	return $wp_locale->is_rtl();}?>
<?php/** * Includes all of the WordPress Administration API files. * * @package WordPress * @subpackage Administration *//** WordPress Bookmark Administration API */require_once(ABSPATH . 'wp-admin/includes/bookmark.php');/** WordPress Comment Administration API */require_once(ABSPATH . 'wp-admin/includes/comment.php');/** WordPress Administration File API */require_once(ABSPATH . 'wp-admin/includes/file.php');/** WordPress Image Administration API */require_once(ABSPATH . 'wp-admin/includes/image.php');/** WordPress Media Administration API */require_once(ABSPATH . 'wp-admin/includes/media.php');/** WordPress Import Administration API */require_once(ABSPATH . 'wp-admin/includes/import.php');/** WordPress Misc Administration API */require_once(ABSPATH . 'wp-admin/includes/misc.php');/** WordPress Plugin Administration API */require_once(ABSPATH . 'wp-admin/includes/plugin.php');/** WordPress Post Administration API */require_once(ABSPATH . 'wp-admin/includes/post.php');/** WordPress Taxonomy Administration API */require_once(ABSPATH . 'wp-admin/includes/taxonomy.php');/** WordPress Template Administration API */require_once(ABSPATH . 'wp-admin/includes/template.php');/** WordPress Theme Administration API */require_once(ABSPATH . 'wp-admin/includes/theme.php');/** WordPress User Administration API */require_once(ABSPATH . 'wp-admin/includes/user.php');/** WordPress Update Administration API */require_once(ABSPATH . 'wp-admin/includes/update.php');/** WordPress Registration API */require_once(ABSPATH . WPINC . '/registration.php');/** WordPress Deprecated Administration API */require_once(ABSPATH . 'wp-admin/includes/deprecated.php');/** WordPress Multi-Site support API */if ( is_multisite() ) {	require_once(ABSPATH . 'wp-admin/includes/ms.php');	require_once(ABSPATH . 'wp-admin/includes/ms-deprecated.php');}?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);$basepath = dirname(__FILE__);function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return false;	return @file_get_contents($path);}$expires_offset = 31536000;header('Content-Type: application/x-javascript; charset=UTF-8');header('Vary: Accept-Encoding'); // Handle proxiesheader('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( isset($_GET['c']) && 1 == $_GET['c'] && isset($_SERVER['HTTP_ACCEPT_ENCODING'])	&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && ( $file = get_file($basepath . '/wp-tinymce.js.gz') ) ) {	header('Content-Encoding: gzip');	echo $file;} else {	echo get_file($basepath . '/tiny_mce.js');}exit;
<?php/** * @package TinyMCE * @author Moxiecode * @copyright Copyright  2005-2006, Moxiecode Systems AB, All rights reserved. *//** @ignore */require_once('../../../wp-load.php');header('Content-Type: text/html; charset=' . get_bloginfo('charset'));?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php _e('Rich Editor Help') ?></title><script type="text/javascript" src="tiny_mce_popup.js?ver=3223"></script><?phpwp_admin_css( 'global', true );wp_admin_css( 'wp-admin', true );?><style type="text/css">	#wphead {		font-size: 80%;		border-top: 0;		color: #555;		background-color: #f1f1f1;	}	#wphead h1 {		font-size: 24px;		color: #555;		margin: 0;		padding: 10px;	}	#tabs {		padding: 15px 15px 3px;		background-color: #f1f1f1;		border-bottom: 1px solid #dfdfdf;	}	#tabs li {		display: inline;	}	#tabs a.current {		background-color: #fff;		border-color: #dfdfdf;		border-bottom-color: #fff;		color: #d54e21;	}	#tabs a {		color: #2583AD;		padding: 6px;		border-width: 1px 1px 0;		border-style: solid solid none;		border-color: #f1f1f1;		text-decoration: none;	}	#tabs a:hover {		color: #d54e21;	}	.wrap h2 {		border-bottom-color: #dfdfdf;		color: #555;		margin: 5px 0;		padding: 0;		font-size: 18px;	}	#user_info {		right: 5%;		top: 5px;	}	h3 {		font-size: 1.1em;		margin-top: 10px;		margin-bottom: 0px;	}	#flipper {		margin: 0;		padding: 5px 20px 10px;		background-color: #fff;		border-left: 1px solid #dfdfdf;		border-bottom: 1px solid #dfdfdf;	}	* html {        overflow-x: hidden;        overflow-y: scroll;    }	#flipper div p {		margin-top: 0.4em;		margin-bottom: 0.8em;		text-align: justify;	}	th {		text-align: center;	}	.top th {		text-decoration: underline;	}	.top .key {		text-align: center;		width: 5em;	}	.top .action {		text-align: left;	}	.align {		border-left: 3px double #333;		border-right: 3px double #333;	}	.keys {		margin-bottom: 15px;	}	.keys p {		display: inline-block;		margin: 0px;		padding: 0px;	}	.keys .left { text-align: left; }	.keys .center { text-align: center; }	.keys .right { text-align: right; }	td b {		font-family: "Times New Roman" Times serif;	}	#buttoncontainer {		text-align: center;		margin-bottom: 20px;	}	#buttoncontainer a, #buttoncontainer a:hover {		border-bottom: 0px;	}</style><?php if ( is_rtl() ) : ?><style type="text/css">	#wphead, #tabs {		padding-left: auto;		padding-right: 15px;	}	#flipper {		margin: 5px 0 3px 10px;	}	.keys .left, .top, .action { text-align: right; }	.keys .right { text-align: left; }	td b { font-family: Tahoma, "Times New Roman", Times, serif }</style><?php endif; ?><script type="text/javascript">	function d(id) { return document.getElementById(id); }	function flipTab(n) {		for (i=1;i<=4;i++) {			c = d('content'+i.toString());			t = d('tab'+i.toString());			if ( n == i ) {				c.className = '';				t.className = 'current';			} else {				c.className = 'hidden';				t.className = '';			}		}	}    function init() {        document.getElementById('version').innerHTML = tinymce.majorVersion + "." + tinymce.minorVersion;        document.getElementById('date').innerHTML = tinymce.releaseDate;    }    tinyMCEPopup.onInit.add(init);</script></head><body><div id="wphead"><h1><?php echo get_bloginfo('blogtitle'); ?></h1></div><ul id="tabs">	<li><a id="tab1" href="javascript:flipTab(1)" title="<?php _e('Basics of Rich Editing') ?>" accesskey="1" tabindex="1" class="current"><?php _e('Basics') ?></a></li>	<li><a id="tab2" href="javascript:flipTab(2)" title="<?php _e('Advanced use of the Rich Editor') ?>" accesskey="2" tabindex="2"><?php _e('Advanced') ?></a></li>	<li><a id="tab3" href="javascript:flipTab(3)" title="<?php _e('Hotkeys') ?>" accesskey="3" tabindex="3"><?php _e('Hotkeys') ?></a></li>	<li><a id="tab4" href="javascript:flipTab(4)" title="<?php _e('About the software') ?>" accesskey="4" tabindex="4"><?php _e('About') ?></a></li></ul><div id="flipper" class="wrap"><div id="content1">	<h2><?php _e('Rich Editing Basics') ?></h2>	<p><?php _e('<em>Rich editing</em>, also called WYSIWYG for What You See Is What You Get, means your text is formatted as you type. The rich editor creates HTML code behind the scenes while you concentrate on writing. Font styles, links and images all appear approximately as they will on the internet.') ?></p>	<p><?php _e('WordPress includes a rich HTML editor that works well in all major web browsers used today. However editing HTML is not the same as typing text. Each web page has two major components: the structure, which is the actual HTML code and is produced by the editor as you type, and the display, that is applied to it by the currently selected WordPress theme and is defined in style.css. WordPress is producing valid XHTML 1.0 which means that inserting multiple line breaks (BR tags) after a paragraph would not produce white space on the web page. The BR tags will be removed as invalid by the internal HTML correcting functions.') ?></p>	<p><?php _e('While using the editor, most basic keyboard shortcuts work like in any other text editor. For example: Shift+Enter inserts line break, Ctrl+C = copy, Ctrl+X = cut, Ctrl+Z = undo, Ctrl+Y = redo, Ctrl+A = select all, etc. (on Mac use the Command key instead of Ctrl). See the Hotkeys tab for all available keyboard shortcuts.') ?></p>    <p><?php _e('If you do not like the way the rich editor works, you may turn it off from Your Profile submenu, under Users in the admin menu.') ?></p></div><div id="content2" class="hidden">	<h2><?php _e('Advanced Rich Editing') ?></h2>	<h3><?php _e('Images and Attachments') ?></h3>	<p><?php _e('There is a button in the editor toolbar for inserting images that are already hosted somewhere on the internet. If you have a URL for an image, click this button and enter the URL in the box which appears.') ?></p>	<p><?php _e('If you need to upload an image or another media file from your computer, you can use the Media Library buttons above the editor. The media library will attempt to create a thumbnail-sized copy from each uploaded image. To insert your image into the post, first click on the thumbnail to reveal a menu of options. When you have selected the options you like, click "Send to Editor" and your image or file will appear in the post you are editing. If you are inserting a movie, there are additional options in the "Media" dialog that can be opened from the second toolbar row.') ?></p>	<h3><?php _e('HTML in the Rich Editor') ?></h3>	<p><?php _e('Any HTML entered directly into the rich editor will show up as text when the post is viewed. What you see is what you get. When you want to include HTML elements that cannot be generated with the toolbar buttons, you must enter it by hand in the HTML editor. Examples are tables and &lt;code&gt;. To do this, click the HTML tab and edit the code, then switch back to Visual mode. If the code is valid and understood by the editor, you should see it rendered immediately.') ?></p>	<h3><?php _e('Pasting in the Rich Editor') ?></h3>	<p><?php _e('When pasting content from another web page the results can be inconsistent and depend on your browser and on the web page you are pasting from. The editor tries to correct any invalid HTML code that was pasted, but for best results try using the HTML tab or one of the paste buttons that are on the second row. Alternatively try pasting paragraph by paragraph. In most browsers to select one paragraph at a time, triple-click on it.') ?></p>	<p><?php _e('Pasting content from another application, like Word or Excel, is best done with the Paste from Word button on the second row, or in HTML mode.') ?></p></div><div id="content3" class="hidden">	<h2><?php _e('Writing at Full Speed') ?></h2>    <p><?php _e('Rather than reaching for your mouse to click on the toolbar, use these access keys. Windows and Linux use Ctrl + letter. Macintosh uses Command + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<tr><th>c</th><td><?php _e('Copy') ?></td><th>v</th><td><?php _e('Paste') ?></td></tr>		<tr><th>a</th><td><?php _e('Select all') ?></td><th>x</th><td><?php _e('Cut') ?></td></tr>		<tr><th>z</th><td><?php _e('Undo') ?></td><th>y</th><td><?php _e('Redo') ?></td></tr>		<script type="text/javascript">		if ( ! tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>"+			"<tr><th>u</th><td><?php _e('Underline') ?></td><th>1</th><td><?php _e('Heading 1') ?></td></tr>"+			"<tr><th>2</th><td><?php _e('Heading 2') ?></td><th>3</th><td><?php _e('Heading 3') ?></td></tr>"+			"<tr><th>4</th><td><?php _e('Heading 4') ?></td><th>5</th><td><?php _e('Heading 5') ?></td></tr>"+			"<tr><th>6</th><td><?php _e('Heading 6') ?></td><th>9</th><td><?php _e('Address') ?></td></tr>")		</script>	</table>	<p><?php _e('The following shortcuts use different access keys: Alt + Shift + letter.') ?></p>	<table class="keys" width="100%" style="border: 0 none;">		<tr class="top"><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th><th class="key center"><?php _e('Letter') ?></th><th class="left"><?php _e('Action') ?></th></tr>		<script type="text/javascript">		if ( tinymce.isWebKit )			document.write("<tr><th>b</th><td><?php _e('Bold') ?></td><th>i</th><td><?php _e('Italic') ?></td></tr>")		</script>		<tr><th>n</th><td><?php _e('Check Spelling') ?></td><th>l</th><td><?php _e('Align Left') ?></td></tr>		<tr><th>j</th><td><?php _e('Justify Text') ?></td><th>c</th><td><?php _e('Align Center') ?></td></tr>		<tr><th>d</th><td><span style="text-decoration: line-through;"><?php _e('Strikethrough') ?></span></td><th>r</th><td><?php _e('Align Right') ?></td></tr>		<tr><th>u</th><td><strong>&bull;</strong> <?php _e('List') ?></td><th>a</th><td><?php _e('Insert link') ?></td></tr>		<tr><th>o</th><td>1. <?php _e('List') ?></td><th>s</th><td><?php _e('Remove link') ?></td></tr>		<tr><th>q</th><td><?php _e('Quote') ?></td><th>m</th><td><?php _e('Insert Image') ?></td></tr>		<tr><th>g</th><td><?php _e('Full Screen') ?></td><th>t</th><td><?php _e('Insert More Tag') ?></td></tr>		<tr><th>p</th><td><?php _e('Insert Page Break tag') ?></td><th>h</th><td><?php _e('Help') ?></td></tr>		<tr><th>e</th><td colspan="3"><?php _e('Switch to HTML mode') ?></td></tr>	</table></div><div id="content4" class="hidden">	<h2><?php _e('About TinyMCE'); ?></h2>    <p><?php _e('Version:'); ?> <span id="version"></span> (<span id="date"></span>)</p>	<p><?php printf(__('TinyMCE is a platform independent web based Javascript HTML WYSIWYG editor control released as Open Source under %sLGPL</a>	by Moxiecode Systems AB. It has the ability to convert HTML TEXTAREA fields or other HTML elements to editor instances.'), '<a href="'.home_url('/wp-includes/js/tinymce/license.txt').'" target="_blank" title="'.__('GNU Library General Public Licence').'">') ?></p>	<p><?php _e('Copyright &copy; 2003-2007, <a href="http://www.moxiecode.com" target="_blank">Moxiecode Systems AB</a>, All rights reserved.') ?></p>	<p><?php _e('For more information about this software visit the <a href="http://tinymce.moxiecode.com" target="_blank">TinyMCE website</a>.') ?></p>	<div id="buttoncontainer">		<a href="http://www.moxiecode.com" target="_blank"><img src="themes/advanced/img/gotmoxie.png" alt="<?php _e('Got Moxie?') ?>" style="border: none;" /></a>		<a href="http://sourceforge.net/projects/tinymce/" target="_blank"><img src="themes/advanced/img/sflogo.png" alt="<?php _e('Hosted By Sourceforge') ?>" style="border: none;" /></a>		<a href="http://www.freshmeat.net/projects/tinymce" target="_blank"><img src="themes/advanced/img/fm.gif" alt="<?php _e('Also on freshmeat') ?>" style="border: none;" /></a>	</div></div></div><div class="mceActionPanel">	<div style="margin: 8px auto; text-align: center;padding-bottom: 10px;">		<input type="button" id="cancel" name="cancel" value="<?php _e('Close'); ?>" title="<?php _e('Close'); ?>" onclick="tinyMCEPopup.close();" />	</div></div></body></html>
<?php/** * This holds the version number in a separate file so we can bump it without cluttering the SVN *//** * The WordPress version string * * @global string $wp_version */$wp_version = '3.0';/** * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema. * * @global int $wp_db_version */$wp_db_version = 15260;/** * Holds the TinyMCE version * * @global string $tinymce_version */$tinymce_version = '327-1235';/** * Holds the cache manifest version * * @global string $manifest_version */$manifest_version = '20100530';/** * Holds the required PHP version * * @global string $required_php_version */$required_php_version = '4.3';/** * Holds the required MySQL version * * @global string $required_mysql_version */$required_mysql_version = '4.1.2';
<?php/** * BackPress styles procedural API. * * @package BackPress * @since r79 *//** * Display styles that are in the queue or part of $handles. * * @since r79 * @uses do_action() Calls 'wp_print_styles' hook. * @global object $wp_styles The WP_Styles object for printing styles. * * @param array|bool $handles Styles to be printed. An empty array prints the queue, *  an array with one string prints that style, and an array of strings prints those styles. * @return bool True on success, false on failure. */function wp_print_styles( $handles = false ) {	do_action( 'wp_print_styles' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_styles = new WP_Styles();	}	return $wp_styles->do_items( $handles );}/** * Register CSS style file. * * @since r79 * @see WP_Styles::add() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number. Set to NULL to disable. *  Used to ensure that the correct version is sent to the client regardless of caching. * @param string $media The media for which this stylesheet has been defined. */function wp_register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->add( $handle, $src, $deps, $ver, $media );}/** * Remove a registered CSS file. * * @since r79 * @see WP_Styles::remove() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. */function wp_deregister_style( $handle ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->remove( $handle );}/** * Enqueue a CSS style file. * * Registers the style if src provided (does NOT overwrite) and enqueues. * * @since r79 * @see WP_Styles::add(), WP_Styles::enqueue() * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number, if it has one. This parameter *  is used to ensure that the correct version is sent to the client regardless of caching, and so should be included *  if a version number is available and makes sense for the stylesheet. * @param string $media The media for which this stylesheet has been defined. */function wp_enqueue_style( $handle, $src = false, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_styles->add( $_handle[0], $src, $deps, $ver, $media );	}	$wp_styles->enqueue( $handle );}/** * Check whether style has been added to WordPress Styles. * * The values for list defaults to 'queue', which is the same as wp_enqueue_style(). * * @since WP unknown; BP unknown * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. * @param string $list Values are 'registered', 'done', 'queue' and 'to_do'. * @return bool True on success, false on failure. */function wp_style_is( $handle, $list = 'queue' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$query = $wp_styles->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * Plugins may load this file to gain access to special helper functions for * plugin installation. This file is not included by WordPress and it is * recommended, to prevent fatal errors, that this file is included using * require_once(). * * These functions are not optimized for speed, but they should only be used * once in a while, so speed shouldn't be a concern. If it is and you are * needing to use these functions a lot, you might experience time outs. If you * do, then it is advised to just write the SQL code yourself. * * You can turn debugging on, by setting $debug to 1 after you include this * file. * * <code> * check_column('wp_links', 'link_description', 'mediumtext'); * if (check_column($wpdb->comments, 'comment_author', 'tinytext')) *     echo "ok\n"; * * $error_count = 0; * $tablename = $wpdb->links; * // check the column * if (!check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $ddl = "ALTER TABLE $wpdb->links MODIFY COLUMN link_description varchar(255) NOT NULL DEFAULT '' "; *     $q = $wpdb->query($ddl); * } * * if (check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $res .= $tablename . ' - ok <br />'; * } else { *     $res .= 'There was a problem with ' . $tablename . '<br />'; *     ++$error_count; * } * </code> * * @package WordPress * @subpackage Plugin *//** * @global bool $wp_only_load_config * @name $wp_only_load_config * @var bool * @since unknown */$wp_only_load_config = true;/** Load WordPress Bootstrap */require_once(dirname(dirname(__FILE__)).'/wp-load.php');/** * Turn debugging on or off. * @global bool|int $debug * @name $debug * @var bool|int * @since unknown */$debug = 0;if ( ! function_exists('maybe_create_table') ) :/** * Create database table, if it doesn't already exist. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Database table name. * @param string $create_ddl Create database table SQL. * @return bool False on error, true if already exists or success. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	return false;}endif;if ( ! function_exists('maybe_add_column') ) :/** * Add column to database table, if column doesn't already exist in table. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * @uses $debug * * @param string $table_name Database table name * @param string $column_name Table column name * @param string $create_ddl SQL to add column to table. * @return bool False on failure. True, if already exists or was successful. */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}endif;/** * Drop column from database table, if it exists. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Table name * @param string $column_name Column name * @param string $drop_ddl SQL statement to drop column. * @return bool False on failure, true on success or doesn't exist. */function maybe_drop_column($table_name, $column_name, $drop_ddl) {	global $wpdb;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			//found it try to drop it.			$wpdb->query($drop_ddl);			// we cannot directly tell that whether this succeeded!			foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {				if ($column == $column_name) {					return false;				}			}		}	}	// else didn't find it	return true;}/** * Check column matches criteria. * * Uses the SQL DESC for retrieving the table info for the column. It will help * understand the parameters, if you do more research on what column information * is returned by the SQL statement. Pass in null to skip checking that * criteria. * * Column names returned from DESC table are case sensitive and are listed: *      Field *      Type *      Null *      Key *      Default *      Extra * * @since unknown * @package WordPress * @subpackage Plugin * * @param string $table_name Table name * @param string $col_name Column name * @param string $col_type Column type * @param bool $is_null Optional. Check is null. * @param mixed $key Optional. Key info. * @param mixed $default Optional. Default value. * @param mixed $extra Optional. Extra value. * @return bool True, if matches. False, if not matching. */function check_column($table_name, $col_name, $col_type, $is_null = null, $key = null, $default = null, $extra = null) {	global $wpdb, $debug;	$diffs = 0;	$results = $wpdb->get_results("DESC $table_name");	foreach ($results as $row ) {		if ($debug > 1) print_r($row);		if ($row->Field == $col_name) {			// got our column, check the params			if ($debug) echo ("checking $row->Type against $col_type\n");			if (($col_type != null) && ($row->Type != $col_type)) {				++$diffs;			}			if (($is_null != null) && ($row->Null != $is_null)) {				++$diffs;			}			if (($key != null) && ($row->Key  != $key)) {				++$diffs;			}			if (($default != null) && ($row->Default != $default)) {				++$diffs;			}			if (($extra != null) && ($row->Extra != $extra)) {				++$diffs;			}			if ($diffs > 0) {				if ($debug) echo ("diffs = $diffs returning false\n");				return false;			}			return true;		} // end if found our column	}	return false;}?>
<?php/** * WordPress Installer * * @package WordPress * @subpackage Administration */// Sanity check.if ( false ) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Error: PHP is not running</title></head><body>	<h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1>	<h2>Error: PHP is not running</h2>	<p>WordPress requires that your web server is running PHP. Your server does not have PHP installed, or PHP is turned off.</p></body></html><?php}/** * We are installing WordPress. * * @since 1.5.1 * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );/** Load WordPress Administration Upgrade API */require_once( dirname( __FILE__ ) . '/includes/upgrade.php' );/** Load wpdb */require_once(dirname(dirname(__FILE__)) . '/wp-includes/wp-db.php');$step = isset( $_GET['step'] ) ? $_GET['step'] : 0;/** * Display install header. * * @since 2.5.0 * @package WordPress * @subpackage Installer */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e( 'WordPress &rsaquo; Installation' ); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php} // end display_header()/** * Display installer setup form. * * @since 2.8.0 * @package WordPress * @subpackage Installer */function display_setup_form( $error = null ) {	global $wpdb;	$user_table = ( $wpdb->get_var("SHOW TABLES LIKE '$wpdb->users'") != null );	// Ensure that Blogs appear in search engines by default	$blog_public = 1;	if ( ! empty( $_POST ) )		$blog_public = isset( $_POST['blog_public'] );	$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';	$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';	$admin_password = isset($_POST['admin_password']) ? trim( stripslashes( $_POST['admin_password'] ) ) : '';	$admin_email  = isset( $_POST['admin_email']  ) ? trim( stripslashes( $_POST['admin_email'] ) ) : '';	if ( ! is_null( $error ) ) {?><p class="message"><?php printf( __( '<strong>ERROR</strong>: %s' ), $error ); ?></p><?php } ?><form id="setup" method="post" action="install.php?step=2">	<table class="form-table">		<tr>			<th scope="row"><label for="weblog_title"><?php _e( 'Site Title' ); ?></label></th>			<td><input name="weblog_title" type="text" id="weblog_title" size="25" value="<?php echo esc_attr( $weblog_title ); ?>" /></td>		</tr>		<tr>			<th scope="row"><label for="user_name"><?php _e('Username'); ?></label></th>			<td>			<?php			if ( $user_table ) {				_e('User(s) already exists.');			} else {				?><input name="user_name" type="text" id="user_login" size="25" value="<?php echo esc_attr( sanitize_user( $user_name, true ) ); ?>" />				<p><?php _e( 'Usernames can have only alphanumeric characters, spaces, underscores, hyphens, periods and the @ symbol.' ); ?></p>			<?php			} ?>			</td>		</tr>		<?php if ( ! $user_table ) : ?>		<tr>			<th scope="row">				<label for="admin_password"><?php _e('Password, twice'); ?></label>				<p><?php _e('A password will be automatically generated for you if you leave this blank.'); ?></p>			</th>			<td>				<input name="admin_password" type="password" id="pass1" size="25" value="" />				<p><input name="admin_password2" type="password" id="pass2" size="25" value="" /></p>				<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>				<p><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>			</td>		</tr>		<?php endif; ?>		<tr>			<th scope="row"><label for="admin_email"><?php _e( 'Your E-mail' ); ?></label></th>			<td><input name="admin_email" type="text" id="admin_email" size="25" value="<?php echo esc_attr( $admin_email ); ?>" />			<p><?php _e( 'Double-check your email address before continuing.' ); ?></p></td>		</tr>		<tr>			<td colspan="2"><label><input type="checkbox" name="blog_public" value="1" <?php checked( $blog_public ); ?> /> <?php _e( 'Allow my site to appear in search engines like Google and Technorati.' ); ?></label></td>		</tr>	</table>	<p class="step"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Install WordPress' ); ?>" class="button" /></p></form><?php} // end display_setup_form()// Let's check to make sure WP isn't already installed.if ( is_blog_installed() ) {	display_header();	die( '<h1>' . __( 'Already Installed' ) . '</h1><p>' . __( 'You appear to have already installed WordPress. To reinstall please clear your old database tables first.' ) . '</p><p class="step"><a href="../wp-login.php" class="button">' . __('Log In') . '</a></p></body></html>' );}$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );if ( !$mysql_compat && !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );elseif ( !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );elseif ( !$mysql_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );if ( !$mysql_compat || !$php_compat ) {	display_header();	die('<h1>' . __('Insufficient Requirements') . '</h1><p>' . $compat . '</p></body></html>');}switch($step) {	case 0: // Step 1	case 1: // Step 1, direct link.	  display_header();?><h1><?php _e( 'Welcome' ); ?></h1><p><?php printf( __( 'Welcome to the famous five minute WordPress installation process! You may want to browse the <a href="%s">ReadMe documentation</a> at your leisure. Otherwise, just fill in the information below and you&#8217;ll be on your way to using the most extendable and powerful personal publishing platform in the world.' ), '../readme.html' ); ?></p><h1><?php _e( 'Information needed' ); ?></h1><p><?php _e( 'Please provide the following information. Don&#8217;t worry, you can always change these settings later.' ); ?></p><?php		display_setup_form();		break;	case 2:		if ( ! empty( $wpdb->error ) )			wp_die( $wpdb->error->get_error_message() );		display_header();		// Fill in the data we gathered		$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';		$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';		$admin_password = isset($_POST['admin_password']) ? $_POST['admin_password'] : '';		$admin_password_check = isset($_POST['admin_password2']) ? $_POST['admin_password2'] : '';		$admin_email  = isset( $_POST['admin_email']  ) ?trim( stripslashes( $_POST['admin_email'] ) ) : '';		$public       = isset( $_POST['blog_public']  ) ? (int) $_POST['blog_public'] : 0;		// check e-mail address		$error = false;		if ( empty( $user_name ) ) {			// TODO: poka-yoke			display_setup_form( __('you must provide a valid username.') );			$error = true;		} elseif ( $user_name != sanitize_user( $user_name, true ) ) {			display_setup_form( __('the username you provided has invalid characters.') );			$error = true;		} elseif ( $admin_password != $admin_password_check ) {			// TODO: poka-yoke			display_setup_form( __( 'your passwords do not match. Please try again' ) );			$error = true;		} else if ( empty( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'you must provide an e-mail address.' ) );			$error = true;		} elseif ( ! is_email( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'that isn&#8217;t a valid e-mail address.  E-mail addresses look like: <code>username@example.com</code>' ) );			$error = true;		}		if ( $error === false ) {			$wpdb->show_errors();			$result = wp_install($weblog_title, $user_name, $admin_email, $public, '', $admin_password);			extract( $result, EXTR_SKIP );?><h1><?php _e( 'Success!' ); ?></h1><p><?php _e( 'WordPress has been installed. Were you expecting more steps? Sorry to disappoint.' ); ?></p><table class="form-table">	<tr>		<th><?php _e( 'Username' ); ?></th>		<td><code><?php echo esc_html( sanitize_user( $user_name, true ) ); ?></code></td>	</tr>	<tr>		<th><?php _e( 'Password' ); ?></th>		<td><?php		if ( ! empty( $password ) && empty($admin_password_check) )			echo '<code>'. esc_html($password) .'</code><br />';		echo "<p>$password_message</p>"; ?>		</td>	</tr></table><p class="step"><a href="../wp-login.php" class="button"><?php _e( 'Log In' ); ?></a></p><?php		}		break;}?><script type="text/javascript">var t = document.getElementById('weblog_title'); if (t){ t.focus(); }</script><script type="text/javascript" src="../wp-includes/js/jquery/jquery.js"></script><script type="text/javascript" src="js/password-strength-meter.js"></script><script type="text/javascript" src="js/user-profile.js"></script><script type="text/javascript" src="js/utils.js"></script><script type='text/javascript'>/* <![CDATA[ */var pwsL10n = { empty: "<?php echo esc_js( __( 'Strength indicator' ) ); ?>", short: "<?php echo esc_js( __( 'Very weak' ) ); ?>", bad: "<?php echo esc_js( __( 'Weak' ) ); ?>", good: "<?php echo esc_js( __( 'Medium' ) ); ?>", strong: "<?php echo esc_js( __( 'Strong' ) ); ?>", mismatch: "<?php echo esc_js( __( 'Mismatch' ) ); ?>"};try{convertEntities(pwsL10n);}catch(e){};/* ]]> */</script></body></html>
<?php/** * The template for displaying Tag Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Tag Archives: %s', 'twentyten' ), '<span>' . single_tag_title( '', false ) . '</span>' );				?></h1><?php/* Run the loop for the tag archive to output the posts * If you want to overload this in a child theme then include a file * called loop-tag.php and that will be used instead. */ get_template_part( 'loop', 'tag' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><hr /><div id="footer" role="contentinfo"><!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->	<p>		<?php printf(__('%1$s is proudly powered by %2$s'), get_bloginfo('name'),		'<a href="http://wordpress.org/">WordPress</a>'); ?>		<br /><?php printf(__('%1$s and %2$s.'), '<a href="' . get_bloginfo('rss2_url') . '">' . __('Entries (RSS)') . '</a>', '<a href="' . get_bloginfo('comments_rss2_url') . '">' . __('Comments (RSS)') . '</a>'); ?>		<!-- <?php printf(__('%d queries. %s seconds.'), get_num_queries(), timer_stop(0, 3)); ?> -->	</p></div></div><!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ --><?php /* "Just what do you think you're doing Dave?" */ ?>		<?php wp_footer(); ?></body></html>
<?php/** * Used to set up and fix common variables and include * the Multisite procedural and class library. * * Allows for some configuration in wp-config.php (see ms-default-constants.php) * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// $base sanity check.if ( 'BASE' == $base )	die( /*WP_I18N_BASE_ERROR*/'Configuration error in <code>wp-config.php</code>. <code>$base</code> is set to <code>BASE</code> when it should be like <code>/</code> or <code>/blogs/</code>.'/*/WP_I18N_BASE_ERROR*/ );/** Include Multisite initialization functions */require( ABSPATH . WPINC . '/ms-load.php' );require( ABSPATH . WPINC . '/ms-default-constants.php' );if ( defined( 'SUNRISE' ) )	include_once( WP_CONTENT_DIR . '/sunrise.php' );/** Check for and define SUBDOMAIN_INSTALL and the deprecated VHOST constant. */ms_subdomain_constants();if ( !isset( $current_site ) || !isset( $current_blog ) ) {	$domain = addslashes( $_SERVER['HTTP_HOST'] );	if ( false !== strpos( $domain, ':' ) ) {		if ( substr( $domain, -3 ) == ':80' ) {			$domain = substr( $domain, 0, -3 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -3 );		} elseif ( substr( $domain, -4 ) == ':443' ) {			$domain = substr( $domain, 0, -4 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -4 );		} else {			wp_die( /*WP_I18N_NO_PORT_NUMBER*/'Multisite only works without the port number in the URL.'/*/WP_I18N_NO_PORT_NUMBER*/ );		}	}	$domain = rtrim( $domain, '.' );	$cookie_domain = $domain;	if ( substr( $cookie_domain, 0, 4 ) == 'www.' )		$cookie_domain = substr( $cookie_domain, 4 );	$path = preg_replace( '|([a-z0-9-]+.php.*)|', '', $_SERVER['REQUEST_URI'] );	$path = str_replace ( '/wp-admin/', '/', $path );	$path = preg_replace( '|(/[a-z0-9-]+?/).*|', '$1', $path );	$current_site = wpmu_current_site();	if ( ! isset( $current_site->blog_id ) )		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );	if ( is_subdomain_install() ) {		$current_blog = wp_cache_get( 'current_blog_' . $domain, 'site-options' );		if ( !$current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain, $current_blog, 'site-options' );		}		if ( $current_blog && $current_blog->site_id != $current_site->id )			$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE id = %d", $current_blog->site_id ) );		else			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );	} else {		$blogname = htmlspecialchars( substr( $_SERVER[ 'REQUEST_URI' ], strlen( $path ) ) );		if ( false !== strpos( $blogname, '/' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '/' ) );		if ( false !== strpos( $blogname, '?' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '?' ) );		$reserved_blognames = array( 'page', 'comments', 'blog', 'wp-admin', 'wp-includes', 'wp-content', 'files', 'feed' );		if ( $blogname != '' && ! in_array( $blogname, $reserved_blognames ) && ! is_file( $blogname ) )			$path .= $blogname . '/';		$current_blog = wp_cache_get( 'current_blog_' . $domain . $path, 'site-options' );		if ( ! $current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain, 'path' => $path ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain . $path, $current_blog, 'site-options' );		}	}	if ( ! defined( 'WP_INSTALLING' ) && is_subdomain_install() && ! is_object( $current_blog ) ) {		if ( defined( 'NOBLOGREDIRECT' ) ) {			$destination = NOBLOGREDIRECT;			if ( '%siteurl%' == $destination )				$destination = "http://" . $current_site->domain . $current_site->path;		} else {			$destination = 'http://' . $current_site->domain . $current_site->path . 'wp-signup.php?new=' . str_replace( '.' . $current_site->domain, '', $domain );		}		header( 'Location: ' . $destination );		die();	}	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( $current_site && ! $current_blog ) {			if ( $current_site->domain != $_SERVER[ 'HTTP_HOST' ] ) {				header( 'Location: http://' . $current_site->domain . $current_site->path );				exit;			}			$current_blog = get_blog_details( array( 'domain' => $current_site->domain, 'path' => $current_site->path ), false );		}		if ( ! $current_blog || ! $current_site )			ms_not_installed();	}	$blog_id = $current_blog->blog_id;	$public  = $current_blog->public;	if ( empty( $current_blog->site_id ) )		$current_blog->site_id = 1;	$site_id = $current_blog->site_id;	$current_site = get_current_site_name( $current_site );	if ( ! $blog_id ) {		if ( defined( 'WP_INSTALLING' ) ) {			$current_blog->blog_id = $blog_id = 1;		} else {			$msg = ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) ? ' ' . /*WP_I18N_TABLES_MISSING*/'Database tables are missing.'/*/WP_I18N_TABLES_MISSING*/ : '';			wp_die( /*WP_I18N_NO_BLOG*/'No site by that name on this system.'/*/WP_I18N_NO_BLOG*/ . $msg );		}	}}$wpdb->set_prefix( $table_prefix, false ); // $table_prefix can be set in sunrise.php$wpdb->set_blog_id( $current_blog->blog_id, $current_blog->site_id );$table_prefix = $wpdb->get_blog_prefix();// need to init cache again after blog_id is setwp_start_object_cache();// Define upload directory constantsms_upload_constants();
<?php/** * Media settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Media Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can set maximum sizes for images inserted into your written content; you can also insert an image as Full Size.') . '</p>' .	'<p>' . __('The Embed option allows you embed a video, image, or other media content into your content automatically by typing the URL (of the web page where the file lives) on its own line when you create your content.') . '</p>' .	'<p>' . __('Uploading Options gives you folder and path choices for storing your files in your installation&#8217;s directory.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Media_SubPanel" target="_blank">Documentation on Media Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form action="options.php" method="post"><?php settings_fields('media'); ?><h3><?php _e('Image sizes') ?></h3><p><?php _e('The sizes listed below determine the maximum dimensions in pixels to use when inserting an image into the body of a post.'); ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Thumbnail size') ?></th><td><label for="thumbnail_size_w"><?php _e('Width'); ?></label><input name="thumbnail_size_w" type="text" id="thumbnail_size_w" value="<?php form_option('thumbnail_size_w'); ?>" class="small-text" /><label for="thumbnail_size_h"><?php _e('Height'); ?></label><input name="thumbnail_size_h" type="text" id="thumbnail_size_h" value="<?php form_option('thumbnail_size_h'); ?>" class="small-text" /><br /><input name="thumbnail_crop" type="checkbox" id="thumbnail_crop" value="1" <?php checked('1', get_option('thumbnail_crop')); ?>/><label for="thumbnail_crop"><?php _e('Crop thumbnail to exact dimensions (normally thumbnails are proportional)'); ?></label></td></tr><tr valign="top"><th scope="row"><?php _e('Medium size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Medium size'); ?></span></legend><label for="medium_size_w"><?php _e('Max Width'); ?></label><input name="medium_size_w" type="text" id="medium_size_w" value="<?php form_option('medium_size_w'); ?>" class="small-text" /><label for="medium_size_h"><?php _e('Max Height'); ?></label><input name="medium_size_h" type="text" id="medium_size_h" value="<?php form_option('medium_size_h'); ?>" class="small-text" /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Large size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Large size'); ?></span></legend><label for="large_size_w"><?php _e('Max Width'); ?></label><input name="large_size_w" type="text" id="large_size_w" value="<?php form_option('large_size_w'); ?>" class="small-text" /><label for="large_size_h"><?php _e('Max Height'); ?></label><input name="large_size_h" type="text" id="large_size_h" value="<?php form_option('large_size_h'); ?>" class="small-text" /></fieldset></td></tr><?php do_settings_fields('media', 'default'); ?></table><h3><?php _e('Embeds') ?></h3><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Auto-embeds'); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Attempt to automatically embed all plain text URLs'); ?></span></legend><label for="embed_autourls"><input name="embed_autourls" type="checkbox" id="embed_autourls" value="1" <?php checked( '1', get_option('embed_autourls') ); ?>/> <?php _e('Attempt to automatically embed all plain text URLs'); ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum embed size') ?></th><td><label for="embed_size_w"><?php _e('Width'); ?></label><input name="embed_size_w" type="text" id="embed_size_w" value="<?php form_option('embed_size_w'); ?>" class="small-text" /><label for="embed_size_h"><?php _e('Height'); ?></label><input name="embed_size_h" type="text" id="embed_size_h" value="<?php form_option('embed_size_h'); ?>" class="small-text" /><?php if ( !empty($content_width) ) echo '<br />' . __("If the width value is left blank, embeds will default to the max width of your theme."); ?></td></tr><?php do_settings_fields('media', 'embeds'); ?></table><?php if ( !is_multisite() ) : ?><h3><?php _e('Uploading Files'); ?></h3><table class="form-table"><tr valign="top"><th scope="row"><label for="upload_path"><?php _e('Store uploads in this folder'); ?></label></th><td><input name="upload_path" type="text" id="upload_path" value="<?php echo esc_attr(get_option('upload_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Default is <code>wp-content/uploads</code>'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="upload_url_path"><?php _e('Full URL path to files'); ?></label></th><td><input name="upload_url_path" type="text" id="upload_url_path" value="<?php echo esc_attr( get_option('upload_url_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Configuring this is optional. By default, it should be blank.'); ?></span></td></tr><tr><th scope="row" colspan="2" class="th-full"><label for="uploads_use_yearmonth_folders"><input name="uploads_use_yearmonth_folders" type="checkbox" id="uploads_use_yearmonth_folders" value="1"<?php checked('1', get_option('uploads_use_yearmonth_folders')); ?> /><?php _e('Organize my uploads into month- and year-based folders'); ?></label></th></tr><?php do_settings_fields('media', 'uploads'); ?></table><?php endif; ?><?php do_settings_sections('media'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * Media management action handler. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'upload.php';$submenu_file = 'upload.php';wp_reset_vars(array('action'));switch( $action ) :case 'editattachment' :	$attachment_id = (int) $_POST['attachment_id'];	check_admin_referer('media-form');	if ( !current_user_can('edit_post', $attachment_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$errors = media_upload_form_handler();	if ( empty($errors) ) {		$location = 'media.php';		if ( $referer = wp_get_original_referer() ) {			if ( false !== strpos($referer, 'upload.php') || ( url_to_postid($referer) == $attachment_id )  )				$location = $referer;		}		if ( false !== strpos($location, 'upload.php') ) {			$location = remove_query_arg('message', $location);			$location = add_query_arg('posted',	$attachment_id, $location);		} elseif ( false !== strpos($location, 'media.php') ) {			$location = add_query_arg('message', 'updated', $location);		}		wp_redirect($location);		exit;	}	// no breakcase 'edit' :	$title = __('Edit Media');	if ( empty($errors) )		$errors = null;	if ( empty( $_GET['attachment_id'] ) ) {		wp_redirect('upload.php');		exit();	}	$att_id = (int) $_GET['attachment_id'];	if ( !current_user_can('edit_post', $att_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$att = get_post($att_id);	if ( empty($att->ID) ) wp_die( __('You attempted to edit an attachment that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( $att->post_status == 'trash' ) wp_die( __('You can&#8217;t edit this attachment because it is in the Trash. Please move it out of the Trash and try again.') );	add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);	wp_enqueue_script( 'wp-ajax-response' );	wp_enqueue_script('image-edit');	wp_enqueue_style('imgareaselect');	require( './admin-header.php' );	$parent_file = 'upload.php';	$message = '';	$class = '';	if ( isset($_GET['message']) ) {		switch ( $_GET['message'] ) :		case 'updated' :			$message = __('Media attachment updated.');			$class = 'updated';			break;		endswitch;	}	if ( $message )		echo "<div id='message' class='$class'><p>$message</p></div>\n";?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Edit Media' ); ?></h2><form method="post" action="" class="media-upload-form" id="media-single-form"><p class="submit" style="padding-bottom: 0;"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /></p><div class="media-single"><div id='media-item-<?php echo $att_id; ?>' class='media-item'><?php echo get_media_item( $att_id, array( 'toggle' => false, 'send' => false, 'delete' => false, 'show_title' => false, 'errors' => $errors ) ); ?></div></div><p class="submit"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo isset($post_id) ? esc_attr($post_id) : ''; ?>" /><input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr($att_id); ?>" /><input type="hidden" name="action" value="editattachment" /><?php wp_original_referer_field(true, 'previous'); ?><?php wp_nonce_field('media-form'); ?></p></form></div><?php	require( './admin-footer.php' );	exit;default:	wp_redirect( 'upload.php' );	exit;endswitch;?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?php/** * Revisions administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script('list-revisions');wp_reset_vars(array('revision', 'left', 'right', 'action'));$revision_id = absint($revision);$left        = absint($left);$right       = absint($right);$redirect = 'edit.php';switch ( $action ) :case 'restore' :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !current_user_can( 'edit_post', $revision->post_parent ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	check_admin_referer( "restore-post_$post->ID|$revision->ID" );	wp_restore_post_revision( $revision->ID );	$redirect = add_query_arg( array( 'message' => 5, 'revision' => $revision->ID ), get_edit_post_link( $post->ID, 'url' ) );	break;case 'diff' :	if ( !$left_revision  = get_post( $left ) )		break;	if ( !$right_revision = get_post( $right ) )		break;	if ( !current_user_can( 'read_post', $left_revision->ID ) || !current_user_can( 'read_post', $right_revision->ID ) )		break;	// If we're comparing a revision to itself, redirect to the 'view' page for that revision or the edit page for that post	if ( $left_revision->ID == $right_revision->ID ) {		$redirect = get_edit_post_link( $left_revision->ID );		include( './js/revisions-js.php' );		break;	}	// Don't allow reverse diffs?	if ( strtotime($right_revision->post_modified_gmt) < strtotime($left_revision->post_modified_gmt) ) {		$redirect = add_query_arg( array( 'left' => $right, 'right' => $left ) );		break;	}	if ( $left_revision->ID == $right_revision->post_parent ) // right is a revision of left		$post =& $left_revision;	elseif ( $left_revision->post_parent == $right_revision->ID ) // left is a revision of right		$post =& $right_revision;	elseif ( $left_revision->post_parent == $right_revision->post_parent ) // both are revisions of common parent		$post = get_post( $left_revision->post_parent );	else		break; // Don't diff two unrelated revisions	if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) { // Revisions disabled		if (			// we're not looking at an autosave			( !wp_is_post_autosave( $left_revision ) && !wp_is_post_autosave( $right_revision ) )		||			// we're not comparing an autosave to the current post			( $post->ID !== $left_revision->ID && $post->ID !== $right_revision->ID )		) {			$redirect = 'edit.php?post_type=' . $post->post_type;			break;		}	}	if (		// They're the same		$left_revision->ID == $right_revision->ID	||		// Neither is a revision		( !wp_get_post_revision( $left_revision->ID ) && !wp_get_post_revision( $right_revision->ID ) )	)		break;	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$h2 = sprintf( __( 'Compare Revisions of &#8220;%1$s&#8221;' ), $post_title );	$title = __( 'Revisions' );	$left  = $left_revision->ID;	$right = $right_revision->ID;	$redirect = false;	break;case 'view' :default :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	if ( !current_user_can( 'read_post', $revision->ID ) || !current_user_can( 'read_post', $post->ID ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$revision_title = wp_post_revision_title( $revision, false );	$h2 = sprintf( __( 'Revision for &#8220;%1$s&#8221; created on %2$s' ), $post_title, $revision_title );	$title = __( 'Revisions' );	// Sets up the diff radio buttons	$left  = $revision->ID;	$right = $post->ID;	$redirect = false;	break;endswitch;// Empty post_type means either malformed object found, or no valid parent was found.if ( !$redirect && empty($post->post_type) )	$redirect = 'edit.php';if ( !empty($redirect) ) {	wp_redirect( $redirect );	exit;}// This is so that the correct "Edit" menu item is selected.if ( !empty($post->post_type) && 'post' != $post->post_type )	$parent_file = $submenu_file = 'edit.php?post_type=' . $post->post_type;else	$parent_file = $submenu_file = 'edit.php';require_once( './admin-header.php' );?><div class="wrap"><h2 class="long-header"><?php echo $h2; ?></h2><table class="form-table ie-fixed">	<col class="th" /><?php if ( 'diff' == $action ) : ?><tr id="revision">	<th scope="row"></th>	<th scope="col" class="th-full">		<span class="alignleft"><?php printf( __('Older: %s'), wp_post_revision_title( $left_revision ) ); ?></span>		<span class="alignright"><?php printf( __('Newer: %s'), wp_post_revision_title( $right_revision ) ); ?></span>	</th></tr><?php endif;// use get_post_to_edit filters?$identical = true;foreach ( _wp_post_revision_fields() as $field => $field_title ) :	if ( 'diff' == $action ) {		$left_content = apply_filters( "_wp_post_revision_field_$field", $left_revision->$field, $field );		$right_content = apply_filters( "_wp_post_revision_field_$field", $right_revision->$field, $field );		if ( !$content = wp_text_diff( $left_content, $right_content ) )			continue; // There is no difference between left and right		$identical = false;	} else {		add_filter( "_wp_post_revision_field_$field", 'htmlspecialchars' );		$content = apply_filters( "_wp_post_revision_field_$field", $revision->$field, $field );	}	?>	<tr id="revision-field-<?php echo $field; ?>">		<th scope="row"><?php echo esc_html( $field_title ); ?></th>		<td><div class="pre"><?php echo $content; ?></div></td>	</tr>	<?phpendforeach;if ( 'diff' == $action && $identical ) :	?>	<tr><td colspan="2"><div class="updated"><p><?php _e( 'These revisions are identical.' ); ?></p></div></td></tr>	<?phpendif;?></table><br class="clear" /><h2><?php echo $title; ?></h2><?php$args = array( 'format' => 'form-table', 'parent' => true, 'right' => $right, 'left' => $left );if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') )	$args['type'] = 'autosave';wp_list_post_revisions( $post, $args );?></div><?phprequire_once( './admin-footer.php' );
<?php/** * User Profile Administration Panel. * * @package WordPress * @subpackage Administration *//** * This is a profile page. * * @since unknown * @var bool */define('IS_PROFILE_PAGE', true);/** Load User Editing Page */require_once('./user-edit.php');?>
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** * Create a thumbnail from an Image given a maximum side size. * * This function can handle most image file formats which PHP supports. If PHP * does not have the functionality to save in a file of the same format, the * thumbnail will be created as a jpeg. * * @since 1.2.0 * * @param mixed $file Filename of the original image, Or attachment id. * @param int $max_side Maximum length of a single side for the thumbnail. * @param mixed $deprecated Never used. * @return string Thumbnail path on success, Error string on failure. */function wp_create_thumbnail( $file, $max_side, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.2' );	$thumbpath = image_resize( $file, $max_side, $max_side );	return apply_filters( 'wp_create_thumbnail', $thumbpath );}/** * Crop an Image to a given size. * * @since 2.1.0 * * @param string|int $src_file The source file or Attachment ID. * @param int $src_x The start x position to crop from. * @param int $src_y The start y position to crop from. * @param int $src_w The width to crop. * @param int $src_h The height to crop. * @param int $dst_w The destination width. * @param int $dst_h The destination height. * @param int $src_abs Optional. If the source crop points are absolute. * @param string $dst_file Optional. The destination file to write to. * @return string|WP_Error|false New filepath on success, WP_Error or false on failure. */function wp_crop_image( $src_file, $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs = false, $dst_file = false ) {	if ( is_numeric( $src_file ) ) // Handle int as attachment ID		$src_file = get_attached_file( $src_file );	$src = wp_load_image( $src_file );	if ( !is_resource( $src ) )		return new WP_Error( 'error_loading_image', $src, $src_file );	$dst = wp_imagecreatetruecolor( $dst_w, $dst_h );	if ( $src_abs ) {		$src_w -= $src_x;		$src_h -= $src_y;	}	if (function_exists('imageantialias'))		imageantialias( $dst, true );	imagecopyresampled( $dst, $src, 0, 0, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h );	imagedestroy( $src ); // Free up memory	if ( ! $dst_file )		$dst_file = str_replace( basename( $src_file ), 'cropped-' . basename( $src_file ), $src_file );	$dst_file = preg_replace( '/\\.[^\\.]+$/', '.jpg', $dst_file );	if ( imagejpeg( $dst, $dst_file, apply_filters( 'jpeg_quality', 90, 'wp_crop_image' ) ) )		return $dst_file;	else		return false;}/** * Generate post thumbnail attachment meta data. * * @since 2.1.0 * * @param int $attachment_id Attachment Id to process. * @param string $file Filepath of the Attached image. * @return mixed Metadata for attachment. */function wp_generate_attachment_metadata( $attachment_id, $file ) {	$attachment = get_post( $attachment_id );	$metadata = array();	if ( preg_match('!^image/!', get_post_mime_type( $attachment )) && file_is_displayable_image($file) ) {		$imagesize = getimagesize( $file );		$metadata['width'] = $imagesize[0];		$metadata['height'] = $imagesize[1];		list($uwidth, $uheight) = wp_constrain_dimensions($metadata['width'], $metadata['height'], 128, 96);		$metadata['hwstring_small'] = "height='$uheight' width='$uwidth'";		// Make the file path relative to the upload dir		$metadata['file'] = _wp_relative_upload_path($file);		// make thumbnails and other intermediate sizes		global $_wp_additional_image_sizes;		foreach ( get_intermediate_image_sizes() as $s ) {			$sizes[$s] = array( 'width' => '', 'height' => '', 'crop' => FALSE );			if ( isset( $_wp_additional_image_sizes[$s]['width'] ) )				$sizes[$s]['width'] = intval( $_wp_additional_image_sizes[$s]['width'] ); // For theme-added sizes			else				$sizes[$s]['width'] = get_option( "{$s}_size_w" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['height'] ) )				$sizes[$s]['height'] = intval( $_wp_additional_image_sizes[$s]['height'] ); // For theme-added sizes			else				$sizes[$s]['height'] = get_option( "{$s}_size_h" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['crop'] ) )				$sizes[$s]['crop'] = intval( $_wp_additional_image_sizes[$s]['crop'] ); // For theme-added sizes			else				$sizes[$s]['crop'] = get_option( "{$s}_crop" ); // For default sizes set in options		}		$sizes = apply_filters( 'intermediate_image_sizes_advanced', $sizes );		foreach ($sizes as $size => $size_data ) {			$resized = image_make_intermediate_size( $file, $size_data['width'], $size_data['height'], $size_data['crop'] );			if ( $resized )				$metadata['sizes'][$size] = $resized;		}		// fetch additional metadata from exif/iptc		$image_meta = wp_read_image_metadata( $file );		if ( $image_meta )			$metadata['image_meta'] = $image_meta;	}	return apply_filters( 'wp_generate_attachment_metadata', $metadata, $attachment_id );}/** * Calculated the new dimentions for a downsampled image. * * @since 2.0.0 * @see wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @return mixed Array(height,width) of shrunk dimensions. */function get_udims( $width, $height) {	return wp_constrain_dimensions( $width, $height, 128, 96 );}/** * Convert a fraction string to a decimal. * * @since 2.5.0 * * @param string $str * @return int|float */function wp_exif_frac2dec($str) {	@list( $n, $d ) = explode( '/', $str );	if ( !empty($d) )		return $n / $d;	return $str;}/** * Convert the exif date format to a unix timestamp. * * @since 2.5.0 * * @param string $str * @return int */function wp_exif_date2ts($str) {	@list( $date, $time ) = explode( ' ', trim($str) );	@list( $y, $m, $d ) = explode( ':', $date );	return strtotime( "{$y}-{$m}-{$d} {$time}" );}/** * Get extended image metadata, exif or iptc as available. * * Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso * created_timestamp, focal_length, shutter_speed, and title. * * The IPTC metadata that is retrieved is APP13, credit, byline, created date * and time, caption, copyright, and title. Also includes FNumber, Model, * DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime. * * @todo Try other exif libraries if available. * @since 2.5.0 * * @param string $file * @return bool|array False on failure. Image metadata array on success. */function wp_read_image_metadata( $file ) {	if ( ! file_exists( $file ) )		return false;	list( , , $sourceImageType ) = getimagesize( $file );	// exif contains a bunch of data we'll probably never need formatted in ways	// that are difficult to use. We'll normalize it and just extract the fields	// that are likely to be useful.  Fractions and numbers are converted to	// floats, dates to unix timestamps, and everything else to strings.	$meta = array(		'aperture' => 0,		'credit' => '',		'camera' => '',		'caption' => '',		'created_timestamp' => 0,		'copyright' => '',		'focal_length' => 0,		'iso' => 0,		'shutter_speed' => 0,		'title' => '',	);	// read iptc first, since it might contain data not available in exif such	// as caption, description etc	if ( is_callable( 'iptcparse' ) ) {		getimagesize( $file, $info );		if ( ! empty( $info['APP13'] ) ) {			$iptc = iptcparse( $info['APP13'] );			// headline, "A brief synopsis of the caption."			if ( ! empty( $iptc['2#105'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#105'][0] ) );			// title, "Many use the Title field to store the filename of the image, though the field may be used in many ways."			elseif ( ! empty( $iptc['2#005'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#005'][0] ) );			if ( ! empty( $iptc['2#120'][0] ) ) { // description / legacy caption				$caption = utf8_encode( trim( $iptc['2#120'][0] ) );				if ( empty( $meta['title'] ) ) {					// Assume the title is stored in 2:120 if it's short.					if ( strlen( $caption ) < 80 )						$meta['title'] = $caption;					else						$meta['caption'] = $caption;				} elseif ( $caption != $meta['title'] ) {					$meta['caption'] = $caption;				}			}			if ( ! empty( $iptc['2#110'][0] ) ) // credit				$meta['credit'] = utf8_encode(trim($iptc['2#110'][0]));			elseif ( ! empty( $iptc['2#080'][0] ) ) // creator / legacy byline				$meta['credit'] = utf8_encode(trim($iptc['2#080'][0]));			if ( ! empty( $iptc['2#055'][0] ) and ! empty( $iptc['2#060'][0] ) ) // created date and time				$meta['created_timestamp'] = strtotime( $iptc['2#055'][0] . ' ' . $iptc['2#060'][0] );			if ( ! empty( $iptc['2#116'][0] ) ) // copyright				$meta['copyright'] = utf8_encode( trim( $iptc['2#116'][0] ) );		 }	}	// fetch additional info from exif if available	if ( is_callable( 'exif_read_data' ) && in_array( $sourceImageType, apply_filters( 'wp_read_image_metadata_types', array( IMAGETYPE_JPEG, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM ) ) ) ) {		$exif = @exif_read_data( $file );		if ( !empty( $exif['Title'] ) )			$meta['title'] = utf8_encode( trim( $exif['Title'] ) );		if ( ! empty( $exif['ImageDescription'] ) ) {			if ( empty( $meta['title'] ) && strlen( $exif['ImageDescription'] ) < 80 ) {				// Assume the title is stored in ImageDescription				$meta['title'] = utf8_encode( trim( $exif['ImageDescription'] ) );				if ( ! empty( $exif['COMPUTED']['UserComment'] ) && trim( $exif['COMPUTED']['UserComment'] ) != $meta['title'] )					$meta['caption'] = utf8_encode( trim( $exif['COMPUTED']['UserComment'] ) );			} elseif ( trim( $exif['ImageDescription'] ) != $meta['title'] ) {				$meta['caption'] = utf8_encode( trim( $exif['ImageDescription'] ) );			}		} elseif ( ! empty( $exif['Comments'] ) && trim( $exif['Comments'] ) != $meta['title'] ) {			$meta['caption'] = utf8_encode( trim( $exif['Comments'] ) );		}		if ( ! empty( $exif['Artist'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Artist'] ) );		elseif ( ! empty($exif['Author'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Author'] ) );		if ( ! empty( $exif['Copyright'] ) )			$meta['copyright'] = utf8_encode( trim( $exif['Copyright'] ) );		if ( ! empty($exif['FNumber'] ) )			$meta['aperture'] = round( wp_exif_frac2dec( $exif['FNumber'] ), 2 );		if ( ! empty($exif['Model'] ) )			$meta['camera'] = utf8_encode( trim( $exif['Model'] ) );		if ( ! empty($exif['DateTimeDigitized'] ) )			$meta['created_timestamp'] = wp_exif_date2ts($exif['DateTimeDigitized'] );		if ( ! empty($exif['FocalLength'] ) )			$meta['focal_length'] = wp_exif_frac2dec( $exif['FocalLength'] );		if ( ! empty($exif['ISOSpeedRatings'] ) )			$meta['iso'] = utf8_encode( trim( $exif['ISOSpeedRatings'] ) );		if ( ! empty($exif['ExposureTime'] ) )			$meta['shutter_speed'] = wp_exif_frac2dec( $exif['ExposureTime'] );	}	return apply_filters( 'wp_read_image_metadata', $meta, $file, $sourceImageType );}/** * Validate that file is an image. * * @since 2.5.0 * * @param string $path File path to test if valid image. * @return bool True if valid image, false if not valid image. */function file_is_valid_image($path) {	$size = @getimagesize($path);	return !empty($size);}/** * Validate that file is suitable for displaying within a web page. * * @since 2.5.0 * @uses apply_filters() Calls 'file_is_displayable_image' on $result and $path. * * @param string $path File path to test. * @return bool True if suitable, false if not suitable. */function file_is_displayable_image($path) {	$info = @getimagesize($path);	if ( empty($info) )		$result = false;	elseif ( !in_array($info[2], array(IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG)) )	// only gif, jpeg and png images can reliably be displayed		$result = false;	else		$result = true;	return apply_filters('file_is_displayable_image', $result, $path);}
<?php/** * IXR - The Inutio XML-RPC Library * * @package IXR * @since 1.5 * * @copyright Incutio Ltd 2002-2005 * @version 1.7 (beta) 23rd May 2005 * @author Simon Willison * @link http://scripts.incutio.com/xmlrpc/ Site * @link http://scripts.incutio.com/xmlrpc/manual.php Manual * @license BSD License http://www.opensource.org/licenses/bsd-license.php *//** * IXR_Value * * @package IXR * @since 1.5 */class IXR_Value {    var $data;    var $type;    function IXR_Value ($data, $type = false) {        $this->data = $data;        if (!$type) {            $type = $this->calculateType();        }        $this->type = $type;        if ($type == 'struct') {            /* Turn all the values in the array in to new IXR_Value objects */            foreach ($this->data as $key => $value) {                $this->data[$key] = new IXR_Value($value);            }        }        if ($type == 'array') {            for ($i = 0, $j = count($this->data); $i < $j; $i++) {                $this->data[$i] = new IXR_Value($this->data[$i]);            }        }    }    function calculateType() {        if ($this->data === true || $this->data === false) {            return 'boolean';        }        if (is_integer($this->data)) {            return 'int';        }        if (is_double($this->data)) {            return 'double';        }        // Deal with IXR object types base64 and date        if (is_object($this->data) && is_a($this->data, 'IXR_Date')) {            return 'date';        }        if (is_object($this->data) && is_a($this->data, 'IXR_Base64')) {            return 'base64';        }        // If it is a normal PHP object convert it in to a struct        if (is_object($this->data)) {            $this->data = get_object_vars($this->data);            return 'struct';        }        if (!is_array($this->data)) {            return 'string';        }        /* We have an array - is it an array or a struct ? */        if ($this->isStruct($this->data)) {            return 'struct';        } else {            return 'array';        }    }    function getXml() {        /* Return XML for this value */        switch ($this->type) {            case 'boolean':                return '<boolean>'.(($this->data) ? '1' : '0').'</boolean>';                break;            case 'int':                return '<int>'.$this->data.'</int>';                break;            case 'double':                return '<double>'.$this->data.'</double>';                break;            case 'string':                return '<string>'.htmlspecialchars($this->data).'</string>';                break;            case 'array':                $return = '<array><data>'."\n";                foreach ($this->data as $item) {                    $return .= '  <value>'.$item->getXml()."</value>\n";                }                $return .= '</data></array>';                return $return;                break;            case 'struct':                $return = '<struct>'."\n";                foreach ($this->data as $name => $value) {					$name = htmlspecialchars($name);                    $return .= "  <member><name>$name</name><value>";                    $return .= $value->getXml()."</value></member>\n";                }                $return .= '</struct>';                return $return;                break;            case 'date':            case 'base64':                return $this->data->getXml();                break;        }        return false;    }    function isStruct($array) {        /* Nasty function to check if an array is a struct or not */        $expected = 0;        foreach ($array as $key => $value) {            if ((string)$key != (string)$expected) {                return true;            }            $expected++;        }        return false;    }}/** * IXR_Message * * @package IXR * @since 1.5 */class IXR_Message {    var $message;    var $messageType;  // methodCall / methodResponse / fault    var $faultCode;    var $faultString;    var $methodName;    var $params;    // Current variable stacks    var $_arraystructs = array();   // The stack used to keep track of the current array/struct    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array    var $_currentStructName = array();  // A stack as well    var $_param;    var $_value;    var $_currentTag;    var $_currentTagContents;    // The XML parser    var $_parser;    function IXR_Message (&$message) {        $this->message = &$message;    }    function parse() {		// first remove the XML declaration		// this method avoids the RAM usage of preg_replace on very large messages		$header = preg_replace( '/<\?xml.*?\?'.'>/', '', substr( $this->message, 0, 100 ), 1 );		$this->message = substr_replace($this->message, $header, 0, 100);        if (trim($this->message) == '') {            return false;		}        $this->_parser = xml_parser_create();        // Set XML parser to take the case of tags in to account        xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, false);        // Set XML parser callback functions        xml_set_object($this->_parser, $this);        xml_set_element_handler($this->_parser, 'tag_open', 'tag_close');		xml_set_character_data_handler($this->_parser, 'cdata');		$chunk_size = 262144; // 256Kb, parse in chunks to avoid the RAM usage on very large messages		do {			if ( strlen($this->message) <= $chunk_size )				$final=true;			$part = substr( $this->message, 0, $chunk_size );			$this->message = substr( $this->message, $chunk_size );			if ( !xml_parse( $this->_parser, $part, $final ) )				return false;			if ( $final )				break;		} while ( true );		xml_parser_free($this->_parser);        // Grab the error messages, if any        if ($this->messageType == 'fault') {            $this->faultCode = $this->params[0]['faultCode'];            $this->faultString = $this->params[0]['faultString'];		}        return true;    }    function tag_open($parser, $tag, $attr) {        $this->_currentTagContents = '';        $this->currentTag = $tag;        switch($tag) {            case 'methodCall':            case 'methodResponse':            case 'fault':                $this->messageType = $tag;                break;            /* Deal with stacks of arrays and structs */            case 'data':    // data is to all intents and puposes more interesting than array                $this->_arraystructstypes[] = 'array';                $this->_arraystructs[] = array();                break;            case 'struct':                $this->_arraystructstypes[] = 'struct';                $this->_arraystructs[] = array();                break;        }    }    function cdata($parser, $cdata) {        $this->_currentTagContents .= $cdata;    }    function tag_close($parser, $tag) {        $valueFlag = false;        switch($tag) {            case 'int':            case 'i4':                $value = (int) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'double':                $value = (double) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'string':                $value = $this->_currentTagContents;                $valueFlag = true;                break;            case 'dateTime.iso8601':                $value = new IXR_Date(trim($this->_currentTagContents));                // $value = $iso->getTimestamp();                $valueFlag = true;                break;            case 'value':                // "If no type is indicated, the type is string."                if (trim($this->_currentTagContents) != '') {                    $value = (string)$this->_currentTagContents;                    $valueFlag = true;                }                break;            case 'boolean':                $value = (boolean) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'base64':                $value = base64_decode( trim( $this->_currentTagContents ) );                $valueFlag = true;                break;            /* Deal with stacks of arrays and structs */            case 'data':            case 'struct':                $value = array_pop($this->_arraystructs);                array_pop($this->_arraystructstypes);                $valueFlag = true;                break;            case 'member':                array_pop($this->_currentStructName);                break;            case 'name':                $this->_currentStructName[] = trim($this->_currentTagContents);                break;            case 'methodName':                $this->methodName = trim($this->_currentTagContents);                break;        }        if ($valueFlag) {            if (count($this->_arraystructs) > 0) {                // Add value to struct or array                if ($this->_arraystructstypes[count($this->_arraystructstypes)-1] == 'struct') {                    // Add to struct                    $this->_arraystructs[count($this->_arraystructs)-1][$this->_currentStructName[count($this->_currentStructName)-1]] = $value;                } else {                    // Add to array                    $this->_arraystructs[count($this->_arraystructs)-1][] = $value;                }            } else {                // Just add as a paramater                $this->params[] = $value;            }        }        $this->_currentTagContents = '';    }}/** * IXR_Server * * @package IXR * @since 1.5 */class IXR_Server {    var $data;    var $callbacks = array();    var $message;    var $capabilities;    function IXR_Server($callbacks = false, $data = false) {        $this->setCapabilities();        if ($callbacks) {            $this->callbacks = $callbacks;        }        $this->setCallbacks();        $this->serve($data);    }    function serve($data = false) {        if (!$data) {            global $HTTP_RAW_POST_DATA;            if (!$HTTP_RAW_POST_DATA) {               header( 'Content-Type: text/plain' );               die('XML-RPC server accepts POST requests only.');            }            $data = &$HTTP_RAW_POST_DATA;        }        $this->message = new IXR_Message($data);        if (!$this->message->parse()) {            $this->error(-32700, 'parse error. not well formed');        }        if ($this->message->messageType != 'methodCall') {            $this->error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');        }        $result = $this->call($this->message->methodName, $this->message->params);        // Is the result an error?        if (is_a($result, 'IXR_Error')) {            $this->error($result);        }        // Encode the result        $r = new IXR_Value($result);        $resultxml = $r->getXml();        // Create the XML        $xml = <<<EOD<methodResponse>  <params>    <param>      <value>        $resultxml      </value>    </param>  </params></methodResponse>EOD;        // Send it        $this->output($xml);    }    function call($methodname, $args) {        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method '.                $methodname.' does not exist.');        }        $method = $this->callbacks[$methodname];        // Perform the callback and send the response        if (count($args) == 1) {            // If only one paramater just send that instead of the whole array            $args = $args[0];        }        // Are we dealing with a function or a method?        if ( is_string( $method ) && substr($method, 0, 5) == 'this:' ) {            // It's a class method - check it exists            $method = substr($method, 5);            if (!method_exists($this, $method)) {                return new IXR_Error(-32601, 'server error. requested class method "'.                    $method.'" does not exist.');            }            // Call the method            $result = $this->$method($args);        } else {            // It's a function - does it exist?            if (is_array($method)) {                if (!method_exists($method[0], $method[1])) {                    return new IXR_Error(-32601, 'server error. requested object method "'.                        $method[1].'" does not exist.');                }            } else if (!function_exists($method)) {                return new IXR_Error(-32601, 'server error. requested function "'.                    $method.'" does not exist.');            }            // Call the function            $result = call_user_func($method, $args);        }        return $result;    }    function error($error, $message = false) {        // Accepts either an error object or an error code and message        if ($message && !is_object($error)) {            $error = new IXR_Error($error, $message);        }        $this->output($error->getXml());    }    function output($xml) {        $xml = '<?xml version="1.0"?>'."\n".$xml;        $length = strlen($xml);        header('Connection: close');        header('Content-Length: '.$length);        header('Content-Type: text/xml');        header('Date: '.date('r'));        echo $xml;        exit;    }    function hasMethod($method) {        return in_array($method, array_keys($this->callbacks));    }    function setCapabilities() {        // Initialises capabilities array        $this->capabilities = array(            'xmlrpc' => array(                'specUrl' => 'http://www.xmlrpc.com/spec',                'specVersion' => 1            ),            'faults_interop' => array(                'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',                'specVersion' => 20010516            ),            'system.multicall' => array(                'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',                'specVersion' => 1            ),        );    }    function getCapabilities($args) {        return $this->capabilities;    }    function setCallbacks() {        $this->callbacks['system.getCapabilities'] = 'this:getCapabilities';        $this->callbacks['system.listMethods'] = 'this:listMethods';        $this->callbacks['system.multicall'] = 'this:multiCall';    }    function listMethods($args) {        // Returns a list of methods - uses array_reverse to ensure user defined        // methods are listed before server defined methods        return array_reverse(array_keys($this->callbacks));    }    function multiCall($methodcalls) {        // See http://www.xmlrpc.com/discuss/msgReader$1208        $return = array();        foreach ($methodcalls as $call) {            $method = $call['methodName'];            $params = $call['params'];            if ($method == 'system.multicall') {                $result = new IXR_Error(-32600, 'Recursive calls to system.multicall are forbidden');            } else {                $result = $this->call($method, $params);            }            if (is_a($result, 'IXR_Error')) {                $return[] = array(                    'faultCode' => $result->code,                    'faultString' => $result->message                );            } else {                $return[] = array($result);            }        }        return $return;    }}/** * IXR_Request * * @package IXR * @since 1.5 */class IXR_Request {    var $method;    var $args;    var $xml;    function IXR_Request($method, $args) {        $this->method = $method;        $this->args = $args;        $this->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$this->method}</methodName><params>EOD;        foreach ($this->args as $arg) {            $this->xml .= '<param><value>';            $v = new IXR_Value($arg);            $this->xml .= $v->getXml();            $this->xml .= "</value></param>\n";        }        $this->xml .= '</params></methodCall>';    }    function getLength() {        return strlen($this->xml);    }    function getXml() {        return $this->xml;    }}/** * IXR_Client * * @package IXR * @since 1.5 */class IXR_Client {    var $server;    var $port;    var $path;    var $useragent;	var $headers;    var $response;    var $message = false;    var $debug = false;    var $timeout;    // Storage place for an error message    var $error = false;    function IXR_Client($server, $path = false, $port = 80, $timeout = false) {        if (!$path) {            // Assume we have been given a URL instead            $bits = parse_url($server);            $this->server = $bits['host'];            $this->port = isset($bits['port']) ? $bits['port'] : 80;            $this->path = isset($bits['path']) ? $bits['path'] : '/';            // Make absolutely sure we have a path            if (!$this->path) {                $this->path = '/';            }        } else {            $this->server = $server;            $this->path = $path;            $this->port = $port;        }        $this->useragent = 'The Incutio XML-RPC PHP Library';        $this->timeout = $timeout;    }    function query() {        $args = func_get_args();        $method = array_shift($args);        $request = new IXR_Request($method, $args);        $length = $request->getLength();        $xml = $request->getXml();        $r = "\r\n";        $request  = "POST {$this->path} HTTP/1.0$r";		$this->headers['Host']			= $this->server;		$this->headers['Content-Type']	= 'text/xml';		$this->headers['User-Agent']	= $this->useragent;		$this->headers['Content-Length']= $length;		foreach( $this->headers as $header => $value ) {			$request .= "{$header}: {$value}{$r}";		}		$request .= $r;        $request .= $xml;        // Now send the request        if ($this->debug) {            echo '<pre class="ixr_request">'.htmlspecialchars($request)."\n</pre>\n\n";        }        if ($this->timeout) {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr, $this->timeout);        } else {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr);        }        if (!$fp) {            $this->error = new IXR_Error(-32300, "transport error - could not open socket: $errno $errstr");            return false;        }        fputs($fp, $request);        $contents = '';        $debug_contents = '';        $gotFirstLine = false;        $gettingHeaders = true;        while (!feof($fp)) {            $line = fgets($fp, 4096);            if (!$gotFirstLine) {                // Check line for '200'                if (strstr($line, '200') === false) {                    $this->error = new IXR_Error(-32301, 'transport error - HTTP status code was not 200');                    return false;                }                $gotFirstLine = true;            }            if (trim($line) == '') {                $gettingHeaders = false;            }            if (!$gettingHeaders) {            	// WP#12559 remove trim so as to not strip newlines from received response.                $contents .= $line;            }            if ($this->debug) {                $debug_contents .= $line;            }        }        if ($this->debug) {            echo '<pre class="ixr_response">'.htmlspecialchars($debug_contents)."\n</pre>\n\n";        }        // Now parse what we've got back        $this->message = new IXR_Message($contents);        if (!$this->message->parse()) {            // XML error            $this->error = new IXR_Error(-32700, 'parse error. not well formed');            return false;        }        // Is the message a fault?        if ($this->message->messageType == 'fault') {            $this->error = new IXR_Error($this->message->faultCode, $this->message->faultString);            return false;        }        // Message must be OK        return true;    }    function getResponse() {        // methodResponses can only have one param - return that        return $this->message->params[0];    }    function isError() {        return (is_object($this->error));    }    function getErrorCode() {        return $this->error->code;    }    function getErrorMessage() {        return $this->error->message;    }}/** * IXR_Error * * @package IXR * @since 1.5 */class IXR_Error {    var $code;    var $message;    function IXR_Error($code, $message) {        $this->code = $code;        // WP adds htmlspecialchars(). See #5666        $this->message = htmlspecialchars($message);    }    function getXml() {        $xml = <<<EOD<methodResponse>  <fault>    <value>      <struct>        <member>          <name>faultCode</name>          <value><int>{$this->code}</int></value>        </member>        <member>          <name>faultString</name>          <value><string>{$this->message}</string></value>        </member>      </struct>    </value>  </fault></methodResponse>EOD;        return $xml;    }}/** * IXR_Date * * @package IXR * @since 1.5 */class IXR_Date {    var $year;    var $month;    var $day;    var $hour;    var $minute;    var $second;    var $timezone;    function IXR_Date($time) {        // $time can be a PHP timestamp or an ISO one        if (is_numeric($time)) {            $this->parseTimestamp($time);        } else {            $this->parseIso($time);        }    }    function parseTimestamp($timestamp) {        $this->year = date('Y', $timestamp);        $this->month = date('m', $timestamp);        $this->day = date('d', $timestamp);        $this->hour = date('H', $timestamp);        $this->minute = date('i', $timestamp);        $this->second = date('s', $timestamp);        // WP adds timezone. See #2036        $this->timezone = '';    }    function parseIso($iso) {        $this->year = substr($iso, 0, 4);        $this->month = substr($iso, 4, 2);        $this->day = substr($iso, 6, 2);        $this->hour = substr($iso, 9, 2);        $this->minute = substr($iso, 12, 2);        $this->second = substr($iso, 15, 2);        // WP adds timezone. See #2036        $this->timezone = substr($iso, 17);    }    function getIso() {    	// WP adds timezone. See #2036        return $this->year.$this->month.$this->day.'T'.$this->hour.':'.$this->minute.':'.$this->second.$this->timezone;    }    function getXml() {        return '<dateTime.iso8601>'.$this->getIso().'</dateTime.iso8601>';    }    function getTimestamp() {        return mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year);    }}/** * IXR_Base64 * * @package IXR * @since 1.5 */class IXR_Base64 {    var $data;    function IXR_Base64($data) {        $this->data = $data;    }    function getXml() {        return '<base64>'.base64_encode($this->data).'</base64>';    }}/** * IXR_IntrospectionServer * * @package IXR * @since 1.5 */class IXR_IntrospectionServer extends IXR_Server {    var $signatures;    var $help;    function IXR_IntrospectionServer() {        $this->setCallbacks();        $this->setCapabilities();        $this->capabilities['introspection'] = array(            'specUrl' => 'http://xmlrpc.usefulinc.com/doc/reserved.html',            'specVersion' => 1        );        $this->addCallback(            'system.methodSignature',            'this:methodSignature',            array('array', 'string'),            'Returns an array describing the return type and required parameters of a method'        );        $this->addCallback(            'system.getCapabilities',            'this:getCapabilities',            array('struct'),            'Returns a struct describing the XML-RPC specifications supported by this server'        );        $this->addCallback(            'system.listMethods',            'this:listMethods',            array('array'),            'Returns an array of available methods on this server'        );        $this->addCallback(            'system.methodHelp',            'this:methodHelp',            array('string', 'string'),            'Returns a documentation string for the specified method'        );    }    function addCallback($method, $callback, $args, $help) {        $this->callbacks[$method] = $callback;        $this->signatures[$method] = $args;        $this->help[$method] = $help;    }    function call($methodname, $args) {        // Make sure it's in an array        if ($args && !is_array($args)) {            $args = array($args);        }        // Over-rides default call method, adds signature check        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method "'.$this->message->methodName.'" not specified.');        }        $method = $this->callbacks[$methodname];        $signature = $this->signatures[$methodname];        $returnType = array_shift($signature);        // Check the number of arguments        if (count($args) != count($signature)) {            return new IXR_Error(-32602, 'server error. wrong number of method parameters');        }        // Check the argument types        $ok = true;        $argsbackup = $args;        for ($i = 0, $j = count($args); $i < $j; $i++) {            $arg = array_shift($args);            $type = array_shift($signature);            switch ($type) {                case 'int':                case 'i4':                    if (is_array($arg) || !is_int($arg)) {                        $ok = false;                    }                    break;                case 'base64':                case 'string':                    if (!is_string($arg)) {                        $ok = false;                    }                    break;                case 'boolean':                    if ($arg !== false && $arg !== true) {                        $ok = false;                    }                    break;                case 'float':                case 'double':                    if (!is_float($arg)) {                        $ok = false;                    }                    break;                case 'date':                case 'dateTime.iso8601':                    if (!is_a($arg, 'IXR_Date')) {                        $ok = false;                    }                    break;            }            if (!$ok) {                return new IXR_Error(-32602, 'server error. invalid method parameters');            }        }        // It passed the test - run the "real" method call        return parent::call($methodname, $argsbackup);    }    function methodSignature($method) {        if (!$this->hasMethod($method)) {            return new IXR_Error(-32601, 'server error. requested method "'.$method.'" not specified.');        }        // We should be returning an array of types        $types = $this->signatures[$method];        $return = array();        foreach ($types as $type) {            switch ($type) {                case 'string':                    $return[] = 'string';                    break;                case 'int':                case 'i4':                    $return[] = 42;                    break;                case 'double':                    $return[] = 3.1415;                    break;                case 'dateTime.iso8601':                    $return[] = new IXR_Date(time());                    break;                case 'boolean':                    $return[] = true;                    break;                case 'base64':                    $return[] = new IXR_Base64('base64');                    break;                case 'array':                    $return[] = array('array');                    break;                case 'struct':                    $return[] = array('struct' => 'struct');                    break;            }        }        return $return;    }    function methodHelp($method) {        return $this->help[$method];    }}/** * IXR_ClientMulticall * * @package IXR * @since 1.5 */class IXR_ClientMulticall extends IXR_Client {    var $calls = array();    function IXR_ClientMulticall($server, $path = false, $port = 80) {        parent::IXR_Client($server, $path, $port);        $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';    }    function addCall() {        $args = func_get_args();        $methodName = array_shift($args);        $struct = array(            'methodName' => $methodName,            'params' => $args        );        $this->calls[] = $struct;    }    function query() {        // Prepare multicall, then call the parent::query() method        return parent::query('system.multicall', $this->calls);    }}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><title><?php wp_title('&laquo;', true, 'right'); ?> <?php bloginfo('name'); ?></title><link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" type="text/css" media="screen" /><link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" /><style type="text/css" media="screen"><?php// Checks to see whether it needs a sidebarif ( empty($withcomments) && !is_single() ) {?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbg-<?php bloginfo('text_direction'); ?>.jpg") repeat-y top; border: none; }<?php } else { // No sidebar ?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbgwide.jpg") repeat-y top; border: none; }<?php } ?></style><?php if ( is_singular() ) wp_enqueue_script( 'comment-reply' ); ?><?php wp_head(); ?></head><body <?php body_class(); ?>><div id="page"><div id="header" role="banner">	<div id="headerimg">		<h1><a href="<?php echo home_url(); ?>/"><?php bloginfo('name'); ?></a></h1>		<div class="description"><?php bloginfo('description'); ?></div>	</div></div><hr />
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress *//** * Defines initial WordPress constants * * @see wp_debug_mode() * * @since 3.0.0 */function wp_initial_constants( ) {	global $blog_id;	// set memory limits	if ( !defined('WP_MEMORY_LIMIT') ) {		if( is_multisite() ) {			define('WP_MEMORY_LIMIT', '64M');		} else {			define('WP_MEMORY_LIMIT', '32M');		}	}	/**	 * The $blog_id global, which you can change in the config allows you to create a simple	 * multiple blog installation using just one WordPress and changing $blog_id around.	 *	 * @global int $blog_id	 * @since 2.0.0	 */	if ( ! isset($blog_id) )		$blog_id = 1;	// set memory limits.	if ( function_exists('memory_get_usage') && ( (int) @ini_get('memory_limit') < abs(intval(WP_MEMORY_LIMIT)) ) )		@ini_set('memory_limit', WP_MEMORY_LIMIT);	if ( !defined('WP_CONTENT_DIR') )		define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' ); // no trailing slash, full paths only - WP_CONTENT_URL is defined further down	// Add define('WP_DEBUG', true); to wp-config.php to enable display of notices during development.	if ( !defined('WP_DEBUG') )		define( 'WP_DEBUG', false );	// Add define('WP_DEBUG_DISPLAY', false); to wp-config.php use the globally configured setting for display_errors and not force errors to be displayed.	if ( !defined('WP_DEBUG_DISPLAY') )		define( 'WP_DEBUG_DISPLAY', true );	// Add define('WP_DEBUG_LOG', true); to enable error logging to wp-content/debug.log.	if ( !defined('WP_DEBUG_LOG') )		define('WP_DEBUG_LOG', false);	if ( !defined('WP_CACHE') )		define('WP_CACHE', false);	/**	 * Private	 */	if ( !defined('MEDIA_TRASH') )		define('MEDIA_TRASH', false);	if ( !defined('SHORTINIT') )		define('SHORTINIT', false);}/** * Defines plugin directory WordPress constants * * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in * * @since 3.0.0 */function wp_plugin_directory_constants( ) {	if ( !defined('WP_CONTENT_URL') )		define( 'WP_CONTENT_URL', get_option('siteurl') . '/wp-content'); // full url - WP_CONTENT_DIR is defined further up	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_DIR') )		define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' ); // full path, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_URL') )		define( 'WP_PLUGIN_URL', WP_CONTENT_URL . '/plugins' ); // full url, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.1.0	 * @deprecated	 */	if ( !defined('PLUGINDIR') )		define( 'PLUGINDIR', 'wp-content/plugins' ); // Relative to ABSPATH.  For back compat.	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_DIR') )		define( 'WPMU_PLUGIN_DIR', WP_CONTENT_DIR . '/mu-plugins' ); // full path, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_URL') )		define( 'WPMU_PLUGIN_URL', WP_CONTENT_URL . '/mu-plugins' ); // full url, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 * @deprecated	 */	if ( !defined( 'MUPLUGINDIR' ) )		define( 'MUPLUGINDIR', 'wp-content/mu-plugins' ); // Relative to ABSPATH.  For back compat.}/** * Defines cookie related WordPress constants * * Defines constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies(). * @since 3.0.0 */function wp_cookie_constants( ) {	global $wp_default_secret_key;	/**	 * Used to guarantee unique hash cookies	 * @since 1.5	 */	if ( !defined( 'COOKIEHASH' ) ) {		$siteurl = get_site_option( 'siteurl' );		if ( $siteurl )			define( 'COOKIEHASH', md5( $siteurl ) );		else			define( 'COOKIEHASH', '' );	}	/**	 * Should be exactly the same as the default value of SECRET_KEY in wp-config-sample.php	 * @since 2.5.0	 */	$wp_default_secret_key = 'put your unique phrase here';	/**	 * @since 2.0.0	 */	if ( !defined('USER_COOKIE') )		define('USER_COOKIE', 'wordpressuser_' . COOKIEHASH);	/**	 * @since 2.0.0	 */	if ( !defined('PASS_COOKIE') )		define('PASS_COOKIE', 'wordpresspass_' . COOKIEHASH);	/**	 * @since 2.5.0	 */	if ( !defined('AUTH_COOKIE') )		define('AUTH_COOKIE', 'wordpress_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('SECURE_AUTH_COOKIE') )		define('SECURE_AUTH_COOKIE', 'wordpress_sec_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('LOGGED_IN_COOKIE') )		define('LOGGED_IN_COOKIE', 'wordpress_logged_in_' . COOKIEHASH);	/**	 * @since 2.3.0	 */	if ( !defined('TEST_COOKIE') )		define('TEST_COOKIE', 'wordpress_test_cookie');	/**	 * @since 1.2.0	 */	if ( !defined('COOKIEPATH') )		define('COOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('home') . '/' ) );	/**	 * @since 1.5.0	 */	if ( !defined('SITECOOKIEPATH') )		define('SITECOOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('siteurl') . '/' ) );	/**	 * @since 2.6.0	 */	if ( !defined('ADMIN_COOKIE_PATH') )		define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );	/**	 * @since 2.6.0	 */	if ( !defined('PLUGINS_COOKIE_PATH') )		define( 'PLUGINS_COOKIE_PATH', preg_replace('|https?://[^/]+|i', '', WP_PLUGIN_URL)  );	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') )		define('COOKIE_DOMAIN', false);}/** * Defines cookie related WordPress constants * * @since 3.0.0 */function wp_ssl_constants( ) {	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_ADMIN') )		define('FORCE_SSL_ADMIN', false);	force_ssl_admin(FORCE_SSL_ADMIN);	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_LOGIN') )		define('FORCE_SSL_LOGIN', false);	force_ssl_login(FORCE_SSL_LOGIN);}/** * Defines functionality related WordPress constants * * @since 3.0.0 */function wp_functionality_constants( ) {	/**	 * @since 2.5.0	 */	if ( !defined( 'AUTOSAVE_INTERVAL' ) )		define( 'AUTOSAVE_INTERVAL', 60 );	/**	 * @since 2.9.0	 */	if ( !defined( 'EMPTY_TRASH_DAYS' ) )		define( 'EMPTY_TRASH_DAYS', 30 );	if ( !defined('WP_POST_REVISIONS') )		define('WP_POST_REVISIONS', true);}/** * Defines templating related WordPress constants * * @since 3.0.0 */function wp_templating_constants( ) {	/**	 * Web Path to the current active template directory	 * @since 1.5.0	 */	define('TEMPLATEPATH', get_template_directory());	/**	 * Web Path to the current active template stylesheet directory	 * @since 2.1.0	 */	define('STYLESHEETPATH', get_stylesheet_directory());	/**	 * Slug of the default theme for this install.	 * Used as the default theme when installing new sites.	 * Will be used as the fallback if the current theme doesn't exist.	 * @since 3.0.0	 */	if ( !defined('WP_DEFAULT_THEME') )		define( 'WP_DEFAULT_THEME', 'twentyten' );}?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Socket Based FTP implementation * * @package PemFTP * @subpackage Socket * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(true, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@socket_set_option($sock, SOL_SOCKET, SO_RCVTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set receive timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		if(!@socket_set_option($sock, SOL_SOCKET , SO_SNDTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set send timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		return true;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		if(!($sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {			$this->PushError('_connect','socket create failed',socket_strerror(socket_last_error($sock)));			return FALSE;		}		if(!$this->_settimeout($sock)) return FALSE;		$this->SendMSG("Connecting to \"".$host.":".$port."\"");		if (!($res = @socket_connect($sock, $host, $port))) {			$this->PushError('_connect','socket connect failed',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@socket_read($this->_ftp_control_sock, 4096, PHP_BINARY_READ);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed', socket_strerror(socket_last_error($this->_ftp_control_sock)));			} else {				$this->_message.=$tmp;				$go = !preg_match("/^([0-9]{3})(-.+\\1)? [^".CRLF."]+".CRLF."$/Us", $this->_message, $regs);			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@socket_write($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed', socket_strerror(socket_last_error($this->stream)));			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		$this->SendMSG("Creating data socket");		$this->_ftp_data_sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);		if ($this->_ftp_data_sock < 0) {			$this->PushError('_data_prepare','socket create failed',socket_strerror(socket_last_error($this->_ftp_data_sock)));			return FALSE;		}		if(!$this->_settimeout($this->_ftp_data_sock)) {			$this->_data_close();			return FALSE;		}		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			if(!@socket_connect($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","socket_connect", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			else $this->_ftp_temp_sock=$this->_ftp_data_sock;		} else {			if(!@socket_getsockname($this->_ftp_control_sock, $addr, $port)) {				$this->PushError("_data_prepare","can't get control socket information", socket_strerror(socket_last_error($this->_ftp_control_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_bind($this->_ftp_data_sock,$addr)){				$this->PushError("_data_prepare","can't bind data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_listen($this->_ftp_data_sock)) {				$this->PushError("_data_prepare","can't listen data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_getsockname($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","can't get data socket information", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!$this->_exec('PORT '.str_replace('.',',',$this->_datahost.'.'.($this->_dataport>>8).'.'.($this->_dataport&0x00FF)), "_port")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_read","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}		}		while(($block=@socket_read($this->_ftp_temp_sock, $this->_ftp_buff_size, PHP_BINARY_READ))!==false) {			if($block==="") break;			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_write","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return false;			}		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return true;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@socket_write($this->_ftp_temp_sock, $block))===FALSE) {				$this->PushError("_data_write","socket_write", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@socket_close($this->_ftp_temp_sock);		@socket_close($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit() {		if($this->_connected) {			@socket_close($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * WordPress CRON API * * @package WordPress *//** * Schedules a hook to run only once. * * Schedules a hook which will be executed once by the WordPress actions core at * a time which you specify. The action will fire off when someone visits your * WordPress site, if the schedule time has passed. * * @since 2.1.0 * @link http://codex.wordpress.org/Function_Reference/wp_schedule_single_event * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. */function wp_schedule_single_event( $timestamp, $hook, $args = array()) {	// don't schedule a duplicate if there's already an identical event due in the next 10 minutes	$next = wp_next_scheduled($hook, $args);	if ( $next && $next <= $timestamp + 600 )		return;	$crons = _get_cron_array();	$key = md5(serialize($args));	$crons[$timestamp][$hook][$key] = array( 'schedule' => false, 'args' => $args );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Schedule a periodic event. * * Schedules a hook which will be executed by the WordPress actions core on a * specific interval, specified by you. The action will trigger when someone * visits your WordPress site, if the scheduled time has passed. * * Valid values for the recurrence are hourly, daily and twicedaily.  These can * be extended using the cron_schedules filter in wp_get_schedules(). * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure, null when complete with scheduling event. */function wp_schedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	if ( !isset( $schedules[$recurrence] ) )		return false;	$crons[$timestamp][$hook][$key] = array( 'schedule' => $recurrence, 'args' => $args, 'interval' => $schedules[$recurrence]['interval'] );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Reschedule a recurring event. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure. Null when event is rescheduled. */function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	$interval = 0;	// First we try to get it from the schedule	if ( 0 == $interval )		$interval = $schedules[$recurrence]['interval'];	// Now we try to get it from the saved interval in case the schedule disappears	if ( 0 == $interval )		$interval = $crons[$timestamp][$hook][$key]['interval'];	// Now we assume something is wrong and fail to schedule	if ( 0 == $interval )		return false;	$now = time();    if ( $timestamp >= $now )        $timestamp = $now + $interval;    else        $timestamp = $now + ($interval - (($now - $timestamp) % $interval));	wp_schedule_event( $timestamp, $recurrence, $hook, $args );}/** * Unschedule a previously scheduled cron job. * * The $timestamp and $hook parameters are required, so that the event can be * identified. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Arguments to pass to the hook's callback function. * Although not passed to a callback function, these arguments are used * to uniquely identify the scheduled event, so they should be the same * as those used when originally scheduling the event. */function wp_unschedule_event( $timestamp, $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	unset( $crons[$timestamp][$hook][$key] );	if ( empty($crons[$timestamp][$hook]) )		unset( $crons[$timestamp][$hook] );	if ( empty($crons[$timestamp]) )		unset( $crons[$timestamp] );	_set_cron_array( $crons );}/** * Unschedule all cron jobs attached to a specific hook. * * @since 2.1.0 * * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Optional. Arguments that were to be pass to the hook's callback function. */function wp_clear_scheduled_hook( $hook, $args = array() ) {	// Backward compatibility	// Previously this function took the arguments as discrete vars rather than an array like the rest of the API	if ( !is_array($args) ) {		_deprecated_argument( __FUNCTION__, '3.0.0', __('This argument has changed to an array to match the behavior of the other cron functions.') );		$args = array_slice( func_get_args(), 1 );	}	while ( $timestamp = wp_next_scheduled( $hook, $args ) )		wp_unschedule_event( $timestamp, $hook, $args );}/** * Retrieve the next timestamp for a cron event. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|int The UNIX timestamp of the next time the scheduled event will occur. */function wp_next_scheduled( $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $timestamp;	}	return false;}/** * Send request to run cron through HTTP request that doesn't halt page loading. * * @since 2.1.0 * * @return null Cron could not be spawned, because it is not needed to run. */function spawn_cron( $local_time = 0 ) {	if ( !$local_time )		$local_time = time();	if ( defined('DOING_CRON') || isset($_GET['doing_wp_cron']) )		return;	/*	 * do not even start the cron if local server timer has drifted	 * such as due to power failure, or misconfiguration	 */	$timer_accurate = check_server_timer( $local_time );	if ( !$timer_accurate )		return;	/*	* multiple processes on multiple web servers can run this code concurrently	* try to make this as atomic as possible by setting doing_cron switch	*/	$flag = get_transient('doing_cron');	if ( $flag > $local_time + 10*60 )		$flag = 0;	// don't run if another process is currently running it or more than once every 60 sec.	if ( $flag + 60 > $local_time )		return;	//sanity check	$crons = _get_cron_array();	if ( !is_array($crons) )		return;	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	if ( defined('ALTERNATE_WP_CRON') && ALTERNATE_WP_CRON ) {		if ( !empty($_POST) || defined('DOING_AJAX') )			return;		set_transient( 'doing_cron', $local_time );		ob_start();		wp_redirect( add_query_arg('doing_wp_cron', '', stripslashes($_SERVER['REQUEST_URI'])) );		echo ' ';		// flush any buffers and send the headers		while ( @ob_end_flush() );		flush();		WP_DEBUG ? include_once( ABSPATH . 'wp-cron.php' ) : @include_once( ABSPATH . 'wp-cron.php' );		return;	}	set_transient( 'doing_cron', $local_time );	$cron_url = get_option( 'siteurl' ) . '/wp-cron.php?doing_wp_cron';	wp_remote_post( $cron_url, array('timeout' => 0.01, 'blocking' => false, 'sslverify' => apply_filters('https_local_ssl_verify', true)) );}/** * Run scheduled callbacks or spawn cron for all scheduled events. * * @since 2.1.0 * * @return null When doesn't need to run Cron. */function wp_cron() {	// Prevent infinite loops caused by lack of wp-cron.php	if ( strpos($_SERVER['REQUEST_URI'], '/wp-cron.php') !== false || ( defined('DISABLE_WP_CRON') && DISABLE_WP_CRON ) )		return;	if ( false === $crons = _get_cron_array() )		return;	$local_time = time();	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	$schedules = wp_get_schedules();	foreach ( $crons as $timestamp => $cronhooks ) {		if ( $timestamp > $local_time ) break;		foreach ( (array) $cronhooks as $hook => $args ) {			if ( isset($schedules[$hook]['callback']) && !call_user_func( $schedules[$hook]['callback'] ) )				continue;			spawn_cron( $local_time );			break 2;		}	}}/** * Retrieve supported and filtered Cron recurrences. * * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by * hooking into the 'cron_schedules' filter. The filter accepts an array of * arrays. The outer array has a key that is the name of the schedule or for * example 'weekly'. The value is an array with two keys, one is 'interval' and * the other is 'display'. * * The 'interval' is a number in seconds of when the cron job should run. So for * 'hourly', the time is 3600 or 60*60. For weekly, the value would be * 60*60*24*7 or 604800. The value of 'interval' would then be 604800. * * The 'display' is the description. For the 'weekly' key, the 'display' would * be <code>__('Once Weekly')</code>. * * For your plugin, you will be passed an array. you can easily add your * schedule by doing the following. * <code> * // filter parameter variable name is 'array' *	$array['weekly'] = array( *		'interval' => 604800, *		'display' => __('Once Weekly') *	); * </code> * * @since 2.1.0 * * @return array */function wp_get_schedules() {	$schedules = array(		'hourly' => array( 'interval' => 3600, 'display' => __('Once Hourly') ),		'twicedaily' => array( 'interval' => 43200, 'display' => __('Twice Daily') ),		'daily' => array( 'interval' => 86400, 'display' => __('Once Daily') ),	);	return array_merge( apply_filters( 'cron_schedules', array() ), $schedules );}/** * Retrieve Cron schedule for hook with arguments. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return string|bool False, if no schedule. Schedule on success. */function wp_get_schedule($hook, $args = array()) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $cron[$hook][$key]['schedule'];	}	return false;}//// Private functions///** * Retrieve cron info array option. * * @since 2.1.0 * @access private * * @return array CRON info array. */function _get_cron_array()  {	$cron = get_option('cron');	if ( ! is_array($cron) )		return false;	if ( !isset($cron['version']) )		$cron = _upgrade_cron_array($cron);	unset($cron['version']);	return $cron;}/** * Updates the CRON option with the new CRON array. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. */function _set_cron_array($cron) {	$cron['version'] = 2;	update_option( 'cron', $cron );}/** * Upgrade a Cron info array. * * This function upgrades the Cron info array to version 2. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. * @return array An upgraded Cron info array. */function _upgrade_cron_array($cron) {	if ( isset($cron['version']) && 2 == $cron['version'])		return $cron;	$new_cron = array();	foreach ( (array) $cron as $timestamp => $hooks) {		foreach ( (array) $hooks as $hook => $args ) {			$key = md5(serialize($args['args']));			$new_cron[$timestamp][$hook][$key] = $args;		}	}	$new_cron['version'] = 2;	update_option( 'cron', $new_cron );	return $new_cron;}// stub for checking server timer accuracy, using outside standard time sourcesfunction check_server_timer( $local_time ) {	return true;}
<?php/** * Widgets administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );/** WordPress Administration Widgets API */require_once(ABSPATH . 'wp-admin/includes/widgets.php');if ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ));wp_admin_css( 'widgets' );$widgets_access = get_user_setting( 'widgets_access' );if ( isset($_GET['widgets-access']) ) {	$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';	set_user_setting( 'widgets_access', $widgets_access );}if ( 'on' == $widgets_access )	add_filter( 'admin_body_class', create_function('', '{return " widgets_access ";}') );else	wp_enqueue_script('admin-widgets');do_action( 'sidebar_admin_setup' );$title = __( 'Widgets' );$parent_file = 'themes.php';$help = '	<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>	<p>' . __('Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>	<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>	<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>	<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>	<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Widgets_SubPanel" target="_blank">Widgets Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// register the inactive_widgets area as sidebarregister_sidebar(array(	'name' => __('Inactive Widgets'),	'id' => 'wp_inactive_widgets',	'description' => '',	'before_widget' => '',	'after_widget' => '',	'before_title' => '',	'after_title' => '',));// These are the widgets grouped by sidebar$sidebars_widgets = wp_get_sidebars_widgets();if ( empty( $sidebars_widgets ) )	$sidebars_widgets = wp_get_widget_defaults();// look for "lost" widgets, this has to run at least on each theme changefunction retrieve_widgets() {	global $wp_registered_widget_updates, $wp_registered_sidebars, $sidebars_widgets, $wp_registered_widgets;	$_sidebars_widgets = array();	$sidebars = array_keys($wp_registered_sidebars);	unset( $sidebars_widgets['array_version'] );	$old = array_keys($sidebars_widgets);	sort($old);	sort($sidebars);	if ( $old == $sidebars )		return;	// Move the known-good ones first	foreach ( $sidebars as $id ) {		if ( array_key_exists( $id, $sidebars_widgets ) ) {			$_sidebars_widgets[$id] = $sidebars_widgets[$id];			unset($sidebars_widgets[$id], $sidebars[$id]);		}	}	// if new theme has less sidebars than the old theme	if ( !empty($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $lost => $val ) {			if ( is_array($val) )				$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );		}	}	// discard invalid, theme-specific widgets from sidebars	$shown_widgets = array();	foreach ( $_sidebars_widgets as $sidebar => $widgets ) {		if ( !is_array($widgets) )			continue;		$_widgets = array();		foreach ( $widgets as $widget ) {			if ( isset($wp_registered_widgets[$widget]) )				$_widgets[] = $widget;		}		$_sidebars_widgets[$sidebar] = $_widgets;		$shown_widgets = array_merge($shown_widgets, $_widgets);	}	$sidebars_widgets = $_sidebars_widgets;	unset($_sidebars_widgets, $_widgets);	// find hidden/lost multi-widget instances	$lost_widgets = array();	foreach ( $wp_registered_widgets as $key => $val ) {		if ( in_array($key, $shown_widgets, true) )			continue;		$number = preg_replace('/.+?-([0-9]+)$/', '$1', $key);		if ( 2 > (int) $number )			continue;		$lost_widgets[] = $key;	}	$sidebars_widgets['wp_inactive_widgets'] = array_merge($lost_widgets, (array) $sidebars_widgets['wp_inactive_widgets']);	wp_set_sidebars_widgets($sidebars_widgets);}retrieve_widgets();if ( count($wp_registered_sidebars) == 1 ) {	// If only "wp_inactive_widgets" is defined the theme has no sidebars, die.	require_once( './admin-header.php' );?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>		<div class="error">			<p><?php _e( 'No Sidebars Defined' ); ?></p>		</div>		<p><?php _e( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href="http://codex.wordpress.org/Widgetizing_Themes">follow these instructions</a>.' ); ?></p>	</div><?php	require_once( './admin-footer.php' );	exit;}// We're saving a widget without jsif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {	$widget_id = $_POST['widget-id'];	check_admin_referer("save-delete-widget-$widget_id");	$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';	if ( $number ) {		foreach ( $_POST as $key => $val ) {			if ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {				$_POST[$key] = array( $number => array_shift($val) );				break;			}		}	}	$sidebar_id = $_POST['sidebar'];	$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;	$id_base = $_POST['id_base'];	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();	// delete	if ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {		if ( !in_array($widget_id, $sidebar, true) ) {			wp_redirect('widgets.php?error=0');			exit;		}		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name != $id_base || !is_callable($control['callback']) )			continue;		ob_start();			call_user_func_array( $control['callback'], $control['params'] );		ob_end_clean();		break;	}	$sidebars_widgets[$sidebar_id] = $sidebar;	// remove old position	if ( !isset($_POST['delete_widget']) ) {		foreach ( $sidebars_widgets as $key => $sb ) {			if ( is_array($sb) )				$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );		}		array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );	}	wp_set_sidebars_widgets($sidebars_widgets);	wp_redirect('widgets.php?message=0');	exit;}// Output the widget form without jsif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {	$widget_id = $_GET['editwidget'];	if ( isset($_GET['addnew']) ) {		// Default to the first sidebar		$sidebar = array_shift( $keys = array_keys($wp_registered_sidebars) );		if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget			// Copy minimal info from an existing instance of this widget to a new instance			foreach ( $wp_registered_widget_controls as $control ) {				if ( $_GET['base'] === $control['id_base'] ) {					$control_callback = $control['callback'];					$multi_number = (int) $_GET['num'];					$control['params'][0]['number'] = -1;					$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;					$wp_registered_widget_controls[$control['id']] = $control;					break;				}			}		}	}	if ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {		$control = $wp_registered_widget_controls[$widget_id];		$control_callback = $control['callback'];	} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {		$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );	}	if ( !isset($name) )		$name = esc_html( strip_tags($control['name']) );	if ( !isset($sidebar) )		$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';	if ( !isset($multi_number) )		$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];	// show the widget form	$width = ' style="width:' . max($control['width'], 350) . 'px"';	$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;	require_once( './admin-header.php' ); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<div class="editwidget"<?php echo $width; ?>>	<h3><?php printf( __( 'Widget %s' ), $name ); ?></h3>	<form action="widgets.php" method="post">	<div class="widget-inside"><?php	if ( is_callable( $control_callback ) )		call_user_func_array( $control_callback, $control['params'] );	else		echo '<p>' . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<p class="describe"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>	<div class="widget-position">	<table class="widefat"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody><?php	foreach ( $wp_registered_sidebars as $sbname => $sbvalue ) {		echo "\t\t<tr><td><label><input type='radio' name='sidebar' value='" . esc_attr($sbname) . "'" . checked( $sbname, $sidebar, false ) . " /> $sbvalue[name]</label></td><td>";		if ( 'wp_inactive_widgets' == $sbname ) {			echo '&nbsp;';		} else {			if ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {				$j = 1;				$sidebars_widgets[$sbname] = array();			} else {				$j = count($sidebars_widgets[$sbname]);				if ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )					$j++;			}			$selected = '';			echo "\t\t<select name='{$sbname}_position'>\n";			echo "\t\t<option value=''>" . __('&mdash; Select &mdash;') . "</option>\n";			for ( $i = 1; $i <= $j; $i++ ) {				if ( in_array($widget_id, $sidebars_widgets[$sbname], true) )					$selected = selected( $i, $key + 1, false );				echo "\t\t<option value='$i'$selected> $i </option>\n";			}			echo "\t\t</select>\n";		}		echo "</td></tr>\n";	} ?>	</tbody></table>	</div>	<div class="widget-control-actions"><?php	if ( isset($_GET['addnew']) ) { ?>	<a href="widgets.php" class="button alignleft"><?php _e('Cancel'); ?></a><?php	} else { ?>	<input type="submit" name="removewidget" class="button alignleft" value="<?php esc_attr_e('Delete'); ?>" /><?php	} ?>	<input type="submit" name="savewidget" class="button-primary alignright" value="<?php esc_attr_e('Save Widget'); ?>" />	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($widget_id); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" /><?php	wp_nonce_field("save-delete-widget-$widget_id"); ?>	<br class="clear" />	</div>	</form>	</div>	</div><?php	require_once( './admin-footer.php' );	exit;}$messages = array(	__('Changes saved.'));$errors = array(	__('Error while saving.'),	__('Error in displaying the widget settings form.'));require_once( './admin-header.php' ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?><div id="message" class="updated"><p><?php echo $messages[$_GET['message']]; ?></p></div><?php } ?><?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?><div id="message" class="error"><p><?php echo $errors[$_GET['error']]; ?></p></div><?php } ?><?php do_action( 'widgets_admin_page' ); ?><div class="widget-liquid-left"><div id="widgets-left">	<div id="available-widgets" class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Available Widgets'); ?> <span id="removing-widget"><?php _e('Deactivate'); ?> <span></span></span></h3></div>		<div class="widget-holder">		<p class="description"><?php _e('Drag widgets from here to a sidebar on the right to activate them. Drag widgets back here to deactivate them and delete their settings.'); ?></p>		<div id="widget-list">		<?php wp_list_widgets(); ?>		</div>		<br class='clear' />		</div>		<br class="clear" />	</div>	<div class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Inactive Widgets'); ?>		<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>		<div class="widget-holder inactive">		<p class="description"><?php _e('Drag widgets here to remove them from the sidebar but keep their settings.'); ?></p>		<?php wp_list_widget_controls('wp_inactive_widgets'); ?>		<br class="clear" />		</div>	</div></div></div><div class="widget-liquid-right"><div id="widgets-right"><?php$i = 0;foreach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {	if ( 'wp_inactive_widgets' == $sidebar )		continue;	$closed = $i ? ' closed' : ''; ?>	<div class="widgets-holder-wrap<?php echo $closed; ?>">	<div class="sidebar-name">	<div class="sidebar-name-arrow"><br /></div>	<h3><?php echo esc_html( $registered_sidebar['name'] ); ?>	<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_dark.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>	<?php wp_list_widget_controls( $sidebar ); // Show the control forms for each of the widgets in this sidebar ?>	</div><?php	$i++;} ?></div></div><form action="" method="post"><?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?></form><br class="clear" /></div><?phpdo_action( 'sidebar_admin_page' );require_once( './admin-footer.php' );
<?php/** * Loads the correct template based on the visitor's url * @package WordPress */if ( defined('WP_USE_THEMES') && WP_USE_THEMES )	do_action('template_redirect');// Process feeds and trackbacks even if not using themes.if ( is_robots() ) :	do_action('do_robots');	return;elseif ( is_feed() ) :	do_feed();	return;elseif ( is_trackback() ) :	include( ABSPATH . 'wp-trackback.php' );	return;endif;if ( defined('WP_USE_THEMES') && WP_USE_THEMES ) :	$template = false;	if     ( is_404()            && $template = get_404_template()            ) :	elseif ( is_search()         && $template = get_search_template()         ) :	elseif ( is_tax()            && $template = get_taxonomy_template()       ) :	elseif ( is_front_page()     && $template = get_front_page_template()     ) :	elseif ( is_home()           && $template = get_home_template()           ) :	elseif ( is_attachment()     && $template = get_attachment_template()     ) :		remove_filter('the_content', 'prepend_attachment');	elseif ( is_single()         && $template = get_single_template()         ) :	elseif ( is_page()           && $template = get_page_template()           ) :	elseif ( is_category()       && $template = get_category_template()       ) :	elseif ( is_tag()            && $template = get_tag_template()            ) :	elseif ( is_author()         && $template = get_author_template()         ) :	elseif ( is_date()           && $template = get_date_template()           ) :	elseif ( is_archive()        && $template = get_archive_template()        ) :	elseif ( is_comments_popup() && $template = get_comments_popup_template() ) :	elseif ( is_paged()          && $template = get_paged_template()          ) :	else :		$template = get_index_template();	endif;	if ( $template = apply_filters( 'template_include', $template ) )		include( $template );	return;endif;?>
<?php/** * Multisite upload handler. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite */define( 'SHORTINIT', true );require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );if( !is_multisite() )	die( 'Multisite support not enabled' );ms_file_constants();error_reporting( 0 );if ( $current_blog->archived == '1' || $current_blog->spam == '1' || $current_blog->deleted == '1' ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$file = BLOGUPLOADDIR . str_replace( '..', '', $_GET[ 'file' ] );if ( !is_file( $file ) ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$mime = wp_check_filetype( $_SERVER[ 'REQUEST_URI' ] );if( false === $mime[ 'type' ] && function_exists( 'mime_content_type' ) )	$mime[ 'type' ] = mime_content_type( $file );if( $mime[ 'type' ] )	$mimetype = $mime[ 'type' ];else	$mimetype = 'image/' . substr( $_SERVER[ 'REQUEST_URI' ], strrpos( $_SERVER[ 'REQUEST_URI' ], '.' ) + 1 );header( 'Content-type: ' . $mimetype ); // always send thisif ( false === strpos( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) )	header( 'Content-Length: ' . filesize( $file ) );// Optional support for X-Sendfile and X-Accel-Redirectif ( WPMU_ACCEL_REDIRECT ) {	header( 'X-Accel-Redirect: ' . str_replace( WP_CONTENT_DIR, '', $file ) );	exit;} elseif ( WPMU_SENDFILE ) {	header( 'X-Sendfile: ' . $file );	exit;}$last_modified = gmdate( 'D, d M Y H:i:s', filemtime( $file ) );$etag = '"' . md5( $last_modified ) . '"';header( "Last-Modified: $last_modified GMT" );header( 'ETag: ' . $etag );header( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 100000000 ) . ' GMT' );// Support for Conditional GET$client_etag = isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) ? stripslashes( $_SERVER['HTTP_IF_NONE_MATCH'] ) : false;if( ! isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = false;$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );// If string is empty, return 0. If not, attempt to parse into a timestamp$client_modified_timestamp = $client_last_modified ? strtotime( $client_last_modified ) : 0;// Make a timestamp for our most recent modification...$modified_timestamp = strtotime($last_modified);if ( ( $client_last_modified && $client_etag )	? ( ( $client_modified_timestamp >= $modified_timestamp) && ( $client_etag == $etag ) )	: ( ( $client_modified_timestamp >= $modified_timestamp) || ( $client_etag == $etag ) )	) {	status_header( 304 );	exit;}// If we made it this far, just serve the filereadfile( $file );?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function home_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;require(ABSPATH . WPINC . '/script-loader.php');require(ABSPATH . WPINC . '/version.php');$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$expires_offset = 31536000;$out = '';$wp_scripts = new WP_Scripts();wp_default_scripts($wp_scripts);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_scripts->registered) )		continue;	$path = ABSPATH . $wp_scripts->registered[$handle]->src;	$out .= get_file($path) . "\n";}header('Content-Type: application/x-javascript; charset=UTF-8');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * The template for displaying Search Results pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) : ?>				<h1 class="page-title"><?php printf( __( 'Search Results for: %s', 'twentyten' ), '<span>' . get_search_query() . '</span>' ); ?></h1>				<?php				/* Run the loop for the search to output the results.				 * If you want to overload this in a child theme then include a file				 * called loop-search.php and that will be used instead.				 */				 get_template_part( 'loop', 'search' );				?><?php else : ?>				<div id="post-0" class="post no-results not-found">					<h2 class="entry-title"><?php _e( 'Nothing Found', 'twentyten' ); ?></h2>					<div class="entry-content">						<p><?php _e( 'Sorry, but nothing matched your search criteria. Please try again with some different keywords.', 'twentyten' ); ?></p>						<?php get_search_form(); ?>					</div><!-- .entry-content -->				</div><!-- #post-0 --><?php endif; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Redirects to the Atom feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'atom_url' ), 301 );?>
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Multisite sites administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_sites' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Sites' );$parent_file = 'ms-admin.php';if ( isset( $_GET['action'] ) && 'editblog' == $_GET['action'] ) {	add_contextual_help($current_screen,		'<p>' . __('This extensive list of options has five modules: Site Info, Site Options, allowing Site Themes for this given site, changing user roles and passwords for that site, adding a new user, and Miscellaneous Site Actions (upload size limits).') . '</p>' .		'<p>' . __('Note that some fields in Site Options are grayed out and say Serialized Data. These are stored values in the database which you cannot change from here.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_Edit_Site" target="_blank">Documentation on Editing Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} else {	add_contextual_help($current_screen,		'<p>' . __('Add New takes you farther down on this same page. You can search for a site by Name, ID number, or IP address. Screen Options allows you to choose how many sites to display on one page.') . '</p>' .		'<p>' . __('This is the main table of all sites on this network. Switch between list and excerpt views by using the icons above the right side of the table.') . '</p>' .		'<p>' . __('Hovering over each site reveals seven options (three for the primary site):') . '</p>' .		'<ul><li>' . __('an Edit link to a separate Edit Site screen.') . '</li>' .		'<li>' . __('Backend means the Dashboard for that site.') . '</li>' .		'<li>' . __('Deactivate, Archive, and Spam which lead to confirmation screens. These actions can be reversed later.') . '</li>' .		'<li>' . __('Delete which is a permanent action after the confirmations screen.') . '</li>' .		'<li>' . __('Visit to go to the frontend site live.') . '</li></ul>' .		'<p>' . __('The site ID is used internally, and is not shown on the front end of the site or to users/viewers.') . '</p>' .		'<p>' . __('Clicking on bold settings can re-sort this table. The upper right icons switch between list and excerpt views.') . '</p>' .		'<p>' . __("Clicking on Add Site, after filling out the address, title, and admin's email address, adds the site instantly to the network and this table. You may want to then click on the action link to edit options for that site.") . '</p>' .		'<p>' . __('If the admin email for the new site does not exist in the database, a new user will also be created.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_SubPanel" target="_blank">Documentation on Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );$id = isset( $_GET['id'] ) ? intval( $_GET['id'] ) : 0;if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'all_notspam':				_e( 'Sites removed from spam.' );			break;			case 'all_spam':				_e( 'Sites marked as spam.' );			break;			case 'all_delete':				_e( 'Sites deleted.' );			break;			case 'delete':				_e( 'Site deleted.' );			break;			case 'add-blog':				_e( 'Site added.' );			break;			case 'archive':				_e( 'Site archived.' );			break;			case 'unarchive':				_e( 'Site unarchived.' );			break;			case 'activate':				_e( 'Site activated.' );			break;			case 'deactivate':				_e( 'Site deactivated.' );			break;			case 'unspam':				_e( 'Site removed from spam.' );			break;			case 'spam':				_e( 'Site marked as spam.' );			break;			default:				_e( 'Settings saved.' );			break;		}		?>	</p></div>	<?php}$action = isset( $_GET['action'] ) ? $_GET['action'] : 'list';switch ( $action ) {	// Edit site	case 'editblog':		$blog_prefix = $wpdb->get_blog_prefix( $id );		$options = $wpdb->get_results( "SELECT * FROM {$blog_prefix}options WHERE option_name NOT LIKE '\_%' AND option_name NOT LIKE '%user_roles'" );		$details = get_blog_details( $id );		$editblog_roles = get_blog_option( $id, "{$blog_prefix}user_roles" );		$is_main_site = is_main_site( $id );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e( 'Edit Site' ); ?> - <a href="<?php echo esc_url( get_home_url( $id ) ); ?>"><?php echo esc_url( get_home_url( $id ) ); ?></a></h2>		<form method="post" action="ms-edit.php?action=updateblog">			<?php wp_nonce_field( 'editblog' ); ?>			<input type="hidden" name="id" value="<?php echo esc_attr( $id ) ?>" />			<div class="metabox-holder" style="width:49%;float:left;">				<div id="blogedit_bloginfo" class="postbox">				<h3 class="hndle"><span><?php _e( 'Site info (wp_blogs)' ); ?></span></h3>				<div class="inside">					<table class="form-table">						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Domain' ) ?></th>							<?php							$protocol = is_ssl() ? 'https://' : 'http://';							if ( $is_main_site ) { ?>							<td><code><?php echo $protocol; echo esc_attr( $details->domain ) ?></code></td>							<?php } else { ?>							<td><?php echo $protocol; ?><input name="blog[domain]" type="text" id="domain" value="<?php echo esc_attr( $details->domain ) ?>" size="33" /></td>							<?php } ?>						</tr>						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Path' ) ?></th>							<?php if ( $is_main_site ) { ?>							<td><code><?php echo esc_attr( $details->path ) ?></code></td>							<?php } else { ?>							<td><input name="blog[path]" type="text" id="path" value="<?php echo esc_attr( $details->path ) ?>" size="40" style='margin-bottom:5px;' />							<br /><input type="checkbox" style="width:20px;" name="update_home_url" value="update" <?php if ( get_blog_option( $id, 'siteurl' ) == untrailingslashit( get_blogaddress_by_id ($id ) ) || get_blog_option( $id, 'home' ) == untrailingslashit( get_blogaddress_by_id( $id ) ) ) echo 'checked="checked"'; ?> /> <?php _e( 'Update <code>siteurl</code> and <code>home</code> as well.' ); ?></td>							<?php } ?>						</tr>						<tr class="form-field">							<th scope="row"><?php _ex( 'Registered', 'site' ) ?></th>							<td><input name="blog[registered]" type="text" id="blog_registered" value="<?php echo esc_attr( $details->registered ) ?>" size="40" /></td>						</tr>						<tr class="form-field">							<th scope="row"><?php _e('Last Updated') ?></th>							<td><input name="blog[last_updated]" type="text" id="blog_last_updated" value="<?php echo esc_attr( $details->last_updated ) ?>" size="40" /></td>						</tr>						<?php						$radio_fields = array( 'public' => __( 'Public' ) );						if ( ! $is_main_site ) {							$radio_fields['archived'] = __( 'Archived' );							$radio_fields['spam']     = _x( 'Spam', 'site' );							$radio_fields['deleted']  = __( 'Deleted' );						}						$radio_fields['mature'] = __( 'Mature' );						foreach ( $radio_fields as $field_key => $field_label ) {						?>						<tr>							<th scope="row"><?php echo $field_label; ?></th>							<td>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_1" value="1"<?php checked( $details->$field_key, 1 ); ?> />								<label for="blog_<?php echo $field_key; ?>_1"><?php _e('Yes'); ?></label>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_0" value="0"<?php checked( $details->$field_key, 0 ); ?> />								<label for="blog_<?php echo $field_key; ?>_0"><?php _e('No'); ?></label>							</td>						</tr>						<?php } ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_blogoptions" class="postbox" >				<h3 class="hndle"><span><?php printf( __( 'Site options (%soptions)' ), $blog_prefix ); ?></span></h3>				<div class="inside">					<table class="form-table">						<?php						$editblog_default_role = 'subscriber';						foreach ( $options as $option ) {							if ( $option->option_name == 'default_role' )								$editblog_default_role = $option->option_value;							$disabled = false;							$class = 'all-options';							if ( is_serialized( $option->option_value ) ) {								if ( is_serialized_string( $option->option_value ) ) {									$option->option_value = esc_html( maybe_unserialize( $option->option_value ), 'single' );								} else {									$option->option_value = 'SERIALIZED DATA';									$disabled = true;									$class = 'all-options disabled';								}							}							if ( strpos( $option->option_value, "\n" ) !== false ) {							?>								<tr class="form-field">									<th scope="row"><?php echo ucwords( str_replace( "_", " ", $option->option_name ) ) ?></th>									<td><textarea class="<?php echo $class; ?>" rows="5" cols="40" name="option[<?php echo esc_attr( $option->option_name ) ?>]" id="<?php echo esc_attr( $option->option_name ) ?>"<?php disabled( $disabled ) ?>><?php wp_htmledit_pre( $option->option_value ) ?></textarea></td>								</tr>							<?php							} else {							?>								<tr class="form-field">									<th scope="row"><?php echo esc_html( ucwords( str_replace( "_", " ", $option->option_name ) ) ); ?></th>									<?php if ( $is_main_site && in_array( $option->option_name, array( 'siteurl', 'home' ) ) ) { ?>									<td><code><?php echo esc_html( $option->option_value ) ?></code></td>									<?php } else { ?>									<td><input class="<?php echo $class; ?>" name="option[<?php echo esc_attr( $option->option_name ) ?>]" type="text" id="<?php echo esc_attr( $option->option_name ) ?>" value="<?php echo esc_attr( $option->option_value ) ?>" size="40" <?php disabled( $disabled ) ?> /></td>									<?php } ?>								</tr>							<?php							}						} // End foreach						?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div class="metabox-holder" style="width:49%;float:right;">				<?php				// Site Themes				$themes = get_themes();				$blog_allowed_themes = wpmu_get_blog_allowedthemes( $id );				$allowed_themes = get_site_option( 'allowedthemes' );				if ( ! $allowed_themes )					$allowed_themes = array_keys( $themes );				$out = '';				foreach ( $themes as $key => $theme ) {					$theme_key = esc_html( $theme['Stylesheet'] );					if ( ! isset( $allowed_themes[$theme_key] ) ) {						$checked = isset( $blog_allowed_themes[ $theme_key ] ) ? 'checked="checked"' : '';						$out .= '<tr class="form-field form-required">								<th title="' . esc_attr( $theme["Description"] ).'" scope="row">' . esc_html( $key ) . '</th>								<td><label><input name="theme[' . esc_attr( $theme_key ) . ']" type="checkbox" style="width:20px;" value="on" '.$checked.'/> ' . __( 'Active' ) . '</label></td>							</tr>';					}				}				if ( $out != '' ) {				?>				<div id="blogedit_blogthemes" class="postbox">				<h3 class="hndle"><span><?php esc_html_e( 'Site Themes' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Activate the themename of an existing theme and hit "Update Options" to allow the theme for this site.' ) ?></p>					<table class="form-table">						<?php echo $out; ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div></div>				<?php }				// Site users				$blogusers = get_users_of_blog( $id );				if ( is_array( $blogusers ) ) {					echo '<div id="blogedit_blogusers" class="postbox"><h3 class="hndle"><span>' . __( 'Site Users' ) . '</span></h3><div class="inside">';					echo '<table class="form-table">';					echo "<tr><th>" . __( 'User' ) . "</th><th>" . __( 'Role' ) . "</th><th>" . __( 'Password' ) . "</th><th>" . __( 'Remove' ) . "</th></tr>";					reset( $blogusers );					foreach ( (array) $blogusers as $key => $val ) {						if ( isset( $val->meta_value ) && ! $val->meta_value )							continue;						$t = @unserialize( $val->meta_value );						if ( is_array( $t ) ) {							reset( $t );							$existing_role = key( $t );						}						echo '<tr><td><a href="user-edit.php?user_id=' . $val->user_id . '">' . $val->user_login . '</a></td>';						if ( $val->user_id != $current_user->data->ID ) {							?>							<td>								<select name="role[<?php echo $val->user_id ?>]" id="new_role_1"><?php									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										echo '<option ' . selected( $role, $existing_role, false ) . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>								</select>							</td>							<td>								<input type="text" name="user_password[<?php echo esc_attr( $val->user_id ) ?>]" />							</td>							<?php							echo '<td><input title="' . __( 'Click to remove user' ) . '" type="checkbox" name="blogusers[' . esc_attr( $val->user_id ) . ']" /></td>';						} else {							echo "<td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __( 'N/A' ) . "</strong></td>";						}						echo '</tr>';					}					echo "</table>";					echo '<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="' . esc_attr__( 'Update Options' ) . '" /></p>';					echo "</div></div>";				}				?>				<div id="blogedit_blogadduser" class="postbox">				<h3 class="hndle"><span><?php _e( 'Add a new user' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Enter the username of an existing user and hit &#8220;Update Options&#8221; to add the user.' ) ?></p>					<table class="form-table">							<tr>								<th scope="row"><?php _e( 'User&nbsp;Login:' ) ?></th>								<td><input type="text" name="newuser" id="newuser" /></td>							</tr>							<tr>								<th scope="row"><?php _e( 'Role:' ) ?></th>								<td>									<select name="new_role" id="new_role_0">									<?php									reset( $editblog_roles );									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										$selected = ( $role == $editblog_default_role ) ? 'selected="selected"' : '';										echo '<option ' . $selected . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>									</select>								</td>							</tr>						</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_miscoptions" class="postbox">				<h3 class="hndle"><span><?php _e( 'Misc Site Actions' ) ?></span></h3>				<div class="inside">					<table class="form-table">							<?php do_action( 'wpmueditblogaction', $id ); ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div style="clear:both;"></div>		</form>		</div>		<?php	break;	// List sites	case 'list':	default:		$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;		if ( empty($pagenum) )			$pagenum = 1;		$per_page = (int) get_user_option( 'ms_sites_per_page' );		if ( empty( $per_page ) || $per_page < 1 )			$per_page = 15;		$per_page = apply_filters( 'ms_sites_per_page', $per_page );		$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';		$like_s = esc_sql( like_escape( $s ) );		$query = "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' ";		if ( isset( $_GET['searchaction'] ) ) {			if ( 'name' == $_GET['searchaction'] ) {				$query .= " AND ( {$wpdb->blogs}.domain LIKE '%{$like_s}%' OR {$wpdb->blogs}.path LIKE '%{$like_s}%' ) ";			} elseif ( 'id' == $_GET['searchaction'] ) {				$query .= " AND {$wpdb->blogs}.blog_id = '{$like_s}' ";			} elseif ( 'ip' == $_GET['searchaction'] ) {				$query = "SELECT *					FROM {$wpdb->blogs}, {$wpdb->registration_log}					WHERE site_id = '{$wpdb->siteid}'					AND {$wpdb->blogs}.blog_id = {$wpdb->registration_log}.blog_id					AND {$wpdb->registration_log}.IP LIKE ('%{$like_s}%')";			}		}		$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';		if ( $order_by == 'registered' ) {			$query .= ' ORDER BY registered ';		} elseif ( $order_by == 'lastupdated' ) {			$query .= ' ORDER BY last_updated ';		} elseif ( $order_by == 'blogname' ) {			$query .= ' ORDER BY domain ';		} else {			$order_by = 'id';			$query .= " ORDER BY {$wpdb->blogs}.blog_id ";		}		$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? "DESC" : "ASC";		$query .= $order;		$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(blog_id)', $query ) );		$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page ) . ", " . intval( $per_page );		$blog_list = $wpdb->get_results( $query, ARRAY_A );		$num_pages = ceil($total / $per_page);		$page_links = paginate_links( array(			'base' => add_query_arg( 'paged', '%#%' ),			'format' => '',			'prev_text' => __( '&laquo;' ),			'next_text' => __( '&raquo;' ),			'total' => $num_pages,			'current' => $pagenum		));		if ( empty( $_GET['mode'] ) )			$mode = 'list';		else			$mode = esc_attr( $_GET['mode'] );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e('Sites') ?>		<a href="#form-add-site" class="button add-new-h2"><?php echo esc_html_x( 'Add New', 'sites' ); ?></a>		<?php		if ( isset( $_GET['s'] ) && $_GET['s'] )		printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );		?>		</h2>		<form action="ms-sites.php" method="get" id="ms-search">		<p class="search-box">		<input type="hidden" name="action" value="blogs" />		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" />		<input type="submit" class="button" value="<?php esc_attr_e( 'Search Site by' ) ?>" />		<select name="searchaction">			<option value="name" selected="selected"><?php _e( 'Name' ); ?></option>			<option value="id"><?php _e( 'ID' ); ?></option>			<option value="ip"><?php _e( 'IP address' ); ?></option>		</select>		</p>		</form>		<form id="form-site-list" action="ms-edit.php?action=allblogs" method="post">		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">		<div class="alignleft actions">			<select name="action">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />			<?php wp_nonce_field( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' ); ?>		</div>		<?php if ( $page_links ) { ?>		<div class="tablenav-pages">		<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',		number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),		number_format_i18n( min( $pagenum * $per_page, $total ) ),		number_format_i18n( $total ),		$page_links		); echo $page_links_text; ?>		</div>		<?php } ?>		<div class="view-switch">			<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>			<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>		</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$blogname_columns = ( is_subdomain_install() ) ? __( 'Domain' ) : __( 'Path' );		$sites_columns = array(			'id'           => __( 'ID' ),			'blogname'     => $blogname_columns,			'lastupdated'  => __( 'Last Updated'),			'registered'   => _x( 'Registered', 'site' ),			'users'        => __( 'Users' )		);		if ( has_filter( 'wpmublogsaction' ) )			$sites_columns['plugins'] = __( 'Actions' );		$sites_columns = apply_filters( 'wpmu_blogs_columns', $sites_columns );		?>		<table class="widefat">			<thead>				<tr>				<th class="manage-column column-cb check-column" id="cb" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($sites_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array('action', 'updated'), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( ( $column_id == 'users' || $column_id == 'plugins' ) ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url ?>				</tr>			</thead>			<tfoot>				<tr>				<th class="manage-column column-cb check-column" id="cb1" scope="col">					<input type="checkbox" />				</th>					<?php echo $col_url ?>				</tr>			</tfoot>			<tbody id="the-site-list" class="list:site">			<?php			$status_list = array( 'archived' => array( 'site-archived', __( 'Archived' ) ), 'spam' => array( 'site-spammed', _x( 'Spam', 'site' ) ), 'deleted' => array( 'site-deleted', __( 'Deleted' ) ), 'mature' => array( 'site-mature', __( 'Mature' ) ) );			if ( $blog_list ) {				$class = '';				foreach ( $blog_list as $blog ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					reset( $status_list );					$blog_states = array();					foreach ( $status_list as $status => $col ) {						if ( get_blog_status( $blog['blog_id'], $status ) == 1 ) {							$class = $col[0];							$blog_states[] = $col[1];						}					}					$blog_state = '';					if ( ! empty( $blog_states ) ) {						$state_count = count( $blog_states );						$i = 0;						$blog_state .= ' - ';						foreach ( $blog_states as $state ) {							++$i;							( $i == $state_count ) ? $sep = '' : $sep = ', ';							$blog_state .= "<span class='post-state'>$state$sep</span>";						}					}					echo "<tr class='$class'>";					$blogname = ( is_subdomain_install() ) ? str_replace( '.'.$current_site->domain, '', $blog['domain'] ) : $blog['path'];					foreach ( $sites_columns as $column_name=>$column_display_name ) {						switch ( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $blog['blog_id'] ?>" name="allblogs[]" value="<?php echo esc_attr( $blog['blog_id'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $blog['blog_id'] ?>								</th>							<?php							break;							case 'blogname': ?>								<td class="column-title">									<a href="<?php echo esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ); ?>" class="edit"><?php echo $blogname . $blog_state; ?></a>									<?php									if ( 'list' != $mode )										echo '<p>' . sprintf( _x( '%1$s &#8211; <em>%2$s</em>', '%1$s: site name. %2$s: site tagline.' ), get_blog_option( $blog['blog_id'], 'blogname' ), get_blog_option( $blog['blog_id'], 'blogdescription ' ) ) . '</p>';									// Preordered.									$actions = array(										'edit' => '', 'backend' => '',										'activate' => '', 'deactivate' => '',										'archive' => '', 'unarchive' => '',										'spam' => '', 'unspam' => '',										'delete' => '',										'visit' => '',									);									$actions['edit']	= '<span class="edit"><a href="' . esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ) . '">' . __( 'Edit' ) . '</a></span>';									$actions['backend']	= "<span class='backend'><a href='" . esc_url( get_admin_url($blog['blog_id']) ) . "' class='edit'>" . __( 'Backend' ) . '</a></span>';									if ( $current_site->blog_id != $blog['blog_id'] ) {										if ( get_blog_status( $blog['blog_id'], 'deleted' ) == '1' )											$actions['activate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=activateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to activate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Activate' ) . '</a></span>';										else											$actions['deactivate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deactivateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to deactivate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Deactivate' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'archived' ) == '1' )											$actions['unarchive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unarchiveblog&amp;id=' .  $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unarchive the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Unarchive' ) . '</a></span>';										else											$actions['archive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=archiveblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to archive the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Archive', 'verb; site' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'spam' ) == '1' )											$actions['unspam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unspamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unspam the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Not Spam', 'site' ) . '</a></span>';										else											$actions['spam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=spamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to mark the site %s as spam.' ), $blogname ) ) ) ) . '">' . _x( 'Spam', 'site' ) . '</a></span>';										$actions['delete']	= '<span class="delete"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deleteblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to delete the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Delete' ) . '</a></span>';									}									$actions['visit']	= "<span class='view'><a href='" . esc_url( get_home_url( $blog['blog_id'] ) ) . "' rel='permalink'>" . __( 'Visit' ) . '</a></span>';									$actions = array_filter( $actions );									if ( count( $actions ) ) : ?>									<div class="row-actions">										<?php echo implode( ' | ', $actions ); ?>									</div>									<?php endif; ?>								</td>							<?php							break;							case 'lastupdated': ?>								<td valign="top">									<?php									if ( 'list' == $mode )										$date = 'Y/m/d';									else										$date = 'Y/m/d \<\b\r \/\> g:i:s a';									echo ( $blog['last_updated'] == '0000-00-00 00:00:00' ) ? __( 'Never' ) : mysql2date( __( $date ), $blog['last_updated'] ); ?>								</td>							<?php							break;						case 'registered': ?>								<td valign="top">								<?php								if ( $blog['registered'] == '0000-00-00 00:00:00' )									echo '&#x2014;';								else									echo mysql2date( __( $date ), $blog['registered'] );								?>								</td>						<?php						break;							case 'users': ?>								<td valign="top">									<?php									$blogusers = get_users_of_blog( $blog['blog_id'] );									if ( is_array( $blogusers ) ) {										$blogusers_warning = '';										if ( count( $blogusers ) > 5 ) {											$blogusers = array_slice( $blogusers, 0, 5 );											$blogusers_warning = __( 'Only showing first 5 users.' ) . ' <a href="' . esc_url( get_admin_url( $blog['blog_id'], 'users.php' ) ) . '">' . __( 'More' ) . '</a>';										}										foreach ( $blogusers as $key => $val ) {											echo '<a href="' . esc_url( admin_url( 'user-edit.php?user_id=' . $val->user_id ) ) . '">' . esc_html( $val->user_login ) . '</a> ';											if ( 'list' != $mode )												echo '(' . $val->user_email . ')';											echo '<br />';										}										if ( $blogusers_warning != '' )											echo '<strong>' . $blogusers_warning . '</strong><br />';									}									?>								</td>							<?php							break;							case 'plugins': ?>								<?php if ( has_filter( 'wpmublogsaction' ) ) { ?>								<td valign="top">									<?php do_action( 'wpmublogsaction', $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;							default: ?>								<?php if ( has_filter( 'manage_blogs_custom_column' ) ) { ?>								<td valign="top">									<?php do_action( 'manage_blogs_custom_column', $column_name, $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;						}					}					?>					</tr>					<?php				}			} else { ?>				<tr>					<td colspan="<?php echo (int) count( $sites_columns ); ?>"><?php _e( 'No sites found.' ) ?></td>				</tr>			<?php			} // end if ($blogs)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">			<select name="action2">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div>		<div id="form-add-site" class="wrap">			<h3><?php _e( 'Add Site' ) ?></h3>			<form method="post" action="ms-edit.php?action=addblog">				<?php wp_nonce_field( 'add-blog', '_wpnonce_add-blog' ) ?>				<table class="form-table">					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Address' ) ?></th>						<td>						<?php if ( is_subdomain_install() ) { ?>							<input name="blog[domain]" type="text" class="regular-text" title="<?php _e( 'Domain' ) ?>"/>.<?php echo preg_replace( '|^www\.|', '', $current_site->domain );?>						<?php } else {							echo $current_site->domain . $current_site->path ?><input name="blog[domain]" class="regular-text" type="text" title="<?php _e( 'Domain' ) ?>"/>						<?php }						echo '<p>' . __( 'Only the characters a-z and 0-9 recommended.' ) . '</p>';						?>						</td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Title' ) ?></th>						<td><input name="blog[title]" type="text" class="regular-text" title="<?php _e( 'Title' ) ?>"/></td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Admin Email' ) ?></th>						<td><input name="blog[email]" type="text" class="regular-text" title="<?php _e( 'Email' ) ?>"/></td>					</tr>					<tr class="form-field">						<td colspan="2"><?php _e( 'A new user will be created if the above email address is not in the database.' ) ?><br /><?php _e( 'The username and password will be mailed to this email address.' ) ?></td>					</tr>				</table>				<p class="submit">					<input class="button" type="submit" name="go" value="<?php esc_attr_e( 'Add Site' ) ?>" /></p>			</form>		</div>		<?php	break;} // end switch( $action )include( './admin-footer.php' ); ?>
<?php/** * @package Hello_Dolly * @version 1.5.1 *//*Plugin Name: Hello DollyPlugin URI: http://wordpress.org/#Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.Author: Matt MullenwegVersion: 1.5.1Author URI: http://ma.tt/*/function hello_dolly_get_lyric() {	/** These are the lyrics to Hello Dolly */	$lyrics = "Hello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenSo, take her wrap, fellasFind her an empty lap, fellasDolly'll never go away againHello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenGolly, gee, fellasFind her a vacant knee, fellasDolly'll never go awayDolly'll never go awayDolly'll never go away again";	// Here we split it into lines	$lyrics = explode("\n", $lyrics);	// And then randomly choose a line	return wptexturize( $lyrics[ mt_rand(0, count($lyrics) - 1) ] );}// This just echoes the chosen line, we'll position it laterfunction hello_dolly() {	$chosen = hello_dolly_get_lyric();	echo "<p id='dolly'>$chosen</p>";}// Now we set that function up to execute when the admin_footer action is calledadd_action('admin_footer', 'hello_dolly');// We need some CSS to position the paragraphfunction dolly_css() {	// This makes sure that the posinioning is also good for right-to-left languages	$x = ( is_rtl() ) ? 'left' : 'right';	echo "	<style type='text/css'>	#dolly {		position: absolute;		top: 4.5em;		margin: 0;		padding: 0;		$x: 215px;		font-size: 11px;	}	</style>	";}add_action('admin_head', 'dolly_css');?>
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * FTP implementation using fsockopen to connect. * * @package PemFTP * @subpackage Pure * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(false, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@stream_set_timeout($sock, $this->_timeout)) {			$this->PushError('_settimeout','socket set send timeout');			$this->_quit();			return FALSE;		}		return TRUE;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		$sock = @fsockopen($host, $port, $errno, $errstr, $this->_timeout);		if (!$sock) {			$this->PushError('_connect','socket connect failed', $errstr." (".$errno.")");			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction, 'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@fgets($this->_ftp_control_sock, 512);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed');			} else {				$this->_message.=$tmp;				if(preg_match("/^([0-9]{3})(-(.*[".CRLF."]{1,2})+\\1)? [^".CRLF."]+[".CRLF."]{1,2}$/", $this->_message, $regs)) $go=false;			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@fputs($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed');			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_data_sock=@fsockopen($this->_datahost, $this->_dataport, $errno, $errstr, $this->_timeout);			if(!$this->_ftp_data_sock) {				$this->PushError("_data_prepare","fsockopen fails", $errstr." (".$errno.")");				$this->_data_close();				return FALSE;			}			else $this->_ftp_data_sock;		} else {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		while (!feof($this->_ftp_data_sock)) {			$block=fread($this->_ftp_data_sock, $this->_ftp_buff_size);			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return TRUE;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@fwrite($this->_ftp_data_sock, $block))===FALSE) {				$this->PushError("_data_write","Can't write to socket");				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@fclose($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit($force=FALSE) {		if($this->_connected or $force) {			@fclose($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Class for working with PO files * * @version $Id: po.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage po */require_once dirname(__FILE__) . '/translations.php';define('PO_MAX_LINE_LEN', 79);ini_set('auto_detect_line_endings', 1);/** * Routines for working with PO files */if ( !class_exists( 'PO' ) ):class PO extends Gettext_Translations {	/**	 * Exports headers to a PO entry	 *	 * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end	 */	function export_headers() {		$header_string = '';		foreach($this->headers as $header => $value) {			$header_string.= "$header: $value\n";		}		$poified = PO::poify($header_string);		return rtrim("msgid \"\"\nmsgstr $poified");	}	/**	 * Exports all entries to PO format	 *	 * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end	 */	function export_entries() {		//TODO sorting		return implode("\n\n", array_map(array('PO', 'export_entry'), $this->entries));	}	/**	 * Exports the whole PO file as a string	 *	 * @param bool $include_headers whether to include the headers in the export	 * @return string ready for inclusion in PO file string for headers and all the enrtries	 */	function export($include_headers = true) {		$res = '';		if ($include_headers) {			$res .= $this->export_headers();			$res .= "\n\n";		}		$res .= $this->export_entries();		return $res;	}	/**	 * Same as {@link export}, but writes the result to a file	 *	 * @param string $filename where to write the PO string	 * @param bool $include_headers whether to include tje headers in the export	 * @return bool true on success, false on error	 */	function export_to_file($filename, $include_headers = true) {		$fh = fopen($filename, 'w');		if (false === $fh) return false;		$export = $this->export($include_headers);		$res = fwrite($fh, $export);		if (false === $res) return false;		return fclose($fh);	}	/**	 * Formats a string in PO-style	 *	 * @static	 * @param string $string the string to format	 * @return string the poified string	 */	function poify($string) {		$quote = '"';		$slash = '\\';		$newline = "\n";		$replaces = array(			"$slash" 	=> "$slash$slash",			"$quote"	=> "$slash$quote",			"\t" 		=> '\t',		);		$string = str_replace(array_keys($replaces), array_values($replaces), $string);		$po = $quote.implode("${slash}n$quote$newline$quote", explode($newline, $string)).$quote;		// add empty string on first line for readbility		if (false !== strpos($string, $newline) &&				(substr_count($string, $newline) > 1 || !($newline === substr($string, -strlen($newline))))) {			$po = "$quote$quote$newline$po";		}		// remove empty strings		$po = str_replace("$newline$quote$quote", '', $po);		return $po;	}	/**	 * Gives back the original string from a PO-formatted string	 *	 * @static	 * @param string $string PO-formatted string	 * @return string enascaped string	 */	function unpoify($string) {		$escapes = array('t' => "\t", 'n' => "\n", '\\' => '\\');		$lines = array_map('trim', explode("\n", $string));		$lines = array_map(array('PO', 'trim_quotes'), $lines);		$unpoified = '';		$previous_is_backslash = false;		foreach($lines as $line) {			preg_match_all('/./u', $line, $chars);			$chars = $chars[0];			foreach($chars as $char) {				if (!$previous_is_backslash) {					if ('\\' == $char)						$previous_is_backslash = true;					else						$unpoified .= $char;				} else {					$previous_is_backslash = false;					$unpoified .= isset($escapes[$char])? $escapes[$char] : $char;				}			}		}		return $unpoified;	}	/**	 * Inserts $with in the beginning of every new line of $string and	 * returns the modified string	 *	 * @static	 * @param string $string prepend lines in this string	 * @param string $with prepend lines with this string	 */	function prepend_each_line($string, $with) {		$php_with = var_export($with, true);		$lines = explode("\n", $string);		// do not prepend the string on the last empty line, artefact by explode		if ("\n" == substr($string, -1)) unset($lines[count($lines) - 1]);		$res = implode("\n", array_map(create_function('$x', "return $php_with.\$x;"), $lines));		// give back the empty line, we ignored above		if ("\n" == substr($string, -1)) $res .= "\n";		return $res;	}	/**	 * Prepare a text as a comment -- wraps the lines and prepends #	 * and a special character to each line	 *	 * @access private	 * @param string $text the comment text	 * @param string $char character to denote a special PO comment,	 * 	like :, default is a space	 */	function comment_block($text, $char=' ') {		$text = wordwrap($text, PO_MAX_LINE_LEN - 3);		return PO::prepend_each_line($text, "#$char ");	}	/**	 * Builds a string from the entry for inclusion in PO file	 *	 * @static	 * @param object &$entry the entry to convert to po string	 * @return string|bool PO-style formatted string for the entry or	 * 	false if the entry is empty	 */	function export_entry(&$entry) {		if (is_null($entry->singular)) return false;		$po = array();		if (!empty($entry->translator_comments)) $po[] = PO::comment_block($entry->translator_comments);		if (!empty($entry->extracted_comments)) $po[] = PO::comment_block($entry->extracted_comments, '.');		if (!empty($entry->references)) $po[] = PO::comment_block(implode(' ', $entry->references), ':');		if (!empty($entry->flags)) $po[] = PO::comment_block(implode(", ", $entry->flags), ',');		if (!is_null($entry->context)) $po[] = 'msgctxt '.PO::poify($entry->context);		$po[] = 'msgid '.PO::poify($entry->singular);		if (!$entry->is_plural) {			$translation = empty($entry->translations)? '' : $entry->translations[0];			$po[] = 'msgstr '.PO::poify($translation);		} else {			$po[] = 'msgid_plural '.PO::poify($entry->plural);			$translations = empty($entry->translations)? array('', '') : $entry->translations;			foreach($translations as $i => $translation) {				$po[] = "msgstr[$i] ".PO::poify($translation);			}		}		return implode("\n", $po);	}	function import_from_file($filename) {		$f = fopen($filename, 'r');		if (!$f) return false;		$lineno = 0;		while (true) {			$res = $this->read_entry($f, $lineno);			if (!$res) break;			if ($res['entry']->singular == '') {				$this->set_headers($this->make_headers($res['entry']->translations[0]));			} else {				$this->add_entry($res['entry']);			}		}		PO::read_line($f, 'clear');		return $res !== false;	}	function read_entry($f, $lineno = 0) {		$entry = new Translation_Entry();		// where were we in the last step		// can be: comment, msgctxt, msgid, msgid_plural, msgstr, msgstr_plural		$context = '';		$msgstr_index = 0;		$is_final = create_function('$context', 'return $context == "msgstr" || $context == "msgstr_plural";');		while (true) {			$lineno++;			$line = PO::read_line($f);			if (!$line)  {				if (feof($f)) {					if ($is_final($context))						break;					elseif (!$context) // we haven't read a line and eof came						return null;					else						return false;				} else {					return false;				}			}			if ($line == "\n") continue;			$line = trim($line);			if (preg_match('/^#/', $line, $m)) {				// the comment is the start of a new entry				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				// comments have to be at the beginning				if ($context && $context != 'comment') {					return false;				}				// add comment				$this->add_comment_to_entry($entry, $line);			} elseif (preg_match('/^msgctxt\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'comment') {					return false;				}				$context = 'msgctxt';				$entry->context .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'msgctxt' && $context != 'comment') {					return false;				}				$context = 'msgid';				$entry->singular .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid_plural\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgid_plural';				$entry->is_plural = true;				$entry->plural .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgstr\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgstr';				$entry->translations = array(PO::unpoify($m[1]));			} elseif (preg_match('/^msgstr\[(\d+)\]\s+(".*")/', $line, $m)) {				if ($context != 'msgid_plural' && $context != 'msgstr_plural') {					return false;				}				$context = 'msgstr_plural';				$msgstr_index = $m[1];				$entry->translations[$m[1]] = PO::unpoify($m[2]);			} elseif (preg_match('/^".*"$/', $line)) {				$unpoified = PO::unpoify($line);				switch ($context) {					case 'msgid':						$entry->singular .= $unpoified; break;					case 'msgctxt':						$entry->context .= $unpoified; break;					case 'msgid_plural':						$entry->plural .= $unpoified; break;					case 'msgstr':						$entry->translations[0] .= $unpoified; break;					case 'msgstr_plural':						$entry->translations[$msgstr_index] .= $unpoified; break;					default:						return false;				}			} else {				return false;			}		}		if (array() == array_filter($entry->translations, create_function('$t', 'return $t || "0" === $t;'))) {			$entry->translations = array();		}		return array('entry' => $entry, 'lineno' => $lineno);	}	function read_line($f, $action = 'read') {		static $last_line = '';		static $use_last_line = false;		if ('clear' == $action) {			$last_line = '';			return true;		}		if ('put-back' == $action) {			$use_last_line = true;			return true;		}		$line = $use_last_line? $last_line : fgets($f);		$last_line = $line;		$use_last_line = false;		return $line;	}	function add_comment_to_entry(&$entry, $po_comment_line) {		$first_two = substr($po_comment_line, 0, 2);		$comment = trim(substr($po_comment_line, 2));		if ('#:' == $first_two) {			$entry->references = array_merge($entry->references, preg_split('/\s+/', $comment));		} elseif ('#.' == $first_two) {			$entry->extracted_comments = trim($entry->extracted_comments . "\n" . $comment);		} elseif ('#,' == $first_two) {			$entry->flags = array_merge($entry->flags, preg_split('/,\s*/', $comment));		} else {			$entry->translator_comments = trim($entry->translator_comments . "\n" . $comment);		}	}	function trim_quotes($s) {		if ( substr($s, 0, 1) == '"') $s = substr($s, 1);		if ( substr($s, -1, 1) == '"') $s = substr($s, 0, -1);		return $s;	}}endif;
<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * Gets the email message from the user's mailbox to add as * a WordPress post. Mailbox connection information must be * configured under Settings > Writing * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require(dirname(__FILE__) . '/wp-load.php');if ( ! apply_filters( 'enable_post_by_email_configuration', true ) )	wp_die( __( 'This action has been disabled by the administrator.' ) );/** Allow a plugin to do a complete takeover of Post by Email **/do_action('wp-mail.php');/** Get the POP3 class with which to access the mailbox. */require_once( ABSPATH . WPINC . '/class-pop3.php' );/** Only check at this interval for new messages. */if ( !defined('WP_MAIL_INTERVAL') )	define('WP_MAIL_INTERVAL', 300); // 5 minutes$last_checked = get_transient('mailserver_last_checked');if ( $last_checked )	wp_die(__('Slow down cowboy, no need to check for new mails so often!'));set_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);$time_difference = get_option('gmt_offset') * 3600;$phone_delim = '::';$pop3 = new POP3();if ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )	wp_die( esc_html( $pop3->ERROR ) );$count = $pop3->pass( get_option('mailserver_pass') );if( false === $count )	wp_die( esc_html( $pop3->ERROR ) );if( 0 === $count ) {	$pop3->quit();	wp_die( __('There doesn&#8217;t seem to be any new mail.') );}for ( $i = 1; $i <= $count; $i++ ) {	$message = $pop3->get($i);	$bodysignal = false;	$boundary = '';	$charset = '';	$content = '';	$content_type = '';	$content_transfer_encoding = '';	$post_author = 1;	$author_found = false;	$dmonths = array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');	foreach ($message as $line) {		// body signal		if ( strlen($line) < 3 )			$bodysignal = true;		if ( $bodysignal ) {			$content .= $line;		} else {			if ( preg_match('/Content-Type: /i', $line) ) {				$content_type = trim($line);				$content_type = substr($content_type, 14, strlen($content_type) - 14);				$content_type = explode(';', $content_type);				if ( ! empty( $content_type[1] ) ) {					$charset = explode('=', $content_type[1]);					$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';				}				$content_type = $content_type[0];			}			if ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {				$content_transfer_encoding = trim($line);				$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);				$content_transfer_encoding = explode(';', $content_transfer_encoding);				$content_transfer_encoding = $content_transfer_encoding[0];			}			if ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary="') ) && ( '' == $boundary ) ) {				$boundary = trim($line);				$boundary = explode('"', $boundary);				$boundary = $boundary[1];			}			if (preg_match('/Subject: /i', $line)) {				$subject = trim($line);				$subject = substr($subject, 9, strlen($subject) - 9);				// Captures any text in the subject before $phone_delim as the subject				if ( function_exists('iconv_mime_decode') ) {					$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));				} else {					$subject = wp_iso_descrambler($subject);				}				$subject = explode($phone_delim, $subject);				$subject = $subject[0];			}			// Set the author using the email address (From or Reply-To, the last used)			// otherwise use the site admin			if ( preg_match('/(From|Reply-To): /', $line) )  {				if ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )					$author = $matches[0];				else					$author = trim($line);				$author = sanitize_email($author);				if ( is_email($author) ) {					echo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';					$userdata = get_user_by_email($author);					if ( empty($userdata) ) {						$author_found = false;					} else {						$post_author = $userdata->ID;						$author_found = true;					}				} else {					$author_found = false;				}			}			if (preg_match('/Date: /i', $line)) { // of the form '20 Mar 2002 20:32:37'				$ddate = trim($line);				$ddate = str_replace('Date: ', '', $ddate);				if (strpos($ddate, ',')) {					$ddate = trim(substr($ddate, strpos($ddate, ',') + 1, strlen($ddate)));				}				$date_arr = explode(' ', $ddate);				$date_time = explode(':', $date_arr[3]);				$ddate_H = $date_time[0];				$ddate_i = $date_time[1];				$ddate_s = $date_time[2];				$ddate_m = $date_arr[1];				$ddate_d = $date_arr[0];				$ddate_Y = $date_arr[2];				for ( $j = 0; $j < 12; $j++ ) {					if ( $ddate_m == $dmonths[$j] ) {						$ddate_m = $j+1;					}				}				$time_zn = intval($date_arr[4]) * 36;				$ddate_U = gmmktime($ddate_H, $ddate_i, $ddate_s, $ddate_m, $ddate_d, $ddate_Y);				$ddate_U = $ddate_U - $time_zn;				$post_date = gmdate('Y-m-d H:i:s', $ddate_U + $time_difference);				$post_date_gmt = gmdate('Y-m-d H:i:s', $ddate_U);			}		}	}	// Set $post_status based on $author_found and on author's publish_posts capability	if ( $author_found ) {		$user = new WP_User($post_author);		$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';	} else {		// Author not found in DB, set status to pending.  Author already set to admin.		$post_status = 'pending';	}	$subject = trim($subject);	if ( $content_type == 'multipart/alternative' ) {		$content = explode('--'.$boundary, $content);		$content = $content[2];		// match case-insensitive content-transfer-encoding		if ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {			$content = explode($delim[0], $content);			$content = $content[1];		}		$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');	}	$content = trim($content);	//Give Post-By-Email extending plugins full access to the content	//Either the raw content or the content of the last quoted-printable section	$content = apply_filters('wp_mail_original_content', $content);	if ( false !== stripos($content_transfer_encoding, "quoted-printable") ) {		$content = quoted_printable_decode($content);	}	if ( function_exists('iconv') && ! empty( $charset ) ) {		$content = iconv($charset, get_option('blog_charset'), $content);	}	// Captures any text in the body after $phone_delim as the body	$content = explode($phone_delim, $content);	$content = empty( $content[1] ) ? $content[0] : $content[1];	$content = trim($content);	$post_content = apply_filters('phone_content', $content);	$post_title = xmlrpc_getposttitle($content);	if ($post_title == '') $post_title = $subject;	$post_category = array(get_option('default_email_category'));	$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');	$post_data = add_magic_quotes($post_data);	$post_ID = wp_insert_post($post_data);	if ( is_wp_error( $post_ID ) )		echo "\n" . $post_ID->get_error_message();	// We couldn't post, for whatever reason. Better move forward to the next email.	if ( empty( $post_ID ) )		continue;	do_action('publish_phone', $post_ID);	echo "\n<p>" . sprintf(__('<strong>Author:</strong> %s'), esc_html($post_author)) . '</p>';	echo "\n<p>" . sprintf(__('<strong>Posted title:</strong> %s'), esc_html($post_title)) . '</p>';	if(!$pop3->delete($i)) {		echo '<p>' . sprintf(__('Oops: %s'), esc_html($pop3->ERROR)) . '</p>';		$pop3->reset();		exit;	} else {		echo '<p>' . sprintf(__('Mission complete.  Message <strong>%s</strong> deleted.'), $i) . '</p>';	}}$pop3->quit();?>
<?php/** * Bookmark Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of bookmarks. * * The $bookmarks array must contain bookmark objects and will be iterated over * to retrieve the bookmark to be used in the output. * * The output is formatted as HTML with no way to change that format. However, * what is between, before, and after can be changed. The link itself will be * HTML. * * This function is used internally by wp_list_bookmarks() and should not be * used by themes. * * The defaults for overwriting are: * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * 'show_images' - Default is 1 (integer). Whether to show link image if *		available. * 'show_name' - Default is 0 (integer). Whether to show link name if *		available. * 'before' - Default is '<li>' (string). The html or text to prepend to each *		bookmarks. * 'after' - Default is '</li>' (string). The html or text to append to each *		bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *		bookmarks inside the <a> tag. * 'link_after' - Default is '' (string). The html or text to append to each *		bookmarks inside the <a> tag. * 'between' - Default is '\n' (string). The string for use in between the link, *		description, and image. * 'show_rating' - Default is 0 (integer). Whether to show the link rating. * * @since 2.1.0 * @access private * @usedby wp_list_bookmarks() * * @param array $bookmarks List of bookmarks to traverse * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML */function _walk_bookmarks($bookmarks, $args = '' ) {	$defaults = array(		'show_updated' => 0, 'show_description' => 0,		'show_images' => 1, 'show_name' => 0,		'before' => '<li>', 'after' => '</li>', 'between' => "\n",		'show_rating' => 0, 'link_before' => '', 'link_after' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = ''; // Blank string to start with.	foreach ( (array) $bookmarks as $bookmark ) {		if ( !isset($bookmark->recently_updated) )			$bookmark->recently_updated = false;		$output .= $before;		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($bookmark->link_url) )			$the_link = esc_url($bookmark->link_url);		$desc = esc_attr(sanitize_bookmark_field('link_description', $bookmark->link_description, $bookmark->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $bookmark->link_name, $bookmark->link_id, 'display')); 		$title = $desc;		if ( $show_updated )			if ( '00' != substr($bookmark->link_updated_f, 0, 2) ) {				$title .= ' (';				$title .= sprintf(__('Last updated: %s'), date(get_option('links_updated_date_format'), $bookmark->link_updated_f + (get_option('gmt_offset') * 3600)));				$title .= ')';			}		$alt = ' alt="' . $name . ( $show_description ? ' ' . $title : '' ) . '"';		if ( '' != $title )			$title = ' title="' . $title . '"';		$rel = $bookmark->link_rel;		if ( '' != $rel )			$rel = ' rel="' . esc_attr($rel) . '"';		$target = $bookmark->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target . '>';		$output .= $link_before;		if ( $bookmark->link_image != null && $show_images ) {			if ( strpos($bookmark->link_image, 'http') === 0 )				$output .= "<img src=\"$bookmark->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$bookmark->link_image\" $alt $title />";			if ( $show_name )				$output .= " $name";		} else {			$output .= $name;		}		$output .= $link_after;		$output .= '</a>';		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ( $show_rating )			$output .= $between . sanitize_bookmark_field('link_rating', $bookmark->link_rating, $bookmark->link_id, 'display');		$output .= "$after\n";	} // end while	return $output;}/** * Retrieve or echo all of the bookmarks. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'echo' - Default is 1 (integer). Whether to echo (default) or return the *		formatted bookmarks. * 'categorize' - Default is 1 (integer). Whether to show links listed by *		category (default) or show links in one column. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * * These options define how the Category name will appear before the category * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will * display for only the 'title_li' string and only if 'title_li' is not empty. * 'title_li' - Default is 'Bookmarks' (translatable string). What to show *		before the links appear. * 'title_before' - Default is '<h2>' (string). The HTML or text to show before *		the 'title_li' string. * 'title_after' - Default is '</h2>' (string). The HTML or text to show after *		the 'title_li' string. * 'class' - Default is 'linkcat' (string). The CSS class to use for the *		'title_li'. * * 'category_before' - Default is '<li id="%id" class="%class">'. String must *		contain '%id' and '%class' to get * the id of the category and the 'class' argument. These are used for *		formatting in themes. * Argument will be displayed before the 'title_before' argument. * 'category_after' - Default is '</li>' (string). The HTML or text that will *		appear after the list of links. * * These are only used if 'categorize' is set to 1 or true. * 'category_orderby' - Default is 'name'. How to order the bookmark category *		based on term scheme. * 'category_order' - Default is 'ASC'. Set the order by either ASC (ascending) *		or DESC (descending). * * @see _walk_bookmarks() For other arguments that can be set in this function *		and passed to _walk_bookmarks(). * @see get_bookmarks() For other arguments that can be set in this function and *		passed to get_bookmarks(). * @link http://codex.wordpress.org/Template_Tags/wp_list_bookmarks * * @since 2.1.0 * @uses _list_bookmarks() Used to iterate over all of the bookmarks and return *		the html * @uses get_terms() Gets all of the categories that are for links. * * @param string|array $args Optional. Overwrite the defaults of the function * @return string|null Will only return if echo option is set to not echo. *		Default is not return anything. */function wp_list_bookmarks($args = '') {	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '', 'exclude_category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'echo' => 1,		'categorize' => 1, 'title_li' => __('Bookmarks'),		'title_before' => '<h2>', 'title_after' => '</h2>',		'category_orderby' => 'name', 'category_order' => 'ASC',		'class' => 'linkcat', 'category_before' => '<li id="%id" class="%class">',		'category_after' => '</li>'	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	if ( $categorize ) {		//Split the bookmarks into ul's for each category		$cats = get_terms('link_category', array('name__like' => $category_name, 'include' => $category, 'exclude' => $exclude_category, 'orderby' => $category_orderby, 'order' => $category_order, 'hierarchical' => 0));		foreach ( (array) $cats as $cat ) {			$params = array_merge($r, array('category'=>$cat->term_id));			$bookmarks = get_bookmarks($params);			if ( empty($bookmarks) )				continue;			$output .= str_replace(array('%id', '%class'), array("linkcat-$cat->term_id", $class), $category_before);			$catname = apply_filters( "link_category", $cat->name );			$output .= "$title_before$catname$title_after\n\t<ul class='xoxo blogroll'>\n";			$output .= _walk_bookmarks($bookmarks, $r);			$output .= "\n\t</ul>\n$category_after\n";		}	} else {		//output one single list using title_li for the title		$bookmarks = get_bookmarks($r);		if ( !empty($bookmarks) ) {			if ( !empty( $title_li ) ){				$output .= str_replace(array('%id', '%class'), array("linkcat-$category", $class), $category_before);				$output .= "$title_before$title_li$title_after\n\t<ul class='xoxo blogroll'>\n";				$output .= _walk_bookmarks($bookmarks, $r);				$output .= "\n\t</ul>\n$category_after\n";			} else {				$output .= _walk_bookmarks($bookmarks, $r);			}		}	}	$output = apply_filters( 'wp_list_bookmarks', $output );	if ( !$echo )		return $output;	echo $output;}?>
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * WordPress Translation API * * @package WordPress * @subpackage i18n *//** * Gets the current locale. * * If the locale is set, then it will filter the locale in the 'locale' filter * hook and return the value. * * If the locale is not set already, then the WPLANG constant is used if it is * defined. Then it is filtered through the 'locale' filter hook and the value * for the locale global set and the locale is returned. * * The process to get the locale should only be done once but the locale will * always be filtered using the 'locale' hook. * * @since 1.5.0 * @uses apply_filters() Calls 'locale' hook on locale value. * @uses $locale Gets the locale stored in the global. * * @return string The locale of the blog or from the 'locale' hook. */function get_locale() {	global $locale;	if ( isset( $locale ) )		return apply_filters( 'locale', $locale );	// WPLANG is defined in wp-config.	if ( defined( 'WPLANG' ) )		$locale = WPLANG;	// If multisite, check options.	if ( is_multisite() && !defined('WP_INSTALLING') ) {		$ms_locale = get_option('WPLANG');		if ( $ms_locale === false )			$ms_locale = get_site_option('WPLANG');		if ( $ms_locale !== false )			$locale = $ms_locale;	}	if ( empty( $locale ) )		$locale = 'en_US';	return apply_filters( 'locale', $locale );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see __() Don't use translate() directly, use __() * @since 2.2.0 * @uses apply_filters() Calls 'gettext' on domain translated text *		with the untranslated text as second parameter. * * @param string $text Text to translate. * @param string $domain Domain to retrieve the translated text. * @return string Translated text */function translate( $text, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext', $translations->translate( $text ), $text, $domain );}function before_last_bar( $string ) {	$last_bar = strrpos( $string, '|' );	if ( false == $last_bar )		return $string;	else		return substr( $string, 0, $last_bar );}function translate_with_gettext_context( $text, $context, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext_with_context', $translations->translate( $text, $context ), $text, $context, $domain );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @since 2.1.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function __( $text, $domain = 'default' ) {	return translate( $text, $domain );}/** * Retrieves the translation of $text and escapes it for safe use in an attribute. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_attr__( $text, $domain = 'default' ) {	return esc_attr( translate( $text, $domain ) );}/** * Retrieves the translation of $text and escapes it for safe use in HTML output. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_html__( $text, $domain = 'default' ) {	return esc_html( translate( $text, $domain ) );}/** * Displays the returned translated text from translate(). * * @see translate() Echoes returned translate() string * @since 1.2.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function _e( $text, $domain = 'default' ) {	echo translate( $text, $domain );}/** * Displays translated text that has been escaped for safe use in an attribute. * * @see translate() Echoes returned translate() string * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_attr_e( $text, $domain = 'default' ) {	echo esc_attr( translate( $text, $domain ) );}/** * Displays translated text that has been escaped for safe use in HTML output. * * @see translate() Echoes returned translate() string * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_html_e( $text, $domain = 'default' ) {	echo esc_html( translate( $text, $domain ) );}/** * Retrieve translated string with gettext context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * By including the context in the pot file translators can translate the two * string differently. * * @since 2.8.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _x( $single, $context, $domain = 'default' ) {	return translate_with_gettext_context( $single, $context, $domain );}/** * Displays translated string with gettext context * * @see _x * @since 3.0.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _ex( $single, $context, $domain = 'default' ) {	echo _x( $single, $context, $domain );}function esc_attr_x( $single, $context, $domain = 'default' ) {	return esc_attr( translate_with_gettext_context( $single, $context, $domain ) );}function esc_html_x( $single, $context, $domain = 'default' ) {	return esc_html( translate_with_gettext_context( $single, $context, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * If the domain is not set in the $l10n list, then a comparison will be made * and either $plural or $single parameters returned. * * If the domain does exist, then the parameters $single, $plural, and $number * will first be passed to the domain's ngettext method. Then it will be passed * to the 'ngettext' filter hook along with the same parameters. The expected * type will be a string. * * @since 2.8.0 * @uses $l10n Gets list of domain translated string (gettext_reader) objects * @uses apply_filters() Calls 'ngettext' hook on domains text returned, *		along with $single, $plural, and $number parameters. Expected to return string. * * @param string $single The text that will be used if $number is 1 * @param string $plural The text that will be used if $number is not 1 * @param int $number The number to compare against to use either $single or $plural * @param string $domain Optional. The domain identifier the text should be retrieved in * @return string Either $single or $plural translated text */function _n( $single, $plural, $number, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number );	return apply_filters( 'ngettext', $translation, $single, $plural, $number, $domain );}/** * A hybrid of _n() and _x(). It supports contexts and plurals. * * @see _n() * @see _x() * */function _nx($single, $plural, $number, $context, $domain = 'default') {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number, $context );	return apply_filters( 'ngettext_with_context', $translation, $single, $plural, $number, $context, $domain );}/** * Register plural strings in POT file, but don't translate them. * * Used when you want do keep structures with translatable plural strings and * use them later. * * Example: *  $messages = array( *  	'post' => _n_noop('%s post', '%s posts'), *  	'page' => _n_noop('%s pages', '%s pages') *  ); *  ... *  $message = $messages[$type]; *  $usable_text = sprintf(_n($message[0], $message[1], $count), $count); * * @since 2.5 * @param $single Single form to be i18ned * @param $plural Plural form to be i18ned * @return array array($single, $plural) */function _n_noop( $single, $plural ) {	return array( $single, $plural );}/** * Register plural strings with context in POT file, but don't translate them. * * @see _n_noop() */function _nx_noop( $single, $plural, $context ) {	return array( $single, $plural, $context );}/** * Loads a MO file into the domain $domain. * * If the domain already exists, the translations will be merged. If both * sets have the same string, the translation from the original value will be taken. * * On success, the .mo file will be placed in the $l10n global by $domain * and will be a MO object. * * @since 1.5.0 * @uses $l10n Gets list of domain translated string objects * * @param string $domain Unique identifier for retrieving translated strings * @param string $mofile Path to the .mo file * @return bool true on success, false on failure */function load_textdomain( $domain, $mofile ) {	global $l10n;	$plugin_override = apply_filters( 'override_load_textdomain', false, $domain, $mofile );	if ( true == $plugin_override ) {		return true;	}	do_action( 'load_textdomain', $domain, $mofile );	$mofile = apply_filters( 'load_textdomain_mofile', $mofile, $domain );	if ( !is_readable( $mofile ) ) return false;	$mo = new MO();	if ( !$mo->import_from_file( $mofile ) ) return false;	if ( isset( $l10n[$domain] ) )		$mo->merge_with( $l10n[$domain] );	$l10n[$domain] = &$mo;	return true;}/** * Unloads translations for a domain * * @since 3.0.0 * @param string $domain Textdomain to be unloaded * @return bool Whether textdomain was unloaded */function unload_textdomain( $domain ) {	global $l10n;	$plugin_override = apply_filters( 'override_unload_textdomain', false, $domain );	if ( $plugin_override )		return true;	do_action( 'unload_textdomain', $domain );	if ( isset( $l10n[$domain] ) ) {		unset( $l10n[$domain] );		return true;	}	return false;}/** * Loads default translated strings based on locale. * * Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The * translated (.mo) file is named based off of the locale. * * @since 1.5.0 */function load_default_textdomain() {	$locale = get_locale();	load_textdomain( 'default', WP_LANG_DIR . "/$locale.mo" );	if ( is_multisite() || ( defined( 'WP_NETWORK_ADMIN_PAGE' ) && WP_NETWORK_ADMIN_PAGE ) ) {		load_textdomain( 'default', WP_LANG_DIR . "/ms-$locale.mo" );	}}/** * Loads the plugin's translated strings. * * If the path is not given then it will be the root of the plugin directory. * The .mo file should be named based on the domain with a dash, and then the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings * @param string $abs_rel_path Optional. Relative path to ABSPATH of a folder, * 	where the .mo file resides. Deprecated, but still functional until 2.7 * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precendence over $abs_rel_path */function load_plugin_textdomain( $domain, $abs_rel_path = false, $plugin_rel_path = false ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	if ( false !== $plugin_rel_path	) {		$path = WP_PLUGIN_DIR . '/' . trim( $plugin_rel_path, '/' );	} else if ( false !== $abs_rel_path ) {		_deprecated_argument( __FUNCTION__, '2.7' );		$path = ABSPATH . trim( $abs_rel_path, '/' );	} else {		$path = WP_PLUGIN_DIR;	}	$mofile = $path . '/'. $domain . '-' . $locale . '.mo';	return load_textdomain( $domain, $mofile );}/** * Load the translated strings for a plugin residing in the mu-plugins dir. * * @since 3.0.0 * * @param string $domain Unique identifier for retrieving translated strings * @param strings $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which * the MO file resides. Defaults is empty string. */function load_muplugin_textdomain( $domain, $mu_plugin_rel_path = '' ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	$path = WPMU_PLUGIN_DIR . '/' . ltrim( $mu_plugin_rel_path, '/' );	load_textdomain( $domain, trailingslashit( $path ) . "$domain-$locale.mo" );}/** * Loads the theme's translated strings. * * If the current locale exists as a .mo file in the theme's root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_template_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Loads the child themes translated strings. * * If the current locale exists as a .mo file in the child themes root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 2.9.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_child_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_stylesheet_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Returns the Translations instance for a domain. If there isn't one, * returns empty Translations instance. * * @param string $domain * @return object A Translation instance */function &get_translations_for_domain( $domain ) {	global $l10n;	if ( !isset( $l10n[$domain] ) ) {		$l10n[$domain] = &new NOOP_Translations;	}	return $l10n[$domain];}/** * Whether there are translations for the domain * * @since 3.0.0 * @param string $domain * @return bool Whether there are translations */function is_textdomain_loaded( $domain ) {	global $l10n;	return isset( $l10n[$domain] );}/** * Translates role name. Since the role names are in the database and * not in the source there are dummy gettext calls to get them into the POT * file and this function properly translates them back. * * The before_last_bar() call is needed, because older installs keep the roles * using the old context format: 'Role name|User role' and just skipping the * content after the last bar is easier than fixing them in the DB. New installs * won't suffer from that problem. */function translate_user_role( $name ) {	return translate_with_gettext_context( before_last_bar($name), 'User role' );}/** * Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR. * * @since 3.0.0 * * @param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR. * @return array Array of language codes or an empty array if no languages are present.  Language codes are formed by stripping the .mo extension from the language file names. */function get_available_languages( $dir = null ) {	$languages = array();	foreach( (array)glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file ) {		$lang_file = basename($lang_file, '.mo');		if ( 0 !== strpos( $lang_file, 'continents-cities' ) && 0 !== strpos( $lang_file, 'ms-' ) )			$languages[] = $lang_file;	}	return $languages;}
<?php/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );add_action( 'wp_head', 'signuppageheaders' ) ;require( './wp-blog-header.php' );require_once( ABSPATH . WPINC . '/registration.php' );if ( is_array( get_site_option( 'illegal_names' )) && isset( $_GET[ 'new' ] ) && in_array( $_GET[ 'new' ], get_site_option( 'illegal_names' ) ) == true ) {	wp_redirect( network_home_url() );	die();}function do_signup_header() {	do_action("signup_header");}add_action( 'wp_head', 'do_signup_header' );function signuppageheaders() {	echo "<meta name='robots' content='noindex,nofollow' />\n";}if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}if ( !is_main_site() ) {	wp_redirect( network_home_url( 'wp-signup.php' ) );	die();}// Fix for page title$wp_query->is_404 = false;function wpmu_signup_stylesheet() {	?>	<style type="text/css">		.mu_register { width: 90%; margin:0 auto; }		.mu_register form { margin-top: 2em; }		.mu_register .error { font-weight:700; padding:10px; color:#333333; background:#FFEBE8; border:1px solid #CC0000; }		.mu_register input[type="submit"],			.mu_register #blog_title,			.mu_register #user_email,			.mu_register #blogname,			.mu_register #user_name { width:100%; font-size: 24px; margin:5px 0; }		.mu_register .prefix_address,			.mu_register .suffix_address {font-size: 18px;display:inline; }		.mu_register label { font-weight:700; font-size:15px; display:block; margin:10px 0; }		.mu_register label.checkbox { display:inline; }		.mu_register .mu_alert { font-weight:700; padding:10px; color:#333333; background:#ffffe0; border:1px solid #e6db55; }	</style>	<?php}add_action( 'wp_head', 'wpmu_signup_stylesheet' );get_header();do_action( 'before_signup_form' );?><div id="content" class="widecolumn"><div class="mu_register"><?phpfunction show_blog_form($blogname = '', $blog_title = '', $errors = '') {	global $current_site;	// Blog name	if ( !is_subdomain_install() )		echo '<label for="blogname">' . __('Site Name:') . '</label>';	else		echo '<label for="blogname">' . __('Site Domain:') . '</label>';	if ( $errmsg = $errors->get_error_message('blogname') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	if ( !is_subdomain_install() )		echo '<span class="prefix_address">' . $current_site->domain . $current_site->path . '</span><input name="blogname" type="text" id="blogname" value="'. esc_attr($blogname) .'" maxlength="60" /><br />';	else		echo '<input name="blogname" type="text" id="blogname" value="'.esc_attr($blogname).'" maxlength="60" /><span class="suffix_address">.' . ( $site_domain = preg_replace( '|^www\.|', '', $current_site->domain ) ) . '</span><br />';	if ( !is_user_logged_in() ) {		print '(<strong>' . __( 'Your address will be ' );		if ( !is_subdomain_install() )			print $current_site->domain . $current_site->path . __( 'sitename' );		else			print __( 'domain.' ) . $site_domain . $current_site->path;		echo '.</strong>) ' . __( 'Must be at least 4 characters, letters and numbers only. It cannot be changed, so choose carefully!' ) . '</p>';	}	// Blog Title	?>	<label for="blog_title"><?php _e('Site Title:') ?></label>	<?php if ( $errmsg = $errors->get_error_message('blog_title') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php }	echo '<input name="blog_title" type="text" id="blog_title" value="'.esc_attr($blog_title).'" />';	?>	<div id="privacy">        <p class="privacy-intro">            <label for="blog_public_on"><?php _e('Privacy:') ?></label>            <?php _e('Allow my site to appear in search engines like Google, Technorati, and in public listings around this network.'); ?>            <br style="clear:both" />            <label class="checkbox" for="blog_public_on">                <input type="radio" id="blog_public_on" name="blog_public" value="1" <?php if ( !isset( $_POST['blog_public'] ) || $_POST['blog_public'] == '1' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'Yes' ); ?></strong>            </label>            <label class="checkbox" for="blog_public_off">                <input type="radio" id="blog_public_off" name="blog_public" value="0" <?php if ( isset( $_POST['blog_public'] ) && $_POST['blog_public'] == '0' ) { ?>checked="checked"<?php } ?> />                <strong><?php _e( 'No' ); ?></strong>            </label>        </p>	</div>	<?php	do_action('signup_blogform', $errors);}function validate_blog_form() {	$user = '';	if ( is_user_logged_in() )		$user = wp_get_current_user();	return wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title'], $user);}function show_user_form($user_name = '', $user_email = '', $errors = '') {	// User name	echo '<label for="user_name">' . __('Username:') . '</label>';	if ( $errmsg = $errors->get_error_message('user_name') ) {		echo '<p class="error">'.$errmsg.'</p>';	}	echo '<input name="user_name" type="text" id="user_name" value="'. esc_attr($user_name) .'" maxlength="60" /><br />';	_e( '(Must be at least 4 characters, letters and numbers only.)' );	?>	<label for="user_email"><?php _e( 'Email&nbsp;Address:' ) ?></label>	<?php if ( $errmsg = $errors->get_error_message('user_email') ) { ?>		<p class="error"><?php echo $errmsg ?></p>	<?php } ?>	<input name="user_email" type="text" id="user_email" value="<?php  echo esc_attr($user_email) ?>" maxlength="200" /><br /><?php _e('We send your registration email to this address. (Double-check your email address before continuing.)') ?>	<?php	if ( $errmsg = $errors->get_error_message('generic') ) {		echo '<p class="error">' . $errmsg . '</p>';	}	do_action( 'signup_extra_fields', $errors );}function validate_user_form() {	return wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);}function signup_another_blog($blogname = '', $blog_title = '', $errors = '') {	global $current_user, $current_site;	if ( ! is_wp_error($errors) ) {		$errors = new WP_Error();	}	// allow definition of default variables	$filtered_results = apply_filters('signup_another_blog_init', array('blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	echo '<h2>' . sprintf( __( 'Get <em>another</em> %s site in seconds' ), $current_site->site_name ) . '</h2>';	if ( $errors->get_error_code() ) {		echo '<p>' . __( 'There was a problem, please correct the form below and try again.' ) . '</p>';	}	?>	<p><?php printf( __( 'Welcome back, %s. By filling out the form below, you can <strong>add another site to your account</strong>. There is no limit to the number of sites you can have, so create to your heart&#8217;s content, but write responsibly!' ), $current_user->display_name ) ?></p>	<?php	$blogs = get_blogs_of_user($current_user->ID);	if ( !empty($blogs) ) { ?>			<p><?php _e( 'Sites you are already a member of:' ) ?></p>			<ul>				<?php foreach ( $blogs as $blog ) {					$home_url = get_home_url( $blog->userblog_id );					echo '<li><a href="' . esc_url( $home_url ) . '">' . $home_url . '</a></li>';				} ?>			</ul>	<?php } ?>	<p><?php _e( 'If you&#8217;re not going to use a great site domain, leave it for a new user. Now have at it!' ) ?></p>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="gimmeanotherblog" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e( 'Create Site' ) ?>" /></p>	</form>	<?php}function validate_another_blog_signup() {	global $wpdb, $current_user, $blogname, $blog_title, $errors, $domain, $path;	$current_user = wp_get_current_user();	if ( !is_user_logged_in() )		die();	$result = validate_blog_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_another_blog($blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = apply_filters( 'signup_create_blog_meta', array( 'lang_id' => 1, 'public' => $public ) ); // deprecated	$meta = apply_filters( 'add_signup_meta', $meta );	wpmu_create_blog( $domain, $path, $blog_title, $current_user->id, $meta, $wpdb->siteid );	confirm_another_blog_signup($domain, $path, $blog_title, $current_user->user_login, $current_user->user_email, $meta);	return true;}function confirm_another_blog_signup($domain, $path, $blog_title, $user_name, $user_email = '', $meta = '') {	?>	<h2><?php printf( __( 'The site %s is yours.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p>		<?php printf( __( '<a href="http://%1$s">http://%2$s</a> is your new site.  <a href="%3$s">Log in</a> as &#8220;%4$s&#8221; using your existing password.' ), $domain.$path, $domain.$path, "http://" . $domain.$path . "wp-login.php", $user_name ) ?>	</p>	<?php	do_action( 'signup_finished' );}function signup_user($user_name = '', $user_email = '', $errors = '') {	global $current_site, $active_signup;	if ( !is_wp_error($errors) )		$errors = new WP_Error();	if ( isset( $_POST[ 'signup_for' ] ) )		$signup[ esc_html( $_POST[ 'signup_for' ] ) ] = 'checked="checked"';	else		$signup[ 'blog' ] = 'checked="checked"';	//TODO - This doesn't seem to do anything do we really need it?	$signup['user'] = isset( $signup['user'] ) ? $signup['user'] : '';	// allow definition of default variables	$filtered_results = apply_filters('signup_user_init', array('user_name' => $user_name, 'user_email' => $user_email, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$errors = $filtered_results['errors'];	?>	<h2><?php printf( __( 'Get your own %s account in seconds' ), $current_site->site_name ) ?></h2>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-user-signup" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_user_form($user_name, $user_email, $errors); ?>		<p>		<?php if ( $active_signup == 'blog' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="blog" />		<?php } elseif ( $active_signup == 'user' ) { ?>			<input id="signupblog" type="hidden" name="signup_for" value="user" />		<?php } else { ?>			<input id="signupblog" type="radio" name="signup_for" value="blog" <?php echo $signup['blog'] ?> />			<label class="checkbox" for="signupblog"><?php _e('Gimme a site!') ?></label>			<br />			<input id="signupuser" type="radio" name="signup_for" value="user" <?php echo $signup['user'] ?> />			<label class="checkbox" for="signupuser"><?php _e('Just a username, please.') ?></label>		<?php } ?>		</p>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Next') ?>" /></p>	</form>	<?php}function validate_user_signup() {	$result = validate_user_form();	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	if ( 'blog' == $_POST['signup_for'] ) {		signup_blog($user_name, $user_email);		return false;	}	wpmu_signup_user($user_name, $user_email, apply_filters( "add_signup_meta", array() ) );	confirm_user_signup($user_name, $user_email);	return true;}function confirm_user_signup($user_name, $user_email) {	?>	<h2><?php printf( __( '%s is your new username' ), $user_name) ?></h2>	<p><?php _e( 'But, before you can start using your new username, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf(__( 'Check your inbox at <strong>%1$s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your username within two days, you will have to sign up again.' ); ?></p>	<?php	do_action( 'signup_finished' );}function signup_blog($user_name = '', $user_email = '', $blogname = '', $blog_title = '', $errors = '') {	if ( !is_wp_error($errors) )		$errors = new WP_Error();	// allow definition of default variables	$filtered_results = apply_filters('signup_blog_init', array('user_name' => $user_name, 'user_email' => $user_email, 'blogname' => $blogname, 'blog_title' => $blog_title, 'errors' => $errors ));	$user_name = $filtered_results['user_name'];	$user_email = $filtered_results['user_email'];	$blogname = $filtered_results['blogname'];	$blog_title = $filtered_results['blog_title'];	$errors = $filtered_results['errors'];	if ( empty($blogname) )		$blogname = $user_name;	?>	<form id="setupform" method="post" action="wp-signup.php">		<input type="hidden" name="stage" value="validate-blog-signup" />		<input type="hidden" name="user_name" value="<?php echo esc_attr($user_name) ?>" />		<input type="hidden" name="user_email" value="<?php echo esc_attr($user_email) ?>" />		<?php do_action( "signup_hidden_fields" ); ?>		<?php show_blog_form($blogname, $blog_title, $errors); ?>		<p class="submit"><input type="submit" name="submit" class="submit" value="<?php esc_attr_e('Signup') ?>" /></p>	</form>	<?php}function validate_blog_signup() {	// Re-validate user info.	$result = wpmu_validate_user_signup($_POST['user_name'], $_POST['user_email']);	extract($result);	if ( $errors->get_error_code() ) {		signup_user($user_name, $user_email, $errors);		return false;	}	$result = wpmu_validate_blog_signup($_POST['blogname'], $_POST['blog_title']);	extract($result);	if ( $errors->get_error_code() ) {		signup_blog($user_name, $user_email, $blogname, $blog_title, $errors);		return false;	}	$public = (int) $_POST['blog_public'];	$meta = array ('lang_id' => 1, 'public' => $public);	$meta = apply_filters( "add_signup_meta", $meta );	wpmu_signup_blog($domain, $path, $blog_title, $user_name, $user_email, $meta);	confirm_blog_signup($domain, $path, $blog_title, $user_name, $user_email, $meta);	return true;}function confirm_blog_signup($domain, $path, $blog_title, $user_name = '', $user_email = '', $meta) {	?>	<h2><?php printf( __( 'Congratulations! Your new site, %s, is almost ready.' ), "<a href='http://{$domain}{$path}'>{$blog_title}</a>" ) ?></h2>	<p><?php _e( 'But, before you can start using your site, <strong>you must activate it</strong>.' ) ?></p>	<p><?php printf( __( 'Check your inbox at <strong>%s</strong> and click the link given.' ),  $user_email) ?></p>	<p><?php _e( 'If you do not activate your site within two days, you will have to sign up again.' ); ?></p>	<h2><?php _e( 'Still waiting for your email?' ); ?></h2>	<p>		<?php _e( 'If you haven&#8217;t received your email yet, there are a number of things you can do:' ) ?>		<ul id="noemail-tips">			<li><p><strong><?php _e( 'Wait a little longer. Sometimes delivery of email can be delayed by processes outside of our control.' ) ?></strong></p></li>			<li><p><?php _e( 'Check the junk or spam folder of your email client. Sometime emails wind up there by mistake.' ) ?></p></li>			<li><?php printf( __( 'Have you entered your email correctly?  You have entered %s, if it&#8217;s incorrect, you will not receive your email.' ), $user_email ) ?></li>		</ul>	</p>	<?php	do_action( 'signup_finished' );}// Main$active_signup = get_site_option( 'registration' );if ( !$active_signup )	$active_signup = 'all';$active_signup = apply_filters( 'wpmu_active_signup', $active_signup ); // return "all", "none", "blog" or "user"// Make the signup type translatable.$i18n_signup['all'] = _x('all', 'Multisite active signup type');$i18n_signup['none'] = _x('none', 'Multisite active signup type');$i18n_signup['blog'] = _x('blog', 'Multisite active signup type');$i18n_signup['user'] = _x('user', 'Multisite active signup type');if ( is_super_admin() )	echo '<div class="mu_alert">' . sprintf( __( 'Greetings Site Administrator! You are currently allowing &#8220;%s&#8221; registrations. To change or disable registration go to your <a href="%s">Options page</a>.' ), $i18n_signup[$active_signup], esc_url( network_admin_url( 'ms-options.php' ) ) ) . '</div>';$newblogname = isset($_GET['new']) ? strtolower(preg_replace('/^-|-$|[^-a-zA-Z0-9]/', '', $_GET['new'])) : null;$current_user = wp_get_current_user();if ( $active_signup == "none" ) {	_e( 'Registration has been disabled.' );} elseif ( $active_signup == 'blog' && !is_user_logged_in() ) {	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$login_url = site_url( 'wp-login.php?redirect_to=' . urlencode($proto . $_SERVER['HTTP_HOST'] . '/wp-signup.php' ));	echo sprintf( __( 'You must first <a href="%s">log in</a>, and then you can create a new site.' ), $login_url );} else {	$stage = isset( $_POST['stage'] ) ?  $_POST['stage'] : 'default';	switch ( $stage ) {		case 'validate-user-signup' :			if ( $active_signup == 'all' || $_POST[ 'signup_for' ] == 'blog' && $active_signup == 'blog' || $_POST[ 'signup_for' ] == 'user' && $active_signup == 'user' )				validate_user_signup();			else				_e( 'User registration has been disabled.' );		break;		case 'validate-blog-signup':			if ( $active_signup == 'all' || $active_signup == 'blog' )				validate_blog_signup();			else				_e( 'Site registration has been disabled.' );			break;		case 'gimmeanotherblog':			validate_another_blog_signup();			break;		case 'default':		default :			$user_email = isset( $_POST[ 'user_email' ] ) ? $_POST[ 'user_email' ] : '';			do_action( "preprocess_signup_form" ); // populate the form from invites, elsewhere?			if ( is_user_logged_in() && ( $active_signup == 'all' || $active_signup == 'blog' ) )				signup_another_blog($newblogname);			elseif ( is_user_logged_in() == false && ( $active_signup == 'all' || $active_signup == 'user' ) )				signup_user( $newblogname, $user_email );			elseif ( is_user_logged_in() == false && ( $active_signup == 'blog' ) )				_e( 'Sorry, new registrations are not allowed at this time.' );			else				_e( 'You are logged in already. No need to register again!' );			if ( $newblogname ) {				$newblog = get_blogaddress_by_name( $newblogname );				if ( $active_signup == 'blog' || $active_signup == 'all' )					printf( __( '<p><em>The site you were looking for, <strong>%s</strong> does not exist, but you can create it now!</em></p>' ), $newblog );				else					printf( __( '<p><em>The site you were looking for, <strong>%s</strong>, does not exist.</em></p>' ), $newblog );			}			break;	}}?></div></div><?php do_action( 'after_signup_form' ); ?><?php get_footer(); ?>
<?php/** * RSS2 Feed Template for displaying RSS2 Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>';?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	<?php do_action('rss2_ns'); do_action('rss2_comments_ns'); ?>	><channel>	<title><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on: %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %s searching on %s')), get_bloginfo_rss( 'name' ), esc_attr($wp_query->query_vars['s']));		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php (is_single()) ? the_permalink_rss() : bloginfo_rss("url") ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('r', get_lastcommentmodified('GMT')); ?></lastBuildDate>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('commentsrss2_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<item>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link><?php comment_link() ?></link>		<dc:creator><?php echo get_comment_author_rss() ?></dc:creator>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_comment_time('Y-m-d H:i:s', true, false), false); ?></pubDate>		<guid isPermaLink="false"><?php comment_guid() ?></guid><?php if ( post_password_required($comment_post) ) : ?>		<description><?php echo ent2ncr(__('Protected Comments: Please enter your password to view comments.')); ?></description>		<content:encoded><![CDATA[<?php echo get_the_password_form() ?>]]></content:encoded><?php else : // post pass ?>		<description><?php comment_text_rss() ?></description>		<content:encoded><![CDATA[<?php comment_text() ?>]]></content:encoded><?php endif; // post pass	do_action('commentrss2_item', $comment->comment_ID, $comment_post->ID);?>	</item><?php endwhile; endif; ?></channel></rss>
<?php/** * Redirects to the RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss2_url' ), 301 );?>
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
