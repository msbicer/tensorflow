<?php/** * Plugins may load this file to gain access to special helper functions for * plugin installation. This file is not included by WordPress and it is * recommended, to prevent fatal errors, that this file is included using * require_once(). * * These functions are not optimized for speed, but they should only be used * once in a while, so speed shouldn't be a concern. If it is and you are * needing to use these functions a lot, you might experience time outs. If you * do, then it is advised to just write the SQL code yourself. * * You can turn debugging on, by setting $debug to 1 after you include this * file. * * <code> * check_column('wp_links', 'link_description', 'mediumtext'); * if (check_column($wpdb->comments, 'comment_author', 'tinytext')) *     echo "ok\n"; * * $error_count = 0; * $tablename = $wpdb->links; * // check the column * if (!check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $ddl = "ALTER TABLE $wpdb->links MODIFY COLUMN link_description varchar(255) NOT NULL DEFAULT '' "; *     $q = $wpdb->query($ddl); * } * * if (check_column($wpdb->links, 'link_description', 'varchar(255)')) { *     $res .= $tablename . ' - ok <br />'; * } else { *     $res .= 'There was a problem with ' . $tablename . '<br />'; *     ++$error_count; * } * </code> * * @package WordPress * @subpackage Plugin *//** * @global bool $wp_only_load_config * @name $wp_only_load_config * @var bool * @since unknown */$wp_only_load_config = true;/** Load WordPress Bootstrap */require_once(dirname(dirname(__FILE__)).'/wp-load.php');/** * Turn debugging on or off. * @global bool|int $debug * @name $debug * @var bool|int * @since unknown */$debug = 0;if ( ! function_exists('maybe_create_table') ) :/** * Create database table, if it doesn't already exist. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Database table name. * @param string $create_ddl Create database table SQL. * @return bool False on error, true if already exists or success. */function maybe_create_table($table_name, $create_ddl) {	global $wpdb;	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("SHOW TABLES",0) as $table ) {		if ($table == $table_name) {			return true;		}	}	return false;}endif;if ( ! function_exists('maybe_add_column') ) :/** * Add column to database table, if column doesn't already exist in table. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * @uses $debug * * @param string $table_name Database table name * @param string $column_name Table column name * @param string $create_ddl SQL to add column to table. * @return bool False on failure. True, if already exists or was successful. */function maybe_add_column($table_name, $column_name, $create_ddl) {	global $wpdb, $debug;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($debug) echo("checking $column == $column_name<br />");		if ($column == $column_name) {			return true;		}	}	//didn't find it try to create it.	$wpdb->query($create_ddl);	// we cannot directly tell that whether this succeeded!	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			return true;		}	}	return false;}endif;/** * Drop column from database table, if it exists. * * @since unknown * @package WordPress * @subpackage Plugin * @uses $wpdb * * @param string $table_name Table name * @param string $column_name Column name * @param string $drop_ddl SQL statement to drop column. * @return bool False on failure, true on success or doesn't exist. */function maybe_drop_column($table_name, $column_name, $drop_ddl) {	global $wpdb;	foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {		if ($column == $column_name) {			//found it try to drop it.			$wpdb->query($drop_ddl);			// we cannot directly tell that whether this succeeded!			foreach ($wpdb->get_col("DESC $table_name",0) as $column ) {				if ($column == $column_name) {					return false;				}			}		}	}	// else didn't find it	return true;}/** * Check column matches criteria. * * Uses the SQL DESC for retrieving the table info for the column. It will help * understand the parameters, if you do more research on what column information * is returned by the SQL statement. Pass in null to skip checking that * criteria. * * Column names returned from DESC table are case sensitive and are listed: *      Field *      Type *      Null *      Key *      Default *      Extra * * @since unknown * @package WordPress * @subpackage Plugin * * @param string $table_name Table name * @param string $col_name Column name * @param string $col_type Column type * @param bool $is_null Optional. Check is null. * @param mixed $key Optional. Key info. * @param mixed $default Optional. Default value. * @param mixed $extra Optional. Extra value. * @return bool True, if matches. False, if not matching. */function check_column($table_name, $col_name, $col_type, $is_null = null, $key = null, $default = null, $extra = null) {	global $wpdb, $debug;	$diffs = 0;	$results = $wpdb->get_results("DESC $table_name");	foreach ($results as $row ) {		if ($debug > 1) print_r($row);		if ($row->Field == $col_name) {			// got our column, check the params			if ($debug) echo ("checking $row->Type against $col_type\n");			if (($col_type != null) && ($row->Type != $col_type)) {				++$diffs;			}			if (($is_null != null) && ($row->Null != $is_null)) {				++$diffs;			}			if (($key != null) && ($row->Key  != $key)) {				++$diffs;			}			if (($default != null) && ($row->Default != $default)) {				++$diffs;			}			if (($extra != null) && ($row->Extra != $extra)) {				++$diffs;			}			if ($diffs > 0) {				if ($debug) echo ("diffs = $diffs returning false\n");				return false;			}			return true;		} // end if found our column	}	return false;}?>
<?php/** * Includes all of the WordPress Administration API files. * * @package WordPress * @subpackage Administration *//** WordPress Bookmark Administration API */require_once(ABSPATH . 'wp-admin/includes/bookmark.php');/** WordPress Comment Administration API */require_once(ABSPATH . 'wp-admin/includes/comment.php');/** WordPress Administration File API */require_once(ABSPATH . 'wp-admin/includes/file.php');/** WordPress Image Administration API */require_once(ABSPATH . 'wp-admin/includes/image.php');/** WordPress Media Administration API */require_once(ABSPATH . 'wp-admin/includes/media.php');/** WordPress Import Administration API */require_once(ABSPATH . 'wp-admin/includes/import.php');/** WordPress Misc Administration API */require_once(ABSPATH . 'wp-admin/includes/misc.php');/** WordPress Plugin Administration API */require_once(ABSPATH . 'wp-admin/includes/plugin.php');/** WordPress Post Administration API */require_once(ABSPATH . 'wp-admin/includes/post.php');/** WordPress Taxonomy Administration API */require_once(ABSPATH . 'wp-admin/includes/taxonomy.php');/** WordPress Template Administration API */require_once(ABSPATH . 'wp-admin/includes/template.php');/** WordPress Theme Administration API */require_once(ABSPATH . 'wp-admin/includes/theme.php');/** WordPress User Administration API */require_once(ABSPATH . 'wp-admin/includes/user.php');/** WordPress Update Administration API */require_once(ABSPATH . 'wp-admin/includes/update.php');/** WordPress Registration API */require_once(ABSPATH . WPINC . '/registration.php');/** WordPress Deprecated Administration API */require_once(ABSPATH . 'wp-admin/includes/deprecated.php');/** WordPress Multi-Site support API */if ( is_multisite() ) {	require_once(ABSPATH . 'wp-admin/includes/ms.php');	require_once(ABSPATH . 'wp-admin/includes/ms-deprecated.php');}?>
<?php/** * The template for displaying Category Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );				?></h1>				<?php					$category_description = category_description();					if ( ! empty( $category_description ) )						echo '<div class="archive-meta">' . $category_description . '</div>';				/* Run the loop for the category page to output the posts.				 * If you want to overload this in a child theme then include a file				 * called loop-category.php and that will be used instead.				 */				get_template_part( 'loop', 'category' );				?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Class for working with MO files * * @version $Id: mo.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage mo */require_once dirname(__FILE__) . '/translations.php';require_once dirname(__FILE__) . '/streams.php';if ( !class_exists( 'MO' ) ):class MO extends Gettext_Translations {	var $_nplurals = 2;	/**	 * Fills up with the entries from MO file $filename	 *	 * @param string $filename MO file to load	 */	function import_from_file($filename) {		$reader = new POMO_FileReader($filename);		if (!$reader->is_resource())			return false;		return $this->import_from_reader($reader);	}	function export_to_file($filename) {		$fh = fopen($filename, 'wb');		if ( !$fh ) return false;		$entries = array_filter($this->entries, create_function('$e', 'return !empty($e->translations);'));		ksort($entries);		$magic = 0x950412de;		$revision = 0;		$total = count($entries) + 1; // all the headers are one entry		$originals_lenghts_addr = 28;		$translations_lenghts_addr = $originals_lenghts_addr + 8 * $total;		$size_of_hash = 0;		$hash_addr = $translations_lenghts_addr + 8 * $total;		$current_addr = $hash_addr;		fwrite($fh, pack('V*', $magic, $revision, $total, $originals_lenghts_addr,			$translations_lenghts_addr, $size_of_hash, $hash_addr));		fseek($fh, $originals_lenghts_addr);		// headers' msgid is an empty string		fwrite($fh, pack('VV', 0, $current_addr));		$current_addr++;		$originals_table = chr(0);		foreach($entries as $entry) {			$originals_table .= $this->export_original($entry) . chr(0);			$length = strlen($this->export_original($entry));			fwrite($fh, pack('VV', $length, $current_addr));			$current_addr += $length + 1; // account for the NULL byte after		}		$exported_headers = $this->export_headers();		fwrite($fh, pack('VV', strlen($exported_headers), $current_addr));		$current_addr += strlen($exported_headers) + 1;		$translations_table = $exported_headers . chr(0);		foreach($entries as $entry) {			$translations_table .= $this->export_translations($entry) . chr(0);			$length = strlen($this->export_translations($entry));			fwrite($fh, pack('VV', $length, $current_addr));			$current_addr += $length + 1;		}		fwrite($fh, $originals_table);		fwrite($fh, $translations_table);		fclose($fh);	}	function export_original($entry) {		//TODO: warnings for control characters		$exported = $entry->singular;		if ($entry->is_plural) $exported .= chr(0).$entry->plural;		if (!is_null($entry->context)) $exported = $entry->context . chr(4) . $exported;		return $exported;	}	function export_translations($entry) {		//TODO: warnings for control characters		return implode(chr(0), $entry->translations);	}	function export_headers() {		$exported = '';		foreach($this->headers as $header => $value) {			$exported.= "$header: $value\n";		}		return $exported;	}	function get_byteorder($magic) {		// The magic is 0x950412de		// bug in PHP 5.0.2, see https://savannah.nongnu.org/bugs/?func=detailitem&item_id=10565		$magic_little = (int) - 1794895138;		$magic_little_64 = (int) 2500072158;		// 0xde120495		$magic_big = ((int) - 569244523) & 0xFFFFFFFF;		if ($magic_little == $magic || $magic_little_64 == $magic) {			return 'little';		} else if ($magic_big == $magic) {			return 'big';		} else {			return false;		}	}	function import_from_reader($reader) {		$endian_string = MO::get_byteorder($reader->readint32());		if (false === $endian_string) {			return false;		}		$reader->setEndian($endian_string);		$endian = ('big' == $endian_string)? 'N' : 'V';		$header = $reader->read(24);		if ($reader->strlen($header) != 24)			return false;		// parse header		$header = unpack("{$endian}revision/{$endian}total/{$endian}originals_lenghts_addr/{$endian}translations_lenghts_addr/{$endian}hash_length/{$endian}hash_addr", $header);		if (!is_array($header))			return false;		extract( $header );		// support revision 0 of MO format specs, only		if ($revision != 0)			return false;		// seek to data blocks		$reader->seekto($originals_lenghts_addr);		// read originals' indices		$originals_lengths_length = $translations_lenghts_addr - $originals_lenghts_addr;		if ( $originals_lengths_length != $total * 8 )			return false;		$originals = $reader->read($originals_lengths_length);		if ( $reader->strlen( $originals ) != $originals_lengths_length )			return false;		// read translations' indices		$translations_lenghts_length = $hash_addr - $translations_lenghts_addr;		if ( $translations_lenghts_length != $total * 8 )			return false;		$translations = $reader->read($translations_lenghts_length);		if ( $reader->strlen( $translations ) != $translations_lenghts_length )			return false;		// transform raw data into set of indices		$originals    = $reader->str_split( $originals, 8 );		$translations = $reader->str_split( $translations, 8 );		// skip hash table		$strings_addr = $hash_addr + $hash_length * 4;		$reader->seekto($strings_addr);		$strings = $reader->read_all();		$reader->close();		for ( $i = 0; $i < $total; $i++ ) {			$o = unpack( "{$endian}length/{$endian}pos", $originals[$i] );			$t = unpack( "{$endian}length/{$endian}pos", $translations[$i] );			if ( !$o || !$t ) return false;			// adjust offset due to reading strings to separate space before			$o['pos'] -= $strings_addr;			$t['pos'] -= $strings_addr;			$original    = $reader->substr( $strings, $o['pos'], $o['length'] );			$translation = $reader->substr( $strings, $t['pos'], $t['length'] );			if ('' === $original) {				$this->set_headers($this->make_headers($translation));			} else {				$entry = &$this->make_entry($original, $translation);				$this->entries[$entry->key()] = &$entry;			}		}		return true;	}	/**	 * Build a Translation_Entry from original string and translation strings,	 * found in a MO file	 *	 * @static	 * @param string $original original string to translate from MO file. Might contain	 * 	0x04 as context separator or 0x00 as singular/plural separator	 * @param string $translation translation string from MO file. Might contain	 * 	0x00 as a plural translations separator	 */	function &make_entry($original, $translation) {		$entry = new Translation_Entry();		// look for context		$parts = explode(chr(4), $original);		if (isset($parts[1])) {			$original = $parts[1];			$entry->context = $parts[0];		}		// look for plural original		$parts = explode(chr(0), $original);		$entry->singular = $parts[0];		if (isset($parts[1])) {			$entry->is_plural = true;			$entry->plural = $parts[1];		}		// plural translations are also separated by \0		$entry->translations = explode(chr(0), $translation);		return $entry;	}	function select_plural_form($count) {		return $this->gettext_select_plural_form($count);	}	function get_plural_forms_count() {		return $this->_nplurals;	}}endif;
<?php/** * A simple set of functions to check our version 1.0 update service. * * @package WordPress * @since 2.3.0 *//** * Check WordPress version against the newest version. * * The WordPress version, PHP version, and Locale is sent. Checks against the * WordPress server at api.wordpress.org server. Will only check if WordPress * isn't installing. * * @package WordPress * @since 2.3.0 * @uses $wp_version Used to check against the newest WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_version_check() {	if ( defined('WP_INSTALLING') )		return;	global $wp_version, $wpdb, $wp_local_package;	$php_version = phpversion();	$current = get_site_transient( 'update_core' );	if ( ! is_object($current) ) {		$current = new stdClass;		$current->updates = array();		$current->version_checked = $wp_version;	}	$locale = apply_filters( 'core_version_check_locale', get_locale() );	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current->last_checked = time();	set_site_transient( 'update_core', $current );	if ( method_exists( $wpdb, 'db_version' ) )		$mysql_version = preg_replace('/[^0-9.].*/', '', $wpdb->db_version());	else		$mysql_version = 'N/A';	$num_blogs = 1;	$wp_install = home_url( '/' );	$multisite_enabled = 0;	$user_count = count_users( );	if ( is_multisite( ) ) {		$num_blogs = get_blog_count( );		$wp_install = network_site_url( );		$multisite_enabled = 1;	}	$local_package = isset( $wp_local_package )? $wp_local_package : '';	$url = "http://api.wordpress.org/core/version-check/1.5/?version=$wp_version&php=$php_version&locale=$locale&mysql=$mysql_version&local_package=$local_package&blogs=$num_blogs&users={$user_count['total_users']}&multisite_enabled=$multisite_enabled";	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3 ),		'user-agent' => 'WordPress/' . $wp_version . '; ' . home_url( '/' ),		'headers' => array(			'wp_install' => $wp_install,			'wp_blog' => home_url( '/' )		)	);	$response = wp_remote_get($url, $options);	if ( is_wp_error( $response ) )		return false;	if ( 200 != $response['response']['code'] )		return false;	$body = trim( $response['body'] );	$body = str_replace(array("\r\n", "\r"), "\n", $body);	$new_options = array();	foreach ( explode( "\n\n", $body ) as $entry ) {		$returns = explode("\n", $entry);		$new_option = new stdClass();		$new_option->response = esc_attr( $returns[0] );		if ( isset( $returns[1] ) )			$new_option->url = esc_url( $returns[1] );		if ( isset( $returns[2] ) )			$new_option->package = esc_url( $returns[2] );		if ( isset( $returns[3] ) )			$new_option->current = esc_attr( $returns[3] );		if ( isset( $returns[4] ) )			$new_option->locale = esc_attr( $returns[4] );		if ( isset( $returns[5] ) )			$new_option->php_version = esc_attr( $returns[5] );		if ( isset( $returns[6] ) )			$new_option->mysql_version = esc_attr( $returns[6] );		$new_options[] = $new_option;	}	$updates = new stdClass();	$updates->updates = $new_options;	$updates->last_checked = time();	$updates->version_checked = $wp_version;	set_site_transient( 'update_core',  $updates);}/** * Check plugin versions against the latest versions hosted on WordPress.org. * * The WordPress version, PHP version, and Locale is sent along with a list of * all plugins installed. Checks against the WordPress server at * api.wordpress.org. Will only check if WordPress isn't installing. * * @package WordPress * @since 2.3.0 * @uses $wp_version Used to notidy the WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_update_plugins() {	global $wp_version;	if ( defined('WP_INSTALLING') )		return false;	// If running blog-side, bail unless we've not checked in the last 12 hours	if ( !function_exists( 'get_plugins' ) )		require_once( ABSPATH . 'wp-admin/includes/plugin.php' );	$plugins = get_plugins();	$active  = get_option( 'active_plugins', array() );	$current = get_site_transient( 'update_plugins' );	if ( ! is_object($current) )		$current = new stdClass;	$new_option = new stdClass;	$new_option->last_checked = time();	$timeout = 'load-plugins.php' == current_filter() ? 3600 : 43200; //Check for updated every 60 minutes if hitting the themes page, Else, check every 12 hours	$time_not_changed = isset( $current->last_checked ) && $timeout > ( time() - $current->last_checked );	$plugin_changed = false;	foreach ( $plugins as $file => $p ) {		$new_option->checked[ $file ] = $p['Version'];		if ( !isset( $current->checked[ $file ] ) || strval($current->checked[ $file ]) !== strval($p['Version']) )			$plugin_changed = true;	}	if ( isset ( $current->response ) && is_array( $current->response ) ) {		foreach ( $current->response as $plugin_file => $update_details ) {			if ( ! isset($plugins[ $plugin_file ]) ) {				$plugin_changed = true;				break;			}		}	}	// Bail if we've checked in the last 12 hours and if nothing has changed	if ( $time_not_changed && !$plugin_changed )		return false;	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current->last_checked = time();	set_site_transient( 'update_plugins', $current );	$to_send = (object) compact('plugins', 'active');	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3),		'body' => array( 'plugins' => serialize( $to_send ) ),		'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )	);	$raw_response = wp_remote_post('http://api.wordpress.org/plugins/update-check/1.0/', $options);	if ( is_wp_error( $raw_response ) )		return false;	if ( 200 != $raw_response['response']['code'] )		return false;	$response = unserialize( $raw_response['body'] );	if ( false !== $response )		$new_option->response = $response;	else		$new_option->response = array();	set_site_transient( 'update_plugins', $new_option );}/** * Check theme versions against the latest versions hosted on WordPress.org. * * A list of all themes installed in sent to WP. Checks against the * WordPress server at api.wordpress.org. Will only check if WordPress isn't * installing. * * @package WordPress * @since 2.7.0 * @uses $wp_version Used to notidy the WordPress version. * * @return mixed Returns null if update is unsupported. Returns false if check is too soon. */function wp_update_themes( ) {	global $wp_version;	if ( defined( 'WP_INSTALLING' ) )		return false;	if ( !function_exists( 'get_themes' ) )		require_once( ABSPATH . 'wp-includes/theme.php' );	$installed_themes = get_themes( );	$current_theme = get_site_transient( 'update_themes' );	if ( ! is_object($current_theme) )		$current_theme = new stdClass;	$new_option = new stdClass;	$new_option->last_checked = time( );	$timeout = 'load-themes.php' == current_filter() ? 3600 : 43200; //Check for updated every 60 minutes if hitting the themes page, Else, check every 12 hours	$time_not_changed = isset( $current_theme->last_checked ) && $timeout > ( time( ) - $current_theme->last_checked );	$themes = array();	$checked = array();	$themes['current_theme'] = (array) $current_theme;	foreach ( (array) $installed_themes as $theme_title => $theme ) {		$themes[$theme['Stylesheet']] = array();		$checked[$theme['Stylesheet']] = $theme['Version'];		foreach ( (array) $theme as $key => $value )			$themes[$theme['Stylesheet']][$key] = $value;	}	$theme_changed = false;	foreach ( $checked as $slug => $v ) {		$new_option->checked[ $slug ] = $v;		if ( !isset( $current_theme->checked[ $slug ] ) || strval($current_theme->checked[ $slug ]) !== strval($v) )			$theme_changed = true;	}	if ( isset ( $current_theme->response ) && is_array( $current_theme->response ) ) {		foreach ( $current_theme->response as $slug => $update_details ) {			if ( ! isset($checked[ $slug ]) ) {				$theme_changed = true;				break;			}		}	}	if ( $time_not_changed && !$theme_changed )		return false;	// Update last_checked for current to prevent multiple blocking requests if request hangs	$current_theme->last_checked = time();	set_site_transient( 'update_themes', $current_theme );	$current_theme->template = get_option( 'template' );	$options = array(		'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3),		'body'			=> array( 'themes' => serialize( $themes ) ),		'user-agent'	=> 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )	);	$raw_response = wp_remote_post( 'http://api.wordpress.org/themes/update-check/1.0/', $options );	if ( is_wp_error( $raw_response ) )		return false;	if ( 200 != $raw_response['response']['code'] )		return false;	$response = unserialize( $raw_response['body'] );	if ( $response ) {		$new_option->checked = $checked;		$new_option->response = $response;	}	set_site_transient( 'update_themes', $new_option );}function _maybe_update_core() {	global $wp_version;	$current = get_site_transient( 'update_core' );	if ( isset( $current->last_checked ) &&		43200 > ( time() - $current->last_checked ) &&		isset( $current->version_checked ) &&		$current->version_checked == $wp_version )		return;	wp_version_check();}/** * Check the last time plugins were run before checking plugin versions. * * This might have been backported to WordPress 2.6.1 for performance reasons. * This is used for the wp-admin to check only so often instead of every page * load. * * @since 2.7.0 * @access private */function _maybe_update_plugins() {	$current = get_site_transient( 'update_plugins' );	if ( isset( $current->last_checked ) && 43200 > ( time() - $current->last_checked ) )		return;	wp_update_plugins();}/** * Check themes versions only after a duration of time. * * This is for performance reasons to make sure that on the theme version * checker is not run on every page load. * * @since 2.7.0 * @access private */function _maybe_update_themes( ) {	$current = get_site_transient( 'update_themes' );	if ( isset( $current->last_checked ) && 43200 > ( time( ) - $current->last_checked ) )		return;	wp_update_themes();}add_action( 'admin_init', '_maybe_update_core' );add_action( 'wp_version_check', 'wp_version_check' );add_action( 'load-plugins.php', 'wp_update_plugins' );add_action( 'load-update.php', 'wp_update_plugins' );add_action( 'load-update-core.php', 'wp_update_plugins' );add_action( 'admin_init', '_maybe_update_plugins' );add_action( 'wp_update_plugins', 'wp_update_plugins' );add_action( 'load-themes.php', 'wp_update_themes' );add_action( 'load-update.php', 'wp_update_themes' );add_action( 'load-update-core.php', 'wp_update_themes' );add_action( 'admin_init', '_maybe_update_themes' );add_action( 'wp_update_themes', 'wp_update_themes' );if ( !wp_next_scheduled('wp_version_check') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_version_check');if ( !wp_next_scheduled('wp_update_plugins') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_update_plugins');if ( !wp_next_scheduled('wp_update_themes') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'twicedaily', 'wp_update_themes');?>
<?php/** * The template for displaying Comments. * * The area of the page that contains both current comments * and the comment form.  The actual display of comments is * handled by a callback to twentyten_comment which is * located in the functions.php file. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>			<div id="comments"><?php if ( post_password_required() ) : ?>				<p class="nopassword"><?php _e( 'This post is password protected. Enter the password to view any comments.', 'twentyten' ); ?></p>			</div><!-- #comments --><?php		/* Stop the rest of comments.php from being processed,		 * but don't kill the script entirely -- we still have		 * to fully load the template.		 */		return;	endif;?><?php	// You can start editing here -- including this comment!?><?php if ( have_comments() ) : ?>			<h3 id="comments-title"><?php			printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number(), 'twentyten' ),			number_format_i18n( get_comments_number() ), '<em>' . get_the_title() . '</em>' );			?></h3><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div> <!-- .navigation --><?php endif; // check for comment navigation ?>			<ol class="commentlist">				<?php					/* Loop through and list the comments. Tell wp_list_comments()					 * to use twentyten_comment() to format the comments.					 * If you want to overload this in a child theme then you can					 * define twentyten_comment() and that will be used instead.					 * See twentyten_comment() in twentyten/functions.php for more.					 */					wp_list_comments( array( 'callback' => 'twentyten_comment' ) );				?>			</ol><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div><!-- .navigation --><?php endif; // check for comment navigation ?><?php else : // or, if we don't have comments:	/* If there are no comments and comments are closed,	 * let's leave a little note, shall we?	 */	if ( ! comments_open() ) :?>	<p class="nocomments"><?php _e( 'Comments are closed.', 'twentyten' ); ?></p><?php endif; // end ! comments_open() ?><?php endif; // end have_comments() ?><?php comment_form(); ?></div><!-- #comments -->
<?php/** * Press This Display and Handler. * * @package WordPress * @subpackage Press_This *//** WordPress Administration Bootstrap */require_once('./admin.php');header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! current_user_can('edit_posts') )	wp_die( __( 'Cheatin&#8217; uh?' ) );/** * Press It form handler. * * @package WordPress * @subpackage Press_This * @since 2.6.0 * * @return int Post ID */function press_it() {	// define some basic variables	$quick['post_status'] = 'draft'; // set as draft first	$quick['post_category'] = isset($_POST['post_category']) ? $_POST['post_category'] : null;	$quick['tax_input'] = isset($_POST['tax_input']) ? $_POST['tax_input'] : null;	$quick['post_title'] = ( trim($_POST['title']) != '' ) ? $_POST['title'] : '  ';	$quick['post_content'] = isset($_POST['post_content']) ? $_POST['post_content'] : '';	// insert the post with nothing in it, to get an ID	$post_ID = wp_insert_post($quick, true);	if ( is_wp_error($post_ID) )		wp_die($post_ID);	$content = isset($_POST['content']) ? $_POST['content'] : '';	$upload = false;	if ( !empty($_POST['photo_src']) && current_user_can('upload_files') ) {		foreach( (array) $_POST['photo_src'] as $key => $image) {			// see if files exist in content - we don't want to upload non-used selected files.			if ( strpos($_POST['content'], htmlspecialchars($image)) !== false ) {				$desc = isset($_POST['photo_description'][$key]) ? $_POST['photo_description'][$key] : '';				$upload = media_sideload_image($image, $post_ID, $desc);				// Replace the POSTED content <img> with correct uploaded ones. Regex contains fix for Magic Quotes				if ( !is_wp_error($upload) )					$content = preg_replace('/<img ([^>]*)src=\\\?(\"|\')'.preg_quote(htmlspecialchars($image), '/').'\\\?(\2)([^>\/]*)\/*>/is', $upload, $content);			}		}	}	// set the post_content and status	$quick['post_status'] = isset($_POST['publish']) ? 'publish' : 'draft';	$quick['post_content'] = $content;	// error handling for media_sideload	if ( is_wp_error($upload) ) {		wp_delete_post($post_ID);		wp_die($upload);	} else {		$quick['ID'] = $post_ID;		wp_update_post($quick);	}	return $post_ID;}// For submitted posts.if ( isset($_REQUEST['action']) && 'post' == $_REQUEST['action'] ) {	check_admin_referer('press-this');	$post_ID = press_it();	$posted =  $post_ID;} else {	$post_ID = 0;}// Set Variables$title = isset( $_GET['t'] ) ? trim( strip_tags( html_entity_decode( stripslashes( $_GET['t'] ) , ENT_QUOTES) ) ) : '';$selection = '';if ( !empty($_GET['s']) ) {	$selection = str_replace('&apos;', "'", stripslashes($_GET['s']));	$selection = trim( htmlspecialchars( html_entity_decode($selection, ENT_QUOTES) ) );}if ( ! empty($selection) ) {	$selection = preg_replace('/(\r?\n|\r)/', '</p><p>', $selection);	$selection = '<p>' . str_replace('<p></p>', '', $selection) . '</p>';}$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';$image = isset($_GET['i']) ? $_GET['i'] : '';if ( !empty($_REQUEST['ajax']) ) {	switch ($_REQUEST['ajax']) {		case 'video': ?>			<script type="text/javascript" charset="utf-8">			/* <![CDATA[ */				jQuery('.select').click(function() {					append_editor(jQuery('#embed-code').val());					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});				jQuery('.close').click(function() {					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});			/* ]]> */			</script>			<div class="postbox">				<h2><label for="embed-code"><?php _e('Embed Code') ?></label></h2>				<div class="inside">					<textarea name="embed-code" id="embed-code" rows="8" cols="40"><?php echo wp_htmledit_pre( $selection ); ?></textarea>					<p id="options"><a href="#" class="select button"><?php _e('Insert Video'); ?></a> <a href="#" class="close button"><?php _e('Cancel'); ?></a></p>				</div>			</div>			<?php break;		case 'photo_thickbox': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo_description"><?php _e('Description') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p class="centered">				<input type="hidden" name="this_photo" value="<?php echo esc_attr($image); ?>" id="this_photo" />				<a href="#" class="select">					<img src="<?php echo esc_url($image); ?>" alt="<?php echo esc_attr(__('Click to insert.')); ?>" title="<?php echo esc_attr(__('Click to insert.')); ?>" />				</a>			</p>			<p id="options"><a href="#" class="select button"><?php _e('Insert Image'); ?></a> <a href="#" class="cancel button"><?php _e('Cancel'); ?></a></p>			<?php break;		case 'photo_thickbox_url': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo"><?php _e('URL') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo" name="this_photo" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" />				</div>			</div>			<h3 class="tb"><label for="photo_description"><?php _e('Description') ?></label></h3>			<div id="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p id="options"><a href="#" class="select"><?php _e('Insert Image'); ?></a> | <a href="#" class="cancel"><?php _e('Cancel'); ?></a></p>			<?php break;	case 'photo_images':		/**		 * Retrieve all image URLs from given URI.		 *		 * @package WordPress		 * @subpackage Press_This		 * @since 2.6.0		 *		 * @param string $uri		 * @return string		 */		function get_images_from_uri($uri) {			$uri = preg_replace('/\/#.+?$/','', $uri);			if ( preg_match('/\.(jpg|jpe|jpeg|png|gif)$/', $uri) && !strpos($uri,'blogger.com') )				return "'" . esc_attr( html_entity_decode($uri) ) . "'";			$content = wp_remote_fopen($uri);			if ( false === $content )				return '';			$host = parse_url($uri);			$pattern = '/<img ([^>]*)src=(\"|\')([^<>\'\"]+)(\2)([^>]*)\/*>/i';			$content = str_replace(array("\n","\t","\r"), '', $content);			preg_match_all($pattern, $content, $matches);			if ( empty($matches[0]) )				return '';			$sources = array();			foreach ($matches[3] as $src) {				// if no http in url				if (strpos($src, 'http') === false)					// if it doesn't have a relative uri					if ( strpos($src, '../') === false && strpos($src, './') === false && strpos($src, '/') === 0)						$src = 'http://'.str_replace('//','/', $host['host'].'/'.$src);					else						$src = 'http://'.str_replace('//','/', $host['host'].'/'.dirname($host['path']).'/'.$src);				$sources[] = esc_attr($src);			}			return "'" . implode("','", $sources) . "'";		}		$url = wp_kses(urldecode($url), null);		echo 'new Array('.get_images_from_uri($url).')';		break;	case 'photo_js': ?>		// gather images and load some default JS		var last = null		var img, img_tag, aspect, w, h, skip, i, strtoappend = "";		if(photostorage == false) {		var my_src = eval(			jQuery.ajax({		   		type: "GET",		   		url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",				cache : false,				async : false,		   		data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",				dataType : "script"			}).responseText		);		if(my_src.length == 0) {			var my_src = eval(				jQuery.ajax({		   			type: "GET",		   			url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",					cache : false,					async : false,		   			data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",					dataType : "script"				}).responseText			);			if(my_src.length == 0) {				strtoappend = '<?php _e('Unable to retrieve images or no images on page.'); ?>';			}		}		}		for (i = 0; i < my_src.length; i++) {			img = new Image();			img.src = my_src[i];			img_attr = 'id="img' + i + '"';			skip = false;			maybeappend = '<a href="?ajax=photo_thickbox&amp;i=' + encodeURIComponent(img.src) + '&amp;u=<?php echo urlencode($url); ?>&amp;height=400&amp;width=500" title="" class="thickbox"><img src="' + img.src + '" ' + img_attr + '/></a>';			if (img.width && img.height) {				if (img.width >= 30 && img.height >= 30) {					aspect = img.width / img.height;					scale = (aspect > 1) ? (71 / img.width) : (71 / img.height);					w = img.width;					h = img.height;					if (scale < 1) {						w = parseInt(img.width * scale);						h = parseInt(img.height * scale);					}					img_attr += ' style="width: ' + w + 'px; height: ' + h + 'px;"';					strtoappend += maybeappend;				}			} else {				strtoappend += maybeappend;			}		}		function pick(img, desc) {			if (img) {				if('object' == typeof jQuery('.photolist input') && jQuery('.photolist input').length != 0) length = jQuery('.photolist input').length;				if(length == 0) length = 1;				jQuery('.photolist').append('<input name="photo_src[' + length + ']" value="' + img +'" type="hidden"/>');				jQuery('.photolist').append('<input name="photo_description[' + length + ']" value="' + desc +'" type="hidden"/>');				insert_editor( "\n\n" + encodeURI('<p style="text-align: center;"><a href="<?php echo $url; ?>"><img src="' + img +'" alt="' + desc + '" /></a></p>'));			}			return false;		}		function image_selector() {			tb_remove();			desc = jQuery('#this_photo_description').val();			src = jQuery('#this_photo').val();			pick(src, desc);			jQuery('#extra-fields').hide();			jQuery('#extra-fields').html('');			return false;		}			jQuery('#extra-fields').html('<div class="postbox"><h2>Add Photos <small id="photo_directions">(<?php _e("click images to select") ?>)</small></h2><ul class="actions"><li><a href="#" id="photo-add-url" class="thickbox button"><?php _e("Add from URL") ?> +</a></li></ul><div class="inside"><div class="titlewrap"><div id="img_container"></div></div><p id="options"><a href="#" class="close button"><?php _e('Cancel'); ?></a><a href="#" class="refresh button"><?php _e('Refresh'); ?></a></p></div>');			jQuery('#img_container').html(strtoappend);		<?php break;}die;}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<title><?php _e('Press This') ?></title><?php	add_thickbox();	wp_enqueue_style( 'press-this' );	wp_enqueue_style( 'press-this-ie');	wp_enqueue_style( 'colors' );	wp_enqueue_script( 'post' );	wp_enqueue_script( 'editor' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time() ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'press-this';var photostorage = false;//]]></script><?php	do_action('admin_print_styles');	do_action('admin_print_scripts');	do_action('admin_head');	if ( user_can_richedit() )		wp_tiny_mce( true, array( 'height' => '370' ) );?>	<script type="text/javascript">	function insert_plain_editor(text) {		edCanvas = document.getElementById('content');		edInsertContent(edCanvas, text);	}	function set_editor(text) {		if ( '' == text || '<p></p>' == text ) text = '<p><br /></p>';		if ( tinyMCE.activeEditor ) tinyMCE.execCommand('mceSetContent', false, text);	}	function insert_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceInsertContent', false, '<p>' + decodeURI(tinymce.DOM.decode(text)) + '</p>', {format : 'raw'});		} else {			insert_plain_editor(decodeURI(text));		}	}	function append_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceSetContent', false, tinyMCE.activeEditor.getContent({format : 'raw'}) + '<p>' + text + '</p>');			tinyMCE.execCommand('mceCleanup');		} else {			insert_plain_editor(text);		}	}	function show(tab_name) {		jQuery('#extra-fields').html('');		switch(tab_name) {			case 'video' :				jQuery('#extra-fields').load('<?php echo esc_url($_SERVER['PHP_SELF']); ?>', { ajax: 'video', s: '<?php echo esc_attr($selection); ?>'}, function() {					<?php					$content = '';					if ( preg_match("/youtube\.com\/watch/i", $url) ) {						list($domain, $video_id) = split("v=", $url);						$video_id = esc_attr($video_id);						$content = '<object width="425" height="350"><param name="movie" value="http://www.youtube.com/v/' . $video_id . '"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/' . $video_id . '" type="application/x-shockwave-flash" wmode="transparent" width="425" height="350"></embed></object>';					} elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) {						list($domain, $video_id) = split(".com/", $url);						$video_id = esc_attr($video_id);						$content = '<object width="400" height="225"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />	<embed src="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="225"></embed></object>';						if ( trim($selection) == '' )							$selection = '<p><a href="http://www.vimeo.com/' . $video_id . '?pg=embed&sec=' . $video_id . '">' . $title . '</a> on <a href="http://vimeo.com?pg=embed&sec=' . $video_id . '">Vimeo</a></p>';					} elseif ( strpos( $selection, '<object' ) !== false ) {						$content = $selection;					}					?>					jQuery('#embed-code').prepend('<?php echo htmlentities($content); ?>');				});				jQuery('#extra-fields').show();				return false;				break;			case 'photo' :				function setup_photo_actions() {					jQuery('.close').click(function() {						jQuery('#extra-fields').hide();						jQuery('#extra-fields').html('');					});					jQuery('.refresh').click(function() {						photostorage = false;						show('photo');					});					jQuery('#photo-add-url').attr('href', '?ajax=photo_thickbox_url&height=200&width=500');					tb_init('#extra-fields .thickbox');					jQuery('#waiting').hide();					jQuery('#extra-fields').show();				}				jQuery('#extra-fields').before('<div id="waiting"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /> <?php echo esc_js( __( 'Loading...' ) ); ?></div>');				if(photostorage == false) {					jQuery.ajax({						type: "GET",						cache : false,						url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",						data: "ajax=photo_js&u=<?php echo urlencode($url)?>",						dataType : "script",						success : function(data) {							eval(data);							photostorage = jQuery('#extra-fields').html();							setup_photo_actions();						}					});				} else {					jQuery('#extra-fields').html(photostorage);					setup_photo_actions();				}				return false;				break;		}	}	jQuery(document).ready(function($) {		//resize screen		window.resizeTo(720,540);		// set button actions    	jQuery('#photo_button').click(function() { show('photo'); return false; });		jQuery('#video_button').click(function() { show('video'); return false; });		// auto select		<?php if ( preg_match("/youtube\.com\/watch/i", $url) ) { ?>			show('video');		<?php } elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) { ?>			show('video');		<?php  } elseif ( preg_match("/flickr\.com/i", $url) ) { ?>			show('photo');		<?php } ?>		jQuery('#title').unbind();		jQuery('#publish, #save').click(function() { jQuery('#saving').css('display', 'inline'); });		$('#tagsdiv-post_tag, #categorydiv').children('h3, .handlediv').click(function(){			$(this).siblings('.inside').toggle();		});	});</script></head><body class="press-this wp-admin"><div id="wphead"></div><form action="press-this.php?action=post" method="post"><div id="poststuff" class="metabox-holder">	<div id="side-info-column">		<div class="sleeve">			<h1 id="viewsite"><a href="<?php echo get_option('home'); ?>/" target="_blank"><?php bloginfo('name'); ?> &rsaquo; <?php _e('Press This') ?></a></span></h1>			<?php wp_nonce_field('press-this') ?>			<input type="hidden" name="post_type" id="post_type" value="text"/>			<input type="hidden" name="autosave" id="autosave" />			<input type="hidden" id="original_post_status" name="original_post_status" value="draft" />			<input type="hidden" id="prev_status" name="prev_status" value="draft" />			<!-- This div holds the photo metadata -->			<div class="photolist"></div>			<div id="submitdiv" class="stuffbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><?php _e('Publish') ?></h3>				<div class="inside">					<p>						<input class="button" type="submit" name="draft" value="<?php esc_attr_e('Save Draft') ?>" id="save" />						<?php if ( current_user_can('publish_posts') ) { ?>							<input class="button-primary" type="submit" name="publish" value="<?php esc_attr_e('Publish') ?>" id="publish" />						<?php } else { ?>							<br /><br /><input class="button-primary" type="submit" name="review" value="<?php esc_attr_e('Submit for Review') ?>" id="review" />						<?php } ?>						<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" id="saving" style="display:none;" />					</p>				</div>			</div>			<?php $tax = get_taxonomy( 'category' ); ?>			<div id="categorydiv" class="postbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>"><br /></div>				<h3 class="hndle"><?php _e('Categories') ?></h3>				<div class="inside">				<div id="taxonomy-category" class="categorydiv">					<ul id="category-tabs" class="category-tabs">						<li class="tabs"><a href="#category-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>						<li class="hide-if-no-js"><a href="#category-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>					</ul>					<div id="category-pop" class="tabs-panel" style="display: none;">						<ul id="categorychecklist-pop" class="categorychecklist form-no-clear" >							<?php $popular_ids = wp_popular_terms_checklist( 'category' ); ?>						</ul>					</div>					<div id="category-all" class="tabs-panel">						<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">							<?php wp_terms_checklist($post_ID, array( 'taxonomy' => 'category', 'popular_cats' => $popular_ids ) ) ?>						</ul>					</div>					<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>					<p><em><?php _e('You cannot modify this Taxonomy.'); ?></em></p>					<?php endif; ?>					<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>						<div id="category-adder" class="wp-hidden-children">							<h4>								<a id="category-add-toggle" href="#category-add" class="hide-if-no-js" tabindex="3">									<?php printf( __( '+ %s' ), $tax->labels->add_new_item ); ?>								</a>							</h4>							<p id="category-add" class="category-add wp-hidden-child">								<label class="screen-reader-text" for="newcategory"><?php echo $tax->labels->add_new_item; ?></label>								<input type="text" name="newcategory" id="newcategory" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>								<label class="screen-reader-text" for="newcategory_parent">									<?php echo $tax->labels->parent_item_colon; ?>								</label>								<?php wp_dropdown_categories( array( 'taxonomy' => 'category', 'hide_empty' => 0, 'name' => 'newcategory_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>								<input type="button" id="category-add-submit" class="add:categorychecklist:category-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />								<?php wp_nonce_field( 'add-category', '_ajax_nonce', false ); ?>								<span id="category-ajax-response"></span>							</p>						</div>					<?php endif; ?>				</div>				</div>			</div>			<div id="tagsdiv-post_tag" class="stuffbox" >				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><span><?php _e('Post Tags'); ?></span></h3>				<div class="inside">					<div class="tagsdiv" id="post_tag">						<p class="jaxtag">							<label class="screen-reader-text" for="newtag"><?php _e('Post Tags'); ?></label>							<input type="hidden" name="tax_input[post_tag]" class="the-tags" id="tax-input[post_tag]" value="" />							<div class="ajaxtag">								<input type="text" name="newtag[post_tag]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />								<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" />							</div>						</p>						<div class="tagchecklist"></div>					</div>					<p class="tagcloud-link"><a href="#titlediv" class="tagcloud-link" id="link-post_tag"><?php _e('Choose from the most used tags in Post Tags'); ?></a></p>				</div>			</div>		</div>	</div>	<div class="posting">		<?php if ( isset($posted) && intval($posted) ) { $post_ID = intval($posted); ?>		<div id="message" class="updated"><p><strong><?php _e('Your post has been saved.'); ?></strong> <a onclick="window.opener.location.replace(this.href); window.close();" href="<?php echo get_permalink( $post_ID); ?>"><?php _e('View post'); ?></a> | <a href="<?php echo get_edit_post_link( $post_ID ); ?>" onclick="window.opener.location.replace(this.href); window.close();"><?php _e('Edit Post'); ?></a> | <a href="#" onclick="window.close();"><?php _e('Close Window'); ?></a></p></div>		<?php } ?>		<div id="titlediv">			<div class="titlewrap">				<input name="title" id="title" class="text" value="<?php echo esc_attr($title);?>"/>			</div>		</div>		<div id="extra-fields" style="display: none"></div>		<div class="postdivrich">			<ul id="actions" class="actions">				<li id="photo_button">					Add: <?php if ( current_user_can('upload_files') ) { ?><a title="<?php _e('Insert an Image'); ?>" href="#"><img alt="<?php _e('Insert an Image'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-image.gif?ver=20100531' ) ); ?>"/></a>					<?php } ?>				</li>				<li id="video_button">					<a title="<?php _e('Embed a Video'); ?>" href="#"><img alt="<?php _e('Embed a Video'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-video.gif?ver=20100531' ) ); ?>"/></a>				</li>				<?php if ( user_can_richedit() ) { ?>				<li id="switcher">					<?php wp_print_scripts( 'quicktags' ); ?>					<?php add_filter('the_editor_content', 'wp_richedit_pre'); ?>					<a id="edButtonHTML" onclick="switchEditors.go('content', 'html');"><?php _e('HTML'); ?></a>					<a id="edButtonPreview" class="active" onclick="switchEditors.go('content', 'tinymce');"><?php _e('Visual'); ?></a>					<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('content')" /></div>				</li>				<?php } ?>			</ul>			<div id="quicktags"></div>			<div class="editor-container">				<textarea name="content" id="content" style="width:100%;" class="theEditor" rows="15"><?php					if ( $selection )						echo wp_richedit_pre($selection);					if ( $url ) {						echo '<p>';						if ( $selection )							_e('via ');						printf( "<a href='%s'>%s</a>.</p>", esc_url( $url ), esc_html( $title ) );					}				?></textarea>			</div>		</div>	</div></div></form><?php do_action('admin_print_footer_scripts'); ?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * Edit attachments table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( have_posts() ) { ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('upload'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('upload', false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:post"><?phpadd_filter('the_title','esc_html');$alt = '';$posts_columns = get_column_headers('upload');$hidden = get_hidden_columns('upload');while ( have_posts() ) : the_post();if ( $is_trash && $post->post_status != 'trash' )	continue;elseif ( !$is_trash && $post->post_status == 'trash' )	continue;$alt = ( 'alternate' == $alt ) ? '' : 'alternate';global $current_user;$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );$att_title = _draft_or_post_title();?>	<tr id='post-<?php echo $id; ?>' class='<?php echo trim( $alt . ' author-' . $post_owner . ' status-' . $post->post_status ); ?>' valign="top"><?phpforeach ($posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can('edit_post', $post->ID) ) { ?><input type="checkbox" name="media[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'icon':		$attributes = 'class="column-icon media-icon"' . $style;		?>		<td <?php echo $attributes ?>><?php			if ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) {				if ( $is_trash ) echo $thumb;				else {?>				<a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>">					<?php echo $thumb; ?>				</a><?php			}			}		?></td>		<?php		// TODO		break;	case 'media':		?>		<td <?php echo $attributes ?>><strong><?php if ( $is_trash ) echo $att_title; else { ?><a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $att_title; ?></a><?php } ?></strong>		<p>		<?php		if ( preg_match( '/^.*?\.(\w+)$/', get_attached_file( $post->ID ), $matches ) )			echo esc_html( strtoupper( $matches[1] ) );		else			echo strtoupper( str_replace( 'image/', '', get_post_mime_type() ) );		?>		</p>		<?php		$actions = array();		if ( current_user_can('edit_post', $post->ID) && !$is_trash )			$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '">' . __('Edit') . '</a>';		if ( current_user_can('delete_post', $post->ID) ) {			if ( $is_trash )				$actions['untrash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=untrash&amp;post=$post->ID", 'untrash-attachment_' . $post->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS && MEDIA_TRASH )				$actions['trash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=trash&amp;post=$post->ID", 'trash-attachment_' . $post->ID) . "'>" . __('Trash') . "</a>";			if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) {				$delete_ays = (!$is_trash && !MEDIA_TRASH) ? " onclick='return showNotice.warn();'" : '';				$actions['delete'] = "<a class='submitdelete'$delete_ays href='" . wp_nonce_url("post.php?action=delete&amp;post=$post->ID", 'delete-attachment_' . $post->ID) . "'>" . __('Delete Permanently') . "</a>";			}		}		if ( !$is_trash ) {			$title =_draft_or_post_title($post->post_parent);			$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters( 'media_row_actions', $actions, $post );		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		?></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><?php the_author() ?></td>		<?php		break;	case 'tags':		?>		<td <?php echo $attributes ?>><?php		$tags = get_the_tags();		if ( !empty( $tags ) ) {			$out = array();			foreach ( $tags as $c )				$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";			echo join( ', ', $out );		} else {			_e('No Tags');		}		?></td>		<?php		break;	case 'desc':		?>		<td <?php echo $attributes ?>><?php echo has_excerpt() ? $post->post_excerpt : ''; ?></td>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $post->post_date;			$time = get_post_time( 'G', true, $post, false );			if ( ( abs($t_diff = time() - $time) ) < 86400 ) {				if ( $t_diff < 0 )					$h_time = sprintf( __('%s from now'), human_time_diff( $time ) );				else					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			} else {				$h_time = mysql2date(__('Y/m/d'), $m_time);			}		}		?>		<td <?php echo $attributes ?>><?php echo $h_time ?></td>		<?php		break;	case 'parent':		if ( $post->post_parent > 0 ) {			if ( get_post($post->post_parent) ) {				$title =_draft_or_post_title($post->post_parent);			}			?>			<td <?php echo $attributes ?>><strong><a href="<?php echo get_edit_post_link( $post->post_parent ); ?>"><?php echo $title ?></a></strong>, <?php echo get_the_time(__('Y/m/d')); ?></td>			<?php		} else {			?>			<td <?php echo $attributes ?>><?php _e('(Unattached)'); ?><br />			<a class="hide-if-no-js" onclick="findPosts.open('media[]','<?php echo $post->ID ?>');return false;" href="#the-list"><?php _e('Attach'); ?></a></td>			<?php		}		break;	case 'comments':		$attributes = 'class="comments column-comments num"' . $style;		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $post->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'actions':		?>		<td <?php echo $attributes ?>>		<a href="media.php?action=edit&amp;attachment_id=<?php the_ID(); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php _e('Edit'); ?></a> |		<a href="<?php the_permalink(); ?>"><?php _e('Get permalink'); ?></a>		</td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_media_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?>	</tr><?php endwhile; ?>	</tbody></table><?php } else { ?><p><?php _e('No media attachments found.') ?></p><?php} // end if ( have_posts() )?>
<?php/** * The template for displaying 404 pages (Not Found). * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>	<div id="container">		<div id="content" role="main">			<div id="post-0" class="post error404 not-found">				<h1 class="entry-title"><?php _e( 'Not Found', 'twentyten' ); ?></h1>				<div class="entry-content">					<p><?php _e( 'Apologies, but the page you requested could not be found. Perhaps searching will help.', 'twentyten' ); ?></p>					<?php get_search_form(); ?>				</div><!-- .entry-content -->			</div><!-- #post-0 -->		</div><!-- #content -->	</div><!-- #container -->	<script type="text/javascript">		// focus on search field after it has loaded		document.getElementById('s') && document.getElementById('s').focus();	</script><?php get_footer(); ?>
<?php/** * The custom header image script. * * @package WordPress * @subpackage Administration *//** * The custom header image class. * * @since 2.1.0 * @package WordPress * @subpackage Administration */class Custom_Image_Header {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since 2.1.0	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds default headers.	 *	 * @var array	 * @since 3.0.0	 * @access private	 */	var $default_headers = array();	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 2.1.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Image_Header	 */	function Custom_Image_Header($admin_header_callback, $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Header admin page.	 *	 * @since 2.1.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Header'), __('Header'), 'edit_theme_options', 'custom-header', array(&$this, 'admin_page'));		add_action("admin_print_scripts-$page", array(&$this, 'js_includes'));		add_action("admin_print_styles-$page", array(&$this, 'css_includes'));		add_action("admin_head-$page", array(&$this, 'help') );		add_action("admin_head-$page", array(&$this, 'take_action'), 50);		add_action("admin_head-$page", array(&$this, 'js'), 50);		add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Adds contextual help.	 *	 * @since 3.0.0	 */	function help() {		add_contextual_help( $this->page, '<p>' . __( 'You can set a custom image header for your site. Simply upload the image and crop it, and the new header will go live immediately.' ) . '</p>' .		'<p>' . __( 'If you want to discard your custom header and go back to the default included in your theme, click on the buttons to remove the custom image and restore the original header image.' ) . '</p>' .		'<p>' . __( 'Some themes come with additional header images bundled. If you see multiple images displayed, select the one you&#8217;d like and click the Save Changes button.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Header_SubPanel" target="_blank">Documentation on Custom Header</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );	}	/**	 * Get the current step.	 *	 * @since 2.6.0	 *	 * @return int Current step	 */	function step() {		if ( ! isset( $_GET['step'] ) )			return 1;		$step = (int) $_GET['step'];		if ( $step < 1 || 3 < $step )			$step = 1;		return $step;	}	/**	 * Set up the enqueue for the JavaScript files.	 *	 * @since 2.1.0	 */	function js_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_script('farbtastic');		elseif ( 2 == $step )			wp_enqueue_script('imgareaselect');	}	/**	 * Set up the enqueue for the CSS files	 *	 * @since 2.7	 */	function css_includes() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			wp_enqueue_style('farbtastic');		elseif ( 2 == $step )			wp_enqueue_style('imgareaselect');	}	/**	 * Check if header text is allowed	 *	 * @since 3.0.0	 */	function header_text() {		if ( defined( 'NO_HEADER_TEXT' ) && NO_HEADER_TEXT )			return false;		return true;	}	/**	 * Execute custom header modification.	 *	 * @since 2.6.0	 */	function take_action() {		if ( ! current_user_can('edit_theme_options') )			return;		if ( empty( $_POST ) )			return;		$this->updated = true;		if ( isset( $_POST['resetheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod( 'header_image' );			return;		}		if ( isset( $_POST['resettext'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			remove_theme_mod('header_textcolor');			return;		}		if ( isset( $_POST['removeheader'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			set_theme_mod( 'header_image', '' );			return;		}		if ( isset( $_POST['text-color'] ) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$_POST['text-color'] = str_replace( '#', '', $_POST['text-color'] );			if ( 'blank' == $_POST['text-color'] ) {				set_theme_mod( 'header_textcolor', 'blank' );			} else {				$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['text-color']);				if ( strlen($color) == 6 || strlen($color) == 3 )					set_theme_mod('header_textcolor', $color);			}		}		if ( isset($_POST['default-header']) ) {			check_admin_referer( 'custom-header-options', '_wpnonce-custom-header-options' );			$this->process_default_headers();			if ( isset($this->default_headers[$_POST['default-header']]) )				set_theme_mod('header_image', esc_url($this->default_headers[$_POST['default-header']]['url']));		}	}	/**	 * Process the default headers	 *	 * @since 3.0.0	 */	function process_default_headers() {		global $_wp_default_headers;		if ( !empty($this->headers) )			return;		if ( !isset($_wp_default_headers) )			return;		$this->default_headers = $_wp_default_headers;		foreach ( array_keys($this->default_headers) as $header ) {			$this->default_headers[$header]['url'] =  sprintf( $this->default_headers[$header]['url'], get_template_directory_uri(), get_stylesheet_directory_uri() );			$this->default_headers[$header]['thumbnail_url'] =  sprintf( $this->default_headers[$header]['thumbnail_url'], get_template_directory_uri(), get_stylesheet_directory_uri() );		}	}	/**	 * Display UI for selecting one of several default headers.	 *	 * @since 3.0.0	 */	function show_default_header_selector() {		echo '<div id="available-headers">';		foreach ( $this->default_headers as $header_key => $header ) {			$header_thumbnail = $header['thumbnail_url'];			$header_url = $header['url'];			$header_desc = $header['description'];			echo '<div class="default-header">';			echo '<label><input name="default-header" type="radio" value="' . esc_attr($header_key) . '" ' . checked($header_url, get_theme_mod( 'header_image' ), false) . ' />';			echo '<img src="' . $header_thumbnail . '" alt="' . esc_attr($header_desc) .'" title="' . esc_attr($header_desc) .'" /></label>';			echo '</div>';		}		echo '<div class="clear"></div></div>';	}	/**	 * Execute Javascript depending on step.	 *	 * @since 2.1.0	 */	function js() {		$step = $this->step();		if ( ( 1 == $step || 3 == $step ) && $this->header_text() )			$this->js_1();		elseif ( 2 == $step )			$this->js_2();	}	/**	 * Display Javascript based on Step 1 and 3.	 *	 * @since 2.6.0	 */	function js_1() { ?><script type="text/javascript">/* <![CDATA[ */	var text_objects = ['#name', '#desc', '#text-color-row'];	var farbtastic;	var default_color = '#<?php echo HEADER_TEXTCOLOR; ?>';	var old_color = null;	function pickColor(color) {		jQuery('#name').css('color', color);		jQuery('#desc').css('color', color);		jQuery('#text-color').val(color);		farbtastic.setColor(color);	}	function toggle_text(s) {		if (jQuery(s).attr('id') == 'showtext' && jQuery('#text-color').val() != 'blank')			return;		if (jQuery(s).attr('id') == 'hidetext' && jQuery('#text-color').val() == 'blank')			return;		if (jQuery('#text-color').val() == 'blank') {			//Show text			if (old_color == '#blank')				old_color = default_color;			jQuery( text_objects.toString() ).show();			jQuery('#text-color').val(old_color);			jQuery('#name').css('color', old_color);			jQuery('#desc').css('color', old_color);			pickColor(old_color);		} else {			//Hide text			jQuery( text_objects.toString() ).hide();			old_color = jQuery('#text-color').val();			jQuery('#text-color').val('blank');		}	}	jQuery(document).ready(function() {		jQuery('#pickcolor').click(function() {			jQuery('#color-picker').show();		});		jQuery('input[name="hidetext"]').click(function() {			toggle_text(this);		});		jQuery('#defaultcolor').click(function() {			pickColor(default_color);			jQuery('#text-color').val(default_color)		});		jQuery('#text-color').keyup(function() {			var _hex = jQuery('#text-color').val();			var hex = _hex;			if ( hex[0] != '#' )				hex = '#' + hex;			hex = hex.replace(/[^#a-fA-F0-9]+/, '');			if ( hex != _hex )				jQuery('#text-color').val(hex);			if ( hex.length == 4 || hex.length == 7 )				pickColor( hex );		});		jQuery(document).mousedown(function(){			jQuery('#color-picker').each( function() {				var display = jQuery(this).css('display');				if (display == 'block')					jQuery(this).fadeOut(2);			});		});		farbtastic = jQuery.farbtastic('#color-picker', function(color) { pickColor(color); });		<?php if ( $color = get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) ) { ?>		pickColor('#<?php echo $color; ?>');		<?php } ?>		<?php if ( 'blank' == get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() ) { ?>		toggle_text();		<?php } ?>		});</script><?php	}	/**	 * Display Javascript based on Step 2.	 *	 * @since 2.6.0	 */	function js_2() { ?><script type="text/javascript">/* <![CDATA[ */	function onEndCrop( coords ) {		jQuery( '#x1' ).val(coords.x);		jQuery( '#y1' ).val(coords.y);		jQuery( '#width' ).val(coords.w);		jQuery( '#height' ).val(coords.h);	}	jQuery(document).ready(function() {		var xinit = <?php echo HEADER_IMAGE_WIDTH; ?>;		var yinit = <?php echo HEADER_IMAGE_HEIGHT; ?>;		var ratio = xinit / yinit;		var ximg = jQuery('img#upload').width();		var yimg = jQuery('img#upload').height();		if ( yimg < yinit || ximg < xinit ) {			if ( ximg / yimg > ratio ) {				yinit = yimg;				xinit = yinit * ratio;			} else {				xinit = ximg;				yinit = xinit / ratio;			}		}		jQuery('img#upload').imgAreaSelect({			handles: true,			keys: true,			aspectRatio: xinit + ':' + yinit,			show: true,			x1: 0,			y1: 0,			x2: xinit,			y2: yinit,			maxHeight: <?php echo HEADER_IMAGE_HEIGHT; ?>,			maxWidth: <?php echo HEADER_IMAGE_WIDTH; ?>,			onInit: function () {				jQuery('#width').val(xinit);				jQuery('#height').val(yinit);			},			onSelectChange: function(img, c) {				jQuery('#x1').val(c.x1);				jQuery('#y1').val(c.y1);				jQuery('#width').val(c.width);				jQuery('#height').val(c.height);			}		});	});/* ]]> */</script><?php	}	/**	 * Display first step of custom header image page.	 *	 * @since 2.1.0	 */	function step_1() {		$this->process_default_headers();?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Custom Header'); ?></h2><?php if ( ! empty( $this->updated ) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Header updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php } ?><h3><?php _e( 'Header Image' ) ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e( 'Preview' ); ?></th><td >	<?php if ( $this->admin_image_div_callback ) {	  call_user_func( $this->admin_image_div_callback );	} else {	?>	<div id="headimg" style="max-width:<?php echo HEADER_IMAGE_WIDTH; ?>px;height:<?php echo HEADER_IMAGE_HEIGHT; ?>px;background-image:url(<?php esc_url ( header_image() ) ?>);">		<?php		if ( 'blank' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || '' == get_theme_mod('header_textcolor', HEADER_TEXTCOLOR) || ! $this->header_text() )			$style = ' style="display:none;"';		else			$style = ' style="color:#' . get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) . ';"';		?>		<h1><a id="name"<?php echo $style; ?> onclick="return false;" href="<?php bloginfo('url'); ?>"><?php bloginfo( 'name' ); ?></a></h1>		<div id="desc"<?php echo $style; ?>><?php bloginfo( 'description' ); ?></div>	</div>	<?php } ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'Upload Image' ); ?></th><td>	<p><?php _e( 'You can upload a custom header image to be shown at the top of your site instead of the default one. On the next screen you will be able to crop the image.' ); ?><br />	<?php printf( __( 'Images of exactly <strong>%1$d &times; %2$d pixels</strong> will be used as-is.' ), HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT ); ?></p>	<form enctype="multipart/form-data" id="upload-form" method="post" action="<?php echo esc_attr( add_query_arg( 'step', 2 ) ) ?>">	<p>		<label for="upload"><?php _e( 'Choose an image from your computer:' ); ?></label><br />		<input type="file" id="upload" name="import" />		<input type="hidden" name="action" value="save" />		<?php wp_nonce_field( 'custom-header-upload', '_wpnonce-custom-header-upload' ) ?>		<input type="submit" class="button" value="<?php esc_attr_e( 'Upload' ); ?>" />	</p>	</form></td></tr></tbody></table><form method="post" action="<?php echo esc_attr( add_query_arg( 'step', 1 ) ) ?>"><table class="form-table"><tbody>	<?php if ( ! empty( $this->default_headers ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Default Images' ); ?></th><td>	<p><?php _e( 'If you don&lsquo;t want to upload your own image, you can use one of these cool headers.' ) ?></p>	<?php		$this->show_default_header_selector();	?></td></tr>	<?php endif;	if ( get_header_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Remove Image' ); ?></th><td>	<p><?php _e( 'This will remove the header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="removeheader" value="<?php esc_attr_e( 'Remove Header Image' ); ?>" /></td></tr>	<?php endif;	if ( defined( 'HEADER_IMAGE' ) ) : ?><tr valign="top"><th scope="row"><?php _e( 'Reset Image' ); ?></th><td>	<p><?php _e( 'This will restore the original header image. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resetheader" value="<?php esc_attr_e( 'Restore Original Header Image' ); ?>" /></td></tr>	<?php endif; ?></tbody></table>	<?php if ( $this->header_text() ) : ?><h3><?php _e( 'Header Text' ) ?></h3><table class="form-table"><tbody><tr valign="top" class="hide-if-no-js"><th scope="row"><?php _e( 'Display Text' ); ?></th><td>	<p>	<?php $hidetext = get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ); ?>	<label><input type="radio" value="1" name="hidetext" id="hidetext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) )  ? true : false ); ?> /> <?php _e( 'No' ); ?></label>	<label><input type="radio" value="0" name="hidetext" id="showtext"<?php checked( ( 'blank' == $hidetext || empty( $hidetext ) ) ? false : true ); ?> /> <?php _e( 'Yes' ); ?></label>	</p></td></tr><tr valign="top" id="text-color-row"><th scope="row"><?php _e( 'Text Color' ); ?></th><td>	<p>		<input type="text" name="text-color" id="text-color" value="#<?php echo esc_attr( get_theme_mod( 'header_textcolor', HEADER_TEXTCOLOR ) ); ?>" />		<span class="description hide-if-js"><?php _e( 'If you want to hide header text, add <strong>#blank</strong> as text color.' );?></span>		<input type="button" class="button hide-if-no-js" value="<?php esc_attr_e( 'Select a Color' ); ?>" id="pickcolor" />	</p>	<div id="color-picker" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></td></tr>	<?php if ( defined('HEADER_TEXTCOLOR') && get_theme_mod('header_textcolor') ) { ?><tr valign="top"><th scope="row"><?php _e('Reset Text Color'); ?></th><td>	<p><?php _e( 'This will restore the original header text. You will not be able to restore any customizations.' ) ?></p>	<input type="submit" class="button" name="resettext" value="<?php esc_attr_e( 'Restore Original Header Text' ); ?>" /></td></tr>	<?php } ?></tbody></table>	<?php endif;wp_nonce_field( 'custom-header-options', '_wpnonce-custom-header-options' ); ?><p class="submit"><input type="submit" class="button-primary" name="save-header-options" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php }	/**	 * Display second step of custom header image page.	 *	 * @since 2.1.0	 */	function step_2() {		check_admin_referer('custom-header-upload', '_wpnonce-custom-header-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'],  __( 'Image Upload Error' ) );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(		'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url);		// Save the data		$id = wp_insert_attachment($object, $file);		list($width, $height, $type, $attr) = getimagesize( $file );		if ( $width == HEADER_IMAGE_WIDTH && $height == HEADER_IMAGE_HEIGHT ) {			// Add the meta-data			wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );			set_theme_mod('header_image', esc_url($url));			do_action('wp_create_file_in_uploads', $file, $id); // For replication			return $this->finished();		} elseif ( $width > HEADER_IMAGE_WIDTH ) {			$oitar = $width / HEADER_IMAGE_WIDTH;			$image = wp_crop_image($file, 0, 0, $width, $height, HEADER_IMAGE_WIDTH, $height / $oitar, false, str_replace(basename($file), 'midsize-'.basename($file), $file));			if ( is_wp_error( $image ) )				wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );			$image = apply_filters('wp_create_file_in_uploads', $image, $id); // For replication			$url = str_replace(basename($url), basename($image), $url);			$width = $width / $oitar;			$height = $height / $oitar;		} else {			$oitar = 1;		}		?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Crop Header Image' ); ?></h2><form method="post" action="<?php echo esc_attr(add_query_arg('step', 3)); ?>">	<p class="hide-if-no-js"><?php _e('Choose the part of the image you want to use as your header.'); ?></p>	<p class="hide-if-js"><strong><?php _e( 'You need Javascript to choose a part of the image.'); ?></strong></p>	<div id="crop_image" style="position: relative">		<img src="<?php echo esc_url( $url ); ?>" id="upload" width="<?php echo $width; ?>" height="<?php echo $height; ?>" />	</div>	<p class="submit">	<input type="hidden" name="x1" id="x1" value="0"/>	<input type="hidden" name="y1" id="y1" value="0"/>	<input type="hidden" name="width" id="width" value="<?php echo esc_attr( $width ); ?>"/>	<input type="hidden" name="height" id="height" value="<?php echo esc_attr( $height ); ?>"/>	<input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr( $id ); ?>" />	<input type="hidden" name="oitar" id="oitar" value="<?php echo esc_attr( $oitar ); ?>" />	<?php wp_nonce_field( 'custom-header-crop-image' ) ?>	<input type="submit" class="button-primary" value="<?php esc_attr_e( 'Crop and Publish' ); ?>" />	</p></form></div>		<?php	}	/**	 * Display third step of custom header image page.	 *	 * @since 2.1.0	 */	function step_3() {		check_admin_referer('custom-header-crop-image');		if ( $_POST['oitar'] > 1 ) {			$_POST['x1'] = $_POST['x1'] * $_POST['oitar'];			$_POST['y1'] = $_POST['y1'] * $_POST['oitar'];			$_POST['width'] = $_POST['width'] * $_POST['oitar'];			$_POST['height'] = $_POST['height'] * $_POST['oitar'];		}		$original = get_attached_file( $_POST['attachment_id'] );		$cropped = wp_crop_image($_POST['attachment_id'], $_POST['x1'], $_POST['y1'], $_POST['width'], $_POST['height'], HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT);		if ( is_wp_error( $cropped ) )			wp_die( __( 'Image could not be processed.  Please go back and try again.' ), __( 'Image Processing Error' ) );		$cropped = apply_filters('wp_create_file_in_uploads', $cropped, $_POST['attachment_id']); // For replication		$parent = get_post($_POST['attachment_id']);		$parent_url = $parent->guid;		$url = str_replace(basename($parent_url), basename($cropped), $parent_url);		// Construct the object array		$object = array(			'ID' => $_POST['attachment_id'],			'post_title' => basename($cropped),			'post_content' => $url,			'post_mime_type' => 'image/jpeg',			'guid' => $url		);		// Update the attachment		wp_insert_attachment($object, $cropped);		wp_update_attachment_metadata( $_POST['attachment_id'], wp_generate_attachment_metadata( $_POST['attachment_id'], $cropped ) );		set_theme_mod('header_image', $url);		// cleanup		$medium = str_replace(basename($original), 'midsize-'.basename($original), $original);		@unlink( apply_filters( 'wp_delete_file', $medium ) );		@unlink( apply_filters( 'wp_delete_file', $original ) );		return $this->finished();	}	/**	 * Display last step of custom header image page.	 *	 * @since 2.1.0	 */	function finished() {		$this->updated = true;		$this->step_1();	}	/**	 * Display the page based on the current step.	 *	 * @since 2.1.0	 */	function admin_page() {		if ( ! current_user_can('edit_theme_options') )			wp_die(__('You do not have permission to customize headers.'));		$step = $this->step();		if ( 1 == $step )			$this->step_1();		elseif ( 2 == $step )			$this->step_2();		elseif ( 3 == $step )			$this->step_3();	}}?>
<?php/** * General settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('General Settings');$parent_file = 'options-general.php';/* translators: date and time format for exact current time, mainly about timezones, see http://php.net/date */$timezone_format = _x('Y-m-d G:i:s', 'timezone date format');/** * Display JavaScript on the page. * * @package WordPress * @subpackage General_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[	jQuery(document).ready(function($){		$("input[name='date_format']").click(function(){			if ( "date_format_custom_radio" != $(this).attr("id") )				$("input[name='date_format_custom']").val( $(this).val() );		});		$("input[name='date_format_custom']").focus(function(){			$("#date_format_custom_radio").attr("checked", "checked");		});		$("input[name='time_format']").click(function(){			if ( "time_format_custom_radio" != $(this).attr("id") )				$("input[name='time_format_custom']").val( $(this).val() );		});		$("input[name='time_format_custom']").focus(function(){			$("#time_format_custom_radio").attr("checked", "checked");		});	});//]]></script><?php}add_filter('admin_head', 'add_js');add_contextual_help($current_screen,	'<p>' . __('The fields on this screen determine some of the basics of your site setup.') . '</p>' .	'<p>' . __('Most themes display the site title at the top of every page, in the title bar of the browser, and as the identifying name for syndicated feeds. The tagline is also displayed by many themes.') . '</p>' .	'<p>' . __('The WordPress URL and the Site URL can be the same (example.com) or different; for example, having the WordPress core files (example.com/wordpress) in a subdirectory instead of the root directory.') . '</p>' .	'<p>' . __('If you want site visitors to be able to register themselves, as opposed to being registered by the site administrator, check the membership box. A default user role can be set for all new users, whether self-registered or registered by the site administrator.') . '</p>' .	'<p>' . __('UTC means Coordinated Universal Time.') . '</p>' .	'<p>' . __('Remember to click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_General_SubPanel" target="_blank">Documentation on General Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('general'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="blogname"><?php _e('Site Title') ?></label></th><td><input name="blogname" type="text" id="blogname" value="<?php form_option('blogname'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="blogdescription"><?php _e('Tagline') ?></label></th><td><input name="blogdescription" type="text" id="blogdescription"  value="<?php form_option('blogdescription'); ?>" class="regular-text" /><span class="description"><?php _e('In a few words, explain what this site is about.') ?></span></td></tr><?php if ( !is_multisite() ) { ?><tr valign="top"><th scope="row"><label for="siteurl"><?php _e('WordPress address (URL)') ?></label></th><td><input name="siteurl" type="text" id="siteurl" value="<?php form_option('siteurl'); ?>"<?php disabled( defined( 'WP_SITEURL' ) ); ?> class="regular-text code<?php if ( defined( 'WP_SITEURL' ) ) echo ' disabled' ?>" /></td></tr><tr valign="top"><th scope="row"><label for="home"><?php _e('Site address (URL)') ?></label></th><td><input name="home" type="text" id="home" value="<?php form_option('home'); ?>"<?php disabled( defined( 'WP_HOME' ) ); ?> class="regular-text code<?php if ( defined( 'WP_HOME' ) ) echo ' disabled' ?>" /><span class="description"><?php _e('Enter the address here if you want your site homepage <a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">to be different from the directory</a> you installed WordPress.'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="admin_email" type="text" id="admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text" /><span class="description"><?php _e('This address is used for admin purposes, like new user notification.') ?></span></td></tr><tr valign="top"><th scope="row"><?php _e('Membership') ?></th><td> <fieldset><legend class="screen-reader-text"><span><?php _e('Membership') ?></span></legend><label for="users_can_register"><input name="users_can_register" type="checkbox" id="users_can_register" value="1" <?php checked('1', get_option('users_can_register')); ?> /><?php _e('Anyone can register') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_role"><?php _e('New User Default Role') ?></label></th><td><select name="default_role" id="default_role"><?php wp_dropdown_roles( get_option('default_role') ); ?></select></td></tr><?php } else { ?><tr valign="top"><th scope="row"><label for="new_admin_email"><?php _e('E-mail address') ?> </label></th><td><input name="new_admin_email" type="text" id="new_admin_email" value="<?php form_option('admin_email'); ?>" class="regular-text code" /><span class="setting-description"><?php _e('This address is used for admin purposes. If you change this we will send you an e-mail at your new address to confirm it. <strong>The new address will not become active until confirmed.</strong>') ?></span><?php$new_admin_email = get_option( 'new_admin_email' );if ( $new_admin_email && $new_admin_email != get_option('admin_email') ) : ?><div class="updated inline"><p><?php printf( __('There is a pending change of the admin e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_admin_email, esc_url( admin_url( 'options.php?dismiss=new_admin_email' ) ) ); ?></p></div><?php endif; ?></td></tr><?php } ?><tr><?phpif ( !wp_timezone_supported() ) : // no magic timezone support here?><th scope="row"><label for="gmt_offset"><?php _e('Timezone') ?> </label></th><td><select name="gmt_offset" id="gmt_offset"><?php$current_offset = get_option('gmt_offset');$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,	0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);foreach ( $offset_range as $offset ) {	if ( 0 < $offset )		$offset_name = '+' . $offset;	elseif ( 0 == $offset )		$offset_name = '';	else		$offset_name = (string) $offset;	$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);	$selected = '';	if ( $current_offset == $offset ) {		$selected = " selected='selected'";		$current_offset_name = $offset_name;	}	echo "<option value=\"" . esc_attr($offset) . "\"$selected>" . sprintf(__('UTC %s'), $offset_name) . '</option>';}?></select><?php _e('hours'); ?><span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n( $time_format, false, 'gmt')); ?></span><?php if ($current_offset) : ?>	<span id="local-time"><?php printf(__('UTC %1$s is <code>%2$s</code>'), $current_offset_name, date_i18n($time_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Unfortunately, you have to manually update this for daylight saving time. The PHP Date/Time library is not supported by your web host.'); ?></span></td><?phpelse: // looks like we can do nice timezone selection!$current_offset = get_option('gmt_offset');$tzstring = get_option('timezone_string');$check_zone_info = true;// Remove old Etc mappings.  Fallback to gmt_offset.if ( false !== strpos($tzstring,'Etc/GMT') )	$tzstring = '';if ( empty($tzstring) ) { // Create a UTC+- zone if no timezone string exists	$check_zone_info = false;	if ( 0 == $current_offset )		$tzstring = 'UTC+0';	elseif ($current_offset < 0)		$tzstring = 'UTC' . $current_offset;	else		$tzstring = 'UTC+' . $current_offset;}?><th scope="row"><label for="timezone_string"><?php _e('Timezone') ?></label></th><td><select id="timezone_string" name="timezone_string"><?php echo wp_timezone_choice($tzstring); ?></select>    <span id="utc-time"><?php printf(__('<abbr title="Coordinated Universal Time">UTC</abbr> time is <code>%s</code>'), date_i18n($timezone_format, false, 'gmt')); ?></span><?php if ( get_option('timezone_string') || !empty($current_offset) ) : ?>	<span id="local-time"><?php printf(__('Local time is <code>%1$s</code>'), date_i18n($timezone_format)); ?></span><?php endif; ?><br /><span class="description"><?php _e('Choose a city in the same timezone as you.'); ?></span><?php if ($check_zone_info && $tzstring) : ?><br /><span>	<?php	// Set TZ so localtime works.	date_default_timezone_set($tzstring);	$now = localtime(time(), true);	if ( $now['tm_isdst'] )		_e('This timezone is currently in daylight saving time.');	else		_e('This timezone is currently in standard time.');	?>	<br />	<?php	if ( function_exists('timezone_transitions_get') ) {		$found = false;		$date_time_zone_selected = new DateTimeZone($tzstring);		$tz_offset = timezone_offset_get($date_time_zone_selected, date_create());		$right_now = time();		foreach ( timezone_transitions_get($date_time_zone_selected) as $tr) {			if ( $tr['ts'] > $right_now ) {			    $found = true;				break;			}		}		if ( $found ) {			echo ' ';			$message = $tr['isdst'] ?				__('Daylight saving time begins on: <code>%s</code>.') :				__('Standard time begins  on: <code>%s</code>.');			// Add the difference between the current offset and the new offset to ts to get the correct transition time from date_i18n().			printf( $message, date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $tr['ts'] + ($tz_offset - $tr['offset']) ) );		} else {			_e('This timezone does not observe daylight saving time.');		}	}	// Set back to UTC.	date_default_timezone_set('UTC');	?>	</span><?php endif; ?></td><?php endif; ?></tr><tr><th scope="row"><?php _e('Date Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Date Format') ?></span></legend><?php	$date_formats = apply_filters( 'date_formats', array(		__('F j, Y'),		'Y/m/d',		'm/d/Y',		'd/m/Y',	) );	$custom = true;	foreach ( $date_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='date_format' value='" . esc_attr($format) . "'";		if ( get_option('date_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="date_format" id="date_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="date_format_custom" value="' . esc_attr( get_option('date_format') ) . '" class="small-text" /> ' . date_i18n( get_option('date_format') ) . "\n";	echo "\t<p>" . __('<a href="http://codex.wordpress.org/Formatting_Date_and_Time">Documentation on date formatting</a>. Click &#8220;Save Changes&#8221; to update sample output.') . "</p>\n";?>	</fieldset></td></tr><tr><th scope="row"><?php _e('Time Format') ?></th><td>	<fieldset><legend class="screen-reader-text"><span><?php _e('Time Format') ?></span></legend><?php	$time_formats = apply_filters( 'time_formats', array(		__('g:i a'),		'g:i A',		'H:i',	) );	$custom = true;	foreach ( $time_formats as $format ) {		echo "\t<label title='" . esc_attr($format) . "'><input type='radio' name='time_format' value='" . esc_attr($format) . "'";		if ( get_option('time_format') === $format ) { // checked() uses "==" rather than "==="			echo " checked='checked'";			$custom = false;		}		echo ' /> ' . date_i18n( $format ) . "</label><br />\n";	}	echo '	<label><input type="radio" name="time_format" id="time_format_custom_radio" value="\c\u\s\t\o\m"';	checked( $custom );	echo '/> ' . __('Custom:') . ' </label><input type="text" name="time_format_custom" value="' . esc_attr( get_option('time_format') ) . '" class="small-text" /> ' . date_i18n( get_option('time_format') ) . "\n";?>	</fieldset></td></tr><tr><th scope="row"><label for="start_of_week"><?php _e('Week Starts On') ?></label></th><td><select name="start_of_week" id="start_of_week"><?phpfor ($day_index = 0; $day_index <= 6; $day_index++) :	$selected = (get_option('start_of_week') == $day_index) ? 'selected="selected"' : '';	echo "\n\t<option value='" . esc_attr($day_index) . "' $selected>" . $wp_locale->get_weekday($day_index) . '</option>';endfor;?></select></td></tr><?php do_settings_fields('general', 'default'); ?><?php	$languages = get_available_languages();	if ( is_multisite() && !empty( $languages ) ):?>	<tr valign="top">		<th width="33%" scope="row"><?php _e('Site language:') ?></th>		<td>			<select name="WPLANG" id="WPLANG">				<?php mu_dropdown_languages( $languages, get_option('WPLANG') ); ?>			</select>		</td>	</tr><?php	endif;?></table><?php do_settings_sections('general'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * Deprecated multisite admin functions from past WordPress versions and WordPress MU. * You shouldn't use these functions and look for the alternatives instead. The functions * will be removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//** * @deprecated 3.0.0 */function wpmu_menu() {	_deprecated_function(__FUNCTION__, '3.0' );	// deprecated. See #11763}/**  * Determines if the available space defined by the admin has been exceeded by the user.  *  * @deprecated 3.0.0  * @see is_upload_space_available() */function wpmu_checkAvailableSpace() {	_deprecated_function(__FUNCTION__, '3.0', 'is_upload_space_available()' );	if ( !is_upload_space_available() )		wp_die( __('Sorry, you must delete files before you can upload any more.') );}/** * @deprecated 3.0.0 */function mu_options( $options ) {	_deprecated_function(__FUNCTION__, '3.0' );	return $options;}/** * @deprecated 3.0.0 * @see activate_plugin() */function activate_sitewide_plugin() {	_deprecated_function(__FUNCTION__, '3.0', 'activate_plugin()' );	return false;}/** * @deprecated 3.0.0 * @see deactivate_sitewide_plugin() */function deactivate_sitewide_plugin( $plugin = false ) {	_deprecated_function(__FUNCTION__, '3.0', 'deactivate_plugin()' );	return;}/** * @deprecated 3.0.0 * @see is_network_only_plugin() */function is_wpmu_sitewide_plugin( $file ) {	_deprecated_function(__FUNCTION__, '3.0', 'is_network_only_plugin()' );	return is_network_only_plugin( $file );}?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the Unix `diff` program via shell_exec to compute the * differences between the two input arrays. * * Copyright 2007-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Milian Wolff <mail@milianw.de> * @package Text_Diff * @since   0.3.0 */class Text_Diff_Engine_shell {    /**     * Path to the diff executable     *     * @var string     */    var $_diffCommand = 'diff';    /**     * Returns the array of differences.     *     * @param array $from_lines lines of text from old file     * @param array $to_lines   lines of text from new file     *     * @return array all changes made (array with Text_Diff_Op_* objects)     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        $temp_dir = Text_Diff::_getTempDir();        // Execute gnu diff or similar to get a standard diff file.        $from_file = tempnam($temp_dir, 'Text_Diff');        $to_file = tempnam($temp_dir, 'Text_Diff');        $fp = fopen($from_file, 'w');        fwrite($fp, implode("\n", $from_lines));        fclose($fp);        $fp = fopen($to_file, 'w');        fwrite($fp, implode("\n", $to_lines));        fclose($fp);        $diff = shell_exec($this->_diffCommand . ' ' . $from_file . ' ' . $to_file);        unlink($from_file);        unlink($to_file);        if (is_null($diff)) {            // No changes were made            return array(new Text_Diff_Op_copy($from_lines));        }        $from_line_no = 1;        $to_line_no = 1;        $edits = array();        // Get changed lines by parsing something like:        // 0a1,2        // 1,2c4,6        // 1,5d6        preg_match_all('#^(\d+)(?:,(\d+))?([adc])(\d+)(?:,(\d+))?$#m', $diff,            $matches, PREG_SET_ORDER);        foreach ($matches as $match) {            if (!isset($match[5])) {                // This paren is not set every time (see regex).                $match[5] = false;            }            if ($match[3] == 'a') {                $from_line_no--;            }            if ($match[3] == 'd') {                $to_line_no--;            }            if ($from_line_no < $match[1] || $to_line_no < $match[4]) {                // copied lines                assert('$match[1] - $from_line_no == $match[4] - $to_line_no');                array_push($edits,                    new Text_Diff_Op_copy(                        $this->_getLines($from_lines, $from_line_no, $match[1] - 1),                        $this->_getLines($to_lines, $to_line_no, $match[4] - 1)));            }            switch ($match[3]) {            case 'd':                // deleted lines                array_push($edits,                    new Text_Diff_Op_delete(                        $this->_getLines($from_lines, $from_line_no, $match[2])));                $to_line_no++;                break;            case 'c':                // changed lines                array_push($edits,                    new Text_Diff_Op_change(                        $this->_getLines($from_lines, $from_line_no, $match[2]),                        $this->_getLines($to_lines, $to_line_no, $match[5])));                break;            case 'a':                // added lines                array_push($edits,                    new Text_Diff_Op_add(                        $this->_getLines($to_lines, $to_line_no, $match[5])));                $from_line_no++;                break;            }        }        if (!empty($from_lines)) {            // Some lines might still be pending. Add them as copied            array_push($edits,                new Text_Diff_Op_copy(                    $this->_getLines($from_lines, $from_line_no,                                     $from_line_no + count($from_lines) - 1),                    $this->_getLines($to_lines, $to_line_no,                                     $to_line_no + count($to_lines) - 1)));        }        return $edits;    }    /**     * Get lines from either the old or new text     *     * @access private     *     * @param array &$text_lines Either $from_lines or $to_lines     * @param int   &$line_no    Current line number     * @param int   $end         Optional end line, when we want to chop more     *                           than one line.     *     * @return array The chopped lines     */    function _getLines(&$text_lines, &$line_no, $end = false)    {        if (!empty($end)) {            $lines = array();            // We can shift even more            while ($line_no <= $end) {                array_push($lines, array_shift($text_lines));                $line_no++;            }        } else {            $lines = array(array_shift($text_lines));            $line_no++;        }        return $lines;    }}
<?php/* Continent and city translations for timezone selection. * This file is not included anywhere. It exists solely for use by xgettext. */__('Africa', 'continents-cities');__('Abidjan', 'continents-cities');__('Accra', 'continents-cities');__('Addis Ababa', 'continents-cities');__('Algiers', 'continents-cities');__('Asmara', 'continents-cities');__('Asmera', 'continents-cities');__('Bamako', 'continents-cities');__('Bangui', 'continents-cities');__('Banjul', 'continents-cities');__('Bissau', 'continents-cities');__('Blantyre', 'continents-cities');__('Brazzaville', 'continents-cities');__('Bujumbura', 'continents-cities');__('Cairo', 'continents-cities');__('Casablanca', 'continents-cities');__('Ceuta', 'continents-cities');__('Conakry', 'continents-cities');__('Dakar', 'continents-cities');__('Dar es Salaam', 'continents-cities');__('Djibouti', 'continents-cities');__('Douala', 'continents-cities');__('El Aaiun', 'continents-cities');__('Freetown', 'continents-cities');__('Gaborone', 'continents-cities');__('Harare', 'continents-cities');__('Johannesburg', 'continents-cities');__('Kampala', 'continents-cities');__('Khartoum', 'continents-cities');__('Kigali', 'continents-cities');__('Kinshasa', 'continents-cities');__('Lagos', 'continents-cities');__('Libreville', 'continents-cities');__('Lome', 'continents-cities');__('Luanda', 'continents-cities');__('Lubumbashi', 'continents-cities');__('Lusaka', 'continents-cities');__('Malabo', 'continents-cities');__('Maputo', 'continents-cities');__('Maseru', 'continents-cities');__('Mbabane', 'continents-cities');__('Mogadishu', 'continents-cities');__('Monrovia', 'continents-cities');__('Nairobi', 'continents-cities');__('Ndjamena', 'continents-cities');__('Niamey', 'continents-cities');__('Nouakchott', 'continents-cities');__('Ouagadougou', 'continents-cities');__('Porto-Novo', 'continents-cities');__('Sao Tome', 'continents-cities');__('Timbuktu', 'continents-cities');__('Tripoli', 'continents-cities');__('Tunis', 'continents-cities');__('Windhoek', 'continents-cities');__('America', 'continents-cities');__('Adak', 'continents-cities');__('Anchorage', 'continents-cities');__('Anguilla', 'continents-cities');__('Antigua', 'continents-cities');__('Araguaina', 'continents-cities');__('Argentina', 'continents-cities');__('Buenos Aires', 'continents-cities');__('Catamarca', 'continents-cities');__('ComodRivadavia', 'continents-cities');__('Cordoba', 'continents-cities');__('Jujuy', 'continents-cities');__('La Rioja', 'continents-cities');__('Mendoza', 'continents-cities');__('Rio Gallegos', 'continents-cities');__('San Juan', 'continents-cities');__('San Luis', 'continents-cities');__('Tucuman', 'continents-cities');__('Ushuaia', 'continents-cities');__('Aruba', 'continents-cities');__('Asuncion', 'continents-cities');__('Atikokan', 'continents-cities');__('Atka', 'continents-cities');__('Bahia', 'continents-cities');__('Barbados', 'continents-cities');__('Belem', 'continents-cities');__('Belize', 'continents-cities');__('Blanc-Sablon', 'continents-cities');__('Boa Vista', 'continents-cities');__('Bogota', 'continents-cities');__('Boise', 'continents-cities');__('Cambridge Bay', 'continents-cities');__('Campo Grande', 'continents-cities');__('Cancun', 'continents-cities');__('Caracas', 'continents-cities');__('Cayenne', 'continents-cities');__('Cayman', 'continents-cities');__('Chicago', 'continents-cities');__('Chihuahua', 'continents-cities');__('Coral Harbour', 'continents-cities');__('Costa Rica', 'continents-cities');__('Cuiaba', 'continents-cities');__('Curacao', 'continents-cities');__('Danmarkshavn', 'continents-cities');__('Dawson', 'continents-cities');__('Dawson Creek', 'continents-cities');__('Denver', 'continents-cities');__('Detroit', 'continents-cities');__('Dominica', 'continents-cities');__('Edmonton', 'continents-cities');__('Eirunepe', 'continents-cities');__('El Salvador', 'continents-cities');__('Ensenada', 'continents-cities');__('Fort Wayne', 'continents-cities');__('Fortaleza', 'continents-cities');__('Glace Bay', 'continents-cities');__('Godthab', 'continents-cities');__('Goose Bay', 'continents-cities');__('Grand Turk', 'continents-cities');__('Grenada', 'continents-cities');__('Guadeloupe', 'continents-cities');__('Guatemala', 'continents-cities');__('Guayaquil', 'continents-cities');__('Guyana', 'continents-cities');__('Halifax', 'continents-cities');__('Havana', 'continents-cities');__('Hermosillo', 'continents-cities');__('Indiana', 'continents-cities');__('Indianapolis', 'continents-cities');__('Knox', 'continents-cities');__('Marengo', 'continents-cities');__('Petersburg', 'continents-cities');__('Tell City', 'continents-cities');__('Vevay', 'continents-cities');__('Vincennes', 'continents-cities');__('Winamac', 'continents-cities');__('Inuvik', 'continents-cities');__('Iqaluit', 'continents-cities');__('Jamaica', 'continents-cities');__('Juneau', 'continents-cities');__('Kentucky', 'continents-cities');__('Louisville', 'continents-cities');__('Monticello', 'continents-cities');__('Knox IN', 'continents-cities');__('La Paz', 'continents-cities');__('Lima', 'continents-cities');__('Los Angeles', 'continents-cities');__('Maceio', 'continents-cities');__('Managua', 'continents-cities');__('Manaus', 'continents-cities');__('Marigot', 'continents-cities');__('Martinique', 'continents-cities');__('Mazatlan', 'continents-cities');__('Menominee', 'continents-cities');__('Merida', 'continents-cities');__('Mexico City', 'continents-cities');__('Miquelon', 'continents-cities');__('Moncton', 'continents-cities');__('Monterrey', 'continents-cities');__('Montevideo', 'continents-cities');__('Montreal', 'continents-cities');__('Montserrat', 'continents-cities');__('Nassau', 'continents-cities');__('New York', 'continents-cities');__('Nipigon', 'continents-cities');__('Nome', 'continents-cities');__('Noronha', 'continents-cities');__('North Dakota', 'continents-cities');__('Center', 'continents-cities');__('New Salem', 'continents-cities');__('Panama', 'continents-cities');__('Pangnirtung', 'continents-cities');__('Paramaribo', 'continents-cities');__('Phoenix', 'continents-cities');__('Port-au-Prince', 'continents-cities');__('Port of Spain', 'continents-cities');__('Porto Acre', 'continents-cities');__('Porto Velho', 'continents-cities');__('Puerto Rico', 'continents-cities');__('Rainy River', 'continents-cities');__('Rankin Inlet', 'continents-cities');__('Recife', 'continents-cities');__('Regina', 'continents-cities');__('Resolute', 'continents-cities');__('Rio Branco', 'continents-cities');__('Rosario', 'continents-cities');__('Santiago', 'continents-cities');__('Santo Domingo', 'continents-cities');__('Sao Paulo', 'continents-cities');__('Scoresbysund', 'continents-cities');__('Shiprock', 'continents-cities');__('St Barthelemy', 'continents-cities');__('St Johns', 'continents-cities');__('St Kitts', 'continents-cities');__('St Lucia', 'continents-cities');__('St Thomas', 'continents-cities');__('St Vincent', 'continents-cities');__('Swift Current', 'continents-cities');__('Tegucigalpa', 'continents-cities');__('Thule', 'continents-cities');__('Thunder Bay', 'continents-cities');__('Tijuana', 'continents-cities');__('Toronto', 'continents-cities');__('Tortola', 'continents-cities');__('Vancouver', 'continents-cities');__('Virgin', 'continents-cities');__('Whitehorse', 'continents-cities');__('Winnipeg', 'continents-cities');__('Yakutat', 'continents-cities');__('Yellowknife', 'continents-cities');__('Antarctica', 'continents-cities');__('Casey', 'continents-cities');__('Davis', 'continents-cities');__('DumontDUrville', 'continents-cities');__('Mawson', 'continents-cities');__('McMurdo', 'continents-cities');__('Palmer', 'continents-cities');__('Rothera', 'continents-cities');__('South Pole', 'continents-cities');__('Syowa', 'continents-cities');__('Vostok', 'continents-cities');__('Arctic', 'continents-cities');__('Longyearbyen', 'continents-cities');__('Asia', 'continents-cities');__('Aden', 'continents-cities');__('Almaty', 'continents-cities');__('Amman', 'continents-cities');__('Anadyr', 'continents-cities');__('Aqtau', 'continents-cities');__('Aqtobe', 'continents-cities');__('Ashgabat', 'continents-cities');__('Ashkhabad', 'continents-cities');__('Baghdad', 'continents-cities');__('Bahrain', 'continents-cities');__('Baku', 'continents-cities');__('Bangkok', 'continents-cities');__('Beirut', 'continents-cities');__('Bishkek', 'continents-cities');__('Brunei', 'continents-cities');__('Calcutta', 'continents-cities');__('Choibalsan', 'continents-cities');__('Chongqing', 'continents-cities');__('Chungking', 'continents-cities');__('Colombo', 'continents-cities');__('Dacca', 'continents-cities');__('Damascus', 'continents-cities');__('Dhaka', 'continents-cities');__('Dili', 'continents-cities');__('Dubai', 'continents-cities');__('Dushanbe', 'continents-cities');__('Gaza', 'continents-cities');__('Harbin', 'continents-cities');__('Ho Chi Minh', 'continents-cities');__('Hong Kong', 'continents-cities');__('Hovd', 'continents-cities');__('Irkutsk', 'continents-cities');__('Istanbul', 'continents-cities');__('Jakarta', 'continents-cities');__('Jayapura', 'continents-cities');__('Jerusalem', 'continents-cities');__('Kabul', 'continents-cities');__('Kamchatka', 'continents-cities');__('Karachi', 'continents-cities');__('Kashgar', 'continents-cities');__('Katmandu', 'continents-cities');__('Kolkata', 'continents-cities');__('Krasnoyarsk', 'continents-cities');__('Kuala Lumpur', 'continents-cities');__('Kuching', 'continents-cities');__('Kuwait', 'continents-cities');__('Macao', 'continents-cities');__('Macau', 'continents-cities');__('Magadan', 'continents-cities');__('Makassar', 'continents-cities');__('Manila', 'continents-cities');__('Muscat', 'continents-cities');__('Nicosia', 'continents-cities');__('Novosibirsk', 'continents-cities');__('Omsk', 'continents-cities');__('Oral', 'continents-cities');__('Phnom Penh', 'continents-cities');__('Pontianak', 'continents-cities');__('Pyongyang', 'continents-cities');__('Qatar', 'continents-cities');__('Qyzylorda', 'continents-cities');__('Rangoon', 'continents-cities');__('Riyadh', 'continents-cities');__('Saigon', 'continents-cities');__('Sakhalin', 'continents-cities');__('Samarkand', 'continents-cities');__('Seoul', 'continents-cities');__('Shanghai', 'continents-cities');__('Singapore', 'continents-cities');__('Taipei', 'continents-cities');__('Tashkent', 'continents-cities');__('Tbilisi', 'continents-cities');__('Tehran', 'continents-cities');__('Tel Aviv', 'continents-cities');__('Thimbu', 'continents-cities');__('Thimphu', 'continents-cities');__('Tokyo', 'continents-cities');__('Ujung Pandang', 'continents-cities');__('Ulaanbaatar', 'continents-cities');__('Ulan Bator', 'continents-cities');__('Urumqi', 'continents-cities');__('Vientiane', 'continents-cities');__('Vladivostok', 'continents-cities');__('Yakutsk', 'continents-cities');__('Yekaterinburg', 'continents-cities');__('Yerevan', 'continents-cities');__('Atlantic', 'continents-cities');__('Azores', 'continents-cities');__('Bermuda', 'continents-cities');__('Canary', 'continents-cities');__('Cape Verde', 'continents-cities');__('Faeroe', 'continents-cities');__('Faroe', 'continents-cities');__('Jan Mayen', 'continents-cities');__('Madeira', 'continents-cities');__('Reykjavik', 'continents-cities');__('South Georgia', 'continents-cities');__('St Helena', 'continents-cities');__('Stanley', 'continents-cities');__('Australia', 'continents-cities');__('ACT', 'continents-cities');__('Adelaide', 'continents-cities');__('Brisbane', 'continents-cities');__('Broken Hill', 'continents-cities');__('Canberra', 'continents-cities');__('Currie', 'continents-cities');__('Darwin', 'continents-cities');__('Eucla', 'continents-cities');__('Hobart', 'continents-cities');__('LHI', 'continents-cities');__('Lindeman', 'continents-cities');__('Lord Howe', 'continents-cities');__('Melbourne', 'continents-cities');__('North', 'continents-cities');__('NSW', 'continents-cities');__('Perth', 'continents-cities');__('Queensland', 'continents-cities');__('South', 'continents-cities');__('Sydney', 'continents-cities');__('Tasmania', 'continents-cities');__('Victoria', 'continents-cities');__('West', 'continents-cities');__('Yancowinna', 'continents-cities');__('Etc', 'continents-cities');__('GMT', 'continents-cities');__('GMT+0', 'continents-cities');__('GMT+1', 'continents-cities');__('GMT+10', 'continents-cities');__('GMT+11', 'continents-cities');__('GMT+12', 'continents-cities');__('GMT+2', 'continents-cities');__('GMT+3', 'continents-cities');__('GMT+4', 'continents-cities');__('GMT+5', 'continents-cities');__('GMT+6', 'continents-cities');__('GMT+7', 'continents-cities');__('GMT+8', 'continents-cities');__('GMT+9', 'continents-cities');__('GMT-0', 'continents-cities');__('GMT-1', 'continents-cities');__('GMT-10', 'continents-cities');__('GMT-11', 'continents-cities');__('GMT-12', 'continents-cities');__('GMT-13', 'continents-cities');__('GMT-14', 'continents-cities');__('GMT-2', 'continents-cities');__('GMT-3', 'continents-cities');__('GMT-4', 'continents-cities');__('GMT-5', 'continents-cities');__('GMT-6', 'continents-cities');__('GMT-7', 'continents-cities');__('GMT-8', 'continents-cities');__('GMT-9', 'continents-cities');__('GMT0', 'continents-cities');__('Greenwich', 'continents-cities');__('UCT', 'continents-cities');__('Universal', 'continents-cities');__('UTC', 'continents-cities');__('Zulu', 'continents-cities');__('Europe', 'continents-cities');__('Amsterdam', 'continents-cities');__('Andorra', 'continents-cities');__('Athens', 'continents-cities');__('Belfast', 'continents-cities');__('Belgrade', 'continents-cities');__('Berlin', 'continents-cities');__('Bratislava', 'continents-cities');__('Brussels', 'continents-cities');__('Bucharest', 'continents-cities');__('Budapest', 'continents-cities');__('Chisinau', 'continents-cities');__('Copenhagen', 'continents-cities');__('Dublin', 'continents-cities');__('Gibraltar', 'continents-cities');__('Guernsey', 'continents-cities');__('Helsinki', 'continents-cities');__('Isle of Man', 'continents-cities');__('Jersey', 'continents-cities');__('Kaliningrad', 'continents-cities');__('Kiev', 'continents-cities');__('Lisbon', 'continents-cities');__('Ljubljana', 'continents-cities');__('London', 'continents-cities');__('Luxembourg', 'continents-cities');__('Madrid', 'continents-cities');__('Malta', 'continents-cities');__('Mariehamn', 'continents-cities');__('Minsk', 'continents-cities');__('Monaco', 'continents-cities');__('Moscow', 'continents-cities');__('Oslo', 'continents-cities');__('Paris', 'continents-cities');__('Podgorica', 'continents-cities');__('Prague', 'continents-cities');__('Riga', 'continents-cities');__('Rome', 'continents-cities');__('Samara', 'continents-cities');__('San Marino', 'continents-cities');__('Sarajevo', 'continents-cities');__('Simferopol', 'continents-cities');__('Skopje', 'continents-cities');__('Sofia', 'continents-cities');__('Stockholm', 'continents-cities');__('Tallinn', 'continents-cities');__('Tirane', 'continents-cities');__('Tiraspol', 'continents-cities');__('Uzhgorod', 'continents-cities');__('Vaduz', 'continents-cities');__('Vatican', 'continents-cities');__('Vienna', 'continents-cities');__('Vilnius', 'continents-cities');__('Volgograd', 'continents-cities');__('Warsaw', 'continents-cities');__('Zagreb', 'continents-cities');__('Zaporozhye', 'continents-cities');__('Zurich', 'continents-cities');__('Indian', 'continents-cities');__('Antananarivo', 'continents-cities');__('Chagos', 'continents-cities');__('Christmas', 'continents-cities');__('Cocos', 'continents-cities');__('Comoro', 'continents-cities');__('Kerguelen', 'continents-cities');__('Mahe', 'continents-cities');__('Maldives', 'continents-cities');__('Mauritius', 'continents-cities');__('Mayotte', 'continents-cities');__('Reunion', 'continents-cities');__('Pacific', 'continents-cities');__('Apia', 'continents-cities');__('Auckland', 'continents-cities');__('Chatham', 'continents-cities');__('Easter', 'continents-cities');__('Efate', 'continents-cities');__('Enderbury', 'continents-cities');__('Fakaofo', 'continents-cities');__('Fiji', 'continents-cities');__('Funafuti', 'continents-cities');__('Galapagos', 'continents-cities');__('Gambier', 'continents-cities');__('Guadalcanal', 'continents-cities');__('Guam', 'continents-cities');__('Honolulu', 'continents-cities');__('Johnston', 'continents-cities');__('Kiritimati', 'continents-cities');__('Kosrae', 'continents-cities');__('Kwajalein', 'continents-cities');__('Majuro', 'continents-cities');__('Marquesas', 'continents-cities');__('Midway', 'continents-cities');__('Nauru', 'continents-cities');__('Niue', 'continents-cities');__('Norfolk', 'continents-cities');__('Noumea', 'continents-cities');__('Pago Pago', 'continents-cities');__('Palau', 'continents-cities');__('Pitcairn', 'continents-cities');__('Ponape', 'continents-cities');__('Port Moresby', 'continents-cities');__('Rarotonga', 'continents-cities');__('Saipan', 'continents-cities');__('Samoa', 'continents-cities');__('Tahiti', 'continents-cities');__('Tarawa', 'continents-cities');__('Tongatapu', 'continents-cities');__('Truk', 'continents-cities');__('Wake', 'continents-cities');__('Wallis', 'continents-cities');__('Yap', 'continents-cities');
<?php/** * Manage link category administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for category actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'cat'));switch($action) {case 'addcat':	check_admin_referer('add-link-category');	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	if ( wp_insert_term($_POST['name'], 'link_category', $_POST ) ) {		wp_redirect('edit-link-categories.php?message=1#addcat');	} else {		wp_redirect('edit-link-categories.php?message=4#addcat');	}	exit;break;case 'delete':	$cat_ID = (int) $_GET['cat_ID'];	check_admin_referer('delete-link-category_' .  $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$cat_name = get_term_field('name', $cat_ID, 'link_category');	$default_cat_id = get_option('default_link_category');	// Don't delete the default cats.	if ( $cat_ID == $default_cat_id )		wp_die(sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name));	wp_delete_term($cat_ID, 'link_category', array('default' => $default_cat_id));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = __('Edit Category');	$parent_file = 'link-manager.php';	$submenu_file = 'edit-link-categories.php';	require_once ('admin-header.php');	$cat_ID = (int) $_GET['cat_ID'];	$category = get_term_to_edit($cat_ID, 'link_category');	include('./edit-link-category-form.php');	include('./admin-footer.php');	exit;break;case 'editedcat':	$cat_ID = (int) $_POST['cat_ID'];	check_admin_referer('update-link-category_' . $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$update =  wp_update_term($cat_ID, 'link_category', $_POST);	if ( $update && !is_wp_error($update) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;}?>
<?php/** * These functions can be replaced via plugins. If plugins do not redefine these * functions, then these will be used instead. * * @package WordPress */if ( !function_exists('wp_set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * Some WordPress functionality is based on the current user and not based on * the signed in user. Therefore, it opens the ability to edit and perform * actions on users who aren't signed in. * * @since 2.0.3 * @global object $current_user The current user object which holds the user data. * @uses do_action() Calls 'set_current_user' hook after setting the current user. * * @param int $id User ID * @param string $name User's username * @return WP_User Current user User object */function wp_set_current_user($id, $name = '') {	global $current_user;	if ( isset($current_user) && ($id == $current_user->ID) )		return $current_user;	$current_user = new WP_User($id, $name);	setup_userdata($current_user->ID);	do_action('set_current_user');	return $current_user;}endif;if ( !function_exists('wp_get_current_user') ) :/** * Retrieve the current user object. * * @since 2.0.3 * * @return WP_User Current user WP_User object */function wp_get_current_user() {	global $current_user;	get_currentuserinfo();	return $current_user;}endif;if ( !function_exists('get_currentuserinfo') ) :/** * Populate global variables with information about the currently logged in user. * * Will set the current user, if the current user is not set. The current user * will be set to the logged in person. If no user is logged in, then it will * set the current user to 0, which is invalid and won't have any permissions. * * @since 0.71 * @uses $current_user Checks if the current user is set * @uses wp_validate_auth_cookie() Retrieves current logged in user. * * @return bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set */function get_currentuserinfo() {	global $current_user;	if ( defined('XMLRPC_REQUEST') && XMLRPC_REQUEST )		return false;	if ( ! empty($current_user) )		return;	if ( ! $user = wp_validate_auth_cookie() ) {		 if ( is_admin() || empty($_COOKIE[LOGGED_IN_COOKIE]) || !$user = wp_validate_auth_cookie($_COOKIE[LOGGED_IN_COOKIE], 'logged_in') ) {		 	wp_set_current_user(0);		 	return false;		 }	}	wp_set_current_user($user);}endif;if ( !function_exists('get_userdata') ) :/** * Retrieve user info by user ID. * * @since 0.71 * * @param int $user_id User ID * @return bool|object False on failure, User DB row object */function get_userdata( $user_id ) {	global $wpdb;	if ( ! is_numeric( $user_id ) )		return false;	$user_id = absint( $user_id );	if ( ! $user_id )		return false;	$user = wp_cache_get( $user_id, 'users' );	if ( $user )		return $user;	if ( ! $user = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d LIMIT 1", $user_id ) ) )		return false;	_fill_user( $user );	return $user;}endif;if ( !function_exists('cache_users') ) :/** * Retrieve info for user lists to prevent multiple queries by get_userdata() * * @since 3.0.0 * * @param array $users User ID numbers list */function cache_users( $users ) {	global $wpdb;	$clean = array();	foreach($users as $id) {		$id = (int) $id;		if (wp_cache_get($id, 'users')) {			// seems to be cached already		} else {			$clean[] = $id;		}	}	if ( 0 == count($clean) )		return;	$list = implode(',', $clean);	$results = $wpdb->get_results("SELECT * FROM $wpdb->users WHERE ID IN ($list)");	_fill_many_users($results);}endif;if ( !function_exists('get_user_by') ) :/** * Retrieve user info by a given field * * @since 2.8.0 * * @param string $field The field to retrieve the user with.  id | slug | email | login * @param int|string $value A value for $field.  A user ID, slug, email address, or login name. * @return bool|object False on failure, User DB row object */function get_user_by($field, $value) {	global $wpdb;	switch ($field) {		case 'id':			return get_userdata($value);			break;		case 'slug':			$user_id = wp_cache_get($value, 'userslugs');			$field = 'user_nicename';			break;		case 'email':			$user_id = wp_cache_get($value, 'useremail');			$field = 'user_email';			break;		case 'login':			$value = sanitize_user( $value );			$user_id = wp_cache_get($value, 'userlogins');			$field = 'user_login';			break;		default:			return false;	}	 if ( false !== $user_id )		return get_userdata($user_id);	if ( !$user = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->users WHERE $field = %s", $value) ) )		return false;	_fill_user($user);	return $user;}endif;if ( !function_exists('get_userdatabylogin') ) :/** * Retrieve user info by login name. * * @since 0.71 * * @param string $user_login User's username * @return bool|object False on failure, User DB row object */function get_userdatabylogin($user_login) {	return get_user_by('login', $user_login);}endif;if ( !function_exists('get_user_by_email') ) :/** * Retrieve user info by email. * * @since 2.5 * * @param string $email User's email address * @return bool|object False on failure, User DB row object */function get_user_by_email($email) {	return get_user_by('email', $email);}endif;if ( !function_exists( 'wp_mail' ) ) :/** * Send mail, similar to PHP's mail * * A true return value does not automatically mean that the user received the * email successfully. It just only means that the method used was able to * process the request without any errors. * * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from * creating a from address like 'Name <email@address.com>' when both are set. If * just 'wp_mail_from' is set, then just the email address will be used with no * name. * * The default content type is 'text/plain' which does not allow using HTML. * However, you can set the content type of the email by using the * 'wp_mail_content_type' filter. * * The default charset is based on the charset used on the blog. The charset can * be set using the 'wp_mail_charset' filter. * * @since 1.2.1 * @uses apply_filters() Calls 'wp_mail' hook on an array of all of the parameters. * @uses apply_filters() Calls 'wp_mail_from' hook to get the from email address. * @uses apply_filters() Calls 'wp_mail_from_name' hook to get the from address name. * @uses apply_filters() Calls 'wp_mail_content_type' hook to get the email content type. * @uses apply_filters() Calls 'wp_mail_charset' hook to get the email charset * @uses do_action_ref_array() Calls 'phpmailer_init' hook on the reference to *		phpmailer object. * @uses PHPMailer * @ * * @param string|array $to Array or comma-separated list of email addresses to send message. * @param string $subject Email subject * @param string $message Message contents * @param string|array $headers Optional. Additional headers. * @param string|array $attachments Optional. Files to attach. * @return bool Whether the email contents were sent successfully. */function wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {	// Compact the input, apply the filters, and extract them back out	extract( apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) ) );	if ( !is_array($attachments) )		$attachments = explode( "\n", str_replace( "\r\n", "\n", $attachments ) );	global $phpmailer;	// (Re)create it, if it's gone missing	if ( !is_object( $phpmailer ) || !is_a( $phpmailer, 'PHPMailer' ) ) {		require_once ABSPATH . WPINC . '/class-phpmailer.php';		require_once ABSPATH . WPINC . '/class-smtp.php';		$phpmailer = new PHPMailer();	}	// Headers	if ( empty( $headers ) ) {		$headers = array();	} else {		if ( !is_array( $headers ) ) {			// Explode the headers out, so this function can take both			// string headers and an array of headers.			$tempheaders = explode( "\n", str_replace( "\r\n", "\n", $headers ) );		} else {			$tempheaders = $headers;		}		$headers = array();		// If it's actually got contents		if ( !empty( $tempheaders ) ) {			// Iterate through the raw headers			foreach ( (array) $tempheaders as $header ) {				if ( strpos($header, ':') === false ) {					if ( false !== stripos( $header, 'boundary=' ) ) {						$parts = preg_split('/boundary=/i', trim( $header ) );						$boundary = trim( str_replace( array( "'", '"' ), '', $parts[1] ) );					}					continue;				}				// Explode them out				list( $name, $content ) = explode( ':', trim( $header ), 2 );				// Cleanup crew				$name    = trim( $name    );				$content = trim( $content );				switch ( strtolower( $name ) ) {					// Mainly for legacy -- process a From: header if it's there					case 'from':						if ( strpos($content, '<' ) !== false ) {							// So... making my life hard again?							$from_name = substr( $content, 0, strpos( $content, '<' ) - 1 );							$from_name = str_replace( '"', '', $from_name );							$from_name = trim( $from_name );							$from_email = substr( $content, strpos( $content, '<' ) + 1 );							$from_email = str_replace( '>', '', $from_email );							$from_email = trim( $from_email );						} else {							$from_email = trim( $content );						}						break;					case 'content-type':						if ( strpos( $content, ';' ) !== false ) {							list( $type, $charset ) = explode( ';', $content );							$content_type = trim( $type );							if ( false !== stripos( $charset, 'charset=' ) ) {								$charset = trim( str_replace( array( 'charset=', '"' ), '', $charset ) );							} elseif ( false !== stripos( $charset, 'boundary=' ) ) {								$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '"' ), '', $charset ) );								$charset = '';							}						} else {							$content_type = trim( $content );						}						break;					case 'cc':						$cc = array_merge( (array) $cc, explode( ',', $content ) );						break;					case 'bcc':						$bcc = array_merge( (array) $bcc, explode( ',', $content ) );						break;					default:						// Add it to our grand headers array						$headers[trim( $name )] = trim( $content );						break;				}			}		}	}	// Empty out the values that may be set	$phpmailer->ClearAddresses();	$phpmailer->ClearAllRecipients();	$phpmailer->ClearAttachments();	$phpmailer->ClearBCCs();	$phpmailer->ClearCCs();	$phpmailer->ClearCustomHeaders();	$phpmailer->ClearReplyTos();	// From email and name	// If we don't have a name from the input headers	if ( !isset( $from_name ) )		$from_name = 'WordPress';	/* If we don't have an email from the input headers default to wordpress@$sitename	 * Some hosts will block outgoing mail from this address if it doesn't exist but	 * there's no easy alternative. Defaulting to admin_email might appear to be another	 * option but some hosts may refuse to relay mail from an unknown domain. See	 * http://trac.wordpress.org/ticket/5007.	 */	if ( !isset( $from_email ) ) {		// Get the site domain and get rid of www.		$sitename = strtolower( $_SERVER['SERVER_NAME'] );		if ( substr( $sitename, 0, 4 ) == 'www.' ) {			$sitename = substr( $sitename, 4 );		}		$from_email = 'wordpress@' . $sitename;	}	// Plugin authors can override the potentially troublesome default	$phpmailer->From     = apply_filters( 'wp_mail_from'     , $from_email );	$phpmailer->FromName = apply_filters( 'wp_mail_from_name', $from_name  );	// Set destination addresses	if ( !is_array( $to ) )		$to = explode( ',', $to );	foreach ( (array) $to as $recipient ) {		$phpmailer->AddAddress( trim( $recipient ) );	}	// Set mail's subject and body	$phpmailer->Subject = $subject;	$phpmailer->Body    = $message;	// Add any CC and BCC recipients	if ( !empty( $cc ) ) {		foreach ( (array) $cc as $recipient ) {			$phpmailer->AddCc( trim($recipient) );		}	}	if ( !empty( $bcc ) ) {		foreach ( (array) $bcc as $recipient) {			$phpmailer->AddBcc( trim($recipient) );		}	}	// Set to use PHP's mail()	$phpmailer->IsMail();	// Set Content-Type and charset	// If we don't have a content-type from the input headers	if ( !isset( $content_type ) )		$content_type = 'text/plain';	$content_type = apply_filters( 'wp_mail_content_type', $content_type );	$phpmailer->ContentType = $content_type;	// Set whether it's plaintext, depending on $content_type	if ( 'text/html' == $content_type )		$phpmailer->IsHTML( true );	// If we don't have a charset from the input headers	if ( !isset( $charset ) )		$charset = get_bloginfo( 'charset' );	// Set the content-type and charset	$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );	// Set custom headers	if ( !empty( $headers ) ) {		foreach( (array) $headers as $name => $content ) {			$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );		}		if ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )			$phpmailer->AddCustomHeader( sprintf( "Content-Type: %s;\n\t boundary=\"%s\"", $content_type, $boundary ) );	}	if ( !empty( $attachments ) ) {		foreach ( $attachments as $attachment ) {			$phpmailer->AddAttachment($attachment);		}	}	do_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );	// Send!	$result = @$phpmailer->Send();	return $result;}endif;if ( !function_exists('wp_authenticate') ) :/** * Checks a user's login information and logs them in if it checks out. * * @since 2.5.0 * * @param string $username User's username * @param string $password User's password * @return WP_Error|WP_User WP_User object if login successful, otherwise WP_Error object. */function wp_authenticate($username, $password) {	$username = sanitize_user($username);	$password = trim($password);	$user = apply_filters('authenticate', null, $username, $password);	if ( $user == null ) {		// TODO what should the error message be? (Or would these even happen?)		// Only needed if all authentication handlers fail to return anything.		$user = new WP_Error('authentication_failed', __('<strong>ERROR</strong>: Invalid username or incorrect password.'));	}	$ignore_codes = array('empty_username', 'empty_password');	if (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {		do_action('wp_login_failed', $username);	}	return $user;}endif;if ( !function_exists('wp_logout') ) :/** * Log the current user out. * * @since 2.5.0 */function wp_logout() {	wp_clear_auth_cookie();	do_action('wp_logout');}endif;if ( !function_exists('wp_validate_auth_cookie') ) :/** * Validates authentication cookie. * * The checks include making sure that the authentication cookie is set and * pulling in the contents (if $cookie is not used). * * Makes sure the cookie is not expired. Verifies the hash in cookie is what is * should be and compares the two. * * @since 2.5 * * @param string $cookie Optional. If used, will validate contents instead of cookie's * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return bool|int False if invalid cookie, User ID if valid. */function wp_validate_auth_cookie($cookie = '', $scheme = '') {	if ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {		do_action('auth_cookie_malformed', $cookie, $scheme);		return false;	}	extract($cookie_elements, EXTR_OVERWRITE);	$expired = $expiration;	// Allow a grace period for POST and AJAX requests	if ( defined('DOING_AJAX') || 'POST' == $_SERVER['REQUEST_METHOD'] )		$expired += 3600;	// Quick check to see if an honest cookie has expired	if ( $expired < time() ) {		do_action('auth_cookie_expired', $cookie_elements);		return false;	}	$user = get_userdatabylogin($username);	if ( ! $user ) {		do_action('auth_cookie_bad_username', $cookie_elements);		return false;	}	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($username . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $username . '|' . $expiration, $key);	if ( $hmac != $hash ) {		do_action('auth_cookie_bad_hash', $cookie_elements);		return false;	}	if ( $expiration < time() ) // AJAX/POST grace period set above		$GLOBALS['login_grace_period'] = 1;	do_action('auth_cookie_valid', $cookie_elements, $user);	return $user->ID;}endif;if ( !function_exists('wp_generate_auth_cookie') ) :/** * Generate authentication cookie contents. * * @since 2.5 * @uses apply_filters() Calls 'auth_cookie' hook on $cookie contents, User ID *		and expiration of cookie. * * @param int $user_id User ID * @param int $expiration Cookie expiration in seconds * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return string Authentication cookie contents */function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth') {	$user = get_userdata($user_id);	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($user->user_login . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $user->user_login . '|' . $expiration, $key);	$cookie = $user->user_login . '|' . $expiration . '|' . $hash;	return apply_filters('auth_cookie', $cookie, $user_id, $expiration, $scheme);}endif;if ( !function_exists('wp_parse_auth_cookie') ) :/** * Parse a cookie into its components * * @since 2.7 * * @param string $cookie * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return array Authentication cookie components */function wp_parse_auth_cookie($cookie = '', $scheme = '') {	if ( empty($cookie) ) {		switch ($scheme){			case 'auth':				$cookie_name = AUTH_COOKIE;				break;			case 'secure_auth':				$cookie_name = SECURE_AUTH_COOKIE;				break;			case "logged_in":				$cookie_name = LOGGED_IN_COOKIE;				break;			default:				if ( is_ssl() ) {					$cookie_name = SECURE_AUTH_COOKIE;					$scheme = 'secure_auth';				} else {					$cookie_name = AUTH_COOKIE;					$scheme = 'auth';				}	    }		if ( empty($_COOKIE[$cookie_name]) )			return false;		$cookie = $_COOKIE[$cookie_name];	}	$cookie_elements = explode('|', $cookie);	if ( count($cookie_elements) != 3 )		return false;	list($username, $expiration, $hmac) = $cookie_elements;	return compact('username', 'expiration', 'hmac', 'scheme');}endif;if ( !function_exists('wp_set_auth_cookie') ) :/** * Sets the authentication cookies based User ID. * * The $remember parameter increases the time that the cookie will be kept. The * default the cookie is kept without remembering is two days. When $remember is * set, the cookies will be kept for 14 days or two weeks. * * @since 2.5 * * @param int $user_id User ID * @param bool $remember Whether to remember the user */function wp_set_auth_cookie($user_id, $remember = false, $secure = '') {	if ( $remember ) {		$expiration = $expire = time() + apply_filters('auth_cookie_expiration', 1209600, $user_id, $remember);	} else {		$expiration = time() + apply_filters('auth_cookie_expiration', 172800, $user_id, $remember);		$expire = 0;	}	if ( '' === $secure )		$secure = is_ssl();	if ( $secure ) {		$auth_cookie_name = SECURE_AUTH_COOKIE;		$scheme = 'secure_auth';	} else {		$auth_cookie_name = AUTH_COOKIE;		$scheme = 'auth';	}	$auth_cookie = wp_generate_auth_cookie($user_id, $expiration, $scheme);	$logged_in_cookie = wp_generate_auth_cookie($user_id, $expiration, 'logged_in');	do_action('set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme);	do_action('set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in');	// Set httponly if the php version is >= 5.2.0	if ( version_compare(phpversion(), '5.2.0', 'ge') ) {		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, false, true);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, false, true);	} else {		$cookie_domain = COOKIE_DOMAIN;		if ( !empty($cookie_domain) )			$cookie_domain .= '; HttpOnly';		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, $cookie_domain, $secure);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, $cookie_domain, $secure);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, $cookie_domain);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, $cookie_domain);	}}endif;if ( !function_exists('wp_clear_auth_cookie') ) :/** * Removes all of the cookies associated with authentication. * * @since 2.5 */function wp_clear_auth_cookie() {	do_action('clear_auth_cookie');	setcookie(AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Old cookies	setcookie(AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Even older cookies	setcookie(USER_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(USER_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);}endif;if ( !function_exists('is_user_logged_in') ) :/** * Checks if the current visitor is a logged in user. * * @since 2.0.0 * * @return bool True if user is logged in, false if not logged in. */function is_user_logged_in() {	$user = wp_get_current_user();	if ( $user->id == 0 )		return false;	return true;}endif;if ( !function_exists('auth_redirect') ) :/** * Checks if a user is logged in, if not it redirects them to the login page. * * @since 1.5 */function auth_redirect() {	// Checks if a user is logged in, if not redirects them to the login page	$secure = ( is_ssl() || force_ssl_admin() );	// If https is required and request is http, redirect	if ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {		if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {			wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));			exit();		} else {			wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);			exit();		}	}	if ( $user_id = wp_validate_auth_cookie( '', apply_filters( 'auth_redirect_scheme', '' ) ) ) {		do_action('auth_redirect', $user_id);		// If the user wants ssl but the session is not ssl, redirect.		if ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {			if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {				wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));				exit();			} else {				wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);				exit();			}		}		return;  // The cookie is good so we're done	}	// The cookie is no good so force login	nocache_headers();	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$redirect = ( strpos($_SERVER['REQUEST_URI'], '/options.php') && wp_get_referer() ) ? wp_get_referer() : $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];	$login_url = wp_login_url($redirect, true);	wp_redirect($login_url);	exit();}endif;if ( !function_exists('check_admin_referer') ) :/** * Makes sure that a user was referred from another admin page. * * To avoid security exploits. * * @since 1.2.0 * @uses do_action() Calls 'check_admin_referer' on $action. * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_admin_referer($action = -1, $query_arg = '_wpnonce') {	$adminurl = strtolower(admin_url());	$referer = strtolower(wp_get_referer());	$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;	if ( !$result && !(-1 == $action && strpos($referer, $adminurl) !== false) ) {		wp_nonce_ays($action);		die();	}	do_action('check_admin_referer', $action, $result);	return $result;}endif;if ( !function_exists('check_ajax_referer') ) :/** * Verifies the AJAX request to prevent processing requests external of the blog. * * @since 2.0.3 * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {	if ( $query_arg )		$nonce = $_REQUEST[$query_arg];	else		$nonce = isset($_REQUEST['_ajax_nonce']) ? $_REQUEST['_ajax_nonce'] : $_REQUEST['_wpnonce'];	$result = wp_verify_nonce( $nonce, $action );	if ( $die && false == $result )		die('-1');	do_action('check_ajax_referer', $action, $result);	return $result;}endif;if ( !function_exists('wp_redirect') ) :/** * Redirects to another page, with a workaround for the IIS Set-Cookie bug. * * @link http://support.microsoft.com/kb/q176113/ * @since 1.5.1 * @uses apply_filters() Calls 'wp_redirect' hook on $location and $status. * * @param string $location The path to redirect to * @param int $status Status code to use * @return bool False if $location is not set */function wp_redirect($location, $status = 302) {	global $is_IIS;	$location = apply_filters('wp_redirect', $location, $status);	$status = apply_filters('wp_redirect_status', $status, $location);	if ( !$location ) // allows the wp_redirect filter to cancel a redirect		return false;	$location = wp_sanitize_redirect($location);	if ( $is_IIS ) {		header("Refresh: 0;url=$location");	} else {		if ( php_sapi_name() != 'cgi-fcgi' )			status_header($status); // This causes problems on IIS and some FastCGI setups		header("Location: $location", true, $status);	}}endif;if ( !function_exists('wp_sanitize_redirect') ) :/** * Sanitizes a URL for use in a redirect. * * @since 2.3 * * @return string redirect-sanitized URL **/function wp_sanitize_redirect($location) {	$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!]|i', '', $location);	$location = wp_kses_no_null($location);	// remove %0d and %0a from location	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	return $location;}endif;if ( !function_exists('wp_safe_redirect') ) :/** * Performs a safe (local) redirect, using wp_redirect(). * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to wp-admin on the siteurl * instead. This prevents malicious redirects which redirect to another host, * but only used in a few places. * * @since 2.3 * @uses wp_validate_redirect() To validate the redirect is to an allowed host. * * @return void Does not return anything **/function wp_safe_redirect($location, $status = 302) {	// Need to look at the URL the way it will end up in wp_redirect()	$location = wp_sanitize_redirect($location);	$location = wp_validate_redirect($location, admin_url());	wp_redirect($location, $status);}endif;if ( !function_exists('wp_validate_redirect') ) :/** * Validates a URL for use in a redirect. * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to $default supplied * * @since 2.8.1 * @uses apply_filters() Calls 'allowed_redirect_hosts' on an array containing *		WordPress host string and $location host string. * * @param string $location The redirect to validate * @param string $default The value to return is $location is not allowed * @return string redirect-sanitized URL **/function wp_validate_redirect($location, $default = '') {	// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'	if ( substr($location, 0, 2) == '//' )		$location = 'http:' . $location;	// In php 5 parse_url may fail if the URL query part contains http://, bug #38143	$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;	$lp  = parse_url($test);	// Give up if malformed URL	if ( false === $lp )		return $default;	// Allow only http and https schemes. No data:, etc.	if ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )		return $default;	// Reject if scheme is set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.	if ( isset($lp['scheme'])  && !isset($lp['host']) )		return $default;	$wpp = parse_url(home_url());	$allowed_hosts = (array) apply_filters('allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '');	if ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )		$location = $default;	return $location;}endif;if ( ! function_exists('wp_notify_postauthor') ) :/** * Notify an author of a comment/trackback/pingback to one of their posts. * * @since 1.0.0 * * @param int $comment_id Comment ID * @param string $comment_type Optional. The comment type either 'comment' (default), 'trackback', or 'pingback' * @return bool False if user email does not exist. True on completion. */function wp_notify_postauthor($comment_id, $comment_type='') {	$comment = get_comment($comment_id);	$post    = get_post($comment->comment_post_ID);	$user    = get_userdata( $post->post_author );	if ( $comment->user_id == $post->post_author ) return false; // The author moderated a comment on his own post	if ('' == $user->user_email) return false; // If there's no email to send the comment to	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	if ( empty( $comment_type ) ) $comment_type = 'comment';	if ('comment' == $comment_type) {		$notify_message  = sprintf( __( 'New comment on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";		$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all comments on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Comment: "%2$s"'), $blogname, $post->post_title );	} elseif ('trackback' == $comment_type) {		$notify_message  = sprintf( __( 'New trackback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: website name, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all trackbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Trackback: "%2$s"'), $blogname, $post->post_title );	} elseif ('pingback' == $comment_type) {		$notify_message  = sprintf( __( 'New pingback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . sprintf('[...] %s [...]', $comment->comment_content ) . "\r\n\r\n";		$notify_message .= __('You can see all pingbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Pingback: "%2$s"'), $blogname, $post->post_title );	}	$notify_message .= get_permalink($comment->comment_post_ID) . "#comments\r\n\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$wp_email = 'wordpress@' . preg_replace('#^www\.#', '', strtolower($_SERVER['SERVER_NAME']));	if ( '' == $comment->comment_author ) {		$from = "From: \"$blogname\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: $comment->comment_author_email";	} else {		$from = "From: \"$comment->comment_author\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: \"$comment->comment_author_email\" <$comment->comment_author_email>";	}	$message_headers = "$from\n"		. "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	if ( isset($reply_to) )		$message_headers .= $reply_to . "\n";	$notify_message = apply_filters('comment_notification_text', $notify_message, $comment_id);	$subject = apply_filters('comment_notification_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_notification_headers', $message_headers, $comment_id);	@wp_mail($user->user_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_notify_moderator') ) :/** * Notifies the moderator of the blog about a new comment that is awaiting approval. * * @since 1.0 * @uses $wpdb * * @param int $comment_id Comment ID * @return bool Always returns true */function wp_notify_moderator($comment_id) {	global $wpdb;	if( get_option( "moderation_notify" ) == 0 )		return true;	$comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID=%d LIMIT 1", $comment_id));	$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID=%d LIMIT 1", $comment->comment_post_ID));	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	$comments_waiting = $wpdb->get_var("SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'");	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	switch ($comment->comment_type)	{		case 'trackback':			$notify_message  = sprintf( __('A new trackback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Trackback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		case 'pingback':			$notify_message  = sprintf( __('A new pingback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Pingback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		default: //Comments			$notify_message  = sprintf( __('A new comment on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";			$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;	}	$notify_message .= sprintf( __('Approve it: %s'),  admin_url("comment.php?action=approve&c=$comment_id") ) . "\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:', 		'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . "\r\n";	$notify_message .= admin_url("edit-comments.php?comment_status=moderated") . "\r\n";	$subject = sprintf( __('[%1$s] Please moderate: "%2$s"'), $blogname, $post->post_title );	$admin_email = get_option('admin_email');	$message_headers = '';	$notify_message = apply_filters('comment_moderation_text', $notify_message, $comment_id);	$subject = apply_filters('comment_moderation_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_moderation_headers', $message_headers);	@wp_mail($admin_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_password_change_notification') ) :/** * Notify the blog admin of a user changing password, normally via email. * * @since 2.7 * * @param object $user User Object */function wp_password_change_notification(&$user) {	// send a copy of password change notification to the admin	// but check to see if it's the admin whose password we're changing, and skip this	if ( $user->user_email != get_option('admin_email') ) {		$message = sprintf(__('Password Lost and Changed for user: %s'), $user->user_login) . "\r\n";		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);		wp_mail(get_option('admin_email'), sprintf(__('[%s] Password Lost/Changed'), $blogname), $message);	}}endif;if ( !function_exists('wp_new_user_notification') ) :/** * Notify the blog admin of a new user, normally via email. * * @since 2.0 * * @param int $user_id User ID * @param string $plaintext_pass Optional. The user's plaintext password */function wp_new_user_notification($user_id, $plaintext_pass = '') {	$user = new WP_User($user_id);	$user_login = stripslashes($user->user_login);	$user_email = stripslashes($user->user_email);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$message  = sprintf(__('New user registration on your site %s:'), $blogname) . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= sprintf(__('E-mail: %s'), $user_email) . "\r\n";	@wp_mail(get_option('admin_email'), sprintf(__('[%s] New User Registration'), $blogname), $message);	if ( empty($plaintext_pass) )		return;	$message  = sprintf(__('Username: %s'), $user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $plaintext_pass) . "\r\n";	$message .= wp_login_url() . "\r\n";	wp_mail($user_email, sprintf(__('[%s] Your username and password'), $blogname), $message);}endif;if ( !function_exists('wp_nonce_tick') ) :/** * Get the time-dependent variable for nonce creation. * * A nonce has a lifespan of two ticks. Nonces in their second tick may be * updated, e.g. by autosave. * * @since 2.5 * * @return int */function wp_nonce_tick() {	$nonce_life = apply_filters('nonce_life', 86400);	return ceil(time() / ( $nonce_life / 2 ));}endif;if ( !function_exists('wp_verify_nonce') ) :/** * Verify that correct nonce was used with time limit. * * The user is given an amount of time to use the token, so therefore, since the * UID and $action remain the same, the independent variable is the time. * * @since 2.0.3 * * @param string $nonce Nonce that was used in the form to verify * @param string|int $action Should give context to what is taking place and be the same when nonce was created. * @return bool Whether the nonce check passed or failed. */function wp_verify_nonce($nonce, $action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	// Nonce generated 0-12 hours ago	if ( substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 1;	// Nonce generated 12-24 hours ago	if ( substr(wp_hash(($i - 1) . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 2;	// Invalid nonce	return false;}endif;if ( !function_exists('wp_create_nonce') ) :/** * Creates a random, one time use token. * * @since 2.0.3 * * @param string|int $action Scalar value to add context to the nonce. * @return string The one use form token */function wp_create_nonce($action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	return substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10);}endif;if ( !function_exists('wp_salt') ) :/** * Get salt to add to hashes to help prevent attacks. * * The secret key is located in two places: the database in case the secret key * isn't defined in the second place, which is in the wp-config.php file. If you * are going to set the secret key, then you must do so in the wp-config.php * file. * * The secret key in the database is randomly generated and will be appended to * the secret key that is in wp-config.php file in some instances. It is * important to have the secret key defined or changed in wp-config.php. * * If you have installed WordPress 2.5 or later, then you will have the * SECRET_KEY defined in the wp-config.php already. You will want to change the * value in it because hackers will know what it is. If you have upgraded to * WordPress 2.5 or later version from a version before WordPress 2.5, then you * should add the constant to your wp-config.php file. * * Below is an example of how the SECRET_KEY constant is defined with a value. * You must not copy the below example and paste into your wp-config.php. If you * need an example, then you can have a * {@link https://api.wordpress.org/secret-key/1.1/ secret key created} for you. * * <code> * define('SECRET_KEY', 'mAry1HadA15|\/|b17w55w1t3asSn09w'); * </code> * * Salting passwords helps against tools which has stored hashed values of * common dictionary strings. The added values makes it harder to crack if given * salt string is not weak. * * @since 2.5 * @link https://api.wordpress.org/secret-key/1.1/ Create a Secret Key for wp-config.php * * @param string $scheme Authentication scheme * @return string Salt value */function wp_salt($scheme = 'auth') {	global $wp_default_secret_key;	$secret_key = '';	if ( defined('SECRET_KEY') && ('' != SECRET_KEY) && ( $wp_default_secret_key != SECRET_KEY) )		$secret_key = SECRET_KEY;	if ( 'auth' == $scheme ) {		if ( defined('AUTH_KEY') && ('' != AUTH_KEY) && ( $wp_default_secret_key != AUTH_KEY) )			$secret_key = AUTH_KEY;		if ( defined('AUTH_SALT') && ('' != AUTH_SALT) && ( $wp_default_secret_key != AUTH_SALT) ) {			$salt = AUTH_SALT;		} elseif ( defined('SECRET_SALT') && ('' != SECRET_SALT) && ( $wp_default_secret_key != SECRET_SALT) ) {			$salt = SECRET_SALT;		} else {			$salt = get_site_option('auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('auth_salt', $salt);			}		}	} elseif ( 'secure_auth' == $scheme ) {		if ( defined('SECURE_AUTH_KEY') && ('' != SECURE_AUTH_KEY) && ( $wp_default_secret_key != SECURE_AUTH_KEY) )			$secret_key = SECURE_AUTH_KEY;		if ( defined('SECURE_AUTH_SALT') && ('' != SECURE_AUTH_SALT) && ( $wp_default_secret_key != SECURE_AUTH_SALT) ) {			$salt = SECURE_AUTH_SALT;		} else {			$salt = get_site_option('secure_auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('secure_auth_salt', $salt);			}		}	} elseif ( 'logged_in' == $scheme ) {		if ( defined('LOGGED_IN_KEY') && ('' != LOGGED_IN_KEY) && ( $wp_default_secret_key != LOGGED_IN_KEY) )			$secret_key = LOGGED_IN_KEY;		if ( defined('LOGGED_IN_SALT') && ('' != LOGGED_IN_SALT) && ( $wp_default_secret_key != LOGGED_IN_SALT) ) {			$salt = LOGGED_IN_SALT;		} else {			$salt = get_site_option('logged_in_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('logged_in_salt', $salt);			}		}	} elseif ( 'nonce' == $scheme ) {		if ( defined('NONCE_KEY') && ('' != NONCE_KEY) && ( $wp_default_secret_key != NONCE_KEY) )			$secret_key = NONCE_KEY;		if ( defined('NONCE_SALT') && ('' != NONCE_SALT) && ( $wp_default_secret_key != NONCE_SALT) ) {			$salt = NONCE_SALT;		} else {			$salt = get_site_option('nonce_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('nonce_salt', $salt);			}		}	} else {		// ensure each auth scheme has its own unique salt		$salt = hash_hmac('md5', $scheme, $secret_key);	}	return apply_filters('salt', $secret_key . $salt, $scheme);}endif;if ( !function_exists('wp_hash') ) :/** * Get hash of given string. * * @since 2.0.3 * @uses wp_salt() Get WordPress salt * * @param string $data Plain text to hash * @return string Hash of $data */function wp_hash($data, $scheme = 'auth') {	$salt = wp_salt($scheme);	return hash_hmac('md5', $data, $salt);}endif;if ( !function_exists('wp_hash_password') ) :/** * Create a hash (encrypt) of a plain text password. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object * @uses PasswordHash::HashPassword * * @param string $password Plain text user password to hash * @return string The hash string of the password */function wp_hash_password($password) {	global $wp_hasher;	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	return $wp_hasher->HashPassword($password);}endif;if ( !function_exists('wp_check_password') ) :/** * Checks the plaintext password against the encrypted Password. * * Maintains compatibility between old version and the new cookie authentication * protocol using PHPass library. The $hash parameter is the encrypted password * and the function compares the plain text password when encypted similarly * against the already encrypted password to see if they match. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object used for checking the password *	against the $hash + $password * @uses PasswordHash::CheckPassword * * @param string $password Plaintext user's password * @param string $hash Hash of the user's password to check against. * @return bool False, if the $password does not match the hashed password */function wp_check_password($password, $hash, $user_id = '') {	global $wp_hasher;	// If the hash is still md5...	if ( strlen($hash) <= 32 ) {		$check = ( $hash == md5($password) );		if ( $check && $user_id ) {			// Rehash using new hash.			wp_set_password($password, $user_id);			$hash = wp_hash_password($password);		}		return apply_filters('check_password', $check, $password, $hash, $user_id);	}	// If the stored hash is longer than an MD5, presume the	// new style phpass portable hash.	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	$check = $wp_hasher->CheckPassword($password, $hash);	return apply_filters('check_password', $check, $password, $hash, $user_id);}endif;if ( !function_exists('wp_generate_password') ) :/** * Generates a random password drawn from the defined set of characters. * * @since 2.5 * * @param int $length The length of password to generate * @param bool $special_chars Whether to include standard special characters. Default true. * @param bool $extra_special_chars Whether to include other special characters. Used when *   generating secret keys and salts. Default false. * @return string The random password **/function wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';	if ( $special_chars )		$chars .= '!@#$%^&*()';	if ( $extra_special_chars )		$chars .= '-_ []{}<>~`+=,.;:/?|';	$password = '';	for ( $i = 0; $i < $length; $i++ ) {		$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);	}	// random_password filter was previously in random_password function which was deprecated	return apply_filters('random_password', $password);}endif;if ( !function_exists('wp_rand') ) : /** * Generates a random number * * @since 2.6.2 * * @param int $min Lower limit for the generated number (optional, default is 0) * @param int $max Upper limit for the generated number (optional, default is 4294967295) * @return int A random number between min and max */function wp_rand( $min = 0, $max = 0 ) {	global $rnd_value;	// Reset $rnd_value after 14 uses	// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value	if ( strlen($rnd_value) < 8 ) {		if ( defined( 'WP_SETUP_CONFIG' ) )			static $seed = '';		else			$seed = get_transient('random_seed');		$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );		$rnd_value .= sha1($rnd_value);		$rnd_value .= sha1($rnd_value . $seed);		$seed = md5($seed . $rnd_value);		if ( ! defined( 'WP_SETUP_CONFIG' ) )			set_transient('random_seed', $seed);	}	// Take the first 8 digits for our value	$value = substr($rnd_value, 0, 8);	// Strip the first eight, leaving the remainder for the next call to wp_rand().	$rnd_value = substr($rnd_value, 8);	$value = abs(hexdec($value));	// Reduce the value to be within the min - max range	// 4294967295 = 0xffffffff = max random number	if ( $max != 0 )		$value = $min + (($max - $min + 1) * ($value / (4294967295 + 1)));	return abs(intval($value));}endif;if ( !function_exists('wp_set_password') ) :/** * Updates the user's password with a new encrypted one. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @uses $wpdb WordPress database object for queries * @uses wp_hash_password() Used to encrypt the user's password before passing to the database * * @param string $password The plaintext new user password * @param int $user_id User ID */function wp_set_password( $password, $user_id ) {	global $wpdb;	$hash = wp_hash_password($password);	$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );	wp_cache_delete($user_id, 'users');}endif;if ( !function_exists( 'get_avatar' ) ) :/** * Retrieve the avatar for a user who provided a user ID or email address. * * @since 2.5 * @param int|string|object $id_or_email A user ID,  email address, or comment object * @param int $size Size of the avatar image * @param string $default URL to a default image to use if no avatar is available * @param string $alt Alternate text to use in image tag. Defaults to blank * @return string <img> tag for the user's avatar*/function get_avatar( $id_or_email, $size = '96', $default = '', $alt = false ) {	if ( ! get_option('show_avatars') )		return false;	if ( false === $alt)		$safe_alt = '';	else		$safe_alt = esc_attr( $alt );	if ( !is_numeric($size) )		$size = '96';	$email = '';	if ( is_numeric($id_or_email) ) {		$id = (int) $id_or_email;		$user = get_userdata($id);		if ( $user )			$email = $user->user_email;	} elseif ( is_object($id_or_email) ) {		// No avatar for pingbacks or trackbacks		$allowed_comment_types = apply_filters( 'get_avatar_comment_types', array( 'comment' ) );		if ( ! empty( $id_or_email->comment_type ) && ! in_array( $id_or_email->comment_type, (array) $allowed_comment_types ) )			return false;		if ( !empty($id_or_email->user_id) ) {			$id = (int) $id_or_email->user_id;			$user = get_userdata($id);			if ( $user)				$email = $user->user_email;		} elseif ( !empty($id_or_email->comment_author_email) ) {			$email = $id_or_email->comment_author_email;		}	} else {		$email = $id_or_email;	}	if ( empty($default) ) {		$avatar_default = get_option('avatar_default');		if ( empty($avatar_default) )			$default = 'mystery';		else			$default = $avatar_default;	}	if ( !empty($email) )		$email_hash = md5( strtolower( $email ) );	if ( is_ssl() ) {		$host = 'https://secure.gravatar.com';	} else {		if ( !empty($email) )			$host = sprintf( "http://%d.gravatar.com", ( hexdec( $email_hash{0} ) % 2 ) );		else			$host = 'http://0.gravatar.com';	}	if ( 'mystery' == $default )		$default = "$host/avatar/ad516503a11cd5ca435acc9bb6523536?s={$size}"; // ad516503a11cd5ca435acc9bb6523536 == md5('unknown@gravatar.com')	elseif ( 'blank' == $default )		$default = includes_url('images/blank.gif');	elseif ( !empty($email) && 'gravatar_default' == $default )		$default = '';	elseif ( 'gravatar_default' == $default )		$default = "$host/avatar/s={$size}";	elseif ( empty($email) )		$default = "$host/avatar/?d=$default&amp;s={$size}";	elseif ( strpos($default, 'http://') === 0 )		$default = add_query_arg( 's', $size, $default );	if ( !empty($email) ) {		$out = "$host/avatar/";		$out .= $email_hash;		$out .= '?s='.$size;		$out .= '&amp;d=' . urlencode( $default );		$rating = get_option('avatar_rating');		if ( !empty( $rating ) )			$out .= "&amp;r={$rating}";		$avatar = "<img alt='{$safe_alt}' src='{$out}' class='avatar avatar-{$size} photo' height='{$size}' width='{$size}' />";	} else {		$avatar = "<img alt='{$safe_alt}' src='{$default}' class='avatar avatar-{$size} photo avatar-default' height='{$size}' width='{$size}' />";	}	return apply_filters('get_avatar', $avatar, $id_or_email, $size, $default, $alt);}endif;if ( !function_exists( 'wp_text_diff' ) ) :/** * Displays a human readable HTML representation of the difference between two strings. * * The Diff is available for getting the changes between versions. The output is * HTML, so the primary use is for displaying the changes. If the two strings * are equivalent, then an empty string will be returned. * * The arguments supported and can be changed are listed below. * * 'title' : Default is an empty string. Titles the diff in a manner compatible *		with the output. * 'title_left' : Default is an empty string. Change the HTML to the left of the *		title. * 'title_right' : Default is an empty string. Change the HTML to the right of *		the title. * * @since 2.6 * @see wp_parse_args() Used to change defaults to user defined settings. * @uses Text_Diff * @uses WP_Text_Diff_Renderer_Table * * @param string $left_string "old" (left) version of string * @param string $right_string "new" (right) version of string * @param string|array $args Optional. Change 'title', 'title_left', and 'title_right' defaults. * @return string Empty string if strings are equivalent or HTML with differences. */function wp_text_diff( $left_string, $right_string, $args = null ) {	$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );	$args = wp_parse_args( $args, $defaults );	if ( !class_exists( 'WP_Text_Diff_Renderer_Table' ) )		require( ABSPATH . WPINC . '/wp-diff.php' );	$left_string  = normalize_whitespace($left_string);	$right_string = normalize_whitespace($right_string);	$left_lines  = split("\n", $left_string);	$right_lines = split("\n", $right_string);	$text_diff = new Text_Diff($left_lines, $right_lines);	$renderer  = new WP_Text_Diff_Renderer_Table();	$diff = $renderer->render($text_diff);	if ( !$diff )		return '';	$r  = "<table class='diff'>\n";	$r .= "<col class='ltype' /><col class='content' /><col class='ltype' /><col class='content' />";	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "<thead>";	if ( $args['title'] )		$r .= "<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\n";	if ( $args['title_left'] || $args['title_right'] ) {		$r .= "<tr class='diff-sub-title'>\n";		$r .= "\t<td></td><th>$args[title_left]</th>\n";		$r .= "\t<td></td><th>$args[title_right]</th>\n";		$r .= "</tr>\n";	}	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "</thead>\n";	$r .= "<tbody>\n$diff\n</tbody>\n";	$r .= "</table>";	return $r;}endif;
<?php/** * The base configurations of the WordPress. * * This file has the following configurations: MySQL settings, Table Prefix, * Secret Keys, WordPress Language, and ABSPATH. You can find more information * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing * wp-config.php} Codex page. You can get the MySQL settings from your web host. * * This file is used by the wp-config.php creation script during the * installation. You don't have to use the web site, you can just copy this file * to "wp-config.php" and fill in the values. * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'database_name_here');/** MySQL database username */define('DB_USER', 'username_here');/** MySQL database password */define('DB_PASSWORD', 'password_here');/** MySQL hostname */define('DB_HOST', 'localhost');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY',         'put your unique phrase here');define('SECURE_AUTH_KEY',  'put your unique phrase here');define('LOGGED_IN_KEY',    'put your unique phrase here');define('NONCE_KEY',        'put your unique phrase here');define('AUTH_SALT',        'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT',   'put your unique phrase here');define('NONCE_SALT',       'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each a unique * prefix. Only numbers, letters, and underscores please! */$table_prefix  = 'wp_';/** * WordPress Localized Language, defaults to English. * * Change this to localize WordPress.  A corresponding MO file for the chosen * language must be installed to wp-content/languages. For example, install * de.mo to wp-content/languages and set WPLANG to 'de' to enable German * language support. */define ('WPLANG', '');/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )	define('ABSPATH', dirname(__FILE__) . '/');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php');
<?php/** * WordPress Diff bastard child of old MediaWiki Diff Formatter. * * Basically all that remains is the table structure and some method names. * * @package WordPress * @subpackage Diff */if ( !class_exists( 'Text_Diff' ) ) {	/** Text_Diff class */	require( dirname(__FILE__).'/Text/Diff.php' );	/** Text_Diff_Renderer class */	require( dirname(__FILE__).'/Text/Diff/Renderer.php' );	/** Text_Diff_Renderer_inline class */	require( dirname(__FILE__).'/Text/Diff/Renderer/inline.php' );}/** * Table renderer to display the diff lines. * * @since 2.6.0 * @uses Text_Diff_Renderer Extends */class WP_Text_Diff_Renderer_Table extends Text_Diff_Renderer {	/**	 * @see Text_Diff_Renderer::_leading_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_leading_context_lines  = 10000;	/**	 * @see Text_Diff_Renderer::_trailing_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_trailing_context_lines = 10000;	/**	 * {@internal Missing Description}}	 *	 * @var float	 * @access protected	 * @since 2.6.0	 */	var $_diff_threshold = 0.6;	/**	 * Inline display helper object name.	 *	 * @var string	 * @access protected	 * @since 2.6.0	 */	var $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';	/**	 * PHP4 Constructor - Call parent constructor with params array.	 *	 * This will set class properties based on the key value pairs in the array.	 *	 * @since unknown	 *	 * @param array $params	 */	function Text_Diff_Renderer_Table( $params = array() ) {		$parent = get_parent_class($this);		$this->$parent( $params );	}	/**	 * @ignore	 *	 * @param string $header	 * @return string	 */	function _startBlock( $header ) {		return '';	}	/**	 * @ignore	 *	 * @param array $lines	 * @param string $prefix	 */	function _lines( $lines, $prefix=' ' ) {	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function addedLine( $line ) {		return "<td>+</td><td class='diff-addedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function deletedLine( $line ) {		return "<td>-</td><td class='diff-deletedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function contextLine( $line ) {		return "<td> </td><td class='diff-context'>{$line}</td>";	}	/**	 * @ignore	 *	 * @return string	 */	function emptyLine() {		return '<td colspan="2">&nbsp;</td>';	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _added( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->emptyLine() . $this->addedLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _deleted( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->deletedLine( $line ) . $this->emptyLine() . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _context( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' .				$this->contextLine( $line ) . $this->contextLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * Process changed lines to do word-by-word diffs for extra highlighting.	 *	 * (TRAC style) sometimes these lines can actually be deleted or added rows.	 * We do additional processing to figure that out	 *	 * @access private	 * @since 2.6.0	 *	 * @param array $orig	 * @param array $final	 * @return string	 */	function _changed( $orig, $final ) {		$r = '';		// Does the aforementioned additional processing		// *_matches tell what rows are "the same" in orig and final.  Those pairs will be diffed to get word changes		//	match is numeric: an index in other column		//	match is 'X': no match.  It is a new row		// *_rows are column vectors for the orig column and the final column.		//	row >= 0: an indix of the $orig or $final array		//	row  < 0: a blank row for that column		list($orig_matches, $final_matches, $orig_rows, $final_rows) = $this->interleave_changed_lines( $orig, $final );		// These will hold the word changes as determined by an inline diff		$orig_diffs  = array();		$final_diffs = array();		// Compute word diffs for each matched pair using the inline diff		foreach ( $orig_matches as $o => $f ) {			if ( is_numeric($o) && is_numeric($f) ) {				$text_diff = new Text_Diff( 'auto', array( array($orig[$o]), array($final[$f]) ) );				$renderer = new $this->inline_diff_renderer;				$diff = $renderer->render( $text_diff );				// If they're too different, don't include any <ins> or <dels>				if ( $diff_count = preg_match_all( '!(<ins>.*?</ins>|<del>.*?</del>)!', $diff, $diff_matches ) ) {					// length of all text between <ins> or <del>					$stripped_matches = strlen(strip_tags( join(' ', $diff_matches[0]) ));					// since we count lengith of text between <ins> or <del> (instead of picking just one),					//	we double the length of chars not in those tags.					$stripped_diff = strlen(strip_tags( $diff )) * 2 - $stripped_matches;					$diff_ratio = $stripped_matches / $stripped_diff;					if ( $diff_ratio > $this->_diff_threshold )						continue; // Too different.  Don't save diffs.				}				// Un-inline the diffs by removing del or ins				$orig_diffs[$o]  = preg_replace( '|<ins>.*?</ins>|', '', $diff );				$final_diffs[$f] = preg_replace( '|<del>.*?</del>|', '', $diff );			}		}		foreach ( array_keys($orig_rows) as $row ) {			// Both columns have blanks.  Ignore them.			if ( $orig_rows[$row] < 0 && $final_rows[$row] < 0 )				continue;			// If we have a word based diff, use it.  Otherwise, use the normal line.			if ( isset( $orig_diffs[$orig_rows[$row]] ) )				$orig_line = $orig_diffs[$orig_rows[$row]];			elseif ( isset( $orig[$orig_rows[$row]] ) )				$orig_line = htmlspecialchars($orig[$orig_rows[$row]]);			else				$orig_line = '';			if ( isset( $final_diffs[$final_rows[$row]] ) )				$final_line = $final_diffs[$final_rows[$row]];			elseif ( isset( $final[$final_rows[$row]] ) )				$final_line = htmlspecialchars($final[$final_rows[$row]]);			else				$final_line = '';			if ( $orig_rows[$row] < 0 ) { // Orig is blank.  This is really an added row.				$r .= $this->_added( array($final_line), false );			} elseif ( $final_rows[$row] < 0 ) { // Final is blank.  This is really a deleted row.				$r .= $this->_deleted( array($orig_line), false );			} else { // A true changed row.				$r .= '<tr>' . $this->deletedLine( $orig_line ) . $this->addedLine( $final_line ) . "</tr>\n";			}		}		return $r;	}	/**	 * Takes changed blocks and matches which rows in orig turned into which rows in final.	 *	 * Returns	 *	*_matches ( which rows match with which )	 *	*_rows ( order of rows in each column interleaved with blank rows as	 *		necessary )	 *	 * @since 2.6.0	 *	 * @param unknown_type $orig	 * @param unknown_type $final	 * @return unknown	 */	function interleave_changed_lines( $orig, $final ) {		// Contains all pairwise string comparisons.  Keys are such that this need only be a one dimensional array.		$matches = array();		foreach ( array_keys($orig) as $o ) {			foreach ( array_keys($final) as $f ) {				$matches["$o,$f"] = $this->compute_string_distance( $orig[$o], $final[$f] );			}		}		asort($matches); // Order by string distance.		$orig_matches  = array();		$final_matches = array();		foreach ( $matches as $keys => $difference ) {			list($o, $f) = explode(',', $keys);			$o = (int) $o;			$f = (int) $f;			// Already have better matches for these guys			if ( isset($orig_matches[$o]) && isset($final_matches[$f]) )				continue;			// First match for these guys.  Must be best match			if ( !isset($orig_matches[$o]) && !isset($final_matches[$f]) ) {				$orig_matches[$o] = $f;				$final_matches[$f] = $o;				continue;			}			// Best match of this final is already taken?  Must mean this final is a new row.			if ( isset($orig_matches[$o]) )				$final_matches[$f] = 'x';			// Best match of this orig is already taken?  Must mean this orig is a deleted row.			elseif ( isset($final_matches[$f]) )				$orig_matches[$o] = 'x';		}		// We read the text in this order		ksort($orig_matches);		ksort($final_matches);		// Stores rows and blanks for each column.		$orig_rows = $orig_rows_copy = array_keys($orig_matches);		$final_rows = array_keys($final_matches);		// Interleaves rows with blanks to keep matches aligned.		// We may end up with some extraneous blank rows, but we'll just ignore them later.		foreach ( $orig_rows_copy as $orig_row ) {			$final_pos = array_search($orig_matches[$orig_row], $final_rows, true);			$orig_pos = (int) array_search($orig_row, $orig_rows, true);			if ( false === $final_pos ) { // This orig is paired with a blank final.				array_splice( $final_rows, $orig_pos, 0, -1 );			} elseif ( $final_pos < $orig_pos ) { // This orig's match is up a ways.  Pad final with blank rows.				$diff_pos = $final_pos - $orig_pos;				while ( $diff_pos < 0 )					array_splice( $final_rows, $orig_pos, 0, $diff_pos++ );			} elseif ( $final_pos > $orig_pos ) { // This orig's match is down a ways.  Pad orig with blank rows.				$diff_pos = $orig_pos - $final_pos;				while ( $diff_pos < 0 )					array_splice( $orig_rows, $orig_pos, 0, $diff_pos++ );			}		}		// Pad the ends with blank rows if the columns aren't the same length		$diff_count = count($orig_rows) - count($final_rows);		if ( $diff_count < 0 ) {			while ( $diff_count < 0 )				array_push($orig_rows, $diff_count++);		} elseif ( $diff_count > 0 ) {			$diff_count = -1 * $diff_count;			while ( $diff_count < 0 )				array_push($final_rows, $diff_count++);		}		return array($orig_matches, $final_matches, $orig_rows, $final_rows);/*		// Debug		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Orig -> Final --";		foreach ( $orig_matches as $o => $f ) {			echo "\n\n\n\n\n";			echo "ORIG: $o, FINAL: $f\n";			var_dump($orig[$o],$final[$f]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Final -> Orig --";		foreach ( $final_matches as $f => $o ) {			echo "\n\n\n\n\n";			echo "FINAL: $f, ORIG: $o\n";			var_dump($final[$f],$orig[$o]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Rows: Orig -- Final --";		echo "\n\n\n\n\n";		foreach ( $orig_rows as $row => $o ) {			if ( $o < 0 )				$o = 'X';			$f = $final_rows[$row];			if ( $f < 0 )				$f = 'X';			echo "$o -- $f\n";		}		echo "\n\n\n\n\n";		echo "-- END DEBUG --";		echo "\n\n\n\n\n";		return array($orig_matches, $final_matches, $orig_rows, $final_rows);*/	}	/**	 * Computes a number that is intended to reflect the "distance" between two strings.	 *	 * @since 2.6.0	 *	 * @param string $string1	 * @param string $string2	 * @return int	 */	function compute_string_distance( $string1, $string2 ) {		// Vectors containing character frequency for all chars in each string		$chars1 = count_chars($string1);		$chars2 = count_chars($string2);		// L1-norm of difference vector.		$difference = array_sum( array_map( array(&$this, 'difference'), $chars1, $chars2 ) );		// $string1 has zero length? Odd.  Give huge penalty by not dividing.		if ( !$string1 )			return $difference;		// Return distance per charcter (of string1)		return $difference / strlen($string1);	}	/**	 * @ignore	 * @since 2.6.0	 *	 * @param int $a	 * @param int $b	 * @return int	 */	function difference( $a, $b ) {		return abs( $a - $b );	}}/** * Better word splitting than the PEAR package provides. * * @since 2.6.0 * @uses Text_Diff_Renderer_inline Extends */class WP_Text_Diff_Renderer_inline extends Text_Diff_Renderer_inline {	/**	 * @ignore	 * @since 2.6.0	 *	 * @param string $string	 * @param string $newlineEscape	 * @return string	 */	function _splitOnWords($string, $newlineEscape = "\n") {		$string = str_replace("\0", '', $string);		$words  = preg_split( '/([^\w])/u', $string, -1, PREG_SPLIT_DELIM_CAPTURE );		$words  = str_replace( "\n", $newlineEscape, $words );		return $words;	}}?>
<?php/** * Handle default dashboard widgets options AJAX. * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once( './admin.php' );/** Load WordPress Administration Dashboard API */require( './includes/dashboard.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );send_nosniff_header();switch ( $_GET['jax'] ) {case 'dashboard_incoming_links' :	wp_dashboard_incoming_links_output();	break;case 'dashboard_primary' :	wp_dashboard_rss_output( 'dashboard_primary' );	break;case 'dashboard_secondary' :	wp_dashboard_secondary_output();	break;case 'dashboard_plugins' :	wp_dashboard_plugins_output();	break;case 'dashboard_quick_press' :	wp_dashboard_quick_press_output();	break;}?>
<?php/** * Used to be the page which displayed the registration form. * * This file is no longer used in WordPress and is * deprecated. * * @package WordPress * @deprecated Use wp_register() to create a registration link instead */require('./wp-load.php');wp_redirect('wp-login.php?action=register');?>
<?php/** * WordPress Translation API * * @package WordPress * @subpackage i18n *//** * Gets the current locale. * * If the locale is set, then it will filter the locale in the 'locale' filter * hook and return the value. * * If the locale is not set already, then the WPLANG constant is used if it is * defined. Then it is filtered through the 'locale' filter hook and the value * for the locale global set and the locale is returned. * * The process to get the locale should only be done once but the locale will * always be filtered using the 'locale' hook. * * @since 1.5.0 * @uses apply_filters() Calls 'locale' hook on locale value. * @uses $locale Gets the locale stored in the global. * * @return string The locale of the blog or from the 'locale' hook. */function get_locale() {	global $locale;	if ( isset( $locale ) )		return apply_filters( 'locale', $locale );	// WPLANG is defined in wp-config.	if ( defined( 'WPLANG' ) )		$locale = WPLANG;	// If multisite, check options.	if ( is_multisite() && !defined('WP_INSTALLING') ) {		$ms_locale = get_option('WPLANG');		if ( $ms_locale === false )			$ms_locale = get_site_option('WPLANG');		if ( $ms_locale !== false )			$locale = $ms_locale;	}	if ( empty( $locale ) )		$locale = 'en_US';	return apply_filters( 'locale', $locale );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see __() Don't use translate() directly, use __() * @since 2.2.0 * @uses apply_filters() Calls 'gettext' on domain translated text *		with the untranslated text as second parameter. * * @param string $text Text to translate. * @param string $domain Domain to retrieve the translated text. * @return string Translated text */function translate( $text, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext', $translations->translate( $text ), $text, $domain );}function before_last_bar( $string ) {	$last_bar = strrpos( $string, '|' );	if ( false == $last_bar )		return $string;	else		return substr( $string, 0, $last_bar );}function translate_with_gettext_context( $text, $context, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	return apply_filters( 'gettext_with_context', $translations->translate( $text, $context ), $text, $context, $domain );}/** * Retrieves the translation of $text. If there is no translation, or * the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @since 2.1.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function __( $text, $domain = 'default' ) {	return translate( $text, $domain );}/** * Retrieves the translation of $text and escapes it for safe use in an attribute. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_attr__( $text, $domain = 'default' ) {	return esc_attr( translate( $text, $domain ) );}/** * Retrieves the translation of $text and escapes it for safe use in HTML output. * If there is no translation, or the domain isn't loaded the original text is returned. * * @see translate() An alias of translate() * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated text */function esc_html__( $text, $domain = 'default' ) {	return esc_html( translate( $text, $domain ) );}/** * Displays the returned translated text from translate(). * * @see translate() Echoes returned translate() string * @since 1.2.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function _e( $text, $domain = 'default' ) {	echo translate( $text, $domain );}/** * Displays translated text that has been escaped for safe use in an attribute. * * @see translate() Echoes returned translate() string * @see esc_attr() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_attr_e( $text, $domain = 'default' ) {	echo esc_attr( translate( $text, $domain ) );}/** * Displays translated text that has been escaped for safe use in HTML output. * * @see translate() Echoes returned translate() string * @see esc_html() * @since 2.8.0 * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text */function esc_html_e( $text, $domain = 'default' ) {	echo esc_html( translate( $text, $domain ) );}/** * Retrieve translated string with gettext context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * By including the context in the pot file translators can translate the two * string differently. * * @since 2.8.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _x( $single, $context, $domain = 'default' ) {	return translate_with_gettext_context( $single, $context, $domain );}/** * Displays translated string with gettext context * * @see _x * @since 3.0.0 * * @param string $text Text to translate * @param string $context Context information for the translators * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _ex( $single, $context, $domain = 'default' ) {	echo _x( $single, $context, $domain );}function esc_attr_x( $single, $context, $domain = 'default' ) {	return esc_attr( translate_with_gettext_context( $single, $context, $domain ) );}function esc_html_x( $single, $context, $domain = 'default' ) {	return esc_html( translate_with_gettext_context( $single, $context, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * If the domain is not set in the $l10n list, then a comparison will be made * and either $plural or $single parameters returned. * * If the domain does exist, then the parameters $single, $plural, and $number * will first be passed to the domain's ngettext method. Then it will be passed * to the 'ngettext' filter hook along with the same parameters. The expected * type will be a string. * * @since 2.8.0 * @uses $l10n Gets list of domain translated string (gettext_reader) objects * @uses apply_filters() Calls 'ngettext' hook on domains text returned, *		along with $single, $plural, and $number parameters. Expected to return string. * * @param string $single The text that will be used if $number is 1 * @param string $plural The text that will be used if $number is not 1 * @param int $number The number to compare against to use either $single or $plural * @param string $domain Optional. The domain identifier the text should be retrieved in * @return string Either $single or $plural translated text */function _n( $single, $plural, $number, $domain = 'default' ) {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number );	return apply_filters( 'ngettext', $translation, $single, $plural, $number, $domain );}/** * A hybrid of _n() and _x(). It supports contexts and plurals. * * @see _n() * @see _x() * */function _nx($single, $plural, $number, $context, $domain = 'default') {	$translations = &get_translations_for_domain( $domain );	$translation = $translations->translate_plural( $single, $plural, $number, $context );	return apply_filters( 'ngettext_with_context', $translation, $single, $plural, $number, $context, $domain );}/** * Register plural strings in POT file, but don't translate them. * * Used when you want do keep structures with translatable plural strings and * use them later. * * Example: *  $messages = array( *  	'post' => _n_noop('%s post', '%s posts'), *  	'page' => _n_noop('%s pages', '%s pages') *  ); *  ... *  $message = $messages[$type]; *  $usable_text = sprintf(_n($message[0], $message[1], $count), $count); * * @since 2.5 * @param $single Single form to be i18ned * @param $plural Plural form to be i18ned * @return array array($single, $plural) */function _n_noop( $single, $plural ) {	return array( $single, $plural );}/** * Register plural strings with context in POT file, but don't translate them. * * @see _n_noop() */function _nx_noop( $single, $plural, $context ) {	return array( $single, $plural, $context );}/** * Loads a MO file into the domain $domain. * * If the domain already exists, the translations will be merged. If both * sets have the same string, the translation from the original value will be taken. * * On success, the .mo file will be placed in the $l10n global by $domain * and will be a MO object. * * @since 1.5.0 * @uses $l10n Gets list of domain translated string objects * * @param string $domain Unique identifier for retrieving translated strings * @param string $mofile Path to the .mo file * @return bool true on success, false on failure */function load_textdomain( $domain, $mofile ) {	global $l10n;	$plugin_override = apply_filters( 'override_load_textdomain', false, $domain, $mofile );	if ( true == $plugin_override ) {		return true;	}	do_action( 'load_textdomain', $domain, $mofile );	$mofile = apply_filters( 'load_textdomain_mofile', $mofile, $domain );	if ( !is_readable( $mofile ) ) return false;	$mo = new MO();	if ( !$mo->import_from_file( $mofile ) ) return false;	if ( isset( $l10n[$domain] ) )		$mo->merge_with( $l10n[$domain] );	$l10n[$domain] = &$mo;	return true;}/** * Unloads translations for a domain * * @since 3.0.0 * @param string $domain Textdomain to be unloaded * @return bool Whether textdomain was unloaded */function unload_textdomain( $domain ) {	global $l10n;	$plugin_override = apply_filters( 'override_unload_textdomain', false, $domain );	if ( $plugin_override )		return true;	do_action( 'unload_textdomain', $domain );	if ( isset( $l10n[$domain] ) ) {		unset( $l10n[$domain] );		return true;	}	return false;}/** * Loads default translated strings based on locale. * * Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The * translated (.mo) file is named based off of the locale. * * @since 1.5.0 */function load_default_textdomain() {	$locale = get_locale();	load_textdomain( 'default', WP_LANG_DIR . "/$locale.mo" );	if ( is_multisite() || ( defined( 'WP_NETWORK_ADMIN_PAGE' ) && WP_NETWORK_ADMIN_PAGE ) ) {		load_textdomain( 'default', WP_LANG_DIR . "/ms-$locale.mo" );	}}/** * Loads the plugin's translated strings. * * If the path is not given then it will be the root of the plugin directory. * The .mo file should be named based on the domain with a dash, and then the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings * @param string $abs_rel_path Optional. Relative path to ABSPATH of a folder, * 	where the .mo file resides. Deprecated, but still functional until 2.7 * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precendence over $abs_rel_path */function load_plugin_textdomain( $domain, $abs_rel_path = false, $plugin_rel_path = false ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	if ( false !== $plugin_rel_path	) {		$path = WP_PLUGIN_DIR . '/' . trim( $plugin_rel_path, '/' );	} else if ( false !== $abs_rel_path ) {		_deprecated_argument( __FUNCTION__, '2.7' );		$path = ABSPATH . trim( $abs_rel_path, '/' );	} else {		$path = WP_PLUGIN_DIR;	}	$mofile = $path . '/'. $domain . '-' . $locale . '.mo';	return load_textdomain( $domain, $mofile );}/** * Load the translated strings for a plugin residing in the mu-plugins dir. * * @since 3.0.0 * * @param string $domain Unique identifier for retrieving translated strings * @param strings $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which * the MO file resides. Defaults is empty string. */function load_muplugin_textdomain( $domain, $mu_plugin_rel_path = '' ) {	$locale = apply_filters( 'plugin_locale', get_locale(), $domain );	$path = WPMU_PLUGIN_DIR . '/' . ltrim( $mu_plugin_rel_path, '/' );	load_textdomain( $domain, trailingslashit( $path ) . "$domain-$locale.mo" );}/** * Loads the theme's translated strings. * * If the current locale exists as a .mo file in the theme's root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 1.5.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_template_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Loads the child themes translated strings. * * If the current locale exists as a .mo file in the child themes root directory, it * will be included in the translated strings by the $domain. * * The .mo files must be named based on the locale exactly. * * @since 2.9.0 * * @param string $domain Unique identifier for retrieving translated strings */function load_child_theme_textdomain( $domain, $path = false ) {	$locale = apply_filters( 'theme_locale', get_locale(), $domain );	$path = ( empty( $path ) ) ? get_stylesheet_directory() : $path;	$mofile = "$path/$locale.mo";	return load_textdomain($domain, $mofile);}/** * Returns the Translations instance for a domain. If there isn't one, * returns empty Translations instance. * * @param string $domain * @return object A Translation instance */function &get_translations_for_domain( $domain ) {	global $l10n;	if ( !isset( $l10n[$domain] ) ) {		$l10n[$domain] = &new NOOP_Translations;	}	return $l10n[$domain];}/** * Whether there are translations for the domain * * @since 3.0.0 * @param string $domain * @return bool Whether there are translations */function is_textdomain_loaded( $domain ) {	global $l10n;	return isset( $l10n[$domain] );}/** * Translates role name. Since the role names are in the database and * not in the source there are dummy gettext calls to get them into the POT * file and this function properly translates them back. * * The before_last_bar() call is needed, because older installs keep the roles * using the old context format: 'Role name|User role' and just skipping the * content after the last bar is easier than fixing them in the DB. New installs * won't suffer from that problem. */function translate_user_role( $name ) {	return translate_with_gettext_context( before_last_bar($name), 'User role' );}/** * Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR. * * @since 3.0.0 * * @param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR. * @return array Array of language codes or an empty array if no languages are present.  Language codes are formed by stripping the .mo extension from the language file names. */function get_available_languages( $dir = null ) {	$languages = array();	foreach( (array)glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file ) {		$lang_file = basename($lang_file, '.mo');		if ( 0 !== strpos( $lang_file, 'continents-cities' ) && 0 !== strpos( $lang_file, 'ms-' ) )			$languages[] = $lang_file;	}	return $languages;}
<?php/** * Widgets administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );/** WordPress Administration Widgets API */require_once(ABSPATH . 'wp-admin/includes/widgets.php');if ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ));wp_admin_css( 'widgets' );$widgets_access = get_user_setting( 'widgets_access' );if ( isset($_GET['widgets-access']) ) {	$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';	set_user_setting( 'widgets_access', $widgets_access );}if ( 'on' == $widgets_access )	add_filter( 'admin_body_class', create_function('', '{return " widgets_access ";}') );else	wp_enqueue_script('admin-widgets');do_action( 'sidebar_admin_setup' );$title = __( 'Widgets' );$parent_file = 'themes.php';$help = '	<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>	<p>' . __('Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>	<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>	<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>	<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>	<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Widgets_SubPanel" target="_blank">Widgets Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// register the inactive_widgets area as sidebarregister_sidebar(array(	'name' => __('Inactive Widgets'),	'id' => 'wp_inactive_widgets',	'description' => '',	'before_widget' => '',	'after_widget' => '',	'before_title' => '',	'after_title' => '',));// These are the widgets grouped by sidebar$sidebars_widgets = wp_get_sidebars_widgets();if ( empty( $sidebars_widgets ) )	$sidebars_widgets = wp_get_widget_defaults();// look for "lost" widgets, this has to run at least on each theme changefunction retrieve_widgets() {	global $wp_registered_widget_updates, $wp_registered_sidebars, $sidebars_widgets, $wp_registered_widgets;	$_sidebars_widgets = array();	$sidebars = array_keys($wp_registered_sidebars);	unset( $sidebars_widgets['array_version'] );	$old = array_keys($sidebars_widgets);	sort($old);	sort($sidebars);	if ( $old == $sidebars )		return;	// Move the known-good ones first	foreach ( $sidebars as $id ) {		if ( array_key_exists( $id, $sidebars_widgets ) ) {			$_sidebars_widgets[$id] = $sidebars_widgets[$id];			unset($sidebars_widgets[$id], $sidebars[$id]);		}	}	// if new theme has less sidebars than the old theme	if ( !empty($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $lost => $val ) {			if ( is_array($val) )				$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );		}	}	// discard invalid, theme-specific widgets from sidebars	$shown_widgets = array();	foreach ( $_sidebars_widgets as $sidebar => $widgets ) {		if ( !is_array($widgets) )			continue;		$_widgets = array();		foreach ( $widgets as $widget ) {			if ( isset($wp_registered_widgets[$widget]) )				$_widgets[] = $widget;		}		$_sidebars_widgets[$sidebar] = $_widgets;		$shown_widgets = array_merge($shown_widgets, $_widgets);	}	$sidebars_widgets = $_sidebars_widgets;	unset($_sidebars_widgets, $_widgets);	// find hidden/lost multi-widget instances	$lost_widgets = array();	foreach ( $wp_registered_widgets as $key => $val ) {		if ( in_array($key, $shown_widgets, true) )			continue;		$number = preg_replace('/.+?-([0-9]+)$/', '$1', $key);		if ( 2 > (int) $number )			continue;		$lost_widgets[] = $key;	}	$sidebars_widgets['wp_inactive_widgets'] = array_merge($lost_widgets, (array) $sidebars_widgets['wp_inactive_widgets']);	wp_set_sidebars_widgets($sidebars_widgets);}retrieve_widgets();if ( count($wp_registered_sidebars) == 1 ) {	// If only "wp_inactive_widgets" is defined the theme has no sidebars, die.	require_once( './admin-header.php' );?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>		<div class="error">			<p><?php _e( 'No Sidebars Defined' ); ?></p>		</div>		<p><?php _e( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href="http://codex.wordpress.org/Widgetizing_Themes">follow these instructions</a>.' ); ?></p>	</div><?php	require_once( './admin-footer.php' );	exit;}// We're saving a widget without jsif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {	$widget_id = $_POST['widget-id'];	check_admin_referer("save-delete-widget-$widget_id");	$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';	if ( $number ) {		foreach ( $_POST as $key => $val ) {			if ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {				$_POST[$key] = array( $number => array_shift($val) );				break;			}		}	}	$sidebar_id = $_POST['sidebar'];	$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;	$id_base = $_POST['id_base'];	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();	// delete	if ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {		if ( !in_array($widget_id, $sidebar, true) ) {			wp_redirect('widgets.php?error=0');			exit;		}		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name != $id_base || !is_callable($control['callback']) )			continue;		ob_start();			call_user_func_array( $control['callback'], $control['params'] );		ob_end_clean();		break;	}	$sidebars_widgets[$sidebar_id] = $sidebar;	// remove old position	if ( !isset($_POST['delete_widget']) ) {		foreach ( $sidebars_widgets as $key => $sb ) {			if ( is_array($sb) )				$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );		}		array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );	}	wp_set_sidebars_widgets($sidebars_widgets);	wp_redirect('widgets.php?message=0');	exit;}// Output the widget form without jsif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {	$widget_id = $_GET['editwidget'];	if ( isset($_GET['addnew']) ) {		// Default to the first sidebar		$sidebar = array_shift( $keys = array_keys($wp_registered_sidebars) );		if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget			// Copy minimal info from an existing instance of this widget to a new instance			foreach ( $wp_registered_widget_controls as $control ) {				if ( $_GET['base'] === $control['id_base'] ) {					$control_callback = $control['callback'];					$multi_number = (int) $_GET['num'];					$control['params'][0]['number'] = -1;					$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;					$wp_registered_widget_controls[$control['id']] = $control;					break;				}			}		}	}	if ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {		$control = $wp_registered_widget_controls[$widget_id];		$control_callback = $control['callback'];	} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {		$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );	}	if ( !isset($name) )		$name = esc_html( strip_tags($control['name']) );	if ( !isset($sidebar) )		$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';	if ( !isset($multi_number) )		$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];	// show the widget form	$width = ' style="width:' . max($control['width'], 350) . 'px"';	$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;	require_once( './admin-header.php' ); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<div class="editwidget"<?php echo $width; ?>>	<h3><?php printf( __( 'Widget %s' ), $name ); ?></h3>	<form action="widgets.php" method="post">	<div class="widget-inside"><?php	if ( is_callable( $control_callback ) )		call_user_func_array( $control_callback, $control['params'] );	else		echo '<p>' . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<p class="describe"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>	<div class="widget-position">	<table class="widefat"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody><?php	foreach ( $wp_registered_sidebars as $sbname => $sbvalue ) {		echo "\t\t<tr><td><label><input type='radio' name='sidebar' value='" . esc_attr($sbname) . "'" . checked( $sbname, $sidebar, false ) . " /> $sbvalue[name]</label></td><td>";		if ( 'wp_inactive_widgets' == $sbname ) {			echo '&nbsp;';		} else {			if ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {				$j = 1;				$sidebars_widgets[$sbname] = array();			} else {				$j = count($sidebars_widgets[$sbname]);				if ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )					$j++;			}			$selected = '';			echo "\t\t<select name='{$sbname}_position'>\n";			echo "\t\t<option value=''>" . __('&mdash; Select &mdash;') . "</option>\n";			for ( $i = 1; $i <= $j; $i++ ) {				if ( in_array($widget_id, $sidebars_widgets[$sbname], true) )					$selected = selected( $i, $key + 1, false );				echo "\t\t<option value='$i'$selected> $i </option>\n";			}			echo "\t\t</select>\n";		}		echo "</td></tr>\n";	} ?>	</tbody></table>	</div>	<div class="widget-control-actions"><?php	if ( isset($_GET['addnew']) ) { ?>	<a href="widgets.php" class="button alignleft"><?php _e('Cancel'); ?></a><?php	} else { ?>	<input type="submit" name="removewidget" class="button alignleft" value="<?php esc_attr_e('Delete'); ?>" /><?php	} ?>	<input type="submit" name="savewidget" class="button-primary alignright" value="<?php esc_attr_e('Save Widget'); ?>" />	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($widget_id); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" /><?php	wp_nonce_field("save-delete-widget-$widget_id"); ?>	<br class="clear" />	</div>	</form>	</div>	</div><?php	require_once( './admin-footer.php' );	exit;}$messages = array(	__('Changes saved.'));$errors = array(	__('Error while saving.'),	__('Error in displaying the widget settings form.'));require_once( './admin-header.php' ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?><div id="message" class="updated"><p><?php echo $messages[$_GET['message']]; ?></p></div><?php } ?><?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?><div id="message" class="error"><p><?php echo $errors[$_GET['error']]; ?></p></div><?php } ?><?php do_action( 'widgets_admin_page' ); ?><div class="widget-liquid-left"><div id="widgets-left">	<div id="available-widgets" class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Available Widgets'); ?> <span id="removing-widget"><?php _e('Deactivate'); ?> <span></span></span></h3></div>		<div class="widget-holder">		<p class="description"><?php _e('Drag widgets from here to a sidebar on the right to activate them. Drag widgets back here to deactivate them and delete their settings.'); ?></p>		<div id="widget-list">		<?php wp_list_widgets(); ?>		</div>		<br class='clear' />		</div>		<br class="clear" />	</div>	<div class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Inactive Widgets'); ?>		<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>		<div class="widget-holder inactive">		<p class="description"><?php _e('Drag widgets here to remove them from the sidebar but keep their settings.'); ?></p>		<?php wp_list_widget_controls('wp_inactive_widgets'); ?>		<br class="clear" />		</div>	</div></div></div><div class="widget-liquid-right"><div id="widgets-right"><?php$i = 0;foreach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {	if ( 'wp_inactive_widgets' == $sidebar )		continue;	$closed = $i ? ' closed' : ''; ?>	<div class="widgets-holder-wrap<?php echo $closed; ?>">	<div class="sidebar-name">	<div class="sidebar-name-arrow"><br /></div>	<h3><?php echo esc_html( $registered_sidebar['name'] ); ?>	<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_dark.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>	<?php wp_list_widget_controls( $sidebar ); // Show the control forms for each of the widgets in this sidebar ?>	</div><?php	$i++;} ?></div></div><form action="" method="post"><?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?></form><br class="clear" /></div><?phpdo_action( 'sidebar_admin_page' );require_once( './admin-footer.php' );
<?php/** * These functions are needed to load Multisite. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite *//** * Whether a subdomain configuration is enabled. * * @since 3.0.0 * * @return bool True if subdomain configuration is enabled, false otherwise. */function is_subdomain_install() {	if ( defined('SUBDOMAIN_INSTALL') )		return SUBDOMAIN_INSTALL;	if ( defined('VHOST') && VHOST == 'yes' )		return true;	return false;}/** * Checks status of current blog. * * Checks if the blog is deleted, inactive, archived, or spammed. * * Dies with a default message if the blog does not pass the check. * * To change the default message when a blog does not pass the check, * use the wp-content/blog-deleted.php, blog-inactive.php and * blog-suspended.php drop-ins. * * @return bool|string Returns true on success, or drop-in file to include. */function ms_site_check() {	global $wpdb, $current_blog;	// Allow short-circuiting	$check = apply_filters('ms_site_check', null);	if ( null !== $check )		return true;	// Allow super admins to see blocked sites	if ( is_super_admin() )		return true;	if ( '1' == $current_blog->deleted ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-deleted.php' ) ) {			return WP_CONTENT_DIR . '/blog-deleted.php';		} else {			header( 'HTTP/1.1 410 Gone' );			wp_die( /*WP_I18N_USER_DELETED_BLOG*/'This user has elected to delete their account and the content is no longer available.'/*/WP_I18N_USER_DELETED_BLOG*/ );		}	}	if ( '2' == $current_blog->deleted ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-inactive.php' ) )			return WP_CONTENT_DIR . '/blog-inactive.php';		else			wp_die( sprintf( /*WP_I18N_BLOG_NOT_ACTIVATED*/'This site has not been activated yet. If you are having problems activating your site, please contact <a href="mailto:%1$s">%1$s</a>.'/*/WP_I18N_BLOG_NOT_ACTIVATED*/, str_replace( '@', ' AT ', get_site_option( 'admin_email', "support@{$current_site->domain}" ) ) ) );	}	if ( $current_blog->archived == '1' || $current_blog->spam == '1' ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-suspended.php' ) ) {			return WP_CONTENT_DIR . '/blog-suspended.php';		} else {			header( 'HTTP/1.1 410 Gone' );			wp_die( /*WP_I18N_ARCHIVED*/'This site has been archived or suspended.'/*/WP_I18N_ARCHIVED*/ );		}	}	return true;}/** * Sets current site name. * * @access private * @since 3.0.0 * @return object $current_site object with site_name */function get_current_site_name( $current_site ) {	global $wpdb;	$current_site->site_name = wp_cache_get( $current_site->id . ':current_site_name', 'site-options' );	if ( ! $current_site->site_name ) {		$current_site->site_name = wp_cache_get( $current_site->id . ':site_name', 'site-options' );		if ( ! $current_site->site_name ) {			$current_site->site_name = $wpdb->get_var( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = %d AND meta_key = 'site_name'", $current_site->id ) );			if ( ! $current_site->site_name )				$current_site->site_name = ucfirst( $current_site->domain );		}		wp_cache_set( $current_site->id . ':current_site_name', $current_site->site_name, 'site-options' );	}	return $current_site;}/** * Sets current_site object. * * @access private * @since 3.0.0 * @return object $current_site object */function wpmu_current_site() {	global $wpdb, $current_site, $domain, $path, $sites, $cookie_domain;	if ( defined( 'DOMAIN_CURRENT_SITE' ) && defined( 'PATH_CURRENT_SITE' ) ) {		$current_site->id = defined( 'SITE_ID_CURRENT_SITE' ) ? SITE_ID_CURRENT_SITE : 1;		$current_site->domain = DOMAIN_CURRENT_SITE;		$current_site->path   = $path = PATH_CURRENT_SITE;		if ( defined( 'BLOG_ID_CURRENT_SITE' ) )			$current_site->blog_id = BLOG_ID_CURRENT_SITE;		elseif ( defined( 'BLOGID_CURRENT_SITE' ) ) // deprecated.			$current_site->blog_id = BLOGID_CURRENT_SITE;		if ( DOMAIN_CURRENT_SITE == $domain )			$current_site->cookie_domain = $cookie_domain;		elseif ( substr( $current_site->domain, 0, 4 ) == 'www.' )			$current_site->cookie_domain = substr( $current_site->domain, 4 );		else			$current_site->cookie_domain = $current_site->domain;		wp_load_core_site_options( $current_site->id );		return $current_site;	}	$current_site = wp_cache_get( 'current_site', 'site-options' );	if ( $current_site )		return $current_site;	$sites = $wpdb->get_results( "SELECT * FROM $wpdb->site" ); // usually only one site	if ( 1 == count( $sites ) ) {		$current_site = $sites[0];		wp_load_core_site_options( $current_site->id );		$path = $current_site->path;		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );		$current_site = get_current_site_name( $current_site );		if ( substr( $current_site->domain, 0, 4 ) == 'www.' )			$current_site->cookie_domain = substr( $current_site->domain, 4 );		wp_cache_set( 'current_site', $current_site, 'site-options' );		return $current_site;	}	$path = substr( $_SERVER[ 'REQUEST_URI' ], 0, 1 + strpos( $_SERVER[ 'REQUEST_URI' ], '/', 1 ) );	if ( $domain == $cookie_domain )		$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE domain = %s AND path = %s", $domain, $path ) );	else		$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE domain IN ( %s, %s ) AND path = %s ORDER BY CHAR_LENGTH( domain ) DESC LIMIT 1", $domain, $cookie_domain, $path ) );	if ( ! $current_site ) {		if ( $domain == $cookie_domain )			$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path='/'", $domain ) );		else			$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain IN ( %s, %s ) AND path = '/' ORDER BY CHAR_LENGTH( domain ) DESC LIMIT 1", $domain, $cookie_domain, $path ) );	}	if ( $current_site ) {		$path = $current_site->path;		$current_site->cookie_domain = $cookie_domain;		return $current_site;	}	if ( is_subdomain_install() ) {		$sitedomain = substr( $domain, 1 + strpos( $domain, '.' ) );		$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path) );		if ( $current_site ) {			$current_site->cookie_domain = $current_site->domain;			return $current_site;		}		$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path='/'", $sitedomain) );	}	if ( $current_site || defined( 'WP_INSTALLING' ) ) {		$path = '/';		return $current_site;	}	// Still no dice.	// @todo Update or remove WPMU codex link.	if ( 1 == count( $sites ) )		wp_die( sprintf( /*WP_I18N_BLOG_DOESNT_EXIST*/'That site does not exist. Please try <a href="%s">%s</a>.'/*/WP_I18N_BLOG_DOESNT_EXIST*/, $sites[0]->domain . $sites[0]->path ) );	else		wp_die( /*WP_I18N_NO_SITE_DEFINED*/'No site defined on this host. If you are the owner of this site, please check <a href="http://codex.wordpress.org/Debugging_WPMU">Debugging WPMU</a> for help.'/*/WP_I18N_NO_SITE_DEFINED*/ );}/** * Displays a failure message. * * Used when a blog's tables do not exist. Checks for a missing $wpdb->site table as well. * * @todo update Codex link for 3.0.0 * * @access private * @since 3.0.0 */function ms_not_installed() {	global $wpdb, $domain, $path;	$title = /*WP_I18N_FATAL_ERROR*/'Error establishing database connection'/*/WP_I18N_FATAL_ERROR*/;	$msg  = '<h1>' . $title . '</h1>';	if ( ! is_admin() )		die( $msg );	$msg .= '<p>' . /*WP_I18N_CONTACT_OWNER*/'If your site does not display, please contact the owner of this network.'/*/WP_I18N_CONTACT_OWNER*/ . '';	$msg .= ' ' . /*WP_I18N_CHECK_MYSQL*/'If you are the owner of this network please check that MySQL is running properly and all tables are error free.'/*/WP_I18N_CHECK_MYSQL*/ . '</p>';	if ( false && !$wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		$msg .= '<p>' . sprintf( /*WP_I18N_TABLES_MISSING_LONG*/'<strong>Database tables are missing.</strong> This means that MySQL is not running, WordPress was not installed properly, or someone deleted <code>%s</code>. You really should look at your database now.'/*/WP_I18N_TABLES_MISSING_LONG*/, $wpdb->site ) . '</p>';	else		$msg .= '<p>' . sprintf( /*WP_I18N_NO_SITE_FOUND*/'<strong>Could not find site <code>%1$s</code>.</strong> Searched for table <code>%2$s</code> in database <code>%3$s</code>. Is that right?'/*/WP_I18N_NO_SITE_FOUND*/, rtrim( $domain . $path, '/' ), $wpdb->blogs, DB_NAME ) . '</p>';	$msg .= '<p><strong>' . /*WP_I18N_WHAT_DO_I_DO*/'What do I do now?'/*WP_I18N_WHAT_DO_I_DO*/ . '</strong> ';	$msg .= /*WP_I18N_RTFM*/'Read the <a target="_blank" href="http://codex.wordpress.org/Debugging_WPMU">bug report</a> page. Some of the guidelines there may help you figure out what went wrong.'/*/WP_I18N_RTFM*/;	$msg .= ' ' . /*WP_I18N_STUCK*/'If you&#8217;re still stuck with this message, then check that your database contains the following tables:'/*/WP_I18N_STUCK*/ . '</p><ul>';	foreach ( $wpdb->tables('global') as $t => $table ) {		if ( 'sitecategories' == $t )			continue;		$msg .= '<li>' . $table . '</li>';	}	$msg .= '</ul>';	wp_die( $msg, $title );}?>
<?php/** * Media settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Media Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can set maximum sizes for images inserted into your written content; you can also insert an image as Full Size.') . '</p>' .	'<p>' . __('The Embed option allows you embed a video, image, or other media content into your content automatically by typing the URL (of the web page where the file lives) on its own line when you create your content.') . '</p>' .	'<p>' . __('Uploading Options gives you folder and path choices for storing your files in your installation&#8217;s directory.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Media_SubPanel" target="_blank">Documentation on Media Settings</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form action="options.php" method="post"><?php settings_fields('media'); ?><h3><?php _e('Image sizes') ?></h3><p><?php _e('The sizes listed below determine the maximum dimensions in pixels to use when inserting an image into the body of a post.'); ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Thumbnail size') ?></th><td><label for="thumbnail_size_w"><?php _e('Width'); ?></label><input name="thumbnail_size_w" type="text" id="thumbnail_size_w" value="<?php form_option('thumbnail_size_w'); ?>" class="small-text" /><label for="thumbnail_size_h"><?php _e('Height'); ?></label><input name="thumbnail_size_h" type="text" id="thumbnail_size_h" value="<?php form_option('thumbnail_size_h'); ?>" class="small-text" /><br /><input name="thumbnail_crop" type="checkbox" id="thumbnail_crop" value="1" <?php checked('1', get_option('thumbnail_crop')); ?>/><label for="thumbnail_crop"><?php _e('Crop thumbnail to exact dimensions (normally thumbnails are proportional)'); ?></label></td></tr><tr valign="top"><th scope="row"><?php _e('Medium size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Medium size'); ?></span></legend><label for="medium_size_w"><?php _e('Max Width'); ?></label><input name="medium_size_w" type="text" id="medium_size_w" value="<?php form_option('medium_size_w'); ?>" class="small-text" /><label for="medium_size_h"><?php _e('Max Height'); ?></label><input name="medium_size_h" type="text" id="medium_size_h" value="<?php form_option('medium_size_h'); ?>" class="small-text" /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Large size') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Large size'); ?></span></legend><label for="large_size_w"><?php _e('Max Width'); ?></label><input name="large_size_w" type="text" id="large_size_w" value="<?php form_option('large_size_w'); ?>" class="small-text" /><label for="large_size_h"><?php _e('Max Height'); ?></label><input name="large_size_h" type="text" id="large_size_h" value="<?php form_option('large_size_h'); ?>" class="small-text" /></fieldset></td></tr><?php do_settings_fields('media', 'default'); ?></table><h3><?php _e('Embeds') ?></h3><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Auto-embeds'); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Attempt to automatically embed all plain text URLs'); ?></span></legend><label for="embed_autourls"><input name="embed_autourls" type="checkbox" id="embed_autourls" value="1" <?php checked( '1', get_option('embed_autourls') ); ?>/> <?php _e('Attempt to automatically embed all plain text URLs'); ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum embed size') ?></th><td><label for="embed_size_w"><?php _e('Width'); ?></label><input name="embed_size_w" type="text" id="embed_size_w" value="<?php form_option('embed_size_w'); ?>" class="small-text" /><label for="embed_size_h"><?php _e('Height'); ?></label><input name="embed_size_h" type="text" id="embed_size_h" value="<?php form_option('embed_size_h'); ?>" class="small-text" /><?php if ( !empty($content_width) ) echo '<br />' . __("If the width value is left blank, embeds will default to the max width of your theme."); ?></td></tr><?php do_settings_fields('media', 'embeds'); ?></table><?php if ( !is_multisite() ) : ?><h3><?php _e('Uploading Files'); ?></h3><table class="form-table"><tr valign="top"><th scope="row"><label for="upload_path"><?php _e('Store uploads in this folder'); ?></label></th><td><input name="upload_path" type="text" id="upload_path" value="<?php echo esc_attr(get_option('upload_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Default is <code>wp-content/uploads</code>'); ?></span></td></tr><tr valign="top"><th scope="row"><label for="upload_url_path"><?php _e('Full URL path to files'); ?></label></th><td><input name="upload_url_path" type="text" id="upload_url_path" value="<?php echo esc_attr( get_option('upload_url_path')); ?>" class="regular-text code" /><span class="description"><?php _e('Configuring this is optional. By default, it should be blank.'); ?></span></td></tr><tr><th scope="row" colspan="2" class="th-full"><label for="uploads_use_yearmonth_folders"><input name="uploads_use_yearmonth_folders" type="checkbox" id="uploads_use_yearmonth_folders" value="1"<?php checked('1', get_option('uploads_use_yearmonth_folders')); ?> /><?php _e('Organize my uploads into month- and year-based folders'); ?></label></th></tr><?php do_settings_fields('media', 'uploads'); ?></table><?php endif; ?><?php do_settings_sections('media'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * Edit links form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( ! empty($link_id) ) {	$heading = sprintf( __( '<a href="%s">Links</a> / Edit Link' ), 'link-manager.php' );	$submit_text = __('Update Link');	$form = '<form name="editlink" id="editlink" method="post" action="link.php">';	$nonce_action = 'update-bookmark_' . $link_id;} else {	$heading = sprintf( __( '<a href="%s">Links</a> / Add New Link' ), 'link-manager.php' );	$submit_text = __('Add Link');	$form = '<form name="addlink" id="addlink" method="post" action="link.php">';	$nonce_action = 'add-bookmark';}require_once('./includes/meta-boxes.php');add_meta_box('linksubmitdiv', __('Save'), 'link_submit_meta_box', 'link', 'side', 'core');add_meta_box('linkcategorydiv', __('Categories'), 'link_categories_meta_box', 'link', 'normal', 'core');add_meta_box('linktargetdiv', __('Target'), 'link_target_meta_box', 'link', 'normal', 'core');add_meta_box('linkxfndiv', __('Link Relationship (XFN)'), 'link_xfn_meta_box', 'link', 'normal', 'core');add_meta_box('linkadvanceddiv', __('Advanced'), 'link_advanced_meta_box', 'link', 'normal', 'core');do_action('add_meta_boxes', 'link', $link);do_action('add_meta_boxes_link', $link);do_action('do_meta_boxes', 'link', 'normal', $link);do_action('do_meta_boxes', 'link', 'advanced', $link);do_action('do_meta_boxes', 'link', 'side', $link);add_contextual_help($current_screen,	'<p>' . __( 'You can add or edit links on this screen by entering information in each of the boxes. Only the link&#8217;s web address and name (the text you want to display on your site as the link) are required fields.' ) . '</p>' .	'<p>' . __( 'The boxes for link name, web address, and description have fixed positions, while the others may be repositioned using drag and drop. You can also hide boxes you don&#8217;t use in the Screen Options tab, or minimize boxes by clicking on the title bar of the box.' ) . '</p>' .	'<p>' . __( 'XFN stands for <a href="http://gmpg.org/xfn/" target="_blank">XHTML Friends Network</a>, which is optional. WordPress allows the generation of XFN attributes to show how you are related to the authors/owners of the site to which you are linking.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Links_Add_New_SubPanel" target="_blank">Documentation on Creating Links</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>');require_once ('admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset( $_GET['added'] ) ) : ?><div id="message" class="updated"><p><?php _e('Link added.'); ?></p></div><?php endif; ?><?phpif ( !empty($form) )	echo $form;if ( !empty($link_added) )	echo $link_added;wp_nonce_field( $nonce_action );wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false ); ?><div id="poststuff" class="metabox-holder<?php echo 2 == $screen_layout_columns ? ' has-right-sidebar' : ''; ?>"><div id="side-info-column" class="inner-sidebar"><?phpdo_action('submitlink_box');$side_meta_boxes = do_meta_boxes( 'link', 'side', $link );?></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="link_name"><?php _e('Name') ?></label></h3><div class="inside">	<input type="text" name="link_name" size="30" tabindex="1" value="<?php echo esc_attr($link->link_name); ?>" id="link_name" />    <p><?php _e('Example: Nifty blogging software'); ?></p></div></div><div id="addressdiv" class="stuffbox"><h3><label for="link_url"><?php _e('Web Address') ?></label></h3><div class="inside">	<input type="text" name="link_url" size="30" class="code" tabindex="1" value="<?php echo esc_attr($link->link_url); ?>" id="link_url" />    <p><?php _e('Example: <code>http://wordpress.org/</code> &#8212; don&#8217;t forget the <code>http://</code>'); ?></p></div></div><div id="descriptiondiv" class="stuffbox"><h3><label for="link_description"><?php _e('Description') ?></label></h3><div class="inside">	<input type="text" name="link_description" size="30" tabindex="1" value="<?php echo isset($link->link_description) ? esc_attr($link->link_description) : ''; ?>" id="link_description" />    <p><?php _e('This will be shown when someone hovers over the link in the blogroll, or optionally below the link.'); ?></p></div></div><?phpdo_meta_boxes('link', 'normal', $link);do_meta_boxes('link', 'advanced', $link);if ( $link_id ) : ?><input type="hidden" name="action" value="save" /><input type="hidden" name="link_id" value="<?php echo (int) $link_id; ?>" /><input type="hidden" name="order_by" value="<?php echo esc_attr($order_by); ?>" /><input type="hidden" name="cat_id" value="<?php echo (int) $cat_id ?>" /><?php else: ?><input type="hidden" name="action" value="add" /><?php endif; ?></div></div></div></form></div>
<?php// Silence is golden.?>
<?php/** * Displays Administration Menu. * * @package WordPress * @subpackage Administration *//** * The current page. * * @global string $self * @name $self * @var string */$self = preg_replace('|^.*/wp-admin/|i', '', $_SERVER['PHP_SELF']);$self = preg_replace('|^.*/plugins/|i', '', $self);$self = preg_replace('|^.*/mu-plugins/|i', '', $self);global $menu, $submenu, $parent_file; //For when admin-header is included from within a function.$parent_file = apply_filters("parent_file", $parent_file); // For plugins to move submenu tabs around.get_admin_page_parent();/** * Display menu. * * @access private * @since 2.7.0 * * @param array $menu * @param array $submenu * @param bool $submenu_as_parent */function _wp_menu_output( $menu, $submenu, $submenu_as_parent = true ) {	global $self, $parent_file, $submenu_file, $plugin_page, $pagenow, $typenow;	$first = true;	// 0 = name, 1 = capability, 2 = file, 3 = class, 4 = id, 5 = icon src	foreach ( $menu as $key => $item ) {		$admin_is_parent = false;		$class = array();		if ( $first ) {			$class[] = 'wp-first-item';			$first = false;		}		if ( !empty($submenu[$item[2]]) )			$class[] = 'wp-has-submenu';		if ( ( $parent_file && $item[2] == $parent_file ) || ( false === strpos($parent_file, '?') && $self == $item[2] ) ) {			if ( !empty($submenu[$item[2]]) )				$class[] = 'wp-has-current-submenu wp-menu-open';			else				$class[] = 'current';		}		if ( ! empty($item[4]) )			$class[] = $item[4];		$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';		$tabindex = ' tabindex="1"';		$id = ! empty($item[5]) ? ' id="' . preg_replace( '|[^a-zA-Z0-9_:.]|', '-', $item[5] ) . '"' : '';		$img = '';		if ( ! empty($item[6]) ) {			if ( 'div' === $item[6] )				$img = '<br />';			else				$img = '<img src="' . $item[6] . '" alt="" />';		}		$toggle = '<div class="wp-menu-toggle"><br /></div>';		$title = wptexturize($item[0]);		echo "\n\t<li$class$id>";		if ( false !== strpos($class, 'wp-menu-separator') ) {			echo '<a class="separator" href="?unfoldmenu=1"><br /></a>';		} elseif ( $submenu_as_parent && !empty($submenu[$item[2]]) ) {			$submenu[$item[2]] = array_values($submenu[$item[2]]);  // Re-index.			$menu_hook = get_plugin_page_hook($submenu[$item[2]][0][2], $item[2]);			$menu_file = $submenu[$item[2]][0][2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ( ('index.php' != $submenu[$item[2]][0][2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") ) || !empty($menu_hook)) {				$admin_is_parent = true;				echo "<div class='wp-menu-image'><a href='admin.php?page={$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='admin.php?page={$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='{$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			}		} else if ( current_user_can($item[1]) ) {			$menu_hook = get_plugin_page_hook($item[2], 'admin.php');			$menu_file = $item[2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ('index.php' != $item[2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") || !empty($menu_hook) ) {				$admin_is_parent = true;				echo "\n\t<div class='wp-menu-image'><a href='admin.php?page={$item[2]}'>$img</a></div>$toggle<a href='admin.php?page={$item[2]}'$class$tabindex>{$item[0]}</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$item[2]}'>$img</a></div>$toggle<a href='{$item[2]}'$class$tabindex>{$item[0]}</a>";			}		}		if ( !empty($submenu[$item[2]]) ) {			echo "\n\t<div class='wp-submenu'><div class='wp-submenu-head'>{$item[0]}</div><ul>";			$first = true;			foreach ( $submenu[$item[2]] as $sub_key => $sub_item ) {				if ( !current_user_can($sub_item[1]) )					continue;				$class = array();				if ( $first ) {					$class[] = 'wp-first-item';					$first = false;				}				$menu_file = $item[2];				if ( false !== $pos = strpos($menu_file, '?') )					$menu_file = substr($menu_file, 0, $pos);				// Handle current for post_type=post|page|foo pages, which won't match $self.				if ( !empty($typenow) )					$self_type = $self . '?post_type=' . $typenow;				else					$self_type = 'nothing';				if ( isset($submenu_file) ) {					if ( $submenu_file == $sub_item[2] )						$class[] = 'current';				// If plugin_page is set the parent must either match the current page or not physically exist.				// This allows plugin pages with the same hook to exist under different parents.				} else if ( (isset($plugin_page) && $plugin_page == $sub_item[2] && (!file_exists($menu_file) || ($item[2] == $self) || ($item[2] == $self_type))) || (!isset($plugin_page) && $self == $sub_item[2]) ) {					$class[] = 'current';				}				$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';				$menu_hook = get_plugin_page_hook($sub_item[2], $item[2]);				$sub_file = $sub_item[2];				if ( false !== $pos = strpos($sub_file, '?') )					$sub_file = substr($sub_file, 0, $pos);				$title = wptexturize($sub_item[0]);				if ( ( ('index.php' != $sub_item[2]) && file_exists(WP_PLUGIN_DIR . "/$sub_file") ) || ! empty($menu_hook) ) {					// If admin.php is the current page or if the parent exists as a file in the plugins or admin dir					if ( (!$admin_is_parent && file_exists(WP_PLUGIN_DIR . "/$menu_file") && !is_dir(WP_PLUGIN_DIR . "/{$item[2]}")) || file_exists($menu_file) )						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), $item[2] );					else						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), 'admin.php' );					$sub_item_url = esc_url($sub_item_url);					echo "<li$class><a href='$sub_item_url'$class$tabindex>$title</a></li>";				} else {					echo "<li$class><a href='{$sub_item[2]}'$class$tabindex>$title</a></li>";				}			}			echo "</ul></div>";		}		echo "</li>";	}}?><ul id="adminmenu"><?php_wp_menu_output( $menu, $submenu );do_action( 'adminmenu' );?></ul>
<?php/** * Creates the password cookie and redirects back to where the * visitor was before. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php');if ( get_magic_quotes_gpc() )	$_POST['post_password'] = stripslashes($_POST['post_password']);// 10 dayssetcookie('wp-postpass_' . COOKIEHASH, $_POST['post_password'], time() + 864000, COOKIEPATH);wp_safe_redirect(wp_get_referer());?>
<?php/** * Multisite network settings administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_options' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Options' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen sets and changes options for the network as a whole. The first site is the main site in the network and network options are pulled from that original site&#8217;s options.') . '</p>' .	'<p>' . __('Operational settings has fields for the network&#8217;s name and admin email.') . '</p>' .	'<p>' . __('Dashboard Site is an option to give a site to users who do not have a site on the system. Their default role is Subscriber, but that default can be changed. The Admin Notice Feed can provide a notice on all dashboards of the latest post via RSS or Atom, or provide no such notice if left blank.') . '</p>' .	'<p>' . __('Registration settings can disable/enable public signups. If you let others sign up for a site, install spam plugins. Spaces, not commas, should separate names banned as sites for this network.') . '</p>' .	'<p>' . __('New site settings are defaults applied when a new site is created in the network. These include welcome email for when a new site or user account is registered, and what&#8127;s put in the first post, page, comment, comment author, and comment URL.') . '</p>' .	'<p>' . __('Upload settings control the size of the uploaded files and the amount of available upload space for each site. You can change the default value for specific sites when you edit a particular site. Allowed file types are also listed (space separated only).') . '</p>' .	'<p>' . __('Checkboxes for media upload buttons set which are shown in the visual editor. If unchecked, a generic upload button is still visible; other media types can still be uploaded if on the allowed file types list.') . '</p>' .	'<p>' . __('Menu setting enables/disables the plugin menus from appearing for non super admins, so that only super admins, not site admins, have access to activate plugins.') . '</p>' .	'<p>' . __('Super admins can no longer be added on the Options screen. You must now go to the list of existing users on Super Admin > Users and click on Username or the Edit action link below that name. This goes to an Edit User page where you can check a box to grant super admin privileges.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Options_SubPanel" target="_blank">Network Options Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );if (isset($_GET['updated'])) {	?>	<div id="message" class="updated"><p><?php _e( 'Options saved.' ) ?></p></div>	<?php}?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e( 'Network Options' ) ?></h2>	<form method="post" action="ms-edit.php?action=siteoptions">		<?php wp_nonce_field( 'siteoptions' ); ?>		<h3><?php _e( 'Operational Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="site_name"><?php _e( 'Network Name' ) ?></label></th>				<td>					<input name="site_name" type="text" id="site_name" class="regular-text" value="<?php echo esc_attr( $current_site->site_name ) ?>" />					<br />					<?php _e( 'What you would like to call this website.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_email"><?php _e( 'Network Admin Email' ) ?></label></th>				<td>					<input name="admin_email" type="text" id="admin_email" class="regular-text" value="<?php echo esc_attr( get_site_option('admin_email') ) ?>" />					<br />					<?php printf( __( 'Registration and support emails will come from this address. An address such as <code>support@%s</code> is recommended.' ), $current_site->domain ); ?>				</td>			</tr>		</table>		<h3><?php _e( 'Dashboard Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="dashboard_blog"><?php _e( 'Dashboard Site' ) ?></label></th>				<td>					<?php					if ( $dashboard_blog = get_site_option( 'dashboard_blog' ) ) {						$details = get_blog_details( $dashboard_blog );						$blogname = untrailingslashit( sanitize_user( str_replace( '.', '', str_replace( $current_site->domain . $current_site->path, '', $details->domain . $details->path ) ) ) );					} else {						$blogname = '';					}?>					<input name="dashboard_blog_orig" type="hidden" id="dashboard_blog_orig" value="<?php echo esc_attr( $blogname ); ?>" />					<input name="dashboard_blog" type="text" id="dashboard_blog" value="<?php echo esc_attr( $blogname ); ?>" class="regular-text" />					<br />					<?php _e( 'Site path (&#8220;dashboard&#8221;, &#8220;control&#8221;, &#8220;manager&#8221;, etc.) or blog ID.<br />New users are added to this site as the user role defined below if they don&#8217;t have a site. Leave blank for the main site. Users with the Subscriber role on the old site will be moved to the new site if changed. The new site will be created if it does not exist.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="default_user_role"><?php _e( 'Dashboard User Default Role' ) ?></label></th>				<td>					<select name="default_user_role" id="default_user_role"><?php					wp_dropdown_roles( get_site_option( 'default_user_role', 'subscriber' ) );					?>					</select>					<br />					<?php _e( 'The default role for new users on the Dashboard site. &#8220;Subscriber&#8221; or &#8220;Contributor&#8221; roles are recommended.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_notice_feed"><?php _e( 'Admin Notice Feed' ) ?></label></th>				<td><input name="admin_notice_feed" class="large-text" type="text" id="admin_notice_feed" value="<?php echo esc_attr( get_site_option( 'admin_notice_feed' ) ) ?>" size="80" /><br />				<?php _e( 'Display the latest post from this RSS or Atom feed on all site dashboards. Leave blank to disable.' ); ?><br />				<?php if ( get_site_option( 'admin_notice_feed' ) != get_home_url( $current_site->id, 'feed/' ) )					echo __( 'A good one to use would be the feed from your main site: ' ) . esc_url( get_home_url( $current_site->id, 'feed/' ) ) ?></td>			</tr>		</table>		<h3><?php _e( 'Registration Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Allow new registrations' ) ?></th>				<?php				if ( !get_site_option( 'registration' ) )					update_site_option( 'registration', 'none' );				$reg = get_site_option( 'registration' );				?>				<td>					<label><input name="registration" type="radio" id="registration1" value="none"<?php checked( $reg, 'none') ?> /> <?php _e( 'Registration is disabled.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration2" value="user"<?php checked( $reg, 'user') ?> /> <?php _e( 'User accounts may be registered.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration3" value="blog"<?php checked( $reg, 'blog') ?> /> <?php _e( 'Logged in users may register new sites.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration4" value="all"<?php checked( $reg, 'all') ?> /> <?php _e( 'Both sites and user accounts can be registered.' ); ?></label><br />					<p><?php _e( 'Disable or enable registration and who or what can be registered. (Default is disabled.)' ); ?></p>					<?php if ( is_subdomain_install() ) {						echo '<p>' . __( 'If registration is disabled, please set <code>NOBLOGREDIRECT</code> in <code>wp-config.php</code> to a URL you will redirect visitors to if they visit a non-existent site.' ) . '</p>';					} ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Registration notification' ) ?></th>				<?php				if ( !get_site_option( 'registrationnotification' ) )					update_site_option( 'registrationnotification', 'yes' );				?>				<td>					<label><input name="registrationnotification" type="checkbox" id="registrationnotification" value="yes"<?php checked( get_site_option( 'registrationnotification' ), 'yes' ) ?> /> <?php _e( 'Send the network admin an email notification every time someone registers a site or user account.' ) ?></label>				</td>			</tr>			<tr valign="top" id="addnewusers">				<th scope="row"><?php _e( 'Add New Users' ) ?></th>				<td>					<label><input name="add_new_users" type="checkbox" id="add_new_users" value="1"<?php checked( get_site_option( 'add_new_users' ) ) ?> /> <?php _e( 'Allow site administrators to add new users to their site via the "Users->Add New" page.' ); ?></label>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="illegal_names"><?php _e( 'Banned Names' ) ?></label></th>				<td>					<input name="illegal_names" type="text" id="illegal_names" class="large-text" value="<?php echo esc_attr( implode( " ", get_site_option( 'illegal_names' ) ) ); ?>" size="45" />					<br />					<?php _e( 'Users are not allowed to register these sites. Separate names by spaces.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="limited_email_domains"><?php _e( 'Limited Email Registrations' ) ?></label></th>				<td>					<?php $limited_email_domains = get_site_option( 'limited_email_domains' );					$limited_email_domains = str_replace( ' ', "\n", $limited_email_domains ); ?>					<textarea name="limited_email_domains" id="limited_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( $limited_email_domains == '' ? '' : implode( "\n", (array) $limited_email_domains ) ); ?></textarea>					<br />					<?php _e( 'If you want to limit site registrations to certain domains. One domain per line.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="banned_email_domains"><?php _e('Banned Email Domains') ?></label></th>				<td>					<textarea name="banned_email_domains" id="banned_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( get_site_option( 'banned_email_domains' ) == '' ? '' : implode( "\n", (array) get_site_option( 'banned_email_domains' ) ) ); ?></textarea>					<br />					<?php _e( 'If you want to ban domains from site registrations. One domain per line.' ) ?>				</td>			</tr>		</table>		<h3><?php _e('New Site Settings'); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="welcome_email"><?php _e( 'Welcome Email' ) ?></label></th>				<td>					<textarea name="welcome_email" id="welcome_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new site owners.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="welcome_user_email"><?php _e( 'Welcome User Email' ) ?></label></th>				<td>					<textarea name="welcome_user_email" id="welcome_user_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_user_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new users.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_post"><?php _e( 'First Post' ) ?></label></th>				<td>					<textarea name="first_post" id="first_post" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'first_post' ) ) ) ?></textarea>					<br />					<?php _e( 'The first post on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_page"><?php _e( 'First Page' ) ?></label></th>				<td>					<textarea name="first_page" id="first_page" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_page') ) ) ?></textarea>					<br />					<?php _e( 'The first page on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment"><?php _e( 'First Comment' ) ?></label></th>				<td>					<textarea name="first_comment" id="first_comment" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_comment') ) ) ?></textarea>					<br />					<?php _e( 'The first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_author"><?php _e( 'First Comment Author' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_author" id="first_comment_author" value="<?php echo get_site_option('first_comment_author') ?>" />					<br />					<?php _e( 'The author of the first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_url"><?php _e( 'First Comment URL' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_url" id="first_comment_url" value="<?php echo esc_attr( get_site_option( 'first_comment_url' ) ) ?>" />					<br />					<?php _e( 'The URL for the first comment on a new site.' ) ?>				</td>			</tr>		</table>		<h3><?php _e( 'Upload Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Media upload buttons' ) ?></th>				<?php $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ); ?>				<td><label><input type="checkbox" id="mu_media_buttons_image" name="mu_media_buttons[image]" value="1"<?php checked( ! empty( $mu_media_buttons['image'] ) ) ?>/> <?php _e( 'Images' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_video" name="mu_media_buttons[video]" value="1"<?php checked( ! empty( $mu_media_buttons['video'] ) ) ?>/> <?php _e( 'Videos' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_audio" name="mu_media_buttons[audio]" value="1"<?php checked( ! empty( $mu_media_buttons['audio'] ) ) ?>/> <?php _e( 'Music' ); ?></label><br />				<?php _e( 'The media upload buttons to display on the &#8220;Write Post&#8221; page. Make sure you update the allowed upload file types below as well.' ); ?></td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Site upload space' ) ?></th>				<td>				<label><input type="checkbox" id="upload_space_check_disabled" name="upload_space_check_disabled" value="0"<?php checked( get_site_option( 'upload_space_check_disabled' ), 0 ) ?>/> <?php printf( __( 'Limit total size of files uploaded to %s MB' ), '</label><label><input name="blog_upload_space" type="text" id="blog_upload_space" value="' . esc_attr( get_site_option('blog_upload_space', 10) ) . '" size="3" />' ); ?></label><br />				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="upload_filetypes"><?php _e( 'Upload file types' ) ?></label></th>				<td><input name="upload_filetypes" type="text" id="upload_filetypes" class="large-text" value="<?php echo esc_attr( get_site_option('upload_filetypes', 'jpg jpeg png gif') ) ?>" size="45" /></td>			</tr>			<tr valign="top">				<th scope="row"><label for="fileupload_maxk"><?php _e( 'Max upload file size' ) ?></label></th>				<td><?php printf( _x( '%s KB', 'File size in kilobytes' ), '<input name="fileupload_maxk" type="text" id="fileupload_maxk" value="' . esc_attr( get_site_option( 'fileupload_maxk', 300 ) ) . '" size="5" />' ); ?></td>			</tr>		</table><?php		$languages = get_available_languages();		if ( ! empty( $languages ) ) {			$lang = get_site_option( 'WPLANG' );?>		<h3><?php _e( 'Network Wide Settings' ); ?></h3>		<div class="updated inline"><p><strong><?php _e( 'Notice:' ); ?></strong> <?php _e( 'These settings may be overridden by site owners.' ); ?></p></div>		<table class="form-table">			<?php				?>				<tr valign="top">					<th><label for="WPLANG"><?php _e( 'Default Language' ) ?></label></th>					<td>						<select name="WPLANG" id="WPLANG">							<?php mu_dropdown_languages( $languages, get_site_option( 'WPLANG' ) ); ?>						</select>					</td>				</tr>		</table><?php		} // languages?>		<h3><?php _e( 'Menu Settings' ); ?></h3>		<table id="menu" class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Enable administration menus' ); ?></th>				<td>			<?php			$menu_perms = get_site_option( 'menu_items' );			$menu_items = apply_filters( 'mu_menu_items', array( 'plugins' => __( 'Plugins' ) ) );			foreach ( (array) $menu_items as $key => $val ) {				echo "<label><input type='checkbox' name='menu_items[" . $key . "]' value='1'" .  ( isset( $menu_perms[$key] ) ? checked( $menu_perms[$key], '1', false ) : '' ) . " /> " . esc_html( $val ) . "</label><br/>";			}			?>				</td>			</tr>		</table>		<?php do_action( 'wpmu_options' ); // Add more options here ?>		<p class="submit"><input type="submit" class="button-primary" name="Submit" value="<?php esc_attr_e( 'Save Changes' ) ?>" /></p>	</form></div><?php include( './admin-footer.php' ); ?>
<?php/** * Media management action handler. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'upload.php';$submenu_file = 'upload.php';wp_reset_vars(array('action'));switch( $action ) :case 'editattachment' :	$attachment_id = (int) $_POST['attachment_id'];	check_admin_referer('media-form');	if ( !current_user_can('edit_post', $attachment_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$errors = media_upload_form_handler();	if ( empty($errors) ) {		$location = 'media.php';		if ( $referer = wp_get_original_referer() ) {			if ( false !== strpos($referer, 'upload.php') || ( url_to_postid($referer) == $attachment_id )  )				$location = $referer;		}		if ( false !== strpos($location, 'upload.php') ) {			$location = remove_query_arg('message', $location);			$location = add_query_arg('posted',	$attachment_id, $location);		} elseif ( false !== strpos($location, 'media.php') ) {			$location = add_query_arg('message', 'updated', $location);		}		wp_redirect($location);		exit;	}	// no breakcase 'edit' :	$title = __('Edit Media');	if ( empty($errors) )		$errors = null;	if ( empty( $_GET['attachment_id'] ) ) {		wp_redirect('upload.php');		exit();	}	$att_id = (int) $_GET['attachment_id'];	if ( !current_user_can('edit_post', $att_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$att = get_post($att_id);	if ( empty($att->ID) ) wp_die( __('You attempted to edit an attachment that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( $att->post_status == 'trash' ) wp_die( __('You can&#8217;t edit this attachment because it is in the Trash. Please move it out of the Trash and try again.') );	add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);	wp_enqueue_script( 'wp-ajax-response' );	wp_enqueue_script('image-edit');	wp_enqueue_style('imgareaselect');	require( './admin-header.php' );	$parent_file = 'upload.php';	$message = '';	$class = '';	if ( isset($_GET['message']) ) {		switch ( $_GET['message'] ) :		case 'updated' :			$message = __('Media attachment updated.');			$class = 'updated';			break;		endswitch;	}	if ( $message )		echo "<div id='message' class='$class'><p>$message</p></div>\n";?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Edit Media' ); ?></h2><form method="post" action="" class="media-upload-form" id="media-single-form"><p class="submit" style="padding-bottom: 0;"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /></p><div class="media-single"><div id='media-item-<?php echo $att_id; ?>' class='media-item'><?php echo get_media_item( $att_id, array( 'toggle' => false, 'send' => false, 'delete' => false, 'show_title' => false, 'errors' => $errors ) ); ?></div></div><p class="submit"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo isset($post_id) ? esc_attr($post_id) : ''; ?>" /><input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr($att_id); ?>" /><input type="hidden" name="action" value="editattachment" /><?php wp_original_referer_field(true, 'previous'); ?><?php wp_nonce_field('media-form'); ?></p></form></div><?php	require( './admin-footer.php' );	exit;default:	wp_redirect( 'upload.php' );	exit;endswitch;?>
<?php/** * WordPress Image Editor * * @package WordPress * @subpackage Administration */function wp_image_editor($post_id, $msg = false) {	$nonce = wp_create_nonce("image_editor-$post_id");	$meta = wp_get_attachment_metadata($post_id);	$thumb = image_get_intermediate_size($post_id, 'thumbnail');	$sub_sizes = isset($meta['sizes']) && is_array($meta['sizes']);	$note = '';	if ( is_array($meta) && isset($meta['width']) )		$big = max( $meta['width'], $meta['height'] );	else		die( __('Image data does not exist. Please re-upload the image.') );	$sizer = $big > 400 ? 400 / $big : 1;	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$can_restore = !empty($backup_sizes) && isset($backup_sizes['full-orig'])		&& $backup_sizes['full-orig']['file'] != basename($meta['file']);	if ( $msg ) {		if ( isset($msg->error) )			$note = "<div class='error'><p>$msg->error</p></div>";		elseif ( isset($msg->msg) )			$note = "<div class='updated'><p>$msg->msg</p></div>";	}	?>	<div class="imgedit-wrap">	<?php echo $note; ?>	<table id="imgedit-panel-<?php echo $post_id; ?>"><tbody>	<tr><td>	<div class="imgedit-menu">		<div onclick="imageEdit.crop(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-crop disabled" title="<?php esc_attr_e( 'Crop' ); ?>"></div><?php	// On some setups GD library does not provide imagerotate() - Ticket #11536	if ( function_exists('imagerotate') ) { ?>		<div class="imgedit-rleft"  onclick="imageEdit.rotate( 90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate counter-clockwise' ); ?>"></div>		<div class="imgedit-rright" onclick="imageEdit.rotate(-90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate clockwise' ); ?>"></div><?php } else {		$note_gdlib = esc_attr__('Image rotation is not supported by your web host (function imagerotate() is missing)');?>	    <div class="imgedit-rleft disabled"  title="<?php echo $note_gdlib; ?>"></div>	    <div class="imgedit-rright disabled" title="<?php echo $note_gdlib; ?>"></div><?php } ?>		<div onclick="imageEdit.flip(1, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-flipv" title="<?php esc_attr_e( 'Flip vertically' ); ?>"></div>		<div onclick="imageEdit.flip(2, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-fliph" title="<?php esc_attr_e( 'Flip horizontally' ); ?>"></div>		<div id="image-undo-<?php echo $post_id; ?>" onclick="imageEdit.undo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-undo disabled" title="<?php esc_attr_e( 'Undo' ); ?>"></div>		<div id="image-redo-<?php echo $post_id; ?>" onclick="imageEdit.redo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-redo disabled" title="<?php esc_attr_e( 'Redo' ); ?>"></div>		<br class="clear" />	</div>	<input type="hidden" id="imgedit-sizer-<?php echo $post_id; ?>" value="<?php echo $sizer; ?>" />	<input type="hidden" id="imgedit-minthumb-<?php echo $post_id; ?>" value="<?php echo ( get_option('thumbnail_size_w') . ':' . get_option('thumbnail_size_h') ); ?>" />	<input type="hidden" id="imgedit-history-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-undone-<?php echo $post_id; ?>" value="0" />	<input type="hidden" id="imgedit-selection-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-x-<?php echo $post_id; ?>" value="<?php echo $meta['width']; ?>" />	<input type="hidden" id="imgedit-y-<?php echo $post_id; ?>" value="<?php echo $meta['height']; ?>" />	<div id="imgedit-crop-<?php echo $post_id; ?>" class="imgedit-crop-wrap">	<img id="image-preview-<?php echo $post_id; ?>" onload="imageEdit.imgLoaded('<?php echo $post_id; ?>')" src="<?php echo admin_url('admin-ajax.php'); ?>?action=imgedit-preview&amp;_ajax_nonce=<?php echo $nonce; ?>&amp;postid=<?php echo $post_id; ?>&amp;rand=<?php echo rand(1, 99999); ?>" />	</div>	<div class="imgedit-submit">		<input type="button" onclick="imageEdit.close(<?php echo $post_id; ?>, 1)" class="button" value="<?php esc_attr_e( 'Cancel' ); ?>" />		<input type="button" onclick="imageEdit.save(<?php echo "$post_id, '$nonce'"; ?>)" disabled="disabled" class="button-primary imgedit-submit-btn" value="<?php esc_attr_e( 'Save' ); ?>" />	</div>	</td>	<td class="imgedit-settings">	<div class="imgedit-group">	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Scale Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('You can proportionally scale the original image. For best results the scaling should be done before performing any other operations on it like crop, rotate, etc. Note that if you make the image larger it may become fuzzy.'); ?></p>		<p><?php printf( __('Original dimensions %s'), $meta['width'] . '&times;' . $meta['height'] ); ?></p>		<div class="imgedit-submit">		<span class="nowrap"><input type="text" id="imgedit-scale-width-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" style="width:4em;" value="<?php echo $meta['width']; ?>" />&times;<input type="text" id="imgedit-scale-height-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" style="width:4em;" value="<?php echo $meta['height']; ?>" />		<span class="imgedit-scale-warn" id="imgedit-scale-warn-<?php echo $post_id; ?>">!</span></span>		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'scale')" class="button-primary" value="<?php esc_attr_e( 'Scale' ); ?>" />		</div>		</div>	</div><?php if ( $can_restore ) { ?>	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Restore Original Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('Discard any changes and restore the original image.');		if ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE )			echo ' '.__('Previously edited copies of the image will not be deleted.');		?></p>		<div class="imgedit-submit">		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'restore')" class="button-primary" value="<?php esc_attr_e( 'Restore image' ); ?>" <?php echo $can_restore; ?> />		</div>		</div>	</div><?php } ?>	</div>	<div class="imgedit-group">	<div class="imgedit-group-top">		<strong><?php _e('Image Crop'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<div class="imgedit-help">		<p><?php _e('The image can be cropped by clicking on it and dragging to select the desired part. While dragging the dimensions of the selection are displayed below.'); ?></p>		<strong><?php _e('Keyboard Shortcuts'); ?></strong>		<ul>		<li><?php _e('Arrow: move by 10px'); ?></li>		<li><?php _e('Shift + arrow: move by 1px'); ?></li>		<li><?php _e('Ctrl + arrow: resize by 10px'); ?></li>		<li><?php _e('Ctrl + Shift + arrow: resize by 1px'); ?></li>		<li><?php _e('Shift + drag: lock aspect ratio'); ?></li>		</ul>		<p><strong><?php _e('Crop Aspect Ratio'); ?></strong><br />		<?php _e('You can specify the crop selection aspect ratio then hold down the Shift key while dragging to lock it. The values can be 1:1 (square), 4:3, 16:9, etc. If there is a selection, specifying aspect ratio will set it immediately.'); ?></p>		<p><strong><?php _e('Crop Selection'); ?></strong><br />		<?php _e('Once started, the selection can be adjusted by entering new values (in pixels). Note that these values are scaled to approximately match the original image dimensions. The minimum selection size equals the thumbnail size as set in the Media settings.'); ?></p>		</div>	</div>	<p>		<?php _e('Aspect ratio:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-crop-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 0, this)" style="width:3em;" />		:		<input type="text" id="imgedit-crop-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 1, this)" style="width:3em;" />		</span>	</p>	<p id="imgedit-crop-sel-<?php echo $post_id; ?>">		<?php _e('Selection:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-sel-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		:		<input type="text" id="imgedit-sel-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		</span>	</p>	</div>	<?php if ( $thumb && $sub_sizes ) {		$thumb_img = wp_constrain_dimensions( $thumb['width'], $thumb['height'], 160, 120 );	?>	<div class="imgedit-group imgedit-applyto">	<div class="imgedit-group-top">		<strong><?php _e('Thumbnail Settings'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<p class="imgedit-help"><?php _e('The thumbnail image can be cropped differently. For example it can be square or contain only a portion of the original image to showcase it better. Here you can select whether to apply changes to all image sizes or make the thumbnail different.'); ?></p>	</div>	<p>		<img src="<?php echo $thumb['url']; ?>" width="<?php echo $thumb_img[0]; ?>" height="<?php echo $thumb_img[1]; ?>" class="imgedit-size-preview" alt="" /><br /><?php _e('Current thumbnail'); ?>	</p>	<p id="imgedit-save-target-<?php echo $post_id; ?>">		<strong><?php _e('Apply changes to:'); ?></strong><br />		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="all" checked="checked" />		<?php _e('All image sizes'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="thumbnail" />		<?php _e('Thumbnail'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="nothumb" />		<?php _e('All sizes except thumbnail'); ?></label>	</p>	</div>	<?php } ?>	</td></tr>	</tbody></table>	<div class="imgedit-wait" id="imgedit-wait-<?php echo $post_id; ?>"></div>	<script type="text/javascript">imageEdit.init(<?php echo $post_id; ?>);</script>	<div class="hidden" id="imgedit-leaving-<?php echo $post_id; ?>"><?php _e("There are unsaved changes that will be lost.  'OK' to continue, 'Cancel' to return to the Image Editor."); ?></div>	</div><?php}function load_image_to_edit($post_id, $mime_type, $size = 'full') {	$filepath = get_attached_file($post_id);	if ( $filepath && file_exists($filepath) ) {		if ( 'full' != $size && ( $data = image_get_intermediate_size($post_id, $size) ) )			$filepath = path_join( dirname($filepath), $data['file'] );	} elseif ( WP_Http_Fopen::test() ) {		$filepath = wp_get_attachment_url($post_id);	}	$filepath = apply_filters('load_image_to_edit_path', $filepath, $post_id, $size);	if ( empty($filepath) )		return false;	switch ( $mime_type ) {		case 'image/jpeg':			$image = imagecreatefromjpeg($filepath);			break;		case 'image/png':			$image = imagecreatefrompng($filepath);			break;		case 'image/gif':			$image = imagecreatefromgif($filepath);			break;		default:			$image = false;			break;	}	if ( is_resource($image) ) {		$image = apply_filters('load_image_to_edit', $image, $post_id, $size);		if ( function_exists('imagealphablending') && function_exists('imagesavealpha') ) {			imagealphablending($image, false);			imagesavealpha($image, true);		}	}	return $image;}function wp_stream_image($image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	switch ( $mime_type ) {		case 'image/jpeg':			header('Content-Type: image/jpeg');			return imagejpeg($image, null, 90);		case 'image/png':			header('Content-Type: image/png');			return imagepng($image);		case 'image/gif':			header('Content-Type: image/gif');			return imagegif($image);		default:			return false;	}}function wp_save_image_file($filename, $image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	$saved = apply_filters('wp_save_image_file', null, $filename, $image, $mime_type, $post_id);	if ( null !== $saved )		return $saved;	switch ( $mime_type ) {		case 'image/jpeg':			return imagejpeg( $image, $filename, apply_filters( 'jpeg_quality', 90, 'edit_image' ) );		case 'image/png':			return imagepng($image, $filename);		case 'image/gif':			return imagegif($image, $filename);		default:			return false;	}}function _image_get_preview_ratio($w, $h) {	$max = max($w, $h);	return $max > 400 ? (400 / $max) : 1;}function _rotate_image_resource($img, $angle) {	if ( function_exists('imagerotate') ) {		$rotated = imagerotate($img, $angle, 0);		if ( is_resource($rotated) ) {			imagedestroy($img);			$img = $rotated;		}	}	return $img;}function _flip_image_resource($img, $horz, $vert) {	$w = imagesx($img);	$h = imagesy($img);	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		$sx = $vert ? ($w - 1) : 0;		$sy = $horz ? ($h - 1) : 0;		$sw = $vert ? -$w : $w;		$sh = $horz ? -$h : $h;		if ( imagecopyresampled($dst, $img, 0, 0, $sx, $sy, $w, $h, $sw, $sh) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function _crop_image_resource($img, $x, $y, $w, $h) {	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		if ( imagecopy($dst, $img, 0, 0, $x, $y, $w, $h) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function image_edit_apply_changes($img, $changes) {	if ( !is_array($changes) )		return $img;	// expand change operations	foreach ( $changes as $key => $obj ) {		if ( isset($obj->r) ) {			$obj->type = 'rotate';			$obj->angle = $obj->r;			unset($obj->r);		} elseif ( isset($obj->f) ) {			$obj->type = 'flip';			$obj->axis = $obj->f;			unset($obj->f);		} elseif ( isset($obj->c) ) {			$obj->type = 'crop';			$obj->sel = $obj->c;			unset($obj->c);		}		$changes[$key] = $obj;	}	// combine operations	if ( count($changes) > 1 ) {		$filtered = array($changes[0]);		for ( $i = 0, $j = 1; $j < count($changes); $j++ ) {			$combined = false;			if ( $filtered[$i]->type == $changes[$j]->type ) {				switch ( $filtered[$i]->type ) {					case 'rotate':						$filtered[$i]->angle += $changes[$j]->angle;						$combined = true;						break;					case 'flip':						$filtered[$i]->axis ^= $changes[$j]->axis;						$combined = true;						break;				}			}			if ( !$combined )				$filtered[++$i] = $changes[$j];		}		$changes = $filtered;		unset($filtered);	}	// image resource before applying the changes	$img = apply_filters('image_edit_before_change', $img, $changes);	foreach ( $changes as $operation ) {		switch ( $operation->type ) {			case 'rotate':				if ( $operation->angle != 0 )					$img = _rotate_image_resource($img, $operation->angle);				break;			case 'flip':				if ( $operation->axis != 0 )					$img = _flip_image_resource($img, ($operation->axis & 1) != 0, ($operation->axis & 2) != 0);				break;			case 'crop':				$sel = $operation->sel;				$scale = 1 / _image_get_preview_ratio( imagesx($img), imagesy($img) ); // discard preview scaling				$img = _crop_image_resource($img, $sel->x * $scale, $sel->y * $scale, $sel->w * $scale, $sel->h * $scale);				break;		}	}	return $img;}function stream_preview_image($post_id) {	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit( $post_id, $post->post_mime_type, array(400, 400) );	if ( !is_resource($img) )		return false;	$changes = !empty($_REQUEST['history']) ? json_decode( stripslashes($_REQUEST['history']) ) : null;	if ( $changes )		$img = image_edit_apply_changes($img, $changes);	// scale the image	$w = imagesx($img);	$h = imagesy($img);	$ratio = _image_get_preview_ratio($w, $h);	$w2 = $w * $ratio;	$h2 = $h * $ratio;	$preview = wp_imagecreatetruecolor($w2, $h2);	imagecopyresampled( $preview, $img, 0, 0, 0, 0, $w2, $h2, $w, $h );	wp_stream_image($preview, $post->post_mime_type, $post_id);	imagedestroy($preview);	imagedestroy($img);	return true;}function wp_restore_image($post_id) {	$meta = wp_get_attachment_metadata($post_id);	$file = get_attached_file($post_id);	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$restored = false;	$msg = '';	if ( !is_array($backup_sizes) ) {		$msg->error = __('Cannot load image metadata.');		return $msg;	}	$parts = pathinfo($file);	$suffix = time() . rand(100, 999);	$default_sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );	if ( isset($backup_sizes['full-orig']) && is_array($backup_sizes['full-orig']) ) {		$data = $backup_sizes['full-orig'];		if ( $parts['basename'] != $data['file'] ) {			if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {				// delete only if it's edited image				if ( preg_match('/-e[0-9]{13}\./', $parts['basename']) ) {					$delpath = apply_filters('wp_delete_file', $file);					@unlink($delpath);				}			} else {				$backup_sizes["full-$suffix"] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $parts['basename']);			}		}		$restored_file = path_join($parts['dirname'], $data['file']);		$restored = update_attached_file($post_id, $restored_file);		$meta['file'] = _wp_relative_upload_path( $restored_file );		$meta['width'] = $data['width'];		$meta['height'] = $data['height'];		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";	}	foreach ( $default_sizes as $default_size ) {		if ( isset($backup_sizes["$default_size-orig"]) ) {			$data = $backup_sizes["$default_size-orig"];			if ( isset($meta['sizes'][$default_size]) && $meta['sizes'][$default_size]['file'] != $data['file'] ) {				if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {					// delete only if it's edited image					if ( preg_match('/-e[0-9]{13}-/', $meta['sizes'][$default_size]['file']) ) {						$delpath = apply_filters( 'wp_delete_file', path_join($parts['dirname'], $meta['sizes'][$default_size]['file']) );						@unlink($delpath);					}				} else {					$backup_sizes["$default_size-{$suffix}"] = $meta['sizes'][$default_size];				}			}			$meta['sizes'][$default_size] = $data;		} else {			unset($meta['sizes'][$default_size]);		}	}	if ( !wp_update_attachment_metadata($post_id, $meta) || !update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes) ) {		$msg->error = __('Cannot save image metadata.');		return $msg;	}	if ( !$restored )		$msg->error = __('Image metadata is inconsistent.');	else		$msg->msg = __('Image restored successfully.');	return $msg;}function wp_save_image($post_id) {	$return = '';	$success = $delete = $scaled = $nocrop = false;	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit($post_id, $post->post_mime_type);	if ( !is_resource($img) ) {		$return->error = esc_js( __('Unable to create new image.') );		return $return;	}	$fwidth = !empty($_REQUEST['fwidth']) ? intval($_REQUEST['fwidth']) : 0;	$fheight = !empty($_REQUEST['fheight']) ? intval($_REQUEST['fheight']) : 0;	$target = !empty($_REQUEST['target']) ? preg_replace('/[^a-z0-9_-]+/i', '', $_REQUEST['target']) : '';	$scale = !empty($_REQUEST['do']) && 'scale' == $_REQUEST['do'];	if ( $scale && $fwidth > 0 && $fheight > 0 ) {		$sX = imagesx($img);		$sY = imagesy($img);		// check if it has roughly the same w / h ratio		$diff = round($sX / $sY, 2) - round($fwidth / $fheight, 2);		if ( -0.1 < $diff && $diff < 0.1 ) {			// scale the full size image			$dst = wp_imagecreatetruecolor($fwidth, $fheight);			if ( imagecopyresampled( $dst, $img, 0, 0, 0, 0, $fwidth, $fheight, $sX, $sY ) ) {				imagedestroy($img);				$img = $dst;				$scaled = true;			}		}		if ( !$scaled ) {			$return->error = esc_js( __('Error while saving the scaled image. Please reload the page and try again.') );			return $return;		}	} elseif ( !empty($_REQUEST['history']) ) {		$changes = json_decode( stripslashes($_REQUEST['history']) );		if ( $changes )			$img = image_edit_apply_changes($img, $changes);	} else {		$return->error = esc_js( __('Nothing to save, the image has not changed.') );		return $return;	}	$meta = wp_get_attachment_metadata($post_id);	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	if ( !is_array($meta) ) {		$return->error = esc_js( __('Image data does not exist. Please re-upload the image.') );		return $return;	}	if ( !is_array($backup_sizes) )		$backup_sizes = array();	// generate new filename	$path = get_attached_file($post_id);	$path_parts = pathinfo52( $path );	$filename = $path_parts['filename'];	$suffix = time() . rand(100, 999);	if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE &&		isset($backup_sizes['full-orig']) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] ) {		if ( 'thumbnail' == $target )			$new_path = "{$path_parts['dirname']}/{$filename}-temp.{$path_parts['extension']}";		else			$new_path = $path;	} else {		while( true ) {			$filename = preg_replace( '/-e([0-9]+)$/', '', $filename );			$filename .= "-e{$suffix}";			$new_filename = "{$filename}.{$path_parts['extension']}";			$new_path = "{$path_parts['dirname']}/$new_filename";			if ( file_exists($new_path) )				$suffix++;			else				break;		}	}	// save the full-size file, also needed to create sub-sizes	if ( !wp_save_image_file($new_path, $img, $post->post_mime_type, $post_id) ) {		$return->error = esc_js( __('Unable to save the image.') );		return $return;	}	if ( 'nothumb' == $target || 'all' == $target || 'full' == $target || $scaled ) {		$tag = false;		if ( isset($backup_sizes['full-orig']) ) {			if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] )				$tag = "full-$suffix";		} else {			$tag = 'full-orig';		}		if ( $tag )			$backup_sizes[$tag] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $path_parts['basename']);		$success = update_attached_file($post_id, $new_path);		$meta['file'] = _wp_relative_upload_path($new_path);		$meta['width'] = imagesx($img);		$meta['height'] = imagesy($img);		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";		if ( $success && ('nothumb' == $target || 'all' == $target) ) {			$sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );			if ( 'nothumb' == $target )				$sizes = array_diff( $sizes, array('thumbnail') );		}		$return->fw = $meta['width'];		$return->fh = $meta['height'];	} elseif ( 'thumbnail' == $target ) {		$sizes = array( 'thumbnail' );		$success = $delete = $nocrop = true;	}	if ( isset($sizes) ) {		foreach ( $sizes as $size ) {			$tag = false;			if ( isset($meta['sizes'][$size]) ) {				if ( isset($backup_sizes["$size-orig"]) ) {					if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes["$size-orig"]['file'] != $meta['sizes'][$size]['file'] )						$tag = "$size-$suffix";				} else {					$tag = "$size-orig";				}				if ( $tag )					$backup_sizes[$tag] = $meta['sizes'][$size];			}			$crop = $nocrop ? false : get_option("{$size}_crop");			$resized = image_make_intermediate_size($new_path, get_option("{$size}_size_w"), get_option("{$size}_size_h"), $crop );			if ( $resized )				$meta['sizes'][$size] = $resized;			else				unset($meta['sizes'][$size]);		}	}	if ( $success ) {		wp_update_attachment_metadata($post_id, $meta);		update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes);		if ( $target == 'thumbnail' || $target == 'all' || $target == 'full' ) {			$file_url = wp_get_attachment_url($post_id);			if ( $thumb = $meta['sizes']['thumbnail'] )				$return->thumbnail = path_join( dirname($file_url), $thumb['file'] );			else				$return->thumbnail = "$file_url?w=128&h=128";		}	} else {		$delete = true;	}	if ( $delete ) {		$delpath = apply_filters('wp_delete_file', $new_path);		@unlink($delpath);	}	imagedestroy($img);	$return->msg = esc_js( __('Image saved') );	return $return;}
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * FTP implementation using fsockopen to connect. * * @package PemFTP * @subpackage Pure * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(false, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@stream_set_timeout($sock, $this->_timeout)) {			$this->PushError('_settimeout','socket set send timeout');			$this->_quit();			return FALSE;		}		return TRUE;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		$sock = @fsockopen($host, $port, $errno, $errstr, $this->_timeout);		if (!$sock) {			$this->PushError('_connect','socket connect failed', $errstr." (".$errno.")");			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction, 'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@fgets($this->_ftp_control_sock, 512);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed');			} else {				$this->_message.=$tmp;				if(preg_match("/^([0-9]{3})(-(.*[".CRLF."]{1,2})+\\1)? [^".CRLF."]+[".CRLF."]{1,2}$/", $this->_message, $regs)) $go=false;			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@fputs($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed');			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_data_sock=@fsockopen($this->_datahost, $this->_dataport, $errno, $errstr, $this->_timeout);			if(!$this->_ftp_data_sock) {				$this->PushError("_data_prepare","fsockopen fails", $errstr." (".$errno.")");				$this->_data_close();				return FALSE;			}			else $this->_ftp_data_sock;		} else {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		while (!feof($this->_ftp_data_sock)) {			$block=fread($this->_ftp_data_sock, $this->_ftp_buff_size);			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Only passive connections available!");			return FALSE;		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return TRUE;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@fwrite($this->_ftp_data_sock, $block))===FALSE) {				$this->PushError("_data_write","Can't write to socket");				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@fclose($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit($force=FALSE) {		if($this->_connected or $force) {			@fclose($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Base WordPress Filesystem. * * @package WordPress * @subpackage Filesystem *//** * Base WordPress Filesystem class for which Filesystem implementations extend * * @since 2.5 */class WP_Filesystem_Base {	/**	 * Whether to display debug data for the connection.	 *	 * @since 2.5	 * @access public	 * @var bool	 */	var $verbose = false;	/**	 * Cached list of local filepaths to maped remote filepaths.	 *	 * @since 2.7	 * @access private	 * @var array	 */	var $cache = array();	/**	 * The Access method of the current connection, Set automatically.	 *	 * @since 2.5	 * @access public	 * @var string	 */	var $method = '';	/**	 * Returns the path on the remote filesystem of ABSPATH	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function abspath() {		$folder = $this->find_folder(ABSPATH);		//Perhaps the FTP folder is rooted at the WordPress install, Check for wp-includes folder in root, Could have some false positives, but rare.		if ( ! $folder && $this->is_dir('/wp-includes') )			$folder = '/';		return $folder;	}	/**	 * Returns the path on the remote filesystem of WP_CONTENT_DIR	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function wp_content_dir() {		return $this->find_folder(WP_CONTENT_DIR);	}	/**	 * Returns the path on the remote filesystem of WP_PLUGIN_DIR	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_plugins_dir() {		return $this->find_folder(WP_PLUGIN_DIR);	}	/**	 * Returns the path on the remote filesystem of the Themes Directory	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_themes_dir() {		return $this->wp_content_dir() . '/themes';	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function find_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function get_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Assumes that on Windows systems, Stripping off the Drive letter is OK	 * Sanitizes \\ to / in windows filepaths.	 *	 * @since 2.7	 * @access public	 *	 * @param string $folder the folder to locate	 * @return string The location of the remote path.	 */	function find_folder($folder) {		if ( strpos($this->method, 'ftp') !== false ) {			$constant_overrides = array( 'FTP_BASE' => ABSPATH, 'FTP_CONTENT_DIR' => WP_CONTENT_DIR, 'FTP_PLUGIN_DIR' => WP_PLUGIN_DIR );			foreach ( $constant_overrides as $constant => $dir )				if ( defined($constant) && $folder === $dir )					return trailingslashit(constant($constant));		} elseif ( 'direct' == $this->method ) {			$folder = str_replace('\\', '/', $folder); //Windows path sanitiation			return trailingslashit($folder);		}		$folder = preg_replace('|^([a-z]{1}):|i', '', $folder); //Strip out windows driveletter if its there.		$folder = str_replace('\\', '/', $folder); //Windows path sanitiation		if ( isset($this->cache[ $folder ] ) )			return $this->cache[ $folder ];		if ( $this->exists($folder) ) { //Folder exists at that absolute path.			$folder = trailingslashit($folder);			$this->cache[ $folder ] = $folder;			return $folder;		}		if ( $return = $this->search_for_folder($folder) )			$this->cache[ $folder ] = $return;		return $return;	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Expects Windows sanitized path	 *	 * @since 2.7	 * @access private	 *	 * @param string $folder the folder to locate	 * @param string $base the folder to start searching from	 * @param bool $loop if the function has recursed, Internal use only	 * @return string The location of the remote path.	 */	function search_for_folder($folder, $base = '.', $loop = false ) {		if ( empty( $base ) || '.' == $base )			$base = trailingslashit($this->cwd());		$folder = untrailingslashit($folder);		$folder_parts = explode('/', $folder);		$last_path = $folder_parts[ count($folder_parts) - 1 ];		$files = $this->dirlist( $base );		foreach ( $folder_parts as $key ) {			if ( $key == $last_path )				continue; //We want this to be caught by the next code block.			//Working from /home/ to /user/ to /wordpress/ see if that file exists within the current folder,			// If its found, change into it and follow through looking for it.			// If it cant find WordPress down that route, it'll continue onto the next folder level, and see if that matches, and so on.			// If it reaches the end, and still cant find it, it'll return false for the entire function.			if ( isset($files[ $key ]) ){				//Lets try that folder:				$newdir = trailingslashit(path_join($base, $key));				if ( $this->verbose )					printf( __('Changing to %s') . '<br/>', $newdir );				if ( $ret = $this->search_for_folder( $folder, $newdir, $loop) )					return $ret;			}		}		//Only check this as a last resort, to prevent locating the incorrect install. All above proceeedures will fail quickly if this is the right branch to take.		if (isset( $files[ $last_path ] ) ) {			if ( $this->verbose )				printf( __('Found %s') . '<br/>',  $base . $last_path );			return trailingslashit($base . $last_path);		}		if ( $loop )			return false; //Prevent tihs function looping again.		//As an extra last resort, Change back to / if the folder wasnt found. This comes into effect when the CWD is /home/user/ but WP is at /var/www/.... mainly dedicated setups.		return $this->search_for_folder($folder, '/', true);	}	/**	 * Returns the *nix style file permissions for a file	 *	 * From the PHP documentation page for fileperms()	 *	 * @link http://docs.php.net/fileperms	 * @since 2.5	 * @access public	 *	 * @param string $file string filename	 * @return int octal representation of permissions	 */	function gethchmod($file){		$perms = $this->getchmod($file);		if (($perms & 0xC000) == 0xC000) // Socket			$info = 's';		elseif (($perms & 0xA000) == 0xA000) // Symbolic Link			$info = 'l';		elseif (($perms & 0x8000) == 0x8000) // Regular			$info = '-';		elseif (($perms & 0x6000) == 0x6000) // Block special			$info = 'b';		elseif (($perms & 0x4000) == 0x4000) // Directory			$info = 'd';		elseif (($perms & 0x2000) == 0x2000) // Character special			$info = 'c';		elseif (($perms & 0x1000) == 0x1000) // FIFO pipe			$info = 'p';		else // Unknown			$info = 'u';		// Owner		$info .= (($perms & 0x0100) ? 'r' : '-');		$info .= (($perms & 0x0080) ? 'w' : '-');		$info .= (($perms & 0x0040) ?					(($perms & 0x0800) ? 's' : 'x' ) :					(($perms & 0x0800) ? 'S' : '-'));		// Group		$info .= (($perms & 0x0020) ? 'r' : '-');		$info .= (($perms & 0x0010) ? 'w' : '-');		$info .= (($perms & 0x0008) ?					(($perms & 0x0400) ? 's' : 'x' ) :					(($perms & 0x0400) ? 'S' : '-'));		// World		$info .= (($perms & 0x0004) ? 'r' : '-');		$info .= (($perms & 0x0002) ? 'w' : '-');		$info .= (($perms & 0x0001) ?					(($perms & 0x0200) ? 't' : 'x' ) :					(($perms & 0x0200) ? 'T' : '-'));		return $info;	}	/**	 * Converts *nix style file permissions to a octal number.	 *	 * Converts '-rw-r--r--' to 0644	 * From "info at rvgate dot nl"'s comment on the PHP documentation for chmod() 	 *	 * @link http://docs.php.net/manual/en/function.chmod.php#49614	 * @since 2.5	 * @access public	 *	 * @param string $mode string *nix style file permission	 * @return int octal representation	 */	function getnumchmodfromh($mode) {		$realmode = '';		$legal =  array('', 'w', 'r', 'x', '-');		$attarray = preg_split('//', $mode);		for ($i=0; $i < count($attarray); $i++)		   if ($key = array_search($attarray[$i], $legal))			   $realmode .= $legal[$key];		$mode = str_pad($realmode, 9, '-');		$trans = array('-'=>'0', 'r'=>'4', 'w'=>'2', 'x'=>'1');		$mode = strtr($mode,$trans);		$newmode = '';		$newmode .= $mode[0] + $mode[1] + $mode[2];		$newmode .= $mode[3] + $mode[4] + $mode[5];		$newmode .= $mode[6] + $mode[7] + $mode[8];		return $newmode;	}	/**	 * Determines if the string provided contains binary characters.	 *	 * @since 2.7	 * @access private	 *	 * @param string $text String to test against	 * @return bool true if string is binary, false otherwise	 */	function is_binary( $text ) {		return (bool) preg_match('|[^\x20-\x7E]|', $text); //chr(32)..chr(127)	}}?>
<?php/** * The template for displaying the footer. * * Contains the closing of the id=main div and all content * after.  Calls sidebar-footer.php for bottom widgets. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>	</div><!-- #main -->	<div id="footer" role="contentinfo">		<div id="colophon"><?php	/* A sidebar in the footer? Yep. You can can customize	 * your footer with four columns of widgets.	 */	get_sidebar( 'footer' );?>			<div id="site-info">				<a href="<?php echo home_url( '/' ) ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home">					<?php bloginfo( 'name' ); ?>				</a>			</div><!-- #site-info -->			<div id="site-generator">				<?php do_action( 'twentyten_credits' ); ?>				<a href="<?php echo esc_url( __('http://wordpress.org/', 'twentyten') ); ?>"						title="<?php esc_attr_e('Semantic Personal Publishing Platform', 'twentyten'); ?>" rel="generator">					<?php printf( __('Proudly powered by %s.', 'twentyten'), 'WordPress' ); ?>				</a>			</div><!-- #site-generator -->		</div><!-- #colophon -->	</div><!-- #footer --></div><!-- #wrapper --><?php	/* Always have wp_footer() just before the closing </body>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to reference JavaScript files.	 */	wp_footer();?></body></html>
<?php/** * RSS 0.92 Feed Template for displaying RSS 0.92 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="0.92"><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<docs>http://backend.userland.com/rss092</docs>	<language><?php echo get_option('rss_language'); ?></language>	<?php do_action('rss_head'); ?><?php while (have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>		<link><?php the_permalink_rss() ?></link>		<?php do_action('rss_item'); ?>	</item><?php endwhile; ?></channel></rss>
<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * WordPress Cron Implementation for hosts, which do not offer CRON or for which * the user has not set up a CRON job pointing to this file. * * The HTTP request to this file will not slow down the visitor who happens to * visit when the cron job is needed to run. * * @package WordPress */ignore_user_abort(true);if ( !empty($_POST) || defined('DOING_AJAX') || defined('DOING_CRON') )	die();/** * Tell WordPress we are doing the CRON task. * * @var bool */define('DOING_CRON', true);if ( !defined('ABSPATH') ) {	/** Set up WordPress environment */	require_once('./wp-load.php');}if ( false === $crons = _get_cron_array() )	die();$keys = array_keys( $crons );$local_time = time();if ( isset($keys[0]) && $keys[0] > $local_time )	die();foreach ($crons as $timestamp => $cronhooks) {	if ( $timestamp > $local_time )		break;	foreach ($cronhooks as $hook => $keys) {		foreach ($keys as $k => $v) {			$schedule = $v['schedule'];			if ($schedule != false) {				$new_args = array($timestamp, $schedule, $hook, $v['args']);				call_user_func_array('wp_reschedule_event', $new_args);			}			wp_unschedule_event($timestamp, $hook, $v['args']); 			do_action_ref_array($hook, $v['args']);		}	}}die();
<?php/** * Privacy Options Settings Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Privacy Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can choose whether or not your site will be crawled by robots, ping services, and spiders. If you want those services to ignore your site, click the second option here. Note that your privacy is not complete; your site is still visible on the web.') . '</p>' .	'<p>' . __('When this setting is in effect a reminder is shown in the header of these administration screens that says, &#8220;Search Engines Blocked,&#8221; to remind you that your site is not being crawled.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Privacy_SubPanel" target="_blank">Privacy Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('privacy'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Site Visibility') ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Site Visibility') ?> </span></legend><input id="blog-public" type="radio" name="blog_public" value="1" <?php checked('1', get_option('blog_public')); ?> /><label for="blog-public"><?php _e('I would like my site to be visible to everyone, including search engines (like Google, Bing, Technorati) and archivers');?></label><br/><input id="blog-norobots" type="radio" name="blog_public" value="0" <?php checked('0', get_option('blog_public')); ?> /><label for="blog-norobots"><?php _e('I would like to block search engines, but allow normal visitors'); ?></label><?php do_action('blog_privacy_selector'); ?></fieldset></td></tr><?php do_settings_fields('privacy', 'default'); ?></table><?php do_settings_sections('privacy'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?phpfunction mce_put_file( $path, $content ) {	if ( function_exists('file_put_contents') )		return @file_put_contents( $path, $content );	$newfile = false;	$fp = @fopen( $path, 'wb' );	if ($fp) {		$newfile = fwrite( $fp, $content );		fclose($fp);	}	return $newfile;}// escape text only if it needs translatingfunction mce_escape($text) {	global $language;	if ( 'en' == $language ) return $text;	else return esc_js($text);}$lang = 'tinyMCE.addI18n({' . $language . ':{common:{edit_confirm:"' . mce_escape( __('Do you want to use the WYSIWYG mode for this textarea?') ) . '",apply:"' . mce_escape( __('Apply') ) . '",insert:"' . mce_escape( __('Insert') ) . '",update:"' . mce_escape( __('Update') ) . '",cancel:"' . mce_escape( __('Cancel') ) . '",close:"' . mce_escape( __('Close') ) . '",browse:"' . mce_escape( __('Browse') ) . '",class_name:"' . mce_escape( __('Class') ) . '",not_set:"' . mce_escape( __('-- Not set --') ) . '",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",clipboard_no_support:"' . mce_escape( __('Currently not supported by your browser, use keyboard shortcuts instead.') ) . '",popup_blocked:"' . mce_escape( __('Sorry, but we have noticed that your popup-blocker has disabled a window that provides application functionality. You will need to disable popup blocking on this site in order to fully utilize this tool.') ) . '",invalid_data:"' . mce_escape( __('Error: Invalid values entered, these are marked in red.') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '"},contextmenu:{align:"' . mce_escape( /* translators: alignment */ __('Alignment') ) . '",left:"' . mce_escape( /* translators: alignment */ __('Left') ) . '",center:"' . mce_escape( /* translators: alignment */ __('Center') ) . '",right:"' . mce_escape( /* translators: alignment */ __('Right') ) . '",full:"' . mce_escape( /* translators: alignment */ __('Full') ) . '"},insertdatetime:{date_fmt:"' . mce_escape( /* translators: year, month, date */ __('%Y-%m-%d') ) . '",time_fmt:"' . mce_escape( /* translators: hours, minutes, seconds */ __('%H:%M:%S') ) . '",insertdate_desc:"' . mce_escape( __('Insert date') ) . '",inserttime_desc:"' . mce_escape( __('Insert time') ) . '",months_long:"' . mce_escape( __('January').','.__('February').','.__('March').','.__('April').','.__('May').','.__('June').','.__('July').','.__('August').','.__('September').','.__('October').','.__('November').','.__('December') ) . '",months_short:"' . mce_escape( __('Jan_January_abbreviation').','.__('Feb_February_abbreviation').','.__('Mar_March_abbreviation').','.__('Apr_April_abbreviation').','.__('May_May_abbreviation').','.__('Jun_June_abbreviation').','.__('Jul_July_abbreviation').','.__('Aug_August_abbreviation').','.__('Sep_September_abbreviation').','.__('Oct_October_abbreviation').','.__('Nov_November_abbreviation').','.__('Dec_December_abbreviation') ) . '",day_long:"' . mce_escape( __('Sunday').','.__('Monday').','.__('Tuesday').','.__('Wednesday').','.__('Thursday').','.__('Friday').','.__('Saturday') ) . '",day_short:"' . mce_escape( __('Sun').','.__('Mon').','.__('Tue').','.__('Wed').','.__('Thu').','.__('Fri').','.__('Sat') ) . '"},print:{print_desc:"' . mce_escape( __('Print') ) . '"},preview:{preview_desc:"' . mce_escape( __('Preview') ) . '"},directionality:{ltr_desc:"' . mce_escape( __('Direction left to right') ) . '",rtl_desc:"' . mce_escape( __('Direction right to left') ) . '"},layer:{insertlayer_desc:"' . mce_escape( __('Insert new layer') ) . '",forward_desc:"' . mce_escape( __('Move forward') ) . '",backward_desc:"' . mce_escape( __('Move backward') ) . '",absolute_desc:"' . mce_escape( __('Toggle absolute positioning') ) . '",content:"' . mce_escape( __('New layer...') ) . '"},save:{save_desc:"' . mce_escape( __('Save') ) . '",cancel_desc:"' . mce_escape( __('Cancel all changes') ) . '"},nonbreaking:{nonbreaking_desc:"' . mce_escape( __('Insert non-breaking space character') ) . '"},iespell:{iespell_desc:"' . mce_escape( __('Run spell checking') ) . '",download:"' . mce_escape( __('ieSpell not detected. Do you want to install it now?') ) . '"},advhr:{advhr_desc:"' . mce_escape( __('Horizontale rule') ) . '"},emotions:{emotions_desc:"' . mce_escape( __('Emotions') ) . '"},searchreplace:{search_desc:"' . mce_escape( __('Find') ) . '",replace_desc:"' . mce_escape( __('Find/Replace') ) . '"},advimage:{image_desc:"' . mce_escape( __('Insert/edit image') ) . '"},advlink:{link_desc:"' . mce_escape( __('Insert/edit link') ) . '"},xhtmlxtras:{cite_desc:"' . mce_escape( __('Citation') ) . '",abbr_desc:"' . mce_escape( __('Abbreviation') ) . '",acronym_desc:"' . mce_escape( __('Acronym') ) . '",del_desc:"' . mce_escape( __('Deletion') ) . '",ins_desc:"' . mce_escape( __('Insertion') ) . '",attribs_desc:"' . mce_escape( __('Insert/Edit Attributes') ) . '"},style:{desc:"' . mce_escape( __('Edit CSS Style') ) . '"},paste:{paste_text_desc:"' . mce_escape( __('Paste as Plain Text') ) . '",paste_word_desc:"' . mce_escape( __('Paste from Word') ) . '",selectall_desc:"' . mce_escape( __('Select All') ) . '"},paste_dlg:{text_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '",text_linebreaks:"' . mce_escape( __('Keep linebreaks') ) . '",word_title:"' . mce_escape( __('Use CTRL+V on your keyboard to paste the text into the window.') ) . '"},table:{desc:"' . mce_escape( __('Inserts a new table') ) . '",row_before_desc:"' . mce_escape( __('Insert row before') ) . '",row_after_desc:"' . mce_escape( __('Insert row after') ) . '",delete_row_desc:"' . mce_escape( __('Delete row') ) . '",col_before_desc:"' . mce_escape( __('Insert column before') ) . '",col_after_desc:"' . mce_escape( __('Insert column after') ) . '",delete_col_desc:"' . mce_escape( __('Remove column') ) . '",split_cells_desc:"' . mce_escape( __('Split merged table cells') ) . '",merge_cells_desc:"' . mce_escape( __('Merge table cells') ) . '",row_desc:"' . mce_escape( __('Table row properties') ) . '",cell_desc:"' . mce_escape( __('Table cell properties') ) . '",props_desc:"' . mce_escape( __('Table properties') ) . '",paste_row_before_desc:"' . mce_escape( __('Paste table row before') ) . '",paste_row_after_desc:"' . mce_escape( __('Paste table row after') ) . '",cut_row_desc:"' . mce_escape( __('Cut table row') ) . '",copy_row_desc:"' . mce_escape( __('Copy table row') ) . '",del:"' . mce_escape( __('Delete table') ) . '",row:"' . mce_escape( __('Row') ) . '",col:"' . mce_escape( __('Column') ) . '",cell:"' . mce_escape( __('Cell') ) . '"},autosave:{unload_msg:"' . mce_escape( __('The changes you made will be lost if you navigate away from this page.') ) . '"},fullscreen:{desc:"' . mce_escape( __('Toggle fullscreen mode') ) . ' (Alt+Shift+G)"},media:{desc:"' . mce_escape( __('Insert / edit embedded media') ) . '",delta_width:"' . /* translators: Extra width for the media popup in pixels */ mce_escape( _x('0', 'media popup width') ) . '",delta_height:"' . /* translators: Extra height for the media popup in pixels */ mce_escape( _x('0', 'media popup height') ) . '",edit:"' . mce_escape( __('Edit embedded media') ) . '"},fullpage:{desc:"' . mce_escape( __('Document properties') ) . '"},template:{desc:"' . mce_escape( __('Insert predefined template content') ) . '"},visualchars:{desc:"' . mce_escape( __('Visual control characters on/off.') ) . '"},spellchecker:{desc:"' . mce_escape( __('Toggle spellchecker') ) . ' (Alt+Shift+N)",menu:"' . mce_escape( __('Spellchecker settings') ) . '",ignore_word:"' . mce_escape( __('Ignore word') ) . '",ignore_words:"' . mce_escape( __('Ignore all') ) . '",langs:"' . mce_escape( __('Languages') ) . '",wait:"' . mce_escape( __('Please wait...') ) . '",sug:"' . mce_escape( __('Suggestions') ) . '",no_sug:"' . mce_escape( __('No suggestions') ) . '",no_mpell:"' . mce_escape( __('No misspellings found.') ) . '"},pagebreak:{desc:"' . mce_escape( __('Insert Page Break') ) . '"}}});tinyMCE.addI18n("' . $language . '.advanced",{style_select:"' . mce_escape( /* translators: TinyMCE font styles */ _x('Styles', 'TinyMCE font styles') ) . '",font_size:"' . mce_escape( __('Font size') ) . '",fontdefault:"' . mce_escape( __('Font family') ) . '",block:"' . mce_escape( __('Format') ) . '",paragraph:"' . mce_escape( __('Paragraph') ) . '",div:"' . mce_escape( __('Div') ) . '",address:"' . mce_escape( __('Address') ) . '",pre:"' . mce_escape( __('Preformatted') ) . '",h1:"' . mce_escape( __('Heading 1') ) . '",h2:"' . mce_escape( __('Heading 2') ) . '",h3:"' . mce_escape( __('Heading 3') ) . '",h4:"' . mce_escape( __('Heading 4') ) . '",h5:"' . mce_escape( __('Heading 5') ) . '",h6:"' . mce_escape( __('Heading 6') ) . '",blockquote:"' . mce_escape( __('Blockquote') ) . '",code:"' . mce_escape( __('Code') ) . '",samp:"' . mce_escape( __('Code sample') ) . '",dt:"' . mce_escape( __('Definition term ') ) . '",dd:"' . mce_escape( __('Definition description') ) . '",bold_desc:"' . mce_escape( __('Bold') ) . ' (Ctrl / Alt+Shift + B)",italic_desc:"' . mce_escape( __('Italic') ) . ' (Ctrl / Alt+Shift + I)",underline_desc:"' . mce_escape( __('Underline') ) . '",striketrough_desc:"' . mce_escape( __('Strikethrough') ) . ' (Alt+Shift+D)",justifyleft_desc:"' . mce_escape( __('Align Left') ) . ' (Alt+Shift+L)",justifycenter_desc:"' . mce_escape( __('Align Center') ) . ' (Alt+Shift+C)",justifyright_desc:"' . mce_escape( __('Align Right') ) . ' (Alt+Shift+R)",justifyfull_desc:"' . mce_escape( __('Align Full') ) . ' (Alt+Shift+J)",bullist_desc:"' . mce_escape( __('Unordered list') ) . ' (Alt+Shift+U)",numlist_desc:"' . mce_escape( __('Ordered list') ) . ' (Alt+Shift+O)",outdent_desc:"' . mce_escape( __('Outdent') ) . '",indent_desc:"' . mce_escape( __('Indent') ) . '",undo_desc:"' . mce_escape( __('Undo') ) . ' (Ctrl+Z)",redo_desc:"' . mce_escape( __('Redo') ) . ' (Ctrl+Y)",link_desc:"' . mce_escape( __('Insert/edit link') ) . ' (Alt+Shift+A)",link_delta_width:"' . /* translators: Extra width for the link popup in pixels */ mce_escape( _x('0', 'link popup width') ) . '",link_delta_height:"' . /* translators: Extra height for the link popup in pixels */ mce_escape( _x('0', 'link popup height') ) . '",unlink_desc:"' . mce_escape( __('Unlink') ) . ' (Alt+Shift+S)",image_desc:"' . mce_escape( __('Insert/edit image') ) . ' (Alt+Shift+M)",image_delta_width:"' . /* translators: Extra width for the image popup in pixels */ mce_escape( _x('0', 'image popup width') ) . '",image_delta_height:"' . /* translators: Extra height for the image popup in pixels */ mce_escape( _x('0', 'image popup height') ) . '",cleanup_desc:"' . mce_escape( __('Cleanup messy code') ) . '",code_desc:"' . mce_escape( __('Edit HTML Source') ) . '",sub_desc:"' . mce_escape( __('Subscript') ) . '",sup_desc:"' . mce_escape( __('Superscript') ) . '",hr_desc:"' . mce_escape( __('Insert horizontal ruler') ) . '",removeformat_desc:"' . mce_escape( __('Remove formatting') ) . '",forecolor_desc:"' . mce_escape( __('Select text color') ) . '",backcolor_desc:"' . mce_escape( __('Select background color') ) . '",charmap_desc:"' . mce_escape( __('Insert custom character') ) . '",visualaid_desc:"' . mce_escape( __('Toggle guidelines/invisible elements') ) . '",anchor_desc:"' . mce_escape( __('Insert/edit anchor') ) . '",cut_desc:"' . mce_escape( __('Cut') ) . '",copy_desc:"' . mce_escape( __('Copy') ) . '",paste_desc:"' . mce_escape( __('Paste') ) . '",image_props_desc:"' . mce_escape( __('Image properties') ) . '",newdocument_desc:"' . mce_escape( __('New document') ) . '",help_desc:"' . mce_escape( __('Help') ) . '",blockquote_desc:"' . mce_escape( __('Blockquote') ) . ' (Alt+Shift+Q)",clipboard_msg:"' . mce_escape( __('Copy/Cut/Paste is not available in Mozilla and Firefox.') ) . '",path:"' . mce_escape( __('Path') ) . '",newdocument:"' . mce_escape( __('Are you sure you want to clear all contents?') ) . '",toolbar_focus:"' . mce_escape( __('Jump to tool buttons - Alt+Q, Jump to editor - Alt-Z, Jump to element path - Alt-X') ) . '",more_colors:"' . mce_escape( __('More colors') ) . '",colorpicker_delta_width:"' . /* translators: Extra width for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup width') ) . '",colorpicker_delta_height:"' . /* translators: Extra height for the colorpicker popup in pixels */ mce_escape( _x('0', 'colorpicker popup height') ) . '"});tinyMCE.addI18n("' . $language . '.advanced_dlg",{about_title:"' . mce_escape( __('About TinyMCE') ) . '",about_general:"' . mce_escape( __('About') ) . '",about_help:"' . mce_escape( __('Help') ) . '",about_license:"' . mce_escape( __('License') ) . '",about_plugins:"' . mce_escape( __('Plugins') ) . '",about_plugin:"' . mce_escape( __('Plugin') ) . '",about_author:"' . mce_escape( __('Author') ) . '",about_version:"' . mce_escape( __('Version') ) . '",about_loaded:"' . mce_escape( __('Loaded plugins') ) . '",anchor_title:"' . mce_escape( __('Insert/edit anchor') ) . '",anchor_name:"' . mce_escape( __('Anchor name') ) . '",code_title:"' . mce_escape( __('HTML Source Editor') ) . '",code_wordwrap:"' . mce_escape( __('Word wrap') ) . '",colorpicker_title:"' . mce_escape( __('Select a color') ) . '",colorpicker_picker_tab:"' . mce_escape( __('Picker') ) . '",colorpicker_picker_title:"' . mce_escape( __('Color picker') ) . '",colorpicker_palette_tab:"' . mce_escape( __('Palette') ) . '",colorpicker_palette_title:"' . mce_escape( __('Palette colors') ) . '",colorpicker_named_tab:"' . mce_escape( __('Named') ) . '",colorpicker_named_title:"' . mce_escape( __('Named colors') ) . '",colorpicker_color:"' . mce_escape( __('Color:') ) . '",colorpicker_name:"' . mce_escape( __('Name:') ) . '",charmap_title:"' . mce_escape( __('Select custom character') ) . '",image_title:"' . mce_escape( __('Insert/edit image') ) . '",image_src:"' . mce_escape( __('Image URL') ) . '",image_alt:"' . mce_escape( __('Image description') ) . '",image_list:"' . mce_escape( __('Image list') ) . '",image_border:"' . mce_escape( __('Border') ) . '",image_dimensions:"' . mce_escape( __('Dimensions') ) . '",image_vspace:"' . mce_escape( __('Vertical space') ) . '",image_hspace:"' . mce_escape( __('Horizontal space') ) . '",image_align:"' . mce_escape( __('Alignment') ) . '",image_align_baseline:"' . mce_escape( __('Baseline') ) . '",image_align_top:"' . mce_escape( __('Top') ) . '",image_align_middle:"' . mce_escape( __('Middle') ) . '",image_align_bottom:"' . mce_escape( __('Bottom') ) . '",image_align_texttop:"' . mce_escape( __('Text top') ) . '",image_align_textbottom:"' . mce_escape( __('Text bottom') ) . '",image_align_left:"' . mce_escape( __('Left') ) . '",image_align_right:"' . mce_escape( __('Right') ) . '",link_title:"' . mce_escape( __('Insert/edit link') ) . '",link_url:"' . mce_escape( __('Link URL') ) . '",link_target:"' . mce_escape( __('Target') ) . '",link_target_same:"' . mce_escape( __('Open link in the same window') ) . '",link_target_blank:"' . mce_escape( __('Open link in a new window') ) . '",link_titlefield:"' . mce_escape( __('Title') ) . '",link_is_email:"' . mce_escape( __('The URL you entered seems to be an email address, do you want to add the required mailto: prefix?') ) . '",link_is_external:"' . mce_escape( __('The URL you entered seems to external link, do you want to add the required http:// prefix?') ) . '",link_list:"' . mce_escape( __('Link list') ) . '"});tinyMCE.addI18n("' . $language . '.media_dlg",{title:"' . mce_escape( __('Insert / edit embedded media') ) . '",general:"' . mce_escape( __('General') ) . '",advanced:"' . mce_escape( __('Advanced') ) . '",file:"' . mce_escape( __('File/URL') ) . '",list:"' . mce_escape( __('List') ) . '",size:"' . mce_escape( __('Dimensions') ) . '",preview:"' . mce_escape( __('Preview') ) . '",constrain_proportions:"' . mce_escape( __('Constrain proportions') ) . '",type:"' . mce_escape( __('Type') ) . '",id:"' . mce_escape( __('Id') ) . '",name:"' . mce_escape( __('Name') ) . '",class_name:"' . mce_escape( __('Class') ) . '",vspace:"' . mce_escape( __('V-Space') ) . '",hspace:"' . mce_escape( __('H-Space') ) . '",play:"' . mce_escape( __('Auto play') ) . '",loop:"' . mce_escape( __('Loop') ) . '",menu:"' . mce_escape( __('Show menu') ) . '",quality:"' . mce_escape( __('Quality') ) . '",scale:"' . mce_escape( __('Scale') ) . '",align:"' . mce_escape( __('Align') ) . '",salign:"' . mce_escape( __('SAlign') ) . '",wmode:"' . mce_escape( __('WMode') ) . '",bgcolor:"' . mce_escape( __('Background') ) . '",base:"' . mce_escape( __('Base') ) . '",flashvars:"' . mce_escape( __('Flashvars') ) . '",liveconnect:"' . mce_escape( __('SWLiveConnect') ) . '",autohref:"' . mce_escape( __('AutoHREF') ) . '",cache:"' . mce_escape( __('Cache') ) . '",hidden:"' . mce_escape( __('Hidden') ) . '",controller:"' . mce_escape( __('Controller') ) . '",kioskmode:"' . mce_escape( __('Kiosk mode') ) . '",playeveryframe:"' . mce_escape( __('Play every frame') ) . '",targetcache:"' . mce_escape( __('Target cache') ) . '",correction:"' . mce_escape( __('No correction') ) . '",enablejavascript:"' . mce_escape( __('Enable JavaScript') ) . '",starttime:"' . mce_escape( __('Start time') ) . '",endtime:"' . mce_escape( __('End time') ) . '",href:"' . mce_escape( __('href') ) . '",qtsrcchokespeed:"' . mce_escape( __('Choke speed') ) . '",target:"' . mce_escape( __('Target') ) . '",volume:"' . mce_escape( __('Volume') ) . '",autostart:"' . mce_escape( __('Auto start') ) . '",enabled:"' . mce_escape( __('Enabled') ) . '",fullscreen:"' . mce_escape( __('Fullscreen') ) . '",invokeurls:"' . mce_escape( __('Invoke URLs') ) . '",mute:"' . mce_escape( __('Mute') ) . '",stretchtofit:"' . mce_escape( __('Stretch to fit') ) . '",windowlessvideo:"' . mce_escape( __('Windowless video') ) . '",balance:"' . mce_escape( __('Balance') ) . '",baseurl:"' . mce_escape( __('Base URL') ) . '",captioningid:"' . mce_escape( __('Captioning id') ) . '",currentmarker:"' . mce_escape( __('Current marker') ) . '",currentposition:"' . mce_escape( __('Current position') ) . '",defaultframe:"' . mce_escape( __('Default frame') ) . '",playcount:"' . mce_escape( __('Play count') ) . '",rate:"' . mce_escape( __('Rate') ) . '",uimode:"' . mce_escape( __('UI Mode') ) . '",flash_options:"' . mce_escape( __('Flash options') ) . '",qt_options:"' . mce_escape( __('Quicktime options') ) . '",wmp_options:"' . mce_escape( __('Windows media player options') ) . '",rmp_options:"' . mce_escape( __('Real media player options') ) . '",shockwave_options:"' . mce_escape( __('Shockwave options') ) . '",autogotourl:"' . mce_escape( __('Auto goto URL') ) . '",center:"' . mce_escape( __('Center') ) . '",imagestatus:"' . mce_escape( __('Image status') ) . '",maintainaspect:"' . mce_escape( __('Maintain aspect') ) . '",nojava:"' . mce_escape( __('No java') ) . '",prefetch:"' . mce_escape( __('Prefetch') ) . '",shuffle:"' . mce_escape( __('Shuffle') ) . '",console:"' . mce_escape( __('Console') ) . '",numloop:"' . mce_escape( __('Num loops') ) . '",controls:"' . mce_escape( __('Controls') ) . '",scriptcallbacks:"' . mce_escape( __('Script callbacks') ) . '",swstretchstyle:"' . mce_escape( __('Stretch style') ) . '",swstretchhalign:"' . mce_escape( __('Stretch H-Align') ) . '",swstretchvalign:"' . mce_escape( __('Stretch V-Align') ) . '",sound:"' . mce_escape( __('Sound') ) . '",progress:"' . mce_escape( __('Progress') ) . '",qtsrc:"' . mce_escape( __('QT Src') ) . '",qt_stream_warn:"' . mce_escape( __('Streamed rtsp resources should be added to the QT Src field under the advanced tab.') ) . '",align_top:"' . mce_escape( __('Top') ) . '",align_right:"' . mce_escape( __('Right') ) . '",align_bottom:"' . mce_escape( __('Bottom') ) . '",align_left:"' . mce_escape( __('Left') ) . '",align_center:"' . mce_escape( __('Center') ) . '",align_top_left:"' . mce_escape( __('Top left') ) . '",align_top_right:"' . mce_escape( __('Top right') ) . '",align_bottom_left:"' . mce_escape( __('Bottom left') ) . '",align_bottom_right:"' . mce_escape( __('Bottom right') ) . '",flv_options:"' . mce_escape( __('Flash video options') ) . '",flv_scalemode:"' . mce_escape( __('Scale mode') ) . '",flv_buffer:"' . mce_escape( __('Buffer') ) . '",flv_startimage:"' . mce_escape( __('Start image') ) . '",flv_starttime:"' . mce_escape( __('Start time') ) . '",flv_defaultvolume:"' . mce_escape( __('Default volume') ) . '",flv_hiddengui:"' . mce_escape( __('Hidden GUI') ) . '",flv_autostart:"' . mce_escape( __('Auto start') ) . '",flv_loop:"' . mce_escape( __('Loop') ) . '",flv_showscalemodes:"' . mce_escape( __('Show scale modes') ) . '",flv_smoothvideo:"' . mce_escape( __('Smooth video') ) . '",flv_jscallback:"' . mce_escape( __('JS Callback') ) . '"});tinyMCE.addI18n("' . $language . '.wordpress",{wp_adv_desc:"' . mce_escape( __('Show/Hide Kitchen Sink') )  . ' (Alt+Shift+Z)",wp_more_desc:"' . mce_escape( __('Insert More Tag') ) . ' (Alt+Shift+T)",wp_page_desc:"' . mce_escape( __('Insert Page break') ) . ' (Alt+Shift+P)",wp_help_desc:"' . mce_escape( __('Help') ) . ' (Alt+Shift+H)",wp_more_alt:"' . mce_escape( __('More...') ) . '",wp_page_alt:"' . mce_escape( __('Next page...') ) . '",add_media:"' . mce_escape( __('Add Media') ) . '",add_image:"' . mce_escape( __('Add an Image') ) . '",add_video:"' . mce_escape( __('Add Video') ) . '",add_audio:"' . mce_escape( __('Add Audio') ) . '",editgallery:"' . mce_escape( __('Edit Gallery') ) . '",delgallery:"' . mce_escape( __('Delete Gallery') ) . '"});tinyMCE.addI18n("' . $language . '.wpeditimage",{edit_img:"' . mce_escape( __('Edit Image') )  . '",del_img:"' . mce_escape( __('Delete Image') )  . '",adv_settings:"' . mce_escape( __('Advanced Settings') )  . '",none:"' . mce_escape( __('None') )  . '",size:"' . mce_escape( __('Size') ) . '",thumbnail:"' . mce_escape( __('Thumbnail') ) . '",medium:"' . mce_escape( __('Medium') ) . '",full_size:"' . mce_escape( __('Full Size') ) . '",current_link:"' . mce_escape( __('Current Link') ) . '",link_to_img:"' . mce_escape( __('Link to Image') ) . '",link_help:"' . mce_escape( __('Enter a link URL or click above for presets.') ) . '",adv_img_settings:"' . mce_escape( __('Advanced Image Settings') ) . '",source:"' . mce_escape( __('Source') )  . '",width:"' . mce_escape( __('Width') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",adv_link_settings:"' . mce_escape( __('Advanced Link Settings') )  . '",link_rel:"' . mce_escape( __('Link Rel') ) . '",height:"' . mce_escape( __('Height') ) . '",orig_size:"' . mce_escape( __('Original Size') ) . '",css:"' . mce_escape( __('CSS Class') ) . '",s60:"' . mce_escape( __('60%') ) . '",s70:"' . mce_escape( __('70%') ) . '",s80:"' . mce_escape( __('80%') ) . '",s90:"' . mce_escape( __('90%') ) . '",s100:"' . mce_escape( __('100%') ) . '",s110:"' . mce_escape( __('110%') ) . '",s120:"' . mce_escape( __('120%') ) . '",s130:"' . mce_escape( __('130%') ) . '",img_title:"' . mce_escape( __('Edit Image Title') ) . '",caption:"' . mce_escape( __('Edit Image Caption') ) . '",alt:"' . mce_escape( __('Edit Alternate Text') ) . '"});';
<?php/** * The Template for displaying all single posts. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="nav-above" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-above -->				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-meta">						<?php twentyten_posted_on(); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content --><?php if ( get_the_author_meta( 'description' ) ) : // If a user has filled out their description, show a bio on their entries  ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( esc_attr__( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>							<div id="author-link">								<a href="<?php echo get_author_posts_url( get_the_author_meta( 'ID' ) ); ?>">									<?php printf( __( 'View all posts by %s <span class="meta-nav">&rarr;</span>', 'twentyten' ), get_the_author() ); ?>								</a>							</div><!-- #author-link	-->						</div><!-- #author-description -->					</div><!-- #entry-author-info --><?php endif; ?>					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## -->				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-below -->				<?php comments_template( '', true ); ?><?php endwhile; // end of the loop. ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Atom Feed Template for displaying Atom Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><feed  xmlns="http://www.w3.org/2005/Atom"  xmlns:thr="http://purl.org/syndication/thread/1.0"  xml:lang="<?php echo get_option('rss_language'); ?>"  xml:base="<?php bloginfo_rss('url') ?>/wp-atom.php"  <?php do_action('atom_ns'); ?> >	<title type="text"><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<subtitle type="text"><?php bloginfo_rss("description") ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated>	<link rel="alternate" type="text/html" href="<?php bloginfo_rss('url') ?>" />	<id><?php bloginfo('atom_url'); ?></id>	<link rel="self" type="application/atom+xml" href="<?php self_link(); ?>" />	<?php do_action('atom_head'); ?>	<?php while (have_posts()) : the_post(); ?>	<entry>		<author>			<name><?php the_author() ?></name>			<?php $author_url = get_the_author_meta('url'); if ( !empty($author_url) ) : ?>			<uri><?php the_author_meta('url')?></uri>			<?php endif; ?>		</author>		<title type="<?php html_type_rss(); ?>"><![CDATA[<?php the_title_rss() ?>]]></title>		<link rel="alternate" type="text/html" href="<?php the_permalink_rss() ?>" />		<id><?php the_guid() ; ?></id>		<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>		<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>		<?php the_category_rss('atom') ?>		<summary type="<?php html_type_rss(); ?>"><![CDATA[<?php the_excerpt_rss(); ?>]]></summary><?php if ( !get_option('rss_use_excerpt') ) : ?>		<content type="<?php html_type_rss(); ?>" xml:base="<?php the_permalink_rss() ?>"><![CDATA[<?php the_content_feed('atom') ?>]]></content><?php endif; ?><?php atom_enclosure(); ?><?php do_action('atom_entry'); ?>		<link rel="replies" type="text/html" href="<?php the_permalink_rss() ?>#comments" thr:count="<?php echo get_comments_number()?>"/>		<link rel="replies" type="application/atom+xml" href="<?php echo get_post_comments_feed_link(0,'atom') ?>" thr:count="<?php echo get_comments_number()?>"/>		<thr:total><?php echo get_comments_number()?></thr:total>	</entry>	<?php endwhile ; ?></feed>
<?php/** * WordPress implementation for PHP functions missing from older PHP versions. * * @package PHP * @access private */// Added in PHP 5.0if (!function_exists('http_build_query')) {	function http_build_query($data, $prefix=null, $sep=null) {		return _http_build_query($data, $prefix, $sep);	}}// from php.net (modified by Mark Jaquith to behave like the native PHP5 function)function _http_build_query($data, $prefix=null, $sep=null, $key='', $urlencode=true) {	$ret = array();	foreach ( (array) $data as $k => $v ) {		if ( $urlencode)			$k = urlencode($k);		if ( is_int($k) && $prefix != null )			$k = $prefix.$k;		if ( !empty($key) )			$k = $key . '%5B' . $k . '%5D';		if ( $v === NULL )			continue;		elseif ( $v === FALSE )			$v = '0';		if ( is_array($v) || is_object($v) )			array_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));		elseif ( $urlencode )			array_push($ret, $k.'='.urlencode($v));		else			array_push($ret, $k.'='.$v);	}	if ( NULL === $sep )		$sep = ini_get('arg_separator.output');	return implode($sep, $ret);}if ( !function_exists('_') ) {	function _($string) {		return $string;	}}if (!function_exists('stripos')) {	function stripos($haystack, $needle, $offset = 0) {		return strpos(strtolower($haystack), strtolower($needle), $offset);	}}if ( !function_exists('hash_hmac') ):function hash_hmac($algo, $data, $key, $raw_output = false) {	return _hash_hmac($algo, $data, $key, $raw_output);}endif;function _hash_hmac($algo, $data, $key, $raw_output = false) {	$packs = array('md5' => 'H32', 'sha1' => 'H40');	if ( !isset($packs[$algo]) )		return false;	$pack = $packs[$algo];	if (strlen($key) > 64)		$key = pack($pack, $algo($key));	$key = str_pad($key, 64, chr(0));	$ipad = (substr($key, 0, 64) ^ str_repeat(chr(0x36), 64));	$opad = (substr($key, 0, 64) ^ str_repeat(chr(0x5C), 64));	$hmac = $algo($opad . pack($pack, $algo($ipad . $data)));	if ( $raw_output )		return pack( $pack, $hmac );	return $hmac;}if ( !function_exists('mb_substr') ):	function mb_substr( $str, $start, $length=null, $encoding=null ) {		return _mb_substr($str, $start, $length, $encoding);	}endif;function _mb_substr( $str, $start, $length=null, $encoding=null ) {	// the solution below, works only for utf-8, so in case of a different	// charset, just use built-in substr	$charset = get_option( 'blog_charset' );	if ( !in_array( $charset, array('utf8', 'utf-8', 'UTF8', 'UTF-8') ) ) {		return is_null( $length )? substr( $str, $start ) : substr( $str, $start, $length);	}	// use the regex unicode support to separate the UTF-8 characters into an array	preg_match_all( '/./us', $str, $match );	$chars = is_null( $length )? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );	return implode( '', $chars );}if ( !function_exists( 'htmlspecialchars_decode' ) ) {	// Added in PHP 5.1.0	// Error checks from PEAR::PHP_Compat	function htmlspecialchars_decode( $string, $quote_style = ENT_COMPAT )	{		if ( !is_scalar( $string ) ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 1 to be string, ' . gettype( $string ) . ' given', E_USER_WARNING );			return;		}		if ( !is_int( $quote_style ) && $quote_style !== null ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 2 to be integer, ' . gettype( $quote_style ) . ' given', E_USER_WARNING );			return;		}		return wp_specialchars_decode( $string, $quote_style );	}}// For PHP < 5.2.0if ( !function_exists('json_encode') ) {	function json_encode( $string ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		return $wp_json->encodeUnsafe( $string );	}}if ( !function_exists('json_decode') ) {	function json_decode( $string, $assoc_array = false ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		$res = $wp_json->decode( $string );		if ( $assoc_array )			$res = _json_decode_object_helper( $res );		return $res;	}	function _json_decode_object_helper($data) {		if ( is_object($data) )			$data = get_object_vars($data);		return is_array($data) ? array_map(__FUNCTION__, $data) : $data;	}}// pathinfo that fills 'filename' without extension like in PHP 5.2+function pathinfo52($path) {	$parts = pathinfo($path);	if ( !isset($parts['filename']) ) {		$parts['filename'] = substr( $parts['basename'], 0, strrpos($parts['basename'], '.') );		if ( empty($parts['filename']) ) // there's no extension			$parts['filename'] = $parts['basename'];	}	return $parts;}
<?php/** * Multisite upload handler. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite */define( 'SHORTINIT', true );require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );if( !is_multisite() )	die( 'Multisite support not enabled' );ms_file_constants();error_reporting( 0 );if ( $current_blog->archived == '1' || $current_blog->spam == '1' || $current_blog->deleted == '1' ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$file = BLOGUPLOADDIR . str_replace( '..', '', $_GET[ 'file' ] );if ( !is_file( $file ) ) {	status_header( 404 );	die( '404 &#8212; File not found.' );}$mime = wp_check_filetype( $_SERVER[ 'REQUEST_URI' ] );if( false === $mime[ 'type' ] && function_exists( 'mime_content_type' ) )	$mime[ 'type' ] = mime_content_type( $file );if( $mime[ 'type' ] )	$mimetype = $mime[ 'type' ];else	$mimetype = 'image/' . substr( $_SERVER[ 'REQUEST_URI' ], strrpos( $_SERVER[ 'REQUEST_URI' ], '.' ) + 1 );header( 'Content-type: ' . $mimetype ); // always send thisif ( false === strpos( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) )	header( 'Content-Length: ' . filesize( $file ) );// Optional support for X-Sendfile and X-Accel-Redirectif ( WPMU_ACCEL_REDIRECT ) {	header( 'X-Accel-Redirect: ' . str_replace( WP_CONTENT_DIR, '', $file ) );	exit;} elseif ( WPMU_SENDFILE ) {	header( 'X-Sendfile: ' . $file );	exit;}$last_modified = gmdate( 'D, d M Y H:i:s', filemtime( $file ) );$etag = '"' . md5( $last_modified ) . '"';header( "Last-Modified: $last_modified GMT" );header( 'ETag: ' . $etag );header( 'Expires: ' . gmdate( 'D, d M Y H:i:s', time() + 100000000 ) . ' GMT' );// Support for Conditional GET$client_etag = isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) ? stripslashes( $_SERVER['HTTP_IF_NONE_MATCH'] ) : false;if( ! isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = false;$client_last_modified = trim( $_SERVER['HTTP_IF_MODIFIED_SINCE'] );// If string is empty, return 0. If not, attempt to parse into a timestamp$client_modified_timestamp = $client_last_modified ? strtotime( $client_last_modified ) : 0;// Make a timestamp for our most recent modification...$modified_timestamp = strtotime($last_modified);if ( ( $client_last_modified && $client_etag )	? ( ( $client_modified_timestamp >= $modified_timestamp) && ( $client_etag == $etag ) )	: ( ( $client_modified_timestamp >= $modified_timestamp) || ( $client_etag == $etag ) )	) {	status_header( 304 );	exit;}// If we made it this far, just serve the filereadfile( $file );?>
<?php/** * RSS 1 RDF Feed Template for displaying RSS 1 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rdf') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rdf:RDF	xmlns="http://purl.org/rss/1.0/"	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:admin="http://webns.net/mvcb/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	<?php do_action('rdf_ns'); ?>><channel rdf:about="<?php bloginfo_rss("url") ?>">	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss('description') ?></description>	<dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></dc:date>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>	<?php do_action('rdf_header'); ?>	<items>		<rdf:Seq>		<?php while (have_posts()): the_post(); ?>			<rdf:li rdf:resource="<?php the_permalink_rss() ?>"/>		<?php endwhile; ?>		</rdf:Seq>	</items></channel><?php rewind_posts(); while (have_posts()): the_post(); ?><item rdf:about="<?php the_permalink_rss() ?>">	<title><?php the_title_rss() ?></title>	<link><?php the_permalink_rss() ?></link>	 <dc:date><?php echo mysql2date('Y-m-d\TH:i:s\Z', $post->post_date_gmt, false); ?></dc:date>	<dc:creator><?php the_author() ?></dc:creator>	<?php the_category_rss('rdf') ?><?php if (get_option('rss_use_excerpt')) : ?>	<description><?php the_excerpt_rss() ?></description><?php else : ?>	<description><?php the_excerpt_rss() ?></description>	<content:encoded><![CDATA[<?php the_content_feed('rdf') ?>]]></content:encoded><?php endif; ?>	<?php do_action('rdf_item'); ?></item><?php endwhile;  ?></rdf:RDF>
<?php/** * RSS2 Feed Template for displaying RSS2 Comments feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>';?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	<?php do_action('rss2_ns'); do_action('rss2_comments_ns'); ?>	><channel>	<title><?php		if ( is_singular() )			printf(ent2ncr(__('Comments on: %s')), get_the_title_rss());		elseif ( is_search() )			printf(ent2ncr(__('Comments for %s searching on %s')), get_bloginfo_rss( 'name' ), esc_attr($wp_query->query_vars['s']));		else			printf(ent2ncr(__('Comments for %s')), get_bloginfo_rss( 'name' ) . get_wp_title_rss());	?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php (is_single()) ? the_permalink_rss() : bloginfo_rss("url") ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('r', get_lastcommentmodified('GMT')); ?></lastBuildDate>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('commentsrss2_head'); ?><?phpif ( have_comments() ) : while ( have_comments() ) : the_comment();	$comment_post = get_post($comment->comment_post_ID);	get_post_custom($comment_post->ID);?>	<item>		<title><?php			if ( !is_singular() ) {				$title = get_the_title($comment_post->ID);				$title = apply_filters('the_title_rss', $title);				printf(ent2ncr(__('Comment on %1$s by %2$s')), $title, get_comment_author_rss());			} else {				printf(ent2ncr(__('By: %s')), get_comment_author_rss());			}		?></title>		<link><?php comment_link() ?></link>		<dc:creator><?php echo get_comment_author_rss() ?></dc:creator>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_comment_time('Y-m-d H:i:s', true, false), false); ?></pubDate>		<guid isPermaLink="false"><?php comment_guid() ?></guid><?php if ( post_password_required($comment_post) ) : ?>		<description><?php echo ent2ncr(__('Protected Comments: Please enter your password to view comments.')); ?></description>		<content:encoded><![CDATA[<?php echo get_the_password_form() ?>]]></content:encoded><?php else : // post pass ?>		<description><?php comment_text_rss() ?></description>		<content:encoded><![CDATA[<?php comment_text() ?>]]></content:encoded><?php endif; // post pass	do_action('commentrss2_item', $comment->comment_ID, $comment_post->ID);?>	</item><?php endwhile; endif; ?></channel></rss>
<?php/** * WordPress Export Administration API * * @package WordPress * @subpackage Administration *//** * Version number for the export format. * * Bump this when something changes that might affect compatibility. * * @since unknown * @var string */define('WXR_VERSION', '1.0');/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $args */function export_wp( $args = array() ) {	global $wpdb, $post_ids, $post, $wp_taxonomies;	if ( ! is_array( $args ) )		$args = array( 'author' => $args );	$defaults = array( 'author' => null, 'taxonomy' => null, 'post_type' => null, 'post_status' => null, 'start_date' => null, 'end_date' => null );	$args = wp_parse_args( $args, $defaults );	extract($args);	do_action('export_wp');	if( strlen( $start_date ) > 4 && strlen( $end_date ) > 4 )		$filename = 'wordpress.' . $start_date . '.' . $end_date . '.xml';	else		$filename = 'wordpress.' . date( 'Y-m-d' ) . '.xml';	header( 'Content-Description: File Transfer' );	header( 'Content-Disposition: attachment; filename=' . $filename );	header( 'Content-Type: text/xml; charset=' . get_option( 'blog_charset' ), true );	if ( $post_type && $post_type != 'all' )		$where = $wpdb->prepare("WHERE post_type = %s ", $post_type);	else		$where = "WHERE post_type != 'revision' ";	if ( $author && $author != 'all' ) {		$author_id = (int) $author;		$where .= $wpdb->prepare( "AND post_author = %d ", $author_id );	}	if ( $start_date && $start_date != 'all' )		$where .= $wpdb->prepare( "AND post_date >= %s ", $start_date );	if ( $end_date && $end_date != 'all' )		$where .= $wpdb->prepare( "AND post_date < %s ", $end_date );	if ( $taxonomy && is_array( $taxonomy ) ) {		foreach ( $taxonomy as $term_id ) {			if ( $term_id != 'all' )				$where .= $wpdb->prepare( "AND ID IN (SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d) ", $term_id );		}	}	if ( $post_status && $post_status != 'all' )		$where .= $wpdb->prepare( "AND post_status = %s", $status );	// grab a snapshot of post IDs, just in case it changes during the export	$post_ids = $wpdb->get_col( "SELECT ID FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	$categories = (array) get_categories( array( 'get' => 'all' ) );	$tags = (array) get_tags( array( 'get' => 'all' ) );	$custom_taxonomies = $wp_taxonomies;	unset( $custom_taxonomies['category'] );	unset( $custom_taxonomies['post_tag'] );	unset( $custom_taxonomies['link_category'] );	$custom_taxonomies = array_keys( $custom_taxonomies );	$terms = (array) get_terms( $custom_taxonomies, array( 'get' => 'all' ) );	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param unknown_type $categories	 */	function wxr_missing_parents( $categories ) {		if ( ! is_array( $categories ) || empty( $categories ) )			return array();		foreach ( $categories as $category ){			$parents[$category->term_id] = $category->parent;		}		$parents = array_unique( array_diff( $parents, array_keys( $parents ) ) );		if ( $zero = array_search( '0', $parents ) )			unset( $parents[$zero] );		return $parents;	}	while ( $parents = wxr_missing_parents( $categories ) ) {		$found_parents = get_categories( array( 'include' => join( ', ', $parents) ) );		if ( is_array( $found_parents ) && count( $found_parents ) )			$categories = array_merge( $categories, $found_parents );		else			break;	}	// Put them in order to be inserted with no child going before its parent	$pass = 0;	$passes = 1000 + count( $categories );	while ( ( $cat = array_shift( $categories ) ) && ++$pass < $passes ) {		if ( $cat->parent == 0 || isset( $cats[$cat->parent] ) )			$cats[$cat->term_id] = $cat;		else			$categories[] = $cat;	}	unset( $categories );	/**	 * Place string in CDATA tag.	 *	 * @since unknown	 *	 * @param string $str String to place in XML CDATA tag.	 */	function wxr_cdata( $str ) {		if ( seems_utf8( $str ) == false )			$str = utf8_encode( $str );		// $str = ent2ncr(esc_html($str));		$str = "<![CDATA[$str" . ( ( substr( $str, -1 ) == ']' ) ? ' ' : '') . "]]>";		return $str;	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @return string Site URL.	 */	function wxr_site_url() {		global $current_site;		// mu: the base url		if ( isset( $current_site->domain ) )			return network_home_url();		// wp: the blog url		else			return get_bloginfo_rss( 'url' );	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_cat_name( $c ) {		if ( empty( $c->name ) )			return;		echo '<wp:cat_name>' . wxr_cdata( $c->name ) . '</wp:cat_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_category_description( $c ) {		if ( empty( $c->description ) )			return;		echo '<wp:category_description>' . wxr_cdata($c->description) . '</wp:category_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:tag_name>' . wxr_cdata($t->name) . '</wp:tag_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:tag_description>' . wxr_cdata($t->description) . '</wp:tag_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:term_name>' . wxr_cdata($t->name) . '</wp:term_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:term_description>' . wxr_cdata($t->description) . '</wp:term_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 */	function wxr_post_taxonomy() {		global $post;		$the_list = '';		$filter = 'rss';		$taxonomies = get_object_taxonomies( 'post' );		$terms = wp_get_post_terms( $post->ID, $taxonomies );		foreach ( (array) $terms as $term ) {			$domain = ( 'post_tag' == $term->taxonomy ) ? 'tag' : $term->taxonomy;			$term_name = sanitize_term_field( 'name', $term->name, $term->term_id, $term->taxonomy, $filter );			// Back compat.			if ( 'category' == $term->taxonomy )				$the_list .= "\n\t\t<category><![CDATA[$term_name]]></category>\n";			elseif ( 'post_tag' == $term->taxonomy )				$the_list .= "\n\t\t<category domain=\"$domain\"><![CDATA[$term_name]]></category>\n";			// forwards compatibility as above			$the_list .= "\n\t\t<category domain=\"$domain\" nicename=\"{$term->slug}\"><![CDATA[$term_name]]></category>\n";		}		echo $the_list;	}	echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . '"?' . ">\n";	?><!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. --><!-- It contains information about your blog's posts, comments, and categories. --><!-- You may use this file to transfer that content from one site to another. --><!-- This file is not intended to serve as a complete backup of your blog. --><!-- To import this information into a WordPress blog follow these steps. --><!-- 1. Log in to that blog as an administrator. --><!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). --><!-- 3. Choose "WordPress" from the list. --><!-- 4. Upload this file using the form provided on that page. --><!-- 5. You will first be asked to map the authors in this export file to users --><!--    on the blog.  For each author, you may choose to map to an --><!--    existing user on the blog or to create a new user --><!-- 6. WordPress will then import each of the posts, comments, and categories --><!--    contained in this file into your blog --><?php the_generator( 'export' );?><rss version="2.0"	xmlns:excerpt="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/excerpt/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:wp="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/"><channel>	<title><?php bloginfo_rss( 'name' ); ?></title>	<link><?php bloginfo_rss( 'url' ) ?></link>	<description><?php bloginfo_rss( 'description' ) ?></description>	<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_lastpostmodified( 'GMT' ), false ); ?></pubDate>	<generator>http://wordpress.org/?v=<?php bloginfo_rss( 'version' ); ?></generator>	<language><?php echo get_option( 'rss_language' ); ?></language>	<wp:wxr_version><?php echo WXR_VERSION; ?></wp:wxr_version>	<wp:base_site_url><?php echo wxr_site_url(); ?></wp:base_site_url>	<wp:base_blog_url><?php bloginfo_rss( 'url' ); ?></wp:base_blog_url>	<?php if ( $cats ) : foreach ( $cats as $c ) : ?>	<wp:category><wp:category_nicename><?php echo $c->slug; ?></wp:category_nicename><wp:category_parent><?php echo $c->parent ? $cats[$c->parent]->name : ''; ?></wp:category_parent><?php wxr_cat_name( $c ); ?><?php wxr_category_description( $c ); ?></wp:category>	<?php endforeach; endif; ?>	<?php if ( $tags ) : foreach ( $tags as $t ) : ?>	<wp:tag><wp:tag_slug><?php echo $t->slug; ?></wp:tag_slug><?php wxr_tag_name( $t ); ?><?php wxr_tag_description( $t ); ?></wp:tag>	<?php endforeach; endif; ?>	<?php if ( $terms ) : foreach ( $terms as $t ) : ?>	<wp:term><wp:term_taxonomy><?php echo $t->taxonomy; ?></wp:term_taxonomy><wp:term_slug><?php echo $t->slug; ?></wp:term_slug><wp:term_parent><?php echo $t->parent ? $custom_taxonomies[$t->parent]->name : ''; ?></wp:term_parent><?php wxr_term_name( $t ); ?><?php wxr_term_description( $t ); ?></wp:term>	<?php endforeach; endif; ?>	<?php do_action( 'rss2_head' ); ?>	<?php if ( $post_ids ) {	global $wp_query;	$wp_query->in_the_loop = true;  // Fake being in the loop.	// fetch 20 posts at a time rather than loading the entire table into memory	while ( $next_posts = array_splice( $post_ids, 0, 20 ) ) {	$where = "WHERE ID IN (" . join( ',', $next_posts ) . ")";	$posts = $wpdb->get_results( "SELECT * FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	// Begin Loop	foreach ($posts as $post) {	setup_postdata( $post );	$is_sticky = 0;	if ( is_sticky( $post->ID ) )		$is_sticky = 1;	?>	<item>		<title><?php echo apply_filters( 'the_title_rss', $post->post_title ); ?></title>		<link><?php the_permalink_rss() ?></link>		<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_post_time( 'Y-m-d H:i:s', true ), false ); ?></pubDate>		<dc:creator><?php echo wxr_cdata( get_the_author() ); ?></dc:creator>		<?php wxr_post_taxonomy() ?>		<guid isPermaLink="false"><?php esc_url( the_guid() ); ?></guid>		<description></description>		<content:encoded><?php echo wxr_cdata( apply_filters( 'the_content_export', $post->post_content ) ); ?></content:encoded>		<excerpt:encoded><?php echo wxr_cdata( apply_filters( 'the_excerpt_export', $post->post_excerpt ) ); ?></excerpt:encoded>		<wp:post_id><?php echo $post->ID; ?></wp:post_id>		<wp:post_date><?php echo $post->post_date; ?></wp:post_date>		<wp:post_date_gmt><?php echo $post->post_date_gmt; ?></wp:post_date_gmt>		<wp:comment_status><?php echo $post->comment_status; ?></wp:comment_status>		<wp:ping_status><?php echo $post->ping_status; ?></wp:ping_status>		<wp:post_name><?php echo $post->post_name; ?></wp:post_name>		<wp:status><?php echo $post->post_status; ?></wp:status>		<wp:post_parent><?php echo $post->post_parent; ?></wp:post_parent>		<wp:menu_order><?php echo $post->menu_order; ?></wp:menu_order>		<wp:post_type><?php echo $post->post_type; ?></wp:post_type>		<wp:post_password><?php echo $post->post_password; ?></wp:post_password>		<wp:is_sticky><?php echo $is_sticky; ?></wp:is_sticky>		<?php		if ( $post->post_type == 'attachment' ) { ?>		<wp:attachment_url><?php echo wp_get_attachment_url( $post->ID ); ?></wp:attachment_url>		<?php } ?>		<?php		$postmeta = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->postmeta WHERE post_id = %d", $post->ID ) );		if ( $postmeta ) {		?>		<?php foreach( $postmeta as $meta ) { ?>		<wp:postmeta>		<wp:meta_key><?php echo $meta->meta_key; ?></wp:meta_key>		<wp:meta_value><?php echo wxr_cdata( $meta->meta_value ); ?></wp:meta_value>		</wp:postmeta>		<?php } ?>		<?php } ?>		<?php		$comments = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d", $post->ID ) );		if ( $comments ) { foreach ( $comments as $c ) { ?>		<wp:comment>		<wp:comment_id><?php echo $c->comment_ID; ?></wp:comment_id>		<wp:comment_author><?php echo wxr_cdata( $c->comment_author ); ?></wp:comment_author>		<wp:comment_author_email><?php echo $c->comment_author_email; ?></wp:comment_author_email>		<wp:comment_author_url><?php echo esc_url_raw( $c->comment_author_url ); ?></wp:comment_author_url>		<wp:comment_author_IP><?php echo $c->comment_author_IP; ?></wp:comment_author_IP>		<wp:comment_date><?php echo $c->comment_date; ?></wp:comment_date>		<wp:comment_date_gmt><?php echo $c->comment_date_gmt; ?></wp:comment_date_gmt>		<wp:comment_content><?php echo wxr_cdata( $c->comment_content ) ?></wp:comment_content>		<wp:comment_approved><?php echo $c->comment_approved; ?></wp:comment_approved>		<wp:comment_type><?php echo $c->comment_type; ?></wp:comment_type>		<wp:comment_parent><?php echo $c->comment_parent; ?></wp:comment_parent>		<wp:comment_user_id><?php echo $c->user_id; ?></wp:comment_user_id>		</wp:comment>		<?php } } ?>	</item>	<?php	}	}} ?></channel></rss><?php}?>
<?php/** * Default Embed Handlers * * @package WordPress * @subpackage Embeds *//** * The Google Video embed handler callback. Google Video does not support oEmbed. * * @see WP_Embed::register_handler() * @see WP_Embed::shortcode() * * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}. * @param array $attr Embed attributes. * @param string $url The original URL that was matched by the regex. * @param array $rawattr The original unmodified attributes. * @return string The embed HTML. */function wp_embed_handler_googlevideo( $matches, $attr, $url, $rawattr ) {	// If the user supplied a fixed width AND height, use it	if ( !empty($rawattr['width']) && !empty($rawattr['height']) ) {		$width  = (int) $rawattr['width'];		$height = (int) $rawattr['height'];	} else {		list( $width, $height ) = wp_expand_dimensions( 425, 344, $attr['width'], $attr['height'] );	}	return apply_filters( 'embed_googlevideo', '<embed type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docid=' . esc_attr($matches[2]) . '&amp;hl=en&amp;fs=true" style="width:' . esc_attr($width) . 'px;height:' . esc_attr($height) . 'px" allowFullScreen="true" allowScriptAccess="always"></embed>', $matches, $attr, $url, $rawattr );}wp_embed_register_handler( 'googlevideo', '#http://video\.google\.([A-Za-z.]{2,5})/videoplay\?docid=([\d-]+)(.*?)#i', 'wp_embed_handler_googlevideo' );?>
<?php/** * WordPress API for creating bbcode like tags or what WordPress calls * "shortcodes." The tag and attribute parsing or regular expression code is * based on the Textpattern tag parser. * * A few examples are below: * * [shortcode /] * [shortcode foo="bar" baz="bing" /] * [shortcode foo="bar"]content[/shortcode] * * Shortcode tags support attributes and enclosed content, but does not entirely * support inline shortcodes in other shortcodes. You will have to call the * shortcode parser in your function to account for that. * * {@internal * Please be aware that the above note was made during the beta of WordPress 2.6 * and in the future may not be accurate. Please update the note when it is no * longer the case.}} * * To apply shortcode tags to content: * * <code> * $out = do_shortcode($content); * </code> * * @link http://codex.wordpress.org/Shortcode_API * * @package WordPress * @subpackage Shortcodes * @since 2.5 *//** * Container for storing shortcode tags and their hook to call for the shortcode * * @since 2.5 * @name $shortcode_tags * @var array * @global array $shortcode_tags */$shortcode_tags = array();/** * Add hook for shortcode tag. * * There can only be one hook for each shortcode. Which means that if another * plugin has a similar shortcode, it will override yours or yours will override * theirs depending on which order the plugins are included and/or ran. * * Simplest example of a shortcode tag using the API: * * <code> * // [footag foo="bar"] * function footag_func($atts) { * 	return "foo = {$atts[foo]}"; * } * add_shortcode('footag', 'footag_func'); * </code> * * Example with nice attribute defaults: * * <code> * // [bartag foo="bar"] * function bartag_func($atts) { * 	extract(shortcode_atts(array( * 		'foo' => 'no foo', * 		'baz' => 'default baz', * 	), $atts)); * * 	return "foo = {$foo}"; * } * add_shortcode('bartag', 'bartag_func'); * </code> * * Example with enclosed content: * * <code> * // [baztag]content[/baztag] * function baztag_func($atts, $content='') { * 	return "content = $content"; * } * add_shortcode('baztag', 'baztag_func'); * </code> * * @since 2.5 * @uses $shortcode_tags * * @param string $tag Shortcode tag to be searched in post content. * @param callable $func Hook to run when shortcode is found. */function add_shortcode($tag, $func) {	global $shortcode_tags;	if ( is_callable($func) )		$shortcode_tags[$tag] = $func;}/** * Removes hook for shortcode. * * @since 2.5 * @uses $shortcode_tags * * @param string $tag shortcode tag to remove hook for. */function remove_shortcode($tag) {	global $shortcode_tags;	unset($shortcode_tags[$tag]);}/** * Clear all shortcodes. * * This function is simple, it clears all of the shortcode tags by replacing the * shortcodes global by a empty array. This is actually a very efficient method * for removing all shortcodes. * * @since 2.5 * @uses $shortcode_tags */function remove_all_shortcodes() {	global $shortcode_tags;	$shortcode_tags = array();}/** * Search content for shortcodes and filter shortcodes through their hooks. * * If there are no shortcode tags defined, then the content will be returned * without any filtering. This might cause issues when plugins are disabled but * the shortcode will still show up in the post or content. * * @since 2.5 * @uses $shortcode_tags * @uses get_shortcode_regex() Gets the search pattern for searching shortcodes. * * @param string $content Content to search for shortcodes * @return string Content with shortcodes filtered out. */function do_shortcode($content) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace_callback('/'.$pattern.'/s', 'do_shortcode_tag', $content);}/** * Retrieve the shortcode regular expression for searching. * * The regular expression combines the shortcode tags in the regular expression * in a regex class. * * The regular expresion contains 6 different sub matches to help with parsing. * * 1/6 - An extra [ or ] to allow for escaping shortcodes with double [[]] * 2 - The shortcode name * 3 - The shortcode argument list * 4 - The self closing / * 5 - The content of a shortcode when it wraps some content. * * @since 2.5 * @uses $shortcode_tags * * @return string The shortcode search regular expression */function get_shortcode_regex() {	global $shortcode_tags;	$tagnames = array_keys($shortcode_tags);	$tagregexp = join( '|', array_map('preg_quote', $tagnames) );	// WARNING! Do not change this regex without changing do_shortcode_tag() and strip_shortcodes()	return '(.?)\[('.$tagregexp.')\b(.*?)(?:(\/))?\](?:(.+?)\[\/\2\])?(.?)';}/** * Regular Expression callable for do_shortcode() for calling shortcode hook. * @see get_shortcode_regex for details of the match array contents. * * @since 2.5 * @access private * @uses $shortcode_tags * * @param array $m Regular expression match array * @return mixed False on failure. */function do_shortcode_tag( $m ) {	global $shortcode_tags;	// allow [[foo]] syntax for escaping a tag	if ( $m[1] == '[' && $m[6] == ']' ) {		return substr($m[0], 1, -1);	}	$tag = $m[2];	$attr = shortcode_parse_atts( $m[3] );	if ( isset( $m[5] ) ) {		// enclosing tag - extra parameter		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, $m[5], $tag ) . $m[6];	} else {		// self-closing tag		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, NULL,  $tag ) . $m[6];	}}/** * Retrieve all attributes from the shortcodes tag. * * The attributes list has the attribute name as the key and the value of the * attribute as the value in the key/value pair. This allows for easier * retrieval of the attributes, since all attributes have to be known. * * @since 2.5 * * @param string $text * @return array List of attributes and their value. */function shortcode_parse_atts($text) {	$atts = array();	$pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';	$text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);	if ( preg_match_all($pattern, $text, $match, PREG_SET_ORDER) ) {		foreach ($match as $m) {			if (!empty($m[1]))				$atts[strtolower($m[1])] = stripcslashes($m[2]);			elseif (!empty($m[3]))				$atts[strtolower($m[3])] = stripcslashes($m[4]);			elseif (!empty($m[5]))				$atts[strtolower($m[5])] = stripcslashes($m[6]);			elseif (isset($m[7]) and strlen($m[7]))				$atts[] = stripcslashes($m[7]);			elseif (isset($m[8]))				$atts[] = stripcslashes($m[8]);		}	} else {		$atts = ltrim($text);	}	return $atts;}/** * Combine user attributes with known attributes and fill in defaults when needed. * * The pairs should be considered to be all of the attributes which are * supported by the caller and given as a list. The returned attributes will * only contain the attributes in the $pairs list. * * If the $atts list has unsupported attributes, then they will be ignored and * removed from the final returned list. * * @since 2.5 * * @param array $pairs Entire list of supported attributes and their defaults. * @param array $atts User defined attributes in shortcode tag. * @return array Combined and filtered attribute list. */function shortcode_atts($pairs, $atts) {	$atts = (array)$atts;	$out = array();	foreach($pairs as $name => $default) {		if ( array_key_exists($name, $atts) )			$out[$name] = $atts[$name];		else			$out[$name] = $default;	}	return $out;}/** * Remove all shortcode tags from the given content. * * @since 2.5 * @uses $shortcode_tags * * @param string $content Content to remove shortcode tags. * @return string Content without shortcode tags. */function strip_shortcodes( $content ) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace('/'.$pattern.'/s', '$1$6', $content);}add_filter('the_content', 'do_shortcode', 11); // AFTER wpautop()?>
<?php/** * The template for displaying Archive pages. * * Used to display archive-type pages if nothing more specific matches a query. * For example, puts together date-based pages if no date.php file exists. * * Learn more: http://codex.wordpress.org/Template_Hierarchy * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know	 * what date we're dealing with (if that is the case).	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>			<h1 class="page-title"><?php if ( is_day() ) : ?>				<?php printf( __( 'Daily Archives: <span>%s</span>', 'twentyten' ), get_the_date() ); ?><?php elseif ( is_month() ) : ?>				<?php printf( __( 'Monthly Archives: <span>%s</span>', 'twentyten' ), get_the_date('F Y') ); ?><?php elseif ( is_year() ) : ?>				<?php printf( __( 'Yearly Archives: <span>%s</span>', 'twentyten' ), get_the_date('Y') ); ?><?php else : ?>				<?php _e( 'Blog Archives', 'twentyten' ); ?><?php endif; ?>			</h1><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the archives page to output the posts.	 * If you want to overload this in a child theme then include a file	 * called loop-archives.php and that will be used instead.	 */	 get_template_part( 'loop', 'archive' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
<?php/** * WordPress Options Header. * * Resets variables: 'action', 'standalone', and 'option_group_id'. Displays * updated message, if updated variable is part of the URL query. * * @package WordPress * @subpackage Administration */wp_reset_vars(array('action', 'standalone', 'option_group_id'));settings_errors();?>
<?php/** * Reading settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __( 'Reading Settings' );$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen contains the settings that affect the display of your content.') . '</p>' .	'<p>' . sprintf(__('You can choose what&#8217;s displayed on the front page of your site. It can be posts in reverse chronological order (classic blog), or a fixed/static page. To set a static home page, you first need to create two <a href="%s">Pages</a>. One will become the front page, and the other will be where your posts are displayed.'), 'post-new.php?post_type=page') . '</p>' .	'<p>' . __('You can also control the display of your content in RSS feeds, including the maximum numbers of posts to display, whether to show full text or a summary, and the character set encoding.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Reading_SubPanel" target="_blank">Reading Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form1" method="post" action="options.php"><?php settings_fields( 'reading' ); ?><?php if ( ! get_pages() ) : ?><input name="show_on_front" type="hidden" value="posts" /><table class="form-table"><?php else :	if ( 'page' == get_option( 'show_on_front' ) && ! get_option( 'page_on_front' ) && ! get_option( 'page_for_posts' ) )		update_option( 'show_on_front', 'posts' );?><table class="form-table"><tr valign="top"><th scope="row"><?php _e( 'Front page displays' ); ?></th><td id="front-static-pages"><fieldset><legend class="screen-reader-text"><span><?php _e( 'Front page displays' ); ?></span></legend>	<p><label>		<input name="show_on_front" type="radio" value="posts" class="tog" <?php checked( 'posts', get_option( 'show_on_front' ) ); ?> />		<?php _e( 'Your latest posts' ); ?>	</label>	</p>	<p><label>		<input name="show_on_front" type="radio" value="page" class="tog" <?php checked( 'page', get_option( 'show_on_front' ) ); ?> />		<?php printf( __( 'A <a href="%s">static page</a> (select below)' ), 'edit.php?post_type=page' ); ?>	</label>	</p><ul>	<li><label for="page_on_front"><?php printf( __( 'Front page: %s' ), wp_dropdown_pages( array( 'name' => 'page_on_front', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_on_front' ) ) ) ); ?></label></li>	<li><label for="page_for_posts"><?php printf( __( 'Posts page: %s' ), wp_dropdown_pages( array( 'name' => 'page_for_posts', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_for_posts' ) ) ) ); ?></label></li></ul><?php if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_for_posts' ) == get_option( 'page_on_front' ) ) : ?><div id="front-page-warning" class="error inline"><p><?php _e( '<strong>Warning:</strong> these pages should not be the same!' ); ?></p></div><?php endif; ?></fieldset></td></tr><?php endif; ?><tr valign="top"><th scope="row"><label for="posts_per_page"><?php _e( 'Blog pages show at most' ); ?></label></th><td><input name="posts_per_page" type="text" id="posts_per_page" value="<?php form_option( 'posts_per_page' ); ?>" class="small-text" /> <?php _e( 'posts' ); ?></td></tr><tr valign="top"><th scope="row"><label for="posts_per_rss"><?php _e( 'Syndication feeds show the most recent' ); ?></label></th><td><input name="posts_per_rss" type="text" id="posts_per_rss" value="<?php form_option( 'posts_per_rss' ); ?>" class="small-text" /> <?php _e( 'items' ); ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'For each article in a feed, show' ); ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'For each article in a feed, show' ); ?> </span></legend><p><label><input name="rss_use_excerpt"  type="radio" value="0" <?php checked( 0, get_option( 'rss_use_excerpt' ) ); ?>	/> <?php _e( 'Full text' ); ?></label><br /><label><input name="rss_use_excerpt" type="radio" value="1" <?php checked( 1, get_option( 'rss_use_excerpt' ) ); ?> /> <?php _e( 'Summary' ); ?></label></p></fieldset></td></tr><tr valign="top"><th scope="row"><label for="blog_charset"><?php _e( 'Encoding for pages and feeds' ); ?></label></th><td><input name="blog_charset" type="text" id="blog_charset" value="<?php form_option( 'blog_charset' ); ?>" class="regular-text" /><span class="description"><?php _e( 'The <a href="http://codex.wordpress.org/Glossary#Character_set">character encoding</a> of your site (UTF-8 is recommended, if you are adventurous there are some <a href="http://en.wikipedia.org/wiki/Character_set">other encodings</a>)' ); ?></span></td></tr><?php do_settings_fields( 'reading', 'default' ); ?></table><?php do_settings_sections( 'reading' ); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php include( './admin-footer.php' ); ?>
<?php/** * Handles Comment Post to WordPress and prevents duplicate comment posting. * * @package WordPress */if ( 'POST' != $_SERVER['REQUEST_METHOD'] ) {	header('Allow: POST');	header('HTTP/1.1 405 Method Not Allowed');	header('Content-Type: text/plain');	exit;}/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );nocache_headers();$comment_post_ID = isset($_POST['comment_post_ID']) ? (int) $_POST['comment_post_ID'] : 0;$post = get_post($comment_post_ID);if ( empty($post->comment_status) ) {	do_action('comment_id_not_found', $comment_post_ID);	exit;}// get_post_status() will get the parent status for attachments.$status = get_post_status($post);$status_obj = get_post_status_object($status);if ( !comments_open($comment_post_ID) ) {	do_action('comment_closed', $comment_post_ID);	wp_die( __('Sorry, comments are closed for this item.') );} elseif ( 'trash' == $status ) {	do_action('comment_on_trash', $comment_post_ID);	exit;} elseif ( !$status_obj->public && !$status_obj->private ) {	do_action('comment_on_draft', $comment_post_ID);	exit;} elseif ( post_password_required($comment_post_ID) ) {	do_action('comment_on_password_protected', $comment_post_ID);	exit;} else {	do_action('pre_comment_on_post', $comment_post_ID);}$comment_author       = ( isset($_POST['author']) )  ? trim(strip_tags($_POST['author'])) : null;$comment_author_email = ( isset($_POST['email']) )   ? trim($_POST['email']) : null;$comment_author_url   = ( isset($_POST['url']) )     ? trim($_POST['url']) : null;$comment_content      = ( isset($_POST['comment']) ) ? trim($_POST['comment']) : null;// If the user is logged in$user = wp_get_current_user();if ( $user->ID ) {	if ( empty( $user->display_name ) )		$user->display_name=$user->user_login;	$comment_author       = $wpdb->escape($user->display_name);	$comment_author_email = $wpdb->escape($user->user_email);	$comment_author_url   = $wpdb->escape($user->user_url);	if ( current_user_can('unfiltered_html') ) {		if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {			kses_remove_filters(); // start with a clean slate			kses_init_filters(); // set up the filters		}	}} else {	if ( get_option('comment_registration') || 'private' == $status )		wp_die( __('Sorry, you must be logged in to post a comment.') );}$comment_type = '';if ( get_option('require_name_email') && !$user->ID ) {	if ( 6 > strlen($comment_author_email) || '' == $comment_author )		wp_die( __('Error: please fill the required fields (name, email).') );	elseif ( !is_email($comment_author_email))		wp_die( __('Error: please enter a valid email address.') );}if ( '' == $comment_content )	wp_die( __('Error: please type a comment.') );$comment_parent = isset($_POST['comment_parent']) ? absint($_POST['comment_parent']) : 0;$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');$comment_id = wp_new_comment( $commentdata );$comment = get_comment($comment_id);if ( !$user->ID ) {	$comment_cookie_lifetime = apply_filters('comment_cookie_lifetime', 30000000);	setcookie('comment_author_' . COOKIEHASH, $comment->comment_author, time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);	setcookie('comment_author_email_' . COOKIEHASH, $comment->comment_author_email, time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);	setcookie('comment_author_url_' . COOKIEHASH, esc_url($comment->comment_author_url), time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);}$location = empty($_POST['redirect_to']) ? get_comment_link($comment_id) : $_POST['redirect_to'] . '#comment-' . $comment_id;$location = apply_filters('comment_post_redirect', $location, $comment);wp_redirect($location);?>
<?php/** * Date and Time Locale object * * @package WordPress * @subpackage i18n *//** * Class that loads the calendar locale. * * @since 2.1.0 */class WP_Locale {	/**	 * Stores the translated strings for the full weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday;	/**	 * Stores the translated strings for the one character weekday names.	 *	 * There is a hack to make sure that Tuesday and Thursday, as well	 * as Sunday and Saturday don't conflict. See init() method for more.	 *	 * @see WP_Locale::init() for how to handle the hack.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_initial;	/**	 * Stores the translated strings for the abbreviated weekday names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $weekday_abbrev;	/**	 * Stores the translated strings for the full month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month;	/**	 * Stores the translated strings for the abbreviated month names.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $month_abbrev;	/**	 * Stores the translated strings for 'am' and 'pm'.	 *	 * Also the capalized versions.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $meridiem;	/**	 * The text direction of the locale language.	 *	 * Default is left to right 'ltr'.	 *	 * @since 2.1.0	 * @var string	 * @access private	 */	var $text_direction = 'ltr';	/**	 * Imports the global version to the class property.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $locale_vars = array('text_direction');	/**	 * Sets up the translated strings and object properties.	 *	 * The method creates the translatable strings for various	 * calendar elements. Which allows for specifying locale	 * specific calendar names and text direction.	 *	 * @since 2.1.0	 * @access private	 */	function init() {		// The Weekdays		$this->weekday[0] = /* translators: weekday */ __('Sunday');		$this->weekday[1] = /* translators: weekday */ __('Monday');		$this->weekday[2] = /* translators: weekday */ __('Tuesday');		$this->weekday[3] = /* translators: weekday */ __('Wednesday');		$this->weekday[4] = /* translators: weekday */ __('Thursday');		$this->weekday[5] = /* translators: weekday */ __('Friday');		$this->weekday[6] = /* translators: weekday */ __('Saturday');		// The first letter of each day.  The _%day%_initial suffix is a hack to make		// sure the day initials are unique.		$this->weekday_initial[__('Sunday')]    = /* translators: one-letter abbreviation of the weekday */ __('S_Sunday_initial');		$this->weekday_initial[__('Monday')]    = /* translators: one-letter abbreviation of the weekday */ __('M_Monday_initial');		$this->weekday_initial[__('Tuesday')]   = /* translators: one-letter abbreviation of the weekday */ __('T_Tuesday_initial');		$this->weekday_initial[__('Wednesday')] = /* translators: one-letter abbreviation of the weekday */ __('W_Wednesday_initial');		$this->weekday_initial[__('Thursday')]  = /* translators: one-letter abbreviation of the weekday */ __('T_Thursday_initial');		$this->weekday_initial[__('Friday')]    = /* translators: one-letter abbreviation of the weekday */ __('F_Friday_initial');		$this->weekday_initial[__('Saturday')]  = /* translators: one-letter abbreviation of the weekday */ __('S_Saturday_initial');		foreach ($this->weekday_initial as $weekday_ => $weekday_initial_) {			$this->weekday_initial[$weekday_] = preg_replace('/_.+_initial$/', '', $weekday_initial_);		}		// Abbreviations for each day.		$this->weekday_abbrev[__('Sunday')]    = /* translators: three-letter abbreviation of the weekday */ __('Sun');		$this->weekday_abbrev[__('Monday')]    = /* translators: three-letter abbreviation of the weekday */ __('Mon');		$this->weekday_abbrev[__('Tuesday')]   = /* translators: three-letter abbreviation of the weekday */ __('Tue');		$this->weekday_abbrev[__('Wednesday')] = /* translators: three-letter abbreviation of the weekday */ __('Wed');		$this->weekday_abbrev[__('Thursday')]  = /* translators: three-letter abbreviation of the weekday */ __('Thu');		$this->weekday_abbrev[__('Friday')]    = /* translators: three-letter abbreviation of the weekday */ __('Fri');		$this->weekday_abbrev[__('Saturday')]  = /* translators: three-letter abbreviation of the weekday */ __('Sat');		// The Months		$this->month['01'] = /* translators: month name */ __('January');		$this->month['02'] = /* translators: month name */ __('February');		$this->month['03'] = /* translators: month name */ __('March');		$this->month['04'] = /* translators: month name */ __('April');		$this->month['05'] = /* translators: month name */ __('May');		$this->month['06'] = /* translators: month name */ __('June');		$this->month['07'] = /* translators: month name */ __('July');		$this->month['08'] = /* translators: month name */ __('August');		$this->month['09'] = /* translators: month name */ __('September');		$this->month['10'] = /* translators: month name */ __('October');		$this->month['11'] = /* translators: month name */ __('November');		$this->month['12'] = /* translators: month name */ __('December');		// Abbreviations for each month. Uses the same hack as above to get around the		// 'May' duplication.		$this->month_abbrev[__('January')] = /* translators: three-letter abbreviation of the month */ __('Jan_January_abbreviation');		$this->month_abbrev[__('February')] = /* translators: three-letter abbreviation of the month */ __('Feb_February_abbreviation');		$this->month_abbrev[__('March')] = /* translators: three-letter abbreviation of the month */ __('Mar_March_abbreviation');		$this->month_abbrev[__('April')] = /* translators: three-letter abbreviation of the month */ __('Apr_April_abbreviation');		$this->month_abbrev[__('May')] = /* translators: three-letter abbreviation of the month */ __('May_May_abbreviation');		$this->month_abbrev[__('June')] = /* translators: three-letter abbreviation of the month */ __('Jun_June_abbreviation');		$this->month_abbrev[__('July')] = /* translators: three-letter abbreviation of the month */ __('Jul_July_abbreviation');		$this->month_abbrev[__('August')] = /* translators: three-letter abbreviation of the month */ __('Aug_August_abbreviation');		$this->month_abbrev[__('September')] = /* translators: three-letter abbreviation of the month */ __('Sep_September_abbreviation');		$this->month_abbrev[__('October')] = /* translators: three-letter abbreviation of the month */ __('Oct_October_abbreviation');		$this->month_abbrev[__('November')] = /* translators: three-letter abbreviation of the month */ __('Nov_November_abbreviation');		$this->month_abbrev[__('December')] = /* translators: three-letter abbreviation of the month */ __('Dec_December_abbreviation');		foreach ($this->month_abbrev as $month_ => $month_abbrev_) {			$this->month_abbrev[$month_] = preg_replace('/_.+_abbreviation$/', '', $month_abbrev_);		}		// The Meridiems		$this->meridiem['am'] = __('am');		$this->meridiem['pm'] = __('pm');		$this->meridiem['AM'] = __('AM');		$this->meridiem['PM'] = __('PM');		// Numbers formatting		// See http://php.net/number_format		/* translators: $thousands_sep argument for http://php.net/number_format, default is , */		$trans = __('number_format_thousands_sep');		$this->number_format['thousands_sep'] = ('number_format_thousands_sep' == $trans) ? ',' : $trans;		/* translators: $dec_point argument for http://php.net/number_format, default is . */		$trans = __('number_format_decimal_point');		$this->number_format['decimal_point'] = ('number_format_decimal_point' == $trans) ? '.' : $trans;		// Import global locale vars set during inclusion of $locale.php.		foreach ( (array) $this->locale_vars as $var ) {			if ( isset($GLOBALS[$var]) )				$this->$var = $GLOBALS[$var];		}	}	/**	 * Retrieve the full translated weekday word.	 *	 * Week starts on translated Sunday and can be fetched	 * by using 0 (zero). So the week starts with 0 (zero)	 * and ends on Saturday with is fetched by using 6 (six).	 *	 * @since 2.1.0	 * @access public	 *	 * @param int $weekday_number 0 for Sunday through 6 Saturday	 * @return string Full translated weekday	 */	function get_weekday($weekday_number) {		return $this->weekday[$weekday_number];	}	/**	 * Retrieve the translated weekday initial.	 *	 * The weekday initial is retrieved by the translated	 * full weekday word. When translating the weekday initial	 * pay attention to make sure that the starting letter does	 * not conflict.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name	 * @return string	 */	function get_weekday_initial($weekday_name) {		return $this->weekday_initial[$weekday_name];	}	/**	 * Retrieve the translated weekday abbreviation.	 *	 * The weekday abbreviation is retrieved by the translated	 * full weekday word.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $weekday_name Full translated weekday word	 * @return string Translated weekday abbreviation	 */	function get_weekday_abbrev($weekday_name) {		return $this->weekday_abbrev[$weekday_name];	}	/**	 * Retrieve the full translated month by month number.	 *	 * The $month_number parameter has to be a string	 * because it must have the '0' in front of any number	 * that is less than 10. Starts from '01' and ends at	 * '12'.	 *	 * You can use an integer instead and it will add the	 * '0' before the numbers less than 10 for you.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $month_number '01' through '12'	 * @return string Translated full month name	 */	function get_month($month_number) {		return $this->month[zeroise($month_number, 2)];	}	/**	 * Retrieve translated version of month abbreviation string.	 *	 * The $month_name parameter is expected to be the translated or	 * translatable version of the month.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $month_name Translated month to get abbreviated version	 * @return string Translated abbreviated month	 */	function get_month_abbrev($month_name) {		return $this->month_abbrev[$month_name];	}	/**	 * Retrieve translated version of meridiem string.	 *	 * The $meridiem parameter is expected to not be translated.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.	 * @return string Translated version	 */	function get_meridiem($meridiem) {		return $this->meridiem[$meridiem];	}	/**	 * Global variables are deprecated. For backwards compatibility only.	 *	 * @deprecated For backwards compatibility only.	 * @access private	 *	 * @since 2.1.0	 */	function register_globals() {		$GLOBALS['weekday']         = $this->weekday;		$GLOBALS['weekday_initial'] = $this->weekday_initial;		$GLOBALS['weekday_abbrev']  = $this->weekday_abbrev;		$GLOBALS['month']           = $this->month;		$GLOBALS['month_abbrev']    = $this->month_abbrev;	}	/**	 * PHP4 style constructor which calls helper methods to set up object variables	 *	 * @uses WP_Locale::init()	 * @uses WP_Locale::register_globals()	 * @since 2.1.0	 *	 * @return WP_Locale	 */	function WP_Locale() {		$this->init();		$this->register_globals();	}	/**	 * Checks if current locale is RTL.	 *	 * @since 3.0.0	 * @return bool Whether locale is RTL.	 */	 function is_rtl() {	 	return 'rtl' == $this->text_direction;	 }}/** * Checks if current locale is RTL. * * @since 3.0.0 * @return bool Whether locale is RTL. */function is_rtl() {	global $wp_locale;	return $wp_locale->is_rtl();}?>
<?php/** * Manage link administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for link actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( ! current_user_can('manage_links') )	wp_die( __('You do not have sufficient permissions to edit the links for this site.') );if ( !empty($_POST['deletebookmarks']) )	$action = 'deletebookmarks';if ( !empty($_POST['move']) )	$action = 'move';if ( !empty($_POST['linkcheck']) )	$linkcheck = $_POST['linkcheck'];$this_file = 'link-manager.php';switch ($action) {	case 'deletebookmarks' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$deleted = 0;		foreach ($linkcheck as $link_id) {			$link_id = (int) $link_id;			if ( wp_delete_link($link_id) )				$deleted++;		}		wp_redirect("$this_file?deleted=$deleted");		exit;		break;	case 'move' :		check_admin_referer('bulk-bookmarks');		//for each link id (in $linkcheck[]) change category to selected value		if (count($linkcheck) == 0) {			wp_redirect($this_file);			exit;		}		$all_links = join(',', $linkcheck);		// should now have an array of links we can change		//$q = $wpdb->query("update $wpdb->links SET link_category='$category' WHERE link_id IN ($all_links)");		wp_redirect($this_file);		exit;		break;	case 'add' :		check_admin_referer('add-bookmark');		$redir = wp_get_referer();		if ( add_link() )			$redir = add_query_arg( 'added', 'true', $redir );		wp_redirect( $redir );		exit;		break;	case 'save' :		$link_id = (int) $_POST['link_id'];		check_admin_referer('update-bookmark_' . $link_id);		edit_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'delete' :		$link_id = (int) $_GET['link_id'];		check_admin_referer('delete-bookmark_' . $link_id);		wp_delete_link($link_id);		wp_redirect($this_file);		exit;		break;	case 'edit' :		wp_enqueue_script('link');		wp_enqueue_script('xfn');		$parent_file = 'link-manager.php';		$submenu_file = 'link-manager.php';		$title = __('Edit Link');		$link_id = (int) $_GET['link_id'];		if (!$link = get_link_to_edit($link_id))			wp_die(__('Link not found.'));		include ('edit-link-form.php');		include ('admin-footer.php');		break;	default :		break;}?>
<?php/** * Outputs the OPML XML format for getting the links defined in the link * administration. This can be used to export links from one blog over to * another. Links aren't exported by the WordPress export, so this file handles * that. * * This file is not added by default to WordPress theme pages when outputting * feed links. It will have to be added manually for browsers and users to pick * up that this file exists. * * @package WordPress */if ( empty($wp) ) {	require_once('./wp-load.php');	wp();}header('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);$link_cat = '';if ( !empty($_GET['link_cat']) ) {	$link_cat = $_GET['link_cat'];	if ( !in_array($link_cat, array('all', '0')) )		$link_cat = absint( (string)urldecode($link_cat) );}echo '<?xml version="1.0"?'.">\n";?><opml version="1.0">	<head>		<title><?php printf( __('Links for %s'), esc_attr(get_bloginfo('name', 'display')) ); ?></title>		<dateCreated><?php echo gmdate("D, d M Y H:i:s"); ?> GMT</dateCreated>		<?php do_action('opml_head'); ?>	</head>	<body><?phpif ( empty($link_cat) )	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0));else	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0, 'include' => $link_cat));foreach ( (array)$cats as $cat ) :	$catname = apply_filters('link_category', $cat->name);?><outline type="category" title="<?php echo esc_attr($catname); ?>"><?php	$bookmarks = get_bookmarks(array("category" => $cat->term_id));	foreach ( (array)$bookmarks as $bookmark ) :		$title = apply_filters('link_title', $bookmark->link_name);?>	<outline text="<?php echo esc_attr($title); ?>" type="link" xmlUrl="<?php echo esc_attr($bookmark->link_rss); ?>" htmlUrl="<?php echo esc_attr($bookmark->link_url); ?>" updated="<?php if ('0000-00-00 00:00:00' != $bookmark->link_updated) echo $bookmark->link_updated; ?>" /><?php	endforeach; // $bookmarks?></outline><?phpendforeach; // $cats?></body></opml>
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Defines Multisite upload constants. * * @since 3.0.0 */function ms_upload_constants(  ) {	global $wpdb;	/** @since 3.0.0 */	// Base uploads dir relative to ABSPATH	if ( !defined( 'UPLOADBLOGSDIR' ) )		define( 'UPLOADBLOGSDIR', 'wp-content/blogs.dir' );	/** @since 3.0.0 */	if ( !defined( 'UPLOADS' ) ) {		// Uploads dir relative to ABSPATH		define( 'UPLOADS', UPLOADBLOGSDIR . "/{$wpdb->blogid}/files/" );		if ( 'wp-content/blogs.dir' == UPLOADBLOGSDIR )			define( 'BLOGUPLOADDIR', WP_CONTENT_DIR . "/blogs.dir/{$wpdb->blogid}/files/" );	}}/** * Defines Multisite cookie constants. * * @since 3.0.0 */function ms_cookie_constants(  ) {	global $current_site;	/**	 * @since 1.2.0	 */	if ( !defined( 'COOKIEPATH' ) )		define( 'COOKIEPATH', $current_site->path );	/**	 * @since 1.5.0	 */	if ( !defined( 'SITECOOKIEPATH' ) )		define( 'SITECOOKIEPATH', $current_site->path );	/**	 * @since 2.6.0	 */	if ( !defined( 'ADMIN_COOKIE_PATH' ) ) {		if( !is_subdomain_install() ) {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH );		} else {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );		}	}	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') && is_subdomain_install() ) {		if ( !empty( $current_site->cookie_domain ) )			define('COOKIE_DOMAIN', '.' . $current_site->cookie_domain);		else			define('COOKIE_DOMAIN', '.' . $current_site->domain);	}}/** * Defines Multisite file constants. * * @since 3.0.0 */function ms_file_constants(  ) {	/**	 * Optional support for X-Sendfile header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_SENDFILE' ) )		define( 'WPMU_SENDFILE', false );	/**	 * Optional support for X-Accel-Redirect header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_ACCEL_REDIRECT' ) )		define( 'WPMU_ACCEL_REDIRECT', false );}/** * Defines Multisite subdomain constants and handles warnings and notices. * * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool. * * On first call, the constants are checked and defined. On second call, * we will have translations loaded and can trigger warnings easily. * * @since 3.0.0 */function ms_subdomain_constants() {	static $error = null;	static $error_warn = false;	if ( false === $error )		return;	if ( $error ) {		$vhost_deprecated = __( 'The constant <code>VHOST</code> <strong>is deprecated</strong>. Use the boolean constant <code>SUBDOMAIN_INSTALL</code> in wp-config.php to enable a subdomain configuration. Use is_subdomain_install() to check whether a subdomain configuration is enabled.' );		if ( $error_warn ) {			trigger_error( __( '<strong>Conflicting values for the constants VHOST and SUBDOMAIN_INSTALL.</strong> The value of SUBDOMAIN_INSTALL will be assumed to be your subdomain configuration setting.' ) . ' ' . $vhost_deprecated, E_USER_WARNING );		} else {	 		_deprecated_argument( 'define()', '3.0', $vhost_deprecated );		}		return;	}	if ( defined( 'SUBDOMAIN_INSTALL' ) && defined( 'VHOST' ) ) {		if ( SUBDOMAIN_INSTALL == ( 'yes' == VHOST ) ) {			$error = true;		} else {			$error = $error_warn = true;		}	} elseif ( defined( 'SUBDOMAIN_INSTALL' ) ) {		define( 'VHOST', SUBDOMAIN_INSTALL ? 'yes' : 'no' );	} elseif ( defined( 'VHOST' ) ) {		$error = true;		define( 'SUBDOMAIN_INSTALL', 'yes' == VHOST );	} else {		define( 'SUBDOMAIN_INSTALL', false );		define( 'VHOST', 'no' );	}}add_action( 'init', 'ms_subdomain_constants' );?>
<?php/** * The plugin API is located in this file, which allows for creating actions * and filters and hooking functions, and methods. The functions or methods will * then be run when the action or filter is called. * * The API callback examples reference functions, but can be methods of classes. * To hook methods, you'll need to pass an array one of two ways. * * Any of the syntaxes explained in the PHP documentation for the * {@link http://us2.php.net/manual/en/language.pseudo-types.php#language.types.callback 'callback'} * type are valid. * * Also see the {@link http://codex.wordpress.org/Plugin_API Plugin API} for * more information and examples on how to use a lot of these functions. * * @package WordPress * @subpackage Plugin * @since 1.5 *//** * Hooks a function or method to a specific filter action. * * Filters are the hooks that WordPress launches to modify text of various types * before adding it to the database or sending it to the browser screen. Plugins * can specify that one or more of its PHP functions is executed to * modify specific types of text at these times, using the Filter API. * * To use the API, the following code should be used to bind a callback to the * filter. * * <code> * function example_hook($example) { echo $example; } * add_filter('example_filter', 'example_hook'); * </code> * * In WordPress 1.5.1+, hooked functions can take extra arguments that are set * when the matching do_action() or apply_filters() call is run. The * $accepted_args allow for calling functions only when the number of args * match. Hooked functions can take extra arguments that are set when the * matching do_action() or apply_filters() call is run. For example, the action * comment_id_not_found will pass any functions that hook onto it the ID of the * requested comment. * * <strong>Note:</strong> the function will return true no matter if the * function was hooked fails or not. There are no checks for whether the * function exists beforehand and no checks to whether the <tt>$function_to_add * is even a string. It is up to you to take care and this is done for * optimization purposes, so everything is as quick as possible. * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters added in the form of *	wp_filter['tag']['array of priorities']['array of functions serialized']['array of ['array (functions, accepted_args)']'] * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added, it doesn't need to run through that process. * * @param string $tag The name of the filter to hook the $function_to_add to. * @param callback $function_to_add The name of the function to be called when the filter is applied. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). * @return boolean true */function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	global $wp_filter, $merged_filters;	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);	$wp_filter[$tag][$priority][$idx] = array('function' => $function_to_add, 'accepted_args' => $accepted_args);	unset( $merged_filters[ $tag ] );	return true;}/** * Check if any filter has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @global array $wp_filter Stores all of the filters * * @param string $tag The name of the filter hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_filter($tag, $function_to_check = false) {	global $wp_filter;	$has = !empty($wp_filter[$tag]);	if ( false === $function_to_check || false == $has )		return $has;	if ( !$idx = _wp_filter_build_unique_id($tag, $function_to_check, false) )		return false;	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {		if ( isset($wp_filter[$tag][$priority][$idx]) )			return $priority;	}	return false;}/** * Call the functions added to a filter hook. * * The callback functions attached to filter hook $tag are invoked by calling * this function. This function can be used to create a new filter hook by * simply calling this function with the name of the new hook specified using * the $tag parameter. * * The function allows for additional arguments to be added and passed to hooks. * <code> * function example_hook($string, $arg1, $arg2) * { *		//Do stuff *		return $string; * } * $value = apply_filters('example_filter', 'filter me', 'arg1', 'arg2'); * </code> * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param mixed $value The value on which the filters hooked to <tt>$tag</tt> are applied on. * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag</tt>. * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters($tag, $value) {	global $wp_filter, $merged_filters, $wp_current_filter;	$args = array();	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$args = func_get_args();		_wp_call_all_hook($args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $value;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	if ( empty($args) )		$args = func_get_args();	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) ){				$args[1] = $value;				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));			}	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $value;}/** * Execute functions hooked on a specific filter hook, specifying arguments in an array. * * @see apply_filters() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 3.0.0 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters_ref_array($tag, $args) {	global $wp_filter, $merged_filters, $wp_current_filter;	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $args[0];	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $args[0];}/** * Removes a function from a specified filter hook. * * This function removes a function attached to a specified filter hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * To remove a hook, the $function_to_remove and $priority arguments must match * when the hook was added. This goes for both filters and actions. No warning * will be given on removal failure. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The filter hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional. The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function existed before it was removed. */function remove_filter($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	$function_to_remove = _wp_filter_build_unique_id($tag, $function_to_remove, $priority);	$r = isset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);	if ( true === $r) {		unset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);		if ( empty($GLOBALS['wp_filter'][$tag][$priority]) )			unset($GLOBALS['wp_filter'][$tag][$priority]);		unset($GLOBALS['merged_filters'][$tag]);	}	return $r;}/** * Remove all of the hooks from a filter. * * @since 2.7 * * @param string $tag The filter to remove hooks from. * @param int $priority The priority number to remove. * @return bool True when finished. */function remove_all_filters($tag, $priority = false) {	global $wp_filter, $merged_filters;	if( isset($wp_filter[$tag]) ) {		if( false !== $priority && isset($wp_filter[$tag][$priority]) )			unset($wp_filter[$tag][$priority]);		else			unset($wp_filter[$tag]);	}	if( isset($merged_filters[$tag]) )		unset($merged_filters[$tag]);	return true;}/** * Retrieve the name of the current filter or action. * * @package WordPress * @subpackage Plugin * @since 2.5 * * @return string Hook name of the current filter or action. */function current_filter() {	global $wp_current_filter;	return end( $wp_current_filter );}/** * Hooks a function on to a specific action. * * Actions are the hooks that the WordPress core launches at specific points * during execution, or when specific events occur. Plugins can specify that * one or more of its PHP functions are executed at these points, using the * Action API. * * @uses add_filter() Adds an action. Parameter list and functionality are the same. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The name of the action to which the $function_to_add is hooked. * @param callback $function_to_add The name of the function you wish to be called. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). */function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	return add_filter($tag, $function_to_add, $priority, $accepted_args);}/** * Execute functions hooked on a specific action hook. * * This function invokes all functions attached to action hook $tag. It is * possible to create new action hooks by simply calling this function, * specifying the name of the new hook using the <tt>$tag</tt> parameter. * * You can pass extra arguments to the hooks, much like you can with * apply_filters(). * * @see apply_filters() This function works similar with the exception that * nothing is returned and only the functions or methods are called. * * @package WordPress * @subpackage Plugin * @since 1.2 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action. * @return null Will return null if $tag does not exist in $wp_filter array */function do_action($tag, $arg = '') {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	$args = array();	if ( is_array($arg) && 1 == count($arg) && isset($arg[0]) && is_object($arg[0]) ) // array(&$this)		$args[] =& $arg[0];	else		$args[] = $arg;	for ( $a = 2; $a < func_num_args(); $a++ )		$args[] = func_get_arg($a);	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach ( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Retrieve the number times an action is fired. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action hook. * @return int The number of times action hook <tt>$tag</tt> is fired */function did_action($tag) {	global $wp_actions;	if ( ! isset( $wp_actions ) || ! isset( $wp_actions[$tag] ) )		return 0;	return $wp_actions[$tag];}/** * Execute functions hooked on a specific action hook, specifying arguments in an array. * * @see do_action() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return null Will return null if $tag does not exist in $wp_filter array */function do_action_ref_array($tag, $args) {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Check if any action has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @see has_filter() has_action() is an alias of has_filter(). * * @param string $tag The name of the action hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_action($tag, $function_to_check = false) {	return has_filter($tag, $function_to_check);}/** * Removes a function from a specified action hook. * * This function removes a function attached to a specified action hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The action hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function is removed. */function remove_action($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	return remove_filter($tag, $function_to_remove, $priority, $accepted_args);}/** * Remove all of the hooks from an action. * * @since 2.7 * * @param string $tag The action to remove hooks from. * @param int $priority The priority number to remove them from. * @return bool True when finished. */function remove_all_actions($tag, $priority = false) {	return remove_all_filters($tag, $priority);}//// Functions for handling plugins.///** * Gets the basename of a plugin. * * This method extracts the name of a plugin from its filename. * * @package WordPress * @subpackage Plugin * @since 1.5 * * @access private * * @param string $file The filename of plugin. * @return string The name of a plugin. * @uses WP_PLUGIN_DIR */function plugin_basename($file) {	$file = str_replace('\\','/',$file); // sanitize for Win32 installs	$file = preg_replace('|/+|','/', $file); // remove any duplicate slash	$plugin_dir = str_replace('\\','/',WP_PLUGIN_DIR); // sanitize for Win32 installs	$plugin_dir = preg_replace('|/+|','/', $plugin_dir); // remove any duplicate slash	$mu_plugin_dir = str_replace('\\','/',WPMU_PLUGIN_DIR); // sanitize for Win32 installs	$mu_plugin_dir = preg_replace('|/+|','/', $mu_plugin_dir); // remove any duplicate slash	$file = preg_replace('#^' . preg_quote($plugin_dir, '#') . '/|^' . preg_quote($mu_plugin_dir, '#') . '/#','',$file); // get relative path from plugins dir	$file = trim($file, '/');	return $file;}/** * Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the filesystem path of the directory that contains the plugin */function plugin_dir_path( $file ) {	return trailingslashit( dirname( $file ) );}/** * Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the URL path of the directory that contains the plugin */function plugin_dir_url( $file ) {	return trailingslashit( plugins_url( '', $file ) );}/** * Set the activation hook for a plugin. * * When a plugin is activated, the action 'activate_PLUGINNAME' hook is * activated. In the name of this hook, PLUGINNAME is replaced with the name of * the plugin, including the optional subdirectory. For example, when the plugin * is located in wp-content/plugin/sampleplugin/sample.php, then the name of * this hook will become 'activate_sampleplugin/sample.php'. When the plugin * consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_activation_hook($file, $function) {	$file = plugin_basename($file);	add_action('activate_' . $file, $function);}/** * Set the deactivation hook for a plugin. * * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is * deactivated. In the name of this hook, PLUGINNAME is replaced with the name * of the plugin, including the optional subdirectory. For example, when the * plugin is located in wp-content/plugin/sampleplugin/sample.php, then * the name of this hook will become 'activate_sampleplugin/sample.php'. * * When the plugin consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_deactivation_hook($file, $function) {	$file = plugin_basename($file);	add_action('deactivate_' . $file, $function);}/** * Set the uninstallation hook for a plugin. * * Registers the uninstall hook that will be called when the user clicks on the * uninstall link that calls for the plugin to uninstall itself. The link won't * be active unless the plugin hooks into the action. * * The plugin should not run arbitrary code outside of functions, when * registering the uninstall hook. In order to run using the hook, the plugin * will have to be included, which means that any code laying outside of a * function will be run during the uninstall process. The plugin should not * hinder the uninstall process. * * If the plugin can not be written without running code within the plugin, then * the plugin should create a file named 'uninstall.php' in the base plugin * folder. This file will be called, if it exists, during the uninstall process * bypassing the uninstall hook. The plugin, when using the 'uninstall.php' * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before * executing. * * @since 2.7 * * @param string $file * @param callback $callback The callback to run when the hook is called. */function register_uninstall_hook($file, $callback) {	// The option should not be autoloaded, because it is not needed in most	// cases. Emphasis should be put on using the 'uninstall.php' way of	// uninstalling the plugin.	$uninstallable_plugins = (array) get_option('uninstall_plugins');	$uninstallable_plugins[plugin_basename($file)] = $callback;	update_option('uninstall_plugins', $uninstallable_plugins);}/** * Calls the 'all' hook, which will process the functions hooked into it. * * The 'all' hook passes all of the arguments or parameters that were used for * the hook, which this function was called for. * * This function is used internally for apply_filters(), do_action(), and * do_action_ref_array() and is not meant to be used from outside those * functions. This function does not check for the existence of the all hook, so * it will fail unless the all hook exists prior to this function call. * * @package WordPress * @subpackage Plugin * @since 2.5 * @access private * * @uses $wp_filter Used to process all of the functions in the 'all' hook * * @param array $args The collected parameters from the hook that was called. * @param string $hook Optional. The hook name that was used to call the 'all' hook. */function _wp_call_all_hook($args) {	global $wp_filter;	reset( $wp_filter['all'] );	do {		foreach( (array) current($wp_filter['all']) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], $args);	} while ( next($wp_filter['all']) !== false );}/** * Build Unique ID for storage and retrieval. * * The old way to serialize the callback caused issues and this function is the * solution. It works by checking for objects and creating an a new property in * the class to keep track of the object and new objects of the same class that * need to be added. * * It also allows for the removal of actions and filters for objects after they * change class properties. It is possible to include the property $wp_filter_id * in your class and set it to "null" or a number to bypass the workaround. * However this will prevent you from adding new classes and any new classes * will overwrite the previous hook by the same class. * * Functions and static method callbacks are just returned as strings and * shouldn't have any speed penalty. * * @package WordPress * @subpackage Plugin * @access private * @since 2.2.3 * @link http://trac.wordpress.org/ticket/3875 * * @global array $wp_filter Storage for all of the filters and actions * @param string $tag Used in counting how many hooks were applied * @param callback $function Used for creating unique id * @param int|bool $priority Used in counting how many hooks were applied.  If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise. * @param string $type filter or action * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a uniqe id. */function _wp_filter_build_unique_id($tag, $function, $priority) {	global $wp_filter;	static $filter_id_count = 0;	if ( is_string($function) )		return $function;	if ( is_object($function) ) {		// Closures are currently implemented as objects		$function = array( $function, '' );	} else {		$function = (array) $function;	}	if (is_object($function[0]) ) {		// Object Class Calling		if ( function_exists('spl_object_hash') ) {			return spl_object_hash($function[0]) . $function[1];		} else {			$obj_idx = get_class($function[0]).$function[1];			if ( !isset($function[0]->wp_filter_id) ) {				if ( false === $priority )					return false;				$obj_idx .= isset($wp_filter[$tag][$priority]) ? count((array)$wp_filter[$tag][$priority]) : $filter_id_count;				$function[0]->wp_filter_id = $filter_id_count;				++$filter_id_count;			} else {				$obj_idx .= $function[0]->wp_filter_id;			}			return $obj_idx;		}	} else if ( is_string($function[0]) ) {		// Static Calling		return $function[0].$function[1];	}}?>
<?php/** * WordPress FTP Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_FTPext extends WP_Filesystem_Base {	var $link;	var $errors = null;	var $options = array();	function WP_Filesystem_FTPext($opt='') {		$this->method = 'ftpext';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! extension_loaded('ftp') ) {			$this->errors->add('no_ftp_ext', __('The ftp PHP extension is not available'));			return false;		}		// Set defaults:		//This Class uses the timeout on a per-connection basis, Others use it on a per-action basis.		if ( ! defined('FS_TIMEOUT') )			define('FS_TIMEOUT', 240);		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];		$this->options['ssl'] = false;		if ( isset($opt['connection_type']) && 'ftps' == $opt['connection_type'] )			$this->options['ssl'] = true;	}	function connect() {		if ( isset($this->options['ssl']) && $this->options['ssl'] && function_exists('ftp_ssl_connect') )			$this->link = @ftp_ssl_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		else			$this->link = @ftp_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! @ftp_login($this->link,$this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		//Set the Connection to use Passive FTP		@ftp_pasv( $this->link, true );		if ( @ftp_get_option($this->link, FTP_TIMEOUT_SEC) < FS_TIMEOUT )			@ftp_set_option($this->link, FTP_TIMEOUT_SEC, FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		if ( empty($type) )			$type = FTP_BINARY;		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		if ( ! @ftp_fget($this->link, $temp, $file, $type, $resumepos) )			return false;		fseek($temp, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temp) )			$contents .= fread($temp, 8192);		fclose($temp);		unlink($tempfile);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file));	}	function put_contents($file, $contents, $mode = false ) {		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		fwrite($temp, $contents);		fseek($temp, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$ret = @ftp_fput($this->link, $file, $temp, $type);		fclose($temp);		unlink($tempfile);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = @ftp_pwd($this->link);		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return @ftp_chdir($this->link, $dir);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		if ( ! function_exists('ftp_chmod') )			return (bool)@ftp_site($this->link, sprintf('CHMOD %o %s', $mode, $file));		return (bool)@ftp_chmod($this->link, $mode, $file);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return ftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return @ftp_delete($this->link, $file);		if ( !$recursive )			return @ftp_rmdir($this->link, $file);		$filelist = $this->dirlist( trailingslashit($file) );		if ( !empty($filelist) )			foreach ( $filelist as $delete_file )				$this->delete( trailingslashit($file) . $delete_file['name'], $recursive);		return @ftp_rmdir($this->link, $file);	}	function exists($file) {		$list = @ftp_nlist($this->link, $file);		return !empty($list); //empty list = no file, so invert.	}	function is_file($file) {		return $this->exists($file) && !$this->is_dir($file);	}	function is_dir($path) {		$cwd = $this->cwd();		$result = @ftp_chdir($this->link, trailingslashit($path) );		if ( $result && $path == $this->cwd() || $this->cwd() != $cwd ) {			@ftp_chdir($this->link, $cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is readable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return ftp_mdtm($this->link, $file);	}	function size($file) {		return ftp_size($this->link, $file);	}	function touch($file, $time = 0, $atime = 0) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		if ( !@ftp_mkdir($this->link, $path) )			return false;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function parselisting($line) {		static $is_windows;		if ( is_null($is_windows) )			$is_windows = stripos( ftp_systype($this->link), 'win') !== false;		if ( $is_windows && preg_match('/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/', $line, $lucifer) ) {			$b = array();			if ( $lucifer[3] < 70 )				$lucifer[3] +=2000;			else				$lucifer[3] += 1900; // 4digit year fix			$b['isdir'] = ( $lucifer[7] == '<DIR>');			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4] + (strcasecmp($lucifer[6], "PM") == 0 ? 12 : 0), $lucifer[5], 0, $lucifer[1], $lucifer[2], $lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} elseif ( !$is_windows && $lucifer = preg_split('/[ ]/', $line, 9, PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount = count($lucifer);			if ( $lcount < 8 )				return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === 'd';			$b['islink'] = $lucifer[0]{0} === 'l';			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ( $lcount == 8 ) {				sscanf($lucifer[5], '%d-%d-%d', $b['year'], $b['month'], $b['day']);				sscanf($lucifer[6], '%d:%d', $b['hour'], $b['minute']);				$b['time'] = @mktime($b['hour'], $b['minute'], 0, $b['month'], $b['day'], $b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if ( preg_match('/([0-9]{2}):([0-9]{2})/', $lucifer[7], $l2) ) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime( sprintf('%d %s %d %02d:%02d', $b['day'], $b['month'], $b['year'], $b['hour'], $b['minute']) );				$b['name'] = $lucifer[8];			}		}		return $b;	}	function dirlist($path = '.', $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$pwd = @ftp_pwd($this->link);		if ( ! @ftp_chdir($this->link, $path) ) // Cant change to folder = folder doesnt exist			return false;		$list = @ftp_rawlist($this->link, '-a', false);		@ftp_chdir($this->link, $pwd);		if ( empty($list) ) // Empty array = non-existent folder (real folder will show . at least)			return false;		$dirlist = array();		foreach ( $list as $k => $v ) {			$entry = $this->parselisting($v);			if ( empty($entry) )				continue;			if ( '.' == $entry['name'] || '..' == $entry['name'] )				continue;			if ( ! $include_hidden && '.' == $entry['name'][0] )				continue;			if ( $limit_file && $entry['name'] != $limit_file)				continue;			$dirlist[ $entry['name'] ] = $entry;		}		$ret = array();		foreach ( (array)$dirlist as $struc ) {			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		if ( $this->link )			ftp_close($this->link);	}}?>
<?php/** * Manage media uploaded file. * * There are many filters in here for media. Plugins can extend functionality * by hooking into the filters. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if (!current_user_can('upload_files'))	wp_die(__('You do not have permission to upload files.'));wp_enqueue_script('swfupload-all');wp_enqueue_script('swfupload-handlers');wp_enqueue_script('image-edit');wp_enqueue_script('set-post-thumbnail' );wp_enqueue_style('imgareaselect');@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));// IDs should be integers$ID = isset($ID) ? (int) $ID : 0;$post_id = isset($post_id)? (int) $post_id : 0;// Require an ID for the edit screenif ( isset($action) && $action == 'edit' && !$ID )	wp_die(__("You are not allowed to be here"));if ( isset($_GET['inline']) ) {	$errors = array();	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( isset($_GET['upload-page-form']) ) {		$errors = array_merge($errors, (array) media_upload_form_handler());		$location = 'upload.php';		if ( $errors )			$location .= '?message=3';		wp_redirect( admin_url($location) );	}	$title = __('Upload New Media');	$parent_file = 'upload.php';	add_contextual_help( $current_screen,'<p>' . __('You can upload media files here without creating a post first. This allows you to upload files to use with posts and pages later and/or to get a web link for a particular file that you can share.') . '</p>' .		'<p>' . __('There are two options for uploading files: <em>Select Files</em> will open the Flash-based uploader (multiple file upload allowed), or you can use the <em>Browser Uploader</em>. Clicking <em>Select Files</em> opens a navigation window showing you files in your operating system. Selecting <em>Open</em> after clicking on the file you want activates a progress bar on the uploader screen. Basic image editing is available after upload is complete. Make sure you click<em>Save</em> before leaving this screen.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Media_Add_New_SubPanel" target="_blank">Documentation on Uploading Media Files</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);	require_once('./admin-header.php'); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<form enctype="multipart/form-data" method="post" action="<?php echo admin_url('media-upload.php?inline=&amp;upload-page-form='); ?>" class="media-upload-form type-form validate" id="file-form">	<?php media_upload_form(); ?>	<script type="text/javascript">	jQuery(function($){		var preloaded = $(".media-item.preloaded");		if ( preloaded.length > 0 ) {			preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		}		updateMediaForm();		post_id = 0;		shortform = 1;	});	</script>	<input type="hidden" name="post_id" id="post_id" value="0" />	<?php wp_nonce_field('media-form'); ?>	<div id="media-items" class="hide-if-no-js"> </div>	<p>	<input type="submit" class="button savebutton hide-if-no-js" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" />	</p>	</form>	</div><?php	include('./admin-footer.php');} else {	// upload type: image, video, file, ..?	if ( isset($_GET['type']) )		$type = strval($_GET['type']);	else		$type = apply_filters('media_upload_default_type', 'file');	// tab: gallery, library, or type-specific	if ( isset($_GET['tab']) )		$tab = strval($_GET['tab']);	else		$tab = apply_filters('media_upload_default_tab', 'type');	$body_id = 'media-upload';	// let the action code decide how to handle the request	if ( $tab == 'type' || $tab == 'type_url' )		do_action("media_upload_$type");	else		do_action("media_upload_$tab");}?>
<?php/** * Administration Functions * * This file is deprecated, use 'wp-admin/includes/admin.php' instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/admin.php' );/** WordPress Administration API: Includes all Administration functions. */require_once(ABSPATH . 'wp-admin/includes/admin.php');?>
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * Used to set up and fix common variables and include * the Multisite procedural and class library. * * Allows for some configuration in wp-config.php (see ms-default-constants.php) * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// $base sanity check.if ( 'BASE' == $base )	die( /*WP_I18N_BASE_ERROR*/'Configuration error in <code>wp-config.php</code>. <code>$base</code> is set to <code>BASE</code> when it should be like <code>/</code> or <code>/blogs/</code>.'/*/WP_I18N_BASE_ERROR*/ );/** Include Multisite initialization functions */require( ABSPATH . WPINC . '/ms-load.php' );require( ABSPATH . WPINC . '/ms-default-constants.php' );if ( defined( 'SUNRISE' ) )	include_once( WP_CONTENT_DIR . '/sunrise.php' );/** Check for and define SUBDOMAIN_INSTALL and the deprecated VHOST constant. */ms_subdomain_constants();if ( !isset( $current_site ) || !isset( $current_blog ) ) {	$domain = addslashes( $_SERVER['HTTP_HOST'] );	if ( false !== strpos( $domain, ':' ) ) {		if ( substr( $domain, -3 ) == ':80' ) {			$domain = substr( $domain, 0, -3 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -3 );		} elseif ( substr( $domain, -4 ) == ':443' ) {			$domain = substr( $domain, 0, -4 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -4 );		} else {			wp_die( /*WP_I18N_NO_PORT_NUMBER*/'Multisite only works without the port number in the URL.'/*/WP_I18N_NO_PORT_NUMBER*/ );		}	}	$domain = rtrim( $domain, '.' );	$cookie_domain = $domain;	if ( substr( $cookie_domain, 0, 4 ) == 'www.' )		$cookie_domain = substr( $cookie_domain, 4 );	$path = preg_replace( '|([a-z0-9-]+.php.*)|', '', $_SERVER['REQUEST_URI'] );	$path = str_replace ( '/wp-admin/', '/', $path );	$path = preg_replace( '|(/[a-z0-9-]+?/).*|', '$1', $path );	$current_site = wpmu_current_site();	if ( ! isset( $current_site->blog_id ) )		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );	if ( is_subdomain_install() ) {		$current_blog = wp_cache_get( 'current_blog_' . $domain, 'site-options' );		if ( !$current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain, $current_blog, 'site-options' );		}		if ( $current_blog && $current_blog->site_id != $current_site->id )			$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE id = %d", $current_blog->site_id ) );		else			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );	} else {		$blogname = htmlspecialchars( substr( $_SERVER[ 'REQUEST_URI' ], strlen( $path ) ) );		if ( false !== strpos( $blogname, '/' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '/' ) );		if ( false !== strpos( $blogname, '?' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '?' ) );		$reserved_blognames = array( 'page', 'comments', 'blog', 'wp-admin', 'wp-includes', 'wp-content', 'files', 'feed' );		if ( $blogname != '' && ! in_array( $blogname, $reserved_blognames ) && ! is_file( $blogname ) )			$path .= $blogname . '/';		$current_blog = wp_cache_get( 'current_blog_' . $domain . $path, 'site-options' );		if ( ! $current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain, 'path' => $path ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain . $path, $current_blog, 'site-options' );		}	}	if ( ! defined( 'WP_INSTALLING' ) && is_subdomain_install() && ! is_object( $current_blog ) ) {		if ( defined( 'NOBLOGREDIRECT' ) ) {			$destination = NOBLOGREDIRECT;			if ( '%siteurl%' == $destination )				$destination = "http://" . $current_site->domain . $current_site->path;		} else {			$destination = 'http://' . $current_site->domain . $current_site->path . 'wp-signup.php?new=' . str_replace( '.' . $current_site->domain, '', $domain );		}		header( 'Location: ' . $destination );		die();	}	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( $current_site && ! $current_blog ) {			if ( $current_site->domain != $_SERVER[ 'HTTP_HOST' ] ) {				header( 'Location: http://' . $current_site->domain . $current_site->path );				exit;			}			$current_blog = get_blog_details( array( 'domain' => $current_site->domain, 'path' => $current_site->path ), false );		}		if ( ! $current_blog || ! $current_site )			ms_not_installed();	}	$blog_id = $current_blog->blog_id;	$public  = $current_blog->public;	if ( empty( $current_blog->site_id ) )		$current_blog->site_id = 1;	$site_id = $current_blog->site_id;	$current_site = get_current_site_name( $current_site );	if ( ! $blog_id ) {		if ( defined( 'WP_INSTALLING' ) ) {			$current_blog->blog_id = $blog_id = 1;		} else {			$msg = ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) ? ' ' . /*WP_I18N_TABLES_MISSING*/'Database tables are missing.'/*/WP_I18N_TABLES_MISSING*/ : '';			wp_die( /*WP_I18N_NO_BLOG*/'No site by that name on this system.'/*/WP_I18N_NO_BLOG*/ . $msg );		}	}}$wpdb->set_prefix( $table_prefix, false ); // $table_prefix can be set in sunrise.php$wpdb->set_blog_id( $current_blog->blog_id, $current_blog->site_id );$table_prefix = $wpdb->get_blog_prefix();// need to init cache again after blog_id is setwp_start_object_cache();// Define upload directory constantsms_upload_constants();
<?php/** * WordPress CRON API * * @package WordPress *//** * Schedules a hook to run only once. * * Schedules a hook which will be executed once by the WordPress actions core at * a time which you specify. The action will fire off when someone visits your * WordPress site, if the schedule time has passed. * * @since 2.1.0 * @link http://codex.wordpress.org/Function_Reference/wp_schedule_single_event * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. */function wp_schedule_single_event( $timestamp, $hook, $args = array()) {	// don't schedule a duplicate if there's already an identical event due in the next 10 minutes	$next = wp_next_scheduled($hook, $args);	if ( $next && $next <= $timestamp + 600 )		return;	$crons = _get_cron_array();	$key = md5(serialize($args));	$crons[$timestamp][$hook][$key] = array( 'schedule' => false, 'args' => $args );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Schedule a periodic event. * * Schedules a hook which will be executed by the WordPress actions core on a * specific interval, specified by you. The action will trigger when someone * visits your WordPress site, if the scheduled time has passed. * * Valid values for the recurrence are hourly, daily and twicedaily.  These can * be extended using the cron_schedules filter in wp_get_schedules(). * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure, null when complete with scheduling event. */function wp_schedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	if ( !isset( $schedules[$recurrence] ) )		return false;	$crons[$timestamp][$hook][$key] = array( 'schedule' => $recurrence, 'args' => $args, 'interval' => $schedules[$recurrence]['interval'] );	uksort( $crons, "strnatcasecmp" );	_set_cron_array( $crons );}/** * Reschedule a recurring event. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $recurrence How often the event should recur. * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|null False on failure. Null when event is rescheduled. */function wp_reschedule_event( $timestamp, $recurrence, $hook, $args = array()) {	$crons = _get_cron_array();	$schedules = wp_get_schedules();	$key = md5(serialize($args));	$interval = 0;	// First we try to get it from the schedule	if ( 0 == $interval )		$interval = $schedules[$recurrence]['interval'];	// Now we try to get it from the saved interval in case the schedule disappears	if ( 0 == $interval )		$interval = $crons[$timestamp][$hook][$key]['interval'];	// Now we assume something is wrong and fail to schedule	if ( 0 == $interval )		return false;	$now = time();    if ( $timestamp >= $now )        $timestamp = $now + $interval;    else        $timestamp = $now + ($interval - (($now - $timestamp) % $interval));	wp_schedule_event( $timestamp, $recurrence, $hook, $args );}/** * Unschedule a previously scheduled cron job. * * The $timestamp and $hook parameters are required, so that the event can be * identified. * * @since 2.1.0 * * @param int $timestamp Timestamp for when to run the event. * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Arguments to pass to the hook's callback function. * Although not passed to a callback function, these arguments are used * to uniquely identify the scheduled event, so they should be the same * as those used when originally scheduling the event. */function wp_unschedule_event( $timestamp, $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	unset( $crons[$timestamp][$hook][$key] );	if ( empty($crons[$timestamp][$hook]) )		unset( $crons[$timestamp][$hook] );	if ( empty($crons[$timestamp]) )		unset( $crons[$timestamp] );	_set_cron_array( $crons );}/** * Unschedule all cron jobs attached to a specific hook. * * @since 2.1.0 * * @param string $hook Action hook, the execution of which will be unscheduled. * @param array $args Optional. Arguments that were to be pass to the hook's callback function. */function wp_clear_scheduled_hook( $hook, $args = array() ) {	// Backward compatibility	// Previously this function took the arguments as discrete vars rather than an array like the rest of the API	if ( !is_array($args) ) {		_deprecated_argument( __FUNCTION__, '3.0.0', __('This argument has changed to an array to match the behavior of the other cron functions.') );		$args = array_slice( func_get_args(), 1 );	}	while ( $timestamp = wp_next_scheduled( $hook, $args ) )		wp_unschedule_event( $timestamp, $hook, $args );}/** * Retrieve the next timestamp for a cron event. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return bool|int The UNIX timestamp of the next time the scheduled event will occur. */function wp_next_scheduled( $hook, $args = array() ) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $timestamp;	}	return false;}/** * Send request to run cron through HTTP request that doesn't halt page loading. * * @since 2.1.0 * * @return null Cron could not be spawned, because it is not needed to run. */function spawn_cron( $local_time = 0 ) {	if ( !$local_time )		$local_time = time();	if ( defined('DOING_CRON') || isset($_GET['doing_wp_cron']) )		return;	/*	 * do not even start the cron if local server timer has drifted	 * such as due to power failure, or misconfiguration	 */	$timer_accurate = check_server_timer( $local_time );	if ( !$timer_accurate )		return;	/*	* multiple processes on multiple web servers can run this code concurrently	* try to make this as atomic as possible by setting doing_cron switch	*/	$flag = get_transient('doing_cron');	if ( $flag > $local_time + 10*60 )		$flag = 0;	// don't run if another process is currently running it or more than once every 60 sec.	if ( $flag + 60 > $local_time )		return;	//sanity check	$crons = _get_cron_array();	if ( !is_array($crons) )		return;	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	if ( defined('ALTERNATE_WP_CRON') && ALTERNATE_WP_CRON ) {		if ( !empty($_POST) || defined('DOING_AJAX') )			return;		set_transient( 'doing_cron', $local_time );		ob_start();		wp_redirect( add_query_arg('doing_wp_cron', '', stripslashes($_SERVER['REQUEST_URI'])) );		echo ' ';		// flush any buffers and send the headers		while ( @ob_end_flush() );		flush();		WP_DEBUG ? include_once( ABSPATH . 'wp-cron.php' ) : @include_once( ABSPATH . 'wp-cron.php' );		return;	}	set_transient( 'doing_cron', $local_time );	$cron_url = get_option( 'siteurl' ) . '/wp-cron.php?doing_wp_cron';	wp_remote_post( $cron_url, array('timeout' => 0.01, 'blocking' => false, 'sslverify' => apply_filters('https_local_ssl_verify', true)) );}/** * Run scheduled callbacks or spawn cron for all scheduled events. * * @since 2.1.0 * * @return null When doesn't need to run Cron. */function wp_cron() {	// Prevent infinite loops caused by lack of wp-cron.php	if ( strpos($_SERVER['REQUEST_URI'], '/wp-cron.php') !== false || ( defined('DISABLE_WP_CRON') && DISABLE_WP_CRON ) )		return;	if ( false === $crons = _get_cron_array() )		return;	$local_time = time();	$keys = array_keys( $crons );	if ( isset($keys[0]) && $keys[0] > $local_time )		return;	$schedules = wp_get_schedules();	foreach ( $crons as $timestamp => $cronhooks ) {		if ( $timestamp > $local_time ) break;		foreach ( (array) $cronhooks as $hook => $args ) {			if ( isset($schedules[$hook]['callback']) && !call_user_func( $schedules[$hook]['callback'] ) )				continue;			spawn_cron( $local_time );			break 2;		}	}}/** * Retrieve supported and filtered Cron recurrences. * * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by * hooking into the 'cron_schedules' filter. The filter accepts an array of * arrays. The outer array has a key that is the name of the schedule or for * example 'weekly'. The value is an array with two keys, one is 'interval' and * the other is 'display'. * * The 'interval' is a number in seconds of when the cron job should run. So for * 'hourly', the time is 3600 or 60*60. For weekly, the value would be * 60*60*24*7 or 604800. The value of 'interval' would then be 604800. * * The 'display' is the description. For the 'weekly' key, the 'display' would * be <code>__('Once Weekly')</code>. * * For your plugin, you will be passed an array. you can easily add your * schedule by doing the following. * <code> * // filter parameter variable name is 'array' *	$array['weekly'] = array( *		'interval' => 604800, *		'display' => __('Once Weekly') *	); * </code> * * @since 2.1.0 * * @return array */function wp_get_schedules() {	$schedules = array(		'hourly' => array( 'interval' => 3600, 'display' => __('Once Hourly') ),		'twicedaily' => array( 'interval' => 43200, 'display' => __('Twice Daily') ),		'daily' => array( 'interval' => 86400, 'display' => __('Once Daily') ),	);	return array_merge( apply_filters( 'cron_schedules', array() ), $schedules );}/** * Retrieve Cron schedule for hook with arguments. * * @since 2.1.0 * * @param string $hook Action hook to execute when cron is run. * @param array $args Optional. Arguments to pass to the hook's callback function. * @return string|bool False, if no schedule. Schedule on success. */function wp_get_schedule($hook, $args = array()) {	$crons = _get_cron_array();	$key = md5(serialize($args));	if ( empty($crons) )		return false;	foreach ( $crons as $timestamp => $cron ) {		if ( isset( $cron[$hook][$key] ) )			return $cron[$hook][$key]['schedule'];	}	return false;}//// Private functions///** * Retrieve cron info array option. * * @since 2.1.0 * @access private * * @return array CRON info array. */function _get_cron_array()  {	$cron = get_option('cron');	if ( ! is_array($cron) )		return false;	if ( !isset($cron['version']) )		$cron = _upgrade_cron_array($cron);	unset($cron['version']);	return $cron;}/** * Updates the CRON option with the new CRON array. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. */function _set_cron_array($cron) {	$cron['version'] = 2;	update_option( 'cron', $cron );}/** * Upgrade a Cron info array. * * This function upgrades the Cron info array to version 2. * * @since 2.1.0 * @access private * * @param array $cron Cron info array from {@link _get_cron_array()}. * @return array An upgraded Cron info array. */function _upgrade_cron_array($cron) {	if ( isset($cron['version']) && 2 == $cron['version'])		return $cron;	$new_cron = array();	foreach ( (array) $cron as $timestamp => $hooks) {		foreach ( (array) $hooks as $hook => $args ) {			$key = md5(serialize($args['args']));			$new_cron[$timestamp][$hook][$key] = $args;		}	}	$new_cron['version'] = 2;	update_option( 'cron', $new_cron );	return $new_cron;}// stub for checking server timer accuracy, using outside standard time sourcesfunction check_server_timer( $local_time ) {	return true;}
<?php/** * Bookmark Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of bookmarks. * * The $bookmarks array must contain bookmark objects and will be iterated over * to retrieve the bookmark to be used in the output. * * The output is formatted as HTML with no way to change that format. However, * what is between, before, and after can be changed. The link itself will be * HTML. * * This function is used internally by wp_list_bookmarks() and should not be * used by themes. * * The defaults for overwriting are: * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * 'show_images' - Default is 1 (integer). Whether to show link image if *		available. * 'show_name' - Default is 0 (integer). Whether to show link name if *		available. * 'before' - Default is '<li>' (string). The html or text to prepend to each *		bookmarks. * 'after' - Default is '</li>' (string). The html or text to append to each *		bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *		bookmarks inside the <a> tag. * 'link_after' - Default is '' (string). The html or text to append to each *		bookmarks inside the <a> tag. * 'between' - Default is '\n' (string). The string for use in between the link, *		description, and image. * 'show_rating' - Default is 0 (integer). Whether to show the link rating. * * @since 2.1.0 * @access private * @usedby wp_list_bookmarks() * * @param array $bookmarks List of bookmarks to traverse * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML */function _walk_bookmarks($bookmarks, $args = '' ) {	$defaults = array(		'show_updated' => 0, 'show_description' => 0,		'show_images' => 1, 'show_name' => 0,		'before' => '<li>', 'after' => '</li>', 'between' => "\n",		'show_rating' => 0, 'link_before' => '', 'link_after' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = ''; // Blank string to start with.	foreach ( (array) $bookmarks as $bookmark ) {		if ( !isset($bookmark->recently_updated) )			$bookmark->recently_updated = false;		$output .= $before;		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($bookmark->link_url) )			$the_link = esc_url($bookmark->link_url);		$desc = esc_attr(sanitize_bookmark_field('link_description', $bookmark->link_description, $bookmark->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $bookmark->link_name, $bookmark->link_id, 'display')); 		$title = $desc;		if ( $show_updated )			if ( '00' != substr($bookmark->link_updated_f, 0, 2) ) {				$title .= ' (';				$title .= sprintf(__('Last updated: %s'), date(get_option('links_updated_date_format'), $bookmark->link_updated_f + (get_option('gmt_offset') * 3600)));				$title .= ')';			}		$alt = ' alt="' . $name . ( $show_description ? ' ' . $title : '' ) . '"';		if ( '' != $title )			$title = ' title="' . $title . '"';		$rel = $bookmark->link_rel;		if ( '' != $rel )			$rel = ' rel="' . esc_attr($rel) . '"';		$target = $bookmark->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target . '>';		$output .= $link_before;		if ( $bookmark->link_image != null && $show_images ) {			if ( strpos($bookmark->link_image, 'http') === 0 )				$output .= "<img src=\"$bookmark->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$bookmark->link_image\" $alt $title />";			if ( $show_name )				$output .= " $name";		} else {			$output .= $name;		}		$output .= $link_after;		$output .= '</a>';		if ( $show_updated && $bookmark->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ( $show_rating )			$output .= $between . sanitize_bookmark_field('link_rating', $bookmark->link_rating, $bookmark->link_id, 'display');		$output .= "$after\n";	} // end while	return $output;}/** * Retrieve or echo all of the bookmarks. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'echo' - Default is 1 (integer). Whether to echo (default) or return the *		formatted bookmarks. * 'categorize' - Default is 1 (integer). Whether to show links listed by *		category (default) or show links in one column. * 'show_description' - Default is 0 (integer). Whether to show the description *		of the bookmark. * * These options define how the Category name will appear before the category * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will * display for only the 'title_li' string and only if 'title_li' is not empty. * 'title_li' - Default is 'Bookmarks' (translatable string). What to show *		before the links appear. * 'title_before' - Default is '<h2>' (string). The HTML or text to show before *		the 'title_li' string. * 'title_after' - Default is '</h2>' (string). The HTML or text to show after *		the 'title_li' string. * 'class' - Default is 'linkcat' (string). The CSS class to use for the *		'title_li'. * * 'category_before' - Default is '<li id="%id" class="%class">'. String must *		contain '%id' and '%class' to get * the id of the category and the 'class' argument. These are used for *		formatting in themes. * Argument will be displayed before the 'title_before' argument. * 'category_after' - Default is '</li>' (string). The HTML or text that will *		appear after the list of links. * * These are only used if 'categorize' is set to 1 or true. * 'category_orderby' - Default is 'name'. How to order the bookmark category *		based on term scheme. * 'category_order' - Default is 'ASC'. Set the order by either ASC (ascending) *		or DESC (descending). * * @see _walk_bookmarks() For other arguments that can be set in this function *		and passed to _walk_bookmarks(). * @see get_bookmarks() For other arguments that can be set in this function and *		passed to get_bookmarks(). * @link http://codex.wordpress.org/Template_Tags/wp_list_bookmarks * * @since 2.1.0 * @uses _list_bookmarks() Used to iterate over all of the bookmarks and return *		the html * @uses get_terms() Gets all of the categories that are for links. * * @param string|array $args Optional. Overwrite the defaults of the function * @return string|null Will only return if echo option is set to not echo. *		Default is not return anything. */function wp_list_bookmarks($args = '') {	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '', 'exclude_category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'echo' => 1,		'categorize' => 1, 'title_li' => __('Bookmarks'),		'title_before' => '<h2>', 'title_after' => '</h2>',		'category_orderby' => 'name', 'category_order' => 'ASC',		'class' => 'linkcat', 'category_before' => '<li id="%id" class="%class">',		'category_after' => '</li>'	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	if ( $categorize ) {		//Split the bookmarks into ul's for each category		$cats = get_terms('link_category', array('name__like' => $category_name, 'include' => $category, 'exclude' => $exclude_category, 'orderby' => $category_orderby, 'order' => $category_order, 'hierarchical' => 0));		foreach ( (array) $cats as $cat ) {			$params = array_merge($r, array('category'=>$cat->term_id));			$bookmarks = get_bookmarks($params);			if ( empty($bookmarks) )				continue;			$output .= str_replace(array('%id', '%class'), array("linkcat-$cat->term_id", $class), $category_before);			$catname = apply_filters( "link_category", $cat->name );			$output .= "$title_before$catname$title_after\n\t<ul class='xoxo blogroll'>\n";			$output .= _walk_bookmarks($bookmarks, $r);			$output .= "\n\t</ul>\n$category_after\n";		}	} else {		//output one single list using title_li for the title		$bookmarks = get_bookmarks($r);		if ( !empty($bookmarks) ) {			if ( !empty( $title_li ) ){				$output .= str_replace(array('%id', '%class'), array("linkcat-$category", $class), $category_before);				$output .= "$title_before$title_li$title_after\n\t<ul class='xoxo blogroll'>\n";				$output .= _walk_bookmarks($bookmarks, $r);				$output .= "\n\t</ul>\n$category_after\n";			} else {				$output .= _walk_bookmarks($bookmarks, $r);			}		}	}	$output = apply_filters( 'wp_list_bookmarks', $output );	if ( !$echo )		return $output;	echo $output;}?>
<?php/** * BackPress script procedural API. * * @package BackPress * @since r16 *//** * Prints script tags in document head. * * Called by admin-header.php and by wp_head hook. Since it is called by wp_head * on every page load, the function does not instantiate the WP_Scripts object * unless script names are explicitly passed. Does make use of already * instantiated $wp_scripts if present. Use provided wp_print_scripts hook to * register/enqueue new scripts. * * @since r16 * @see WP_Dependencies::print_scripts() */function wp_print_scripts( $handles = false ) {	do_action( 'wp_print_scripts' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_scripts = new WP_Scripts();	}	return $wp_scripts->do_items( $handles );}/** * Register new JavaScript file. * * @since r16 * @param string $handle Script name * @param string $src Script url * @param array $deps (optional) Array of script names on which this script depends * @param string|bool $ver (optional) Script version (used for cache busting), set to NULL to disable * @param bool (optional) Wether to enqueue the script before </head> or before </body> * @return null */function wp_register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->add( $handle, $src, $deps, $ver );	if ( $in_footer )		$wp_scripts->add_data( $handle, 'group', 1 );}/** * Localizes a script. * * Localizes only if script has already been added. * * @since r16 * @see WP_Scripts::localize() */function wp_localize_script( $handle, $object_name, $l10n ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return false;	return $wp_scripts->localize( $handle, $object_name, $l10n );}/** * Remove a registered script. * * @since r16 * @see WP_Scripts::remove() For parameter information. */function wp_deregister_script( $handle ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->remove( $handle );}/** * Enqueues script. * * Registers the script if src provided (does NOT overwrite) and enqueues. * * @since r16 * @see wp_register_script() For parameter information. */function wp_enqueue_script( $handle, $src = false, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_scripts->add( $_handle[0], $src, $deps, $ver );		if ( $in_footer )			$wp_scripts->add_data( $_handle[0], 'group', 1 );	}	$wp_scripts->enqueue( $handle );}/** * Check whether script has been added to WordPress Scripts. * * The values for list defaults to 'queue', which is the same as enqueue for * scripts. * * @since WP unknown; BP unknown * * @param string $handle Handle used to add script. * @param string $list Optional, defaults to 'queue'. Others values are 'registered', 'queue', 'done', 'to_do' * @return bool */function wp_script_is( $handle, $list = 'queue' ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$query = $wp_scripts->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Defines the newline characters, if not defined already. * * This can be redefined. * * @since 2.5 * @var string */if(!defined('CRLF')) define('CRLF',"\r\n");/** * Sets whatever to autodetect ASCII mode. * * This can be redefined. * * @since 2.5 * @var int */if(!defined("FTP_AUTOASCII")) define("FTP_AUTOASCII", -1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_BINARY")) define("FTP_BINARY", 1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_ASCII")) define("FTP_ASCII", 0);/** * Whether to force FTP. * * This can be redefined. * * @since 2.5 * @var bool */if(!defined('FTP_FORCE')) define('FTP_FORCE', true);/** * @since 2.5 * @var string */define('FTP_OS_Unix','u');/** * @since 2.5 * @var string */define('FTP_OS_Windows','w');/** * @since 2.5 * @var string */define('FTP_OS_Mac','m');/** * PemFTP base class * */class ftp_base {	/* Public variables */	var $LocalEcho;	var $Verbose;	var $OS_local;	var $OS_remote;	/* Private variables */	var $_lastaction;	var $_errors;	var $_type;	var $_umask;	var $_timeout;	var $_passive;	var $_host;	var $_fullhost;	var $_port;	var $_datahost;	var $_dataport;	var $_ftp_control_sock;	var $_ftp_data_sock;	var $_ftp_temp_sock;	var $_ftp_buff_size;	var $_login;	var $_password;	var $_connected;	var $_ready;	var $_code;	var $_message;	var $_can_restore;	var $_port_available;	var $_curtype;	var $_features;	var $_error_array;	var $AuthorizedTransferMode;	var $OS_FullName;	var $_eol_code;	var $AutoAsciiExt;	/* Constructor */	function ftp_base($port_mode=FALSE) {		$this->__construct($port_mode);	}	function __construct($port_mode=FALSE, $verb=FALSE, $le=FALSE) {		$this->LocalEcho=$le;		$this->Verbose=$verb;		$this->_lastaction=NULL;		$this->_error_array=array();		$this->_eol_code=array(FTP_OS_Unix=>"\n", FTP_OS_Mac=>"\r", FTP_OS_Windows=>"\r\n");		$this->AuthorizedTransferMode=array(FTP_AUTOASCII, FTP_ASCII, FTP_BINARY);		$this->OS_FullName=array(FTP_OS_Unix => 'UNIX', FTP_OS_Windows => 'WINDOWS', FTP_OS_Mac => 'MACOS');		$this->AutoAsciiExt=array("ASP","BAT","C","CPP","CSS","CSV","JS","H","HTM","HTML","SHTML","INI","LOG","PHP3","PHTML","PL","PERL","SH","SQL","TXT");		$this->_port_available=($port_mode==TRUE);		$this->SendMSG("Staring FTP client class".($this->_port_available?"":" without PORT mode support"));		$this->_connected=FALSE;		$this->_ready=FALSE;		$this->_can_restore=FALSE;		$this->_code=0;		$this->_message="";		$this->_ftp_buff_size=4096;		$this->_curtype=NULL;		$this->SetUmask(0022);		$this->SetType(FTP_AUTOASCII);		$this->SetTimeout(30);		$this->Passive(!$this->_port_available);		$this->_login="anonymous";		$this->_password="anon@ftp.com";		$this->_features=array();	    $this->OS_local=FTP_OS_Unix;		$this->OS_remote=FTP_OS_Unix;		$this->features=array();		if(strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') $this->OS_local=FTP_OS_Windows;		elseif(strtoupper(substr(PHP_OS, 0, 3)) === 'MAC') $this->OS_local=FTP_OS_Mac;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Public functions                                                                  -->// <!-- --------------------------------------------------------------------------------------- -->	function parselisting($line) {		$is_windows = ($this->OS_remote == FTP_OS_Windows);		if ($is_windows && preg_match("/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/",$line,$lucifer)) {			$b = array();			if ($lucifer[3]<70) { $lucifer[3]+=2000; } else { $lucifer[3]+=1900; } // 4digit year fix			$b['isdir'] = ($lucifer[7]=="<DIR>");			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4]+(strcasecmp($lucifer[6],"PM")==0?12:0),$lucifer[5],0,$lucifer[1],$lucifer[2],$lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} else if (!$is_windows && $lucifer=preg_split("/[ ]/",$line,9,PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount=count($lucifer);			if ($lcount<8) return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === "d";			$b['islink'] = $lucifer[0]{0} === "l";			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ($lcount==8) {				sscanf($lucifer[5],"%d-%d-%d",$b['year'],$b['month'],$b['day']);				sscanf($lucifer[6],"%d:%d",$b['hour'],$b['minute']);				$b['time'] = @mktime($b['hour'],$b['minute'],0,$b['month'],$b['day'],$b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if (preg_match("/([0-9]{2}):([0-9]{2})/",$lucifer[7],$l2)) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime(sprintf("%d %s %d %02d:%02d",$b['day'],$b['month'],$b['year'],$b['hour'],$b['minute']));				$b['name'] = $lucifer[8];			}		}		return $b;	}	function SendMSG($message = "", $crlf=true) {		if ($this->Verbose) {			echo $message.($crlf?CRLF:"");			flush();		}		return TRUE;	}	function SetType($mode=FTP_AUTOASCII) {		if(!in_array($mode, $this->AuthorizedTransferMode)) {			$this->SendMSG("Wrong type");			return FALSE;		}		$this->_type=$mode;		$this->SendMSG("Transfer type: ".($this->_type==FTP_BINARY?"binary":($this->_type==FTP_ASCII?"ASCII":"auto ASCII") ) );		return TRUE;	}	function _settype($mode=FTP_ASCII) {		if($this->_ready) {			if($mode==FTP_BINARY) {				if($this->_curtype!=FTP_BINARY) {					if(!$this->_exec("TYPE I", "SetType")) return FALSE;					$this->_curtype=FTP_BINARY;				}			} elseif($this->_curtype!=FTP_ASCII) {				if(!$this->_exec("TYPE A", "SetType")) return FALSE;				$this->_curtype=FTP_ASCII;			}		} else return FALSE;		return TRUE;	}	function Passive($pasv=NULL) {		if(is_null($pasv)) $this->_passive=!$this->_passive;		else $this->_passive=$pasv;		if(!$this->_port_available and !$this->_passive) {			$this->SendMSG("Only passive connections available!");			$this->_passive=TRUE;			return FALSE;		}		$this->SendMSG("Passive mode ".($this->_passive?"on":"off"));		return TRUE;	}	function SetServer($host, $port=21, $reconnect=true) {		if(!is_long($port)) {	        $this->verbose=true;    	    $this->SendMSG("Incorrect port syntax");			return FALSE;		} else {			$ip=@gethostbyname($host);	        $dns=@gethostbyaddr($host);	        if(!$ip) $ip=$host;	        if(!$dns) $dns=$host;	        // Validate the IPAddress PHP4 returns -1 for invalid, PHP5 false	        // -1 === "255.255.255.255" which is the broadcast address which is also going to be invalid	        $ipaslong = ip2long($ip);			if ( ($ipaslong == false) || ($ipaslong === -1) ) {				$this->SendMSG("Wrong host name/address \"".$host."\"");				return FALSE;			}	        $this->_host=$ip;	        $this->_fullhost=$dns;	        $this->_port=$port;	        $this->_dataport=$port-1;		}		$this->SendMSG("Host \"".$this->_fullhost."(".$this->_host."):".$this->_port."\"");		if($reconnect){			if($this->_connected) {				$this->SendMSG("Reconnecting");				if(!$this->quit(FTP_FORCE)) return FALSE;				if(!$this->connect()) return FALSE;			}		}		return TRUE;	}	function SetUmask($umask=0022) {		$this->_umask=$umask;		umask($this->_umask);		$this->SendMSG("UMASK 0".decoct($this->_umask));		return TRUE;	}	function SetTimeout($timeout=30) {		$this->_timeout=$timeout;		$this->SendMSG("Timeout ".$this->_timeout);		if($this->_connected)			if(!$this->_settimeout($this->_ftp_control_sock)) return FALSE;		return TRUE;	}	function connect($server=NULL) {		if(!empty($server)) {			if(!$this->SetServer($server)) return false;		}		if($this->_ready) return true;	    $this->SendMsg('Local OS : '.$this->OS_FullName[$this->OS_local]);		if(!($this->_ftp_control_sock = $this->_connect($this->_host, $this->_port))) {			$this->SendMSG("Error : Cannot connect to remote host \"".$this->_fullhost." :".$this->_port."\"");			return FALSE;		}		$this->SendMSG("Connected to remote host \"".$this->_fullhost.":".$this->_port."\". Waiting for greeting.");		do {			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			$this->_lastaction=time();		} while($this->_code<200);		$this->_ready=true;		$syst=$this->systype();		if(!$syst) $this->SendMSG("Can't detect remote OS");		else {			if(preg_match("/win|dos|novell/i", $syst[0])) $this->OS_remote=FTP_OS_Windows;			elseif(preg_match("/os/i", $syst[0])) $this->OS_remote=FTP_OS_Mac;			elseif(preg_match("/(li|u)nix/i", $syst[0])) $this->OS_remote=FTP_OS_Unix;			else $this->OS_remote=FTP_OS_Mac;			$this->SendMSG("Remote OS: ".$this->OS_FullName[$this->OS_remote]);		}		if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");		else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		return TRUE;	}	function quit($force=false) {		if($this->_ready) {			if(!$this->_exec("QUIT") and !$force) return FALSE;			if(!$this->_checkCode() and !$force) return FALSE;			$this->_ready=false;			$this->SendMSG("Session finished");		}		$this->_quit();		return TRUE;	}	function login($user=NULL, $pass=NULL) {		if(!is_null($user)) $this->_login=$user;		else $this->_login="anonymous";		if(!is_null($pass)) $this->_password=$pass;		else $this->_password="anon@anon.com";		if(!$this->_exec("USER ".$this->_login, "login")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code!=230) {			if(!$this->_exec((($this->_code==331)?"PASS ":"ACCT ").$this->_password, "login")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		$this->SendMSG("Authentication succeeded");		if(empty($this->_features)) {			if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");			else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		}		return TRUE;	}	function pwd() {		if(!$this->_exec("PWD", "pwd")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} \"(.+)\".+", "\\1", $this->_message);	}	function cdup() {		if(!$this->_exec("CDUP", "cdup")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return true;	}	function chdir($pathname) {		if(!$this->_exec("CWD ".$pathname, "chdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rmdir($pathname) {		if(!$this->_exec("RMD ".$pathname, "rmdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function mkdir($pathname) {		if(!$this->_exec("MKD ".$pathname, "mkdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rename($from, $to) {		if(!$this->_exec("RNFR ".$from, "rename")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code==350) {			if(!$this->_exec("RNTO ".$to, "rename")) return FALSE;			if(!$this->_checkCode()) return FALSE;		} else return FALSE;		return TRUE;	}	function filesize($pathname) {		if(!isset($this->_features["SIZE"])) {			$this->PushError("filesize", "not supported by server");			return FALSE;		}		if(!$this->_exec("SIZE ".$pathname, "filesize")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);	}	function abort() {		if(!$this->_exec("ABOR", "abort")) return FALSE;		if(!$this->_checkCode()) {			if($this->_code!=426) return FALSE;			if(!$this->_readmsg("abort")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		return true;	}	function mdtm($pathname) {		if(!isset($this->_features["MDTM"])) {			$this->PushError("mdtm", "not supported by server");			return FALSE;		}		if(!$this->_exec("MDTM ".$pathname, "mdtm")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$mdtm = ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);		$date = sscanf($mdtm, "%4d%2d%2d%2d%2d%2d");		$timestamp = mktime($date[3], $date[4], $date[5], $date[1], $date[2], $date[0]);		return $timestamp;	}	function systype() {		if(!$this->_exec("SYST", "systype")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$DATA = explode(" ", $this->_message);		return array($DATA[1], $DATA[3]);	}	function delete($pathname) {		if(!$this->_exec("DELE ".$pathname, "delete")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function site($command, $fnction="site") {		if(!$this->_exec("SITE ".$command, $fnction)) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function chmod($pathname, $mode) {		if(!$this->site( sprintf('CHMOD %o %s', $mode, $pathname), "chmod")) return FALSE;		return TRUE;	}	function restore($from) {		if(!isset($this->_features["REST"])) {			$this->PushError("restore", "not supported by server");			return FALSE;		}		if($this->_curtype!=FTP_BINARY) {			$this->PushError("restore", "can't restore in ASCII mode");			return FALSE;		}		if(!$this->_exec("REST ".$from, "resore")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function features() {		if(!$this->_exec("FEAT", "features")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$f=preg_split("/[".CRLF."]+/", preg_replace("/[0-9]{3}[ -].*[".CRLF."]+/", "", $this->_message), -1, PREG_SPLIT_NO_EMPTY);		$this->_features=array();		foreach($f as $k=>$v) {			$v=explode(" ", trim($v));			$this->_features[array_shift($v)]=$v;		}		return true;	}	function rawlist($pathname="", $arg="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "LIST", "rawlist");	}	function nlist($pathname="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "NLST", "nlist");	}	function is_exists($pathname) {		return $this->file_exists($pathname);	}	function file_exists($pathname) {		$exists=true;		if(!$this->_exec("RNFR ".$pathname, "rename")) $exists=FALSE;		else {			if(!$this->_checkCode()) $exists=FALSE;			$this->abort();		}		if($exists) $this->SendMSG("Remote file ".$pathname." exists");		else $this->SendMSG("Remote file ".$pathname." does not exist");		return $exists;	}	function fget($fp, $remotefile,$rest=0) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out=$this->_data_read($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function get($remotefile, $localfile=NULL, $rest=0) {		if(is_null($localfile)) $localfile=$remotefile;		if (@file_exists($localfile)) $this->SendMSG("Warning : local file will be overwritten");		$fp = @fopen($localfile, "w");		if (!$fp) {			$this->PushError("get","can't open local file", "Cannot create \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$out=$this->_data_read($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function fput($remotefile, $fp) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function put($localfile, $remotefile=NULL, $rest=0) {		if(is_null($remotefile)) $remotefile=$localfile;		if (!file_exists($localfile)) {			$this->PushError("put","can't open local file", "No such file or directory \"".$localfile."\"");			return FALSE;		}		$fp = @fopen($localfile, "r");		if (!$fp) {			$this->PushError("put","can't open local file", "Cannot read file \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($localfile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function mput($local=".", $remote=NULL, $continious=false) {		$local=realpath($local);		if(!@file_exists($local)) {			$this->PushError("mput","can't open local folder", "Cannot stat folder \"".$local."\"");			return FALSE;		}		if(!is_dir($local)) return $this->put($local, $remote);		if(empty($remote)) $remote=".";		elseif(!$this->file_exists($remote) and !$this->mkdir($remote)) return FALSE;		if($handle = opendir($local)) {			$list=array();			while (false !== ($file = readdir($handle))) {				if ($file != "." && $file != "..") $list[]=$file;			}			closedir($handle);		} else {			$this->PushError("mput","can't open local folder", "Cannot read folder \"".$local."\"");			return FALSE;		}		if(empty($list)) return TRUE;		$ret=true;		foreach($list as $el) {			if(is_dir($local."/".$el)) $t=$this->mput($local."/".$el, $remote."/".$el);			else $t=$this->put($local."/".$el, $remote."/".$el);			if(!$t) {				$ret=FALSE;				if(!$continious) break;			}		}		return $ret;	}	function mget($remote, $local=".", $continious=false) {		$list=$this->rawlist($remote, "-lA");		if($list===false) {			$this->PushError("mget","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return FALSE;		}		if(empty($list)) return true;		if(!@file_exists($local)) {			if(!@mkdir($local)) {				$this->PushError("mget","can't create local folder", "Cannot create folder \"".$local."\"");				return FALSE;			}		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if($el["type"]=="d") {				if(!$this->mget($remote."/".$el["name"], $local."/".$el["name"], $continious)) {					$this->PushError("mget", "can't copy folder", "Can't copy remote folder \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			} else {				if(!$this->get($remote."/".$el["name"], $local."/".$el["name"])) {					$this->PushError("mget", "can't copy file", "Can't copy remote file \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}			@chmod($local."/".$el["name"], $el["perms"]);			$t=strtotime($el["date"]);			if($t!==-1 and $t!==false) @touch($local."/".$el["name"], $t);		}		return $ret;	}	function mdel($remote, $continious=false) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("mdel","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if ( empty($el) )				continue;			if($el["type"]=="d") {				if(!$this->mdel($remote."/".$el["name"], $continious)) {					$ret=false;					if(!$continious) break;				}			} else {				if (!$this->delete($remote."/".$el["name"])) {					$this->PushError("mdel", "can't delete file", "Can't delete remote file \"".$remote."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}		}		if(!$this->rmdir($remote)) {			$this->PushError("mdel", "can't delete folder", "Can't delete remote folder \"".$remote."/".$el["name"]."\"");			$ret=false;		}		return $ret;	}	function mmkdir($dir, $mode = 0777) {		if(empty($dir)) return FALSE;		if($this->is_exists($dir) or $dir == "/" ) return TRUE;		if(!$this->mmkdir(dirname($dir), $mode)) return false;		$r=$this->mkdir($dir, $mode);		$this->chmod($dir,$mode);		return $r;	}	function glob($pattern, $handle=NULL) {		$path=$output=null;		if(PHP_OS=='WIN32') $slash='\\';		else $slash='/';		$lastpos=strrpos($pattern,$slash);		if(!($lastpos===false)) {			$path=substr($pattern,0,-$lastpos-1);			$pattern=substr($pattern,$lastpos);		} else $path=getcwd();		if(is_array($handle) and !empty($handle)) {			while($dir=each($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}		} else {			$handle=@opendir($path);			if($handle===false) return false;			while($dir=readdir($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}			closedir($handle);		}		if(is_array($output)) return $output;		return false;	}	function glob_pattern_match($pattern,$string) {		$out=null;		$chunks=explode(';',$pattern);		foreach($chunks as $pattern) {			$escape=array('$','^','.','{','}','(',')','[',']','|');			while(strpos($pattern,'**')!==false)				$pattern=str_replace('**','*',$pattern);			foreach($escape as $probe)				$pattern=str_replace($probe,"\\$probe",$pattern);			$pattern=str_replace('?*','*',				str_replace('*?','*',					str_replace('*',".*",						str_replace('?','.{1,1}',$pattern))));			$out[]=$pattern;		}		if(count($out)==1) return($this->glob_regexp("^$out[0]$",$string));		else {			foreach($out as $tester)				if($this->my_regexp("^$tester$",$string)) return true;		}		return false;	}	function glob_regexp($pattern,$probe) {		$sensitive=(PHP_OS!='WIN32');		return ($sensitive?			ereg($pattern,$probe):			eregi($pattern,$probe)		);	}	function dirlist($remote) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("dirlist","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		$dirlist = array();		foreach($list as $k=>$v) {			$entry=$this->parselisting($v);			if ( empty($entry) )				continue;			if($entry["name"]=="." or $entry["name"]=="..")				continue;			$dirlist[$entry['name']] = $entry;		}		return $dirlist;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _checkCode() {		return ($this->_code<400 and $this->_code>0);	}	function _list($arg="", $cmd="LIST", $fnction="_list") {		if(!$this->_data_prepare()) return false;		if(!$this->_exec($cmd.$arg, $fnction)) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out="";		if($this->_code<200) {			$out=$this->_data_read();			$this->_data_close();			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			if($out === FALSE ) return FALSE;			$out=preg_split("/[".CRLF."]+/", $out, -1, PREG_SPLIT_NO_EMPTY);//			$this->SendMSG(implode($this->_eol_code[$this->OS_local], $out));		}		return $out;	}// <!-- --------------------------------------------------------------------------------------- -->// <!-- Partie : gestion des erreurs                                                            -->// <!-- --------------------------------------------------------------------------------------- -->// Gnre une erreur pour traitement externe  la classe	function PushError($fctname,$msg,$desc=false){		$error=array();		$error['time']=time();		$error['fctname']=$fctname;		$error['msg']=$msg;		$error['desc']=$desc;		if($desc) $tmp=' ('.$desc.')'; else $tmp='';		$this->SendMSG($fctname.': '.$msg.$tmp);		return(array_push($this->_error_array,$error));	}// Rcupre une erreur externe	function PopError(){		if(count($this->_error_array)) return(array_pop($this->_error_array));			else return(false);	}}$mod_sockets=TRUE;if (!extension_loaded('sockets')) {	$prefix = (PHP_SHLIB_SUFFIX == 'dll') ? 'php_' : '';	if(!@dl($prefix . 'sockets.' . PHP_SHLIB_SUFFIX)) $mod_sockets=FALSE;}require_once "class-ftp-".($mod_sockets?"sockets":"pure").".php";?>
<?php/** * Navigation Menu template functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Create HTML list of nav menu items. * * @package WordPress * @since 3.0.0 * @uses Walker */class Walker_Nav_Menu extends Walker {	/**	 * @see Walker::$tree_type	 * @since 3.0.0	 * @var string	 */	var $tree_type = array( 'post_type', 'taxonomy', 'custom' );	/**	 * @see Walker::$db_fields	 * @since 3.0.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array( 'parent' => 'menu_item_parent', 'id' => 'db_id' );	/**	 * @see Walker::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class=\"sub-menu\">\n";	}	/**	 * @see Walker::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $wp_query;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$class_names = $value = '';		$classes = empty( $item->classes ) ? array() : (array) $item->classes;		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item ) );		$class_names = ' class="' . esc_attr( $class_names ) . '"';		$output .= $indent . '<li id="menu-item-'. $item->ID . '"' . $value . $class_names .'>';		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';		$attributes .= ! empty( $item->target )     ? ' target="' . esc_attr( $item->target     ) .'"' : '';		$attributes .= ! empty( $item->xfn )        ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';		$attributes .= ! empty( $item->url )        ? ' href="'   . esc_attr( $item->url        ) .'"' : '';		$item_output = $args->before;		$item_output .= '<a'. $attributes .'>';		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;		$item_output .= '</a>';		$item_output .= $args->after;		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );	}	/**	 * @see Walker::end_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $item, $depth) {		$output .= "</li>\n";	}}/** * Displays a navigation menu. * * Optional $args contents: * * menu - The menu that is desired.  Accepts (matching in order) id, slug, name. Defaults to blank. * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'. * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented. * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'. * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'. * container_id - The ID that is applied to the container. Defaults to blank. * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'. * before - Text before the link text. * after - Text after the link text. * link_before - Text before the link. * link_after - Text after the link. * echo - Whether to echo the menu or return it. Defaults to echo. * depth - how many levels of the hierarchy are to be included.  0 means all.  Defaults to 0. * walker - allows a custom walker to be specified. * theme_location - the location in the theme to be used.  Must be registered with register_nav_menu() in order to be selectable by the user. * * @since 3.0.0 * * @param array $args Arguments */function wp_nav_menu( $args = array() ) {	static $menu_id_slugs = array();	$defaults = array( 'menu' => '', 'container' => 'div', 'container_class' => '', 'container_id' => '', 'menu_class' => 'menu', 'menu_id' => '',	'echo' => true, 'fallback_cb' => 'wp_page_menu', 'before' => '', 'after' => '', 'link_before' => '', 'link_after' => '',	'depth' => 0, 'walker' => '', 'theme_location' => '' );	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_nav_menu_args', $args );	$args = (object) $args;	// Get the nav menu based on the requested menu	$menu = wp_get_nav_menu_object( $args->menu );	// Get the nav menu based on the theme_location	if ( ! $menu && $args->theme_location && ( $locations = get_nav_menu_locations() ) && isset( $locations[ $args->theme_location ] ) )		$menu = wp_get_nav_menu_object( $locations[ $args->theme_location ] );	// get the first menu that has items if we still can't find a menu	if ( ! $menu && !$args->theme_location ) {		$menus = wp_get_nav_menus();		foreach ( $menus as $menu_maybe ) {			if ( $menu_items = wp_get_nav_menu_items($menu_maybe->term_id) ) {				$menu = $menu_maybe;				break;			}		}	}	// If the menu exists, get its items.	if ( $menu && ! is_wp_error($menu) && !isset($menu_items) )		$menu_items = wp_get_nav_menu_items( $menu->term_id );	// If no menu was found or if the menu has no items and no location was requested, call the fallback_cb if it exists	if ( ( !$menu || is_wp_error($menu) || ( isset($menu_items) && empty($menu_items) && !$args->theme_location ) )		&& ( function_exists($args->fallback_cb) || is_callable( $args->fallback_cb ) ) )			return call_user_func( $args->fallback_cb, (array) $args );	// If no fallback function was specified and the menu doesn't exists, bail.	if ( !$menu || is_wp_error($menu) )		return false;	$nav_menu = $items = '';	$show_container = false;	if ( $args->container ) {		$allowed_tags = apply_filters( 'wp_nav_menu_container_allowedtags', array( 'div', 'nav' ) );		if ( in_array( $args->container, $allowed_tags ) ) {			$show_container = true;			$class = $args->container_class ? ' class="' . esc_attr( $args->container_class ) . '"' : ' class="menu-'. $menu->slug .'-container"';			$id = $args->container_id ? ' id="' . esc_attr( $args->container_id ) . '"' : '';			$nav_menu .= '<'. $args->container . $id . $class . '>';		}	}	// Set up the $menu_item variables	_wp_menu_item_classes_by_context( $menu_items );	$sorted_menu_items = array();	foreach ( (array) $menu_items as $key => $menu_item )		$sorted_menu_items[$menu_item->menu_order] = $menu_item;	unset($menu_items);	$items .= walk_nav_menu_tree( $sorted_menu_items, $args->depth, $args );	unset($sorted_menu_items);	// Attributes	if ( ! empty( $args->menu_id ) ) {		$slug = $args->menu_id;	} else {		$slug = 'menu-' . $menu->slug;		while ( in_array( $slug, $menu_id_slugs ) ) {			if ( preg_match( '#-(\d+)$#', $slug, $matches ) )				$slug = preg_replace('#-(\d+)$#', '-' . ++$matches[1], $slug);			else				$slug = $slug . '-1';		}	}	$menu_id_slugs[] = $slug;	$attributes = ' id="' . $slug . '"';	$attributes .= $args->menu_class ? ' class="'. $args->menu_class .'"' : '';	$nav_menu .= '<ul'. $attributes .'>';	// Allow plugins to hook into the menu to add their own <li>'s	$items = apply_filters( 'wp_nav_menu_items', $items, $args );	$items = apply_filters( "wp_nav_menu_{$menu->slug}_items", $items, $args );	$nav_menu .= $items;	unset($items);	$nav_menu .= '</ul>';	if ( $show_container )		$nav_menu .= '</' . $args->container . '>';	$nav_menu = apply_filters( 'wp_nav_menu', $nav_menu, $args );	if ( $args->echo )		echo $nav_menu;	else		return $nav_menu;}/** * Add the class property classes for the current context, if applicable. * * @access private * @since 3.0 * * @param array $menu_items The current menu item objects to which to add the class property information. */function _wp_menu_item_classes_by_context( &$menu_items ) {	global $wp_query;	$queried_object = $wp_query->get_queried_object();	$queried_object_id = (int) $wp_query->queried_object_id;	$active_object = '';	$active_ancestor_item_ids = array();	$active_parent_item_ids = array();	$active_parent_object_ids = array();	$possible_taxonomy_ancestors = array();	$possible_object_parents = array();	$home_page_id = (int) get_option( 'page_for_posts' );	if ( $wp_query->is_singular && ! empty( $queried_object->post_type ) && ! is_post_type_hierarchical( $queried_object->post_type ) ) {		foreach ( (array) get_object_taxonomies( $queried_object->post_type ) as $taxonomy ) {			if ( is_taxonomy_hierarchical( $taxonomy ) ) {				$term_hierarchy = _get_term_hierarchy( $taxonomy );				$terms = wp_get_object_terms( $queried_object_id, $taxonomy, array( 'fields' => 'ids' ) );				if ( is_array( $terms ) ) {					$possible_object_parents = array_merge( $possible_object_parents, $terms );					$term_to_ancestor = array();					foreach ( (array) $term_hierarchy as $anc => $descs ) {						foreach ( (array) $descs as $desc )							$term_to_ancestor[ $desc ] = $anc;					}					foreach ( $terms as $desc ) {						do {							$possible_taxonomy_ancestors[ $taxonomy ][] = $desc;							if ( isset( $term_to_ancestor[ $desc ] ) ) {								$_desc = $term_to_ancestor[ $desc ];								unset( $term_to_ancestor[ $desc ] );								$desc = $_desc;							} else {								$desc = 0;							}						} while ( ! empty( $desc ) );					}				}			}		}	} elseif ( ! empty( $queried_object->post_type ) && is_post_type_hierarchical( $queried_object->post_type ) ) {		_get_post_ancestors( $queried_object );	} elseif ( ! empty( $queried_object->taxonomy ) && is_taxonomy_hierarchical( $queried_object->taxonomy ) ) {		$term_hierarchy = _get_term_hierarchy( $queried_object->taxonomy );		$term_to_ancestor = array();		foreach ( (array) $term_hierarchy as $anc => $descs ) {			foreach ( (array) $descs as $desc )				$term_to_ancestor[ $desc ] = $anc;		}		$desc = $queried_object->term_id;		do {			$possible_taxonomy_ancestors[ $queried_object->taxonomy ][] = $desc;			if ( isset( $term_to_ancestor[ $desc ] ) ) {				$_desc = $term_to_ancestor[ $desc ];				unset( $term_to_ancestor[ $desc ] );				$desc = $_desc;			} else {				$desc = 0;			}		} while ( ! empty( $desc ) );	}	$possible_object_parents = array_filter( $possible_object_parents );	foreach ( (array) $menu_items as $key => $menu_item ) {		$classes = (array) $menu_item->classes;		$classes[] = 'menu-item';		$classes[] = 'menu-item-type-' . $menu_item->type;		// if the menu item corresponds to a taxonomy term for the currently-queried non-hierarchical post object		if ( $wp_query->is_singular && 'taxonomy' == $menu_item->type && in_array( $menu_item->object_id, $possible_object_parents ) ) {			$active_parent_object_ids[] = (int) $menu_item->object_id;			$active_parent_item_ids[] = (int) $menu_item->db_id;			$active_object = $queried_object->post_type;		// if the menu item corresponds to the currently-queried post or taxonomy object		} elseif (			$menu_item->object_id == $queried_object_id &&			(				( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && $wp_query->is_home && $home_page_id == $menu_item->object_id ) ||				( 'post_type' == $menu_item->type && $wp_query->is_singular ) ||				( 'taxonomy' == $menu_item->type && ( $wp_query->is_category || $wp_query->is_tag || $wp_query->is_tax ) )			)		) {			$classes[] = 'current-menu-item';			$_anc_id = (int) $menu_item->db_id;			while(				( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&				! in_array( $_anc_id, $active_ancestor_item_ids )			) {				$active_ancestor_item_ids[] = $_anc_id;			}			if ( 'post_type' == $menu_item->type && 'page' == $menu_item->object ) {				// Back compat classes for pages to match wp_page_menu()				$classes[] = 'page_item';				$classes[] = 'page-item-' . $menu_item->object_id;				$classes[] = 'current_page_item';			}			$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;			$active_parent_object_ids[] = (int) $menu_item->post_parent;			$active_object = $menu_item->object;		// if the menu item corresponds to the currently-requested URL		} elseif ( 'custom' == $menu_item->object ) {			$current_url = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];			$item_url = strpos( $menu_item->url, '#' ) ? substr( $menu_item->url, 0, strpos( $menu_item->url, '#' ) ) : $menu_item->url;			if ( $item_url == $current_url ) {				$classes[] = 'current-menu-item';				$_anc_id = (int) $menu_item->db_id;				while(					( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&					! in_array( $_anc_id, $active_ancestor_item_ids )				) {					$active_ancestor_item_ids[] = $_anc_id;				}				if ( untrailingslashit($current_url) == home_url() ) {					$classes[] = 'menu-item-home';					// Back compat for home limk to match wp_page_menu()					$classes[] = 'current_page_item';				}				$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;				$active_parent_object_ids[] = (int) $menu_item->post_parent;				$active_object = $menu_item->object;			}		}		// back-compat with wp_page_menu: add "current_page_parent" to static home page link for any non-page query		if ( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && empty( $wp_query->is_page ) && $home_page_id == $menu_item->object_id )			$classes[] = 'current_page_parent';		$menu_items[$key]->classes = array_unique( $classes );	}	$active_ancestor_item_ids = array_filter( array_unique( $active_ancestor_item_ids ) );	$active_parent_item_ids = array_filter( array_unique( $active_parent_item_ids ) );	$active_parent_object_ids = array_filter( array_unique( $active_parent_object_ids ) );	// set parent's class	foreach ( (array) $menu_items as $key => $parent_item ) {		$classes = (array) $parent_item->classes;		if (			isset( $parent_item->type ) &&			(				// ancestral post object				(					'post_type' == $parent_item->type &&					! empty( $queried_object->post_type ) &&					is_post_type_hierarchical( $queried_object->post_type ) &&					in_array( $parent_item->object_id, $queried_object->ancestors )				) ||				// ancestral term				(					'taxonomy' == $parent_item->type &&					isset( $possible_taxonomy_ancestors[ $parent_item->object ] ) &&					in_array( $parent_item->object_id, $possible_taxonomy_ancestors[ $parent_item->object ] )				)			)		) {			$classes[] = empty( $queried_object->taxonomy ) ? 'current-' . $queried_object->post_type . '-ancestor' : 'current-' . $queried_object->taxonomy . '-ancestor';		}		if ( in_array(  intval( $parent_item->db_id ), $active_ancestor_item_ids ) ) {			$classes[] = 'current-menu-ancestor';		}		if ( in_array( $parent_item->db_id, $active_parent_item_ids ) )			$classes[] = 'current-menu-parent';		if ( in_array( $parent_item->object_id, $active_parent_object_ids ) )			$classes[] = 'current-' . $active_object . '-parent';		if ( 'post_type' == $parent_item->type && 'page' == $parent_item->object ) {			// Back compat classes for pages to match wp_page_menu()			if ( in_array('current-menu-parent', $classes) )				$classes[] = 'current_page_parent';			if ( in_array('current-menu-ancestor', $classes) )				$classes[] = 'current_page_ancestor';		}		$menu_items[$key]->classes = array_unique( $classes );	}}/** * Retrieve the HTML list content for nav menu items. * * @uses Walker_Nav_Menu to create HTML list content. * @since 2.1.0 * @see Walker::walk() for parameters and return description. */function walk_nav_menu_tree( $items, $depth, $r ) {	$walker = ( empty($r->walker) ) ? new Walker_Nav_Menu : $r->walker;	$args = array( $items, $depth, $r );	return call_user_func_array( array(&$walker, 'walk'), $args );}?>
<?php/** * Bootstrap file for setting the ABSPATH constant * and loading the wp-config.php file. The wp-config.php * file will then load the wp-settings.php file, which * will then set up the WordPress environment. * * If the wp-config.php file is not found then an error * will be displayed asking the visitor to set up the * wp-config.php file. * * Will also search for wp-config.php in WordPress' parent * directory to allow the WordPress directory to remain * untouched. * * @package WordPress *//** Define ABSPATH as this files directory */define( 'ABSPATH', dirname(__FILE__) . '/' );if ( defined('E_RECOVERABLE_ERROR') )	error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);else	error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);if ( file_exists( ABSPATH . 'wp-config.php') ) {	/** The config file resides in ABSPATH */	require_once( ABSPATH . 'wp-config.php' );} elseif ( file_exists( dirname(ABSPATH) . '/wp-config.php' ) && ! file_exists( dirname(ABSPATH) . '/wp-settings.php' ) ) {	/** The config file resides one level above ABSPATH but is not part of another install*/	require_once( dirname(ABSPATH) . '/wp-config.php' );} else {	// A config file doesn't exist	// Set a path for the link to the installer	if (strpos($_SERVER['PHP_SELF'], 'wp-admin') !== false) $path = '';	else $path = 'wp-admin/';	// Die with an error message	require_once( ABSPATH . '/wp-includes/classes.php' );	require_once( ABSPATH . '/wp-includes/functions.php' );	require_once( ABSPATH . '/wp-includes/plugin.php' );	$text_direction = /*WP_I18N_TEXT_DIRECTION*/"ltr"/*/WP_I18N_TEXT_DIRECTION*/;	wp_die(sprintf(/*WP_I18N_NO_CONFIG*/"There doesn't seem to be a <code>wp-config.php</code> file. I need this before we can get started. Need more help? <a href='http://codex.wordpress.org/Editing_wp-config.php'>We got it</a>. You can create a <code>wp-config.php</code> file through a web interface, but this doesn't work for all server setups. The safest way is to manually create the file.</p><p><a href='%ssetup-config.php' class='button'>Create a Configuration File</a>"/*/WP_I18N_NO_CONFIG*/, $path), /*WP_I18N_ERROR_TITLE*/"WordPress &rsaquo; Error"/*/WP_I18N_ERROR_TITLE*/, array('text_direction' => $text_direction));}?>
<?php/** * WordPress Bookmark Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function add_link() {	return edit_link();}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function edit_link( $link_id = '' ) {	if (!current_user_can( 'manage_links' ))		wp_die( __( 'Cheatin&#8217; uh?' ));	$_POST['link_url'] = esc_html( $_POST['link_url'] );	$_POST['link_url'] = esc_url($_POST['link_url']);	$_POST['link_name'] = esc_html( $_POST['link_name'] );	$_POST['link_image'] = esc_html( $_POST['link_image'] );	$_POST['link_rss'] = esc_url($_POST['link_rss']);	if ( !isset($_POST['link_visible']) || 'N' != $_POST['link_visible'] )		$_POST['link_visible'] = 'Y';	if ( !empty( $link_id ) ) {		$_POST['link_id'] = $link_id;		return wp_update_link( $_POST);	} else {		return wp_insert_link( $_POST);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_default_link_to_edit() {	if ( isset( $_GET['linkurl'] ) )		$link->link_url = esc_url( $_GET['linkurl']);	else		$link->link_url = '';	if ( isset( $_GET['name'] ) )		$link->link_name = esc_attr( $_GET['name']);	else		$link->link_name = '';	$link->link_visible = 'Y';	return $link;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_delete_link( $link_id ) {	global $wpdb;	do_action( 'delete_link', $link_id );	wp_delete_object_term_relationships( $link_id, 'link_category' );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->links WHERE link_id = %d", $link_id ) );	do_action( 'deleted_link', $link_id );	clean_bookmark_cache( $link_id );	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_get_link_cats( $link_id = 0 ) {	$cats = wp_get_object_terms( $link_id, 'link_category', array('fields' => 'ids') );	return array_unique( $cats );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function get_link_to_edit( $link_id ) {	return get_bookmark( $link_id, OBJECT, 'edit' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_insert_link( $linkdata, $wp_error = false ) {	global $wpdb, $current_user;	$defaults = array( 'link_id' => 0, 'link_name' => '', 'link_url' => '', 'link_rating' => 0 );	$linkdata = wp_parse_args( $linkdata, $defaults );	$linkdata = sanitize_bookmark( $linkdata, 'db' );	extract( stripslashes_deep( $linkdata ), EXTR_SKIP );	$update = false;	if ( !empty( $link_id ) )		$update = true;	if ( trim( $link_name ) == '' ) {		if ( trim( $link_url ) != '' ) {			$link_name = $link_url;		} else {			return 0;		}	}	if ( trim( $link_url ) == '' )		return 0;	if ( empty( $link_rating ) )		$link_rating = 0;	if ( empty( $link_image ) )		$link_image = '';	if ( empty( $link_target ) )		$link_target = '';	if ( empty( $link_visible ) )		$link_visible = 'Y';	if ( empty( $link_owner ) )		$link_owner = $current_user->id;	if ( empty( $link_notes ) )		$link_notes = '';	if ( empty( $link_description ) )		$link_description = '';	if ( empty( $link_rss ) )		$link_rss = '';	if ( empty( $link_rel ) )		$link_rel = '';	// Make sure we set a valid category	if ( ! isset( $link_category ) ||0 == count( $link_category ) || !is_array( $link_category ) ) {		$link_category = array( get_option( 'default_link_category' ) );	}	if ( $update ) {		if ( false === $wpdb->update( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_rating', 'link_rel', 'link_notes', 'link_rss'), compact('link_id') ) ) {			if ( $wp_error )				return new WP_Error( 'db_update_error', __( 'Could not update link in the database' ), $wpdb->last_error );			else				return 0;		}	} else {		if ( false === $wpdb->insert( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_rel', 'link_notes', 'link_rss') ) ) {			if ( $wp_error )				return new WP_Error( 'db_insert_error', __( 'Could not insert link into the database' ), $wpdb->last_error );			else				return 0;		}		$link_id = (int) $wpdb->insert_id;	}	wp_set_link_cats( $link_id, $link_category );	if ( $update )		do_action( 'edit_link', $link_id );	else		do_action( 'add_link', $link_id );	clean_bookmark_cache( $link_id );	return $link_id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @param unknown_type $link_categories */function wp_set_link_cats( $link_id = 0, $link_categories = array() ) {	// If $link_categories isn't already an array, make it one:	if ( !is_array( $link_categories ) || 0 == count( $link_categories ) )		$link_categories = array( get_option( 'default_link_category' ) );	$link_categories = array_map( 'intval', $link_categories );	$link_categories = array_unique( $link_categories );	wp_set_object_terms( $link_id, $link_categories, 'link_category' );	clean_bookmark_cache( $link_id );}	// wp_set_link_cats()/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_update_link( $linkdata ) {	$link_id = (int) $linkdata['link_id'];	$link = get_bookmark( $link_id, ARRAY_A );	// Escape data pulled from DB.	$link = add_magic_quotes( $link );	// Passed link category list overwrites existing category list if not empty.	if ( isset( $linkdata['link_category'] ) && is_array( $linkdata['link_category'] )			 && 0 != count( $linkdata['link_category'] ) )		$link_cats = $linkdata['link_category'];	else		$link_cats = $link['link_category'];	// Merge old and new fields with new fields overwriting old ones.	$linkdata = array_merge( $link, $linkdata );	$linkdata['link_category'] = $link_cats;	return wp_insert_link( $linkdata );}?>
<?php/** * Tools Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Tools');add_contextual_help($current_screen,	'<p>' . __('Press This is a bookmarklet that makes it easy to blog about something you come across on the web. You can use it to just grab a link, or to post an excerpt. Press This will even allow you to choose from images included on the page and use them in your post. Just drag the Press This link on this screen to your bookmarks bar in your browser, and you&#8217;ll be on your way to easier content creation.') . '</p>' .	'<p>' . __('Note: Turbo/Gears is no longer promoted on this screen as it was in previous versions due to the fact that Google has discontinued support for it.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Tools_SubPanel" target="_blank">Tools Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( current_user_can('edit_posts') ) : ?><div class="tool-box">	<h3 class="title"><?php _e('Press This') ?></h3>	<p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p>	<p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p>	<p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p>	<p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p></div><?phpendif;if ( current_user_can( 'import' ) ) :$cats = get_taxonomy('category');$tags = get_taxonomy('post_tag');if ( current_user_can($cats->cap->manage_terms) || current_user_can($tags->cap->manage_terms) ) : ?><div class="tool-box">    <h3 class="title"><?php _e( 'Categories and Tags Converter' ) ?></h3>    <p><?php printf( __('<a href="%s">Use this</a> to convert categories to tags or tags to categories.'), 'import.php' ); ?></p></div><?phpendif;endif;do_action( 'tool_box' );?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Portable PHP password hashing framework. * @package phpass * @since 2.5 * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ */## Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in# the public domain.## There's absolutely no warranty.## Please be sure to update the Version line if you edit this file in any way.# It is suggested that you leave the main version number intact, but indicate# your project name (after the slash) and add your own revision information.## Please do not change the "private" password hashing method implemented in# here, thereby making your hashes incompatible.  However, if you must, please# change the hash type identifier (the "$P$") to something different.## Obviously, since this code is in the public domain, the above are not# requirements (there can be none), but merely suggestions.#/** * Portable PHP password hashing framework. * * @package phpass * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ * @since 2.5 */class PasswordHash {	var $itoa64;	var $iteration_count_log2;	var $portable_hashes;	var $random_state;	function PasswordHash($iteration_count_log2, $portable_hashes)	{		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)			$iteration_count_log2 = 8;		$this->iteration_count_log2 = $iteration_count_log2;		$this->portable_hashes = $portable_hashes;		$this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons	}	function get_random_bytes($count)	{		$output = '';		if ( @is_readable('/dev/urandom') &&		    ($fh = @fopen('/dev/urandom', 'rb'))) {			$output = fread($fh, $count);			fclose($fh);		}		if (strlen($output) < $count) {			$output = '';			for ($i = 0; $i < $count; $i += 16) {				$this->random_state =				    md5(microtime() . $this->random_state);				$output .=				    pack('H*', md5($this->random_state));			}			$output = substr($output, 0, $count);		}		return $output;	}	function encode64($input, $count)	{		$output = '';		$i = 0;		do {			$value = ord($input[$i++]);			$output .= $this->itoa64[$value & 0x3f];			if ($i < $count)				$value |= ord($input[$i]) << 8;			$output .= $this->itoa64[($value >> 6) & 0x3f];			if ($i++ >= $count)				break;			if ($i < $count)				$value |= ord($input[$i]) << 16;			$output .= $this->itoa64[($value >> 12) & 0x3f];			if ($i++ >= $count)				break;			$output .= $this->itoa64[($value >> 18) & 0x3f];		} while ($i < $count);		return $output;	}	function gensalt_private($input)	{		$output = '$P$';		$output .= $this->itoa64[min($this->iteration_count_log2 +			((PHP_VERSION >= '5') ? 5 : 3), 30)];		$output .= $this->encode64($input, 6);		return $output;	}	function crypt_private($password, $setting)	{		$output = '*0';		if (substr($setting, 0, 2) == $output)			$output = '*1';		if (substr($setting, 0, 3) != '$P$')			return $output;		$count_log2 = strpos($this->itoa64, $setting[3]);		if ($count_log2 < 7 || $count_log2 > 30)			return $output;		$count = 1 << $count_log2;		$salt = substr($setting, 4, 8);		if (strlen($salt) != 8)			return $output;		# We're kind of forced to use MD5 here since it's the only		# cryptographic primitive available in all versions of PHP		# currently in use.  To implement our own low-level crypto		# in PHP would result in much worse performance and		# consequently in lower iteration counts and hashes that are		# quicker to crack (by non-PHP code).		if (PHP_VERSION >= '5') {			$hash = md5($salt . $password, TRUE);			do {				$hash = md5($hash . $password, TRUE);			} while (--$count);		} else {			$hash = pack('H*', md5($salt . $password));			do {				$hash = pack('H*', md5($hash . $password));			} while (--$count);		}		$output = substr($setting, 0, 12);		$output .= $this->encode64($hash, 16);		return $output;	}	function gensalt_extended($input)	{		$count_log2 = min($this->iteration_count_log2 + 8, 24);		# This should be odd to not reveal weak DES keys, and the		# maximum valid value is (2**24 - 1) which is odd anyway.		$count = (1 << $count_log2) - 1;		$output = '_';		$output .= $this->itoa64[$count & 0x3f];		$output .= $this->itoa64[($count >> 6) & 0x3f];		$output .= $this->itoa64[($count >> 12) & 0x3f];		$output .= $this->itoa64[($count >> 18) & 0x3f];		$output .= $this->encode64($input, 3);		return $output;	}	function gensalt_blowfish($input)	{		# This one needs to use a different order of characters and a		# different encoding scheme from the one in encode64() above.		# We care because the last character in our encoded string will		# only represent 2 bits.  While two known implementations of		# bcrypt will happily accept and correct a salt string which		# has the 4 unused bits set to non-zero, we do not want to take		# chances and we also do not want to waste an additional byte		# of entropy.		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';		$output = '$2a$';		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);		$output .= '$';		$i = 0;		do {			$c1 = ord($input[$i++]);			$output .= $itoa64[$c1 >> 2];			$c1 = ($c1 & 0x03) << 4;			if ($i >= 16) {				$output .= $itoa64[$c1];				break;			}			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 4;			$output .= $itoa64[$c1];			$c1 = ($c2 & 0x0f) << 2;			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 6;			$output .= $itoa64[$c1];			$output .= $itoa64[$c2 & 0x3f];		} while (1);		return $output;	}	function HashPassword($password)	{		$random = '';		if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {			$random = $this->get_random_bytes(16);			$hash =			    crypt($password, $this->gensalt_blowfish($random));			if (strlen($hash) == 60)				return $hash;		}		if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {			if (strlen($random) < 3)				$random = $this->get_random_bytes(3);			$hash =			    crypt($password, $this->gensalt_extended($random));			if (strlen($hash) == 20)				return $hash;		}		if (strlen($random) < 6)			$random = $this->get_random_bytes(6);		$hash =		    $this->crypt_private($password,		    $this->gensalt_private($random));		if (strlen($hash) == 34)			return $hash;		# Returning '*' on error is safe here, but would _not_ be safe		# in a crypt(3)-like function used _both_ for generating new		# hashes and for validating passwords against existing hashes.		return '*';	}	function CheckPassword($password, $stored_hash)	{		$hash = $this->crypt_private($password, $stored_hash);		if ($hash[0] == '*')			$hash = crypt($password, $stored_hash);		return $hash == $stored_hash;	}}?>
<?php/** * Multisite upgrade administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once('admin.php');if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );require_once( ABSPATH . WPINC . '/http.php' );$title = __( 'Update Network' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Only use this screen once you have updated to a new version of WordPress through Dashboard > Updates. Clicking the Update Network button will step through each site in the network, five at a time, and make sure any database upgrades are applied.') . '</p>' .	'<p>' . __('If a version update to core has not happened, clicking this button won&#8217;t affect anything.') . '</p>' .	'<p>' . __('If this process fails for any reason, users logging in to their sites will force the same update.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Update_SubPanel" target="_blank">Update Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('admin-header.php');if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );echo '<div class="wrap">';screen_icon();echo '<h2>' . __( 'Update Network' ) . '</h2>';$action = isset($_GET['action']) ? $_GET['action'] : 'show';switch ( $action ) {	case "upgrade":		$n = ( isset($_GET['n']) ) ? intval($_GET['n']) : 0;		if ( $n < 5 ) {			global $wp_db_version;			update_site_option( 'wpmu_upgrade_site', $wp_db_version );		}		$blogs = $wpdb->get_results( "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' AND spam = '0' AND deleted = '0' AND archived = '0' ORDER BY registered DESC LIMIT {$n}, 5", ARRAY_A );		if ( empty( $blogs ) ) {			echo '<p>' . __( 'All done!' ) . '</p>';			break;		}		echo "<ul>";		foreach ( (array) $blogs as $details ) {			$siteurl = get_blog_option( $details['blog_id'], 'siteurl' );			echo "<li>$siteurl</li>";			$response = wp_remote_get( trailingslashit( $siteurl ) . "wp-admin/upgrade.php?step=upgrade_db", array( 'timeout' => 120, 'httpversion' => '1.1' ) );			if ( is_wp_error( $response ) )				wp_die( sprintf( __( 'Warning! Problem updating %1$s. Your server may not be able to connect to sites running on it. Error message: <em>%2$s</em>' ), $siteurl, $response->get_error_message() ) );			do_action( 'after_mu_upgrade', $response );			do_action( 'wpmu_upgrade_site', $details[ 'blog_id' ] );		}		echo "</ul>";		?><p><?php _e( 'If your browser doesn&#8217;t start loading the next page automatically, click this link:' ); ?> <a class="button" href="ms-upgrade-network.php?action=upgrade&amp;n=<?php echo ($n + 5) ?>"><?php _e("Next Sites"); ?></a></p>		<script type='text/javascript'>		<!--		function nextpage() {			location.href = "ms-upgrade-network.php?action=upgrade&n=<?php echo ($n + 5) ?>";		}		setTimeout( "nextpage()", 250 );		//-->		</script><?php	break;	case 'show':	default:		?><p><?php _e( 'You can update all the sites on your network through this page. It works by calling the update script of each site automatically. Hit the link below to update.' ); ?></p>		<p><a class="button" href="ms-upgrade-network.php?action=upgrade"><?php _e("Update Network"); ?></a></p><?php		do_action( 'wpmu_upgrade_page' );	break;}?></div><?php include('./admin-footer.php'); ?>
<?php/** * The template for displaying attachments. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<p class="page-title"><a href="<?php echo get_permalink( $post->post_parent ); ?>" title="<?php esc_attr( printf( __( 'Return to %s', 'twentyten' ), get_the_title( $post->post_parent ) ) ); ?>" rel="gallery"><?php					/* translators: %s - title of parent post */					printf( __( '<span class="meta-nav">&larr;</span> %s', 'twentyten' ), get_the_title( $post->post_parent ) );				?></a></p>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h2 class="entry-title"><?php the_title(); ?></h2>					<div class="entry-meta">						<?php							printf(__('<span class="%1$s">By</span> %2$s', 'twentyten'),								'meta-prep meta-prep-author',								sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',									get_author_posts_url( get_the_author_meta( 'ID' ) ),									sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),									get_the_author()								)							);						?>						<span class="meta-sep">|</span>						<?php							printf( __('<span class="%1$s">Published</span> %2$s', 'twentyten'),								'meta-prep meta-prep-entry-date',								sprintf( '<span class="entry-date"><abbr class="published" title="%1$s">%2$s</abbr></span>',									esc_attr( get_the_time() ),									get_the_date()								)							);							if ( wp_attachment_is_image() ) {								echo ' <span class="meta-sep">|</span> ';								$metadata = wp_get_attachment_metadata();								printf( __( 'Full size is %s pixels', 'twentyten'),									sprintf( '<a href="%1$s" title="%2$s">%3$s &times; %4$s</a>',										wp_get_attachment_url(),										esc_attr( __('Link to full-size image', 'twentyten') ),										$metadata['width'],										$metadata['height']									)								);							}						?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<div class="entry-attachment"><?php if ( wp_attachment_is_image() ) :	$attachments = array_values( get_children( array( 'post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID' ) ) );	foreach ( $attachments as $k => $attachment ) {		if ( $attachment->ID == $post->ID )			break;	}	$k++;	// If there is more than 1 image attachment in a gallery	if ( count( $attachments ) > 1 ) {		if ( isset( $attachments[ $k ] ) )			// get the URL of the next image attachment			$next_attachment_url = get_attachment_link( $attachments[ $k ]->ID );		else			// or get the URL of the first image attachment			$next_attachment_url = get_attachment_link( $attachments[ 0 ]->ID );	} else {		// or, if there's only 1 image attachment, get the URL of the image		$next_attachment_url = wp_get_attachment_url();	}?>						<p class="attachment"><a href="<?php echo $next_attachment_url; ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php							$attachment_size = apply_filters( 'twentyten_attachment_size', 900 );							echo wp_get_attachment_image( $post->ID, array( $attachment_size, 9999 ) ); // filterable image width with, essentially, no limit for image height.						?></a></p>						<div id="nav-below" class="navigation">							<div class="nav-previous"><?php previous_image_link( false ); ?></div>							<div class="nav-next"><?php next_image_link( false ); ?></div>						</div><!-- #nav-below --><?php else : ?>						<a href="<?php echo wp_get_attachment_url(); ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php echo basename( get_permalink() ); ?></a><?php endif; ?>						</div><!-- .entry-attachment -->						<div class="entry-caption"><?php if ( !empty( $post->post_excerpt ) ) the_excerpt(); ?></div><?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?><?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content -->					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), ' <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## --><?php comments_template(); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><title><?php wp_title('&laquo;', true, 'right'); ?> <?php bloginfo('name'); ?></title><link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" type="text/css" media="screen" /><link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" /><style type="text/css" media="screen"><?php// Checks to see whether it needs a sidebarif ( empty($withcomments) && !is_single() ) {?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbg-<?php bloginfo('text_direction'); ?>.jpg") repeat-y top; border: none; }<?php } else { // No sidebar ?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbgwide.jpg") repeat-y top; border: none; }<?php } ?></style><?php if ( is_singular() ) wp_enqueue_script( 'comment-reply' ); ?><?php wp_head(); ?></head><body <?php body_class(); ?>><div id="page"><div id="header" role="banner">	<div id="headerimg">		<h1><a href="<?php echo home_url(); ?>/"><?php bloginfo('name'); ?></a></h1>		<div class="description"><?php bloginfo('description'); ?></div>	</div></div><hr />
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * WordPress Upgrade Functions. Old file, must not be used. Include * wp-admin/includes/upgrade.php instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/upgrade.php' );require_once(ABSPATH . 'wp-admin/includes/upgrade.php');?>
<?php/** * Simple and uniform HTTP request API. * * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * WordPress HTTP Class for managing HTTP Transports and making HTTP requests. * * This class is called for the functionality of making HTTP requests and replaces Snoopy * functionality. There is no available functionality to add HTTP transport implementations, since * most of the HTTP transports are added and available for use. * * There are no properties, because none are needed and for performance reasons. Some of the * functions are static and while they do have some overhead over functions in PHP4, the purpose is * maintainability. When PHP5 is finally the requirement, it will be easy to add the static keyword * to the code. It is not as easy to convert a function to a method after enough code uses the old * way. * * Debugging includes several actions, which pass different variables for debugging the HTTP API. * * <strong>http_transport_get_debug</strong> - gives working, nonblocking, and blocking transports. * * <strong>http_transport_post_debug</strong> - gives working, nonblocking, and blocking transports. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http {	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor	 *	 * @since 2.7.0	 * @return WP_Http	 */	function WP_Http() {		$this->__construct();	}	/**	 * PHP5 style Constructor - Set up available transport if not available.	 *	 * PHP4 does not have the 'self' keyword and since WordPress supports PHP4, the class needs to	 * be used for the static call. The transport are set up to save time and will only be created	 * once. This class can be created many times without having to go through the step of finding	 * which transports are available.	 *	 * @since 2.7.0	 * @return WP_Http	 */	function __construct() {		WP_Http::_getTransport();		WP_Http::_postTransport();	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches that object to be	 * used later.	 *	 * The order for the GET/HEAD requests are HTTP Extension, cURL, Streams, Fopen, and finally	 * Fsockopen. fsockopen() is used last, because it has the most overhead in its implementation.	 * There isn't any real way around it, since redirects have to be supported, much the same way	 * the other transports also handle redirects.	 *	 * There are currently issues with "localhost" not resolving correctly with DNS. This may cause	 * an error "failed to open stream: A connection attempt failed because the connected party did	 * not properly respond after a period of time, or established connection failed because [the]	 * connected host has failed to respond."	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_getTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fopen::test($args) ) {				$working_transport['fopen'] = new WP_Http_Fopen();				$blocking_transport[] = &$working_transport['fopen'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fopen', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_get_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches	 * that object to be used later. This is for posting content to a URL and	 * is used when there is a body. The plain Fopen Transport can not be used	 * to send content, but the streams transport can. This is a limitation that	 * is addressed here, by just not including that transport.	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_postTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_post_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Send a HTTP request to a URI.	 *	 * The body and headers are part of the arguments. The 'body' argument is for the body and will	 * accept either a string or an array. The 'headers' argument should be an array, but a string	 * is acceptable. If the 'body' argument is an array, then it will automatically be escaped	 * using http_build_query().	 *	 * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS	 * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send	 * headers. Other protocols are unsupported and most likely will fail.	 *	 * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and	 * 'user-agent'.	 *	 * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow	 * others, but should not be assumed. The 'timeout' is used to sent how long the connection	 * should stay open before failing when no response. 'redirection' is used to track how many	 * redirects were taken and used to sent the amount for other transports, but not all transports	 * accept setting that value.	 *	 * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and	 * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The	 * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is	 * 'WordPress/WP_Version', where WP_Version is the value from $wp_version.	 *	 * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP	 * while it performs the request or continue regardless. Actually, that isn't entirely correct.	 * Blocking mode really just means whether the fread should just pull what it can whenever it	 * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading	 * the entire content. It doesn't actually always mean that PHP will continue going after making	 * the request.	 *	 * @access public	 * @since 2.7.0	 * @todo Refactor this code. The code in this method extends the scope of its original purpose	 *		and should be refactored to allow for cleaner abstraction and reduce duplication of the	 *		code. One suggestion is to create a class specifically for the arguments, however	 *		preliminary refactoring to this affect has affect more than just the scope of the	 *		arguments. Something to ponder at least.	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array containing 'headers', 'body', 'response', 'cookies'	 */	function request( $url, $args = array() ) {		global $wp_version;		$defaults = array(			'method' => 'GET',			'timeout' => apply_filters( 'http_request_timeout', 5),			'redirection' => apply_filters( 'http_request_redirection_count', 5),			'httpversion' => apply_filters( 'http_request_version', '1.0'),			'user-agent' => apply_filters( 'http_headers_useragent', 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )  ),			'blocking' => true,			'headers' => array(),			'cookies' => array(),			'body' => null,			'compress' => false,			'decompress' => true,			'sslverify' => true		);		$r = wp_parse_args( $args, $defaults );		$r = apply_filters( 'http_request_args', $r, $url );		// Allow plugins to short-circuit the request		$pre = apply_filters( 'pre_http_request', false, $r, $url );		if ( false !== $pre )			return $pre;		$arrURL = parse_url($url);		if ( empty( $url ) || empty($url['scheme'] ) )			return new WP_Error('http_request_failed', __('A valid URL was not provided.'));		if ( $this->block_request( $url ) )			return new WP_Error('http_request_failed', __('User has blocked requests through HTTP.'));		// Determine if this is a https call and pass that on to the transport functions		// so that we can blacklist the transports that do not support ssl verification		$r['ssl'] = $arrURL['scheme'] == 'https' || $arrURL['scheme'] == 'ssl';		// Determine if this request is to OUR install of WordPress		$homeURL = parse_url( get_bloginfo('url') );		$r['local'] = $homeURL['host'] == $arrURL['host'] || 'localhost' == $arrURL['host'];		unset($homeURL);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( ! is_array($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		}		if ( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		if ( WP_Http_Encoding::is_available() )			$r['headers']['Accept-Encoding'] = WP_Http_Encoding::accept_encoding();		if ( empty($r['body']) ) {			// Some servers fail when sending content without the content-length header being set.			// Also, to fix another bug, we only send when doing POST and PUT and the content-length			// header isn't already set.			if( ($r['method'] == 'POST' || $r['method'] == 'PUT') && ! isset($r['headers']['Content-Length']) )				$r['headers']['Content-Length'] = 0;			// The method is ambiguous, because we aren't talking about HTTP methods, the "get" in			// this case is simply that we aren't sending any bodies and to get the transports that			// don't support sending bodies along with those which do.			$transports = WP_Http::_getTransport($r);		} else {			if ( is_array( $r['body'] ) || is_object( $r['body'] ) ) {				if ( ! version_compare(phpversion(), '5.1.2', '>=') )					$r['body'] = _http_build_query($r['body'], null, '&');				else					$r['body'] = http_build_query($r['body'], null, '&');				$r['headers']['Content-Type'] = 'application/x-www-form-urlencoded; charset=' . get_option('blog_charset');				$r['headers']['Content-Length'] = strlen($r['body']);			}			if ( ! isset( $r['headers']['Content-Length'] ) && ! isset( $r['headers']['content-length'] ) )				$r['headers']['Content-Length'] = strlen($r['body']);			// The method is ambiguous, because we aren't talking about HTTP methods, the "post" in			// this case is simply that we are sending HTTP body and to get the transports that do			// support sending the body. Not all do, depending on the limitations of the PHP core			// limitations.			$transports = WP_Http::_postTransport($r);		}		do_action( 'http_api_debug', $transports, 'transports_list' );		$response = array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		foreach ( (array) $transports as $transport ) {			$response = $transport->request($url, $r);			do_action( 'http_api_debug', $response, 'response', get_class($transport) );			if ( ! is_wp_error($response) )				return apply_filters( 'http_response', $response, $r, $url );		}		return $response;	}	/**	 * Uses the POST HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function post($url, $args = array()) {		$defaults = array('method' => 'POST');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the GET HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function get($url, $args = array()) {		$defaults = array('method' => 'GET');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the HEAD HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function head($url, $args = array()) {		$defaults = array('method' => 'HEAD');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Parses the responses and splits the parts into headers and body.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string $strResponse The full response string	 * @return array Array with 'headers' and 'body' keys.	 */	function processResponse($strResponse) {		$res = explode("\r\n\r\n", $strResponse, 2);		return array('headers' => isset($res[0]) ? $res[0] : array(), 'body' => isset($res[1]) ? $res[1] : '');	}	/**	 * Transform header string into an array.	 *	 * If an array is given then it is assumed to be raw header data with numeric keys with the	 * headers as the values. No headers must be passed that were already processed.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string|array $headers	 * @return array Processed string headers. If duplicate headers are encountered,	 * 					Then a numbered array is returned as the value of that header-key.	 */	function processHeaders($headers) {		// split headers, one per array element		if ( is_string($headers) ) {			// tolerate line terminator: CRLF = LF (RFC 2616 19.3)			$headers = str_replace("\r\n", "\n", $headers);			// unfold folded header fields. LWS = [CRLF] 1*( SP | HT ) <US-ASCII SP, space (32)>, <US-ASCII HT, horizontal-tab (9)> (RFC 2616 2.2)			$headers = preg_replace('/\n[ \t]/', ' ', $headers);			// create the headers array			$headers = explode("\n", $headers);		}		$response = array('code' => 0, 'message' => '');		// If a redirection has taken place, The headers for each page request may have been passed.		// In this case, determine the final HTTP header and parse from there.		for ( $i = count($headers)-1; $i >= 0; $i-- ) {			if ( !empty($headers[$i]) && false === strpos($headers[$i], ':') ) {				$headers = array_splice($headers, $i);				break;			}		}		$cookies = array();		$newheaders = array();		foreach ( $headers as $tempheader ) {			if ( empty($tempheader) )				continue;			if ( false === strpos($tempheader, ':') ) {				list( , $response['code'], $response['message']) = explode(' ', $tempheader, 3);				continue;			}			list($key, $value) = explode(':', $tempheader, 2);			if ( !empty( $value ) ) {				$key = strtolower( $key );				if ( isset( $newheaders[$key] ) ) {					if ( !is_array($newheaders[$key]) )						$newheaders[$key] = array($newheaders[$key]);					$newheaders[$key][] = trim( $value );				} else {					$newheaders[$key] = trim( $value );				}				if ( 'set-cookie' == strtolower( $key ) )					$cookies[] = new WP_Http_Cookie( $value );			}		}		return array('response' => $response, 'headers' => $newheaders, 'cookies' => $cookies);	}	/**	 * Takes the arguments for a ::request() and checks for the cookie array.	 *	 * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed	 * into strings and added to the Cookie: header (within the arguments array). Edits the array by	 * reference.	 *	 * @access public	 * @version 2.8.0	 * @static	 *	 * @param array $r Full array of args passed into ::request()	 */	function buildCookieHeader( &$r ) {		if ( ! empty($r['cookies']) ) {			$cookies_header = '';			foreach ( (array) $r['cookies'] as $cookie ) {				$cookies_header .= $cookie->getHeaderValue() . '; ';			}			$cookies_header = substr( $cookies_header, 0, -2 );			$r['headers']['cookie'] = $cookies_header;		}	}	/**	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.	 *	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support	 * returning footer headers. Shouldn't be too difficult to support it though.	 *	 * @todo Add support for footer chunked headers.	 * @access public	 * @since 2.7.0	 * @static	 *	 * @param string $body Body content	 * @return string Chunked decoded body on success or raw body on failure.	 */	function chunkTransferDecode($body) {		$body = str_replace(array("\r\n", "\r"), "\n", $body);		// The body is not chunked encoding or is malformed.		if ( ! preg_match( '/^[0-9a-f]+(\s|\n)+/mi', trim($body) ) )			return $body;		$parsedBody = '';		//$parsedHeaders = array(); Unsupported		while ( true ) {			$hasChunk = (bool) preg_match( '/^([0-9a-f]+)(\s|\n)+/mi', $body, $match );			if ( $hasChunk ) {				if ( empty( $match[1] ) )					return $body;				$length = hexdec( $match[1] );				$chunkLength = strlen( $match[0] );				$strBody = substr($body, $chunkLength, $length);				$parsedBody .= $strBody;				$body = ltrim(str_replace(array($match[0], $strBody), '', $body), "\n");				if ( "0" == trim($body) )					return $parsedBody; // Ignore footer headers.			} else {				return $body;			}		}	}	/**	 * Block requests through the proxy.	 *	 * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will	 * prevent plugins from working and core functionality, if you don't include api.wordpress.org.	 *	 * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php	 * file and this will only allow localhost and your blog to make requests. The constant	 * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the	 * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow.	 *	 * @since 2.8.0	 * @link http://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.	 *	 * @param string $uri URI of url.	 * @return bool True to block, false to allow.	 */	function block_request($uri) {		// We don't need to block requests, because nothing is blocked.		if ( ! defined( 'WP_HTTP_BLOCK_EXTERNAL' ) || ! WP_HTTP_BLOCK_EXTERNAL )			return false;		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		/* Malformed URL, can not process, but this could mean ssl, so let through anyway.		 *		 * This isn't very security sound. There are instances where a hacker might attempt		 * to bypass the proxy and this check. However, the reason for this behavior is that		 * WordPress does not do any checking currently for non-proxy requests, so it is keeps with		 * the default unsecure nature of the HTTP request.		 */		if ( $check === false )			return false;		$home = parse_url( get_option('siteurl') );		// Don't block requests back to ourselves by default		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return apply_filters('block_local_requests', false);		if ( !defined('WP_ACCESSIBLE_HOSTS') )			return true;		static $accessible_hosts;		if ( null == $accessible_hosts )			$accessible_hosts = preg_split('|,\s*|', WP_ACCESSIBLE_HOSTS);		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.	}}/** * HTTP request method uses fsockopen function to retrieve the url. * * This would be the preferred method, but the fsockopen implementation has the most overhead of all * the HTTP transport implementations. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fsockopen {	/**	 * Send a HTTP request to a URI using fsockopen().	 *	 * Does not support non-blocking mode.	 *	 * @see WP_Http::request For default options descriptions.	 *	 * @since 2.7	 * @access public	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$iError = null; // Store error number		$strError = null; // Store error string		$arrURL = parse_url($url);		$fsockopen_host = $arrURL['host'];		$secure_transport = false;		if ( ! isset( $arrURL['port'] ) ) {			if ( ( $arrURL['scheme'] == 'ssl' || $arrURL['scheme'] == 'https' ) && extension_loaded('openssl') ) {				$fsockopen_host = "ssl://$fsockopen_host";				$arrURL['port'] = 443;				$secure_transport = true;			} else {				$arrURL['port'] = 80;			}		}		//fsockopen has issues with 'localhost' with IPv6 with certain versions of PHP, It attempts to connect to ::1,		// which fails when the server is not set up for it. For compatibility, always connect to the IPv4 address.		if ( 'localhost' == strtolower($fsockopen_host) )			$fsockopen_host = '127.0.0.1';		// There are issues with the HTTPS and SSL protocols that cause errors that can be safely		// ignored and should be ignored.		if ( true === $secure_transport )			$error_reporting = error_reporting(0);		$startDelay = time();		$proxy = new WP_HTTP_Proxy();		if ( !WP_DEBUG ) {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = @fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = @fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		} else {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		}		$endDelay = time();		// If the delay is greater than the timeout then fsockopen should't be used, because it will		// cause a long delay.		$elapseDelay = ($endDelay-$startDelay) > $r['timeout'];		if ( true === $elapseDelay )			add_option( 'disable_fsockopen', $endDelay, null, true );		if ( false === $handle )			return new WP_Error('http_request_failed', $iError . ': ' . $strError);		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) //Some proxies require full URL in this field.			$requestPath = $url;		else			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );		if ( empty($requestPath) )			$requestPath .= '/';		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";		else			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";		if ( isset($r['user-agent']) )			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";		if ( is_array($r['headers']) ) {			foreach ( (array) $r['headers'] as $header => $headerValue )				$strHeaders .= $header . ': ' . $headerValue . "\r\n";		} else {			$strHeaders .= $r['headers'];		}		if ( $proxy->use_authentication() )			$strHeaders .= $proxy->authentication_header() . "\r\n";		$strHeaders .= "\r\n";		if ( ! is_null($r['body']) )			$strHeaders .= $r['body'];		fwrite($handle, $strHeaders);		if ( ! $r['blocking'] ) {			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		fclose($handle);		if ( true === $secure_transport )			error_reporting($error_reporting);		$process = WP_Http::processResponse($strResponse);		$arrHeaders = WP_Http::processHeaders($process['headers']);		// Is the response code within the 400 range?		if ( (int) $arrHeaders['response']['code'] >= 400 && (int) $arrHeaders['response']['code'] < 500 )			return new WP_Error('http_request_failed', $arrHeaders['response']['code'] . ': ' . $arrHeaders['response']['message']);		// If location is found, then assume redirect and redirect to location.		if ( 'HEAD' != $r['method'] && isset($arrHeaders['headers']['location']) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($arrHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		// If the body was chunk encoded, then decode it.		if ( ! empty( $process['body'] ) && isset( $arrHeaders['headers']['transfer-encoding'] ) && 'chunked' == $arrHeaders['headers']['transfer-encoding'] )			$process['body'] = WP_Http::chunkTransferDecode($process['body']);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($arrHeaders['headers']) )			$process['body'] = WP_Http_Encoding::decompress( $process['body'] );		return array('headers' => $arrHeaders['headers'], 'body' => $process['body'], 'response' => $arrHeaders['response'], 'cookies' => $arrHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test( $args = array() ) {		if ( false !== ($option = get_option( 'disable_fsockopen' )) && time()-$option < 43200 ) // 12 hours			return false;		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( ! $is_ssl && function_exists( 'fsockopen' ) )			$use = true;		elseif ( $is_ssl && extension_loaded('openssl') && function_exists( 'fsockopen' ) )			$use = true;		else			$use = false;		return apply_filters('use_fsockopen_transport', $use, $args);	}}/** * HTTP request method uses fopen function to retrieve the url. * * Requires PHP version greater than 4.3.0 for stream support. Does not allow for $context support, * but should still be okay, to write the headers, before getting the response. Also requires that * 'allow_url_fopen' to be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fopen {	/**	 * Send a HTTP request to a URI using fopen().	 *	 * This transport does not support sending of headers and body, therefore should not be used in	 * the instances, where there is a body and headers.	 *	 * Notes: Does not support non-blocking mode. Ignores 'redirection' option.	 *	 * @see WP_Http::retrieve For default options descriptions.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = str_replace($arrURL['scheme'], 'http', $url);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( is_string($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		$initial_user_agent = ini_get('user_agent');		if ( !empty($r['headers']) && is_array($r['headers']) ) {			$user_agent_extra_headers = '';			foreach ( $r['headers'] as $header => $value )				$user_agent_extra_headers .= "\r\n$header: $value";			@ini_set('user_agent', $r['user-agent'] . $user_agent_extra_headers);		} else {			@ini_set('user_agent', $r['user-agent']);		}		if ( !WP_DEBUG )			$handle = @fopen($url, 'r');		else			$handle = fopen($url, 'r');		if (! $handle)			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			fclose($handle);			@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		if ( function_exists('stream_get_meta_data') ) {			$meta = stream_get_meta_data($handle);			$theHeaders = $meta['wrapper_data'];			if ( isset( $meta['wrapper_data']['headers'] ) )				$theHeaders = $meta['wrapper_data']['headers'];		} else {			//$http_response_header is a PHP reserved variable which is set in the current-scope when using the HTTP Wrapper			//see http://php.oregonstate.edu/manual/en/reserved.variables.httpresponseheader.php			$theHeaders = $http_response_header;		}		fclose($handle);		@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added		$processedHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( isset($args['method']) && 'HEAD' == $args['method'] ) //This transport cannot make a HEAD request			return false;		$use = true;		//PHP does not verify SSL certs, We can only make a request via this transports if SSL Verification is turned off.		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl ) {			$is_local = isset($args['local']) && $args['local'];			$ssl_verify = isset($args['sslverify']) && $args['sslverify'];			if ( $is_local && true != apply_filters('https_local_ssl_verify', true) )				$use = true;			elseif ( !$is_local && true != apply_filters('https_ssl_verify', true) )				$use = true;			elseif ( !$ssl_verify )				$use = true;			else				$use = false;		}		return apply_filters('use_fopen_transport', $use, $args);	}}/** * HTTP request method uses Streams to retrieve the url. * * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting * to be enabled. * * Second preferred method for getting the URL, for PHP 5. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Streams {	/**	 * Send a HTTP request to a URI using streams with fopen().	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		// Convert Header array to string.		$strHeaders = '';		if ( is_array( $r['headers'] ) )			foreach ( $r['headers'] as $name => $value )				$strHeaders .= "{$name}: $value\r\n";		else if ( is_string( $r['headers'] ) )			$strHeaders = $r['headers'];		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$arrContext = array('http' =>			array(				'method' => strtoupper($r['method']),				'user_agent' => $r['user-agent'],				'max_redirects' => $r['redirection'] + 1, // See #11557				'protocol_version' => (float) $r['httpversion'],				'header' => $strHeaders,				'ignore_errors' => true, // Return non-200 requests.				'timeout' => $r['timeout'],				'ssl' => array(						'verify_peer' => $ssl_verify,						'verify_host' => $ssl_verify				)			)		);		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$arrContext['http']['proxy'] = 'tcp://' . $proxy->host() . ':' . $proxy->port();			$arrContext['http']['request_fulluri'] = true;			// We only support Basic authentication so this will only work if that is what your proxy supports.			if ( $proxy->use_authentication() )				$arrContext['http']['header'] .= $proxy->authentication_header() . "\r\n";		}		if ( 'HEAD' == $r['method'] ) // Disable redirects for HEAD requests			$arrContext['http']['max_redirects'] = 1;		if ( ! empty($r['body'] ) )			$arrContext['http']['content'] = $r['body'];		$context = stream_context_create($arrContext);		if ( !WP_DEBUG )			$handle = @fopen($url, 'r', false, $context);		else			$handle = fopen($url, 'r', false, $context);		if ( ! $handle )			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			stream_set_blocking($handle, 0);			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = stream_get_contents($handle);		$meta = stream_get_meta_data($handle);		fclose($handle);		$processedHeaders = array();		if ( isset( $meta['wrapper_data']['headers'] ) )			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']['headers']);		else			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @access public	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( version_compare(PHP_VERSION, '5.0', '<') )			return false;		//HTTPS via Proxy was added in 5.1.0		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl && version_compare(PHP_VERSION, '5.1.0', '<') ) {			$proxy = new WP_HTTP_Proxy();			/**			 * No URL check, as its not currently passed to the ::test() function			 * In the case where a Proxy is in use, Just bypass this transport for HTTPS.			 */			if ( $proxy->is_enabled() )				return false;		}		return apply_filters('use_streams_transport', true, $args);	}}/** * HTTP request method uses HTTP extension to retrieve the url. * * Requires the HTTP extension to be installed. This would be the preferred transport since it can * handle a lot of the problems that forces the others to use the HTTP version 1.0. Even if PHP 5.2+ * is being used, it doesn't mean that the HTTP extension will be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_ExtHTTP {	/**	 * Send a HTTP request to a URI using HTTP extension.	 *	 * Does not support non-blocking.	 *	 * @access public	 * @since 2.7	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		switch ( $r['method'] ) {			case 'POST':				$r['method'] = HTTP_METH_POST;				break;			case 'HEAD':				$r['method'] = HTTP_METH_HEAD;				break;			case 'PUT':				$r['method'] =  HTTP_METH_PUT;				break;			case 'GET':			default:				$r['method'] = HTTP_METH_GET;		}		$arrURL = parse_url($url);		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$r['timeout'] = (int) ceil( $r['timeout'] );		$options = array(			'timeout' => $r['timeout'],			'connecttimeout' => $r['timeout'],			'redirect' => $r['redirection'],			'useragent' => $r['user-agent'],			'headers' => $r['headers'],			'ssl' => array(				'verifypeer' => $ssl_verify,				'verifyhost' => $ssl_verify			)		);		if ( HTTP_METH_HEAD == $r['method'] )			$options['redirect'] = 0; // Assumption: Docs seem to suggest that this means do not follow. Untested.		// The HTTP extensions offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$options['proxyhost'] = $proxy->host();			$options['proxyport'] = $proxy->port();			$options['proxytype'] = HTTP_PROXY_HTTP;			if ( $proxy->use_authentication() ) {				$options['proxyauth'] = $proxy->authentication();				$options['proxyauthtype'] = HTTP_AUTH_ANY;			}		}		if ( !WP_DEBUG ) //Emits warning level notices for max redirects and timeouts			$strResponse = @http_request($r['method'], $url, $r['body'], $options, $info);		else			$strResponse = http_request($r['method'], $url, $r['body'], $options, $info); //Emits warning level notices for max redirects and timeouts		// Error may still be set, Response may return headers or partial document, and error		// contains a reason the request was aborted, eg, timeout expired or max-redirects reached.		if ( false === $strResponse || ! empty($info['error']) )			return new WP_Error('http_request_failed', $info['response_code'] . ': ' . $info['error']);		if ( ! $r['blocking'] )			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		$headers_body = WP_HTTP::processResponse($strResponse);		$theHeaders = $headers_body['headers'];		$theBody = $headers_body['body'];		unset($headers_body);		$theHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $theBody ) && isset( $theHeaders['headers']['transfer-encoding'] ) && 'chunked' == $theHeaders['headers']['transfer-encoding'] ) {			if ( !WP_DEBUG )				$theBody = @http_chunked_decode($theBody);			else				$theBody = http_chunked_decode($theBody);		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = http_inflate( $theBody );		$theResponse = array();		$theResponse['code'] = $info['response_code'];		$theResponse['message'] = get_status_header_desc($info['response_code']);		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $theResponse, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		return apply_filters('use_http_extension_transport', function_exists('http_request'), $args );	}}/** * HTTP request method uses Curl extension to retrieve the url. * * Requires the Curl extension to be installed. * * @package WordPress * @subpackage HTTP * @since 2.7 */class WP_Http_Curl {	/**	 * Send a HTTP request to a URI using cURL extension.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set.		WP_Http::buildCookieHeader( $r );		$handle = curl_init();		// cURL offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$isPHP5 = version_compare(PHP_VERSION, '5.0.0', '>=');			if ( $isPHP5 ) {				curl_setopt( $handle, CURLOPT_PROXYTYPE, CURLPROXY_HTTP );				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() );				curl_setopt( $handle, CURLOPT_PROXYPORT, $proxy->port() );			} else {				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() .':'. $proxy->port() );			}			if ( $proxy->use_authentication() ) {				if ( $isPHP5 )					curl_setopt( $handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );				curl_setopt( $handle, CURLOPT_PROXYUSERPWD, $proxy->authentication() );			}		}		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		// CURLOPT_TIMEOUT and CURLOPT_CONNECTTIMEOUT expect integers.  Have to use ceil since		// a value of 0 will allow an ulimited timeout.		$timeout = (int) ceil( $r['timeout'] );		curl_setopt( $handle, CURLOPT_CONNECTTIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_TIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_URL, $url);		curl_setopt( $handle, CURLOPT_RETURNTRANSFER, true );		curl_setopt( $handle, CURLOPT_SSL_VERIFYHOST, $ssl_verify );		curl_setopt( $handle, CURLOPT_SSL_VERIFYPEER, $ssl_verify );		curl_setopt( $handle, CURLOPT_USERAGENT, $r['user-agent'] );		curl_setopt( $handle, CURLOPT_MAXREDIRS, $r['redirection'] );		switch ( $r['method'] ) {			case 'HEAD':				curl_setopt( $handle, CURLOPT_NOBODY, true );				break;			case 'POST':				curl_setopt( $handle, CURLOPT_POST, true );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;			case 'PUT':				curl_setopt( $handle, CURLOPT_CUSTOMREQUEST, 'PUT' );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;		}		if ( true === $r['blocking'] )			curl_setopt( $handle, CURLOPT_HEADER, true );		else			curl_setopt( $handle, CURLOPT_HEADER, false );		// The option doesn't work with safe mode or when open_basedir is set.		// Disable HEAD when making HEAD requests.		if ( !ini_get('safe_mode') && !ini_get('open_basedir') && 'HEAD' != $r['method'] )			curl_setopt( $handle, CURLOPT_FOLLOWLOCATION, true );		if ( !empty( $r['headers'] ) ) {			// cURL expects full header strings in each element			$headers = array();			foreach ( $r['headers'] as $name => $value ) {				$headers[] = "{$name}: $value";			}			curl_setopt( $handle, CURLOPT_HTTPHEADER, $headers );		}		if ( $r['httpversion'] == '1.0' )			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0 );		else			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1 );		// Cookies are not handled by the HTTP API currently. Allow for plugin authors to handle it		// themselves... Although, it is somewhat pointless without some reference.		do_action_ref_array( 'http_api_curl', array(&$handle) );		// We don't need to return the body, so don't. Just execute request and return.		if ( ! $r['blocking'] ) {			curl_exec( $handle );			curl_close( $handle );			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$theResponse = curl_exec( $handle );		if ( !empty($theResponse) ) {			$headerLength = curl_getinfo($handle, CURLINFO_HEADER_SIZE);			$theHeaders = trim( substr($theResponse, 0, $headerLength) );			if ( strlen($theResponse) > $headerLength )				$theBody = substr( $theResponse, $headerLength );			else				$theBody = '';			if ( false !== strrpos($theHeaders, "\r\n\r\n") ) {				$headerParts = explode("\r\n\r\n", $theHeaders);				$theHeaders = $headerParts[ count($headerParts) -1 ];			}			$theHeaders = WP_Http::processHeaders($theHeaders);		} else {			if ( $curl_error = curl_error($handle) )				return new WP_Error('http_request_failed', $curl_error);			if ( in_array( curl_getinfo( $handle, CURLINFO_HTTP_CODE ), array(301, 302) ) )				return new WP_Error('http_request_failed', __('Too many redirects.'));			$theHeaders = array( 'headers' => array(), 'cookies' => array() );			$theBody = '';		}		$response = array();		$response['code'] = curl_getinfo( $handle, CURLINFO_HTTP_CODE );		$response['message'] = get_status_header_desc($response['code']);		curl_close( $handle );		// See #11305 - When running under safe mode, redirection is disabled above. Handle it manually.		if ( !empty($theHeaders['headers']['location']) && (ini_get('safe_mode') || ini_get('open_basedir')) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($theHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = WP_Http_Encoding::decompress( $theBody );		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $response, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( function_exists('curl_init') && function_exists('curl_exec') )			return apply_filters('use_curl_transport', true, $args);		return false;	}}/** * Adds Proxy support to the WordPress HTTP API. * * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to * enable proxy support. There are also a few filters that plugins can hook into for some of the * constants. * * Please note that only BASIC authentication is supported by most transports. * cURL and the PHP HTTP Extension MAY support more methods (such as NTLM authentication) depending on your environment. * * The constants are as follows: * <ol> * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li> * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li> * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li> * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li> * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy. * You do not need to have localhost and the blog host in this list, because they will not be passed * through the proxy. The list should be presented in a comma separated list</li> * </ol> * * An example can be as seen below. * <code> * define('WP_PROXY_HOST', '192.168.84.101'); * define('WP_PROXY_PORT', '8080'); * define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com'); * </code> * * @link http://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress. * @since 2.8 */class WP_HTTP_Proxy {	/**	 * Whether proxy connection should be used.	 *	 * @since 2.8	 * @use WP_PROXY_HOST	 * @use WP_PROXY_PORT	 *	 * @return bool	 */	function is_enabled() {		return defined('WP_PROXY_HOST') && defined('WP_PROXY_PORT');	}	/**	 * Whether authentication should be used.	 *	 * @since 2.8	 * @use WP_PROXY_USERNAME	 * @use WP_PROXY_PASSWORD	 *	 * @return bool	 */	function use_authentication() {		return defined('WP_PROXY_USERNAME') && defined('WP_PROXY_PASSWORD');	}	/**	 * Retrieve the host for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function host() {		if ( defined('WP_PROXY_HOST') )			return WP_PROXY_HOST;		return '';	}	/**	 * Retrieve the port for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function port() {		if ( defined('WP_PROXY_PORT') )			return WP_PROXY_PORT;		return '';	}	/**	 * Retrieve the username for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function username() {		if ( defined('WP_PROXY_USERNAME') )			return WP_PROXY_USERNAME;		return '';	}	/**	 * Retrieve the password for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function password() {		if ( defined('WP_PROXY_PASSWORD') )			return WP_PROXY_PASSWORD;		return '';	}	/**	 * Retrieve authentication string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication() {		return $this->username() . ':' . $this->password();	}	/**	 * Retrieve header string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication_header() {		return 'Proxy-Authorization: Basic ' . base64_encode( $this->authentication() );	}	/**	 * Whether URL should be sent through the proxy server.	 *	 * We want to keep localhost and the blog URL from being sent through the proxy server, because	 * some proxies can not handle this. We also have the constant available for defining other	 * hosts that won't be sent through the proxy.	 *	 * @uses WP_PROXY_BYPASS_HOSTS	 * @since unknown	 *	 * @param string $uri URI to check.	 * @return bool True, to send through the proxy and false if, the proxy should not be used.	 */	function send_through_proxy( $uri ) {		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		// Malformed URL, can not process, but this could mean ssl, so let through anyway.		if ( $check === false )			return true;		$home = parse_url( get_option('siteurl') );		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return false;		if ( !defined('WP_PROXY_BYPASS_HOSTS') )			return true;		static $bypass_hosts;		if ( null == $bypass_hosts )			$bypass_hosts = preg_split('|,\s*|', WP_PROXY_BYPASS_HOSTS);		return !in_array( $check['host'], $bypass_hosts );	}}/** * Internal representation of a single cookie. * * Returned cookies are represented using this class, and when cookies are set, if they are not * already a WP_Http_Cookie() object, then they are turned into one. * * @todo The WordPress convention is to use underscores instead of camelCase for function and method * names. Need to switch to use underscores instead for the methods. * * @package WordPress * @subpackage HTTP * @since 2.8.0 */class WP_Http_Cookie {	/**	 * Cookie name.	 *	 * @since 2.8.0	 * @var string	 */	var $name;	/**	 * Cookie value.	 *	 * @since 2.8.0	 * @var string	 */	var $value;	/**	 * When the cookie expires.	 *	 * @since 2.8.0	 * @var string	 */	var $expires;	/**	 * Cookie URL path.	 *	 * @since 2.8.0	 * @var string	 */	var $path;	/**	 * Cookie Domain.	 *	 * @since 2.8.0	 * @var string	 */	var $domain;	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor.	 *	 * @access public	 * @since 2.8.0	 * @param string|array $data Raw cookie data.	 */	function WP_Http_Cookie( $data ) {		$this->__construct( $data );	}	/**	 * Sets up this cookie object.	 *	 * The parameter $data should be either an associative array containing the indices names below	 * or a header string detailing it.	 *	 * If it's an array, it should include the following elements:	 * <ol>	 * <li>Name</li>	 * <li>Value - should NOT be urlencoded already.</li>	 * <li>Expires - (optional) String or int (UNIX timestamp).</li>	 * <li>Path (optional)</li>	 * <li>Domain (optional)</li>	 * </ol>	 *	 * @access public	 * @since 2.8.0	 *	 * @param string|array $data Raw cookie data.	 */	function __construct( $data ) {		if ( is_string( $data ) ) {			// Assume it's a header string direct from a previous request			$pairs = explode( ';', $data );			// Special handling for first pair; name=value. Also be careful of "=" in value			$name  = trim( substr( $pairs[0], 0, strpos( $pairs[0], '=' ) ) );			$value = substr( $pairs[0], strpos( $pairs[0], '=' ) + 1 );			$this->name  = $name;			$this->value = urldecode( $value );			array_shift( $pairs ); //Removes name=value from items.			// Set everything else as a property			foreach ( $pairs as $pair ) {				$pair = rtrim($pair);				if ( empty($pair) ) //Handles the cookie ending in ; which results in a empty final pair					continue;				list( $key, $val ) = strpos( $pair, '=' ) ? explode( '=', $pair ) : array( $pair, '' );				$key = strtolower( trim( $key ) );				if ( 'expires' == $key )					$val = strtotime( $val );				$this->$key = $val;			}		} else {			if ( !isset( $data['name'] ) )				return false;			// Set properties based directly on parameters			$this->name   = $data['name'];			$this->value  = isset( $data['value'] ) ? $data['value'] : '';			$this->path   = isset( $data['path'] ) ? $data['path'] : '';			$this->domain = isset( $data['domain'] ) ? $data['domain'] : '';			if ( isset( $data['expires'] ) )				$this->expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );			else				$this->expires = null;		}	}	/**	 * Confirms that it's OK to send this cookie to the URL checked against.	 *	 * Decision is based on RFC 2109/2965, so look there for details on validity.	 *	 * @access public	 * @since 2.8.0	 *	 * @param string $url URL you intend to send this cookie to	 * @return boolean TRUE if allowed, FALSE otherwise.	 */	function test( $url ) {		// Expires - if expired then nothing else matters		if ( time() > $this->expires )			return false;		// Get details on the URL we're thinking about sending to		$url = parse_url( $url );		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';		// Values to use for comparison against the URL		$path   = isset( $this->path )   ? $this->path   : '/';		$port   = isset( $this->port )   ? $this->port   : 80;		$domain = isset( $this->domain ) ? strtolower( $this->domain ) : strtolower( $url['host'] );		if ( false === stripos( $domain, '.' ) )			$domain .= '.local';		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;		if ( substr( $url['host'], -strlen( $domain ) ) != $domain )			return false;		// Port - supports "port-lists" in the format: "80,8000,8080"		if ( !in_array( $url['port'], explode( ',', $port) ) )			return false;		// Path - request path must start with path restriction		if ( substr( $url['path'], 0, strlen( $path ) ) != $path )			return false;		return true;	}	/**	 * Convert cookie name and value back to header string.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string Header encoded cookie name and value.	 */	function getHeaderValue() {		if ( empty( $this->name ) || empty( $this->value ) )			return '';		return $this->name . '=' . urlencode( $this->value );	}	/**	 * Retrieve cookie header for usage in the rest of the WordPress HTTP API.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string	 */	function getFullHeader() {		return 'Cookie: ' . $this->getHeaderValue();	}}/** * Implementation for deflate and gzip transfer encodings. * * Includes RFC 1950, RFC 1951, and RFC 1952. * * @since 2.8 * @package WordPress * @subpackage HTTP */class WP_Http_Encoding {	/**	 * Compress raw string using the deflate format.	 *	 * Supports the RFC 1951 standard.	 *	 * @since 2.8	 *	 * @param string $raw String to compress.	 * @param int $level Optional, default is 9. Compression level, 9 is highest.	 * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.	 * @return string|bool False on failure.	 */	function compress( $raw, $level = 9, $supports = null ) {		return gzdeflate( $raw, $level );	}	/**	 * Decompression of deflated string.	 *	 * Will attempt to decompress using the RFC 1950 standard, and if that fails	 * then the RFC 1951 standard deflate will be attempted. Finally, the RFC	 * 1952 standard gzip decode will be attempted. If all fail, then the	 * original compressed string will be returned.	 *	 * @since 2.8	 *	 * @param string $compressed String to decompress.	 * @param int $length The optional length of the compressed data.	 * @return string|bool False on failure.	 */	function decompress( $compressed, $length = null ) {		if ( empty($compressed) )			return $compressed;		if ( false !== ( $decompressed = @gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = WP_Http_Encoding::compatible_gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = @gzuncompress( $compressed ) ) )			return $decompressed;		if ( function_exists('gzdecode') ) {			$decompressed = @gzdecode( $compressed );			if ( false !== $decompressed )				return $decompressed;		}		return $compressed;	}	/**	 * Decompression of deflated string while staying compatible with the majority of servers.	 *	 * Certain Servers will return deflated data with headers which PHP's gziniflate()	 * function cannot handle out of the box. The following function lifted from	 * http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate	 * the various return forms used.	 *	 * @since 2.8.1	 * @link http://au2.php.net/manual/en/function.gzinflate.php#77336	 *	 * @param string $gzData String to decompress.	 * @return string|bool False on failure.	 */	function compatible_gzinflate($gzData) {		if ( substr($gzData, 0, 3) == "\x1f\x8b\x08" ) {			$i = 10;			$flg = ord( substr($gzData, 3, 1) );			if ( $flg > 0 ) {				if ( $flg & 4 ) {					list($xlen) = unpack('v', substr($gzData, $i, 2) );					$i = $i + 2 + $xlen;				}				if ( $flg & 8 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 16 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 2 )					$i = $i + 2;			}			return gzinflate( substr($gzData, $i, -8) );		} else {			return false;		}	}	/**	 * What encoding types to accept and their priority values.	 *	 * @since 2.8	 *	 * @return string Types of encoding to accept.	 */	function accept_encoding() {		$type = array();		if ( function_exists( 'gzinflate' ) )			$type[] = 'deflate;q=1.0';		if ( function_exists( 'gzuncompress' ) )			$type[] = 'compress;q=0.5';		if ( function_exists( 'gzdecode' ) )			$type[] = 'gzip;q=0.5';		return implode(', ', $type);	}	/**	 * What enconding the content used when it was compressed to send in the headers.	 *	 * @since 2.8	 *	 * @return string Content-Encoding string to send in the header.	 */	function content_encoding() {		return 'deflate';	}	/**	 * Whether the content be decoded based on the headers.	 *	 * @since 2.8	 *	 * @param array|string $headers All of the available headers.	 * @return bool	 */	function should_decode($headers) {		if ( is_array( $headers ) ) {			if ( array_key_exists('content-encoding', $headers) && ! empty( $headers['content-encoding'] ) )				return true;		} else if ( is_string( $headers ) ) {			return ( stripos($headers, 'content-encoding:') !== false );		}		return false;	}	/**	 * Whether decompression and compression are supported by the PHP version.	 *	 * Each function is tested instead of checking for the zlib extension, to	 * ensure that the functions all exist in the PHP version and aren't	 * disabled.	 *	 * @since 2.8	 *	 * @return bool	 */	function is_available() {		return ( function_exists('gzuncompress') || function_exists('gzdeflate') || function_exists('gzinflate') );	}}
<?php/** * Comment Management Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');$parent_file = 'edit-comments.php';$submenu_file = 'edit-comments.php';wp_reset_vars( array('action') );if ( isset( $_POST['deletecomment'] ) )	$action = 'deletecomment';if ( 'cdc' == $action )	$action = 'delete';elseif ( 'mac' == $action )	$action = 'approve';if ( isset( $_GET['dt'] ) ) {	if ( 'spam' == $_GET['dt'] )		$action = 'spam';	elseif ( 'trash' == $_GET['dt'] )		$action = 'trash';}/** * Display error message at bottom of comments. * * @param string $msg Error Message. Assumed to contain HTML and be sanitized. */function comment_footer_die( $msg ) {	echo "<div class='wrap'><p>$msg</p></div>";	include('./admin-footer.php');	die;}switch( $action ) {case 'editcomment' :	$title = __('Edit Comment');	add_contextual_help( $current_screen, '<p>' . __( 'You can edit the information left in a comment if needed. This is often useful when you notice that a commenter has made a typographical error.' ) . '</p>' .	'<p>' . __( 'You can also moderate the comment from this screen using the Status box, where you can also change the timestamp of the comment.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank" >Support Forums</a>' ) . '</p>'	);	wp_enqueue_script('comment');	require_once('./admin-header.php');	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment( $comment_id ) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'javascript:history.go(-1)') );	if ( !current_user_can('edit_post', $comment->comment_post_ID) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( 'trash' == $comment->comment_approved )		comment_footer_die( __('This comment is in the Trash. Please move it out of the Trash if you want to edit it.') );	$comment = get_comment_to_edit( $comment_id );	include('./edit-form-comment.php');	break;case 'delete'  :case 'approve' :case 'trash'   :case 'spam'    :	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment_to_edit( $comment_id ) ) {		wp_redirect( admin_url('edit-comments.php?error=1') );		die();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) ) {		wp_redirect( admin_url('edit-comments.php?error=2') );		die();	}	// No need to re-approve/re-trash/re-spam a comment.	if ( $action == str_replace( '1', 'approve', $comment->comment_approved ) ) {		wp_redirect( admin_url( 'edit-comments.php?same=' . $comment_id ) );		die(); 	}	require_once('./admin-header.php');	$formaction    = $action . 'comment';	$nonce_action  = 'approve' == $action ? 'approve-comment_' : 'delete-comment_';	$nonce_action .= $comment_id;?><div class='wrap'><div class="narrow"><?php screen_icon(); ?><h2><?php esc_html_e( 'Moderate Comment' ); ?></h2><?phpswitch ( $action ) {	case 'spam' :		$caution_msg = __('You are about to mark the following comment as spam:');		$button      = __('Spam Comment');		break;	case 'trash' :		$caution_msg = __('You are about to move the following comment to the Trash:');		$button      = __('Trash Comment');		break;	case 'delete' :		$caution_msg = __('You are about to delete the following comment:');		$button      = __('Permanently Delete Comment');		break;	default :		$caution_msg = __('You are about to approve the following comment:');		$button      = __('Approve Comment');		break;}if ( $comment->comment_approved != '0' ) { // if not unapproved	$message = '';	switch ( $comment->comment_approved ) {		case '1' :			$message = __('This comment is currently approved.');			break;		case 'spam' :			$message  = __('This comment is currently marked as spam.');			break;		case 'trash' :			$message  = __('This comment is currently in the Trash.');			break;	}	if ( $message )		echo '<div class="updated"><p>' . $message . '</p></div>';}?><p><strong><?php _e('Caution:'); ?></strong> <?php echo $caution_msg; ?></p><table class="form-table comment-ays"><tr class="alt"><th scope="row"><?php _e('Author'); ?></th><td><?php echo $comment->comment_author; ?></td></tr><?php if ( $comment->comment_author_email ) { ?><tr><th scope="row"><?php _e('E-mail'); ?></th><td><?php echo $comment->comment_author_email; ?></td></tr><?php } ?><?php if ( $comment->comment_author_url ) { ?><tr><th scope="row"><?php _e('URL'); ?></th><td><a href="<?php echo $comment->comment_author_url; ?>"><?php echo $comment->comment_author_url; ?></a></td></tr><?php } ?><tr><th scope="row" valign="top"><?php /* translators: field name in comment form */ _ex('Comment', 'noun'); ?></th><td><?php echo $comment->comment_content; ?></td></tr></table><p><?php _e('Are you sure you want to do this?'); ?></p><form action='comment.php' method='get'><table width="100%"><tr><td><a class="button" href="<?php echo admin_url('edit-comments.php'); ?>"><?php esc_attr_e('No'); ?></a></td><td class="textright"><input type='submit' class="button" value='<?php echo esc_attr($button); ?>' /></td></tr></table><?php wp_nonce_field( $nonce_action ); ?><input type='hidden' name='action' value='<?php echo esc_attr($formaction); ?>' /><input type='hidden' name='p' value='<?php echo esc_attr($comment->comment_post_ID); ?>' /><input type='hidden' name='c' value='<?php echo esc_attr($comment->comment_ID); ?>' /><input type='hidden' name='noredir' value='1' /></form></div></div><?php	break;case 'deletecomment'    :case 'trashcomment'     :case 'untrashcomment'   :case 'spamcomment'      :case 'unspamcomment'    :case 'approvecomment'   :case 'unapprovecomment' :	$comment_id = absint( $_REQUEST['c'] );	if ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		check_admin_referer( 'approve-comment_' . $comment_id );	else		check_admin_referer( 'delete-comment_' . $comment_id );	$noredir = isset($_REQUEST['noredir']);	if ( !$comment = get_comment($comment_id) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'edit-comments.php') );	if ( !current_user_can('edit_post', $comment->comment_post_ID ) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( '' != wp_get_referer() && ! $noredir && false === strpos(wp_get_referer(), 'comment.php') )		$redir = wp_get_referer();	elseif ( '' != wp_get_original_referer() && ! $noredir )		$redir = wp_get_original_referer();	elseif ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		$redir = admin_url('edit-comments.php?p=' . absint( $comment->comment_post_ID ) );	else		$redir = admin_url('edit-comments.php');	$redir = remove_query_arg( array('spammed', 'unspammed', 'trashed', 'untrashed', 'deleted', 'ids', 'approved', 'unapproved'), $redir );	switch ( $action ) {		case 'deletecomment' :			wp_delete_comment( $comment_id );			$redir = add_query_arg( array('deleted' => '1'), $redir );			break;		case 'trashcomment' :			wp_trash_comment($comment_id);			$redir = add_query_arg( array('trashed' => '1', 'ids' => $comment_id), $redir );			break;		case 'untrashcomment' :			wp_untrash_comment($comment_id);			$redir = add_query_arg( array('untrashed' => '1'), $redir );			break;		case 'spamcomment' :			wp_spam_comment($comment_id);			$redir = add_query_arg( array('spammed' => '1', 'ids' => $comment_id), $redir );			break;		case 'unspamcomment' :			wp_unspam_comment($comment_id);			$redir = add_query_arg( array('unspammed' => '1'), $redir );			break;		case 'approvecomment' :			wp_set_comment_status( $comment_id, 'approve' );			$redir = add_query_arg( array( 'approved' => 1 ), $redir );			break;		case 'unapprovecomment' :			wp_set_comment_status( $comment_id, 'hold' );			$redir = add_query_arg( array( 'unapproved' => 1 ), $redir );			break;	}	wp_redirect( $redir );	die;	break;case 'editedcomment' :	$comment_id = absint( $_POST['comment_ID'] );	$comment_post_id = absint( $_POST['comment_post_ID'] );	check_admin_referer( 'update-comment_' . $comment_id );	edit_comment();	$location = ( empty( $_POST['referredby'] ) ? "edit-comments.php?p=$comment_post_id" : $_POST['referredby'] ) . '#comment-' . $comment_id;	$location = apply_filters( 'comment_edit_redirect', $location, $comment_id );	wp_redirect( $location );	exit();	break;default:	wp_die( __('Unknown action.') );	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><hr /><div id="footer" role="contentinfo"><!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->	<p>		<?php printf(__('%1$s is proudly powered by %2$s'), get_bloginfo('name'),		'<a href="http://wordpress.org/">WordPress</a>'); ?>		<br /><?php printf(__('%1$s and %2$s.'), '<a href="' . get_bloginfo('rss2_url') . '">' . __('Entries (RSS)') . '</a>', '<a href="' . get_bloginfo('comments_rss2_url') . '">' . __('Comments (RSS)') . '</a>'); ?>		<!-- <?php printf(__('%d queries. %s seconds.'), get_num_queries(), timer_stop(0, 3)); ?> -->	</p></div></div><!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ --><?php /* "Just what do you think you're doing Dave?" */ ?>		<?php wp_footer(); ?></body></html>
<?php/** * Parse OPML XML files and store in globals. * * @package WordPress * @subpackage Administration */if ( ! defined('ABSPATH') )	die();global $opml, $map;// columns we wish to find are:  link_url, link_name, link_target, link_description// we need to map XML attribute names to our columns$opml_map = array('URL'         => 'link_url',	'HTMLURL'     => 'link_url',	'TEXT'        => 'link_name',	'TITLE'       => 'link_name',	'TARGET'      => 'link_target',	'DESCRIPTION' => 'link_description',	'XMLURL'      => 'link_rss');$map = $opml_map;/** * XML callback function for the start of a new XML tag. * * @since unknown * @access private * * @uses $updated_timestamp Not used inside function. * @uses $all_links Not used inside function. * @uses $map Stores names of attributes to use. * @global array $names * @global array $urls * @global array $targets * @global array $descriptions * @global array $feeds * * @param mixed $parser XML Parser resource. * @param string $tagName XML element name. * @param array $attrs XML element attributes. */function startElement($parser, $tagName, $attrs) {	global $updated_timestamp, $all_links, $map;	global $names, $urls, $targets, $descriptions, $feeds;	if ($tagName == 'OUTLINE') {		foreach (array_keys($map) as $key) {			if (isset($attrs[$key])) {				$$map[$key] = $attrs[$key];			}		}		//echo("got data: link_url = [$link_url], link_name = [$link_name], link_target = [$link_target], link_description = [$link_description]<br />\n");		// save the data away.		$names[] = $link_name;		$urls[] = $link_url;		$targets[] = $link_target;		$feeds[] = $link_rss;		$descriptions[] = $link_description;	} // end if outline}/** * XML callback function that is called at the end of a XML tag. * * @since unknown * @access private * @package WordPress * @subpackage Dummy * * @param mixed $parser XML Parser resource. * @param string $tagName XML tag name. */function endElement($parser, $tagName) {	// nothing to do.}// Create an XML parser$xml_parser = xml_parser_create();// Set the functions to handle opening and closing tagsxml_set_element_handler($xml_parser, "startElement", "endElement");if (!xml_parse($xml_parser, $opml, true)) {	echo(sprintf(__('XML error: %1$s at line %2$s'),	xml_error_string(xml_get_error_code($xml_parser)),	xml_get_current_line_number($xml_parser)));}// Free up memory used by the XML parserxml_parser_free($xml_parser);?>
<?php/** * My Sites dashboard. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can('read') )	wp_die( __( 'You do not have sufficient permissions to view this page.' ) );$action = isset( $_POST['action'] ) ? $_POST['action'] : 'splash';$blogs = get_blogs_of_user( $current_user->id );if ( empty( $blogs ) )	wp_die( __( 'You must be a member of at least one site to use this page.' ) );$updated = false;if ( 'updateblogsettings' == $action && isset( $_POST['primary_blog'] ) ) {	check_admin_referer( 'update-my-sites' );	$blog = get_blog_details( (int) $_POST['primary_blog'] );	if ( $blog && isset( $blog->domain ) ) {		update_user_option( $current_user->id, 'primary_blog', (int) $_POST['primary_blog'], true );		$updated = true;	} else {		wp_die( __( 'The primary site you chose does not exist.' ) );	}}$title = __( 'My Sites' );$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('This screen shows an individual user all of their sites in this network, and also allows that user to set a primary site. He or she can use the links under each site to visit either the frontend or the dashboard for that site.') . '</p>' .	'<p>' . __('Up until WordPress version 3.0, what is now called a Multi-site Network had to be installed separately as WordPress MU (multi-user).') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_My_Sites_SubPanel" target="_blank">My Sites Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( $updated ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'Settings saved.' ); ?></strong></p></div><?php } ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="myblogs" action="" method="post">	<?php	choose_primary_blog();	do_action( 'myblogs_allblogs_options' );	?>	<br clear="all" />	<table class="widefat fixed">	<?php	$settings_html = apply_filters( 'myblogs_options', '', 'global' );	if ( $settings_html != '' ) {		echo '<tr><td valign="top"><h3>' . __( 'Global Settings' ) . '</h3></td><td>';		echo $settings_html;		echo '</td></tr>';	}	reset( $blogs );	$num = count( $blogs );	$cols = 1;	if ( $num >= 20 )		$cols = 4;	elseif ( $num >= 10 )		$cols = 2;	$num_rows = ceil( $num / $cols );	$split = 0;	for ( $i = 1; $i <= $num_rows; $i++ ) {		$rows[] = array_slice( $blogs, $split, $cols );		$split = $split + $cols;	}	$c = '';	foreach ( $rows as $row ) {		$c = $c == 'alternate' ? '' : 'alternate';		echo "<tr class='$c'>";		$i = 0;		foreach ( $row as $user_blog ) {			$s = $i == 3 ? '' : 'border-right: 1px solid #ccc;';			echo "<td valign='top' style='$s'>";			echo "<h3>{$user_blog->blogname}</h3>";			echo "<p>" . apply_filters( 'myblogs_blog_actions', "<a href='" . esc_url( get_home_url( $user_blog->userblog_id ) ). "'>" . __( 'Visit' ) . "</a> | <a href='" . esc_url( get_admin_url( $user_blog->userblog_id ) ) . "'>" . __( 'Dashboard' ) . "</a>", $user_blog ) . "</p>";			echo apply_filters( 'myblogs_options', '', $user_blog );			echo "</td>";			$i++;		}		echo "</tr>";	}?>	</table>	<input type="hidden" name="action" value="updateblogsettings" />	<?php wp_nonce_field( 'update-my-sites' ); ?>	<p>	 <input type="submit" class="button-primary" value="<?php _e( 'Save Changes' ) ?>" />	</p>	</form>	</div><?phpinclude( './admin-footer.php' );?>
<?php/** * Redirects to the Comments RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'comments_rss2_url' ), 301 );?>
<?php/** * WordPress API for media display. * * @package WordPress *//** * Scale down the default size of an image. * * This is so that the image is a better fit for the editor and theme. * * The $size parameter accepts either an array or a string. The supported string * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at * 128 width and 96 height in pixels. Also supported for the string value is * 'medium' and 'full'. The 'full' isn't actually supported, but any value other * than the supported will result in the content_width size or 500 if that is * not set. * * Finally, there is a filter named, 'editor_max_image_size' that will be called * on the calculated array for width and height, respectively. The second * parameter will be the value that was in the $size parameter. The returned * type for the hook is an array with the width as the first element and the * height as the second element. * * @since 2.5.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $width Width of the image * @param int $height Height of the image * @param string|array $size Size of what the result image should be. * @return array Width and height of what the result image should resize to. */function image_constrain_size_for_editor($width, $height, $size = 'medium') {	global $content_width, $_wp_additional_image_sizes;	if ( is_array($size) ) {		$max_width = $size[0];		$max_height = $size[1];	}	elseif ( $size == 'thumb' || $size == 'thumbnail' ) {		$max_width = intval(get_option('thumbnail_size_w'));		$max_height = intval(get_option('thumbnail_size_h'));		// last chance thumbnail size defaults		if ( !$max_width && !$max_height ) {			$max_width = 128;			$max_height = 96;		}	}	elseif ( $size == 'medium' ) {		$max_width = intval(get_option('medium_size_w'));		$max_height = intval(get_option('medium_size_h'));		// if no width is set, default to the theme content width if available	}	elseif ( $size == 'large' ) {		// we're inserting a large size image into the editor.  if it's a really		// big image we'll scale it down to fit reasonably within the editor		// itself, and within the theme's content width if it's known.  the user		// can resize it in the editor if they wish.		$max_width = intval(get_option('large_size_w'));		$max_height = intval(get_option('large_size_h'));		if ( intval($content_width) > 0 )			$max_width = min( intval($content_width), $max_width );	} elseif ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) && in_array( $size, array_keys( $_wp_additional_image_sizes ) ) ) {		$max_width = intval( $_wp_additional_image_sizes[$size]['width'] );		$max_height = intval( $_wp_additional_image_sizes[$size]['height'] );		if ( intval($content_width) > 0 && is_admin() ) // Only in admin. Assume that theme authors know what they're doing.			$max_width = min( intval($content_width), $max_width );	}	// $size == 'full' has no constraint	else {		$max_width = $width;		$max_height = $height;	}	list( $max_width, $max_height ) = apply_filters( 'editor_max_image_size', array( $max_width, $max_height ), $size );	return wp_constrain_dimensions( $width, $height, $max_width, $max_height );}/** * Retrieve width and height attributes using given width and height values. * * Both attributes are required in the sense that both parameters must have a * value, but are optional in that if you set them to false or null, then they * will not be added to the returned string. * * You can set the value using a string, but it will only take numeric values. * If you wish to put 'px' after the numbers, then it will be stripped out of * the return. * * @since 2.5.0 * * @param int|string $width Optional. Width attribute value. * @param int|string $height Optional. Height attribute value. * @return string HTML attributes for width and, or height. */function image_hwstring($width, $height) {	$out = '';	if ($width)		$out .= 'width="'.intval($width).'" ';	if ($height)		$out .= 'height="'.intval($height).'" ';	return $out;}/** * Scale an image to fit a particular size (such as 'thumb' or 'medium'). * * Array with image url, width, height, and whether is intermediate size, in * that order is returned on success is returned. $is_intermediate is true if * $url is a resized image, false if it is the original. * * The URL might be the original image, or it might be a resized version. This * function won't create a new resized copy, it will just return an already * resized one if it exists. * * A plugin may use the 'image_downsize' filter to hook into and offer image * resizing services for images. The hook must return an array with the same * elements that are returned in the function. The first element being the URL * to the new image that was resized. * * @since 2.5.0 * @uses apply_filters() Calls 'image_downsize' on $id and $size to provide *		resize services. * * @param int $id Attachment ID for image. * @param string $size Optional, default is 'medium'. Size of image, can be 'thumbnail'. * @return bool|array False on failure, array on success. */function image_downsize($id, $size = 'medium') {	if ( !wp_attachment_is_image($id) )		return false;	$img_url = wp_get_attachment_url($id);	$meta = wp_get_attachment_metadata($id);	$width = $height = 0;	$is_intermediate = false;	// plugins can use this to provide resize services	if ( $out = apply_filters('image_downsize', false, $id, $size) )		return $out;	// try for a new style intermediate size	if ( $intermediate = image_get_intermediate_size($id, $size) ) {		$img_url = str_replace(basename($img_url), $intermediate['file'], $img_url);		$width = $intermediate['width'];		$height = $intermediate['height'];		$is_intermediate = true;	}	elseif ( $size == 'thumbnail' ) {		// fall back to the old thumbnail		if ( ($thumb_file = wp_get_attachment_thumb_file($id)) && $info = getimagesize($thumb_file) ) {			$img_url = str_replace(basename($img_url), basename($thumb_file), $img_url);			$width = $info[0];			$height = $info[1];			$is_intermediate = true;		}	}	if ( !$width && !$height && isset($meta['width'], $meta['height']) ) {		// any other type: use the real image		$width = $meta['width'];		$height = $meta['height'];	}	if ( $img_url) {		// we have the actual image size, but might need to further constrain it if content_width is narrower		list( $width, $height ) = image_constrain_size_for_editor( $width, $height, $size );		return array( $img_url, $width, $height, $is_intermediate );	}	return false;}/** * Registers a new image size */function add_image_size( $name, $width = 0, $height = 0, $crop = FALSE ) {	global $_wp_additional_image_sizes;	$_wp_additional_image_sizes[$name] = array( 'width' => absint( $width ), 'height' => absint( $height ), 'crop' => !!$crop );}/** * Registers an image size for the post thumbnail */function set_post_thumbnail_size( $width = 0, $height = 0, $crop = FALSE ) {	add_image_size( 'post-thumbnail', $width, $height, $crop );}/** * An <img src /> tag for an image attachment, scaling it down if requested. * * The filter 'get_image_tag_class' allows for changing the class name for the * image without having to use regular expressions on the HTML content. The * parameters are: what WordPress will use for the class, the Attachment ID, * image align value, and the size the image should be. * * The second filter 'get_image_tag' has the HTML content, which can then be * further manipulated by a plugin to change all attribute values and even HTML * content. * * @since 2.5.0 * * @uses apply_filters() The 'get_image_tag_class' filter is the IMG element *		class attribute. * @uses apply_filters() The 'get_image_tag' filter is the full IMG element with *		all attributes. * * @param int $id Attachment ID. * @param string $alt Image Description for the alt attribute. * @param string $title Image Description for the title attribute. * @param string $align Part of the class name for aligning the image. * @param string $size Optional. Default is 'medium'. * @return string HTML IMG element for given image attachment */function get_image_tag($id, $alt, $title, $align, $size='medium') {	list( $img_src, $width, $height ) = image_downsize($id, $size);	$hwstring = image_hwstring($width, $height);	$class = 'align' . esc_attr($align) .' size-' . esc_attr($size) . ' wp-image-' . $id;	$class = apply_filters('get_image_tag_class', $class, $id, $align, $size);	$html = '<img src="' . esc_attr($img_src) . '" alt="' . esc_attr($alt) . '" title="' . esc_attr($title).'" '.$hwstring.'class="'.$class.'" />';	$html = apply_filters( 'get_image_tag', $html, $id, $alt, $title, $align, $size );	return $html;}/** * Load an image from a string, if PHP supports it. * * @since 2.1.0 * * @param string $file Filename of the image to load. * @return resource The resulting image resource on success, Error string on failure. */function wp_load_image( $file ) {	if ( is_numeric( $file ) )		$file = get_attached_file( $file );	if ( ! file_exists( $file ) )		return sprintf(__('File &#8220;%s&#8221; doesn&#8217;t exist?'), $file);	if ( ! function_exists('imagecreatefromstring') )		return __('The GD image library is not installed.');	// Set artificially high because GD uses uncompressed images in memory	@ini_set('memory_limit', '256M');	$image = imagecreatefromstring( file_get_contents( $file ) );	if ( !is_resource( $image ) )		return sprintf(__('File &#8220;%s&#8221; is not an image.'), $file);	return $image;}/** * Calculates the new dimentions for a downsampled image. * * If either width or height are empty, no constraint is applied on * that dimension. * * @since 2.5.0 * * @param int $current_width Current width of the image. * @param int $current_height Current height of the image. * @param int $max_width Optional. Maximum wanted width. * @param int $max_height Optional. Maximum wanted height. * @return array First item is the width, the second item is the height. */function wp_constrain_dimensions( $current_width, $current_height, $max_width=0, $max_height=0 ) {	if ( !$max_width and !$max_height )		return array( $current_width, $current_height );	$width_ratio = $height_ratio = 1.0;	$did_width = $did_height = false;	if ( $max_width > 0 && $current_width > 0 && $current_width > $max_width ) {		$width_ratio = $max_width / $current_width;		$did_width = true;	}	if ( $max_height > 0 && $current_height > 0 && $current_height > $max_height ) {		$height_ratio = $max_height / $current_height;		$did_height = true;	}	// Calculate the larger/smaller ratios	$smaller_ratio = min( $width_ratio, $height_ratio );	$larger_ratio  = max( $width_ratio, $height_ratio );	if ( intval( $current_width * $larger_ratio ) > $max_width || intval( $current_height * $larger_ratio ) > $max_height ) 		// The larger ratio is too big. It would result in an overflow.		$ratio = $smaller_ratio;	else		// The larger ratio fits, and is likely to be a more "snug" fit.		$ratio = $larger_ratio;	$w = intval( $current_width  * $ratio );	$h = intval( $current_height * $ratio );	// Sometimes, due to rounding, we'll end up with a result like this: 465x700 in a 177x177 box is 117x176... a pixel short	// We also have issues with recursive calls resulting in an ever-changing result. Contraining to the result of a constraint should yield the original result.	// Thus we look for dimensions that are one pixel shy of the max value and bump them up	if ( $did_width && $w == $max_width - 1 )		$w = $max_width; // Round it up	if ( $did_height && $h == $max_height - 1 )		$h = $max_height; // Round it up	return array( $w, $h );}/** * Retrieve calculated resized dimensions for use in imagecopyresampled(). * * Calculate dimensions and coordinates for a resized image that fits within a * specified width and height. If $crop is true, the largest matching central * portion of the image will be cropped out and resized to the required size. * * @since 2.5.0 * * @param int $orig_w Original width. * @param int $orig_h Original height. * @param int $dest_w New width. * @param int $dest_h New height. * @param bool $crop Optional, default is false. Whether to crop image or resize. * @return bool|array False, on failure. Returned array matches parameters for imagecopyresampled() PHP function. */function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {	if ($orig_w <= 0 || $orig_h <= 0)		return false;	// at least one of dest_w or dest_h must be specific	if ($dest_w <= 0 && $dest_h <= 0)		return false;	if ( $crop ) {		// crop the largest possible portion of the original image that we can size to $dest_w x $dest_h		$aspect_ratio = $orig_w / $orig_h;		$new_w = min($dest_w, $orig_w);		$new_h = min($dest_h, $orig_h);		if ( !$new_w ) {			$new_w = intval($new_h * $aspect_ratio);		}		if ( !$new_h ) {			$new_h = intval($new_w / $aspect_ratio);		}		$size_ratio = max($new_w / $orig_w, $new_h / $orig_h);		$crop_w = round($new_w / $size_ratio);		$crop_h = round($new_h / $size_ratio);		$s_x = floor( ($orig_w - $crop_w) / 2 );		$s_y = floor( ($orig_h - $crop_h) / 2 );	} else {		// don't crop, just resize using $dest_w x $dest_h as a maximum bounding box		$crop_w = $orig_w;		$crop_h = $orig_h;		$s_x = 0;		$s_y = 0;		list( $new_w, $new_h ) = wp_constrain_dimensions( $orig_w, $orig_h, $dest_w, $dest_h );	}	// if the resulting image would be the same size or larger we don't want to resize it	if ( $new_w >= $orig_w && $new_h >= $orig_h )		return false;	// the return array matches the parameters to imagecopyresampled()	// int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h	return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );}/** * Scale down an image to fit a particular size and save a new copy of the image. * * The PNG transparency will be preserved using the function, as well as the * image type. If the file going in is PNG, then the resized image is going to * be PNG. The only supported image types are PNG, GIF, and JPEG. * * Some functionality requires API to exist, so some PHP version may lose out * support. This is not the fault of WordPress (where functionality is * downgraded, not actual defects), but of your PHP version. * * @since 2.5.0 * * @param string $file Image file path. * @param int $max_w Maximum width to resize to. * @param int $max_h Maximum height to resize to. * @param bool $crop Optional. Whether to crop image or resize. * @param string $suffix Optional. File Suffix. * @param string $dest_path Optional. New image file path. * @param int $jpeg_quality Optional, default is 90. Image quality percentage. * @return mixed WP_Error on failure. String with new destination path. */function image_resize( $file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90 ) {	$image = wp_load_image( $file );	if ( !is_resource( $image ) )		return new WP_Error( 'error_loading_image', $image, $file );	$size = @getimagesize( $file );	if ( !$size )		return new WP_Error('invalid_image', __('Could not read image size'), $file);	list($orig_w, $orig_h, $orig_type) = $size;	$dims = image_resize_dimensions($orig_w, $orig_h, $max_w, $max_h, $crop);	if ( !$dims )		return new WP_Error( 'error_getting_dimensions', __('Could not calculate resized image dimensions') );	list($dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) = $dims;	$newimage = wp_imagecreatetruecolor( $dst_w, $dst_h );	imagecopyresampled( $newimage, $image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);	// convert from full colors to index colors, like original PNG.	if ( IMAGETYPE_PNG == $orig_type && function_exists('imageistruecolor') && !imageistruecolor( $image ) )		imagetruecolortopalette( $newimage, false, imagecolorstotal( $image ) );	// we don't need the original in memory anymore	imagedestroy( $image );	// $suffix will be appended to the destination filename, just before the extension	if ( !$suffix )		$suffix = "{$dst_w}x{$dst_h}";	$info = pathinfo($file);	$dir = $info['dirname'];	$ext = $info['extension'];	$name = basename($file, ".{$ext}");	if ( !is_null($dest_path) and $_dest_path = realpath($dest_path) )		$dir = $_dest_path;	$destfilename = "{$dir}/{$name}-{$suffix}.{$ext}";	if ( IMAGETYPE_GIF == $orig_type ) {		if ( !imagegif( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} elseif ( IMAGETYPE_PNG == $orig_type ) {		if ( !imagepng( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} else {		// all other formats are converted to jpg		$destfilename = "{$dir}/{$name}-{$suffix}.jpg";		if ( !imagejpeg( $newimage, $destfilename, apply_filters( 'jpeg_quality', $jpeg_quality, 'image_resize' ) ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	}	imagedestroy( $newimage );	// Set correct file permissions	$stat = stat( dirname( $destfilename ));	$perms = $stat['mode'] & 0000666; //same permissions as parent folder, strip off the executable bits	@ chmod( $destfilename, $perms );	return $destfilename;}/** * Resize an image to make a thumbnail or intermediate size. * * The returned array has the file size, the image width, and image height. The * filter 'image_make_intermediate_size' can be used to hook in and change the * values of the returned array. The only parameter is the resized file path. * * @since 2.5.0 * * @param string $file File path. * @param int $width Image width. * @param int $height Image height. * @param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize. * @return bool|array False, if no image was created. Metadata array on success. */function image_make_intermediate_size($file, $width, $height, $crop=false) {	if ( $width || $height ) {		$resized_file = image_resize($file, $width, $height, $crop);		if ( !is_wp_error($resized_file) && $resized_file && $info = getimagesize($resized_file) ) {			$resized_file = apply_filters('image_make_intermediate_size', $resized_file);			return array(				'file' => basename( $resized_file ),				'width' => $info[0],				'height' => $info[1],			);		}	}	return false;}/** * Retrieve the image's intermediate size (resized) path, width, and height. * * The $size parameter can be an array with the width and height respectively. * If the size matches the 'sizes' metadata array for width and height, then it * will be used. If there is no direct match, then the nearest image size larger * than the specified size will be used. If nothing is found, then the function * will break out and return false. * * The metadata 'sizes' is used for compatible sizes that can be used for the * parameter $size value. * * The url path will be given, when the $size parameter is a string. * * If you are passing an array for the $size, you should consider using * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @since 2.5.0 * @see add_image_size() * * @param int $post_id Attachment ID for image. * @param array|string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @return bool|array False on failure or array of file path, width, and height on success. */function image_get_intermediate_size($post_id, $size='thumbnail') {	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post_id ) ) )		return false;	// get the best one for a specified set of dimensions	if ( is_array($size) && !empty($imagedata['sizes']) ) {		foreach ( $imagedata['sizes'] as $_size => $data ) {			// already cropped to width or height; so use this size			if ( ( $data['width'] == $size[0] && $data['height'] <= $size[1] ) || ( $data['height'] == $size[1] && $data['width'] <= $size[0] ) ) {				$file = $data['file'];				list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );				return compact( 'file', 'width', 'height' );			}			// add to lookup table: area => size			$areas[$data['width'] * $data['height']] = $_size;		}		if ( !$size || !empty($areas) ) {			// find for the smallest image not smaller than the desired size			ksort($areas);			foreach ( $areas as $_size ) {				$data = $imagedata['sizes'][$_size];				if ( $data['width'] >= $size[0] || $data['height'] >= $size[1] ) {					// Skip images with unexpectedly divergent aspect ratios (crops)					// First, we calculate what size the original image would be if constrained to a box the size of the current image in the loop					$maybe_cropped = image_resize_dimensions($imagedata['width'], $imagedata['height'], $data['width'], $data['height'], false );					// If the size doesn't match within one pixel, then it is of a different aspect ratio, so we skip it, unless it's the thumbnail size					if ( 'thumbnail' != $_size && ( !$maybe_cropped || ( $maybe_cropped[4] != $data['width'] && $maybe_cropped[4] + 1 != $data['width'] ) || ( $maybe_cropped[5] != $data['height'] && $maybe_cropped[5] + 1 != $data['height'] ) ) )						continue;					// If we're still here, then we're going to use this size					$file = $data['file'];					list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );					return compact( 'file', 'width', 'height' );				}			}		}	}	if ( is_array($size) || empty($size) || empty($imagedata['sizes'][$size]) )		return false;	$data = $imagedata['sizes'][$size];	// include the full filesystem path of the intermediate file	if ( empty($data['path']) && !empty($data['file']) ) {		$file_url = wp_get_attachment_url($post_id);		$data['path'] = path_join( dirname($imagedata['file']), $data['file'] );		$data['url'] = path_join( dirname($file_url), $data['file'] );	}	return $data;}/** * Get the available image sizes * @since 3.0.0 * @return array Returns a filtered array of image size strings */function get_intermediate_image_sizes() {	global $_wp_additional_image_sizes;	$image_sizes = array('thumbnail', 'medium', 'large'); // Standard sizes	if ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) )		$image_sizes = array_merge( $image_sizes, array_keys( $_wp_additional_image_sizes ) );	return apply_filters( 'intermediate_image_sizes', $image_sizes );}/** * Retrieve an image to represent an attachment. * * A mime icon for files, thumbnail or intermediate size for images. * * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return bool|array Returns an array (url, width, height), or false, if no image is available. */function wp_get_attachment_image_src($attachment_id, $size='thumbnail', $icon = false) {	// get a thumbnail or intermediate image if there is one	if ( $image = image_downsize($attachment_id, $size) )		return $image;	$src = false;	if ( $icon && $src = wp_mime_type_icon($attachment_id) ) {		$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );		$src_file = $icon_dir . '/' . basename($src);		@list($width, $height) = getimagesize($src_file);	}	if ( $src && $width && $height )		return array( $src, $width, $height );	return false;}/** * Get an HTML img element representing an image attachment * * While $size will accept an array, it is better to register a size with * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @see add_image_size() * @uses apply_filters() Calls 'wp_get_attachment_image_attributes' hook on attributes array * @uses wp_get_attachment_image_src() Gets attachment file URL and dimensions * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return string HTML img element or empty string on failure. */function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = false, $attr = '') {	$html = '';	$image = wp_get_attachment_image_src($attachment_id, $size, $icon);	if ( $image ) {		list($src, $width, $height) = $image;		$hwstring = image_hwstring($width, $height);		if ( is_array($size) )			$size = join('x', $size);		$attachment =& get_post($attachment_id);		$default_attr = array(			'src'	=> $src,			'class'	=> "attachment-$size",			'alt'	=> trim(strip_tags( get_post_meta($attachment_id, '_wp_attachment_image_alt', true) )), // Use Alt field first			'title'	=> trim(strip_tags( $attachment->post_title )),		);		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_excerpt )); // If not, Use the Caption		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_title )); // Finally, use the title		$attr = wp_parse_args($attr, $default_attr);		$attr = apply_filters( 'wp_get_attachment_image_attributes', $attr, $attachment );		$attr = array_map( 'esc_attr', $attr );		$html = rtrim("<img $hwstring");		foreach ( $attr as $name => $value ) {			$html .= " $name=" . '"' . $value . '"';		}		$html .= ' />';	}	return $html;}/** * Adds a 'wp-post-image' class to post thumbnail thumbnails * Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to * dynamically add/remove itself so as to only filter post thumbnail thumbnails * * @since 2.9.0 * @param array $attr Attributes including src, class, alt, title * @return array */function _wp_post_thumbnail_class_filter( $attr ) {	$attr['class'] .= ' wp-post-image';	return $attr;}/** * Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_add( $attr ) {	add_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}/** * Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_remove( $attr ) {	remove_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}add_shortcode('wp_caption', 'img_caption_shortcode');add_shortcode('caption', 'img_caption_shortcode');/** * The Caption shortcode. * * Allows a plugin to replace the content that would otherwise be returned. The * filter is 'img_caption_shortcode' and passes an empty string, the attr * parameter and the content parameter values. * * The supported attributes for the shortcode are 'id', 'align', 'width', and * 'caption'. * * @since 2.6.0 * * @param array $attr Attributes attributed to the shortcode. * @param string $content Optional. Shortcode content. * @return string */function img_caption_shortcode($attr, $content = null) {	// Allow plugins/themes to override the default caption template.	$output = apply_filters('img_caption_shortcode', '', $attr, $content);	if ( $output != '' )		return $output;	extract(shortcode_atts(array(		'id'	=> '',		'align'	=> 'alignnone',		'width'	=> '',		'caption' => ''	), $attr));	if ( 1 > (int) $width || empty($caption) )		return $content;	if ( $id ) $id = 'id="' . esc_attr($id) . '" ';	return '<div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'	. do_shortcode( $content ) . '<p class="wp-caption-text">' . $caption . '</p></div>';}add_shortcode('gallery', 'gallery_shortcode');/** * The Gallery shortcode. * * This implements the functionality of the Gallery Shortcode for displaying * WordPress images on a post. * * @since 2.5.0 * * @param array $attr Attributes attributed to the shortcode. * @return string HTML content to display gallery. */function gallery_shortcode($attr) {	global $post, $wp_locale;	static $instance = 0;	$instance++;	// Allow plugins/themes to override the default gallery template.	$output = apply_filters('post_gallery', '', $attr);	if ( $output != '' )		return $output;	// We're trusting author input, so let's at least make sure it looks like a valid orderby statement	if ( isset( $attr['orderby'] ) ) {		$attr['orderby'] = sanitize_sql_orderby( $attr['orderby'] );		if ( !$attr['orderby'] )			unset( $attr['orderby'] );	}	extract(shortcode_atts(array(		'order'      => 'ASC',		'orderby'    => 'menu_order ID',		'id'         => $post->ID,		'itemtag'    => 'dl',		'icontag'    => 'dt',		'captiontag' => 'dd',		'columns'    => 3,		'size'       => 'thumbnail',		'include'    => '',		'exclude'    => ''	), $attr));	$id = intval($id);	if ( 'RAND' == $order )		$orderby = 'none';	if ( !empty($include) ) {		$include = preg_replace( '/[^0-9,]+/', '', $include );		$_attachments = get_posts( array('include' => $include, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );		$attachments = array();		foreach ( $_attachments as $key => $val ) {			$attachments[$val->ID] = $_attachments[$key];		}	} elseif ( !empty($exclude) ) {		$exclude = preg_replace( '/[^0-9,]+/', '', $exclude );		$attachments = get_children( array('post_parent' => $id, 'exclude' => $exclude, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	} else {		$attachments = get_children( array('post_parent' => $id, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	}	if ( empty($attachments) )		return '';	if ( is_feed() ) {		$output = "\n";		foreach ( $attachments as $att_id => $attachment )			$output .= wp_get_attachment_link($att_id, $size, true) . "\n";		return $output;	}	$itemtag = tag_escape($itemtag);	$captiontag = tag_escape($captiontag);	$columns = intval($columns);	$itemwidth = $columns > 0 ? floor(100/$columns) : 100;	$float = is_rtl() ? 'right' : 'left';	$selector = "gallery-{$instance}";	$output = apply_filters('gallery_style', "		<style type='text/css'>			#{$selector} {				margin: auto;			}			#{$selector} .gallery-item {				float: {$float};				margin-top: 10px;				text-align: center;				width: {$itemwidth}%;			}			#{$selector} img {				border: 2px solid #cfcfcf;			}			#{$selector} .gallery-caption {				margin-left: 0;			}		</style>		<!-- see gallery_shortcode() in wp-includes/media.php -->		<div id='$selector' class='gallery galleryid-{$id}'>");	$i = 0;	foreach ( $attachments as $id => $attachment ) {		$link = isset($attr['link']) && 'file' == $attr['link'] ? wp_get_attachment_link($id, $size, false, false) : wp_get_attachment_link($id, $size, true, false);		$output .= "<{$itemtag} class='gallery-item'>";		$output .= "			<{$icontag} class='gallery-icon'>				$link			</{$icontag}>";		if ( $captiontag && trim($attachment->post_excerpt) ) {			$output .= "				<{$captiontag} class='gallery-caption'>				" . wptexturize($attachment->post_excerpt) . "				</{$captiontag}>";		}		$output .= "</{$itemtag}>";		if ( $columns > 0 && ++$i % $columns == 0 )			$output .= '<br style="clear: both" />';	}	$output .= "			<br style='clear: both;' />		</div>\n";	return $output;}/** * Display previous image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function previous_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(true, $size, $text);}/** * Display next image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function next_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(false, $size, $text);}/** * Display next or previous image link that has the same post parent. * * Retrieves the current attachment object from the $post global. * * @since 2.5.0 * * @param bool $prev Optional. Default is true to display previous link, true for next. */function adjacent_image_link($prev = true, $size = 'thumbnail', $text = false) {	global $post;	$post = get_post($post);	$attachments = array_values(get_children( array('post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID') ));	foreach ( $attachments as $k => $attachment )		if ( $attachment->ID == $post->ID )			break;	$k = $prev ? $k - 1 : $k + 1;	if ( isset($attachments[$k]) )		echo wp_get_attachment_link($attachments[$k]->ID, $size, true, false, $text);}/** * Retrieve taxonomies attached to the attachment. * * @since 2.5.0 * * @param int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object. * @return array Empty array on failure. List of taxonomies on success. */function get_attachment_taxonomies($attachment) {	if ( is_int( $attachment ) )		$attachment = get_post($attachment);	else if ( is_array($attachment) )		$attachment = (object) $attachment;	if ( ! is_object($attachment) )		return array();	$filename = basename($attachment->guid);	$objects = array('attachment');	if ( false !== strpos($filename, '.') )		$objects[] = 'attachment:' . substr($filename, strrpos($filename, '.') + 1);	if ( !empty($attachment->post_mime_type) ) {		$objects[] = 'attachment:' . $attachment->post_mime_type;		if ( false !== strpos($attachment->post_mime_type, '/') )			foreach ( explode('/', $attachment->post_mime_type) as $token )				if ( !empty($token) )					$objects[] = "attachment:$token";	}	$taxonomies = array();	foreach ( $objects as $object )		if ( $taxes = get_object_taxonomies($object) )			$taxonomies = array_merge($taxonomies, $taxes);	return array_unique($taxonomies);}/** * Check if the installed version of GD supports particular image type * * @since 2.9.0 * * @param $mime_type string * @return bool */function gd_edit_image_support($mime_type) {	if ( function_exists('imagetypes') ) {		switch( $mime_type ) {			case 'image/jpeg':				return (imagetypes() & IMG_JPG) != 0;			case 'image/png':				return (imagetypes() & IMG_PNG) != 0;			case 'image/gif':				return (imagetypes() & IMG_GIF) != 0;		}	} else {		switch( $mime_type ) {			case 'image/jpeg':				return function_exists('imagecreatefromjpeg');			case 'image/png':				return function_exists('imagecreatefrompng');			case 'image/gif':				return function_exists('imagecreatefromgif');		}	}	return false;}/** * Create new GD image resource with transparency support * * @since 2.9.0 * * @param $width * @param $height * @return image resource */function wp_imagecreatetruecolor($width, $height) {	$img = imagecreatetruecolor($width, $height);	if ( is_resource($img) && function_exists('imagealphablending') && function_exists('imagesavealpha') ) {		imagealphablending($img, false);		imagesavealpha($img, true);	}	return $img;}/** * API for easily embedding rich media such as videos and images into content. * * @package WordPress * @subpackage Embed * @since 2.9.0 */class WP_Embed {	var $handlers = array();	var $post_ID;	var $usecache = true;	var $linkifunknown = true;	/**	 * PHP4 constructor	 */	function WP_Embed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 */	function __construct() {		// Hack to get the [embed] shortcode to run before wpautop()		add_filter( 'the_content', array(&$this, 'run_shortcode'), 8 );		// Shortcode placeholder for strip_shortcodes()		add_shortcode( 'embed', '__return_false' );		// Attempts to embed all URLs in a post		if ( get_option('embed_autourls') )			add_filter( 'the_content', array(&$this, 'autoembed'), 8 );		// After a post is saved, invalidate the oEmbed cache		add_action( 'save_post', array(&$this, 'delete_oembed_caches') );		// After a post is saved, cache oEmbed items via AJAX		add_action( 'edit_form_advanced', array(&$this, 'maybe_run_ajax_cache') );	}	/**	 * Process the [embed] shortcode.	 *	 * Since the [embed] shortcode needs to be run earlier than other shortcodes,	 * this function removes all existing shortcodes, registers the [embed] shortcode,	 * calls {@link do_shortcode()}, and then re-registers the old shortcodes.	 *	 * @uses $shortcode_tags	 * @uses remove_all_shortcodes()	 * @uses add_shortcode()	 * @uses do_shortcode()	 *	 * @param string $content Content to parse	 * @return string Content with shortcode parsed	 */	function run_shortcode( $content ) {		global $shortcode_tags;		// Backup current registered shortcodes and clear them all out		$orig_shortcode_tags = $shortcode_tags;		remove_all_shortcodes();		add_shortcode( 'embed', array(&$this, 'shortcode') );		// Do the shortcode (only the [embed] one is registered)		$content = do_shortcode( $content );		// Put the original shortcodes back		$shortcode_tags = $orig_shortcode_tags;		return $content;	}	/**	 * If a post/page was saved, then output Javascript to make	 * an AJAX request that will call WP_Embed::cache_oembed().	 */	function maybe_run_ajax_cache() {		global $post_ID;		if ( empty($post_ID) || empty($_GET['message']) || 1 != $_GET['message'] )			return;?><script type="text/javascript">/* <![CDATA[ */	jQuery(document).ready(function($){		$.get("<?php echo admin_url( 'admin-ajax.php?action=oembed-cache&post=' . $post_ID ); ?>");	});/* ]]> */</script><?php	}	/**	 * Register an embed handler. Do not use this function directly, use {@link wp_embed_register_handler()} instead.	 * This function should probably also only be used for sites that do not support oEmbed.	 *	 * @param string $id An internal ID/name for the handler. Needs to be unique.	 * @param string $regex The regex that will be used to see if this handler should be used for a URL.	 * @param callback $callback The callback function that will be called if the regex is matched.	 * @param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.	 */	function register_handler( $id, $regex, $callback, $priority = 10 ) {		$this->handlers[$priority][$id] = array(			'regex'    => $regex,			'callback' => $callback,		);	}	/**	 * Unregister a previously registered embed handler. Do not use this function directly, use {@link wp_embed_unregister_handler()} instead.	 *	 * @param string $id The handler ID that should be removed.	 * @param int $priority Optional. The priority of the handler to be removed (default: 10).	 */	function unregister_handler( $id, $priority = 10 ) {		if ( isset($this->handlers[$priority][$id]) )			unset($this->handlers[$priority][$id]);	}	/**	 * The {@link do_shortcode()} callback function.	 *	 * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers.	 * If none of the regex matches and it's enabled, then the URL will be given to the {@link WP_oEmbed} class.	 *	 * @uses wp_oembed_get()	 * @uses wp_parse_args()	 * @uses wp_embed_defaults()	 * @uses WP_Embed::maybe_make_link()	 * @uses get_option()	 * @uses current_user_can()	 * @uses wp_cache_get()	 * @uses wp_cache_set()	 * @uses get_post_meta()	 * @uses update_post_meta()	 *	 * @param array $attr Shortcode attributes.	 * @param string $url The URL attempting to be embeded.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function shortcode( $attr, $url = '' ) {		global $post;		if ( empty($url) )			return '';		$rawattr = $attr;		$attr = wp_parse_args( $attr, wp_embed_defaults() );		// Look for known internal handlers		ksort( $this->handlers );		foreach ( $this->handlers as $priority => $handlers ) {			foreach ( $handlers as $id => $handler ) {				if ( preg_match( $handler['regex'], $url, $matches ) && is_callable( $handler['callback'] ) ) {					if ( false !== $return = call_user_func( $handler['callback'], $matches, $attr, $url, $rawattr ) )						return apply_filters( 'embed_handler_html', $return, $url, $attr );				}			}		}		$post_ID = ( !empty($post->ID) ) ? $post->ID : null;		if ( !empty($this->post_ID) ) // Potentially set by WP_Embed::cache_oembed()			$post_ID = $this->post_ID;		// Unknown URL format. Let oEmbed have a go.		if ( $post_ID ) {			// Check for a cached result (stored in the post meta)			$cachekey = '_oembed_' . md5( $url . serialize( $attr ) );			if ( $this->usecache ) {				$cache = get_post_meta( $post_ID, $cachekey, true );				// Failures are cached				if ( '{{unknown}}' === $cache )					return $this->maybe_make_link( $url );				if ( !empty($cache) )					return apply_filters( 'embed_oembed_html', $cache, $url, $attr );			}			// Use oEmbed to get the HTML			$attr['discover'] = ( apply_filters('embed_oembed_discover', false) && author_can( $post_ID, 'unfiltered_html' ) );			$html = wp_oembed_get( $url, $attr );			// Cache the result			$cache = ( $html ) ? $html : '{{unknown}}';			update_post_meta( $post_ID, $cachekey, $cache );			// If there was a result, return it			if ( $html )				return apply_filters( 'embed_oembed_html', $html, $url, $attr );		}		// Still unknown		return $this->maybe_make_link( $url );	}	/**	 * Delete all oEmbed caches.	 *	 * @param int $post_ID Post ID to delete the caches for.	 */	function delete_oembed_caches( $post_ID ) {		$post_metas = get_post_custom_keys( $post_ID );		if ( empty($post_metas) )			return;		foreach( $post_metas as $post_meta_key ) {			if ( '_oembed_' == substr( $post_meta_key, 0, 8 ) )				delete_post_meta( $post_ID, $post_meta_key );		}	}	/**	 * Triggers a caching of all oEmbed results.	 *	 * @param int $post_ID Post ID to do the caching for.	 */	function cache_oembed( $post_ID ) {		$post = get_post( $post_ID );		if ( empty($post->ID) || !in_array( $post->post_type, apply_filters( 'embed_cache_oembed_types', array( 'post', 'page' ) ) ) )			return;		// Trigger a caching		if ( !empty($post->post_content) ) {			$this->post_ID = $post->ID;			$this->usecache = false;			$content = $this->run_shortcode( $post->post_content );			if ( get_option('embed_autourls') )				$this->autoembed( $content );			$this->usecache = true;		}	}	/**	 * Passes any unlinked URLs that are on their own line to {@link WP_Embed::shortcode()} for potential embedding.	 *	 * @uses WP_Embed::autoembed_callback()	 *	 * @param string $content The content to be searched.	 * @return string Potentially modified $content.	 */	function autoembed( $content ) {		return preg_replace_callback( '|^\s*(https?://[^\s"]+)\s*$|im', array(&$this, 'autoembed_callback'), $content );	}	/**	 * Callback function for {@link WP_Embed::autoembed()}.	 *	 * @uses WP_Embed::shortcode()	 *	 * @param array $match A regex match array.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function autoembed_callback( $match ) {		$oldval = $this->linkifunknown;		$this->linkifunknown = false;		$return = $this->shortcode( array(), $match[1] );		$this->linkifunknown = $oldval;		return "\n$return\n";	}	/**	 * Conditionally makes a hyperlink based on an internal class variable.	 *	 * @param string $url URL to potentially be linked.	 * @return string Linked URL or the original URL.	 */	function maybe_make_link( $url ) {		$output = ( $this->linkifunknown ) ? '<a href="' . esc_attr($url) . '">' . esc_html($url) . '</a>' : $url;		return apply_filters( 'embed_maybe_make_link', $output, $url );	}}$wp_embed = new WP_Embed();/** * Register an embed handler. This function should probably only be used for sites that do not support oEmbed. * * @since 2.9.0 * @see WP_Embed::register_handler() */function wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {	global $wp_embed;	$wp_embed->register_handler( $id, $regex, $callback, $priority );}/** * Unregister a previously registered embed handler. * * @since 2.9.0 * @see WP_Embed::unregister_handler() */function wp_embed_unregister_handler( $id, $priority = 10 ) {	global $wp_embed;	$wp_embed->unregister_handler( $id, $priority );}/** * Create default array of embed parameters. * * @since 2.9.0 * * @return array Default embed parameters. */function wp_embed_defaults() {	if ( !empty($GLOBALS['content_width']) )		$theme_width = (int) $GLOBALS['content_width'];	$width = get_option('embed_size_w');	if ( empty($width) && !empty($theme_width) )		$width = $theme_width;	if ( empty($width) )		$width = 500;	$height = get_option('embed_size_h');	if ( empty($height) )		$height = 700;	return apply_filters( 'embed_defaults', array(		'width'  => $width,		'height' => $height,	) );}/** * Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height. * * @since 2.9.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $example_width The width of an example embed. * @param int $example_height The height of an example embed. * @param int $max_width The maximum allowed width. * @param int $max_height The maximum allowed height. * @return array The maximum possible width and height based on the example ratio. */function wp_expand_dimensions( $example_width, $example_height, $max_width, $max_height ) {	$example_width  = (int) $example_width;	$example_height = (int) $example_height;	$max_width      = (int) $max_width;	$max_height     = (int) $max_height;	return wp_constrain_dimensions( $example_width * 1000000, $example_height * 1000000, $max_width, $max_height );}/** * Attempts to fetch the embed HTML for a provided URL using oEmbed. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * @uses WP_oEmbed::get_html() * * @param string $url The URL that should be embeded. * @param array $args Addtional arguments and parameters. * @return string The original URL on failure or the embed HTML on success. */function wp_oembed_get( $url, $args = '' ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	return $oembed->get_html( $url, $args );}/** * Adds a URL format and oEmbed provider URL pair. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * * @param string $format The format of URL that this provider can handle. You can use asterisks as wildcards. * @param string $provider The URL to the oEmbed provider. * @param boolean $regex Whether the $format parameter is in a regex format. */function wp_oembed_add_provider( $format, $provider, $regex = false ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	$oembed->providers[$format] = array( $provider, $regex );}
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/** * Navigation Menu functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Returns a navigation menu object. * * @since 3.0.0 * * @uses get_term * @uses get_term_by * * @param string $menu Menu id, slug or name * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful. */function wp_get_nav_menu_object( $menu ) {	if ( ! $menu )		return false;	$menu_obj = get_term( $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'slug', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'name', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = false;	return $menu_obj;}/** * Check if the given ID is a navigation menu. * * Returns true if it is; false otherwise. * * @since 3.0.0 * * @param int|string $menu The menu to check (id, slug, or name) * @return bool Whether the menu exists. */function is_nav_menu( $menu ) {	if ( ! $menu )		return false;	$menu_obj = wp_get_nav_menu_object( $menu );	if (		$menu_obj &&		! is_wp_error( $menu_obj ) &&		! empty( $menu_obj->taxonomy ) &&		'nav_menu' == $menu_obj->taxonomy	)		return true;	return false;}/** * Register navigation menus for a theme. * * @since 3.0.0 * * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text. */function register_nav_menus( $locations = array() ) {	global $_wp_registered_nav_menus;	add_theme_support( 'menus' );	$_wp_registered_nav_menus = array_merge( (array) $_wp_registered_nav_menus, $locations );}/** * Register a navigation menu for a theme. * * @since 3.0.0 * * @param string $location Menu location identifier, like a slug. * @param string $description Menu location descriptive text. */function register_nav_menu( $location, $description ) {	register_nav_menus( array( $location => $description ) );}/** * Returns an array of all registered navigation menus in a theme * * @since 3.0.0 * @return array */function get_registered_nav_menus() {	global $_wp_registered_nav_menus;	if ( isset( $_wp_registered_nav_menus ) )		return $_wp_registered_nav_menus;	return array();}/** * Returns an array with the registered navigation menu locations and the menu assigned to it * * @since 3.0.0 * @return array */function get_nav_menu_locations() {	return get_theme_mod( 'nav_menu_locations' );}/** * Whether a registered nav menu location has a menu assigned to it. * * @since 3.0.0 * @param string $location Menu location identifier. * @return bool Whether location has a menu. */function has_nav_menu( $location ) {	$locations = get_nav_menu_locations();	return ( ! empty( $locations[ $location ] ) );}/** * Determine whether the given ID is a nav menu item. * * @since 3.0.0 * * @param int $menu_item_id The ID of the potential nav menu item. * @return bool Whether the given ID is that of a nav menu item. */function is_nav_menu_item( $menu_item_id = 0 ) {	return ( ! is_wp_error( $menu_item_id ) && ( 'nav_menu_item' == get_post_type( $menu_item_id ) ) );}/** * Create a Navigation Menu. * * @since 3.0.0 * * @param string $menu_name Menu Name * @return mixed Menu object on success|WP_Error on failure */function wp_create_nav_menu( $menu_name ) {	return wp_update_nav_menu_object( 0, array( 'menu-name' => $menu_name ) );}/** * Delete a Navigation Menu. * * @since 3.0.0 * * @param string $menu name|id|slug * @return mixed Menu object on success|WP_Error on failure */function wp_delete_nav_menu( $menu ) {	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	$menu_objects = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( ! empty( $menu_objects ) ) {		foreach ( $menu_objects as $item ) {			wp_delete_post( $item );		}	}	$result = wp_delete_term( $menu->term_id, 'nav_menu' );	if ( $result && !is_wp_error($result) )		do_action( 'wp_delete_nav_menu', $menu->term_id );	return $result;}/** * Save the properties of a menu or create a new menu with those properties. * * @since 3.0.0 * * @param int $menu_id The ID of the menu or "0" to create a new menu. * @param array $menu_data The array of menu data. * @return int|error object The menu's ID or WP_Error object. */function wp_update_nav_menu_object( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$_menu = wp_get_nav_menu_object( $menu_id );	$args = array(		'description' => ( isset( $menu_data['description'] ) ? $menu_data['description']  : '' ),		'name'        => ( isset( $menu_data['menu-name']   ) ? $menu_data['menu-name']    : '' ),		'parent'      => ( isset( $menu_data['parent']      ) ? (int) $menu_data['parent'] : 0  ),		'slug'        => null,	);	// double-check that we're not going to have one menu take the name of another	$_possible_existing = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );	if (		$_possible_existing &&		! is_wp_error( $_possible_existing ) &&		isset( $_possible_existing->term_id ) &&		$_possible_existing->term_id != $menu_id	)		return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );	// menu doesn't already exist, so create a new menu	if ( ! $_menu || is_wp_error( $_menu ) ) {		$menu_exists = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );		if ( $menu_exists )			return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );		$_menu = wp_insert_term( $menu_data['menu-name'], 'nav_menu', $args );		if ( is_wp_error( $_menu ) )			return $_menu;		do_action( 'wp_create_nav_menu', $_menu['term_id'], $menu_data );		return (int) $_menu['term_id'];	}	if ( ! $_menu || ! isset( $_menu->term_id ) )		return 0;	$menu_id = (int) $_menu->term_id;	$update_response = wp_update_term( $menu_id, 'nav_menu', $args );	if ( is_wp_error( $update_response ) )		return $update_response;	do_action( 'wp_update_nav_menu', $menu_id, $menu_data );	return $menu_id;}/** * Save the properties of a menu item or create a new one. * * @since 3.0.0 * * @param int $menu_id The ID of the menu. Required. If "0", makes the menu item a draft orphan. * @param int $menu_item_db_id The ID of the menu item. If "0", creates a new menu item. * @param array $menu_item_data The menu item's data. * @return int The menu item's database ID or WP_Error object on failure. */function wp_update_nav_menu_item( $menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array() ) {	$menu_id = (int) $menu_id;	$menu_item_db_id = (int) $menu_item_db_id;	// make sure that we don't convert non-nav_menu_item objects into nav_menu_item objects	if ( ! empty( $menu_item_db_id ) && ! is_nav_menu_item( $menu_item_db_id ) )		return new WP_Error('update_nav_menu_item_failed', __('The given object ID is not that of a menu item.'));	$menu = wp_get_nav_menu_object( $menu_id );	if ( ( ! $menu && 0 !== $menu_id ) || is_wp_error( $menu ) )		return $menu;	$menu_items = 0 == $menu_id ? array() : (array) wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );	$count = count( $menu_items );	$defaults = array(		'menu-item-db-id' => $menu_item_db_id,		'menu-item-object-id' => 0,		'menu-item-object' => '',		'menu-item-parent-id' => 0,		'menu-item-position' => 0,		'menu-item-type' => 'custom',		'menu-item-title' => '',		'menu-item-url' => '',		'menu-item-description' => '',		'menu-item-attr-title' => '',		'menu-item-target' => '',		'menu-item-classes' => '',		'menu-item-xfn' => '',		'menu-item-status' => '',	);	$args = wp_parse_args( $menu_item_data, $defaults );	if ( 0 == $menu_id ) {		$args['menu-item-position'] = 1;	} elseif ( 0 == (int) $args['menu-item-position'] ) {		$last_item = array_pop( $menu_items );		$args['menu-item-position'] = ( $last_item && isset( $last_item->menu_order ) ) ? 1 + $last_item->menu_order : $count;	}	$original_parent = 0 < $menu_item_db_id ? get_post_field( 'post_parent', $menu_item_db_id ) : 0;	if ( 'custom' != $args['menu-item-type'] ) {		/* if non-custom menu item, then:			* use original object's URL			* blank default title to sync with original object's		*/		$args['menu-item-url'] = '';		$original_title = '';		if ( 'taxonomy' == $args['menu-item-type'] ) {			$original_parent = get_term_field( 'parent', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );			$original_title = get_term_field( 'name', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );		} elseif ( 'post_type' == $args['menu-item-type'] ) {			$original_object = get_post( $args['menu-item-object-id'] );			$original_parent = (int) $original_object->post_parent;			$original_title = $original_object->post_title;		}		if ( empty( $args['menu-item-title'] ) || $args['menu-item-title'] == $original_title ) {			$args['menu-item-title'] = '';			// hack to get wp to create a post object when too many properties are empty			if ( empty( $args['menu-item-description'] ) )				$args['menu-item-description'] = ' ';		}	}	// Populate the menu item object	$post = array(		'menu_order' => $args['menu-item-position'],		'ping_status' => 0,		'post_content' => $args['menu-item-description'],		'post_excerpt' => $args['menu-item-attr-title'],		'post_parent' => $original_parent,		'post_title' => $args['menu-item-title'],		'post_type' => 'nav_menu_item',	);	if ( 0 != $menu_id )		$post['tax_input'] = array( 'nav_menu' => array( intval( $menu->term_id ) ) );	// New menu item. Default is draft status	if ( 0 == $menu_item_db_id ) {		$post['ID'] = 0;		$post['post_status'] = 'publish' == $args['menu-item-status'] ? 'publish' : 'draft';		$menu_item_db_id = wp_insert_post( $post );	// Update existing menu item. Default is publish status	} else {		$post['ID'] = $menu_item_db_id;		$post['post_status'] = 'draft' == $args['menu-item-status'] ? 'draft' : 'publish';		wp_update_post( $post );	}	if ( 'custom' == $args['menu-item-type'] ) {		$args['menu-item-object-id'] = $menu_item_db_id;		$args['menu-item-object'] = 'custom';	}	if ( ! $menu_item_db_id || is_wp_error( $menu_item_db_id ) )		return $menu_item_db_id;	$menu_item_db_id = (int) $menu_item_db_id;	update_post_meta( $menu_item_db_id, '_menu_item_type', sanitize_key($args['menu-item-type']) );	update_post_meta( $menu_item_db_id, '_menu_item_menu_item_parent', (int) $args['menu-item-parent-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object_id', (int) $args['menu-item-object-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object', sanitize_key($args['menu-item-object']) );	update_post_meta( $menu_item_db_id, '_menu_item_target', sanitize_key($args['menu-item-target']) );	$args['menu-item-classes'] = array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-classes'] ) );	$args['menu-item-xfn'] = implode( ' ', array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-xfn'] ) ) );	update_post_meta( $menu_item_db_id, '_menu_item_classes', $args['menu-item-classes'] );	update_post_meta( $menu_item_db_id, '_menu_item_xfn', $args['menu-item-xfn'] );	update_post_meta( $menu_item_db_id, '_menu_item_url', esc_url_raw($args['menu-item-url']) );	if ( 0 == $menu_id )		update_post_meta( $menu_item_db_id, '_menu_item_orphaned', time() );	else		delete_post_meta( $menu_item_db_id, '_menu_item_orphaned' );	do_action('wp_update_nav_menu_item', $menu_id, $menu_item_db_id, $args );	return $menu_item_db_id;}/** * Returns all navigation menu objects. * * @since 3.0.0 * * @param $args array Array of arguments passed on to get_terms(). * @return array menu objects */function wp_get_nav_menus( $args = array() ) {	$defaults = array( 'hide_empty' => false, 'orderby' => 'none' );	$args = wp_parse_args( $args, $defaults );	return apply_filters( 'wp_get_nav_menus', get_terms( 'nav_menu',  $args), $args );}/** * Sort menu items by the desired key. * * @since 3.0.0 * @access private * * @param object $a The first object to compare * @param object $b The second object to compare * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b. */function _sort_nav_menu_items( $a, $b ) {	global $_menu_item_sort_prop;	if ( empty( $_menu_item_sort_prop ) )		return 0;	if ( ! isset( $a->$_menu_item_sort_prop ) || ! isset( $b->$_menu_item_sort_prop ) )		return 0;	$_a = (int) $a->$_menu_item_sort_prop;	$_b = (int) $b->$_menu_item_sort_prop;	if ( $a->$_menu_item_sort_prop == $b->$_menu_item_sort_prop )		return 0;	elseif ( $_a == $a->$_menu_item_sort_prop && $_b == $b->$_menu_item_sort_prop )		return $_a < $_b ? -1 : 1;	else		return strcmp( $a->$_menu_item_sort_prop, $b->$_menu_item_sort_prop );}/** * Returns all menu items of a navigation menu. * * @since 3.0.0 * * @param string $menu menu name, id, or slug * @param string $args * @return mixed $items array of menu items, else false. */function wp_get_nav_menu_items( $menu, $args = array() ) {	global $_wp_using_ext_object_cache;	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	static $fetched = array();	$items = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( empty( $items ) )		return $items;	$defaults = array( 'order' => 'ASC', 'orderby' => 'menu_order', 'post_type' => 'nav_menu_item',		'post_status' => 'publish', 'output' => ARRAY_A, 'output_key' => 'menu_order', 'nopaging' => true,		'update_post_term_cache' => false );	$args = wp_parse_args( $args, $defaults );	if ( count( $items ) > 1 )		$args['include'] = implode( ',', $items );	else		$args['include'] = $items[0];	$items = get_posts( $args );	if ( is_wp_error( $items ) || ! is_array( $items ) )		return false;	// Get all posts and terms at once to prime the caches	if ( empty( $fetched[$menu->term_id] ) || $_wp_using_ext_object_cache ) {		$fetched[$menu->term_id] = true;		$posts = array();		$terms = array();		foreach ( $items as $item ) {			$object_id = get_post_meta( $item->ID, '_menu_item_object_id', true );			$object    = get_post_meta( $item->ID, '_menu_item_object',    true );			$type      = get_post_meta( $item->ID, '_menu_item_type',      true );			if ( 'post_type' == $type )				$posts[$object][] = $object_id;			elseif ( 'taxonomy' == $type)				$terms[$object][] = $object_id;		}		if ( ! empty( $posts ) ) {			foreach ( array_keys($posts) as $post_type ) {				get_posts( array('post__in' => $posts[$post_type], 'post_type' => $post_type, 'nopaging' => true, 'update_post_term_cache' => false) );			}		}		unset($posts);		if ( ! empty( $terms ) ) {			foreach ( array_keys($terms) as $taxonomy ) {				get_terms($taxonomy, array('include' => $terms[$taxonomy]) );			}		}		unset($terms);	}	$items = array_map( 'wp_setup_nav_menu_item', $items );	if ( ARRAY_A == $args['output'] ) {		$GLOBALS['_menu_item_sort_prop'] = $args['output_key'];		usort($items, '_sort_nav_menu_items');		$i = 1;		foreach( $items as $k => $item ) {			$items[$k]->$args['output_key'] = $i++;		}	}	return apply_filters( 'wp_get_nav_menu_items',  $items, $menu, $args );}/** * Decorates a menu item object with the shared navigation menu item properties. * * Properties: * - db_id: 		The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist). * - object_id:		The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. * - type:		The family of objects originally represented, such as "post_type" or "taxonomy." * - object:		The type of object originally represented, such as "category," "post", or "attachment." * - type_label:	The singular label used to describe this type of menu item. * - post_parent:	The DB ID of the original object's parent object, if any (0 otherwise). * - menu_item_parent: 	The DB ID of the nav_menu_item that is this item's menu parent, if any.  0 otherwise. * - url:		The URL to which this menu item points. * - title:		The title of this menu item. * - target: 		The target attribute of the link element for this menu item. * - attr_title:	The title attribute of the link element for this menu item. * - classes:		The array of class attribute values for the link element of this menu item. * - xfn:		The XFN relationship expressed in the link of this menu item. * - description:	The description of this menu item. * * @since 3.0.0 * * @param object $menu_item The menu item to modify. * @return object $menu_item The menu item with standard menu item properties. */function wp_setup_nav_menu_item( $menu_item ) {	if ( isset( $menu_item->post_type ) ) {		if ( 'nav_menu_item' == $menu_item->post_type ) {			$menu_item->db_id = (int) $menu_item->ID;			$menu_item->menu_item_parent = empty( $menu_item->menu_item_parent ) ? get_post_meta( $menu_item->ID, '_menu_item_menu_item_parent', true ) : $menu_item->menu_item_parent;			$menu_item->object_id = empty( $menu_item->object_id ) ? get_post_meta( $menu_item->ID, '_menu_item_object_id', true ) : $menu_item->object_id;			$menu_item->object = empty( $menu_item->object ) ? get_post_meta( $menu_item->ID, '_menu_item_object', true ) : $menu_item->object;			$menu_item->type = empty( $menu_item->type ) ? get_post_meta( $menu_item->ID, '_menu_item_type', true ) : $menu_item->type;			if ( 'post_type' == $menu_item->type ) {				$object = get_post_type_object( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$menu_item->url = get_permalink( $menu_item->object_id );				$original_object = get_post( $menu_item->object_id );				$original_title = $original_object->post_title;				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} elseif ( 'taxonomy' == $menu_item->type ) {				$object = get_taxonomy( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$term_url = get_term_link( (int) $menu_item->object_id, $menu_item->object );				$menu_item->url = !is_wp_error( $term_url ) ? $term_url : '';				$original_title = get_term_field( 'name', $menu_item->object_id, $menu_item->object, 'raw' );				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} else {				$menu_item->type_label = __('Custom');				$menu_item->title = $menu_item->post_title;				$menu_item->url = empty( $menu_item->url ) ? get_post_meta( $menu_item->ID, '_menu_item_url', true ) : $menu_item->url;			}			$menu_item->target = empty( $menu_item->target ) ? get_post_meta( $menu_item->ID, '_menu_item_target', true ) : $menu_item->target;			$menu_item->attr_title = empty( $menu_item->attr_title ) ? apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt ) : $menu_item->attr_title;			$menu_item->description = empty( $menu_item->description ) ? apply_filters( 'nav_menu_description', $menu_item->post_content ) : $menu_item->description;			$menu_item->classes = empty( $menu_item->classes ) ? (array) get_post_meta( $menu_item->ID, '_menu_item_classes', true ) : $menu_item->classes;			$menu_item->xfn = empty( $menu_item->xfn ) ? get_post_meta( $menu_item->ID, '_menu_item_xfn', true ) : $menu_item->xfn;		} else {			$menu_item->db_id = 0;			$menu_item->menu_item_parent = 0;			$menu_item->object_id = (int) $menu_item->ID;			$menu_item->type = 'post_type';			$object = get_post_type_object( $menu_item->post_type );			$menu_item->object = $object->name;			$menu_item->type_label = $object->labels->singular_name;			$menu_item->title = $menu_item->post_title;			$menu_item->url = get_permalink( $menu_item->ID );			$menu_item->target = '';			$menu_item->attr_title = apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt );			$menu_item->description = apply_filters( 'nav_menu_description', $menu_item->post_content );			$menu_item->classes = array();			$menu_item->xfn = '';		}	} elseif ( isset( $menu_item->taxonomy ) ) {		$menu_item->ID = $menu_item->term_id;		$menu_item->db_id = 0;		$menu_item->menu_item_parent = 0;		$menu_item->object_id = (int) $menu_item->term_id;		$menu_item->post_parent = (int) $menu_item->parent;		$menu_item->type = 'taxonomy';		$object = get_taxonomy( $menu_item->taxonomy );		$menu_item->object = $object->name;		$menu_item->type_label = $object->labels->singular_name;		$menu_item->title = $menu_item->name;		$menu_item->url = get_term_link( $menu_item, $menu_item->taxonomy );		$menu_item->target = '';		$menu_item->attr_title = '';		$menu_item->description = get_term_field( 'description', $menu_item->term_id, $menu_item->taxonomy );		$menu_item->classes = array();		$menu_item->xfn = '';	}	return apply_filters( 'wp_setup_nav_menu_item', $menu_item );}/** * Get the menu items associated with a particular object. * * @since 3.0.0 * * @param int $object_id The ID of the original object. * @param string $object_type The type of object, such as "taxonomy" or "post_type." * @return array The array of menu item IDs; empty array if none; */function wp_get_associated_nav_menu_items( $object_id = 0, $object_type = 'post_type' ) {	$object_id = (int) $object_id;	$menu_item_ids = array();	$query = new WP_Query;	$menu_items = $query->query(		array(			'meta_key' => '_menu_item_object_id',			'meta_value' => $object_id,			'post_status' => 'any',			'post_type' => 'nav_menu_item',			'showposts' => -1,		)	);	foreach( (array) $menu_items as $menu_item ) {		if ( isset( $menu_item->ID ) && is_nav_menu_item( $menu_item->ID ) ) {			if ( get_post_meta( $menu_item->ID, '_menu_item_type', true ) != $object_type )				continue;			$menu_item_ids[] = (int) $menu_item->ID;		}	}	return array_unique( $menu_item_ids );}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_post_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'post_type' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_tax_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'taxonomy' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Automatically add newly published page objects to menus with that as an option. * * @since 3.0.0 * @access private * * @param string $new_status The new status of the post object. * @param string $old_status The old status of the post object. * @param object $post The post object being transitioned from one status to another. * @return void */function _wp_auto_add_pages_to_menu( $new_status, $old_status, $post ) {	if ( 'publish' != $new_status || 'publish' == $old_status || 'page' != $post->post_type )		return;	if ( ! empty( $post->post_parent ) )		return;	$auto_add = get_option( 'nav_menu_options' );	if ( empty( $auto_add ) || ! is_array( $auto_add ) || ! isset( $auto_add['auto_add'] ) )		return;	$auto_add = $auto_add['auto_add'];	if ( empty( $auto_add ) || ! is_array( $auto_add ) )		return;	$args = array(		'menu-item-object-id' => $post->ID,		'menu-item-object' => $post->post_type,		'menu-item-type' => 'post_type',		'menu-item-status' => 'publish',	);	foreach ( $auto_add as $menu_id ) {		$items = wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );		if ( ! is_array( $items ) )			continue;		foreach ( $items as $item ) {			if ( $post->ID == $item->object_id )				continue 2;		}		wp_update_nav_menu_item( $menu_id, 0, $args );	}}?>
<?php/** * Simple and uniform HTTP request API. * * Will eventually replace and standardize the WordPress HTTP requests made. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * Returns the initialized WP_Http Object * * @since 2.7.0 * @access private * * @return WP_Http HTTP Transport object. */function &_wp_http_get_object() {	static $http;	if ( is_null($http) )		$http = new WP_Http();	return $http;}/** * Retrieve the raw response from the HTTP request. * * The array structure is a little complex. * * <code> * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) ); * </code> * * All of the headers in $res['headers'] are with the name as the key and the * value as the value. So to get the User-Agent, you would do the following. * * <code> * $user_agent = $res['headers']['user-agent']; * </code> * * The body is the raw response content and can be retrieved from $res['body']. * * This function is called first to make the request and there are other API * functions to abstract out the above convoluted setup. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_request($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->request($url, $args);}/** * Retrieve the raw response from the HTTP request using the GET method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_get($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->get($url, $args);}/** * Retrieve the raw response from the HTTP request using the POST method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_post($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->post($url, $args);}/** * Retrieve the raw response from the HTTP request using the HEAD method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_head($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->head($url, $args);}/** * Retrieve only the headers from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return array The headers of the response. Empty array if incorrect parameter given. */function wp_remote_retrieve_headers(&$response) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return array();	return $response['headers'];}/** * Retrieve a single header by name from the raw response. * * @since 2.7.0 * * @param array $response * @param string $header Header name to retrieve value from. * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. */function wp_remote_retrieve_header(&$response, $header) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return '';	if ( array_key_exists($header, $response['headers']) )		return $response['headers'][$header];	return '';}/** * Retrieve only the response code from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string the response code. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_code(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['code'];}/** * Retrieve only the response message from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The response message. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_message(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['message'];}/** * Retrieve only the body from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The body of the response. Empty string if no body or incorrect parameter given. */function wp_remote_retrieve_body(&$response) {	if ( is_wp_error($response) || ! isset($response['body']) )		return '';	return $response['body'];}?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * Atom Syndication Format PHP Library * * @package AtomLib * @link http://code.google.com/p/phpatomlib/ * * @author Elias Torres <elias@torrez.us> * @version 0.4 * @since 2.3 *//** * Structure that store common Atom Feed Properties * * @package AtomLib */class AtomFeed {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array     * @access public     */    var $categories = array();	/**	 * Stores Entries	 *	 * @var array	 * @access public	 */    var $entries = array();}/** * Structure that store Atom Entry Properties * * @package AtomLib */class AtomEntry {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array	 * @access public     */    var $categories = array();}/** * AtomLib Atom Parser API * * @package AtomLib */class AtomParser {    var $NS = 'http://www.w3.org/2005/Atom';    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');    var $debug = false;    var $depth = 0;    var $indent = 2;    var $in_content;    var $ns_contexts = array();    var $ns_decls = array();    var $content_ns_decls = array();    var $content_ns_contexts = array();    var $is_xhtml = false;    var $is_html = false;    var $is_text = true;    var $skipped_div = false;    var $FILE = "php://input";    var $feed;    var $current;    function AtomParser() {        $this->feed = new AtomFeed();        $this->current = null;        $this->map_attrs_func = create_function('$k,$v', 'return "$k=\"$v\"";');        $this->map_xmlns_func = create_function('$p,$n', '$xd = "xmlns"; if(strlen($n[0])>0) $xd .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');    }    function _p($msg) {        if($this->debug) {            print str_repeat(" ", $this->depth * $this->indent) . $msg ."\n";        }    }    function error_handler($log_level, $log_text, $error_file, $error_line) {        $this->error = $log_text;    }    function parse() {        set_error_handler(array(&$this, 'error_handler'));        array_unshift($this->ns_contexts, array());        $parser = xml_parser_create_ns();        xml_set_object($parser, $this);        xml_set_element_handler($parser, "start_element", "end_element");        xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);        xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,0);        xml_set_character_data_handler($parser, "cdata");        xml_set_default_handler($parser, "_default");        xml_set_start_namespace_decl_handler($parser, "start_ns");        xml_set_end_namespace_decl_handler($parser, "end_ns");        $this->content = '';        $ret = true;        $fp = fopen($this->FILE, "r");        while ($data = fread($fp, 4096)) {            if($this->debug) $this->content .= $data;            if(!xml_parse($parser, $data, feof($fp))) {                trigger_error(sprintf(__('XML error: %s at line %d')."\n",                    xml_error_string(xml_get_error_code($xml_parser)),                    xml_get_current_line_number($xml_parser)));                $ret = false;                break;            }        }        fclose($fp);        xml_parser_free($parser);        restore_error_handler();        return $ret;    }    function start_element($parser, $name, $attrs) {        $tag = array_pop(split(":", $name));        switch($name) {            case $this->NS . ':feed':                $this->current = $this->feed;                break;            case $this->NS . ':entry':                $this->current = new AtomEntry();                break;        };        $this->_p("start_element('$name')");        #$this->_p(print_r($this->ns_contexts,true));        #$this->_p('current(' . $this->current . ')');        array_unshift($this->ns_contexts, $this->ns_decls);        $this->depth++;        if(!empty($this->in_content)) {            $this->content_ns_decls = array();            if($this->is_html || $this->is_text)                trigger_error("Invalid content in element found. Content must not be of type text or html if it contains markup.");            $attrs_prefix = array();            // resolve prefixes for attributes            foreach($attrs as $key => $value) {                $with_prefix = $this->ns_to_prefix($key, true);                $attrs_prefix[$with_prefix[1]] = $this->xml_escape($value);            }            $attrs_str = join(' ', array_map($this->map_attrs_func, array_keys($attrs_prefix), array_values($attrs_prefix)));            if(strlen($attrs_str) > 0) {                $attrs_str = " " . $attrs_str;            }            $with_prefix = $this->ns_to_prefix($name);            if(!$this->is_declared_content_ns($with_prefix[0])) {                array_push($this->content_ns_decls, $with_prefix[0]);            }            $xmlns_str = '';            if(count($this->content_ns_decls) > 0) {                array_unshift($this->content_ns_contexts, $this->content_ns_decls);                $xmlns_str .= join(' ', array_map($this->map_xmlns_func, array_keys($this->content_ns_contexts[0]), array_values($this->content_ns_contexts[0])));                if(strlen($xmlns_str) > 0) {                    $xmlns_str = " " . $xmlns_str;                }            }            array_push($this->in_content, array($tag, $this->depth, "<". $with_prefix[1] ."{$xmlns_str}{$attrs_str}" . ">"));        } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {            $this->in_content = array();            $this->is_xhtml = $attrs['type'] == 'xhtml';            $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';            $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';            $type = $this->is_xhtml ? 'XHTML' : ($this->is_html ? 'HTML' : ($this->is_text ? 'TEXT' : $attrs['type']));            if(in_array('src',array_keys($attrs))) {                $this->current->$tag = $attrs;            } else {                array_push($this->in_content, array($tag,$this->depth, $type));            }        } else if($tag == 'link') {            array_push($this->current->links, $attrs);        } else if($tag == 'category') {            array_push($this->current->categories, $attrs);        }        $this->ns_decls = array();    }    function end_element($parser, $name) {        $tag = array_pop(split(":", $name));        $ccount = count($this->in_content);        # if we are *in* content, then let's proceed to serialize it        if(!empty($this->in_content)) {            # if we are ending the original content element            # then let's finalize the content            if($this->in_content[0][0] == $tag &&                $this->in_content[0][1] == $this->depth) {                $origtype = $this->in_content[0][2];                array_shift($this->in_content);                $newcontent = array();                foreach($this->in_content as $c) {                    if(count($c) == 3) {                        array_push($newcontent, $c[2]);                    } else {                        if($this->is_xhtml || $this->is_text) {                            array_push($newcontent, $this->xml_escape($c));                        } else {                            array_push($newcontent, $c);                        }                    }                }                if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {                    $this->current->$tag = array($origtype, join('',$newcontent));                } else {                    $this->current->$tag = join('',$newcontent);                }                $this->in_content = array();            } else if($this->in_content[$ccount-1][0] == $tag &&                $this->in_content[$ccount-1][1] == $this->depth) {                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . "/>";            } else {                # else, just finalize the current element's content                $endtag = $this->ns_to_prefix($name);                array_push($this->in_content, array($tag, $this->depth, "</$endtag[1]>"));            }        }        array_shift($this->ns_contexts);        $this->depth--;        if($name == ($this->NS . ':entry')) {            array_push($this->feed->entries, $this->current);            $this->current = null;        }        $this->_p("end_element('$name')");    }    function start_ns($parser, $prefix, $uri) {        $this->_p("starting: " . $prefix . ":" . $uri);        array_push($this->ns_decls, array($prefix,$uri));    }    function end_ns($parser, $prefix) {        $this->_p("ending: #" . $prefix . "#");    }    function cdata($parser, $data) {        $this->_p("data: #" . str_replace(array("\n"), array("\\n"), trim($data)) . "#");        if(!empty($this->in_content)) {            array_push($this->in_content, $data);        }    }    function _default($parser, $data) {        # when does this gets called?    }    function ns_to_prefix($qname, $attr=false) {        # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')        $components = split(":", $qname);        # grab the last one (e.g 'div')        $name = array_pop($components);        if(!empty($components)) {            # re-join back the namespace component            $ns = join(":",$components);            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {                        return array($mapping, "$mapping[0]:$name");                    }                }            }        }        if($attr) {            return array(null, $name);        } else {            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if(strlen($mapping[0]) == 0) {                        return array($mapping, $name);                    }                }            }        }    }    function is_declared_content_ns($new_mapping) {        foreach($this->content_ns_contexts as $context) {            foreach($context as $mapping) {                if($new_mapping == $mapping) {                    return true;                }            }        }        return false;    }    function xml_escape($string)    {             return str_replace(array('&','"',"'",'<','>'),                array('&amp;','&quot;','&apos;','&lt;','&gt;'),                $string );    }}?>
<?php/** * HTML/XHTML filter that only allows some elements and attributes * * Added wp_ prefix to avoid conflicts with existing kses users * * @version 0.2.2 * @copyright (C) 2002, 2003, 2005 * @author Ulf Harnhammar <metaur@users.sourceforge.net> * * @package External * @subpackage KSES * * @internal * *** CONTACT INFORMATION *** * E-mail:      metaur at users dot sourceforge dot net * Web page:    http://sourceforge.net/projects/kses * Paper mail:  Ulf Harnhammar *              Ymergatan 17 C *              753 25  Uppsala *              SWEDEN * * [kses strips evil scripts!] *//** * You can override this in a plugin. * * @since 1.2.0 */if ( ! defined( 'CUSTOM_TAGS' ) )	define( 'CUSTOM_TAGS', false );if ( ! CUSTOM_TAGS ) {	/**	 * Kses global for default allowable HTML tags.	 *	 * Can be override by using CUSTOM_TAGS constant.	 *	 * @global array $allowedposttags	 * @since 2.0.0	 */	$allowedposttags = array(		'address' => array(),		'a' => array(			'class' => array (),			'href' => array (),			'id' => array (),			'title' => array (),			'rel' => array (),			'rev' => array (),			'name' => array (),			'target' => array()),		'abbr' => array(			'class' => array (),			'title' => array ()),		'acronym' => array(			'title' => array ()),		'article' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'aside' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'b' => array(),		'big' => array(),		'blockquote' => array(			'id' => array (),			'cite' => array (),			'class' => array(),			'lang' => array(),			'xml:lang' => array()),		'br' => array (			'class' => array ()),		'button' => array(			'disabled' => array (),			'name' => array (),			'type' => array (),			'value' => array ()),		'caption' => array(			'align' => array (),			'class' => array ()),		'cite' => array (			'class' => array(),			'dir' => array(),			'lang' => array(),			'title' => array ()),		'code' => array (			'style' => array()),		'col' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'span' => array (),			'dir' => array(),			'style' => array (),			'valign' => array (),			'width' => array ()),		'del' => array(			'datetime' => array ()),		'dd' => array(),		'details' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'open' => array (),			'style' => array (),			'xml:lang' => array(),		),		'div' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'dl' => array(),		'dt' => array(),		'em' => array(),		'fieldset' => array(),		'figure' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'figcaption' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'font' => array(			'color' => array (),			'face' => array (),			'size' => array ()),		'footer' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'form' => array(			'action' => array (),			'accept' => array (),			'accept-charset' => array (),			'enctype' => array (),			'method' => array (),			'name' => array (),			'target' => array ()),		'h1' => array(			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h2' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h3' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h4' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h5' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h6' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'header' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hgroup' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hr' => array (			'align' => array (),			'class' => array (),			'noshade' => array (),			'size' => array (),			'width' => array ()),		'i' => array(),		'img' => array(			'alt' => array (),			'align' => array (),			'border' => array (),			'class' => array (),			'height' => array (),			'hspace' => array (),			'longdesc' => array (),			'vspace' => array (),			'src' => array (),			'style' => array (),			'width' => array ()),		'ins' => array(			'datetime' => array (),			'cite' => array ()),		'kbd' => array(),		'label' => array(			'for' => array ()),		'legend' => array(			'align' => array ()),		'li' => array (			'align' => array (),			'class' => array ()),		'menu' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'nav' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'p' => array(			'class' => array (),			'align' => array (),			'dir' => array(),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'pre' => array(			'style' => array(),			'width' => array ()),		'q' => array(			'cite' => array ()),		's' => array(),		'span' => array (			'class' => array (),			'dir' => array (),			'align' => array (),			'lang' => array (),			'style' => array (),			'title' => array (),			'xml:lang' => array()),		'section' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'strike' => array(),		'strong' => array(),		'sub' => array(),		'summary' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'sup' => array(),		'table' => array(			'align' => array (),			'bgcolor' => array (),			'border' => array (),			'cellpadding' => array (),			'cellspacing' => array (),			'class' => array (),			'dir' => array(),			'id' => array(),			'rules' => array (),			'style' => array (),			'summary' => array (),			'width' => array ()),		'tbody' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'valign' => array ()),		'td' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'dir' => array(),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'style' => array (),			'valign' => array (),			'width' => array ()),		'textarea' => array(			'cols' => array (),			'rows' => array (),			'disabled' => array (),			'name' => array (),			'readonly' => array ()),		'tfoot' => array(			'align' => array (),			'char' => array (),			'class' => array (),			'charoff' => array (),			'valign' => array ()),		'th' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'valign' => array (),			'width' => array ()),		'thead' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'valign' => array ()),		'title' => array(),		'tr' => array(			'align' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'style' => array (),			'valign' => array ()),		'tt' => array(),		'u' => array(),		'ul' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'ol' => array (			'class' => array (),			'start' => array (),			'style' => array (),			'type' => array ()),		'var' => array ());	/**	 * Kses allowed HTML elements.	 *	 * @global array $allowedtags	 * @since 1.0.0	 */	$allowedtags = array(		'a' => array(			'href' => array (),			'title' => array ()),		'abbr' => array(			'title' => array ()),		'acronym' => array(			'title' => array ()),		'b' => array(),		'blockquote' => array(			'cite' => array ()),		//	'br' => array(),		'cite' => array (),		'code' => array(),		'del' => array(			'datetime' => array ()),		//	'dd' => array(),		//	'dl' => array(),		//	'dt' => array(),		'em' => array (), 'i' => array (),		//	'ins' => array('datetime' => array(), 'cite' => array()),		//	'li' => array(),		//	'ol' => array(),		//	'p' => array(),		'q' => array(			'cite' => array ()),		'strike' => array(),		'strong' => array(),		//	'sub' => array(),		//	'sup' => array(),		//	'u' => array(),		//	'ul' => array(),	);	$allowedentitynames = array(		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',		'alefsym', 'larr',   'uarr',    'rarr',   'darr',   'harr',		'crarr',   'lArr',   'uArr',    'rArr',   'dArr',   'hArr',		'forall',  'part',   'exist',   'empty',  'nabla',  'isin',		'notin',   'ni',     'prod',    'sum',    'minus',  'lowast',		'radic',   'prop',   'infin',   'ang',    'and',    'or',		'cap',     'cup',    'int',     'sim',    'cong',   'asymp',		'ne',      'equiv',  'le',      'ge',     'sub',    'sup',		'nsub',    'sube',   'supe',    'oplus',  'otimes', 'perp',		'sdot',    'lceil',  'rceil',   'lfloor', 'rfloor', 'lang',		'rang',    'loz',    'spades',  'clubs',  'hearts', 'diams',	);}/** * Filters content and keeps only allowable HTML elements. * * This function makes sure that only the allowed HTML element names, attribute * names and attribute values plus only sane HTML entities will occur in * $string. You have to remove any slashes from PHP's magic quotes before you * call this function. * * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news', * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This * covers all common link protocols, except for 'javascript' which should not * be allowed for untrusted users. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Optional. Allowed protocol in links. * @return string Filtered content with only allowed HTML elements */function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {	$allowed_protocols = wp_parse_args( $allowed_protocols, apply_filters('kses_allowed_protocols', array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn') ));	$string = wp_kses_no_null($string);	$string = wp_kses_js_entities($string);	$string = wp_kses_normalize_entities($string);	$allowed_html_fixed = wp_kses_array_lc($allowed_html);	$string = wp_kses_hook($string, $allowed_html_fixed, $allowed_protocols); // WP changed the order of these funcs and added args to wp_kses_hook	return wp_kses_split($string, $allowed_html_fixed, $allowed_protocols);}/** * You add any kses hooks here. * * There is currently only one kses WordPress hook and it is called here. All * parameters are passed to the hooks and expected to recieve a string. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Allowed protocol in links * @return string Filtered content through 'pre_kses' hook */function wp_kses_hook($string, $allowed_html, $allowed_protocols) {	$string = apply_filters('pre_kses', $string, $allowed_html, $allowed_protocols);	return $string;}/** * This function returns kses' version number. * * @since 1.0.0 * * @return string KSES Version Number */function wp_kses_version() {	return '0.2.2';}/** * Searches for HTML tags, no matter how malformed. * * It also matches stray ">" characters. * * @since 1.0.0 * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Content with fixed HTML tags */function wp_kses_split($string, $allowed_html, $allowed_protocols) {	global $pass_allowed_html, $pass_allowed_protocols;	$pass_allowed_html = $allowed_html;	$pass_allowed_protocols = $allowed_protocols;	return preg_replace_callback('%((<!--.*?(-->|$))|(<[^>]*(>|$)|>))%',		create_function('$match', 'global $pass_allowed_html, $pass_allowed_protocols; return wp_kses_split2($match[1], $pass_allowed_html, $pass_allowed_protocols);'), $string);}/** * Callback for wp_kses_split for fixing malformed HTML tags. * * This function does a lot of work. It rejects some very malformed things like * <:::>. It returns an empty string, if the element isn't allowed (look ma, no * strip_tags()!). Otherwise it splits the tag into an element and an attribute * list. * * After the tag is split into an element and an attribute list, it is run * through another filter which will remove illegal attributes and once that is * completed, will be returned. * * @access private * @since 1.0.0 * @uses wp_kses_attr() * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Fixed HTML element */function wp_kses_split2($string, $allowed_html, $allowed_protocols) {	$string = wp_kses_stripslashes($string);	if (substr($string, 0, 1) != '<')		return '&gt;';	# It matched a ">" character	if (preg_match('%^<!--(.*?)(-->)?$%', $string, $matches)) {		$string = str_replace(array('<!--', '-->'), '', $matches[1]);		while ( $string != $newstring = wp_kses($string, $allowed_html, $allowed_protocols) )			$string = $newstring;		if ( $string == '' )			return '';		// prevent multiple dashes in comments		$string = preg_replace('/--+/', '-', $string);		// prevent three dashes closing a comment		$string = preg_replace('/-$/', '', $string);		return "<!--{$string}-->";	}	# Allow HTML comments	if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))		return '';	# It's seriously malformed	$slash = trim($matches[1]);	$elem = $matches[2];	$attrlist = $matches[3];	if (!@isset($allowed_html[strtolower($elem)]))		return '';	# They are using a not allowed HTML element	if ($slash != '')		return "<$slash$elem>";	# No attributes are allowed for closing elements	return wp_kses_attr("$slash$elem", $attrlist, $allowed_html, $allowed_protocols);}/** * Removes all attributes, if none are allowed for this element. * * If some are allowed it calls wp_kses_hair() to split them further, and then * it builds up new HTML code from the data that kses_hair() returns. It also * removes "<" and ">" characters, if there are any left. One more thing it does * is to check if the tag has a closing XHTML slash, and if it does, it puts one * in the returned code as well. * * @since 1.0.0 * * @param string $element HTML element/tag * @param string $attr HTML attributes from HTML element to closing HTML element tag * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Sanitized HTML element */function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {	# Is there a closing XHTML slash at the end of the attributes?	$xhtml_slash = '';	if (preg_match('%\s*/\s*$%', $attr))		$xhtml_slash = ' /';	# Are any attributes allowed at all for this element?	if (@ count($allowed_html[strtolower($element)]) == 0)		return "<$element$xhtml_slash>";	# Split it	$attrarr = wp_kses_hair($attr, $allowed_protocols);	# Go through $attrarr, and save the allowed attributes for this element	# in $attr2	$attr2 = '';	foreach ($attrarr as $arreach) {		if (!@ isset ($allowed_html[strtolower($element)][strtolower($arreach['name'])]))			continue; # the attribute is not allowed		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];		if ($current == '')			continue; # the attribute is not allowed		if (!is_array($current))			$attr2 .= ' '.$arreach['whole'];		# there are no checks		else {			# there are some checks			$ok = true;			foreach ($current as $currkey => $currval)				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {					$ok = false;					break;				}			if ( $arreach['name'] == 'style' ) {				$orig_value = $arreach['value'];				$value = safecss_filter_attr($orig_value);				if ( empty($value) )					continue;				$arreach['value'] = $value;				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);			}			if ($ok)				$attr2 .= ' '.$arreach['whole']; # it passed them		} # if !is_array($current)	} # foreach	# Remove any "<" or ">" characters	$attr2 = preg_replace('/[<>]/', '', $attr2);	return "<$element$attr2$xhtml_slash>";}/** * Builds an attribute list from string containing attributes. * * This function does a lot of work. It parses an attribute list into an array * with attribute data, and tries to do the right thing even if it gets weird * input. It will add quotes around attribute values that don't have any quotes * or apostrophes around them, to make it easier to produce HTML code that will * conform to W3C's HTML specification. It will also remove bad URL protocols * from attribute values.  It also reduces duplicate attributes by using the * attribute defined first (foo='bar' foo='baz' will result in foo='bar'). * * @since 1.0.0 * * @param string $attr Attribute list from HTML element to closing HTML element tag * @param array $allowed_protocols Allowed protocols to keep * @return array List of attributes after parsing */function wp_kses_hair($attr, $allowed_protocols) {	$attrarr = array ();	$mode = 0;	$attrname = '';	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');	# Loop through the whole attribute list	while (strlen($attr) != 0) {		$working = 0; # Was the last operation successful?		switch ($mode) {			case 0 : # attribute name, href for instance				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {					$attrname = $match[1];					$working = $mode = 1;					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);				}				break;			case 1 : # equals sign or valueless ("selected")				if (preg_match('/^\s*=\s*/', $attr)) # equals sign					{					$working = 1;					$mode = 2;					$attr = preg_replace('/^\s*=\s*/', '', $attr);					break;				}				if (preg_match('/^\s+/', $attr)) # valueless					{					$working = 1;					$mode = 0;					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');					}					$attr = preg_replace('/^\s+/', '', $attr);				}				break;			case 2 : # attribute value, a URL after href= for instance				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))					# "value"					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);					break;				}				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))					# 'value'					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname='$thisval'", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);					break;				}				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))					# value					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					# We add quotes to conform to W3C's HTML spec.					$working = 1;					$mode = 0;					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);				}				break;		} # switch		if ($working == 0) # not well formed, remove and try again		{			$attr = wp_kses_html_error($attr);			$mode = 0;		}	} # while	if ($mode == 1 && FALSE === array_key_exists($attrname, $attrarr))		# special case, for when the attribute list ends with a valueless		# attribute like "selected"		$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');	return $attrarr;}/** * Performs different checks for attribute values. * * The currently implemented checks are "maxlen", "minlen", "maxval", "minval" * and "valueless" with even more checks to come soon. * * @since 1.0.0 * * @param string $value Attribute value * @param string $vless Whether the value is valueless. Use 'y' or 'n' * @param string $checkname What $checkvalue is checking for. * @param mixed $checkvalue What constraint the value should pass * @return bool Whether check passes */function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {	$ok = true;	switch (strtolower($checkname)) {		case 'maxlen' :			# The maxlen check makes sure that the attribute value has a length not			# greater than the given value. This can be used to avoid Buffer Overflows			# in WWW clients and various Internet servers.			if (strlen($value) > $checkvalue)				$ok = false;			break;		case 'minlen' :			# The minlen check makes sure that the attribute value has a length not			# smaller than the given value.			if (strlen($value) < $checkvalue)				$ok = false;			break;		case 'maxval' :			# The maxval check does two things: it checks that the attribute value is			# an integer from 0 and up, without an excessive amount of zeroes or			# whitespace (to avoid Buffer Overflows). It also checks that the attribute			# value is not greater than the given value.			# This check can be used to avoid Denial of Service attacks.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value > $checkvalue)				$ok = false;			break;		case 'minval' :			# The minval check checks that the attribute value is a positive integer,			# and that it is not smaller than the given value.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value < $checkvalue)				$ok = false;			break;		case 'valueless' :			# The valueless check checks if the attribute has a value			# (like <a href="blah">) or not (<option selected>). If the given value			# is a "y" or a "Y", the attribute must not have a value.			# If the given value is an "n" or an "N", the attribute must have one.			if (strtolower($checkvalue) != $vless)				$ok = false;			break;	} # switch	return $ok;}/** * Sanitize string from bad protocols. * * This function removes all non-allowed protocols from the beginning of * $string. It ignores whitespace and the case of the letters, and it does * understand HTML entities. It does its work in a while loop, so it won't be * fooled by a string like "javascript:javascript:alert(57)". * * @since 1.0.0 * * @param string $string Content to filter bad protocols from * @param array $allowed_protocols Allowed protocols to keep * @return string Filtered content */function wp_kses_bad_protocol($string, $allowed_protocols) {	$string = wp_kses_no_null($string);	$string2 = $string.'a';	while ($string != $string2) {		$string2 = $string;		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);	} # while	return $string;}/** * Removes any NULL characters in $string. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_no_null($string) {	$string = preg_replace('/\0+/', '', $string);	$string = preg_replace('/(\\\\0)+/', '', $string);	return $string;}/** * Strips slashes from in front of quotes. * * This function changes the character sequence  \"  to just  ". It leaves all * other slashes alone. It's really weird, but the quoting from * preg_replace(//e) seems to require this. * * @since 1.0.0 * * @param string $string String to strip slashes * @return string Fixed strings with quoted slashes */function wp_kses_stripslashes($string) {	return preg_replace('%\\\\"%', '"', $string);}/** * Goes through an array and changes the keys to all lower case. * * @since 1.0.0 * * @param array $inarray Unfiltered array * @return array Fixed array with all lowercase keys */function wp_kses_array_lc($inarray) {	$outarray = array ();	foreach ( (array) $inarray as $inkey => $inval) {		$outkey = strtolower($inkey);		$outarray[$outkey] = array ();		foreach ( (array) $inval as $inkey2 => $inval2) {			$outkey2 = strtolower($inkey2);			$outarray[$outkey][$outkey2] = $inval2;		} # foreach $inval	} # foreach $inarray	return $outarray;}/** * Removes the HTML JavaScript entities found in early versions of Netscape 4. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_js_entities($string) {	return preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);}/** * Handles parsing errors in wp_kses_hair(). * * The general plan is to remove everything to and including some whitespace, * but it deals with quotes and apostrophes as well. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_html_error($string) {	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);}/** * Sanitizes content from bad protocols and other characters. * * This function searches for URL protocols at the beginning of $string, while * handling whitespace and HTML entities. * * @since 1.0.0 * * @param string $string Content to check for bad protocols * @param string $allowed_protocols Allowed protocols * @return string Sanitized content */function wp_kses_bad_protocol_once($string, $allowed_protocols) {	global $_kses_allowed_protocols;	$_kses_allowed_protocols = $allowed_protocols;	$string2 = preg_split('/:|&#58;|&#x3a;/i', $string, 2);	if ( isset($string2[1]) && !preg_match('%/\?%', $string2[0]) )		$string = wp_kses_bad_protocol_once2($string2[0]) . trim($string2[1]);	else		$string = preg_replace_callback('/^((&[^;]*;|[\sA-Za-z0-9])*)'.'(:|&#58;|&#[Xx]3[Aa];)\s*/', 'wp_kses_bad_protocol_once2', $string);	return $string;}/** * Callback for wp_kses_bad_protocol_once() regular expression. * * This function processes URL protocols, checks to see if they're in the * white-list or not, and returns different data depending on the answer. * * @access private * @since 1.0.0 * * @param mixed $matches string or preg_replace_callback() matches array to check for bad protocols * @return string Sanitized content */function wp_kses_bad_protocol_once2($matches) {	global $_kses_allowed_protocols;	if ( is_array($matches) ) {		if ( empty($matches[1]) )			return '';		$string = $matches[1];	} else {		$string = $matches;	}	$string2 = wp_kses_decode_entities($string);	$string2 = preg_replace('/\s/', '', $string2);	$string2 = wp_kses_no_null($string2);	$string2 = strtolower($string2);	$allowed = false;	foreach ( (array) $_kses_allowed_protocols as $one_protocol)		if (strtolower($one_protocol) == $string2) {			$allowed = true;			break;		}	if ($allowed)		return "$string2:";	else		return '';}/** * Converts and fixes HTML entities. * * This function normalizes HTML entities. It will convert "AT&T" to the correct * "AT&amp;T", "&#00058;" to "&#58;", "&#XYZZY;" to "&amp;#XYZZY;" and so on. * * @since 1.0.0 * * @param string $string Content to normalize entities * @return string Content with normalized entities */function wp_kses_normalize_entities($string) {	# Disarm all entities by converting & to &amp;	$string = str_replace('&', '&amp;', $string);	# Change back the allowed entities in our entity whitelist	$string = preg_replace_callback('/&amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);	$string = preg_replace_callback('/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);	$string = preg_replace_callback('/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);	return $string;}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function only accepts valid named entity references, which are finite, * case-sensitive, and highly scrutinized by HTML and XML validators. * * @since 3.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_named_entities($matches) {	global $allowedentitynames;	if ( empty($matches[1]) )		return '';	$i = $matches[1];	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;$i;" : "&$i;" );}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function helps wp_kses_normalize_entities() to only accept 16 bit values * and nothing more for &#number; entities. * * @access private * @since 1.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities2($matches) {	if ( empty($matches[1]) )		return '';	$i = $matches[1];	if (valid_unicode($i)) {		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);		$i = "&#$i;";	} else {		$i = "&amp;#$i;";	}	return $i;}/** * Callback for wp_kses_normalize_entities() for regular expression. * * This function helps wp_kses_normalize_entities() to only accept valid Unicode * numeric entities in hex form. * * @access private * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities3($matches) {	if ( empty($matches[1]) )		return '';	$hexchars = $matches[1];	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;#x$hexchars;" : '&#x'.ltrim($hexchars,'0').';' );}/** * Helper function to determine if a Unicode value is valid. * * @param int $i Unicode value * @return bool true if the value was a valid Unicode number */function valid_unicode($i) {	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||			($i >= 0x20 && $i <= 0xd7ff) ||			($i >= 0xe000 && $i <= 0xfffd) ||			($i >= 0x10000 && $i <= 0x10ffff) );}/** * Convert all entities to their character counterparts. * * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do * anything with other entities like &auml;, but we don't need them in the URL * protocol whitelisting system anyway. * * @since 1.0.0 * * @param string $string Content to change entities * @return string Content after decoded entities */function wp_kses_decode_entities($string) {	$string = preg_replace_callback('/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string);	$string = preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string);	return $string;}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr( $match ) {	return chr( $match[1] );}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr_hexdec( $match ) {	return chr( hexdec( $match[1] ) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 1.0.0 * @uses $allowedtags * * @param string $data Content to filter, expected to be escaped with slashes * @return string Filtered content */function wp_filter_kses($data) {	global $allowedtags;	return addslashes( wp_kses(stripslashes( $data ), $allowedtags) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 2.9.0 * @uses $allowedtags * * @param string $data Content to filter, expected to not be escaped * @return string Filtered content */function wp_kses_data($data) {	global $allowedtags;	return wp_kses( $data , $allowedtags );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.0.0 * @uses $allowedposttags * * @param string $data Post content to filter, expected to be escaped with slashes * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_filter_post_kses($data) {	global $allowedposttags;	return addslashes ( wp_kses(stripslashes( $data ), $allowedposttags) );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.9.0 * @uses $allowedposttags * * @param string $data Post content to filter * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_kses_post($data) {	global $allowedposttags;	return wp_kses( $data , $allowedposttags );}/** * Strips all of the HTML in the content. * * @since 2.1.0 * * @param string $data Content to strip all HTML from * @return string Filtered content without any HTML */function wp_filter_nohtml_kses($data) {	return addslashes ( wp_kses(stripslashes( $data ), array()) );}/** * Adds all Kses input form content filters. * * All hooks have default priority. The wp_filter_kses() function is added to * the 'pre_comment_content' and 'title_save_pre' hooks. * * The wp_filter_post_kses() function is added to the 'content_save_pre', * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks. * * @since 2.0.0 * @uses add_filter() See description for what functions are added to what hooks. */function kses_init_filters() {	// Normal filtering.	add_filter('pre_comment_content', 'wp_filter_kses');	add_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	add_filter('content_save_pre', 'wp_filter_post_kses');	add_filter('excerpt_save_pre', 'wp_filter_post_kses');	add_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Removes all Kses input form content filters. * * A quick procedural method to removing all of the filters that kses uses for * content in WordPress Loop. * * Does not remove the kses_init() function from 'init' hook (priority is * default). Also does not remove kses_init() function from 'set_current_user' * hook (priority is also default). * * @since 2.0.6 */function kses_remove_filters() {	// Normal filtering.	remove_filter('pre_comment_content', 'wp_filter_kses');	remove_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	remove_filter('content_save_pre', 'wp_filter_post_kses');	remove_filter('excerpt_save_pre', 'wp_filter_post_kses');	remove_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Sets up most of the Kses filters for input form content. * * If you remove the kses_init() function from 'init' hook and * 'set_current_user' (priority is default), then none of the Kses filter hooks * will be added. * * First removes all of the Kses filters in case the current user does not need * to have Kses filter the content. If the user does not have unfiltered html * capability, then Kses filters are added. * * @uses kses_remove_filters() Removes the Kses filters * @uses kses_init_filters() Adds the Kses filters back if the user *		does not have unfiltered HTML capability. * @since 2.0.0 */function kses_init() {	kses_remove_filters();	if (current_user_can('unfiltered_html') == false)		kses_init_filters();}add_action('init', 'kses_init');add_action('set_current_user', 'kses_init');/** * Inline CSS filter * * @since 2.8.1 */function safecss_filter_attr( $css, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented	$css = wp_kses_no_null($css);	$css = str_replace(array("\n","\r","\t"), '', $css);	if ( preg_match( '%[\\(&]|/\*%', $css ) ) // remove any inline css containing \ ( & or comments		return '';	$css_array = split( ';', trim( $css ) );	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',	'padding-left', 'padding-right', 'padding-top', 'text-decoration', 'text-indent', 'vertical-align',	'width' ) );	if ( empty($allowed_attr) )		return $css;	$css = '';	foreach ( $css_array as $css_item ) {		if ( $css_item == '' )			continue;		$css_item = trim( $css_item );		$found = false;		if ( strpos( $css_item, ':' ) === false ) {			$found = true;		} else {			$parts = split( ':', $css_item );			if ( in_array( trim( $parts[0] ), $allowed_attr ) )				$found = true;		}		if ( $found ) {			if( $css != '' )				$css .= ';';			$css .= $css_item;		}	}	return $css;}
<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Author Template functions for use in themes. * * These functions must be used within the WordPress Loop. * * @link http://codex.wordpress.org/Author_Templates * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current post. * * @since 1.5 * @uses $authordata The current author's DB object. * @uses apply_filters() Calls 'the_author' hook on the author display name. * * @param string $deprecated Deprecated. * @return string The author's display name. */function get_the_author($deprecated = '') {	global $authordata;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	return apply_filters('the_author', is_object($authordata) ? $authordata->display_name : null);}/** * Display the name of the author of the current post. * * The behavior of this function is based off of old functionality predating * get_the_author(). This function is not deprecated, but is designed to echo * the value from get_the_author() and as an result of any old theme that might * still use the old behavior will also pass the value from get_the_author(). * * The normal, expected behavior of this function is to echo the author and not * return it. However, backwards compatiability has to be maintained. * * @since 0.71 * @see get_the_author() * @link http://codex.wordpress.org/Template_Tags/the_author * * @param string $deprecated Deprecated. * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. * @return string The author's display name, from get_the_author(). */function the_author( $deprecated = '', $deprecated_echo = true ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '1.5', __('Use <code>get_the_author()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_the_author();	return get_the_author();}/** * Retrieve the author who last edited the current post. * * @since 2.8 * @uses $post The current post's DB object. * @uses get_post_meta() Retrieves the ID of the author who last edited the current post. * @uses get_userdata() Retrieves the author's DB object. * @uses apply_filters() Calls 'the_modified_author' hook on the author display name. * @return string The author's display name. */function get_the_modified_author() {	global $post;	if ( $last_id = get_post_meta($post->ID, '_edit_last', true) ) {		$last_user = get_userdata($last_id);		return apply_filters('the_modified_author', $last_user->display_name);	}}/** * Display the name of the author who last edited the current post. * * @since 2.8 * @see get_the_author() * @return string The author's display name, from get_the_modified_author(). */function the_modified_author() {	echo get_the_modified_author();}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @uses $authordata The current author's DB object (if $user_id not specified). * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @return string The author's field from the current author's DB object. */function get_the_author_meta($field = '', $user_id = false) {	if ( ! $user_id )		global $authordata;	else		$authordata = get_userdata( $user_id );	$field = strtolower($field);	$user_field = "user_$field";	if ( 'id' == $field )		$value = isset($authordata->ID) ? (int)$authordata->ID : 0;	elseif ( isset($authordata->$user_field) )		$value = $authordata->$user_field;	else		$value = isset($authordata->$field) ? $authordata->$field : '';	return apply_filters('get_the_author_' . $field, $value, $user_id);}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @echo string The author's field from the current author's DB object. */function the_author_meta($field = '', $user_id = false) {	echo apply_filters('the_author_' . $field, get_the_author_meta($field, $user_id), $user_id);}/** * Retrieve either author's link or author's name. * * If the author has a home page set, return an HTML link, otherwise just return the * author's name. * * @uses get_the_author_meta() * @uses get_the_author() */function get_the_author_link() {	if ( get_the_author_meta('url') ) {		return '<a href="' . get_the_author_meta('url') . '" title="' . esc_attr( sprintf(__("Visit %s&#8217;s website"), get_the_author()) ) . '" rel="external">' . get_the_author() . '</a>';	} else {		return get_the_author();	}}/** * Display either author's link or author's name. * * If the author has a home page set, echo an HTML link, otherwise just echo the * author's name. * * @link http://codex.wordpress.org/Template_Tags/the_author_link * @since 2.1 * @uses get_the_author_link() */function the_author_link() {	echo get_the_author_link();}/** * Retrieve the number of posts by the author of the current post. * * @since 1.5 * @uses $post The current post in the Loop's DB object. * @uses count_user_posts() * @return int The number of posts by the author. */function get_the_author_posts() {	global $post;	return count_user_posts($post->post_author);}/** * Display the number of posts by the author of the current post. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts * @since 0.71 * @uses get_the_author_posts() Echoes returned value from function. */function the_author_posts() {	echo get_the_author_posts();}/** * Display an HTML link to the author page of the author of the current post. * * Does just echo get_author_posts_url() function, like the others do. The * reason for this, is that another function is used to help in printing the * link to the author's posts. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts_link * @since 1.2.0 * @uses $authordata The current author's DB object. * @uses get_author_posts_url() * @uses get_the_author() * @param string $deprecated Deprecated. */function the_author_posts_link($deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	global $authordata;	$link = sprintf(		'<a href="%1$s" title="%2$s">%3$s</a>',		get_author_posts_url( $authordata->ID, $authordata->user_nicename ),		esc_attr( sprintf( __( 'Posts by %s' ), get_the_author() ) ),		get_the_author()	);	echo apply_filters( 'the_author_posts_link', $link );}/** * Retrieve the URL to the author page of the author of the current post. * * @since 2.1.0 * @uses $wp_rewrite WP_Rewrite * @return string The URL to the author's page. */function get_author_posts_url($author_id, $author_nicename = '') {	global $wp_rewrite;	$auth_ID = (int) $author_id;	$link = $wp_rewrite->get_author_permastruct();	if ( empty($link) ) {		$file = home_url() . '/';		$link = $file . '?author=' . $auth_ID;	} else {		if ( '' == $author_nicename ) {			$user = get_userdata($author_id);			if ( !empty($user->user_nicename) )				$author_nicename = $user->user_nicename;		}		$link = str_replace('%author%', $author_nicename, $link);		$link = home_url() . trailingslashit($link);	}	$link = apply_filters('author_link', $link, $author_id, $author_nicename);	return $link;}/** * List all the authors of the blog, with several options available. * * <ul> * <li>optioncount (boolean) (false): Show the count in parenthesis next to the * author's name.</li> * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is * installed bydefault.</li> * <li>show_fullname (boolean) (false): Show their full names.</li> * <li>hide_empty (boolean) (true): Don't show authors without any posts.</li> * <li>feed (string) (''): If isn't empty, show links to author's feeds.</li> * <li>feed_image (string) (''): If isn't empty, use this image to link to * feeds.</li> * <li>echo (boolean) (true): Set to false to return the output, instead of * echoing.</li> * <li>style (string) ('list'): Whether to display list of authors in list form * or as a string.</li> * <li>html (bool) (true): Whether to list the items in html for or plaintext. * </li> * </ul> * * @link http://codex.wordpress.org/Template_Tags/wp_list_authors * @since 1.2.0 * @param array $args The argument array. * @return null|string The output, if echo is set to false. */function wp_list_authors($args = '') {	global $wpdb;	$defaults = array(		'optioncount' => false, 'exclude_admin' => true,		'show_fullname' => false, 'hide_empty' => true,		'feed' => '', 'feed_image' => '', 'feed_type' => '', 'echo' => true,		'style' => 'list', 'html' => true	);	$r = wp_parse_args( $args, $defaults );	extract($r, EXTR_SKIP);	$return = '';	/** @todo Move select to get_authors(). */	$users = get_users_of_blog();	$author_ids = array();	foreach ( (array) $users as $user )		$author_ids[] = $user->user_id;	if ( count($author_ids) > 0  ) {		$author_ids = implode(',', $author_ids );		$authors = $wpdb->get_results( "SELECT ID, user_nicename from $wpdb->users WHERE ID IN($author_ids) " . ($exclude_admin ? "AND user_login <> 'admin' " : '') . "ORDER BY display_name" );	} else {		$authors = array();	}	$author_count = array();	foreach ( (array) $wpdb->get_results("SELECT DISTINCT post_author, COUNT(ID) AS count FROM $wpdb->posts WHERE post_type = 'post' AND " . get_private_posts_cap_sql( 'post' ) . " GROUP BY post_author") as $row )		$author_count[$row->post_author] = $row->count;	foreach ( (array) $authors as $author ) {		$link = '';		$author = get_userdata( $author->ID );		$posts = (isset($author_count[$author->ID])) ? $author_count[$author->ID] : 0;		$name = $author->display_name;		if ( $show_fullname && ($author->first_name != '' && $author->last_name != '') )			$name = "$author->first_name $author->last_name";		if( !$html ) {			if ( $posts == 0 ) {				if ( ! $hide_empty )					$return .= $name . ', ';			} else				$return .= $name . ', ';			// No need to go further to process HTML.			continue;		}		if ( !($posts == 0 && $hide_empty) && 'list' == $style )			$return .= '<li>';		if ( $posts == 0 ) {			if ( ! $hide_empty )				$link = $name;		} else {			$link = '<a href="' . get_author_posts_url($author->ID, $author->user_nicename) . '" title="' . esc_attr( sprintf(__("Posts by %s"), $author->display_name) ) . '">' . $name . '</a>';			if ( (! empty($feed_image)) || (! empty($feed)) ) {				$link .= ' ';				if (empty($feed_image))					$link .= '(';				$link .= '<a href="' . get_author_feed_link($author->ID) . '"';				if ( !empty($feed) ) {					$title = ' title="' . esc_attr($feed) . '"';					$alt = ' alt="' . esc_attr($feed) . '"';					$name = $feed;					$link .= $title;				}				$link .= '>';				if ( !empty($feed_image) )					$link .= "<img src=\"" . esc_url($feed_image) . "\" style=\"border: none;\"$alt$title" . ' />';				else					$link .= $name;				$link .= '</a>';				if ( empty($feed_image) )					$link .= ')';			}			if ( $optioncount )				$link .= ' ('. $posts . ')';		}		if ( $posts || ! $hide_empty )			$return .= $link . ( ( 'list' == $style ) ? '</li>' : ', ' );	}	$return = trim($return, ', ');	if ( ! $echo )		return $return;	echo $return;}?>
<?php/** * WordPress Comment Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * @uses $wpdb * * @param string $comment_author * @param string $comment_date * @return mixed Comment ID on success. */function comment_exists($comment_author, $comment_date) {	global $wpdb;	$comment_author = stripslashes($comment_author);	$comment_date = stripslashes($comment_date);	return $wpdb->get_var( $wpdb->prepare("SELECT comment_post_ID FROM $wpdb->comments			WHERE comment_author = %s AND comment_date = %s", $comment_author, $comment_date) );}/** * {@internal Missing Short Description}} * * @since unknown */function edit_comment() {	$comment_post_ID = (int) $_POST['comment_post_ID'];	if (!current_user_can( 'edit_post', $comment_post_ID ))		wp_die( __('You are not allowed to edit comments on this post, so you cannot edit this comment.' ));	$_POST['comment_author'] = $_POST['newcomment_author'];	$_POST['comment_author_email'] = $_POST['newcomment_author_email'];	$_POST['comment_author_url'] = $_POST['newcomment_author_url'];	$_POST['comment_approved'] = $_POST['comment_status'];	$_POST['comment_content'] = $_POST['content'];	$_POST['comment_ID'] = (int) $_POST['comment_ID'];	foreach ( array ('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $_POST['hidden_' . $timeunit] ) && $_POST['hidden_' . $timeunit] != $_POST[$timeunit] ) {			$_POST['edit_date'] = '1';			break;		}	}	if (!empty ( $_POST['edit_date'] ) ) {		$aa = $_POST['aa'];		$mm = $_POST['mm'];		$jj = $_POST['jj'];		$hh = $_POST['hh'];		$mn = $_POST['mn'];		$ss = $_POST['ss'];		$jj = ($jj > 31 ) ? 31 : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$_POST['comment_date'] = "$aa-$mm-$jj $hh:$mn:$ss";	}	wp_update_comment( $_POST);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_comment_to_edit( $id ) {	if ( !$comment = get_comment($id) )		return false;	$comment->comment_ID = (int) $comment->comment_ID;	$comment->comment_post_ID = (int) $comment->comment_post_ID;	$comment->comment_content = format_to_edit( $comment->comment_content );	$comment->comment_content = apply_filters( 'comment_edit_pre', $comment->comment_content);	$comment->comment_author = format_to_edit( $comment->comment_author );	$comment->comment_author_email = format_to_edit( $comment->comment_author_email );	$comment->comment_author_url = format_to_edit( $comment->comment_author_url );	$comment->comment_author_url = esc_url($comment->comment_author_url);	return $comment;}/** * Get the number of pending comments on a post or posts * * @since unknown * @uses $wpdb * * @param int|array $post_id Either a single Post ID or an array of Post IDs * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs */function get_pending_comments_num( $post_id ) {	global $wpdb;	$single = false;	if ( !is_array($post_id) ) {		$post_id_array = (array) $post_id;		$single = true;	} else {		$post_id_array = $post_id;	}	$post_id_array = array_map('intval', $post_id_array);	$post_id_in = "'" . implode("', '", $post_id_array) . "'";	$pending = $wpdb->get_results( "SELECT comment_post_ID, COUNT(comment_ID) as num_comments FROM $wpdb->comments WHERE comment_post_ID IN ( $post_id_in ) AND comment_approved = '0' GROUP BY comment_post_ID", ARRAY_A );	if ( $single ) {		if ( empty($pending) )			return 0;		else			return absint($pending[0]['num_comments']);	}	$pending_keyed = array();	// Default to zero pending for all posts in request	foreach ( $post_id_array as $id )		$pending_keyed[$id] = 0;	if ( !empty($pending) )		foreach ( $pending as $pend )			$pending_keyed[$pend['comment_post_ID']] = absint($pend['num_comments']);	return $pending_keyed;}/** * Add avatars to relevant places in admin, or try to. * * @since 2.5.0 * @uses $comment * * @param string $name User name. * @return string Avatar with Admin name. */function floated_admin_avatar( $name ) {	global $comment;	$avatar = get_avatar( $comment, 32 );	return "$avatar $name";}function enqueue_comment_hotkeys_js() {	if ( 'true' == get_user_option( 'comment_shortcuts' ) )		wp_enqueue_script( 'jquery-table-hotkeys' );}if ( is_admin() && isset($pagenow) && ('edit-comments.php' == $pagenow || 'edit.php' == $pagenow) ) {	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );}?>
<?php/** * The template for displaying all pages. * * This is the template that displays all pages by default. * Please note that this is the wordpress construct of pages * and that other 'pages' on your wordpress site will use a * different template. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<?php if ( is_front_page() ) { ?>						<h2 class="entry-title"><?php the_title(); ?></h2>					<?php } else { ?>							<h1 class="entry-title"><?php the_title(); ?></h1>					<?php } ?>									<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * User Registration API * * @package WordPress *//** * Checks whether the given username exists. * * @since 2.0.0 * * @param string $username Username. * @return null|int The user's ID on success, and null on failure. */function username_exists( $username ) {	if ( $user = get_userdatabylogin( $username ) ) {		return $user->ID;	} else {		return null;	}}/** * Checks whether the given email exists. * * @since 2.1.0 * @uses $wpdb * * @param string $email Email. * @return bool|int The user's ID on success, and false on failure. */function email_exists( $email ) {	if ( $user = get_user_by_email($email) )		return $user->ID;	return false;}/** * Checks whether an username is valid. * * @since 2.0.1 * @uses apply_filters() Calls 'validate_username' hook on $valid check and $username as parameters * * @param string $username Username. * @return bool Whether username given is valid */function validate_username( $username ) {	$sanitized = sanitize_user( $username, true );	$valid = ( $sanitized == $username );	return apply_filters( 'validate_username', $valid, $username );}/** * Insert an user into the database. * * Can update a current user or insert a new user based on whether the user's ID * is present. * * Can be used to update the user's info (see below), set the user's role, and * set the user's preference on whether they want the rich editor on. * * Most of the $userdata array fields have filters associated with the values. * The exceptions are 'rich_editing', 'role', 'jabber', 'aim', 'yim', * 'user_registered', and 'ID'. The filters have the prefix 'pre_user_' followed * by the field name. An example using 'description' would have the filter * called, 'pre_user_description' that can be hooked into. * * The $userdata array can contain the following fields: * 'ID' - An integer that will be used for updating an existing user. * 'user_pass' - A string that contains the plain text password for the user. * 'user_login' - A string that contains the user's username for logging in. * 'user_nicename' - A string that contains a nicer looking name for the user. *		The default is the user's username. * 'user_url' - A string containing the user's URL for the user's web site. * 'user_email' - A string containing the user's email address. * 'display_name' - A string that will be shown on the site. Defaults to user's *		username. It is likely that you will want to change this, for both *		appearance and security through obscurity (that is if you don't use and *		delete the default 'admin' user). * 'nickname' - The user's nickname, defaults to the user's username. * 'first_name' - The user's first name. * 'last_name' - The user's last name. * 'description' - A string containing content about the user. * 'rich_editing' - A string for whether to enable the rich editor. False *		if not empty. * 'user_registered' - The date the user registered. Format is 'Y-m-d H:i:s'. * 'role' - A string used to set the user's role. * 'jabber' - User's Jabber account. * 'aim' - User's AOL IM account. * 'yim' - User's Yahoo IM account. * * @since 2.0.0 * @uses $wpdb WordPress database layer. * @uses apply_filters() Calls filters for most of the $userdata fields with the prefix 'pre_user'. See note above. * @uses do_action() Calls 'profile_update' hook when updating giving the user's ID * @uses do_action() Calls 'user_register' hook when creating a new user giving the user's ID * * @param array $userdata An array of user data. * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not be created. */function wp_insert_user($userdata) {	global $wpdb;	extract($userdata, EXTR_SKIP);	// Are we updating or creating?	if ( !empty($ID) ) {		$ID = (int) $ID;		$update = true;		$old_user_data = get_userdata($ID);	} else {		$update = false;		// Hash the password		$user_pass = wp_hash_password($user_pass);	}	$user_login = sanitize_user($user_login, true);	$user_login = apply_filters('pre_user_login', $user_login);	//Remove any non-printable chars from the login string to see if we have ended up with an empty username	$user_login = trim($user_login);	if ( empty($user_login) )		return new WP_Error('empty_user_login', __('Cannot create a user with an empty login name.') );	if ( !$update && username_exists( $user_login ) )		return new WP_Error('existing_user_login', __('This username is already registered.') );	if ( empty($user_nicename) )		$user_nicename = sanitize_title( $user_login );	$user_nicename = apply_filters('pre_user_nicename', $user_nicename);	if ( empty($user_url) )		$user_url = '';	$user_url = apply_filters('pre_user_url', $user_url);	if ( empty($user_email) )		$user_email = '';	$user_email = apply_filters('pre_user_email', $user_email);	if ( !$update && ! defined( 'WP_IMPORTING' ) && email_exists($user_email) )		return new WP_Error('existing_user_email', __('This email address is already registered.') );	if ( empty($display_name) )		$display_name = $user_login;	$display_name = apply_filters('pre_user_display_name', $display_name);	if ( empty($nickname) )		$nickname = $user_login;	$nickname = apply_filters('pre_user_nickname', $nickname);	if ( empty($first_name) )		$first_name = '';	$first_name = apply_filters('pre_user_first_name', $first_name);	if ( empty($last_name) )		$last_name = '';	$last_name = apply_filters('pre_user_last_name', $last_name);	if ( empty($description) )		$description = '';	$description = apply_filters('pre_user_description', $description);	if ( empty($rich_editing) )		$rich_editing = 'true';	if ( empty($comment_shortcuts) )		$comment_shortcuts = 'false';	if ( empty($admin_color) )		$admin_color = 'fresh';	$admin_color = preg_replace('|[^a-z0-9 _.\-@]|i', '', $admin_color);	if ( empty($use_ssl) )		$use_ssl = 0;	if ( empty($user_registered) )		$user_registered = gmdate('Y-m-d H:i:s');	$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $user_nicename, $user_login));	if ( $user_nicename_check ) {		$suffix = 2;		while ($user_nicename_check) {			$alt_user_nicename = $user_nicename . "-$suffix";			$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $alt_user_nicename, $user_login));			$suffix++;		}		$user_nicename = $alt_user_nicename;	}	$data = compact( 'user_pass', 'user_email', 'user_url', 'user_nicename', 'display_name', 'user_registered' );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->users, $data, compact( 'ID' ) );		$user_id = (int) $ID;	} else {		$wpdb->insert( $wpdb->users, $data + compact( 'user_login' ) );		$user_id = (int) $wpdb->insert_id;	}	update_user_meta( $user_id, 'first_name', $first_name);	update_user_meta( $user_id, 'last_name', $last_name);	update_user_meta( $user_id, 'nickname', $nickname );	update_user_meta( $user_id, 'description', $description );	update_user_meta( $user_id, 'rich_editing', $rich_editing);	update_user_meta( $user_id, 'comment_shortcuts', $comment_shortcuts);	update_user_meta( $user_id, 'admin_color', $admin_color);	update_user_meta( $user_id, 'use_ssl', $use_ssl);	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( empty($$method) )			$$method = '';		update_user_meta( $user_id, $method, $$method );	}	if ( isset($role) ) {		$user = new WP_User($user_id);		$user->set_role($role);	} elseif ( !$update ) {		$user = new WP_User($user_id);		$user->set_role(get_option('default_role'));	}	wp_cache_delete($user_id, 'users');	wp_cache_delete($user_login, 'userlogins');	if ( $update )		do_action('profile_update', $user_id, $old_user_data);	else		do_action('user_register', $user_id);	return $user_id;}/** * Update an user in the database. * * It is possible to update a user's password by specifying the 'user_pass' * value in the $userdata parameter array. * * If $userdata does not contain an 'ID' key, then a new user will be created * and the new user's ID will be returned. * * If current user's password is being updated, then the cookies will be * cleared. * * @since 2.0.0 * @see wp_insert_user() For what fields can be set in $userdata * @uses wp_insert_user() Used to update existing user or add new one if user doesn't exist already * * @param array $userdata An array of user data. * @return int The updated user's ID. */function wp_update_user($userdata) {	$ID = (int) $userdata['ID'];	// First, get all of the original fields	$user = get_userdata($ID);	// Escape data pulled from DB.	$user = add_magic_quotes(get_object_vars($user));	// If password is changing, hash it now.	if ( ! empty($userdata['user_pass']) ) {		$plaintext_pass = $userdata['user_pass'];		$userdata['user_pass'] = wp_hash_password($userdata['user_pass']);	}	wp_cache_delete($user[ 'user_email' ], 'useremail');	// Merge old and new fields with new fields overwriting old ones.	$userdata = array_merge($user, $userdata);	$user_id = wp_insert_user($userdata);	// Update the cookies if the password changed.	$current_user = wp_get_current_user();	if ( $current_user->id == $ID ) {		if ( isset($plaintext_pass) ) {			wp_clear_auth_cookie();			wp_set_auth_cookie($ID);		}	}	return $user_id;}/** * A simpler way of inserting an user into the database. * * Creates a new user with just the username, password, and email. For a more * detail creation of a user, use wp_insert_user() to specify more infomation. * * @since 2.0.0 * @see wp_insert_user() More complete way to create a new user * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function wp_create_user($username, $password, $email = '') {	$user_login = esc_sql( $username );	$user_email = esc_sql( $email    );	$user_pass = $password;	$userdata = compact('user_login', 'user_email', 'user_pass');	return wp_insert_user($userdata);}/** * Set up the default contact methods * * @access private * @since * * @return array $user_contactmethods Array of contact methods and their labels. */function _wp_get_user_contactmethods() {	$user_contactmethods = array(		'aim' => __('AIM'),		'yim' => __('Yahoo IM'),		'jabber' => __('Jabber / Google Talk')	);	return apply_filters('user_contactmethods',$user_contactmethods);}?>
<?php/** * Defines the Gears manifest file for Google Gears offline storage. * * @package WordPress * @subpackage Administration *//** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );require(ABSPATH . '/wp-admin/includes/manifest.php');$files = get_manifest();header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );header( 'Pragma: no-cache' );header( 'Content-Type: application/x-javascript; charset=UTF-8' );?>{"betaManifestVersion" : 1,"version" : "<?php echo $man_version; ?>","entries" : [<?php$entries = '';foreach ( $files as $file ) {	// Set ignoreQuery, defaulting to true	$ignore_query = ( isset($file[2]) && !$file[2] ) ? '' : ', "ignoreQuery" : true ';	// If version is not set, just output the file	if ( !isset($file[1]) )		$entries .= '{ "url" : "' . $file[0] . '"' . $ignore_query . ' }' . "\n";	// Output url and src	else		$entries .= '{ "url" : "' . $file[0] . '", "src" : "' . $file[0] . '?' . $file[1] . '"' . $ignore_query . ' },' . "\n";}echo trim( trim($entries), ',' );?>]}
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress *//** * Defines initial WordPress constants * * @see wp_debug_mode() * * @since 3.0.0 */function wp_initial_constants( ) {	global $blog_id;	// set memory limits	if ( !defined('WP_MEMORY_LIMIT') ) {		if( is_multisite() ) {			define('WP_MEMORY_LIMIT', '64M');		} else {			define('WP_MEMORY_LIMIT', '32M');		}	}	/**	 * The $blog_id global, which you can change in the config allows you to create a simple	 * multiple blog installation using just one WordPress and changing $blog_id around.	 *	 * @global int $blog_id	 * @since 2.0.0	 */	if ( ! isset($blog_id) )		$blog_id = 1;	// set memory limits.	if ( function_exists('memory_get_usage') && ( (int) @ini_get('memory_limit') < abs(intval(WP_MEMORY_LIMIT)) ) )		@ini_set('memory_limit', WP_MEMORY_LIMIT);	if ( !defined('WP_CONTENT_DIR') )		define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' ); // no trailing slash, full paths only - WP_CONTENT_URL is defined further down	// Add define('WP_DEBUG', true); to wp-config.php to enable display of notices during development.	if ( !defined('WP_DEBUG') )		define( 'WP_DEBUG', false );	// Add define('WP_DEBUG_DISPLAY', false); to wp-config.php use the globally configured setting for display_errors and not force errors to be displayed.	if ( !defined('WP_DEBUG_DISPLAY') )		define( 'WP_DEBUG_DISPLAY', true );	// Add define('WP_DEBUG_LOG', true); to enable error logging to wp-content/debug.log.	if ( !defined('WP_DEBUG_LOG') )		define('WP_DEBUG_LOG', false);	if ( !defined('WP_CACHE') )		define('WP_CACHE', false);	/**	 * Private	 */	if ( !defined('MEDIA_TRASH') )		define('MEDIA_TRASH', false);	if ( !defined('SHORTINIT') )		define('SHORTINIT', false);}/** * Defines plugin directory WordPress constants * * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in * * @since 3.0.0 */function wp_plugin_directory_constants( ) {	if ( !defined('WP_CONTENT_URL') )		define( 'WP_CONTENT_URL', get_option('siteurl') . '/wp-content'); // full url - WP_CONTENT_DIR is defined further up	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_DIR') )		define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' ); // full path, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.6.0	 */	if ( !defined('WP_PLUGIN_URL') )		define( 'WP_PLUGIN_URL', WP_CONTENT_URL . '/plugins' ); // full url, no trailing slash	/**	 * Allows for the plugins directory to be moved from the default location.	 *	 * @since 2.1.0	 * @deprecated	 */	if ( !defined('PLUGINDIR') )		define( 'PLUGINDIR', 'wp-content/plugins' ); // Relative to ABSPATH.  For back compat.	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_DIR') )		define( 'WPMU_PLUGIN_DIR', WP_CONTENT_DIR . '/mu-plugins' ); // full path, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 */	if ( !defined('WPMU_PLUGIN_URL') )		define( 'WPMU_PLUGIN_URL', WP_CONTENT_URL . '/mu-plugins' ); // full url, no trailing slash	/**	 * Allows for the mu-plugins directory to be moved from the default location.	 *	 * @since 2.8.0	 * @deprecated	 */	if ( !defined( 'MUPLUGINDIR' ) )		define( 'MUPLUGINDIR', 'wp-content/mu-plugins' ); // Relative to ABSPATH.  For back compat.}/** * Defines cookie related WordPress constants * * Defines constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies(). * @since 3.0.0 */function wp_cookie_constants( ) {	global $wp_default_secret_key;	/**	 * Used to guarantee unique hash cookies	 * @since 1.5	 */	if ( !defined( 'COOKIEHASH' ) ) {		$siteurl = get_site_option( 'siteurl' );		if ( $siteurl )			define( 'COOKIEHASH', md5( $siteurl ) );		else			define( 'COOKIEHASH', '' );	}	/**	 * Should be exactly the same as the default value of SECRET_KEY in wp-config-sample.php	 * @since 2.5.0	 */	$wp_default_secret_key = 'put your unique phrase here';	/**	 * @since 2.0.0	 */	if ( !defined('USER_COOKIE') )		define('USER_COOKIE', 'wordpressuser_' . COOKIEHASH);	/**	 * @since 2.0.0	 */	if ( !defined('PASS_COOKIE') )		define('PASS_COOKIE', 'wordpresspass_' . COOKIEHASH);	/**	 * @since 2.5.0	 */	if ( !defined('AUTH_COOKIE') )		define('AUTH_COOKIE', 'wordpress_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('SECURE_AUTH_COOKIE') )		define('SECURE_AUTH_COOKIE', 'wordpress_sec_' . COOKIEHASH);	/**	 * @since 2.6.0	 */	if ( !defined('LOGGED_IN_COOKIE') )		define('LOGGED_IN_COOKIE', 'wordpress_logged_in_' . COOKIEHASH);	/**	 * @since 2.3.0	 */	if ( !defined('TEST_COOKIE') )		define('TEST_COOKIE', 'wordpress_test_cookie');	/**	 * @since 1.2.0	 */	if ( !defined('COOKIEPATH') )		define('COOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('home') . '/' ) );	/**	 * @since 1.5.0	 */	if ( !defined('SITECOOKIEPATH') )		define('SITECOOKIEPATH', preg_replace('|https?://[^/]+|i', '', get_option('siteurl') . '/' ) );	/**	 * @since 2.6.0	 */	if ( !defined('ADMIN_COOKIE_PATH') )		define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );	/**	 * @since 2.6.0	 */	if ( !defined('PLUGINS_COOKIE_PATH') )		define( 'PLUGINS_COOKIE_PATH', preg_replace('|https?://[^/]+|i', '', WP_PLUGIN_URL)  );	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') )		define('COOKIE_DOMAIN', false);}/** * Defines cookie related WordPress constants * * @since 3.0.0 */function wp_ssl_constants( ) {	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_ADMIN') )		define('FORCE_SSL_ADMIN', false);	force_ssl_admin(FORCE_SSL_ADMIN);	/**	 * @since 2.6.0	 */	if ( !defined('FORCE_SSL_LOGIN') )		define('FORCE_SSL_LOGIN', false);	force_ssl_login(FORCE_SSL_LOGIN);}/** * Defines functionality related WordPress constants * * @since 3.0.0 */function wp_functionality_constants( ) {	/**	 * @since 2.5.0	 */	if ( !defined( 'AUTOSAVE_INTERVAL' ) )		define( 'AUTOSAVE_INTERVAL', 60 );	/**	 * @since 2.9.0	 */	if ( !defined( 'EMPTY_TRASH_DAYS' ) )		define( 'EMPTY_TRASH_DAYS', 30 );	if ( !defined('WP_POST_REVISIONS') )		define('WP_POST_REVISIONS', true);}/** * Defines templating related WordPress constants * * @since 3.0.0 */function wp_templating_constants( ) {	/**	 * Web Path to the current active template directory	 * @since 1.5.0	 */	define('TEMPLATEPATH', get_template_directory());	/**	 * Web Path to the current active template stylesheet directory	 * @since 2.1.0	 */	define('STYLESHEETPATH', get_stylesheet_directory());	/**	 * Slug of the default theme for this install.	 * Used as the default theme when installing new sites.	 * Will be used as the fallback if the current theme doesn't exist.	 * @since 3.0.0	 */	if ( !defined('WP_DEFAULT_THEME') )		define( 'WP_DEFAULT_THEME', 'twentyten' );}?>
<?php/** * "Inline" diff renderer. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Ciprian Popovici * @package Text_Diff *//** Text_Diff_Renderer */// WP #7391require_once dirname(dirname(__FILE__)) . '/Renderer.php';/** * "Inline" diff renderer. * * This class renders diffs in the Wiki-style "inline" format. * * @author  Ciprian Popovici * @package Text_Diff */class Text_Diff_Renderer_inline extends Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * @var integer     */    var $_leading_context_lines = 10000;    /**     * Number of trailing context "lines" to preserve.     *     * @var integer     */    var $_trailing_context_lines = 10000;    /**     * Prefix for inserted text.     *     * @var string     */    var $_ins_prefix = '<ins>';    /**     * Suffix for inserted text.     *     * @var string     */    var $_ins_suffix = '</ins>';    /**     * Prefix for deleted text.     *     * @var string     */    var $_del_prefix = '<del>';    /**     * Suffix for deleted text.     *     * @var string     */    var $_del_suffix = '</del>';    /**     * Header for each change block.     *     * @var string     */    var $_block_header = '';    /**     * Whether to split down to character-level.     *     * @var boolean     */    var $_split_characters = false;    /**     * What are we currently splitting on? Used to recurse to show word-level     * or character-level changes.     *     * @var string     */    var $_split_level = 'lines';    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        return $this->_block_header;    }    function _startBlock($header)    {        return $header;    }    function _lines($lines, $prefix = ' ', $encode = true)    {        if ($encode) {            array_walk($lines, array(&$this, '_encode'));        }        if ($this->_split_level == 'lines') {            return implode("\n", $lines) . "\n";        } else {            return implode('', $lines);        }    }    function _added($lines)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_ins_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_ins_suffix;        return $this->_lines($lines, ' ', false);    }    function _deleted($lines, $words = false)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_del_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_del_suffix;        return $this->_lines($lines, ' ', false);    }    function _changed($orig, $final)    {        /* If we've already split on characters, just display. */        if ($this->_split_level == 'characters') {            return $this->_deleted($orig)                . $this->_added($final);        }        /* If we've already split on words, just display. */        if ($this->_split_level == 'words') {            $prefix = '';            while ($orig[0] !== false && $final[0] !== false &&                   substr($orig[0], 0, 1) == ' ' &&                   substr($final[0], 0, 1) == ' ') {                $prefix .= substr($orig[0], 0, 1);                $orig[0] = substr($orig[0], 1);                $final[0] = substr($final[0], 1);            }            return $prefix . $this->_deleted($orig) . $this->_added($final);        }        $text1 = implode("\n", $orig);        $text2 = implode("\n", $final);        /* Non-printing newline marker. */        $nl = "\0";        if ($this->_split_characters) {            $diff = new Text_Diff('native',                                  array(preg_split('//', $text1),                                        preg_split('//', $text2)));        } else {            /* We want to split on word boundaries, but we need to preserve             * whitespace as well. Therefore we split on words, but include             * all blocks of whitespace in the wordlist. */            $diff = new Text_Diff('native',                                  array($this->_splitOnWords($text1, $nl),                                        $this->_splitOnWords($text2, $nl)));        }        /* Get the diff in inline format. */        $renderer = new Text_Diff_Renderer_inline            (array_merge($this->getParams(),                         array('split_level' => $this->_split_characters ? 'characters' : 'words')));        /* Run the diff and get the output. */        return str_replace($nl, "\n", $renderer->render($diff)) . "\n";    }    function _splitOnWords($string, $newlineEscape = "\n")    {        // Ignore \0; otherwise the while loop will never finish.        $string = str_replace("\0", '', $string);        $words = array();        $length = strlen($string);        $pos = 0;        while ($pos < $length) {            // Eat a word with any preceding whitespace.            $spaces = strspn(substr($string, $pos), " \n");            $nextpos = strcspn(substr($string, $pos + $spaces), " \n");            $words[] = str_replace("\n", $newlineEscape, substr($string, $pos, $spaces + $nextpos));            $pos += $spaces + $nextpos;        }        return $words;    }    function _encode(&$string)    {        $string = htmlspecialchars($string);    }}
<?php/** * Class for a set of entries for translation and their associated headers * * @version $Id: translations.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage translations */require_once dirname(__FILE__) . '/entry.php';if ( !class_exists( 'Translations' ) ):class Translations {	var $entries = array();	var $headers = array();	/**	 * Add entry to the PO structure	 *	 * @param object &$entry	 * @return bool true on success, false if the entry doesn't have a key	 */	function add_entry($entry) {		if (is_array($entry)) {			$entry = new Translation_Entry($entry);		}		$key = $entry->key();		if (false === $key) return false;		$this->entries[$key] = &$entry;		return true;	}	/**	 * Sets $header PO header to $value	 *	 * If the header already exists, it will be overwritten	 *	 * TODO: this should be out of this class, it is gettext specific	 *	 * @param string $header header name, without trailing :	 * @param string $value header value, without trailing \n	 */	function set_header($header, $value) {		$this->headers[$header] = $value;	}	function set_headers(&$headers) {		foreach($headers as $header => $value) {			$this->set_header($header, $value);		}	}	function get_header($header) {		return isset($this->headers[$header])? $this->headers[$header] : false;	}	function translate_entry(&$entry) {		$key = $entry->key();		return isset($this->entries[$key])? $this->entries[$key] : false;	}	function translate($singular, $context=null) {		$entry = new Translation_Entry(array('singular' => $singular, 'context' => $context));		$translated = $this->translate_entry($entry);		return ($translated && !empty($translated->translations))? $translated->translations[0] : $singular;	}	/**	 * Given the number of items, returns the 0-based index of the plural form to use	 *	 * Here, in the base Translations class, the commong logic for English is implmented:	 * 	0 if there is one element, 1 otherwise	 *	 * This function should be overrided by the sub-classes. For example MO/PO can derive the logic	 * from their headers.	 *	 * @param integer $count number of items	 */	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {		$entry = new Translation_Entry(array('singular' => $singular, 'plural' => $plural, 'context' => $context));		$translated = $this->translate_entry($entry);		$index = $this->select_plural_form($count);		$total_plural_forms = $this->get_plural_forms_count();		if ($translated && 0 <= $index && $index < $total_plural_forms &&				is_array($translated->translations) &&				isset($translated->translations[$index]))			return $translated->translations[$index];		else			return 1 == $count? $singular : $plural;	}	/**	 * Merge $other in the current object.	 *	 * @param Object &$other Another Translation object, whose translations will be merged in this one	 * @return void	 **/	function merge_with(&$other) {		foreach( $other->entries as $entry ) {			$this->entries[$entry->key()] = $entry;		}	}}class Gettext_Translations extends Translations {	/**	 * The gettext implmentation of select_plural_form.	 *	 * It lives in this class, because there are more than one descendand, which will use it and	 * they can't share it effectively.	 *	 */	function gettext_select_plural_form($count) {		if (!isset($this->_gettext_select_plural_form) || is_null($this->_gettext_select_plural_form)) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}		return call_user_func($this->_gettext_select_plural_form, $count);	}	function nplurals_and_expression_from_header($header) {		if (preg_match('/^\s*nplurals\s*=\s*(\d+)\s*;\s+plural\s*=\s*(.+)$/', $header, $matches)) {			$nplurals = (int)$matches[1];			$expression = trim($this->parenthesize_plural_exression($matches[2]));			return array($nplurals, $expression);		} else {			return array(2, 'n != 1');		}	}	/**	 * Makes a function, which will return the right translation index, according to the	 * plural forms header	 */	function make_plural_form_function($nplurals, $expression) {		$expression = str_replace('n', '$n', $expression);		$func_body = "			\$index = (int)($expression);			return (\$index < $nplurals)? \$index : $nplurals - 1;";		return create_function('$n', $func_body);	}	/**	 * Adds parantheses to the inner parts of ternary operators in	 * plural expressions, because PHP evaluates ternary oerators from left to right	 *	 * @param string $expression the expression without parentheses	 * @return string the expression with parentheses added	 */	function parenthesize_plural_exression($expression) {		$expression .= ';';		$res = '';		$depth = 0;		for ($i = 0; $i < strlen($expression); ++$i) {			$char = $expression[$i];			switch ($char) {				case '?':					$res .= ' ? (';					$depth++;					break;				case ':':					$res .= ') : (';					break;				case ';':					$res .= str_repeat(')', $depth) . ';';					$depth= 0;					break;				default:					$res .= $char;			}		}		return rtrim($res, ';');	}	function make_headers($translation) {		$headers = array();		// sometimes \ns are used instead of real new lines		$translation = str_replace('\n', "\n", $translation);		$lines = explode("\n", $translation);		foreach($lines as $line) {			$parts = explode(':', $line, 2);			if (!isset($parts[1])) continue;			$headers[trim($parts[0])] = trim($parts[1]);		}		return $headers;	}	function set_header($header, $value) {		parent::set_header($header, $value);		if ('Plural-Forms' == $header) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}	}}endif;if ( !class_exists( 'NOOP_Translations' ) ):/** * Provides the same interface as Translations, but doesn't do anything */class NOOP_Translations {	var $entries = array();	var $headers = array();	function add_entry($entry) {		return true;	}	function set_header($header, $value) {	}	function set_headers(&$headers) {	}	function get_header($header) {		return false;	}	function translate_entry(&$entry) {		return false;	}	function translate($singular, $context=null) {		return $singular;	}	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {			return 1 == $count? $singular : $plural;	}	function merge_with(&$other) {	}}endif;
<?php/** * Loads the correct template based on the visitor's url * @package WordPress */if ( defined('WP_USE_THEMES') && WP_USE_THEMES )	do_action('template_redirect');// Process feeds and trackbacks even if not using themes.if ( is_robots() ) :	do_action('do_robots');	return;elseif ( is_feed() ) :	do_feed();	return;elseif ( is_trackback() ) :	include( ABSPATH . 'wp-trackback.php' );	return;endif;if ( defined('WP_USE_THEMES') && WP_USE_THEMES ) :	$template = false;	if     ( is_404()            && $template = get_404_template()            ) :	elseif ( is_search()         && $template = get_search_template()         ) :	elseif ( is_tax()            && $template = get_taxonomy_template()       ) :	elseif ( is_front_page()     && $template = get_front_page_template()     ) :	elseif ( is_home()           && $template = get_home_template()           ) :	elseif ( is_attachment()     && $template = get_attachment_template()     ) :		remove_filter('the_content', 'prepend_attachment');	elseif ( is_single()         && $template = get_single_template()         ) :	elseif ( is_page()           && $template = get_page_template()           ) :	elseif ( is_category()       && $template = get_category_template()       ) :	elseif ( is_tag()            && $template = get_tag_template()            ) :	elseif ( is_author()         && $template = get_author_template()         ) :	elseif ( is_date()           && $template = get_date_template()           ) :	elseif ( is_archive()        && $template = get_archive_template()        ) :	elseif ( is_comments_popup() && $template = get_comments_popup_template() ) :	elseif ( is_paged()          && $template = get_paged_template()          ) :	else :		$template = get_index_template();	endif;	if ( $template = apply_filters( 'template_include', $template ) )		include( $template );	return;endif;?>
<?php/** * Theme editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_themes') )	wp_die('<p>'.__('You do not have sufficient permissions to edit templates for this site.').'</p>');$title = __("Edit Themes");$parent_file = 'themes.php';$help = '<p>' . __('You can use the Theme Editor to edit the individual CSS and PHP files which make up your theme.') . '</p>';$help .= '<p>' . __('Begin by choosing a theme to edit from the dropdown menu and clicking Select. A list then appears of all the template files. Clicking once on any file name causes the file to appear in the large Editor box.') . '</p>';$help .= '<p>' . __('For PHP files, you can use the Documentation dropdown to select from functions recognized in that file. Lookup takes you to a web page with reference material about that particular function.') . '</p>';$help .= '<p>' . __('After typing in your edits, click Update File.') . '</p>';$help .= '<p>' . __('<strong>Advice:</strong> think very carefully about your site crashing if you are live-editing the theme currently in use.') . '</p>';$help .= '<p>' . __('Upgrading to a newer version of the same theme will override changes made here. To avoid this, consider creating a <a href="http://codex.wordpress.org/Child_Themes" target="_blank">child theme</a> instead.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Theme_Development" target="_blank">Documentation on Theme Development</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Editing_Files" target="_blank">Documentation on Editing Files</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Template_Tags" target="_blank">Documentation on Template Tags</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'theme', 'dir'));wp_admin_css( 'theme-editor' );$themes = get_themes();if (empty($theme)) {	$theme = get_current_theme();} else {	$theme = stripslashes($theme);}if ( ! isset($themes[$theme]) )	wp_die(__('The requested theme does not exist.'));$allowed_files = array_merge($themes[$theme]['Stylesheet Files'], $themes[$theme]['Template Files']);if (empty($file)) {	$file = $allowed_files[0];} else {	$file = stripslashes($file);	if ( 'theme' == $dir ) {		$file = dirname(dirname($themes[$theme]['Template Dir'])) . $file ;	} else if ( 'style' == $dir) {		$file = dirname(dirname($themes[$theme]['Stylesheet Dir'])) . $file ;	}}validate_file_to_edit($file, $allowed_files);$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;$file_show = basename( $file );switch($action) {case 'update':	check_admin_referer('edit-theme_' . $file . $theme);	$newcontent = stripslashes($_POST['newcontent']);	$theme = urlencode($theme);	if (is_writeable($file)) {		//is_writable() not always reliable, check return value. see comments @ http://uk.php.net/is_writable		$f = fopen($file, 'w+');		if ($f !== FALSE) {			fwrite($f, $newcontent);			fclose($f);			$location = "theme-editor.php?file=$file&theme=$theme&a=te&scrollto=$scrollto";		} else {			$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";		}	} else {		$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";	}	$location = wp_kses_no_null($location);	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	header("Location: $location");	exit();break;default:	require_once('./admin-header.php');	update_recently_edited($file);	if ( !is_file($file) )		$error = 1;	if ( !$error && filesize($file) > 0 ) {		$f = fopen($file, 'r');		$content = fread($f, filesize($file));		if ( '.php' == substr( $file, strrpos( $file, '.' ) ) ) {			$functions = wp_doc_link_parse( $content );			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . esc_attr__( 'Function Name...' ) . '</option>';			foreach ( $functions as $function ) {				$docs_select .= '<option value="' . esc_attr( urlencode( $function ) ) . '">' . htmlspecialchars( $function ) . '()</option>';			}			$docs_select .= '</select>';		}		$content = htmlspecialchars( $content );	}	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php endif;$description = get_file_description($file);$desc_header = ( $description != $file_show ) ? "<strong>$description</strong> (%s)" : "%s";?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php echo sprintf($desc_header, $file_show); ?></big></div><div class="alignright">	<form action="theme-editor.php" method="post">		<strong><label for="theme"><?php _e('Select theme to edit:'); ?> </label></strong>		<select name="theme" id="theme"><?php	foreach ($themes as $a_theme) {	$theme_name = $a_theme['Name'];	if ($theme_name == $theme) $selected = " selected='selected'";	else $selected = '';	$theme_name = esc_attr($theme_name);	echo "\n\t<option value=\"$theme_name\" $selected>$theme_name</option>";}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div>	<div id="templateside"><?phpif ($allowed_files) :?>	<h3><?php _e('Templates'); ?></h3>	<ul><?php	$template_mapping = array();	$template_dir = $themes[$theme]['Template Dir'];	foreach ( $themes[$theme]['Template Files'] as $template_file ) {		$description = trim( get_file_description($template_file) );		$template_show = basename($template_file);		$filedesc = ( $description != $template_file ) ? "$description<br /><span class='nonessential'>($template_show)</span>" : "$description";		$filedesc = ( $template_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($template_show)</span></span>" : $filedesc;		// If we have two files of the same name prefer the one in the Template Directory		// This means that we display the correct files for child themes which overload Templates as well as Styles		if ( array_key_exists($description, $template_mapping ) ) {			if ( false !== strpos( $template_file, $template_dir ) )  {				$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );			}		} else {			$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );		}	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $template_file, $filedesc ) ) = each( $template_mapping ) ) :	?>		<li><a href="theme-editor.php?file=<?php echo "$template_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=theme"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul>	<h3><?php /* translators: Theme stylesheets in theme editor */ _ex('Styles', 'Theme stylesheets in theme editor'); ?></h3>	<ul><?php	$template_mapping = array();	$stylesheet_dir = $themes[$theme]['Stylesheet Dir'];	foreach ( $themes[$theme]['Stylesheet Files'] as $style_file ) {		$description = trim( get_file_description($style_file) );		$style_show = basename($style_file);		$filedesc = ( $description != $style_file ) ? "$description<br /><span class='nonessential'>($style_show)</span>" : "$description";		$filedesc = ( $style_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($style_show)</span></span>" : $filedesc;		$template_mapping[ $description ] = array( _get_template_edit_filename($style_file, $stylesheet_dir), $filedesc );	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $style_file, $filedesc ) ) = each( $template_mapping ) ) :		?>		<li><a href="theme-editor.php?file=<?php echo "$style_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=style"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul><?php endif; ?></div><?php if (!$error) { ?>	<form name="template" id="template" action="theme-editor.php" method="post">	<?php wp_nonce_field('edit-theme_' . $file . $theme) ?>		 <div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		 <input type="hidden" name="action" value="update" />		 <input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		 <input type="hidden" name="theme" value="<?php echo esc_attr($theme) ?>" />		 <input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		 </div>	<?php if ( isset($functions ) && count($functions) ) { ?>		<div id="documentation" class="hide-if-no-js">		<label for="docs-list"><?php _e('Documentation:') ?></label>		<?php echo $docs_select; ?>		<input type="button" class="button" value=" <?php esc_attr_e( 'Lookup' ); ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" />		</div>	<?php } ?>		<div><?php if ( is_writeable($file) ) : ?>			<p class="submit"><?php	echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";?></p><?php else : ?><p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?>		</div>	</form><?php	} else {		echo '<div class="error"><p>' . __('Oops, no such file exists! Double check the name and try again, merci.') . '</p></div>';	}?><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?phpbreak;}include("./admin-footer.php");
<?php/** * Quick way to create a WordPress Post. * * @package WordPress * @subpackage Administration *//** * @var string * @name $mode */$mode = 'sidebar';/** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('edit_posts') )	wp_die(__('Cheatin&#8217; uh?'));$post = get_default_post_to_edit();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></title><style type="text/css" media="screen">body {	font-size: 0.9em;	margin: 0;	padding: 0;}form {	padding: 1%;}.tags-wrap p {	font-size: 0.75em;	margin-top: 0.4em;}.button-highlighted, #wphead, label {	font-weight: bold;}#post-title, #tags-input, #content {	width: 99%;	padding: 2px;}#wphead {	font-size: 1.4em;	background-color: #E4F2FD;	color: #555555;	padding: 0.2em 1%;}#wphead p {	margin: 3px;}.button {	font-family: "Lucida Grande", "Lucida Sans Unicode", Tahoma, Verdana, sans-serif;	padding: 3px 5px;	margin-right: 5px;	font-size: 0.75em;	line-height: 1.5em;	border: 1px solid #80b5d0;	-moz-border-radius: 3px;	-khtml-border-radius: 3px;	-webkit-border-radius: 3px;	border-radius: 3px;	cursor: pointer;	background-color: #e5e5e5;	color: #246;}.button:hover {	border-color: #535353;}.updated {	background-color: #FFFBCC;	border: 1px solid #E6DB55;	margin-bottom: 1em;	padding: 0 0.6em;}.updated p {	margin: 0.6em;}</style></head><body id="sidebar"><div id="wphead"><p><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></p></div><form name="post" action="post.php" method="post"><div><input type="hidden" name="action" value="post" /><input type="hidden" name="user_ID" value="<?php echo esc_attr($user_ID) ?>" /><input type="hidden" name="mode" value="sidebar" /><input type="hidden" name="ping_status" value="<?php echo esc_attr($post->ping_status); ?>" /><input type="hidden" name="comment_status" value="<?php echo esc_attr($post->comment_status); ?>" /><?php wp_nonce_field('add-post');if ( 'b' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post published.') . '</p></div>';elseif ( 'c' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post saved.') . '</p></div>';?><p><label for="post-title"><?php _e('Title:'); ?></label><input type="text" name="post_title" id="post-title" size="20" tabindex="1" autocomplete="off" value="" /></p><p><label for="content"><?php _e('Post:'); ?></label><textarea rows="8" cols="12" name="content" id="content" style="height:10em;line-height:1.4em;" tabindex="2"></textarea></p><div class="tags-wrap"><label for="tags-input"><?php _e('Tags:') ?></label><input type="text" name="tags_input" id="tags-input" tabindex="3" value="" /><p><?php _e('Separate tags with commas'); ?></p></div><p><input name="saveasdraft" type="submit" id="saveasdraft" tabindex="9" accesskey="s" class="button" value="<?php esc_attr_e('Save as Draft'); ?>" /><?php if ( current_user_can('publish_posts') ) : ?><input name="publish" type="submit" id="publish" tabindex="6" accesskey="p" value="<?php esc_attr_e('Publish') ?>" class="button button-highlighted" /><?php endif; ?></p></div></form></body></html>
<?php/** * Redirects to the RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rss2_url' ), 301 );?>
<?php/** * Deprecated pluggable functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed in a * later version. * * Deprecated warnings are also thrown if one of these functions is being defined by a plugin. * * @package WordPress * @subpackage Deprecated * @see pluggable.php *//* * Deprecated functions come here to die. */if ( !function_exists('set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * @since 2.0.1 * @see wp_set_current_user() An alias of wp_set_current_user() * @deprecated 3.0.0 * @deprecated Use wp_set_current_user() * * @param int|null $id User ID. * @param string $name Optional. The user's username * @return object returns wp_set_current_user() */function set_current_user($id, $name = '') {	_deprecated_function( __FUNCTION__, '3.0', 'wp_set_current_user()' );	return wp_set_current_user($id, $name);}endif;if ( !function_exists('wp_setcookie') ) :/** * Sets a cookie for a user who just logged in. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_set_auth_cookie() * @see wp_set_auth_cookie() * * @param string $username The user's username * @param string $password Optional. The user's password * @param bool $already_md5 Optional. Whether the password has already been through MD5 * @param string $home Optional. Will be used instead of COOKIEPATH if set * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set * @param bool $remember Optional. Remember that the user is logged in */function wp_setcookie($username, $password = '', $already_md5 = false, $home = '', $siteurl = '', $remember = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_set_auth_cookie()' );	$user = get_userdatabylogin($username);	wp_set_auth_cookie($user->ID, $remember);}else :	_deprecated_function( 'wp_setcookie', '2.5', 'wp_set_auth_cookie()' );endif;if ( !function_exists('wp_clearcookie') ) :/** * Clears the authentication cookie, logging the user out. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_clear_auth_cookie() * @see wp_clear_auth_cookie() */function wp_clearcookie() {	_deprecated_function( __FUNCTION__, '2.5', 'wp_clear_auth_cookie()' );	wp_clear_auth_cookie();}else :	_deprecated_function( 'wp_clearcookie', '2.5', 'wp_clear_auth_cookie()' );endif;if ( !function_exists('wp_get_cookie_login') ):/** * Gets the user cookie login. This function is deprecated. * * This function is deprecated and should no longer be extended as it won't be * used anywhere in WordPress. Also, plugins shouldn't use it either. * * @since 2.0.3 * @deprecated 2.5 * @deprecated No alternative * * @return bool Always returns false */function wp_get_cookie_login() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}else :	_deprecated_function( 'wp_get_cookie_login', '2.5' );endif;if ( !function_exists('wp_login') ) :/** * Checks a users login information and logs them in if it checks out. This function is deprecated. * * Use the global $error to get the reason why the login failed. If the username * is blank, no error will be set, so assume blank username on that case. * * Plugins extending this function should also provide the global $error and set * what the error is, so that those checking the global for why there was a * failure can utilize it later. * * @since 1.2.2 * @deprecated Use wp_signon() * @global string $error Error when false is returned * * @param string $username User's username * @param string $password User's password * @param bool $deprecated Not used * @return bool False on login failure, true on successful check */function wp_login($username, $password, $deprecated = '') {	_deprecated_function( __FUNCTION__, '2.5', 'wp_signon()' );	global $error;	$user = wp_authenticate($username, $password);	if ( ! is_wp_error($user) )		return true;	$error = $user->get_error_message();	return false;}else :	_deprecated_function( 'wp_login', '2.5', 'wp_signon()' );endif;
<?php/** * Link/Bookmark API * * @package WordPress * @subpackage Bookmark *//** * Retrieve Bookmark data based on ID * * @since 2.1.0 * @uses $wpdb Database Object * * @param int $bookmark_id * @param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant * @param string $filter Optional, default is 'raw'. * @return array|object Type returned depends on $output value. */function get_bookmark($bookmark, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( empty($bookmark) ) {		if ( isset($GLOBALS['link']) )			$_bookmark = & $GLOBALS['link'];		else			$_bookmark = null;	} elseif ( is_object($bookmark) ) {		wp_cache_add($bookmark->link_id, $bookmark, 'bookmark');		$_bookmark = $bookmark;	} else {		if ( isset($GLOBALS['link']) && ($GLOBALS['link']->link_id == $bookmark) ) {			$_bookmark = & $GLOBALS['link'];		} elseif ( ! $_bookmark = wp_cache_get($bookmark, 'bookmark') ) {			$_bookmark = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->links WHERE link_id = %d LIMIT 1", $bookmark));			$_bookmark->link_category = array_unique( wp_get_object_terms($_bookmark->link_id, 'link_category', array('fields' => 'ids')) );			wp_cache_add($_bookmark->link_id, $_bookmark, 'bookmark');		}	}	$_bookmark = sanitize_bookmark($_bookmark, $filter);	if ( $output == OBJECT ) {		return $_bookmark;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($_bookmark);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($_bookmark));	} else {		return $_bookmark;	}}/** * Retrieve single bookmark data item or field. * * @since 2.3.0 * @uses get_bookmark() Gets bookmark object using $bookmark as ID * @uses sanitize_bookmark_field() Sanitizes Bookmark field based on $context. * * @param string $field The name of the data field to return * @param int $bookmark The bookmark ID to get field * @param string $context Optional. The context of how the field will be used. * @return string */function get_bookmark_field( $field, $bookmark, $context = 'display' ) {	$bookmark = (int) $bookmark;	$bookmark = get_bookmark( $bookmark );	if ( is_wp_error($bookmark) )		return $bookmark;	if ( !is_object($bookmark) )		return '';	if ( !isset($bookmark->$field) )		return '';	return sanitize_bookmark_field($field, $bookmark->$field, $bookmark->link_id, $context);}/** * Retrieves the list of bookmarks * * Attempts to retrieve from the cache first based on MD5 hash of arguments. If * that fails, then the query will be built from the arguments and executed. The * results will be stored to the cache. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'include' - Default is empty string (string). Include other categories *		separated by commas. * 'exclude' - Default is empty string (string). Exclude other categories *		separated by commas. * * @since 2.1.0 * @uses $wpdb Database Object * @link http://codex.wordpress.org/Template_Tags/get_bookmarks * * @param string|array $args List of arguments to overwrite the defaults * @return array List of bookmark row objects */function get_bookmarks($args = '') {	global $wpdb;	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'include' => '',		'exclude' => '', 'search' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$cache = array();	$key = md5( serialize( $r ) );	if ( $cache = wp_cache_get( 'get_bookmarks', 'bookmark' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) )			return apply_filters('get_bookmarks', $cache[ $key ], $r );	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';  //ignore exclude, category, and category_name params if using include		$category = '';		$category_name = '';		$inclinks = preg_split('/[\s,]+/',$include);		if ( count($inclinks) ) {			foreach ( $inclinks as $inclink ) {				if (empty($inclusions))					$inclusions = ' AND ( link_id = ' . intval($inclink) . ' ';				else					$inclusions .= ' OR link_id = ' . intval($inclink) . ' ';			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$exlinks = preg_split('/[\s,]+/',$exclude);		if ( count($exlinks) ) {			foreach ( $exlinks as $exlink ) {				if (empty($exclusions))					$exclusions = ' AND ( link_id <> ' . intval($exlink) . ' ';				else					$exclusions .= ' AND link_id <> ' . intval($exlink) . ' ';			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	if ( !empty($category_name) ) {		if ( $category = get_term_by('name', $category_name, 'link_category') ) {			$category = $category->term_id;		} else {			$cache[ $key ] = array();			wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );			return apply_filters( 'get_bookmarks', array(), $r );		}	}	if ( ! empty($search) ) {		$search = like_escape($search);		$search = " AND ( (link_url LIKE '%$search%') OR (link_name LIKE '%$search%') OR (link_description LIKE '%$search%') ) ";	}	$category_query = '';	$join = '';	if ( !empty($category) ) {		$incategories = preg_split('/[\s,]+/',$category);		if ( count($incategories) ) {			foreach ( $incategories as $incat ) {				if (empty($category_query))					$category_query = ' AND ( tt.term_id = ' . intval($incat) . ' ';				else					$category_query .= ' OR tt.term_id = ' . intval($incat) . ' ';			}		}	}	if (!empty($category_query)) {		$category_query .= ") AND taxonomy = 'link_category'";		$join = " INNER JOIN $wpdb->term_relationships AS tr ON ($wpdb->links.link_id = tr.object_id) INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_taxonomy_id = tr.term_taxonomy_id";	}	if ( $show_updated && get_option('links_recently_updated_time') ) {		$recently_updated_test = ", IF (DATE_ADD(link_updated, INTERVAL " . get_option('links_recently_updated_time') . " MINUTE) >= NOW(), 1,0) as recently_updated ";	} else {		$recently_updated_test = '';	}	$get_updated = ( $show_updated ) ? ', UNIX_TIMESTAMP(link_updated) AS link_updated_f ' : '';	$orderby = strtolower($orderby);	$length = '';	switch ($orderby) {		case 'length':			$length = ", CHAR_LENGTH(link_name) AS length";			break;		case 'rand':			$orderby = 'rand()';			break;		default:			$orderparams = array();			foreach ( explode(',', $orderby) as $ordparam )				$orderparams[] = 'link_' . trim($ordparam);			$orderby = implode(',', $orderparams);	}	if ( 'link_id' == $orderby )		$orderby = "$wpdb->links.link_id";	$visible = '';	if ( $hide_invisible )		$visible = "AND link_visible = 'Y'";	$query = "SELECT * $length $recently_updated_test $get_updated FROM $wpdb->links $join WHERE 1=1 $visible $category_query";	$query .= " $exclusions $inclusions $search";	$query .= " ORDER BY $orderby $order";	if ($limit != -1)		$query .= " LIMIT $limit";	$results = $wpdb->get_results($query);	$cache[ $key ] = $results;	wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );	return apply_filters('get_bookmarks', $results, $r);}/** * Sanitizes all bookmark fields * * @since 2.3.0 * * @param object|array $bookmark Bookmark row * @param string $context Optional, default is 'display'. How to filter the *		fields * @return object|array Same type as $bookmark but with fields sanitized. */function sanitize_bookmark($bookmark, $context = 'display') {	$fields = array('link_id', 'link_url', 'link_name', 'link_image', 'link_target', 'link_category',		'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_updated',		'link_rel', 'link_notes', 'link_rss', );	if ( is_object($bookmark) ) {		$do_object = true;		$link_id = $bookmark->link_id;	} else {		$do_object = false;		$link_id = $bookmark['link_id'];	}	foreach ( $fields as $field ) {		if ( $do_object ) {			if ( isset($bookmark->$field) )				$bookmark->$field = sanitize_bookmark_field($field, $bookmark->$field, $link_id, $context);		} else {			if ( isset($bookmark[$field]) )				$bookmark[$field] = sanitize_bookmark_field($field, $bookmark[$field], $link_id, $context);		}	}	return $bookmark;}/** * Sanitizes a bookmark field * * Sanitizes the bookmark fields based on what the field name is. If the field * has a strict value set, then it will be tested for that, else a more generic * filtering is applied. After the more strict filter is applied, if the * $context is 'raw' then the value is immediately return. * * Hooks exist for the more generic cases. With the 'edit' context, the * 'edit_$field' filter will be called and passed the $value and $bookmark_id * respectively. With the 'db' context, the 'pre_$field' filter is called and * passed the value. The 'display' context is the final context and has the * $field has the filter name and is passed the $value, $bookmark_id, and * $context respectively. * * @since 2.3.0 * * @param string $field The bookmark field * @param mixed $value The bookmark field value * @param int $bookmark_id Bookmark ID * @param string $context How to filter the field value. Either 'raw', 'edit', *		'attribute', 'js', 'db', or 'display' * @return mixed The filtered value */function sanitize_bookmark_field($field, $value, $bookmark_id, $context) {	switch ( $field ) {	case 'link_id' : // ints	case 'link_rating' :		$value = (int) $value;		break;	case 'link_category' : // array( ints )		$value = array_map('absint', (array) $value);		// We return here so that the categories aren't filtered.		// The 'link_category' filter is for the name of a link category, not an array of a link's link categories		return $value;		break;	case 'link_visible' : // bool stored as Y|N		$value = preg_replace('/[^YNyn]/', '', $value);		break;	case 'link_target' : // "enum"		$targets = array('_top', '_blank');		if ( ! in_array($value, $targets) )			$value = '';		break;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$format_to_edit = array('link_notes');		$value = apply_filters("edit_$field", $value, $bookmark_id);		if ( in_array($field, $format_to_edit) ) {			$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		$value = apply_filters("pre_$field", $value);	} else {		// Use display filters by default.		$value = apply_filters($field, $value, $bookmark_id, $context);		if ( 'attribute' == $context )			$value = esc_attr($value);		else if ( 'js' == $context )			$value = esc_js($value);	}	return $value;}/** * Deletes bookmark cache * * @since 2.7.0 * @uses wp_cache_delete() Deletes the contents of 'get_bookmarks' */function clean_bookmark_cache($bookmark_id) {	wp_cache_delete( $bookmark_id, 'bookmark' );	wp_cache_delete( 'get_bookmarks', 'bookmark' );}?>
<?php/** * Object Cache API * * @link http://codex.wordpress.org/Function_Reference/WP_Cache * * @package WordPress * @subpackage Cache *//** * Adds data to the cache, if the cache key doesn't aleady exist. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::add() * * @param int|string $key The cache ID to use for retrieval later * @param mixed $data The data to add to the cache store * @param string $flag The group to add the cache to * @param int $expire When the cache data should be expired * @return unknown */function wp_cache_add($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->add($key, $data, $flag, $expire);}/** * Closes the cache. * * This function has ceased to do anything since WordPress 2.5. The * functionality was removed along with the rest of the persistant cache. This * does not mean that plugins can't implement this function when they need to * make sure that the cache is cleaned up after WordPress no longer needs it. * * @since 2.0.0 * * @return bool Always returns True */function wp_cache_close() {	return true;}/** * Removes the cache contents matching ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::delete() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool True on successful removal, false on failure */function wp_cache_delete($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->delete($id, $flag);}/** * Removes all cache items. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::flush() * * @return bool Always returns true */function wp_cache_flush() {	global $wp_object_cache;	return $wp_object_cache->flush();}/** * Retrieves the cache contents from the cache by ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::get() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool|mixed False on failure to retrieve contents or the cache *		contents on success */function wp_cache_get($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->get($id, $flag);}/** * Sets up Object Cache Global and assigns it. * * @since 2.0.0 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache */function wp_cache_init() {	$GLOBALS['wp_object_cache'] =& new WP_Object_Cache();}/** * Replaces the contents of the cache with new data. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::replace() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_replace($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->replace($key, $data, $flag, $expire);}/** * Saves the data to the cache. * * @since 2.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::set() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_set($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->set($key, $data, $flag, $expire);}/** * Adds a group or set of groups to the list of global groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_global_groups( $groups ) {	global $wp_object_cache;	return $wp_object_cache->add_global_groups($groups);}/** * Adds a group or set of groups to the list of non-persistent groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_non_persistent_groups( $groups ) {	// Default cache doesn't persist so nothing to do here.	return;}/** * Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, * this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_reset() {	global $wp_object_cache;	return $wp_object_cache->reset();}/** * WordPress Object Cache * * The WordPress Object Cache is used to save on trips to the database. The * Object Cache stores all of the cache data to memory and makes the cache * contents available by using a key, which is used to name and later retrieve * the cache contents. * * The Object Cache can be replaced by other caching mechanisms by placing files * in the wp-content folder which is looked at in wp-settings. If that file * exists, then this file will not be included. * * @package WordPress * @subpackage Cache * @since 2.0 */class WP_Object_Cache {	/**	 * Holds the cached objects	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $cache = array ();	/**	 * Cache objects that do not exist in the cache	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $non_existent_objects = array ();	/**	 * The amount of times the cache data was already stored in the cache.	 *	 * @since 2.5.0	 * @access private	 * @var int	 */	var $cache_hits = 0;	/**	 * Amount of times the cache did not have the request in cache	 *	 * @var int	 * @access public	 * @since 2.0.0	 */	var $cache_misses = 0;	/**	 * List of global groups	 *	 * @var array	 * @access protected	 * @since 3.0.0	 */	var $global_groups = array();	/**	 * Adds data to the cache if it doesn't already exist.	 *	 * @uses WP_Object_Cache::get Checks to see if the cache already has data.	 * @uses WP_Object_Cache::set Sets the data after the checking the cache	 *		contents existance.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if cache ID and group already exists, true on success	 */	function add( $id, $data, $group = 'default', $expire = '' ) {		if ( empty ($group) )			$group = 'default';		if (false !== $this->get($id, $group))			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Sets the list of global groups.	 *	 * @since 3.0.0	 *	 * @param array $groups List of groups that are global.	 */	function add_global_groups( $groups ) {		$groups = (array) $groups;		$this->global_groups = array_merge($this->global_groups, $groups);		$this->global_groups = array_unique($this->global_groups);	}	/**	 * Remove the contents of the cache ID in the group	 *	 * If the cache ID does not exist in the group and $force parameter is set	 * to false, then nothing will happen. The $force parameter is set to false	 * by default.	 *	 * On success the group and the id will be added to the	 * $non_existent_objects property in the class.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @param bool $force Optional. Whether to force the unsetting of the cache	 *		ID in the group	 * @return bool False if the contents weren't deleted and true on success	 */	function delete($id, $group = 'default', $force = false) {		if (empty ($group))			$group = 'default';		if (!$force && false === $this->get($id, $group))			return false;		unset ($this->cache[$group][$id]);		$this->non_existent_objects[$group][$id] = true;		return true;	}	/**	 * Clears the object cache of all data	 *	 * @since 2.0.0	 *	 * @return bool Always returns true	 */	function flush() {		$this->cache = array ();		return true;	}	/**	 * Retrieves the cache contents, if it exists	 *	 * The contents will be first attempted to be retrieved by searching by the	 * ID in the cache group. If the cache is hit (success) then the contents	 * are returned.	 *	 * On failure, the $non_existent_objects property is checked and if the	 * cache group and ID exist in there the cache misses will not be	 * incremented. If not in the nonexistent objects property, then the cache	 * misses will be incremented and the cache group and ID will be added to	 * the nonexistent objects.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @return bool|mixed False on failure to retrieve contents or the cache	 *		contents on success	 */	function get($id, $group = 'default') {		if ( empty ($group) )			$group = 'default';		if ( isset ($this->cache[$group][$id]) ) {			$this->cache_hits += 1;			if ( is_object($this->cache[$group][$id]) )				return wp_clone($this->cache[$group][$id]);			else				return $this->cache[$group][$id];		}		if ( isset ($this->non_existent_objects[$group][$id]) )			return false;		$this->non_existent_objects[$group][$id] = true;		$this->cache_misses += 1;		return false;	}	/**	 * Replace the contents in the cache, if contents already exist	 *	 * @since 2.0.0	 * @see WP_Object_Cache::set()	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if not exists, true if contents were replaced	 */	function replace($id, $data, $group = 'default', $expire = '') {		if (empty ($group))			$group = 'default';		if ( false === $this->get($id, $group) )			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Reset keys	 *	 * @since 3.0.0	 */	function reset() {		// Clear out non-global caches since the blog ID has changed.		foreach ( array_keys($this->cache) as $group ) {			if ( !in_array($group, $this->global_groups) )				unset($this->cache[$group]);		}	}	/**	 * Sets the data contents into the cache	 *	 * The cache contents is grouped by the $group parameter followed by the	 * $id. This allows for duplicate ids in unique groups. Therefore, naming of	 * the group should be used with care and should follow normal function	 * naming guidelines outside of core WordPress usage.	 *	 * The $expire parameter is not used, because the cache will automatically	 * expire for each time a page is accessed and PHP finishes. The method is	 * more for cache plugins which use files.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire Not Used	 * @return bool Always returns true	 */	function set($id, $data, $group = 'default', $expire = '') {		if ( empty ($group) )			$group = 'default';		if ( NULL === $data )			$data = '';		if ( is_object($data) )			$data = wp_clone($data);		$this->cache[$group][$id] = $data;		if ( isset($this->non_existent_objects[$group][$id]) )			unset ($this->non_existent_objects[$group][$id]);		return true;	}	/**	 * Echoes the stats of the caching.	 *	 * Gives the cache hits, and cache misses. Also prints every cached group,	 * key and the data.	 *	 * @since 2.0.0	 */	function stats() {		echo "<p>";		echo "<strong>Cache Hits:</strong> {$this->cache_hits}<br />";		echo "<strong>Cache Misses:</strong> {$this->cache_misses}<br />";		echo "</p>";		foreach ($this->cache as $group => $cache) {			echo "<p>";			echo "<strong>Group:</strong> $group<br />";			echo "<strong>Cache:</strong>";			echo "<pre>";			print_r($cache);			echo "</pre>";		}	}	/**	 * PHP4 constructor; Calls PHP 5 style constructor	 *	 * @since 2.0.0	 *	 * @return WP_Object_Cache	 */	function WP_Object_Cache() {		return $this->__construct();	}	/**	 * Sets up object properties; PHP 5 style constructor	 *	 * @since 2.0.8	 * @return null|WP_Object_Cache If cache is disabled, returns null.	 */	function __construct() {		/**		 * @todo This should be moved to the PHP4 style constructor, PHP5		 * already calls __destruct()		 */		register_shutdown_function(array(&$this, "__destruct"));	}	/**	 * Will save the object cache before object is completely destroyed.	 *	 * Called upon object destruction, which should be when PHP ends.	 *	 * @since  2.0.8	 *	 * @return bool True value. Won't be used by PHP	 */	function __destruct() {		return true;	}}?>
<?php/** * Multisite users administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_users' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Users' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This table shows all users across the network and the sites to which they are assigned.') . '</p>' .	'<p>' . __('Hover over any user on the list to make the edit links appear. The Edit link on the left will take you to his or her Edit User profile page; the Edit link on the right by any site name goes to an Edit Site screen for that site.') . '</p>' .	'<p>' . __('You can also go to the user&#8217;s profile page by clicking on the individual username.') . '</p>' .	'<p>' . __('You can sort the table by clicking on any of the bold headings and switch between list and excerpt views by using the icons in the upper right.') . '</p>' .	'<p>' . __('The bulk action will permanently delete selected users, or mark/unmark those selected as spam. Spam users will have posts removed and will be unable to sign up again with the same email addresses.') . '</p>' .	'<p>' . __('Add User will add that person to this table and send them an email.') . '</p>' .	'<p>' . __('Users who are signed up to the network without a site are added as subscribers to the main or primary dashboard site, giving them profile pages to manage their accounts. These users will only see Dashboard and My Sites in the main navigation until a site is created for them.') . '</p>' .	'<p>' . __('You can make an existing user an additional super admin by going to the Edit User profile page and checking the box to grant that privilege.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Users_SubPanel" target="_blank">Network Users Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'delete':				_e( 'User deleted.' );			break;			case 'all_spam':				_e( 'Users marked as spam.' );			break;			case 'all_notspam':				_e( 'Users removed from spam.' );			break;			case 'all_delete':				_e( 'Users deleted.' );			break;			case 'add':				_e( 'User added.' );			break;		}		?>	</p></div>	<?php}	$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;	if ( empty( $pagenum ) )		$pagenum = 1;	$per_page = (int) get_user_option( 'ms_users_per_page' );	if ( empty( $per_page ) || $per_page < 1 )		$per_page = 15;	$per_page = apply_filters( 'ms_users_per_page', $per_page );	$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';	$like_s = esc_sql( like_escape( $s ) );	$query = "SELECT * FROM {$wpdb->users}";	if ( !empty( $like_s ) ) {		$query .= " WHERE user_login LIKE '%$like_s%' OR user_email LIKE '%$like_s%'";	}	$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';	if ( $order_by == 'email' ) {		$query .= ' ORDER BY user_email ';	} elseif ( $order_by == 'login' ) {		$query .= ' ORDER BY user_login ';	} elseif ( $order_by == 'name' ) {		$query .= ' ORDER BY display_name ';	} elseif ( $order_by == 'registered' ) {		$query .= ' ORDER BY user_registered ';	} else {		$order_by = 'id';		$query .= ' ORDER BY ID ';	}	$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? 'DESC' : 'ASC';	$query .= $order;	$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(ID)', $query ) );	$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page) . ", " . intval( $per_page );	$user_list = $wpdb->get_results( $query, ARRAY_A );	$num_pages = ceil( $total / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg( 'paged', '%#%' ),		'format' => '',		'prev_text' => __( '&laquo;' ),		'next_text' => __( '&raquo;' ),		'total' => $num_pages,		'current' => $pagenum	));	if ( empty( $_GET['mode'] ) )		$mode = 'list';	else		$mode = esc_attr( $_GET['mode'] );	?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e( 'Users' ); ?>	<a href="#form-add-user" class="button add-new-h2"><?php echo esc_html_x( 'Add New' , 'users'); ?></a>	<?php	if ( isset( $_GET['s'] ) && $_GET['s'] )	printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );	?>	</h2>	<form action="ms-users.php" method="get" class="search-form">		<p class="search-box">		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" class="search-input" id="user-search-input" />		<input type="submit" id="post-query-submit" value="<?php esc_attr_e( 'Search Users' ) ?>" class="button" />		</p>	</form>	<form id="form-user-list" action='ms-edit.php?action=allusers' method='post'>		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">			<div class="alignleft actions">				<select name="action">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />				<?php wp_nonce_field( 'bulk-ms-users', '_wpnonce_bulk-ms-users' ); ?>			</div>			<?php if ( $page_links ) { ?>			<div class="tablenav-pages">			<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',			number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),			number_format_i18n( min( $pagenum * $per_page, $total ) ),			number_format_i18n( $total ),			$page_links			); echo $page_links_text; ?>			</div>			<?php } ?>			<div class="view-switch">				<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>				<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>			</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$users_columns = array(			'id'           => __( 'ID' ),			'login'      => __( 'Username' ),			'name'       => __( 'Name' ),			'email'      => __( 'E-mail' ),			'registered' => _x( 'Registered', 'user' ),			'blogs'      => __( 'Sites' )		);		$users_columns = apply_filters( 'wpmu_users_columns', $users_columns );		?>		<table class="widefat">			<thead>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($users_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array( 'action', 'updated' ), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( $column_id == 'blogs' ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url; ?>			</tr>			</thead>			<tfoot>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php echo $col_url; ?>			</tr>			</tfoot>			<tbody id="the-user-list" class="list:user">			<?php if ( $user_list ) {				$class = '';				$super_admins = get_super_admins();				foreach ( (array) $user_list as $user ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );					foreach ( $status_list as $status => $col ) {						if ( $user[$status] )							$class = $col;					}					?>					<tr class="<?php echo $class; ?>">					<?php					foreach( (array) $users_columns as $column_name=>$column_display_name ) :						switch( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $user['ID'] ?>" name="allusers[]" value="<?php echo esc_attr( $user['ID'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $user['ID'] ?>								</th>							<?php							break;							case 'login':								$avatar	= get_avatar( $user['user_email'], 32 );								$edit_link = ( $current_user->ID == $user['ID'] ) ? 'profile.php' : 'user-edit.php?user_id=' . $user['ID'];								?>								<td class="username column-username">									<?php echo $avatar; ?><strong><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>" class="edit"><?php echo stripslashes( $user['user_login'] ); ?></a><?php									if ( in_array( $user['user_login'], $super_admins ) )										echo ' - ' . __( 'Super admin' );									?></strong>									<br/>									<div class="row-actions">										<span class="edit"><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>"><?php _e( 'Edit' ); ?></a></span>										<?php if ( ! in_array( $user['user_login'], $super_admins ) ) { ?>										| <span class="delete"><a href="<?php echo $delete	= esc_url( admin_url( add_query_arg( '_wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'ms-edit.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user['ID'] ) ) ); ?>" class="delete"><?php _e( 'Delete' ); ?></a></span>										<?php } ?>									</div>								</td>							<?php							break;							case 'name': ?>								<td class="name column-name"><?php echo $user['display_name'] ?></td>							<?php							break;							case 'email': ?>								<td class="email column-email"><a href="mailto:<?php echo $user['user_email'] ?>"><?php echo $user['user_email'] ?></a></td>							<?php							break;							case 'registered':								if ( 'list' == $mode )									$date = 'Y/m/d';								else									$date = 'Y/m/d \<\b\r \/\> g:i:s a';							?>								<td><?php echo mysql2date( __( $date ), $user['user_registered'] ); ?></td>							<?php							break;							case 'blogs':								$blogs = get_blogs_of_user( $user['ID'], true );								?>								<td>									<?php									if ( is_array( $blogs ) ) {										foreach ( (array) $blogs as $key => $val ) {											$path	= ( $val->path == '/' ) ? '' : $val->path;											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . str_replace( '.' . $current_site->domain, '', $val->domain . $path ) . '</a>';											echo ' <small class="row-actions">';											// Edit											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . __( 'Edit' ) . '</a> | ';											// View											echo '<a ';											if ( get_blog_status( $val->userblog_id, 'spam' ) == 1 )												echo 'style="background-color: #faa" ';											echo 'href="' .  esc_url( get_home_url( $val->userblog_id ) )  . '">' . __( 'View' ) . '</a>';											echo '</small><br />';										}									}									?>								</td>							<?php							break;							default: ?>								<td><?php do_action( 'manage_users_custom_column', $column_name, $user['ID'] ); ?></td>							<?php							break;						}					endforeach					?>					</tr>					<?php				}			} else {			?>				<tr>					<td colspan="<?php echo (int) count($users_columns); ?>"><?php _e( 'No users found.' ) ?></td>				</tr>				<?php			} // end if ($users)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">				<select name="action2">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div><?phpif ( apply_filters( 'show_adduser_fields', true ) ) :?><div class="wrap" id="form-add-user">	<h3><?php _e( 'Add User' ) ?></h3>	<form action="ms-edit.php?action=adduser" method="post">	<table class="form-table">		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Username' ) ?></th>			<td><input type="text" class="regular-text" name="user[username]" /></td>		</tr>		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Email' ) ?></th>			<td><input type="text" class="regular-text" name="user[email]" /></td>		</tr>		<tr class="form-field">			<td colspan="2"><?php _e( 'Username and password will be mailed to the above email address.' ) ?></td>		</tr>	</table>	<p class="submit">		<?php wp_nonce_field( 'add-user', '_wpnonce_add-user' ) ?>		<input class="button" type="submit" value="<?php esc_attr_e( 'Add user' ) ?>" /></p>	</form></div><?php endif; ?><?php include( './admin-footer.php' ); ?>
<?php/** * WordPress scripts and styles default loader. * * Most of the functionality that existed here was moved to * {@link http://backpress.automattic.com/ BackPress}. WordPress themes and * plugins will only be concerned about the filters and actions set in this * file. * * Several constants are used to manage the loading, concatenating and compression of scripts and CSS: * define('SCRIPT_DEBUG', true); loads the development (non-minified) versions of all scripts and CSS, and disables compression and concatenation, * define('CONCATENATE_SCRIPTS', false); disables compression and concatenation of scripts and CSS, * define('COMPRESS_SCRIPTS', false); disables compression of scripts, * define('COMPRESS_CSS', false); disables compression of CSS, * define('ENFORCE_GZIP', true); forces gzip for compression (default is deflate). * * The globals $concatenate_scripts, $compress_scripts and $compress_css can be set by plugins * to temporarily override the above settings. Also a compression test is run once and the result is saved * as option 'can_compress_scripts' (0/1). The test will run again if that option is deleted. * * @package WordPress *//** BackPress: WordPress Dependencies Class */require( ABSPATH . WPINC . '/class.wp-dependencies.php' );/** BackPress: WordPress Scripts Class */require( ABSPATH . WPINC . '/class.wp-scripts.php' );/** BackPress: WordPress Scripts Functions */require( ABSPATH . WPINC . '/functions.wp-scripts.php' );/** BackPress: WordPress Styles Class */require( ABSPATH . WPINC . '/class.wp-styles.php' );/** BackPress: WordPress Styles Functions */require( ABSPATH . WPINC . '/functions.wp-styles.php' );/** * Set up WordPress scripts to load by default for Administration Panels. * * Localizes a few of the scripts. * $scripts->add_data( 'script-handle', 'group', 1 ); queues the script for the footer * * @since 2.6.0 * * @param object $scripts WP_Scripts object. */function wp_default_scripts( &$scripts ) {	if ( !$guessurl = site_url() )		$guessurl = wp_guess_url();	$scripts->base_url = $guessurl;	$scripts->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$scripts->default_version = get_bloginfo( 'version' );	$scripts->default_dirs = array('/wp-admin/js/', '/wp-includes/js/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$scripts->add( 'utils', "/wp-admin/js/utils$suffix.js", false, '20090102' );	$scripts->add( 'common', "/wp-admin/js/common$suffix.js", array('jquery', 'hoverIntent', 'utils'), '20100531' );	$scripts->add_data( 'common', 'group', 1 );	$scripts->localize( 'common', 'commonL10n', array(		'warnDelete' => __("You are about to permanently delete the selected items.\n  'Cancel' to stop, 'OK' to delete."),		'l10n_print_after' => 'try{convertEntities(commonL10n);}catch(e){};'	) );	$scripts->add( 'sack', "/wp-includes/js/tw-sack$suffix.js", false, '1.6.1' );	$scripts->add_data( 'sack', 'group', 1 );	$scripts->add( 'quicktags', "/wp-includes/js/quicktags$suffix.js", false, '20090307' );	$scripts->localize( 'quicktags', 'quicktagsL10n', array(		'quickLinks' => __('(Quick Links)'),		'wordLookup' => __('Enter a word to look up:'),		'dictionaryLookup' => esc_attr(__('Dictionary lookup')),		'lookup' => esc_attr(__('lookup')),		'closeAllOpenTags' => esc_attr(__('Close all open tags')),		'closeTags' => esc_attr(__('close tags')),		'enterURL' => __('Enter the URL'),		'enterImageURL' => __('Enter the URL of the image'),		'enterImageDescription' => __('Enter a description of the image'),		'l10n_print_after' => 'try{convertEntities(quicktagsL10n);}catch(e){};'	) );	$scripts->add( 'colorpicker', "/wp-includes/js/colorpicker$suffix.js", array('prototype'), '3517m' );	$scripts->add( 'editor', "/wp-admin/js/editor$suffix.js", false, '20091124' );	$scripts->add( 'prototype', '/wp-includes/js/prototype.js', false, '1.6.1');	$scripts->add( 'wp-ajax-response', "/wp-includes/js/wp-ajax-response$suffix.js", array('jquery'), '20091119' );	$scripts->add_data( 'wp-ajax-response', 'group', 1 );	$scripts->localize( 'wp-ajax-response', 'wpAjax', array(		'noPerm' => __('You do not have permission to do that.'),		'broken' => __('An unidentified error has occurred.'),		'l10n_print_after' => 'try{convertEntities(wpAjax);}catch(e){};'	) );	$scripts->add( 'autosave', "/wp-includes/js/autosave$suffix.js", array('schedule', 'wp-ajax-response'), '20100410' );	$scripts->add_data( 'autosave', 'group', 1 );	$scripts->add( 'wp-lists', "/wp-includes/js/wp-lists$suffix.js", array('wp-ajax-response'), '20091128' );	$scripts->add_data( 'wp-lists', 'group', 1 );	$scripts->add( 'scriptaculous-root', '/wp-includes/js/scriptaculous/wp-scriptaculous.js', array('prototype'), '1.8.3');	$scripts->add( 'scriptaculous-builder', '/wp-includes/js/scriptaculous/builder.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-dragdrop', '/wp-includes/js/scriptaculous/dragdrop.js', array('scriptaculous-builder', 'scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-effects', '/wp-includes/js/scriptaculous/effects.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous-slider', '/wp-includes/js/scriptaculous/slider.js', array('scriptaculous-effects'), '1.8.3');	$scripts->add( 'scriptaculous-sound', '/wp-includes/js/scriptaculous/sound.js', array( 'scriptaculous-root' ), '1.8.3' );	$scripts->add( 'scriptaculous-controls', '/wp-includes/js/scriptaculous/controls.js', array('scriptaculous-root'), '1.8.3');	$scripts->add( 'scriptaculous', '', array('scriptaculous-dragdrop', 'scriptaculous-slider', 'scriptaculous-controls'), '1.8.3');	// not used in core, replaced by Jcrop.js	$scripts->add( 'cropper', '/wp-includes/js/crop/cropper.js', array('scriptaculous-dragdrop'), '20070118');	$scripts->add( 'jquery', '/wp-includes/js/jquery/jquery.js', false, '1.4.2');	$scripts->add( 'jquery-ui-core', '/wp-includes/js/jquery/ui.core.js', array('jquery'), '1.7.3' );	$scripts->add_data( 'jquery-ui-core', 'group', 1 );	$scripts->add( 'jquery-ui-tabs', '/wp-includes/js/jquery/ui.tabs.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-tabs', 'group', 1 );	$scripts->add( 'jquery-ui-sortable', '/wp-includes/js/jquery/ui.sortable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-sortable', 'group', 1 );	$scripts->add( 'jquery-ui-draggable', '/wp-includes/js/jquery/ui.draggable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-draggable', 'group', 1 );	$scripts->add( 'jquery-ui-droppable', '/wp-includes/js/jquery/ui.droppable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-droppable', 'group', 1 );	$scripts->add( 'jquery-ui-selectable', '/wp-includes/js/jquery/ui.selectable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-selectable', 'group', 1 );	$scripts->add( 'jquery-ui-resizable', '/wp-includes/js/jquery/ui.resizable.js', array('jquery-ui-core'), '1.7.3' );	$scripts->add_data( 'jquery-ui-resizable', 'group', 1 );	$scripts->add( 'jquery-ui-dialog', '/wp-includes/js/jquery/ui.dialog.js', array('jquery-ui-resizable', 'jquery-ui-draggable'), '1.7.3' );	$scripts->add_data( 'jquery-ui-dialog', 'group', 1 );	// deprecated, not used in core, most functionality is included in jQuery 1.3	$scripts->add( 'jquery-form', "/wp-includes/js/jquery/jquery.form$suffix.js", array('jquery'), '2.02m');	$scripts->add_data( 'jquery-form', 'group', 1 );	$scripts->add( 'jquery-color', "/wp-includes/js/jquery/jquery.color$suffix.js", array('jquery'), '2.0-4561m');	$scripts->add_data( 'jquery-color', 'group', 1 );	$scripts->add( 'suggest', "/wp-includes/js/jquery/suggest$suffix.js", array('jquery'), '1.1-20090125');	$scripts->add_data( 'suggest', 'group', 1 );	$scripts->add( 'schedule', '/wp-includes/js/jquery/jquery.schedule.js', array('jquery'), '20m');	$scripts->add_data( 'schedule', 'group', 1 );	$scripts->add( 'jquery-hotkeys', "/wp-includes/js/jquery/jquery.hotkeys$suffix.js", array('jquery'), '0.0.2m' );	$scripts->add_data( 'jquery-hotkeys', 'group', 1 );	$scripts->add( 'jquery-table-hotkeys', "/wp-includes/js/jquery/jquery.table-hotkeys$suffix.js", array('jquery', 'jquery-hotkeys'), '20090102' );	$scripts->add_data( 'jquery-table-hotkeys', 'group', 1 );	$scripts->add( 'thickbox', "/wp-includes/js/thickbox/thickbox.js", array('jquery'), '3.1-20100407');	$scripts->add_data( 'thickbox', 'group', 1 );	$scripts->localize( 'thickbox', 'thickboxL10n', array(			'next' => __('Next &gt;'),			'prev' => __('&lt; Prev'),			'image' => __('Image'),			'of' => __('of'),			'close' => __('Close'),			'noiframes' => __('This feature requires inline frames. You have iframes disabled or your browser does not support them.'),			'l10n_print_after' => 'try{convertEntities(thickboxL10n);}catch(e){};'	) );	$scripts->add( 'jcrop', "/wp-includes/js/jcrop/jquery.Jcrop$suffix.js", array('jquery'), '0.9.8');	$scripts->add( 'swfobject', "/wp-includes/js/swfobject.js", false, '2.2');	$scripts->add( 'swfupload', '/wp-includes/js/swfupload/swfupload.js', false, '2201');	$scripts->add( 'swfupload-swfobject', '/wp-includes/js/swfupload/plugins/swfupload.swfobject.js', array('swfupload', 'swfobject'), '2201');	$scripts->add( 'swfupload-queue', '/wp-includes/js/swfupload/plugins/swfupload.queue.js', array('swfupload'), '2201');	$scripts->add( 'swfupload-speed', '/wp-includes/js/swfupload/plugins/swfupload.speed.js', array('swfupload'), '2201');	if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) {		// queue all SWFUpload scripts that are used by default		$scripts->add( 'swfupload-all', false, array('swfupload', 'swfupload-swfobject', 'swfupload-queue'), '2201');	} else {		$scripts->add( 'swfupload-all', '/wp-includes/js/swfupload/swfupload-all.js', array(), '2201');	}	$scripts->add( 'swfupload-handlers', "/wp-includes/js/swfupload/handlers$suffix.js", array('swfupload-all', 'jquery'), '2201-20100523');	$max_upload_size = ( (int) ( $max_up = @ini_get('upload_max_filesize') ) < (int) ( $max_post = @ini_get('post_max_size') ) ) ? $max_up : $max_post;	if ( empty($max_upload_size) )		$max_upload_size = __('not configured');	// these error messages came from the sample swfupload js, they might need changing.	$scripts->localize( 'swfupload-handlers', 'swfuploadL10n', array(			'queue_limit_exceeded' => __('You have attempted to queue too many files.'),			'file_exceeds_size_limit' => __('This file exceeds the maximum upload size for this site.'),			'zero_byte_file' => __('This file is empty. Please try another.'),			'invalid_filetype' => __('This file type is not allowed. Please try another.'),			'default_error' => __('An error occurred in the upload. Please try again later.'),			'missing_upload_url' => __('There was a configuration error. Please contact the server administrator.'),			'upload_limit_exceeded' => __('You may only upload 1 file.'),			'http_error' => __('HTTP error.'),			'upload_failed' => __('Upload failed.'),			'io_error' => __('IO error.'),			'security_error' => __('Security error.'),			'file_cancelled' => __('File canceled.'),			'upload_stopped' => __('Upload stopped.'),			'dismiss' => __('Dismiss'),			'crunching' => __('Crunching&hellip;'),			'deleted' => __('moved to the trash.'),			'l10n_print_after' => 'try{convertEntities(swfuploadL10n);}catch(e){};',			'error_uploading' => __('&#8220;%s&#8221; has failed to upload due to an error')	) );	$scripts->add( 'comment-reply', "/wp-includes/js/comment-reply$suffix.js", false, '20090102');	$scripts->add( 'json2', "/wp-includes/js/json2$suffix.js", false, '20090817');	$scripts->add( 'imgareaselect', "/wp-includes/js/imgareaselect/jquery.imgareaselect$suffix.js", array('jquery'), '0.9.1' );	$scripts->add_data( 'imgareaselect', 'group', 1 );	if ( is_admin() ) {		$scripts->add( 'ajaxcat', "/wp-admin/js/cat$suffix.js", array( 'wp-lists' ), '20090102' );		$scripts->add_data( 'ajaxcat', 'group', 1 );		$scripts->localize( 'ajaxcat', 'catL10n', array(			'add' => esc_attr(__('Add')),			'how' => __('Separate multiple categories with commas.'),			'l10n_print_after' => 'try{convertEntities(catL10n);}catch(e){};'		) );		$scripts->add( 'admin-categories', "/wp-admin/js/categories$suffix.js", array('wp-lists'), '20091201' );		$scripts->add_data( 'admin-categories', 'group', 1 );		$scripts->add( 'admin-tags', "/wp-admin/js/tags$suffix.js", array('jquery', 'wp-ajax-response'), '20100213' );		$scripts->add_data( 'admin-tags', 'group', 1 );		$scripts->localize( 'admin-tags', 'tagsl10n', array(			'noPerm' => __('You do not have permission to do that.'),			'broken' => __('An unidentified error has occurred.'),			'l10n_print_after' => 'try{convertEntities(tagsl10n);}catch(e){};'		));		$scripts->add( 'admin-custom-fields', "/wp-admin/js/custom-fields$suffix.js", array('wp-lists'), '20090106' );		$scripts->add_data( 'admin-custom-fields', 'group', 1 );		$scripts->add( 'password-strength-meter', "/wp-admin/js/password-strength-meter$suffix.js", array('jquery'), '20100331' );		$scripts->add_data( 'password-strength-meter', 'group', 1 );		$scripts->localize( 'password-strength-meter', 'pwsL10n', array(			'empty' => __('Strength indicator'),			'short' => __('Very weak'),			'bad' => __('Weak'),			/* translators: password strength */			'good' => _x('Medium', 'password strength'),			'strong' => __('Strong'),			'mismatch' => __('Mismatch'),			'l10n_print_after' => 'try{convertEntities(pwsL10n);}catch(e){};'		) );		$scripts->add( 'user-profile', "/wp-admin/js/user-profile$suffix.js", array('jquery'), '20100301' );		$scripts->add_data( 'user-profile', 'group', 1 );		$scripts->add( 'admin-comments', "/wp-admin/js/edit-comments$suffix.js", array('wp-lists', 'jquery-ui-resizable', 'quicktags'), '20100418' );		$scripts->add_data( 'admin-comments', 'group', 1 );		$scripts->localize( 'admin-comments', 'adminCommentsL10n', array(			'hotkeys_highlight_first' => isset($_GET['hotkeys_highlight_first']),			'hotkeys_highlight_last' => isset($_GET['hotkeys_highlight_last'])		) );		$scripts->add( 'xfn', "/wp-admin/js/xfn$suffix.js", array('jquery'), '20100403' );		$scripts->add_data( 'xfn', 'group', 1 );		$scripts->add( 'postbox', "/wp-admin/js/postbox$suffix.js", array('jquery-ui-sortable'), '20091012' );		$scripts->add_data( 'postbox', 'group', 1 );		$scripts->add( 'post', "/wp-admin/js/post$suffix.js", array('suggest', 'wp-lists', 'postbox'), '20100526' );		$scripts->add_data( 'post', 'group', 1 );		$scripts->localize( 'post', 'postL10n', array(			'tagsUsed' =>  __('Tags used on this post:'),			'add' => esc_attr(__('Add')),			'addTag' => esc_attr(__('Add new tag')),			'separate' => __('Separate tags with commas'),			'ok' => __('OK'),			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'publishOn' => __('Publish on:'),			'publishOnFuture' =>  __('Schedule for:'),			'publishOnPast' => __('Published on:'),			'showcomm' => __('Show more comments'),			'endcomm' => __('No more comments found.'),			'publish' => __('Publish'),			'schedule' => __('Schedule'),			'updatePost' => __('Update Post'),			'updatePage' => __('Update Page'),			'savePending' => __('Save as Pending'),			'saveDraft' => __('Save Draft'),			'private' => __('Private'),			'public' => __('Public'),			'publicSticky' => __('Public, Sticky'),			'password' => __('Password Protected'),			'privatelyPublished' => __('Privately Published'),			'published' => __('Published'),			'l10n_print_after' => 'try{convertEntities(postL10n);}catch(e){};'		) );		$scripts->add( 'link', "/wp-admin/js/link$suffix.js", array('wp-lists', 'postbox'), '20090526' );		$scripts->add_data( 'link', 'group', 1 );		$scripts->add( 'comment', "/wp-admin/js/comment$suffix.js", array('jquery'), '20091202' );		$scripts->add_data( 'comment', 'group', 1 );		$scripts->localize( 'comment', 'commentL10n', array(			'cancel' => __('Cancel'),			'edit' => __('Edit'),			'submittedOn' => __('Submitted on:'),			'l10n_print_after' => 'try{convertEntities(commentL10n);}catch(e){};'		) );		$scripts->add( 'admin-gallery', "/wp-admin/js/gallery$suffix.js", array( 'jquery-ui-sortable' ), '20090516' );		$scripts->add( 'media-upload', "/wp-admin/js/media-upload$suffix.js", array( 'thickbox' ), '20091023' );		$scripts->add_data( 'media-upload', 'group', 1 );		$scripts->add( 'admin-widgets', "/wp-admin/js/widgets$suffix.js", array( 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable' ), '20090824' );		$scripts->add_data( 'admin-widgets', 'group', 1 );		$scripts->add( 'word-count', "/wp-admin/js/word-count$suffix.js", array( 'jquery' ), '20090422' );		$scripts->add_data( 'word-count', 'group', 1 );		$scripts->localize( 'word-count', 'wordCountL10n', array(			'count' => __('Word count: %d'),			'l10n_print_after' => 'try{convertEntities(wordCountL10n);}catch(e){};'		));		$scripts->add( 'theme-preview', "/wp-admin/js/theme-preview$suffix.js", array( 'thickbox', 'jquery' ), '20100407' );		$scripts->add_data( 'theme-preview', 'group', 1 );		$scripts->add( 'inline-edit-post', "/wp-admin/js/inline-edit-post$suffix.js", array( 'jquery', 'suggest' ), '20091202' );		$scripts->add_data( 'inline-edit-post', 'group', 1 );		$scripts->localize( 'inline-edit-post', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'ntdeltitle' => __('Remove From Bulk Edit'),			'notitle' => __('(no title)'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'inline-edit-tax', "/wp-admin/js/inline-edit-tax$suffix.js", array( 'jquery' ), '20090623' );		$scripts->add_data( 'inline-edit-tax', 'group', 1 );		$scripts->localize( 'inline-edit-tax', 'inlineEditL10n', array(			'error' => __('Error while saving the changes.'),			'l10n_print_after' => 'try{convertEntities(inlineEditL10n);}catch(e){};'		) );		$scripts->add( 'plugin-install', "/wp-admin/js/plugin-install$suffix.js", array( 'jquery', 'thickbox' ), '20100407' );		$scripts->add_data( 'plugin-install', 'group', 1 );		$scripts->localize( 'plugin-install', 'plugininstallL10n', array(			'plugin_information' => __('Plugin Information:'),			'ays' => __('Are you sure you want to install this plugin?'),			'l10n_print_after' => 'try{convertEntities(plugininstallL10n);}catch(e){};'		) );		$scripts->add( 'farbtastic', '/wp-admin/js/farbtastic.js', array('jquery'), '1.2' );		$scripts->add( 'dashboard', "/wp-admin/js/dashboard$suffix.js", array( 'jquery', 'admin-comments', 'postbox' ), '20100523' );		$scripts->add_data( 'dashboard', 'group', 1 );		$scripts->add( 'hoverIntent', "/wp-includes/js/hoverIntent$suffix.js", array('jquery'), '20090102' );		$scripts->add_data( 'hoverIntent', 'group', 1 );		$scripts->add( 'list-revisions', "/wp-includes/js/wp-list-revisions$suffix.js", null, '20091223' );		$scripts->add( 'media', "/wp-admin/js/media$suffix.js", array( 'jquery-ui-draggable' ), '20100524' );		$scripts->add_data( 'media', 'group', 1 );		$scripts->add( 'image-edit', "/wp-admin/js/image-edit$suffix.js", array('jquery', 'json2', 'imgareaselect'), '20091111' );		$scripts->add_data( 'image-edit', 'group', 1 );		$scripts->add( 'set-post-thumbnail', "/wp-admin/js/set-post-thumbnail$suffix.js", array( 'jquery' ), '20100518' );		$scripts->add_data( 'set-post-thumbnail', 'group', 1 );		$scripts->localize( 'set-post-thumbnail', 'setPostThumbnailL10n', array(			'setThumbnail' => __( 'Use as featured image' ),			'saving' => __( 'Saving...' ),			'error' => __( 'Could not set that as the thumbnail image. Try a different attachment.' ),			'done' => __( 'Done' )		) );		// Navigation Menus		$scripts->add( 'nav-menu', "/wp-admin/js/nav-menu$suffix.js", false, '20100611' );		$scripts->localize( 'nav-menu', 'navMenuL10n', array(			'noResultsFound' => _x('No results found.', 'search results'),			'warnDeleteMenu' => __( "You are about to permanently delete this menu. \n 'Cancel' to stop, 'OK' to delete." ),			'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		) );		$scripts->add( 'custom-background', "/wp-admin/js/custom-background$suffix.js", array('farbtastic'), '20100531' );		$scripts->add_data( 'custom-background', 'group', 1 );	}}/** * Assign default styles to $styles object. * * Nothing is returned, because the $styles parameter is passed by reference. * Meaning that whatever object is passed will be updated without having to * reassign the variable that was passed back to the same value. This saves * memory. * * Adding default styles is not the only task, it also assigns the base_url * property, the default version, and text direction for the object. * * @since 2.6.0 * * @param object $styles */function wp_default_styles( &$styles ) {	// This checks to see if site_url() returns something and if it does not	// then it assigns $guess_url to wp_guess_url(). Strange format, but it works.	if ( ! $guessurl = site_url() )		$guessurl = wp_guess_url();	$styles->base_url = $guessurl;	$styles->content_url = defined('WP_CONTENT_URL')? WP_CONTENT_URL : '';	$styles->default_version = get_bloginfo( 'version' );	$styles->text_direction = function_exists( 'is_rtl' ) && is_rtl() ? 'rtl' : 'ltr';	$styles->default_dirs = array('/wp-admin/');	$suffix = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '.dev' : '';	$rtl_styles = array( 'wp-admin', 'global', 'colors', 'colors-fresh', 'colors-classic', 'dashboard', 'ie', 'install', 'login', 'media', 'theme-editor', 'upload', 'widgets', 'press-this', 'plugin-install', 'nav-menu', 'farbtastic' );	// Any rtl stylesheets that don't have a .dev version for ltr	$no_suffix = array( 'farbtastic' );	$styles->add( 'wp-admin', "/wp-admin/css/wp-admin$suffix.css", array(), '20100614' );	$styles->add( 'ie', "/wp-admin/css/ie$suffix.css", array(), '20100610' );	$styles->add_data( 'ie', 'conditional', 'lte IE 7' );	// all colors stylesheets need to have the same query strings (cache manifest compat)	$colors_version = '20100610';	// Register "meta" stylesheet for admin colors. All colors-* style sheets should have the same version string.	$styles->add( 'colors', true, array(), $colors_version );	// do not refer to these directly, the right one is queued by the above "meta" colors handle	$styles->add( 'colors-fresh', "/wp-admin/css/colors-fresh$suffix.css", array(), $colors_version );	$styles->add( 'colors-classic', "/wp-admin/css/colors-classic$suffix.css", array(), $colors_version );	$styles->add( 'ms', "/wp-admin/css/ms$suffix.css", array(), '20100528' );	$styles->add( 'global', "/wp-admin/css/global$suffix.css", array(), '20100108' );	$styles->add( 'media', "/wp-admin/css/media$suffix.css", array(), '20100519' );	$styles->add( 'widgets', "/wp-admin/css/widgets$suffix.css", array(), '20100610' );	$styles->add( 'dashboard', "/wp-admin/css/dashboard$suffix.css", array(), '20100424' );	$styles->add( 'install', "/wp-admin/css/install$suffix.css", array(), '20100605' ); // Readme as well	$styles->add( 'theme-editor', "/wp-admin/css/theme-editor$suffix.css", array(), '20100514' );	$styles->add( 'press-this', "/wp-admin/css/press-this$suffix.css", array(), '20100424' );	$styles->add( 'thickbox', '/wp-includes/js/thickbox/thickbox.css', array(), '20090514' );	$styles->add( 'login', "/wp-admin/css/login$suffix.css", array(), '20100601' );	$styles->add( 'plugin-install', "/wp-admin/css/plugin-install$suffix.css", array(), '20100402' );	$styles->add( 'theme-install', "/wp-admin/css/theme-install$suffix.css", array(), '20100523' );	$styles->add( 'farbtastic', '/wp-admin/css/farbtastic.css', array(), '1.2' );	$styles->add( 'jcrop', '/wp-includes/js/jcrop/jquery.Jcrop.css', array(), '0.9.8' );	$styles->add( 'imgareaselect', '/wp-includes/js/imgareaselect/imgareaselect.css', array(), '0.9.1' );	$styles->add( 'nav-menu', "/wp-admin/css/nav-menu$suffix.css", array(), '20100611' );	foreach ( $rtl_styles as $rtl_style ) {		$styles->add_data( $rtl_style, 'rtl', true );		if ( $suffix && ! in_array( $rtl_style, $no_suffix ) )			$styles->add_data( $rtl_style, 'suffix', $suffix );	}}/** * Reorder JavaScript scripts array to place prototype before jQuery. * * @since 2.3.1 * * @param array $js_array JavaScript scripst array * @return array Reordered array, if needed. */function wp_prototype_before_jquery( $js_array ) {	if ( false === $jquery = array_search( 'jquery', $js_array, true ) )		return $js_array;	if ( false === $prototype = array_search( 'prototype', $js_array, true ) )		return $js_array;	if ( $prototype < $jquery )		return $js_array;	unset($js_array[$prototype]);	array_splice( $js_array, $jquery, 0, 'prototype' );	return $js_array;}/** * Load localized data on print rather than initialization. * * These localizations require information that may not be loaded even by init. * * @since 2.5.0 */function wp_just_in_time_script_localization() {	wp_localize_script( 'autosave', 'autosaveL10n', array(		'autosaveInterval' => AUTOSAVE_INTERVAL,		'previewPageText' => __('Preview this Page'),		'previewPostText' => __('Preview this Post'),		'requestFile' => admin_url('admin-ajax.php'),		'savingText' => __('Saving Draft&#8230;'),		'saveAlert' => __('The changes you made will be lost if you navigate away from this page.'),		'l10n_print_after' => 'try{convertEntities(autosaveL10n);}catch(e){};'	) );}/** * Administration Panel CSS for changing the styles. * * If installing the 'wp-admin/' directory will be replaced with './'. * * The $_wp_admin_css_colors global manages the Administration Panels CSS * stylesheet that is loaded. The option that is set is 'admin_color' and is the * color and key for the array. The value for the color key is an object with * a 'url' parameter that has the URL path to the CSS file. * * The query from $src parameter will be appended to the URL that is given from * the $_wp_admin_css_colors array value URL. * * @since 2.6.0 * @uses $_wp_admin_css_colors * * @param string $src Source URL. * @param string $handle Either 'colors' or 'colors-rtl'. * @return string URL path to CSS stylesheet for Administration Panels. */function wp_style_loader_src( $src, $handle ) {	if ( defined('WP_INSTALLING') )		return preg_replace( '#^wp-admin/#', './', $src );	if ( 'colors' == $handle || 'colors-rtl' == $handle ) {		global $_wp_admin_css_colors;		$color = get_user_option('admin_color');		if ( empty($color) || !isset($_wp_admin_css_colors[$color]) )			$color = 'fresh';		$color = $_wp_admin_css_colors[$color];		$parsed = parse_url( $src );		$url = $color->url;		if ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG )			$url = preg_replace('/.css$|.css(?=\?)/', '.dev.css', $url);		if ( isset($parsed['query']) && $parsed['query'] ) {			wp_parse_str( $parsed['query'], $qv );			$url = add_query_arg( $qv, $url );		}		return $url;	}	return $src;}/** * Prints the script queue in the HTML head on admin pages. * * Postpones the scripts that were queued for the footer. * print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 * @see wp_print_scripts() */function print_head_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_head_items();	if ( apply_filters('print_head_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}/** * Prints the scripts that were queued for the footer on admin pages. * * @since 2.8 */function print_footer_scripts() {	global $wp_scripts, $concatenate_scripts;	if ( ! did_action('wp_print_footer_scripts') )		do_action('wp_print_footer_scripts');	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // No need to run if not instantiated.	script_concat_settings();	$wp_scripts->do_concat = $concatenate_scripts;	$wp_scripts->do_footer_items();	if ( apply_filters('print_footer_scripts', true) )		_print_scripts();	$wp_scripts->reset();	return $wp_scripts->done;}function _print_scripts() {	global $wp_scripts, $compress_scripts;	$zip = $compress_scripts ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	if ( !empty($wp_scripts->concat) ) {		if ( !empty($wp_scripts->print_code) ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $wp_scripts->print_code;			echo "/* ]]> */\n";			echo "</script>\n";		}		$ver = md5("$wp_scripts->concat_version");		$src = $wp_scripts->base_url . "/wp-admin/load-scripts.php?c={$zip}&load=" . trim($wp_scripts->concat, ', ') . "&ver=$ver";		echo "<script type='text/javascript' src='" . esc_attr($src) . "'></script>\n";	}	if ( !empty($wp_scripts->print_html) )		echo $wp_scripts->print_html;}/** * Prints the script queue in the HTML head on the front end. * * Postpones the scripts that were queued for the footer. * wp_print_footer_scripts() is called in the footer to print these scripts. * * @since 2.8 */function wp_print_head_scripts() {	if ( ! did_action('wp_print_scripts') )		do_action('wp_print_scripts');	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return array(); // no need to run if nothing is queued	return print_head_scripts();}/** * Prints the scripts that were queued for the footer on the front end. * * @since 2.8 */function wp_print_footer_scripts() {	return print_footer_scripts();}/** * Wrapper for do_action('wp_enqueue_scripts') * * Allows plugins to queue scripts for the front end using wp_enqueue_script(). * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available. * * @since 2.8 */function wp_enqueue_scripts() {	do_action('wp_enqueue_scripts');}function print_admin_styles() {	global $wp_styles, $concatenate_scripts, $compress_css;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	script_concat_settings();	$wp_styles->do_concat = $concatenate_scripts;	$zip = $compress_css ? 1 : 0;	if ( $zip && defined('ENFORCE_GZIP') && ENFORCE_GZIP )		$zip = 'gzip';	$wp_styles->do_items(false);	if ( apply_filters('print_admin_styles', true) ) {		if ( !empty($wp_styles->concat) ) {			$dir = $wp_styles->text_direction;			$ver = md5("$wp_styles->concat_version{$dir}");			$href = $wp_styles->base_url . "/wp-admin/load-styles.php?c={$zip}&dir={$dir}&load=" . trim($wp_styles->concat, ', ') . "&ver=$ver";			echo "<link rel='stylesheet' href='" . esc_attr($href) . "' type='text/css' media='all' />\n";		}		if ( !empty($wp_styles->print_html) )			echo $wp_styles->print_html;	}	$wp_styles->do_concat = false;	$wp_styles->concat = $wp_styles->concat_version = $wp_styles->print_html = '';	return $wp_styles->done;}function script_concat_settings() {	global $concatenate_scripts, $compress_scripts, $compress_css;	$compressed_output = ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') );	if ( ! isset($concatenate_scripts) ) {		$concatenate_scripts = defined('CONCATENATE_SCRIPTS') ? CONCATENATE_SCRIPTS : true;		if ( ! is_admin() || ( defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ) )			$concatenate_scripts = false;	}	if ( ! isset($compress_scripts) ) {		$compress_scripts = defined('COMPRESS_SCRIPTS') ? COMPRESS_SCRIPTS : true;		if ( $compress_scripts && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_scripts = false;	}	if ( ! isset($compress_css) ) {		$compress_css = defined('COMPRESS_CSS') ? COMPRESS_CSS : true;		if ( $compress_css && ( ! get_site_option('can_compress_scripts') || $compressed_output ) )			$compress_css = false;	}}add_action( 'wp_default_scripts', 'wp_default_scripts' );add_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );add_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );add_action( 'wp_default_styles', 'wp_default_styles' );add_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );
<?php// --------------------------------------------------------------------------------// PhpConcept Library - Zip Module 2.8.2// --------------------------------------------------------------------------------// License GNU/LGPL - Vincent Blavet - August 2009// http://www.phpconcept.net// --------------------------------------------------------------------------------//// Presentation ://   PclZip is a PHP library that manage ZIP archives.//   So far tests show that archives generated by PclZip are readable by//   WinZip application and other tools.//// Description ://   See readme.txt and http://www.phpconcept.net//// Warning ://   This library and the associated files are non commercial, non professional//   work.//   It should not have unexpected results. However if any damage is caused by//   this software the author can not be responsible.//   The use of this software is at the risk of the user.//// --------------------------------------------------------------------------------// $Id: pclzip.lib.php,v 1.60 2009/09/30 21:01:04 vblavet Exp $// --------------------------------------------------------------------------------  // ----- Constants  if (!defined('PCLZIP_READ_BLOCK_SIZE')) {    define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );  }  // ----- File list separator  // In version 1.x of PclZip, the separator for file list is a space  // (which is not a very smart choice, specifically for windows paths !).  // A better separator should be a comma (,). This constant gives you the  // abilty to change that.  // However notice that changing this value, may have impact on existing  // scripts, using space separated filenames.  // Recommanded values for compatibility with older versions :  //define( 'PCLZIP_SEPARATOR', ' ' );  // Recommanded values for smart separation of filenames.  if (!defined('PCLZIP_SEPARATOR')) {    define( 'PCLZIP_SEPARATOR', ',' );  }  // ----- Error configuration  // 0 : PclZip Class integrated error handling  // 1 : PclError external library error handling. By enabling this  //     you must ensure that you have included PclError library.  // [2,...] : reserved for futur use  if (!defined('PCLZIP_ERROR_EXTERNAL')) {    define( 'PCLZIP_ERROR_EXTERNAL', 0 );  }  // ----- Optional static temporary directory  //       By default temporary files are generated in the script current  //       path.  //       If defined :  //       - MUST BE terminated by a '/'.  //       - MUST be a valid, already created directory  //       Samples :  // define( 'PCLZIP_TEMPORARY_DIR', '/temp/' );  // define( 'PCLZIP_TEMPORARY_DIR', 'C:/Temp/' );  if (!defined('PCLZIP_TEMPORARY_DIR')) {    define( 'PCLZIP_TEMPORARY_DIR', '' );  }  // ----- Optional threshold ratio for use of temporary files  //       Pclzip sense the size of the file to add/extract and decide to  //       use or not temporary file. The algorythm is looking for  //       memory_limit of PHP and apply a ratio.  //       threshold = memory_limit * ratio.  //       Recommended values are under 0.5. Default 0.47.  //       Samples :  // define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.5 );  if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {    define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );  }// --------------------------------------------------------------------------------// ***** UNDER THIS LINE NOTHING NEEDS TO BE MODIFIED *****// --------------------------------------------------------------------------------  // ----- Global variables  $g_pclzip_version = "2.8.2";  // ----- Error codes  //   -1 : Unable to open file in binary write mode  //   -2 : Unable to open file in binary read mode  //   -3 : Invalid parameters  //   -4 : File does not exist  //   -5 : Filename is too long (max. 255)  //   -6 : Not a valid zip file  //   -7 : Invalid extracted file size  //   -8 : Unable to create directory  //   -9 : Invalid archive extension  //  -10 : Invalid archive format  //  -11 : Unable to delete file (unlink)  //  -12 : Unable to rename file (rename)  //  -13 : Invalid header checksum  //  -14 : Invalid archive size  define( 'PCLZIP_ERR_USER_ABORTED', 2 );  define( 'PCLZIP_ERR_NO_ERROR', 0 );  define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );  define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );  define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );  define( 'PCLZIP_ERR_MISSING_FILE', -4 );  define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );  define( 'PCLZIP_ERR_INVALID_ZIP', -6 );  define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );  define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );  define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );  define( 'PCLZIP_ERR_BAD_FORMAT', -10 );  define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );  define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );  define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );  define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );  define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );  define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );  define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );  define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );  define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );  define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );  define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );  // ----- Options values  define( 'PCLZIP_OPT_PATH', 77001 );  define( 'PCLZIP_OPT_ADD_PATH', 77002 );  define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );  define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );  define( 'PCLZIP_OPT_SET_CHMOD', 77005 );  define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );  define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );  define( 'PCLZIP_OPT_BY_NAME', 77008 );  define( 'PCLZIP_OPT_BY_INDEX', 77009 );  define( 'PCLZIP_OPT_BY_EREG', 77010 );  define( 'PCLZIP_OPT_BY_PREG', 77011 );  define( 'PCLZIP_OPT_COMMENT', 77012 );  define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );  define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );  define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );  define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );  define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );  // Having big trouble with crypt. Need to multiply 2 long int  // which is not correctly supported by PHP ...  //define( 'PCLZIP_OPT_CRYPT', 77018 );  define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );  define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD', 77020 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_ON', 77021 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_OFF', 77022 ); // alias  // ----- File description attributes  define( 'PCLZIP_ATT_FILE_NAME', 79001 );  define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );  define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );  define( 'PCLZIP_ATT_FILE_MTIME', 79004 );  define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );  define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );  // ----- Call backs values  define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );  define( 'PCLZIP_CB_POST_EXTRACT', 78002 );  define( 'PCLZIP_CB_PRE_ADD', 78003 );  define( 'PCLZIP_CB_POST_ADD', 78004 );  /* For futur use  define( 'PCLZIP_CB_PRE_LIST', 78005 );  define( 'PCLZIP_CB_POST_LIST', 78006 );  define( 'PCLZIP_CB_PRE_DELETE', 78007 );  define( 'PCLZIP_CB_POST_DELETE', 78008 );  */  // --------------------------------------------------------------------------------  // Class : PclZip  // Description :  //   PclZip is the class that represent a Zip archive.  //   The public methods allow the manipulation of the archive.  // Attributes :  //   Attributes must not be accessed directly.  // Methods :  //   PclZip() : Object creator  //   create() : Creates the Zip archive  //   listContent() : List the content of the Zip archive  //   extract() : Extract the content of the archive  //   properties() : List the properties of the archive  // --------------------------------------------------------------------------------  class PclZip  {    // ----- Filename of the zip file    var $zipname = '';    // ----- File descriptor of the zip file    var $zip_fd = 0;    // ----- Internal error handling    var $error_code = 1;    var $error_string = '';    // ----- Current status of the magic_quotes_runtime    // This value store the php configuration for magic_quotes    // The class can then disable the magic_quotes and reset it after    var $magic_quotes_status;  // --------------------------------------------------------------------------------  // Function : PclZip()  // Description :  //   Creates a PclZip object and set the name of the associated Zip archive  //   filename.  //   Note that no real action is taken, if the archive does not exist it is not  //   created. Use create() for that.  // --------------------------------------------------------------------------------  function PclZip($p_zipname)  {    // ----- Tests the zlib    if (!function_exists('gzopen'))    {      die('Abort '.basename(__FILE__).' : Missing zlib extensions');    }    // ----- Set the attributes    $this->zipname = $p_zipname;    $this->zip_fd = 0;    $this->magic_quotes_status = -1;    // ----- Return    return;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   create($p_filelist, $p_add_dir="", $p_remove_dir="")  //   create($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two different synopsis. The first one is historical.  //   This method creates a Zip Archive. The Zip file is created in the  //   filesystem. The files and directories indicated in $p_filelist  //   are added in the archive. See the parameters description for the  //   supported format of $p_filelist.  //   When a directory is in the list, the directory and its content is added  //   in the archive.  //   In this synopsis, the function takes an optional variable list of  //   options. See bellow the supported options.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function create($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove from the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'                                             ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Invalid number / type of arguments");          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        if ($v_string != '') {          $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;        }        else {        }      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   add($p_filelist, $p_add_dir="", $p_remove_dir="")  //   add($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two synopsis. The first one is historical.  //   This methods add the list of files in an existing archive.  //   If a file with the same name already exists, it is added at the end of the  //   archive, the first one is still present.  //   If the archive does not exist, it is created.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_OPT_ADD_COMMENT :  //   PCLZIP_OPT_PREPEND_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function add($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_ADD_COMMENT => 'optional',                                                   PCLZIP_OPT_PREPEND_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'												   ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : listContent()  // Description :  //   This public method, gives the list of the files and directories, with their  //   properties.  //   The properties of each entries in the list are (used also in other functions) :  //     filename : Name of the file. For a create or add action it is the filename  //                given by the user. For an extract function it is the filename  //                of the extracted file.  //     stored_filename : Name of the file / directory stored in the archive.  //     size : Size of the stored file.  //     compressed_size : Size of the file's data compressed in the archive  //                       (without the headers overhead)  //     mtime : Last known modification date of the file (UNIX timestamp)  //     comment : Comment associated with the file  //     folder : true | false  //     index : index of the file in the archive  //     status : status of the action (depending of the action) :  //              Values are :  //                ok : OK !  //                filtered : the file / dir is not extracted (filtered by user)  //                already_a_directory : the file can not be extracted because a  //                                      directory with the same name already exists  //                write_protected : the file can not be extracted because a file  //                                  with the same name already exists and is  //                                  write protected  //                newer_exist : the file was not extracted because a newer file exists  //                path_creation_fail : the file is not extracted because the folder  //                                     does not exist and can not be created  //                write_error : the file was not extracted because there was a  //                              error while writing the file  //                read_error : the file was not extracted because there was a error  //                             while reading the file  //                invalid_header : the file was not extracted because of an archive  //                                 format error (bad file header)  //   Note that each time a method can continue operating when there  //   is an action error on a file, the error is only logged in the file status.  // Return Values :  //   0 on an unrecoverable failure,  //   The list of the files in the archive.  // --------------------------------------------------------------------------------  function listContent()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Call the extracting fct    $p_list = array();    if (($v_result = $this->privList($p_list)) != 1)    {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extract($p_path="./", $p_remove_path="")  //   extract([$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method extract all the files / directories from the archive to the  //   folder indicated in $p_path.  //   If you want to ignore the 'root' part of path of the memorized files  //   you can indicate this in the optional $p_remove_path parameter.  //   By default, if a newer file with the same name already exists, the  //   file is not extracted.  //  //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH aoptions  //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append  //   at the end of the path value of PCLZIP_OPT_PATH.  // Parameters :  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 or a negative value on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function extract()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_BY_NAME => 'optional',                                                   PCLZIP_OPT_BY_EREG => 'optional',                                                   PCLZIP_OPT_BY_PREG => 'optional',                                                   PCLZIP_OPT_BY_INDEX => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												    ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Trace    // ----- Call the extracting fct    $p_list = array();    $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,	                                     $v_remove_all_path, $v_options);    if ($v_result < 1) {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extractByIndex($p_index, $p_path="./", $p_remove_path="")  //   extractByIndex($p_index, [$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method is doing a partial extract of the archive.  //   The extracted files or folders are identified by their index in the  //   archive (from 0 to n).  //   Note that if the index identify a folder, only the folder entry is  //   extracted, not all the files included in the archive.  // Parameters :  //   $p_index : A single index (integer) or a string of indexes of files to  //              extract. The form of the string is "0,4-6,8-12" with only numbers  //              and '-' for range or ',' to separate ranges. No spaces or ';'  //              are allowed.  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and  //     not as files.  //     The resulting content is in a new field 'content' in the file  //     structure.  //     This option must be used alone (any other options are ignored).  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  //function extractByIndex($p_index, options...)  function extractByIndex($p_index)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												   ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }        if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {          $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;        }        else {        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Trace    // ----- Trick    // Here I want to reuse extractByRule(), so I need to parse the $p_index    // with privParseOptions()    $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);    $v_options_trick = array();    $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,                                        array (PCLZIP_OPT_BY_INDEX => 'optional' ));    if ($v_result != 1) {        return 0;    }    $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Call the extracting fct    if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {        return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   delete([$p_option, $p_option_value, ...])  // Description :  //   This method removes files from the archive.  //   If no parameters are given, then all the archive is emptied.  // Parameters :  //   None or optional arguments.  // Options :  //   PCLZIP_OPT_BY_INDEX :  //   PCLZIP_OPT_BY_NAME :  //   PCLZIP_OPT_BY_EREG :  //   PCLZIP_OPT_BY_PREG :  // Return Values :  //   0 on failure,  //   The list of the files which are still present in the archive.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function delete()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Parse the options      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                        array (PCLZIP_OPT_BY_NAME => 'optional',                                               PCLZIP_OPT_BY_EREG => 'optional',                                               PCLZIP_OPT_BY_PREG => 'optional',                                               PCLZIP_OPT_BY_INDEX => 'optional' ));      if ($v_result != 1) {          return 0;      }    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Call the delete fct    $v_list = array();    if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {      $this->privSwapBackMagicQuotes();      unset($v_list);      return(0);    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : deleteByIndex()  // Description :  //   ***** Deprecated *****  //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be prefered.  // --------------------------------------------------------------------------------  function deleteByIndex($p_index)  {    $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : properties()  // Description :  //   This method gives the properties of the archive.  //   The properties are :  //     nb : Number of files in the archive  //     comment : Comment associated with the archive file  //     status : not_exist, ok  // Parameters :  //   None  // Return Values :  //   0 on failure,  //   An array with the archive properties.  // --------------------------------------------------------------------------------  function properties()  {    // ----- Reset the error handler    $this->privErrorReset();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check archive    if (!$this->privCheckFormat()) {      $this->privSwapBackMagicQuotes();      return(0);    }    // ----- Default properties    $v_prop = array();    $v_prop['comment'] = '';    $v_prop['nb'] = 0;    $v_prop['status'] = 'not_exist';    // ----- Look if file exists    if (@is_file($this->zipname))    {      // ----- Open the zip file      if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)      {        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');        // ----- Return        return 0;      }      // ----- Read the central directory informations      $v_central_dir = array();      if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)      {        $this->privSwapBackMagicQuotes();        return 0;      }      // ----- Close the zip file      $this->privCloseFd();      // ----- Set the user attributes      $v_prop['comment'] = $v_central_dir['comment'];      $v_prop['nb'] = $v_central_dir['entries'];      $v_prop['status'] = 'ok';    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_prop;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : duplicate()  // Description :  //   This method creates an archive by copying the content of an other one. If  //   the archive already exist, it is replaced by the new one without any warning.  // Parameters :  //   $p_archive : The filename of a valid archive, or  //                a valid PclZip object.  // Return Values :  //   1 on success.  //   0 or a negative value on error (error code).  // --------------------------------------------------------------------------------  function duplicate($p_archive)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the $p_archive is a PclZip object    if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))    {      // ----- Duplicate the archive      $v_result = $this->privDuplicate($p_archive->zipname);    }    // ----- Look if the $p_archive is a string (so a filename)    else if (is_string($p_archive))    {      // ----- Check that $p_archive is a valid zip file      // TBC : Should also check the archive format      if (!is_file($p_archive)) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");        $v_result = PCLZIP_ERR_MISSING_FILE;      }      else {        // ----- Duplicate the archive        $v_result = $this->privDuplicate($p_archive);      }    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : merge()  // Description :  //   This method merge the $p_archive_to_add archive at the end of the current  //   one ($this).  //   If the archive ($this) does not exist, the merge becomes a duplicate.  //   If the $p_archive_to_add archive does not exist, the merge is a success.  // Parameters :  //   $p_archive_to_add : It can be directly the filename of a valid zip archive,  //                       or a PclZip object archive.  // Return Values :  //   1 on success,  //   0 or negative values on error (see below).  // --------------------------------------------------------------------------------  function merge($p_archive_to_add)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Look if the $p_archive_to_add is a PclZip object    if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))    {      // ----- Merge the archive      $v_result = $this->privMerge($p_archive_to_add);    }    // ----- Look if the $p_archive_to_add is a string (so a filename)    else if (is_string($p_archive_to_add))    {      // ----- Create a temporary archive      $v_object_archive = new PclZip($p_archive_to_add);      // ----- Merge the archive      $v_result = $this->privMerge($v_object_archive);    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorCode()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorCode()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorCode());    }    else {      return($this->error_code);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorName()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorName($p_with_code=false)  {    $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',                      PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',                      PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',                      PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',                      PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',                      PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',                      PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',                      PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',                      PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',                      PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',                      PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',                      PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',                      PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',                      PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',                      PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',                      PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',                      PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',                      PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',                      PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'                      ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'                      ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'                    );    if (isset($v_name[$this->error_code])) {      $v_value = $v_name[$this->error_code];    }    else {      $v_value = 'NoName';    }    if ($p_with_code) {      return($v_value.' ('.$this->error_code.')');    }    else {      return($v_value);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorInfo()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorInfo($p_full=false)  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorString());    }    else {      if ($p_full) {        return($this->errorName(true)." : ".$this->error_string);      }      else {        return($this->error_string." [code ".$this->error_code."]");      }    }  }  // --------------------------------------------------------------------------------// --------------------------------------------------------------------------------// ***** UNDER THIS LINE ARE DEFINED PRIVATE INTERNAL FUNCTIONS *****// *****                                                        *****// *****       THESES FUNCTIONS MUST NOT BE USED DIRECTLY       *****// --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCheckFormat()  // Description :  //   This method check that the archive exists and is a valid zip archive.  //   Several level of check exists. (futur)  // Parameters :  //   $p_level : Level of check. Default 0.  //              0 : Check the first bytes (magic codes) (default value))  //              1 : 0 + Check the central directory (futur)  //              2 : 1 + Check each file header (futur)  // Return Values :  //   true on success,  //   false on error, the error code is set.  // --------------------------------------------------------------------------------  function privCheckFormat($p_level=0)  {    $v_result = true;	// ----- Reset the file system cache    clearstatcache();    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the file exits    if (!is_file($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");      return(false);    }    // ----- Check that the file is readeable    if (!is_readable($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");      return(false);    }    // ----- Check the magic code    // TBC    // ----- Check the central header    // TBC    // ----- Check each file header    // TBC    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privParseOptions()  // Description :  //   This internal methods reads the variable list of arguments ($p_options_list,  //   $p_size) and generate an array with the options and values ($v_result_list).  //   $v_requested_options contains the options that can be present and those that  //   must be present.  //   $v_requested_options is an array, with the option value as key, and 'optional',  //   or 'mandatory' as value.  // Parameters :  //   See above.  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)  {    $v_result=1;    // ----- Read the options    $i=0;    while ($i<$p_size) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$p_options_list[$i]])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for next option      switch ($p_options_list[$i]) {        // ----- Look for options that request a path value        case PCLZIP_OPT_PATH :        case PCLZIP_OPT_REMOVE_PATH :        case PCLZIP_OPT_ADD_PATH :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_THRESHOLD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          // ----- Check the value          $v_value = $p_options_list[$i+1];          if ((!is_integer($v_value)) || ($v_value<0)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Get the value (and convert it in bytes)          $v_result_list[$p_options_list[$i]] = $v_value*1048576;          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_ON :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_TEMP_FILE_OFF :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (   is_string($p_options_list[$i+1])              && ($p_options_list[$i+1] != '')) {            $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);            $i++;          }          else {          }        break;        // ----- Look for options that request an array of string for value        case PCLZIP_OPT_BY_NAME :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an EREG or PREG expression        case PCLZIP_OPT_BY_EREG :          // ereg() is deprecated starting with PHP 5.3. Move PCLZIP_OPT_BY_EREG          // to PCLZIP_OPT_BY_PREG          $p_options_list[$i] = PCLZIP_OPT_BY_PREG;        case PCLZIP_OPT_BY_PREG :        //case PCLZIP_OPT_CRYPT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that takes a string        case PCLZIP_OPT_COMMENT :        case PCLZIP_OPT_ADD_COMMENT :        case PCLZIP_OPT_PREPEND_COMMENT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,			                     "Missing parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,			                     "Wrong parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an array of index        case PCLZIP_OPT_BY_INDEX :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_work_list = array();          if (is_string($p_options_list[$i+1])) {              // ----- Remove spaces              $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');              // ----- Parse items              $v_work_list = explode(",", $p_options_list[$i+1]);          }          else if (is_integer($p_options_list[$i+1])) {              $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_work_list = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Reduce the index list          // each index item in the list must be a couple with a start and          // an end value : [0,3], [5-5], [8-10], ...          // ----- Check the format of each item          $v_sort_flag=false;          $v_sort_value=0;          for ($j=0; $j<sizeof($v_work_list); $j++) {              // ----- Explode the item              $v_item_list = explode("-", $v_work_list[$j]);              $v_size_item_list = sizeof($v_item_list);              // ----- TBC : Here we might check that each item is a              // real integer ...              // ----- Look for single value              if ($v_size_item_list == 1) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];              }              elseif ($v_size_item_list == 2) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];              }              else {                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              // ----- Look for list sort              if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {                  $v_sort_flag=true;                  // ----- TBC : An automatic sort should be writen ...                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];          }          // ----- Sort the items          if ($v_sort_flag) {              // TBC : To Be Completed          }          // ----- Next option          $i++;        break;        // ----- Look for options that request no value        case PCLZIP_OPT_REMOVE_ALL_PATH :        case PCLZIP_OPT_EXTRACT_AS_STRING :        case PCLZIP_OPT_NO_COMPRESSION :        case PCLZIP_OPT_EXTRACT_IN_OUTPUT :        case PCLZIP_OPT_REPLACE_NEWER :        case PCLZIP_OPT_STOP_ON_ERROR :          $v_result_list[$p_options_list[$i]] = true;        break;        // ----- Look for options that request an octal value        case PCLZIP_OPT_SET_CHMOD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          $i++;        break;        // ----- Look for options that request a call-back        case PCLZIP_CB_PRE_EXTRACT :        case PCLZIP_CB_POST_EXTRACT :        case PCLZIP_CB_PRE_ADD :        case PCLZIP_CB_POST_ADD :        /* for futur use        case PCLZIP_CB_PRE_DELETE :        case PCLZIP_CB_POST_DELETE :        case PCLZIP_CB_PRE_LIST :        case PCLZIP_CB_POST_LIST :        */          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_function_name = $p_options_list[$i+1];          // ----- Check that the value is a valid existing function          if (!function_exists($v_function_name)) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Set the attribute          $v_result_list[$p_options_list[$i]] = $v_function_name;          $i++;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Unknown parameter '"							   .$p_options_list[$i]."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Next options      $i++;    }    // ----- Look for mandatory options    if ($v_requested_options !== false) {      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {        // ----- Look for mandatory option        if ($v_requested_options[$key] == 'mandatory') {          // ----- Look if present          if (!isset($v_result_list[$key])) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");            // ----- Return            return PclZip::errorCode();          }        }      }    }    // ----- Look for default values    if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOptionDefaultThreshold()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privOptionDefaultThreshold(&$p_options)  {    $v_result=1;    if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])        || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {      return $v_result;    }    // ----- Get 'memory_limit' configuration value    $v_memory_limit = ini_get('memory_limit');    $v_memory_limit = trim($v_memory_limit);    $last = strtolower(substr($v_memory_limit, -1));    if($last == 'g')        //$v_memory_limit = $v_memory_limit*1024*1024*1024;        $v_memory_limit = $v_memory_limit*1073741824;    if($last == 'm')        //$v_memory_limit = $v_memory_limit*1024*1024;        $v_memory_limit = $v_memory_limit*1048576;    if($last == 'k')        $v_memory_limit = $v_memory_limit*1024;    $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);    // ----- Sanity check : No threshold if value lower than 1M    if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {      unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrParseAtt()  // Description :  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)  {    $v_result=1;    // ----- For each file in the list check the attributes    foreach ($p_file_list as $v_key => $v_value) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$v_key])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for attribute      switch ($v_key) {        case PCLZIP_ATT_FILE_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['filename'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_SHORT_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_short_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_FULL_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_full_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        // ----- Look for options that takes a string        case PCLZIP_ATT_FILE_COMMENT :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['comment'] = $v_value;        break;        case PCLZIP_ATT_FILE_MTIME :          if (!is_integer($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['mtime'] = $v_value;        break;        case PCLZIP_ATT_FILE_CONTENT :          $p_filedescr['content'] = $v_value;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                           "Unknown parameter '".$v_key."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Look for mandatory options      if ($v_requested_options !== false) {        for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {          // ----- Look for mandatory option          if ($v_requested_options[$key] == 'mandatory') {            // ----- Look if present            if (!isset($p_file_list[$key])) {              PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");              return PclZip::errorCode();            }          }        }      }    // end foreach    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrExpand()  // Description :  //   This method look for each item of the list to see if its a file, a folder  //   or a string to be added as file. For any other type of files (link, other)  //   just ignore the item.  //   Then prepare the information that will be stored for that file.  //   When its a folder, expand the folder with all the files that are in that  //   folder (recursively).  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrExpand(&$p_filedescr_list, &$p_options)  {    $v_result=1;    // ----- Create a result list    $v_result_list = array();    // ----- Look each entry    for ($i=0; $i<sizeof($p_filedescr_list); $i++) {      // ----- Get filedescr      $v_descr = $p_filedescr_list[$i];      // ----- Reduce the filename      $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);      $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);      // ----- Look for real file or folder      if (file_exists($v_descr['filename'])) {        if (@is_file($v_descr['filename'])) {          $v_descr['type'] = 'file';        }        else if (@is_dir($v_descr['filename'])) {          $v_descr['type'] = 'folder';        }        else if (@is_link($v_descr['filename'])) {          // skip          continue;        }        else {          // skip          continue;        }      }      // ----- Look for string added as file      else if (isset($v_descr['content'])) {        $v_descr['type'] = 'virtual_file';      }      // ----- Missing file      else {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");        // ----- Return        return PclZip::errorCode();      }      // ----- Calculate the stored filename      $this->privCalculateStoredFilename($v_descr, $p_options);      // ----- Add the descriptor in result list      $v_result_list[sizeof($v_result_list)] = $v_descr;      // ----- Look for folder      if ($v_descr['type'] == 'folder') {        // ----- List of items in folder        $v_dirlist_descr = array();        $v_dirlist_nb = 0;        if ($v_folder_handler = @opendir($v_descr['filename'])) {          while (($v_item_handler = @readdir($v_folder_handler)) !== false) {            // ----- Skip '.' and '..'            if (($v_item_handler == '.') || ($v_item_handler == '..')) {                continue;            }            // ----- Compose the full filename            $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;            // ----- Look for different stored filename            // Because the name of the folder was changed, the name of the            // files/sub-folders also change            if (($v_descr['stored_filename'] != $v_descr['filename'])                 && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {              if ($v_descr['stored_filename'] != '') {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;              }              else {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;              }            }            $v_dirlist_nb++;          }          @closedir($v_folder_handler);        }        else {          // TBC : unable to open folder in read mode        }        // ----- Expand each element of the list        if ($v_dirlist_nb != 0) {          // ----- Expand          if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {            return $v_result;          }          // ----- Concat the resulting list          $v_result_list = array_merge($v_result_list, $v_dirlist_descr);        }        else {        }        // ----- Free local array        unset($v_dirlist_descr);      }    }    // ----- Get the result list    $p_filedescr_list = $v_result_list;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCreate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCreate($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the file in write mode    if (($v_result = $this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Add the list of files    $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);    // ----- Close    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAdd()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAdd($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Look if the archive exists or is empty    if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))    {      // ----- Do a create      $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);      // ----- Return      return $v_result;    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      fclose($v_zip_temp_fd);      $this->privCloseFd();      @unlink($v_zip_temp_name);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Create the Central Dir files header    for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          fclose($v_zip_temp_fd);          $this->privCloseFd();          @unlink($v_zip_temp_name);          $this->privSwapBackMagicQuotes();          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = $v_central_dir['comment'];    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {      $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOpenFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privOpenFd($p_mode)  {    $v_result=1;    // ----- Look if already open    if ($this->zip_fd != 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');      // ----- Return      return PclZip::errorCode();    }    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCloseFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privCloseFd()  {    $v_result=1;    if ($this->zip_fd != 0)      @fclose($this->zip_fd);    $this->zip_fd = 0;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddList()  // Description :  //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is  //   different from the real path of the file. This is usefull if you want to have PclTar  //   running in any directory, and memorize relative path from an other directory.  // Parameters :  //   $p_list : An array containing the file or directory names to add in the tar  //   $p_result_list : list of added files with their properties (specially the status field)  //   $p_add_dir : Path to add in the filename path archived  //   $p_remove_dir : Path to remove in the filename path archived  // Return Values :  // --------------------------------------------------------------------------------//  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)  function privAddList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Create the Central Dir files header    for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = '';    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileList()  // Description :  // Parameters :  //   $p_filedescr_list : An array containing the file description  //                      or directory names to add in the zip  //   $p_result_list : list of added files with their properties (specially the status field)  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_header = array();    // ----- Recuperate the current number of elt in list    $v_nb = sizeof($p_result_list);    // ----- Loop on the files    for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {      // ----- Format the filename      $p_filedescr_list[$j]['filename']      = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);      // ----- Skip empty file names      // TBC : Can this be possible ? not checked in DescrParseAtt ?      if ($p_filedescr_list[$j]['filename'] == "") {        continue;      }      // ----- Check the filename      if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')          && (!file_exists($p_filedescr_list[$j]['filename']))) {        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");        return PclZip::errorCode();      }      // ----- Look if it is a file or a dir with no all path remove option      // or a dir with all its path removed//      if (   (is_file($p_filedescr_list[$j]['filename']))//          || (   is_dir($p_filedescr_list[$j]['filename'])      if (   ($p_filedescr_list[$j]['type'] == 'file')          || ($p_filedescr_list[$j]['type'] == 'virtual_file')          || (   ($p_filedescr_list[$j]['type'] == 'folder')              && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])                  || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))          ) {        // ----- Add the file        $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,                                       $p_options);        if ($v_result != 1) {          return $v_result;        }        // ----- Store the file infos        $p_result_list[$v_nb++] = $v_header;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=1;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // TBC : Already done in the fileAtt check ... ?    if ($p_filename == "") {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");      // ----- Return      return PclZip::errorCode();    }    // ----- Look for a stored different filename    /* TBC : Removed    if (isset($p_filedescr['stored_filename'])) {      $v_stored_filename = $p_filedescr['stored_filename'];    }    else {      $v_stored_filename = $p_filedescr['stored_filename'];    }    */    // ----- Set the file properties    clearstatcache();    $p_header['version'] = 20;    $p_header['version_extracted'] = 10;    $p_header['flag'] = 0;    $p_header['compression'] = 0;    $p_header['crc'] = 0;    $p_header['compressed_size'] = 0;    $p_header['filename_len'] = strlen($p_filename);    $p_header['extra_len'] = 0;    $p_header['disk'] = 0;    $p_header['internal'] = 0;    $p_header['offset'] = 0;    $p_header['filename'] = $p_filename;// TBC : Removed    $p_header['stored_filename'] = $v_stored_filename;    $p_header['stored_filename'] = $p_filedescr['stored_filename'];    $p_header['extra'] = '';    $p_header['status'] = 'ok';    $p_header['index'] = -1;    // ----- Look for regular file    if ($p_filedescr['type']=='file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = filesize($p_filename);    }    // ----- Look for regular folder    else if ($p_filedescr['type']=='folder') {      $p_header['external'] = 0x00000010;      $p_header['mtime'] = filemtime($p_filename);      $p_header['size'] = filesize($p_filename);    }    // ----- Look for virtual file    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = strlen($p_filedescr['content']);    }    // ----- Look for filetime    if (isset($p_filedescr['mtime'])) {      $p_header['mtime'] = $p_filedescr['mtime'];    }    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['mtime'] = time();    }    else {      $p_header['mtime'] = filemtime($p_filename);    }    // ------ Look for file comment    if (isset($p_filedescr['comment'])) {      $p_header['comment_len'] = strlen($p_filedescr['comment']);      $p_header['comment'] = $p_filedescr['comment'];    }    else {      $p_header['comment_len'] = 0;      $p_header['comment'] = '';    }    // ----- Look for pre-add callback    if (isset($p_options[PCLZIP_CB_PRE_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_header['status'] = "skipped";        $v_result = 1;      }      // ----- Update the informations      // Only some fields can be modified      if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {        $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);      }    }    // ----- Look for empty stored filename    if ($p_header['stored_filename'] == "") {      $p_header['status'] = "filtered";    }    // ----- Check the path length    if (strlen($p_header['stored_filename']) > 0xFF) {      $p_header['status'] = 'filename_too_long';    }    // ----- Look if no error, or file not skipped    if ($p_header['status'] == 'ok') {      // ----- Look for a file      if ($p_filedescr['type'] == 'file') {        // ----- Look for using temporary file to zip        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {          $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);          if ($v_result < PCLZIP_ERR_NO_ERROR) {            return $v_result;          }        }        // ----- Use "in memory" zip algo        else {        // ----- Open the source file        if (($v_file = @fopen($p_filename, "rb")) == 0) {          PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");          return PclZip::errorCode();        }        // ----- Read the file content        $v_content = @fread($v_file, $p_header['size']);        // ----- Close the file        @fclose($v_file);        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);        }      }      // ----- Look for a virtual file (a file from string)      else if ($p_filedescr['type'] == 'virtual_file') {        $v_content = $p_filedescr['content'];        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);      }      // ----- Look for a directory      else if ($p_filedescr['type'] == 'folder') {        // ----- Look for directory last '/'        if (@substr($p_header['stored_filename'], -1) != '/') {          $p_header['stored_filename'] .= '/';        }        // ----- Set the file properties        $p_header['size'] = 0;        //$p_header['external'] = 0x41FF0010;   // Value for a folder : to be checked        $p_header['external'] = 0x00000010;   // Value for a folder : to be checked        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1)        {          return $v_result;        }      }    }    // ----- Look for post-add callback    if (isset($p_options[PCLZIP_CB_POST_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Ignored        $v_result = 1;      }      // ----- Update the informations      // Nothing can be modified    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=PCLZIP_ERR_NO_ERROR;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // ----- Open the source file    if (($v_file = @fopen($p_filename, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");      return PclZip::errorCode();    }    // ----- Creates a compressed temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = filesize($p_filename);    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @gzputs($v_file_compressed, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file);    @gzclose($v_file_compressed);    // ----- Check the minimum file size    if (filesize($v_gzip_temp_name) < 18) {      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');      return PclZip::errorCode();    }    // ----- Extract the compressed attributes    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the gzip file header    $v_binary_data = @fread($v_file_compressed, 10);    $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);    // ----- Check some parameters    $v_data_header['os'] = bin2hex($v_data_header['os']);    // ----- Read the gzip file footer    @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);    $v_binary_data = @fread($v_file_compressed, 8);    $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);    // ----- Set the attributes    $p_header['compression'] = ord($v_data_header['cm']);    //$p_header['mtime'] = $v_data_header['mtime'];    $p_header['crc'] = $v_data_footer['crc'];    $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;    // ----- Close the file    @fclose($v_file_compressed);    // ----- Call the header generation    if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {      return $v_result;    }    // ----- Add the compressed data    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)    {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    fseek($v_file_compressed, 10);    $v_size = $p_header['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file_compressed, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file_compressed);    // ----- Unlink the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCalculateStoredFilename()  // Description :  //   Based on file descriptor properties and global options, this method  //   calculate the filename that will be stored in the archive.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCalculateStoredFilename(&$p_filedescr, &$p_options)  {    $v_result=1;    // ----- Working variables    $p_filename = $p_filedescr['filename'];    if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {      $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];    }    else {      $p_add_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {      $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];    }    else {      $p_remove_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {      $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];    }    else {      $p_remove_all_dir = 0;    }    // ----- Look for full name change    if (isset($p_filedescr['new_full_name'])) {      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);    }    // ----- Look for path and/or short name change    else {      // ----- Look for short name change      // Its when we cahnge just the filename but not the path      if (isset($p_filedescr['new_short_name'])) {        $v_path_info = pathinfo($p_filename);        $v_dir = '';        if ($v_path_info['dirname'] != '') {          $v_dir = $v_path_info['dirname'].'/';        }        $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];      }      else {        // ----- Calculate the stored filename        $v_stored_filename = $p_filename;      }      // ----- Look for all path to remove      if ($p_remove_all_dir) {        $v_stored_filename = basename($p_filename);      }      // ----- Look for partial path remove      else if ($p_remove_dir != "") {        if (substr($p_remove_dir, -1) != '/')          $p_remove_dir .= "/";        if (   (substr($p_filename, 0, 2) == "./")            || (substr($p_remove_dir, 0, 2) == "./")) {          if (   (substr($p_filename, 0, 2) == "./")              && (substr($p_remove_dir, 0, 2) != "./")) {            $p_remove_dir = "./".$p_remove_dir;          }          if (   (substr($p_filename, 0, 2) != "./")              && (substr($p_remove_dir, 0, 2) == "./")) {            $p_remove_dir = substr($p_remove_dir, 2);          }        }        $v_compare = PclZipUtilPathInclusion($p_remove_dir,                                             $v_stored_filename);        if ($v_compare > 0) {          if ($v_compare == 2) {            $v_stored_filename = "";          }          else {            $v_stored_filename = substr($v_stored_filename,                                        strlen($p_remove_dir));          }        }      }      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);      // ----- Look for path to add      if ($p_add_dir != "") {        if (substr($p_add_dir, -1) == "/")          $v_stored_filename = $p_add_dir.$v_stored_filename;        else          $v_stored_filename = $p_add_dir."/".$v_stored_filename;      }    }    // ----- Filename (reduce the path of stored name)    $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);    $p_filedescr['stored_filename'] = $v_stored_filename;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteFileHeader(&$p_header)  {    $v_result=1;    // ----- Store the offset position of the file    $p_header['offset'] = ftell($this->zip_fd);    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,	                      $p_header['version_extracted'], $p_header['flag'],                          $p_header['compression'], $v_mtime, $v_mdate,                          $p_header['crc'], $p_header['compressed_size'],						  $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len']);    // ----- Write the first 148 bytes of the header in the archive    fputs($this->zip_fd, $v_binary_data, 30);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralFileHeader(&$p_header)  {    $v_result=1;    // TBC    //for(reset($p_header); $key = key($p_header); next($p_header)) {    //}    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,	                      $p_header['version'], $p_header['version_extracted'],                          $p_header['flag'], $p_header['compression'],						  $v_mtime, $v_mdate, $p_header['crc'],                          $p_header['compressed_size'], $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len'], $p_header['comment_len'],                          $p_header['disk'], $p_header['internal'],						  $p_header['external'], $p_header['offset']);    // ----- Write the 42 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 46);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    if ($p_header['comment_len'] != 0)    {      fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)  {    $v_result=1;    // ----- Packed data    $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,	                      $p_nb_entries, $p_size,						  $p_offset, strlen($p_comment));    // ----- Write the 22 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 22);    // ----- Write the variable fields    if (strlen($p_comment) != 0)    {      fputs($this->zip_fd, $p_comment, strlen($p_comment));    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privList()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privList(&$p_list)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of Central Dir    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_central_dir['offset']))    {      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    for ($i=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        $this->privSwapBackMagicQuotes();        return $v_result;      }      $v_header['index'] = $i;      // ----- Get the only interesting attributes      $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);      unset($v_header);    }    // ----- Close the zip file    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privConvertHeader2FileInfo()  // Description :  //   This function takes the file informations from the central directory  //   entries and extract the interesting parameters that will be given back.  //   The resulting file infos are set in the array $p_info  //     $p_info['filename'] : Filename with full path. Given by user (add),  //                           extracted in the filesystem (extract).  //     $p_info['stored_filename'] : Stored filename in the archive.  //     $p_info['size'] = Size of the file.  //     $p_info['compressed_size'] = Compressed size of the file.  //     $p_info['mtime'] = Last modification date of the file.  //     $p_info['comment'] = Comment associated with the file.  //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.  //     $p_info['status'] = status of the action on the file.  //     $p_info['crc'] = CRC of the file content.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privConvertHeader2FileInfo($p_header, &$p_info)  {    $v_result=1;    // ----- Get the interesting attributes    $v_temp_path = PclZipUtilPathReduction($p_header['filename']);    $p_info['filename'] = $v_temp_path;    $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);    $p_info['stored_filename'] = $v_temp_path;    $p_info['size'] = $p_header['size'];    $p_info['compressed_size'] = $p_header['compressed_size'];    $p_info['mtime'] = $p_header['mtime'];    $p_info['comment'] = $p_header['comment'];    $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);    $p_info['index'] = $p_header['index'];    $p_info['status'] = $p_header['status'];    $p_info['crc'] = $p_header['crc'];    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractByRule()  // Description :  //   Extract a file or directory depending of rules (by index, by name, ...)  // Parameters :  //   $p_file_list : An array where will be placed the properties of each  //                  extracted file  //   $p_path : Path to add while writing the extracted files  //   $p_remove_path : Path to remove (from the file memorized path) while writing the  //                    extracted files. If the path does not match the file path,  //                    the file is extracted with its memorized path.  //                    $p_remove_path does not apply to 'list' mode.  //                    $p_path and $p_remove_path are commulative.  // Return Values :  //   1 on success,0 or less on error (see error code list)  // --------------------------------------------------------------------------------  function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check the path    if (   ($p_path == "")	    || (   (substr($p_path, 0, 1) != "/")		    && (substr($p_path, 0, 3) != "../")			&& (substr($p_path,1,2)!=":/")))      $p_path = "./".$p_path;    // ----- Reduce the path last (and duplicated) '/'    if (($p_path != "./") && ($p_path != "/"))    {      // ----- Look for the path end '/'      while (substr($p_path, -1) == "/")      {        $p_path = substr($p_path, 0, strlen($p_path)-1);      }    }    // ----- Look for path to remove format (should end by /)    if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))    {      $p_remove_path .= '/';    }    $p_remove_path_size = strlen($p_remove_path);    // ----- Open the zip file    if (($v_result = $this->privOpenFd('rb')) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      // ----- Close the zip file      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    // ----- Read each entry    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read next Central dir entry      @rewind($this->zip_fd);      if (@fseek($this->zip_fd, $v_pos_entry))      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');        // ----- Return        return PclZip::errorCode();      }      // ----- Read the file header      $v_header = array();      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        return $v_result;      }      // ----- Store the index      $v_header['index'] = $i;      // ----- Store the file position      $v_pos_entry = ftell($this->zip_fd);      // ----- Look for the specific extract rules      $v_extract = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_extract = true;                  }              }              // ----- Look for a filename              elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_extract = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_extract = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      // ----- Look for no rule, which means extract all the archive      else {          $v_extract = true;      }	  // ----- Check compression method	  if (   ($v_extract)	      && (   ($v_header['compression'] != 8)		      && ($v_header['compression'] != 0))) {          $v_header['status'] = 'unsupported_compression';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,			                       "Filename '".$v_header['stored_filename']."' is "				  	    	  	   ."compressed by an unsupported compression "				  	    	  	   ."method (".$v_header['compression'].") ");              return PclZip::errorCode();		  }	  }	  // ----- Check encrypted files	  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {          $v_header['status'] = 'unsupported_encryption';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,			                       "Unsupported encryption for "				  	    	  	   ." filename '".$v_header['stored_filename']								   ."'");              return PclZip::errorCode();		  }    }      // ----- Look for real extraction      if (($v_extract) && ($v_header['status'] != 'ok')) {          $v_result = $this->privConvertHeader2FileInfo($v_header,		                                        $p_file_list[$v_nb_extracted++]);          if ($v_result != 1) {              $this->privCloseFd();              $this->privSwapBackMagicQuotes();              return $v_result;          }          $v_extract = false;      }      // ----- Look for real extraction      if ($v_extract)      {        // ----- Go to the file position        @rewind($this->zip_fd);        if (@fseek($this->zip_fd, $v_header['offset']))        {          // ----- Close the zip file          $this->privCloseFd();          $this->privSwapBackMagicQuotes();          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');          // ----- Return          return PclZip::errorCode();        }        // ----- Look for extraction as string        if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {          $v_string = '';          // ----- Extracting the file          $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Set the file content          $p_file_list[$v_nb_extracted]['content'] = $v_string;          // ----- Next extracted file          $v_nb_extracted++;          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for extraction in standard output        elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))		        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {          // ----- Extracting the file in standard output          $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for normal extraction        else {          // ----- Extracting the file          $v_result1 = $this->privExtractFile($v_header,		                                      $p_path, $p_remove_path,											  $p_remove_all_path,											  $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }      }    }    // ----- Close the zip file    $this->privCloseFd();    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFile()  // Description :  // Parameters :  // Return Values :  //  // 1 : ... ?  // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback  // --------------------------------------------------------------------------------  function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for all path to remove    if ($p_remove_all_path == true) {        // ----- Look for folder entry that not need to be extracted        if (($p_entry['external']&0x00000010)==0x00000010) {            $p_entry['status'] = "filtered";            return $v_result;        }        // ----- Get the basename of the path        $p_entry['filename'] = basename($p_entry['filename']);    }    // ----- Look for path to remove    else if ($p_remove_path != "")    {      if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)      {        // ----- Change the file status        $p_entry['status'] = "filtered";        // ----- Return        return $v_result;      }      $p_remove_path_size = strlen($p_remove_path);      if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)      {        // ----- Remove the path        $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);      }    }    // ----- Add the path    if ($p_path != '') {      $p_entry['filename'] = $p_path."/".$p_entry['filename'];    }    // ----- Check a base_dir_restriction    if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {      $v_inclusion      = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],                                $p_entry['filename']);      if ($v_inclusion == 0) {        PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,			                     "Filename '".$p_entry['filename']."' is "								 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");        return PclZip::errorCode();      }    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {    // ----- Look for specific actions while the file exist    if (file_exists($p_entry['filename']))    {      // ----- Look if file is a directory      if (is_dir($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "already_a_directory";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,			                     "Filename '".$p_entry['filename']."' is "								 ."already used by an existing directory");            return PclZip::errorCode();		    }      }      // ----- Look if file is write protected      else if (!is_writeable($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "write_protected";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			                     "Filename '".$p_entry['filename']."' exists "								 ."and is write protected");            return PclZip::errorCode();		    }      }      // ----- Look if the extracted file is older      else if (filemtime($p_entry['filename']) > $p_entry['mtime'])      {        // ----- Change the file status        if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))		    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {	  	  }		    else {            $p_entry['status'] = "newer_exist";            // ----- Look for PCLZIP_OPT_STOP_ON_ERROR            // For historical reason first PclZip implementation does not stop            // when this kind of error occurs.            if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {                PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			             "Newer version of '".$p_entry['filename']."' exists "					    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");                return PclZip::errorCode();		      }		    }      }      else {      }    }    // ----- Check the directory availability and create it if necessary    else {      if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))        $v_dir_to_check = $p_entry['filename'];      else if (!strstr($p_entry['filename'], "/"))        $v_dir_to_check = "";      else        $v_dir_to_check = dirname($p_entry['filename']);        if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {          // ----- Change the file status          $p_entry['status'] = "path_creation_fail";          // ----- Return          //return $v_result;          $v_result = 1;        }      }    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010))      {        // ----- Look for not compressed file        if ($p_entry['compression'] == 0) {    		  // ----- Opening destination file          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)          {            // ----- Change the file status            $p_entry['status'] = "write_error";            // ----- Return            return $v_result;          }          // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks          $v_size = $p_entry['compressed_size'];          while ($v_size != 0)          {            $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);            $v_buffer = @fread($this->zip_fd, $v_read_size);            /* Try to speed up the code            $v_binary_data = pack('a'.$v_read_size, $v_buffer);            @fwrite($v_dest_file, $v_binary_data, $v_read_size);            */            @fwrite($v_dest_file, $v_buffer, $v_read_size);            $v_size -= $v_read_size;          }          // ----- Closing the destination file          fclose($v_dest_file);          // ----- Change the file mtime          touch($p_entry['filename'], $p_entry['mtime']);        }        else {          // ----- TBC          // Need to be finished          if (($p_entry['flag'] & 1) == 1) {            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');            return PclZip::errorCode();          }          // ----- Look for using temporary file to unzip          if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))              && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                  || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                      && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {            $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);            if ($v_result < PCLZIP_ERR_NO_ERROR) {              return $v_result;            }          }          // ----- Look for extract in memory          else {            // ----- Read the compressed file in a buffer (one shot)            $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);            // ----- Decompress the file            $v_file_content = @gzinflate($v_buffer);            unset($v_buffer);            if ($v_file_content === FALSE) {              // ----- Change the file status              // TBC              $p_entry['status'] = "error";              return $v_result;            }            // ----- Opening destination file            if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {              // ----- Change the file status              $p_entry['status'] = "write_error";              return $v_result;            }            // ----- Write the uncompressed data            @fwrite($v_dest_file, $v_file_content, $p_entry['size']);            unset($v_file_content);            // ----- Closing the destination file            @fclose($v_dest_file);          }          // ----- Change the file mtime          @touch($p_entry['filename'], $p_entry['mtime']);        }        // ----- Look for chmod option        if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {          // ----- Change the mode of the file          @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);        }      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileUsingTempFile(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Creates a temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Write gz file format header    $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));    @fwrite($v_dest_file, $v_binary_data, 10);    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Write gz file format footer    $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);    @fwrite($v_dest_file, $v_binary_data, 8);    // ----- Close the temporary file    @fclose($v_dest_file);    // ----- Opening destination file    if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {      $p_entry['status'] = "write_error";      return $v_result;    }    // ----- Open the temporary gz file    if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {      @fclose($v_dest_file);      $p_entry['status'] = "read_error";      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['size'];    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @gzread($v_src_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    @fclose($v_dest_file);    @gzclose($v_src_file);    // ----- Delete the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileInOutput()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileInOutput(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1) {      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.//      eval('$v_result = '.$p_options[PCLZIP_CB_PRE_EXTRACT].'(PCLZIP_CB_PRE_EXTRACT, $v_local_header);');      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Trace    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file        if ($p_entry['compressed_size'] == $p_entry['size']) {          // ----- Read the file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Send the file to the output          echo $v_buffer;          unset($v_buffer);        }        else {          // ----- Read the compressed file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          $v_file_content = gzinflate($v_buffer);          unset($v_buffer);          // ----- Send the file to the output          echo $v_file_content;          unset($v_file_content);        }      }    }	// ----- Change abort status	if ($p_entry['status'] == "aborted") {      $p_entry['status'] = "skipped";	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileAsString()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)  {    $v_result=1;    // ----- Read the file header    $v_header = array();    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file  //      if ($p_entry['compressed_size'] == $p_entry['size'])        if ($p_entry['compression'] == 0) {          // ----- Reading the file          $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);        }        else {          // ----- Reading the file          $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          if (($p_string = @gzinflate($v_data)) === FALSE) {              // TBC          }        }        // ----- Trace      }      else {          // TBC : error : can not extract a folder in a string      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Swap the content to header      $v_local_header['content'] = $p_string;      $p_string = '';      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Swap back the content to header      $p_string = $v_local_header['content'];      unset($v_local_header['content']);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x04034b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 26);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 26)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);    // ----- Get filename    $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);    // ----- Get extra_fields    if ($v_data['extra_len'] != 0) {      $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);    }    else {      $p_header['extra'] = '';    }    // ----- Extract properties    $p_header['version_extracted'] = $v_data['version'];    $p_header['compression'] = $v_data['compression'];    $p_header['size'] = $v_data['size'];    $p_header['compressed_size'] = $v_data['compressed_size'];    $p_header['crc'] = $v_data['crc'];    $p_header['flag'] = $v_data['flag'];    $p_header['filename_len'] = $v_data['filename_len'];    // ----- Recuperate date in UNIX format    $p_header['mdate'] = $v_data['mdate'];    $p_header['mtime'] = $v_data['mtime'];    if ($p_header['mdate'] && $p_header['mtime'])    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // TBC    //for(reset($v_data); $key = key($v_data); next($v_data)) {    //}    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set the status field    $p_header['status'] = "ok";    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadCentralFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x02014b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 42);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 42)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);    // ----- Get filename    if ($p_header['filename_len'] != 0)      $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);    else      $p_header['filename'] = '';    // ----- Get extra    if ($p_header['extra_len'] != 0)      $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);    else      $p_header['extra'] = '';    // ----- Get comment    if ($p_header['comment_len'] != 0)      $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);    else      $p_header['comment'] = '';    // ----- Extract properties    // ----- Recuperate date in UNIX format    //if ($p_header['mdate'] && $p_header['mtime'])    // TBC : bug : this was ignoring time with 0/0/0    if (1)    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set default status to ok    $p_header['status'] = 'ok';    // ----- Look if it is a directory    if (substr($p_header['filename'], -1) == '/') {      //$p_header['external'] = 0x41FF0010;      $p_header['external'] = 0x00000010;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCheckFileHeaders()  // Description :  // Parameters :  // Return Values :  //   1 on success,  //   0 on error;  // --------------------------------------------------------------------------------  function privCheckFileHeaders(&$p_local_header, &$p_central_header)  {    $v_result=1;  	// ----- Check the static values  	// TBC  	if ($p_local_header['filename'] != $p_central_header['filename']) {  	}  	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {  	}  	if ($p_local_header['flag'] != $p_central_header['flag']) {  	}  	if ($p_local_header['compression'] != $p_central_header['compression']) {  	}  	if ($p_local_header['mtime'] != $p_central_header['mtime']) {  	}  	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {  	}  	// ----- Look for flag bit 3  	if (($p_local_header['flag'] & 8) == 8) {          $p_local_header['size'] = $p_central_header['size'];          $p_local_header['compressed_size'] = $p_central_header['compressed_size'];          $p_local_header['crc'] = $p_central_header['crc'];  	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadEndCentralDir()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadEndCentralDir(&$p_central_dir)  {    $v_result=1;    // ----- Go to the end of the zip file    $v_size = filesize($this->zipname);    @fseek($this->zip_fd, $v_size);    if (@ftell($this->zip_fd) != $v_size)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');      // ----- Return      return PclZip::errorCode();    }    // ----- First try : look if this is an archive with no commentaries (most of the time)    // in this case the end of central dir is at 22 bytes of the file end    $v_found = 0;    if ($v_size > 26) {      @fseek($this->zip_fd, $v_size-22);      if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read for bytes      $v_binary_data = @fread($this->zip_fd, 4);      $v_data = @unpack('Vid', $v_binary_data);      // ----- Check signature      if ($v_data['id'] == 0x06054b50) {        $v_found = 1;      }      $v_pos = ftell($this->zip_fd);    }    // ----- Go back to the maximum possible size of the Central Dir End Record    if (!$v_found) {      $v_maximum_size = 65557; // 0xFFFF + 22;      if ($v_maximum_size > $v_size)        $v_maximum_size = $v_size;      @fseek($this->zip_fd, $v_size-$v_maximum_size);      if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read byte per byte in order to find the signature      $v_pos = ftell($this->zip_fd);      $v_bytes = 0x00000000;      while ($v_pos < $v_size)      {        // ----- Read a byte        $v_byte = @fread($this->zip_fd, 1);        // -----  Add the byte        //$v_bytes = ($v_bytes << 8) | Ord($v_byte);        // Note we mask the old value down such that once shifted we can never end up with more than a 32bit number        // Otherwise on systems where we have 64bit integers the check below for the magic number will fail.        $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte);        // ----- Compare the bytes        if ($v_bytes == 0x504b0506)        {          $v_pos++;          break;        }        $v_pos++;      }      // ----- Look if not found end of central dir      if ($v_pos == $v_size)      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");        // ----- Return        return PclZip::errorCode();      }    }    // ----- Read the first 18 bytes of the header    $v_binary_data = fread($this->zip_fd, 18);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 18)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);    // ----- Check the global size    if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {	  // ----- Removed in release 2.2 see readme file	  // The check of the file size is a little too strict.	  // Some bugs where found when a zip is encrypted/decrypted with 'crypt'.	  // While decrypted, zip has training 0 bytes	  if (0) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,	                       'The central dir is not at the end of the archive.'						   .' Some trailing bytes exists after the archive.');      // ----- Return      return PclZip::errorCode();	  }    }    // ----- Get comment    if ($v_data['comment_size'] != 0) {      $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);    }    else      $p_central_dir['comment'] = '';    $p_central_dir['entries'] = $v_data['entries'];    $p_central_dir['disk_entries'] = $v_data['disk_entries'];    $p_central_dir['offset'] = $v_data['offset'];    $p_central_dir['size'] = $v_data['size'];    $p_central_dir['disk'] = $v_data['disk'];    $p_central_dir['disk_start'] = $v_data['disk_start'];    // TBC    //for(reset($p_central_dir); $key = key($p_central_dir); next($p_central_dir)) {    //}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDeleteByRule()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDeleteByRule(&$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Scan all the files    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_pos_entry))    {      // ----- Close the zip file      $this->privCloseFd();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    $v_header_list = array();    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      $v_header_list[$v_nb_extracted] = array();      if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        return $v_result;      }      // ----- Store the index      $v_header_list[$v_nb_extracted]['index'] = $i;      // ----- Look for the specific extract rules      $v_found = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }                  elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) /* Indicates a folder */                          && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }              }              // ----- Look for a filename              elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_found = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_found = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      else {      	$v_found = true;      }      // ----- Look for deletion      if ($v_found)      {        unset($v_header_list[$v_nb_extracted]);      }      else      {        $v_nb_extracted++;      }    }    // ----- Look if something need to be deleted    if ($v_nb_extracted > 0) {        // ----- Creates a temporay file        $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';        // ----- Creates a temporary zip archive        $v_temp_zip = new PclZip($v_zip_temp_name);        // ----- Open the temporary zip file in write mode        if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {            $this->privCloseFd();            // ----- Return            return $v_result;        }        // ----- Look which file need to be kept        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Calculate the position of the header            @rewind($this->zip_fd);            if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Error log                PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');                // ----- Return                return PclZip::errorCode();            }            // ----- Read the file header            $v_local_header = array();            if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Check that local file header is same as central file header            if ($this->privCheckFileHeaders($v_local_header,			                                $v_header_list[$i]) != 1) {                // TBC            }            unset($v_local_header);            // ----- Write the file header            if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Read/write the data block            if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }        }        // ----- Store the offset of the central dir        $v_offset = @ftell($v_temp_zip->zip_fd);        // ----- Re-Create the Central Dir files header        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Create the file header            if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {                $v_temp_zip->privCloseFd();                $this->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Transform the header to a 'usable' info            $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);        }        // ----- Zip file comment        $v_comment = '';        if (isset($p_options[PCLZIP_OPT_COMMENT])) {          $v_comment = $p_options[PCLZIP_OPT_COMMENT];        }        // ----- Calculate the size of the central header        $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;        // ----- Create the central dir footer        if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {            // ----- Reset the file list            unset($v_header_list);            $v_temp_zip->privCloseFd();            $this->privCloseFd();            @unlink($v_zip_temp_name);            // ----- Return            return $v_result;        }        // ----- Close        $v_temp_zip->privCloseFd();        $this->privCloseFd();        // ----- Delete the zip file        // TBC : I should test the result ...        @unlink($this->zipname);        // ----- Rename the temporary file        // TBC : I should test the result ...        //@rename($v_zip_temp_name, $this->zipname);        PclZipUtilRename($v_zip_temp_name, $this->zipname);        // ----- Destroy the temporary archive        unset($v_temp_zip);    }    // ----- Remove every files : reset the file    else if ($v_central_dir['entries'] != 0) {        $this->privCloseFd();        if (($v_result = $this->privOpenFd('wb')) != 1) {          return $v_result;        }        if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {          return $v_result;        }        $this->privCloseFd();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDirCheck()  // Description :  //   Check if a directory exists, if not it creates it and all the parents directory  //   which may be useful.  // Parameters :  //   $p_dir : Directory path to check.  // Return Values :  //    1 : OK  //   -1 : Unable to create directory  // --------------------------------------------------------------------------------  function privDirCheck($p_dir, $p_is_dir=false)  {    $v_result = 1;    // ----- Remove the final '/'    if (($p_is_dir) && (substr($p_dir, -1)=='/'))    {      $p_dir = substr($p_dir, 0, strlen($p_dir)-1);    }    // ----- Check the directory availability    if ((is_dir($p_dir)) || ($p_dir == ""))    {      return 1;    }    // ----- Extract parent directory    $p_parent_dir = dirname($p_dir);    // ----- Just a check    if ($p_parent_dir != $p_dir)    {      // ----- Look for parent directory      if ($p_parent_dir != "")      {        if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)        {          return $v_result;        }      }    }    // ----- Create the directory    if (!@mkdir($p_dir, 0777))    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privMerge()  // Description :  //   If $p_archive_to_add does not exist, the function exit with a success result.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privMerge(&$p_archive_to_add)  {    $v_result=1;    // ----- Look if the archive_to_add exists    if (!is_file($p_archive_to_add->zipname))    {      // ----- Nothing to merge, so merge is a success      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Look if the archive exists    if (!is_file($this->zipname))    {      // ----- Do a duplicate      $v_result = $this->privDuplicate($p_archive_to_add->zipname);      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Open the archive_to_add file    if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)    {      $this->privCloseFd();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir_to_add = array();    if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($p_archive_to_add->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the files from the archive_to_add into the temporary file    $v_size = $v_central_dir_to_add['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($v_zip_temp_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the block of file headers from the archive_to_add    $v_size = $v_central_dir_to_add['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Merge the file comments    $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];    // ----- Calculate the size of the (new) central header    $v_size = @ftell($v_zip_temp_fd)-$v_offset;    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive fd    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      @fclose($v_zip_temp_fd);      $this->zip_fd = null;      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    $p_archive_to_add->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDuplicate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDuplicate($p_archive_filename)  {    $v_result=1;    // ----- Look if the $p_archive_filename exists    if (!is_file($p_archive_filename))    {      // ----- Nothing to duplicate, so duplicate is a success.      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)    {      $this->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = filesize($p_archive_filename);    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorLog()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorLog($p_error_code=0, $p_error_string='')  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclError($p_error_code, $p_error_string);    }    else {      $this->error_code = $p_error_code;      $this->error_string = $p_error_string;    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorReset()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorReset()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclErrorReset();    }    else {      $this->error_code = 0;      $this->error_string = '';    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDisableMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDisableMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if already done    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Get and memorize the magic_quote value	$this->magic_quotes_status = @get_magic_quotes_runtime();	// ----- Disable magic_quotes	if ($this->magic_quotes_status == 1) {	  @set_magic_quotes_runtime(0);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privSwapBackMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privSwapBackMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if something to do    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Swap back magic_quotes	if ($this->magic_quotes_status == 1) {  	  @set_magic_quotes_runtime($this->magic_quotes_status);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  }  // End of class  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathReduction()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilPathReduction($p_dir)  {    $v_result = "";    // ----- Look for not empty path    if ($p_dir != "") {      // ----- Explode path by directory names      $v_list = explode("/", $p_dir);      // ----- Study directories from last to first      $v_skip = 0;      for ($i=sizeof($v_list)-1; $i>=0; $i--) {        // ----- Look for current path        if ($v_list[$i] == ".") {          // ----- Ignore this directory          // Should be the first $i=0, but no check is done        }        else if ($v_list[$i] == "..") {		  $v_skip++;        }        else if ($v_list[$i] == "") {		  // ----- First '/' i.e. root slash		  if ($i == 0) {            $v_result = "/".$v_result;		    if ($v_skip > 0) {		        // ----- It is an invalid path, so the path is not modified		        // TBC		        $v_result = $p_dir;                $v_skip = 0;		    }		  }		  // ----- Last '/' i.e. indicates a directory		  else if ($i == (sizeof($v_list)-1)) {            $v_result = $v_list[$i];		  }		  // ----- Double '/' inside the path		  else {            // ----- Ignore only the double '//' in path,            // but not the first and last '/'		  }        }        else {		  // ----- Look for item to skip		  if ($v_skip > 0) {		    $v_skip--;		  }		  else {            $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");		  }        }      }      // ----- Look for skip      if ($v_skip > 0) {        while ($v_skip > 0) {            $v_result = '../'.$v_result;            $v_skip--;        }      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathInclusion()  // Description :  //   This function indicates if the path $p_path is under the $p_dir tree. Or,  //   said in an other way, if the file or sub-dir $p_path is inside the dir  //   $p_dir.  //   The function indicates also if the path is exactly the same as the dir.  //   This function supports path with duplicated '/' like '//', but does not  //   support '.' or '..' statements.  // Parameters :  // Return Values :  //   0 if $p_path is not inside directory $p_dir  //   1 if $p_path is inside directory $p_dir  //   2 if $p_path is exactly the same as $p_dir  // --------------------------------------------------------------------------------  function PclZipUtilPathInclusion($p_dir, $p_path)  {    $v_result = 1;    // ----- Look for path beginning by ./    if (   ($p_dir == '.')        || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {      $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);    }    if (   ($p_path == '.')        || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {      $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);    }    // ----- Explode dir and path by directory separator    $v_list_dir = explode("/", $p_dir);    $v_list_dir_size = sizeof($v_list_dir);    $v_list_path = explode("/", $p_path);    $v_list_path_size = sizeof($v_list_path);    // ----- Study directories paths    $i = 0;    $j = 0;    while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {      // ----- Look for empty dir (path reduction)      if ($v_list_dir[$i] == '') {        $i++;        continue;      }      if ($v_list_path[$j] == '') {        $j++;        continue;      }      // ----- Compare the items      if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {        $v_result = 0;      }      // ----- Next items      $i++;      $j++;    }    // ----- Look if everything seems to be the same    if ($v_result) {      // ----- Skip all the empty items      while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;      while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;      if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {        // ----- There are exactly the same        $v_result = 2;      }      else if ($i < $v_list_dir_size) {        // ----- The path is shorter than the dir        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilCopyBlock()  // Description :  // Parameters :  //   $p_mode : read/write compression mode  //             0 : src & dest normal  //             1 : src gzip, dest normal  //             2 : src normal, dest gzip  //             3 : src & dest gzip  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)  {    $v_result = 1;    if ($p_mode==0)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==1)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==2)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==3)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilRename()  // Description :  //   This function tries to do a simple rename() function. If it fails, it  //   tries to copy the $p_src file in a new $p_dest file and then unlink the  //   first one.  // Parameters :  //   $p_src : Old filename  //   $p_dest : New filename  // Return Values :  //   1 on success, 0 on failure.  // --------------------------------------------------------------------------------  function PclZipUtilRename($p_src, $p_dest)  {    $v_result = 1;    // ----- Try to rename the files    if (!@rename($p_src, $p_dest)) {      // ----- Try to copy & unlink the src      if (!@copy($p_src, $p_dest)) {        $v_result = 0;      }      else if (!@unlink($p_src)) {        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilOptionText()  // Description :  //   Translate option value in text. Mainly for debug purpose.  // Parameters :  //   $p_option : the option value.  // Return Values :  //   The option text value.  // --------------------------------------------------------------------------------  function PclZipUtilOptionText($p_option)  {    $v_list = get_defined_constants();    for (reset($v_list); $v_key = key($v_list); next($v_list)) {	    $v_prefix = substr($v_key, 0, 10);	    if ((   ($v_prefix == 'PCLZIP_OPT')           || ($v_prefix == 'PCLZIP_CB_')           || ($v_prefix == 'PCLZIP_ATT'))	        && ($v_list[$v_key] == $p_option)) {        return $v_key;	    }    }    $v_result = 'Unknown';    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilTranslateWinPath()  // Description :  //   Translate windows path by replacing '\' by '/' and optionally removing  //   drive letter.  // Parameters :  //   $p_path : path to translate.  //   $p_remove_disk_letter : true | false  // Return Values :  //   The path translated.  // --------------------------------------------------------------------------------  function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)  {    if (stristr(php_uname(), 'windows')) {      // ----- Look for potential disk letter      if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {          $p_path = substr($p_path, $v_position+1);      }      // ----- Change potential windows directory separator      if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {          $p_path = strtr($p_path, '\\', '/');      }    }    return $p_path;  }  // --------------------------------------------------------------------------------?>
<?php/** * Edit comment form for inclusion in another file. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');/** * @var string */$submitbutton_text = __('Edit Comment');$toprow_title = sprintf(__('Editing Comment # %s'), $comment->comment_ID);$form_action = 'editedcomment';$form_extra = "' />\n<input type='hidden' name='comment_ID' value='" . esc_attr($comment->comment_ID) . "' />\n<input type='hidden' name='comment_post_ID' value='" . esc_attr($comment->comment_post_ID);$comment->comment_author_email = esc_attr($comment->comment_author_email);?><form name="post" action="comment.php" method="post" id="post"><?php wp_nonce_field('update-comment_' . $comment->comment_ID) ?><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Edit Comment'); ?></h2><div id="poststuff" class="metabox-holder has-right-sidebar"><input type="hidden" name="user_ID" value="<?php echo (int) $user_ID ?>" /><input type="hidden" name="action" value='<?php echo $form_action . $form_extra ?>' /><div id="side-info-column" class="inner-sidebar"><div id="submitdiv" class="stuffbox" ><h3><span class='hndle'><?php _e('Status') ?></span></h3><div class="inside"><div class="submitbox" id="submitcomment"><div id="minor-publishing"><div id="minor-publishing-actions"><div id="preview-action"><a class="preview button" href="<?php echo get_comment_link(); ?>" target="_blank"><?php _e('View Comment'); ?></a></div><div class="clear"></div></div><div id="misc-publishing-actions"><div class="misc-pub-section" id="comment-status-radio"><label class="approved"><input type="radio"<?php checked( $comment->comment_approved, '1' ); ?> name="comment_status" value="1" /><?php /* translators: comment type radio button */ _ex('Approved', 'adjective') ?></label><br /><label class="waiting"><input type="radio"<?php checked( $comment->comment_approved, '0' ); ?> name="comment_status" value="0" /><?php /* translators: comment type radio button */ _ex('Pending', 'adjective') ?></label><br /><label class="spam"><input type="radio"<?php checked( $comment->comment_approved, 'spam' ); ?> name="comment_status" value="spam" /><?php /* translators: comment type radio button */ _ex('Spam', 'adjective'); ?></label></div><div class="misc-pub-section curtime misc-pub-section-last"><?php// translators: Publish box date formt, see http://php.net/date$datef = __( 'M j, Y @ G:i' );$stamp = __('Submitted on: <b>%1$s</b>');$date = date_i18n( $datef, strtotime( $comment->comment_date ) );?><span id="timestamp"><?php printf($stamp, $date); ?></span>&nbsp;<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" tabindex='4'><?php _e('Edit') ?></a><div id='timestampdiv' class='hide-if-js'><?php touch_time(('editcomment' == $action), 0, 5); ?></div></div></div> <!-- misc actions --><div class="clear"></div></div><div id="major-publishing-actions"><div id="delete-action"><?php echo "<a class='submitdelete deletion' href='" . wp_nonce_url("comment.php?action=" . ( !EMPTY_TRASH_DAYS ? 'deletecomment' : 'trashcomment' ) . "&amp;c=$comment->comment_ID&amp;_wp_original_http_referer=" . urlencode(wp_get_referer()), 'delete-comment_' . $comment->comment_ID) . "'>" . ( !EMPTY_TRASH_DAYS ? __('Delete Permanently') : __('Move to Trash') ) . "</a>\n"; ?></div><div id="publishing-action"><input type="submit" name="save" value="<?php esc_attr_e('Update Comment'); ?>" tabindex="4" class="button-primary" /></div><div class="clear"></div></div></div></div></div></div><div id="post-body"><div id="post-body-content"><div id="namediv" class="stuffbox"><h3><label for="name"><?php _e( 'Author' ) ?></label></h3><div class="inside"><table class="form-table editcomment"><tbody><tr valign="top">	<td class="first"><?php _e( 'Name:' ); ?></td>	<td><input type="text" name="newcomment_author" size="30" value="<?php echo esc_attr( $comment->comment_author ); ?>" tabindex="1" id="name" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( $comment->comment_author_email ) {			printf( __( 'E-mail (%s):' ), get_comment_author_email_link( __( 'send e-mail' ), '', '' ) );		} else {			_e( 'E-mail:' );		}?></td>	<td><input type="text" name="newcomment_author_email" size="30" value="<?php echo $comment->comment_author_email; ?>" tabindex="2" id="email" /></td></tr><tr valign="top">	<td class="first">	<?php		if ( ! empty( $comment->comment_author_url ) && 'http://' != $comment->comment_author_url ) {			$link = '<a href="' . $comment->comment_author_url . '" rel="external nofollow" target="_blank">' . __('visit site') . '</a>';			printf( __( 'URL (%s):' ), apply_filters('get_comment_author_link', $link ) );		} else {			_e( 'URL:' );		} ?></td>	<td><input type="text" id="newcomment_author_url" name="newcomment_author_url" size="30" class="code" value="<?php echo esc_attr($comment->comment_author_url); ?>" tabindex="3" /></td></tr></tbody></table><br /></div></div><div id="postdiv" class="postarea"><?php the_editor($comment->comment_content, 'content', 'newcomment_author_url', false, 4); ?><?php wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false ); ?></div><?phpdo_action('add_meta_boxes', 'comment', $comment);do_action('add_meta_boxes_comment', $comment);do_meta_boxes('comment', 'normal', $comment);?><input type="hidden" name="c" value="<?php echo esc_attr($comment->comment_ID) ?>" /><input type="hidden" name="p" value="<?php echo esc_attr($comment->comment_post_ID) ?>" /><input name="referredby" type="hidden" id="referredby" value="<?php echo esc_url(stripslashes(wp_get_referer())); ?>" /><?php wp_original_referer_field(true, 'previous'); ?><input type="hidden" name="noredir" value="1" /></div></div></div></div></form><script type="text/javascript">try{document.post.name.focus();}catch(e){}</script>
<?php/** * API for fetching the HTML to embed remote content based on a provided URL. * Used internally by the {@link WP_Embed} class, but is designed to be generic. * * @link http://codex.wordpress.org/oEmbed oEmbed Codex Article * @link http://oembed.com/ oEmbed Homepage * * @package WordPress * @subpackage oEmbed *//** * oEmbed class. * * @package WordPress * @subpackage oEmbed * @since 2.9.0 */class WP_oEmbed {	var $providers = array();	/**	 * PHP4 constructor	 */	function WP_oEmbed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 *	 * @uses apply_filters() Filters a list of pre-defined oEmbed providers.	 */	function __construct() {		// List out some popular sites that support oEmbed.		// The WP_Embed class disables discovery for non-unfiltered_html users, so only providers in this array will be used for them.		// Add to this list using the wp_oembed_add_provider() function (see it's PHPDoc for details).		$this->providers = apply_filters( 'oembed_providers', array(			'#http://(www\.)?youtube.com/watch.*#i'         => array( 'http://www.youtube.com/oembed',            true  ),			'http://youtu.be/*'                             => array( 'http://www.youtube.com/oembed',            false ),			'http://blip.tv/file/*'                         => array( 'http://blip.tv/oembed/',                   false ),			'#http://(www\.)?vimeo\.com/.*#i'               => array( 'http://www.vimeo.com/api/oembed.{format}', true  ),			'#http://(www\.)?dailymotion\.com/.*#i'         => array( 'http://www.dailymotion.com/api/oembed',    true  ),			'#http://(www\.)?flickr\.com/.*#i'              => array( 'http://www.flickr.com/services/oembed/',   true  ),			'#http://(.+)?smugmug\.com/.*#i'                => array( 'http://api.smugmug.com/services/oembed/',  true  ),			'#http://(www\.)?hulu\.com/watch/.*#i'          => array( 'http://www.hulu.com/api/oembed.{format}',  true  ),			'#http://(www\.)?viddler\.com/.*#i'             => array( 'http://lab.viddler.com/services/oembed/',  true  ),			'http://qik.com/*'                              => array( 'http://qik.com/api/oembed.{format}',       false ),			'http://revision3.com/*'                        => array( 'http://revision3.com/api/oembed/',         false ),			'http://i*.photobucket.com/albums/*'            => array( 'http://photobucket.com/oembed',            false ),			'http://gi*.photobucket.com/groups/*'           => array( 'http://photobucket.com/oembed',            false ),			'#http://(www\.)?scribd\.com/.*#i'              => array( 'http://www.scribd.com/services/oembed',    true  ),			'http://wordpress.tv/*'                         => array( 'http://wordpress.tv/oembed/',              false ),			'#http://(answers|surveys)\.polldaddy.com/.*#i' => array( 'http://polldaddy.com/oembed/',             true  ),			'#http://(www\.)?funnyordie\.com/videos/.*#i'   => array( 'http://www.funnyordie.com/oembed',         true  ),		) );		// Fix any embeds that contain new lines in the middle of the HTML which breaks wpautop().		add_filter( 'oembed_dataparse', array(&$this, '_strip_newlines'), 10, 3 );	}	/**	 * The do-it-all function that takes a URL and attempts to return the HTML.	 *	 * @see WP_oEmbed::discover()	 * @see WP_oEmbed::fetch()	 * @see WP_oEmbed::data2html()	 *	 * @param string $url The URL to the content that should be attempted to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed.	 */	function get_html( $url, $args = '' ) {		$provider = false;		if ( !isset($args['discover']) )			$args['discover'] = true;		foreach ( $this->providers as $matchmask => $data ) {			list( $providerurl, $regex ) = $data;			// Turn the asterisk-type provider URLs into regex			if ( !$regex )				$matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote( str_replace( '*', '___wildcard___', $matchmask ), '#' ) ) . '#i';			if ( preg_match( $matchmask, $url ) ) {				$provider = str_replace( '{format}', 'json', $providerurl ); // JSON is easier to deal with than XML				break;			}		}		if ( !$provider && $args['discover'] )			$provider = $this->discover( $url );		if ( !$provider || false === $data = $this->fetch( $provider, $url, $args ) )			return false;		return apply_filters( 'oembed_result', $this->data2html( $data, $url ), $url, $args );	}	/**	 * Attempts to find oEmbed provider discovery <link> tags at the given URL.	 *	 * @param string $url The URL that should be inspected for discovery <link> tags.	 * @return bool|string False on failure, otherwise the oEmbed provider URL.	 */	function discover( $url ) {		$providers = array();		// Fetch URL content		if ( $html = wp_remote_retrieve_body( wp_remote_get( $url ) ) ) {			// <link> types that contain oEmbed provider URLs			$linktypes = apply_filters( 'oembed_linktypes', array(				'application/json+oembed' => 'json',				'text/xml+oembed' => 'xml',				'application/xml+oembed' => 'xml', // Incorrect, but used by at least Vimeo			) );			// Strip <body>			$html = substr( $html, 0, stripos( $html, '</head>' ) );			// Do a quick check			$tagfound = false;			foreach ( $linktypes as $linktype => $format ) {				if ( stripos($html, $linktype) ) {					$tagfound = true;					break;				}			}			if ( $tagfound && preg_match_all( '/<link([^<>]+)>/i', $html, $links ) ) {				foreach ( $links[1] as $link ) {					$atts = shortcode_parse_atts( $link );					if ( !empty($atts['type']) && !empty($linktypes[$atts['type']]) && !empty($atts['href']) ) {						$providers[$linktypes[$atts['type']]] = $atts['href'];						// Stop here if it's JSON (that's all we need)						if ( 'json' == $linktypes[$atts['type']] )							break;					}				}			}		}		// JSON is preferred to XML		if ( !empty($providers['json']) )			return $providers['json'];		elseif ( !empty($providers['xml']) )			return $providers['xml'];		else			return false;	}	/**	 * Connects to a oEmbed provider and returns the result.	 *	 * @param string $provider The URL to the oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function fetch( $provider, $url, $args = '' ) {		$args = wp_parse_args( $args, wp_embed_defaults() );		$provider = add_query_arg( 'maxwidth', $args['width'], $provider );		$provider = add_query_arg( 'maxheight', $args['height'], $provider );		$provider = add_query_arg( 'url', urlencode($url), $provider );		foreach( array( 'json', 'xml' ) as $format ) {			$result = $this->_fetch_with_format( $provider, $format );			if ( is_wp_error( $result ) && 'not-implemented' == $result->get_error_code() )				continue;			return ( $result && ! is_wp_error( $result ) ) ? $result : false;		}		return false;	}	/**	 * Fetches result from an oEmbed provider for a specific format and complete provider URL	 *	 * @since 3.0.0	 * @access private	 * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)	 * @param string $format Format to use	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function _fetch_with_format( $provider_url_with_args, $format ) {		$provider_url_with_args = add_query_arg( 'format', $format, $provider_url_with_args );		$response = wp_remote_get( $provider_url_with_args );		if ( 501 == wp_remote_retrieve_response_code( $response ) )			return new WP_Error( 'not-implemented' );		if ( ! $body = wp_remote_retrieve_body( $response ) )			return false;		$parse_method = "_parse_$format";		return $this->$parse_method( $body );	}	/**	 * Parses a json response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_json( $response_body ) {		return ( ( $data = json_decode( trim( $response_body ) ) ) && is_object( $data ) ) ? $data : false;	}	/**	 * Parses an XML response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_xml( $response_body ) {		if ( function_exists('simplexml_load_string') ) {			$errors = libxml_use_internal_errors( 'true' );			$data = simplexml_load_string( $response_body );			libxml_use_internal_errors( $errors );			if ( is_object( $data ) )				return $data;		}		return false;	}	/**	 * Converts a data object from {@link WP_oEmbed::fetch()} and returns the HTML.	 *	 * @param object $data A data object result from an oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @return bool|string False on error, otherwise the HTML needed to embed.	 */	function data2html( $data, $url ) {		if ( !is_object($data) || empty($data->type) )			return false;		switch ( $data->type ) {			case 'photo':				if ( empty($data->url) || empty($data->width) || empty($data->height) )					return false;				$title = ( !empty($data->title) ) ? $data->title : '';				$return = '<img src="' . esc_url( $data->url ) . '" alt="' . esc_attr($title) . '" width="' . esc_attr($data->width) . '" height="' . esc_attr($data->height) . '" />';				break;			case 'video':			case 'rich':				$return = ( !empty($data->html) ) ? $data->html : false;				break;			case 'link':				$return = ( !empty($data->title) ) ? '<a href="' . esc_url($url) . '">' . esc_html($data->title) . '</a>' : false;				break;			default;				$return = false;		}		// You can use this filter to add support for custom data types or to filter the result		return apply_filters( 'oembed_dataparse', $return, $data, $url );	}	/**	 * Strip any new lines from the HTML.	 *	 * @access private	 * @param string $html Existing HTML.	 * @param object $data Data object from WP_oEmbed::data2html()	 * @param string $url The original URL passed to oEmbed.	 * @return string Possibly modified $html	 */	function _strip_newlines( $html, $data, $url ) {		if ( false !== strpos( $html, "\n" ) )			$html = str_replace( array( "\r\n", "\n" ), '', $html );		return $html;	}}/** * Returns the initialized {@link WP_oEmbed} object * * @since 2.9.0 * @access private * * @see WP_oEmbed * @uses WP_oEmbed * * @return WP_oEmbed object. */function &_wp_oembed_get_object() {	static $wp_oembed;	if ( is_null($wp_oembed) )		$wp_oembed = new WP_oEmbed();	return $wp_oembed;}?>
<?php/** * WordPress Administration Importer API. * * @package WordPress * @subpackage Administration *//** * Retrieve list of importers. * * @since 2.0.0 * * @return array */function get_importers() {	global $wp_importers;	if ( is_array($wp_importers) )		uasort($wp_importers, create_function('$a, $b', 'return strcmp($a[0], $b[0]);'));	return $wp_importers;}/** * Register importer for WordPress. * * @since 2.0.0 * * @param string $id Importer tag. Used to uniquely identify importer. * @param string $name Importer name and title. * @param string $description Importer description. * @param callback $callback Callback to run. * @return WP_Error Returns WP_Error when $callback is WP_Error. */function register_importer( $id, $name, $description, $callback ) {	global $wp_importers;	if ( is_wp_error( $callback ) )		return $callback;	$wp_importers[$id] = array ( $name, $description, $callback );}/** * Cleanup importer. * * Removes attachment based on ID. * * @since 2.0.0 * * @param string $id Importer ID. */function wp_import_cleanup( $id ) {	wp_delete_attachment( $id );}/** * Handle importer uploading and add attachment. * * @since 2.0.0 * * @return array */function wp_import_handle_upload() {	if ( !isset($_FILES['import']) ) {		$file['error'] = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return $file;	}	$overrides = array( 'test_form' => false, 'test_type' => false );	$_FILES['import']['name'] .= '.txt';	$file = wp_handle_upload( $_FILES['import'], $overrides );	if ( isset( $file['error'] ) )		return $file;	$url = $file['url'];	$type = $file['type'];	$file = addslashes( $file['file'] );	$filename = basename( $file );	// Construct the object array	$object = array( 'post_title' => $filename,		'post_content' => $url,		'post_mime_type' => $type,		'guid' => $url	);	// Save the data	$id = wp_insert_attachment( $object, $file );	return array( 'file' => $file, 'id' => $id );}?>
<?php/** * MagpieRSS: a simple RSS integration tool * * A compiled file for RSS syndication * * @author Kellan Elliott-McCrea <kellan@protest.net> * @version 0.51 * @license GPL * * @package External * @subpackage MagpieRSS *//** * Deprecated. Use SimplePie (class-simplepie.php) instead. */_deprecated_file( basename( __FILE__ ), '3.0', WPINC . '/class-simplepie.php' );/* * Hook to use another RSS object instead of MagpieRSS */do_action('load_feed_engine');/** RSS feed constant. */define('RSS', 'RSS');define('ATOM', 'Atom');define('MAGPIE_USER_AGENT', 'WordPress/' . $GLOBALS['wp_version']);class MagpieRSS {	var $parser;	var $current_item	= array();	// item currently being parsed	var $items			= array();	// collection of parsed items	var $channel		= array();	// hash of channel fields	var $textinput		= array();	var $image			= array();	var $feed_type;	var $feed_version;	// parser variables	var $stack				= array(); // parser stack	var $inchannel			= false;	var $initem 			= false;	var $incontent			= false; // if in Atom <content mode="xml"> field	var $intextinput		= false;	var $inimage 			= false;	var $current_field		= '';	var $current_namespace	= false;	//var $ERROR = "";	var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');	function MagpieRSS ($source) {		# if PHP xml isn't compiled in, die		#		if ( !function_exists('xml_parser_create') )			trigger_error( "Failed to load PHP's XML Extension. http://www.php.net/manual/en/ref.xml.php" );		$parser = @xml_parser_create();		if ( !is_resource($parser) )			trigger_error( "Failed to create an instance of PHP's XML parser. http://www.php.net/manual/en/ref.xml.php");		$this->parser = $parser;		# pass in parser, and a reference to this object		# set up handlers		#		xml_set_object( $this->parser, $this );		xml_set_element_handler($this->parser,				'feed_start_element', 'feed_end_element' );		xml_set_character_data_handler( $this->parser, 'feed_cdata' );		$status = xml_parse( $this->parser, $source );		if (! $status ) {			$errorcode = xml_get_error_code( $this->parser );			if ( $errorcode != XML_ERROR_NONE ) {				$xml_error = xml_error_string( $errorcode );				$error_line = xml_get_current_line_number($this->parser);				$error_col = xml_get_current_column_number($this->parser);				$errormsg = "$xml_error at line $error_line, column $error_col";				$this->error( $errormsg );			}		}		xml_parser_free( $this->parser );		$this->normalize();	}	function feed_start_element($p, $element, &$attrs) {		$el = $element = strtolower($element);		$attrs = array_change_key_case($attrs, CASE_LOWER);		// check for a namespace, and split if found		$ns	= false;		if ( strpos( $element, ':' ) ) {			list($ns, $el) = split( ':', $element, 2);		}		if ( $ns and $ns != 'rdf' ) {			$this->current_namespace = $ns;		}		# if feed type isn't set, then this is first element of feed		# identify feed from root element		#		if (!isset($this->feed_type) ) {			if ( $el == 'rdf' ) {				$this->feed_type = RSS;				$this->feed_version = '1.0';			}			elseif ( $el == 'rss' ) {				$this->feed_type = RSS;				$this->feed_version = $attrs['version'];			}			elseif ( $el == 'feed' ) {				$this->feed_type = ATOM;				$this->feed_version = $attrs['version'];				$this->inchannel = true;			}			return;		}		if ( $el == 'channel' )		{			$this->inchannel = true;		}		elseif ($el == 'item' or $el == 'entry' )		{			$this->initem = true;			if ( isset($attrs['rdf:about']) ) {				$this->current_item['about'] = $attrs['rdf:about'];			}		}		// if we're in the default namespace of an RSS feed,		//  record textinput or image fields		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'textinput' )		{			$this->intextinput = true;		}		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'image' )		{			$this->inimage = true;		}		# handle atom content constructs		elseif ( $this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			// avoid clashing w/ RSS mod_content			if ($el == 'content' ) {				$el = 'atom_content';			}			$this->incontent = $el;		}		// if inside an Atom content construct (e.g. content or summary) field treat tags as text		elseif ($this->feed_type == ATOM and $this->incontent )		{			// if tags are inlined, then flatten			$attrs_str = join(' ',					array_map(array('MagpieRSS', 'map_attrs'),					array_keys($attrs),					array_values($attrs) ) );			$this->append_content( "<$element $attrs_str>"  );			array_unshift( $this->stack, $el );		}		// Atom support many links per containging element.		// Magpie treats link elements of type rel='alternate'		// as being equivalent to RSS's simple link element.		//		elseif ($this->feed_type == ATOM and $el == 'link' )		{			if ( isset($attrs['rel']) and $attrs['rel'] == 'alternate' )			{				$link_el = 'link';			}			else {				$link_el = 'link_' . $attrs['rel'];			}			$this->append($link_el, $attrs['href']);		}		// set stack[0] to current element		else {			array_unshift($this->stack, $el);		}	}	function feed_cdata ($p, $text) {		if ($this->feed_type == ATOM and $this->incontent)		{			$this->append_content( $text );		}		else {			$current_el = join('_', array_reverse($this->stack));			$this->append($current_el, $text);		}	}	function feed_end_element ($p, $el) {		$el = strtolower($el);		if ( $el == 'item' or $el == 'entry' )		{			$this->items[] = $this->current_item;			$this->current_item = array();			$this->initem = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'textinput' )		{			$this->intextinput = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'image' )		{			$this->inimage = false;		}		elseif ($this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			$this->incontent = false;		}		elseif ($el == 'channel' or $el == 'feed' )		{			$this->inchannel = false;		}		elseif ($this->feed_type == ATOM and $this->incontent  ) {			// balance tags properly			// note:  i don't think this is actually neccessary			if ( $this->stack[0] == $el )			{				$this->append_content("</$el>");			}			else {				$this->append_content("<$el />");			}			array_shift( $this->stack );		}		else {			array_shift( $this->stack );		}		$this->current_namespace = false;	}	function concat (&$str1, $str2="") {		if (!isset($str1) ) {			$str1="";		}		$str1 .= $str2;	}	function append_content($text) {		if ( $this->initem ) {			$this->concat( $this->current_item[ $this->incontent ], $text );		}		elseif ( $this->inchannel ) {			$this->concat( $this->channel[ $this->incontent ], $text );		}	}	// smart append - field and namespace aware	function append($el, $text) {		if (!$el) {			return;		}		if ( $this->current_namespace )		{			if ( $this->initem ) {				$this->concat(					$this->current_item[ $this->current_namespace ][ $el ], $text);			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $this->current_namespace][ $el ], $text );			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $this->current_namespace][ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $this->current_namespace ][ $el ], $text );			}		}		else {			if ( $this->initem ) {				$this->concat(					$this->current_item[ $el ], $text);			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $el ], $text );			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $el ], $text );			}		}	}	function normalize () {		// if atom populate rss fields		if ( $this->is_atom() ) {			$this->channel['descripton'] = $this->channel['tagline'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['summary']) )					$item['description'] = $item['summary'];				if ( isset($item['atom_content']))					$item['content']['encoded'] = $item['atom_content'];				$this->items[$i] = $item;			}		}		elseif ( $this->is_rss() ) {			$this->channel['tagline'] = $this->channel['description'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['description']))					$item['summary'] = $item['description'];				if ( isset($item['content']['encoded'] ) )					$item['atom_content'] = $item['content']['encoded'];				$this->items[$i] = $item;			}		}	}	function is_rss () {		if ( $this->feed_type == RSS ) {			return $this->feed_version;		}		else {			return false;		}	}	function is_atom() {		if ( $this->feed_type == ATOM ) {			return $this->feed_version;		}		else {			return false;		}	}	function map_attrs($k, $v) {		return "$k=\"$v\"";	}	function error( $errormsg, $lvl = E_USER_WARNING ) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		} else {			error_log( $errormsg, 0);		}	}}if ( !function_exists('fetch_rss') ) :/** * Build Magpie object based on RSS from URL. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve feed * @return bool|MagpieRSS false on failure or MagpieRSS object on success. */function fetch_rss ($url) {	// initialize constants	init();	if ( !isset($url) ) {		// error("fetch_rss called without a url");		return false;	}	// if cache is disabled	if ( !MAGPIE_CACHE_ON ) {		// fetch file, and parse it		$resp = _fetch_remote_file( $url );		if ( is_success( $resp->status ) ) {			return _response_to_rss( $resp );		}		else {			// error("Failed to fetch $url and cache is off");			return false;		}	}	// else cache is ON	else {		// Flow		// 1. check cache		// 2. if there is a hit, make sure its fresh		// 3. if cached obj fails freshness check, fetch remote		// 4. if remote fails, return stale object, or error		$cache = new RSSCache( MAGPIE_CACHE_DIR, MAGPIE_CACHE_AGE );		if (MAGPIE_DEBUG and $cache->ERROR) {			debug($cache->ERROR, E_USER_WARNING);		}		$cache_status 	 = 0;		// response of check_cache		$request_headers = array(); // HTTP headers to send with fetch		$rss 			 = 0;		// parsed RSS object		$errormsg		 = 0;		// errors, if any		if (!$cache->ERROR) {			// return cache HIT, MISS, or STALE			$cache_status = $cache->check_cache( $url );		}		// if object cached, and cache is fresh, return cached obj		if ( $cache_status == 'HIT' ) {			$rss = $cache->get( $url );			if ( isset($rss) and $rss ) {				$rss->from_cache = 1;				if ( MAGPIE_DEBUG > 1) {				debug("MagpieRSS: Cache HIT", E_USER_NOTICE);			}				return $rss;			}		}		// else attempt a conditional get		// set up headers		if ( $cache_status == 'STALE' ) {			$rss = $cache->get( $url );			if ( isset($rss->etag) and $rss->last_modified ) {				$request_headers['If-None-Match'] = $rss->etag;				$request_headers['If-Last-Modified'] = $rss->last_modified;			}		}		$resp = _fetch_remote_file( $url, $request_headers );		if (isset($resp) and $resp) {			if ($resp->status == '304' ) {				// we have the most current copy				if ( MAGPIE_DEBUG > 1) {					debug("Got 304 for $url");				}				// reset cache on 304 (at minutillo insistent prodding)				$cache->set($url, $rss);				return $rss;			}			elseif ( is_success( $resp->status ) ) {				$rss = _response_to_rss( $resp );				if ( $rss ) {					if (MAGPIE_DEBUG > 1) {						debug("Fetch successful");					}					// add object to cache					$cache->set( $url, $rss );					return $rss;				}			}			else {				$errormsg = "Failed to fetch $url. ";				if ( $resp->error ) {					# compensate for Snoopy's annoying habbit to tacking					# on '\n'					$http_error = substr($resp->error, 0, -2);					$errormsg .= "(HTTP Error: $http_error)";				}				else {					$errormsg .=  "(HTTP Response: " . $resp->response_code .')';				}			}		}		else {			$errormsg = "Unable to retrieve RSS file for unknown reasons.";		}		// else fetch failed		// attempt to return cached object		if ($rss) {			if ( MAGPIE_DEBUG ) {				debug("Returning STALE object for $url");			}			return $rss;		}		// else we totally failed		// error( $errormsg );		return false;	} // end if ( !MAGPIE_CACHE_ON ) {} // end fetch_rss()endif;/** * Retrieve URL headers and content using WP HTTP Request API. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve * @param array $headers Optional. Headers to send to the URL. * @return Snoopy style response */function _fetch_remote_file($url, $headers = "" ) {	$resp = wp_remote_request($url, array('headers' => $headers, 'timeout' => MAGPIE_FETCH_TIME_OUT));	if ( is_wp_error($resp) ) {		$error = array_shift($resp->errors);		$resp = new stdClass;		$resp->status = 500;		$resp->response_code = 500;		$resp->error = $error[0] . "\n"; //\n = Snoopy compatibility		return $resp;	}	// Snoopy returns headers unprocessed.	// Also note, WP_HTTP lowercases all keys, Snoopy did not.	$return_headers = array();	foreach ( $resp['headers'] as $key => $value ) {		if ( !is_array($value) ) {			$return_headers[] = "$key: $value";		} else {			foreach ( $value as $v )				$return_headers[] = "$key: $v";		}	}	$response = new stdClass;	$response->status = $resp['response']['code'];	$response->response_code = $resp['response']['code'];	$response->headers = $return_headers;	$response->results = $resp['body'];	return $response;}/** * Retrieve * * @since unknown * @package External * @subpackage MagpieRSS * * @param unknown_type $resp * @return unknown */function _response_to_rss ($resp) {	$rss = new MagpieRSS( $resp->results );	// if RSS parsed successfully	if ( $rss && (!isset($rss->ERROR) || !$rss->ERROR) ) {		// find Etag, and Last-Modified		foreach( (array) $resp->headers as $h) {			// 2003-03-02 - Nicola Asuni (www.tecnick.com) - fixed bug "Undefined offset: 1"			if (strpos($h, ": ")) {				list($field, $val) = explode(": ", $h, 2);			}			else {				$field = $h;				$val = "";			}			if ( $field == 'etag' ) {				$rss->etag = $val;			}			if ( $field == 'last-modified' ) {				$rss->last_modified = $val;			}		}		return $rss;	} // else construct error message	else {		$errormsg = "Failed to parse RSS file.";		if ($rss) {			$errormsg .= " (" . $rss->ERROR . ")";		}		// error($errormsg);		return false;	} // end if ($rss and !$rss->error)}/** * Set up constants with default values, unless user overrides. * * @since unknown * @package External * @subpackage MagpieRSS */function init () {	if ( defined('MAGPIE_INITALIZED') ) {		return;	}	else {		define('MAGPIE_INITALIZED', 1);	}	if ( !defined('MAGPIE_CACHE_ON') ) {		define('MAGPIE_CACHE_ON', 1);	}	if ( !defined('MAGPIE_CACHE_DIR') ) {		define('MAGPIE_CACHE_DIR', './cache');	}	if ( !defined('MAGPIE_CACHE_AGE') ) {		define('MAGPIE_CACHE_AGE', 60*60); // one hour	}	if ( !defined('MAGPIE_CACHE_FRESH_ONLY') ) {		define('MAGPIE_CACHE_FRESH_ONLY', 0);	}		if ( !defined('MAGPIE_DEBUG') ) {		define('MAGPIE_DEBUG', 0);	}	if ( !defined('MAGPIE_USER_AGENT') ) {		$ua = 'WordPress/' . $GLOBALS['wp_version'];		if ( MAGPIE_CACHE_ON ) {			$ua = $ua . ')';		}		else {			$ua = $ua . '; No cache)';		}		define('MAGPIE_USER_AGENT', $ua);	}	if ( !defined('MAGPIE_FETCH_TIME_OUT') ) {		define('MAGPIE_FETCH_TIME_OUT', 2);	// 2 second timeout	}	// use gzip encoding to fetch rss files if supported?	if ( !defined('MAGPIE_USE_GZIP') ) {		define('MAGPIE_USE_GZIP', true);	}}function is_info ($sc) {	return $sc >= 100 && $sc < 200;}function is_success ($sc) {	return $sc >= 200 && $sc < 300;}function is_redirect ($sc) {	return $sc >= 300 && $sc < 400;}function is_error ($sc) {	return $sc >= 400 && $sc < 600;}function is_client_error ($sc) {	return $sc >= 400 && $sc < 500;}function is_server_error ($sc) {	return $sc >= 500 && $sc < 600;}class RSSCache {	var $BASE_CACHE;	// where the cache files are stored	var $MAX_AGE	= 43200;  		// when are files stale, default twelve hours	var $ERROR 		= '';			// accumulate error messages	function RSSCache ($base='', $age='') {		$this->BASE_CACHE = WP_CONTENT_DIR . '/cache';		if ( $base ) {			$this->BASE_CACHE = $base;		}		if ( $age ) {			$this->MAX_AGE = $age;		}	}/*=======================================================================*\	Function:	set	Purpose:	add an item to the cache, keyed on url	Input:		url from wich the rss file was fetched	Output:		true on sucess\*=======================================================================*/	function set ($url, $rss) {		$cache_option = 'rss_' . $this->file_name( $url );		set_transient($cache_option, $rss, $this->MAX_AGE);		return $cache_option;	}/*=======================================================================*\	Function:	get	Purpose:	fetch an item from the cache	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function get ($url) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( ! $rss = get_transient( $cache_option ) ) {			$this->debug(				"Cache doesn't contain: $url (cache option: $cache_option)"			);			return 0;		}		return $rss;	}/*=======================================================================*\	Function:	check_cache	Purpose:	check a url for membership in the cache				and whether the object is older then MAX_AGE (ie. STALE)	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function check_cache ( $url ) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( get_transient($cache_option) ) {			// object exists and is current				return 'HIT';		} else {			// object does not exist			return 'MISS';		}	}/*=======================================================================*\	Function:	serialize\*=======================================================================*/	function serialize ( $rss ) {		return serialize( $rss );	}/*=======================================================================*\	Function:	unserialize\*=======================================================================*/	function unserialize ( $data ) {		return unserialize( $data );	}/*=======================================================================*\	Function:	file_name	Purpose:	map url to location in cache	Input:		url from wich the rss file was fetched	Output:		a file name\*=======================================================================*/	function file_name ($url) {		return md5( $url );	}/*=======================================================================*\	Function:	error	Purpose:	register error\*=======================================================================*/	function error ($errormsg, $lvl=E_USER_WARNING) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		$this->ERROR = $errormsg;		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		}		else {			error_log( $errormsg, 0);		}	}			function debug ($debugmsg, $lvl=E_USER_NOTICE) {		if ( MAGPIE_DEBUG ) {			$this->error("MagpieRSS [debug] $debugmsg", $lvl);		}	}}if ( !function_exists('parse_w3cdtf') ) :function parse_w3cdtf ( $date_str ) {	# regex to match wc3dtf	$pat = "/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/";	if ( preg_match( $pat, $date_str, $match ) ) {		list( $year, $month, $day, $hours, $minutes, $seconds) =			array( $match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);		# calc epoch for current date assuming GMT		$epoch = gmmktime( $hours, $minutes, $seconds, $month, $day, $year);		$offset = 0;		if ( $match[11] == 'Z' ) {			# zulu time, aka GMT		}		else {			list( $tz_mod, $tz_hour, $tz_min ) =				array( $match[8], $match[9], $match[10]);			# zero out the variables			if ( ! $tz_hour ) { $tz_hour = 0; }			if ( ! $tz_min ) { $tz_min = 0; }			$offset_secs = (($tz_hour*60)+$tz_min)*60;			# is timezone ahead of GMT?  then subtract offset			#			if ( $tz_mod == '+' ) {				$offset_secs = $offset_secs * -1;			}			$offset = $offset_secs;		}		$epoch = $epoch + $offset;		return $epoch;	}	else {		return -1;	}}endif;if ( !function_exists('wp_rss') ) :/** * Display all RSS items in a HTML ordered list. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. */function wp_rss( $url, $num_items = -1 ) {	if ( $rss = fetch_rss( $url ) ) {		echo '<ul>';		if ( $num_items !== -1 ) {			$rss->items = array_slice( $rss->items, 0, $num_items );		}		foreach ( (array) $rss->items as $item ) {			printf(				'<li><a href="%1$s" title="%2$s">%3$s</a></li>',				esc_url( $item['link'] ),				esc_attr( strip_tags( $item['description'] ) ),				htmlentities( $item['title'] )			);		}		echo '</ul>';	} else {		_e( 'An error has occurred, which probably means the feed is down. Try again later.' );	}}endif;if ( !function_exists('get_rss') ) :/** * Display RSS items in HTML list items. * * You have to specify which HTML list you want, either ordered or unordered * before using the function. You also have to specify how many items you wish * to display. You can't display all of them like you can with wp_rss() * function. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. * @return bool False on failure. */function get_rss ($url, $num_items = 5) { // Like get posts, but for RSS	$rss = fetch_rss($url);	if ( $rss ) {		$rss->items = array_slice($rss->items, 0, $num_items);		foreach ( (array) $rss->items as $item ) {			echo "<li>\n";			echo "<a href='$item[link]' title='$item[description]'>";			echo htmlentities($item['title']);			echo "</a><br />\n";			echo "</li>\n";		}	} else {		return false;	}}endif;?>
<?php/** * The template for displaying Search Results pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) : ?>				<h1 class="page-title"><?php printf( __( 'Search Results for: %s', 'twentyten' ), '<span>' . get_search_query() . '</span>' ); ?></h1>				<?php				/* Run the loop for the search to output the results.				 * If you want to overload this in a child theme then include a file				 * called loop-search.php and that will be used instead.				 */				 get_template_part( 'loop', 'search' );				?><?php else : ?>				<div id="post-0" class="post no-results not-found">					<h2 class="entry-title"><?php _e( 'Nothing Found', 'twentyten' ); ?></h2>					<div class="entry-content">						<p><?php _e( 'Sorry, but nothing matched your search criteria. Please try again with some different keywords.', 'twentyten' ); ?></p>						<?php get_search_form(); ?>					</div><!-- .entry-content -->				</div><!-- #post-0 --><?php endif; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Front to the WordPress application. This file doesn't do anything, but loads * wp-blog-header.php which does and tells WordPress to load the theme. * * @package WordPress *//** * Tells WordPress to load the WordPress theme and output it. * * @var bool */define('WP_USE_THEMES', true);/** Loads the WordPress Environment and Template */require('./wp-blog-header.php');?>
<?php/** * Multisite delete site panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );// @todo Create a delete blog cap.if ( ! current_user_can( 'manage_options' ) )	wp_die(__( 'You do not have sufficient permissions to delete this site.'));if ( isset( $_GET['h'] ) && $_GET['h'] != '' && get_option( 'delete_blog_hash' ) != false ) {	if ( get_option( 'delete_blog_hash' ) == $_GET['h'] ) {		wpmu_delete_blog( $wpdb->blogid );		wp_die( sprintf( __( 'Thank you for using %s, your site has been deleted. Happy trails to you until we meet again.' ), $current_site->site_name ) );	} else {		wp_die( __( "I'm sorry, the link you clicked is stale. Please select another option." ) );	}}$title = __( 'Delete Site' );$parent_file = 'tools.php';require_once( './admin-header.php' );echo '<div class="wrap">';screen_icon();echo '<h2>' . esc_html( $title ) . '</h2>';if ( isset( $_POST['action'] ) && $_POST['action'] == 'deleteblog' && isset( $_POST['confirmdelete'] ) && $_POST['confirmdelete'] == '1' ) {	$hash = wp_generate_password( 20, false );	update_option( 'delete_blog_hash', $hash );	$url_delete = esc_url( admin_url( 'ms-delete-site.php?h=' . $hash ) );	$content = apply_filters( 'delete_site_email_content', __( "Dear User,You recently clicked the 'Delete Site' link on your site and filled in aform on that page.If you really want to delete your site, click the link below. You will notbe asked to confirm again so only click this link if you are absolutely certain:###URL_DELETE###If you delete your site, please consider opening a new site heresome time in the future! (But remember your current site and usernameare gone forever.)Thanks for using the site,Webmaster###SITE_NAME###" ) );	$content = str_replace( '###URL_DELETE###', $url_delete, $content );	$content = str_replace( '###SITE_NAME###', $current_site->site_name, $content );	wp_mail( get_option( 'admin_email' ), "[ " . get_option( 'blogname' ) . " ] ".__( 'Delete My Site' ), $content );	?>	<p><?php _e( 'Thank you. Please check your email for a link to confirm your action. Your site will not be deleted until this link is clicked. ') ?></p><?php } else {	?>	<p><?php printf( __( 'If you do not want to use your %s site any more, you can delete it using the form below. When you click <strong>Delete My Site Permanently</strong> you will be sent an email with a link in it. Click on this link to delete your site.'), $current_site->site_name); ?></p>	<p><?php _e( 'Remember, once deleted your site cannot be restored.' ) ?></p>	<form method="post" name="deletedirect">		<input type="hidden" name="action" value="deleteblog" />		<p><input id="confirmdelete" type="checkbox" name="confirmdelete" value="1" /> <label for="confirmdelete"><strong><?php printf( __( "I'm sure I want to permanently disable my site, and I am aware I can never get it back or use %s again." ), is_subdomain_install() ? $current_blog->domain : $current_blog->domain . $current_blog->path ); ?></strong></label></p>		<p class="submit"><input type="submit" value="<?php esc_attr_e( 'Delete My Site Permanently' ) ?>" /></p>	</form>	<?php}echo '</div>';include( './admin-footer.php' );?>
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 2.0.4                                                          ||   Contact: via sourceforge.net support pages (also www.codeworxtech.com)  ||      Info: http://phpmailer.sourceforge.net                               ||   Support: http://sourceforge.net/projects/phpmailer/                     || ------------------------------------------------------------------------- ||    Author: Andy Prevost (project admininistrator)                         ||    Author: Brent R. Matzelle (original founder)                           || Copyright (c) 2004-2007, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         || ------------------------------------------------------------------------- || We offer a number of paid services (www.codeworxtech.com):                || - Web Hosting on highly optimized fast and secure servers                 || - Technology Consulting                                                   || - Oursourcing (highly qualified programmers and graphic designers)        |'---------------------------------------------------------------------------' *//** * SMTP is rfc 821 compliant and implements all the rfc 821 SMTP * commands except TURN which will always return a not implemented * error. SMTP also provides some utility methods for sending mail * to an SMTP server. * @package PHPMailer * @author Chris Ryan */class SMTP{  /**   *  SMTP server port   *  @var int   */  var $SMTP_PORT = 25;  /**   *  SMTP reply line ending   *  @var string   */  var $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  var $do_debug;       # the level of debug to perform  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  var $do_verp = false;  /**#@+   * @access private   */  var $smtp_conn;      # the socket to the server  var $error;          # error if any on the last call  var $helo_rply;      # the reply the server sent to us for HELO  /**#@-*/  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return void   */  function SMTP() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /*************************************************************   *                    CONNECTION FUNCTIONS                  *   ***********************************************************/  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @return bool   */  function Connect($host,$port=0,$tval=30) {    # set the error val to null so there is no confusion    $this->error = null;    # make sure we are __not__ connected    if($this->connected()) {      # ok we are connected! what should we do?      # for now we will just give an error saying we      # are already connected      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    #connect to the smtp server    $this->smtp_conn = fsockopen($host,    # the host of the server                                 $port,    # the port to use                                 $errno,   # error number if any                                 $errstr,  # error message if any                                 $tval);   # give up after ? secs    # verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": $errstr ($errno)" . $this->CRLF;      }      return false;    }    # sometimes the SMTP server takes a little longer to respond    # so we will give it a longer timeout for the first read    // Windows still does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN")     socket_set_timeout($this->smtp_conn, $tval, 0);    # get any announcement stuff    $announce = $this->get_lines();    # set the timeout  of any socket functions at 1/10 of a second    //if(function_exists("socket_set_timeout"))    //   socket_set_timeout($this->smtp_conn, 0, 100000);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $announce;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @return bool   */  function Authenticate($username, $password) {    // Start authentication    fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "AUTH not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded username    fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "Username not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded password    fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 235) {      $this->error =        array("error" => "Password not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access private   * @return bool   */  function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        # hmm this is an odd situation... the socket is        # valid but we are not connected anymore        if($this->do_debug >= 1) {            echo "SMTP -> NOTICE:" . $this->CRLF .                 "EOF caught while checking if connected";        }        $this->Close();        return false;      }      return true; # everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  function Close() {    $this->error = null; # so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      # close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /***************************************************************   *                        SMTP COMMANDS                       *   *************************************************************/  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being separated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Data($msg_data) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # the server is ready to accept data!    # according to rfc 821 we should not send more than 1000    # including the CRLF    # characters on a single line so we will break the data up    # into lines by \r and/or \n then if needed we will break    # each of those into smaller lines to fit within the limit.    # in addition we will be looking for lines that start with    # a period '.' and append and additional period '.' to that    # line. NOTE: this does not count towards are limit.    # normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    # we need to find a good way to determine is headers are    # in the msg_data or if it is a straight msg body    # currently I am assuming rfc 822 definitions of msg headers    # and if the first field of the first line (':' sperated)    # does not contain a space then it _should_ be a header    # and we can process all lines before a blank "" line as    # headers.    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; # used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      # ok we need to break this line up into several      # smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        # Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;        }        $lines_out[] = substr($line,0,$pos);        $line = substr($line,$pos + 1);        # if we are processing headers we need to        # add a LWSP-char to the front of the new line        # rfc 822 on long msg headers        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      # now send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    # ok all the message data has been sent so lets get this    # over with aleady    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Expand takes the name and asks the server to list all the   * people who are members of the _list_. Expand will return   * back and array of the result or false if an error occurs.   * Each value in the array returned has the format of:   *     [ <full-name> <sp> ] <path>   * The definition of <path> is defined in rfc 821   *   * Implements rfc 821: EXPN <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 550   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string array   */  function Expand($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Expand() without being connected");      return false;    }    fputs($this->smtp_conn,"EXPN " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "EXPN not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # parse the reply and place in our array to return to user    $entries = explode($this->CRLF,$rply);    while(list(,$l) = @each($entries)) {      $list[] = substr($l,4);    }    return $list;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @return bool   */  function Hello($host="") {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    # if a hostname for the HELO was not specified determine    # a suitable one to send    if(empty($host)) {      # we need to determine some sort of appopiate default      # to send to the server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host))    {      if(!$this->SendHello("HELO", $host))          return false;    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @return bool   */  function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER: " . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Gets help information on the keyword specified. If the keyword   * is not specified then returns generic help, ussually contianing   * A list of keywords that help is available on. This function   * returns the results back to the user. It is up to the user to   * handle the returned data. If an error occurs then false is   * returned with $this->error set appropiately.   *   * Implements rfc 821: HELP [ <SP> <string> ] <CRLF>   *   * SMTP CODE SUCCESS: 211,214   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string   */  function Help($keyword="") {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Help() without being connected");      return false;    }    $extra = "";    if(!empty($keyword)) {      $extra = " " . $keyword;    }    fputs($this->smtp_conn,"HELP" . $extra . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 211 && $code != 214) {      $this->error =        array("error" => "HELP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @return bool   */  function Mail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? "XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the command NOOP to the SMTP server.   *   * Implements from rfc 821: NOOP <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 421   * @access public   * @return bool   */  function Noop() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Noop() without being connected");      return false;    }    fputs($this->smtp_conn,"NOOP" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "NOOP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @return bool   */  function Quit($close_on_error=true) {    $this->error = null; # so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    # send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    # get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $byemsg;    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      # use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $e["error"] . ": " .                 $byemsg . $this->CRLF;      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Recipient($to) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  function Reset() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in.   *   * Implements rfc 821: SEND <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function Send($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Send() without being connected");      return false;    }    fputs($this->smtp_conn,"SEND FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SEND not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendAndMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in or mail it to them if they are not.   *   * Implements rfc 821: SOML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendOrMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendOrMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SOML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SOML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF;    }    return false;  }  /**   * Verifies that the name is recognized by the server.   * Returns false if the name could not be verified otherwise   * the response from the server is returned.   *   * Implements rfc 821: VRFY <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,553   * SMTP CODE ERROR  : 500,501,502,421   * @access public   * @return int   */  function Verify($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Verify() without being connected");      return false;    }    fputs($this->smtp_conn,"VRFY " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "VRFY failed on name '$name'",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /*******************************************************************   *                       INTERNAL FUNCTIONS                       *   ******************************************************************/  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  function get_lines() {    $data = "";    while($str = @fgets($this->smtp_conn,515)) {      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data was \"$data\"" .                 $this->CRLF;        echo "SMTP -> get_lines(): \$str is \"$str\"" .                 $this->CRLF;      }      $data .= $str;      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;      }      # if the 4th character is a space then we are done reading      # so just break the loop      if(substr($str,3,1) == " ") { break; }    }    return $data;  }} ?>
<?php/** * The custom background script. * * @package WordPress * @subpackage Administration *//** * The custom background class. * * @since 3.0.0 * @package WordPress * @subpackage Administration */class Custom_Background {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since unknown	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 3.0.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Background	 */	function Custom_Background($admin_header_callback = '', $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Background admin page.	 *	 * @since 3.0.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Background'), __('Background'), 'edit_theme_options', 'custom-background', array(&$this, 'admin_page'));		add_action("load-$page", array(&$this, 'admin_load'));		add_action("load-$page", array(&$this, 'take_action'), 49);		add_action("load-$page", array(&$this, 'handle_upload'), 49);		if ( $this->admin_header_callback )			add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Set up the enqueue for the CSS & JavaScript files.	 *	 * @since 3.0.0	 */	function admin_load() {		add_contextual_help( $this->page, '<p>' . __( 'You can customize the look of your site without touching any of your theme&#8217;s code by using a custom background. Your background can be an image or a color.' ) . '</p>' .		'<p>' . __( 'To use a background image, simply upload it, then choose your display options below. You can display a single instance of your image, or tile it to fill the screen. You can have your background fixed in place, so your site content moves on top of it, or you can have it scroll with your site.' ) . '</p>' .		'<p>' . __( 'You can also choose a background color. If you know the hexadecimal code for the color you want, enter it in the Color field. If not, click on the Select a Color link, and a color picker will allow you to choose the exact shade you want.' ) . '</p>' .		'<p>' . __( 'Don&#8217;t forget to click on the Save Changes button when you are finished.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Background_SubPanel" target="_blank">Documentation on Custom Background</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );		wp_enqueue_script('custom-background');		wp_enqueue_style('farbtastic');	}	/**	 * Execute custom background modification.	 *	 * @since 3.0.0	 */	function take_action() {		if ( empty($_POST) )			return;		if ( isset($_POST['reset-background']) ) {			check_admin_referer('custom-background-reset', '_wpnonce-custom-background-reset');			remove_theme_mod('background_image');			remove_theme_mod('background_image_thumb');			$this->updated = true;			return;		}		if ( isset($_POST['remove-background']) ) {			// @TODO: Uploaded files are not removed here.			check_admin_referer('custom-background-remove', '_wpnonce-custom-background-remove');			set_theme_mod('background_image', '');			set_theme_mod('background_image_thumb', '');			$this->updated = true;			return;		}		if ( isset($_POST['background-repeat']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-repeat'], array('repeat', 'no-repeat', 'repeat-x', 'repeat-y')) )				$repeat = $_POST['background-repeat'];			else				$repeat = 'repeat';			set_theme_mod('background_repeat', $repeat);		}		if ( isset($_POST['background-position-x']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-position-x'], array('center', 'right', 'left')) )				$position = $_POST['background-position-x'];			else				$position = 'left';			set_theme_mod('background_position_x', $position);		}		if ( isset($_POST['background-attachment']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-attachment'], array('fixed', 'scroll')) )				$attachment = $_POST['background-attachment'];			else				$attachment = 'fixed';			set_theme_mod('background_attachment', $attachment);		}		if ( isset($_POST['background-color']) ) {			check_admin_referer('custom-background');			$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['background-color']);			if ( strlen($color) == 6 || strlen($color) == 3 )				set_theme_mod('background_color', $color);			else				set_theme_mod('background_color', '');		}		$this->updated = true;	}	/**	 * Display the custom background page.	 *	 * @since 3.0.0	 */	function admin_page() {?><div class="wrap" id="custom-background"><?php screen_icon(); ?><h2><?php _e('Custom Background'); ?></h2><?php if ( !empty($this->updated) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Background updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php }	if ( $this->admin_image_div_callback ) {		call_user_func($this->admin_image_div_callback);	} else {?><h3><?php _e('Background Image'); ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e('Preview'); ?></th><td><?php$background_styles = '';if ( $bgcolor = get_background_color() )	$background_styles .= 'background-color: #' . $bgcolor . ';';if ( get_background_image() ) {	// background-image URL must be single quote, see below	$background_styles .= ' background-image: url(\'' . get_theme_mod('background_image_thumb', '') . '\');'		. ' background-repeat: ' . get_theme_mod('background_repeat', 'repeat') . ';'		. ' background-position: top ' . get_theme_mod('background_position_x', 'left');}?><div id="custom-background-image" style="<?php echo $background_styles; ?>"><?php // must be double quote, see above ?><?php if ( get_background_image() ) { ?><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><br /><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><?php } ?></div><?php } ?></td></tr><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e('Remove Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-remove', '_wpnonce-custom-background-remove'); ?><input type="submit" class="button" name="remove-background" value="<?php esc_attr_e('Remove Background Image'); ?>" /><br/><?php _e('This will remove the background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><?php if ( defined( 'BACKGROUND_IMAGE' ) ) : // Show only if a default background image exists ?><tr valign="top"><th scope="row"><?php _e('Restore Original Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-reset', '_wpnonce-custom-background-reset'); ?><input type="submit" class="button" name="reset-background" value="<?php esc_attr_e('Restore Original Image'); ?>" /><br/><?php _e('This will restore the original background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Upload Image'); ?></th><td><form enctype="multipart/form-data" id="upload-form" method="post" action=""><label for="upload"><?php _e('Choose an image from your computer:'); ?></label><br /><input type="file" id="upload" name="import" /><input type="hidden" name="action" value="save" /><?php wp_nonce_field('custom-background-upload', '_wpnonce-custom-background-upload') ?><input type="submit" class="button" value="<?php esc_attr_e('Upload'); ?>" /></p></form></td></tr></tbody></table><h3><?php _e('Display Options') ?></h3><form method="post" action=""><table class="form-table"><tbody><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Position' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Position' ); ?></span></legend><label><input name="background-position-x" type="radio" value="left"<?php checked('left', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Left') ?></label><label><input name="background-position-x" type="radio" value="center"<?php checked('center', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Center') ?></label><label><input name="background-position-x" type="radio" value="right"<?php checked('right', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Right') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Repeat' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Repeat' ); ?></span></legend><label><input type="radio" name="background-repeat" value="no-repeat"<?php checked('no-repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('No Repeat'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat"<?php checked('repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-x"<?php checked('repeat-x', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Horizontally'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-y"<?php checked('repeat-y', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Vertically'); ?></option></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Attachment' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Attachment' ); ?></span></legend><label><input name="background-attachment" type="radio" value="scroll" <?php checked('scroll', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Scroll') ?></label><label><input name="background-attachment" type="radio" value="fixed" <?php checked('fixed', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Fixed') ?></label></fieldset></td></tr><?php endif; // get_background_image() ?><tr valign="top"><th scope="row"><?php _e( 'Color' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Color' ); ?></span></legend><input type="text" name="background-color" id="background-color" value="#<?php echo esc_attr(get_background_color()) ?>" /><a class="hide-if-no-js" href="#" id="pickcolor"><?php _e('Select a Color'); ?></a><div id="colorPickerDiv" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></fieldset></td></tr></tbody></table><?php wp_nonce_field('custom-background'); ?><p class="submit"><input type="submit" class="button-primary" name="save-background-options" value="<?php esc_attr_e('Save Changes'); ?>" /></p></form></div><?php	}	/**	 * Handle a Image upload for the background image.	 *	 * @since 3.0.0	 */	function handle_upload() {		if ( empty($_FILES) )			return;		check_admin_referer('custom-background-upload', '_wpnonce-custom-background-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'] );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(			'post_title' => $filename,			'post_content' => $url,			'post_mime_type' => $type,			'guid' => $url		);		// Save the data		$id = wp_insert_attachment($object, $file);		// Add the meta-data		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		set_theme_mod('background_image', esc_url($url));		$thumbnail = wp_get_attachment_image_src( $id, 'thumbnail' );		set_theme_mod('background_image_thumb', esc_url( $thumbnail[0] ) );		do_action('wp_create_file_in_uploads', $file, $id); // For replication		$this->updated = true;	}}?>
<?php/** * Edit posts rows table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');?><table class="widefat <?php echo $post_type_object->hierarchical ? 'page' : 'post'; ?> fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers( $current_screen ); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody><?phpif ( $post_type_object->hierarchical )	page_rows($posts, $pagenum, $per_page);else	post_rows();?>	</tbody></table>
<?php// Silence is golden.?>
<?php/** * WordPress Post Thumbnail Template Functions. * * Support for post thumbnails * Themes function.php must call add_theme_support( 'post-thumbnails' ) to use these. * * @package WordPress * @subpackage Template *//** * Check if post has an image attached. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post has an image attached. */function has_post_thumbnail( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return !! get_post_thumbnail_id( $post_id );}/** * Retrieve Post Thumbnail ID. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return int */function get_post_thumbnail_id( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return get_post_meta( $post_id, '_thumbnail_id', true );}/** * Display Post Thumbnail. * * @since 2.9.0 * * @param int $size Optional. Image size.  Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );. * @param string|array $attr Optional. Query string or array of attributes. */function the_post_thumbnail( $size = 'post-thumbnail', $attr = '' ) {	echo get_the_post_thumbnail( NULL, $size, $attr );}/** * Retrieve Post Thumbnail. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @param string $size Optional. Image size.  Defaults to 'thumbnail'. * @param string|array $attr Optional. Query string or array of attributes.  */function get_the_post_thumbnail( $post_id = NULL, $size = 'post-thumbnail', $attr = '' ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	$post_thumbnail_id = get_post_thumbnail_id( $post_id );	$size = apply_filters( 'post_thumbnail_size', $size );	if ( $post_thumbnail_id ) {		do_action( 'begin_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size ); // for "Just In Time" filtering of all of wp_get_attachment_image()'s filters		$html = wp_get_attachment_image( $post_thumbnail_id, $size, false, $attr );		do_action( 'end_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size );	} else {		$html = '';	}	return apply_filters( 'post_thumbnail_html', $html, $post_id, $post_thumbnail_id, $size, $attr );}?>
<?php/** * Multisite administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Admin' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Until WordPress 3.0, running multiple sites required using WordPress MU instead of regular WordPress. In version 3.0, these applications have merged. If you are a former MU user, you should be aware of the following changes:') . '</p>' .	'<ul><li>' . __('Site Admin is now Super Admin (we highly encourage you to get yourself a cape!).') . '</li>' .	'<li>' . __('Blogs are now called Sites; Site is now called Network.') . '</li></ul>' .	'<p>' . __('This screen provides the network administrator with links to the screens for Sites and Users to either create a new site or user, or to search existing users and sites. Those screens are also accessible through the left-hand navigation in the Super Admin section.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Super_Admin_Menu" target="_blank">Documentation on Super Admin Menu</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );$c_users = get_user_count();$c_blogs = get_blog_count();$user_text = sprintf( _n( '%s user', '%s users', $c_users ), number_format_i18n( $c_users ) );$blog_text = sprintf( _n( '%s site', '%s sites', $c_blogs ), number_format_i18n( $c_blogs ) );$sentence = sprintf( __( 'You have %1$s and %2$s.' ), $blog_text, $user_text );?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<ul class="subsubsub">	<li><a href="ms-sites.php#form-add-site"><?php _e( 'Create a New Site' ); ?></a> |</li>	<li><a href="ms-users.php#form-add-user"><?php _e( 'Create a New User' ); ?></a></li>	</ul>	<br class="clear" />	<p class="youhave"><?php echo $sentence; ?></p>	<?php do_action( 'wpmuadminresult', '' ); ?>	<form name="searchform" action="ms-users.php" method="get">		<p>			<input type="hidden" name="action" value="users" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="submit" value="<?php esc_attr_e( 'Search Users' ); ?>" />		</p>	</form>	<form name="searchform" action="ms-sites.php" method="get">		<p>			<input type="hidden" name="action" value="blogs" />			<input type="hidden" name="searchaction" value="name" />			<input type="text" name="s" value="" size="17" />			<input class="button" type="submit" name="blog_name" value="<?php esc_attr_e( 'Search Sites' ); ?>" />		</p>	</form>	<?php do_action( 'mu_rightnow_end' ); ?>	<?php do_action( 'mu_activity_box_end' ); ?></div><?php include( './admin-footer.php' ); ?>
<?php/** * BackPress Styles enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress Styles enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r74 */class WP_Styles extends WP_Dependencies {	var $base_url;	var $content_url;	var $default_version;	var $text_direction = 'ltr';	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_styles', array(&$this) );	}	function do_item( $handle ) {		if ( !parent::do_item($handle) )			return false;		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		if ( $this->do_concat ) {			if ( $this->in_default_dir($this->registered[$handle]->src) && !isset($this->registered[$handle]->extra['conditional']) && !isset($this->registered[$handle]->extra['alt']) ) {				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			}		}		if ( isset($this->registered[$handle]->args) )			$media = esc_attr( $this->registered[$handle]->args );		else			$media = 'all';		$href = $this->_css_href( $this->registered[$handle]->src, $ver, $handle );		$rel = isset($this->registered[$handle]->extra['alt']) && $this->registered[$handle]->extra['alt'] ? 'alternate stylesheet' : 'stylesheet';		$title = isset($this->registered[$handle]->extra['title']) ? "title='" . esc_attr( $this->registered[$handle]->extra['title'] ) . "'" : '';		$end_cond = $tag = '';		if ( isset($this->registered[$handle]->extra['conditional']) && $this->registered[$handle]->extra['conditional'] ) {			$tag .= "<!--[if {$this->registered[$handle]->extra['conditional']}]>\n";			$end_cond = "<![endif]-->\n";		}		$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-css' $title href='$href' type='text/css' media='$media' />\n", $handle );		if ( 'rtl' === $this->text_direction && isset($this->registered[$handle]->extra['rtl']) && $this->registered[$handle]->extra['rtl'] ) {			if ( is_bool( $this->registered[$handle]->extra['rtl'] ) ) {				$suffix = isset( $this->registered[$handle]->extra['suffix'] ) ? $this->registered[$handle]->extra['suffix'] : '';				$rtl_href = str_replace( "{$suffix}.css", "-rtl{$suffix}.css", $this->_css_href( $this->registered[$handle]->src , $ver, "$handle-rtl" ));			} else {				$rtl_href = $this->_css_href( $this->registered[$handle]->extra['rtl'], $ver, "$handle-rtl" );			}			$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-rtl-css' $title href='$rtl_href' type='text/css' media='$media' />\n", $handle );		}		$tag .= $end_cond;		if ( $this->do_concat )			$this->print_html .= $tag;		else			echo $tag;		// Could do something with $this->registered[$handle]->extra here to print out extra CSS rules//		echo "<style type='text/css'>\n";//		echo "/* <![CDATA[ */\n";//		echo "/* ]]> */\n";//		echo "</style>\n";		return true;	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_styles_array', $this->to_do );		return $r;	}	function _css_href( $src, $ver, $handle ) {		if ( !is_bool($src) && !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = apply_filters( 'style_loader_src', $src, $handle );		return esc_url( $src );	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}}
<?php/** * Site/blog functions that work with the blogs table and related data. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// @todo use update_blog_detailsfunction wpmu_update_blogs_date() {	global $wpdb;	$wpdb->update( $wpdb->blogs, array('last_updated' => current_time('mysql', true)), array('blog_id' => $wpdb->blogid) );	refresh_blog_details( $wpdb->blogid );	do_action( 'wpmu_blog_updated', $wpdb->blogid );}function get_blogaddress_by_id( $blog_id ) {	$bloginfo = get_blog_details( (int) $blog_id, false ); // only get bare details!	return esc_url( 'http://' . $bloginfo->domain . $bloginfo->path );}function get_blogaddress_by_name( $blogname ) {	global $current_site;	if ( is_subdomain_install() ) {		if ( $blogname == 'main' )			$blogname = 'www';		$url = rtrim( network_home_url(), '/' );		if ( !empty( $blogname ) )			$url = preg_replace( '|^([^\.]+://)|', '$1' . $blogname . '.', $url );	} else {		$url = network_home_url( $blogname );	}	return esc_url( $url . '/' );}function get_blogaddress_by_domain( $domain, $path ){	if ( is_subdomain_install() ) {		$url = "http://".$domain.$path;	} else {		if ( $domain != $_SERVER['HTTP_HOST'] ) {			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );			$url = 'http://' . substr( $domain, strpos( $domain, '.' ) + 1 ) . $path;			// we're not installing the main blog			if ( $blogname != 'www.' )				$url .= $blogname . '/';		} else { // main blog			$url = 'http://' . $domain . $path;		}	}	return esc_url( $url );}function get_id_from_blogname( $name ) {	global $wpdb, $current_site;	$blog_id = wp_cache_get( "get_id_from_blogname_" . $name, 'blog-details' );	if ( $blog_id )		return $blog_id;	if ( is_subdomain_install() ) {		$domain = $name . '.' . $current_site->domain;		$path = $current_site->path;	} else {		$domain = $current_site->domain;		$path = $current_site->path . $name . '/';	}	$blog_id = $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM {$wpdb->blogs} WHERE domain = %s AND path = %s", $domain, $path) );	wp_cache_set( 'get_id_from_blogname_' . $name, $blog_id, 'blog-details' );	return $blog_id;}/** * Retrieve the details for a blog from the blogs table and blog options. * * @since 3.0.0 * @param int|string|array $fields A blog ID, a blog name, or an array of fields to query against. * @param bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true. * @return object Blog details. */function get_blog_details( $fields, $get_all = true ) {	global $wpdb;	if ( is_array($fields ) ) {		if ( isset($fields['blog_id']) ) {			$blog_id = $fields['blog_id'];		} elseif ( isset($fields['domain']) && isset($fields['path']) ) {			$key = md5( $fields['domain'] . $fields['path'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) AND path = %s ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'], $fields['path'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s AND path = %s", $fields['domain'], $fields['path'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} elseif ( isset($fields['domain']) && is_subdomain_install() ) {			$key = md5( $fields['domain'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s", $fields['domain'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} else {			return false;		}	} else {		if ( !is_numeric( $fields ) )			$blog_id = get_id_from_blogname( $fields );		else			$blog_id = $fields;	}	$blog_id = (int) $blog_id;	$all = $get_all == true ? '' : 'short';	$details = wp_cache_get( $blog_id . $all, 'blog-details' );	if ( $details ) {		if ( ! is_object( $details ) ) {			if ( $details == -1 ) {				return false;			} else {				// Clear old pre-serialized objects. Cache clients do better with that.				wp_cache_delete( $blog_id . $all, 'blog-details' );				unset($details);			}		} else {			return $details;		}	}	// Try the other cache.	if ( $get_all ) {		$details = wp_cache_get( $blog_id . 'short', 'blog-details' );	} else {		$details = wp_cache_get( $blog_id, 'blog-details' );		// If short was requested and full cache is set, we can return.		if ( $details ) {			if ( ! is_object( $details ) ) {				if ( $details == -1 ) {					return false;				} else {					// Clear old pre-serialized objects. Cache clients do better with that.					wp_cache_delete( $blog_id, 'blog-details' );					unset($details);				}			} else {				return $details;			}		}	}	if ( empty($details) ) {		$details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE blog_id = %d /* get_blog_details */", $blog_id ) );		if ( ! $details ) {			// Set the full cache.			wp_cache_set( $blog_id, -1, 'blog-details' );			return false;		}	}	if ( ! $get_all ) {		wp_cache_set( $blog_id . $all, $details, 'blog-details' );		return $details;	}	$details->blogname		= get_blog_option( $blog_id, 'blogname' );	$details->siteurl		= get_blog_option( $blog_id, 'siteurl' );	$details->post_count	= get_blog_option( $blog_id, 'post_count' );	$details = apply_filters( 'blog_details', $details );	wp_cache_set( $blog_id . $all, $details, 'blog-details' );	$key = md5( $details->domain . $details->path );	wp_cache_set( $key, $details, 'blog-lookup' );	return $details;}/** * Clear the blog details cache. * * @since 3.0.0 * * @param int $blog_id Blog ID */function refresh_blog_details( $blog_id ) {	$blog_id = (int) $blog_id;	$details = get_blog_details( $blog_id, false );	wp_cache_delete( $blog_id , 'blog-details' );	wp_cache_delete( $blog_id . 'short' , 'blog-details' );	wp_cache_delete( md5( $details->domain . $details->path )  , 'blog-lookup' );	wp_cache_delete( 'current_blog_' . $details->domain, 'site-options' );	wp_cache_delete( 'current_blog_' . $details->domain . $details->path, 'site-options' );}/** * Update the details for a blog. Updates the blogs table for a given blog id. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param array $details Array of details keyed by blogs table field names. * @return bool True if update succeeds, false otherwise. */function update_blog_details( $blog_id, $details = array() ) {	global $wpdb;	if ( empty($details) )		return false;	if ( is_object($details) )		$details = get_object_vars($details);	$current_details = get_blog_details($blog_id, false);	if ( empty($current_details) )		return false;	$current_details = get_object_vars($current_details);	$details = array_merge($current_details, $details);	$details['last_updated'] = current_time('mysql', true);	$update_details = array();	$fields = array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id');	foreach ( array_intersect( array_keys( $details ), $fields ) as $field )		$update_details[$field] = $details[$field];	$wpdb->update( $wpdb->blogs, $update_details, array('blog_id' => $blog_id) );	// If spam status changed, issue actions.	if ( $details[ 'spam' ] != $current_details[ 'spam' ] ) {		if ( $details[ 'spam' ] == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	if ( isset($details[ 'public' ]) )		update_blog_option( $blog_id, 'blog_public', $details[ 'public' ], false );	refresh_blog_details($blog_id);	return true;}/** * Retrieve option value based on setting name and blog_id. * * If the option does not exist or does not have a value, then the return value * will be false. This is useful to check whether you need to install an option * and is commonly used during installation of plugin options and to test * whether upgrading is required. * * There is a filter called 'blog_option_$option' with the $option being * replaced with the option name. The filter takes two parameters. $value and * $blog_id. It returns $value. * The 'option_$option' filter in get_option() is not called. * * @since NA * @package WordPress MU * @subpackage Option * @uses apply_filters() Calls 'blog_option_$optionname' with the option name value. * * @param int $blog_id is the id of the blog. * @param string $setting Name of option to retrieve. Should already be SQL-escaped * @param string $default (optional) Default value returned if option not found. * @return mixed Value set for the option. */function get_blog_option( $blog_id, $setting, $default = false ) {	global $wpdb;	$key = $blog_id."-".$setting."-blog_option";	$value = wp_cache_get( $key, "site-options" );	if ( $value == null ) {		if ( $blog_id == $wpdb->blogid ) {			$value = get_option( $setting, $default );			$notoptions = wp_cache_get( 'notoptions', 'options' );			if ( isset( $notoptions[$setting] ) ) {				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			} elseif ( $value == false ) {				wp_cache_set( $key, 'falsevalue', 'site-options' );			} else {				wp_cache_set( $key, $value, 'site-options' );			}			return apply_filters( 'blog_option_' . $setting, $value, $blog_id );		} else {			$blog_prefix = $wpdb->get_blog_prefix( $blog_id );			$row = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$blog_prefix}options WHERE option_name = %s", $setting ) );			if ( is_object( $row ) ) { // Has to be get_row instead of get_var because of funkiness with 0, false, null values				$value = $row->option_value;				if ( $value == false )					wp_cache_set( $key, 'falsevalue', 'site-options' );				else					wp_cache_set( $key, $value, 'site-options' );			} else { // option does not exist, so we must cache its non-existence				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			}		}	} elseif ( $value == 'noop' ) {		$value = $default;	} elseif ( $value == 'falsevalue' ) {		$value = false;	}	// If home is not set use siteurl.	if ( 'home' == $setting && '' == $value )		return get_blog_option( $blog_id, 'siteurl' );	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$value = untrailingslashit( $value );	if (! @unserialize( $value ) )		$value = stripslashes( $value );	return apply_filters( 'blog_option_' . $setting, maybe_unserialize( $value ), $blog_id );}function add_blog_option( $id, $key, $value ) {	$id = (int) $id;	switch_to_blog($id);	add_option( $key, $value );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options' );}function delete_blog_option( $id, $key ) {	$id = (int) $id;	switch_to_blog($id);	delete_option( $key );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", '', 'site-options' );}function update_blog_option( $id, $key, $value, $refresh = true ) {	$id = (int) $id;	switch_to_blog($id);	update_option( $key, $value );	restore_current_blog();	if ( $refresh == true )		refresh_blog_details( $id );	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options');}function switch_to_blog( $new_blog, $validate = false ) {	global $wpdb, $table_prefix, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( empty($new_blog) )		$new_blog = $blog_id;	if ( $validate && ! get_blog_details( $new_blog ) )		return false;	if ( empty($switched_stack) )		$switched_stack = array();	$switched_stack[] = $blog_id;	/* If we're switching to the same blog id that we're on,	* set the right vars, do the associated actions, but skip	* the extra unnecessary work */	if ( $blog_id == $new_blog ) {		do_action( 'switch_blog', $blog_id, $blog_id );		$switched = true;		return true;	}	$wpdb->set_blog_id($new_blog);	$table_prefix = $wpdb->prefix;	$prev_blog_id = $blog_id;	$blog_id = $new_blog;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient', 'global-posts' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	$switched = true;	return true;}function restore_current_blog() {	global $table_prefix, $wpdb, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( !$switched )		return false;	if ( !is_array( $switched_stack ) )		return false;	$blog = array_pop( $switched_stack );	if ( $blog_id == $blog ) {		do_action( 'switch_blog', $blog, $blog );		/* If we still have items in the switched stack, consider ourselves still 'switched' */		$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );		return true;	}	$wpdb->set_blog_id($blog);	$prev_blog_id = $blog_id;	$blog_id = $blog;	$table_prefix = $wpdb->prefix;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	/* If we still have items in the switched stack, consider ourselves still 'switched' */	$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );	return true;}function is_archived( $id ) {	return get_blog_status($id, 'archived');}function update_archived( $id, $archived ) {	update_blog_status($id, 'archived', $archived);	return $archived;}/** * Update a blog details field. * * @since 3.0.0 * * @param int $blog_id BLog ID * @param string $pref A field name * @param string $value Value for $pref * @param bool $refresh Whether to refresh the blog details cache. Default is true. */function update_blog_status( $blog_id, $pref, $value, $refresh = true ) {	global $wpdb;	if ( !in_array( $pref, array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id') ) )		return $value;	$wpdb->update( $wpdb->blogs, array($pref => $value, 'last_updated' => current_time('mysql', true)), array('blog_id' => $blog_id) );	if ( $refresh )		refresh_blog_details($blog_id);	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	return $value;}function get_blog_status( $id, $pref ) {	global $wpdb;	$details = get_blog_details( $id, false );	if ( $details )		return $details->$pref;	return $wpdb->get_var( $wpdb->prepare("SELECT %s FROM {$wpdb->blogs} WHERE blog_id = %d", $pref, $id) );}function get_last_updated( $deprecated = '', $start = 0, $quantity = 40 ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' AND last_updated != '0000-00-00 00:00:00' ORDER BY last_updated DESC limit %d, %d", $wpdb->siteid, $start, $quantity ) , ARRAY_A );}?>
<?php/** * WordPress Direct Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for direct PHP file and folder manipulation. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_Direct extends WP_Filesystem_Base {	var $errors = null;	/**	 * constructor	 *	 * @param $arg mixed ingored argument	 */	function WP_Filesystem_Direct($arg) {		$this->method = 'direct';		$this->errors = new WP_Error();	}	/**	 * connect filesystem.	 *	 * @return bool Returns true on success or false on failure (always true for WP_Filesystem_Direct).	 */	function connect() {		return true;	}	/**	 * Reads entire file into a string	 *	 * @param $file string Name of the file to read.	 * @return string|bool The function returns the read data or false on failure.	 */	function get_contents($file) {		return @file_get_contents($file);	}	/**	 * Reads entire file into an array	 *	 * @param $file string Path to the file.	 * @return array|bool the file contents in an array or false on failure.	 */	function get_contents_array($file) {		return @file($file);	}	/**	 * Write a string to a file	 *	 * @param $file string Remote path to the file where to write the data.	 * @param $contents string The data to write.	 * @param $mode int (optional) The file permissions as octal number, usually 0644.	 * @return bool False upon failure.	 */	function put_contents($file, $contents, $mode = false ) {		if ( ! ($fp = @fopen($file, 'w')) )			return false;		@fwrite($fp, $contents);		@fclose($fp);		$this->chmod($file, $mode);		return true;	}	/**	 * Gets the current working directory	 *	 * @return string|bool the current working directory on success, or false on failure.	 */	function cwd() {		return @getcwd();	}	/**	 * Change directory	 *	 * @param $dir string The new current directory.	 * @return bool Returns true on success or false on failure.	 */	function chdir($dir) {		return @chdir($dir);	}	/**	 * Changes file group	 *	 * @param $file string Path to the file.	 * @param $group mixed A group name or number.	 * @param $recursive bool (optional) If set True changes file group recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chgrp($file, $group, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive )			return @chgrp($file, $group);		if ( ! $this->is_dir($file) )			return @chgrp($file, $group);		//Is a directory, and we want recursive		$file = trailingslashit($file);		$filelist = $this->dirlist($file);		foreach ($filelist as $filename)			$this->chgrp($file . $filename, $group, $recursive);		return true;	}	/**	 * Changes filesystem permissions	 *	 * @param $file string Path to the file.	 * @param $mode int (optional) The permissions as octal number, usually 0644 for files, 0755 for dirs.	 * @param $recursive bool (optional) If set True changes file group recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chmod($file, $mode = false, $recursive = false) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		if ( ! $recursive || ! $this->is_dir($file) )			return @chmod($file, $mode);		//Is a directory, and we want recursive		$file = trailingslashit($file);		$filelist = $this->dirlist($file);		foreach ( (array)$filelist as $filename => $filemeta)			$this->chmod($file . $filename, $mode, $recursive);		return true;	}	/**	 * Changes file owner	 *	 * @param $file string Path to the file.	 * @param $owner mixed A user name or number.	 * @param $recursive bool (optional) If set True changes file owner recursivly. Defaults to False.	 * @return bool Returns true on success or false on failure.	 */	function chown($file, $owner, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive )			return @chown($file, $owner);		if ( ! $this->is_dir($file) )			return @chown($file, $owner);		//Is a directory, and we want recursive		$filelist = $this->dirlist($file);		foreach ($filelist as $filename) {			$this->chown($file . '/' . $filename, $owner, $recursive);		}		return true;	}	/**	 * Gets file owner	 *	 * @param $file string Path to the file.	 * @return string Username of the user.	 */	function owner($file) {		$owneruid = @fileowner($file);		if ( ! $owneruid )			return false;		if ( ! function_exists('posix_getpwuid') )			return $owneruid;		$ownerarray = posix_getpwuid($owneruid);		return $ownerarray['name'];	}	/**	 * Gets file permissions	 *	 * FIXME does not handle errors in fileperms()	 *	 * @param $file string Path to the file.	 * @return string Mode of the file (last 4 digits).	 */	function getchmod($file) {		return substr(decoct(@fileperms($file)),3);	}	function group($file) {		$gid = @filegroup($file);		if ( ! $gid )			return false;		if ( ! function_exists('posix_getgrgid') )			return $gid;		$grouparray = posix_getgrgid($gid);		return $grouparray['name'];	}	function copy($source, $destination, $overwrite = false) {		if ( ! $overwrite && $this->exists($destination) )			return false;		return copy($source, $destination);	}	function move($source, $destination, $overwrite = false) {		if ( ! $overwrite && $this->exists($destination) )			return false;		// try using rename first.  if that fails (for example, source is read only) try copy		if ( @rename($source, $destination) )			return true;		if ( $this->copy($source, $destination, $overwrite) && $this->exists($destination) ) {			$this->delete($source);			return true;		} else {			return false;		}	}	function delete($file, $recursive = false) {		if ( empty($file) ) //Some filesystems report this as /, which can cause non-expected recursive deletion of all files in the filesystem.			return false;		$file = str_replace('\\', '/', $file); //for win32, occasional problems deleteing files otherwise		if ( $this->is_file($file) )			return @unlink($file);		if ( ! $recursive && $this->is_dir($file) )			return @rmdir($file);		//At this point its a folder, and we're in recursive mode		$file = trailingslashit($file);		$filelist = $this->dirlist($file, true);		$retval = true;		if ( is_array($filelist) ) //false if no files, So check first.			foreach ($filelist as $filename => $fileinfo)				if ( ! $this->delete($file . $filename, $recursive) )					$retval = false;		if ( file_exists($file) && ! @rmdir($file) )			$retval = false;		return $retval;	}	function exists($file) {		return @file_exists($file);	}	function is_file($file) {		return @is_file($file);	}	function is_dir($path) {		return @is_dir($path);	}	function is_readable($file) {		return @is_readable($file);	}	function is_writable($file) {		return @is_writable($file);	}	function atime($file) {		return @fileatime($file);	}	function mtime($file) {		return @filemtime($file);	}	function size($file) {		return @filesize($file);	}	function touch($file, $time = 0, $atime = 0) {		if ($time == 0)			$time = time();		if ($atime == 0)			$atime = time();		return @touch($file, $time, $atime);	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		// safe mode fails with a trailing slash under certain PHP versions.		$path = untrailingslashit($path);		if ( empty($path) )			$path = '/';		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		if ( ! @mkdir($path) )			return false;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function dirlist($path, $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path);		} else {			$limit_file = false;		}		if ( ! $this->is_dir($path) )			return false;		$dir = @dir($path);		if ( ! $dir )			return false;		$ret = array();		while (false !== ($entry = $dir->read()) ) {			$struc = array();			$struc['name'] = $entry;			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue;			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file)				continue;			$struc['perms'] 	= $this->gethchmod($path.'/'.$entry);			$struc['permsn']	= $this->getnumchmodfromh($struc['perms']);			$struc['number'] 	= false;			$struc['owner']    	= $this->owner($path.'/'.$entry);			$struc['group']    	= $this->group($path.'/'.$entry);			$struc['size']    	= $this->size($path.'/'.$entry);			$struc['lastmodunix']= $this->mtime($path.'/'.$entry);			$struc['lastmod']   = date('M j',$struc['lastmodunix']);			$struc['time']    	= date('h:i:s',$struc['lastmodunix']);			$struc['type']		= $this->is_dir($path.'/'.$entry) ? 'd' : 'f';			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		$dir->close();		unset($dir);		return $ret;	}}?>
<?php/** * Sets up the default filters and actions for Multisite. * * If you need to remove a default hook, this file will give you the priority * for which to use to remove the hook. * * Not all of the Multisite default hooks are found in ms-default-filters.php * * @package WordPress * @subpackage Multisite * @see default-filters.php * @since 3.0.0 */// Usersadd_filter( 'wpmu_validate_user_signup', 'signup_nonce_check' );add_action( 'init', 'maybe_add_existing_user_to_blog' );add_action( 'wpmu_new_user', 'newuser_notify_siteadmin' );add_action( 'wpmu_activate_user', 'add_new_user_to_blog', 10, 3 );add_action( 'sanitize_user', 'strtolower' );// Blogsadd_filter( 'wpmu_validate_blog_signup', 'signup_nonce_check' );add_action( 'wpmu_new_blog', 'wpmu_log_new_registrations', 10, 2 );add_action( 'wpmu_new_blog', 'newblog_notify_siteadmin', 10, 2 );// Register Nonceadd_action( 'signup_hidden_fields', 'signup_nonce_fields' );// Templateadd_action( 'template_redirect', 'maybe_redirect_404' );add_filter( 'allowed_redirect_hosts', 'redirect_this_site' );// Administrationadd_filter( 'term_id_filter', 'global_terms', 10, 2 );add_action( 'publish_post', 'update_posts_count' );add_action( 'delete_post', 'wpmu_update_blogs_date' );add_action( 'private_to_published', 'wpmu_update_blogs_date' );add_action( 'publish_phone', 'wpmu_update_blogs_date' );add_action( 'publish_post', 'wpmu_update_blogs_date' );// Filesadd_filter( 'wp_upload_bits', 'upload_is_file_too_big' );add_filter( 'import_upload_size_limit', 'fix_import_form_size' );add_filter( 'upload_mimes', 'check_upload_mimes' );add_filter( 'upload_size_limit', 'upload_size_limit_filter' );// Mailadd_filter( 'wp_mail_from', 'wordpressmu_wp_mail_from' );add_action( 'phpmailer_init', 'fix_phpmailer_messageid' );// Disable somethings by default for multisiteadd_filter( 'enable_update_services_configuration', '__return_false' );if ( ! defined('POST_BY_EMAIL') || ! POST_BY_EMAIL ) // back compat constant.	add_filter( 'enable_post_by_email_configuration', '__return_false' );if ( ! defined('EDIT_ANY_USER') || ! EDIT_ANY_USER ) // back compat constant.	add_filter( 'enable_edit_any_user_configuration', '__return_false' );// WP_HOME and WP_SITEURL should not have any effect in MSremove_filter( 'option_siteurl', '_config_wp_siteurl' );remove_filter( 'option_home',    '_config_wp_home'    );?>
<?php/** * Multisite themes administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! current_user_can( 'manage_network_themes' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Themes' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen enables and disables the inclusion of themes available to choose in the Appearance menu for each site. It does not activate or deactivate which theme a site is currently using.') . '</p>' .	'<p>' . __('If the network admin disables a theme that is in use, it can still remain selected on that site. If another theme is chosen, the disabled theme will not appear in the site&#8217;s Appearance > Themes screen.') . '</p>' .	'<p>' . __('Themes can be enabled on a site by site basis by the network admin on the Edit Site screen you go to via the Edit action link on the Sites screen.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Themes_SubPanel" target="_blank">Documentation on Network Themes</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) ) {	?>	<div id="message" class="updated"><p><?php _e( 'Site themes saved.' ) ?></p></div>	<?php}$themes = get_themes();$allowed_themes = get_site_allowed_themes();?><div class="wrap">	<form action="<?php echo esc_url( admin_url( 'ms-edit.php?action=updatethemes' ) ); ?>" method="post">		<?php screen_icon(); ?>		<h2><?php _e( 'Network Themes' ) ?></h2>		<p><?php _e( 'Themes must be enabled for your network before they will be available to individual sites.' ) ?></p>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>		<table class="widefat">			<thead>				<tr>					<th style="width:15%;"><?php _e( 'Enable' ) ?></th>					<th style="width:25%;"><?php _e( 'Theme' ) ?></th>					<th style="width:10%;"><?php _e( 'Version' ) ?></th>					<th style="width:60%;"><?php _e( 'Description' ) ?></th>				</tr>			</thead>			<tbody id="plugins">			<?php			$total_theme_count = $activated_themes_count = 0;			$class = '';			foreach ( (array) $themes as $key => $theme ) {				$total_theme_count++;				$theme_key = esc_html( $theme['Stylesheet'] );				$class = ( 'alt' == $class ) ? '' : 'alt';				$class1 = $enabled = $disabled = '';				$enabled = $disabled = false;				if ( isset( $allowed_themes[$theme_key] ) == true ) {					$enabled = true;					$activated_themes_count++;					$class1 = 'active';				} else {					$disabled = true;				}				?>				<tr valign="top" class="<?php echo $class . ' ' . $class1; ?>">					<td>						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="enabled_<?php echo $theme_key ?>" value="enabled" <?php checked( $enabled ) ?> /> <?php _e( 'Yes' ) ?></label>						&nbsp;&nbsp;&nbsp;						<label><input name="theme[<?php echo $theme_key ?>]" type="radio" id="disabled_<?php echo $theme_key ?>" value="disabled" <?php checked( $disabled ) ?> /> <?php _e( 'No' ) ?></label>					</td>					<th scope="row" style="text-align:left;"><?php echo $key ?></th>					<td><?php echo $theme['Version'] ?></td>					<td><?php echo $theme['Description'] ?></td>				</tr>			<?php } ?>			</tbody>		</table>		<p class="submit">			<input type="submit" value="<?php _e( 'Apply Changes' ) ?>" /></p>	</form>	<h3><?php _e( 'Total' )?></h3>	<p>		<?php printf( __( 'Themes Installed: %d' ), $total_theme_count); ?>		<br />		<?php printf( __( 'Themes Enabled: %d' ), $activated_themes_count); ?>	</p></div><?php include( './admin-footer.php' ); ?>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress enqueued dependiences class. * * @package BackPress * @uses _WP_Dependency * @since r74 */class WP_Dependencies {	var $registered = array();	var $queue = array();	var $to_do = array();	var $done = array();	var $args = array();	var $groups = array();	var $group = 0;	function WP_Dependencies() {		$args = func_get_args();		call_user_func_array( array(&$this, '__construct'), $args );	}	function __construct() {}	/**	 * Do the dependencies	 *	 * Process the items passed to it or the queue.  Processes all dependencies.	 *	 * @param mixed handles (optional) items to be processed.  (void) processes queue, (string) process that item, (array of strings) process those items	 * @return array Items that have been processed	 */	function do_items( $handles = false, $group = false ) {		// Print the queue if nothing is passed.  If a string is passed, print that script.  If an array is passed, print those scripts.		$handles = false === $handles ? $this->queue : (array) $handles;		$this->all_deps( $handles );		foreach( $this->to_do as $key => $handle ) {			if ( !in_array($handle, $this->done) && isset($this->registered[$handle]) ) {				if ( ! $this->registered[$handle]->src ) { // Defines a group.					$this->done[] = $handle;					continue;				}				if ( $this->do_item( $handle, $group ) )					$this->done[] = $handle;				unset( $this->to_do[$key] );			}		}		return $this->done;	}	function do_item( $handle ) {		return isset($this->registered[$handle]);	}	/**	 * Determines dependencies	 *	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.	 *	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names	 * @param bool recursion Used internally when function calls itself	 */	function all_deps( $handles, $recursion = false, $group = false ) {		if ( !$handles = (array) $handles )			return false;		foreach ( $handles as $handle ) {			$handle_parts = explode('?', $handle);			$handle = $handle_parts[0];			$queued = in_array($handle, $this->to_do, true);			if ( in_array($handle, $this->done, true) ) // Already done				continue;			$moved = $this->set_group( $handle, $recursion, $group );			if ( $queued && !$moved ) // already queued and in the right group				continue;			$keep_going = true;			if ( !isset($this->registered[$handle]) )				$keep_going = false; // Script doesn't exist			elseif ( $this->registered[$handle]->deps && array_diff($this->registered[$handle]->deps, array_keys($this->registered)) )				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)			elseif ( $this->registered[$handle]->deps && !$this->all_deps( $this->registered[$handle]->deps, true, $group ) )				$keep_going = false; // Script requires deps which don't exist			if ( !$keep_going ) { // Either script or its deps don't exist.				if ( $recursion )					return false; // Abort this branch.				else					continue; // We're at the top level.  Move on to the next one.			}			if ( $queued ) // Already grobbed it and its deps				continue;			if ( isset($handle_parts[1]) )				$this->args[$handle] = $handle_parts[1];			$this->to_do[] = $handle;		}		return true;	}	/**	 * Adds item	 *	 * Adds the item only if no item of that name already exists	 *	 * @param string handle Script name	 * @param string src Script url	 * @param array deps (optional) Array of script names on which this script depends	 * @param string ver (optional) Script version (used for cache busting)	 * @return array Hierarchical array of dependencies	 */	function add( $handle, $src, $deps = array(), $ver = false, $args = null ) {		if ( isset($this->registered[$handle]) )			return false;		$this->registered[$handle] = new _WP_Dependency( $handle, $src, $deps, $ver, $args );		return true;	}	/**	 * Adds extra data	 *	 * Adds data only if script has already been added	 *	 * @param string handle Script name	 * @param string data_name Name of object in which to store extra data	 * @param array data Array of extra data	 * @return bool success	 */	function add_data( $handle, $data_name, $data ) {		if ( !isset($this->registered[$handle]) )			return false;		return $this->registered[$handle]->add_data( $data_name, $data );	}	function remove( $handles ) {		foreach ( (array) $handles as $handle )			unset($this->registered[$handle]);	}	function enqueue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			if ( !in_array($handle[0], $this->queue) && isset($this->registered[$handle[0]]) ) {				$this->queue[] = $handle[0];				if ( isset($handle[1]) )					$this->args[$handle[0]] = $handle[1];			}		}	}	function dequeue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			$key = array_search($handle[0], $this->queue);			if ( false !== $key ) {				unset($this->queue[$key]);				unset($this->args[$handle[0]]);			}		}	}	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do		switch ( $list ) :		case 'registered':		case 'scripts': // back compat			if ( isset($this->registered[$handle]) )				return $this->registered[$handle];			break;		case 'to_print': // back compat		case 'printed': // back compat			if ( 'to_print' == $list )				$list = 'to_do';			else				$list = 'printed';		default:			if ( in_array($handle, $this->$list) )				return true;			break;		endswitch;		return false;	}	function set_group( $handle, $recursion, $group ) {		$group = (int) $group;		if ( $recursion )			$group = min($this->group, $group);		else			$this->group = $group;		if ( isset($this->groups[$handle]) && $this->groups[$handle] <= $group )			return false;		$this->groups[$handle] = $group;		return true;	}}class _WP_Dependency {	var $handle;	var $src;	var $deps = array();	var $ver = false;	var $args = null;	var $extra = array();	function _WP_Dependency() {		@list($this->handle, $this->src, $this->deps, $this->ver, $this->args) = func_get_args();		if ( !is_array($this->deps) )			$this->deps = array();	}	function add_data( $name, $data ) {		if ( !is_scalar($name) )			return false;		$this->extra[$name] = $data;		return true;	}}
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>     <title><?php printf(__('%1$s - Comments on %2$s'), get_option('blogname'), the_title('','',false)); ?></title>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<style type="text/css" media="screen">		@import url( <?php bloginfo('stylesheet_url'); ?> );		body { margin: 3px; }	</style></head><body id="commentspopup"><h1 id="header"><a href="" title="<?php echo get_option('blogname'); ?>"><?php echo get_option('blogname'); ?></a></h1><?php/* Don't remove these lines. */add_filter('comment_text', 'popuplinks');if ( have_posts() ) :while( have_posts()) : the_post();?><h2 id="comments"><?php _e('Comments'); ?></h2><p><a href="<?php echo get_post_comments_feed_link($post->ID); ?>"><?php _e('<abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.'); ?></a></p><?php if ( pings_open() ) { ?><p><?php printf(__('The <abbr title="Universal Resource Locator">URL</abbr> to TrackBack this entry is: <em>%s</em>'), get_trackback_url()); ?></p><?php } ?><?php// this line is WordPress' motor, do not delete it.$commenter = wp_get_current_commenter();extract($commenter);$comments = get_approved_comments($id);$post = get_post($id);if ( post_password_required($post) ) {  // and it doesn't match the cookie	echo(get_the_password_form());} else { ?><?php if ($comments) { ?><ol id="commentlist"><?php foreach ($comments as $comment) { ?>	<li id="comment-<?php comment_ID() ?>">	<?php comment_text() ?>	<p><cite><?php comment_type(__('Comment'), __('Trackback'), __('Pingback')); ?> <?php printf(__('by %1$s &#8212; %2$s @ <a href="#comment-%3$s">%4$s</a>'), get_comment_author_link(), get_comment_date(), get_comment_ID(), get_comment_time()); ?></cite></p>	</li><?php } // end for each comment ?></ol><?php } else { // this is displayed if there are no comments so far ?>	<p><?php _e('No comments yet.'); ?></p><?php } ?><?php if ( comments_open() ) { ?><h2><?php _e('Leave a comment'); ?></h2><p><?php printf(__('Line and paragraph breaks automatic, e-mail address never displayed, <acronym title="Hypertext Markup Language">HTML</acronym> allowed: <code>%s</code>'), allowed_tags()); ?></p><form action="<?php echo get_option('siteurl'); ?>/wp-comments-post.php" method="post" id="commentform"><?php if ( $user_ID ) : ?>	<p><?php printf(__('Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out &raquo;</a>'), get_option('siteurl') . '/wp-admin/profile.php', $user_identity, wp_logout_url(get_permalink())); ?></p><?php else : ?>	<p>	  <input type="text" name="author" id="author" class="textarea" value="<?php echo esc_attr($comment_author); ?>" size="28" tabindex="1" />	   <label for="author"><?php _e('Name'); ?></label>	</p>	<p>	  <input type="text" name="email" id="email" value="<?php echo esc_attr($comment_author_email); ?>" size="28" tabindex="2" />	   <label for="email"><?php _e('E-mail'); ?></label>	</p>	<p>	  <input type="text" name="url" id="url" value="<?php echo esc_attr($comment_author_url); ?>" size="28" tabindex="3" />	   <label for="url"><?php _e('<abbr title="Universal Resource Locator">URL</abbr>'); ?></label>	</p><?php endif; ?>	<p>	  <label for="comment"><?php _e('Your Comment'); ?></label>	<br />	  <textarea name="comment" id="comment" cols="70" rows="4" tabindex="4"></textarea>	</p>	<p>	  <input type="hidden" name="comment_post_ID" value="<?php echo $id; ?>" />	  <input type="hidden" name="redirect_to" value="<?php echo esc_attr($_SERVER["REQUEST_URI"]); ?>" />	  <input name="submit" type="submit" tabindex="5" value="<?php _e('Say It!' ); ?>" />	</p>	<?php do_action('comment_form', $post->ID); ?></form><?php } else { // comments are closed ?><p><?php _e('Sorry, the comment form is closed at this time.'); ?></p><?php }} // end password check?><div><strong><a href="javascript:window.close()"><?php _e('Close this window.'); ?></a></strong></div><?php // if you delete this the sky will fall on your headendwhile; // have_posts()else: // have_posts()?><p><?php _e('Sorry, no posts matched your criteria.'); ?></p><?php endif; ?><!-- // this is just the end of the motor - don't touch that line either :) --><?php //} ?><p class="credit"><?php timer_stop(1); ?> <cite><?php printf(__('Powered by <a href="%s" title="Powered by WordPress, state-of-the-art semantic personal publishing platform"><strong>WordPress</strong></a>'), 'http://wordpress.org/'); ?></cite></p><?php // Seen at http://www.mijnkopthee.nl/log2/archive/2003/05/28/esc(18) ?><script type="text/javascript"><!--document.onkeypress = function esc(e) {	if(typeof(e) == "undefined") { e=event; }	if (e.keyCode == 27) { self.close(); }}// --></script></body></html>
<?php/** * General API for generating and formatting diffs - the differences between * two sequences of strings. * * The original PHP version of this code was written by Geoffrey T. Dairiki * <dairiki@dairiki.org>, and is used/adapted with his permission. * * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org> * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_Diff {    /**     * Array of changes.     *     * @var array     */    var $_edits;    /**     * Computes diffs between sequences of strings.     *     * @param string $engine     Name of the diffing engine to use.  'auto'     *                           will automatically select the best.     * @param array $params      Parameters to pass to the diffing engine.     *                           Normally an array of two arrays, each     *                           containing the lines from a file.     */    function Text_Diff($engine, $params)    {        // Backward compatibility workaround.        if (!is_string($engine)) {            $params = array($engine, $params);            $engine = 'auto';        }        if ($engine == 'auto') {            $engine = extension_loaded('xdiff') ? 'xdiff' : 'native';        } else {            $engine = basename($engine);        }        // WP #7391        require_once dirname(__FILE__).'/Diff/Engine/' . $engine . '.php';        $class = 'Text_Diff_Engine_' . $engine;        $diff_engine = new $class();        $this->_edits = call_user_func_array(array($diff_engine, 'diff'), $params);    }    /**     * Returns the array of differences.     */    function getDiff()    {        return $this->_edits;    }    /**     * returns the number of new (added) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of new lines     */    function countAddedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_add') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->nfinal();            }        }        return $count;    }    /**     * Returns the number of deleted (removed) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of deleted lines     */    function countDeletedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_delete') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->norig();            }        }        return $count;    }    /**     * Computes a reversed diff.     *     * Example:     * <code>     * $diff = new Text_Diff($lines1, $lines2);     * $rev = $diff->reverse();     * </code>     *     * @return Text_Diff  A Diff object representing the inverse of the     *                    original diff.  Note that we purposely don't return a     *                    reference here, since this essentially is a clone()     *                    method.     */    function reverse()    {        if (version_compare(zend_version(), '2', '>')) {            $rev = clone($this);        } else {            $rev = $this;        }        $rev->_edits = array();        foreach ($this->_edits as $edit) {            $rev->_edits[] = $edit->reverse();        }        return $rev;    }    /**     * Checks for an empty diff.     *     * @return boolean  True if two sequences were identical.     */    function isEmpty()    {        foreach ($this->_edits as $edit) {            if (!is_a($edit, 'Text_Diff_Op_copy')) {                return false;            }        }        return true;    }    /**     * Computes the length of the Longest Common Subsequence (LCS).     *     * This is mostly for diagnostic purposes.     *     * @return integer  The length of the LCS.     */    function lcs()    {        $lcs = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_copy')) {                $lcs += count($edit->orig);            }        }        return $lcs;    }    /**     * Gets the original set of lines.     *     * This reconstructs the $from_lines parameter passed to the constructor.     *     * @return array  The original sequence of strings.     */    function getOriginal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->orig) {                array_splice($lines, count($lines), 0, $edit->orig);            }        }        return $lines;    }    /**     * Gets the final set of lines.     *     * This reconstructs the $to_lines parameter passed to the constructor.     *     * @return array  The sequence of strings.     */    function getFinal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->final) {                array_splice($lines, count($lines), 0, $edit->final);            }        }        return $lines;    }    /**     * Removes trailing newlines from a line of text. This is meant to be used     * with array_walk().     *     * @param string $line  The line to trim.     * @param integer $key  The index of the line in the array. Not used.     */    function trimNewlines(&$line, $key)    {        $line = str_replace(array("\n", "\r"), '', $line);    }    /**     * Determines the location of the system temporary directory.     *     * @static     *     * @access protected     *     * @return string  A directory name which can be used for temp files.     *                 Returns false if one could not be found.     */    function _getTempDir()    {        $tmp_locations = array('/tmp', '/var/tmp', 'c:\WUTemp', 'c:\temp',                               'c:\windows\temp', 'c:\winnt\temp');        /* Try PHP's upload_tmp_dir directive. */        $tmp = ini_get('upload_tmp_dir');        /* Otherwise, try to determine the TMPDIR environment variable. */        if (!strlen($tmp)) {            $tmp = getenv('TMPDIR');        }        /* If we still cannot determine a value, then cycle through a list of         * preset possibilities. */        while (!strlen($tmp) && count($tmp_locations)) {            $tmp_check = array_shift($tmp_locations);            if (@is_dir($tmp_check)) {                $tmp = $tmp_check;            }        }        /* If it is still empty, we have failed, so return false; otherwise         * return the directory determined. */        return strlen($tmp) ? $tmp : false;    }    /**     * Checks a diff for validity.     *     * This is here only for debugging purposes.     */    function _check($from_lines, $to_lines)    {        if (serialize($from_lines) != serialize($this->getOriginal())) {            trigger_error("Reconstructed original doesn't match", E_USER_ERROR);        }        if (serialize($to_lines) != serialize($this->getFinal())) {            trigger_error("Reconstructed final doesn't match", E_USER_ERROR);        }        $rev = $this->reverse();        if (serialize($to_lines) != serialize($rev->getOriginal())) {            trigger_error("Reversed original doesn't match", E_USER_ERROR);        }        if (serialize($from_lines) != serialize($rev->getFinal())) {            trigger_error("Reversed final doesn't match", E_USER_ERROR);        }        $prevtype = null;        foreach ($this->_edits as $edit) {            if ($prevtype == get_class($edit)) {                trigger_error("Edit sequence is non-optimal", E_USER_ERROR);            }            $prevtype = get_class($edit);        }        return true;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_MappedDiff extends Text_Diff {    /**     * Computes a diff between sequences of strings.     *     * This can be used to compute things like case-insensitve diffs, or diffs     * which ignore changes in white-space.     *     * @param array $from_lines         An array of strings.     * @param array $to_lines           An array of strings.     * @param array $mapped_from_lines  This array should have the same size     *                                  number of elements as $from_lines.  The     *                                  elements in $mapped_from_lines and     *                                  $mapped_to_lines are what is actually     *                                  compared when computing the diff.     * @param array $mapped_to_lines    This array should have the same number     *                                  of elements as $to_lines.     */    function Text_MappedDiff($from_lines, $to_lines,                             $mapped_from_lines, $mapped_to_lines)    {        assert(count($from_lines) == count($mapped_from_lines));        assert(count($to_lines) == count($mapped_to_lines));        parent::Text_Diff($mapped_from_lines, $mapped_to_lines);        $xi = $yi = 0;        for ($i = 0; $i < count($this->_edits); $i++) {            $orig = &$this->_edits[$i]->orig;            if (is_array($orig)) {                $orig = array_slice($from_lines, $xi, count($orig));                $xi += count($orig);            }            $final = &$this->_edits[$i]->final;            if (is_array($final)) {                $final = array_slice($to_lines, $yi, count($final));                $yi += count($final);            }        }    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op {    var $orig;    var $final;    function &reverse()    {        trigger_error('Abstract method', E_USER_ERROR);    }    function norig()    {        return $this->orig ? count($this->orig) : 0;    }    function nfinal()    {        return $this->final ? count($this->final) : 0;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_copy extends Text_Diff_Op {    function Text_Diff_Op_copy($orig, $final = false)    {        if (!is_array($final)) {            $final = $orig;        }        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_copy($this->final, $this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_delete extends Text_Diff_Op {    function Text_Diff_Op_delete($lines)    {        $this->orig = $lines;        $this->final = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_add($this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_add extends Text_Diff_Op {    function Text_Diff_Op_add($lines)    {        $this->final = $lines;        $this->orig = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_delete($this->final);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_change extends Text_Diff_Op {    function Text_Diff_Op_change($orig, $final)    {        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_change($this->final, $this->orig);        return $reverse;    }}
<?phpif ( !class_exists('SimplePie') )	require_once (ABSPATH . WPINC . '/class-simplepie.php');class WP_Feed_Cache extends SimplePie_Cache {	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function WP_Feed_Cache() {		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension) {		return new WP_Feed_Cache_Transient($location, $filename, $extension);	}}class WP_Feed_Cache_Transient {	var $name;	var $mod_name;	var $lifetime = 43200; //Default lifetime in cache of 12 hours	function WP_Feed_Cache_Transient($location, $filename, $extension) {		$this->name = 'feed_' . $filename;		$this->mod_name = 'feed_mod_' . $filename;		$this->lifetime = apply_filters('wp_feed_cache_transient_lifetime', $this->lifetime, $filename);	}	function save($data) {		if ( is_a($data, 'SimplePie') )			$data = $data->data;		set_transient($this->name, $data, $this->lifetime);		set_transient($this->mod_name, time(), $this->lifetime);		return true;	}	function load() {		return get_transient($this->name);	}	function mtime() {		return get_transient($this->mod_name);	}	function touch() {		return set_transient($this->mod_name, time(), $this->lifetime);	}	function unlink() {		delete_transient($this->name);		delete_transient($this->mod_name);		return true;	}}class WP_SimplePie_File extends SimplePie_File {	function WP_SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false) {		$this->url = $url;		$this->timeout = $timeout;		$this->redirects = $redirects;		$this->headers = $headers;		$this->useragent = $useragent;		$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE;		if ( preg_match('/^http(s)?:\/\//i', $url) ) {			$args = array( 'timeout' => $this->timeout, 'redirection' => $this->redirects);			if ( !empty($this->headers) )				$args['headers'] = $this->headers;			if ( SIMPLEPIE_USERAGENT != $this->useragent ) //Use default WP user agent unless custom has been specified				$args['user-agent'] = $this->useragent;			$res = wp_remote_request($url, $args);			if ( is_wp_error($res) ) {				$this->error = 'WP HTTP Error: ' . $res->get_error_message();				$this->success = false;			} else {				$this->headers = $res['headers'];				$this->body = $res['body'];				$this->status_code = $res['response']['code'];			}		} else {			if ( ! $this->body = file_get_contents($url) ) {				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}
<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * The Header for our theme. * * Displays all of the <head> section and everything up till <div id="main"> * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><!DOCTYPE html><html <?php language_attributes(); ?>><head><meta charset="<?php bloginfo( 'charset' ); ?>" /><title><?php	/*	 * Print the <title> tag based on what is being viewed.	 * We filter the output of wp_title() a bit -- see	 * twentyten_filter_wp_title() in functions.php.	 */	wp_title( '|', true, 'right' );	?></title><link rel="profile" href="http://gmpg.org/xfn/11" /><link rel="stylesheet" type="text/css" media="all" href="<?php bloginfo( 'stylesheet_url' ); ?>" /><link rel="pingback" href="<?php bloginfo( 'pingback_url' ); ?>" /><?php	/* We add some JavaScript to pages with the comment form	 * to support sites with threaded comments (when in use).	 */	if ( is_singular() && get_option( 'thread_comments' ) )		wp_enqueue_script( 'comment-reply' );	/* Always have wp_head() just before the closing </head>	 * tag of your theme, or you will break many plugins, which	 * generally use this hook to add elements to <head> such	 * as styles, scripts, and meta tags.	 */	wp_head();?></head><body <?php body_class(); ?>><div id="wrapper" class="hfeed">	<div id="header">		<div id="masthead">			<div id="branding" role="banner">				<?php $heading_tag = ( is_home() || is_front_page() ) ? 'h1' : 'div'; ?>				<<?php echo $heading_tag; ?> id="site-title">					<span>						<a href="<?php echo home_url( '/' ); ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home"><?php bloginfo( 'name' ); ?></a>					</span>				</<?php echo $heading_tag; ?>>				<div id="site-description"><?php bloginfo( 'description' ); ?></div>				<?php					// Check if this is a post or page, if it has a thumbnail, and if it's a big one					if ( is_singular() &&							has_post_thumbnail( $post->ID ) &&							( /* $src, $width, $height */ $image = wp_get_attachment_image_src( get_post_thumbnail_id( $post->ID ), 'post-thumbnail' ) ) &&							$image[1] >= HEADER_IMAGE_WIDTH ) :						// Houston, we have a new header image!						echo get_the_post_thumbnail( $post->ID, 'post-thumbnail' );					else : ?>						<img src="<?php header_image(); ?>" width="<?php echo HEADER_IMAGE_WIDTH; ?>" height="<?php echo HEADER_IMAGE_HEIGHT; ?>" alt="" />					<?php endif; ?>			</div><!-- #branding -->			<div id="access" role="navigation">			  <?php /*  Allow screen readers / text browsers to skip the navigation menu and get right to the good stuff */ ?>				<div class="skip-link screen-reader-text"><a href="#content" title="<?php esc_attr_e( 'Skip to content', 'twentyten' ); ?>"><?php _e( 'Skip to content', 'twentyten' ); ?></a></div>				<?php /* Our navigation menu.  If one isn't filled out, wp_nav_menu falls back to wp_page_menu.  The menu assiged to the primary position is the one used.  If none is assigned, the menu with the lowest ID is used.  */ ?>				<?php wp_nav_menu( array( 'container_class' => 'menu-header', 'theme_location' => 'primary' ) ); ?>			</div><!-- #access -->		</div><!-- #masthead -->	</div><!-- #header -->	<div id="main">
