<?php/** * WordPress Theme Install Administration API * * @package WordPress * @subpackage Administration */$themes_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),	'abbr' => array('title' => array()), 'acronym' => array('title' => array()),	'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),	'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),	'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),	'img' => array('src' => array(), 'class' => array(), 'alt' => array()));$theme_field_defaults = array( 'description' => true, 'sections' => false, 'tested' => true, 'requires' => true,	'rating' => true, 'downloaded' => true, 'downloadlink' => true, 'last_updated' => true, 'homepage' => true,	'tags' => true, 'num_ratings' => true);/** * Retrieve theme installer pages from WordPress Themes API. * * It is possible for a theme to override the Themes API result with three * filters. Assume this is for themes, which can extend on the Theme Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'themes_api_args', is for the args and gives the action as * the second parameter. The hook for 'themes_api_args' must ensure that an * object is returned. * * The second filter, 'themes_api', is the result that would be returned. * * @since 2.8.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Theme Info API. * @return mixed */function themes_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	$args = apply_filters('themes_api_args', $args, $action); //NOTE: Ensure that an object is returned via this filter.	$res = apply_filters('themes_api', false, $action, $args); //NOTE: Allows a theme to completely override the builtin WordPress.org API.	if ( ! $res ) {		$request = wp_remote_post('http://api.wordpress.org/themes/info/1.0/', array( 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('themes_api_failed', __('An Unexpected HTTP Error occured during the API request.</p> <p><a href="?" onclick="document.location.reload(); return false;">Try again</a>'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( ! $res )			$res = new WP_Error('themes_api_failed', __('An unknown error occured'), $request['body']);		}	}	//var_dump(array($args, $res));	return apply_filters('themes_api_result', $res, $action, $args);}/** * Retrieve list of WordPress theme features (aka theme tags) * * @since 2.8.0 * * @return array */function install_themes_feature_list( ) {	if ( !$cache = get_transient( 'wporg_theme_feature_list' ) )		set_transient( 'wporg_theme_feature_list', array( ),  10800);	if ( $cache  )		return $cache;	$feature_list = themes_api( 'feature_list', array( ) );	if ( is_wp_error( $feature_list ) )		return $features;	set_transient( 'wporg_theme_feature_list', $feature_list, 10800 );	return $feature_list;}add_action('install_themes_search', 'install_theme_search', 10, 1);/** * Display theme search results * * @since 2.8.0 * * @param string $page */function install_theme_search($page) {	global $theme_field_defaults;	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$terms = explode(',', $term);			$terms = array_map('trim', $terms);			$terms = array_map('sanitize_title_with_dashes', $terms);			$args['tag'] = $terms;			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$args['fields'] = $theme_field_defaults;	if ( !empty( $_POST['features'] ) ) {		$terms = $_POST['features'];		$terms = array_map( 'trim', $terms );		$terms = array_map( 'sanitize_title_with_dashes', $terms );		$args['tag'] = $terms;		$_REQUEST['s'] = implode( ',', $terms );		$_REQUEST['type'] = 'tag';	}	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_themes_table_header', 'install_theme_search_form');	display_themes($api->themes, $api->info['page'], $api->info['pages']);}/** * Display search form for searching themes. * * @since 2.8.0 */function install_theme_search_form() {	$type = isset( $_REQUEST['type'] ) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset( $_REQUEST['s'] ) ? stripslashes( $_REQUEST['s'] ) : '';	?><p class="install-help"><?php _e('Search for themes by keyword, author, or tag.') ?></p><form id="search-themes" method="post" action="<?php echo admin_url( 'theme-install.php?tab=search' ); ?>">	<select	name="type" id="typeselector">	<option value="term" <?php selected('term', $type) ?>><?php _e('Term'); ?></option>	<option value="author" <?php selected('author', $type) ?>><?php _e('Author'); ?></option>	<option value="tag" <?php selected('tag', $type) ?>><?php _ex('Tag', 'Theme Installer'); ?></option>	</select>	<input type="text" name="s" size="30" value="<?php echo esc_attr($term) ?>" />	<input type="submit" name="search" value="<?php esc_attr_e('Search'); ?>" class="button" /></form><?php}add_action('install_themes_dashboard', 'install_themes_dashboard');/** * Display tags filter for themes. * * @since 2.8.0 */function install_themes_dashboard() {	install_theme_search_form();?><h4><?php _e('Feature Filter') ?></h4><form method="post" action="<?php echo admin_url( 'theme-install.php?tab=search' ); ?>"><p class="install-help"><?php _e('Find a theme based on specific features') ?></p>	<?php	$feature_list = install_themes_feature_list( );	echo '<div class="feature-filter">';	$trans = array ('Colors' => __('Colors'), 'black' => __('Black'), 'blue' => __('Blue'), 'brown' => __('Brown'),		'green' => __('Green'), 'orange' => __('Orange'), 'pink' => __('Pink'), 'purple' => __('Purple'), 'red' => __('Red'),		'silver' => __('Silver'), 'tan' => __('Tan'), 'white' => __('White'), 'yellow' => __('Yellow'), 'dark' => __('Dark'),		'light' => __('Light'), 'Columns' => __('Columns'), 'one-column' => __('One Column'), 'two-columns' => __('Two Columns'),		'three-columns' => __('Three Columns'), 'four-columns' => __('Four Columns'), 'left-sidebar' => __('Left Sidebar'),		'right-sidebar' => __('Right Sidebar'), 'Width' => __('Width'), 'fixed-width' => __('Fixed Width'), 'flexible-width' => __('Flexible Width'),		'Features' => __('Features'), 'custom-colors' => __('Custom Colors'), 'custom-header' => __('Custom Header'), 'theme-options' => __('Theme Options'),		'threaded-comments' => __('Threaded Comments'), 'sticky-post' => __('Sticky Post'), 'microformats' => __('Microformats'),		'Subject' => __('Subject'), 'holiday' => __('Holiday'), 'photoblogging' => __('Photoblogging'), 'seasonal' => __('Seasonal'),	);	foreach ( (array) $feature_list as $feature_name => $features ) {		if ( isset($trans[$feature_name]) )			 $feature_name = $trans[$feature_name];		$feature_name = esc_html( $feature_name );		echo '<div class="feature-name">' . $feature_name . '</div>';		echo '<ol style="float: left; width: 725px;" class="feature-group">';		foreach ( $features as $feature ) {			$feature_name = $feature;			if ( isset($trans[$feature]) )				$feature_name = $trans[$feature];			$feature_name = esc_html( $feature_name );			$feature = esc_attr($feature);?><li>	<input type="checkbox" name="features[<?php echo $feature; ?>]" id="feature-id-<?php echo $feature; ?>" value="<?php echo $feature; ?>" />	<label for="feature-id-<?php echo $feature; ?>"><?php echo $feature_name; ?></label></li><?php	} ?></ol><br class="clear" /><?php	} ?></div><br class="clear" /><p><input type="submit" name="search" value="<?php esc_attr_e('Find Themes'); ?>" class="button" /></p></form><?php}add_action('install_themes_featured', 'install_themes_featured', 10, 1);/** * Display featured themes. * * @since 2.8.0 * * @param string $page */function install_themes_featured($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'featured', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_new', 'install_themes_new', 10, 1);/** * Display new themes/ * * @since 2.8.0 * * @param string $page */function install_themes_new($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'new', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	if ( is_wp_error($api) )		wp_die($api);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_updated', 'install_themes_updated', 10, 1);/** * Display recently updated themes. * * @since 2.8.0 * * @param string $page */function install_themes_updated($page = 1) {	global $theme_field_defaults;	$args = array('browse' => 'updated', 'page' => $page, 'fields' => $theme_field_defaults);	$api = themes_api('query_themes', $args);	display_themes($api->themes, $api->info['page'], $api->info['pages']);}add_action('install_themes_upload', 'install_themes_upload', 10, 1);function install_themes_upload($page = 1) {?><h4><?php _e('Install a theme in .zip format') ?></h4><p class="install-help"><?php _e('If you have a theme in a .zip format, you may install it by uploading it here.') ?></p><form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-theme') ?>">	<?php wp_nonce_field( 'theme-upload') ?>	<input type="file" name="themezip" />	<input type="submit"	class="button" value="<?php esc_attr_e('Install Now') ?>" /></form>	<?php}function display_theme($theme, $actions = null, $show_details = true) {	global $themes_allowedtags;	if ( empty($theme) )		return;	$name = wp_kses($theme->name, $themes_allowedtags);	$desc = wp_kses($theme->description, $themes_allowedtags);	//if ( strlen($desc) > 30 )	//	$desc =  substr($desc, 0, 15) . '<span class="dots">...</span><span>' . substr($desc, -15) . '</span>';	$preview_link = $theme->preview_url . '?TB_iframe=true&amp;width=600&amp;height=400';	if ( !is_array($actions) ) {		$actions = array();		$actions[] = '<a href="' . admin_url('theme-install.php?tab=theme-information&amp;theme=' . $theme->slug .										'&amp;TB_iframe=true&amp;tbWidth=500&amp;tbHeight=385') . '" class="thickbox thickbox-preview onclick" title="' . esc_attr(sprintf(__('Install &#8220;%s&#8221;'), $name)) . '">' . __('Install') . '</a>';		$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview onclick previewlink" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';		$actions = apply_filters('theme_install_action_links', $actions, $theme);	}	$actions = implode ( ' | ', $actions );	?><a class='thickbox thickbox-preview screenshot'	href='<?php echo esc_url($preview_link); ?>'	title='<?php echo esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)); ?>'><img src='<?php echo esc_url($theme->screenshot_url); ?>' width='150' /></a><h3><?php echo $name ?></h3><span class='action-links'><?php echo $actions ?></span><p><?php echo $desc ?></p><?php if ( $show_details ) { ?><a href="#theme_detail" class="theme-detail hide-if-no-js" tabindex='4'><?php _e('Details') ?></a><div class="themedetaildiv hide-if-js"><p><strong><?php _e('Version:') ?></strong> <?php echo wp_kses($theme->version, $themes_allowedtags) ?></p><p><strong><?php _e('Author:') ?></strong> <?php echo wp_kses($theme->author, $themes_allowedtags) ?></p><?php if ( ! empty($theme->last_updated) ) : ?><p><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $theme->last_updated ?>"><?php printf( __('%s ago'), human_time_diff(strtotime($theme->last_updated)) ) ?></span></p><?php endif; if ( ! empty($theme->requires) ) : ?><p><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $theme->requires) ?></p><?php endif; if ( ! empty($theme->tested) ) : ?><p><strong><?php _e('Compatible up to:') ?></strong> <?php echo $theme->tested ?></p><?php endif; if ( !empty($theme->downloaded) ) : ?><p><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $theme->downloaded), number_format_i18n($theme->downloaded)) ?></p><?php endif; ?><div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $theme->num_ratings), number_format_i18n($theme->num_ratings)) ?>">	<div class="star star-rating" style="width: <?php echo esc_attr($theme->rating) ?>px"></div>	<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>	<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>	<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>	<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>	<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div></div></div><?php }	/*	 object(stdClass)[59]	 public 'name' => string 'Magazine Basic' (length=14)	 public 'slug' => string 'magazine-basic' (length=14)	 public 'version' => string '1.1' (length=3)	 public 'author' => string 'tinkerpriest' (length=12)	 public 'preview_url' => string 'http://wp-themes.com/?magazine-basic' (length=36)	 public 'screenshot_url' => string 'http://wp-themes.com/wp-content/themes/magazine-basic/screenshot.png' (length=68)	 public 'rating' => float 80	 public 'num_ratings' => int 1	 public 'homepage' => string 'http://wordpress.org/extend/themes/magazine-basic' (length=49)	 public 'description' => string 'A basic magazine style layout with a fully customizable layout through a backend interface. Designed by <a href="http://bavotasan.com">c.bavota</a> of <a href="http://tinkerpriestmedia.com">Tinker Priest Media</a>.' (length=214)	 public 'download_link' => string 'http://wordpress.org/extend/themes/download/magazine-basic.1.1.zip' (length=66)	 */}/** * Display theme content based on theme list. * * @since 2.8.0 * * @param array $themes List of themes. * @param string $page * @param int $totalpages Number of pages. */function display_themes($themes, $page = 1, $totalpages = 1) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><div class="tablenav"><div class="alignleft actions"><?php do_action('install_themes_table_header'); ?></div>	<?php	$url = esc_url($_SERVER['REQUEST_URI']);	if ( ! empty($term) )		$url = add_query_arg('s', $term, $url);	if ( ! empty($type) )		$url = add_query_arg('type', $type, $url);	$page_links = paginate_links( array(			'base' => add_query_arg('paged', '%#%', $url),			'format' => '',			'prev_text' => __('&laquo;'),			'next_text' => __('&raquo;'),			'total' => $totalpages,			'current' => $page	));	if ( $page_links )		echo "\t\t<div class='tablenav-pages'>$page_links</div>";	?></div><br class="clear" /><?php	if ( empty($themes) ) {		_e('No themes found');		return;	}?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php	$rows = ceil(count($themes) / 3);	$table = array();	$theme_keys = array_keys($themes);	for ( $row = 1; $row <= $rows; $row++ )		for ( $col = 1; $col <= 3; $col++ )			$table[$row][$col] = array_shift($theme_keys);	foreach ( $table as $row => $cols ) {	?>	<tr>	<?php	foreach ( $cols as $col => $theme_index ) {		$class = array('available-theme');		if ( $row == 1 ) $class[] = 'top';		if ( $col == 1 ) $class[] = 'left';		if ( $row == $rows ) $class[] = 'bottom';		if ( $col == 3 ) $class[] = 'right';		?>		<td class="<?php echo join(' ', $class); ?>"><?php			if ( isset($themes[$theme_index]) )				display_theme($themes[$theme_index]);		?></td>		<?php } // end foreach $cols ?>	</tr>	<?php } // end foreach $table ?></table><div class="tablenav"><?php if ( $page_links )echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?> <br	class="clear" /></div><?php}add_action('install_themes_pre_theme-information', 'install_theme_information');/** * Display theme information in dialog box form. * * @since 2.8.0 */function install_theme_information() {	//TODO: This function needs a LOT of UI work :)	global $tab, $themes_allowedtags;	$api = themes_api('theme_information', array('slug' => stripslashes( $_REQUEST['theme'] ) ));	if ( is_wp_error($api) )		wp_die($api);	// Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $themes_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key ) {		if ( isset($api->$key) )			$api->$key = wp_kses($api->$key, $themes_allowedtags);	}	iframe_header( __('Theme Install') );	if ( empty($api->download_link) ) {		echo '<div id="message" class="error"><p>' . __('<strong>Error:</strong> This theme is currently not available. Please try again later.') . '</p></div>';		iframe_footer();		exit;	}	if ( !empty($api->tested) && version_compare($GLOBALS['wp_version'], $api->tested, '>') )		echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This theme has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';	else if ( !empty($api->requires) && version_compare($GLOBALS['wp_version'], $api->requires, '<') )		echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This theme has not been marked as <strong>compatible</strong> with your version of WordPress.') . '</p></div>';	// Default to a "new" theme	$type = 'install';	// Check to see if this theme is known to be installed, and has an update awaiting it.	$update_themes = get_site_transient('update_themes');	if ( is_object($update_themes) && isset($update_themes->response) ) {		foreach ( (array)$update_themes->response as $theme_slug => $theme_info ) {			if ( $theme_slug === $api->slug ) {				$type = 'update_available';				$update_file = $theme_slug;				break;			}		}	}	$themes = get_themes();	foreach ( $themes as $this_theme ) {		if ( is_array($this_theme) && $this_theme['Stylesheet'] == $api->slug ) {			if ( $this_theme['Version'] == $api->version ) {				$type = 'latest_installed';			} elseif ( $this_theme['Version'] > $api->version ) {				$type = 'newer_installed';				$newer_version = $this_theme['Version'];			}			break;		}	}?><div class='available-theme'><img src='<?php echo esc_url($api->screenshot_url) ?>' width='300' class="theme-preview-img" /><h3><?php echo $api->name; ?></h3><p><?php printf(__('by %s'), $api->author); ?></p><p><?php printf(__('Version: %s'), $api->version); ?></p><?php$buttons = '<a class="button" id="cancel" href="#" onclick="tb_close();return false;">' . __('Cancel') . '</a> ';switch ( $type ) {default:case 'install':	if ( current_user_can('install_themes') ) :	$buttons .= '<a class="button-primary" id="install" href="' . wp_nonce_url(admin_url('update.php?action=install-theme&theme=' . $api->slug), 'install-theme_' . $api->slug) . '" target="_parent">' . __('Install Now') . '</a>';	endif;	break;case 'update_available':	if ( current_user_can('update_themes') ) :	$buttons .= '<a class="button-primary" id="install"	href="' . wp_nonce_url(admin_url('update.php?action=upgrade-theme&theme=' . $update_file), 'upgrade-theme_' . $update_file) . '" target="_parent">' . __('Install Update Now') . '</a>';	endif;	break;case 'newer_installed':	if ( current_user_can('install_themes') || current_user_can('update_themes') ) :	?><p><?php printf(__('Newer version (%s) is installed.'), $newer_version); ?></p><?php	endif;	break;case 'latest_installed':	if ( current_user_can('install_themes') || current_user_can('update_themes') ) :	?><p><?php _e('This version is already installed.'); ?></p><?php	endif;	break;} ?><br class="clear" /></div><p class="action-button"><?php echo $buttons; ?><br class="clear" /></p><?php	iframe_footer();	exit;}
<?php/** * Plugins administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( is_multisite() ) {	$menu_perms = get_site_option( 'menu_items', array() );	if ( empty($menu_perms['plugins']) && ! is_super_admin() )		wp_die( __( 'Cheatin&#8217; uh?' ) );	else if ( $menu_perms['plugins'] != 1 && is_super_admin() )		add_action( 'admin_notices', '_admin_notice_multisite_activate_plugins_page' );}if ( ! current_user_can( 'activate_plugins' ) )	wp_die( __( 'You do not have sufficient permissions to manage plugins for this site.' ) );if ( isset($_POST['clear-recent-list']) )	$action = 'clear-recent-list';elseif ( !empty($_REQUEST['action']) )	$action = $_REQUEST['action'];elseif ( !empty($_REQUEST['action2']) )	$action = $_REQUEST['action2'];else	$action = false;$plugin = isset($_REQUEST['plugin']) ? $_REQUEST['plugin'] : '';$default_status = get_user_option('plugins_last_view');if ( empty($default_status) )	$default_status = 'all';$status = isset($_REQUEST['plugin_status']) ? $_REQUEST['plugin_status'] : $default_status;if ( !in_array($status, array('all', 'active', 'inactive', 'recent', 'upgrade', 'network', 'mustuse', 'dropins', 'search')) )	$status = 'all';if ( $status != $default_status && 'search' != $status )	update_user_meta($current_user->ID, 'plugins_last_view', $status);$page = isset($_REQUEST['paged']) ? $_REQUEST['paged'] : 1;//Clean up request URI from temporary args for screen options/paging uri's to work as expected.$_SERVER['REQUEST_URI'] = remove_query_arg(array('error', 'deleted', 'activate', 'activate-multi', 'deactivate', 'deactivate-multi', '_error_nonce'), $_SERVER['REQUEST_URI']);if ( !empty($action) ) {	$network_wide = false;	if ( ( isset( $_GET['networkwide'] ) || 'network-activate-selected' == $action ) && is_multisite() && current_user_can( 'manage_network_plugins' ) )		$network_wide = true;	switch ( $action ) {		case 'activate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('activate-plugin_' . $plugin);			$result = activate_plugin($plugin, 'plugins.php?error=true&plugin=' . $plugin, $network_wide);			if ( is_wp_error( $result ) ) {				if ( 'unexpected_output' == $result->get_error_code() ) {					$redirect = 'plugins.php?error=true&charsout=' . strlen($result->get_error_data()) . '&plugin=' . $plugin;					wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect));					exit;				} else {					wp_die($result);				}			}			$recent = (array)get_option('recently_activated');			if ( isset($recent[ $plugin ]) ) {				unset($recent[ $plugin ]);				update_option('recently_activated', $recent);			}			if ( isset($_GET['from']) && 'import' == $_GET['from'] ) {				wp_redirect("import.php?import=" . str_replace('-importer', '', dirname($plugin)) ); // overrides the ?error=true one above and redirects to the Imports page, striping the -importer suffix			} else {				wp_redirect("plugins.php?activate=true&plugin_status=$status&paged=$page"); // overrides the ?error=true one above			}			exit;			break;		case 'activate-selected':		case 'network-activate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); // Only activate plugins which are not already active.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			activate_plugins($plugins, 'plugins.php?error=true', $network_wide);			$recent = (array)get_option('recently_activated');			foreach ( $plugins as $plugin => $time)				if ( isset($recent[ $plugin ]) )					unset($recent[ $plugin ]);			update_option('recently_activated', $recent);			wp_redirect("plugins.php?activate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'update-selected' :			check_admin_referer( 'bulk-manage-plugins' );			if ( isset( $_GET['plugins'] ) )				$plugins = explode( ',', $_GET['plugins'] );			elseif ( isset( $_POST['checked'] ) )				$plugins = (array) $_POST['checked'];			else				$plugins = array();			$title = __( 'Upgrade Plugins' );			$parent_file = 'plugins.php';			require_once( './admin-header.php' );			echo '<div class="wrap">';			screen_icon();			echo '<h2>' . esc_html( $title ) . '</h2>';			$url = 'update.php?action=update-selected&amp;plugins=' . urlencode( join(',', $plugins) );			$url = wp_nonce_url($url, 'bulk-update-plugins');			echo "<iframe src='$url' style='width: 100%; height:100%; min-height:850px;'></iframe>";			echo '</div>';			require_once( './admin-footer.php' );			exit;			break;		case 'error_scrape':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to activate plugins for this site.'));			check_admin_referer('plugin-activation-error_' . $plugin);			$valid = validate_plugin($plugin);			if ( is_wp_error($valid) )				wp_die($valid);			if ( ! WP_DEBUG ) {				if ( defined('E_RECOVERABLE_ERROR') )					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);				else					error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			}			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			// Go back to "sandbox" scope so we get the same errors as before			function plugin_sandbox_scrape( $plugin ) {				include( WP_PLUGIN_DIR . '/' . $plugin );			}			plugin_sandbox_scrape( $plugin );			do_action('activate_' . $plugin);			exit;			break;		case 'deactivate':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('deactivate-plugin_' . $plugin);			deactivate_plugins($plugin);			update_option('recently_activated', array($plugin => time()) + (array)get_option('recently_activated'));			if (headers_sent())				echo "<meta http-equiv='refresh' content='" . esc_attr( "0;url=plugins.php?deactivate=true&plugin_status=$status&paged=$page" ) . "' />";			else				wp_redirect("plugins.php?deactivate=true&plugin_status=$status&paged=$page");			exit;			break;		case 'deactivate-selected':			if ( ! current_user_can('activate_plugins') )				wp_die(__('You do not have sufficient permissions to deactivate plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			$plugins = isset( $_POST['checked'] ) ? (array) $_POST['checked'] : array();			$plugins = array_filter($plugins, 'is_plugin_active'); //Do not deactivate plugins which are already deactivated.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			deactivate_plugins($plugins);			$deactivated = array();			foreach ( $plugins as $plugin )				$deactivated[ $plugin ] = time();			update_option('recently_activated', $deactivated + (array)get_option('recently_activated'));			wp_redirect("plugins.php?deactivate-multi=true&plugin_status=$status&paged=$page");			exit;			break;		case 'delete-selected':			if ( ! current_user_can('delete_plugins') )				wp_die(__('You do not have sufficient permissions to delete plugins for this site.'));			check_admin_referer('bulk-manage-plugins');			//$_POST = from the plugin form; $_GET = from the FTP details screen.			$plugins = isset( $_REQUEST['checked'] ) ? (array) $_REQUEST['checked'] : array();			$plugins = array_filter($plugins, create_function('$plugin', 'return !is_plugin_active($plugin);') ); //Do not allow to delete Activated plugins.			if ( empty($plugins) ) {				wp_redirect("plugins.php?plugin_status=$status&paged=$page");				exit;			}			include(ABSPATH . 'wp-admin/update.php');			$parent_file = 'plugins.php';			if ( ! isset($_REQUEST['verify-delete']) ) {				wp_enqueue_script('jquery');				require_once('./admin-header.php');				?>			<div class="wrap">				<?php					$files_to_delete = $plugin_info = array();					foreach ( (array) $plugins as $plugin ) {						if ( '.' == dirname($plugin) ) {							$files_to_delete[] = WP_PLUGIN_DIR . '/' . $plugin;							if( $data = get_plugin_data(WP_PLUGIN_DIR . '/' . $plugin) ) {								$plugin_info[ $plugin ] = $data;								$plugin_info[ $plugin ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );							}						} else {							// Locate all the files in that folder							$files = list_files( WP_PLUGIN_DIR . '/' . dirname($plugin) );							if ( $files ) {								$files_to_delete = array_merge($files_to_delete, $files);							}							// Get plugins list from that folder							if ( $folder_plugins = get_plugins( '/' . dirname($plugin)) ) {								foreach( $folder_plugins as $plugin_file => $data ) {									$plugin_info[ $plugin_file ] = $data;									$plugin_info[ $plugin_file ]['is_uninstallable'] = is_uninstallable_plugin( $plugin );								}							}						}					}					screen_icon();					$plugins_to_delete = count( $plugin_info );					echo '<h2>' . _n( 'Delete Plugin', 'Delete Plugins', $plugins_to_delete ) . '</h2>';				?>				<p><?php echo _n( 'You are about to remove the following plugin:', 'You are about to remove the following plugins:', $plugins_to_delete ); ?></p>					<ul class="ul-disc">						<?php						$data_to_delete = false;						foreach ( $plugin_info as $plugin ) {							if ( $plugin['is_uninstallable'] ) {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __( '<strong>%1$s</strong> by <em>%2$s</em> (will also <strong>delete its data</strong>)' ), $plugin['Name'], $plugin['Author'] ), '</li>';								$data_to_delete = true;							} else {								/* translators: 1: plugin name, 2: plugin author */								echo '<li>', sprintf( __('<strong>%1$s</strong> by <em>%2$s</em>' ), $plugin['Name'], $plugin['Author'] ), '</li>';							}						}						?>					</ul>				<p><?php				if ( $data_to_delete )					_e('Are you sure you wish to delete these files and data?');				else					_e('Are you sure you wish to delete these files?');				?></p>				<form method="post" action="<?php echo esc_url($_SERVER['REQUEST_URI']); ?>" style="display:inline;">					<input type="hidden" name="verify-delete" value="1" />					<input type="hidden" name="action" value="delete-selected" />					<?php						foreach ( (array)$plugins as $plugin )							echo '<input type="hidden" name="checked[]" value="' . esc_attr($plugin) . '" />';					?>					<?php wp_nonce_field('bulk-manage-plugins') ?>					<input type="submit" name="submit" value="<?php $data_to_delete ? esc_attr_e('Yes, Delete these files and data') : esc_attr_e('Yes, Delete these files') ?>" class="button" />				</form>				<form method="post" action="<?php echo esc_url(wp_get_referer()); ?>" style="display:inline;">					<input type="submit" name="submit" value="<?php esc_attr_e('No, Return me to the plugin list') ?>" class="button" />				</form>				<p><a href="#" onclick="jQuery('#files-list').toggle(); return false;"><?php _e('Click to view entire list of files which will be deleted'); ?></a></p>				<div id="files-list" style="display:none;">					<ul class="code">					<?php						foreach ( (array)$files_to_delete as $file )							echo '<li>' . str_replace(WP_PLUGIN_DIR, '', $file) . '</li>';					?>					</ul>				</div>			</div>				<?php				require_once('./admin-footer.php');				exit;			} //Endif verify-delete			$delete_result = delete_plugins($plugins);			set_transient('plugins_delete_result_'.$user_ID, $delete_result); //Store the result in a cache rather than a URL param due to object type & length			wp_redirect("plugins.php?deleted=true&plugin_status=$status&paged=$page");			exit;			break;		case 'clear-recent-list':			update_option('recently_activated', array());			break;	}}wp_enqueue_script('plugin-install');add_thickbox();add_contextual_help($current_screen,	'<p>' . __('Plugins extend and expand the functionality of WordPress. Once a plugin is installed, you may activate it or deactivate it here.') . '</p>' .	'<p>' . sprintf(__('You can find additional plugins for your site by using the <a href="%1$s">Plugin Browser/Installer</a> functionality or by browsing the <a href="%2$s" target="_blank">WordPress Plugin Directory</a> directly and installing new plugins manually. To manually install a plugin you generally just need to upload the plugin file into your <code>/wp-content/plugins</code> directory. Once a plugin has been installed, you can activate it here.'), 'plugin-install.php', 'http://wordpress.org/extend/plugins/') . '</p>' .	'<p>' . __('Most of the time, plugins play nicely with the core of WordPress and with other plugins. Sometimes, though, a plugin&#8217;s code will get in the way of another plugin, causing compatibility issues. If your site starts doing strange things, this may be the problem. Try deactivating all your plugins and re-activating them in various combinations until you isolate which one(s) caused the issue.') . '</p>' .	'<p>' . sprintf( __('If something goes wrong with a plugin and you can&#8217;t use WordPress, delete or rename that file in the <code>%s</code> directory and it will be automatically deactivated.'), WP_PLUGIN_DIR) . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Managing_Plugins#Plugin_Management" target="_blank">Documentation on Managing Plugins</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$title = __('Plugins');require_once('./admin-header.php');$invalid = validate_active_plugins();if ( !empty($invalid) )	foreach ( $invalid as $plugin_file => $error )		echo '<div id="message" class="error"><p>' . sprintf(__('The plugin <code>%s</code> has been <strong>deactivated</strong> due to an error: %s'), esc_html($plugin_file), $error->get_error_message()) . '</p></div>';?><?php if ( isset($_GET['error']) ) :	if ( isset($_GET['charsout']) )		$errmsg = sprintf(__('The plugin generated %d characters of <strong>unexpected output</strong> during activation.  If you notice &#8220;headers already sent&#8221; messages, problems with syndication feeds or other issues, try deactivating or removing this plugin.'), $_GET['charsout']);	else		$errmsg = __('Plugin could not be activated because it triggered a <strong>fatal error</strong>.');	?>	<div id="message" class="updated"><p><?php echo $errmsg; ?></p>	<?php		if ( !isset($_GET['charsout']) && wp_verify_nonce($_GET['_error_nonce'], 'plugin-activation-error_' . $plugin) ) { ?>	<iframe style="border:0" width="100%" height="70px" src="<?php echo admin_url('plugins.php?action=error_scrape&amp;plugin=' . esc_attr($plugin) . '&amp;_wpnonce=' . esc_attr($_GET['_error_nonce'])); ?>"></iframe>	<?php		}	?>	</div><?php elseif ( isset($_GET['deleted']) ) :		$delete_result = get_transient('plugins_delete_result_'.$user_ID);		delete_transient('plugins_delete_result'); //Delete it once we're done.		if ( is_wp_error($delete_result) ) : ?>		<div id="message" class="updated"><p><?php printf( __('Plugin could not be deleted due to an error: %s'), $delete_result->get_error_message() ); ?></p></div>		<?php else : ?>		<div id="message" class="updated"><p><?php _e('The selected plugins have been <strong>deleted</strong>.'); ?></p></div>		<?php endif; ?><?php elseif ( isset($_GET['activate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>activated</strong>.') ?></p></div><?php elseif (isset($_GET['activate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>activated</strong>.'); ?></p></div><?php elseif ( isset($_GET['deactivate']) ) : ?>	<div id="message" class="updated"><p><?php _e('Plugin <strong>deactivated</strong>.') ?></p></div><?php elseif (isset($_GET['deactivate-multi'])) : ?>	<div id="message" class="updated"><p><?php _e('Selected plugins <strong>deactivated</strong>.'); ?></p></div><?php elseif ( 'update-selected' == $action ) : ?>	<div id="message" class="updated"><p><?php _e('No out of date plugins were selected.'); ?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); if ( current_user_can('install_plugins') ) { ?> <a href="plugin-install.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'plugin'); ?></a><?php } ?></h2><?php$all_plugins = apply_filters( 'all_plugins', get_plugins() );$search_plugins = array();$active_plugins = array();$inactive_plugins = array();$recent_plugins = array();$recently_activated = get_option('recently_activated', array());$upgrade_plugins = array();$network_plugins = array();$mustuse_plugins = $dropins_plugins = array();if ( ! is_multisite() || current_user_can('manage_network_plugins') ) {	if ( apply_filters( 'show_advanced_plugins', true, 'mustuse' ) )		$mustuse_plugins = get_mu_plugins();	if ( apply_filters( 'show_advanced_plugins', true, 'dropins' ) )		$dropins_plugins = get_dropins();}set_transient( 'plugin_slugs', array_keys($all_plugins), 86400 );// Clean out any plugins which were deactivated over a week ago.foreach ( $recently_activated as $key => $time )	if ( $time + (7*24*60*60) < time() ) //1 week		unset($recently_activated[ $key ]);if ( $recently_activated != get_option('recently_activated') ) //If array changed, update it.	update_option('recently_activated', $recently_activated);$current = get_site_transient( 'update_plugins' );foreach ( array( 'all_plugins', 'mustuse_plugins', 'dropins_plugins' ) as $plugin_array_name) {	foreach ( (array) $$plugin_array_name as $plugin_file => $plugin_data ) {		// Translate, Apply Markup, Sanitize HTML		$plugin_data = _get_plugin_data_markup_translate($plugin_file, $plugin_data, false, true);		${$plugin_array_name}[ $plugin_file ] = $plugin_data;	}}unset( $plugin_array_name );foreach ( (array) $all_plugins as $plugin_file => $plugin_data) {	// Filter into individual sections	if ( is_multisite() && is_network_only_plugin( $plugin_file ) && !current_user_can( 'manage_network_plugins' ) ) {		unset( $all_plugins[ $plugin_file ] );		continue;	} elseif ( is_plugin_active_for_network($plugin_file) ) {		$network_plugins[ $plugin_file ] = $plugin_data;	} elseif ( is_plugin_active($plugin_file) ) {		$active_plugins[ $plugin_file ] = $plugin_data;	} else {		if ( isset( $recently_activated[ $plugin_file ] ) ) // Was the plugin recently activated?			$recent_plugins[ $plugin_file ] = $plugin_data;		$inactive_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $current->response[ $plugin_file ] ) )		$upgrade_plugins[ $plugin_file ] = $plugin_data;}if ( !current_user_can('update_plugins') )	$upgrade_plugins = array();$total_all_plugins = count($all_plugins);$total_inactive_plugins = count($inactive_plugins);$total_active_plugins = count($active_plugins);$total_recent_plugins = count($recent_plugins);$total_upgrade_plugins = count($upgrade_plugins);$total_network_plugins = count($network_plugins);$total_mustuse_plugins = count($mustuse_plugins);$total_dropins_plugins = count($dropins_plugins);// Searching.if ( !empty($_GET['s']) ) {	function _search_plugins_filter_callback($plugin) {		static $term;		if ( is_null($term) )			$term = stripslashes($_GET['s']);		if ( 	stripos($plugin['Name'], $term) !== false ||				stripos($plugin['Description'], $term) !== false ||				stripos($plugin['Author'], $term) !== false ||				stripos($plugin['PluginURI'], $term) !== false ||				stripos($plugin['AuthorURI'], $term) !== false ||				stripos($plugin['Version'], $term) !== false )			return true;		else			return false;	}	$status = 'search';	$search_plugins = array_filter($all_plugins, '_search_plugins_filter_callback');	$total_search_plugins = count($search_plugins);}$plugin_array_name = "${status}_plugins";if ( empty($$plugin_array_name) && !in_array($status, array('all', 'search')) ) {	$status = 'all';	$plugin_array_name = "${status}_plugins";}$plugins = &$$plugin_array_name;// Paging.$total_this_page = "total_{$status}_plugins";$total_this_page = $$total_this_page;$plugins_per_page = (int) get_user_option( 'plugins_per_page' );if ( empty( $plugins_per_page ) || $plugins_per_page < 1 )	$plugins_per_page = 999;$plugins_per_page = apply_filters( 'plugins_per_page', $plugins_per_page );$start = ($page - 1) * $plugins_per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total_this_page / $plugins_per_page),	'current' => $page));$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $plugins_per_page, $total_this_page ) ),	'<span class="total-type-count">' . number_format_i18n( $total_this_page ) . '</span>',	$page_links);/** * @ignore * * @param array $plugins * @param string $context */function print_plugins_table($plugins, $context = '') {	global $page;	$checkbox = ! in_array( $context, array( 'mustuse', 'dropins' ) ) ? '<input type="checkbox" />' : '';?><table class="widefat" cellspacing="0" id="<?php echo $context ?>-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><?php echo $checkbox; ?></th>		<th scope="col" class="manage-column"><?php _e('Plugin'); ?></th>		<th scope="col" class="manage-column"><?php _e('Description'); ?></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	if ( empty($plugins) ) {		echo '<tr>			<td colspan="3">' . __('No plugins to show') . '</td>		</tr>';	}	foreach ( (array)$plugins as $plugin_file => $plugin_data) {		// preorder		$actions = array(			'network_deactivate' => '', 'deactivate' => '',			'network_only' => '', 'activate' => '',			'network_activate' => '',			'edit' => '',			'delete' => '',		);		if ( 'mustuse' == $context ) {			$is_active = true;		} elseif ( 'dropins' == $context ) {			$dropins = _get_dropins();			$plugin_name = $plugin_file;			if ( $plugin_file != $plugin_data['Name'] )				$plugin_name .= '<br/>' . $plugin_data['Name'];			if ( true === ( $dropins[ $plugin_file ][1] ) ) { // Doesn't require a constant				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} elseif ( constant( $dropins[ $plugin_file ][1] ) ) { // Constant is true				$is_active = true;				$description = '<p><strong>' . $dropins[ $plugin_file ][0] . '</strong></p>';			} else {				$is_active = false;				$description = '<strong>' . $dropins[ $plugin_file ][0] . ' <span class="attention">' . __('Inactive:') . '</span></strong> ' . sprintf( __( 'Requires <code>%s</code> in <code>wp-config.php</code>.' ), "define('" . $dropins[ $plugin_file ][1] . "', true);" ) . '</p>';			}			$description .= '<p>' . $plugin_data['Description'] . '</p>';		} else {			$is_active_for_network = is_plugin_active_for_network($plugin_file);			$is_active = $is_active_for_network || is_plugin_active( $plugin_file );			if ( $is_active_for_network && !is_super_admin() )				continue;			if ( $is_active ) {				if ( $is_active_for_network ) {					if ( is_super_admin() )						$actions['network_deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Network Deactivate') . '</a>';				} else {					$actions['deactivate'] = '<a href="' . wp_nonce_url('plugins.php?action=deactivate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'deactivate-plugin_' . $plugin_file) . '" title="' . __('Deactivate this plugin') . '">' . __('Deactivate') . '</a>';				}			} else {				if ( is_multisite() && is_network_only_plugin( $plugin_file ) )					$actions['network_only'] = '<span title="' . __('This plugin can only be activated for all sites in a network') . '">' . __('Network Only') . '</span>';				else					$actions['activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin') . '" class="edit">' . __('Activate') . '</a>';				if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )					$actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" class="edit">' . __('Network Activate') . '</a>';				if ( current_user_can('delete_plugins') )					$actions['delete'] = '<a href="' . wp_nonce_url('plugins.php?action=delete-selected&amp;checked[]=' . $plugin_file . '&amp;plugin_status=' . $context . '&amp;paged=' . $page, 'bulk-manage-plugins') . '" title="' . __('Delete this plugin') . '" class="delete">' . __('Delete') . '</a>';			} // end if $is_active			if ( current_user_can('edit_plugins') && is_writable(WP_PLUGIN_DIR . '/' . $plugin_file) )				$actions['edit'] = '<a href="plugin-editor.php?file=' . $plugin_file . '" title="' . __('Open this file in the Plugin Editor') . '" class="edit">' . __('Edit') . '</a>';		} // end if $context		$actions = apply_filters( 'plugin_action_links', array_filter( $actions ), $plugin_file, $plugin_data, $context );		$actions = apply_filters( "plugin_action_links_$plugin_file", $actions, $plugin_file, $plugin_data, $context );		$class = $is_active ? 'active' : 'inactive';		$checkbox = in_array( $context, array( 'mustuse', 'dropins' ) ) ? '' : "<input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' />";		if ( 'dropins' != $context ) {			$description = '<p>' . $plugin_data['Description'] . '</p>';			$plugin_name = $plugin_data['Name'];		}		echo "	<tr class='$class'>		<th scope='row' class='check-column'>$checkbox</th>		<td class='plugin-title'><strong>$plugin_name</strong></td>		<td class='desc'>$description</td>	</tr>	<tr class='$class second'>		<td></td>		<td class='plugin-title'>";		echo '<div class="row-actions-visible">';		foreach ( $actions as $action => $link ) {			$sep = end($actions) == $link ? '' : ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo "</div></td>		<td class='desc'>";		$plugin_meta = array();		if ( !empty($plugin_data['Version']) )			$plugin_meta[] = sprintf(__('Version %s'), $plugin_data['Version']);		if ( !empty($plugin_data['Author']) ) {			$author = $plugin_data['Author'];			if ( !empty($plugin_data['AuthorURI']) )				$author = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';			$plugin_meta[] = sprintf( __('By %s'), $author );		}		if ( ! empty($plugin_data['PluginURI']) )			$plugin_meta[] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin site' ) . '">' . __('Visit plugin site') . '</a>';		$plugin_meta = apply_filters('plugin_row_meta', $plugin_meta, $plugin_file, $plugin_data, $context);		echo implode(' | ', $plugin_meta);		echo "</td>	</tr>\n";		do_action( 'after_plugin_row', $plugin_file, $plugin_data, $context );		do_action( "after_plugin_row_$plugin_file", $plugin_file, $plugin_data, $context );	}?>	</tbody></table><?php} //End print_plugins_table()/** * @ignore * * @param string $context */function print_plugin_actions($context, $field_name = 'action' ) {	if ( in_array( $context, array( 'mustuse', 'dropins' ) ) )		return;?>	<div class="alignleft actions">		<select name="<?php echo $field_name; ?>">			<option value="" selected="selected"><?php _e('Bulk Actions'); ?></option>	<?php if ( 'active' != $context ) : ?>			<option value="activate-selected"><?php _e('Activate'); ?></option>	<?php endif; ?>	<?php if ( is_multisite() && 'network' != $context ) : ?>			<option value="network-activate-selected"><?php _e('Network Activate'); ?></option>	<?php endif; ?>	<?php if ( 'inactive' != $context && 'recent' != $context ) : ?>			<option value="deactivate-selected"><?php _e('Deactivate'); ?></option>	<?php endif; ?>	<?php if ( current_user_can( 'update_plugins' ) ) : ?>			<option value="update-selected"><?php _e( 'Upgrade' ); ?></option>	<?php endif; ?>	<?php if ( current_user_can('delete_plugins') && ( 'active' != $context ) ) : ?>			<option value="delete-selected"><?php _e('Delete'); ?></option>	<?php endif; ?>		</select>		<input type="submit" name="doaction_active" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary action" />	<?php if ( 'recent' == $context ) : ?>		<input type="submit" name="clear-recent-list" value="<?php esc_attr_e('Clear List') ?>" class="button-secondary" />	<?php endif; ?>	</div><?php}?><form method="get" action=""><p class="search-box">	<label class="screen-reader-text" for="plugin-search-input"><?php _e( 'Search Plugins' ); ?>:</label>	<input type="text" id="plugin-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Installed Plugins' ); ?>" class="button" /></p></form><?php do_action( 'pre_current_active_plugins', $all_plugins ) ?><form method="post" action="<?php echo admin_url('plugins.php') ?>"><?php wp_nonce_field('bulk-manage-plugins') ?><input type="hidden" name="plugin_status" value="<?php echo esc_attr($status) ?>" /><input type="hidden" name="paged" value="<?php echo esc_attr($page) ?>" /><ul class="subsubsub"><?php$status_links = array();$class = ( 'all' == $status ) ? ' class="current"' : '';$status_links[] = "<li><a href='plugins.php?plugin_status=all' $class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_all_plugins, 'plugins' ), number_format_i18n( $total_all_plugins ) ) . '</a>';if ( ! empty($active_plugins) ) {	$class = ( 'active' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=active' $class>" . sprintf( _n( 'Active <span class="count">(%s)</span>', 'Active <span class="count">(%s)</span>', $total_active_plugins ), number_format_i18n( $total_active_plugins ) ) . '</a>';}if ( ! empty($recent_plugins) ) {	$class = ( 'recent' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=recent' $class>" . sprintf( _n( 'Recently Active <span class="count">(%s)</span>', 'Recently Active <span class="count">(%s)</span>', $total_recent_plugins ), number_format_i18n( $total_recent_plugins ) ) . '</a>';}if ( ! empty($inactive_plugins) ) {	$class = ( 'inactive' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=inactive' $class>" . sprintf( _n( 'Inactive <span class="count">(%s)</span>', 'Inactive <span class="count">(%s)</span>', $total_inactive_plugins ), number_format_i18n( $total_inactive_plugins ) ) . '</a>';}if ( ! empty($network_plugins) ) {	$class = ( 'network' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=network' $class>" . sprintf( _n( 'Network <span class="count">(%s)</span>', 'Network <span class="count">(%s)</span>', $total_network_plugins ), number_format_i18n( $total_network_plugins ) ) . '</a>';}if ( ! empty($mustuse_plugins) ) {	$class = ( 'mustuse' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=mustuse' $class>" . sprintf( _n( 'Must-Use <span class="count">(%s)</span>', 'Must-Use <span class="count">(%s)</span>', $total_mustuse_plugins ), number_format_i18n( $total_mustuse_plugins ) ) . '</a>';}if ( ! empty($dropins_plugins) ) {	$class = ( 'dropins' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=dropins' $class>" . sprintf( _n( 'Drop-ins <span class="count">(%s)</span>', 'Drop-ins <span class="count">(%s)</span>', $total_dropins_plugins ), number_format_i18n( $total_dropins_plugins ) ) . '</a>';}if ( ! empty($upgrade_plugins) ) {	$class = ( 'upgrade' == $status ) ? ' class="current"' : '';	$status_links[] = "<li><a href='plugins.php?plugin_status=upgrade' $class>" . sprintf( _n( 'Upgrade Available <span class="count">(%s)</span>', 'Upgrade Available <span class="count">(%s)</span>', $total_upgrade_plugins ), number_format_i18n( $total_upgrade_plugins ) ) . '</a>';}if ( ! empty($search_plugins) ) {	$class = ( 'search' == $status ) ? ' class="current"' : '';	$term = isset($_REQUEST['s']) ? urlencode(stripslashes($_REQUEST['s'])) : '';	$status_links[] = "<li><a href='plugins.php?s=$term' $class>" . sprintf( _n( 'Search Results <span class="count">(%s)</span>', 'Search Results <span class="count">(%s)</span>', $total_search_plugins ), number_format_i18n( $total_search_plugins ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );?></ul><?phpif ( 'mustuse' == $status )	echo '<div class="clear"><p>' . __( 'Files in the <code>/wp-content/mu-plugins</code> directory are executed automatically.' ) . '</p>';elseif ( 'dropins' == $status )	echo '<div class="clear"><p>' . __( 'Drop-ins are advanced plugins in the <code>/wp-content</code> directory that replace WordPress functionality when present.' ) . '</p>';if ( !empty( $plugins ) && ( ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) ) :?><div class="tablenav"><?phpif ( $page_links )	echo '<div class="tablenav-pages">', $page_links_text, '</div>';print_plugin_actions($status);?></div><div class="clear"></div><?phpendif;if ( $total_this_page > $plugins_per_page )	$plugins = array_slice($plugins, $start, $plugins_per_page);print_plugins_table($plugins, $status);if ( !empty( $plugins ) && ! in_array( $status, array( 'mustuse', 'dropins' ) ) || $page_links ) {?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";print_plugin_actions($status, "action2");?></div><?php } elseif ( ! empty( $all_plugins ) ) { ?><p><?php __( 'No plugins found.' ); ?></p><?php } ?></form><?php if ( empty($all_plugins) ) : ?><br class="clear" /><p><?php _e('You do not appear to have any plugins available at this time.') ?></p><?php endif; ?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
<?php/** * Edit post administration panel. * * Manage Post actions: post, edit, delete, etc. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'edit.php';$submenu_file = 'edit.php';wp_reset_vars(array('action', 'safe_mode', 'withcomments', 'posts', 'content', 'edited_post_title', 'comment_error', 'profile', 'trackback_url', 'excerpt', 'showcomments', 'commentstart', 'commentend', 'commentorder'));if ( isset($_GET['post']) )	$post_id = (int) $_GET['post'];elseif ( isset($_POST['post_ID']) )	$post_id = (int) $_POST['post_ID'];else	$post_id = 0;$post_ID = $post_id;$post = null;$post_type_object = null;$post_type = null;if ( $post_id ) {	$post = get_post($post_id);	if ( $post ) {		$post_type_object = get_post_type_object($post->post_type);		if ( $post_type_object ) {			$post_type = $post->post_type;			$current_screen->post_type = $post->post_type;			$current_screen->id = $current_screen->post_type;		}	}} elseif ( isset($_POST['post_type']) ) {	$post_type_object = get_post_type_object($_POST['post_type']);	if ( $post_type_object ) {		$post_type = $post_type_object->name;		$current_screen->post_type = $post_type;		$current_screen->id = $current_screen->post_type;	}}/** * Redirect to previous page. * * @param int $post_id Optional. Post ID. */function redirect_post($post_id = '') {	if ( !empty($_POST['mode']) && 'sidebar' == $_POST['mode'] ) {		if ( isset($_POST['saveasdraft']) )			$location = 'sidebar.php?a=c';		elseif ( isset($_POST['publish']) )			$location = 'sidebar.php?a=b';	} elseif ( isset($_POST['save']) || isset($_POST['publish']) ) {		$status = get_post_status( $post_id );		if ( isset( $_POST['publish'] ) ) {			switch ( $status ) {				case 'pending':					$message = 8;					break;				case 'future':					$message = 9;					break;				default:					$message = 6;			}		} else {				$message = 'draft' == $status ? 10 : 1;		}		$location = add_query_arg( 'message', $message, get_edit_post_link( $post_id, 'url' ) );	} elseif ( isset($_POST['addmeta']) && $_POST['addmeta'] ) {		$location = add_query_arg( 'message', 2, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( isset($_POST['deletemeta']) && $_POST['deletemeta'] ) {		$location = add_query_arg( 'message', 3, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( 'post-quickpress-save-cont' == $_POST['action'] ) {		$location = "post.php?action=edit&post=$post_id&message=7";	} else {		$location = add_query_arg( 'message', 4, get_edit_post_link( $post_id, 'url' ) );	}	wp_redirect( apply_filters( 'redirect_post_location', $location, $post_id ) );}if ( isset( $_POST['deletepost'] ) )	$action = 'delete';elseif ( isset($_POST['wp-preview']) && 'dopreview' == $_POST['wp-preview'] )	$action = 'preview';$sendback = wp_get_referer();if ( strpos($sendback, 'post.php') !== false || strpos($sendback, 'post-new.php') !== false ) {	$sendback = admin_url('edit.php');	$sendback .= ( !empty( $post_type ) ) ? '?post_type=' . $post_type : '';} else {	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), $sendback );}switch($action) {case 'postajaxpost':case 'post':case 'post-quickpress-publish':case 'post-quickpress-save':	check_admin_referer('add-' . $post_type);	if ( 'post-quickpress-publish' == $action )		$_POST['publish'] = 'publish'; // tell write_post() to publish	if ( 'post-quickpress-publish' == $action || 'post-quickpress-save' == $action ) {		$_POST['comment_status'] = get_option('default_comment_status');		$_POST['ping_status'] = get_option('default_ping_status');	}	if ( !empty( $_POST['quickpress_post_ID'] ) ) {		$_POST['post_ID'] = (int) $_POST['quickpress_post_ID'];		$post_id = edit_post();	} else {		$post_id = 'postajaxpost' == $action ? edit_post() : write_post();	}	if ( 0 === strpos( $action, 'post-quickpress' ) ) {		$_POST['post_ID'] = $post_id;		// output the quickpress dashboard widget		require_once(ABSPATH . 'wp-admin/includes/dashboard.php');		wp_dashboard_quick_press_output();		exit;	}	redirect_post($post_id);	exit();	break;case 'edit':	$editing = true;	if ( empty( $post_id ) ) {		wp_redirect("post.php");		exit();	}	$p = $post_id;	if ( empty($post->ID) )		wp_die( __('You attempted to edit an item that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( !current_user_can($post_type_object->cap->edit_post, $post_id) )		wp_die( __('You are not allowed to edit this item.') );	if ( 'trash' == $post->post_status )		wp_die( __('You can&#8217;t edit this item because it is in the Trash. Please restore it and try again.') );	if ( null == $post_type_object )		wp_die( __('Unknown post type.') );	$post_type = $post->post_type;	if ( 'post' == $post_type ) {		$parent_file = "edit.php";		$submenu_file = "edit.php";	} else {		$parent_file = "edit.php?post_type=$post_type";		$submenu_file = "edit.php?post_type=$post_type";	}	if ( $last = wp_check_post_lock( $post->ID ) ) {		add_action('admin_notices', '_admin_notice_post_locked' );	} else {		wp_set_post_lock( $post->ID );		wp_enqueue_script('autosave');	}	$title = $post_type_object->labels->edit_item;	$post = get_post_to_edit($post_id);	if ( post_type_supports($post_type, 'comments') ) {		wp_enqueue_script('admin-comments');		enqueue_comment_hotkeys_js();	}	include('./edit-form-advanced.php');	break;case 'editattachment':	check_admin_referer('update-attachment_' . $post_id);	// Don't let these be changed	unset($_POST['guid']);	$_POST['post_type'] = 'attachment';	// Update the thumbnail filename	$newmeta = wp_get_attachment_metadata( $post_id, true );	$newmeta['thumb'] = $_POST['thumb'];	wp_update_attachment_metadata( $post_id, $newmeta );case 'editpost':	check_admin_referer('update-' . $post_type . '_' . $post_id);	$post_id = edit_post();	redirect_post($post_id); // Send user on their way while we keep working	exit();	break;case 'trash':	check_admin_referer('trash-' . $post_type . '_' . $post_id);	$post = & get_post($post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item to the Trash.') );	if ( ! wp_trash_post($post_id) )		wp_die( __('Error in moving to Trash.') );	wp_redirect( add_query_arg( array('trashed' => 1, 'ids' => $post_id), $sendback ) );	exit();	break;case 'untrash':	check_admin_referer('untrash-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item out of the Trash.') );	if ( ! wp_untrash_post($post_id) )		wp_die( __('Error in restoring from Trash.') );	wp_redirect( add_query_arg('untrashed', 1, $sendback) );	exit();	break;case 'delete':	check_admin_referer('delete-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to delete this item.') );	$force = !EMPTY_TRASH_DAYS;	if ( $post->post_type == 'attachment' ) {		$force = ( $force || !MEDIA_TRASH );		if ( ! wp_delete_attachment($post_id, $force) )			wp_die( __('Error in deleting.') );	} else {		if ( !wp_delete_post($post_id, $force) )			wp_die( __('Error in deleting.') );	}	wp_redirect( add_query_arg('deleted', 1, $sendback) );	exit();	break;case 'preview':	check_admin_referer( 'autosave', 'autosavenonce' );	$url = post_preview();	wp_redirect($url);	exit();	break;default:		wp_redirect('edit.php');	exit();	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * WordPress Administration Media API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_tabs() {	$_default_tabs = array(		'type' => __('From Computer'), // handler action suffix => tab text		'type_url' => __('From URL'),		'gallery' => __('Gallery'),		'library' => __('Media Library')	);	return apply_filters('media_upload_tabs', $_default_tabs);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tabs * @return unknown */function update_gallery_tab($tabs) {	global $wpdb;	if ( !isset($_REQUEST['post_id']) ) {		unset($tabs['gallery']);		return $tabs;	}	$post_id = intval($_REQUEST['post_id']);	if ( $post_id )		$attachments = intval( $wpdb->get_var( $wpdb->prepare( "SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d", $post_id ) ) );	if ( empty($attachments) ) {		unset($tabs['gallery']);		return $tabs;	}	$tabs['gallery'] = sprintf(__('Gallery (%s)'), "<span id='attachments-count'>$attachments</span>");	return $tabs;}add_filter('media_upload_tabs', 'update_gallery_tab');/** * {@internal Missing Short Description}} * * @since unknown */function the_media_upload_tabs() {	global $redir_tab;	$tabs = media_upload_tabs();	if ( !empty($tabs) ) {		echo "<ul id='sidemenu'>\n";		if ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) )			$current = $redir_tab;		elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) )			$current = $_GET['tab'];		else			$current = apply_filters('media_upload_default_tab', 'type');		foreach ( $tabs as $callback => $text ) {			$class = '';			if ( $current == $callback )				$class = " class='current'";			$href = add_query_arg(array('tab'=>$callback, 's'=>false, 'paged'=>false, 'post_mime_type'=>false, 'm'=>false));			$link = "<a href='" . esc_url($href) . "'$class>$text</a>";			echo "\t<li id='" . esc_attr("tab-$callback") . "'>$link</li>\n";		}		echo "</ul>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $rel * @param unknown_type $size * @return unknown */function get_image_send_to_editor($id, $caption, $title, $align, $url='', $rel = false, $size='medium', $alt = '') {	$html = get_image_tag($id, $alt, $title, $align, $size);	$rel = $rel ? ' rel="attachment wp-att-' . esc_attr($id).'"' : '';	if ( $url )		$html = '<a href="' . esc_attr($url) . "\"$rel>$html</a>";	$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );	return $html;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $size * @return unknown */function image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {	if ( empty($caption) || apply_filters( 'disable_captions', '' ) )		return $html;	$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';	if ( ! preg_match( '/width="([0-9]+)/', $html, $matches ) )		return $html;	$width = $matches[1];	$html = preg_replace( '/(class=["\'][^\'"]*)align(none|left|right|center)\s?/', '$1', $html );	if ( empty($align) )		$align = 'none';	$shcode = '[caption id="' . $id . '" align="align' . $align	. '" width="' . $width . '" caption="' . addslashes($caption) . '"]' . $html . '[/caption]';	return apply_filters( 'image_add_caption_shortcode', $shcode, $html );}add_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html */function media_send_to_editor($html) {?><script type="text/javascript">/* <![CDATA[ */var win = window.dialogArguments || opener || parent || top;win.send_to_editor('<?php echo addslashes($html); ?>');/* ]]> */</script><?php	exit;}/** * {@internal Missing Short Description}} * * This handles the file upload POST itself, creating the attachment post. * * @since unknown * * @param string $file_id Index into the {@link $_FILES} array of the upload * @param int $post_id The post ID the media is associated with * @param array $post_data allows you to overwrite some of the attachment * @param array $overrides allows you to override the {@link wp_handle_upload()} behavior * @return int the ID of the attachment */function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {	$time = current_time('mysql');	if ( $post = get_post($post_id) ) {		if ( substr( $post->post_date, 0, 4 ) > 0 )			$time = $post->post_date;	}	$name = $_FILES[$file_id]['name'];	$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$name_parts = pathinfo($name);	$name = trim( substr( $name, 0, -(1 + strlen($name_parts['extension'])) ) );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = $name;	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the data	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );	}	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file_array * @param unknown_type $post_id * @param unknown_type $desc * @param unknown_type $post_data * @return unknown */function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array()) {	$overrides = array('test_form'=>false);	$file = wp_handle_sideload($file_array, $overrides);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = preg_replace('/\.[^.]+$/', '', basename($file));	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	$title = @$desc;	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the attachment metadata	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		return $url;	}	return $id;}/** * {@internal Missing Short Description}} * * Wrap iframe content (produced by $content_func) in a doctype, html head/body * etc any additional function args will be passed to content_func. * * @since unknown * * @param unknown_type $content_func */function wp_iframe($content_func /* ... */) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );// Check callback name for 'media'if ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) ) || 0 === strpos( $content_func, 'media' ) )	wp_enqueue_style( 'media' );wp_enqueue_style( 'ie' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time(); ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup';//]]></script><?phpdo_action('admin_enqueue_scripts', 'media-upload-popup');do_action('admin_print_styles-media-upload-popup');do_action('admin_print_styles');do_action('admin_print_scripts-media-upload-popup');do_action('admin_print_scripts');do_action('admin_head-media-upload-popup');do_action('admin_head');if ( is_string($content_func) )	do_action( "admin_head_{$content_func}" );?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>><?php	$args = func_get_args();	$args = array_slice($args, 1);	call_user_func_array($content_func, $args);	do_action('admin_print_footer_scripts');?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html><?php}/** * {@internal Missing Short Description}} * * @since unknown */function media_buttons() {	$do_image = $do_audio = $do_video = true;	if ( is_multisite() ) {		$media_buttons = get_site_option( 'mu_media_buttons' );		if ( empty($media_buttons['image']) )			$do_image = false;		if ( empty($media_buttons['audio']) )			$do_audio = false;		if ( empty($media_buttons['video']) )			$do_video = false;	}	$out = '';	if ( $do_image )		$out .= _media_button(__('Add an Image'), 'images/media-button-image.gif?ver=20100531', 'image');	if ( $do_video )		$out .= _media_button(__('Add Video'), 'images/media-button-video.gif?ver=20100531', 'video');	if ( $do_audio )		$out .= _media_button(__('Add Audio'), 'images/media-button-music.gif?ver=20100531', 'audio');	$out .= _media_button(__('Add Media'), 'images/media-button-other.gif?ver=20100531', 'media');	$context = apply_filters('media_buttons_context', __('Upload/Insert %s'));	printf($context, $out);}add_action( 'media_buttons', 'media_buttons' );function _media_button($title, $icon, $type) {	return "<a href='" . esc_url( get_upload_iframe_src($type) ) . "' id='add_$type' class='thickbox' title='$title'><img src='" . esc_url( admin_url( $icon ) ) . "' alt='$title' /></a>";}function get_upload_iframe_src($type) {	global $post_ID, $temp_ID;	$uploading_iframe_ID = (int) (0 == $post_ID ? $temp_ID : $post_ID);	$upload_iframe_src = add_query_arg('post_id', $uploading_iframe_ID, 'media-upload.php');	if ( 'media' != $type )		$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);	$upload_iframe_src = apply_filters($type . '_upload_iframe_src', $upload_iframe_src);	return add_query_arg('TB_iframe', true, $upload_iframe_src);}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_form_handler() {	check_admin_referer('media-form');	$errors = null;	if ( isset($_POST['send']) ) {		$keys = array_keys($_POST['send']);		$send_id = (int) array_shift($keys);	}	if ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {		$post = $_post = get_post($attachment_id, ARRAY_A);		if ( isset($attachment['post_content']) )			$post['post_content'] = $attachment['post_content'];		if ( isset($attachment['post_title']) )			$post['post_title'] = $attachment['post_title'];		if ( isset($attachment['post_excerpt']) )			$post['post_excerpt'] = $attachment['post_excerpt'];		if ( isset($attachment['menu_order']) )			$post['menu_order'] = $attachment['menu_order'];		if ( isset($send_id) && $attachment_id == $send_id ) {			if ( isset($attachment['post_parent']) )				$post['post_parent'] = $attachment['post_parent'];		}		$post = apply_filters('attachment_fields_to_save', $post, $attachment);		if ( isset($attachment['image_alt']) ) {			$image_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);			if ( $image_alt != stripslashes($attachment['image_alt']) ) {				$image_alt = wp_strip_all_tags( stripslashes($attachment['image_alt']), true );				// update_meta expects slashed				update_post_meta( $attachment_id, '_wp_attachment_image_alt', addslashes($image_alt) );			}		}		if ( isset($post['errors']) ) {			$errors[$attachment_id] = $post['errors'];			unset($post['errors']);		}		if ( $post != $_post )			wp_update_post($post);		foreach ( get_attachment_taxonomies($post) as $t ) {			if ( isset($attachment[$t]) )				wp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);		}	}	if ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>		<script type="text/javascript">		/* <![CDATA[ */		var win = window.dialogArguments || opener || parent || top;		win.tb_remove();		/* ]]> */		</script>		<?php		exit;	}	if ( isset($send_id) ) {		$attachment = stripslashes_deep( $_POST['attachments'][$send_id] );		$html = $attachment['post_title'];		if ( !empty($attachment['url']) ) {			$rel = '';			if ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )				$rel = " rel='attachment wp-att-" . esc_attr($send_id) . "'";			$html = "<a href='{$attachment['url']}'$rel>$html</a>";		}		$html = apply_filters('media_send_to_editor', $html, $send_id, $attachment);		return media_send_to_editor($html);	}	return $errors;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_image() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$alt = $align = '';		$src = $_POST['insertonly']['src'];		if ( !empty($src) && !strpos($src, '://') )			$src = "http://$src";		$alt = esc_attr($_POST['insertonly']['alt']);		if ( isset($_POST['insertonly']['align']) ) {			$align = esc_attr($_POST['insertonly']['align']);			$class = " class='align$align'";		}		if ( !empty($src) )			$html = "<img src='" . esc_url($src) . "' alt='$alt'$class />";		$html = apply_filters('image_send_to_editor_url', $html, esc_url_raw($src), $alt, $align);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'image', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'image', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $post_id * @param unknown_type $desc * @return unknown */function media_sideload_image($file, $post_id, $desc = null) {	if (!empty($file) ) {		// Download file to temp location		$tmp = download_url($file);		// Set variables for storage		// fix file filename for query strings		preg_match('/[^\?]+\.(jpg|JPG|jpe|JPE|jpeg|JPEG|gif|GIF|png|PNG)/', $file, $matches);		$file_array['name'] = basename($matches[0]);		$file_array['tmp_name'] = $tmp;		// If error storing temporarily, unlink		if ( is_wp_error($tmp) ) {			@unlink($file_array['tmp_name']);			$file_array['tmp_name'] = '';		}		// do the validation and storage stuff		$id = media_handle_sideload($file_array, $post_id, @$desc);		$src = $id;		// If error storing permanently, unlink		if ( is_wp_error($id) ) {			@unlink($file_array['tmp_name']);			return $id;		}	}	// Finally check to make sure the file has been saved, then return the html	if ( !empty($src) ) {		$alt = @$desc;		$html = "<img src='$src' alt='$alt' />";		return $html;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_audio() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('audio_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'audio', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'audio', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_video() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);        if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('video_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'video', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'video', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_file() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )			$title = basename($href);		if ( !empty($title) && !empty($href) )			$html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('file_send_to_editor_url', $html, esc_url_raw($href), $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'file', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'file', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_gallery() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	wp_enqueue_script('admin-gallery');	return wp_iframe( 'media_upload_gallery_form', $errors );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_library() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	return wp_iframe( 'media_upload_library_form', $errors );}/** * Retrieve HTML for the image alignment radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_align_input_fields( $post, $checked = '' ) {	if ( empty($checked) )		$checked = get_user_setting('align', 'none');	$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));	if ( !array_key_exists( (string) $checked, $alignments ) )		$checked = 'none';	$out = array();	foreach ( $alignments as $name => $label ) {		$name = esc_attr($name);		$out[] = "<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'".		 	( $checked == $name ? " checked='checked'" : "" ) .			" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>";	}	return join("\n", $out);}/** * Retrieve HTML for the size radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_size_input_fields( $post, $check = '' ) {		// get a list of the actual pixel dimensions of each possible intermediate version of this image		$size_names = array('thumbnail' => __('Thumbnail'), 'medium' => __('Medium'), 'large' => __('Large'), 'full' => __('Full Size'));		if ( empty($check) )			$check = get_user_setting('imgsize', 'medium');		foreach ( $size_names as $size => $label ) {			$downsize = image_downsize($post->ID, $size);			$checked = '';			// is this size selectable?			$enabled = ( $downsize[3] || 'full' == $size );			$css_id = "image-size-{$size}-{$post->ID}";			// if this size is the default but that's not available, don't select it			if ( $size == $check ) {				if ( $enabled )					$checked = " checked='checked'";				else					$check = '';			} elseif ( !$check && $enabled && 'thumbnail' != $size ) {				// if $check is not enabled, default to the first available size that's bigger than a thumbnail				$check = $size;				$checked = " checked='checked'";			}			$html = "<div class='image-size-item'><input type='radio' " . disabled( $enabled, false, false ) . "name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />";			$html .= "<label for='{$css_id}'>$label</label>";			// only show the dimensions if that choice is available			if ( $enabled )				$html .= " <label for='{$css_id}' class='help'>" . sprintf( "(%d&nbsp;&times;&nbsp;%d)", $downsize[1], $downsize[2] ). "</label>";			$html .= '</div>';			$out[] = $html;		}		return array(			'label' => __('Size'),			'input' => 'html',			'html'  => join("\n", $out),		);}/** * Retrieve HTML for the Link URL buttons with the default link type as specified. * * @since unknown * * @param unknown_type $post * @param unknown_type $url_type * @return unknown */function image_link_input_fields($post, $url_type = '') {	$file = wp_get_attachment_url($post->ID);	$link = get_attachment_link($post->ID);	if ( empty($url_type) )		$url_type = get_user_setting('urlbutton', 'post');	$url = '';	if ( $url_type == 'file' )		$url = $file;	elseif ( $url_type == 'post' )		$url = $link;	return "	<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='" . esc_attr($url) . "' /><br />	<button type='button' class='button urlnone' title=''>" . __('None') . "</button>	<button type='button' class='button urlfile' title='" . esc_attr($file) . "'>" . __('File URL') . "</button>	<button type='button' class='button urlpost' title='" . esc_attr($link) . "'>" . __('Post URL') . "</button>";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function image_attachment_fields_to_edit($form_fields, $post) {	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);		if ( empty($alt) )			$alt = '';		$form_fields['post_title']['required'] = true;		$form_fields['image_alt'] = array(			'value' => $alt,			'label' => __('Alternate Text'),			'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')		);		$form_fields['align'] = array(			'label' => __('Alignment'),			'input' => 'html',			'html'  => image_align_input_fields($post, get_option('image_default_align')),		);		$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );	} else {		unset( $form_fields['image_alt'] );	}	return $form_fields;}add_filter('attachment_fields_to_edit', 'image_attachment_fields_to_edit', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function media_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);	return $form_fields;}function media_post_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['image_url']);	return $form_fields;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $attachment * @return unknown */function image_attachment_fields_to_save($post, $attachment) {	if ( substr($post['post_mime_type'], 0, 5) == 'image' ) {		if ( strlen(trim($post['post_title'])) == 0 ) {			$post['post_title'] = preg_replace('/\.\w+$/', '', basename($post['guid']));			$post['errors']['post_title']['errors'][] = __('Empty Title filled from filename.');		}	}	return $post;}add_filter('attachment_fields_to_save', 'image_attachment_fields_to_save', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $attachment_id * @param unknown_type $attachment * @return unknown */function image_media_send_to_editor($html, $attachment_id, $attachment) {	$post =& get_post($attachment_id);	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$url = $attachment['url'];		$align = !empty($attachment['align']) ? $attachment['align'] : 'none';		$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';		$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';		$rel = ( $url == get_attachment_link($attachment_id) );		return get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);	}	return $html;}add_filter('media_send_to_editor', 'image_media_send_to_editor', 10, 3);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $errors * @return unknown */function get_attachment_fields_to_edit($post, $errors = null) {	if ( is_int($post) )		$post =& get_post($post);	if ( is_array($post) )		$post = (object) $post;	$image_url = wp_get_attachment_url($post->ID);	$edit_post = sanitize_post($post, 'edit');	$form_fields = array(		'post_title'   => array(			'label'      => __('Title'),			'value'      => $edit_post->post_title		),		'image_alt'   => array(),		'post_excerpt' => array(			'label'      => __('Caption'),			'value'      => $edit_post->post_excerpt		),		'post_content' => array(			'label'      => __('Description'),			'value'      => $edit_post->post_content,			'input'      => 'textarea'		),		'url'          => array(			'label'      => __('Link URL'),			'input'      => 'html',			'html'       => image_link_input_fields($post, get_option('image_default_link_type')),			'helps'      => __('Enter a link URL or click above for presets.')		),		'menu_order'   => array(			'label'      => __('Order'),			'value'      => $edit_post->menu_order		),		'image_url'	=> array(			'label'      => __('File URL'),			'input'      => 'html',			'html'       => "<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='" . esc_attr($image_url) . "' /><br />",			'value'      => wp_get_attachment_url($post->ID),			'helps'      => __('Location of the uploaded file.')		)	);	foreach ( get_attachment_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$values = array();		foreach ( $terms as $term )			$values[] = $term->name;		$t['value'] = join(', ', $values);		$form_fields[$taxonomy] = $t;	}	// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default	// The recursive merge is easily traversed with array casting: foreach( (array) $things as $thing )	$form_fields = array_merge_recursive($form_fields, (array) $errors);	$form_fields = apply_filters('attachment_fields_to_edit', $form_fields, $post);	return $form_fields;}/** * Retrieve HTML for media items of post gallery. * * The HTML markup retrieved will be created for the progress of SWF Upload * component. Will also create link for showing and hiding the form to modify * the image attachment. * * @since unknown * * @param int $post_id Optional. Post ID. * @param array $errors Errors for attachment, if any. * @return string */function get_media_items( $post_id, $errors ) {	$attachments = array();	if ( $post_id ) {		$post = get_post($post_id);		if ( $post && $post->post_type == 'attachment' )			$attachments = array($post->ID => $post);		else			$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );	} else {		if ( is_array($GLOBALS['wp_the_query']->posts) )			foreach ( $GLOBALS['wp_the_query']->posts as $attachment )				$attachments[$attachment->ID] = $attachment;	}	$output = '';	foreach ( (array) $attachments as $id => $attachment ) {		if ( $attachment->post_status == 'trash' )			continue;		if ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )			$output .= "\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress'><div class='bar'></div></div><div id='media-upload-error-$id'></div><div class='filename'></div>$item\n</div>";	}	return $output;}/** * Retrieve HTML form for modifying the image attachment. * * @since unknown * * @param int $attachment_id Attachment ID for modification. * @param string|array $args Optional. Override defaults. * @return string HTML form for attachment. */function get_media_item( $attachment_id, $args = null ) {	global $redir_tab;	if ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )		$thumb_url = $thumb_url[0];	else		$thumb_url = false;	$post = get_post( $attachment_id );	$default_args = array( 'errors' => null, 'send' => post_type_supports(get_post_type($post->post_parent), 'editor'), 'delete' => true, 'toggle' => true, 'show_title' => true );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$toggle_on  = __( 'Show' );	$toggle_off = __( 'Hide' );	$filename = basename( $post->guid );	$title = esc_attr( $post->post_title );	if ( $_tags = get_the_tags( $attachment_id ) ) {		foreach ( $_tags as $tag )			$tags[] = $tag->name;		$tags = esc_attr( join( ', ', $tags ) );	}	$post_mime_types = get_post_mime_types();	$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );	$type = array_shift( $keys );	$type_html = "<input type='hidden' id='type-of-$attachment_id' value='" . esc_attr( $type ) . "' />";	$form_fields = get_attachment_fields_to_edit( $post, $errors );	if ( $toggle ) {		$class = empty( $errors ) ? 'startclosed' : 'startopen';		$toggle_links = "	<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>	<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>";	} else {		$class = 'form-table';		$toggle_links = '';	}	$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case	$display_title = $show_title ? "<div class='filename new'><span class='title'>" . wp_html_excerpt( $display_title, 60 ) . "</span></div>" : '';	$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );	$order = '';	foreach ( $form_fields as $key => $val ) {		if ( 'menu_order' == $key ) {			if ( $gallery )				$order = "<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ). "' /></div>";			else				$order = "<input type='hidden' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ) . "' />";			unset( $form_fields['menu_order'] );			break;		}	}	$media_dims = '';	$meta = wp_get_attachment_metadata( $post->ID );	if ( is_array( $meta ) && array_key_exists( 'width', $meta ) && array_key_exists( 'height', $meta ) )		$media_dims .= "<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> ";	$media_dims = apply_filters( 'media_meta', $media_dims, $post );	$image_edit_button = '';	if ( gd_edit_image_support( $post->post_mime_type ) ) {		$nonce = wp_create_nonce( "image_editor-$post->ID" );		$image_edit_button = "<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \"$nonce\" )' class='button' value='" . esc_attr__( 'Edit Image' ) . "' /> <img src='" . esc_url( admin_url( 'images/wpspin_light.gif' ) ) . "' class='imgedit-wait-spin' alt='' />";	}	$attachment_url = get_permalink( $attachment_id );	$item = "	$type_html	$toggle_links	$order	$display_title	<table class='slidetoggle describe $class'>		<thead class='media-item-info' id='media-head-$post->ID'>		<tr valign='top'>			<td class='A1B1' id='thumbnail-head-$post->ID'>			<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' style='margin-top: 3px' /></a></p>			<p>$image_edit_button</p>			</td>			<td>			<p><strong>" . __('File name:') . "</strong> $filename</p>			<p><strong>" . __('File type:') . "</strong> $post->post_mime_type</p>			<p><strong>" . __('Upload date:') . "</strong> " . mysql2date( get_option('date_format'), $post->post_date ). '</p>';			if ( !empty( $media_dims ) )				$item .= "<p><strong>" . __('Dimensions:') . "</strong> $media_dims</p>\n";			$item .= "</td></tr>\n";	$item .= "		</thead>		<tbody>		<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>		<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\n";	$defaults = array(		'input'      => 'text',		'required'   => false,		'value'      => '',		'extra_rows' => array(),	);	if ( $send )		$send = "<input type='submit' class='button' name='send[$attachment_id]' value='" . esc_attr__( 'Insert into Post' ) . "' />";	if ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {		if ( !EMPTY_TRASH_DAYS ) {			$delete = "<a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Delete Permanently' ) . '</a>';		} elseif ( !MEDIA_TRASH ) {			$delete = "<a href='#' class='del-link' onclick=\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\">" . __( 'Delete' ) . "</a>			 <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>" . sprintf( __( 'You are about to delete <strong>%s</strong>.' ), $filename ) . "			 <a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='button'>" . __( 'Continue' ) . "</a>			 <a href='#' class='button' onclick=\"this.parentNode.style.display='none';return false;\">" . __( 'Cancel' ) . "</a>			 </div>";		} else {			$delete = "<a href='" . wp_nonce_url( "post.php?action=trash&amp;post=$attachment_id", 'trash-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Move to Trash' ) . "</a>			<a href='" . wp_nonce_url( "post.php?action=untrash&amp;post=$attachment_id", 'untrash-attachment_' . $attachment_id ) . "' id='undo[$attachment_id]' class='undo hidden'>" . __( 'Undo' ) . "</a>";		}	} else {		$delete = '';	}	$thumbnail = '';	$calling_post_id = 0;	if ( isset( $_GET['post_id'] ) )		$calling_post_id = absint( $_GET['post_id'] );	elseif ( isset( $_POST ) && count( $_POST ) ) // Like for async-upload where $_GET['post_id'] isn't set		$calling_post_id = $post->post_parent;	if ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {		$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$calling_post_id" );		$thumbnail = "<a class='wp-post-thumbnail' id='wp-post-thumbnail-" . $attachment_id . "' href='#' onclick='WPSetAsThumbnail(\"$attachment_id\", \"$ajax_nonce\");return false;'>" . esc_html__( "Use as featured image" ) . "</a>";	}	if ( ( $send || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) )		$form_fields['buttons'] = array( 'tr' => "\t\t<tr class='submit'><td></td><td class='savesend'>$send $thumbnail $delete</td></tr>\n" );	$hidden_fields = array();	foreach ( $form_fields as $id => $field ) {		if ( $id{0} == '_' )			continue;		if ( !empty( $field['tr'] ) ) {			$item .= $field['tr'];			continue;		}		$field = array_merge( $defaults, $field );		$name = "attachments[$attachment_id][$id]";		if ( $field['input'] == 'hidden' ) {			$hidden_fields[$name] = $field['value'];			continue;		}		$required      = $field['required'] ? '<span class="alignright"><abbr title="required" class="required">*</abbr></span>' : '';		$aria_required = $field['required'] ? " aria-required='true' " : '';		$class  = $id;		$class .= $field['required'] ? ' form-required' : '';		$item .= "\t\t<tr class='$class'>\n\t\t\t<th valign='top' scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label></th>\n\t\t\t<td class='field'>";		if ( !empty( $field[ $field['input'] ] ) )			$item .= $field[ $field['input'] ];		elseif ( $field['input'] == 'textarea' ) {			$item .= "<textarea type='text' id='$name' name='$name' $aria_required>" . esc_html( $field['value'] ) . '</textarea>';		} else {			$item .= "<input type='text' class='text' id='$name' name='$name' value='" . esc_attr( $field['value'] ) . "' $aria_required />";		}		if ( !empty( $field['helps'] ) )			$item .= "<p class='help'>" . join( "</p>\n<p class='help'>", array_unique( (array) $field['helps'] ) ) . '</p>';		$item .= "</td>\n\t\t</tr>\n";		$extra_rows = array();		if ( !empty( $field['errors'] ) )			foreach ( array_unique( (array) $field['errors'] ) as $error )				$extra_rows['error'][] = $error;		if ( !empty( $field['extra_rows'] ) )			foreach ( $field['extra_rows'] as $class => $rows )				foreach ( (array) $rows as $html )					$extra_rows[$class][] = $html;		foreach ( $extra_rows as $class => $rows )			foreach ( $rows as $html )				$item .= "\t\t<tr><td></td><td class='$class'>$html</td></tr>\n";	}	if ( !empty( $form_fields['_final'] ) )		$item .= "\t\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\n";	$item .= "\t</tbody>\n";	$item .= "\t</table>\n";	foreach ( $hidden_fields as $name => $value )		$item .= "\t<input type='hidden' name='$name' id='$name' value='" . esc_attr( $value ) . "' />\n";	if ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {		$parent = (int) $_REQUEST['post_id'];		$parent_name = "attachments[$attachment_id][post_parent]";		$item .= "\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\n";	}	return $item;}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_header() {	?>	<script type="text/javascript">post_id = <?php echo intval($_REQUEST['post_id']); ?>;</script>	<div id="media-upload-header">	<?php the_media_upload_tabs(); ?>	</div>	<?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_form( $errors = null ) {	global $type, $tab;	$flash_action_url = admin_url('async-upload.php');	// If Mac and mod_security, no Flash. :(	$flash = true;	if ( false !== stripos($_SERVER['HTTP_USER_AGENT'], 'mac') && apache_mod_loaded('mod_security') )		$flash = false;	$flash = apply_filters('flash_uploader', $flash);	$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;	$upload_size_unit = $max_upload_size =  wp_max_upload_size();	$sizes = array( 'KB', 'MB', 'GB' );	for ( $u = -1; $upload_size_unit > 1024 && $u < count( $sizes ) - 1; $u++ )		$upload_size_unit /= 1024;	if ( $u < 0 ) {		$upload_size_unit = 0;		$u = 0;	} else {		$upload_size_unit = (int) $upload_size_unit;	}?><script type="text/javascript">//<![CDATA[var uploaderMode = 0;jQuery(document).ready(function($){	uploaderMode = getUserSetting('uploader');	$('.upload-html-bypass a').click(function(){deleteUserSetting('uploader');uploaderMode=0;swfuploadPreLoad();return false;});	$('.upload-flash-bypass a').click(function(){setUserSetting('uploader', '1');uploaderMode=1;swfuploadPreLoad();return false;});});//]]></script><div id="media-upload-notice"><?php if (isset($errors['upload_notice']) ) { ?>	<?php echo $errors['upload_notice']; ?><?php } ?></div><div id="media-upload-error"><?php if (isset($errors['upload_error']) && is_wp_error($errors['upload_error'])) { ?>	<?php echo $errors['upload_error']->get_error_message(); ?><?php } ?></div><?php// Check quota for this blog if multisiteif ( is_multisite() && !is_upload_space_available() ) {	echo '<p>' . sprintf( __( 'Sorry, you have filled your storage quota (%s MB).' ), get_space_allowed() ) . '</p>';	return;}do_action('pre-upload-ui');if ( $flash ) : ?><script type="text/javascript">//<![CDATA[var swfu;SWFUpload.onload = function() {	var settings = {			button_text: '<span class="button"><?php _e('Select Files'); ?><\/span>',			button_text_style: '.button { text-align: center; font-weight: bold; font-family:"Lucida Grande",Verdana,Arial,"Bitstream Vera Sans",sans-serif; font-size: 11px; text-shadow: 0 1px 0 #FFFFFF; color:#464646; }',			button_height: "23",			button_width: "132",			button_text_top_padding: 3,			button_image_url: '<?php echo includes_url('images/upload.png?ver=20100531'); ?>',			button_placeholder_id: "flash-browse-button",			upload_url : "<?php echo esc_attr( $flash_action_url ); ?>",			flash_url : "<?php echo includes_url('js/swfupload/swfupload.swf'); ?>",			file_post_name: "async-upload",			file_types: "<?php echo apply_filters('upload_file_glob', '*.*'); ?>",			post_params : {				"post_id" : "<?php echo $post_id; ?>",				"auth_cookie" : "<?php echo (is_ssl() ? $_COOKIE[SECURE_AUTH_COOKIE] : $_COOKIE[AUTH_COOKIE]); ?>",				"logged_in_cookie": "<?php echo $_COOKIE[LOGGED_IN_COOKIE]; ?>",				"_wpnonce" : "<?php echo wp_create_nonce('media-form'); ?>",				"type" : "<?php echo $type; ?>",				"tab" : "<?php echo $tab; ?>",				"short" : "1"			},			file_size_limit : "<?php echo $max_upload_size; ?>b",			file_dialog_start_handler : fileDialogStart,			file_queued_handler : fileQueued,			upload_start_handler : uploadStart,			upload_progress_handler : uploadProgress,			upload_error_handler : uploadError,			upload_success_handler : uploadSuccess,			upload_complete_handler : uploadComplete,			file_queue_error_handler : fileQueueError,			file_dialog_complete_handler : fileDialogComplete,			swfupload_pre_load_handler: swfuploadPreLoad,			swfupload_load_failed_handler: swfuploadLoadFailed,			custom_settings : {				degraded_element_id : "html-upload-ui", // id of the element displayed when swfupload is unavailable				swfupload_element_id : "flash-upload-ui" // id of the element displayed when swfupload is available			},			debug: false		};		swfu = new SWFUpload(settings);};//]]></script><div id="flash-upload-ui" class="hide-if-no-js"><?php do_action('pre-flash-upload-ui'); ?>	<div>	<?php _e( 'Choose files to upload' ); ?>	<div id="flash-browse-button"></div>	<span><input id="cancel-upload" disabled="disabled" onclick="cancelUpload()" type="button" value="<?php esc_attr_e('Cancel Upload'); ?>" class="button" /></span>	</div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p><?php do_action('post-flash-upload-ui'); ?>	<p class="howto"><?php _e('After a file has been uploaded, you can add titles and descriptions.'); ?></p></div><?php endif; // $flash ?><div id="html-upload-ui"><?php do_action('pre-html-upload-ui'); ?>	<p id="async-upload-wrap">	<label class="screen-reader-text" for="async-upload"><?php _e('Upload'); ?></label>	<input type="file" name="async-upload" id="async-upload" /> <input type="submit" class="button" name="html-upload" value="<?php esc_attr_e('Upload'); ?>" /> <a href="#" onclick="try{top.tb_remove();}catch(e){}; return false;"><?php _e('Cancel'); ?></a>	</p>	<div class="clear"></div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p>	<?php if ( is_lighttpd_before_150() ): ?>	<p><?php _e('If you want to use all capabilities of the uploader, like uploading multiple files at once, please upgrade to lighttpd 1.5.'); ?></p>	<?php endif;?><?php do_action('post-html-upload-ui', $flash); ?></div><?php do_action('post-upload-ui'); ?><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="submit" class="hidden" name="save" value="" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><h3 class="media-title"><?php _e('Add media files from your computer'); ?></h3><?php media_upload_form( $errors ); ?><script type="text/javascript">//<![CDATA[jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});	}	updateMediaForm();});//]]></script><div id="media-items"><?phpif ( $id ) {	if ( !is_wp_error($id) ) {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_items( $id, $errors );	} else {		echo '<div id="media-upload-error">'.esc_html($id->get_error_message()).'</div>';		exit;	}}?></div><p class="savebutton ml-submit"><input type="submit" class="button" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_url_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$callback = "type_url_form_$type";?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><?php if ( is_callable($callback) ) { ?><h3 class="media-title"><?php _e('Add media file from URL'); ?></h3><script type="text/javascript">//<![CDATA[var addExtImage = {	width : '',	height : '',	align : 'alignnone',	insert : function() {		var t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';		if ( '' == f.src.value || '' == t.width )			return false;		if ( f.title.value ) {			title = f.title.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');			title = ' title="'+title+'"';		}		if ( f.alt.value )			alt = f.alt.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php if ( ! apply_filters( 'disable_captions', '' ) ) { ?>		if ( f.caption.value )			caption = f.caption.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php } ?>		cls = caption ? '' : ' class="'+t.align+'"';		html = '<img alt="'+alt+'" src="'+f.src.value+'"'+title+cls+' width="'+t.width+'" height="'+t.height+'" />';		if ( f.url.value )			html = '<a href="'+f.url.value+'">'+html+'</a>';		if ( caption )			html = '[caption id="" align="'+t.align+'" width="'+t.width+'" caption="'+caption+'"]'+html+'[/caption]';		var win = window.dialogArguments || opener || parent || top;		win.send_to_editor(html);		return false;	},	resetImageData : function() {		var t = addExtImage;		t.width = t.height = '';		document.getElementById('go_button').style.color = '#bbb';		if ( ! document.forms[0].src.value )			document.getElementById('status_img').innerHTML = '*';		else document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>" alt="" />';	},	updateImageData : function() {		var t = addExtImage;		t.width = t.preloadImg.width;		t.height = t.preloadImg.height;		document.getElementById('go_button').style.color = '#333';		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>" alt="" />';	},	getImageData : function() {		var t = addExtImage, src = document.forms[0].src.value;		if ( ! src ) {			t.resetImageData();			return false;		}		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />';		t.preloadImg = new Image();		t.preloadImg.onload = t.updateImageData;		t.preloadImg.onerror = t.resetImageData;		t.preloadImg.src = src;	}}//]]></script><div id="media-items"><div class="media-item media-blank"><?php echo apply_filters($callback, call_user_func($callback)); ?></div></div></form><?php	} else {		wp_die( __('Unknown action.') );	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_gallery_form($errors) {	global $redir_tab, $type;	$redir_tab = 'gallery';	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=gallery&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="sort-buttons" class="hide-if-no-js"><span><?php _e('All Tabs:'); ?><a href="#" id="showall"><?php _e('Show'); ?></a><a href="#" id="hideall" style="display:none;"><?php _e('Hide'); ?></a></span><?php _e('Sort Order:'); ?><a href="#" id="asc"><?php _e('Ascending'); ?></a> |<a href="#" id="desc"><?php _e('Descending'); ?></a> |<a href="#" id="clear"><?php _ex('Clear', 'verb'); ?></a></div><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="gallery-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><table class="widefat" cellspacing="0"><thead><tr><th><?php _e('Media'); ?></th><th class="order-head"><?php _e('Order'); ?></th><th class="actions-head"><?php _e('Actions'); ?></th></tr></thead></table><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items($post_id, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" style="display:none;" name="save" id="save-all" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="type" value="<?php echo esc_attr( $GLOBALS['type'] ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $GLOBALS['tab'] ); ?>" /></p><div id="gallery-settings" style="display:none;"><div class="title"><?php _e('Gallery Settings'); ?></div><table id="basic" class="describe"><tbody>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Link thumbnails to:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" name="linkto" id="linkto-file" value="file" />		<label for="linkto-file" class="radio"><?php _e('Image File'); ?></label>		<input type="radio" checked="checked" name="linkto" id="linkto-post" value="post" />		<label for="linkto-post" class="radio"><?php _e('Attachment Page'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order images by:'); ?></span>		</label>	</th>	<td class="field">		<select id="orderby" name="orderby">			<option value="menu_order" selected="selected"><?php _e('Menu order'); ?></option>			<option value="title"><?php _e('Title'); ?></option>			<option value="ID"><?php _e('Date/Time'); ?></option>			<option value="rand"><?php _e('Random'); ?></option>		</select>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" checked="checked" name="order" id="order-asc" value="asc" />		<label for="order-asc" class="radio"><?php _e('Ascending'); ?></label>		<input type="radio" name="order" id="order-desc" value="desc" />		<label for="order-desc" class="radio"><?php _e('Descending'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Gallery columns:'); ?></span>		</label>	</th>	<td class="field">		<select id="columns" name="columns">			<option value="2">2</option>			<option value="3" selected="selected">3</option>			<option value="4">4</option>			<option value="5">5</option>			<option value="6">6</option>			<option value="7">7</option>			<option value="8">8</option>			<option value="9">9</option>		</select>	</td>	</tr></tbody></table><p class="ml-submit"><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="insert-gallery" id="insert-gallery" value="<?php esc_attr_e( 'Insert gallery' ); ?>" /><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="update-gallery" id="update-gallery" value="<?php esc_attr_e( 'Update gallery settings' ); ?>" /></p></div></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_library_form($errors) {	global $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=library&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$_GET['paged'] = isset( $_GET['paged'] ) ? intval($_GET['paged']) : 0;	if ( $_GET['paged'] < 1 )		$_GET['paged'] = 1;	$start = ( $_GET['paged'] - 1 ) * 10;	if ( $start < 1 )		$start = 0;	add_filter( 'post_limits', create_function( '$a', "return 'LIMIT $start, 10';" ) );	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();?><form id="filter" action="" method="get"><input type="hidden" name="type" value="<?php echo esc_attr( $type ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $tab ); ?>" /><input type="hidden" name="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="post_mime_type" value="<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>" /><p id="media-search" class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e('Search Media');?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $_type => $reals )	foreach ( $reals as $real )		if ( isset($num_posts[$_type]) )			$num_posts[$_type] += $_num_posts[$real];		else			$num_posts[$_type] = $_num_posts[$real];// If available type specified by media button clicked, filter by that typeif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {	$_GET['post_mime_type'] = $type;	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}if ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )	$class = ' class="current"';else	$class = '';$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . "'$class>".__('All Types')."</a>";foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . "'$class>" . sprintf(_n($label[2][0], $label[2][1], $num_posts[$mime_type]), "<span id='$mime_type-counter'>" . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';}echo implode(' | </li>', $type_links) . '</li>';unset($type_links);?></ul><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($wp_query->found_posts / 10),	'current' => $_GET['paged']));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><?php$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?><select name='m'><option<?php selected( @$_GET['m'], 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . "'>";	echo esc_html( $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear" );	echo "</option>\n";}?></select><?php } ?><input type="submit" id="post-query-submit" value="<?php echo esc_attr( __( 'Filter &#187;' ) ); ?>" class="button-secondary" /></div><br class="clear" /></div></form><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="library-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items(null, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_image() {	if ( !apply_filters( 'disable_captions', '' ) ) {		$caption = '		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="caption">' . __('Image Caption') . '</label></span>			</th>			<td class="field"><input id="caption" name="caption" value="" type="text" /></td>		</tr>';	} else {		$caption = '';	}	$default_align = get_option('image_default_align');	if ( empty($default_align) )		$default_align = 'none';	return '	<h4 class="media-sub-title">' . __('Insert an image from another web site') . '</h4>	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label" style="width:130px;">				<span class="alignleft"><label for="src">' . __('Image URL') . '</label></span>				<span class="alignright"><abbr id="status_img" title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="src" name="src" value="" type="text" aria-required="true" onblur="addExtImage.getImageData()" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="title">' . __('Image Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="title" name="title" value="" type="text" aria-required="true" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="alt">' . __('Alternate Text') . '</label></span>			</th>			<td class="field"><input id="alt" name="alt" value="" type="text" aria-required="true" />			<p class="help">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>		</tr>		' . $caption . '		<tr class="align">			<th valign="top" scope="row" class="label"><p><label for="align">' . __('Alignment') . '</label></p></th>			<td class="field">				<input name="align" id="align-none" value="none" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'none' ? ' checked="checked"' : '').' />				<label for="align-none" class="align image-align-none-label">' . __('None') . '</label>				<input name="align" id="align-left" value="left" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'left' ? ' checked="checked"' : '').' />				<label for="align-left" class="align image-align-left-label">' . __('Left') . '</label>				<input name="align" id="align-center" value="center" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'center' ? ' checked="checked"' : '').' />				<label for="align-center" class="align image-align-center-label">' . __('Center') . '</label>				<input name="align" id="align-right" value="right" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'right' ? ' checked="checked"' : '').' />				<label for="align-right" class="align image-align-right-label">' . __('Right') . '</label>			</td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="url">' . __('Link Image To:') . '</label></span>			</th>			<td class="field"><input id="url" name="url" value="" type="text" /><br />			<button type="button" class="button" value="" onclick="document.forms[0].url.value=null">' . __('None') . '</button>			<button type="button" class="button" value="" onclick="document.forms[0].url.value=document.forms[0].src.value">' . __('Link to image') . '</button>			<p class="help">' . __('Enter a link URL or click above for presets.') . '</p></td>		</tr>	' . _insert_into_post_button('image') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_audio() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Audio File URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Still Alive by Jonathan Coulton&#8221;') . '</td></tr>	' . _insert_into_post_button('audio') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_video() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Video URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Lucy on YouTube&#8220;') . '</td></tr>	' . _insert_into_post_button('video') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_file() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</td></tr>	' . _insert_into_post_button('file') . '	</tbody></table>';}function _insert_into_post_button($type) {	if ( !post_type_supports(get_post_type($_GET['post_id']), 'editor') )		return '';	if ( 'image' == $type )	return '		<tr>			<td></td>			<td>				<input type="button" class="button" id="go_button" style="color:#bbb;" onclick="addExtImage.insert()" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';	return '		<tr>			<td></td>			<td>				<input type="submit" class="button" name="insertonlybutton" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';}/** * {@internal Missing Short Description}} * * Support a GET parameter for disabling the flash uploader. * * @since unknown * * @param unknown_type $flash * @return unknown */function media_upload_use_flash($flash) {	if ( array_key_exists('flash', $_REQUEST) )		$flash = !empty($_REQUEST['flash']);	return $flash;}add_filter('flash_uploader', 'media_upload_use_flash');/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_flash_bypass() {	echo '<p class="upload-flash-bypass">';	printf( __('You are using the Flash uploader.  Problems?  Try the <a href="%s">Browser uploader</a> instead.'), esc_url(add_query_arg('flash', 0)) );	echo '</p>';}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_html_bypass($flash = true) {	echo '<p class="upload-html-bypass hide-if-no-js">';	_e('You are using the Browser uploader.');	if ( $flash ) {		// the user manually selected the browser uploader, so let them switch back to Flash		echo ' ';		printf( __('Try the <a href="%s">Flash uploader</a> instead.'), esc_url(add_query_arg('flash', 1)) );	}	echo "</p>\n";}add_action('post-flash-upload-ui', 'media_upload_flash_bypass');add_action('post-html-upload-ui', 'media_upload_html_bypass');/** * {@internal Missing Short Description}} * * Make sure the GET parameter sticks when we submit a form. * * @since unknown * * @param unknown_type $url * @return unknown */function media_upload_bypass_url($url) {	if ( array_key_exists('flash', $_REQUEST) )		$url = add_query_arg('flash', intval($_REQUEST['flash']));	return $url;}add_filter('media_upload_form_url', 'media_upload_bypass_url');add_filter('async_upload_image', 'get_media_item', 10, 2);add_filter('async_upload_audio', 'get_media_item', 10, 2);add_filter('async_upload_video', 'get_media_item', 10, 2);add_filter('async_upload_file', 'get_media_item', 10, 2);add_action('media_upload_image', 'media_upload_image');add_action('media_upload_audio', 'media_upload_audio');add_action('media_upload_video', 'media_upload_video');add_action('media_upload_file', 'media_upload_file');add_filter('media_upload_gallery', 'media_upload_gallery');add_filter('media_upload_library', 'media_upload_library');
<?php/** * Metadata API * * Functions for retrieving and manipulating metadata of various WordPress object types.  Metadata * for an object is a represented by a simple key-value pair.  Objects may contain multiple * metadata entries that share the same key and differ only in their value. * * @package WordPress * @subpackage Meta * @since 2.9.0 *//** * Add metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry, * 		object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param bool $unique Optional, default is false.  Whether the specified metadata key should be * 		unique for the object.  If true, and the object already has a value for the specified * 		metadata key, no change will be made * @return bool True on successful update, false on failure. */function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( $unique && $wpdb->get_var( $wpdb->prepare(		"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",		$meta_key, $object_id ) ) )		return false;	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$wpdb->insert( $table, array(		$column => $object_id,		'meta_key' => $meta_key,		'meta_value' => $meta_value	) );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "added_{$meta_type}_meta", $wpdb->insert_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Update metadata for the specified object.  If no value already exists for the specified object * ID and metadata key, the metadata will be added. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of * 		metadata entry to update, object ID, meta key, and meta value * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of * 		updated metadata entry, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Metadata value * @param string $prev_value Optional.  If specified, only update existing metadata entries with * 		the specified value.  Otherwise, update all entries. * @return bool True on successful update, false on failure. */function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {	if ( !$meta_type || !$meta_key )		return false;	if ( !$object_id = absint($object_id) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	if ( ! $meta_id = $wpdb->get_var( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) ) )		return add_metadata($meta_type, $object_id, $meta_key, $meta_value);	// Compare existing value to new value if no prev value given and the key exists only once.	if ( empty($prev_value) ) {		$old_value = get_metadata($meta_type, $object_id, $meta_key);		if ( count($old_value) == 1 ) {			if ( $old_value[0] == $meta_value )				return false;		}	}	$_meta_value = $meta_value;	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$data  = compact( 'meta_value' );	$where = array( $column => $object_id, 'meta_key' => $meta_key );	if ( !empty( $prev_value ) ) {		$prev_value = maybe_serialize($prev_value);		$where['meta_value'] = $prev_value;	}	do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	$wpdb->update( $table, $data, $where );	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );	return true;}/** * Delete metadata for the specified object. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of * 		deleted metadata entries, object ID, meta key, and meta value * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Metadata key * @param string $meta_value Optional. Metadata value.  If specified, only delete metadata entries * 		with this value.  Otherwise, delete all entries with the specified meta_key. * @param bool $delete_all Optional, default is false.  If true, delete matching metadata entries * 		for all objects, ignoring the specified object_id.  Otherwise, only delete matching * 		metadata entries for the specified object_id. * @return bool True on successful delete, false on failure. */function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {	if ( !$meta_type || !$meta_key )		return false;	if ( (!$object_id = absint($object_id)) && !$delete_all )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	global $wpdb;	$type_column = esc_sql($meta_type . '_id');	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';	// expected_slashed ($meta_key)	$meta_key = stripslashes($meta_key);	$meta_value = maybe_serialize( stripslashes_deep($meta_value) );	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );	if ( !$delete_all )		$query .= $wpdb->prepare(" AND $type_column = %d", $object_id );	if ( $meta_value )		$query .= $wpdb->prepare(" AND meta_value = %s", $meta_value );	$meta_ids = $wpdb->get_col( $query );	if ( !count( $meta_ids ) )		return false;	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . " )";	$count = $wpdb->query($query);	if ( !$count )		return false;	wp_cache_delete($object_id, $meta_type . '_meta');	// users cache stores usermeta that must be cleared.	if ( 'user' == $meta_type )		clean_user_cache($object_id);	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $meta_value );	return true;}/** * Retrieve metadata for the specified object. * * @since 2.9.0 * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int $object_id ID of the object metadata is for * @param string $meta_key Optional.  Metadata key.  If not specified, retrieve all metadata for * 		the specified object. * @param bool $single Optional, default is false.  If true, return only the first value of the * 		specified meta_key.  This parameter has no effect if meta_key is not specified. * @return string|array Single metadata value, or array of values */function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {	if ( !$meta_type )		return false;	if ( !$object_id = absint($object_id) )		return false;	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	if ( !$meta_cache ) {		update_meta_cache($meta_type, $object_id);		$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');	}	if ( ! $meta_key )		return $meta_cache;	if ( isset($meta_cache[$meta_key]) ) {		if ( $single )			return maybe_unserialize( $meta_cache[$meta_key][0] );		else			return array_map('maybe_unserialize', $meta_cache[$meta_key]);	}	if ($single)		return '';	else		return array();}/** * Update the metadata cache for the specified objects. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user) * @param int|array $object_ids array or comma delimited list of object IDs to update cache for * @return mixed Metadata cache for the specified objects, or false on failure. */function update_meta_cache($meta_type, $object_ids) {	if ( empty( $meta_type ) || empty( $object_ids ) )		return false;	if ( ! $table = _get_meta_table($meta_type) )		return false;	$column = esc_sql($meta_type . '_id');	global $wpdb;	if ( !is_array($object_ids) ) {		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);		$object_ids = explode(',', $object_ids);	}	$object_ids = array_map('intval', $object_ids);	$cache_key = $meta_type . '_meta';	$ids = array();	foreach ( $object_ids as $id ) {		if ( false === wp_cache_get($id, $cache_key) )			$ids[] = $id;	}	if ( empty( $ids ) )		return false;	// Get meta info	$id_list = join(',', $ids);	$cache = array();	$meta_list = $wpdb->get_results( $wpdb->prepare("SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list)",		$meta_type), ARRAY_A );	if ( !empty($meta_list) ) {		foreach ( $meta_list as $metarow) {			$mpid = intval($metarow[$column]);			$mkey = $metarow['meta_key'];			$mval = $metarow['meta_value'];			// Force subkeys to be array type:			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )				$cache[$mpid] = array();			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )				$cache[$mpid][$mkey] = array();			// Add a value to the current pid/key:			$cache[$mpid][$mkey][] = $mval;		}	}	foreach ( $ids as $id ) {		if ( ! isset($cache[$id]) )			$cache[$id] = array();	}	foreach ( array_keys($cache) as $object)		wp_cache_set($object, $cache[$object], $cache_key);	return $cache;}/** * Retrieve the name of the metadata table for the specified object type. * * @since 2.9.0 * @uses $wpdb WordPress database object for queries. * * @param string $meta_type Type of object to get metadata table for (e.g., comment, post, or user) * @return mixed Metadata table name, or false if no metadata table exists */function _get_meta_table($type) {	global $wpdb;	$table_name = $type . 'meta';	if ( empty($wpdb->$table_name) )		return false;	return $wpdb->$table_name;}?>
<?phpdefine( "WP_INSTALLING", true );/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );require( './wp-blog-header.php' );if ( !is_multisite() ) {	wp_redirect( get_option( 'siteurl' ) . "/wp-login.php?action=register" );	die();}require_once( ABSPATH . WPINC . '/registration.php');if ( is_object( $wp_object_cache ) )	$wp_object_cache->cache_enabled = false;do_action("activate_header");function do_activate_header() {	do_action("activate_wp_head");}add_action( 'wp_head', 'do_activate_header' );function wpmu_activate_stylesheet() {	?>	<style type="text/css">		form { margin-top: 2em; }		#submit, #key { width: 90%; font-size: 24px; }		#language { margin-top: .5em; }		.error { background: #f66; }		span.h3 { padding:0 8px; font-size:1.3em; font-family:'Trebuchet MS','Lucida Grande',Verdana,Arial,Sans-Serif; font-weight:700; color:#333333; }	</style>	<?php}add_action( 'wp_head', 'wpmu_activate_stylesheet' );get_header();?><div id="content" class="widecolumn">	<?php if ( empty($_GET['key']) && empty($_POST['key']) ) { ?>		<h2><?php _e('Activation Key Required') ?></h2>		<form name="activateform" id="activateform" method="post" action="<?php echo network_site_url('wp-activate.php'); ?>">			<p>			    <label for="key"><?php _e('Activation Key:') ?></label>			    <br /><input type="text" name="key" id="key" value="" size="50" />			</p>			<p class="submit">			    <input id="submit" type="submit" name="Submit" class="submit" value="<?php esc_attr_e('Activate') ?>" />			</p>		</form>	<?php } else {		$key = !empty($_GET['key']) ? $_GET['key'] : $_POST['key'];		$result = wpmu_activate_signup($key);		if ( is_wp_error($result) ) {			if ( 'already_active' == $result->get_error_code() || 'blog_taken' == $result->get_error_code() ) {			    $signup = $result->get_error_data();				?>				<h2><?php _e('Your account is now active!'); ?></h2>				<?php				echo '<p class="lead-in">';				if ( $signup->domain . $signup->path == '' ) {					printf( __('Your account has been activated. You may now <a href="%1$s">login</a> to the site using your chosen username of &#8220;%2$s&#8221;.  Please check your email inbox at %3$s for your password and login instructions. If you do not receive an email, please check your junk or spam folder. If you still do not receive an email within an hour, you can <a href="%4$s">reset your password</a>.'), network_site_url( 'wp-login.php', 'login' ), $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword', 'login' ) );				} else {					printf( __('Your site at <a href="%1$s">%2$s</a> is active. You may now log in to your site using your chosen username of &#8220;%3$s&#8221;.  Please check your email inbox at %4$s for your password and login instructions.  If you do not receive an email, please check your junk or spam folder.  If you still do not receive an email within an hour, you can <a href="%5$s">reset your password</a>.'), 'http://' . $signup->domain, $signup->domain, $signup->user_login, $signup->user_email, network_site_url( 'wp-login.php?action=lostpassword' ) );				}				echo '</p>';			} else {				?>				<h2><?php _e('An error occurred during the activation'); ?></h2>				<?php			    echo '<p>'.$result->get_error_message().'</p>';			}		} else {			extract($result);			$url = get_blogaddress_by_id( (int) $blog_id);			$user = new WP_User( (int) $user_id);			?>			<h2><?php _e('Your account is now active!'); ?></h2>			<div id="signup-welcome">				<p><span class="h3"><?php _e('Username:'); ?></span> <?php echo $user->user_login ?></p>				<p><span class="h3"><?php _e('Password:'); ?></span> <?php echo $password; ?></p>			</div>			<?php if ( $url != network_home_url('', 'http') ) : ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">View your site</a> or <a href="%2$s">Login</a>'), $url, $url . 'wp-login.php' ); ?></p>			<?php else: ?>				<p class="view"><?php printf( __('Your account is now activated. <a href="%1$s">Login</a> or go back to the <a href="%2$s">homepage</a>.' ), network_site_url('wp-login.php', 'login'), network_home_url() ); ?></p>			<?php endif;		}	}	?></div><script type="text/javascript">	var key_input = document.getElementById('key');	key_input && key_input.focus();</script><?php get_footer(); ?>
<?php/** * Network installation administration panel. * * A multi-step process allowing the user to enable a network of WordPress sites. * * @since 3.0.0 * * @package WordPress * @subpackage Administration */define( 'WP_NETWORK_ADMIN_PAGE', true );/** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! is_super_admin() )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );if ( is_multisite() && ! defined( 'MULTISITE' ) )	wp_die( __( 'The Network creation panel is not for WordPress MU networks.' ) );// We need to create references to ms global tables to enable Network.foreach ( $wpdb->tables( 'ms_global' ) as $table => $prefixed_table )	$wpdb->$table = $prefixed_table;/** * Check for an existing network. * * @since 3.0.0 * @return Whether a network exists. */function network_domain_check() {	global $wpdb;	if ( $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		return $wpdb->get_var( "SELECT domain FROM $wpdb->site ORDER BY id ASC LIMIT 1" );	return false;}/** * Allow subdomain install * * @since 3.0.0 * @return bool Whether subdomain install is allowed */function allow_subdomain_install() {	$domain = preg_replace( '|https?://([^/]+)|', '$1', get_option( 'siteurl' ) );	if( false !== strpos( $domain, '/' ) || 'localhost' == $domain || preg_match( '|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|', $domain ) )		return false;	return true;}/** * Allow subdirectory install * * @since 3.0.0 * @return bool Whether subdirectory install is allowed */function allow_subdirectory_install() {	global $wpdb;	if ( apply_filters( 'allow_subdirectory_install', false ) )		return true;	if ( defined( 'ALLOW_SUBDIRECTORY_INSTALL' ) && ALLOW_SUBDIRECTORY_INSTALL )		return true;	$post = $wpdb->get_row( "SELECT ID FROM $wpdb->posts WHERE post_date < DATE_SUB(NOW(), INTERVAL 1 MONTH) AND post_status = 'publish'" );	if ( empty( $post ) )		return true;	return false;}/** * Get base domain of network. * * @since 3.0.0 * @return string Base domain. */function get_clean_basedomain() {	if ( $existing_domain = network_domain_check() )		return $existing_domain;	$domain = preg_replace( '|https?://|', '', get_option( 'siteurl' ) );	if ( $slash = strpos( $domain, '/' ) )		$domain = substr( $domain, 0, $slash );	return $domain;}if ( ! network_domain_check() && ( ! defined( 'WP_ALLOW_MULTISITE' ) || ! WP_ALLOW_MULTISITE ) )	wp_die( __( 'You must define the <code>WP_ALLOW_MULTISITE</code> constant as true in your wp-config.php file to allow creation of a Network.' ) );$title = __( 'Create a Network of WordPress Sites' );$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen allows you to configure a network as having subdomains (<code>site1.example.com</code>) or subdirectories (<code>example.com/site1</code>). Subdomains require wildcard subdomains to be enabled in Apache and DNS records, if your host allows it.') . '</p>' .	'<p>' . __('Choose subdomains or subdirectories; this can only be switched afterwards by reconfiguring your install. Fill out the network details, and click install. If this does not work, you may have to add a wildcard DNS record (for subdomains) or change to another setting in Permalinks (for subdirectories).') . '</p>' .	'<p>' . __('The next screen for Network will give you individually-generated lines of code to add to your wp-config.php and .htaccess files. Make sure the settings of your FTP client make files starting with a dot visible, so that you can find .htaccess; you may have to create this file if it really is not there. Make backup copies of those two files.') . '</p>' .	'<p>' . __('Add a <code>blogs.dir</code> directory under <code>/wp-content</code> and add the designated lines of code to wp-config.php (just before <code>/*...stop editing...*/</code>) and <code>.htaccess</code> (replacing the existing WordPress rules).') . '</p>' .	'<p>' . __('Refreshing your browser will take you to a screen with an archive of those added lines of code. A set of six links under Super Admin will appear at the top of the main left navigation menu. The multisite network is now enabled.') . '</p>' .	'<p>' . __('The choice of subdirectory sites is disabled if this setup is more than a month old because of permalink problems with &#8220;/blog/&#8221; from the main site. This disabling will be addressed soon in a future version.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Create_A_Network" target="_blank">General Network Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Network_SubPanel" target="_blank">Tools > Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php/** * Prints step 1 for Network installation process. * * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such. Navigating to Tools > Network * 	should not be a sudden "Welcome to a new install process! Fill this out and click here." See also contextual help todo. * * @since 3.0.0 */function network_step1( $errors = false ) {	global $is_apache;	if ( get_option( 'siteurl' ) != get_option( 'home' ) ) {		echo '<div class="error"><p><strong>' . __('Error:') . '</strong> ' . sprintf( __( 'Your <strong>WordPress address</strong> must match your <strong>Site address</strong> before creating a Network. See <a href="%s">General Settings</a>.' ), esc_url( admin_url( 'options-general.php' ) ) ) . '</p></div>';		echo '</div>';		include ('./admin-footer.php' );		die();	}	$active_plugins = get_option( 'active_plugins' );	if ( ! empty( $active_plugins ) ) {		echo '<div class="updated"><p><strong>' . __('Warning:') . '</strong> ' . sprintf( __( 'Please <a href="%s">deactivate your plugins</a> before enabling the Network feature.' ), admin_url( 'plugins.php?plugin_status=active' ) ) . '</p></div><p>' . __( 'Once the network is created, you may reactivate your plugins.' ) . '</p>';		echo '</div>';		include( './admin-footer.php' );		die();	}	$hostname = get_clean_basedomain();	$has_ports = strstr( $hostname, ':' );	if ( ( false !== $has_ports && ! in_array( $has_ports, array( ':80', ':443' ) ) ) ) {		echo '<div class="error"><p><strong>' . __( 'Error:') . '</strong> ' . __( 'You cannot install a network of sites with your server address.' ) . '</p></div>';		echo '<p>' . sprintf( __( 'You cannot use port numbers such as <code>%s</code>.' ), $has_ports ) . '</p>';		echo '<a href="' . esc_url( admin_url() ) . '">' . __( 'Return to Dashboard' ) . '</a>';		echo '</div>';		include( './admin-footer.php' );		die();	}	echo '<form method="post" action="">';	wp_nonce_field( 'install-network-1' );	$error_codes = array();	if ( is_wp_error( $errors ) ) {		echo '<div class="error"><p><strong>' . __( 'ERROR: The network could not be created.' ) . '</strong></p>';		foreach ( $errors->get_error_messages() as $error )			echo "<p>$error</p>";		echo '</div>';		$error_codes = $errors->get_error_codes();	}	if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )		echo '<div class="error"><p><strong>' . __('Warning!') . '</strong> ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</p></div>';	$site_name = ( ! empty( $_POST['sitename'] ) && ! in_array( 'empty_sitename', $error_codes ) ) ? $_POST['sitename'] : sprintf( _x('%s Sites', 'Default network name' ), get_option( 'blogname' ) );	$admin_email = ( ! empty( $_POST['email'] ) && ! in_array( 'invalid_email', $error_codes ) ) ? $_POST['email'] : get_option( 'admin_email' );	?>	<p><?php _e( 'Welcome to the Network installation process!' ); ?></p>	<p><?php _e( 'Fill in the information below and you&#8217;ll be on your way to creating a network of WordPress sites. We will create configuration files in the next step.' ); ?></p>	<?php	if ( isset( $_POST['subdomain_install'] ) ) {		$subdomain_install = (bool) $_POST['subdomain_install'];	} elseif ( apache_mod_loaded('mod_rewrite') ) { // assume nothing		$subdomain_install = true;	} elseif ( !allow_subdirectory_install() ) {		$subdomain_install = true;	} else {		$subdomain_install = false;		if ( $got_mod_rewrite = got_mod_rewrite() ) // dangerous assumptions			echo '<div class="updated inline"><p><strong>' . __( 'Note:' ) . '</strong> ' . __( 'Please make sure the Apache <code>mod_rewrite</code> module is installed as it will be used at the end of this installation.' ) . '</p>';		elseif ( $is_apache )			echo '<div class="error inline"><p><strong>' . __( 'Warning!' ) . '</strong> ' . __( 'It looks like the Apache <code>mod_rewrite</code> module is not installed.' ) . '</p>';		if ( $got_mod_rewrite || $is_apache ) // Protect against mod_rewrite mimicry (but ! Apache)			echo '<p>' . __( 'If <code>mod_rewrite</code> is disabled, ask your administrator to enable that module, or look at the <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html">Apache documentation</a> or <a href="http://www.google.com/search?q=apache+mod_rewrite">elsewhere</a> for help setting it up.' ) . '</p></div>';	}	if ( allow_subdomain_install() && allow_subdirectory_install() ) : ?>		<h3><?php esc_html_e( 'Addresses of Sites in your Network' ); ?></h3>		<p><?php _e( 'Please choose whether you would like sites in your WordPress network to use sub-domains or sub-directories. <strong>You cannot change this later.</strong>' ); ?></p>		<p><?php _e( 'You will need a wildcard DNS record if you are going to use the virtual host (sub-domain) functionality.' ); ?></p>		<?php // @todo: Link to an MS readme? ?>		<table class="form-table">			<tr>				<th><label><input type='radio' name='subdomain_install' value='1'<?php checked( $subdomain_install ); ?> /> <?php _e( 'Sub-domains' ); ?></label></th>				<td><?php printf( _x( 'like <code>site1.%1$s</code> and <code>site2.%1$s</code>', 'subdomain examples' ), $hostname ); ?></td>			</tr>			<tr>				<th><label><input type='radio' name='subdomain_install' value='0'<?php checked( ! $subdomain_install ); ?> /> <?php _e( 'Sub-directories' ); ?></label></th>				<td><?php printf( _x( 'like <code>%1$s/site1</code> and <code>%1$s/site2</code>', 'subdirectory examples' ), $hostname ); ?></td>			</tr>		</table><?php	endif;		$is_www = ( 0 === strpos( $hostname, 'www.' ) );		if ( $is_www ) :		?>		<h3><?php esc_html_e( 'Server Address' ); ?></h3>		<p><?php printf( __( 'We recommend you change your siteurl to <code>%1$s</code> before enabling the network feature. It will still be possible to visit your site using the <code>www</code> prefix with an address like <code>%2$s</code> but any links will not have the <code>www</code> prefix.' ), substr( $hostname, 4 ), $hostname ); ?></h3>		<table class="form-table">			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		</table>		<?php endif; ?>		<h3><?php esc_html_e( 'Network Details' ); ?></h3>		<table class="form-table">		<?php if ( 'localhost' == $hostname ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because you are using <code>localhost</code>, the sites in your WordPress network must use sub-directories. Consider using <code>localhost.localdomain</code> if you wish to use sub-domains.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdomain_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because your install is in a directory, the sites in your WordPress network must use sub-directories.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdirectory_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-domain Install' ); ?></th>				<td><?php _e( 'Because your install is not new, the sites in your WordPress network must use sub-domains.' );					echo ' <strong>' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php endif; ?>		<?php if ( ! $is_www ) : ?>			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		<?php endif; ?>			<tr>				<th scope='row'><?php esc_html_e( 'Network Title' ); ?></th>				<td>					<input name='sitename' type='text' size='45' value='<?php echo esc_attr( $site_name ); ?>' />					<br /><?php _e( 'What would you like to call your network?' ); ?>				</td>			</tr>			<tr>				<th scope='row'><?php esc_html_e( 'Admin E-mail Address' ); ?></th>				<td>					<input name='email' type='text' size='45' value='<?php echo esc_attr( $admin_email ); ?>' />					<br /><?php _e( 'Your email address.' ); ?>				</td>			</tr>		</table>		<p class='submit'><input class="button-primary" name='submit' type='submit' value='<?php esc_attr_e( 'Install' ); ?>' /></p>	</form>		<?php}/** * Prints step 2 for Network installation process. * * @since 3.0.0 */function network_step2( $errors = false ) {	global $base, $wpdb;	$hostname = get_clean_basedomain();	// Wildcard DNS message.	if ( is_wp_error( $errors ) )		echo '<div class="error">' . $errors->get_error_message() . '</div>';	if ( $_POST ) {		$subdomain_install = allow_subdomain_install() ? ( allow_subdirectory_install() ? ! empty( $_POST['subdomain_install'] ) : true ) : false;	} else {		if ( is_multisite() ) {			$subdomain_install = is_subdomain_install();?>	<div class="updated"><p><strong><?php _e( 'Notice: The Network feature is already enabled.' ); ?></strong> <?php _e( 'The original configuration steps are shown here for reference.' ); ?></p></div><?php	} else {			$subdomain_install = (bool) $wpdb->get_var( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = 1 AND meta_key = 'subdomain_install'" );?>	<div class="error"><p><strong><?php _e('Warning:'); ?></strong> <?php _e( 'An existing WordPress network was detected.' ); ?></p></div>	<p><?php _e( 'Please complete the configuration steps. To create a new network, you will need to empty or remove the network database tables.' ); ?></p><?php		}	}	if ( $_POST || ! is_multisite() ) {?>		<h3><?php esc_html_e( 'Enabling the Network' ); ?></h3>		<p><?php _e( 'Complete the following steps to enable the features for creating a network of sites.' ); ?></p>		<div class="updated inline"><p><?php			if ( iis7_supports_permalinks() )				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> file.' );			else				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> and <code>.htaccess</code> files.' );		?></p></div><?php	}?>		<ol>			<li><p><?php				printf( __( 'Create a <code>blogs.dir</code> directory in <code>%s</code>. This directory is used to stored uploaded media for your additional sites and must be writeable by the web server.' ), WP_CONTENT_DIR );				if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )					echo ' <strong>' . __('Warning:') . ' ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</strong';			?></p></li>			<li><p><?php printf( __( 'Add the following to your <code>wp-config.php</code> file in <code>%s</code> <strong>above</strong> the line reading <code>/* That&#8217;s all, stop editing! Happy blogging. */</code>:' ), ABSPATH ); ?></p>				<textarea class="code" readonly="readonly" cols="100" rows="7">define( 'MULTISITE', true );define( 'SUBDOMAIN_INSTALL', <?php echo $subdomain_install ? 'true' : 'false'; ?> );$base = '<?php echo $base; ?>';define( 'DOMAIN_CURRENT_SITE', '<?php echo $hostname; ?>' );define( 'PATH_CURRENT_SITE', '<?php echo $base; ?>' );define( 'SITE_ID_CURRENT_SITE', 1 );define( 'BLOG_ID_CURRENT_SITE', 1 );</textarea><?php	$keys_salts = array( 'AUTH_KEY' => '', 'SECURE_AUTH_KEY' => '', 'LOGGED_IN_KEY' => '', 'NONCE_KEY' => '', 'AUTH_SALT' => '', 'SECURE_AUTH_SALT' => '', 'LOGGED_IN_SALT' => '', 'NONCE_SALT' => '' );	foreach ( $keys_salts as $c => $v ) {		if ( defined( $c ) )			unset( $keys_salts[ $c ] );	}	if ( ! empty( $keys_salts ) ) {		$from_api = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );		if ( is_wp_error( $from_api ) ) {			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = wp_generate_password( 64, true, true );			}		} else {			$from_api = explode( "\n", wp_remote_retrieve_body( $from_api ) );			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = substr( array_shift( $from_api ), 28, 64 );			}		}		$num_keys_salts = count( $keys_salts );?>	<p><?php		echo _n( 'This unique authentication key is also missing from your <code>wp-config.php</code> file.', 'These unique authentication keys are also missing from your <code>wp-config.php</code> file.', $num_keys_salts ); ?> <?php _e( 'To make your installation more secure, you should also add:' ) ?></p>	<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $num_keys_salts; ?>"><?php	foreach ( $keys_salts as $c => $v ) {		echo "\ndefine( '$c', '$v' );";	}?></textarea><?php	}?></li><?php	if ( iis7_supports_permalinks() ) :			if ( $subdomain_install ) {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			} else {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />                    <action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 5" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 6" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 7" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			}	?>		<li><p><?php printf( __( 'Add the following to your <code>web.config</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="20">		<?php echo wp_htmledit_pre( $web_config_file ); ?>		</textarea></li>		</ol>	<?php else : // end iis7_supports_permalinks(). construct an htaccess file instead:		$htaccess_file = 'RewriteEngine OnRewriteBase ' . $base . 'RewriteRule ^index\.php$ - [L]# uploaded filesRewriteRule ^' . ( $subdomain_install ? '' : '([_0-9a-zA-Z-]+/)?' ) . 'files/(.+) wp-includes/ms-files.php?file=$' . ( $subdomain_install ? 1 : 2 ) . ' [L]' . "\n";		if ( ! $subdomain_install )			$htaccess_file .= "\n# add a trailing slash to /wp-admin\n" . 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' . "\n";		$htaccess_file .= "\n" . 'RewriteCond %{REQUEST_FILENAME} -f [OR]RewriteCond %{REQUEST_FILENAME} -dRewriteRule ^ - [L]';		// @todo custom content dir.		if ( ! $subdomain_install )			$htaccess_file .= "\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]";		$htaccess_file .= "\nRewriteRule . index.php [L]";		?>		<li><p><?php printf( __( 'Add the following to your <code>.htaccess</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $subdomain_install ? 11 : 16; ?>"><?php echo wp_htmledit_pre( $htaccess_file ); ?></textarea></li>		</ol>	<?php endif; // end IIS/Apache code branches.	if ( !is_multisite() ) { ?>		<p><?php printf( __( 'Once you complete these steps, your network is enabled and configured. You will have to log in again.') ); ?> <a href="<?php echo esc_url( site_url( 'wp-login.php' ) ); ?>"><?php _e( 'Log In' ); ?></a></p><?php	}}$base = trailingslashit( stripslashes( dirname( dirname( $_SERVER['SCRIPT_NAME'] ) ) ) );if ( $_POST ) {	check_admin_referer( 'install-network-1' );	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	// create network tables	install_network();	$hostname = get_clean_basedomain();	$subdomain_install = !allow_subdomain_install() ? false : (bool) $_POST['subdomain_install'];	if ( ! network_domain_check() ) {		$result = populate_network( 1, get_clean_basedomain(), sanitize_email( $_POST['email'] ), stripslashes( $_POST['sitename'] ), $base, $subdomain_install );		if ( is_wp_error( $result ) ) {			if ( 1 == count( $result->get_error_codes() ) && 'no_wildcard_dns' == $result->get_error_code() )				network_step2( $result );			else				network_step1( $result );		} else {			network_step2();		}	} else {		network_step2();	}} elseif ( is_multisite() || network_domain_check() ) {	network_step2();} else {	network_step1();}?></div><?php include( './admin-footer.php' ); ?>
<?php/** * WordPress DB Class * * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)} * * @package WordPress * @subpackage Database * @since 0.71 *//** * @since 0.71 */define( 'EZSQL_VERSION', 'WP1.25' );/** * @since 0.71 */define( 'OBJECT', 'OBJECT', true );/** * @since 2.5.0 */define( 'OBJECT_K', 'OBJECT_K' );/** * @since 0.71 */define( 'ARRAY_A', 'ARRAY_A' );/** * @since 0.71 */define( 'ARRAY_N', 'ARRAY_N' );/** * WordPress Database Access Abstraction Object * * It is possible to replace this class with your own * by setting the $wpdb global variable in wp-content/db.php * file with your class. You can name it wpdb also, since * this file will not be included, if the other file is * available. * * @link http://codex.wordpress.org/Function_Reference/wpdb_Class * * @package WordPress * @subpackage Database * @since 0.71 * @final */class wpdb {	/**	 * Whether to show SQL/DB errors	 *	 * @since 0.71	 * @access private	 * @var bool	 */	var $show_errors = false;	/**	 * Whether to suppress errors during the DB bootstrapping.	 *	 * @access private	 * @since 2.5	 * @var bool	 */	var $suppress_errors = false;	/**	 * The last error during query.	 *	 * @see get_last_error()	 * @since 2.5	 * @access private	 * @var string	 */	var $last_error = '';	/**	 * Amount of queries made	 *	 * @since 1.2.0	 * @access private	 * @var int	 */	var $num_queries = 0;	/**	 * Count of rows returned by previous query	 *	 * @since 1.2	 * @access private	 * @var int	 */	var $num_rows = 0;	/**	 * Count of affected rows by previous query	 *	 * @since 0.71	 * @access private	 * @var int	 */	var $rows_affected = 0;	/**	 * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).	 *	 * @since 0.71	 * @access public	 * @var int	 */	var $insert_id = 0;	/**	 * Saved result of the last query made	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $last_query;	/**	 * Results of the last query made	 *	 * @since 1.0.0	 * @access private	 * @var array|null	 */	var $last_result;	/**	 * Saved info on the table column	 *	 * @since 1.2.0	 * @access private	 * @var array	 */	var $col_info;	/**	 * Saved queries that were executed	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queries;	/**	 * WordPress table prefix	 *	 * You can set this to have multiple WordPress installations	 * in a single database. The second reason is for possible	 * security precautions.	 *	 * @since 0.71	 * @access private	 * @var string	 */	var $prefix = '';	/**	 * Whether the database queries are ready to start executing.	 *	 * @since 2.5.0	 * @access private	 * @var bool	 */	var $ready = false;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $blogid = 0;	/**	 * {@internal Missing Description}}	 *	 * @since 3.0.0	 * @access public	 * @var int	 */	var $siteid = 0;	/**	 * List of WordPress per-blog tables	 *	 * @since 2.5.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',		'terms', 'term_taxonomy', 'term_relationships', 'commentmeta' );	/**	 * List of deprecated WordPress tables	 *	 * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539	 *	 * @since 2.9.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $old_tables = array( 'categories', 'post2cat', 'link2cat' );	/**	 * List of WordPress global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $global_tables = array( 'users', 'usermeta' );	/**	 * List of Multisite global tables	 *	 * @since 3.0.0	 * @access private	 * @see wpdb::tables()	 * @var array	 */	var $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',		'sitecategories', 'registration_log', 'blog_versions' );	/**	 * WordPress Comments table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $comments;	/**	 * WordPress Comment Metadata table	 *	 * @since 2.9.0	 * @access public	 * @var string	 */	var $commentmeta;	/**	 * WordPress Links table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $links;	/**	 * WordPress Options table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $options;	/**	 * WordPress Post Metadata table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $postmeta;	/**	 * WordPress Posts table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $posts;	/**	 * WordPress Terms table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $terms;	/**	 * WordPress Term Relationships table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_relationships;	/**	 * WordPress Term Taxonomy table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $term_taxonomy;	/*	 * Global and Multisite tables	 */	/**	 * WordPress User Metadata table	 *	 * @since 2.3.0	 * @access public	 * @var string	 */	var $usermeta;	/**	 * WordPress Users table	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $users;	/**	 * Multisite Blogs table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blogs;	/**	 * Multisite Blog Versions table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $blog_versions;	/**	 * Multisite Registration Log table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $registration_log;	/**	 * Multisite Signups table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $signups;	/**	 * Multisite Sites table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $site;	/**	 * Multisite Sitewide Terms table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitecategories;	/**	 * Multisite Site Metadata table	 *	 * @since 3.0.0	 * @access public	 * @var string	 */	var $sitemeta;	/**	 * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.	 *	 * Keys are column names, values are format types: 'ID' => '%d'	 *	 * @since 2.8.0	 * @see wpdb:prepare()	 * @see wpdb:insert()	 * @see wpdb:update()	 * @see wp_set_wpdb_vars()	 * @access public	 * @var array	 */	var $field_types = array();	/**	 * Database table columns charset	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $charset;	/**	 * Database table columns collate	 *	 * @since 2.2.0	 * @access public	 * @var string	 */	var $collate;	/**	 * Whether to use mysql_real_escape_string	 *	 * @since 2.8.0	 * @access public	 * @var bool	 */	var $real_escape = false;	/**	 * Database Username	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $dbuser;	/**	 * A textual description of the last query/get_row/get_var call	 *	 * @since unknown	 * @access public	 * @var string	 */	var $func_call;	/**	 * Connects to the database server and selects a database	 *	 * PHP4 compatibility layer for calling the PHP5 constructor.	 *	 * @uses wpdb::__construct() Passes parameters and returns result	 * @since 0.71	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function wpdb( $dbuser, $dbpassword, $dbname, $dbhost ) {		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB )			$this->db_connect();		return $this->__construct( $dbuser, $dbpassword, $dbname, $dbhost );	}	/**	 * Connects to the database server and selects a database	 *	 * PHP5 style constructor for compatibility with PHP5. Does	 * the actual setting up of the class properties and connection	 * to the database.	 *	 * @link http://core.trac.wordpress.org/ticket/3354	 * @since 2.0.8	 *	 * @param string $dbuser MySQL database user	 * @param string $dbpassword MySQL database password	 * @param string $dbname MySQL database name	 * @param string $dbhost MySQL database host	 */	function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {		register_shutdown_function( array( &$this, '__destruct' ) );		if ( WP_DEBUG )			$this->show_errors();		if ( is_multisite() ) {			$this->charset = 'utf8';			if ( defined( 'DB_COLLATE' ) && DB_COLLATE )				$this->collate = DB_COLLATE;			else				$this->collate = 'utf8_general_ci';		} elseif ( defined( 'DB_COLLATE' ) ) {			$this->collate = DB_COLLATE;		}		if ( defined( 'DB_CHARSET' ) )			$this->charset = DB_CHARSET;		$this->dbuser = $dbuser;		$this->dbh = @mysql_connect( $dbhost, $dbuser, $dbpassword, true );		if ( !$this->dbh ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $dbhost ), 'db_connect_fail' );			return;		}		$this->ready = true;		if ( $this->has_cap( 'collation' ) && !empty( $this->charset ) ) {			if ( function_exists( 'mysql_set_charset' ) ) {				mysql_set_charset( $this->charset, $this->dbh );				$this->real_escape = true;			} else {				$query = $this->prepare( 'SET NAMES %s', $this->charset );				if ( ! empty( $this->collate ) )					$query .= $this->prepare( ' COLLATE %s', $this->collate );				$this->query( $query );			}		}		$this->select( $dbname, $this->dbh );	}	/**	 * PHP5 style destructor and will run when database object is destroyed.	 *	 * @see wpdb::__construct()	 * @since 2.0.8	 * @return bool true	 */	function __destruct() {		return true;	}	/**	 * Sets the table prefix for the WordPress tables.	 *	 * @since 2.5.0	 *	 * @param string $prefix Alphanumeric name for the new prefix.	 * @return string|WP_Error Old prefix or WP_Error on error	 */	function set_prefix( $prefix, $set_table_names = true ) {		if ( preg_match( '|[^a-z0-9_]|i', $prefix ) )			return new WP_Error('invalid_db_prefix', /*WP_I18N_DB_BAD_PREFIX*/'Invalid database prefix'/*/WP_I18N_DB_BAD_PREFIX*/);		$old_prefix = is_multisite() ? '' : $prefix;		if ( isset( $this->base_prefix ) )			$old_prefix = $this->base_prefix;		$this->base_prefix = $prefix;		if ( $set_table_names ) {			foreach ( $this->tables( 'global' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			if ( is_multisite() && empty( $this->blogid ) )				return $old_prefix;			$this->prefix = $this->get_blog_prefix();			foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;			foreach ( $this->tables( 'old' ) as $table => $prefixed_table )				$this->$table = $prefixed_table;		}		return $old_prefix;	}	/**	 * Sets blog id.	 *	 * @since 3.0.0	 * @access public	 * @param int $blog_id	 * @param int $site_id Optional.	 * @return string previous blog id	 */	function set_blog_id( $blog_id, $site_id = 0 ) {		if ( ! empty( $site_id ) )			$this->siteid = $site_id;		$old_blog_id  = $this->blogid;		$this->blogid = $blog_id;		$this->prefix = $this->get_blog_prefix();		foreach ( $this->tables( 'blog' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		foreach ( $this->tables( 'old' ) as $table => $prefixed_table )			$this->$table = $prefixed_table;		return $old_blog_id;	}	/**	 * Gets blog prefix.	 *	 * @uses is_multisite()	 * @since 3.0.0	 * @param int $blog_id Optional.	 * @return string Blog prefix.	 */	function get_blog_prefix( $blog_id = null ) {		if ( is_multisite() ) {			if ( null === $blog_id )				$blog_id = $this->blogid;			if ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )				return $this->base_prefix;			else				return $this->base_prefix . $blog_id . '_';		} else {			return $this->base_prefix;		}	}	/**	 * Returns an array of WordPress tables.	 *	 * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to	 * override the WordPress users and usersmeta tables that would otherwise	 * be determined by the prefix.	 *	 * The scope argument can take one of the following:	 *	 * 'all' - returns 'all' and 'global' tables. No old tables are returned.	 * 'blog' - returns the blog-level tables for the queried blog.	 * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.	 * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.	 * 'old' - returns tables which are deprecated.	 *	 * @since 3.0.0	 * @uses wpdb::$tables	 * @uses wpdb::$old_tables	 * @uses wpdb::$global_tables	 * @uses wpdb::$ms_global_tables	 * @uses is_multisite()	 *	 * @param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.	 * @param bool $prefix Optional. Whether to include table prefixes. Default true. If blog	 * 	prefix is requested, then the custom users and usermeta tables will be mapped.	 * @param int $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.	 * @return array Table names. When a prefix is requested, the key is the unprefixed table name.	 */	function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {		switch ( $scope ) {			case 'all' :				$tables = array_merge( $this->global_tables, $this->tables );				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'blog' :				$tables = $this->tables;				break;			case 'global' :				$tables = $this->global_tables;				if ( is_multisite() )					$tables = array_merge( $tables, $this->ms_global_tables );				break;			case 'ms_global' :				$tables = $this->ms_global_tables;				break;			case 'old' :				$tables = $this->old_tables;				break;			default :				return array();				break;		}		if ( $prefix ) {			if ( ! $blog_id )				$blog_id = $this->blogid;			$blog_prefix = $this->get_blog_prefix( $blog_id );			$base_prefix = $this->base_prefix;			$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );			foreach ( $tables as $k => $table ) {				if ( in_array( $table, $global_tables ) )					$tables[ $table ] = $base_prefix . $table;				else					$tables[ $table ] = $blog_prefix . $table;				unset( $tables[ $k ] );			}			if ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )				$tables['users'] = CUSTOM_USER_TABLE;			if ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )				$tables['usermeta'] = CUSTOM_USER_META_TABLE;		}		return $tables;	}	/**	 * Selects a database using the current database connection.	 *	 * The database name will be changed based on the current database	 * connection. On failure, the execution will bail and display an DB error.	 *	 * @since 0.71	 *	 * @param string $db MySQL database name	 * @param resource $dbh Optional link identifier.	 * @return null Always null.	 */	function select( $db, $dbh = null) {		if ( is_null($dbh) ) 			$dbh = $this->dbh;		if ( !@mysql_select_db( $db, $dbh ) ) {			$this->ready = false;			$this->bail( sprintf( /*WP_I18N_DB_SELECT_DB*/'<h1>Can&#8217;t select database</h1><p>We were able to connect to the database server (which means your username and password is okay) but not able to select the <code>%1$s</code> database.</p><ul><li>Are you sure it exists?</li><li>Does the user <code>%2$s</code> have permission to use the <code>%1$s</code> database?</li><li>On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?</li></ul><p>If you don\'t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href="http://wordpress.org/support/">WordPress Support Forums</a>.</p>'/*/WP_I18N_DB_SELECT_DB*/, $db, $this->dbuser ), 'db_select_fail' );			return;		}	}	/**	 * Weak escape, using addslashes()	 *	 * @see addslashes()	 * @since 2.8.0	 * @access private	 *	 * @param string $string	 * @return string	 */	function _weak_escape( $string ) {		return addslashes( $string );	}	/**	 * Real escape, using mysql_real_escape_string() or addslashes()	 *	 * @see mysql_real_escape_string()	 * @see addslashes()	 * @since 2.8	 * @access private	 *	 * @param  string $string to escape	 * @return string escaped	 */	function _real_escape( $string ) {		if ( $this->dbh && $this->real_escape )			return mysql_real_escape_string( $string, $this->dbh );		else			return addslashes( $string );	}	/**	 * Escape data. Works on arrays.	 *     * @uses wpdb::_escape()     * @uses wpdb::_real_escape()	 * @since  2.8	 * @access private	 *	 * @param  string|array $data	 * @return string|array escaped	 */	function _escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array($v) )					$data[$k] = $this->_escape( $v );				else					$data[$k] = $this->_real_escape( $v );			}		} else {			$data = $this->_real_escape( $data );		}		return $data;	}	/**	 * Escapes content for insertion into the database using addslashes(), for security.	 *	 * Works on arrays.	 *	 * @since 0.71	 * @param string|array $data to escape	 * @return string|array escaped as query safe string	 */	function escape( $data ) {		if ( is_array( $data ) ) {			foreach ( (array) $data as $k => $v ) {				if ( is_array( $v ) )					$data[$k] = $this->escape( $v );				else					$data[$k] = $this->_weak_escape( $v );			}		} else {			$data = $this->_weak_escape( $data );		}		return $data;	}	/**	 * Escapes content by reference for insertion into the database, for security	 *	 * @uses wpdb::_real_escape()	 * @since 2.3.0	 * @param string $string to escape	 * @return void	 */	function escape_by_ref( &$string ) {		$string = $this->_real_escape( $string );	}	/**	 * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.	 *	 * The following directives can be used in the query format string:	 *   %d (decimal number)	 *   %s (string)	 *   %% (literal percentage sign - no argument needed)	 *	 * Both %d and %s are to be left unquoted in the query string and they need an argument passed for them.	 * Literals (%) as parts of the query must be properly written as %%.	 *	 * This function only supports a small subset of the sprintf syntax; it only supports %d (decimal number), %s (string).	 * Does not support sign, padding, alignment, width or precision specifiers.	 * Does not support argument numbering/swapping.	 *	 * May be called like {@link http://php.net/sprintf sprintf()} or like {@link http://php.net/vsprintf vsprintf()}.	 *	 * Both %d and %s should be left unquoted in the query string.	 *	 * <code>	 * wpdb::prepare( "SELECT * FROM `table` WHERE `column` = %s AND `field` = %d", 'foo', 1337 )	 * wpdb::prepare( "SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s", 'foo' );	 * </code>	 *	 * @link http://php.net/sprintf Description of syntax.	 * @since 2.3.0	 *	 * @param string $query Query statement with sprintf()-like placeholders	 * @param array|mixed $args The array of variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/vsprintf vsprintf()}, or the first variable to substitute into the query's placeholders if	 * 	being called like {@link http://php.net/sprintf sprintf()}.	 * @param mixed $args,... further variables to substitute into the query's placeholders if being called like	 * 	{@link http://php.net/sprintf sprintf()}.	 * @return null|false|string Sanitized query string, null if there is no query, false if there is an error and string	 * 	if there was something to prepare	 */	function prepare( $query = null ) { // ( $query, *$args )		if ( is_null( $query ) )			return;		$args = func_get_args();		array_shift( $args );		// If args were passed as an array (as in vsprintf), move them up		if ( isset( $args[0] ) && is_array($args[0]) )			$args = $args[0];		$query = str_replace( "'%s'", '%s', $query ); // in case someone mistakenly already singlequoted it		$query = str_replace( '"%s"', '%s', $query ); // doublequote unquoting		$query = preg_replace( '|(?<!%)%s|', "'%s'", $query ); // quote the strings, avoiding escaped strings like %%s		array_walk( $args, array( &$this, 'escape_by_ref' ) );		return @vsprintf( $query, $args );	}	/**	 * Print SQL/DB error.	 *	 * @since 0.71	 * @global array $EZSQL_ERROR Stores error information of query and error string	 *	 * @param string $str The error to display	 * @return bool False if the showing of errors is disabled.	 */	function print_error( $str = '' ) {		global $EZSQL_ERROR;		if ( !$str )			$str = mysql_error( $this->dbh );		$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );		if ( $this->suppress_errors )			return false;		if ( $caller = $this->get_caller() )			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR_FULL*/'WordPress database error %1$s for query %2$s made by %3$s'/*/WP_I18N_DB_QUERY_ERROR_FULL*/, $str, $this->last_query, $caller );		else			$error_str = sprintf( /*WP_I18N_DB_QUERY_ERROR*/'WordPress database error %1$s for query %2$s'/*/WP_I18N_DB_QUERY_ERROR*/, $str, $this->last_query );		if ( function_exists( 'error_log' )			&& ( $log_file = @ini_get( 'error_log' ) )			&& ( 'syslog' == $log_file || @is_writable( $log_file ) )			)			@error_log( $error_str );		// Are we showing errors?		if ( ! $this->show_errors )			return false;		// If there is an error then take note of it		if ( is_multisite() ) {			$msg = "WordPress database error: [$str]\n{$this->last_query}\n";			if ( defined( 'ERRORLOGFILE' ) )				error_log( $msg, 3, ERRORLOGFILE );			if ( defined( 'DIEONDBERROR' ) )				wp_die( $msg );		} else {			$str   = htmlspecialchars( $str, ENT_QUOTES );			$query = htmlspecialchars( $this->last_query, ENT_QUOTES );			print "<div id='error'>			<p class='wpdberror'><strong>WordPress database error:</strong> [$str]<br />			<code>$query</code></p>			</div>";		}	}	/**	 * Enables showing of database errors.	 *	 * This function should be used only to enable showing of errors.	 * wpdb::hide_errors() should be used instead for hiding of errors. However,	 * this function can be used to enable and disable showing of database	 * errors.	 *	 * @since 0.71	 * @see wpdb::hide_errors()	 *	 * @param bool $show Whether to show or hide errors	 * @return bool Old value for showing errors.	 */	function show_errors( $show = true ) {		$errors = $this->show_errors;		$this->show_errors = $show;		return $errors;	}	/**	 * Disables showing of database errors.	 *	 * By default database errors are not shown.	 *	 * @since 0.71	 * @see wpdb::show_errors()	 *	 * @return bool Whether showing of errors was active	 */	function hide_errors() {		$show = $this->show_errors;		$this->show_errors = false;		return $show;	}	/**	 * Whether to suppress database errors.	 *	 * By default database errors are suppressed, with a simple	 * call to this function they can be enabled.	 *	 * @since 2.5	 * @see wpdb::hide_errors()	 * @param bool $suppress Optional. New value. Defaults to true.	 * @return bool Old value	 */	function suppress_errors( $suppress = true ) {		$errors = $this->suppress_errors;		$this->suppress_errors = (bool) $suppress;		return $errors;	}	/**	 * Kill cached query results.	 *	 * @since 0.71	 * @return void	 */	function flush() {		$this->last_result = array();		$this->col_info    = null;		$this->last_query  = null;	}	function db_connect( $query = "SELECT" ) {		global $db_list, $global_db_list;		if ( ! is_array( $db_list ) )			return true;		if ( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {			$action = 'global';			$details = $global_db_list[ mt_rand( 0, count( $global_db_list ) -1 ) ];			$this->db_global = $details;		} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {			$action = 'write';			$details = $db_list[ 'write' ][ mt_rand( 0, count( $db_list[ 'write' ] ) -1 ) ];			$this->db_write = $details;		} else {			$action = '';			$details = $db_list[ 'read' ][ mt_rand( 0, count( $db_list[ 'read' ] ) -1 ) ];			$this->db_read = $details;		}		$dbhname = "dbh" . $action;		$this->$dbhname = @mysql_connect( $details[ 'db_host' ], $details[ 'db_user' ], $details[ 'db_password' ] );		if (!$this->$dbhname ) {			$this->bail( sprintf( /*WP_I18N_DB_CONN_ERROR*/"<h1>Error establishing a database connection</h1><p>This either means that the username and password information in your <code>wp-config.php</code> file is incorrect or we can't contact the database server at <code>%s</code>. This could mean your host's database server is down.</p><ul>	<li>Are you sure you have the correct username and password?</li>	<li>Are you sure that you have typed the correct hostname?</li>	<li>Are you sure that the database server is running?</li></ul><p>If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href='http://wordpress.org/support/'>WordPress Support Forums</a>.</p>"/*/WP_I18N_DB_CONN_ERROR*/, $details['db_host'] ), 'db_connect_fail' );		}		$this->select( $details[ 'db_name' ], $this->$dbhname );	}	/**	 * Perform a MySQL database query, using current database connection.	 *	 * More information can be found on the codex page.	 *	 * @since 0.71	 *	 * @param string $query Database query	 * @return int|false Number of rows affected/selected or false on error	 */	function query( $query ) {		if ( ! $this->ready )			return false;		// some queries are made before the plugins have been loaded, and thus cannot be filtered with this method		if ( function_exists( 'apply_filters' ) )			$query = apply_filters( 'query', $query );		$return_val = 0;		$this->flush();		// Log how the function was called		$this->func_call = "\$db->query(\"$query\")";		// Keep track of the last query for debug..		$this->last_query = $query;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->timer_start();		// use $this->dbh for read ops, and $this->dbhwrite for write ops		// use $this->dbhglobal for gloal table ops		unset( $dbh );		if( defined( 'WP_USE_MULTIPLE_DB' ) && WP_USE_MULTIPLE_DB ) {			if( $this->blogs != '' && preg_match("/(" . $this->blogs . "|" . $this->users . "|" . $this->usermeta . "|" . $this->site . "|" . $this->sitemeta . "|" . $this->sitecategories . ")/i",$query) ) {				if( false == isset( $this->dbhglobal ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhglobal;				$this->last_db_used = "global";			} elseif ( preg_match("/^\\s*(alter table|create|insert|delete|update|replace) /i",$query) ) {				if( false == isset( $this->dbhwrite ) ) {					$this->db_connect( $query );				}				$dbh =& $this->dbhwrite;				$this->last_db_used = "write";			} else {				$dbh =& $this->dbh;				$this->last_db_used = "read";			}		} else {			$dbh =& $this->dbh;			$this->last_db_used = "other/read";		}		$this->result = @mysql_query( $query, $dbh );		$this->num_queries++;		if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES )			$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );		// If there is an error then take note of it..		if ( $this->last_error = mysql_error( $dbh ) ) {			$this->print_error();			return false;		}		if ( preg_match( "/^\\s*(insert|delete|update|replace|alter) /i", $query ) ) {			$this->rows_affected = mysql_affected_rows( $dbh );			// Take note of the insert_id			if ( preg_match( "/^\\s*(insert|replace) /i", $query ) ) {				$this->insert_id = mysql_insert_id($dbh);			}			// Return number of rows affected			$return_val = $this->rows_affected;		} else {			$i = 0;			while ( $i < @mysql_num_fields( $this->result ) ) {				$this->col_info[$i] = @mysql_fetch_field( $this->result );				$i++;			}			$num_rows = 0;			while ( $row = @mysql_fetch_object( $this->result ) ) {				$this->last_result[$num_rows] = $row;				$num_rows++;			}			@mysql_free_result( $this->result );			// Log number of rows the query returned			// and return number of rows selected			$this->num_rows = $num_rows;			$return_val     = $num_rows;		}		return $return_val;	}	/**	 * Insert a row into a table.	 *	 * <code>	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows inserted, or false on error.	 */	function insert( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );	}	/**	 * Replace a row into a table.	 *	 * <code>	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )	 * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )	 * </code>	 *	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function replace( $table, $data, $format = null ) {		return $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );	}	/**	 * Helper function for insert and replace.	 *	 * Runs an insert or replace query based on $type argument.	 *	 * @access private	 * @since 3.0.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to insert (in column => value pairs).  Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @return int|false The number of rows affected, or false on error.	 */	function _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {		if ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) )			return false;		$formats = $format = (array) $format;		$fields = array_keys( $data );		$formatted_fields = array();		foreach ( $fields as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$formatted_fields[] = $form;		}		$sql = "{$type} INTO `$table` (`" . implode( '`,`', $fields ) . "`) VALUES ('" . implode( "','", $formatted_fields ) . "')";		return $this->query( $this->prepare( $sql, $data ) );	}	/**	 * Update a row in the table	 *	 * <code>	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )	 * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )	 * </code>	 *	 * @since 2.5.0	 * @see wpdb::prepare()	 * @see wpdb::$field_types	 * @see wp_set_wpdb_vars()	 *	 * @param string $table table name	 * @param array $data Data to update (in column => value pairs). Both $data columns and $data values should be "raw" (neither should be SQL escaped).	 * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be "raw".	 * @param array|string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data.	 * 	A format is one of '%d', '%s' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.	 * @param array|string $format_where Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where.  A format is one of '%d', '%s' (decimal number, string).  If omitted, all values in $where will be treated as strings.	 * @return int|false The number of rows updated, or false on error.	 */	function update( $table, $data, $where, $format = null, $where_format = null ) {		if ( ! is_array( $data ) || ! is_array( $where ) )			return false;		$formats = $format = (array) $format;		$bits = $wheres = array();		foreach ( (array) array_keys( $data ) as $field ) {			if ( !empty( $format ) )				$form = ( $form = array_shift( $formats ) ) ? $form : $format[0];			elseif ( isset($this->field_types[$field]) )				$form = $this->field_types[$field];			else				$form = '%s';			$bits[] = "`$field` = {$form}";		}		$where_formats = $where_format = (array) $where_format;		foreach ( (array) array_keys( $where ) as $field ) {			if ( !empty( $where_format ) )				$form = ( $form = array_shift( $where_formats ) ) ? $form : $where_format[0];			elseif ( isset( $this->field_types[$field] ) )				$form = $this->field_types[$field];			else				$form = '%s';			$wheres[] = "`$field` = {$form}";		}		$sql = "UPDATE `$table` SET " . implode( ', ', $bits ) . ' WHERE ' . implode( ' AND ', $wheres );		return $this->query( $this->prepare( $sql, array_merge( array_values( $data ), array_values( $where ) ) ) );	}	/**	 * Retrieve one variable from the database.	 *	 * Executes a SQL query and returns the value from the SQL result.	 * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.	 * If $query is null, this function returns the value in the specified column and row from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.	 * @param int $x Optional. Column of value to return.  Indexed from 0.	 * @param int $y Optional. Row of value to return.  Indexed from 0.	 * @return string|null Database query result (as string), or null on failure	 */	function get_var( $query = null, $x = 0, $y = 0 ) {		$this->func_call = "\$db->get_var(\"$query\", $x, $y)";		if ( $query )			$this->query( $query );		// Extract var out of cached results based x,y vals		if ( !empty( $this->last_result[$y] ) ) {			$values = array_values( get_object_vars( $this->last_result[$y] ) );		}		// If there is a value return it else return null		return ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;	}	/**	 * Retrieve one row from the database.	 *	 * Executes a SQL query and returns the row from the SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query SQL query.	 * @param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...),	 * 	a numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.	 * @param int $y Optional. Row to return. Indexed from 0.	 * @return mixed Database query result in format specifed by $output or null on failure	 */	function get_row( $query = null, $output = OBJECT, $y = 0 ) {		$this->func_call = "\$db->get_row(\"$query\",$output,$y)";		if ( $query )			$this->query( $query );		else			return null;		if ( !isset( $this->last_result[$y] ) )			return null;		if ( $output == OBJECT ) {			return $this->last_result[$y] ? $this->last_result[$y] : null;		} elseif ( $output == ARRAY_A ) {			return $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;		} elseif ( $output == ARRAY_N ) {			return $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;		} else {			$this->print_error(/*WP_I18N_DB_GETROW_ERROR*/" \$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N"/*/WP_I18N_DB_GETROW_ERROR*/);		}	}	/**	 * Retrieve one column from the database.	 *	 * Executes a SQL query and returns the column from the SQL result.	 * If the SQL result contains more than one column, this function returns the column specified.	 * If $query is null, this function returns the specified column from the previous SQL result.	 *	 * @since 0.71	 *	 * @param string|null $query Optional. SQL query. Defaults to previous query.	 * @param int $x Optional. Column to return. Indexed from 0.	 * @return array Database query result. Array indexed from 0 by SQL result row number.	 */	function get_col( $query = null , $x = 0 ) {		if ( $query )			$this->query( $query );		$new_array = array();		// Extract the column values		for ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {			$new_array[$i] = $this->get_var( null, $x, $i );		}		return $new_array;	}	/**	 * Retrieve an entire SQL result set from the database (i.e., many rows)	 *	 * Executes a SQL query and returns the entire SQL result.	 *	 * @since 0.71	 *	 * @param string $query SQL query.	 * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number.	 * 	Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.	 * 	With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.  Duplicate keys are discarded.	 * @return mixed Database query results	 */	function get_results( $query = null, $output = OBJECT ) {		$this->func_call = "\$db->get_results(\"$query\", $output)";		if ( $query )			$this->query( $query );		else			return null;		$new_array = array();		if ( $output == OBJECT ) {			// Return an integer-keyed array of row objects			return $this->last_result;		} elseif ( $output == OBJECT_K ) {			// Return an array of row objects with keys from column 1			// (Duplicates are discarded)			foreach ( $this->last_result as $row ) {				$key = array_shift( get_object_vars( $row ) );				if ( ! isset( $new_array[ $key ] ) )					$new_array[ $key ] = $row;			}			return $new_array;		} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {			// Return an integer-keyed array of...			if ( $this->last_result ) {				foreach( (array) $this->last_result as $row ) {					if ( $output == ARRAY_N ) {						// ...integer-keyed row arrays						$new_array[] = array_values( get_object_vars( $row ) );					} else {						// ...column name-keyed row arrays						$new_array[] = get_object_vars( $row );					}				}			}			return $new_array;		}		return null;	}	/**	 * Retrieve column metadata from the last query.	 *	 * @since 0.71	 *	 * @param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill	 * @param int $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type	 * @return mixed Column Results	 */	function get_col_info( $info_type = 'name', $col_offset = -1 ) {		if ( $this->col_info ) {			if ( $col_offset == -1 ) {				$i = 0;				$new_array = array();				foreach( (array) $this->col_info as $col ) {					$new_array[$i] = $col->{$info_type};					$i++;				}				return $new_array;			} else {				return $this->col_info[$col_offset]->{$info_type};			}		}	}	/**	 * Starts the timer, for debugging purposes.	 *	 * @since 1.5.0	 *	 * @return true	 */	function timer_start() {		$mtime            = explode( ' ', microtime() );		$this->time_start = $mtime[1] + $mtime[0];		return true;	}	/**	 * Stops the debugging timer.	 *	 * @since 1.5.0	 *	 * @return int Total time spent on the query, in milliseconds	 */	function timer_stop() {		$mtime      = explode( ' ', microtime() );		$time_end   = $mtime[1] + $mtime[0];		$time_total = $time_end - $this->time_start;		return $time_total;	}	/**	 * Wraps errors in a nice header and footer and dies.	 *	 * Will not die if wpdb::$show_errors is true	 *	 * @since 1.5.0	 *	 * @param string $message The Error message	 * @param string $error_code Optional. A Computer readable string to identify the error.	 * @return false|void	 */	function bail( $message, $error_code = '500' ) {		if ( !$this->show_errors ) {			if ( class_exists( 'WP_Error' ) )				$this->error = new WP_Error($error_code, $message);			else				$this->error = $message;			return false;		}		wp_die($message);	}	/**	 * Whether MySQL database is at least the required minimum version.	 *	 * @since 2.5.0	 * @uses $wp_version	 * @uses $required_mysql_version	 *	 * @return WP_Error	 */	function check_database_version() {		global $wp_version, $required_mysql_version;		// Make sure the server has the required MySQL version		if ( version_compare($this->db_version(), $required_mysql_version, '<') )			return new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));	}	/**	 * Whether the database supports collation.	 *	 * Called when WordPress is generating the table scheme.	 *	 * @since 2.5.0	 *	 * @return bool True if collation is supported, false if version does not	 */	function supports_collation() {		return $this->has_cap( 'collation' );	}	/**	 * Determine if a database supports a particular feature	 *	 * @since 2.7	 * @see   wpdb::db_version()	 *	 * @param string $db_cap the feature	 * @return bool	 */	function has_cap( $db_cap ) {		$version = $this->db_version();		switch ( strtolower( $db_cap ) ) {			case 'collation' :    // @since 2.5.0			case 'group_concat' : // @since 2.7			case 'subqueries' :   // @since 2.7				return version_compare( $version, '4.1', '>=' );		};		return false;	}	/**	 * Retrieve the name of the function that called wpdb.	 *	 * Searches up the list of functions until it reaches	 * the one that would most logically had called this method.	 *	 * @since 2.5.0	 *	 * @return string The name of the calling function	 */	function get_caller() {		$trace  = array_reverse( debug_backtrace() );		$caller = array();		foreach ( $trace as $call ) {			if ( isset( $call['class'] ) && __CLASS__ == $call['class'] )				continue; // Filter out wpdb calls.			$caller[] = isset( $call['class'] ) ? "{$call['class']}->{$call['function']}" : $call['function'];		}		return join( ', ', $caller );	}	/**	 * The database version number.	 *	 * @return false|string false on failure, version number on success	 */	function db_version() {		return preg_replace( '/[^0-9.].*/', '', mysql_get_server_info( $this->dbh ) );	}}if ( ! isset( $wpdb ) ) {	/**	 * WordPress Database Object, if it isn't set already in wp-content/db.php	 * @global object $wpdb Creates a new wpdb object based on wp-config.php Constants for the database	 * @since 0.71	 */	$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );}?>
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
<?php/** * WordPress Administration Scheme API * * Here we keep the DB structure and option values. * * @package WordPress * @subpackage Administration *//** * The database character collate. * @var string * @global string * @name $charset_collate */$charset_collate = '';// Declare these as global in case schema.php is included from a function.global $wpdb, $wp_queries;if ( ! empty($wpdb->charset) )	$charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";if ( ! empty($wpdb->collate) )	$charset_collate .= " COLLATE $wpdb->collate";/** Create WordPress database tables SQL */$wp_queries = "CREATE TABLE $wpdb->terms ( term_id bigint(20) unsigned NOT NULL auto_increment, name varchar(200) NOT NULL default '', slug varchar(200) NOT NULL default '', term_group bigint(10) NOT NULL default 0, PRIMARY KEY  (term_id), UNIQUE KEY slug (slug), KEY name (name)) $charset_collate;CREATE TABLE $wpdb->term_taxonomy ( term_taxonomy_id bigint(20) unsigned NOT NULL auto_increment, term_id bigint(20) unsigned NOT NULL default 0, taxonomy varchar(32) NOT NULL default '', description longtext NOT NULL, parent bigint(20) unsigned NOT NULL default 0, count bigint(20) NOT NULL default 0, PRIMARY KEY  (term_taxonomy_id), UNIQUE KEY term_id_taxonomy (term_id,taxonomy), KEY taxonomy (taxonomy)) $charset_collate;CREATE TABLE $wpdb->term_relationships ( object_id bigint(20) unsigned NOT NULL default 0, term_taxonomy_id bigint(20) unsigned NOT NULL default 0, term_order int(11) NOT NULL default 0, PRIMARY KEY  (object_id,term_taxonomy_id), KEY term_taxonomy_id (term_taxonomy_id)) $charset_collate;CREATE TABLE $wpdb->commentmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  comment_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY comment_id (comment_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->comments (  comment_ID bigint(20) unsigned NOT NULL auto_increment,  comment_post_ID bigint(20) unsigned NOT NULL default '0',  comment_author tinytext NOT NULL,  comment_author_email varchar(100) NOT NULL default '',  comment_author_url varchar(200) NOT NULL default '',  comment_author_IP varchar(100) NOT NULL default '',  comment_date datetime NOT NULL default '0000-00-00 00:00:00',  comment_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  comment_content text NOT NULL,  comment_karma int(11) NOT NULL default '0',  comment_approved varchar(20) NOT NULL default '1',  comment_agent varchar(255) NOT NULL default '',  comment_type varchar(20) NOT NULL default '',  comment_parent bigint(20) unsigned NOT NULL default '0',  user_id bigint(20) unsigned NOT NULL default '0',  PRIMARY KEY  (comment_ID),  KEY comment_approved (comment_approved),  KEY comment_post_ID (comment_post_ID),  KEY comment_approved_date_gmt (comment_approved,comment_date_gmt),  KEY comment_date_gmt (comment_date_gmt),  KEY comment_parent (comment_parent)) $charset_collate;CREATE TABLE $wpdb->links (  link_id bigint(20) unsigned NOT NULL auto_increment,  link_url varchar(255) NOT NULL default '',  link_name varchar(255) NOT NULL default '',  link_image varchar(255) NOT NULL default '',  link_target varchar(25) NOT NULL default '',  link_description varchar(255) NOT NULL default '',  link_visible varchar(20) NOT NULL default 'Y',  link_owner bigint(20) unsigned NOT NULL default '1',  link_rating int(11) NOT NULL default '0',  link_updated datetime NOT NULL default '0000-00-00 00:00:00',  link_rel varchar(255) NOT NULL default '',  link_notes mediumtext NOT NULL,  link_rss varchar(255) NOT NULL default '',  PRIMARY KEY  (link_id),  KEY link_visible (link_visible)) $charset_collate;CREATE TABLE $wpdb->options (  option_id bigint(20) unsigned NOT NULL auto_increment,  blog_id int(11) NOT NULL default '0',  option_name varchar(64) NOT NULL default '',  option_value longtext NOT NULL,  autoload varchar(20) NOT NULL default 'yes',  PRIMARY KEY  (option_id),  UNIQUE KEY option_name (option_name)) $charset_collate;CREATE TABLE $wpdb->postmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  post_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY post_id (post_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->posts (  ID bigint(20) unsigned NOT NULL auto_increment,  post_author bigint(20) unsigned NOT NULL default '0',  post_date datetime NOT NULL default '0000-00-00 00:00:00',  post_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content longtext NOT NULL,  post_title text NOT NULL,  post_excerpt text NOT NULL,  post_status varchar(20) NOT NULL default 'publish',  comment_status varchar(20) NOT NULL default 'open',  ping_status varchar(20) NOT NULL default 'open',  post_password varchar(20) NOT NULL default '',  post_name varchar(200) NOT NULL default '',  to_ping text NOT NULL,  pinged text NOT NULL,  post_modified datetime NOT NULL default '0000-00-00 00:00:00',  post_modified_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content_filtered text NOT NULL,  post_parent bigint(20) unsigned NOT NULL default '0',  guid varchar(255) NOT NULL default '',  menu_order int(11) NOT NULL default '0',  post_type varchar(20) NOT NULL default 'post',  post_mime_type varchar(100) NOT NULL default '',  comment_count bigint(20) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY post_name (post_name),  KEY type_status_date (post_type,post_status,post_date,ID),  KEY post_parent (post_parent),  KEY post_author (post_author)) $charset_collate;CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->usermeta (  umeta_id bigint(20) unsigned NOT NULL auto_increment,  user_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (umeta_id),  KEY user_id (user_id),  KEY meta_key (meta_key)) $charset_collate;";/** * Create WordPress options and set the default values. * * @since 1.5.0 * @uses $wpdb * @uses $wp_db_version */function populate_options() {	global $wpdb, $wp_db_version, $current_site;	$guessurl = wp_guess_url();	do_action('populate_options');	if ( ini_get('safe_mode') ) {		// Safe mode can break mkdir() so use a flat structure by default.		$uploads_use_yearmonth_folders = 0;	} else {		$uploads_use_yearmonth_folders = 1;	}	$options = array(	'siteurl' => $guessurl,	'blogname' => __('My Site'),	/* translators: blog tagline */	'blogdescription' => __('Just another WordPress site'),	'users_can_register' => 0,	'admin_email' => 'you@example.com',	'start_of_week' => 1,	'use_balanceTags' => 0,	'use_smilies' => 1,	'require_name_email' => 1,	'comments_notify' => 1,	'posts_per_rss' => 10,	'rss_use_excerpt' => 0,	'mailserver_url' => 'mail.example.com',	'mailserver_login' => 'login@example.com',	'mailserver_pass' => 'password',	'mailserver_port' => 110,	'default_category' => 1,	'default_comment_status' => 'open',	'default_ping_status' => 'open',	'default_pingback_flag' => 1,	'default_post_edit_rows' => 10,	'posts_per_page' => 10,	/* translators: default date format, see http://php.net/date */	'date_format' => __('F j, Y'),	/* translators: default time format, see http://php.net/date */	'time_format' => __('g:i a'),	/* translators: links last updated date format, see http://php.net/date */	'links_updated_date_format' => __('F j, Y g:i a'),	'links_recently_updated_prepend' => '<em>',	'links_recently_updated_append' => '</em>',	'links_recently_updated_time' => 120,	'comment_moderation' => 0,	'moderation_notify' => 1,	'permalink_structure' => '',	'gzipcompression' => 0,	'hack_file' => 0,	'blog_charset' => 'UTF-8',	'moderation_keys' => '',	'active_plugins' => array(),	'home' => $guessurl,	'category_base' => '',	'ping_sites' => 'http://rpc.pingomatic.com/',	'advanced_edit' => 0,	'comment_max_links' => 2,	'gmt_offset' => date('Z') / 3600,	// 1.5	'default_email_category' => 1,	'recently_edited' => '',	'template' => WP_DEFAULT_THEME,	'stylesheet' => WP_DEFAULT_THEME,	'comment_whitelist' => 1,	'blacklist_keys' => '',	'comment_registration' => 0,	'rss_language' => 'en',	'html_type' => 'text/html',	// 1.5.1	'use_trackback' => 0,	// 2.0	'default_role' => 'subscriber',	'db_version' => $wp_db_version,	// 2.0.1	'uploads_use_yearmonth_folders' => $uploads_use_yearmonth_folders,	'upload_path' => '',	// 2.1	'blog_public' => '1',	'default_link_category' => 2,	'show_on_front' => 'posts',	// 2.2	'tag_base' => '',	// 2.5	'show_avatars' => '1',	'avatar_rating' => 'G',	'upload_url_path' => '',	'thumbnail_size_w' => 150,	'thumbnail_size_h' => 150,	'thumbnail_crop' => 1,	'medium_size_w' => 300,	'medium_size_h' => 300,	// 2.6	'avatar_default' => 'mystery',	'enable_app' => 0,	'enable_xmlrpc' => 0,	// 2.7	'large_size_w' => 1024,	'large_size_h' => 1024,	'image_default_link_type' => 'file',	'image_default_size' => '',	'image_default_align' => '',	'close_comments_for_old_posts' => 0,	'close_comments_days_old' => 14,	'thread_comments' => 1,	'thread_comments_depth' => 5,	'page_comments' => 0,	'comments_per_page' => 50,	'default_comments_page' => 'newest',	'comment_order' => 'asc',	'sticky_posts' => array(),	'widget_categories' => array(),	'widget_text' => array(),	'widget_rss' => array(),	// 2.8	'timezone_string' => '',	// 2.9	'embed_autourls' => 1,	'embed_size_w' => '',	'embed_size_h' => 600,	// 3.0	'page_for_posts' => 0,	'page_on_front' => 0,	);	// 3.0 multisite	if ( is_multisite() ) {		/* translators: blog tagline */		$options[ 'blogdescription' ] = sprintf(__('Just another %s site'), $current_site->site_name );		$options[ 'permalink_structure' ] = '/%year%/%monthnum%/%day%/%postname%/';	}	// Set autoload to no for these options	$fat_options = array( 'moderation_keys', 'recently_edited', 'blacklist_keys' );	$existing_options = $wpdb->get_col("SELECT option_name FROM $wpdb->options");	$insert = '';	foreach ( $options as $option => $value ) {		if ( in_array($option, $existing_options) )			continue;		if ( in_array($option, $fat_options) )			$autoload = 'no';		else			$autoload = 'yes';		$option = $wpdb->escape($option);		if ( is_array($value) )			$value = serialize($value);		$value = $wpdb->escape($value);		if ( !empty($insert) )			$insert .= ', ';		$insert .= "('$option', '$value', '$autoload')";	}	if ( !empty($insert) )		$wpdb->query("INSERT INTO $wpdb->options (option_name, option_value, autoload) VALUES " . $insert);	// in case it is set, but blank, update "home"	if ( !__get_option('home') ) update_option('home', $guessurl);	// Delete unused options	$unusedoptions = array ('blodotgsping_url', 'bodyterminator', 'emailtestonly', 'phoneemail_separator', 'smilies_directory', 'subjectprefix', 'use_bbcode', 'use_blodotgsping', 'use_phoneemail', 'use_quicktags', 'use_weblogsping', 'weblogs_cache_file', 'use_preview', 'use_htmltrans', 'smilies_directory', 'fileupload_allowedusers', 'use_phoneemail', 'default_post_status', 'default_post_category', 'archive_mode', 'time_difference', 'links_minadminlevel', 'links_use_adminlevels', 'links_rating_type', 'links_rating_char', 'links_rating_ignore_zero', 'links_rating_single_image', 'links_rating_image0', 'links_rating_image1', 'links_rating_image2', 'links_rating_image3', 'links_rating_image4', 'links_rating_image5', 'links_rating_image6', 'links_rating_image7', 'links_rating_image8', 'links_rating_image9', 'weblogs_cacheminutes', 'comment_allowed_tags', 'search_engine_friendly_urls', 'default_geourl_lat', 'default_geourl_lon', 'use_default_geourl', 'weblogs_xml_url', 'new_users_can_blog', '_wpnonce', '_wp_http_referer', 'Update', 'action', 'rich_editing', 'autosave_interval', 'deactivated_plugins', 'can_compress_scripts',		'page_uris', 'update_core', 'update_plugins', 'update_themes', 'doing_cron', 'random_seed', 'rss_excerpt_length', 'secret', 'use_linksupdate', 'default_comment_status_page' );	foreach ($unusedoptions as $option)		delete_option($option);	// delete obsolete magpie stuff	$wpdb->query("DELETE FROM $wpdb->options WHERE option_name REGEXP '^rss_[0-9a-f]{32}(_ts)?$'");}/** * Execute WordPress role creation for the various WordPress versions. * * @since 2.0.0 */function populate_roles() {	populate_roles_160();	populate_roles_210();	populate_roles_230();	populate_roles_250();	populate_roles_260();	populate_roles_270();	populate_roles_280();	populate_roles_300();}/** * Create the roles for WordPress 2.0 * * @since 2.0.0 */function populate_roles_160() {	// Add roles	// Dummy gettext calls to get strings in the catalog.	/* translators: user role */	_x('Administrator', 'User role');	/* translators: user role */	_x('Editor', 'User role');	/* translators: user role */	_x('Author', 'User role');	/* translators: user role */	_x('Contributor', 'User role');	/* translators: user role */	_x('Subscriber', 'User role');	add_role('administrator', 'Administrator');	add_role('editor', 'Editor');	add_role('author', 'Author');	add_role('contributor', 'Contributor');	add_role('subscriber', 'Subscriber');	// Add caps for Administrator role	$role =& get_role('administrator');	$role->add_cap('switch_themes');	$role->add_cap('edit_themes');	$role->add_cap('activate_plugins');	$role->add_cap('edit_plugins');	$role->add_cap('edit_users');	$role->add_cap('edit_files');	$role->add_cap('manage_options');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('import');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_10');	$role->add_cap('level_9');	$role->add_cap('level_8');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Editor role	$role =& get_role('editor');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Author role	$role =& get_role('author');	$role->add_cap('upload_files');	$role->add_cap('edit_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('read');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Contributor role	$role =& get_role('contributor');	$role->add_cap('edit_posts');	$role->add_cap('read');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Subscriber role	$role =& get_role('subscriber');	$role->add_cap('read');	$role->add_cap('level_0');}/** * Create and modify WordPress roles for WordPress 2.1. * * @since 2.1.0 */function populate_roles_210() {	$roles = array('administrator', 'editor');	foreach ($roles as $role) {		$role =& get_role($role);		if ( empty($role) )			continue;		$role->add_cap('edit_others_pages');		$role->add_cap('edit_published_pages');		$role->add_cap('publish_pages');		$role->add_cap('delete_pages');		$role->add_cap('delete_others_pages');		$role->add_cap('delete_published_pages');		$role->add_cap('delete_posts');		$role->add_cap('delete_others_posts');		$role->add_cap('delete_published_posts');		$role->add_cap('delete_private_posts');		$role->add_cap('edit_private_posts');		$role->add_cap('read_private_posts');		$role->add_cap('delete_private_pages');		$role->add_cap('edit_private_pages');		$role->add_cap('read_private_pages');	}	$role =& get_role('administrator');	if ( ! empty($role) ) {		$role->add_cap('delete_users');		$role->add_cap('create_users');	}	$role =& get_role('author');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');		$role->add_cap('delete_published_posts');	}	$role =& get_role('contributor');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');	}}/** * Create and modify WordPress roles for WordPress 2.3. * * @since 2.3.0 */function populate_roles_230() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'unfiltered_upload' );	}}/** * Create and modify WordPress roles for WordPress 2.5. * * @since 2.5.0 */function populate_roles_250() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'edit_dashboard' );	}}/** * Create and modify WordPress roles for WordPress 2.6. * * @since 2.6.0 */function populate_roles_260() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_plugins' );		$role->add_cap( 'delete_plugins' );	}}/** * Create and modify WordPress roles for WordPress 2.7. * * @since 2.7.0 */function populate_roles_270() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_plugins' );		$role->add_cap( 'update_themes' );	}}/** * Create and modify WordPress roles for WordPress 2.8. * * @since 2.8.0 */function populate_roles_280() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_themes' );	}}/** * Create and modify WordPress roles for WordPress 3.0. * * @since 3.0.0 */function populate_roles_300() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_core' );		$role->add_cap( 'list_users' );		$role->add_cap( 'remove_users' );		$role->add_cap( 'add_users' );		$role->add_cap( 'promote_users' );		$role->add_cap( 'edit_theme_options' );		$role->add_cap( 'delete_themes' );		$role->add_cap( 'export' );	}}/** * populate network settings * * @since 3.0.0 * * @param int $network_id id of network to populate * @return bool|WP_Error True on success, or WP_Error on warning (with the install otherwise successful, * 	so the error code must be checked) or failure. */function populate_network( $network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = false ) {	global $wpdb, $current_site, $wp_db_version, $wp_rewrite;	$errors = new WP_Error();	if ( '' == $domain )		$errors->add( 'empty_domain', __( 'You must provide a domain name.' ) );	if ( '' == $site_name )		$errors->add( 'empty_sitename', __( 'You must provide a name for your network of sites.' ) );	// check for network collision	if ( $network_id == $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE id = %d", $network_id ) ) )		$errors->add( 'siteid_exists', __( 'The network already exists.' ) );	$site_user = get_user_by_email( $email );	if ( ! is_email( $email ) )		$errors->add( 'invalid_email', __( 'You must provide a valid e-mail address.' ) );	if ( $errors->get_error_code() )		return $errors;	// set up site tables	$template = get_option( 'template' );	$stylesheet = get_option( 'stylesheet' );	$allowed_themes = array( $stylesheet => true );	if ( $template != $stylesheet )		$allowed_themes[ $template ] = true;	if ( WP_DEFAULT_THEME != $stylesheet && WP_DEFAULT_THEME != $template )		$allowed_themes[ WP_DEFAULT_THEME ] = true;	if ( 1 == $network_id ) {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path ) );		$network_id = $wpdb->insert_id;	} else {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path, 'id' => $network_id ) );	}	if ( !is_multisite() ) {		$site_admins = array( $site_user->user_login );		$users = get_users_of_blog();		if ( $users ) {			foreach ( $users as $user ) {				if ( is_super_admin( $user->ID ) && !in_array( $user->user_login, $site_admins ) )					$site_admins[] = $user->user_login;			}		}	} else {		$site_admins = get_site_option( 'site_admins' );	}	$welcome_email = __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' );	$sitemeta = array(		'site_name' => $site_name,		'admin_email' => $site_user->user_email,		'admin_user_id' => $site_user->ID,		'registration' => 'none',		'upload_filetypes' => 'jpg jpeg png gif mp3 mov avi wmv midi mid pdf',		'blog_upload_space' => 10,		'fileupload_maxk' => 1500,		'site_admins' => $site_admins,		'allowedthemes' => $allowed_themes,		'illegal_names' => array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator', 'files' ),		'wpmu_upgrade_site' => $wp_db_version,		'welcome_email' => $welcome_email,		'first_post' => __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ),		// @todo - network admins should have a method of editing the network siteurl (used for cookie hash)		'siteurl' => get_option( 'siteurl' ) . '/',		'add_new_users' => '0',		'upload_space_check_disabled' => '0',		'subdomain_install' => intval( $subdomain_install ),		'global_terms_enabled' => global_terms_enabled() ? '1' : '0'	);	if ( !intval( $subdomain_install ) )		$sitemeta['illegal_names'][] = 'blog';	$insert = '';	foreach ( $sitemeta as $meta_key => $meta_value ) {		$meta_key = $wpdb->escape( $meta_key );		if ( is_array( $meta_value ) )			$meta_value = serialize( $meta_value );		$meta_value = $wpdb->escape( $meta_value );		if ( !empty( $insert ) )			$insert .= ', ';		$insert .= "( $network_id, '$meta_key', '$meta_value')";	}	$wpdb->query( "INSERT INTO $wpdb->sitemeta ( site_id, meta_key, meta_value ) VALUES " . $insert );	$current_site->domain = $domain;	$current_site->path = $path;	$current_site->site_name = ucfirst( $domain );	if ( !is_multisite() ) {		$wpdb->insert( $wpdb->blogs, array( 'site_id' => $network_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time( 'mysql' ) ) );		$blog_id = $wpdb->insert_id;		update_user_meta( $site_user->ID, 'source_domain', $domain );		update_user_meta( $site_user->ID, 'primary_blog', $blog_id );		if ( !$upload_path = get_option( 'upload_path' ) ) {			$upload_path = substr( WP_CONTENT_DIR, strlen( ABSPATH ) ) . '/uploads';			update_option( 'upload_path', $upload_path );		}		update_option( 'fileupload_url', get_option( 'siteurl' ) . '/' . $upload_path );	}	if ( $subdomain_install )		update_option( 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/');	else		update_option( 'permalink_structure', '/blog/%year%/%monthnum%/%day%/%postname%/');	$wp_rewrite->flush_rules();	if ( $subdomain_install ) {		$vhost_ok = false;		$errstr = '';		$hostname = substr( md5( time() ), 0, 6 ) . '.' . $domain; // Very random hostname!		$page = wp_remote_get( 'http://' . $hostname, array( 'timeout' => 5, 'httpversion' => '1.1' ) );		if ( is_wp_error( $page ) )			$errstr = $page->get_error_message();		elseif ( 200 == $page['response']['code'] )				$vhost_ok = true;		if ( ! $vhost_ok ) {			$msg = '<p><strong>' . __( 'Warning! Wildcard DNS may not be configured correctly!' ) . '</strong></p>';			$msg .= '<p>' . sprintf( __( 'The installer attempted to contact a random hostname (<code>%1$s</code>) on your domain.' ), $hostname );			if ( ! empty ( $errstr ) )				$msg .= ' ' . sprintf( __( 'This resulted in an error message: %s' ), '<code>' . $errstr . '</code>' );			$msg .= '</p>';			$msg .= '<p>' . _e( 'To use a subdomain configuration, you must have a wildcard entry in your DNS. This usually means adding a <code>*</code> hostname record pointing at your web server in your DNS configuration tool.' ) . '</p>';			$msg .= '<p>' . __( 'You can still use your site but any subdomain you create may not be accessible. If you know your DNS is correct, ignore this message.' ) . '</p>';			return new WP_Error( 'no_wildcard_dns', $msg );		}	}	return true;}?>
<?php/** * Default Widgets * * @package WordPress * @subpackage Widgets *//** * Pages widget class * * @since 2.8.0 */class WP_Widget_Pages extends WP_Widget {	function WP_Widget_Pages() {		$widget_ops = array('classname' => 'widget_pages', 'description' => __( 'Your site&#8217;s WordPress Pages') );		$this->WP_Widget('pages', __('Pages'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Pages' ) : $instance['title'], $instance, $this->id_base);		$sortby = empty( $instance['sortby'] ) ? 'menu_order' : $instance['sortby'];		$exclude = empty( $instance['exclude'] ) ? '' : $instance['exclude'];		if ( $sortby == 'menu_order' )			$sortby = 'menu_order, post_title';		$out = wp_list_pages( apply_filters('widget_pages_args', array('title_li' => '', 'echo' => 0, 'sort_column' => $sortby, 'exclude' => $exclude) ) );		if ( !empty( $out ) ) {			echo $before_widget;			if ( $title)				echo $before_title . $title . $after_title;		?>		<ul>			<?php echo $out; ?>		</ul>		<?php			echo $after_widget;		}	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( in_array( $new_instance['sortby'], array( 'post_title', 'menu_order', 'ID' ) ) ) {			$instance['sortby'] = $new_instance['sortby'];		} else {			$instance['sortby'] = 'menu_order';		}		$instance['exclude'] = strip_tags( $new_instance['exclude'] );		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'sortby' => 'post_title', 'title' => '', 'exclude' => '') );		$title = esc_attr( $instance['title'] );		$exclude = esc_attr( $instance['exclude'] );	?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p>			<label for="<?php echo $this->get_field_id('sortby'); ?>"><?php _e( 'Sort by:' ); ?></label>			<select name="<?php echo $this->get_field_name('sortby'); ?>" id="<?php echo $this->get_field_id('sortby'); ?>" class="widefat">				<option value="post_title"<?php selected( $instance['sortby'], 'post_title' ); ?>><?php _e('Page title'); ?></option>				<option value="menu_order"<?php selected( $instance['sortby'], 'menu_order' ); ?>><?php _e('Page order'); ?></option>				<option value="ID"<?php selected( $instance['sortby'], 'ID' ); ?>><?php _e( 'Page ID' ); ?></option>			</select>		</p>		<p>			<label for="<?php echo $this->get_field_id('exclude'); ?>"><?php _e( 'Exclude:' ); ?></label> <input type="text" value="<?php echo $exclude; ?>" name="<?php echo $this->get_field_name('exclude'); ?>" id="<?php echo $this->get_field_id('exclude'); ?>" class="widefat" />			<br />			<small><?php _e( 'Page IDs, separated by commas.' ); ?></small>		</p><?php	}}/** * Links widget class * * @since 2.8.0 */class WP_Widget_Links extends WP_Widget {	function WP_Widget_Links() {		$widget_ops = array('description' => __( "Your blogroll" ) );		$this->WP_Widget('links', __('Links'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args, EXTR_SKIP);		$show_description = isset($instance['description']) ? $instance['description'] : false;		$show_name = isset($instance['name']) ? $instance['name'] : false;		$show_rating = isset($instance['rating']) ? $instance['rating'] : false;		$show_images = isset($instance['images']) ? $instance['images'] : true;		$category = isset($instance['category']) ? $instance['category'] : false;		if ( is_admin() && !$category ) {			// Display All Links widget as such in the widgets screen			echo $before_widget . $before_title. __('All Links') . $after_title . $after_widget;			return;		}		$before_widget = preg_replace('/id="[^"]*"/','id="%id"', $before_widget);		wp_list_bookmarks(apply_filters('widget_links_args', array(			'title_before' => $before_title, 'title_after' => $after_title,			'category_before' => $before_widget, 'category_after' => $after_widget,			'show_images' => $show_images, 'show_description' => $show_description,			'show_name' => $show_name, 'show_rating' => $show_rating,			'category' => $category, 'class' => 'linkcat widget'		)));	}	function update( $new_instance, $old_instance ) {		$new_instance = (array) $new_instance;		$instance = array( 'images' => 0, 'name' => 0, 'description' => 0, 'rating' => 0);		foreach ( $instance as $field => $val ) {			if ( isset($new_instance[$field]) )				$instance[$field] = 1;		}		$instance['category'] = intval($new_instance['category']);		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'images' => true, 'name' => true, 'description' => false, 'rating' => false, 'category' => false ) );		$link_cats = get_terms( 'link_category');?>		<p>		<label for="<?php echo $this->get_field_id('category'); ?>" class="screen-reader-text"><?php _e('Select Link Category'); ?></label>		<select class="widefat" id="<?php echo $this->get_field_id('category'); ?>" name="<?php echo $this->get_field_name('category'); ?>">		<option value=""><?php _e('All Links'); ?></option>		<?php		foreach ( $link_cats as $link_cat ) {			echo '<option value="' . intval($link_cat->term_id) . '"'				. ( $link_cat->term_id == $instance['category'] ? ' selected="selected"' : '' )				. '>' . $link_cat->name . "</option>\n";		}		?>		</select></p>		<p>		<input class="checkbox" type="checkbox" <?php checked($instance['images'], true) ?> id="<?php echo $this->get_field_id('images'); ?>" name="<?php echo $this->get_field_name('images'); ?>" />		<label for="<?php echo $this->get_field_id('images'); ?>"><?php _e('Show Link Image'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['name'], true) ?> id="<?php echo $this->get_field_id('name'); ?>" name="<?php echo $this->get_field_name('name'); ?>" />		<label for="<?php echo $this->get_field_id('name'); ?>"><?php _e('Show Link Name'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['description'], true) ?> id="<?php echo $this->get_field_id('description'); ?>" name="<?php echo $this->get_field_name('description'); ?>" />		<label for="<?php echo $this->get_field_id('description'); ?>"><?php _e('Show Link Description'); ?></label><br />		<input class="checkbox" type="checkbox" <?php checked($instance['rating'], true) ?> id="<?php echo $this->get_field_id('rating'); ?>" name="<?php echo $this->get_field_name('rating'); ?>" />		<label for="<?php echo $this->get_field_id('rating'); ?>"><?php _e('Show Link Rating'); ?></label>		</p><?php	}}/** * Search widget class * * @since 2.8.0 */class WP_Widget_Search extends WP_Widget {	function WP_Widget_Search() {		$widget_ops = array('classname' => 'widget_search', 'description' => __( "A search form for your site") );		$this->WP_Widget('search', __('Search'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		// Use current theme search form if it exists		get_search_form();		echo $after_widget;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = $instance['title'];?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></label></p><?php	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args((array) $new_instance, array( 'title' => ''));		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}}/** * Archives widget class * * @since 2.8.0 */class WP_Widget_Archives extends WP_Widget {	function WP_Widget_Archives() {		$widget_ops = array('classname' => 'widget_archive', 'description' => __( 'A monthly archive of your site&#8217;s posts') );		$this->WP_Widget('archives', __('Archives'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$c = $instance['count'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		$title = apply_filters('widget_title', empty($instance['title']) ? __('Archives') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		if ( $d ) {?>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'> <option value=""><?php echo esc_attr(__('Select Month')); ?></option> <?php wp_get_archives(apply_filters('widget_archives_dropdown_args', array('type' => 'monthly', 'format' => 'option', 'show_post_count' => $c))); ?> </select><?php		} else {?>		<ul>		<?php wp_get_archives(apply_filters('widget_archives_args', array('type' => 'monthly', 'show_post_count' => $c))); ?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$new_instance = wp_parse_args( (array) $new_instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = $new_instance['count'] ? 1 : 0;		$instance['dropdown'] = $new_instance['dropdown'] ? 1 : 0;		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'count' => 0, 'dropdown' => '') );		$title = strip_tags($instance['title']);		$count = $instance['count'] ? 'checked="checked"' : '';		$dropdown = $instance['dropdown'] ? 'checked="checked"' : '';?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<p>			<input class="checkbox" type="checkbox" <?php echo $count; ?> id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>" /> <label for="<?php echo $this->get_field_id('count'); ?>"><?php _e('Show post counts'); ?></label>			<br />			<input class="checkbox" type="checkbox" <?php echo $dropdown; ?> id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>" /> <label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e('Display as a drop down'); ?></label>		</p><?php	}}/** * Meta widget class * * Displays log in/out, RSS feed links, etc. * * @since 2.8.0 */class WP_Widget_Meta extends WP_Widget {	function WP_Widget_Meta() {		$widget_ops = array('classname' => 'widget_meta', 'description' => __( "Log in/out, admin, feed and WordPress links") );		$this->WP_Widget('meta', __('Meta'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Meta') : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;?>			<ul>			<?php wp_register(); ?>			<li><?php wp_loginout(); ?></li>			<li><a href="<?php bloginfo('rss2_url'); ?>" title="<?php echo esc_attr(__('Syndicate this site using RSS 2.0')); ?>"><?php _e('Entries <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="<?php bloginfo('comments_rss2_url'); ?>" title="<?php echo esc_attr(__('The latest comments to all posts in RSS')); ?>"><?php _e('Comments <abbr title="Really Simple Syndication">RSS</abbr>'); ?></a></li>			<li><a href="http://wordpress.org/" title="<?php echo esc_attr(__('Powered by WordPress, state-of-the-art semantic personal publishing platform.')); ?>">WordPress.org</a></li>			<?php wp_meta(); ?>			</ul><?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>			<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label> <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Calendar widget class * * @since 2.8.0 */class WP_Widget_Calendar extends WP_Widget {	function WP_Widget_Calendar() {		$widget_ops = array('classname' => 'widget_calendar', 'description' => __( 'A calendar of your site&#8217;s posts') );		$this->WP_Widget('calendar', __('Calendar'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? '&nbsp;' : $instance['title'], $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div id="calendar_wrap">';		get_calendar();		echo '</div>';		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '' ) );		$title = strip_tags($instance['title']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p><?php	}}/** * Text widget class * * @since 2.8.0 */class WP_Widget_Text extends WP_Widget {	function WP_Widget_Text() {		$widget_ops = array('classname' => 'widget_text', 'description' => __('Arbitrary text or HTML'));		$control_ops = array('width' => 400, 'height' => 350);		$this->WP_Widget('text', __('Text'), $widget_ops, $control_ops);	}	function widget( $args, $instance ) {		extract($args);		$title = apply_filters( 'widget_title', empty($instance['title']) ? '' : $instance['title'], $instance, $this->id_base);		$text = apply_filters( 'widget_text', $instance['text'], $instance );		echo $before_widget;		if ( !empty( $title ) ) { echo $before_title . $title . $after_title; } ?>			<div class="textwidget"><?php echo $instance['filter'] ? wpautop($text) : $text; ?></div>		<?php		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		if ( current_user_can('unfiltered_html') )			$instance['text'] =  $new_instance['text'];		else			$instance['text'] = stripslashes( wp_filter_post_kses( addslashes($new_instance['text']) ) ); // wp_filter_post_kses() expects slashed		$instance['filter'] = isset($new_instance['filter']);		return $instance;	}	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => '', 'text' => '' ) );		$title = strip_tags($instance['title']);		$text = format_to_edit($instance['text']);?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" /></p>		<textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('text'); ?>" name="<?php echo $this->get_field_name('text'); ?>"><?php echo $text; ?></textarea>		<p><input id="<?php echo $this->get_field_id('filter'); ?>" name="<?php echo $this->get_field_name('filter'); ?>" type="checkbox" <?php checked(isset($instance['filter']) ? $instance['filter'] : 0); ?> />&nbsp;<label for="<?php echo $this->get_field_id('filter'); ?>"><?php _e('Automatically add paragraphs'); ?></label></p><?php	}}/** * Categories widget class * * @since 2.8.0 */class WP_Widget_Categories extends WP_Widget {	function WP_Widget_Categories() {		$widget_ops = array( 'classname' => 'widget_categories', 'description' => __( "A list or dropdown of categories" ) );		$this->WP_Widget('categories', __('Categories'), $widget_ops);	}	function widget( $args, $instance ) {		extract( $args );		$title = apply_filters('widget_title', empty( $instance['title'] ) ? __( 'Categories' ) : $instance['title'], $instance, $this->id_base);		$c = $instance['count'] ? '1' : '0';		$h = $instance['hierarchical'] ? '1' : '0';		$d = $instance['dropdown'] ? '1' : '0';		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		$cat_args = array('orderby' => 'name', 'show_count' => $c, 'hierarchical' => $h);		if ( $d ) {			$cat_args['show_option_none'] = __('Select Category');			wp_dropdown_categories(apply_filters('widget_categories_dropdown_args', $cat_args));?><script type='text/javascript'>/* <![CDATA[ */	var dropdown = document.getElementById("cat");	function onCatChange() {		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {			location.href = "<?php echo home_url(); ?>/?cat="+dropdown.options[dropdown.selectedIndex].value;		}	}	dropdown.onchange = onCatChange;/* ]]> */</script><?php		} else {?>		<ul><?php		$cat_args['title_li'] = '';		wp_list_categories(apply_filters('widget_categories_args', $cat_args));?>		</ul><?php		}		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['count'] = !empty($new_instance['count']) ? 1 : 0;		$instance['hierarchical'] = !empty($new_instance['hierarchical']) ? 1 : 0;		$instance['dropdown'] = !empty($new_instance['dropdown']) ? 1 : 0;		return $instance;	}	function form( $instance ) {		//Defaults		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );		$title = esc_attr( $instance['title'] );		$count = isset($instance['count']) ? (bool) $instance['count'] :false;		$hierarchical = isset( $instance['hierarchical'] ) ? (bool) $instance['hierarchical'] : false;		$dropdown = isset( $instance['dropdown'] ) ? (bool) $instance['dropdown'] : false;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:' ); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>"<?php checked( $dropdown ); ?> />		<label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e( 'Show as dropdown' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>"<?php checked( $count ); ?> />		<label for="<?php echo $this->get_field_id('count'); ?>"><?php _e( 'Show post counts' ); ?></label><br />		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('hierarchical'); ?>" name="<?php echo $this->get_field_name('hierarchical'); ?>"<?php checked( $hierarchical ); ?> />		<label for="<?php echo $this->get_field_id('hierarchical'); ?>"><?php _e( 'Show hierarchy' ); ?></label></p><?php	}}/** * Recent_Posts widget class * * @since 2.8.0 */class WP_Widget_Recent_Posts extends WP_Widget {	function WP_Widget_Recent_Posts() {		$widget_ops = array('classname' => 'widget_recent_entries', 'description' => __( "The most recent posts on your site") );		$this->WP_Widget('recent-posts', __('Recent Posts'), $widget_ops);		$this->alt_option_name = 'widget_recent_entries';		add_action( 'save_post', array(&$this, 'flush_widget_cache') );		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );	}	function widget($args, $instance) {		$cache = wp_cache_get('widget_recent_posts', 'widget');		if ( !is_array($cache) )			$cache = array();		if ( isset($cache[$args['widget_id']]) ) {			echo $cache[$args['widget_id']];			return;		}		ob_start();		extract($args);		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Posts') : $instance['title'], $instance, $this->id_base);		if ( !$number = (int) $instance['number'] )			$number = 10;		else if ( $number < 1 )			$number = 1;		else if ( $number > 15 )			$number = 15;		$r = new WP_Query(array('showposts' => $number, 'nopaging' => 0, 'post_status' => 'publish', 'caller_get_posts' => 1));		if ($r->have_posts()) :?>		<?php echo $before_widget; ?>		<?php if ( $title ) echo $before_title . $title . $after_title; ?>		<ul>		<?php  while ($r->have_posts()) : $r->the_post(); ?>		<li><a href="<?php the_permalink() ?>" title="<?php echo esc_attr(get_the_title() ? get_the_title() : get_the_ID()); ?>"><?php if ( get_the_title() ) the_title(); else the_ID(); ?></a></li>		<?php endwhile; ?>		</ul>		<?php echo $after_widget; ?><?php		// Reset the global $the_post as this query will have stomped on it		wp_reset_postdata();		endif;		$cache[$args['widget_id']] = ob_get_flush();		wp_cache_set('widget_recent_posts', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_entries']) )			delete_option('widget_recent_entries');		return $instance;	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_posts', 'widget');	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		if ( !isset($instance['number']) || !$number = (int) $instance['number'] )			$number = 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of posts to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * Recent_Comments widget class * * @since 2.8.0 */class WP_Widget_Recent_Comments extends WP_Widget {	function WP_Widget_Recent_Comments() {		$widget_ops = array('classname' => 'widget_recent_comments', 'description' => __( 'The most recent comments' ) );		$this->WP_Widget('recent-comments', __('Recent Comments'), $widget_ops);		$this->alt_option_name = 'widget_recent_comments';		if ( is_active_widget(false, false, $this->id_base) )			add_action( 'wp_head', array(&$this, 'recent_comments_style') );		add_action( 'comment_post', array(&$this, 'flush_widget_cache') );		add_action( 'transition_comment_status', array(&$this, 'flush_widget_cache') );	}	function recent_comments_style() { ?>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style><?php	}	function flush_widget_cache() {		wp_cache_delete('widget_recent_comments', 'widget');	}	function widget( $args, $instance ) {		global $comments, $comment;		$cache = wp_cache_get('widget_recent_comments', 'widget');		if ( ! is_array( $cache ) )			$cache = array();		if ( isset( $cache[$args['widget_id']] ) ) {			echo $cache[$args['widget_id']];			return;		} 		extract($args, EXTR_SKIP); 		$output = ''; 		$title = apply_filters('widget_title', empty($instance['title']) ? __('Recent Comments') : $instance['title']);		if ( ! $number = (int) $instance['number'] ) 			$number = 5; 		else if ( $number < 1 ) 			$number = 1;		$comments = get_comments( array( 'number' => $number, 'status' => 'approve' ) );		$output .= $before_widget;		if ( $title )			$output .= $before_title . $title . $after_title;		$output .= '<ul id="recentcomments">';		if ( $comments ) {			foreach ( (array) $comments as $comment) {				$output .=  '<li class="recentcomments">' . /* translators: comments widget: 1: comment author, 2: post link */ sprintf(_x('%1$s on %2$s', 'widgets'), get_comment_author_link(), '<a href="' . esc_url( get_comment_link($comment->comment_ID) ) . '">' . get_the_title($comment->comment_post_ID) . '</a>') . '</li>';			} 		}		$output .= '</ul>';		$output .= $after_widget;		echo $output;		$cache[$args['widget_id']] = $output;		wp_cache_set('widget_recent_comments', $cache, 'widget');	}	function update( $new_instance, $old_instance ) {		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		$instance['number'] = (int) $new_instance['number'];		$this->flush_widget_cache();		$alloptions = wp_cache_get( 'alloptions', 'options' );		if ( isset($alloptions['widget_recent_comments']) )			delete_option('widget_recent_comments');		return $instance;	}	function form( $instance ) {		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		$number = isset($instance['number']) ? absint($instance['number']) : 5;?>		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of comments to show:'); ?></label>		<input id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p><?php	}}/** * RSS widget class * * @since 2.8.0 */class WP_Widget_RSS extends WP_Widget {	function WP_Widget_RSS() {		$widget_ops = array( 'description' => __('Entries from any RSS or Atom feed') );		$control_ops = array( 'width' => 400, 'height' => 200 );		$this->WP_Widget( 'rss', __('RSS'), $widget_ops, $control_ops );	}	function widget($args, $instance) {		if ( isset($instance['error']) && $instance['error'] )			return;		extract($args, EXTR_SKIP);		$url = $instance['url'];		while ( stristr($url, 'http') != $url )			$url = substr($url, 1);		if ( empty($url) )			return;		$rss = fetch_feed($url);		$title = $instance['title'];		$desc = '';		$link = '';		if ( ! is_wp_error($rss) ) {			$desc = esc_attr(strip_tags(@html_entity_decode($rss->get_description(), ENT_QUOTES, get_option('blog_charset'))));			if ( empty($title) )				$title = esc_html(strip_tags($rss->get_title()));			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);		}		if ( empty($title) )			$title = empty($desc) ? __('Unknown Feed') : $desc;		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		$url = esc_url(strip_tags($url));		$icon = includes_url('images/rss.png');		if ( $title )			$title = "<a class='rsswidget' href='$url' title='" . esc_attr__( 'Syndicate this content' ) ."'><img style='border:0' width='14' height='14' src='$icon' alt='RSS' /></a> <a class='rsswidget' href='$link' title='$desc'>$title</a>";		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		wp_widget_rss_output( $rss, $instance );		echo $after_widget;		if ( ! is_wp_error($rss) )			$rss->__destruct();		unset($rss);	}	function update($new_instance, $old_instance) {		$testurl = ( isset($new_instance['url']) && ($new_instance['url'] != $old_instance['url']) );		return wp_widget_rss_process( $new_instance, $testurl );	}	function form($instance) {		if ( empty($instance) )			$instance = array( 'title' => '', 'url' => '', 'items' => 10, 'error' => false, 'show_summary' => 0, 'show_author' => 0, 'show_date' => 0 );		$instance['number'] = $this->number;		wp_widget_rss_form( $instance );	}}/** * Display the RSS entries in a list. * * @since 2.5.0 * * @param string|array|object $rss RSS url. * @param array $args Widget arguments. */function wp_widget_rss_output( $rss, $args = array() ) {	if ( is_string( $rss ) ) {		$rss = fetch_feed($rss);	} elseif ( is_array($rss) && isset($rss['url']) ) {		$args = $rss;		$rss = fetch_feed($rss['url']);	} elseif ( !is_object($rss) ) {		return;	}	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') )			echo '<p>' . sprintf( __('<strong>RSS Error</strong>: %s'), $rss->get_error_message() ) . '</p>';		return;	}	$default_args = array( 'show_author' => 0, 'show_date' => 0, 'show_summary' => 0 );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$items = (int) $items;	if ( $items < 1 || 20 < $items )		$items = 10;	$show_summary  = (int) $show_summary;	$show_author   = (int) $show_author;	$show_date     = (int) $show_date;	if ( !$rss->get_item_quantity() ) {		echo '<ul><li>' . __( 'An error has occurred; the feed is probably down. Try again later.' ) . '</li></ul>';		$rss->__destruct();		unset($rss);		return;	}	echo '<ul>';	foreach ( $rss->get_items(0, $items) as $item ) {		$link = $item->get_link();		while ( stristr($link, 'http') != $link )			$link = substr($link, 1);		$link = esc_url(strip_tags($link));		$title = esc_attr(strip_tags($item->get_title()));		if ( empty($title) )			$title = __('Untitled');		$desc = str_replace( array("\n", "\r"), ' ', esc_attr( strip_tags( @html_entity_decode( $item->get_description(), ENT_QUOTES, get_option('blog_charset') ) ) ) );		$desc = wp_html_excerpt( $desc, 360 );		// Append ellipsis. Change existing [...] to [&hellip;].		if ( '[...]' == substr( $desc, -5 ) )			$desc = substr( $desc, 0, -5 ) . '[&hellip;]';		elseif ( '[&hellip;]' != substr( $desc, -10 ) )			$desc .= ' [&hellip;]';		$desc = esc_html( $desc );		if ( $show_summary ) {			$summary = "<div class='rssSummary'>$desc</div>";		} else {			$summary = '';		}		$date = '';		if ( $show_date ) {			$date = $item->get_date();			if ( $date ) {				if ( $date_stamp = strtotime( $date ) )					$date = ' <span class="rss-date">' . date_i18n( get_option( 'date_format' ), $date_stamp ) . '</span>';				else					$date = '';			}		}		$author = '';		if ( $show_author ) {			$author = $item->get_author();			if ( is_object($author) ) {				$author = $author->get_name();				$author = ' <cite>' . esc_html( strip_tags( $author ) ) . '</cite>';			}		}		if ( $link == '' ) {			echo "<li>$title{$date}{$summary}{$author}</li>";		} else {			echo "<li><a class='rsswidget' href='$link' title='$desc'>$title</a>{$date}{$summary}{$author}</li>";		}	}	echo '</ul>';	$rss->__destruct();	unset($rss);}/** * Display RSS widget options form. * * The options for what fields are displayed for the RSS form are all booleans * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author', * 'show_date'. * * @since 2.5.0 * * @param array|string $args Values for input fields. * @param array $inputs Override default display options. */function wp_widget_rss_form( $args, $inputs = null ) {	$default_inputs = array( 'url' => true, 'title' => true, 'items' => true, 'show_summary' => true, 'show_author' => true, 'show_date' => true );	$inputs = wp_parse_args( $inputs, $default_inputs );	extract( $args );	extract( $inputs, EXTR_SKIP);	$number = esc_attr( $number );	$title  = esc_attr( $title );	$url    = esc_url( $url );	$items  = (int) $items;	if ( $items < 1 || 20 < $items )		$items  = 10;	$show_summary   = (int) $show_summary;	$show_author    = (int) $show_author;	$show_date      = (int) $show_date;	if ( !empty($error) )		echo '<p class="widget-error"><strong>' . sprintf( __('RSS Error: %s'), $error) . '</strong></p>';	if ( $inputs['url'] ) :?>	<p><label for="rss-url-<?php echo $number; ?>"><?php _e('Enter the RSS feed URL here:'); ?></label>	<input class="widefat" id="rss-url-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][url]" type="text" value="<?php echo $url; ?>" /></p><?php endif; if ( $inputs['title'] ) : ?>	<p><label for="rss-title-<?php echo $number; ?>"><?php _e('Give the feed a title (optional):'); ?></label>	<input class="widefat" id="rss-title-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][title]" type="text" value="<?php echo $title; ?>" /></p><?php endif; if ( $inputs['items'] ) : ?>	<p><label for="rss-items-<?php echo $number; ?>"><?php _e('How many items would you like to display?'); ?></label>	<select id="rss-items-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][items]"><?php		for ( $i = 1; $i <= 20; ++$i )			echo "<option value='$i' " . ( $items == $i ? "selected='selected'" : '' ) . ">$i</option>";?>	</select></p><?php endif; if ( $inputs['show_summary'] ) : ?>	<p><input id="rss-show-summary-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_summary]" type="checkbox" value="1" <?php if ( $show_summary ) echo 'checked="checked"'; ?>/>	<label for="rss-show-summary-<?php echo $number; ?>"><?php _e('Display item content?'); ?></label></p><?php endif; if ( $inputs['show_author'] ) : ?>	<p><input id="rss-show-author-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_author]" type="checkbox" value="1" <?php if ( $show_author ) echo 'checked="checked"'; ?>/>	<label for="rss-show-author-<?php echo $number; ?>"><?php _e('Display item author if available?'); ?></label></p><?php endif; if ( $inputs['show_date'] ) : ?>	<p><input id="rss-show-date-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][show_date]" type="checkbox" value="1" <?php if ( $show_date ) echo 'checked="checked"'; ?>/>	<label for="rss-show-date-<?php echo $number; ?>"><?php _e('Display item date?'); ?></label></p><?php	endif;	foreach ( array_keys($default_inputs) as $input ) :		if ( 'hidden' === $inputs[$input] ) :			$id = str_replace( '_', '-', $input );?>	<input type="hidden" id="rss-<?php echo $id; ?>-<?php echo $number; ?>" name="widget-rss[<?php echo $number; ?>][<?php echo $input; ?>]" value="<?php echo $$input; ?>" /><?php		endif;	endforeach;}/** * Process RSS feed widget data and optionally retrieve feed items. * * The feed widget can not have more than 20 items or it will reset back to the * default, which is 10. * * The resulting array has the feed title, feed url, feed link (from channel), * feed items, error (if any), and whether to show summary, author, and date. * All respectively in the order of the array elements. * * @since 2.5.0 * * @param array $widget_rss RSS widget feed data. Expects unescaped data. * @param bool $check_feed Optional, default is true. Whether to check feed for errors. * @return array */function wp_widget_rss_process( $widget_rss, $check_feed = true ) {	$items = (int) $widget_rss['items'];	if ( $items < 1 || 20 < $items )		$items = 10;	$url           = esc_url_raw(strip_tags( $widget_rss['url'] ));	$title         = trim(strip_tags( $widget_rss['title'] ));	$show_summary  = isset($widget_rss['show_summary']) ? (int) $widget_rss['show_summary'] : 0;	$show_author   = isset($widget_rss['show_author']) ? (int) $widget_rss['show_author'] :0;	$show_date     = isset($widget_rss['show_date']) ? (int) $widget_rss['show_date'] : 0;	if ( $check_feed ) {		$rss = fetch_feed($url);		$error = false;		$link = '';		if ( is_wp_error($rss) ) {			$error = $rss->get_error_message();		} else {			$link = esc_url(strip_tags($rss->get_permalink()));			while ( stristr($link, 'http') != $link )				$link = substr($link, 1);			$rss->__destruct();			unset($rss);		}	}	return compact( 'title', 'url', 'link', 'items', 'error', 'show_summary', 'show_author', 'show_date' );}/** * Tag cloud widget class * * @since 2.8.0 */class WP_Widget_Tag_Cloud extends WP_Widget {	function WP_Widget_Tag_Cloud() {		$widget_ops = array( 'description' => __( "Your most used tags in cloud format") );		$this->WP_Widget('tag_cloud', __('Tag Cloud'), $widget_ops);	}	function widget( $args, $instance ) {		extract($args);		$current_taxonomy = $this->_get_current_taxonomy($instance);		if ( !empty($instance['title']) ) {			$title = $instance['title'];		} else {			if ( 'post_tag' == $current_taxonomy ) {				$title = __('Tags');			} else {				$tax = get_taxonomy($current_taxonomy);				$title = $tax->labels->name;			}		}		$title = apply_filters('widget_title', $title, $instance, $this->id_base);		echo $before_widget;		if ( $title )			echo $before_title . $title . $after_title;		echo '<div>';		wp_tag_cloud( apply_filters('widget_tag_cloud_args', array('taxonomy' => $current_taxonomy) ) );		echo "</div>\n";		echo $after_widget;	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags(stripslashes($new_instance['title']));		$instance['taxonomy'] = stripslashes($new_instance['taxonomy']);		return $instance;	}	function form( $instance ) {		$current_taxonomy = $this->_get_current_taxonomy($instance);?>	<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>	<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php if (isset ( $instance['title'])) {echo esc_attr( $instance['title'] );} ?>" /></p>	<p><label for="<?php echo $this->get_field_id('taxonomy'); ?>"><?php _e('Taxonomy:') ?></label>	<select class="widefat" id="<?php echo $this->get_field_id('taxonomy'); ?>" name="<?php echo $this->get_field_name('taxonomy'); ?>">	<?php foreach ( get_object_taxonomies('post') as $taxonomy ) :				$tax = get_taxonomy($taxonomy);				if ( !$tax->show_tagcloud || empty($tax->labels->name) )					continue;	?>		<option value="<?php echo esc_attr($taxonomy) ?>" <?php selected($taxonomy, $current_taxonomy) ?>><?php echo $tax->labels->name; ?></option>	<?php endforeach; ?>	</select></p><?php	}	function _get_current_taxonomy($instance) {		if ( !empty($instance['taxonomy']) && taxonomy_exists($instance['taxonomy']) )			return $instance['taxonomy'];		return 'post_tag';	}}/** * Navigation Menu widget class * * @since 3.0.0 */ class WP_Nav_Menu_Widget extends WP_Widget {	function WP_Nav_Menu_Widget() {		$widget_ops = array( 'description' => __('Use this widget to add one of your custom menus as a widget.') );		parent::WP_Widget( 'nav_menu', __('Custom Menu'), $widget_ops );	}	function widget($args, $instance) {		// Get menu		$nav_menu = wp_get_nav_menu_object( $instance['nav_menu'] );		if ( !$nav_menu )			return;		echo $args['before_widget'];		if ( !empty($instance['title']) )			echo $args['before_title'] . $instance['title'] . $args['after_title'];		wp_nav_menu( array( 'fallback_cb' => '', 'menu' => $nav_menu ) );		echo $args['after_widget'];	}	function update( $new_instance, $old_instance ) {		$instance['title'] = strip_tags( stripslashes($new_instance['title']) );		$instance['nav_menu'] = (int) $new_instance['nav_menu'];		return $instance;	}	function form( $instance ) {		$title = isset( $instance['title'] ) ? $instance['title'] : '';		$nav_menu = isset( $instance['nav_menu'] ) ? $instance['nav_menu'] : '';		// Get menus		$menus = get_terms( 'nav_menu', array( 'hide_empty' => false ) );		// If no menus exists, direct the user to go and create some.		if ( !$menus ) {			echo '<p>'. sprintf( __('No menus have been created yet. <a href="%s">Create some</a>.'), admin_url('nav-menus.php') ) .'</p>';			return;		}		?>		<p>			<label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:') ?></label>			<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" value="<?php echo $title; ?>" />		</p>		<p>			<label for="<?php echo $this->get_field_id('nav_menu'); ?>"><?php _e('Select Menu:'); ?></label>			<select id="<?php echo $this->get_field_id('nav_menu'); ?>" name="<?php echo $this->get_field_name('nav_menu'); ?>">		<?php			foreach ( $menus as $menu ) {				$selected = $nav_menu == $menu->term_id ? ' selected="selected"' : '';				echo '<option'. $selected .' value="'. $menu->term_id .'">'. $menu->name .'</option>';			}		?>			</select>		</p>		<?php	}}/** * Register all of the default WordPress widgets on startup. * * Calls 'widgets_init' action after all of the WordPress widgets have been * registered. * * @since 2.2.0 */function wp_widgets_init() {	if ( !is_blog_installed() )		return;	register_widget('WP_Widget_Pages');	register_widget('WP_Widget_Calendar');	register_widget('WP_Widget_Archives');	register_widget('WP_Widget_Links');	register_widget('WP_Widget_Meta');	register_widget('WP_Widget_Search');	register_widget('WP_Widget_Text');	register_widget('WP_Widget_Categories');	register_widget('WP_Widget_Recent_Posts');	register_widget('WP_Widget_Recent_Comments');	register_widget('WP_Widget_RSS');	register_widget('WP_Widget_Tag_Cloud');	register_widget('WP_Nav_Menu_Widget');	do_action('widgets_init');}add_action('init', 'wp_widgets_init', 1);
<?php/** * WordPress AJAX Process Execution. * * @package WordPress * @subpackage Administration *//** * Executing AJAX process. * * @since unknown */define('DOING_AJAX', true);define('WP_ADMIN', true);require_once('../wp-load.php');if ( ! isset( $_REQUEST['action'] ) )	die('-1');require_once('./includes/admin.php');@header('Content-Type: text/html; charset=' . get_option('blog_charset'));send_nosniff_header();do_action('admin_init');if ( ! is_user_logged_in() ) {	if ( isset( $_POST['action'] ) && $_POST['action'] == 'autosave' ) {		$id = isset($_POST['post_ID'])? (int) $_POST['post_ID'] : 0;		if ( ! $id )			die('-1');		$message = sprintf( __('<strong>ALERT: You are logged out!</strong> Could not save draft. <a href="%s" target="_blank">Please log in again.</a>'), wp_login_url() );		$x = new WP_Ajax_Response( array(			'what' => 'autosave',			'id' => $id,			'data' => $message		) );		$x->send();	}	if ( !empty( $_REQUEST['action'] ) )		do_action( 'wp_ajax_nopriv_' . $_REQUEST['action'] );	die('-1');}if ( isset( $_GET['action'] ) ) :switch ( $action = $_GET['action'] ) :case 'ajax-tag-search' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$s = $_GET['q']; // is this slashed already?	if ( isset($_GET['tax']) )		$taxonomy = sanitize_title($_GET['tax']);	else		die('0');	if ( false !== strpos( $s, ',' ) ) {		$s = explode( ',', $s );		$s = $s[count( $s ) - 1];	}	$s = trim( $s );	if ( strlen( $s ) < 2 )		die; // require 2 chars for matching	$results = $wpdb->get_col( "SELECT t.name FROM $wpdb->term_taxonomy AS tt INNER JOIN $wpdb->terms AS t ON tt.term_id = t.term_id WHERE tt.taxonomy = '$taxonomy' AND t.name LIKE ('%" . $s . "%')" );	echo join( $results, "\n" );	die;	break;case 'wp-compression-test' :	if ( !current_user_can( 'manage_options' ) )		die('-1');	if ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {		update_site_option('can_compress_scripts', 0);		die('0');	}	if ( isset($_GET['test']) ) {		header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );		header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );		header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );		header( 'Pragma: no-cache' );		header('Content-Type: application/x-javascript; charset=UTF-8');		$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );		$test_str = '"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh."';		 if ( 1 == $_GET['test'] ) {		 	echo $test_str;		 	die;		 } elseif ( 2 == $_GET['test'] ) {			if ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )				die('-1');			if ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {				header('Content-Encoding: deflate');				$out = gzdeflate( $test_str, 1 );			} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {				header('Content-Encoding: gzip');				$out = gzencode( $test_str, 1 );			} else {				die('-1');			}			echo $out;			die;		} elseif ( 'no' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 0);		} elseif ( 'yes' == $_GET['test'] ) {			update_site_option('can_compress_scripts', 1);		}	}	die('0');	break;case 'imgedit-preview' :	$post_id = intval($_GET['postid']);	if ( empty($post_id) || !current_user_can('edit_post', $post_id) )		die('-1');	check_ajax_referer( "image_editor-$post_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	if ( ! stream_preview_image($post_id) )		die('-1');	die();	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'oembed-cache' :	$return = ( $wp_embed->cache_oembed( $_GET['post'] ) ) ? '1' : '0';	die( $return );	break;default :	do_action( 'wp_ajax_' . $_GET['action'] );	die('0');	break;endswitch;endif;/** * Sends back current comment total and new page links if they need to be updated. * * Contrary to normal success AJAX response ("1"), die with time() on success. * * @since 2.7 * * @param int $comment_id * @return die */function _wp_ajax_delete_comment_response( $comment_id ) {	$total = (int) @$_POST['_total'];	$per_page = (int) @$_POST['_per_page'];	$page = (int) @$_POST['_page'];	$url = esc_url_raw( @$_POST['_url'] );	// JS didn't send us everything we need to know. Just die with success message	if ( !$total || !$per_page || !$page || !$url )		die( (string) time() );	if ( --$total < 0 ) // Take the total from POST and decrement it (since we just deleted one)		$total = 0;	if ( 0 != $total % $per_page && 1 != mt_rand( 1, $per_page ) ) // Only do the expensive stuff on a page-break, and about 1 other time per page		die( (string) time() );	$post_id = 0;	$status = 'total_comments'; // What type of comment count are we looking for?	$parsed = parse_url( $url );	if ( isset( $parsed['query'] ) ) {		parse_str( $parsed['query'], $query_vars );		if ( !empty( $query_vars['comment_status'] ) )			$status = $query_vars['comment_status'];		if ( !empty( $query_vars['p'] ) )			$post_id = (int) $query_vars['p'];	}	$comment_count = wp_count_comments($post_id);	$time = time(); // The time since the last comment count	if ( isset( $comment_count->$status ) ) // We're looking for a known type of comment count		$total = $comment_count->$status;	// else use the decremented value from above	$page_links = paginate_links( array(		'base' => add_query_arg( 'apage', '%#%', $url ),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => ceil($total / $per_page),		'current' => $page	) );	$x = new WP_Ajax_Response( array(		'what' => 'comment',		'id' => $comment_id, // here for completeness - not used		'supplemental' => array(			'pageLinks' => $page_links,			'total' => $total,			'time' => $time		)	) );	$x->send();}function _wp_ajax_add_hierarchical_term() {	$action = $_POST['action'];	$taxonomy = get_taxonomy(substr($action, 4));	check_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );	if ( !current_user_can( $taxonomy->cap->edit_terms ) )		die('-1');	$names = explode(',', $_POST['new'.$taxonomy->name]);	$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;	if ( 0 > $parent )		$parent = 0;	if ( $taxonomy->name == 'category' )		$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();	else		$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();	$checked_categories = array_map( 'absint', (array) $post_category );	$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$category_nicename = sanitize_title($cat_name);		if ( '' === $category_nicename )			continue;		if ( !($cat_id = term_exists($cat_name, $taxonomy->name, $parent)) ) {			$new_term = wp_insert_term($cat_name, $taxonomy->name, array('parent' => $parent));			$cat_id = $new_term['term_id'];		}		$checked_categories[] = $cat_id;		if ( $parent ) // Do these all at once in a second			continue;		$category = get_term( $cat_id, $taxonomy->name );		ob_start();			wp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $cat_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	if ( $parent ) { // Foncy - replace the parent and all its children		$parent = get_term( $parent, $taxonomy->name );		$term_id = $parent->term_id;		while ( $parent->parent ) { // get the top parent			$parent = &get_term( $parent->parent, $taxonomy->name );			if ( is_wp_error( $parent ) )				break;			$term_id = $parent->term_id;		}		ob_start();			wp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));		$data = ob_get_contents();		ob_end_clean();		$add = array(			'what' => $taxonomy->name,			'id' => $term_id,			'data' => str_replace( array("\n", "\t"), '', $data),			'position' => -1		);	}	ob_start();		wp_dropdown_categories( array(			'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',			'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'		) );	$sup = ob_get_contents();	ob_end_clean();	$add['supplemental'] = array( 'newcat_parent' => $sup );	$x = new WP_Ajax_Response( $add );	$x->send();}$id = isset($_POST['id'])? (int) $_POST['id'] : 0;switch ( $action = $_POST['action'] ) :case 'delete-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) )		die( (string) time() );	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) )		die('-1');	check_ajax_referer( "delete-comment_$id" );	$status = wp_get_comment_status( $comment->comment_ID );	if ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {		if ( 'trash' == $status )			die( (string) time() );		$r = wp_trash_comment( $comment->comment_ID );	} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {		if ( 'trash' != $status )			die( (string) time() );		$r = wp_untrash_comment( $comment->comment_ID );	} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {		if ( 'spam' == $status )			die( (string) time() );		$r = wp_spam_comment( $comment->comment_ID );	} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {		if ( 'spam' != $status )			die( (string) time() );		$r = wp_unspam_comment( $comment->comment_ID );	} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {		$r = wp_delete_comment( $comment->comment_ID );	} else {		die('-1');	}	if ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts		_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'delete-tag' :	$tag_id = (int) $_POST['tag_ID'];	check_ajax_referer( "delete-tag_$tag_id" );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	if ( !current_user_can( $tax->cap->delete_terms ) )		die('-1');	$tag = get_term( $tag_id, $taxonomy );	if ( !$tag || is_wp_error( $tag ) )		die('1');	if ( wp_delete_term($tag_id, $taxonomy))		die('1');	else		die('0');	break;case 'delete-link-cat' :	check_ajax_referer( "delete-link-category_$id" );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$cat = get_term( $id, 'link_category' );	if ( !$cat || is_wp_error( $cat ) )		die('1');	$cat_name = get_term_field('name', $id, 'link_category');	$default = get_option('default_link_category');	// Don't delete the default cats.	if ( $id == $default ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => new WP_Error( 'default-link-cat', sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name) )		) );		$x->send();	}	$r = wp_delete_term($id, 'link_category', array('default' => $default));	if ( !$r )		die('0');	if ( is_wp_error($r) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $id,			'data' => $r		) );		$x->send();	}	die('1');	break;case 'delete-link' :	check_ajax_referer( "delete-bookmark_$id" );	if ( !current_user_can( 'manage_links' ) )		die('-1');	$link = get_bookmark( $id );	if ( !$link || is_wp_error( $link ) )		die('1');	if ( wp_delete_link( $id ) )		die('1');	else		die('0');	break;case 'delete-meta' :	check_ajax_referer( "delete-meta_$id" );	if ( !$meta = get_post_meta_by_id( $id ) )		die('1');	if ( !current_user_can( 'edit_post', $meta->post_id ) )		die('-1');	if ( delete_meta( $meta->meta_id ) )		die('1');	die('0');	break;case 'delete-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'trash-post' :case 'untrash-post' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_post', $id ) )		die('-1');	if ( !get_post( $id ) )		die('1');	if ( 'trash-post' == $action )		$done = wp_trash_post( $id );	else		$done = wp_untrash_post( $id );	if ( $done )		die('1');	die('0');	break;case 'delete-page' :	check_ajax_referer( "{$action}_$id" );	if ( !current_user_can( 'delete_page', $id ) )		die('-1');	if ( !get_page( $id ) )		die('1');	if ( wp_delete_post( $id ) )		die('1');	else		die('0');	break;case 'dim-comment' : // On success, die with time() instead of 1	if ( !$comment = get_comment( $id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))		) );		$x->send();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) && !current_user_can( 'moderate_comments' ) )		die('-1');	$current = wp_get_comment_status( $comment->comment_ID );	if ( $_POST['new'] == $current )		die( (string) time() );	check_ajax_referer( "approve-comment_$id" );	if ( in_array( $current, array( 'unapproved', 'spam' ) ) )		$result = wp_set_comment_status( $comment->comment_ID, 'approve', true );	else		$result = wp_set_comment_status( $comment->comment_ID, 'hold', true );	if ( is_wp_error($result) ) {		$x = new WP_Ajax_Response( array(			'what' => 'comment',			'id' => $result		) );		$x->send();	}	// Decide if we need to send back '1' or a more complicated response including page links and comment counts	_wp_ajax_delete_comment_response( $comment->comment_ID );	die( '0' );	break;case 'add-link-category' : // On the Fly	check_ajax_referer( $action );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	$names = explode(',', $_POST['newcat']);	$x = new WP_Ajax_Response();	foreach ( $names as $cat_name ) {		$cat_name = trim($cat_name);		$slug = sanitize_title($cat_name);		if ( '' === $slug )			continue;		if ( !$cat_id = term_exists( $cat_name, 'link_category' ) ) {			$cat_id = wp_insert_term( $cat_name, 'link_category' );		}		$cat_id = $cat_id['term_id'];		$cat_name = esc_html(stripslashes($cat_name));		$x->add( array(			'what' => 'link-category',			'id' => $cat_id,			'data' => "<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='" . esc_attr($cat_id) . "' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>",			'position' => -1		) );	}	$x->send();	break;case 'add-link-cat' : // From Blogroll -> Categories	check_ajax_referer( 'add-link-category' );	if ( !current_user_can( 'manage_categories' ) )		die('-1');	if ( '' === trim($_POST['name']) ) {		$x = new WP_Ajax_Response( array(			'what' => 'link-cat',			'id' => new WP_Error( 'name', __('You did not enter a category name.') )		) );		$x->send();	}	$r = wp_insert_term($_POST['name'], 'link_category', $_POST );	if ( is_wp_error( $r ) ) {		$x = new WP_AJAX_Response( array(			'what' => 'link-cat',			'id' => $r		) );		$x->send();	}	extract($r, EXTR_SKIP);	if ( !$link_cat = link_cat_row( $term_id ) )		die('0');	$x = new WP_Ajax_Response( array(		'what' => 'link-cat',		'id' => $term_id,		'position' => -1,		'data' => $link_cat	) );	$x->send();	break;case 'add-tag' : // From Manage->Tags	check_ajax_referer( 'add-tag' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';	$tax = get_taxonomy($taxonomy);	$x = new WP_Ajax_Response();	if ( !current_user_can( $tax->cap->edit_terms ) )		die('-1');	$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );	if ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {		$message = __('An error has occured. Please reload the page and try again.');		if ( is_wp_error($tag) && $tag->get_error_message() )			$message = $tag->get_error_message();		$x->add( array(			'what' => 'taxonomy',			'data' => new WP_Error('error', $message )		) );		$x->send();	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	$level = 0;	$tag_full_name = false;	$tag_full_name = $tag->name;	if ( is_taxonomy_hierarchical($taxonomy) ) {		$_tag = $tag;		while ( $_tag->parent  ) {			$_tag = get_term( $_tag->parent, $taxonomy );			$tag_full_name = $_tag->name . ' &#8212; ' . $tag_full_name;			$level++;		}		$noparents = _tag_row( $tag, $level, $taxonomy );	}	$tag->name = $tag_full_name;	$parents = _tag_row( $tag, 0, $taxonomy);	$x->add( array(		'what' => 'taxonomy',		'supplemental' => compact('parents', 'noparents')		) );	$x->add( array(		'what' => 'term',		'position' => $level,		'supplemental' => get_term( $tag->term_id, $taxonomy, ARRAY_A ) //Refetch as $tag has been contaminated by the full name.		) );	$x->send();	break;case 'get-tagcloud' :	if ( !current_user_can( 'edit_posts' ) )		die('-1');	if ( isset($_POST['tax']) )		$taxonomy = sanitize_title($_POST['tax']);	else		die('0');	$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );	if ( empty( $tags ) ) {		$tax = get_taxonomy( $taxonomy );		die( isset( $tax->no_tagcloud ) ? $tax->no_tagcloud : __('No tags found!') );	}	if ( is_wp_error($tags) )		die($tags->get_error_message());	foreach ( $tags as $key => $tag ) {		$tags[ $key ]->link = '#';		$tags[ $key ]->id = $tag->term_id;	}	// We need raw tag names here, so don't filter the output	$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );	if ( empty($return) )		die('0');	echo $return;	exit;	break;case 'add-comment' :	check_ajax_referer( $action );	if ( !current_user_can( 'edit_posts' ) )		die('-1');	$search = isset($_POST['s']) ? $_POST['s'] : false;	$status = isset($_POST['comment_status']) ? $_POST['comment_status'] : 'all';	$per_page = isset($_POST['per_page']) ?  (int) $_POST['per_page'] + 8 : 28;	$start = isset($_POST['page']) ? ( intval($_POST['page']) * $per_page ) -1 : $per_page - 1;	if ( 1 > $start )		$start = 27;	$mode = isset($_POST['mode']) ? $_POST['mode'] : 'detail';	$p = isset($_POST['p']) ? $_POST['p'] : 0;	$comment_type = isset($_POST['comment_type']) ? $_POST['comment_type'] : '';	list($comments, $total) = _wp_get_comment_list( $status, $search, $start, 1, $p, $comment_type );	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );	if ( !$comments )		die('1');	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, $mode, $status, true, true );			$comment_list_item = ob_get_contents();		ob_end_clean();		$x->add( array(			'what' => 'comment',			'id' => $comment->comment_ID,			'data' => $comment_list_item		) );	}	$x->send();	break;case 'get-comments' :	check_ajax_referer( $action );	$post_ID = (int) $_POST['post_ID'];	if ( !current_user_can( 'edit_post', $post_ID ) )		die('-1');	$start = isset($_POST['start']) ? intval($_POST['start']) : 0;	$num = isset($_POST['num']) ? intval($_POST['num']) : 10;	list($comments, $total) = _wp_get_comment_list( false, false, $start, $num, $post_ID );	if ( !$comments )		die('1');	$comment_list_item = '';	$x = new WP_Ajax_Response();	foreach ( (array) $comments as $comment ) {		get_comment( $comment );		ob_start();			_wp_comment_row( $comment->comment_ID, 'single', false, false );			$comment_list_item .= ob_get_contents();		ob_end_clean();	}	$x->add( array(		'what' => 'comments',		'data' => $comment_list_item	) );	$x->send();	break;case 'replyto-comment' :	check_ajax_referer( $action, '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( !current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	$status = $wpdb->get_var( $wpdb->prepare("SELECT post_status FROM $wpdb->posts WHERE ID = %d", $comment_post_ID) );	if ( empty($status) )		die('1');	elseif ( in_array($status, array('draft', 'pending', 'trash') ) )		die( __('Error: you are replying to a comment on a draft post.') );	$user = wp_get_current_user();	if ( $user->ID ) {		$comment_author       = $wpdb->escape($user->display_name);		$comment_author_email = $wpdb->escape($user->user_email);		$comment_author_url   = $wpdb->escape($user->user_url);		$comment_content      = trim($_POST['content']);		if ( current_user_can('unfiltered_html') ) {			if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {				kses_remove_filters(); // start with a clean slate				kses_init_filters(); // set up the filters			}		}	} else {		die( __('Sorry, you must be logged in to reply to a comment.') );	}	if ( '' == $comment_content )		die( __('Error: please type a comment.') );	$comment_parent = absint($_POST['comment_ID']);	$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');	$comment_id = wp_new_comment( $commentdata );	$comment = get_comment($comment_id);	if ( ! $comment ) die('1');	$modes = array( 'single', 'detail', 'dashboard' );	$mode = isset($_POST['mode']) && in_array( $_POST['mode'], $modes ) ? $_POST['mode'] : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		if ( 'dashboard' == $mode ) {			require_once( ABSPATH . 'wp-admin/includes/dashboard.php' );			_wp_dashboard_recent_comments_row( $comment, false );		} else {			_wp_comment_row( $comment->comment_ID, $mode, false, $checkbox );		}		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'edit-comment' :	check_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );	$comment_post_ID = (int) $_POST['comment_post_ID'];	if ( ! current_user_can( 'edit_post', $comment_post_ID ) )		die('-1');	if ( '' == $_POST['content'] )		die( __('Error: please type a comment.') );	$comment_id = (int) $_POST['comment_ID'];	$_POST['comment_status'] = $_POST['status'];	edit_comment();	$mode = ( isset($_POST['mode']) && 'single' == $_POST['mode'] ) ? 'single' : 'detail';	$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';	$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;	$comments_listing = isset($_POST['comments_listing']) ? $_POST['comments_listing'] : '';	if ( get_option('show_avatars') && 'single' != $mode )		add_filter( 'comment_author', 'floated_admin_avatar' );	$x = new WP_Ajax_Response();	ob_start();		_wp_comment_row( $comment_id, $mode, $comments_listing, $checkbox );		$comment_list_item = ob_get_contents();	ob_end_clean();	$x->add( array(		'what' => 'edit_comment',		'id' => $comment->comment_ID,		'data' => $comment_list_item,		'position' => $position	));	$x->send();	break;case 'add-menu-item' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	$item_ids = wp_save_nav_menu_items( 0, $_POST['menu-item'] );	if ( is_wp_error( $item_ids ) )		die('-1');	foreach ( (array) $item_ids as $menu_item_id ) {		$menu_obj = get_post( $menu_item_id );		if ( ! empty( $menu_obj->ID ) ) {			$menu_obj = wp_setup_nav_menu_item( $menu_obj );			$menu_obj->label = $menu_obj->title; // don't show "(pending)" in ajax-added items			$menu_items[] = $menu_obj;		}	}	if ( ! empty( $menu_items ) ) {		$args = array(			'after' => '',			'before' => '',			'link_after' => '',			'link_before' => '',			'walker' => new Walker_Nav_Menu_Edit,		);		echo walk_nav_menu_tree( $menu_items, 0, (object) $args );	}	break;case 'add-meta' :	check_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );	$c = 0;	$pid = (int) $_POST['post_id'];	$post = get_post( $pid );	if ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {		if ( !current_user_can( 'edit_post', $pid ) )			die('-1');		if ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )			die('1');		if ( $post->post_status == 'auto-draft' ) {			$save_POST = $_POST; // Backup $_POST			$_POST = array(); // Make it empty for edit_post()			$_POST['action'] = 'draft'; // Warning fix			$_POST['post_ID'] = $pid;			$_POST['post_type'] = $post->post_type;			$_POST['post_status'] = 'draft';			$now = current_time('timestamp', 1);			$_POST['post_title'] = sprintf('Draft created on %s at %s', date(get_option('date_format'), $now), date(get_option('time_format'), $now));			if ( $pid = edit_post() ) {				if ( is_wp_error( $pid ) ) {					$x = new WP_Ajax_Response( array(						'what' => 'meta',						'data' => $pid					) );					$x->send();				}				$_POST = $save_POST; // Now we can restore original $_POST again				if ( !$mid = add_meta( $pid ) )					die(__('Please provide a custom field value.'));			} else {				die('0');			}		} else if ( !$mid = add_meta( $pid ) ) {			die(__('Please provide a custom field value.'));		}		$meta = get_post_meta_by_id( $mid );		$pid = (int) $meta->post_id;		$meta = get_object_vars( $meta );		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid,			'data' => _list_meta_row( $meta, $c ),			'position' => 1,			'supplemental' => array('postid' => $pid)		) );	} else { // Update?		$mid = (int) array_pop(array_keys($_POST['meta']));		$key = $_POST['meta'][$mid]['key'];		$value = $_POST['meta'][$mid]['value'];		if ( '' == trim($key) )			die(__('Please provide a custom field name.'));		if ( '' == trim($value) )			die(__('Please provide a custom field value.'));		if ( !$meta = get_post_meta_by_id( $mid ) )			die('0'); // if meta doesn't exist		if ( !current_user_can( 'edit_post', $meta->post_id ) )			die('-1');		if ( $meta->meta_value != stripslashes($value) || $meta->meta_key != stripslashes($key) ) {			if ( !$u = update_meta( $mid, $key, $value ) )				die('0'); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).		}		$key = stripslashes($key);		$value = stripslashes($value);		$x = new WP_Ajax_Response( array(			'what' => 'meta',			'id' => $mid, 'old_id' => $mid,			'data' => _list_meta_row( array(				'meta_key' => $key,				'meta_value' => $value,				'meta_id' => $mid			), $c ),			'position' => 0,			'supplemental' => array('postid' => $meta->post_id)		) );	}	$x->send();	break;case 'add-user' :	check_ajax_referer( $action );	if ( !current_user_can('create_users') )		die('-1');	require_once(ABSPATH . WPINC . '/registration.php');	if ( !$user_id = add_user() )		die('0');	elseif ( is_wp_error( $user_id ) ) {		$x = new WP_Ajax_Response( array(			'what' => 'user',			'id' => $user_id		) );		$x->send();	}	$user_object = new WP_User( $user_id );	$x = new WP_Ajax_Response( array(		'what' => 'user',		'id' => $user_id,		'data' => user_row( $user_object, '', $user_object->roles[0] ),		'supplemental' => array(			'show-link' => sprintf(__( 'User <a href="#%s">%s</a> added' ), "user-$user_id", $user_object->user_login),			'role' => $user_object->roles[0]		)	) );	$x->send();	break;case 'autosave' : // The name of this action is hardcoded in edit_post()	define( 'DOING_AUTOSAVE', true );	$nonce_age = check_ajax_referer( 'autosave', 'autosavenonce' );	global $current_user;	$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$do_autosave = (bool) $_POST['autosave'];	$do_lock = true;	$data = '';	/* translators: draft saved date format, see http://php.net/date */	$draft_saved_date_format = __('g:i:s a');	/* translators: %s: date and time */	$message = sprintf( __('Draft saved at %s.'), date_i18n( $draft_saved_date_format ) );	$supplemental = array();	if ( isset($login_grace_period) )		$supplemental['session_expired'] = add_query_arg( 'interim-login', 1, wp_login_url() );	$id = $revision_id = 0;	$post_ID = (int) $_POST['post_ID'];	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'auto-draft' == $post->post_status )		$_POST['post_status'] = 'draft';	if ( $last = wp_check_post_lock( $post->ID ) ) {		$do_autosave = $do_lock = false;		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		$data = new WP_Error( 'locked', sprintf(			$_POST['post_type'] == 'page' ? __( 'Autosave disabled: %s is currently editing this page.' ) : __( 'Autosave disabled: %s is currently editing this post.' ),			esc_html( $last_user_name )		) );		$supplemental['disable_autosave'] = 'disable';	}	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			die(__('You are not allowed to edit this post.'));	}	if ( $do_autosave ) {		// Drafts and auto-drafts are just overwritten by autosave		if ( 'auto-draft' == $post->post_status || 'draft' == $post->post_status ) {			$id = edit_post();		} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.			$revision_id = wp_create_post_autosave( $post->ID );			if ( is_wp_error($revision_id) )				$id = $revision_id;			else				$id = $post->ID;		}		$data = $message;	} else {		if ( isset( $_POST['auto_draft'] ) && '1' == $_POST['auto_draft'] )			$id = 0; // This tells us it didn't actually save		else			$id = $post->ID;	}	if ( $do_lock && ( isset( $_POST['auto_draft'] ) && ( $_POST['auto_draft'] != '1' ) ) && $id && is_numeric($id) )		wp_set_post_lock( $id );	if ( $nonce_age == 2 ) {		$supplemental['replace-autosavenonce'] = wp_create_nonce('autosave');		$supplemental['replace-getpermalinknonce'] = wp_create_nonce('getpermalink');		$supplemental['replace-samplepermalinknonce'] = wp_create_nonce('samplepermalink');		$supplemental['replace-closedpostboxesnonce'] = wp_create_nonce('closedpostboxes');		if ( $id ) {			if ( $_POST['post_type'] == 'post' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-post_' . $id);			elseif ( $_POST['post_type'] == 'page' )				$supplemental['replace-_wpnonce'] = wp_create_nonce('update-page_' . $id);		}	}	$x = new WP_Ajax_Response( array(		'what' => 'autosave',		'id' => $id,		'data' => $id ? $data : '',		'supplemental' => $supplemental	) );	$x->send();	break;case 'closed-postboxes' :	check_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );	$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();	$closed = array_filter($closed);	$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();	$hidden = array_filter($hidden);	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($closed) )		update_user_option($user->ID, "closedpostboxes_$page", $closed, true);	if ( is_array($hidden) ) {		$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown		update_user_option($user->ID, "metaboxhidden_$page", $hidden, true);	}	die('1');	break;case 'hidden-columns' :	check_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );	$hidden = isset( $_POST['hidden'] ) ? $_POST['hidden'] : '';	$hidden = explode( ',', $_POST['hidden'] );	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( is_array($hidden) )		update_user_option($user->ID, "manage{$page}columnshidden", $hidden, true);	die('1');	break;case 'menu-get-metabox' :	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	if ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {		$type = 'posttype';		$callback = 'wp_nav_menu_item_post_type_meta_box';		$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {		$type = 'taxonomy';		$callback = 'wp_nav_menu_item_taxonomy_meta_box';		$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );	}	if ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {		$item = apply_filters( 'nav_menu_meta_box_object', $items[ $_POST['item-object'] ] );		ob_start();		call_user_func_array($callback, array(			null,			array(				'id' => 'add-' . $item->name,				'title' => $item->labels->name,				'callback' => $callback,				'args' => $item,			)		));		$markup = ob_get_clean();		echo json_encode(array(			'replace-id' => $type . '-' . $item->name,			'markup' => $markup,		));	}	exit;	break;case 'menu-quick-search':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	require_once ABSPATH . 'wp-admin/includes/nav-menu.php';	_wp_ajax_menu_quick_search( $_REQUEST );	exit;	break;case 'menu-locations-save':	if ( ! current_user_can( 'edit_theme_options' ) )		die('-1');	check_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );	if ( ! isset( $_POST['menu-locations'] ) )		die('0');	set_theme_mod( 'nav_menu_locations', $_POST['menu-locations'] );	die('1');	break;case 'meta-box-order':	check_ajax_referer( 'meta-box-order' );	$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;	$page_columns = isset( $_POST['page_columns'] ) ? (int) $_POST['page_columns'] : 0;	$page = isset( $_POST['page'] ) ? $_POST['page'] : '';	if ( !preg_match( '/^[a-z_-]+$/', $page ) )		die('-1');	if ( ! $user = wp_get_current_user() )		die('-1');	if ( $order )		update_user_option($user->ID, "meta-box-order_$page", $order, true);	if ( $page_columns )		update_user_option($user->ID, "screen_layout_$page", $page_columns, true);	die('1');	break;case 'get-permalink':	check_ajax_referer( 'getpermalink', 'getpermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	die(add_query_arg(array('preview' => 'true'), get_permalink($post_id)));break;case 'sample-permalink':	check_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );	$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;	$title = isset($_POST['new_title'])? $_POST['new_title'] : '';	$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;	die(get_sample_permalink_html($post_id, $title, $slug));break;case 'inline-save':	check_ajax_referer( 'inlineeditnonce', '_inline_edit' );	if ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )		exit;	if ( 'page' == $_POST['post_type'] ) {		if ( ! current_user_can( 'edit_page', $post_ID ) )			die( __('You are not allowed to edit this page.') );	} else {		if ( ! current_user_can( 'edit_post', $post_ID ) )			die( __('You are not allowed to edit this post.') );	}	if ( isset($_POST['screen']) )		set_current_screen($_POST['screen']);	if ( $last = wp_check_post_lock( $post_ID ) ) {		$last_user = get_userdata( $last );		$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );		printf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),	esc_html( $last_user_name ) );		exit;	}	$data = &$_POST;	$post = get_post( $post_ID, ARRAY_A );	$post = add_magic_quotes($post); //since it is from db	$data['content'] = $post['post_content'];	$data['excerpt'] = $post['post_excerpt'];	// rename	$data['user_ID'] = $GLOBALS['user_ID'];	if ( isset($data['post_parent']) )		$data['parent_id'] = $data['post_parent'];	// status	if ( isset($data['keep_private']) && 'private' == $data['keep_private'] )		$data['post_status'] = 'private';	else		$data['post_status'] = $data['_status'];	if ( empty($data['comment_status']) )		$data['comment_status'] = 'closed';	if ( empty($data['ping_status']) )		$data['ping_status'] = 'closed';	// update the post	edit_post();	$post = array();	if ( 'page' == $_POST['post_type'] ) {		$post[] = get_post($_POST['post_ID']);		page_rows($post);	} elseif ( 'post' == $_POST['post_type'] || in_array($_POST['post_type'], get_post_types( array('public' => true) ) ) ) {		$mode = $_POST['post_view'];		$post[] = get_post($_POST['post_ID']);		post_rows($post);	}	exit;	break;case 'inline-save-tax':	check_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );	$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : false;	if ( ! $taxonomy )		die( __('Cheatin&#8217; uh?') );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		die( __('Cheatin&#8217; uh?') );	if ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )		die(-1);	switch ($_POST['tax_type']) {		case 'link-cat' :			$updated = wp_update_term($id, 'link_category', $_POST);			if ( $updated && !is_wp_error($updated) )				echo link_cat_row($updated['term_id']);			else				die( __('Category not updated.') );			break;		case 'tag' :			$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';			$tag = get_term( $id, $taxonomy );			$_POST['description'] = $tag->description;			$updated = wp_update_term($id, $taxonomy, $_POST);			if ( $updated && !is_wp_error($updated) ) {				$tag = get_term( $updated['term_id'], $taxonomy );				if ( !$tag || is_wp_error( $tag ) ) {					if ( is_wp_error($tag) && $tag->get_error_message() )						die( $tag->get_error_message() );					die( __('Item not updated.') );				}				set_current_screen( 'edit-' . $taxonomy );				echo _tag_row($tag, 0, $taxonomy);			} else {				if ( is_wp_error($updated) && $updated->get_error_message() )					die( $updated->get_error_message() );				die( __('Item not updated.') );			}			break;	}	exit;	break;case 'find_posts':	check_ajax_referer( 'find-posts' );	if ( empty($_POST['ps']) )		exit;	if ( !empty($_POST['post_type']) && in_array( $_POST['post_type'], get_post_types() ) )		$what = $_POST['post_type'];	else		$what = 'post';	$s = stripslashes($_POST['ps']);	preg_match_all('/".*?("|$)|((?<=[\\s",+])|^)[^\\s",+]+/', $s, $matches);	$search_terms = array_map('_search_terms_tidy', $matches[0]);	$searchand = $search = '';	foreach ( (array) $search_terms as $term ) {		$term = addslashes_gpc($term);		$search .= "{$searchand}(($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%'))";		$searchand = ' AND ';	}	$term = $wpdb->escape($s);	if ( count($search_terms) > 1 && $search_terms[0] != $s )		$search .= " OR ($wpdb->posts.post_title LIKE '%{$term}%') OR ($wpdb->posts.post_content LIKE '%{$term}%')";	$posts = $wpdb->get_results( "SELECT ID, post_title, post_status, post_date FROM $wpdb->posts WHERE post_type = '$what' AND post_status IN ('draft', 'publish') AND ($search) ORDER BY post_date_gmt DESC LIMIT 50" );	if ( ! $posts ) {		$posttype = get_post_type_object($what);		exit($posttype->labels->not_found);	}	$html = '<table class="widefat" cellspacing="0"><thead><tr><th class="found-radio"><br /></th><th>'.__('Title').'</th><th>'.__('Date').'</th><th>'.__('Status').'</th></tr></thead><tbody>';	foreach ( $posts as $post ) {		switch ( $post->post_status ) {			case 'publish' :			case 'private' :				$stat = __('Published');				break;			case 'future' :				$stat = __('Scheduled');				break;			case 'pending' :				$stat = __('Pending Review');				break;			case 'draft' :				$stat = __('Draft');				break;		}		if ( '0000-00-00 00:00:00' == $post->post_date ) {			$time = '';		} else {			/* translators: date format in table columns, see http://php.net/date */			$time = mysql2date(__('Y/m/d'), $post->post_date);		}		$html .= '<tr class="found-posts"><td class="found-radio"><input type="radio" id="found-'.$post->ID.'" name="found_post_id" value="' . esc_attr($post->ID) . '"></td>';		$html .= '<td><label for="found-'.$post->ID.'">'.esc_html( $post->post_title ).'</label></td><td>'.esc_html( $time ).'</td><td>'.esc_html( $stat ).'</td></tr>'."\n\n";	}	$html .= '</tbody></table>';	$x = new WP_Ajax_Response();	$x->add( array(		'what' => $what,		'data' => $html	));	$x->send();	break;case 'lj-importer' :	check_ajax_referer( 'lj-api-import' );	if ( !current_user_can( 'publish_posts' ) )		die('-1');	if ( empty( $_POST['step'] ) )		die( '-1' );	define('WP_IMPORTING', true);	include( ABSPATH . 'wp-admin/import/livejournal.php' );	$result = $lj_api_import->{ 'step' . ( (int) $_POST['step'] ) }();	if ( is_wp_error( $result ) )		echo $result->get_error_message();	die;	break;case 'widgets-order' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	// save widgets order for all sidebars	if ( is_array($_POST['sidebars']) ) {		$sidebars = array();		foreach ( $_POST['sidebars'] as $key => $val ) {			$sb = array();			if ( !empty($val) ) {				$val = explode(',', $val);				foreach ( $val as $k => $v ) {					if ( strpos($v, 'widget-') === false )						continue;					$sb[$k] = substr($v, strpos($v, '_') + 1);				}			}			$sidebars[$key] = $sb;		}		wp_set_sidebars_widgets($sidebars);		die('1');	}	die('-1');	break;case 'save-widget' :	check_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );	if ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )		die('-1');	unset( $_POST['savewidgets'], $_POST['action'] );	do_action('load-widgets.php');	do_action('widgets.php');	do_action('sidebar_admin_setup');	$id_base = $_POST['id_base'];	$widget_id = $_POST['widget-id'];	$sidebar_id = $_POST['sidebar'];	$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;	$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;	$error = '<p>' . __('An error has occured. Please reload the page and try again.') . '</p>';	$sidebars = wp_get_sidebars_widgets();	$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();	// delete	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		if ( !isset($wp_registered_widgets[$widget_id]) )			die($error);		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {		if ( !$multi_number )			die($error);		$_POST['widget-' . $id_base] = array( $multi_number => array_shift($settings) );		$widget_id = $id_base . '-' . $multi_number;		$sidebar[] = $widget_id;	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name == $id_base ) {			if ( !is_callable( $control['callback'] ) )				continue;			ob_start();				call_user_func_array( $control['callback'], $control['params'] );			ob_end_clean();			break;		}	}	if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {		$sidebars[$sidebar_id] = $sidebar;		wp_set_sidebars_widgets($sidebars);		echo "deleted:$widget_id";		die();	}	if ( !empty($_POST['add_new']) )		die();	if ( $form = $wp_registered_widget_controls[$widget_id] )		call_user_func_array( $form['callback'], $form['params'] );	die();	break;case 'image-editor':	$attachment_id = intval($_POST['postid']);	if ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )		die('-1');	check_ajax_referer( "image_editor-$attachment_id" );	include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );	$msg = false;	switch ( $_POST['do'] ) {		case 'save' :			$msg = wp_save_image($attachment_id);			$msg = json_encode($msg);			die($msg);			break;		case 'scale' :			$msg = wp_save_image($attachment_id);			break;		case 'restore' :			$msg = wp_restore_image($attachment_id);			break;	}	wp_image_editor($attachment_id, $msg);	die();	break;case 'set-post-thumbnail':	$post_ID = intval( $_POST['post_id'] );	if ( !current_user_can( 'edit_post', $post_ID ) )		die( '-1' );	$thumbnail_id = intval( $_POST['thumbnail_id'] );	check_ajax_referer( "set_post_thumbnail-$post_ID" );	if ( $thumbnail_id == '-1' ) {		delete_post_meta( $post_ID, '_thumbnail_id' );		die( _wp_post_thumbnail_html() );	}	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'thumbnail' );		if ( !empty( $thumbnail_html ) ) {			update_post_meta( $post_ID, '_thumbnail_id', $thumbnail_id );			die( _wp_post_thumbnail_html( $thumbnail_id ) );		}	}	die( '0' );	break;default :	do_action( 'wp_ajax_' . $_POST['action'] );	die('0');	break;endswitch;?>
<?php/** * WordPress Administration Bootstrap * * @package WordPress * @subpackage Administration *//** * In WordPress Administration Panels * * @since unknown */if ( !defined('WP_ADMIN') )	define('WP_ADMIN', TRUE);if ( isset($_GET['import']) && !defined('WP_LOAD_IMPORTERS') )	define('WP_LOAD_IMPORTERS', true);require_once(dirname(dirname(__FILE__)) . '/wp-load.php');if ( get_option('db_upgraded') ) {	$wp_rewrite->flush_rules();	update_option( 'db_upgraded',  false );	/**	 * Runs on the next page load after successful upgrade	 *	 * @since 2.8	 */	do_action('after_db_upgrade');} elseif ( get_option('db_version') != $wp_db_version ) {	if ( !is_multisite() ) {		wp_redirect(admin_url('upgrade.php?_wp_http_referer=' . urlencode(stripslashes($_SERVER['REQUEST_URI']))));		exit;	} elseif ( apply_filters( 'do_mu_upgrade', true ) ) {		/**		 * On really small MU installs run the upgrader every time,		 * else run it less often to reduce load.		 *		 * @since 2.8.4b		 */		$c = get_blog_count();		if ( $c <= 50 || ( $c > 50 && mt_rand( 0, (int)( $c / 50 ) ) == 1 ) ) {			require_once( ABSPATH . WPINC . '/http.php' );			$response = wp_remote_get( admin_url( 'upgrade.php?step=1' ), array( 'timeout' => 120, 'httpversion' => '1.1' ) );			do_action( 'after_mu_upgrade', $response );			unset($response);		}		unset($c);	}}require_once(ABSPATH . 'wp-admin/includes/admin.php');auth_redirect();nocache_headers();update_category_cache();// Schedule trash collectionif ( !wp_next_scheduled('wp_scheduled_delete') && !defined('WP_INSTALLING') )	wp_schedule_event(time(), 'daily', 'wp_scheduled_delete');set_screen_options();$date_format = get_option('date_format');$time_format = get_option('time_format');wp_reset_vars(array('profile', 'redirect', 'redirect_url', 'a', 'text', 'trackback', 'pingback'));wp_enqueue_script( 'common' );wp_enqueue_script( 'jquery-color' );$editing = false;if ( isset($_GET['page']) ) {	$plugin_page = stripslashes($_GET['page']);	$plugin_page = plugin_basename($plugin_page);}if ( isset($_GET['post_type']) )	$typenow = sanitize_key($_GET['post_type']);else	$typenow = '';if ( isset($_GET['taxonomy']) )	$taxnow = sanitize_key($_GET['taxonomy']);else	$taxnow = '';require(ABSPATH . 'wp-admin/menu.php');if ( current_user_can( 'manage_options' ) )	@ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', '256M' ) );do_action('admin_init');if ( isset($plugin_page) ) {	if ( !empty($typenow) )		$the_parent = $pagenow . '?post_type=' . $typenow;	else		$the_parent = $pagenow;	if ( ! $page_hook = get_plugin_page_hook($plugin_page, $the_parent) ) {		$page_hook = get_plugin_page_hook($plugin_page, $plugin_page);		// backwards compatibility for plugins using add_management_page		if ( empty( $page_hook ) && 'edit.php' == $pagenow && '' != get_plugin_page_hook($plugin_page, 'tools.php') ) {			// There could be plugin specific params on the URL, so we need the whole query string			if ( !empty($_SERVER[ 'QUERY_STRING' ]) )				$query_string = $_SERVER[ 'QUERY_STRING' ];			else				$query_string = 'page=' . $plugin_page;			wp_redirect( 'tools.php?' . $query_string );			exit;		}	}	unset($the_parent);}$hook_suffix = '';if ( isset($page_hook) )	$hook_suffix = $page_hook;else if ( isset($plugin_page) )	$hook_suffix = $plugin_page;else if ( isset($pagenow) )	$hook_suffix = $pagenow;set_current_screen();// Handle plugin admin pages.if ( isset($plugin_page) ) {	if ( $page_hook ) {		do_action('load-' . $page_hook);		if (! isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		do_action($page_hook);	} else {		if ( validate_file($plugin_page) )			wp_die(__('Invalid plugin page'));		if ( !( file_exists(WP_PLUGIN_DIR . "/$plugin_page") && is_file(WP_PLUGIN_DIR . "/$plugin_page") ) && !( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") && is_file(WPMU_PLUGIN_DIR . "/$plugin_page") ) )			wp_die(sprintf(__('Cannot load %s.'), htmlentities($plugin_page)));		do_action('load-' . $plugin_page);		if ( !isset($_GET['noheader']))			require_once(ABSPATH . 'wp-admin/admin-header.php');		if ( file_exists(WPMU_PLUGIN_DIR . "/$plugin_page") )			include(WPMU_PLUGIN_DIR . "/$plugin_page");		else			include(ABSPATH . PLUGINDIR . "/$plugin_page");	}	include(ABSPATH . 'wp-admin/admin-footer.php');	exit();} else if (isset($_GET['import'])) {	$importer = $_GET['import'];	if ( ! current_user_can('import') )		wp_die(__('You are not allowed to import.'));	if ( validate_file($importer) )		wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );	// Allow plugins to define importers as well	if ( !isset($wp_importers) || !isset($wp_importers[$importer]) || ! is_callable($wp_importers[$importer][2])) {		if (! file_exists(ABSPATH . "wp-admin/import/$importer.php"))			wp_redirect( admin_url( 'import.php?invalid=' . $importer ) );		include(ABSPATH . "wp-admin/import/$importer.php");	}	$parent_file = 'tools.php';	$submenu_file = 'import.php';	$title = __('Import');	if (! isset($_GET['noheader']))		require_once(ABSPATH . 'wp-admin/admin-header.php');	require_once(ABSPATH . 'wp-admin/includes/upgrade.php');	define('WP_IMPORTING', true);	if ( is_multisite() )		kses_init_filters();  // Always filter imported data with kses.	call_user_func($wp_importers[$importer][2]);	include(ABSPATH . 'wp-admin/admin-footer.php');	// Make sure rules are flushed	global $wp_rewrite;	$wp_rewrite->flush_rules(false);	exit();} else {	do_action("load-$pagenow");}if ( !empty($_REQUEST['action']) )	do_action('admin_action_' . $_REQUEST['action']);?>
<?php/** * Multisite administration functions. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Determine if uploaded file exceeds space quota. * * @since 3.0.0 * * @param array $file $_FILES array for a given file. * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise. */function check_upload_size( $file ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return $file;	if ( $file['error'] != '0' ) // there's already an error		return $file;	if ( defined( 'WP_IMPORTING' ) )		return $file;	$space_allowed = 1048576 * get_space_allowed();	$space_used = get_dirsize( BLOGUPLOADDIR );	$space_left = $space_allowed - $space_used;	$file_size = filesize( $file['tmp_name'] );	if ( $space_left < $file_size )		$file['error'] = sprintf( __( 'Not enough space to upload. %1$s KB needed.' ), number_format( ($file_size - $space_left) /1024 ) );	if ( $file_size > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		$file['error'] = sprintf(__('This file is too big. Files must be less than %1$s KB in size.'), get_site_option( 'fileupload_maxk', 1500 ) );	if ( upload_is_user_over_quota( false ) ) {		$file['error'] = __( 'You have used your space quota. Please delete files before uploading.' );	}	if ( $file['error'] != '0' && !isset($_POST['html-upload']) )		wp_die( $file['error'] . ' <a href="javascript:history.go(-1)">' . __( 'Back' ) . '</a>' );	return $file;}add_filter( 'wp_handle_upload_prefilter', 'check_upload_size' );/** * Delete a blog * * @since 3.0.0 * * @param int $blog_id Blog ID * @param bool $drop True if blog's table should be dropped.  Default is false. * @return void */function wpmu_delete_blog( $blog_id, $drop = false ) {	global $wpdb;	$switch = false;	if ( $blog_id != $wpdb->blogid ) {		$switch = true;		switch_to_blog( $blog_id );	}	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	do_action( 'delete_blog', $blog_id, $drop );	$users = get_users_of_blog( $blog_id );	// Remove users from this blog.	if ( ! empty( $users ) ) {		foreach ( $users as $user ) {			remove_user_from_blog( $user->user_id, $blog_id) ;		}	}	update_blog_status( $blog_id, 'deleted', 1 );	if ( $drop ) {		if ( substr( $blog_prefix, -1 ) == '_' )			$blog_prefix =  substr( $blog_prefix, 0, -1 ) . '\_';		$drop_tables = $wpdb->get_results( "SHOW TABLES LIKE '{$blog_prefix}%'", ARRAY_A );		$drop_tables = apply_filters( 'wpmu_drop_tables', $drop_tables );		reset( $drop_tables );		foreach ( (array) $drop_tables as $drop_table) {			$wpdb->query( "DROP TABLE IF EXISTS ". current( $drop_table ) ."" );		}		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->blogs WHERE blog_id = %d", $blog_id ) );		$dir = apply_filters( 'wpmu_delete_blog_upload_dir', WP_CONTENT_DIR . "/blogs.dir/{$blog_id}/files/", $blog_id );		$dir = rtrim( $dir, DIRECTORY_SEPARATOR );		$top_dir = $dir;		$stack = array($dir);		$index = 0;		while ( $index < count( $stack ) ) {			# Get indexed directory from stack			$dir = $stack[$index];			$dh = @opendir( $dir );			if ( $dh ) {				while ( ( $file = @readdir( $dh ) ) !== false ) {					if ( $file == '.' || $file == '..' )						continue;					if ( @is_dir( $dir . DIRECTORY_SEPARATOR . $file ) )						$stack[] = $dir . DIRECTORY_SEPARATOR . $file;					else if ( @is_file( $dir . DIRECTORY_SEPARATOR . $file ) )						@unlink( $dir . DIRECTORY_SEPARATOR . $file );				}			}			$index++;		}		$stack = array_reverse( $stack );  // Last added dirs are deepest		foreach( (array) $stack as $dir ) {			if ( $dir != $top_dir)			@rmdir( $dir );		}	}	$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE meta_key = '{$blog_prefix}autosave_draft_ids'" );	$blogs = get_site_option( 'blog_list' );	if ( is_array( $blogs ) ) {		foreach ( $blogs as $n => $blog ) {			if ( $blog['blog_id'] == $blog_id )				unset( $blogs[$n] );		}		update_site_option( 'blog_list', $blogs );	}	if ( $switch === true )		restore_current_blog();}// @todo Merge with wp_delete_user() ?function wpmu_delete_user( $id ) {	global $wpdb;	$id = (int) $id;	do_action( 'wpmu_delete_user', $id );	$blogs = get_blogs_of_user( $id );	if ( ! empty( $blogs ) ) {		foreach ( $blogs as $blog ) {			switch_to_blog( $blog->userblog_id );			remove_user_from_blog( $id, $blog->userblog_id );			$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );			foreach ( (array) $post_ids as $post_id ) {				wp_delete_post( $post_id );			}			// Clean links			$link_ids = $wpdb->get_col( $wpdb->prepare( "SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id ) );			if ( $link_ids ) {				foreach ( $link_ids as $link_id )					wp_delete_link( $link_id );			}			restore_current_blog();		}	}	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->users WHERE ID = %d", $id ) );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id ) );	clean_user_cache( $id );	// allow for commit transaction	do_action( 'deleted_user', $id );	return true;}function confirm_delete_users( $users ) {	global $current_user;	if ( !is_array( $users ) )		return false;    screen_icon();    ?>	<h2><?php esc_html_e( 'Users' ); ?></h2>	<p><?php _e( 'Transfer or delete posts and links before deleting users.' ); ?></p>	<form action="ms-edit.php?action=dodelete" method="post">	<input type="hidden" name="dodelete" />    <?php	wp_nonce_field( 'ms-users-delete' );	$site_admins = get_super_admins();	$admin_out = "<option value='$current_user->ID'>$current_user->user_login</option>";	foreach ( ( $allusers = (array) $_POST['allusers'] ) as $key => $val ) {		if ( $val != '' && $val != '0' ) {			$delete_user = new WP_User( $val );			if ( in_array( $delete_user->user_login, $site_admins ) )				wp_die( sprintf( __( 'Warning! User cannot be deleted. The user %s is a network admnistrator.' ), $delete_user->user_login ) );			echo "<input type='hidden' name='user[]' value='{$val}'/>\n";			$blogs = get_blogs_of_user( $val, true );			if ( !empty( $blogs ) ) {				?>				<br /><fieldset><p><legend><?php printf( __( "What should be done with posts and links owned by <em>%s</em>?" ), $delete_user->user_login ); ?></legend></p>				<?php				foreach ( (array) $blogs as $key => $details ) {					$blog_users = get_users_of_blog( $details->userblog_id );					if ( is_array( $blog_users ) && !empty( $blog_users ) ) {						$user_site = "<a href='" . esc_url( get_home_url( $details->userblog_id ) ) . "'>{$details->blogname}</a>";						$user_dropdown = "<select name='blog[$val][{$key}]'>";						$user_list = '';						foreach ( $blog_users as $user ) {							if ( $user->user_id != $val && !in_array( $user->user_id, $allusers ) )								$user_list .= "<option value='{$user->user_id}'>{$user->user_login}</option>";						}						if ( '' == $user_list )							$user_list = $admin_out;						$user_dropdown .= $user_list;						$user_dropdown .= "</select>\n";						?>						<ul style="list-style:none;">							<li><?php printf( __( 'Site: %s' ), $user_site ); ?></li>							<li><label><input type="radio" id="delete_option0" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="delete" checked="checked" />							<?php _e( 'Delete all posts and links.' ); ?></label></li>							<li><label><input type="radio" id="delete_option1" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="reassign" />							<?php echo __( 'Attribute all posts and links to:' ) . '</label>' . $user_dropdown; ?></li>						</ul>						<?php					}				}				echo "</fieldset>";			}		}	}	?>	<p class="submit"><input type="submit" class="button-secondary delete" value="<?php esc_attr_e( 'Confirm Deletion' ); ?>" /></p>	</form>    <?php	return true;}function wpmu_get_blog_allowedthemes( $blog_id = 0 ) {	$themes = get_themes();	if ( $blog_id != 0 )		switch_to_blog( $blog_id );	$blog_allowed_themes = get_option( 'allowedthemes' );	if ( !is_array( $blog_allowed_themes ) || empty( $blog_allowed_themes ) ) { // convert old allowed_themes to new allowedthemes		$blog_allowed_themes = get_option( 'allowed_themes' );		if ( is_array( $blog_allowed_themes ) ) {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $blog_allowed_themes[$key] ) == true ) {					$blog_allowedthemes[$theme_key] = 1;				}			}			$blog_allowed_themes = $blog_allowedthemes;			add_option( 'allowedthemes', $blog_allowed_themes );			delete_option( 'allowed_themes' );		}	}	if ( $blog_id != 0 )		restore_current_blog();	return $blog_allowed_themes;}function update_option_new_admin_email( $old_value, $value ) {	$email = get_option( 'admin_email' );	if ( $value == get_option( 'admin_email' ) || !is_email( $value ) )		return;	$hash = md5( $value. time() .mt_rand() );	$new_admin_email = array(		'hash' => $hash,		'newemail' => $value	);	update_option( 'adminhash', $new_admin_email );	$content = apply_filters( 'new_admin_email_content', __( "Dear user,You recently requested to have the administration email address onyour site changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL### "), $new_admin_email );	$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'options.php?adminhash='.$hash ) ), $content );	$content = str_replace( '###EMAIL###', $value, $content );	$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );	$content = str_replace( '###SITEURL###', network_home_url(), $content );	wp_mail( $value, sprintf( __( '[%s] New Admin Email Address' ), get_option( 'blogname' ) ), $content );}add_action( 'update_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );add_action( 'add_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );function send_confirmation_on_profile_email() {	global $errors, $wpdb, $current_user;	if ( ! is_object($errors) )		$errors = new WP_Error();	if ( $current_user->id != $_POST['user_id'] )		return false;	if ( $current_user->user_email != $_POST['email'] ) {		if ( !is_email( $_POST['email'] ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address isn't correct." ), array( 'form-field' => 'email' ) );			return;		}		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_email FROM {$wpdb->users} WHERE user_email=%s", $_POST['email'] ) ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address is already used." ), array( 'form-field' => 'email' ) );			delete_option( $current_user->ID . '_new_email' );			return;		}		$hash = md5( $_POST['email'] . time() . mt_rand() );		$new_user_email = array(				'hash' => $hash,				'newemail' => $_POST['email']				);		update_option( $current_user->ID . '_new_email', $new_user_email );		$content = apply_filters( 'new_user_email_content', __( "Dear user,You recently requested to have the email address on your account changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL###" ), $new_user_email );		$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'profile.php?newuseremail='.$hash ) ), $content );		$content = str_replace( '###EMAIL###', $_POST['email'], $content);		$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );		$content = str_replace( '###SITEURL###', network_home_url(), $content );		wp_mail( $_POST['email'], sprintf( __( '[%s] New Email Address' ), get_option( 'blogname' ) ), $content );		$_POST['email'] = $current_user->user_email;	}}add_action( 'personal_options_update', 'send_confirmation_on_profile_email' );function new_user_email_admin_notice() {	global $current_user;	if ( strpos( $_SERVER['PHP_SELF'], 'profile.php' ) && isset( $_GET['updated'] ) && $email = get_option( $current_user->ID . '_new_email' ) )		echo "<div class='update-nag'>" . sprintf( __( "Your email address has not been updated yet. Please check your inbox at %s for a confirmation email." ), $email['newemail'] ) . "</div>";}add_action( 'admin_notices', 'new_user_email_admin_notice' );function get_site_allowed_themes() {	$themes = get_themes();	$allowed_themes = get_site_option( 'allowedthemes' );	if ( !is_array( $allowed_themes ) || empty( $allowed_themes ) ) {		$allowed_themes = get_site_option( 'allowed_themes' ); // convert old allowed_themes format		if ( !is_array( $allowed_themes ) ) {			$allowed_themes = array();		} else {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $allowed_themes[ $key ] ) == true ) {					$allowedthemes[ $theme_key ] = 1;				}			}			$allowed_themes = $allowedthemes;		}	}	return $allowed_themes;}/** * Determines if there is any upload space left in the current blog's quota. * * @since 3.0.0 * @return bool True if space is available, false otherwise. */function is_upload_space_available() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	if ( !( $space_allowed = get_upload_space_available() ) )		return false;	return true;}/* * @since 3.0.0 * * @return int of upload size limit in bytes */function upload_size_limit_filter( $size ) {	$fileupload_maxk = 1024 * get_site_option( 'fileupload_maxk', 1500 );	return min( $size, $fileupload_maxk, get_upload_space_available() );}/** * Determines if there is any upload space left in the current blog's quota. * * @return int of upload space available in bytes */function get_upload_space_available() {	$space_allowed = get_space_allowed() * 1024 * 1024;	if ( get_site_option( 'upload_space_check_disabled' ) )		return $space_allowed;	$dir_name = trailingslashit( BLOGUPLOADDIR );	if ( !( is_dir( $dir_name) && is_readable( $dir_name ) ) )		return $space_allowed;  	$dir = dir( $dir_name );   	$size = 0;	while ( $file = $dir->read() ) {		if ( $file != '.' && $file != '..' ) {			if ( is_dir( $dir_name . $file) ) {				$size += get_dirsize( $dir_name . $file );			} else {				$size += filesize( $dir_name . $file );			}		}	}	$dir->close();	if ( ( $space_allowed - $size ) <= 0 )		return 0;	return $space_allowed - $size;}/** * Returns the upload quota for the current blog. * * @return int Quota */function get_space_allowed() {	$space_allowed = get_option( 'blog_upload_space' );	if ( $space_allowed == false )		$space_allowed = get_site_option( 'blog_upload_space' );	if ( empty( $space_allowed ) || !is_numeric( $space_allowed ) )		$space_allowed = 50;	return $space_allowed;}function display_space_usage() {	$space = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	$percentused = ( $used / $space ) * 100;	if ( $space > 1000 ) {		$space = number_format( $space / 1024 );		/* translators: Gigabytes */		$space .= __( 'GB' );	} else {		/* translators: Megabytes */		$space .= __( 'MB' );	}	?>	<strong><?php printf( __( 'Used: %1s%% of %2s' ), number_format( $percentused ), $space ); ?></strong>	<?php}// Display File upload quota on dashboardfunction dashboard_quota() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$quota = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	if ( $used > $quota )		$percentused = '100';	else		$percentused = ( $used / $quota ) * 100;	$used_color = ( $percentused < 70 ) ? ( ( $percentused >= 40 ) ? 'waiting' : 'approved' ) : 'spam';	$used = round( $used, 2 );	$percentused = number_format( $percentused );	?>	<p class="sub musub"><?php _e( 'Storage Space' ); ?></p>	<div class="table table_content musubtable">	<table>		<tr class="first">			<td class="first b b-posts"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB</a>' ), esc_url( admin_url( 'upload.php' ) ), $quota ); ?></td>			<td class="t posts"><?php _e( 'Space Allowed' ); ?></td>		</tr>	</table>	</div>	<div class="table table_discussion musubtable">	<table>		<tr class="first">			<td class="b b-comments"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB (%3$s%%)</a>' ), esc_url( admin_url( 'upload.php' ) ), $used, $percentused ); ?></td>			<td class="last t comments <?php echo $used_color;?>"><?php _e( 'Space Used' );?></td>		</tr>	</table>	</div>	<br class="clear" />	<?php}if ( current_user_can( 'edit_posts' ) )	add_action( 'activity_box_end', 'dashboard_quota' );// Edit blog upload space setting on Edit Blog pagefunction upload_space_setting( $id ) {	$quota = get_blog_option( $id, 'blog_upload_space' );	if ( !$quota )		$quota = '';	?>	<tr>		<th><?php _e( 'Site Upload Space Quota '); ?></th>		<td><input type="text" size="3" name="option[blog_upload_space]" value="<?php echo $quota; ?>" /> <?php _e( 'MB (Leave blank for network default)' ); ?></td>	</tr>	<?php}add_action( 'wpmueditblogaction', 'upload_space_setting' );function update_user_status( $id, $pref, $value, $refresh = 1 ) {	global $wpdb;	$wpdb->update( $wpdb->users, array( $pref => $value ), array( 'ID' => $id ) );	if ( $refresh == 1 )		refresh_user_details( $id );	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( 'make_spam_user', $id );		else			do_action( 'make_ham_user', $id );	}	return $value;}function refresh_user_details( $id ) {	$id = (int) $id;	if ( !$user = get_userdata( $id ) )		return false;	clean_user_cache( $id );	return $id;}function format_code_lang( $code = '' ) {	$code = strtolower( substr( $code, 0, 2 ) );	$lang_codes = array(		'aa' => 'Afar', 'ab' => 'Abkhazian', 'af' => 'Afrikaans', 'ak' => 'Akan', 'sq' => 'Albanian', 'am' => 'Amharic', 'ar' => 'Arabic', 'an' => 'Aragonese', 'hy' => 'Armenian', 'as' => 'Assamese', 'av' => 'Avaric', 'ae' => 'Avestan', 'ay' => 'Aymara', 'az' => 'Azerbaijani', 'ba' => 'Bashkir', 'bm' => 'Bambara', 'eu' => 'Basque', 'be' => 'Belarusian', 'bn' => 'Bengali',		'bh' => 'Bihari', 'bi' => 'Bislama', 'bs' => 'Bosnian', 'br' => 'Breton', 'bg' => 'Bulgarian', 'my' => 'Burmese', 'ca' => 'Catalan; Valencian', 'ch' => 'Chamorro', 'ce' => 'Chechen', 'zh' => 'Chinese', 'cu' => 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic', 'cv' => 'Chuvash', 'kw' => 'Cornish', 'co' => 'Corsican', 'cr' => 'Cree',		'cs' => 'Czech', 'da' => 'Danish', 'dv' => 'Divehi; Dhivehi; Maldivian', 'nl' => 'Dutch; Flemish', 'dz' => 'Dzongkha', 'en' => 'English', 'eo' => 'Esperanto', 'et' => 'Estonian', 'ee' => 'Ewe', 'fo' => 'Faroese', 'fj' => 'Fijjian', 'fi' => 'Finnish', 'fr' => 'French', 'fy' => 'Western Frisian', 'ff' => 'Fulah', 'ka' => 'Georgian', 'de' => 'German', 'gd' => 'Gaelic; Scottish Gaelic',		'ga' => 'Irish', 'gl' => 'Galician', 'gv' => 'Manx', 'el' => 'Greek, Modern', 'gn' => 'Guarani', 'gu' => 'Gujarati', 'ht' => 'Haitian; Haitian Creole', 'ha' => 'Hausa', 'he' => 'Hebrew', 'hz' => 'Herero', 'hi' => 'Hindi', 'ho' => 'Hiri Motu', 'hu' => 'Hungarian', 'ig' => 'Igbo', 'is' => 'Icelandic', 'io' => 'Ido', 'ii' => 'Sichuan Yi', 'iu' => 'Inuktitut', 'ie' => 'Interlingue',		'ia' => 'Interlingua (International Auxiliary Language Association)', 'id' => 'Indonesian', 'ik' => 'Inupiaq', 'it' => 'Italian', 'jv' => 'Javanese', 'ja' => 'Japanese', 'kl' => 'Kalaallisut; Greenlandic', 'kn' => 'Kannada', 'ks' => 'Kashmiri', 'kr' => 'Kanuri', 'kk' => 'Kazakh', 'km' => 'Central Khmer', 'ki' => 'Kikuyu; Gikuyu', 'rw' => 'Kinyarwanda', 'ky' => 'Kirghiz; Kyrgyz',		'kv' => 'Komi', 'kg' => 'Kongo', 'ko' => 'Korean', 'kj' => 'Kuanyama; Kwanyama', 'ku' => 'Kurdish', 'lo' => 'Lao', 'la' => 'Latin', 'lv' => 'Latvian', 'li' => 'Limburgan; Limburger; Limburgish', 'ln' => 'Lingala', 'lt' => 'Lithuanian', 'lb' => 'Luxembourgish; Letzeburgesch', 'lu' => 'Luba-Katanga', 'lg' => 'Ganda', 'mk' => 'Macedonian', 'mh' => 'Marshallese', 'ml' => 'Malayalam',		'mi' => 'Maori', 'mr' => 'Marathi', 'ms' => 'Malay', 'mg' => 'Malagasy', 'mt' => 'Maltese', 'mo' => 'Moldavian', 'mn' => 'Mongolian', 'na' => 'Nauru', 'nv' => 'Navajo; Navaho', 'nr' => 'Ndebele, South; South Ndebele', 'nd' => 'Ndebele, North; North Ndebele', 'ng' => 'Ndonga', 'ne' => 'Nepali', 'nn' => 'Norwegian Nynorsk; Nynorsk, Norwegian', 'nb' => 'Bokml, Norwegian, Norwegian Bokml',		'no' => 'Norwegian', 'ny' => 'Chichewa; Chewa; Nyanja', 'oc' => 'Occitan, Provenal', 'oj' => 'Ojibwa', 'or' => 'Oriya', 'om' => 'Oromo', 'os' => 'Ossetian; Ossetic', 'pa' => 'Panjabi; Punjabi', 'fa' => 'Persian', 'pi' => 'Pali', 'pl' => 'Polish', 'pt' => 'Portuguese', 'ps' => 'Pushto', 'qu' => 'Quechua', 'rm' => 'Romansh', 'ro' => 'Romanian', 'rn' => 'Rundi', 'ru' => 'Russian',		'sg' => 'Sango', 'sa' => 'Sanskrit', 'sr' => 'Serbian', 'hr' => 'Croatian', 'si' => 'Sinhala; Sinhalese', 'sk' => 'Slovak', 'sl' => 'Slovenian', 'se' => 'Northern Sami', 'sm' => 'Samoan', 'sn' => 'Shona', 'sd' => 'Sindhi', 'so' => 'Somali', 'st' => 'Sotho, Southern', 'es' => 'Spanish; Castilian', 'sc' => 'Sardinian', 'ss' => 'Swati', 'su' => 'Sundanese', 'sw' => 'Swahili',		'sv' => 'Swedish', 'ty' => 'Tahitian', 'ta' => 'Tamil', 'tt' => 'Tatar', 'te' => 'Telugu', 'tg' => 'Tajik', 'tl' => 'Tagalog', 'th' => 'Thai', 'bo' => 'Tibetan', 'ti' => 'Tigrinya', 'to' => 'Tonga (Tonga Islands)', 'tn' => 'Tswana', 'ts' => 'Tsonga', 'tk' => 'Turkmen', 'tr' => 'Turkish', 'tw' => 'Twi', 'ug' => 'Uighur; Uyghur', 'uk' => 'Ukrainian', 'ur' => 'Urdu', 'uz' => 'Uzbek',		've' => 'Venda', 'vi' => 'Vietnamese', 'vo' => 'Volapk', 'cy' => 'Welsh','wa' => 'Walloon','wo' => 'Wolof', 'xh' => 'Xhosa', 'yi' => 'Yiddish', 'yo' => 'Yoruba', 'za' => 'Zhuang; Chuang', 'zu' => 'Zulu' );	$lang_codes = apply_filters( 'lang_codes', $lang_codes, $code );	return strtr( $code, $lang_codes );}function sync_category_tag_slugs( $term, $taxonomy ) {	if ( global_terms_enabled() && ( $taxonomy == 'category' || $taxonomy == 'post_tag' ) ) {		if ( is_object( $term ) ) {			$term->slug = sanitize_title( $term->name );		} else {			$term['slug'] = sanitize_title( $term['name'] );		}	}	return $term;}add_filter( 'get_term', 'sync_category_tag_slugs', 10, 2 );function redirect_user_to_blog() {	global $current_user;	$c = 0;	if ( isset( $_GET['c'] ) )		$c = (int) $_GET['c'];	if ( $c >= 5 ) {		wp_die( __( "You don&#8217;t have permission to view this site. Please contact the system administrator." ) );	}	$c ++;	$blog = get_active_blog_for_user( $current_user->ID );	$dashboard_blog = get_dashboard_blog();	if ( is_object( $blog ) ) {		wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) ); // redirect and count to 5, "just in case"		exit;	}	/*	   If the user is a member of only 1 blog and the user's primary_blog isn't set to that blog,	   then update the primary_blog record to match the user's blog	 */	$blogs = get_blogs_of_user( $current_user->ID );	if ( !empty( $blogs ) ) {		foreach( $blogs as $blogid => $blog ) {			if ( $blogid != $dashboard_blog->blog_id && get_user_meta( $current_user->ID , 'primary_blog', true ) == $dashboard_blog->blog_id ) {				update_user_meta( $current_user->ID, 'primary_blog', $blogid );				continue;			}		}		$blog = get_blog_details( get_user_meta( $current_user->ID, 'primary_blog', true ) );			wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) );		exit;	}	wp_die( __( 'You do not have sufficient permissions to access this page.' ) );}add_action( 'admin_page_access_denied', 'redirect_user_to_blog', 99 );function check_import_new_users( $permission ) {	if ( !is_super_admin() )		return false;	return true;}add_filter( 'import_allow_create_users', 'check_import_new_users' );// See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.function mu_dropdown_languages( $lang_files = array(), $current = '' ) {	$flag = false;	$output = array();	foreach ( (array) $lang_files as $val ) {		$code_lang = basename( $val, '.mo' );		if ( $code_lang == 'en_US' ) { // American English			$flag = true;			$ae = __( 'American English' );			$output[$ae] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $ae . '</option>';		} elseif ( $code_lang == 'en_GB' ) { // British English			$flag = true;			$be = __( 'British English' );			$output[$be] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $be . '</option>';		} else {			$translated = format_code_lang( $code_lang );			$output[$translated] =  '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . esc_html ( $translated ) . '</option>';		}	}	if ( $flag === false ) // WordPress english		$output[] = '<option value=""' . selected( $current, '' ) . '>' . __( 'English' ) . "</option>";	// Order by name	uksort( $output, 'strnatcasecmp' );	$output = apply_filters( 'mu_dropdown_languages', $output, $lang_files, $current );	echo implode( "\n\t", $output );}/* Warn the admin if SECRET SALT information is missing from wp-config.php */function secret_salt_warning() {	if ( !is_super_admin() )		return;	$secret_keys = array( 'AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT' );	$out = '';	foreach( $secret_keys as $key ) {		if ( ! defined( $key ) )			$out .= "define( '$key', '" . esc_html( wp_generate_password( 64, true, true ) ) . "' );<br />";	}	if ( $out != '' ) {		$msg  = __( 'Warning! WordPress encrypts user cookies, but you must add the following lines to <strong>wp-config.php</strong> for it to be more secure.' );		$msg .= '<br/>' . __( "Before the line <code>/* That's all, stop editing! Happy blogging. */</code> please add this code:" );		$msg .= "<br/><br/><code>$out</code>";		echo "<div class='update-nag'>$msg</div>";	}}add_action( 'admin_notices', 'secret_salt_warning' );function admin_notice_feed() {	global $current_user, $current_screen;	if ( $current_screen->id != 'dashboard' )		return;	if ( !empty( $_GET['feed_dismiss'] ) ) {		update_user_option( $current_user->id, 'admin_feed_dismiss', $_GET['feed_dismiss'], true );		return;	}	$url = get_site_option( 'admin_notice_feed' );	if ( empty( $url ) )		return;	$rss = fetch_feed( $url );	if ( ! is_wp_error( $rss ) && $item = $rss->get_item() ) {		$title = $item->get_title();		if ( md5( $title ) == get_user_option( 'admin_feed_dismiss' ) )			return;		$msg = "<h3>" . esc_html( $title ) . "</h3>\n";		$content = $item->get_description();		$content = $content ? wp_html_excerpt( $content, 200 ) . ' &hellip; ' : '';		$link = esc_url( strip_tags( $item->get_link() ) );		$msg .= "<p>" . $content . "<a href='$link'>" . __( 'Read More' ) . "</a> <a href='index.php?feed_dismiss=" . md5( $title ) . "'>" . __( 'Dismiss' ) . "</a></p>";		echo "<div class='updated'>$msg</div>";	} elseif ( is_super_admin() ) {		printf( '<div class="update-nag">' . __( 'Your feed at %s is empty.' ) . '</div>', esc_html( $url ) );	}}add_action( 'admin_notices', 'admin_notice_feed' );function site_admin_notice() {	global $current_user, $wp_db_version;	if ( !is_super_admin() )		return false;	if ( get_site_option( 'wpmu_upgrade_site' ) != $wp_db_version )		echo "<div class='update-nag'>" . sprintf( __( 'Thank you for Updating! Please visit the <a href="%s">Update Network</a> page to update all your sites.' ), esc_url( admin_url( 'ms-upgrade-network.php' ) ) ) . "</div>";}add_action( 'admin_notices', 'site_admin_notice' );function avoid_blog_page_permalink_collision( $data, $postarr ) {	if ( is_subdomain_install() )		return $data;	if ( $data['post_type'] != 'page' )		return $data;	if ( !isset( $data['post_name'] ) || $data['post_name'] == '' )		return $data;	if ( !is_main_site() )		return $data;	$post_name = $data['post_name'];	$c = 0;	while( $c < 10 && get_id_from_blogname( $post_name ) ) {		$post_name .= mt_rand( 1, 10 );		$c ++;	}	if ( $post_name != $data['post_name'] ) {		$data['post_name'] = $post_name;	}	return $data;}add_filter( 'wp_insert_post_data', 'avoid_blog_page_permalink_collision', 10, 2 );function choose_primary_blog() {	global $current_user;	?>	<table class="form-table">	<tr>	<?php /* translators: My sites label */ ?>		<th scope="row"><?php _e( 'Primary Site' ); ?></th>		<td>		<?php		$all_blogs = get_blogs_of_user( $current_user->ID );		$primary_blog = get_user_meta( $current_user->ID, 'primary_blog', true );		if ( count( $all_blogs ) > 1 ) {			$found = false;			?>			<select name="primary_blog">				<?php foreach( (array) $all_blogs as $blog ) {					if ( $primary_blog == $blog->userblog_id )						$found = true;					?><option value="<?php echo $blog->userblog_id ?>"<?php selected( $primary_blog,  $blog->userblog_id ); ?>><?php echo esc_url( get_home_url( $blog->userblog_id ) ) ?></option><?php				} ?>			</select>			<?php			if ( !$found ) {				$blog = array_shift( $all_blogs );				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );			}		} elseif ( count( $all_blogs ) == 1 ) {			$blog = array_shift( $all_blogs );			echo $blog->domain;			if ( $primary_blog != $blog->userblog_id ) // Set the primary blog again if it's out of sync with blog list.				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );		} else {			echo "N/A";		}		?>		</td>	</tr>	<?php if ( in_array( get_site_option( 'registration' ), array( 'all', 'blog' ) ) ) : ?>		<tr>			<th scope="row" colspan="2" class="th-full">				<a href="<?php echo apply_filters( 'wp_signup_location', network_home_url( 'wp-signup.php' ) ); ?>"><?php _e( 'Create a New Site' ); ?></a>			</th>		</tr>	<?php endif; ?>	</table>	<?php}function show_post_thumbnail_warning() {	if ( ! is_super_admin() )		return;	$mu_media_buttons = get_site_option( 'mu_media_buttons', array() );	if ( empty($mu_media_buttons['image']) && current_theme_supports( 'post-thumbnails' ) ) {		echo "<div class='update-nag'>" . sprintf( __( "Warning! The current theme supports Featured Images. You must enable image uploads on <a href='%s'>the options page</a> for it to work." ), esc_url( admin_url( 'ms-options.php' ) ) ) . "</div>";	}}add_action( 'admin_notices', 'show_post_thumbnail_warning' );function ms_deprecated_blogs_file() {	if ( ! is_super_admin() )		return;	if ( ! file_exists( WP_CONTENT_DIR . '/blogs.php' ) )		return;	echo '<div class="update-nag">' . sprintf( __( 'The <code>%1$s</code> file is deprecated. Please remove it and update your server rewrite rules to use <code>%2$s</code> instead.' ), 'wp-content/blogs.php', 'wp-includes/ms-files.php' ) . '</div>';}add_action( 'admin_notices', 'ms_deprecated_blogs_file' );/** * Outputs the notice message for multisite regarding activation of plugin page. * * @since 3.0.0 * @return none */function _admin_notice_multisite_activate_plugins_page() {	$message = sprintf( __( 'The plugins page is not visible to normal users. It must be activated first. %s' ), '<a href="' . esc_url( admin_url( 'ms-options.php#menu' ) ) . '">' . __( 'Activate' ) . '</a>' );	echo "<div class='error'><p>$message</p></div>";}/** * Grants super admin privileges. * * @since 3.0.0 * @param $user_id */function grant_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'grant_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( ! in_array( $user->user_login, $super_admins ) ) {		$super_admins[] = $user->user_login;		update_site_option( 'site_admins' , $super_admins );		do_action( 'granted_super_admin', $user_id );		return true;	}	return false;}/** * Revokes super admin privileges. * * @since 3.0.0 * @param $user_id */function revoke_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'revoke_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( $user->user_email != get_site_option( 'admin_email' ) ) {		if ( false !== ( $key = array_search( $user->user_login, $super_admins ) ) ) {			unset( $super_admins[$key] );			update_site_option( 'site_admins', $super_admins );			do_action( 'revoked_super_admin', $user_id );			return true;		}	}	return false;}?>
<?php/** * WordPress Post Template Functions. * * Gets content for the current post in the loop. * * @package WordPress * @subpackage Template *//** * Display the ID of the current item in the WordPress Loop. * * @since 0.71 * @uses $id */function the_ID() {	global $id;	echo $id;}/** * Retrieve the ID of the current item in the WordPress Loop. * * @since 2.1.0 * @uses $id * * @return unknown */function get_the_ID() {	global $id;	return $id;}/** * Display or retrieve the current post title with optional content. * * @since 0.71 * * @param string $before Optional. Content to prepend to the title. * @param string $after Optional. Content to append to the title. * @param bool $echo Optional, default to true.Whether to display or return. * @return null|string Null on no title. String if $echo parameter is false. */function the_title($before = '', $after = '', $echo = true) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$title = $before . $title . $after;	if ( $echo )		echo $title;	else		return $title;}/** * Sanitize the current title when retrieving or displaying. * * Works like {@link the_title()}, except the parameters can be in a string or * an array. See the function for what can be override in the $args parameter. * * The title before it is displayed will have the tags stripped and {@link * esc_attr()} before it is passed to the user or displayed. The default * as with {@link the_title()}, is to display the title. * * @since 2.3.0 * * @param string|array $args Optional. Override the defaults. * @return string|null Null on failure or display. String when echo is false. */function the_title_attribute( $args = '' ) {	$title = get_the_title();	if ( strlen($title) == 0 )		return;	$defaults = array('before' => '', 'after' =>  '', 'echo' => true);	$r = wp_parse_args($args, $defaults);	extract( $r, EXTR_SKIP );	$title = $before . $title . $after;	$title = esc_attr(strip_tags($title));	if ( $echo )		echo $title;	else		return $title;}/** * Retrieve post title. * * If the post is protected and the visitor is not an admin, then "Protected" * will be displayed before the post title. If the post is private, then * "Private" will be located before the post title. * * @since 0.71 * * @param int $id Optional. Post ID. * @return string */function get_the_title( $id = 0 ) {	$post = &get_post($id);	$title = isset($post->post_title) ? $post->post_title : '';	$id = isset($post->ID) ? $post->ID : (int) $id;	if ( !is_admin() ) {		if ( !empty($post->post_password) ) {			$protected_title_format = apply_filters('protected_title_format', __('Protected: %s'));			$title = sprintf($protected_title_format, $title);		} else if ( isset($post->post_status) && 'private' == $post->post_status ) {			$private_title_format = apply_filters('private_title_format', __('Private: %s'));			$title = sprintf($private_title_format, $title);		}	}	return apply_filters( 'the_title', $title, $id );}/** * Display the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * Url is escaped to make it xml safe * * @since 1.5.0 * * @param int $id Optional. Post ID. */function the_guid( $id = 0 ) {	echo esc_url( get_the_guid( $id ) );}/** * Retrieve the Post Global Unique Identifier (guid). * * The guid will appear to be a link, but should not be used as an link to the * post. The reason you should not use it as a link, is because of moving the * blog across domains. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @return string */function get_the_guid( $id = 0 ) {	$post = &get_post($id);	return apply_filters('get_the_guid', $post->guid);}/** * Display the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. */function the_content($more_link_text = null, $stripteaser = 0) {	$content = get_the_content($more_link_text, $stripteaser);	$content = apply_filters('the_content', $content);	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Retrieve the post content. * * @since 0.71 * * @param string $more_link_text Optional. Content for when there is more text. * @param string $stripteaser Optional. Teaser content before the more text. * @return string */function get_the_content($more_link_text = null, $stripteaser = 0) {	global $id, $post, $more, $page, $pages, $multipage, $preview;	if ( null === $more_link_text )		$more_link_text = __( '(more...)' );	$output = '';	$hasTeaser = false;	// If post password required and it doesn't match the cookie.	if ( post_password_required($post) ) {		$output = get_the_password_form();		return $output;	}	if ( $page > count($pages) ) // if the requested page doesn't exist		$page = count($pages); // give them the highest numbered page that DOES exist	$content = $pages[$page-1];	if ( preg_match('/<!--more(.*?)?-->/', $content, $matches) ) {		$content = explode($matches[0], $content, 2);		if ( !empty($matches[1]) && !empty($more_link_text) )			$more_link_text = strip_tags(wp_kses_no_null(trim($matches[1])));		$hasTeaser = true;	} else {		$content = array($content);	}	if ( (false !== strpos($post->post_content, '<!--noteaser-->') && ((!$multipage) || ($page==1))) )		$stripteaser = 1;	$teaser = $content[0];	if ( ($more) && ($stripteaser) && ($hasTeaser) )		$teaser = '';	$output .= $teaser;	if ( count($content) > 1 ) {		if ( $more ) {			$output .= '<span id="more-' . $id . '"></span>' . $content[1];		} else {			if ( ! empty($more_link_text) )				$output .= apply_filters( 'the_content_more_link', ' <a href="' . get_permalink() . "#more-$id\" class=\"more-link\">$more_link_text</a>", $more_link_text );			$output = force_balance_tags($output);		}	}	if ( $preview ) // preview fix for javascript bug with foreign languages		$output =	preg_replace_callback('/\%u([0-9A-F]{4})/', create_function('$match', 'return "&#" . base_convert($match[1], 16, 10) . ";";'), $output);	return $output;}/** * Display the post excerpt. * * @since 0.71 * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt. */function the_excerpt() {	echo apply_filters('the_excerpt', get_the_excerpt());}/** * Retrieve the post excerpt. * * @since 0.71 * * @param mixed $deprecated Not used. * @return string */function get_the_excerpt( $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	global $post;	$output = $post->post_excerpt;	if ( post_password_required($post) ) {		$output = __('There is no excerpt because this is a protected post.');		return $output;	}	return apply_filters('get_the_excerpt', $output);}/** * Whether post has excerpt. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @return bool */function has_excerpt( $id = 0 ) {	$post = &get_post( $id );	return ( !empty( $post->post_excerpt ) );}/** * Display the classes for the post div. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. */function post_class( $class = '', $post_id = null ) {	// Separates classes with a single space, collates classes for post DIV	echo 'class="' . join( ' ', get_post_class( $class, $post_id ) ) . '"';}/** * Retrieve the classes for the post div as an array. * * The class names are add are many. If the post is a sticky, then the 'sticky' * class name. The class 'hentry' is always added to each post. For each * category, the class will be added with 'category-' with category slug is * added. The tags are the same way as the categories with 'tag-' before the tag * slug. All classes are passed through the filter, 'post_class' with the list * of classes, followed by $class parameter value, with the post ID as the last * parameter. * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list. * @param int $post_id An optional post ID. * @return array Array of classes. */function get_post_class( $class = '', $post_id = null ) {	$post = get_post($post_id);	$classes = array();	if ( empty($post) )		return $classes;	$classes[] = 'post-' . $post->ID;	$classes[] = $post->post_type;	$classes[] = 'type-' . $post->post_type;	// sticky for Sticky Posts	if ( is_sticky($post->ID) && is_home() && !is_paged() )		$classes[] = 'sticky';	// hentry for hAtom compliace	$classes[] = 'hentry';	// Categories	foreach ( (array) get_the_category($post->ID) as $cat ) {		if ( empty($cat->slug ) )			continue;		$classes[] = 'category-' . sanitize_html_class($cat->slug, $cat->cat_ID);	}	// Tags	foreach ( (array) get_the_tags($post->ID) as $tag ) {		if ( empty($tag->slug ) )			continue;		$classes[] = 'tag-' . sanitize_html_class($tag->slug, $tag->term_id);	}	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('post_class', $classes, $class, $post->ID);}/** * Display the classes for the body element. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. */function body_class( $class = '' ) {	// Separates classes with a single space, collates classes for body element	echo 'class="' . join( ' ', get_body_class( $class ) ) . '"';}/** * Retrieve the classes for the body element as an array. * * @since 2.8.0 * * @param string|array $class One or more classes to add to the class list. * @return array Array of classes. */function get_body_class( $class = '' ) {	global $wp_query, $wpdb;	$classes = array();	if ( is_rtl() )		$classes[] = 'rtl';	if ( is_front_page() )		$classes[] = 'home';	if ( is_home() )		$classes[] = 'blog';	if ( is_archive() )		$classes[] = 'archive';	if ( is_date() )		$classes[] = 'date';	if ( is_search() )		$classes[] = 'search';	if ( is_paged() )		$classes[] = 'paged';	if ( is_attachment() )		$classes[] = 'attachment';	if ( is_404() )		$classes[] = 'error404';	if ( is_single() ) {		$post_id = $wp_query->get_queried_object_id();		$post = $wp_query->get_queried_object();		$classes[] = 'single';		$classes[] = 'single-' . sanitize_html_class($post->post_type, $post_id);		$classes[] = 'postid-' . $post_id;		if ( is_attachment() ) {			$mime_type = get_post_mime_type($post_id);			$mime_prefix = array( 'application/', 'image/', 'text/', 'audio/', 'video/', 'music/' );			$classes[] = 'attachmentid-' . $post_id;			$classes[] = 'attachment-' . str_replace( $mime_prefix, '', $mime_type );		}	} elseif ( is_archive() ) {		if ( is_author() ) {			$author = $wp_query->get_queried_object();			$classes[] = 'author';			$classes[] = 'author-' . sanitize_html_class( $author->user_nicename , $author->ID );		} elseif ( is_category() ) {			$cat = $wp_query->get_queried_object();			$classes[] = 'category';			$classes[] = 'category-' . sanitize_html_class( $cat->slug, $cat->cat_ID );		} elseif ( is_tag() ) {			$tags = $wp_query->get_queried_object();			$classes[] = 'tag';			$classes[] = 'tag-' . sanitize_html_class( $tags->slug, $tags->term_id );		}	} elseif ( is_page() ) {		$classes[] = 'page';		$page_id = $wp_query->get_queried_object_id();		$post = get_page($page_id);		$classes[] = 'page-id-' . $page_id;		if ( $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' AND post_status = 'publish' LIMIT 1", $page_id) ) )			$classes[] = 'page-parent';		if ( $post->post_parent ) {			$classes[] = 'page-child';			$classes[] = 'parent-pageid-' . $post->post_parent;		}		if ( is_page_template() ) {			$classes[] = 'page-template';			$classes[] = 'page-template-' . sanitize_html_class( str_replace( '.', '-', get_post_meta( $page_id, '_wp_page_template', true ) ), '' );		}	} elseif ( is_search() ) {		if ( !empty( $wp_query->posts ) )			$classes[] = 'search-results';		else			$classes[] = 'search-no-results';	}	if ( is_user_logged_in() )		$classes[] = 'logged-in';	$page = $wp_query->get( 'page' );	if ( !$page || $page < 2)		$page = $wp_query->get( 'paged' );	if ( $page && $page > 1 ) {		$classes[] = 'paged-' . $page;		if ( is_single() )			$classes[] = 'single-paged-' . $page;		elseif ( is_page() )			$classes[] = 'page-paged-' . $page;		elseif ( is_category() )			$classes[] = 'category-paged-' . $page;		elseif ( is_tag() )			$classes[] = 'tag-paged-' . $page;		elseif ( is_date() )			$classes[] = 'date-paged-' . $page;		elseif ( is_author() )			$classes[] = 'author-paged-' . $page;		elseif ( is_search() )			$classes[] = 'search-paged-' . $page;	}	if ( !empty( $class ) ) {		if ( !is_array( $class ) )			$class = preg_split( '#\s+#', $class );		$classes = array_merge( $classes, $class );	}	$classes = array_map( 'esc_attr', $classes );	return apply_filters( 'body_class', $classes, $class );}/** * Whether post requires password and correct password has been provided. * * @since 2.7.0 * * @param int|object $post An optional post.  Global $post used if not provided. * @return bool false if a password is not required or the correct password cookie is present, true otherwise. */function post_password_required( $post = null ) {	$post = get_post($post);	if ( empty($post->post_password) )		return false;	if ( !isset($_COOKIE['wp-postpass_' . COOKIEHASH]) )		return true;	if ( $_COOKIE['wp-postpass_' . COOKIEHASH] != $post->post_password )		return true;	return false;}/** * Display "sticky" CSS class, if a post is sticky. * * @since 2.7.0 * * @param int $post_id An optional post ID. */function sticky_class( $post_id = null ) {	if ( !is_sticky($post_id) )		return;	echo " sticky";}/** * Page Template Functions for usage in Themes * * @package WordPress * @subpackage Template *//** * The formatted output of a list of pages. * * Displays page links for paginated posts (i.e. includes the <!--nextpage-->. * Quicktag one or more times). This tag must be within The Loop. * * The defaults for overwriting are: * 'next_or_number' - Default is 'number' (string). Indicates whether page *      numbers should be used. Valid values are number and next. * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page. *      of the bookmark. * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to *      previous page, if available. * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in *      the parameter string will be replaced with the page number, so Page % *      generates "Page 1", "Page 2", etc. Defaults to %, just the page number. * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to *      each bookmarks. * 'after' - Default is '</p>' (string). The html or text to append to each *      bookmarks. * 'link_before' - Default is '' (string). The html or text to prepend to each *      Pages link inside the <a> tag. Also prepended to the current item, which *      is not linked. * 'link_after' - Default is '' (string). The html or text to append to each *      Pages link inside the <a> tag. Also appended to the current item, which *      is not linked. * * @since 1.2.0 * @access private * * @param string|array $args Optional. Overwrite the defaults. * @return string Formatted output in HTML. */function wp_link_pages($args = '') {	$defaults = array(		'before' => '<p>' . __('Pages:'), 'after' => '</p>',		'link_before' => '', 'link_after' => '',		'next_or_number' => 'number', 'nextpagelink' => __('Next page'),		'previouspagelink' => __('Previous page'), 'pagelink' => '%',		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	$r = apply_filters( 'wp_link_pages_args', $r );	extract( $r, EXTR_SKIP );	global $post, $page, $numpages, $multipage, $more, $pagenow;	$output = '';	if ( $multipage ) {		if ( 'number' == $next_or_number ) {			$output .= $before;			for ( $i = 1; $i < ($numpages+1); $i = $i + 1 ) {				$j = str_replace('%',$i,$pagelink);				$output .= ' ';				if ( ($i != $page) || ((!$more) && ($page==1)) ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}				}				$output .= $link_before;				$output .= $j;				$output .= $link_after;				if ( ($i != $page) || ((!$more) && ($page==1)) )					$output .= '</a>';			}			$output .= $after;		} else {			if ( $more ) {				$output .= $before;				$i = $page - 1;				if ( $i && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $previouspagelink . $link_after . '</a>';				}				$i = $page + 1;				if ( $i <= $numpages && $more ) {					if ( 1 == $i ) {						$output .= '<a href="' . get_permalink() . '">';					} else {						if ( '' == get_option('permalink_structure') || in_array($post->post_status, array('draft', 'pending')) )							$output .= '<a href="' . add_query_arg('page', $i, get_permalink()) . '">';						elseif ( 'page' == get_option('show_on_front') && get_option('page_on_front') == $post->ID )							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit('page/' . $i, 'single_paged'). '">';						else							$output .= '<a href="' . trailingslashit(get_permalink()) . user_trailingslashit($i, 'single_paged') . '">';					}					$output .= $link_before. $nextpagelink . $link_after . '</a>';				}				$output .= $after;			}		}	}	if ( $echo )		echo $output;	return $output;}//// Post-meta: Custom per-post fields.///** * Retrieve post custom meta data field. * * @since 1.5.0 * * @param string $key Meta data key name. * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. */function post_custom( $key = '' ) {	$custom = get_post_custom();	if ( !isset( $custom[$key] ) )		return false;	elseif ( 1 == count($custom[$key]) )		return $custom[$key][0];	else		return $custom[$key];}/** * Display list of post custom fields. * * @internal This will probably change at some point... * @since 1.2.0 * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters. */function the_meta() {	if ( $keys = get_post_custom_keys() ) {		echo "<ul class='post-meta'>\n";		foreach ( (array) $keys as $key ) {			$keyt = trim($key);			if ( '_' == $keyt{0} )				continue;			$values = array_map('trim', get_post_custom_values($key));			$value = implode($values,', ');			echo apply_filters('the_meta_key', "<li><span class='post-meta-key'>$key:</span> $value</li>\n", $key, $value);		}		echo "</ul>\n";	}}//// Pages///** * Retrieve or display list of pages as a dropdown (select list). * * @since 2.1.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_dropdown_pages($args = '') {	$defaults = array(		'depth' => 0, 'child_of' => 0,		'selected' => 0, 'echo' => 1,		'name' => 'page_id', 'id' => '',		'show_option_none' => '', 'show_option_no_change' => '',		'option_none_value' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$pages = get_pages($r);	$output = '';	$name = esc_attr($name);	// Back-compat with old system where both id and name were based on $name argument	if ( empty($id) )		$id = $name;	if ( ! empty($pages) ) {		$output = "<select name=\"$name\" id=\"$id\">\n";		if ( $show_option_no_change )			$output .= "\t<option value=\"-1\">$show_option_no_change</option>";		if ( $show_option_none )			$output .= "\t<option value=\"" . esc_attr($option_none_value) . "\">$show_option_none</option>\n";		$output .= walk_page_dropdown_tree($pages, $depth, $r);		$output .= "</select>\n";	}	$output = apply_filters('wp_dropdown_pages', $output);	if ( $echo )		echo $output;	return $output;}/** * Retrieve or display list of pages in list (li) format. * * @since 1.5.0 * * @param array|string $args Optional. Override default arguments. * @return string HTML content, if not displaying. */function wp_list_pages($args = '') {	$defaults = array(		'depth' => 0, 'show_date' => '',		'date_format' => get_option('date_format'),		'child_of' => 0, 'exclude' => '',		'title_li' => __('Pages'), 'echo' => 1,		'authors' => '', 'sort_column' => 'menu_order, post_title',		'link_before' => '', 'link_after' => '', 'walker' => '',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$output = '';	$current_page = 0;	// sanitize, mostly to keep spaces out	$r['exclude'] = preg_replace('/[^0-9,]/', '', $r['exclude']);	// Allow plugins to filter an array of excluded pages (but don't put a nullstring into the array)	$exclude_array = ( $r['exclude'] ) ? explode(',', $r['exclude']) : array();	$r['exclude'] = implode( ',', apply_filters('wp_list_pages_excludes', $exclude_array) );	// Query pages.	$r['hierarchical'] = 0;	$pages = get_pages($r);	if ( !empty($pages) ) {		if ( $r['title_li'] )			$output .= '<li class="pagenav">' . $r['title_li'] . '<ul>';		global $wp_query;		if ( is_page() || is_attachment() || $wp_query->is_posts_page )			$current_page = $wp_query->get_queried_object_id();		$output .= walk_page_tree($pages, $r['depth'], $current_page, $r);		if ( $r['title_li'] )			$output .= '</ul></li>';	}	$output = apply_filters('wp_list_pages', $output, $r);	if ( $r['echo'] )		echo $output;	else		return $output;}/** * Display or retrieve list of pages with optional home link. * * The arguments are listed below and part of the arguments are for {@link * wp_list_pages()} function. Check that function for more info on those * arguments. * * <ul> * <li><strong>sort_column</strong> - How to sort the list of pages. Defaults * to page title. Use column for posts table.</li> * <li><strong>menu_class</strong> - Class to use for the div ID which contains * the page list. Defaults to 'menu'.</li> * <li><strong>echo</strong> - Whether to echo list or return it. Defaults to * echo.</li> * <li><strong>link_before</strong> - Text before show_home argument text.</li> * <li><strong>link_after</strong> - Text after show_home argument text.</li> * <li><strong>show_home</strong> - If you set this argument, then it will * display the link to the home page. The show_home argument really just needs * to be set to the value of the text of the link.</li> * </ul> * * @since 2.7.0 * * @param array|string $args */function wp_page_menu( $args = array() ) {	$defaults = array('sort_column' => 'menu_order, post_title', 'menu_class' => 'menu', 'echo' => true, 'link_before' => '', 'link_after' => '');	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_page_menu_args', $args );	$menu = '';	$list_args = $args;	// Show Home in the menu	if ( ! empty($args['show_home']) ) {		if ( true === $args['show_home'] || '1' === $args['show_home'] || 1 === $args['show_home'] )			$text = __('Home');		else			$text = $args['show_home'];		$class = '';		if ( is_front_page() && !is_paged() )			$class = 'class="current_page_item"';		$menu .= '<li ' . $class . '><a href="' . home_url( '/' ) . '" title="' . esc_attr($text) . '">' . $args['link_before'] . $text . $args['link_after'] . '</a></li>';		// If the front page is a page, add it to the exclude list		if (get_option('show_on_front') == 'page') {			if ( !empty( $list_args['exclude'] ) ) {				$list_args['exclude'] .= ',';			} else {				$list_args['exclude'] = '';			}			$list_args['exclude'] .= get_option('page_on_front');		}	}	$list_args['echo'] = false;	$list_args['title_li'] = '';	$menu .= str_replace( array( "\r", "\n", "\t" ), '', wp_list_pages($list_args) );	if ( $menu )		$menu = '<ul>' . $menu . '</ul>';	$menu = '<div class="' . esc_attr($args['menu_class']) . '">' . $menu . "</div>\n";	$menu = apply_filters( 'wp_page_menu', $menu, $args );	if ( $args['echo'] )		echo $menu;	else		return $menu;}//// Page helpers///** * Retrieve HTML list content for page list. * * @uses Walker_Page to create HTML list content. * @since 2.1.0 * @see Walker_Page::walk() for parameters and return description. */function walk_page_tree($pages, $depth, $current_page, $r) {	if ( empty($r['walker']) )		$walker = new Walker_Page;	else		$walker = $r['walker'];	$args = array($pages, $depth, $r, $current_page);	return call_user_func_array(array(&$walker, 'walk'), $args);}/** * Retrieve HTML dropdown (select) content for page list. * * @uses Walker_PageDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_PageDropdown::walk() for parameters and return description. */function walk_page_dropdown_tree() {	$args = func_get_args();	if ( empty($args[2]['walker']) ) // the user's options are the third parameter		$walker = new Walker_PageDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array(&$walker, 'walk'), $args);}//// Attachments///** * Display an attachment page link using an image or icon. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size. * @param bool $deprecated Deprecated. Not used. * @param bool $permalink Optional, default is false. Whether to include permalink. */function the_attachment_link( $id = 0, $fullsize = false, $deprecated = false, $permalink = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.5' );	if ( $fullsize )		echo wp_get_attachment_link($id, 'full', $permalink);	else		echo wp_get_attachment_link($id, 'thumbnail', $permalink);}/** * Retrieve an attachment page link using an image or icon, if possible. * * @since 2.5.0 * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function. * * @param int $id Optional. Post ID. * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @param bool $permalink Optional, default is false. Whether to add permalink to image. * @param bool $icon Optional, default is false. Whether to include icon. * @param string $text Optional, default is false. If string, then will be link text. * @return string HTML content. */function wp_get_attachment_link($id = 0, $size = 'thumbnail', $permalink = false, $icon = false, $text = false) {	$id = intval($id);	$_post = & get_post( $id );	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	if ( $text ) {		$link_text = esc_attr($text);	} elseif ( ( is_int($size) && $size != 0 ) or ( is_string($size) && $size != 'none' ) or $size != false ) {		$link_text = wp_get_attachment_image($id, $size, $icon);	} else {		$link_text = '';	}	if( trim($link_text) == '' )		$link_text = $_post->post_title;	return apply_filters( 'wp_get_attachment_link', "<a href='$url' title='$post_title'>$link_text</a>", $id, $size, $permalink, $icon, $text );}/** * Wrap attachment in <<p>> element before content. * * @since 2.0.0 * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content. * * @param string $content * @return string */function prepend_attachment($content) {	global $post;	if ( empty($post->post_type) || $post->post_type != 'attachment' )		return $content;	$p = '<p class="attachment">';	// show the medium sized image representation of the attachment if available, and link to the raw file	$p .= wp_get_attachment_link(0, 'medium', false);	$p .= '</p>';	$p = apply_filters('prepend_attachment', $p);	return "$p\n$content";}//// Misc///** * Retrieve protected post password form content. * * @since 1.0.0 * @uses apply_filters() Calls 'the_password_form' filter on output. * * @return string HTML content for password form for password protected post. */function get_the_password_form() {	global $post;	$label = 'pwbox-'.(empty($post->ID) ? rand() : $post->ID);	$output = '<form action="' . get_option('siteurl') . '/wp-pass.php" method="post">	<p>' . __("This post is password protected. To view it please enter your password below:") . '</p>	<p><label for="' . $label . '">' . __("Password:") . ' <input name="post_password" id="' . $label . '" type="password" size="20" /></label> <input type="submit" name="Submit" value="' . esc_attr__("Submit") . '" /></p>	</form>	';	return apply_filters('the_password_form', $output);}/** * Whether currently in a page template. * * This template tag allows you to determine if you are in a page template. * You can optionally provide a template name and then the check will be * specific to that template. * * @since 2.5.0 * @uses $wp_query * * @param string $template The specific template name if specific matching is required. * @return bool False on failure, true if success. */function is_page_template($template = '') {	if (!is_page()) {		return false;	}	global $wp_query;	$page = $wp_query->get_queried_object();	$custom_fields = get_post_custom_values('_wp_page_template',$page->ID);	$page_template = $custom_fields[0];	// We have no argument passed so just see if a page_template has been specified	if ( empty( $template ) ) {		if (!empty( $page_template ) ) {			return true;		}	} elseif ( $template == $page_template) {		return true;	}	return false;}/** * Retrieve formatted date timestamp of a revision (linked to that revisions's page). * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses date_i18n() * * @param int|object $revision Revision ID or revision object. * @param bool $link Optional, default is true. Link to revisions's page? * @return string i18n formatted datetimestamp or localized 'Current Revision'. */function wp_post_revision_title( $revision, $link = true ) {	if ( !$revision = get_post( $revision ) )		return $revision;	if ( !in_array( $revision->post_type, array( 'post', 'page', 'revision' ) ) )		return false;	/* translators: revision date format, see http://php.net/date */	$datef = _x( 'j F, Y @ G:i', 'revision date format');	/* translators: 1: date */	$autosavef = __( '%1$s [Autosave]' );	/* translators: 1: date */	$currentf  = __( '%1$s [Current Revision]' );	$date = date_i18n( $datef, strtotime( $revision->post_modified ) );	if ( $link && current_user_can( 'edit_post', $revision->ID ) && $link = get_edit_post_link( $revision->ID ) )		$date = "<a href='$link'>$date</a>";	if ( !wp_is_post_revision( $revision ) )		$date = sprintf( $currentf, $date );	elseif ( wp_is_post_autosave( $revision ) )		$date = sprintf( $autosavef, $date );	return $date;}/** * Display list of a post's revisions. * * Can output either a UL with edit links or a TABLE with diff interface, and * restore action links. * * Second argument controls parameters: *   (bool)   parent : include the parent (the "Current Revision") in the list. *   (string) format : 'list' or 'form-table'.  'list' outputs UL, 'form-table' *                     outputs TABLE with UI. *   (int)    right  : what revision is currently being viewed - used in *                     form-table format. *   (int)    left   : what revision is currently being diffed against right - *                     used in form-table format. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revisions() * @uses wp_post_revision_title() * @uses get_edit_post_link() * @uses get_the_author_meta() * * @todo split into two functions (list, form-table) ? * * @param int|object $post_id Post ID or post object. * @param string|array $args See description {@link wp_parse_args()}. * @return null */function wp_list_post_revisions( $post_id = 0, $args = null ) {	if ( !$post = get_post( $post_id ) )		return;	$defaults = array( 'parent' => false, 'right' => false, 'left' => false, 'format' => 'list', 'type' => 'all' );	extract( wp_parse_args( $args, $defaults ), EXTR_SKIP );	switch ( $type ) {		case 'autosave' :			if ( !$autosave = wp_get_post_autosave( $post->ID ) )				return;			$revisions = array( $autosave );			break;		case 'revision' : // just revisions - remove autosave later		case 'all' :		default :			if ( !$revisions = wp_get_post_revisions( $post->ID ) )				return;			break;	}	/* translators: post revision: 1: when, 2: author name */	$titlef = _x( '%1$s by %2$s', 'post revision' );	if ( $parent )		array_unshift( $revisions, $post );	$rows = '';	$class = false;	$can_edit_post = current_user_can( 'edit_post', $post->ID );	foreach ( $revisions as $revision ) {		if ( !current_user_can( 'read_post', $revision->ID ) )			continue;		if ( 'revision' === $type && wp_is_post_autosave( $revision ) )			continue;		$date = wp_post_revision_title( $revision );		$name = get_the_author_meta( 'display_name', $revision->post_author );		if ( 'form-table' == $format ) {			if ( $left )				$left_checked = $left == $revision->ID ? ' checked="checked"' : '';			else				$left_checked = $right_checked ? ' checked="checked"' : ''; // [sic] (the next one)			$right_checked = $right == $revision->ID ? ' checked="checked"' : '';			$class = $class ? '' : " class='alternate'";			if ( $post->ID != $revision->ID && $can_edit_post )				$actions = '<a href="' . wp_nonce_url( add_query_arg( array( 'revision' => $revision->ID, 'action' => 'restore' ) ), "restore-post_$post->ID|$revision->ID" ) . '">' . __( 'Restore' ) . '</a>';			else				$actions = '';			$rows .= "<tr$class>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='left' value='$revision->ID'$left_checked /></th>\n";			$rows .= "\t<th style='white-space: nowrap' scope='row'><input type='radio' name='right' value='$revision->ID'$right_checked /></th>\n";			$rows .= "\t<td>$date</td>\n";			$rows .= "\t<td>$name</td>\n";			$rows .= "\t<td class='action-links'>$actions</td>\n";			$rows .= "</tr>\n";		} else {			$title = sprintf( $titlef, $date, $name );			$rows .= "\t<li>$title</li>\n";		}	}	if ( 'form-table' == $format ) : ?><form action="revision.php" method="get"><div class="tablenav">	<div class="alignleft">		<input type="submit" class="button-secondary" value="<?php esc_attr_e( 'Compare Revisions' ); ?>" />		<input type="hidden" name="action" value="diff" />		<input type="hidden" name="post_type" value="<?php echo esc_attr($post->post_type); ?>" />	</div></div><br class="clear" /><table class="widefat post-revisions" cellspacing="0" id="post-revisions">	<col />	<col />	<col style="width: 33%" />	<col style="width: 33%" />	<col style="width: 33%" /><thead><tr>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Old', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'New', 'revisions column name' ); ?></th>	<th scope="col"><?php /* translators: column name in revisons */ _ex( 'Date Created', 'revisions column name' ); ?></th>	<th scope="col"><?php _e( 'Author' ); ?></th>	<th scope="col" class="action-links"><?php _e( 'Actions' ); ?></th></tr></thead><tbody><?php echo $rows; ?></tbody></table></form><?php	else :		echo "<ul class='post-revisions'>\n";		echo $rows;		echo "</ul>";	endif;}
<?php/** * WordPress Taxonomy Administration API. * * @package WordPress * @subpackage Administration *///// Category///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @return unknown */function category_exists($cat_name, $parent = 0) {	$id = term_exists($cat_name, 'category', $parent);	if ( is_array($id) )		$id = $id['term_id'];	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_category_to_edit( $id ) {	$category = get_category( $id, OBJECT, 'edit' );	return $category;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $cat_name * @param unknown_type $parent * @return unknown */function wp_create_category( $cat_name, $parent = 0 ) {	if ( $id = category_exists($cat_name, $parent) )		return $id;	return wp_insert_category( array('cat_name' => $cat_name, 'category_parent' => $parent) );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $categories * @param unknown_type $post_id * @return unknown */function wp_create_categories($categories, $post_id = '') {	$cat_ids = array ();	foreach ($categories as $category) {		if ($id = category_exists($category))			$cat_ids[] = $id;		else			if ($id = wp_create_category($category))				$cat_ids[] = $id;	}	if ( $post_id )		wp_set_post_categories($post_id, $cat_ids);	return $cat_ids;}/** * Deletes one existing category. * * @since 2.0.0 * * @param int $cat_ID * @return mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; WP_Error object is also a possibility. */function wp_delete_category($cat_ID) {	$cat_ID = (int) $cat_ID;	$default = get_option('default_category');	// Don't delete the default cat	if ( $cat_ID == $default )		return 0;	return wp_delete_term($cat_ID, 'category', array('default' => $default));}/** * Updates an existing Category or creates a new Category. * * @since 2.0.0 * * @param mixed $catarr See defaults below. Set 'cat_ID' to a non-zero value to update an existing category. The 'taxonomy' key was added in 3.0.0. * @param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles WP_Error return values. * @return int|object The ID number of the new or updated Category on success.  Zero or a WP_Error on failure, depending on param $wp_error. */function wp_insert_category($catarr, $wp_error = false) {	$cat_defaults = array('cat_ID' => 0, 'taxonomy' => 'category', 'cat_name' => '', 'category_description' => '', 'category_nicename' => '', 'category_parent' => '');	$catarr = wp_parse_args($catarr, $cat_defaults);	extract($catarr, EXTR_SKIP);	if ( trim( $cat_name ) == '' ) {		if ( ! $wp_error )			return 0;		else			return new WP_Error( 'cat_name', __('You did not enter a category name.') );	}	$cat_ID = (int) $cat_ID;	// Are we updating or creating?	if ( !empty ($cat_ID) )		$update = true;	else		$update = false;	$name = $cat_name;	$description = $category_description;	$slug = $category_nicename;	$parent = $category_parent;	$parent = (int) $parent;	if ( $parent < 0 )		$parent = 0;	if ( empty($parent) || !category_exists( $parent ) || ($cat_ID && cat_is_ancestor_of($cat_ID, $parent) ) )		$parent = 0;	$args = compact('name', 'slug', 'parent', 'description');	if ( $update )		$cat_ID = wp_update_term($cat_ID, $taxonomy, $args);	else		$cat_ID = wp_insert_term($cat_name, $taxonomy, $args);	if ( is_wp_error($cat_ID) ) {		if ( $wp_error )			return $cat_ID;		else			return 0;	}	return $cat_ID['term_id'];}/** * Aliases wp_insert_category() with minimal args. * * If you want to update only some fields of an existing category, call this * function with only the new values set inside $catarr. * * @since 2.0.0 * * @param array $catarr The 'cat_ID' value is required.  All other keys are optional. * @return int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. */function wp_update_category($catarr) {	$cat_ID = (int) $catarr['cat_ID'];	if ( isset($catarr['category_parent']) && ($cat_ID == $catarr['category_parent']) )		return false;	// First, get all of the original fields	$category = get_category($cat_ID, ARRAY_A);	// Escape data pulled from DB.	$category = add_magic_quotes($category);	// Merge old and new fields with new fields overwriting old ones.	$catarr = array_merge($category, $catarr);	return wp_insert_category($catarr);}//// Tags///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_tags_to_edit( $post_id, $taxonomy = 'post_tag' ) {	return get_terms_to_edit( $post_id, $taxonomy);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @return unknown */function get_terms_to_edit( $post_id, $taxonomy = 'post_tag' ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	$tags = wp_get_post_terms($post_id, $taxonomy, array());	if ( !$tags )		return false;	if ( is_wp_error($tags) )		return $tags;	foreach ( $tags as $tag )		$tag_names[] = $tag->name;	$tags_to_edit = join( ',', $tag_names );	$tags_to_edit = esc_attr( $tags_to_edit );	$tags_to_edit = apply_filters( 'terms_to_edit', $tags_to_edit, $taxonomy );	return $tags_to_edit;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function tag_exists($tag_name) {	return term_exists($tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_tag($tag_name) {	return wp_create_term( $tag_name, 'post_tag');}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag_name * @return unknown */function wp_create_term($tag_name, $taxonomy = 'post_tag') {	if ( $id = term_exists($tag_name, $taxonomy) )		return $id;	return wp_insert_term($tag_name, $taxonomy);}
<?php/** * Writing settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Writing Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('You can submit content in several different ways; this screen holds the settings for all of them. The top section controls the editor within these administration screens, while the rest control external publishing methods. For more information on any of these methods, use the documentation links below.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Writing_SubPanel" target="_blank">Writing Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('writing'); ?><table class="form-table"><tr valign="top"><th scope="row"><label for="default_post_edit_rows"> <?php _e('Size of the post box') ?></label></th><td><input name="default_post_edit_rows" type="text" id="default_post_edit_rows" value="<?php form_option('default_post_edit_rows'); ?>" class="small-text" /><?php _e('lines') ?></td></tr><tr valign="top"><th scope="row"><?php _e('Formatting') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Formatting') ?></span></legend><label for="use_smilies"><input name="use_smilies" type="checkbox" id="use_smilies" value="1" <?php checked('1', get_option('use_smilies')); ?> /><?php _e('Convert emoticons like <code>:-)</code> and <code>:-P</code> to graphics on display') ?></label><br /><label for="use_balanceTags"><input name="use_balanceTags" type="checkbox" id="use_balanceTags" value="1" <?php checked('1', get_option('use_balanceTags')); ?> /> <?php _e('WordPress should correct invalidly nested XHTML automatically') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><label for="default_category"><?php _e('Default Post Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_category', 'orderby' => 'name', 'selected' => get_option('default_category'), 'hierarchical' => true));?></td></tr><tr valign="top"><th scope="row"><label for="default_link_category"><?php _e('Default Link Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_link_category', 'orderby' => 'name', 'selected' => get_option('default_link_category'), 'hierarchical' => true, 'taxonomy' => 'link_category'));?></td></tr><?php do_settings_fields('writing', 'default'); ?></table><h3 class="title"><?php _e('Press This') ?></h3><p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p><p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p><p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p><p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p><?php if ( apply_filters( 'enable_post_by_email_configuration', true ) ) { ?><h3><?php _e('Post via e-mail') ?></h3><p><?php printf(__('To post to WordPress by e-mail you must set up a secret e-mail account with POP3 access. Any mail received at this address will be posted, so it&#8217;s a good idea to keep this address very secret. Here are three random strings you could use: <kbd>%s</kbd>, <kbd>%s</kbd>, <kbd>%s</kbd>.'), wp_generate_password(8, false), wp_generate_password(8, false), wp_generate_password(8, false)) ?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="mailserver_url"><?php _e('Mail Server') ?></label></th><td><input name="mailserver_url" type="text" id="mailserver_url" value="<?php form_option('mailserver_url'); ?>" class="regular-text code" /><label for="mailserver_port"><?php _e('Port') ?></label><input name="mailserver_port" type="text" id="mailserver_port" value="<?php form_option('mailserver_port'); ?>" class="small-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_login"><?php _e('Login Name') ?></label></th><td><input name="mailserver_login" type="text" id="mailserver_login" value="<?php form_option('mailserver_login'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="mailserver_pass"><?php _e('Password') ?></label></th><td><input name="mailserver_pass" type="text" id="mailserver_pass" value="<?php form_option('mailserver_pass'); ?>" class="regular-text" /></td></tr><tr valign="top"><th scope="row"><label for="default_email_category"><?php _e('Default Mail Category') ?></label></th><td><?phpwp_dropdown_categories(array('hide_empty' => 0, 'name' => 'default_email_category', 'orderby' => 'name', 'selected' => get_option('default_email_category'), 'hierarchical' => true));?></td></tr><?php do_settings_fields('writing', 'post_via_email'); ?></table><?php } ?><h3><?php _e('Remote Publishing') ?></h3><p><?php printf(__('To post to WordPress from a desktop blogging client or remote website that uses the Atom Publishing Protocol or one of the XML-RPC publishing interfaces you must enable them below.')) ?></p><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Atom Publishing Protocol') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Atom Publishing Protocol') ?></span></legend><label for="enable_app"><input name="enable_app" type="checkbox" id="enable_app" value="1" <?php checked('1', get_option('enable_app')); ?> /><?php _e('Enable the Atom Publishing Protocol.') ?></label><br /></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('XML-RPC') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('XML-RPC') ?></span></legend><label for="enable_xmlrpc"><input name="enable_xmlrpc" type="checkbox" id="enable_xmlrpc" value="1" <?php checked('1', get_option('enable_xmlrpc')); ?> /><?php _e('Enable the WordPress, Movable Type, MetaWeblog and Blogger XML-RPC publishing protocols.') ?></label><br /></fieldset></td></tr><?php do_settings_fields('writing', 'remote_publishing'); ?></table><?php if ( apply_filters( 'enable_update_services_configuration', true ) ) { ?><h3><?php _e('Update Services') ?></h3><?php if ( get_option('blog_public') ) : ?><p><label for="ping_sites"><?php _e('When you publish a new post, WordPress automatically notifies the following site update services. For more about this, see <a href="http://codex.wordpress.org/Update_Services">Update Services</a> on the Codex. Separate multiple service <abbr title="Universal Resource Locator">URL</abbr>s with line breaks.') ?></label></p><textarea name="ping_sites" id="ping_sites" class="large-text code" rows="3"><?php form_option('ping_sites'); ?></textarea><?php else : ?>	<p><?php printf(__('WordPress is not notifying any <a href="http://codex.wordpress.org/Update_Services">Update Services</a> because of your site&#8217;s <a href="%s">privacy settings</a>.'), 'options-privacy.php'); ?></p><?php endif; ?><?php } // multisite ?><?php do_settings_sections('writing'); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php') ?>
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * Edit Posts Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );$_GET['post_type'] = $post_type;$post_type_object = get_post_type_object($post_type);if ( !current_user_can($post_type_object->cap->edit_posts) )	wp_die(__('Cheatin&#8217; uh?'));// Back-compat for viewing comments of an entryif ( $_redirect = intval( max( @$_GET['p'], @$_GET['attachment_id'], @$_GET['page_id'] ) ) ) {	wp_redirect( admin_url('edit-comments.php?p=' . $_redirect ) );	exit;} else {	unset( $_redirect );}if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit.php?post_type=$post_type";	$post_new_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'edit.php';	$post_new_file = 'post-new.php';}$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$per_page = 'edit_' . $post_type . '_per_page';$per_page = (int) get_user_option( $per_page );if ( empty( $per_page ) || $per_page < 1 )	$per_page = 20;// @todo filter based on type$per_page = apply_filters( 'edit_posts_per_page', $per_page );// Handle bulk actionsif ( isset($_GET['doaction']) || isset($_GET['doaction2']) || isset($_GET['delete_all']) || isset($_GET['delete_all2']) || isset($_GET['bulk_edit']) ) {	check_admin_referer('bulk-posts');	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), wp_get_referer() );	if ( strpos($sendback, 'post.php') !== false )		$sendback = admin_url($post_new_file);	if ( isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {		$post_status = preg_replace('/[^a-z0-9_-]+/i', '', $_GET['post_status']);		$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_type=%s AND post_status = %s", $post_type, $post_status ) );		$doaction = 'delete';	} elseif ( ( $_GET['action'] != -1 || $_GET['action2'] != -1 ) && ( isset($_GET['post']) || isset($_GET['ids']) ) ) {		$post_ids = isset($_GET['post']) ? array_map( 'intval', (array) $_GET['post'] ) : explode(',', $_GET['ids']);		$doaction = ($_GET['action'] != -1) ? $_GET['action'] : $_GET['action2'];	} else {		wp_redirect( admin_url("edit.php?post_type=$post_type") );	}	switch ( $doaction ) {		case 'trash':			$trashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to move this item to the Trash.') );				if ( !wp_trash_post($post_id) )					wp_die( __('Error in moving to Trash.') );				$trashed++;			}			$sendback = add_query_arg( array('trashed' => $trashed, 'ids' => join(',', $post_ids)), $sendback );			break;		case 'untrash':			$untrashed = 0;			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to restore this item from the Trash.') );				if ( !wp_untrash_post($post_id) )					wp_die( __('Error in restoring from Trash.') );				$untrashed++;			}			$sendback = add_query_arg('untrashed', $untrashed, $sendback);			break;		case 'delete':			$deleted = 0;			foreach( (array) $post_ids as $post_id ) {				$post_del = & get_post($post_id);				if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )					wp_die( __('You are not allowed to delete this item.') );				if ( $post_del->post_type == 'attachment' ) {					if ( ! wp_delete_attachment($post_id) )						wp_die( __('Error in deleting...') );				} else {					if ( !wp_delete_post($post_id) )						wp_die( __('Error in deleting...') );				}				$deleted++;			}			$sendback = add_query_arg('deleted', $deleted, $sendback);			break;		case 'edit':			$done = bulk_edit_posts($_GET);			if ( is_array($done) ) {				$done['updated'] = count( $done['updated'] );				$done['skipped'] = count( $done['skipped'] );				$done['locked'] = count( $done['locked'] );				$sendback = add_query_arg( $done, $sendback );			}			break;	}	if ( isset($_GET['action']) )		$sendback = remove_query_arg( array('action', 'action2', 'tags_input', 'post_author', 'comment_status', 'ping_status', '_status',  'post', 'bulk_edit', 'post_view'), $sendback );	wp_redirect($sendback);	exit();} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('inline-edit-post');$user_posts = false;if ( !current_user_can($post_type_object->cap->edit_others_posts) ) {	$user_posts_count = $wpdb->get_var( $wpdb->prepare("SELECT COUNT(1) FROM $wpdb->posts WHERE post_type = '%s' AND post_status NOT IN ('trash', 'auto-draft') AND post_author = %d", $post_type, $current_user->ID) );	$user_posts = true;	if ( $user_posts_count && empty($_GET['post_status']) && empty($_GET['all_posts']) && empty($_GET['author']) )		$_GET['author'] = $current_user->ID;}$avail_post_stati = wp_edit_posts_query();if ( $post_type_object->hierarchical )	$num_pages = ceil($wp_query->post_count / $per_page);else	$num_pages = $wp_query->max_num_pages;$title = $post_type_object->labels->name;if ( 'post' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('You can customize the display of this screen in a number of ways:') . '</p>' .	'<ul>' .	'<li>' . __('You can hide/display columns based on your needs and decide how many posts to list per screen using the Screen Options tab.') . '</li>' .	'<li>' . __('You can filter the list of posts by post status using the text links in the upper left to show All, Published, Draft, or Trashed posts. The default view is to show all posts.') . '</li>' .	'<li>' . __('You can view posts in a simple title list or with an excerpt. Choose the view you prefer by clicking on the icons at the top of the list on the right.') . '</li>' .	'<li>' . __('You can refine the list to show only posts in a specific category or from a specific month by using the dropdown menus above the posts list. Click the Filter button after making your selection. You also can refine the list by clicking on the post author, category or tag in the posts list.') . '</li>' .	'</ul>' .	'<p>' . __('Hovering over a row in the posts list will display action links that allow you to manage your post. You can perform the following actions:') . '</p>' .	'<ul>' .	'<li>' . __('Edit takes you to the editing screen for that post. You can also reach that screen by clicking on the post title.') . '</li>' .	'<li>' . __('Quick Edit provides inline access to the metadata of your post, allowing you to update post details without leaving this screen.') . '</li>' .	'<li>' . __('Trash removes your post from this list and places it in the trash, from which you can permanently delete it.') . '</li>' .	'<li>' . __('Preview will show you what your draft post will look like if you publish it. View will take you to your live site to view the post. Which link is available depends on your post&#8217;s status.') . '</li>' .	'</ul>' .	'<p>' . __('You can also edit multiple posts at once. Select the posts you want to edit using the checkboxes, select Edit from the Bulk Actions menu and click Apply. You will be able to change the metadata (categories, author, etc.) for all selected posts at once. To remove a post from the grouping, just click the x next to its name in the Bulk Edit area that appears.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Posts_Edit_SubPanel" target="_blank">Edit Posts Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} elseif ( 'page' == $post_type ) {	add_contextual_help($current_screen,	'<p>' . __('Pages are similar to to Posts in that they have a title, body text, and associated metadata, but they are different in that they are not part of the chronological blog stream, kind of like permanent posts. Pages are not categorized or tagged, but can have a hierarchy. You can nest Pages under other Pages by making one the &#8220;Parent&#8221; of the other, creating a group of Pages.') . '</p>' .	'<p>' . __('Managing Pages is very similar to managing Posts, and the screens can be customized in the same way.') . '</p>' .	'<p>' . __('You can also perform the same types of actions, including narrowing the list by using the filters, acting on a Page using the action links that appear when you hover over a row, or using the Bulk Actions menu to edit the metadata for multiple Pages at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Pages_Edit_SubPanel" target="_blank">Page Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}require_once('./admin-header.php');if ( empty($_GET['mode']) )	$mode = 'list';else	$mode = esc_attr($_GET['mode']); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $post_type_object->labels->name ); ?> <a href="<?php echo $post_new_file ?>" class="button add-new-h2"><?php echo esc_html($post_type_object->labels->add_new); ?></a> <?phpif ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', get_search_query() ); ?></h2><?phpif ( isset($_GET['posted']) && $_GET['posted'] ) : $_GET['posted'] = (int) $_GET['posted']; ?><div id="message" class="updated"><p><strong><?php _e('This has been saved.'); ?></strong> <a href="<?php echo get_permalink( $_GET['posted'] ); ?>"><?php _e('View Post'); ?></a> | <a href="<?php echo get_edit_post_link( $_GET['posted'] ); ?>"><?php _e('Edit Post'); ?></a></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('posted'), $_SERVER['REQUEST_URI']);endif; ?><?php if ( isset($_GET['locked']) || isset($_GET['skipped']) || isset($_GET['updated']) || isset($_GET['deleted']) || isset($_GET['trashed']) || isset($_GET['untrashed']) ) { ?><div id="message" class="updated"><p><?php if ( isset($_GET['updated']) && (int) $_GET['updated'] ) {	printf( _n( '%s post updated.', '%s posts updated.', $_GET['updated'] ), number_format_i18n( $_GET['updated'] ) );	unset($_GET['updated']);}if ( isset($_GET['skipped']) && (int) $_GET['skipped'] )	unset($_GET['skipped']);if ( isset($_GET['locked']) && (int) $_GET['locked'] ) {	printf( _n( '%s item not updated, somebody is editing it.', '%s items not updated, somebody is editing them.', $_GET['locked'] ), number_format_i18n( $_GET['locked'] ) );	unset($_GET['locked']);}if ( isset($_GET['deleted']) && (int) $_GET['deleted'] ) {	printf( _n( 'Item permanently deleted.', '%s items permanently deleted.', $_GET['deleted'] ), number_format_i18n( $_GET['deleted'] ) );	unset($_GET['deleted']);}if ( isset($_GET['trashed']) && (int) $_GET['trashed'] ) {	printf( _n( 'Item moved to the trash.', '%s items moved to the trash.', $_GET['trashed'] ), number_format_i18n( $_GET['trashed'] ) );	$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;	echo ' <a href="' . esc_url( wp_nonce_url( "edit.php?post_type=$post_type&doaction=undo&action=untrash&ids=$ids", "bulk-posts" ) ) . '">' . __('Undo') . '</a><br />';	unset($_GET['trashed']);}if ( isset($_GET['untrashed']) && (int) $_GET['untrashed'] ) {	printf( _n( 'Item restored from the Trash.', '%s items restored from the Trash.', $_GET['untrashed'] ), number_format_i18n( $_GET['untrashed'] ) );	unset($_GET['undeleted']);}$_SERVER['REQUEST_URI'] = remove_query_arg( array('locked', 'skipped', 'updated', 'deleted', 'trashed', 'untrashed'), $_SERVER['REQUEST_URI'] );?></p></div><?php } ?><form id="posts-filter" action="<?php echo admin_url('edit.php'); ?>" method="get"><ul class="subsubsub"><?phpif ( empty($locked_post_status) ) :$status_links = array();$num_posts = wp_count_posts( $post_type, 'readable' );$class = '';$allposts = '';if ( $user_posts ) {	if ( isset( $_GET['author'] ) && ( $_GET['author'] == $current_user->ID ) )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_type=$post_type&author=$current_user->ID'$class>" . sprintf( _nx( 'Mine <span class="count">(%s)</span>', 'Mine <span class="count">(%s)</span>', $user_posts_count, 'posts' ), number_format_i18n( $user_posts_count ) ) . '</a>';	$allposts = '&all_posts=1';}$total_posts = array_sum( (array) $num_posts );// Subtract post types that are not included in the admin all list.foreach ( get_post_stati( array('show_in_admin_all_list' => false) ) as $state )	$total_posts -= $num_posts->$state;$class = empty($class) && empty($_GET['post_status']) ? ' class="current"' : '';$status_links[] = "<li><a href='edit.php?post_type=$post_type{$allposts}'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $total_posts, 'posts' ), number_format_i18n( $total_posts ) ) . '</a>';foreach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {	$class = '';	$status_name = $status->name;	if ( !in_array( $status_name, $avail_post_stati ) )		continue;	if ( empty( $num_posts->$status_name ) )		continue;	if ( isset($_GET['post_status']) && $status_name == $_GET['post_status'] )		$class = ' class="current"';	$status_links[] = "<li><a href='edit.php?post_status=$status_name&amp;post_type=$post_type'$class>" . sprintf( _n( $status->label_count[0], $status->label_count[1], $num_posts->$status_name ), number_format_i18n( $num_posts->$status_name ) ) . '</a>';}echo implode( " |</li>\n", $status_links ) . '</li>';unset( $status_links );endif;?></ul><p class="search-box">	<label class="screen-reader-text" for="post-search-input"><?php echo $post_type_object->labels->search_items; ?>:</label>	<input type="text" id="post-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $post_type_object->labels->search_items  ); ?>" class="button" /></p><input type="hidden" name="post_status" class="post_status_page" value="<?php echo !empty($_GET['post_status']) ? esc_attr($_GET['post_status']) : 'all'; ?>" /><input type="hidden" name="post_type" class="post_type_page" value="<?php echo $post_type; ?>" /><input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" /><?php if ( have_posts() ) { ?><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => $num_pages,	'current' => $pagenum));$is_trash = isset($_GET['post_status']) && $_GET['post_status'] == 'trash';?><div class="alignleft actions"><select name="action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-posts'); ?><?php // view filtersif ( !is_singular() ) {$arc_query = $wpdb->prepare("SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = %s ORDER BY post_date DESC", $post_type);$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) {$m = isset($_GET['m']) ? (int)$_GET['m'] : 0;?><select name='m'><option<?php selected( $m, 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( $arc_row->yyear . $arc_row->mmonth == $m )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr("$arc_row->yyear$arc_row->mmonth") . "'>";	echo $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear";	echo "</option>\n";}?></select><?php } ?><?phpif ( is_object_in_taxonomy($post_type, 'category') ) {	$dropdown_options = array('show_option_all' => __('View all categories'), 'hide_empty' => 0, 'hierarchical' => 1,		'show_count' => 0, 'orderby' => 'name', 'selected' => $cat);	wp_dropdown_categories($dropdown_options);}do_action('restrict_manage_posts');?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php }if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><?php if ( $page_links ) { ?><div class="tablenav-pages"><?php	$count_posts = $post_type_object->hierarchical ? $wp_query->post_count : $wp_query->found_posts;	$page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',						number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),						number_format_i18n( min( $pagenum * $per_page, $count_posts ) ),						number_format_i18n( $count_posts ),						$page_links						);	echo $page_links_text;	?></div><?php}if ( !$post_type_object->hierarchical ) {?><div class="view-switch">	<a href="<?php echo esc_url(add_query_arg('mode', 'list', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('List View') ?>" alt="<?php _e('List View') ?>" /></a>	<a href="<?php echo esc_url(add_query_arg('mode', 'excerpt', $_SERVER['REQUEST_URI'])) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e('Excerpt View') ?>" alt="<?php _e('Excerpt View') ?>" /></a></div><?php } ?><div class="clear"></div></div><div class="clear"></div><?php include( './edit-post-rows.php' ); ?><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } else { ?><option value="edit"><?php _e('Edit'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /><?php if ( $is_trash && current_user_can($post_type_object->cap->edit_others_posts) ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?><br class="clear" /></div><br class="clear" /></div><?php } else { // have_posts() ?><div class="clear"></div><p><?phpif ( isset($_GET['post_status']) && 'trash' == $_GET['post_status'] )	echo $post_type_object->labels->not_found_in_trash;else	echo $post_type_object->labels->not_found;?></p><?php } ?></form><?php inline_edit_row( $current_screen ); ?><div id="ajax-response"></div><br class="clear" /></div><?phpinclude('./admin-footer.php');
<?php/** * Deprecated functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated *//* * Deprecated functions come here to die. *//** * Entire Post data. * * @since 0.71 * @deprecated 1.5.1 * @deprecated Use get_post() * @see get_post() * * @param int $postid * @return array */function get_postdata($postid) {	_deprecated_function( __FUNCTION__, '1.5.1', 'get_post()' );	$post = &get_post($postid);	$postdata = array (		'ID' => $post->ID,		'Author_ID' => $post->post_author,		'Date' => $post->post_date,		'Content' => $post->post_content,		'Excerpt' => $post->post_excerpt,		'Title' => $post->post_title,		'Category' => $post->post_category,		'post_status' => $post->post_status,		'comment_status' => $post->comment_status,		'ping_status' => $post->ping_status,		'post_password' => $post->post_password,		'to_ping' => $post->to_ping,		'pinged' => $post->pinged,		'post_type' => $post->post_type,		'post_name' => $post->post_name	);	return $postdata;}/** * Sets up the WordPress Loop. * * @since 1.0.1 * @deprecated 1.5 * @deprecated Use The Loop - {@link http://codex.wordpress.org/The_Loop Use new WordPress Loop} */function start_wp() {	global $wp_query, $post;	_deprecated_function( __FUNCTION__, '1.5', __('new WordPress Loop') );	// Since the old style loop is being used, advance the query iterator here.	$wp_query->next_post();	setup_postdata($post);}/** * Return or Print Category ID. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category() * @see get_the_category() * * @param bool $echo * @return null|int */function the_category_ID($echo = true) {	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category()' );	// Grab the first cat in the list.	$categories = get_the_category();	$cat = $categories[0]->term_id;	if ( $echo )		echo $cat;	return $cat;}/** * Print category with optional text before and after. * * @since 0.71 * @deprecated 0.71 * @deprecated use get_the_category_by_ID() * @see get_the_category_by_ID() * * @param string $before * @param string $after */function the_category_head($before='', $after='') {	global $currentcat, $previouscat;	_deprecated_function( __FUNCTION__, '0.71', 'get_the_category_by_ID()' );	// Grab the first cat in the list.	$categories = get_the_category();	$currentcat = $categories[0]->category_id;	if ( $currentcat != $previouscat ) {		echo $before;		echo get_the_category_by_ID($currentcat);		echo $after;		$previouscat = $currentcat;	}}/** * Prints link to the previous post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use previous_post_link() * @see previous_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function previous_post($format='%', $previous='previous post: ', $title='yes', $in_same_cat='no', $limitprev=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'previous_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_previous_post($in_same_cat, $excluded_categories);	if ( !$post )		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$previous;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $post);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Prints link to the next post. * * @since 0.71 * @deprecated 2.0 * @deprecated Use next_post_link() * @see next_post_link() * * @param string $format * @param string $previous * @param string $title * @param string $in_same_cat * @param int $limitprev * @param string $excluded_categories */function next_post($format='%', $next='next post: ', $title='yes', $in_same_cat='no', $limitnext=1, $excluded_categories='') {	_deprecated_function( __FUNCTION__, '2.0', 'next_post_link()' );	if ( empty($in_same_cat) || 'no' == $in_same_cat )		$in_same_cat = false;	else		$in_same_cat = true;	$post = get_next_post($in_same_cat, $excluded_categories);	if ( !$post	)		return;	$string = '<a href="'.get_permalink($post->ID).'">'.$next;	if ( 'yes' == $title )		$string .= apply_filters('the_title', $post->post_title, $nextpost);	$string .= '</a>';	$format = str_replace('%', $string, $format);	echo $format;}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_post($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level > 1);}/** * Whether user can create a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_create_draft($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return ($author_data->user_level >= 1);}/** * Whether user can edit a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_edit_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	$post = get_post($post_id);	$post_author_data = get_userdata($post->post_author);	if ( (($user_id == $post_author_data->ID) && !($post->post_status == 'publish' && $author_data->user_level < 2))			 || ($author_data->user_level > $post_author_data->user_level)			 || ($author_data->user_level >= 10) ) {		return true;	} else {		return false;	}}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool */function user_can_delete_post($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit, one can delete	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can set new posts' dates. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $blog_id Not Used * @param int $category_id Not Used * @return bool */function user_can_set_post_date($user_id, $blog_id = 1, $category_id = 'None') {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_create_post($user_id, $blog_id, $category_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's date */function user_can_edit_post_date($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$author_data = get_userdata($user_id);	return (($author_data->user_level > 4) && user_can_edit_post($user_id, $post_id, $blog_id));}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can edit $post_id's comments */function user_can_edit_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit a post, one can edit comments made on it	return user_can_edit_post($user_id, $post_id, $blog_id);}/** * Whether user can delete a post. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $post_id * @param int $blog_id Not Used * @return bool returns true if $user_id can delete $post_id's comments */function user_can_delete_post_comments($user_id, $post_id, $blog_id = 1) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	// right now if one can edit comments, one can delete comments	return user_can_edit_post_comments($user_id, $post_id, $blog_id);}/** * Can user can edit other user. * * @since 1.5 * @deprecated 2.0 * @deprecated Use current_user_can() * @see current_user_can() * * @param int $user_id * @param int $other_user * @return bool */function user_can_edit_user($user_id, $other_user) {	_deprecated_function( __FUNCTION__, '2.0', 'current_user_can()' );	$user  = get_userdata($user_id);	$other = get_userdata($other_user);	if ( $user->user_level > $other->user_level || $user->user_level > 8 || $user->ID == $other->ID )		return true;	else		return false;}/** * Gets the links associated with category $cat_name. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name Optional. The category name to use. If no match is found uses all. * @param string $before Optional. The html to output before the link. * @param string $after Optional. The html to output after the link. * @param string $between Optional. The html to output between the link/image and it's description. Not used if no image or $show_images is true. * @param bool $show_images Optional. Whether to show images (if defined). * @param string $orderby Optional. The order to output the links. E.g. 'id', 'name', 'url', 'description' or 'rating'. Or maybe owner. *		If you start the name with an underscore the order will be reversed. You can also specify 'rand' as the order which will return links in a *		random order. * @param bool $show_description Optional. Whether to show the description if show_images=false/not defined. * @param bool $show_rating Optional. Show rating stars/chars. * @param int $limit		Optional. Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Optional. Whether to show last updated timestamp */function get_linksbyname($cat_name = "noname", $before = '', $after = '<br />', $between = " ", $show_images = true, $orderby = 'id',						 $show_description = true, $show_rating = false,						 $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	get_links($cat_id, $before, $after, $between, $show_images, $orderby, $show_description, $show_rating, $limit, $show_updated);}/** * Gets the links associated with the named category. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $category The category to use. * @param string $args * @return bool|null */function wp_get_linksbyname($category, $args = '') {	_deprecated_function(__FUNCTION__, '0.0', 'wp_list_bookmarks()');	$defaults = array(		'after' => '<br />',		'before' => '',		'categorize' => 0,		'category_after' => '',		'category_before' => '',		'category_name' => $category,		'show_description' => 1,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets an array of link objects associated with category $cat_name. * * <code> *	$links = get_linkobjectsbyname('fred'); *	foreach ($links as $link) { * 		echo '<li>'.$link->link_name.'</li>'; *	} * </code> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all. * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', 'description', or 'rating'. *		Or maybe owner. If you start the name with an underscore the order will be reversed. You can also *		specify 'rand' as the order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjectsbyname($cat_name = "noname" , $orderby = 'name', $limit = -1) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$cat_id = -1;	$cat = get_term_by('name', $cat_name, 'link_category');	if ( $cat )		$cat_id = $cat->term_id;	return get_linkobjects($cat_id, $orderby, $limit);}/** * Gets an array of link objects associated with category n. * * Usage: * <code> *	$links = get_linkobjects(1); *	if ($links) { *		foreach ($links as $link) { *			echo '<li>'.$link->link_name.'<br />'.$link->link_description.'</li>'; *		} *	} * </code> * * Fields are: * <ol> *	<li>link_id</li> *	<li>link_url</li> *	<li>link_name</li> *	<li>link_image</li> *	<li>link_target</li> *	<li>link_category</li> *	<li>link_description</li> *	<li>link_visible</li> *	<li>link_owner</li> *	<li>link_rating</li> *	<li>link_updated</li> *	<li>link_rel</li> *	<li>link_notes</li> * </ol> * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param int $limit Limit to X entries. If not specified, all entries are shown. * @return unknown */function get_linkobjects($category = 0, $orderby = 'name', $limit = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$links = get_bookmarks( array( 'category' => $category, 'orderby' => $orderby, 'limit' => $limit ) ) ;	$links_array = array();	foreach ($links as $link)		$links_array[] = $link;	return $links_array;}/** * Gets the links associated with category 'cat_name' and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param string $cat_name The category name to use. If no match is found uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images is true * @param bool $show_images Whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_linksbyname_withrating($cat_name = "noname", $before = '', $after = '<br />', $between = " ",									$show_images = true, $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_linksbyname($cat_name, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the links associated with category n and display rating stars/chars. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before The html to output before the link * @param string $after The html to output after the link * @param string $between The html to output between the link/image and it's description. Not used if no image or show_images == true * @param bool $show_images Whether to show images (if defined). * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the *		order which will return links in a random order. * @param bool $show_description Whether to show the description if show_images=false/not defined. * @param string $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated Whether to show last updated timestamp */function get_links_withrating($category = -1, $before = '', $after = '<br />', $between = " ", $show_images = true,							  $orderby = 'id', $show_description = true, $limit = -1, $show_updated = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	get_links($category, $before, $after, $between, $show_images, $orderby, $show_description, true, $limit, $show_updated);}/** * Gets the auto_toggle setting. * * @since 0.71 * @deprecated 2.1 * @deprecated No alternative function available * * @param int $id The category to get. If no category supplied uses 0 * @return int Only returns 0. */function get_autotoggle($id = 0) {	_deprecated_function( __FUNCTION__, '2.1' );	return 0;}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param int $optionall * @param string $all * @param string $sort_column * @param string $sort_order * @param string $file * @param bool $list * @param int $optiondates * @param int $optioncount * @param int $hide_empty * @param int $use_desc_for_title * @param bool $children * @param int $child_of * @param int $categories * @param int $recurse * @param string $feed * @param string $feed_image * @param string $exclude * @param bool $hierarchical * @return unknown */function list_cats($optionall = 1, $all = 'All', $sort_column = 'ID', $sort_order = 'asc', $file = '', $list = true, $optiondates = 0,				   $optioncount = 0, $hide_empty = 1, $use_desc_for_title = 1, $children=false, $child_of=0, $categories=0,				   $recurse=0, $feed = '', $feed_image = '', $exclude = '', $hierarchical=false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$query = compact('optionall', 'all', 'sort_column', 'sort_order', 'file', 'list', 'optiondates', 'optioncount', 'hide_empty', 'use_desc_for_title', 'children',		'child_of', 'categories', 'recurse', 'feed', 'feed_image', 'exclude', 'hierarchical');	return wp_list_cats($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_categories() * @see wp_list_categories() * * @param string|array $args * @return unknown */function wp_list_cats($args = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_categories()' );	$r = wp_parse_args( $args );	// Map to new names.	if ( isset($r['optionall']) && isset($r['all']))		$r['show_option_all'] = $r['all'];	if ( isset($r['sort_column']) )		$r['orderby'] = $r['sort_column'];	if ( isset($r['sort_order']) )		$r['order'] = $r['sort_order'];	if ( isset($r['optiondates']) )		$r['show_last_update'] = $r['optiondates'];	if ( isset($r['optioncount']) )		$r['show_count'] = $r['optioncount'];	if ( isset($r['list']) )		$r['style'] = $r['list'] ? 'list' : 'break';	$r['title_li'] = '';	return wp_list_categories($r);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_dropdown_categories() * @see wp_dropdown_categories() * * @param int $optionall * @param string $all * @param string $orderby * @param string $order * @param int $show_last_update * @param int $show_count * @param int $hide_empty * @param bool $optionnone * @param int $selected * @param int $exclude * @return unknown */function dropdown_cats($optionall = 1, $all = 'All', $orderby = 'ID', $order = 'asc',		$show_last_update = 0, $show_count = 0, $hide_empty = 1, $optionnone = false,		$selected = 0, $exclude = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_dropdown_categories()' );	$show_option_all = '';	if ( $optionall )		$show_option_all = $all;	$show_option_none = '';	if ( $optionnone )		$show_option_none = __('None');	$vars = compact('show_option_all', 'show_option_none', 'orderby', 'order',					'show_last_update', 'show_count', 'hide_empty', 'selected', 'exclude');	$query = add_query_arg($vars, '');	return wp_dropdown_categories($query);}/** * @since 1.2 * @deprecated 2.1 * @deprecated Use wp_list_authors() * @see wp_list_authors() * * @param bool $optioncount * @param bool $exclude_admin * @param bool $show_fullname * @param bool $hide_empty * @param string $feed * @param string $feed_image * @return unknown */function list_authors($optioncount = false, $exclude_admin = true, $show_fullname = false, $hide_empty = true, $feed = '', $feed_image = '') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_authors()' );	$args = compact('optioncount', 'exclude_admin', 'show_fullname', 'hide_empty', 'feed', 'feed_image');	return wp_list_authors($args);}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_get_post_categories() * @see wp_get_post_categories() * * @param int $blogid Not Used * @param int $post_ID * @return unknown */function wp_get_post_cats($blogid = '1', $post_ID = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_post_categories()' );	return wp_get_post_categories($post_ID);}/** * Sets the categories that the post id belongs to. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_set_post_categories() * @see wp_set_post_categories() * * @param int $blogid Not used * @param int $post_ID * @param array $post_categories * @return unknown */function wp_set_post_cats($blogid = '1', $post_ID = 0, $post_categories = array()) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_set_post_categories()' );	return wp_set_post_categories($post_ID, $post_categories);}/** * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_get_archives() * @see wp_get_archives() * * @param string $type * @param string $limit * @param string $format * @param string $before * @param string $after * @param bool $show_post_count * @return unknown */function get_archives($type='', $limit='', $format='html', $before = '', $after = '', $show_post_count = false) {	_deprecated_function( __FUNCTION__, '2.1', 'wp_get_archives()' );	$args = compact('type', 'limit', 'format', 'before', 'after', 'show_post_count');	return wp_get_archives($args);}/** * Returns or Prints link to the author's posts. * * @since 1.2 * @deprecated 2.1 * @deprecated Use get_author_posts_url() * @see get_author_posts_url() * * @param bool $echo Optional. * @param int $author_id Required. * @param string $author_nicename Optional. * @return string|null */function get_author_link($echo = false, $author_id, $author_nicename = '') {	_deprecated_function( __FUNCTION__, '2.1', 'get_author_posts_url()' );	$link = get_author_posts_url($author_id, $author_nicename);	if ( $echo )		echo $link;	return $link;}/** * Print list of pages based on arguments. * * @since 0.71 * @deprecated 2.1 * @deprecated Use wp_link_pages() * @see wp_link_pages() * * @param string $before * @param string $after * @param string $next_or_number * @param string $nextpagelink * @param string $previouspagelink * @param string $pagelink * @param string $more_file * @return string */function link_pages($before='<br />', $after='<br />', $next_or_number='number', $nextpagelink='next page', $previouspagelink='previous page',					$pagelink='%', $more_file='') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_link_pages()' );	$args = compact('before', 'after', 'next_or_number', 'nextpagelink', 'previouspagelink', 'pagelink', 'more_file');	return wp_link_pages($args);}/** * Get value based on option. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_option() * @see get_option() * * @param string $option * @return string */function get_settings($option) {	_deprecated_function( __FUNCTION__, '2.1', 'get_option()' );	return get_option($option);}/** * Print the permalink of the current post in the loop. * * @since 0.71 * @deprecated 1.2 * @deprecated Use the_permalink() * @see the_permalink() */function permalink_link() {	_deprecated_function( __FUNCTION__, '1.2', 'the_permalink()' );	the_permalink();}/** * Print the permalink to the RSS feed. * * @since 0.71 * @deprecated 2.3 * @deprecated Use the_permalink_rss() * @see the_permalink_rss() * * @param string $file */function permalink_single_rss($deprecated = '') {	_deprecated_function( __FUNCTION__, '0.0', 'the_permalink_rss()' );	the_permalink_rss();}/** * Gets the links associated with category. * * @see get_links() for argument information that can be used in $args * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $args a query string * @return null|string */function wp_get_links($args = '') {	_deprecated_function( __FUNCTION__, '0.0', 'wp_list_bookmarks()' );	if ( strpos( $args, '=' ) === false ) {		$cat_id = $args;		$args = add_query_arg( 'category', $cat_id, $args );	}	$defaults = array(		'after' => '<br />',		'before' => '',		'between' => ' ',		'categorize' => 0,		'category' => '',		'echo' => true,		'limit' => -1,		'orderby' => 'name',		'show_description' => true,		'show_images' => true,		'show_rating' => false,		'show_updated' => true,		'title_li' => '',	);	$r = wp_parse_args( $args, $defaults );	return wp_list_bookmarks($r);}/** * Gets the links associated with category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_bookmarks() * @see get_bookmarks() * * @param int $category The category to use. If no category supplied uses all * @param string $before the html to output before the link * @param string $after the html to output after the link * @param string $between the html to output between the link/image and its description. *		Not used if no image or show_images == true * @param bool $show_images whether to show images (if defined). * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url', *		'description', or 'rating'. Or maybe owner. If you start the name with an *		underscore the order will be reversed. You can also specify 'rand' as the order *		which will return links in a random order. * @param bool $show_description whether to show the description if show_images=false/not defined. * @param bool $show_rating show rating stars/chars * @param int $limit Limit to X entries. If not specified, all entries are shown. * @param int $show_updated whether to show last updated timestamp * @param bool $echo whether to echo the results, or return them instead * @return null|string */function get_links($category = -1, $before = '', $after = '<br />', $between = ' ', $show_images = true, $orderby = 'name',			$show_description = true, $show_rating = false, $limit = -1, $show_updated = 1, $echo = true) {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmarks()' );	$order = 'ASC';	if ( substr($orderby, 0, 1) == '_' ) {		$order = 'DESC';		$orderby = substr($orderby, 1);	}	if ( $category == -1 ) //get_bookmarks uses '' to signify all categories		$category = '';	$results = get_bookmarks(array('category' => $category, 'orderby' => $orderby, 'order' => $order, 'show_updated' => $show_updated, 'limit' => $limit));	if ( !$results )		return;	$output = '';	foreach ( (array) $results as $row ) {		if ( !isset($row->recently_updated) )			$row->recently_updated = false;		$output .= $before;		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_prepend');		$the_link = '#';		if ( !empty($row->link_url) )			$the_link = esc_url($row->link_url);		$rel = $row->link_rel;		if ( '' != $rel )			$rel = ' rel="' . $rel . '"';		$desc = esc_attr(sanitize_bookmark_field('link_description', $row->link_description, $row->link_id, 'display'));		$name = esc_attr(sanitize_bookmark_field('link_name', $row->link_name, $row->link_id, 'display'));		$title = $desc;		if ( $show_updated )			if (substr($row->link_updated_f, 0, 2) != '00')				$title .= ' ('.__('Last updated') . ' ' . date(get_option('links_updated_date_format'), $row->link_updated_f + (get_option('gmt_offset') * 3600)) . ')';		if ( '' != $title )			$title = ' title="' . $title . '"';		$alt = ' alt="' . $name . '"';		$target = $row->link_target;		if ( '' != $target )			$target = ' target="' . $target . '"';		$output .= '<a href="' . $the_link . '"' . $rel . $title . $target. '>';		if ( $row->link_image != null && $show_images ) {			if ( strpos($row->link_image, 'http') !== false )				$output .= "<img src=\"$row->link_image\" $alt $title />";			else // If it's a relative path				$output .= "<img src=\"" . get_option('siteurl') . "$row->link_image\" $alt $title />";		} else {			$output .= $name;		}		$output .= '</a>';		if ( $show_updated && $row->recently_updated )			$output .= get_option('links_recently_updated_append');		if ( $show_description && '' != $desc )			$output .= $between . $desc;		if ($show_rating) {			$output .= $between . get_linkrating($row);		}		$output .= "$after\n";	} // end while	if ( !$echo )		return $output;	echo $output;}/** * Output entire list of links by category. * * Output a list of all links, listed by category, using the settings in * $wpdb->linkcategories and output it as a nested HTML unordered list. * * @since 1.0.1 * @deprecated 2.1 * @deprecated Use wp_list_bookmarks() * @see wp_list_bookmarks() * * @param string $order Sort link categories by 'name' or 'id' */function get_links_list($order = 'name') {	_deprecated_function( __FUNCTION__, '2.1', 'wp_list_bookmarks()' );	$order = strtolower($order);	// Handle link category sorting	$direction = 'ASC';	if ( '_' == substr($order,0,1) ) {		$direction = 'DESC';		$order = substr($order,1);	}	if ( !isset($direction) )		$direction = '';	$cats = get_categories(array('type' => 'link', 'orderby' => $order, 'order' => $direction, 'hierarchical' => 0));	// Display each category	if ( $cats ) {		foreach ( (array) $cats as $cat ) {			// Handle each category.			// Display the category name			echo '  <li id="linkcat-' . $cat->term_id . '" class="linkcat"><h2>' . apply_filters('link_category', $cat->name ) . "</h2>\n\t<ul>\n";			// Call get_links() with all the appropriate params			get_links($cat->term_id, '<li>', "</li>", "\n", true, 'name', false);			// Close the last category			echo "\n\t</ul>\n</li>\n";		}	}}/** * Show the link to the links popup and the number of links. * * @since 0.71 * @deprecated 2.1 * @deprecated {@internal Use function instead is unknown}} * * @param string $text the text of the link * @param int $width the width of the popup window * @param int $height the height of the popup window * @param string $file the page to open in the popup window * @param bool $count the number of links in the db */function links_popup_script($text = 'Links', $width=400, $height=400, $file='links.all.php', $count = true) {	_deprecated_function( __FUNCTION__, '2.1' );	if ( $count )		$counts = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->links");	$javascript = "<a href=\"#\" onclick=\"javascript:window.open('$file?popup=1', '_blank', 'width=$width,height=$height,scrollbars=yes,status=no'); return false\">";	$javascript .= $text;	if ( $count )		$javascript .= " ($counts)";	$javascript .= "</a>\n\n";		echo $javascript;}/** * @since 1.0.1 * @deprecated 2.1 * @deprecated Use sanitize_bookmark_field() * @see sanitize_bookmark_field() * * @param object $link * @return unknown */function get_linkrating($link) {	_deprecated_function( __FUNCTION__, '2.1', 'sanitize_bookmark_field()' );	return sanitize_bookmark_field('link_rating', $link->link_rating, $link->link_id, 'display');}/** * Gets the name of category by id. * * @since 0.71 * @deprecated 2.1 * @deprecated Use get_category() * @see get_category() * * @param int $id The category to get. If no category supplied uses 0 * @return string */function get_linkcatname($id = 0) {	_deprecated_function( __FUNCTION__, '2.1', 'get_category()' );	$id = (int) $id;	if ( empty($id) )		return '';	$cats = wp_get_link_cats($id);	if ( empty($cats) || ! is_array($cats) )		return '';	$cat_id = (int) $cats[0]; // Take the first cat.	$cat = get_category($cat_id);	return $cat->name;}/** * Print RSS comment feed link. * * @since 1.0.1 * @deprecated 2.5 * @deprecated Use post_comments_feed_link() * @see post_comments_feed_link() * * @param string $link_text */function comments_rss_link($link_text = 'Comments RSS') {	_deprecated_function( __FUNCTION__, '2.5', 'post_comments_feed_link()' );	post_comments_feed_link($link_text);}/** * Print/Return link to category RSS2 feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_category_feed_link() * @see get_category_feed_link() * * @param bool $echo * @param int $cat_ID * @return string|null */function get_category_rss_link($echo = false, $cat_ID = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_category_feed_link()' );	$link = get_category_feed_link($cat_ID, 'rss2');	if ( $echo )		echo $link;	return $link;}/** * Print/Return link to author RSS feed. * * @since 1.2 * @deprecated 2.5 * @deprecated Use get_author_feed_link() * @see get_author_feed_link() * * @param bool $echo * @param int $author_id * @return string|null */function get_author_rss_link($echo = false, $author_id = 1) {	_deprecated_function( __FUNCTION__, '2.5', 'get_author_feed_link()' );	$link = get_author_feed_link($author_id);	if ( $echo )		echo $link;	return $link;}/** * Return link to the post RSS feed. * * @since 1.5 * @deprecated 2.2 * @deprecated Use get_post_comments_feed_link() * @see get_post_comments_feed_link() * * @return string */function comments_rss() {	_deprecated_function( __FUNCTION__, '2.2', 'get_post_comments_feed_link()' );	return get_post_comments_feed_link();}/** * An alias of wp_create_user(). * * @since 2.0 * @deprecated 2.0 * @deprecated Use wp_create_user() * @see wp_create_user() * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function create_user($username, $password, $email) {	_deprecated_function( __FUNCTION__, '2.0', 'wp_create_user()' );	return wp_create_user($username, $password, $email);}/** * Unused function. * * @deprecated 2.5*/function gzip_compression() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}/** * Retrieve an array of comment data about comment $comment_ID. * * @since 0.71 * @deprecated 2.7 * @deprecated Use get_comment() * @see get_comment() * * @param int $comment_ID The ID of the comment * @param int $no_cache Whether to use the cache (cast to bool) * @param bool $include_unapproved Whether to include unapproved comments * @return array The comment data */function get_commentdata( $comment_ID, $no_cache = 0, $include_unapproved = false ) {	_deprecated_function( __FUNCTION__, '2.7', 'get_comment()' );	return get_comment($comment_ID, ARRAY_A);}/** * Retrieve the category name by the category ID. * * @since 0.71 * @deprecated 2.8 * @deprecated Use get_cat_name() * @see get_cat_name() * * @param int $cat_ID Category ID * @return string category name */function get_catname( $cat_ID ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_cat_name()' );	return get_cat_name( $cat_ID );}/** * Retrieve category children list separated before and after the term IDs. * * @since 1.2.0 * @deprecated 2.8 * @deprecated Use get_term_children() * @see get_term_children() * * @param int $id Category ID to retrieve children. * @param string $before Optional. Prepend before category term ID. * @param string $after Optional, default is empty string. Append after category term ID. * @param array $visited Optional. Category Term IDs that have already been added. * @return string */function get_category_children( $id, $before = '/', $after = '', $visited = array() ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_term_children()' );	if ( 0 == $id )		return '';	$chain = '';	/** TODO: consult hierarchy */	$cat_ids = get_all_category_ids();	foreach ( (array) $cat_ids as $cat_id ) {		if ( $cat_id == $id )			continue;		$category = get_category( $cat_id );		if ( is_wp_error( $category ) )			return $category;		if ( $category->parent == $id && !in_array( $category->term_id, $visited ) ) {			$visited[] = $category->term_id;			$chain .= $before.$category->term_id.$after;			$chain .= get_category_children( $category->term_id, $before, $after );		}	}	return $chain;}/** * Retrieve the description of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see get_the_author_meta() * * @return string The author's description. */function get_the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'description\')' );	return get_the_author_meta('description');}/** * Display the description of the author of the current post. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use the_author_meta('description') * @see the_author_meta() */function the_author_description() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'description\')' );	the_author_meta('description');}/** * Retrieve the login name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see get_the_author_meta() * * @return string The author's login name (username). */function get_the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'login\')' );	return get_the_author_meta('login');}/** * Display the login name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('login') * @see the_author_meta() */function the_author_login() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'login\')' );	the_author_meta('login');}/** * Retrieve the first name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see get_the_author_meta() * * @return string The author's first name. */function get_the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'first_name\')' );	return get_the_author_meta('first_name');}/** * Display the first name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('first_name') * @see the_author_meta() */function the_author_firstname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'first_name\')' );	the_author_meta('first_name');}/** * Retrieve the last name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('last_name') * @see get_the_author_meta() * * @return string The author's last name. */function get_the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'last_name\')' );	return get_the_author_meta('last_name');}/** * Display the last name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('last_name') * @see the_author_meta() */function the_author_lastname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'last_name\')' );	the_author_meta('last_name');}/** * Retrieve the nickname of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('nickname') * @see get_the_author_meta() * * @return string The author's nickname. */function get_the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'nickname\')' );	return get_the_author_meta('nickname');}/** * Display the nickname of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('nickname') * @see the_author_meta() */function the_author_nickname() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'nickname\')' );	the_author_meta('nickname');}/** * Retrieve the email of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('email') * @see get_the_author_meta() * * @return string The author's username. */function get_the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'email\')' );	return get_the_author_meta('email');}/** * Display the email of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('email') * @see the_author_meta() */function the_author_email() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'email\')' );	the_author_meta('email');}/** * Retrieve the ICQ number of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('icq') * @see get_the_author_meta() * * @return string The author's ICQ number. */function get_the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'icq\')' );	return get_the_author_meta('icq');}/** * Display the ICQ number of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('icq') * @see the_author_meta() */function the_author_icq() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'icq\')' );	the_author_meta('icq');}/** * Retrieve the Yahoo! IM name of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('yim') * @see get_the_author_meta() * * @return string The author's Yahoo! IM name. */function get_the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'yim\')' );	return get_the_author_meta('yim');}/** * Display the Yahoo! IM name of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('yim') * @see the_author_meta() */function the_author_yim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'yim\')' );	the_author_meta('yim');}/** * Retrieve the MSN address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('msn') * @see get_the_author_meta() * * @return string The author's MSN address. */function get_the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'msn\')' );	return get_the_author_meta('msn');}/** * Display the MSN address of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('msn') * @see the_author_meta() */function the_author_msn() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'msn\')' );	the_author_meta('msn');}/** * Retrieve the AIM address of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('aim') * @see get_the_author_meta() * * @return string The author's AIM address. */function get_the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'aim\')' );	return get_the_author_meta('aim');}/** * Display the AIM address of the author of the current post. * * @since 0.71 * @see the_author_meta() * @deprecated 2.8 * @deprecated Use the_author_meta('aim') */function the_author_aim() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'aim\')' );	the_author_meta('aim');}/** * Retrieve the specified author's preferred display name. * * @since 1.0.0 * @deprecated 2.8 * @deprecated Use get_the_author_meta('display_name') * @see get_the_author_meta() * * @param int $auth_id The ID of the author. * @return string The author's display name. */function get_author_name( $auth_id = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'display_name\')' );	return get_the_author_meta('display_name', $auth_id);}/** * Retrieve the URL to the home page of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('url') * @see get_the_author_meta() * * @return string The URL to the author's page. */function get_the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'url\')' );	return get_the_author_meta('url');}/** * Display the URL to the home page of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('url') * @see the_author_meta() */function the_author_url() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'url\')' );	the_author_meta('url');}/** * Retrieve the ID of the author of the current post. * * @since 1.5 * @deprecated 2.8 * @deprecated Use get_the_author_meta('ID') * @see get_the_author_meta() * * @return int The author's ID. */function get_the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'get_the_author_meta(\'ID\')' );	return get_the_author_meta('ID');}/** * Display the ID of the author of the current post. * * @since 0.71 * @deprecated 2.8 * @deprecated Use the_author_meta('ID') * @see the_author_meta()*/function the_author_ID() {	_deprecated_function( __FUNCTION__, '2.8', 'the_author_meta(\'ID\')' );	the_author_meta('ID');}/** * Display the post content for the feed. * * For encoding the html or the $encode_html parameter, there are three possible * values. '0' will make urls footnotes and use make_url_footnote(). '1' will * encode special characters and automatically display all of the content. The * value of '2' will strip all HTML tags from the content. * * Also note that you cannot set the amount of words and not set the html * encoding. If that is the case, then the html encoding will default to 2, * which will strip all HTML tags. * * To restrict the amount of words of the content, you can use the cut * parameter. If the content is less than the amount, then there won't be any * dots added to the end. If there is content left over, then dots will be added * and the rest of the content will be removed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_content_rss' on the content before processing. * @see get_the_content() For the $more_link_text, $stripteaser, and $more_file *		parameters. * * @deprecated 2.9.0 * @deprecated Use the_content_feed() * @see the_content_feed() * * @param string $more_link_text Optional. Text to display when more content is available but not displayed. * @param int|bool $stripteaser Optional. Default is 0. * @param string $more_file Optional. * @param int $cut Optional. Amount of words to keep for the content. * @param int $encode_html Optional. How to encode the content. */function the_content_rss($more_link_text='(more...)', $stripteaser=0, $more_file='', $cut = 0, $encode_html = 0) {	_deprecated_function( __FUNCTION__, '2.9', 'the_content_feed' );	$content = get_the_content($more_link_text, $stripteaser, $more_file);	$content = apply_filters('the_content_rss', $content);	if ( $cut && !$encode_html )		$encode_html = 2;	if ( 1== $encode_html ) {		$content = esc_html($content);		$cut = 0;	} elseif ( 0 == $encode_html ) {		$content = make_url_footnote($content);	} elseif ( 2 == $encode_html ) {		$content = strip_tags($content);	}	if ( $cut ) {		$blah = explode(' ', $content);		if ( count($blah) > $cut ) {			$k = $cut;			$use_dotdotdot = 1;		} else {			$k = count($blah);			$use_dotdotdot = 0;		}		/** @todo Check performance, might be faster to use array slice instead. */		for ( $i=0; $i<$k; $i++ )			$excerpt .= $blah[$i].' ';		$excerpt .= ($use_dotdotdot) ? '...' : '';		$content = $excerpt;	}	$content = str_replace(']]>', ']]&gt;', $content);	echo $content;}/** * Strip HTML and put links at the bottom of stripped content. * * Searches for all of the links, strips them out of the content, and places * them at the bottom of the content with numbers. * * @since 0.71 * @deprecated 2.9.0 * * @param string $content Content to get links * @return string HTML stripped out of content with links at the bottom. */function make_url_footnote( $content ) {	_deprecated_function( __FUNCTION__, '2.9', '' );	preg_match_all( '/<a(.+?)href=\"(.+?)\"(.*?)>(.+?)<\/a>/', $content, $matches );	$links_summary = "\n";	for ( $i=0; $i<count($matches[0]); $i++ ) {		$link_match = $matches[0][$i];		$link_number = '['.($i+1).']';		$link_url = $matches[2][$i];		$link_text = $matches[4][$i];		$content = str_replace( $link_match, $link_text . ' ' . $link_number, $content );		$link_url = ( ( strtolower( substr( $link_url, 0, 7 ) ) != 'http://' ) && ( strtolower( substr( $link_url, 0, 8 ) ) != 'https://' ) ) ? get_option( 'home' ) . $link_url : $link_url;		$links_summary .= "\n" . $link_number . ' ' . $link_url;	}	$content  = strip_tags( $content );	$content .= $links_summary;	return $content;}/** * Retrieve translated string with vertical bar context * * Quite a few times, there will be collisions with similar translatable text * found in more than two places but with different translated context. * * In order to use the separate contexts, the _c() function is used and the * translatable string uses a pipe ('|') which has the context the string is in. * * When the translated string is returned, it is everything before the pipe, not * including the pipe character. If there is no pipe in the translated text then * everything is returned. * * @since 2.2.0 * @deprecated 2.9.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Optional. Domain to retrieve the translated text * @return string Translated context string without pipe */function _c( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * Translates $text like translate(), but assumes that the text * contains a context after its last vertical bar. * * @since 2.5 * @uses translate() * @deprecated 3.0.0 * @deprecated Use _x() * @see _x() * * @param string $text Text to translate * @param string $domain Domain to retrieve the translated text * @return string Translated text */function translate_with_context( $text, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_x()' );	return before_last_bar( translate( $text, $domain ) );}/** * A version of _n(), which supports contexts. * Strips everything from the translation after the last bar. * * @since 2.7.0 * @deprecated 3.0.0 * @deprecated Use _nx() * @see _nx() * @see _n() For parameters. * @see _c() For parameters. _c() is deprecated. * */function _nc( $single, $plural, $number, $domain = 'default' ) {	_deprecated_function( __FUNCTION__, '2.9', '_nx()' );	return before_last_bar( _n( $single, $plural, $number, $domain ) );}/** * Retrieve the plural or single form based on the amount. * * @since 1.2.0 * @deprecated 2.8.0 * @deprecated Use _n() * @see _n() */function __ngettext() {	_deprecated_function( __FUNCTION__, '2.8', '_n()' );	$args = func_get_args();	return call_user_func_array('_n', $args);}/** * Register plural strings in POT file, but don't translate them. * * @since 2.5 * @deprecated 2.8.0 * @deprecated Use _n_noop() * @see _n_noop() */function __ngettext_noop() {	_deprecated_function( __FUNCTION__, '2.8', '_n_noop()' );	$args = func_get_args();	return call_user_func_array('_n_noop', $args);}/** * Retrieve all autoload options, or all options if no autoloaded ones exist. * * @since 1.0.0 * @deprecated 3.0.0 * @deprecated Use wp_load_alloptions()) * @see wp_load_alloptions() * * @return array List of all options. */function get_alloptions() {	_deprecated_function( __FUNCTION__, '3.0', 'wp_load_alloptions()' );	return wp_load_alloptions();}/** * Retrieve HTML content of attachment image with link. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_link() * @see wp_get_attachment_link() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default is false. Whether to use full size image. * @param array $max_dims Optional. Max image dimensions. * @param bool $permalink Optional, default is false. Whether to include permalink to image. * @return string */function get_the_attachment_link($id = 0, $fullsize = false, $max_dims = false, $permalink = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_link()' );	$id = (int) $id;	$_post = & get_post($id);	if ( ('attachment' != $_post->post_type) || !$url = wp_get_attachment_url($_post->ID) )		return __('Missing Attachment');	if ( $permalink )		$url = get_attachment_link($_post->ID);	$post_title = esc_attr($_post->post_title);	$innerHTML = get_attachment_innerHTML($_post->ID, $fullsize, $max_dims);	return "<a href='$url' title='$post_title'>$innerHTML</a>";}/** * Retrieve icon URL and Path. * * @since 2.1.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image_src() * @see wp_get_attachment_image_src() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full image. * @return array Icon URL and full path to file, respectively. */function get_attachment_icon_src( $id = 0, $fullsize = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image_src()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	$file = get_attached_file( $post->ID );	if ( !$fullsize && $src = wp_get_attachment_thumb_url( $post->ID ) ) {		// We have a thumbnail desired, specified and existing		$src_file = basename($src);		$class = 'attachmentthumb';	} elseif ( wp_attachment_is_image( $post->ID ) ) {		// We have an image without a thumbnail		$src = wp_get_attachment_url( $post->ID );		$src_file = & $file;		$class = 'attachmentimage';	} elseif ( $src = wp_mime_type_icon( $post->ID ) ) {		// No thumb, no image. We'll look for a mime-related icon instead.		$icon_dir = apply_filters( 'icon_dir', get_template_directory() . '/images' );		$src_file = $icon_dir . '/' . basename($src);	}	if ( !isset($src) || !$src )		return false;	return array($src, $src_file);}/** * Retrieve HTML content of icon attachment image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string HTML content. */function get_attachment_icon( $id = 0, $fullsize = false, $max_dims = false ) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( !$src = get_attachment_icon_src( $post->ID, $fullsize ) )		return false;	list($src, $src_file) = $src;	// Do we need to constrain the image?	if ( ($max_dims = apply_filters('attachment_max_dims', $max_dims)) && file_exists($src_file) ) {		$imagesize = getimagesize($src_file);		if (($imagesize[0] > $max_dims[0]) || $imagesize[1] > $max_dims[1] ) {			$actual_aspect = $imagesize[0] / $imagesize[1];			$desired_aspect = $max_dims[0] / $max_dims[1];			if ( $actual_aspect >= $desired_aspect ) {				$height = $actual_aspect * $max_dims[0];				$constraint = "width='{$max_dims[0]}' ";				$post->iconsize = array($max_dims[0], $height);			} else {				$width = $max_dims[1] / $actual_aspect;				$constraint = "height='{$max_dims[1]}' ";				$post->iconsize = array($width, $max_dims[1]);			}		} else {			$post->iconsize = array($imagesize[0], $imagesize[1]);			$constraint = '';		}	} else {		$constraint = '';	}	$post_title = esc_attr($post->post_title);	$icon = "<img src='$src' title='$post_title' alt='$post_title' $constraint/>";	return apply_filters( 'attachment_icon', $icon, $post->ID );}/** * Retrieve HTML content of image element. * * @since 2.0.0 * @deprecated 2.5.0 * @deprecated Use wp_get_attachment_image() * @see wp_get_attachment_image() * * @param int $id Optional. Post ID. * @param bool $fullsize Optional, default to false. Whether to have full size image. * @param array $max_dims Optional. Dimensions of image. * @return string */function get_attachment_innerHTML($id = 0, $fullsize = false, $max_dims = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_get_attachment_image()' );	$id = (int) $id;	if ( !$post = & get_post($id) )		return false;	if ( $innerHTML = get_attachment_icon($post->ID, $fullsize, $max_dims))		return $innerHTML;	$innerHTML = esc_attr($post->post_title);	return apply_filters('attachment_innerHTML', $innerHTML, $post->ID);}/* * Retrieve bookmark data based on ID. * * @since 2.0.0 * @deprecated 2.1.0 * @deprecated Use get_bookmark() * @see get_bookmark() * * @param int $bookmark_id ID of link * @param string $output OBJECT, ARRAY_N, or ARRAY_A * @return object|array */function get_link($bookmark_id, $output = OBJECT, $filter = 'raw') {	_deprecated_function( __FUNCTION__, '2.1', 'get_bookmark()' );	return get_bookmark($bookmark_id, $output, $filter);}/** * Performs esc_url() for database or redirect usage. * * @since 2.3.1 * @deprecated 2.8.0 * @deprecated Use esc_url_raw() * @see esc_url_raw() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function sanitize_url( $url, $protocols = null ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_url_raw()' );	return esc_url_raw( $url, $protocols );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 1.2.0 * @deprecated 3.0.0 * @deprecated Use esc_url() * @see Alias for esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. * @param string $context Optional. How the URL will be used. Default is 'display'. * @return string The cleaned $url after the 'clean_url' filter is applied. */function clean_url( $url, $protocols = null, $context = 'display' ) {	if ( $context == 'db' )		_deprecated_function( 'clean_url( $context = \'db\' )', '3.0', 'esc_url_raw()' );	else		_deprecated_function( __FUNCTION__, '3.0', 'esc_url()' );	return esc_url( $url, $protocols, $context );}/** * Escape single quotes, specialchar double quotes, and fix line endings. * * The filter 'js_escape' is also applied by esc_js() * * @since 2.0.4 * @deprecated 2.8.0 * @deprecated Use esc_js() * @see esc_js() * * @param string $text The text to be escaped. * @return string Escaped text. */function js_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_js()' );	return esc_js( $text );}/** * Escaping for HTML blocks. * * @deprecated 2.8.0 * @deprecated Use esc_html() * @see esc_html() */function wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_html()' );	if ( func_num_args() > 1 ) { // Maintain backwards compat for people passing additional args		$args = func_get_args();		return call_user_func_array( '_wp_specialchars', $args );	} else {		return esc_html( $string );	}}/** * Escaping for HTML attributes. * * @since 2.0.6 * @deprecated 2.8.0 * @deprecated Use esc_attr() * @see esc_attr() * * @param string $text * @return string */function attribute_escape( $text ) {	_deprecated_function( __FUNCTION__, '2.8', 'esc_attr()' );	return esc_attr( $text );}/** * Register widget for sidebar with backwards compatibility. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_sidebar_widget()} after argument list and * backwards compatibility is complete. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_sidebar_widget() * @see wp_register_sidebar_widget() * * @param string|int $name Widget ID. * @param callback $output_callback Run when widget is called. * @param string $classname Classname widget option. * @param mixed $params,... Widget parameters. */function register_sidebar_widget($name, $output_callback, $classname = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_sidebar_widget()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($classname) && is_string($classname) )		$options['classname'] = $classname;	$params = array_slice(func_get_args(), 2);	$args = array($id, $name, $output_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_sidebar_widget', $args);}/** * Alias of {@link wp_unregister_sidebar_widget()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_sidebar_widget() * @see wp_unregister_sidebar_widget() * * @param int|string $id Widget ID. */function unregister_sidebar_widget($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_sidebar_widget()' );	return wp_unregister_sidebar_widget($id);}/** * Registers widget control callback for customizing options. * * Allows $name to be an array that accepts either three elements to grab the * first element and the third for the name or just uses the first element of * the array for the name. * * Passes to {@link wp_register_widget_control()} after the argument list has * been compiled. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_register_widget_control() * @see wp_register_widget_control() * * @param int|string $name Sidebar ID. * @param callback $control_callback Widget control callback to display and process form. * @param int $width Widget width. * @param int $height Widget height. */function register_widget_control($name, $control_callback, $width = '', $height = '') {	_deprecated_function( __FUNCTION__, '2.8', 'wp_register_widget_control()' );	// Compat	if ( is_array($name) ) {		if ( count($name) == 3 )			$name = sprintf($name[0], $name[2]);		else			$name = $name[0];	}	$id = sanitize_title($name);	$options = array();	if ( !empty($width) )		$options['width'] = $width;	if ( !empty($height) )		$options['height'] = $height;	$params = array_slice(func_get_args(), 4);	$args = array($id, $name, $control_callback, $options);	if ( !empty($params) )		$args = array_merge($args, $params);	call_user_func_array('wp_register_widget_control', $args);}/** * Alias of {@link wp_unregister_widget_control()}. * * @since 2.2.0 * @deprecated 2.8.0 * @deprecated Use wp_unregister_widget_control() * @see wp_unregister_widget_control() * * @param int|string $id Widget ID. */function unregister_widget_control($id) {	_deprecated_function( __FUNCTION__, '2.8', 'wp_unregister_widget_control()' );	return wp_unregister_widget_control($id);}/** * Remove user meta data. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use delete_user_meta() * @see delete_user_meta() * * @param int $user_id User ID. * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True deletion completed and false if user_id is not a number. */function delete_usermeta( $user_id, $meta_key, $meta_value = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'delete_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	if ( is_array($meta_value) || is_object($meta_value) )		$meta_value = serialize($meta_value);	$meta_value = trim( $meta_value );	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur && $cur->umeta_id )		do_action( 'delete_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( ! empty($meta_value) )		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s AND meta_value = %s", $user_id, $meta_key, $meta_value) );	else		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	wp_cache_delete($user_id, 'users');	if ( $cur && $cur->umeta_id )		do_action( 'deleted_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Retrieve user metadata. * * If $user_id is not a number, then the function will fail over with a 'false' * boolean return value. Other returned values depend on whether there is only * one item to be returned, which be that single item type. If there is more * than one metadata value, then it will be list of metadata values. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use get_user_meta() * @see get_user_meta() * * @param int $user_id User ID * @param string $meta_key Optional. Metadata key. * @return mixed */function get_usermeta( $user_id, $meta_key = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_meta()' );	global $wpdb;	$user_id = (int) $user_id;	if ( !$user_id )		return false;	if ( !empty($meta_key) ) {		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);		$user = wp_cache_get($user_id, 'users');		// Check the cached user object		if ( false !== $user && isset($user->$meta_key) )			$metas = array($user->$meta_key);		else			$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	} else {		$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d", $user_id) );	}	if ( empty($metas) ) {		if ( empty($meta_key) )			return array();		else			return '';	}	$metas = array_map('maybe_unserialize', $metas);	if ( count($metas) == 1 )		return $metas[0];	else		return $metas;}/** * Update metadata of user. * * There is no need to serialize values, they will be serialized if it is * needed. The metadata key can only be a string with underscores. All else will * be removed. * * Will remove the metadata, if the meta value is empty. * * @since 2.0.0 * @deprecated 3.0.0 * @deprecated Use update_user_meta() * @see update_user_meta() * * @param int $user_id User ID * @param string $meta_key Metadata key. * @param mixed $meta_value Metadata value. * @return bool True on successful update, false on failure. */function update_usermeta( $user_id, $meta_key, $meta_value ) {	_deprecated_function( __FUNCTION__, '3.0', 'update_user_meta()' );	global $wpdb;	if ( !is_numeric( $user_id ) )		return false;	$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);	/** @todo Might need fix because usermeta data is assumed to be already escaped */	if ( is_string($meta_value) )		$meta_value = stripslashes($meta_value);	$meta_value = maybe_serialize($meta_value);	if (empty($meta_value)) {		return delete_usermeta($user_id, $meta_key);	}	$cur = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->usermeta WHERE user_id = %d AND meta_key = %s", $user_id, $meta_key) );	if ( $cur )		do_action( 'update_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	if ( !$cur )		$wpdb->insert($wpdb->usermeta, compact('user_id', 'meta_key', 'meta_value') );	else if ( $cur->meta_value != $meta_value )		$wpdb->update($wpdb->usermeta, compact('meta_value'), compact('user_id', 'meta_key') );	else		return false;	wp_cache_delete($user_id, 'users');	if ( !$cur )		do_action( 'added_usermeta', $wpdb->insert_id, $user_id, $meta_key, $meta_value );	else		do_action( 'updated_usermeta', $cur->umeta_id, $user_id, $meta_key, $meta_value );	return true;}/** * Enable/disable automatic general feed link outputting. * * @since 2.8.0 * @deprecated 3.0.0 * @deprecated Use add_theme_support( 'automatic-feed-links' ) * * @param boolean $add Optional, default is true. Add or remove links. Defaults to true. */function automatic_feed_links( $add = true ) {	_deprecated_function( __FUNCTION__, '3.0', "add_theme_support( 'automatic-feed-links' )" );	if ( $add )		add_theme_support( 'automatic-feed-links' );	else		remove_action( 'wp_head', 'feed_links_extra', 3 ); // Just do this yourself in 3.0+}/** * Retrieve user data based on field. * * @since 1.5.0 * @deprecated 3.0.0 * @deprecated Use get_the_author_meta() * @see get_the_author_meta() */function get_profile( $field, $user = false ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_the_author_meta()' );	if ( $user ) {		$user = get_user_by( 'login', $user );		$user = $user->ID;	}	return get_the_author_meta( $field, $user );}/** * Number of posts user has written. * * @since 0.71 * @deprecated 3.0.0 * @deprecated Use count_user_posts() * @see count_user_posts() */function get_usernumposts( $userid ) {	_deprecated_function( __FUNCTION__, '3.0', 'count_user_posts()' );	return count_user_posts( $userid );}/** * Callback used to change %uXXXX to &#YYY; syntax * * @since 2.8.0 * @access private * @deprecated 3.0.0 * * @param array $matches Single Match * @return string An HTML entity */function funky_javascript_callback($matches) {	return "&#".base_convert($matches[1],16,10).";";}/** * Fixes javascript bugs in browsers. * * Converts unicode characters to HTML numbered entities. * * @since 1.5.0 * @uses $is_macIE * @uses $is_winIE * @deprecated 3.0.0 * * @param string $text Text to be made safe. * @return string Fixed text. */function funky_javascript_fix($text) {	_deprecated_function( __FUNCTION__, '3.0' );	// Fixes for browsers' javascript bugs	global $is_macIE, $is_winIE;	if ( $is_winIE || $is_macIE )		$text =  preg_replace_callback("/\%u([0-9A-F]{4,4})/",					"funky_javascript_callback",					$text);	return $text;}/** * Generates and displays the RDF for the trackback information of current post. * * @since 0.71 * @deprecated 3.0.0 * * @param int $deprecated Not used (Was $timezone = 0) */function trackback_rdf($deprecated = '') {	_deprecated_function( __FUNCTION__, '3.0' );	return '';}/** * Checks that the taxonomy name exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use taxonomy_exists() * @see taxonomy_exists() * * @param string $taxonomy Name of taxonomy object * @return bool Whether the taxonomy exists. */function is_taxonomy( $taxonomy ) {	_deprecated_function( __FUNCTION__, '3.0', 'taxonomy_exists()' );	return taxonomy_exists( $taxonomy );}/** * Check if Term exists. * * @since 2.3.0 * @deprecated 3.0.0 * @deprecated Use term_exists() * @see term_exists() * * @param int|string $term The term to check * @param string $taxonomy The taxonomy name to use * @param int $parent ID of parent term under which to confine the exists search. * @return mixed Get the term id or Term Object, if exists. */function is_term( $term, $taxonomy = '', $parent = 0 ) {	_deprecated_function( __FUNCTION__, '3.0', 'term_exists()' );	return term_exists( $term, $taxonomy, $parent );}
<?php/** * WordPress Plugin Install Administration API * * @package WordPress * @subpackage Administration *//** * Retrieve plugin installer pages from WordPress Plugins API. * * It is possible for a plugin to override the Plugin API result with three * filters. Assume this is for plugins, which can extend on the Plugin Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'plugins_api_args', is for the args and gives the action as * the second parameter. The hook for 'plugins_api_args' must ensure that an * object is returned. * * The second filter, 'plugins_api', is the result that would be returned. * * @since 2.7.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Plugin Info API. * @return object plugins_api response object on success, WP_Error on failure. */function plugins_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	// Allows a plugin to override the WordPress.org API entirely.	// Use the filter 'plugins_api_result' to mearly add results.	// Please ensure that a object is returned from the following filters.	$args = apply_filters('plugins_api_args', $args, $action);	$res = apply_filters('plugins_api', false, $action, $args);	if ( false === $res ) {		$request = wp_remote_post('http://api.wordpress.org/plugins/info/1.0/', array( 'timeout' => 15, 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('plugins_api_failed', __('An Unexpected HTTP Error occurred during the API request.'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( false === $res )				$res = new WP_Error('plugins_api_failed', __('An unknown error occurred.'), $request['body']);		}	} elseif ( !is_wp_error($res) ) {		$res->external = true;	}	return apply_filters('plugins_api_result', $res, $action, $args);}/** * Retrieve popular WordPress plugin tags. * * @since 2.7.0 * * @param array $args * @return array */function install_popular_tags( $args = array() ) {	if ( ! ($cache = wp_cache_get('popular_tags', 'api')) && ! ($cache = get_option('wporg_popular_tags')) )		add_option('wporg_popular_tags', array(), '', 'no'); ///No autoload.	if ( $cache && $cache->timeout + 3 * 60 * 60 > time() )		return $cache->cached;	$tags = plugins_api('hot_tags', $args);	if ( is_wp_error($tags) )		return $tags;	$cache = (object) array('timeout' => time(), 'cached' => $tags);	update_option('wporg_popular_tags', $cache);	wp_cache_set('popular_tags', $cache, 'api');	return $tags;}add_action('install_plugins_search', 'install_search', 10, 1);/** * Display search results and display as tag cloud. * * @since 2.7.0 * * @param string $page */function install_search($page) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$args['tag'] = sanitize_title_with_dashes($term);			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_plugins_table_header', 'install_search_form');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);	return;}add_action('install_plugins_dashboard', 'install_dashboard');function install_dashboard() {	?>	<p><?php _e('Plugins extend and expand the functionality of WordPress. You may automatically install plugins from the <a href="http://wordpress.org/extend/plugins/">WordPress Plugin Directory</a> or upload a plugin in .zip format via this page.') ?></p>	<h4><?php _e('Search') ?></h4>	<p class="install-help"><?php _e('Search for plugins by keyword, author, or tag.') ?></p>	<?php install_search_form(); ?>	<h4><?php _e('Popular tags') ?></h4>	<p class="install-help"><?php _e('You may also browse based on the most popular tags in the Plugin Directory:') ?></p>	<?php	$api_tags = install_popular_tags();	echo '<p class="popular-tags">';	if ( is_wp_error($api_tags) ) {		echo $api_tags->get_error_message();	} else {		//Set up the tags in a way which can be interprated by wp_generate_tag_cloud()		$tags = array();		foreach ( (array)$api_tags as $tag )			$tags[ $tag['name'] ] = (object) array(									'link' => esc_url( admin_url('plugin-install.php?tab=search&type=tag&s=' . urlencode($tag['name'])) ),									'name' => $tag['name'],									'id' => sanitize_title_with_dashes($tag['name']),									'count' => $tag['count'] );		echo wp_generate_tag_cloud($tags, array( 'single_text' => __('%d plugin'), 'multiple_text' => __('%d plugins') ) );	}	echo '</p><br class="clear" />';}/** * Display search form for searching plugins. * * @since 2.7.0 */function install_search_form(){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><form id="search-plugins" method="post" action="<?php echo admin_url('plugin-install.php?tab=search'); ?>">		<select name="type" id="typeselector">			<option value="term"<?php selected('term', $type) ?>><?php _e('Term'); ?></option>			<option value="author"<?php selected('author', $type) ?>><?php _e('Author'); ?></option>			<option value="tag"<?php selected('tag', $type) ?>><?php _ex('Tag', 'Plugin Installer'); ?></option>		</select>		<input type="text" name="s" value="<?php echo esc_attr($term) ?>" />		<label class="screen-reader-text" for="plugin-search-input"><?php _e('Search Plugins'); ?></label>		<input type="submit" id="plugin-search-input" name="search" value="<?php esc_attr_e('Search Plugins'); ?>" class="button" />	</form><?php}add_action('install_plugins_featured', 'install_featured', 10, 1);/** * Display featured plugins. * * @since 2.7.0 * * @param string $page */function install_featured($page = 1) {	$args = array('browse' => 'featured', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_popular', 'install_popular', 10, 1);/** * Display popular plugins. * * @since 2.7.0 * * @param string $page */function install_popular($page = 1) {	$args = array('browse' => 'popular', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_upload', 'install_plugins_upload', 10, 1);/** * Upload from zip * @since 2.8.0 * * @param string $page */function install_plugins_upload( $page = 1 ) {?>	<h4><?php _e('Install a plugin in .zip format') ?></h4>	<p class="install-help"><?php _e('If you have a plugin in a .zip format, you may install it by uploading it here.') ?></p>	<form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-plugin') ?>">		<?php wp_nonce_field( 'plugin-upload') ?>		<label class="screen-reader-text" for="pluginzip"><?php _e('Plugin zip file'); ?></label>		<input type="file" id="pluginzip" name="pluginzip" />		<input type="submit" class="button" value="<?php esc_attr_e('Install Now') ?>" />	</form><?php}add_action('install_plugins_new', 'install_new', 10, 1);/** * Display new plugins. * * @since 2.7.0 * * @param string $page */function install_new($page = 1) {	$args = array('browse' => 'new', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_updated', 'install_updated', 10, 1);/** * Display recently updated plugins. * * @since 2.7.0 * * @param string $page */function install_updated($page = 1) {	$args = array('browse' => 'updated', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}/** * Display plugin content based on plugin list. * * @since 2.7.0 * * @param array $plugins List of plugins. * @param string $page * @param int $totalpages Number of pages. */function display_plugins_table($plugins, $page = 1, $totalpages = 1){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array(), 'target' => array()),								'abbr' => array('title' => array()),'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(),'strong' => array(),								'ul' => array(), 'ol' => array(), 'li' => array(), 'p' => array(), 'br' => array());?>	<div class="tablenav">		<div class="alignleft actions">		<?php do_action('install_plugins_table_header'); ?>		</div>		<?php			$url = esc_url($_SERVER['REQUEST_URI']);			if ( ! empty($term) )				$url = add_query_arg('s', $term, $url);			if ( ! empty($type) )				$url = add_query_arg('type', $type, $url);			$page_links = paginate_links( array(				'base' => add_query_arg('paged', '%#%', $url),				'format' => '',				'prev_text' => __('&laquo;'),				'next_text' => __('&raquo;'),				'total' => $totalpages,				'current' => $page			));			if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>";?>		<br class="clear" />	</div>	<table class="widefat" id="install-plugins" cellspacing="0">		<thead>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</thead>		<tfoot>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</tfoot>		<tbody class="plugins">		<?php			if ( empty($plugins) )				echo '<tr><td colspan="5">', __('No plugins match your request.'), '</td></tr>';			foreach ( (array) $plugins as $plugin ){				if ( is_object($plugin) )					$plugin = (array) $plugin;				$title = wp_kses($plugin['name'], $plugins_allowedtags);				//Limit description to 400char, and remove any HTML.				$description = strip_tags($plugin['description']);				if ( strlen($description) > 400 )					$description = mb_substr($description, 0, 400) . '&#8230;';				//remove any trailing entities				$description = preg_replace('/&[^;\s]{0,6}$/', '', $description);				//strip leading/trailing & multiple consecutive lines				$description = trim($description);				$description = preg_replace("|(\r?\n)+|", "\n", $description);				//\n => <br>				$description = nl2br($description);				$version = wp_kses($plugin['version'], $plugins_allowedtags);				$name = strip_tags($title . ' ' . $version);				$author = $plugin['author'];				if ( ! empty($plugin['author']) )					$author = ' <cite>' . sprintf( __('By %s'), $author ) . '.</cite>';				$author = wp_kses($author, $plugins_allowedtags);				$action_links = array();				$action_links[] = '<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $plugin['slug'] .									'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox" title="' .									esc_attr( sprintf( __( 'More information about %s' ), $name ) ) . '">' . __('Details') . '</a>';				if ( current_user_can('install_plugins') || current_user_can('update_plugins') ) {					$status = install_plugin_install_status($plugin);					switch ( $status['status'] ) {						case 'install':							if ( $status['url'] )								$action_links[] = '<a class="install-now" href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Install %s' ), $name ) ) . '">' . __('Install Now') . '</a>';							break;						case 'update_available':							if ( $status['url'] )								$action_links[] = '<a href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Update to version %s' ), $status['version'] ) ) . '">' . sprintf( __('Update Now'), $status['version'] ) . '</a>';							break;						case 'latest_installed':						case 'newer_installed':							$action_links[] = '<span title="' . esc_attr__( 'This plugin is already installed and is up to date' ) . ' ">' . __('Installed') . '</span>';							break;					}				}				$action_links = apply_filters( 'plugin_install_action_links', $action_links, $plugin );			?>			<tr>				<td class="name"><strong><?php echo $title; ?></strong>					<div class="action-links"><?php if ( !empty($action_links) ) echo implode(' | ', $action_links); ?></div>				</td>				<td class="vers"><?php echo $version; ?></td>				<td class="vers">					<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $plugin['num_ratings']), number_format_i18n($plugin['num_ratings'])) ?>">						<div class="star star-rating" style="width: <?php echo esc_attr($plugin['rating']) ?>px"></div>						<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>						<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>						<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>						<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>						<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>					</div>				</td>				<td class="desc"><?php echo $description, $author; ?></td>			</tr>			<?php			}			?>		</tbody>	</table>	<div class="tablenav">		<?php if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?>		<br class="clear" />	</div><?php}add_action('install_plugins_pre_plugin-information', 'install_plugin_information');/** * Determine the status we can perform on a plugin. * * @since 3.0.0 */function install_plugin_install_status($api, $loop = false) {	// this function is called recursivly, $loop prevents futhur loops.	if ( is_array($api) )		$api = (object) $api;	//Default to a "new" plugin	$status = 'install';	$url = false;	//Check to see if this plugin is known to be installed, and has an update awaiting it.	$update_plugins = get_site_transient('update_plugins');	if ( is_object( $update_plugins ) ) {		foreach ( (array)$update_plugins->response as $file => $plugin ) {			if ( $plugin->slug === $api->slug ) {				$status = 'update_available';				$update_file = $file;				$version = $plugin->new_version;				if ( current_user_can('update_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=upgrade-plugin&plugin=' . $update_file), 'upgrade-plugin_' . $update_file);				break;			}		}	}	if ( 'install' == $status ) {		if ( is_dir( WP_PLUGIN_DIR  . '/' . $api->slug ) ) {			$installed_plugin = get_plugins('/' . $api->slug);			if ( empty($installed_plugin) ) {				if ( current_user_can('install_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);			} else {				$key = array_shift( $key = array_keys($installed_plugin) ); //Use the first plugin regardless of the name, Could have issues for multiple-plugins in one directory if they share different version numbers				if ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '=') ){					$status = 'latest_installed';				} elseif ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '<') ) {					$status = 'newer_installed';					$version = $installed_plugin[ $key ]['Version'];				} else {					//If the above update check failed, Then that probably means that the update checker has out-of-date information, force a refresh					if ( ! $loop ) {						delete_site_transient('update_plugins');						wp_update_plugins();						return install_plugin_install_status($api, true);					}				}			}		} else {			// "install" & no directory with that slug			if ( current_user_can('install_plugins') )				$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);		}	}	if ( isset($_GET['from']) )		$url .= '&amp;from=' . urlencode(stripslashes($_GET['from']));	return compact('status', 'url', 'version');}/** * Display plugin information in dialog box form. * * @since 2.7.0 */function install_plugin_information() {	global $tab;	$api = plugins_api('plugin_information', array('slug' => stripslashes( $_REQUEST['plugin'] ) ));	if ( is_wp_error($api) )		wp_die($api);	$plugins_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),								'abbr' => array('title' => array()), 'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),								'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),								'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),								'img' => array('src' => array(), 'class' => array(), 'alt' => array()));	//Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $plugins_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key )		$api->$key = wp_kses($api->$key, $plugins_allowedtags);	$section = isset($_REQUEST['section']) ? stripslashes( $_REQUEST['section'] ) : 'description'; //Default to the Description tab, Do not translate, API returns English.	if ( empty($section) || ! isset($api->sections[ $section ]) )		$section = array_shift( $section_titles = array_keys((array)$api->sections) );	iframe_header( __('Plugin Install') );	echo "<div id='$tab-header'>\n";	echo "<ul id='sidemenu'>\n";	foreach ( (array)$api->sections as $section_name => $content ) {		$title = $section_name;		$title = ucwords(str_replace('_', ' ', $title));		$class = ( $section_name == $section ) ? ' class="current"' : '';		$href = add_query_arg( array('tab' => $tab, 'section' => $section_name) );		$href = esc_url($href);		$san_title = esc_attr(sanitize_title_with_dashes($title));		echo "\t<li><a name='$san_title' target='' href='$href'$class>$title</a></li>\n";	}	echo "</ul>\n";	echo "</div>\n";	?>	<div class="alignright fyi">		<?php if ( ! empty($api->download_link) && ( current_user_can('install_plugins') || current_user_can('update_plugins') ) ) : ?>		<p class="action-button">		<?php		$status = install_plugin_install_status($api);		switch ( $status['status'] ) {			case 'install':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Now') . '</a>';				break;			case 'update_available':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Update Now') .'</a>';				break;			case 'newer_installed':				echo '<a>' . sprintf(__('Newer Version (%s) Installed'), $status['version']) . '</a>';				break;			case 'latest_installed':				echo '<a>' . __('Latest Version Installed') . '</a>';				break;		}		?>		</p>		<?php endif; ?>		<h2 class="mainheader"><?php /* translators: For Your Information */ _e('FYI') ?></h2>		<ul><?php if ( ! empty($api->version) ) : ?>			<li><strong><?php _e('Version:') ?></strong> <?php echo $api->version ?></li><?php endif; if ( ! empty($api->author) ) : ?>			<li><strong><?php _e('Author:') ?></strong> <?php echo links_add_target($api->author, '_blank') ?></li><?php endif; if ( ! empty($api->last_updated) ) : ?>			<li><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $api->last_updated ?>"><?php							printf( __('%s ago'), human_time_diff(strtotime($api->last_updated)) ) ?></span></li><?php endif; if ( ! empty($api->requires) ) : ?>			<li><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $api->requires) ?></li><?php endif; if ( ! empty($api->tested) ) : ?>			<li><strong><?php _e('Compatible up to:') ?></strong> <?php echo $api->tested ?></li><?php endif; if ( ! empty($api->downloaded) ) : ?>			<li><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $api->downloaded), number_format_i18n($api->downloaded)) ?></li><?php endif; if ( ! empty($api->slug) && empty($api->external) ) : ?>			<li><a target="_blank" href="http://wordpress.org/extend/plugins/<?php echo $api->slug ?>/"><?php _e('WordPress.org Plugin Page &#187;') ?></a></li><?php endif; if ( ! empty($api->homepage) ) : ?>			<li><a target="_blank" href="<?php echo $api->homepage ?>"><?php _e('Plugin Homepage  &#187;') ?></a></li><?php endif; ?>		</ul>		<?php if ( ! empty($api->rating) ) : ?>		<h2><?php _e('Average Rating') ?></h2>		<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?>">			<div class="star star-rating" style="width: <?php echo esc_attr($api->rating) ?>px"></div>			<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>			<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>			<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>			<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>			<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>		</div>		<small><?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?></small>		<?php endif; ?>	</div>	<div id="section-holder" class="wrap">	<?php		if ( !empty($api->tested) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->tested)), $api->tested, '>') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';		else if ( !empty($api->requires) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->requires)), $api->requires, '<') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been marked as compatible</strong> with your version of WordPress.') . '</p></div>';		foreach ( (array)$api->sections as $section_name => $content ) {			$title = $section_name;			$title[0] = strtoupper($title[0]);			$title = str_replace('_', ' ', $title);			$content = links_add_base_url($content, 'http://wordpress.org/extend/plugins/' . $api->slug . '/');			$content = links_add_target($content, '_blank');			$san_title = esc_attr(sanitize_title_with_dashes($title));			$display = ( $section_name == $section ) ? 'block' : 'none';			echo "\t<div id='section-{$san_title}' class='section' style='display: {$display};'>\n";			echo "\t\t<h2 class='long-header'>$title</h2>";			echo $content;			echo "\t</div>\n";		}	echo "</div>\n";	iframe_footer();	exit;}
<?php/** * Canonical API to handle WordPress Redirecting * * Based on "Permalink Redirect" from Scott Yang and "Enforce www. Preference" * by Mark Jaquith * * @package WordPress * @since 2.3.0 *//** * Redirects incoming links to the proper URL based on the site url. * * Search engines consider www.somedomain.com and somedomain.com to be two * different URLs when they both go to the same location. This SEO enhancement * prevents penality for duplicate content by redirecting all incoming links to * one or the other. * * Prevents redirection for feeds, trackbacks, searches, comment popup, and * admin URLs. Does not redirect on IIS, page/post previews, and on form data. * * Will also attempt to find the correct link when a user enters a URL that does * not exist based on exact WordPress query. Will instead try to parse the URL * or query in an attempt to figure the correct page to go to. * * @since 2.3.0 * @uses $wp_rewrite * @uses $is_IIS * * @param string $requested_url Optional. The URL that was requested, used to *		figure if redirect is needed. * @param bool $do_redirect Optional. Redirect to the new URL. * @return null|false|string Null, if redirect not needed. False, if redirect *		not needed or the string of the URL */function redirect_canonical($requested_url=null, $do_redirect=true) {	global $wp_rewrite, $is_IIS, $wp_query, $wpdb;	if ( is_trackback() || is_search() || is_comments_popup() || is_admin() || $is_IIS || ( isset($_POST) && count($_POST) ) || is_preview() || is_robots() )		return;	if ( !$requested_url ) {		// build the URL in the address bar		$requested_url  = is_ssl() ? 'https://' : 'http://';		$requested_url .= $_SERVER['HTTP_HOST'];		$requested_url .= $_SERVER['REQUEST_URI'];	}	$original = @parse_url($requested_url);	if ( false === $original )		return;	// Some PHP setups turn requests for / into /index.php in REQUEST_URI	// See: http://trac.wordpress.org/ticket/5017	// See: http://trac.wordpress.org/ticket/7173	// Disabled, for now:	// $original['path'] = preg_replace('|/index\.php$|', '/', $original['path']);	$redirect = $original;	$redirect_url = false;	// Notice fixing	if ( !isset($redirect['path']) )		$redirect['path'] = '';	if ( !isset($redirect['query']) )		$redirect['query'] = '';	if ( is_singular() && 1 > $wp_query->post_count && ($id = get_query_var('p')) ) {		$vars = $wpdb->get_results( $wpdb->prepare("SELECT post_type, post_parent FROM $wpdb->posts WHERE ID = %d", $id) );		if ( isset($vars[0]) && $vars = $vars[0] ) {			if ( 'revision' == $vars->post_type && $vars->post_parent > 0 )				$id = $vars->post_parent;			if ( $redirect_url = get_permalink($id) )				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);		}	}	// These tests give us a WP-generated permalink	if ( is_404() ) {		// Redirect ?page_id, ?p=, ?attachment_id= to their respective url's		$id = max( get_query_var('p'), get_query_var('page_id'), get_query_var('attachment_id') );		if ( $id && $redirect_post = get_post($id) ) {			$post_type_obj = get_post_type_object($redirect_post->post_type);			if ( $post_type_obj->public ) {				$redirect_url = get_permalink($redirect_post);				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);			}		}		if ( ! $redirect_url )			$redirect_url = redirect_guess_404_permalink();	} elseif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() ) {		// rewriting of old ?p=X, ?m=2004, ?m=200401, ?m=20040101		if ( is_attachment() && !empty($_GET['attachment_id']) && ! $redirect_url ) {			if ( $redirect_url = get_attachment_link(get_query_var('attachment_id')) )				$redirect['query'] = remove_query_arg('attachment_id', $redirect['query']);		} elseif ( is_single() && !empty($_GET['p']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('p')) )				$redirect['query'] = remove_query_arg(array('p', 'post_type'), $redirect['query']);			if ( get_query_var( 'page' ) ) {				$redirect_url = trailingslashit( $redirect_url ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );				$redirect['query'] = remove_query_arg( 'page', $redirect['query'] );			}		} elseif ( is_single() && !empty($_GET['name'])  && ! $redirect_url ) {			if ( $redirect_url = get_permalink( $wp_query->get_queried_object_id() ) )				$redirect['query'] = remove_query_arg('name', $redirect['query']);		} elseif ( is_page() && !empty($_GET['page_id']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('page_id')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( is_page() && !is_feed() && isset($wp_query->queried_object) && 'page' == get_option('show_on_front') && $wp_query->queried_object->ID == get_option('page_on_front')  && ! $redirect_url ) {			$redirect_url = home_url('/');		} elseif ( is_home() && !empty($_GET['page_id']) && 'page' == get_option('show_on_front') && get_query_var('page_id') == get_option('page_for_posts')  && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_option('page_for_posts')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( !empty($_GET['m']) && ( is_year() || is_month() || is_day() ) ) {			$m = get_query_var('m');			switch ( strlen($m) ) {				case 4: // Yearly					$redirect_url = get_year_link($m);					break;				case 6: // Monthly					$redirect_url = get_month_link( substr($m, 0, 4), substr($m, 4, 2) );					break;				case 8: // Daily					$redirect_url = get_day_link(substr($m, 0, 4), substr($m, 4, 2), substr($m, 6, 2));					break;			}			if ( $redirect_url )				$redirect['query'] = remove_query_arg('m', $redirect['query']);		// now moving on to non ?m=X year/month/day links		} elseif ( is_day() && get_query_var('year') && get_query_var('monthnum') && !empty($_GET['day']) ) {			if ( $redirect_url = get_day_link(get_query_var('year'), get_query_var('monthnum'), get_query_var('day')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum', 'day'), $redirect['query']);		} elseif ( is_month() && get_query_var('year') && !empty($_GET['monthnum']) ) {			if ( $redirect_url = get_month_link(get_query_var('year'), get_query_var('monthnum')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum'), $redirect['query']);		} elseif ( is_year() && !empty($_GET['year']) ) {			if ( $redirect_url = get_year_link(get_query_var('year')) )				$redirect['query'] = remove_query_arg('year', $redirect['query']);		} elseif ( is_author() && !empty($_GET['author']) && preg_match( '|^[0-9]+$|', $_GET['author'] ) ) {			$author = get_userdata(get_query_var('author'));			if ( false !== $author && $redirect_url = get_author_posts_url($author->ID, $author->user_nicename) )				$redirect['query'] = remove_query_arg('author', $redirect['query']);		} elseif ( is_category() || is_tag() || is_tax() ) { // Terms (Tags/categories)			$term_count = 0;			foreach ( array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and') as $key )				$term_count += count($wp_query->query_vars[$key]);			$obj = $wp_query->get_queried_object();			if ( $term_count <= 1 && !empty($obj->term_id) && ( $tax_url = get_term_link((int)$obj->term_id, $obj->taxonomy) ) && !is_wp_error($tax_url) ) {				if ( is_category() ) {					$redirect['query'] = remove_query_arg( array( 'category_name', 'category', 'cat'), $redirect['query']);				} elseif ( is_tag() ) {					$redirect['query'] = remove_query_arg( array( 'tag', 'tag_id'), $redirect['query']);				} elseif ( is_tax() ) { // Custom taxonomies will have a custom query var, remove those too:					$tax = get_taxonomy( $obj->taxonomy );					if ( false !== $tax->query_var)						$redirect['query'] = remove_query_arg($tax->query_var, $redirect['query']);					else						$redirect['query'] = remove_query_arg( array( 'term', 'taxonomy'), $redirect['query']);				}				$tax_url = parse_url($tax_url);				if ( ! empty($tax_url['query']) ) { // Custom taxonomies may only be accessable via ?taxonomy=..&term=..					parse_str($tax_url['query'], $query_vars);					$redirect['query'] = add_query_arg($query_vars, $redirect['query']);				} else { // Taxonomy is accessable via a "pretty-URL"					$redirect['path'] = $tax_url['path'];				}			}		} elseif ( is_single() && strpos($wp_rewrite->permalink_structure, '%category%') !== false ) {			$category = get_term_by('slug', get_query_var('category_name'), 'category');			$post_terms = wp_get_object_terms($wp_query->get_queried_object_id(), 'category', array('fields' => 'tt_ids'));			if ( (!$category || is_wp_error($category)) || ( !is_wp_error($post_terms) && !empty($post_terms) && !in_array($category->term_taxonomy_id, $post_terms) ) )				$redirect_url = get_permalink($wp_query->get_queried_object_id());		}		// paging and feeds		if ( get_query_var('paged') || is_feed() || get_query_var('cpage') ) {			if ( !$redirect_url )				$redirect_url = $requested_url;			$paged_redirect = @parse_url($redirect_url);			while ( preg_match( '#/page/?[0-9]+?(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/(comments/?)?(feed|rss|rdf|atom|rss2)(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/comment-page-[0-9]+(/+)?$#', $paged_redirect['path'] ) ) {				// Strip off paging and feed				$paged_redirect['path'] = preg_replace('#/page/?[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing paging				$paged_redirect['path'] = preg_replace('#/(comments/?)?(feed|rss2?|rdf|atom)(/+|$)#', '/', $paged_redirect['path']); // strip off feed endings				$paged_redirect['path'] = preg_replace('#/comment-page-[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing comment paging			}			$addl_path = '';			if ( is_feed() ) {				$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';				if ( get_query_var( 'withcomments' ) )					$addl_path .= 'comments/';				$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() ==  get_query_var('feed') || 'feed' == get_query_var('feed') ) ? '' : get_query_var('feed') ), 'feed' );				$redirect['query'] = remove_query_arg( 'feed', $redirect['query'] );			}			if ( get_query_var('paged') > 0 ) {				$paged = get_query_var('paged');				$redirect['query'] = remove_query_arg( 'paged', $redirect['query'] );				if ( !is_feed() ) {					if ( $paged > 1 && !is_single() ) {						$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit("page/$paged", 'paged');					} elseif ( !is_single() ) {						$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';					}				} elseif ( $paged > 1 ) {					$redirect['query'] = add_query_arg( 'paged', $paged, $redirect['query'] );				}			}			if ( get_option('page_comments') && ( ( 'newest' == get_option('default_comments_page') && get_query_var('cpage') > 0 ) || ( 'newest' != get_option('default_comments_page') && get_query_var('cpage') > 1 ) ) ) {				$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit( 'comment-page-' . get_query_var('cpage'), 'commentpaged' );				$redirect['query'] = remove_query_arg( 'cpage', $redirect['query'] );			}			$paged_redirect['path'] = user_trailingslashit( preg_replace('|/index.php/?$|', '/', $paged_redirect['path']) ); // strip off trailing /index.php/			if ( !empty( $addl_path ) && $wp_rewrite->using_index_permalinks() && strpos($paged_redirect['path'], '/index.php/') === false )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . 'index.php/';			if ( !empty( $addl_path ) )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . $addl_path;			$redirect_url = $paged_redirect['scheme'] . '://' . $paged_redirect['host'] . $paged_redirect['path'];			$redirect['path'] = $paged_redirect['path'];		}	}	// tack on any additional query vars	$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	if ( $redirect_url && !empty($redirect['query']) ) {		if ( strpos($redirect_url, '?') !== false )			$redirect_url .= '&';		else			$redirect_url .= '?';		$redirect_url .= $redirect['query'];	}	if ( $redirect_url )		$redirect = @parse_url($redirect_url);	// www.example.com vs example.com	$user_home = @parse_url(home_url());	if ( !empty($user_home['host']) )		$redirect['host'] = $user_home['host'];	if ( empty($user_home['path']) )		$user_home['path'] = '/';	// Handle ports	if ( !empty($user_home['port']) )		$redirect['port'] = $user_home['port'];	else		unset($redirect['port']);	// trailing /index.php	$redirect['path'] = preg_replace('|/index.php/*?$|', '/', $redirect['path']);	// Remove trailing spaces from the path	$redirect['path'] = preg_replace( '#(%20| )+$#', '', $redirect['path'] );	if ( !empty( $redirect['query'] ) ) {		// Remove trailing spaces from certain terminating query string args		$redirect['query'] = preg_replace( '#((p|page_id|cat|tag)=[^&]*?)(%20| )+$#', '$1', $redirect['query'] );		// Clean up empty query strings		$redirect['query'] = trim(preg_replace( '#(^|&)(p|page_id|cat|tag)=?(&|$)#', '&', $redirect['query']), '&');		// Remove redundant leading ampersands		$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	}	// strip /index.php/ when we're not using PATHINFO permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$redirect['path'] = str_replace('/index.php/', '/', $redirect['path']);	// trailing slashes	if ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() && !is_404() && (!is_front_page() || ( is_front_page() && (get_query_var('paged') > 1) ) ) ) {		$user_ts_type = '';		if ( get_query_var('paged') > 0 ) {			$user_ts_type = 'paged';		} else {			foreach ( array('single', 'category', 'page', 'day', 'month', 'year', 'home') as $type ) {				$func = 'is_' . $type;				if ( call_user_func($func) ) {					$user_ts_type = $type;					break;				}			}		}		$redirect['path'] = user_trailingslashit($redirect['path'], $user_ts_type);	} elseif ( is_front_page() ) {		$redirect['path'] = trailingslashit($redirect['path']);	}	// Strip multiple slashes out of the URL	if ( strpos($redirect['path'], '//') > -1 )		$redirect['path'] = preg_replace('|/+|', '/', $redirect['path']);	// Always trailing slash the Front Page URL	if ( trailingslashit( $redirect['path'] ) == trailingslashit( $user_home['path'] ) )		$redirect['path'] = trailingslashit($redirect['path']);	// Ignore differences in host capitalization, as this can lead to infinite redirects	// Only redirect no-www <=> yes-www	if ( strtolower($original['host']) == strtolower($redirect['host']) ||		( strtolower($original['host']) != 'www.' . strtolower($redirect['host']) && 'www.' . strtolower($original['host']) != strtolower($redirect['host']) ) )		$redirect['host'] = $original['host'];	$compare_original = array($original['host'], $original['path']);	if ( !empty( $original['port'] ) )		$compare_original[] = $original['port'];	if ( !empty( $original['query'] ) )		$compare_original[] = $original['query'];	$compare_redirect = array($redirect['host'], $redirect['path']);	if ( !empty( $redirect['port'] ) )		$compare_redirect[] = $redirect['port'];	if ( !empty( $redirect['query'] ) )		$compare_redirect[] = $redirect['query'];	if ( $compare_original !== $compare_redirect ) {		$redirect_url = $redirect['scheme'] . '://' . $redirect['host'];		if ( !empty($redirect['port']) )			$redirect_url .= ':' . $redirect['port'];		$redirect_url .= $redirect['path'];		if ( !empty($redirect['query']) )			$redirect_url .= '?' . $redirect['query'];	}	if ( !$redirect_url || $redirect_url == $requested_url )		return false;	// Note that you can use the "redirect_canonical" filter to cancel a canonical redirect for whatever reason by returning FALSE	$redirect_url = apply_filters('redirect_canonical', $redirect_url, $requested_url);	if ( !$redirect_url || $redirect_url == $requested_url ) // yes, again -- in case the filter aborted the request		return false;	if ( $do_redirect ) {		// protect against chained redirects		if ( !redirect_canonical($redirect_url, false) ) {			wp_redirect($redirect_url, 301);			exit();		} else {			// Debug			// die("1: $redirect_url<br />2: " . redirect_canonical( $redirect_url, false ) );			return false;		}	} else {		return $redirect_url;	}}/** * Attempts to guess correct post based on query vars. * * @since 2.3.0 * @uses $wpdb * * @return bool|string Returns False, if it can't find post, returns correct *		location on success. */function redirect_guess_404_permalink() {	global $wpdb;	if ( !get_query_var('name') )		return false;	$where = $wpdb->prepare("post_name LIKE %s", get_query_var('name') . '%');	// if any of post_type, year, monthnum, or day are set, use them to refine the query	if ( get_query_var('post_type') )		$where .= $wpdb->prepare(" AND post_type = %s", get_query_var('post_type'));	if ( get_query_var('year') )		$where .= $wpdb->prepare(" AND YEAR(post_date) = %d", get_query_var('year'));	if ( get_query_var('monthnum') )		$where .= $wpdb->prepare(" AND MONTH(post_date) = %d", get_query_var('monthnum'));	if ( get_query_var('day') )		$where .= $wpdb->prepare(" AND DAYOFMONTH(post_date) = %d", get_query_var('day'));	$post_id = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE $where AND post_status = 'publish'");	if ( !$post_id )		return false;	return get_permalink($post_id);}add_action('template_redirect', 'redirect_canonical');?>
<?php/** * WordPress Export Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('export') )	wp_die(__('You do not have sufficient permissions to export the content of this site.'));/** Load WordPress export API */require_once('./includes/export.php');$title = __('Export');add_contextual_help($current_screen,	'<p>' . __('You can export a file of your site&#8217;s content in order to import it into another installation or platform. The export file will be an XML file format called WXR. Posts, pages, comments, custom fields, categories, and tags can be included. You can set filters to have the WXR file only include a certain date, author, category, tag, all posts or all pages, certain publishing statuses.') . '</p>' .	'<p>' . __('Once generated, your WXR file can be imported by another WordPress site or by another blogging platform able to access this format.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Export_SubPanel" target="_blank">Export Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( isset( $_GET['download'] ) ) {		$author = isset($_GET['author']) ? $_GET['author'] : 'all';		$taxonomy = array();		foreach ( get_taxonomies( array( 'show_ui' => true ) ) as $tax )			$taxonomy[ $tax ] = ! empty( $_GET['taxonomy'][ $tax ] ) ? $_GET['taxonomy'][ $tax ] : 'all';		$post_type = isset($_GET['post_type']) ? stripslashes_deep($_GET['post_type']) : 'all';		$status = isset($_GET['status']) ? stripslashes_deep($_GET['status']) : 'all';		$mm_start = isset($_GET['mm_start']) ? $_GET['mm_start'] : 'all';		$mm_end = isset($_GET['mm_end']) ? $_GET['mm_end'] : 'all';		if( $mm_start != 'all' ) {			$start_date = sprintf( "%04d-%02d-%02d", substr( $mm_start, 0, 4 ), substr( $mm_start, 5, 2 ), 1 );		} else {			$start_date = 'all';		}		if( $mm_end != 'all' ) {			$end_date = sprintf( "%04d-%02d-%02d", substr( $mm_end, 0, 4 ), substr( $mm_end, 5, 2 ), 1 );		} else {			$end_date = 'all';		}	export_wp( array( 'author' => $author, 'taxonomy' => $taxonomy, 'post_type' => $post_type, 'post_status' => $status, 'start_date' => $start_date, 'end_date' => $end_date ) );	die();}require_once ('admin-header.php');$dateoptions = $edateoptions = '';$types = "'" . implode("', '", get_post_types( array( 'public' => true, 'can_export' => true ), 'names' )) . "'";$stati = "'" . implode("', '", get_post_stati( array( 'internal' => false ), 'names' )) . "'";if ( $monthyears = $wpdb->get_results("SELECT DISTINCT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, YEAR(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `eyear`, MONTH(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `emonth` FROM $wpdb->posts WHERE post_type IN ($types) AND post_status IN ($stati) ORDER BY post_date ASC ") ) {	foreach ( $monthyears as $k => $monthyear )		$monthyears[$k]->lmonth = $wp_locale->get_month( $monthyear->month, 2 );	for( $s = 0, $e = count( $monthyears ) - 1; $e >= 0; $s++, $e-- ) {		$dateoptions .= "\t<option value=\"" . $monthyears[$s]->year . '-' . zeroise( $monthyears[$s]->month, 2 ) . '">' . $monthyears[$s]->lmonth . ' ' . $monthyears[$s]->year . "</option>\n";		$edateoptions .= "\t<option value=\"" . $monthyears[$e]->eyear . '-' . zeroise( $monthyears[$e]->emonth, 2 ) . '">' . $monthyears[$e]->lmonth . ' ' . $monthyears[$e]->year . "</option>\n";	}}?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><p><?php _e('When you click the button below WordPress will create an XML file for you to save to your computer.'); ?></p><p><?php _e('This format, which we call WordPress eXtended RSS or WXR, will contain your posts, pages, comments, custom fields, categories, and tags.'); ?></p><p><?php _e('Once you&#8217;ve saved the download file, you can use the Import function on another WordPress site to import this site.'); ?></p><form action="" method="get"><h3><?php _e('Filters'); ?></h3><table class="form-table"><tr><th><label for="mm_start"><?php _e('Start Date'); ?></label></th><td><select name="mm_start" id="mm_start">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $dateoptions; ?></select></td></tr><tr><th><label for="mm_end" id="mm_end"><?php _e('End Date'); ?></label></th><td><select name="mm_end" id="mm_end">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $edateoptions; ?></select></td></tr><tr><th><label for="author"><?php _e('Authors'); ?></label></th><td><select name="author" id="author"><option value="all" selected="selected"><?php _e('All Authors'); ?></option><?php$authors = $wpdb->get_results( "SELECT DISTINCT u.id, u.display_name FROM $wpdb->users u INNER JOIN $wpdb->posts p WHERE u.id = p.post_author ORDER BY u.display_name" );foreach ( (array) $authors as $author ) {	echo "<option value='{$author->id}'>{$author->display_name}</option>\n";}?></select></td></tr><?php foreach ( get_taxonomies( array( 'show_ui' => true ), 'objects' ) as $tax_obj ) {	$term_dropdown = wp_dropdown_categories( array( 'taxonomy' => $tax_obj->name, 'hide_if_empty' => true, 'show_option_all' => __( 'All Terms' ), 'name' => 'taxonomy[' . $tax_obj->name . ']', 'id' => 'taxonomy-' . $tax_obj->name, 'class' => '', 'echo' => false ) );	if ( $term_dropdown )		echo '<tr><th><label for="taxonomy-' . $tax_obj->name . '">' . $tax_obj->labels->name . '</label></th><td>' . $term_dropdown . '</td></tr>';}?><tr><th><label for="post_type"><?php _e('Content Types'); ?></label></th><td><select name="post_type" id="post_type">	<option value="all" selected="selected"><?php _e('All Content'); ?></option>	<?php foreach ( get_post_types( array( 'public' => true, 'can_export' => true ), 'objects' ) as $post_type_obj ) { ?>		<option value="<?php echo $post_type_obj->name; ?>"><?php echo $post_type_obj->labels->name; ?></option>	<?php } ?></select></td></tr><tr><th><label for="status"><?php _e('Statuses'); ?></label></th><td><select name="status" id="status">	<option value="all" selected="selected"><?php _e('All Statuses'); ?></option><?php foreach ( get_post_stati( array( 'internal' => false ), 'objects' ) as $post_status_obj ) { ?>	<option value="<?php echo $post_status_obj->name; ?>"><?php echo $post_status_obj->label; ?></option><?php } ?></select></td></tr></table><p class="submit"><input type="submit" name="submit" class="button" value="<?php esc_attr_e('Download Export File'); ?>" /><input type="hidden" name="download" value="true" /></p></form></div><?phpinclude ('admin-footer.php');?>
<?php/** * A File upgrader class for WordPress. * * This set of classes are designed to be used to upgrade/install a local set of files on the filesystem via the Filesystem Abstraction classes. * * @link http://trac.wordpress.org/ticket/7875 consolidate plugin/theme/core upgrade/install functions * * @package WordPress * @subpackage Upgrader * @since 2.8.0 *//** * WordPress Upgrader class for Upgrading/Installing a local set of files via the Filesystem Abstraction classes from a Zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader {	var $strings = array();	var $skin = null;	var $result = array();	function WP_Upgrader($skin = null) {		return $this->__construct($skin);	}	function __construct($skin = null) {		if ( null == $skin )			$this->skin = new WP_Upgrader_Skin();		else			$this->skin = $skin;	}	function init() {		$this->skin->set_upgrader($this);		$this->generic_strings();	}	function generic_strings() {		$this->strings['bad_request'] = __('Invalid Data provided.');		$this->strings['fs_unavailable'] = __('Could not access filesystem.');		$this->strings['fs_error'] = __('Filesystem error.');		$this->strings['fs_no_root_dir'] = __('Unable to locate WordPress Root directory.');		$this->strings['fs_no_content_dir'] = __('Unable to locate WordPress Content directory (wp-content).');		$this->strings['fs_no_plugins_dir'] = __('Unable to locate WordPress Plugin directory.');		$this->strings['fs_no_themes_dir'] = __('Unable to locate WordPress Theme directory.');		/* translators: %s: directory name */		$this->strings['fs_no_folder'] = __('Unable to locate needed folder (%s).');		$this->strings['download_failed'] = __('Download failed.');		$this->strings['installing_package'] = __('Installing the latest version&#8230;');		$this->strings['folder_exists'] = __('Destination folder already exists.');		$this->strings['mkdir_failed'] = __('Could not create directory.');		$this->strings['bad_package'] = __('Incompatible Archive.');		$this->strings['maintenance_start'] = __('Enabling Maintenance mode&#8230;');		$this->strings['maintenance_end'] = __('Disabling Maintenance mode&#8230;');	}	function fs_connect( $directories = array() ) {		global $wp_filesystem;		if ( false === ($credentials = $this->skin->request_filesystem_credentials()) )			return false;		if ( ! WP_Filesystem($credentials) ) {			$error = true;			if ( is_object($wp_filesystem) && $wp_filesystem->errors->get_error_code() )				$error = $wp_filesystem->errors;			$this->skin->request_filesystem_credentials($error); //Failed to connect, Error and request again			return false;		}		if ( ! is_object($wp_filesystem) )			return new WP_Error('fs_unavailable', $this->strings['fs_unavailable'] );		if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )			return new WP_Error('fs_error', $this->strings['fs_error'], $wp_filesystem->errors);		foreach ( (array)$directories as $dir ) {			switch ( $dir ) {				case ABSPATH:					if ( ! $wp_filesystem->abspath() )						return new WP_Error('fs_no_root_dir', $this->strings['fs_no_root_dir']);					break;				case WP_CONTENT_DIR:					if ( ! $wp_filesystem->wp_content_dir() )						return new WP_Error('fs_no_content_dir', $this->strings['fs_no_content_dir']);					break;				case WP_PLUGIN_DIR:					if ( ! $wp_filesystem->wp_plugins_dir() )						return new WP_Error('fs_no_plugins_dir', $this->strings['fs_no_plugins_dir']);					break;				case WP_CONTENT_DIR . '/themes':					if ( ! $wp_filesystem->find_folder(WP_CONTENT_DIR . '/themes') )						return new WP_Error('fs_no_themes_dir', $this->strings['fs_no_themes_dir']);					break;				default:					if ( ! $wp_filesystem->find_folder($dir) )						return new WP_Error('fs_no_folder', sprintf($this->strings['fs_no_folder'], $dir));					break;			}		}		return true;	} //end fs_connect();	function download_package($package) {		if ( ! preg_match('!^(http|https|ftp)://!i', $package) && file_exists($package) ) //Local file or remote?			return $package; //must be a local file..		if ( empty($package) )			return new WP_Error('no_package', $this->strings['no_package']);		$this->skin->feedback('downloading_package', $package);		$download_file = download_url($package);		if ( is_wp_error($download_file) )			return new WP_Error('download_failed', $this->strings['download_failed'], $download_file->get_error_message());		return $download_file;	}	function unpack_package($package, $delete_package = true) {		global $wp_filesystem;		$this->skin->feedback('unpack_package');		$upgrade_folder = $wp_filesystem->wp_content_dir() . 'upgrade/';		//Clean up contents of upgrade directory beforehand.		$upgrade_files = $wp_filesystem->dirlist($upgrade_folder);		if ( !empty($upgrade_files) ) {			foreach ( $upgrade_files as $file )				$wp_filesystem->delete($upgrade_folder . $file['name'], true);		}		//We need a working directory		$working_dir = $upgrade_folder . basename($package, '.zip');		// Clean up working directory		if ( $wp_filesystem->is_dir($working_dir) )			$wp_filesystem->delete($working_dir, true);		// Unzip package to working directory		$result = unzip_file($package, $working_dir); //TODO optimizations, Copy when Move/Rename would suffice?		// Once extracted, delete the package if required.		if ( $delete_package )			unlink($package);		if ( is_wp_error($result) ) {			$wp_filesystem->delete($working_dir, true);			return $result;		}		return $working_dir;	}	function install_package($args = array()) {		global $wp_filesystem;		$defaults = array( 'source' => '', 'destination' => '', //Please always pass these						'clear_destination' => false, 'clear_working' => false,						'hook_extra' => array());		$args = wp_parse_args($args, $defaults);		extract($args);		@set_time_limit( 300 );		if ( empty($source) || empty($destination) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$this->skin->feedback('installing_package');		$res = apply_filters('upgrader_pre_install', true, $hook_extra);		if ( is_wp_error($res) )			return $res;		//Retain the Original source and destinations		$remote_source = $source;		$local_destination = $destination;		$source_files = array_keys( $wp_filesystem->dirlist($remote_source) );		$remote_destination = $wp_filesystem->find_folder($local_destination);		//Locate which directory to copy to the new folder, This is based on the actual folder holding the files.		if ( 1 == count($source_files) && $wp_filesystem->is_dir( trailingslashit($source) . $source_files[0] . '/') ) //Only one folder? Then we want its contents.			$source = trailingslashit($source) . trailingslashit($source_files[0]);		elseif ( count($source_files) == 0 )			return new WP_Error('bad_package', $this->strings['bad_package']); //There are no files?		//else //Its only a single file, The upgrader will use the foldername of this file as the destination folder. foldername is based on zip filename.		//Hook ability to change the source file location..		$source = apply_filters('upgrader_source_selection', $source, $remote_source, $this);		if ( is_wp_error($source) )			return $source;		//Has the source location changed? If so, we need a new source_files list.		if ( $source !== $remote_source )			$source_files = array_keys( $wp_filesystem->dirlist($source) );		//Protection against deleting files in any important base directories.		if ( in_array( $destination, array(ABSPATH, WP_CONTENT_DIR, WP_PLUGIN_DIR, WP_CONTENT_DIR . '/themes') ) ) {			$remote_destination = trailingslashit($remote_destination) . trailingslashit(basename($source));			$destination = trailingslashit($destination) . trailingslashit(basename($source));		}		if ( $wp_filesystem->exists($remote_destination) ) {			if ( $clear_destination ) {				//We're going to clear the destination if theres something there				$this->skin->feedback('remove_old');				$removed = $wp_filesystem->delete($remote_destination, true);				$removed = apply_filters('upgrader_clear_destination', $removed, $local_destination, $remote_destination, $hook_extra);				if ( is_wp_error($removed) )					return $removed;				else if ( ! $removed )					return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);			} else {				//If we're not clearing the destination folder and something exists there allready, Bail.				//But first check to see if there are actually any files in the folder.				$_files = $wp_filesystem->dirlist($remote_destination);				if ( ! empty($_files) ) {					$wp_filesystem->delete($remote_source, true); //Clear out the source files.					return new WP_Error('folder_exists', $this->strings['folder_exists'], $remote_destination );				}			}		}		//Create destination if needed		if ( !$wp_filesystem->exists($remote_destination) )			if ( !$wp_filesystem->mkdir($remote_destination, FS_CHMOD_DIR) )				return new WP_Error('mkdir_failed', $this->strings['mkdir_failed'], $remote_destination);		// Copy new version of item into place.		$result = copy_dir($source, $remote_destination);		if ( is_wp_error($result) ) {			if ( $clear_working )				$wp_filesystem->delete($remote_source, true);			return $result;		}		//Clear the Working folder?		if ( $clear_working )			$wp_filesystem->delete($remote_source, true);		$destination_name = basename( str_replace($local_destination, '', $destination) );		if ( '.' == $destination_name )			$destination_name = '';		$this->result = compact('local_source', 'source', 'source_name', 'source_files', 'destination', 'destination_name', 'local_destination', 'remote_destination', 'clear_destination', 'delete_source_dir');		$res = apply_filters('upgrader_post_install', true, $hook_extra, $this->result);		if ( is_wp_error($res) ) {			$this->result = $res;			return $res;		}		//Bombard the calling function will all the info which we've just used.		return $this->result;	}	function run($options) {		$defaults = array( 	'package' => '', //Please always pass this.							'destination' => '', //And this							'clear_destination' => false,							'clear_working' => true,							'is_multi' => false,							'hook_extra' => array() //Pass any extra $hook_extra args here, this will be passed to any hooked filters.						);		$options = wp_parse_args($options, $defaults);		extract($options);		//Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, $destination) );		if ( ! $res ) //Mainly for non-connected filesystem.			return false;		if ( is_wp_error($res) ) {			$this->skin->error($res);			return $res;		}		if ( !$is_multi ) // call $this->header separately if running multiple times			$this->skin->header();		$this->skin->before();		//Download the package (Note, This just returns the filename of the file if the package is a local file)		$download = $this->download_package( $package );		if ( is_wp_error($download) ) {			$this->skin->error($download);			$this->skin->after();			return $download;		}		//Unzip's the file into a temporary directory		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) ) {			$this->skin->error($working_dir);			$this->skin->after();			return $working_dir;		}		//With the given options, this installs it to the destination directory.		$result = $this->install_package( array(											'source' => $working_dir,											'destination' => $destination,											'clear_destination' => $clear_destination,											'clear_working' => $clear_working,											'hook_extra' => $hook_extra										) );		$this->skin->set_result($result);		if ( is_wp_error($result) ) {			$this->skin->error($result);			$this->skin->feedback('process_failed');		} else {			//Install Suceeded			$this->skin->feedback('process_success');		}		$this->skin->after();		if ( !$is_multi )			$this->skin->footer();		return $result;	}	function maintenance_mode($enable = false) {		global $wp_filesystem;		$file = $wp_filesystem->abspath() . '.maintenance';		if ( $enable ) {			$this->skin->feedback('maintenance_start');			// Create maintenance file to signal that we are upgrading			$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';			$wp_filesystem->delete($file);			$wp_filesystem->put_contents($file, $maintenance_string, FS_CHMOD_FILE);		} else if ( !$enable && $wp_filesystem->exists($file) ) {			$this->skin->feedback('maintenance_end');			$wp_filesystem->delete($file);		}	}}/** * Plugin Upgrader class for WordPress Plugins, It is designed to upgrade/install plugins from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader extends WP_Upgrader {	var $result;	var $bulk = false;	var $show_before = '';	function upgrade_strings() {		$this->strings['up_to_date'] = __('The plugin is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['deactivate_plugin'] = __('Deactivating the plugin&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the plugin&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old plugin.');		$this->strings['process_failed'] = __('Plugin upgrade failed.');		$this->strings['process_success'] = __('Plugin upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the plugin&#8230;');		$this->strings['process_failed'] = __('Plugin install failed.');		$this->strings['process_success'] = __('Plugin installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$this->run(array(					'package' => $package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => false, //Do not overwrite files.					'clear_working' => true,					'hook_extra' => array()					));		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function upgrade($plugin) {		$this->init();		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		if ( !isset( $current->response[ $plugin ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		// Get the URL to the zip file		$r = $current->response[ $plugin ];		add_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		//'source_selection' => array(&$this, 'source_selection'), //theres a track ticket to move up the directory for zip's which are made a bit differently, useful for non-.org plugins.		$this->run(array(					'package' => $r->package,					'destination' => WP_PLUGIN_DIR,					'clear_destination' => true,					'clear_working' => true,					'hook_extra' => array(								'plugin' => $plugin					)				));		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'deactivate_plugin_before_upgrade'));		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of plugin update information		delete_site_transient('update_plugins');	}	function bulk_upgrade($plugins) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_plugins' );		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR, WP_PLUGIN_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($plugins);		$this->update_current = 0;		foreach ( $plugins as $plugin ) {			$this->update_current++;			$this->skin->plugin_info = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin, false, true);			if ( !isset( $current->response[ $plugin ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$plugin] = false;				continue;			}			// Get the URL to the zip file			$r = $current->response[ $plugin ];			$this->skin->plugin_active = is_plugin_active($plugin);			$result = $this->run(array(						'package' => $r->package,						'destination' => WP_PLUGIN_DIR,						'clear_destination' => true,						'clear_working' => true,						'is_multi' => true,						'hook_extra' => array(									'plugin' => $plugin						)					));			$results[$plugin] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_plugin'));		// Force refresh of plugin update information		delete_site_transient('update_plugins');		return $results;	}	//return plugin info.	function plugin_info() {		if ( ! is_array($this->result) )			return false;		if ( empty($this->result['destination_name']) )			return false;		$plugin = get_plugins('/' . $this->result['destination_name']); //Ensure to pass with leading slash		if ( empty($plugin) )			return false;		$pluginfiles = array_keys($plugin); //Assume the requested plugin is the first in the list		return $this->result['destination_name'] . '/' . $pluginfiles[0];	}	//Hooked to pre_install	function deactivate_plugin_before_upgrade($return, $plugin) {		if ( is_wp_error($return) ) //Bypass.			return $return;		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		if ( is_plugin_active($plugin) ) {			$this->skin->feedback('deactivate_plugin');			//Deactivate the plugin silently, Prevent deactivation hooks from running.			deactivate_plugins($plugin, true);		}	}	//Hooked to upgrade_clear_destination	function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin) {		global $wp_filesystem;		if ( is_wp_error($removed) )			return $removed; //Pass errors through.		$plugin = isset($plugin['plugin']) ? $plugin['plugin'] : '';		if ( empty($plugin) )			return new WP_Error('bad_request', $this->strings['bad_request']);		$plugins_dir = $wp_filesystem->wp_plugins_dir();		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin) );		if ( ! $wp_filesystem->exists($this_plugin_dir) ) //If its already vanished.			return $removed;		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin);		if ( ! $deleted )			return new WP_Error('remove_old_failed', $this->strings['remove_old_failed']);		return $removed;	}}/** * Theme Upgrader class for WordPress Themes, It is designed to upgrade/install themes from a local zip, remote zip URL, or uploaded zip file. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader extends WP_Upgrader {	var $result;	function upgrade_strings() {		$this->strings['up_to_date'] = __('The theme is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['remove_old'] = __('Removing the old version of the theme&#8230;');		$this->strings['remove_old_failed'] = __('Could not remove the old theme.');		$this->strings['process_failed'] = __('Theme upgrade failed.');		$this->strings['process_success'] = __('Theme upgraded successfully.');	}	function install_strings() {		$this->strings['no_package'] = __('Install package not available.');		$this->strings['downloading_package'] = __('Downloading install package from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the package&#8230;');		$this->strings['installing_package'] = __('Installing the theme&#8230;');		$this->strings['process_failed'] = __('Theme install failed.');		$this->strings['process_success'] = __('Theme installed successfully.');	}	function install($package) {		$this->init();		$this->install_strings();		$options = array(						'package' => $package,						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => false, //Do not overwrite files.						'clear_working' => true						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		if ( empty($result['destination_name']) )			return false;		else			return $result['destination_name'];	}	function upgrade($theme) {		$this->init();		$this->upgrade_strings();		// Is an update available?		$current = get_site_transient( 'update_themes' );		if ( !isset( $current->response[ $theme ] ) ) {			$this->skin->before();			$this->skin->set_result(false);			$this->skin->error('up_to_date');			$this->skin->after();			return false;		}		$r = $current->response[ $theme ];		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$options = array(						'package' => $r['package'],						'destination' => WP_CONTENT_DIR . '/themes',						'clear_destination' => true,						'clear_working' => true,						'hook_extra' => array(											'theme' => $theme											)						);		$this->run($options);		if ( ! $this->result || is_wp_error($this->result) )			return $this->result;		// Force refresh of theme update information		delete_site_transient('update_themes');		return true;	}	function bulk_upgrade($themes) {		$this->init();		$this->bulk = true;		$this->upgrade_strings();		$current = get_site_transient( 'update_themes' );		add_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		add_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		add_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		$this->skin->header();		// Connect to the Filesystem first.		$res = $this->fs_connect( array(WP_CONTENT_DIR) );		if ( ! $res ) {			$this->skin->footer();			return false;		}		$this->skin->bulk_header();		$this->maintenance_mode(true);		$results = array();		$this->update_count = count($themes);		$this->update_current = 0;		foreach ( $themes as $theme ) {			$this->update_current++;			if ( !isset( $current->response[ $theme ] ) ) {				$this->skin->set_result(false);				$this->skin->before();				$this->skin->error('up_to_date');				$this->skin->after();				$results[$theme] = false;				continue;			}			$this->skin->theme_info = $this->theme_info($theme);			// Get the URL to the zip file			$r = $current->response[ $theme ];			$options = array(							'package' => $r['package'],							'destination' => WP_CONTENT_DIR . '/themes',							'clear_destination' => true,							'clear_working' => true,							'hook_extra' => array(												'theme' => $theme												)							);			$result = $this->run($options);			$results[$theme] = $this->result;			// Prevent credentials auth screen from displaying multiple times			if ( false === $result )				break;		} //end foreach $plugins		$this->maintenance_mode(false);		$this->skin->bulk_footer();		$this->skin->footer();		// Cleanup our hooks, incase something else does a upgrade on this connection.		remove_filter('upgrader_pre_install', array(&$this, 'current_before'), 10, 2);		remove_filter('upgrader_post_install', array(&$this, 'current_after'), 10, 2);		remove_filter('upgrader_clear_destination', array(&$this, 'delete_old_theme'), 10, 4);		// Force refresh of theme update information		delete_site_transient('update_themes');		return $results;	}	function current_before($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Change to maintainence mode now.		if ( ! $this->bulk )			$this->maintenance_mode(true);		return $return;	}	function current_after($return, $theme) {		if ( is_wp_error($return) )			return $return;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( $theme != get_stylesheet() ) //If not current			return $return;		//Ensure stylesheet name hasnt changed after the upgrade:		if ( $theme == get_stylesheet() && $theme != $this->result['destination_name'] ) {			$theme_info = $this->theme_info();			$stylesheet = $this->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			switch_theme($template, $stylesheet, true);		}		//Time to remove maintainence mode		if ( ! $this->bulk )			$this->maintenance_mode(false);		return $return;	}	function delete_old_theme($removed, $local_destination, $remote_destination, $theme) {		global $wp_filesystem;		$theme = isset($theme['theme']) ? $theme['theme'] : '';		if ( is_wp_error($removed) || empty($theme) )			return $removed; //Pass errors through.		$themes_dir = $wp_filesystem->wp_themes_dir();		if ( $wp_filesystem->exists( trailingslashit($themes_dir) . $theme ) )			if ( ! $wp_filesystem->delete( trailingslashit($themes_dir) . $theme, true ) )				return false;		return true;	}	function theme_info($theme = null) {		if ( empty($theme) ) {			if ( !empty($this->result['destination_name']) )				$theme = $this->result['destination_name'];			else				return false;		}		return get_theme_data(WP_CONTENT_DIR . '/themes/' . $theme . '/style.css');	}}/** * Core Upgrader class for WordPress. It allows for WordPress to upgrade itself in combiantion with the wp-admin/includes/update-core.php file * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Core_Upgrader extends WP_Upgrader {	function upgrade_strings() {		$this->strings['up_to_date'] = __('WordPress is at the latest version.');		$this->strings['no_package'] = __('Upgrade package not available.');		$this->strings['downloading_package'] = __('Downloading update from <span class="code">%s</span>&#8230;');		$this->strings['unpack_package'] = __('Unpacking the update&#8230;');		$this->strings['copy_failed'] = __('Could not copy files.');	}	function upgrade($current) {		global $wp_filesystem;		$this->init();		$this->upgrade_strings();		if ( !empty($feedback) )			add_filter('update_feedback', $feedback);		// Is an update available?		if ( !isset( $current->response ) || $current->response == 'latest' )			return new WP_Error('up_to_date', $this->strings['up_to_date']);		$res = $this->fs_connect( array(ABSPATH, WP_CONTENT_DIR) );		if ( is_wp_error($res) )			return $res;		$wp_dir = trailingslashit($wp_filesystem->abspath());		$download = $this->download_package( $current->package );		if ( is_wp_error($download) )			return $download;		$working_dir = $this->unpack_package( $download );		if ( is_wp_error($working_dir) )			return $working_dir;		// Copy update-core.php from the new version into place.		if ( !$wp_filesystem->copy($working_dir . '/wordpress/wp-admin/includes/update-core.php', $wp_dir . 'wp-admin/includes/update-core.php', true) ) {			$wp_filesystem->delete($working_dir, true);			return new WP_Error('copy_failed', $this->strings['copy_failed']);		}		$wp_filesystem->chmod($wp_dir . 'wp-admin/includes/update-core.php', FS_CHMOD_FILE);		require(ABSPATH . 'wp-admin/includes/update-core.php');		return update_core($working_dir, $wp_dir);	}}/** * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class WP_Upgrader_Skin {	var $upgrader;	var $done_header = false;	var $result = false;	function WP_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '', 'title' => '', 'context' => false );		$this->options = wp_parse_args($args, $defaults);	}	function set_upgrader(&$upgrader) {		if ( is_object($upgrader) )			$this->upgrader =& $upgrader;		$this->add_strings();	}	function add_strings() {	}	function set_result($result) {		$this->result = $result;	}	function request_filesystem_credentials($error = false) {		$url = $this->options['url'];		$context = $this->options['context'];		if ( !empty($this->options['nonce']) )			$url = wp_nonce_url($url, $this->options['nonce']);		return request_filesystem_credentials($url, '', $error, $context); //Possible to bring inline, Leaving as is for now.	}	function header() {		if ( $this->done_header )			return;		$this->done_header = true;		echo '<div class="wrap">';		echo screen_icon();		echo '<h2>' . $this->options['title'] . '</h2>';	}	function footer() {		echo '</div>';	}	function error($errors) {		if ( ! $this->done_header )			$this->header();		if ( is_string($errors) ) {			$this->feedback($errors);		} elseif ( is_wp_error($errors) && $errors->get_error_code() ) {			foreach ( $errors->get_error_messages() as $message ) {				if ( $errors->get_error_data() )					$this->feedback($message . ' ' . $errors->get_error_data() );				else					$this->feedback($message);			}		}	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		show_message($string);	}	function before() {}	function after() {}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Upgrader_Skin extends WP_Upgrader_Skin {	var $plugin = '';	var $plugin_active = false;	var $plugin_network_active = false;	function Plugin_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => __('Upgrade Plugin') );		$args = wp_parse_args($args, $defaults);		$this->plugin = $args['plugin'];		$this->plugin_active = is_plugin_active( $this->plugin );		$this->plugin_network_active = is_plugin_active_for_network( $this->plugin );		parent::__construct($args);	}	function after() {		$this->plugin = $this->upgrader->plugin_info();		if ( !empty($this->plugin) && !is_wp_error($this->result) && $this->plugin_active ){			show_message(__('Reactivating the plugin&#8230;'));			echo '<iframe style="border:0;overflow:hidden" width="100%" height="170px" src="' . wp_nonce_url('update.php?action=activate-plugin&networkwide=' . $this->plugin_network_active . '&plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) .'"></iframe>';		}		$update_actions =  array(			'activate_plugin' => '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $this->plugin, 'activate-plugin_' . $this->plugin) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>',			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>'		);		if ( $this->plugin_active )			unset( $update_actions['activate_plugin'] );		if ( ! $this->result || is_wp_error($this->result) )			unset( $update_actions['activate_plugin'] );		$update_actions = apply_filters('update_plugin_complete_actions', $update_actions, $this->plugin);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}	function before() {		if ( $this->upgrader->show_before ) {			echo $this->upgrader->show_before;			$this->upgrader->show_before = '';		}	}}/** * Plugin Upgrader Skin for WordPress Plugin Upgrades. * * @package WordPress * @subpackage Upgrader * @since 3.0.0 */class Bulk_Upgrader_Skin extends WP_Upgrader_Skin {	var $in_loop = false;	var $error = false;	function Bulk_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'nonce' => '' );		$args = wp_parse_args($args, $defaults);		parent::__construct($args);	}	function add_strings() {		$this->upgrader->strings['skin_upgrade_start'] = __('The update process is starting. This process may take awhile on some hosts, so please be patient.');		$this->upgrader->strings['skin_update_failed_error'] = __('An error occured while updating %1$s: <strong>%2$s</strong>.');		$this->upgrader->strings['skin_update_failed'] = __('The update of %1$s failed.');		$this->upgrader->strings['skin_update_successful'] = __('%1$s updated successfully.').' <a onclick="%2$s" href="#" class="hide-if-no-js"><span>'.__('Show Details').'</span><span class="hidden">'.__('Hide Details').'</span>.</a>';		$this->upgrader->strings['skin_upgrade_end'] = __('All updates have been completed.');	}	function feedback($string) {		if ( isset( $this->upgrader->strings[$string] ) )			$string = $this->upgrader->strings[$string];		if ( strpos($string, '%') !== false ) {			$args = func_get_args();			$args = array_splice($args, 1);			if ( !empty($args) )				$string = vsprintf($string, $args);		}		if ( empty($string) )			return;		if ( $this->in_loop )			echo "$string<br />\n";		else			echo "<p>$string</p>\n";	}	function header() {		// Nothing, This will be displayed within a iframe.	}	function footer() {		// Nothing, This will be displayed within a iframe.	}	function error($error) {		if ( is_string($error) && isset( $this->upgrader->strings[$error] ) )			$this->error = $this->upgrader->strings[$error];		if ( is_wp_error($error) ) {			foreach ( $error->get_error_messages() as $emessage ) {				if ( $error->get_error_data() )					$messages[] = $emessage . ' ' . $error->get_error_data();				else					$messages[] = $emessage;			}			$this->error = implode(', ', $messages);		}		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';	}	function bulk_header() {		$this->feedback('skin_upgrade_start');	}	function bulk_footer() {		$this->feedback('skin_upgrade_end');	}	function before($title = '') {		$this->in_loop = true;		printf( '<h4>' . $this->upgrader->strings['skin_before_update_header'] . ' <img alt="" src="' . admin_url( 'images/wpspin_light.gif' ) . '" class="hidden waiting-' . $this->upgrader->update_current . '" style="vertical-align:middle;"></h4>',  $title, $this->upgrader->update_current, $this->upgrader->update_count);		echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		echo '<div class="update-messages hide-if-js" id="progress-' . esc_attr($this->upgrader->update_current) . '"><p>';		$this->flush_output();	}	function after($title = '') {		echo '</p></div>';		if ( $this->error || ! $this->result ) {			if ( $this->error )				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed_error'], $title, $this->error) . '</p></div>';			else				echo '<div class="error"><p>' . sprintf($this->upgrader->strings['skin_update_failed'], $title) . '</p></div>';			echo '<script type="text/javascript">jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').show();</script>';		}		if ( !empty($this->result) && !is_wp_error($this->result) ) {			echo '<div class="updated"><p>' . sprintf($this->upgrader->strings['skin_update_successful'], $title, 'jQuery(\'#progress-' . esc_js($this->upgrader->update_current) . '\').toggle();jQuery(\'span\', this).toggle(); return false;') . '</p></div>';			echo '<script type="text/javascript">jQuery(\'.waiting-' . esc_js($this->upgrader->update_current) . '\').hide();</script>';		}		$this->reset();		$this->flush_output();	}	function reset() {		$this->in_loop = false;		$this->error = false;	}	function flush_output() {		wp_ob_end_flush_all();		flush();	}}class Bulk_Plugin_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $plugin_info = array(); // Plugin_Upgrader::bulk() will fill this in.	function Plugin_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Plugin %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->plugin_info['Title']);	}	function after() {		parent::after($this->plugin_info['Title']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'plugins_page' => '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Goto plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_plugins_complete_actions', $update_actions, $this->plugin_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}class Bulk_Theme_Upgrader_Skin extends Bulk_Upgrader_Skin {	var $theme_info = array(); // Theme_Upgrader::bulk() will fill this in.	function Theme_Upgrader_Skin($args = array()) {		parent::__construct($args);	}	function add_strings() {		parent::add_strings();		$this->upgrader->strings['skin_before_update_header'] = __('Updating Theme %1$s (%2$d/%3$d)');	}	function before() {		parent::before($this->theme_info['Name']);	}	function after() {		parent::after($this->theme_info['Name']);	}	function bulk_footer() {		parent::bulk_footer();		$update_actions =  array(			'themes_page' => '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Goto themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>',			'updates_page' => '<a href="' . admin_url('update-core.php') . '" title="' . esc_attr__('Goto WordPress Updates page') . '" target="_parent">' . __('Return to WordPress Updates') . '</a>'		);		$update_actions = apply_filters('update_bulk_theme_complete_actions', $update_actions, $this->theme_info);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Plugin Installer Skin for WordPress Plugin Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Plugin_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Plugin_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'plugin' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) )			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the plugin <strong>%s %s</strong>.'), $this->api->name, $this->api->version);	}	function after() {		$plugin_file = $this->upgrader->plugin_info();		$install_actions = array();		$from = isset($_GET['from']) ? stripslashes($_GET['from']) : 'plugins';		if ( 'import' == $from )			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;from=import&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin &amp; Run Importer') . '</a>';		else			$install_actions['activate_plugin'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . esc_attr__('Activate this plugin') . '" target="_parent">' . __('Activate Plugin') . '</a>';		if ( is_multisite() && current_user_can( 'manage_network_plugins' ) )			$install_actions['network_activate'] = '<a href="' . wp_nonce_url('plugins.php?action=activate&amp;networkwide=1&amp;plugin=' . $plugin_file, 'activate-plugin_' . $plugin_file) . '" title="' . __('Activate this plugin for all sites in this network') . '" target="_parent">' . __('Network Activate') . '</a>';		if ( 'import' == $from )			$install_actions['importers_page'] = '<a href="' . admin_url('import.php') . '" title="' . esc_attr__('Return to Importers') . '" target="_parent">' . __('Return to Importers') . '</a>';		else if ( $this->type == 'web' )			$install_actions['plugins_page'] = '<a href="' . admin_url('plugin-install.php') . '" title="' . esc_attr__('Return to Plugin Installer') . '" target="_parent">' . __('Return to Plugin Installer') . '</a>';		else			$install_actions['plugins_page'] = '<a href="' . admin_url('plugins.php') . '" title="' . esc_attr__('Return to Plugins page') . '" target="_parent">' . __('Return to Plugins page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) ) {			unset( $install_actions['activate_plugin'] );			unset( $install_actions['network_activate'] );		}		$install_actions = apply_filters('install_plugin_complete_actions', $install_actions, $this->api, $plugin_file);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Installer Skin for the WordPress Theme Installer. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Installer_Skin extends WP_Upgrader_Skin {	var $api;	var $type;	function Theme_Installer_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'type' => 'web', 'url' => '', 'theme' => '', 'nonce' => '', 'title' => '' );		$args = wp_parse_args($args, $defaults);		$this->type = $args['type'];		$this->api = isset($args['api']) ? $args['api'] : array();		parent::__construct($args);	}	function before() {		if ( !empty($this->api) ) {			/* translators: 1: theme name, 2: version */			$this->upgrader->strings['process_success'] = sprintf( __('Successfully installed the theme <strong>%1$s %2$s</strong>.'), $this->api->name, $this->api->version);		}	}	function after() {		if ( empty($this->upgrader->result['destination_name']) )			return;		$theme_info = $this->upgrader->theme_info();		if ( empty($theme_info) )			return;		$name = $theme_info['Name'];		$stylesheet = $this->upgrader->result['destination_name'];		$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;		$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );		$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);		$install_actions = array(			'preview' => '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>',			'activate' => '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>'							);		if ( $this->type == 'web' )			$install_actions['themes_page'] = '<a href="' . admin_url('theme-install.php') . '" title="' . esc_attr__('Return to Theme Installer') . '" target="_parent">' . __('Return to Theme Installer') . '</a>';		else			$install_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		if ( ! $this->result || is_wp_error($this->result) )			unset( $install_actions['activate'], $install_actions['preview'] );		$install_actions = apply_filters('install_theme_complete_actions', $install_actions, $this->api, $stylesheet, $theme_info);		if ( ! empty($install_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$install_actions));	}}/** * Theme Upgrader Skin for WordPress Theme Upgrades. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class Theme_Upgrader_Skin extends WP_Upgrader_Skin {	var $theme = '';	function Theme_Upgrader_Skin($args = array()) {		return $this->__construct($args);	}	function __construct($args = array()) {		$defaults = array( 'url' => '', 'theme' => '', 'nonce' => '', 'title' => __('Upgrade Theme') );		$args = wp_parse_args($args, $defaults);		$this->theme = $args['theme'];		parent::__construct($args);	}	function after() {		$update_actions = array();		if ( !empty($this->upgrader->result['destination_name']) &&			($theme_info = $this->upgrader->theme_info()) &&			!empty($theme_info) ) {			$name = $theme_info['Name'];			$stylesheet = $this->upgrader->result['destination_name'];			$template = !empty($theme_info['Template']) ? $theme_info['Template'] : $stylesheet;			$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), trailingslashit(esc_url(get_option('home'))) ) );			$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=" . urlencode($template) . "&amp;stylesheet=" . urlencode($stylesheet), 'switch-theme_' . $template);			$update_actions['preview'] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $name)) . '">' . __('Preview') . '</a>';			$update_actions['activate'] = '<a href="' . $activate_link .  '" class="activatelink" title="' . esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $name ) ) . '">' . __('Activate') . '</a>';			if ( ( ! $this->result || is_wp_error($this->result) ) || $stylesheet == get_stylesheet() )				unset($update_actions['preview'], $update_actions['activate']);		}		$update_actions['themes_page'] = '<a href="' . admin_url('themes.php') . '" title="' . esc_attr__('Return to Themes page') . '" target="_parent">' . __('Return to Themes page') . '</a>';		$update_actions = apply_filters('update_theme_complete_actions', $update_actions, $this->theme);		if ( ! empty($update_actions) )			$this->feedback('<strong>' . __('Actions:') . '</strong> ' . implode(' | ', (array)$update_actions));	}}/** * Upgrade Skin helper for File uploads. This class handles the upload process and passes it as if its a local file to the Upgrade/Installer functions. * * @TODO More Detailed docs, for methods as well. * * @package WordPress * @subpackage Upgrader * @since 2.8.0 */class File_Upload_Upgrader {	var $package;	var $filename;	function File_Upload_Upgrader($form, $urlholder) {		return $this->__construct($form, $urlholder);	}	function __construct($form, $urlholder) {		if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )			wp_die($uploads['error']);		if ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )			wp_die(__('Please select a file'));		if ( !empty($_FILES) )			$this->filename = $_FILES[$form]['name'];		else if ( isset($_GET[$urlholder]) )			$this->filename = $_GET[$urlholder];		//Handle a newly uploaded file, Else assume its already been uploaded		if ( !empty($_FILES) ) {			$this->filename = wp_unique_filename( $uploads['basedir'], $this->filename );			$this->package = $uploads['basedir'] . '/' . $this->filename;			// Move the file to the uploads dir			if ( false === @ move_uploaded_file( $_FILES[$form]['tmp_name'], $this->package) )				wp_die( sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path']));		} else {			$this->package = $uploads['basedir'] . '/' . $this->filename;		}	}}
