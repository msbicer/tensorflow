<?php/** * Reading settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __( 'Reading Settings' );$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen contains the settings that affect the display of your content.') . '</p>' .	'<p>' . sprintf(__('You can choose what&#8217;s displayed on the front page of your site. It can be posts in reverse chronological order (classic blog), or a fixed/static page. To set a static home page, you first need to create two <a href="%s">Pages</a>. One will become the front page, and the other will be where your posts are displayed.'), 'post-new.php?post_type=page') . '</p>' .	'<p>' . __('You can also control the display of your content in RSS feeds, including the maximum numbers of posts to display, whether to show full text or a summary, and the character set encoding.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Reading_SubPanel" target="_blank">Reading Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form1" method="post" action="options.php"><?php settings_fields( 'reading' ); ?><?php if ( ! get_pages() ) : ?><input name="show_on_front" type="hidden" value="posts" /><table class="form-table"><?php else :	if ( 'page' == get_option( 'show_on_front' ) && ! get_option( 'page_on_front' ) && ! get_option( 'page_for_posts' ) )		update_option( 'show_on_front', 'posts' );?><table class="form-table"><tr valign="top"><th scope="row"><?php _e( 'Front page displays' ); ?></th><td id="front-static-pages"><fieldset><legend class="screen-reader-text"><span><?php _e( 'Front page displays' ); ?></span></legend>	<p><label>		<input name="show_on_front" type="radio" value="posts" class="tog" <?php checked( 'posts', get_option( 'show_on_front' ) ); ?> />		<?php _e( 'Your latest posts' ); ?>	</label>	</p>	<p><label>		<input name="show_on_front" type="radio" value="page" class="tog" <?php checked( 'page', get_option( 'show_on_front' ) ); ?> />		<?php printf( __( 'A <a href="%s">static page</a> (select below)' ), 'edit.php?post_type=page' ); ?>	</label>	</p><ul>	<li><label for="page_on_front"><?php printf( __( 'Front page: %s' ), wp_dropdown_pages( array( 'name' => 'page_on_front', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_on_front' ) ) ) ); ?></label></li>	<li><label for="page_for_posts"><?php printf( __( 'Posts page: %s' ), wp_dropdown_pages( array( 'name' => 'page_for_posts', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_for_posts' ) ) ) ); ?></label></li></ul><?php if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_for_posts' ) == get_option( 'page_on_front' ) ) : ?><div id="front-page-warning" class="error inline"><p><?php _e( '<strong>Warning:</strong> these pages should not be the same!' ); ?></p></div><?php endif; ?></fieldset></td></tr><?php endif; ?><tr valign="top"><th scope="row"><label for="posts_per_page"><?php _e( 'Blog pages show at most' ); ?></label></th><td><input name="posts_per_page" type="text" id="posts_per_page" value="<?php form_option( 'posts_per_page' ); ?>" class="small-text" /> <?php _e( 'posts' ); ?></td></tr><tr valign="top"><th scope="row"><label for="posts_per_rss"><?php _e( 'Syndication feeds show the most recent' ); ?></label></th><td><input name="posts_per_rss" type="text" id="posts_per_rss" value="<?php form_option( 'posts_per_rss' ); ?>" class="small-text" /> <?php _e( 'items' ); ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'For each article in a feed, show' ); ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'For each article in a feed, show' ); ?> </span></legend><p><label><input name="rss_use_excerpt"  type="radio" value="0" <?php checked( 0, get_option( 'rss_use_excerpt' ) ); ?>	/> <?php _e( 'Full text' ); ?></label><br /><label><input name="rss_use_excerpt" type="radio" value="1" <?php checked( 1, get_option( 'rss_use_excerpt' ) ); ?> /> <?php _e( 'Summary' ); ?></label></p></fieldset></td></tr><tr valign="top"><th scope="row"><label for="blog_charset"><?php _e( 'Encoding for pages and feeds' ); ?></label></th><td><input name="blog_charset" type="text" id="blog_charset" value="<?php form_option( 'blog_charset' ); ?>" class="regular-text" /><span class="description"><?php _e( 'The <a href="http://codex.wordpress.org/Glossary#Character_set">character encoding</a> of your site (UTF-8 is recommended, if you are adventurous there are some <a href="http://en.wikipedia.org/wiki/Character_set">other encodings</a>)' ); ?></span></td></tr><?php do_settings_fields( 'reading', 'default' ); ?></table><?php do_settings_sections( 'reading' ); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php include( './admin-footer.php' ); ?>
<?php/** * Multisite delete site panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );// @todo Create a delete blog cap.if ( ! current_user_can( 'manage_options' ) )	wp_die(__( 'You do not have sufficient permissions to delete this site.'));if ( isset( $_GET['h'] ) && $_GET['h'] != '' && get_option( 'delete_blog_hash' ) != false ) {	if ( get_option( 'delete_blog_hash' ) == $_GET['h'] ) {		wpmu_delete_blog( $wpdb->blogid );		wp_die( sprintf( __( 'Thank you for using %s, your site has been deleted. Happy trails to you until we meet again.' ), $current_site->site_name ) );	} else {		wp_die( __( "I'm sorry, the link you clicked is stale. Please select another option." ) );	}}$title = __( 'Delete Site' );$parent_file = 'tools.php';require_once( './admin-header.php' );echo '<div class="wrap">';screen_icon();echo '<h2>' . esc_html( $title ) . '</h2>';if ( isset( $_POST['action'] ) && $_POST['action'] == 'deleteblog' && isset( $_POST['confirmdelete'] ) && $_POST['confirmdelete'] == '1' ) {	$hash = wp_generate_password( 20, false );	update_option( 'delete_blog_hash', $hash );	$url_delete = esc_url( admin_url( 'ms-delete-site.php?h=' . $hash ) );	$content = apply_filters( 'delete_site_email_content', __( "Dear User,You recently clicked the 'Delete Site' link on your site and filled in aform on that page.If you really want to delete your site, click the link below. You will notbe asked to confirm again so only click this link if you are absolutely certain:###URL_DELETE###If you delete your site, please consider opening a new site heresome time in the future! (But remember your current site and usernameare gone forever.)Thanks for using the site,Webmaster###SITE_NAME###" ) );	$content = str_replace( '###URL_DELETE###', $url_delete, $content );	$content = str_replace( '###SITE_NAME###', $current_site->site_name, $content );	wp_mail( get_option( 'admin_email' ), "[ " . get_option( 'blogname' ) . " ] ".__( 'Delete My Site' ), $content );	?>	<p><?php _e( 'Thank you. Please check your email for a link to confirm your action. Your site will not be deleted until this link is clicked. ') ?></p><?php } else {	?>	<p><?php printf( __( 'If you do not want to use your %s site any more, you can delete it using the form below. When you click <strong>Delete My Site Permanently</strong> you will be sent an email with a link in it. Click on this link to delete your site.'), $current_site->site_name); ?></p>	<p><?php _e( 'Remember, once deleted your site cannot be restored.' ) ?></p>	<form method="post" name="deletedirect">		<input type="hidden" name="action" value="deleteblog" />		<p><input id="confirmdelete" type="checkbox" name="confirmdelete" value="1" /> <label for="confirmdelete"><strong><?php printf( __( "I'm sure I want to permanently disable my site, and I am aware I can never get it back or use %s again." ), is_subdomain_install() ? $current_blog->domain : $current_blog->domain . $current_blog->path ); ?></strong></label></p>		<p class="submit"><input type="submit" value="<?php esc_attr_e( 'Delete My Site Permanently' ) ?>" /></p>	</form>	<?php}echo '</div>';include( './admin-footer.php' );?>
<?php/** * Creates the password cookie and redirects back to where the * visitor was before. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php');if ( get_magic_quotes_gpc() )	$_POST['post_password'] = stripslashes($_POST['post_password']);// 10 dayssetcookie('wp-postpass_' . COOKIEHASH, $_POST['post_password'], time() + 864000, COOKIEPATH);wp_safe_redirect(wp_get_referer());?>
<?php/** * Widgets administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );/** WordPress Administration Widgets API */require_once(ABSPATH . 'wp-admin/includes/widgets.php');if ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ));wp_admin_css( 'widgets' );$widgets_access = get_user_setting( 'widgets_access' );if ( isset($_GET['widgets-access']) ) {	$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';	set_user_setting( 'widgets_access', $widgets_access );}if ( 'on' == $widgets_access )	add_filter( 'admin_body_class', create_function('', '{return " widgets_access ";}') );else	wp_enqueue_script('admin-widgets');do_action( 'sidebar_admin_setup' );$title = __( 'Widgets' );$parent_file = 'themes.php';$help = '	<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>	<p>' . __('Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>	<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>	<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>	<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>	<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Widgets_SubPanel" target="_blank">Widgets Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// register the inactive_widgets area as sidebarregister_sidebar(array(	'name' => __('Inactive Widgets'),	'id' => 'wp_inactive_widgets',	'description' => '',	'before_widget' => '',	'after_widget' => '',	'before_title' => '',	'after_title' => '',));// These are the widgets grouped by sidebar$sidebars_widgets = wp_get_sidebars_widgets();if ( empty( $sidebars_widgets ) )	$sidebars_widgets = wp_get_widget_defaults();// look for "lost" widgets, this has to run at least on each theme changefunction retrieve_widgets() {	global $wp_registered_widget_updates, $wp_registered_sidebars, $sidebars_widgets, $wp_registered_widgets;	$_sidebars_widgets = array();	$sidebars = array_keys($wp_registered_sidebars);	unset( $sidebars_widgets['array_version'] );	$old = array_keys($sidebars_widgets);	sort($old);	sort($sidebars);	if ( $old == $sidebars )		return;	// Move the known-good ones first	foreach ( $sidebars as $id ) {		if ( array_key_exists( $id, $sidebars_widgets ) ) {			$_sidebars_widgets[$id] = $sidebars_widgets[$id];			unset($sidebars_widgets[$id], $sidebars[$id]);		}	}	// if new theme has less sidebars than the old theme	if ( !empty($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $lost => $val ) {			if ( is_array($val) )				$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );		}	}	// discard invalid, theme-specific widgets from sidebars	$shown_widgets = array();	foreach ( $_sidebars_widgets as $sidebar => $widgets ) {		if ( !is_array($widgets) )			continue;		$_widgets = array();		foreach ( $widgets as $widget ) {			if ( isset($wp_registered_widgets[$widget]) )				$_widgets[] = $widget;		}		$_sidebars_widgets[$sidebar] = $_widgets;		$shown_widgets = array_merge($shown_widgets, $_widgets);	}	$sidebars_widgets = $_sidebars_widgets;	unset($_sidebars_widgets, $_widgets);	// find hidden/lost multi-widget instances	$lost_widgets = array();	foreach ( $wp_registered_widgets as $key => $val ) {		if ( in_array($key, $shown_widgets, true) )			continue;		$number = preg_replace('/.+?-([0-9]+)$/', '$1', $key);		if ( 2 > (int) $number )			continue;		$lost_widgets[] = $key;	}	$sidebars_widgets['wp_inactive_widgets'] = array_merge($lost_widgets, (array) $sidebars_widgets['wp_inactive_widgets']);	wp_set_sidebars_widgets($sidebars_widgets);}retrieve_widgets();if ( count($wp_registered_sidebars) == 1 ) {	// If only "wp_inactive_widgets" is defined the theme has no sidebars, die.	require_once( './admin-header.php' );?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>		<div class="error">			<p><?php _e( 'No Sidebars Defined' ); ?></p>		</div>		<p><?php _e( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href="http://codex.wordpress.org/Widgetizing_Themes">follow these instructions</a>.' ); ?></p>	</div><?php	require_once( './admin-footer.php' );	exit;}// We're saving a widget without jsif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {	$widget_id = $_POST['widget-id'];	check_admin_referer("save-delete-widget-$widget_id");	$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';	if ( $number ) {		foreach ( $_POST as $key => $val ) {			if ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {				$_POST[$key] = array( $number => array_shift($val) );				break;			}		}	}	$sidebar_id = $_POST['sidebar'];	$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;	$id_base = $_POST['id_base'];	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();	// delete	if ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {		if ( !in_array($widget_id, $sidebar, true) ) {			wp_redirect('widgets.php?error=0');			exit;		}		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name != $id_base || !is_callable($control['callback']) )			continue;		ob_start();			call_user_func_array( $control['callback'], $control['params'] );		ob_end_clean();		break;	}	$sidebars_widgets[$sidebar_id] = $sidebar;	// remove old position	if ( !isset($_POST['delete_widget']) ) {		foreach ( $sidebars_widgets as $key => $sb ) {			if ( is_array($sb) )				$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );		}		array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );	}	wp_set_sidebars_widgets($sidebars_widgets);	wp_redirect('widgets.php?message=0');	exit;}// Output the widget form without jsif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {	$widget_id = $_GET['editwidget'];	if ( isset($_GET['addnew']) ) {		// Default to the first sidebar		$sidebar = array_shift( $keys = array_keys($wp_registered_sidebars) );		if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget			// Copy minimal info from an existing instance of this widget to a new instance			foreach ( $wp_registered_widget_controls as $control ) {				if ( $_GET['base'] === $control['id_base'] ) {					$control_callback = $control['callback'];					$multi_number = (int) $_GET['num'];					$control['params'][0]['number'] = -1;					$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;					$wp_registered_widget_controls[$control['id']] = $control;					break;				}			}		}	}	if ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {		$control = $wp_registered_widget_controls[$widget_id];		$control_callback = $control['callback'];	} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {		$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );	}	if ( !isset($name) )		$name = esc_html( strip_tags($control['name']) );	if ( !isset($sidebar) )		$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';	if ( !isset($multi_number) )		$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];	// show the widget form	$width = ' style="width:' . max($control['width'], 350) . 'px"';	$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;	require_once( './admin-header.php' ); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<div class="editwidget"<?php echo $width; ?>>	<h3><?php printf( __( 'Widget %s' ), $name ); ?></h3>	<form action="widgets.php" method="post">	<div class="widget-inside"><?php	if ( is_callable( $control_callback ) )		call_user_func_array( $control_callback, $control['params'] );	else		echo '<p>' . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<p class="describe"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>	<div class="widget-position">	<table class="widefat"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody><?php	foreach ( $wp_registered_sidebars as $sbname => $sbvalue ) {		echo "\t\t<tr><td><label><input type='radio' name='sidebar' value='" . esc_attr($sbname) . "'" . checked( $sbname, $sidebar, false ) . " /> $sbvalue[name]</label></td><td>";		if ( 'wp_inactive_widgets' == $sbname ) {			echo '&nbsp;';		} else {			if ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {				$j = 1;				$sidebars_widgets[$sbname] = array();			} else {				$j = count($sidebars_widgets[$sbname]);				if ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )					$j++;			}			$selected = '';			echo "\t\t<select name='{$sbname}_position'>\n";			echo "\t\t<option value=''>" . __('&mdash; Select &mdash;') . "</option>\n";			for ( $i = 1; $i <= $j; $i++ ) {				if ( in_array($widget_id, $sidebars_widgets[$sbname], true) )					$selected = selected( $i, $key + 1, false );				echo "\t\t<option value='$i'$selected> $i </option>\n";			}			echo "\t\t</select>\n";		}		echo "</td></tr>\n";	} ?>	</tbody></table>	</div>	<div class="widget-control-actions"><?php	if ( isset($_GET['addnew']) ) { ?>	<a href="widgets.php" class="button alignleft"><?php _e('Cancel'); ?></a><?php	} else { ?>	<input type="submit" name="removewidget" class="button alignleft" value="<?php esc_attr_e('Delete'); ?>" /><?php	} ?>	<input type="submit" name="savewidget" class="button-primary alignright" value="<?php esc_attr_e('Save Widget'); ?>" />	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($widget_id); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" /><?php	wp_nonce_field("save-delete-widget-$widget_id"); ?>	<br class="clear" />	</div>	</form>	</div>	</div><?php	require_once( './admin-footer.php' );	exit;}$messages = array(	__('Changes saved.'));$errors = array(	__('Error while saving.'),	__('Error in displaying the widget settings form.'));require_once( './admin-header.php' ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?><div id="message" class="updated"><p><?php echo $messages[$_GET['message']]; ?></p></div><?php } ?><?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?><div id="message" class="error"><p><?php echo $errors[$_GET['error']]; ?></p></div><?php } ?><?php do_action( 'widgets_admin_page' ); ?><div class="widget-liquid-left"><div id="widgets-left">	<div id="available-widgets" class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Available Widgets'); ?> <span id="removing-widget"><?php _e('Deactivate'); ?> <span></span></span></h3></div>		<div class="widget-holder">		<p class="description"><?php _e('Drag widgets from here to a sidebar on the right to activate them. Drag widgets back here to deactivate them and delete their settings.'); ?></p>		<div id="widget-list">		<?php wp_list_widgets(); ?>		</div>		<br class='clear' />		</div>		<br class="clear" />	</div>	<div class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Inactive Widgets'); ?>		<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>		<div class="widget-holder inactive">		<p class="description"><?php _e('Drag widgets here to remove them from the sidebar but keep their settings.'); ?></p>		<?php wp_list_widget_controls('wp_inactive_widgets'); ?>		<br class="clear" />		</div>	</div></div></div><div class="widget-liquid-right"><div id="widgets-right"><?php$i = 0;foreach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {	if ( 'wp_inactive_widgets' == $sidebar )		continue;	$closed = $i ? ' closed' : ''; ?>	<div class="widgets-holder-wrap<?php echo $closed; ?>">	<div class="sidebar-name">	<div class="sidebar-name-arrow"><br /></div>	<h3><?php echo esc_html( $registered_sidebar['name'] ); ?>	<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_dark.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>	<?php wp_list_widget_controls( $sidebar ); // Show the control forms for each of the widgets in this sidebar ?>	</div><?php	$i++;} ?></div></div><form action="" method="post"><?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?></form><br class="clear" /></div><?phpdo_action( 'sidebar_admin_page' );require_once( './admin-footer.php' );
<?php/** * "Inline" diff renderer. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Ciprian Popovici * @package Text_Diff *//** Text_Diff_Renderer */// WP #7391require_once dirname(dirname(__FILE__)) . '/Renderer.php';/** * "Inline" diff renderer. * * This class renders diffs in the Wiki-style "inline" format. * * @author  Ciprian Popovici * @package Text_Diff */class Text_Diff_Renderer_inline extends Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * @var integer     */    var $_leading_context_lines = 10000;    /**     * Number of trailing context "lines" to preserve.     *     * @var integer     */    var $_trailing_context_lines = 10000;    /**     * Prefix for inserted text.     *     * @var string     */    var $_ins_prefix = '<ins>';    /**     * Suffix for inserted text.     *     * @var string     */    var $_ins_suffix = '</ins>';    /**     * Prefix for deleted text.     *     * @var string     */    var $_del_prefix = '<del>';    /**     * Suffix for deleted text.     *     * @var string     */    var $_del_suffix = '</del>';    /**     * Header for each change block.     *     * @var string     */    var $_block_header = '';    /**     * Whether to split down to character-level.     *     * @var boolean     */    var $_split_characters = false;    /**     * What are we currently splitting on? Used to recurse to show word-level     * or character-level changes.     *     * @var string     */    var $_split_level = 'lines';    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        return $this->_block_header;    }    function _startBlock($header)    {        return $header;    }    function _lines($lines, $prefix = ' ', $encode = true)    {        if ($encode) {            array_walk($lines, array(&$this, '_encode'));        }        if ($this->_split_level == 'lines') {            return implode("\n", $lines) . "\n";        } else {            return implode('', $lines);        }    }    function _added($lines)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_ins_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_ins_suffix;        return $this->_lines($lines, ' ', false);    }    function _deleted($lines, $words = false)    {        array_walk($lines, array(&$this, '_encode'));        $lines[0] = $this->_del_prefix . $lines[0];        $lines[count($lines) - 1] .= $this->_del_suffix;        return $this->_lines($lines, ' ', false);    }    function _changed($orig, $final)    {        /* If we've already split on characters, just display. */        if ($this->_split_level == 'characters') {            return $this->_deleted($orig)                . $this->_added($final);        }        /* If we've already split on words, just display. */        if ($this->_split_level == 'words') {            $prefix = '';            while ($orig[0] !== false && $final[0] !== false &&                   substr($orig[0], 0, 1) == ' ' &&                   substr($final[0], 0, 1) == ' ') {                $prefix .= substr($orig[0], 0, 1);                $orig[0] = substr($orig[0], 1);                $final[0] = substr($final[0], 1);            }            return $prefix . $this->_deleted($orig) . $this->_added($final);        }        $text1 = implode("\n", $orig);        $text2 = implode("\n", $final);        /* Non-printing newline marker. */        $nl = "\0";        if ($this->_split_characters) {            $diff = new Text_Diff('native',                                  array(preg_split('//', $text1),                                        preg_split('//', $text2)));        } else {            /* We want to split on word boundaries, but we need to preserve             * whitespace as well. Therefore we split on words, but include             * all blocks of whitespace in the wordlist. */            $diff = new Text_Diff('native',                                  array($this->_splitOnWords($text1, $nl),                                        $this->_splitOnWords($text2, $nl)));        }        /* Get the diff in inline format. */        $renderer = new Text_Diff_Renderer_inline            (array_merge($this->getParams(),                         array('split_level' => $this->_split_characters ? 'characters' : 'words')));        /* Run the diff and get the output. */        return str_replace($nl, "\n", $renderer->render($diff)) . "\n";    }    function _splitOnWords($string, $newlineEscape = "\n")    {        // Ignore \0; otherwise the while loop will never finish.        $string = str_replace("\0", '', $string);        $words = array();        $length = strlen($string);        $pos = 0;        while ($pos < $length) {            // Eat a word with any preceding whitespace.            $spaces = strspn(substr($string, $pos), " \n");            $nextpos = strcspn(substr($string, $pos + $spaces), " \n");            $words[] = str_replace("\n", $newlineEscape, substr($string, $pos, $spaces + $nextpos));            $pos += $spaces + $nextpos;        }        return $words;    }    function _encode(&$string)    {        $string = htmlspecialchars($string);    }}
<?php/** * IXR - The Inutio XML-RPC Library * * @package IXR * @since 1.5 * * @copyright Incutio Ltd 2002-2005 * @version 1.7 (beta) 23rd May 2005 * @author Simon Willison * @link http://scripts.incutio.com/xmlrpc/ Site * @link http://scripts.incutio.com/xmlrpc/manual.php Manual * @license BSD License http://www.opensource.org/licenses/bsd-license.php *//** * IXR_Value * * @package IXR * @since 1.5 */class IXR_Value {    var $data;    var $type;    function IXR_Value ($data, $type = false) {        $this->data = $data;        if (!$type) {            $type = $this->calculateType();        }        $this->type = $type;        if ($type == 'struct') {            /* Turn all the values in the array in to new IXR_Value objects */            foreach ($this->data as $key => $value) {                $this->data[$key] = new IXR_Value($value);            }        }        if ($type == 'array') {            for ($i = 0, $j = count($this->data); $i < $j; $i++) {                $this->data[$i] = new IXR_Value($this->data[$i]);            }        }    }    function calculateType() {        if ($this->data === true || $this->data === false) {            return 'boolean';        }        if (is_integer($this->data)) {            return 'int';        }        if (is_double($this->data)) {            return 'double';        }        // Deal with IXR object types base64 and date        if (is_object($this->data) && is_a($this->data, 'IXR_Date')) {            return 'date';        }        if (is_object($this->data) && is_a($this->data, 'IXR_Base64')) {            return 'base64';        }        // If it is a normal PHP object convert it in to a struct        if (is_object($this->data)) {            $this->data = get_object_vars($this->data);            return 'struct';        }        if (!is_array($this->data)) {            return 'string';        }        /* We have an array - is it an array or a struct ? */        if ($this->isStruct($this->data)) {            return 'struct';        } else {            return 'array';        }    }    function getXml() {        /* Return XML for this value */        switch ($this->type) {            case 'boolean':                return '<boolean>'.(($this->data) ? '1' : '0').'</boolean>';                break;            case 'int':                return '<int>'.$this->data.'</int>';                break;            case 'double':                return '<double>'.$this->data.'</double>';                break;            case 'string':                return '<string>'.htmlspecialchars($this->data).'</string>';                break;            case 'array':                $return = '<array><data>'."\n";                foreach ($this->data as $item) {                    $return .= '  <value>'.$item->getXml()."</value>\n";                }                $return .= '</data></array>';                return $return;                break;            case 'struct':                $return = '<struct>'."\n";                foreach ($this->data as $name => $value) {					$name = htmlspecialchars($name);                    $return .= "  <member><name>$name</name><value>";                    $return .= $value->getXml()."</value></member>\n";                }                $return .= '</struct>';                return $return;                break;            case 'date':            case 'base64':                return $this->data->getXml();                break;        }        return false;    }    function isStruct($array) {        /* Nasty function to check if an array is a struct or not */        $expected = 0;        foreach ($array as $key => $value) {            if ((string)$key != (string)$expected) {                return true;            }            $expected++;        }        return false;    }}/** * IXR_Message * * @package IXR * @since 1.5 */class IXR_Message {    var $message;    var $messageType;  // methodCall / methodResponse / fault    var $faultCode;    var $faultString;    var $methodName;    var $params;    // Current variable stacks    var $_arraystructs = array();   // The stack used to keep track of the current array/struct    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array    var $_currentStructName = array();  // A stack as well    var $_param;    var $_value;    var $_currentTag;    var $_currentTagContents;    // The XML parser    var $_parser;    function IXR_Message (&$message) {        $this->message = &$message;    }    function parse() {		// first remove the XML declaration		// this method avoids the RAM usage of preg_replace on very large messages		$header = preg_replace( '/<\?xml.*?\?'.'>/', '', substr( $this->message, 0, 100 ), 1 );		$this->message = substr_replace($this->message, $header, 0, 100);        if (trim($this->message) == '') {            return false;		}        $this->_parser = xml_parser_create();        // Set XML parser to take the case of tags in to account        xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, false);        // Set XML parser callback functions        xml_set_object($this->_parser, $this);        xml_set_element_handler($this->_parser, 'tag_open', 'tag_close');		xml_set_character_data_handler($this->_parser, 'cdata');		$chunk_size = 262144; // 256Kb, parse in chunks to avoid the RAM usage on very large messages		do {			if ( strlen($this->message) <= $chunk_size )				$final=true;			$part = substr( $this->message, 0, $chunk_size );			$this->message = substr( $this->message, $chunk_size );			if ( !xml_parse( $this->_parser, $part, $final ) )				return false;			if ( $final )				break;		} while ( true );		xml_parser_free($this->_parser);        // Grab the error messages, if any        if ($this->messageType == 'fault') {            $this->faultCode = $this->params[0]['faultCode'];            $this->faultString = $this->params[0]['faultString'];		}        return true;    }    function tag_open($parser, $tag, $attr) {        $this->_currentTagContents = '';        $this->currentTag = $tag;        switch($tag) {            case 'methodCall':            case 'methodResponse':            case 'fault':                $this->messageType = $tag;                break;            /* Deal with stacks of arrays and structs */            case 'data':    // data is to all intents and puposes more interesting than array                $this->_arraystructstypes[] = 'array';                $this->_arraystructs[] = array();                break;            case 'struct':                $this->_arraystructstypes[] = 'struct';                $this->_arraystructs[] = array();                break;        }    }    function cdata($parser, $cdata) {        $this->_currentTagContents .= $cdata;    }    function tag_close($parser, $tag) {        $valueFlag = false;        switch($tag) {            case 'int':            case 'i4':                $value = (int) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'double':                $value = (double) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'string':                $value = $this->_currentTagContents;                $valueFlag = true;                break;            case 'dateTime.iso8601':                $value = new IXR_Date(trim($this->_currentTagContents));                // $value = $iso->getTimestamp();                $valueFlag = true;                break;            case 'value':                // "If no type is indicated, the type is string."                if (trim($this->_currentTagContents) != '') {                    $value = (string)$this->_currentTagContents;                    $valueFlag = true;                }                break;            case 'boolean':                $value = (boolean) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'base64':                $value = base64_decode( trim( $this->_currentTagContents ) );                $valueFlag = true;                break;            /* Deal with stacks of arrays and structs */            case 'data':            case 'struct':                $value = array_pop($this->_arraystructs);                array_pop($this->_arraystructstypes);                $valueFlag = true;                break;            case 'member':                array_pop($this->_currentStructName);                break;            case 'name':                $this->_currentStructName[] = trim($this->_currentTagContents);                break;            case 'methodName':                $this->methodName = trim($this->_currentTagContents);                break;        }        if ($valueFlag) {            if (count($this->_arraystructs) > 0) {                // Add value to struct or array                if ($this->_arraystructstypes[count($this->_arraystructstypes)-1] == 'struct') {                    // Add to struct                    $this->_arraystructs[count($this->_arraystructs)-1][$this->_currentStructName[count($this->_currentStructName)-1]] = $value;                } else {                    // Add to array                    $this->_arraystructs[count($this->_arraystructs)-1][] = $value;                }            } else {                // Just add as a paramater                $this->params[] = $value;            }        }        $this->_currentTagContents = '';    }}/** * IXR_Server * * @package IXR * @since 1.5 */class IXR_Server {    var $data;    var $callbacks = array();    var $message;    var $capabilities;    function IXR_Server($callbacks = false, $data = false) {        $this->setCapabilities();        if ($callbacks) {            $this->callbacks = $callbacks;        }        $this->setCallbacks();        $this->serve($data);    }    function serve($data = false) {        if (!$data) {            global $HTTP_RAW_POST_DATA;            if (!$HTTP_RAW_POST_DATA) {               header( 'Content-Type: text/plain' );               die('XML-RPC server accepts POST requests only.');            }            $data = &$HTTP_RAW_POST_DATA;        }        $this->message = new IXR_Message($data);        if (!$this->message->parse()) {            $this->error(-32700, 'parse error. not well formed');        }        if ($this->message->messageType != 'methodCall') {            $this->error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');        }        $result = $this->call($this->message->methodName, $this->message->params);        // Is the result an error?        if (is_a($result, 'IXR_Error')) {            $this->error($result);        }        // Encode the result        $r = new IXR_Value($result);        $resultxml = $r->getXml();        // Create the XML        $xml = <<<EOD<methodResponse>  <params>    <param>      <value>        $resultxml      </value>    </param>  </params></methodResponse>EOD;        // Send it        $this->output($xml);    }    function call($methodname, $args) {        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method '.                $methodname.' does not exist.');        }        $method = $this->callbacks[$methodname];        // Perform the callback and send the response        if (count($args) == 1) {            // If only one paramater just send that instead of the whole array            $args = $args[0];        }        // Are we dealing with a function or a method?        if ( is_string( $method ) && substr($method, 0, 5) == 'this:' ) {            // It's a class method - check it exists            $method = substr($method, 5);            if (!method_exists($this, $method)) {                return new IXR_Error(-32601, 'server error. requested class method "'.                    $method.'" does not exist.');            }            // Call the method            $result = $this->$method($args);        } else {            // It's a function - does it exist?            if (is_array($method)) {                if (!method_exists($method[0], $method[1])) {                    return new IXR_Error(-32601, 'server error. requested object method "'.                        $method[1].'" does not exist.');                }            } else if (!function_exists($method)) {                return new IXR_Error(-32601, 'server error. requested function "'.                    $method.'" does not exist.');            }            // Call the function            $result = call_user_func($method, $args);        }        return $result;    }    function error($error, $message = false) {        // Accepts either an error object or an error code and message        if ($message && !is_object($error)) {            $error = new IXR_Error($error, $message);        }        $this->output($error->getXml());    }    function output($xml) {        $xml = '<?xml version="1.0"?>'."\n".$xml;        $length = strlen($xml);        header('Connection: close');        header('Content-Length: '.$length);        header('Content-Type: text/xml');        header('Date: '.date('r'));        echo $xml;        exit;    }    function hasMethod($method) {        return in_array($method, array_keys($this->callbacks));    }    function setCapabilities() {        // Initialises capabilities array        $this->capabilities = array(            'xmlrpc' => array(                'specUrl' => 'http://www.xmlrpc.com/spec',                'specVersion' => 1            ),            'faults_interop' => array(                'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',                'specVersion' => 20010516            ),            'system.multicall' => array(                'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',                'specVersion' => 1            ),        );    }    function getCapabilities($args) {        return $this->capabilities;    }    function setCallbacks() {        $this->callbacks['system.getCapabilities'] = 'this:getCapabilities';        $this->callbacks['system.listMethods'] = 'this:listMethods';        $this->callbacks['system.multicall'] = 'this:multiCall';    }    function listMethods($args) {        // Returns a list of methods - uses array_reverse to ensure user defined        // methods are listed before server defined methods        return array_reverse(array_keys($this->callbacks));    }    function multiCall($methodcalls) {        // See http://www.xmlrpc.com/discuss/msgReader$1208        $return = array();        foreach ($methodcalls as $call) {            $method = $call['methodName'];            $params = $call['params'];            if ($method == 'system.multicall') {                $result = new IXR_Error(-32600, 'Recursive calls to system.multicall are forbidden');            } else {                $result = $this->call($method, $params);            }            if (is_a($result, 'IXR_Error')) {                $return[] = array(                    'faultCode' => $result->code,                    'faultString' => $result->message                );            } else {                $return[] = array($result);            }        }        return $return;    }}/** * IXR_Request * * @package IXR * @since 1.5 */class IXR_Request {    var $method;    var $args;    var $xml;    function IXR_Request($method, $args) {        $this->method = $method;        $this->args = $args;        $this->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$this->method}</methodName><params>EOD;        foreach ($this->args as $arg) {            $this->xml .= '<param><value>';            $v = new IXR_Value($arg);            $this->xml .= $v->getXml();            $this->xml .= "</value></param>\n";        }        $this->xml .= '</params></methodCall>';    }    function getLength() {        return strlen($this->xml);    }    function getXml() {        return $this->xml;    }}/** * IXR_Client * * @package IXR * @since 1.5 */class IXR_Client {    var $server;    var $port;    var $path;    var $useragent;	var $headers;    var $response;    var $message = false;    var $debug = false;    var $timeout;    // Storage place for an error message    var $error = false;    function IXR_Client($server, $path = false, $port = 80, $timeout = false) {        if (!$path) {            // Assume we have been given a URL instead            $bits = parse_url($server);            $this->server = $bits['host'];            $this->port = isset($bits['port']) ? $bits['port'] : 80;            $this->path = isset($bits['path']) ? $bits['path'] : '/';            // Make absolutely sure we have a path            if (!$this->path) {                $this->path = '/';            }        } else {            $this->server = $server;            $this->path = $path;            $this->port = $port;        }        $this->useragent = 'The Incutio XML-RPC PHP Library';        $this->timeout = $timeout;    }    function query() {        $args = func_get_args();        $method = array_shift($args);        $request = new IXR_Request($method, $args);        $length = $request->getLength();        $xml = $request->getXml();        $r = "\r\n";        $request  = "POST {$this->path} HTTP/1.0$r";		$this->headers['Host']			= $this->server;		$this->headers['Content-Type']	= 'text/xml';		$this->headers['User-Agent']	= $this->useragent;		$this->headers['Content-Length']= $length;		foreach( $this->headers as $header => $value ) {			$request .= "{$header}: {$value}{$r}";		}		$request .= $r;        $request .= $xml;        // Now send the request        if ($this->debug) {            echo '<pre class="ixr_request">'.htmlspecialchars($request)."\n</pre>\n\n";        }        if ($this->timeout) {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr, $this->timeout);        } else {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr);        }        if (!$fp) {            $this->error = new IXR_Error(-32300, "transport error - could not open socket: $errno $errstr");            return false;        }        fputs($fp, $request);        $contents = '';        $debug_contents = '';        $gotFirstLine = false;        $gettingHeaders = true;        while (!feof($fp)) {            $line = fgets($fp, 4096);            if (!$gotFirstLine) {                // Check line for '200'                if (strstr($line, '200') === false) {                    $this->error = new IXR_Error(-32301, 'transport error - HTTP status code was not 200');                    return false;                }                $gotFirstLine = true;            }            if (trim($line) == '') {                $gettingHeaders = false;            }            if (!$gettingHeaders) {            	// WP#12559 remove trim so as to not strip newlines from received response.                $contents .= $line;            }            if ($this->debug) {                $debug_contents .= $line;            }        }        if ($this->debug) {            echo '<pre class="ixr_response">'.htmlspecialchars($debug_contents)."\n</pre>\n\n";        }        // Now parse what we've got back        $this->message = new IXR_Message($contents);        if (!$this->message->parse()) {            // XML error            $this->error = new IXR_Error(-32700, 'parse error. not well formed');            return false;        }        // Is the message a fault?        if ($this->message->messageType == 'fault') {            $this->error = new IXR_Error($this->message->faultCode, $this->message->faultString);            return false;        }        // Message must be OK        return true;    }    function getResponse() {        // methodResponses can only have one param - return that        return $this->message->params[0];    }    function isError() {        return (is_object($this->error));    }    function getErrorCode() {        return $this->error->code;    }    function getErrorMessage() {        return $this->error->message;    }}/** * IXR_Error * * @package IXR * @since 1.5 */class IXR_Error {    var $code;    var $message;    function IXR_Error($code, $message) {        $this->code = $code;        // WP adds htmlspecialchars(). See #5666        $this->message = htmlspecialchars($message);    }    function getXml() {        $xml = <<<EOD<methodResponse>  <fault>    <value>      <struct>        <member>          <name>faultCode</name>          <value><int>{$this->code}</int></value>        </member>        <member>          <name>faultString</name>          <value><string>{$this->message}</string></value>        </member>      </struct>    </value>  </fault></methodResponse>EOD;        return $xml;    }}/** * IXR_Date * * @package IXR * @since 1.5 */class IXR_Date {    var $year;    var $month;    var $day;    var $hour;    var $minute;    var $second;    var $timezone;    function IXR_Date($time) {        // $time can be a PHP timestamp or an ISO one        if (is_numeric($time)) {            $this->parseTimestamp($time);        } else {            $this->parseIso($time);        }    }    function parseTimestamp($timestamp) {        $this->year = date('Y', $timestamp);        $this->month = date('m', $timestamp);        $this->day = date('d', $timestamp);        $this->hour = date('H', $timestamp);        $this->minute = date('i', $timestamp);        $this->second = date('s', $timestamp);        // WP adds timezone. See #2036        $this->timezone = '';    }    function parseIso($iso) {        $this->year = substr($iso, 0, 4);        $this->month = substr($iso, 4, 2);        $this->day = substr($iso, 6, 2);        $this->hour = substr($iso, 9, 2);        $this->minute = substr($iso, 12, 2);        $this->second = substr($iso, 15, 2);        // WP adds timezone. See #2036        $this->timezone = substr($iso, 17);    }    function getIso() {    	// WP adds timezone. See #2036        return $this->year.$this->month.$this->day.'T'.$this->hour.':'.$this->minute.':'.$this->second.$this->timezone;    }    function getXml() {        return '<dateTime.iso8601>'.$this->getIso().'</dateTime.iso8601>';    }    function getTimestamp() {        return mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year);    }}/** * IXR_Base64 * * @package IXR * @since 1.5 */class IXR_Base64 {    var $data;    function IXR_Base64($data) {        $this->data = $data;    }    function getXml() {        return '<base64>'.base64_encode($this->data).'</base64>';    }}/** * IXR_IntrospectionServer * * @package IXR * @since 1.5 */class IXR_IntrospectionServer extends IXR_Server {    var $signatures;    var $help;    function IXR_IntrospectionServer() {        $this->setCallbacks();        $this->setCapabilities();        $this->capabilities['introspection'] = array(            'specUrl' => 'http://xmlrpc.usefulinc.com/doc/reserved.html',            'specVersion' => 1        );        $this->addCallback(            'system.methodSignature',            'this:methodSignature',            array('array', 'string'),            'Returns an array describing the return type and required parameters of a method'        );        $this->addCallback(            'system.getCapabilities',            'this:getCapabilities',            array('struct'),            'Returns a struct describing the XML-RPC specifications supported by this server'        );        $this->addCallback(            'system.listMethods',            'this:listMethods',            array('array'),            'Returns an array of available methods on this server'        );        $this->addCallback(            'system.methodHelp',            'this:methodHelp',            array('string', 'string'),            'Returns a documentation string for the specified method'        );    }    function addCallback($method, $callback, $args, $help) {        $this->callbacks[$method] = $callback;        $this->signatures[$method] = $args;        $this->help[$method] = $help;    }    function call($methodname, $args) {        // Make sure it's in an array        if ($args && !is_array($args)) {            $args = array($args);        }        // Over-rides default call method, adds signature check        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method "'.$this->message->methodName.'" not specified.');        }        $method = $this->callbacks[$methodname];        $signature = $this->signatures[$methodname];        $returnType = array_shift($signature);        // Check the number of arguments        if (count($args) != count($signature)) {            return new IXR_Error(-32602, 'server error. wrong number of method parameters');        }        // Check the argument types        $ok = true;        $argsbackup = $args;        for ($i = 0, $j = count($args); $i < $j; $i++) {            $arg = array_shift($args);            $type = array_shift($signature);            switch ($type) {                case 'int':                case 'i4':                    if (is_array($arg) || !is_int($arg)) {                        $ok = false;                    }                    break;                case 'base64':                case 'string':                    if (!is_string($arg)) {                        $ok = false;                    }                    break;                case 'boolean':                    if ($arg !== false && $arg !== true) {                        $ok = false;                    }                    break;                case 'float':                case 'double':                    if (!is_float($arg)) {                        $ok = false;                    }                    break;                case 'date':                case 'dateTime.iso8601':                    if (!is_a($arg, 'IXR_Date')) {                        $ok = false;                    }                    break;            }            if (!$ok) {                return new IXR_Error(-32602, 'server error. invalid method parameters');            }        }        // It passed the test - run the "real" method call        return parent::call($methodname, $argsbackup);    }    function methodSignature($method) {        if (!$this->hasMethod($method)) {            return new IXR_Error(-32601, 'server error. requested method "'.$method.'" not specified.');        }        // We should be returning an array of types        $types = $this->signatures[$method];        $return = array();        foreach ($types as $type) {            switch ($type) {                case 'string':                    $return[] = 'string';                    break;                case 'int':                case 'i4':                    $return[] = 42;                    break;                case 'double':                    $return[] = 3.1415;                    break;                case 'dateTime.iso8601':                    $return[] = new IXR_Date(time());                    break;                case 'boolean':                    $return[] = true;                    break;                case 'base64':                    $return[] = new IXR_Base64('base64');                    break;                case 'array':                    $return[] = array('array');                    break;                case 'struct':                    $return[] = array('struct' => 'struct');                    break;            }        }        return $return;    }    function methodHelp($method) {        return $this->help[$method];    }}/** * IXR_ClientMulticall * * @package IXR * @since 1.5 */class IXR_ClientMulticall extends IXR_Client {    var $calls = array();    function IXR_ClientMulticall($server, $path = false, $port = 80) {        parent::IXR_Client($server, $path, $port);        $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';    }    function addCall() {        $args = func_get_args();        $methodName = array_shift($args);        $struct = array(            'methodName' => $methodName,            'params' => $args        );        $this->calls[] = $struct;    }    function query() {        // Prepare multicall, then call the parent::query() method        return parent::query('system.multicall', $this->calls);    }}?>
<?php/** * Deprecated pluggable functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed in a * later version. * * Deprecated warnings are also thrown if one of these functions is being defined by a plugin. * * @package WordPress * @subpackage Deprecated * @see pluggable.php *//* * Deprecated functions come here to die. */if ( !function_exists('set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * @since 2.0.1 * @see wp_set_current_user() An alias of wp_set_current_user() * @deprecated 3.0.0 * @deprecated Use wp_set_current_user() * * @param int|null $id User ID. * @param string $name Optional. The user's username * @return object returns wp_set_current_user() */function set_current_user($id, $name = '') {	_deprecated_function( __FUNCTION__, '3.0', 'wp_set_current_user()' );	return wp_set_current_user($id, $name);}endif;if ( !function_exists('wp_setcookie') ) :/** * Sets a cookie for a user who just logged in. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_set_auth_cookie() * @see wp_set_auth_cookie() * * @param string $username The user's username * @param string $password Optional. The user's password * @param bool $already_md5 Optional. Whether the password has already been through MD5 * @param string $home Optional. Will be used instead of COOKIEPATH if set * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set * @param bool $remember Optional. Remember that the user is logged in */function wp_setcookie($username, $password = '', $already_md5 = false, $home = '', $siteurl = '', $remember = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_set_auth_cookie()' );	$user = get_userdatabylogin($username);	wp_set_auth_cookie($user->ID, $remember);}else :	_deprecated_function( 'wp_setcookie', '2.5', 'wp_set_auth_cookie()' );endif;if ( !function_exists('wp_clearcookie') ) :/** * Clears the authentication cookie, logging the user out. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_clear_auth_cookie() * @see wp_clear_auth_cookie() */function wp_clearcookie() {	_deprecated_function( __FUNCTION__, '2.5', 'wp_clear_auth_cookie()' );	wp_clear_auth_cookie();}else :	_deprecated_function( 'wp_clearcookie', '2.5', 'wp_clear_auth_cookie()' );endif;if ( !function_exists('wp_get_cookie_login') ):/** * Gets the user cookie login. This function is deprecated. * * This function is deprecated and should no longer be extended as it won't be * used anywhere in WordPress. Also, plugins shouldn't use it either. * * @since 2.0.3 * @deprecated 2.5 * @deprecated No alternative * * @return bool Always returns false */function wp_get_cookie_login() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}else :	_deprecated_function( 'wp_get_cookie_login', '2.5' );endif;if ( !function_exists('wp_login') ) :/** * Checks a users login information and logs them in if it checks out. This function is deprecated. * * Use the global $error to get the reason why the login failed. If the username * is blank, no error will be set, so assume blank username on that case. * * Plugins extending this function should also provide the global $error and set * what the error is, so that those checking the global for why there was a * failure can utilize it later. * * @since 1.2.2 * @deprecated Use wp_signon() * @global string $error Error when false is returned * * @param string $username User's username * @param string $password User's password * @param bool $deprecated Not used * @return bool False on login failure, true on successful check */function wp_login($username, $password, $deprecated = '') {	_deprecated_function( __FUNCTION__, '2.5', 'wp_signon()' );	global $error;	$user = wp_authenticate($username, $password);	if ( ! is_wp_error($user) )		return true;	$error = $user->get_error_message();	return false;}else :	_deprecated_function( 'wp_login', '2.5', 'wp_signon()' );endif;
<?php/** * General API for generating and formatting diffs - the differences between * two sequences of strings. * * The original PHP version of this code was written by Geoffrey T. Dairiki * <dairiki@dairiki.org>, and is used/adapted with his permission. * * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org> * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_Diff {    /**     * Array of changes.     *     * @var array     */    var $_edits;    /**     * Computes diffs between sequences of strings.     *     * @param string $engine     Name of the diffing engine to use.  'auto'     *                           will automatically select the best.     * @param array $params      Parameters to pass to the diffing engine.     *                           Normally an array of two arrays, each     *                           containing the lines from a file.     */    function Text_Diff($engine, $params)    {        // Backward compatibility workaround.        if (!is_string($engine)) {            $params = array($engine, $params);            $engine = 'auto';        }        if ($engine == 'auto') {            $engine = extension_loaded('xdiff') ? 'xdiff' : 'native';        } else {            $engine = basename($engine);        }        // WP #7391        require_once dirname(__FILE__).'/Diff/Engine/' . $engine . '.php';        $class = 'Text_Diff_Engine_' . $engine;        $diff_engine = new $class();        $this->_edits = call_user_func_array(array($diff_engine, 'diff'), $params);    }    /**     * Returns the array of differences.     */    function getDiff()    {        return $this->_edits;    }    /**     * returns the number of new (added) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of new lines     */    function countAddedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_add') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->nfinal();            }        }        return $count;    }    /**     * Returns the number of deleted (removed) lines in a given diff.     *     * @since Text_Diff 1.1.0     *     * @return integer The number of deleted lines     */    function countDeletedLines()    {        $count = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_delete') ||                is_a($edit, 'Text_Diff_Op_change')) {                $count += $edit->norig();            }        }        return $count;    }    /**     * Computes a reversed diff.     *     * Example:     * <code>     * $diff = new Text_Diff($lines1, $lines2);     * $rev = $diff->reverse();     * </code>     *     * @return Text_Diff  A Diff object representing the inverse of the     *                    original diff.  Note that we purposely don't return a     *                    reference here, since this essentially is a clone()     *                    method.     */    function reverse()    {        if (version_compare(zend_version(), '2', '>')) {            $rev = clone($this);        } else {            $rev = $this;        }        $rev->_edits = array();        foreach ($this->_edits as $edit) {            $rev->_edits[] = $edit->reverse();        }        return $rev;    }    /**     * Checks for an empty diff.     *     * @return boolean  True if two sequences were identical.     */    function isEmpty()    {        foreach ($this->_edits as $edit) {            if (!is_a($edit, 'Text_Diff_Op_copy')) {                return false;            }        }        return true;    }    /**     * Computes the length of the Longest Common Subsequence (LCS).     *     * This is mostly for diagnostic purposes.     *     * @return integer  The length of the LCS.     */    function lcs()    {        $lcs = 0;        foreach ($this->_edits as $edit) {            if (is_a($edit, 'Text_Diff_Op_copy')) {                $lcs += count($edit->orig);            }        }        return $lcs;    }    /**     * Gets the original set of lines.     *     * This reconstructs the $from_lines parameter passed to the constructor.     *     * @return array  The original sequence of strings.     */    function getOriginal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->orig) {                array_splice($lines, count($lines), 0, $edit->orig);            }        }        return $lines;    }    /**     * Gets the final set of lines.     *     * This reconstructs the $to_lines parameter passed to the constructor.     *     * @return array  The sequence of strings.     */    function getFinal()    {        $lines = array();        foreach ($this->_edits as $edit) {            if ($edit->final) {                array_splice($lines, count($lines), 0, $edit->final);            }        }        return $lines;    }    /**     * Removes trailing newlines from a line of text. This is meant to be used     * with array_walk().     *     * @param string $line  The line to trim.     * @param integer $key  The index of the line in the array. Not used.     */    function trimNewlines(&$line, $key)    {        $line = str_replace(array("\n", "\r"), '', $line);    }    /**     * Determines the location of the system temporary directory.     *     * @static     *     * @access protected     *     * @return string  A directory name which can be used for temp files.     *                 Returns false if one could not be found.     */    function _getTempDir()    {        $tmp_locations = array('/tmp', '/var/tmp', 'c:\WUTemp', 'c:\temp',                               'c:\windows\temp', 'c:\winnt\temp');        /* Try PHP's upload_tmp_dir directive. */        $tmp = ini_get('upload_tmp_dir');        /* Otherwise, try to determine the TMPDIR environment variable. */        if (!strlen($tmp)) {            $tmp = getenv('TMPDIR');        }        /* If we still cannot determine a value, then cycle through a list of         * preset possibilities. */        while (!strlen($tmp) && count($tmp_locations)) {            $tmp_check = array_shift($tmp_locations);            if (@is_dir($tmp_check)) {                $tmp = $tmp_check;            }        }        /* If it is still empty, we have failed, so return false; otherwise         * return the directory determined. */        return strlen($tmp) ? $tmp : false;    }    /**     * Checks a diff for validity.     *     * This is here only for debugging purposes.     */    function _check($from_lines, $to_lines)    {        if (serialize($from_lines) != serialize($this->getOriginal())) {            trigger_error("Reconstructed original doesn't match", E_USER_ERROR);        }        if (serialize($to_lines) != serialize($this->getFinal())) {            trigger_error("Reconstructed final doesn't match", E_USER_ERROR);        }        $rev = $this->reverse();        if (serialize($to_lines) != serialize($rev->getOriginal())) {            trigger_error("Reversed original doesn't match", E_USER_ERROR);        }        if (serialize($from_lines) != serialize($rev->getFinal())) {            trigger_error("Reversed final doesn't match", E_USER_ERROR);        }        $prevtype = null;        foreach ($this->_edits as $edit) {            if ($prevtype == get_class($edit)) {                trigger_error("Edit sequence is non-optimal", E_USER_ERROR);            }            $prevtype = get_class($edit);        }        return true;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> */class Text_MappedDiff extends Text_Diff {    /**     * Computes a diff between sequences of strings.     *     * This can be used to compute things like case-insensitve diffs, or diffs     * which ignore changes in white-space.     *     * @param array $from_lines         An array of strings.     * @param array $to_lines           An array of strings.     * @param array $mapped_from_lines  This array should have the same size     *                                  number of elements as $from_lines.  The     *                                  elements in $mapped_from_lines and     *                                  $mapped_to_lines are what is actually     *                                  compared when computing the diff.     * @param array $mapped_to_lines    This array should have the same number     *                                  of elements as $to_lines.     */    function Text_MappedDiff($from_lines, $to_lines,                             $mapped_from_lines, $mapped_to_lines)    {        assert(count($from_lines) == count($mapped_from_lines));        assert(count($to_lines) == count($mapped_to_lines));        parent::Text_Diff($mapped_from_lines, $mapped_to_lines);        $xi = $yi = 0;        for ($i = 0; $i < count($this->_edits); $i++) {            $orig = &$this->_edits[$i]->orig;            if (is_array($orig)) {                $orig = array_slice($from_lines, $xi, count($orig));                $xi += count($orig);            }            $final = &$this->_edits[$i]->final;            if (is_array($final)) {                $final = array_slice($to_lines, $yi, count($final));                $yi += count($final);            }        }    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op {    var $orig;    var $final;    function &reverse()    {        trigger_error('Abstract method', E_USER_ERROR);    }    function norig()    {        return $this->orig ? count($this->orig) : 0;    }    function nfinal()    {        return $this->final ? count($this->final) : 0;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_copy extends Text_Diff_Op {    function Text_Diff_Op_copy($orig, $final = false)    {        if (!is_array($final)) {            $final = $orig;        }        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_copy($this->final, $this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_delete extends Text_Diff_Op {    function Text_Diff_Op_delete($lines)    {        $this->orig = $lines;        $this->final = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_add($this->orig);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_add extends Text_Diff_Op {    function Text_Diff_Op_add($lines)    {        $this->final = $lines;        $this->orig = false;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_delete($this->final);        return $reverse;    }}/** * @package Text_Diff * @author  Geoffrey T. Dairiki <dairiki@dairiki.org> * * @access private */class Text_Diff_Op_change extends Text_Diff_Op {    function Text_Diff_Op_change($orig, $final)    {        $this->orig = $orig;        $this->final = $final;    }    function &reverse()    {        $reverse = &new Text_Diff_Op_change($this->final, $this->orig);        return $reverse;    }}
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * Object Cache API * * @link http://codex.wordpress.org/Function_Reference/WP_Cache * * @package WordPress * @subpackage Cache *//** * Adds data to the cache, if the cache key doesn't aleady exist. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::add() * * @param int|string $key The cache ID to use for retrieval later * @param mixed $data The data to add to the cache store * @param string $flag The group to add the cache to * @param int $expire When the cache data should be expired * @return unknown */function wp_cache_add($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->add($key, $data, $flag, $expire);}/** * Closes the cache. * * This function has ceased to do anything since WordPress 2.5. The * functionality was removed along with the rest of the persistant cache. This * does not mean that plugins can't implement this function when they need to * make sure that the cache is cleaned up after WordPress no longer needs it. * * @since 2.0.0 * * @return bool Always returns True */function wp_cache_close() {	return true;}/** * Removes the cache contents matching ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::delete() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool True on successful removal, false on failure */function wp_cache_delete($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->delete($id, $flag);}/** * Removes all cache items. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::flush() * * @return bool Always returns true */function wp_cache_flush() {	global $wp_object_cache;	return $wp_object_cache->flush();}/** * Retrieves the cache contents from the cache by ID and flag. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::get() * * @param int|string $id What the contents in the cache are called * @param string $flag Where the cache contents are grouped * @return bool|mixed False on failure to retrieve contents or the cache *		contents on success */function wp_cache_get($id, $flag = '') {	global $wp_object_cache;	return $wp_object_cache->get($id, $flag);}/** * Sets up Object Cache Global and assigns it. * * @since 2.0.0 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache */function wp_cache_init() {	$GLOBALS['wp_object_cache'] =& new WP_Object_Cache();}/** * Replaces the contents of the cache with new data. * * @since 2.0.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::replace() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_replace($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->replace($key, $data, $flag, $expire);}/** * Saves the data to the cache. * * @since 2.0 * @uses $wp_object_cache Object Cache Class * @see WP_Object_Cache::set() * * @param int|string $id What to call the contents in the cache * @param mixed $data The contents to store in the cache * @param string $flag Where to group the cache contents * @param int $expire When to expire the cache contents * @return bool False if cache ID and group already exists, true on success */function wp_cache_set($key, $data, $flag = '', $expire = 0) {	global $wp_object_cache;	return $wp_object_cache->set($key, $data, $flag, $expire);}/** * Adds a group or set of groups to the list of global groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_global_groups( $groups ) {	global $wp_object_cache;	return $wp_object_cache->add_global_groups($groups);}/** * Adds a group or set of groups to the list of non-persistent groups. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_add_non_persistent_groups( $groups ) {	// Default cache doesn't persist so nothing to do here.	return;}/** * Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys, * this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. * * @since 2.6.0 * * @param string|array $groups A group or an array of groups to add */function wp_cache_reset() {	global $wp_object_cache;	return $wp_object_cache->reset();}/** * WordPress Object Cache * * The WordPress Object Cache is used to save on trips to the database. The * Object Cache stores all of the cache data to memory and makes the cache * contents available by using a key, which is used to name and later retrieve * the cache contents. * * The Object Cache can be replaced by other caching mechanisms by placing files * in the wp-content folder which is looked at in wp-settings. If that file * exists, then this file will not be included. * * @package WordPress * @subpackage Cache * @since 2.0 */class WP_Object_Cache {	/**	 * Holds the cached objects	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $cache = array ();	/**	 * Cache objects that do not exist in the cache	 *	 * @var array	 * @access private	 * @since 2.0.0	 */	var $non_existent_objects = array ();	/**	 * The amount of times the cache data was already stored in the cache.	 *	 * @since 2.5.0	 * @access private	 * @var int	 */	var $cache_hits = 0;	/**	 * Amount of times the cache did not have the request in cache	 *	 * @var int	 * @access public	 * @since 2.0.0	 */	var $cache_misses = 0;	/**	 * List of global groups	 *	 * @var array	 * @access protected	 * @since 3.0.0	 */	var $global_groups = array();	/**	 * Adds data to the cache if it doesn't already exist.	 *	 * @uses WP_Object_Cache::get Checks to see if the cache already has data.	 * @uses WP_Object_Cache::set Sets the data after the checking the cache	 *		contents existance.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if cache ID and group already exists, true on success	 */	function add( $id, $data, $group = 'default', $expire = '' ) {		if ( empty ($group) )			$group = 'default';		if (false !== $this->get($id, $group))			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Sets the list of global groups.	 *	 * @since 3.0.0	 *	 * @param array $groups List of groups that are global.	 */	function add_global_groups( $groups ) {		$groups = (array) $groups;		$this->global_groups = array_merge($this->global_groups, $groups);		$this->global_groups = array_unique($this->global_groups);	}	/**	 * Remove the contents of the cache ID in the group	 *	 * If the cache ID does not exist in the group and $force parameter is set	 * to false, then nothing will happen. The $force parameter is set to false	 * by default.	 *	 * On success the group and the id will be added to the	 * $non_existent_objects property in the class.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @param bool $force Optional. Whether to force the unsetting of the cache	 *		ID in the group	 * @return bool False if the contents weren't deleted and true on success	 */	function delete($id, $group = 'default', $force = false) {		if (empty ($group))			$group = 'default';		if (!$force && false === $this->get($id, $group))			return false;		unset ($this->cache[$group][$id]);		$this->non_existent_objects[$group][$id] = true;		return true;	}	/**	 * Clears the object cache of all data	 *	 * @since 2.0.0	 *	 * @return bool Always returns true	 */	function flush() {		$this->cache = array ();		return true;	}	/**	 * Retrieves the cache contents, if it exists	 *	 * The contents will be first attempted to be retrieved by searching by the	 * ID in the cache group. If the cache is hit (success) then the contents	 * are returned.	 *	 * On failure, the $non_existent_objects property is checked and if the	 * cache group and ID exist in there the cache misses will not be	 * incremented. If not in the nonexistent objects property, then the cache	 * misses will be incremented and the cache group and ID will be added to	 * the nonexistent objects.	 *	 * @since 2.0.0	 *	 * @param int|string $id What the contents in the cache are called	 * @param string $group Where the cache contents are grouped	 * @return bool|mixed False on failure to retrieve contents or the cache	 *		contents on success	 */	function get($id, $group = 'default') {		if ( empty ($group) )			$group = 'default';		if ( isset ($this->cache[$group][$id]) ) {			$this->cache_hits += 1;			if ( is_object($this->cache[$group][$id]) )				return wp_clone($this->cache[$group][$id]);			else				return $this->cache[$group][$id];		}		if ( isset ($this->non_existent_objects[$group][$id]) )			return false;		$this->non_existent_objects[$group][$id] = true;		$this->cache_misses += 1;		return false;	}	/**	 * Replace the contents in the cache, if contents already exist	 *	 * @since 2.0.0	 * @see WP_Object_Cache::set()	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire When to expire the cache contents	 * @return bool False if not exists, true if contents were replaced	 */	function replace($id, $data, $group = 'default', $expire = '') {		if (empty ($group))			$group = 'default';		if ( false === $this->get($id, $group) )			return false;		return $this->set($id, $data, $group, $expire);	}	/**	 * Reset keys	 *	 * @since 3.0.0	 */	function reset() {		// Clear out non-global caches since the blog ID has changed.		foreach ( array_keys($this->cache) as $group ) {			if ( !in_array($group, $this->global_groups) )				unset($this->cache[$group]);		}	}	/**	 * Sets the data contents into the cache	 *	 * The cache contents is grouped by the $group parameter followed by the	 * $id. This allows for duplicate ids in unique groups. Therefore, naming of	 * the group should be used with care and should follow normal function	 * naming guidelines outside of core WordPress usage.	 *	 * The $expire parameter is not used, because the cache will automatically	 * expire for each time a page is accessed and PHP finishes. The method is	 * more for cache plugins which use files.	 *	 * @since 2.0.0	 *	 * @param int|string $id What to call the contents in the cache	 * @param mixed $data The contents to store in the cache	 * @param string $group Where to group the cache contents	 * @param int $expire Not Used	 * @return bool Always returns true	 */	function set($id, $data, $group = 'default', $expire = '') {		if ( empty ($group) )			$group = 'default';		if ( NULL === $data )			$data = '';		if ( is_object($data) )			$data = wp_clone($data);		$this->cache[$group][$id] = $data;		if ( isset($this->non_existent_objects[$group][$id]) )			unset ($this->non_existent_objects[$group][$id]);		return true;	}	/**	 * Echoes the stats of the caching.	 *	 * Gives the cache hits, and cache misses. Also prints every cached group,	 * key and the data.	 *	 * @since 2.0.0	 */	function stats() {		echo "<p>";		echo "<strong>Cache Hits:</strong> {$this->cache_hits}<br />";		echo "<strong>Cache Misses:</strong> {$this->cache_misses}<br />";		echo "</p>";		foreach ($this->cache as $group => $cache) {			echo "<p>";			echo "<strong>Group:</strong> $group<br />";			echo "<strong>Cache:</strong>";			echo "<pre>";			print_r($cache);			echo "</pre>";		}	}	/**	 * PHP4 constructor; Calls PHP 5 style constructor	 *	 * @since 2.0.0	 *	 * @return WP_Object_Cache	 */	function WP_Object_Cache() {		return $this->__construct();	}	/**	 * Sets up object properties; PHP 5 style constructor	 *	 * @since 2.0.8	 * @return null|WP_Object_Cache If cache is disabled, returns null.	 */	function __construct() {		/**		 * @todo This should be moved to the PHP4 style constructor, PHP5		 * already calls __destruct()		 */		register_shutdown_function(array(&$this, "__destruct"));	}	/**	 * Will save the object cache before object is completely destroyed.	 *	 * Called upon object destruction, which should be when PHP ends.	 *	 * @since  2.0.8	 *	 * @return bool True value. Won't be used by PHP	 */	function __destruct() {		return true;	}}?>
<?php/** * @package Hello_Dolly * @version 1.5.1 *//*Plugin Name: Hello DollyPlugin URI: http://wordpress.org/#Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.Author: Matt MullenwegVersion: 1.5.1Author URI: http://ma.tt/*/function hello_dolly_get_lyric() {	/** These are the lyrics to Hello Dolly */	$lyrics = "Hello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenSo, take her wrap, fellasFind her an empty lap, fellasDolly'll never go away againHello, DollyWell, hello, DollyIt's so nice to have you back where you belongYou're lookin' swell, DollyI can tell, DollyYou're still glowin', you're still crowin'You're still goin' strongWe feel the room swayin'While the band's playin'One of your old favourite songs from way back whenGolly, gee, fellasFind her a vacant knee, fellasDolly'll never go awayDolly'll never go awayDolly'll never go away again";	// Here we split it into lines	$lyrics = explode("\n", $lyrics);	// And then randomly choose a line	return wptexturize( $lyrics[ mt_rand(0, count($lyrics) - 1) ] );}// This just echoes the chosen line, we'll position it laterfunction hello_dolly() {	$chosen = hello_dolly_get_lyric();	echo "<p id='dolly'>$chosen</p>";}// Now we set that function up to execute when the admin_footer action is calledadd_action('admin_footer', 'hello_dolly');// We need some CSS to position the paragraphfunction dolly_css() {	// This makes sure that the posinioning is also good for right-to-left languages	$x = ( is_rtl() ) ? 'left' : 'right';	echo "	<style type='text/css'>	#dolly {		position: absolute;		top: 4.5em;		margin: 0;		padding: 0;		$x: 215px;		font-size: 11px;	}	</style>	";}add_action('admin_head', 'dolly_css');?>
<?php/** * Used to set up and fix common variables and include * the WordPress procedural and class library. * * Allows for some configuration in wp-config.php (see default-constants.php) * * @package WordPress *//** * Stores the location of the WordPress directory of functions, classes, and core content. * * @since 1.0.0 */define( 'WPINC', 'wp-includes' );// Include files required for initialization.require( ABSPATH . WPINC . '/load.php' );require( ABSPATH . WPINC . '/default-constants.php' );require( ABSPATH . WPINC . '/version.php' );// Set initial default constants including WP_MEMORY_LIMIT, WP_DEBUG, WP_CONTENT_DIR and WP_CACHE.wp_initial_constants( );// Disable magic quotes at runtime. Magic quotes are added using wpdb later in wp-settings.php.set_magic_quotes_runtime( 0 );@ini_set( 'magic_quotes_sybase', 0 );// Set default timezone in PHP 5.if ( function_exists( 'date_default_timezone_set' ) )	date_default_timezone_set( 'UTC' );// Turn register_globals off.wp_unregister_GLOBALS();// Ensure these global variables do not exist so they do not interfere with WordPress.unset( $wp_filter, $cache_lastcommentmodified, $cache_lastpostdate );// Standardize $_SERVER variables across setups.wp_fix_server_vars();// Check for the required PHP version and for the MySQL extension or a database drop-in.wp_check_php_mysql_versions();// Check if we have recieved a request due to missing favicon.icowp_favicon_request();// Check if we're in maintenance mode.wp_maintenance();// Start loading timer.timer_start();// Check if we're in WP_DEBUG mode.wp_debug_mode();// For an advanced caching plugin to use. Uses a static drop-in because you would only want one.if ( WP_CACHE )	WP_DEBUG ? include( WP_CONTENT_DIR . '/advanced-cache.php' ) : @include( WP_CONTENT_DIR . '/advanced-cache.php' );// Define WP_LANG_DIR if not set.wp_set_lang_dir();// Load early WordPress files.require( ABSPATH . WPINC . '/compat.php' );require( ABSPATH . WPINC . '/functions.php' );require( ABSPATH . WPINC . '/classes.php' );// Include the wpdb class, or a db.php database drop-in if present.require_wp_db();// Set the database table prefix and the format specifiers for database table columns.wp_set_wpdb_vars();// Start the WordPress object cache, or an external object cache if the drop-in is present.wp_start_object_cache();// Load early WordPress files.require( ABSPATH . WPINC . '/plugin.php' );require( ABSPATH . WPINC . '/default-filters.php' );require( ABSPATH . WPINC . '/pomo/mo.php' );// Initialize multisite if enabled.if ( is_multisite() ) {	require( ABSPATH . WPINC . '/ms-blogs.php' );	require( ABSPATH . WPINC . '/ms-settings.php' );} elseif ( ! defined( 'MULTISITE' ) ) {	define( 'MULTISITE', false );}// Stop most of WordPress from being loaded if we just want the basics.if ( SHORTINIT )	return false;// Load the l18n library.require( ABSPATH . WPINC . '/l10n.php' );// Run the installer if WordPress is not installed.wp_not_installed();// Load most of WordPress.require( ABSPATH . WPINC . '/formatting.php' );require( ABSPATH . WPINC . '/capabilities.php' );require( ABSPATH . WPINC . '/query.php' );require( ABSPATH . WPINC . '/theme.php' );require( ABSPATH . WPINC . '/user.php' );require( ABSPATH . WPINC . '/meta.php' );require( ABSPATH . WPINC . '/general-template.php' );require( ABSPATH . WPINC . '/link-template.php' );require( ABSPATH . WPINC . '/author-template.php' );require( ABSPATH . WPINC . '/post.php' );require( ABSPATH . WPINC . '/post-template.php' );require( ABSPATH . WPINC . '/category.php' );require( ABSPATH . WPINC . '/category-template.php' );require( ABSPATH . WPINC . '/comment.php' );require( ABSPATH . WPINC . '/comment-template.php' );require( ABSPATH . WPINC . '/rewrite.php' );require( ABSPATH . WPINC . '/feed.php' );require( ABSPATH . WPINC . '/bookmark.php' );require( ABSPATH . WPINC . '/bookmark-template.php' );require( ABSPATH . WPINC . '/kses.php' );require( ABSPATH . WPINC . '/cron.php' );require( ABSPATH . WPINC . '/deprecated.php' );require( ABSPATH . WPINC . '/script-loader.php' );require( ABSPATH . WPINC . '/taxonomy.php' );require( ABSPATH . WPINC . '/update.php' );require( ABSPATH . WPINC . '/canonical.php' );require( ABSPATH . WPINC . '/shortcodes.php' );require( ABSPATH . WPINC . '/media.php' );require( ABSPATH . WPINC . '/http.php' );require( ABSPATH . WPINC . '/class-http.php' );require( ABSPATH . WPINC . '/widgets.php' );require( ABSPATH . WPINC . '/nav-menu.php' );require( ABSPATH . WPINC . '/nav-menu-template.php' );// Load multisite-specific files.if ( is_multisite() ) {	require( ABSPATH . WPINC . '/ms-functions.php' );	require( ABSPATH . WPINC . '/ms-default-filters.php' );	require( ABSPATH . WPINC . '/ms-deprecated.php' );}// Define constants that rely on the API to obtain the default value.// Define must-use plugin directory constants, which may be overridden in the sunrise.php drop-in.wp_plugin_directory_constants( );// Load must-use plugins.foreach ( wp_get_mu_plugins() as $mu_plugin ) {	include_once( $mu_plugin );}unset( $mu_plugin );do_action( 'muplugins_loaded' );if ( is_multisite() )	ms_cookie_constants(  );// Define constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies().wp_cookie_constants( );// Define and enforce our SSL constantswp_ssl_constants( );// Create common globals.require( ABSPATH . WPINC . '/vars.php' );// Make taxonomies and posts available to plugins and themes.// @plugin authors: warning: these get registered again on the init hook.create_initial_taxonomies();create_initial_post_types();// Load active plugins.foreach ( wp_get_active_and_valid_plugins() as $plugin )	include_once( $plugin );unset( $plugin );// Load pluggable functions.require( ABSPATH . WPINC . '/pluggable.php' );require( ABSPATH . WPINC . '/pluggable-deprecated.php' );// Set internal encoding.wp_set_internal_encoding();// Run wp_cache_postload() if object cache is enabled and the function exists.if ( WP_CACHE && function_exists( 'wp_cache_postload' ) )	wp_cache_postload();do_action( 'plugins_loaded' );// Define constants which affect functionality if not already defined.wp_functionality_constants( );// Add magic quotes and set up $_REQUEST ( $_GET + $_POST )wp_magic_quotes();do_action( 'sanitize_comment_cookies' );/** * WordPress Query object * @global object $wp_the_query * @since 2.0.0 */$wp_the_query =& new WP_Query();/** * Holds the reference to @see $wp_the_query * Use this global for WordPress queries * @global object $wp_query * @since 1.5.0 */$wp_query =& $wp_the_query;/** * Holds the WordPress Rewrite object for creating pretty URLs * @global object $wp_rewrite * @since 1.5.0 */$wp_rewrite =& new WP_Rewrite();/** * WordPress Object * @global object $wp * @since 2.0.0 */$wp =& new WP();/** * WordPress Widget Factory Object * @global object $wp_widget_factory * @since 2.8.0 */$wp_widget_factory =& new WP_Widget_Factory();do_action( 'setup_theme' );// Define the template related constants.wp_templating_constants(  );// Load the default text localization domain.load_default_textdomain();// Find the blog locale.$locale = get_locale();$locale_file = WP_LANG_DIR . "/$locale.php";if ( is_readable( $locale_file ) )	require( $locale_file );unset($locale_file);// Pull in locale data after loading text domain.require( ABSPATH . WPINC . '/locale.php' );/** * WordPress Locale object for loading locale domain date and various strings. * @global object $wp_locale * @since 2.1.0 */$wp_locale =& new WP_Locale();// Load the functions for the active theme, for both parent and child theme if applicable.if ( TEMPLATEPATH !== STYLESHEETPATH && file_exists( STYLESHEETPATH . '/functions.php' ) )	include( STYLESHEETPATH . '/functions.php' );if ( file_exists( TEMPLATEPATH . '/functions.php' ) )	include( TEMPLATEPATH . '/functions.php' );do_action( 'after_setup_theme' );// Load any template functions the theme supports.require_if_theme_supports( 'post-thumbnails', ABSPATH . WPINC . '/post-thumbnail-template.php' );register_shutdown_function( 'shutdown_action_hook' );// Set up current user.$wp->init();/** * Most of WP is loaded at this stage, and the user is authenticated. WP continues * to load on the init hook that follows (e.g. widgets), and many plugins instantiate * themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.). * * If you wish to plug an action once WP is loaded, use the wp_loaded hook below. */do_action( 'init' );// Check site statusif ( is_multisite() ) {	if ( true !== ( $file = ms_site_check() ) ) {		require( $file );		die();	}	unset($file);}/** * This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated. * * AJAX requests should use wp-admin/admin-ajax.php. admin-ajax.php can handle requests for * users not logged in. * * @link http://codex.wordpress.org/AJAX_in_Plugins * * @since 3.0.0 */do_action('wp_loaded');?>
<?php/** * The template for displaying Comments. * * The area of the page that contains both current comments * and the comment form.  The actual display of comments is * handled by a callback to twentyten_comment which is * located in the functions.php file. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>			<div id="comments"><?php if ( post_password_required() ) : ?>				<p class="nopassword"><?php _e( 'This post is password protected. Enter the password to view any comments.', 'twentyten' ); ?></p>			</div><!-- #comments --><?php		/* Stop the rest of comments.php from being processed,		 * but don't kill the script entirely -- we still have		 * to fully load the template.		 */		return;	endif;?><?php	// You can start editing here -- including this comment!?><?php if ( have_comments() ) : ?>			<h3 id="comments-title"><?php			printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number(), 'twentyten' ),			number_format_i18n( get_comments_number() ), '<em>' . get_the_title() . '</em>' );			?></h3><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div> <!-- .navigation --><?php endif; // check for comment navigation ?>			<ol class="commentlist">				<?php					/* Loop through and list the comments. Tell wp_list_comments()					 * to use twentyten_comment() to format the comments.					 * If you want to overload this in a child theme then you can					 * define twentyten_comment() and that will be used instead.					 * See twentyten_comment() in twentyten/functions.php for more.					 */					wp_list_comments( array( 'callback' => 'twentyten_comment' ) );				?>			</ol><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div><!-- .navigation --><?php endif; // check for comment navigation ?><?php else : // or, if we don't have comments:	/* If there are no comments and comments are closed,	 * let's leave a little note, shall we?	 */	if ( ! comments_open() ) :?>	<p class="nocomments"><?php _e( 'Comments are closed.', 'twentyten' ); ?></p><?php endif; // end ! comments_open() ?><?php endif; // end have_comments() ?><?php comment_form(); ?></div><!-- #comments -->
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress enqueued dependiences class. * * @package BackPress * @uses _WP_Dependency * @since r74 */class WP_Dependencies {	var $registered = array();	var $queue = array();	var $to_do = array();	var $done = array();	var $args = array();	var $groups = array();	var $group = 0;	function WP_Dependencies() {		$args = func_get_args();		call_user_func_array( array(&$this, '__construct'), $args );	}	function __construct() {}	/**	 * Do the dependencies	 *	 * Process the items passed to it or the queue.  Processes all dependencies.	 *	 * @param mixed handles (optional) items to be processed.  (void) processes queue, (string) process that item, (array of strings) process those items	 * @return array Items that have been processed	 */	function do_items( $handles = false, $group = false ) {		// Print the queue if nothing is passed.  If a string is passed, print that script.  If an array is passed, print those scripts.		$handles = false === $handles ? $this->queue : (array) $handles;		$this->all_deps( $handles );		foreach( $this->to_do as $key => $handle ) {			if ( !in_array($handle, $this->done) && isset($this->registered[$handle]) ) {				if ( ! $this->registered[$handle]->src ) { // Defines a group.					$this->done[] = $handle;					continue;				}				if ( $this->do_item( $handle, $group ) )					$this->done[] = $handle;				unset( $this->to_do[$key] );			}		}		return $this->done;	}	function do_item( $handle ) {		return isset($this->registered[$handle]);	}	/**	 * Determines dependencies	 *	 * Recursively builds array of items to process taking dependencies into account.  Does NOT catch infinite loops.	 *	 * @param mixed handles Accepts (string) dep name or (array of strings) dep names	 * @param bool recursion Used internally when function calls itself	 */	function all_deps( $handles, $recursion = false, $group = false ) {		if ( !$handles = (array) $handles )			return false;		foreach ( $handles as $handle ) {			$handle_parts = explode('?', $handle);			$handle = $handle_parts[0];			$queued = in_array($handle, $this->to_do, true);			if ( in_array($handle, $this->done, true) ) // Already done				continue;			$moved = $this->set_group( $handle, $recursion, $group );			if ( $queued && !$moved ) // already queued and in the right group				continue;			$keep_going = true;			if ( !isset($this->registered[$handle]) )				$keep_going = false; // Script doesn't exist			elseif ( $this->registered[$handle]->deps && array_diff($this->registered[$handle]->deps, array_keys($this->registered)) )				$keep_going = false; // Script requires deps which don't exist (not a necessary check.  efficiency?)			elseif ( $this->registered[$handle]->deps && !$this->all_deps( $this->registered[$handle]->deps, true, $group ) )				$keep_going = false; // Script requires deps which don't exist			if ( !$keep_going ) { // Either script or its deps don't exist.				if ( $recursion )					return false; // Abort this branch.				else					continue; // We're at the top level.  Move on to the next one.			}			if ( $queued ) // Already grobbed it and its deps				continue;			if ( isset($handle_parts[1]) )				$this->args[$handle] = $handle_parts[1];			$this->to_do[] = $handle;		}		return true;	}	/**	 * Adds item	 *	 * Adds the item only if no item of that name already exists	 *	 * @param string handle Script name	 * @param string src Script url	 * @param array deps (optional) Array of script names on which this script depends	 * @param string ver (optional) Script version (used for cache busting)	 * @return array Hierarchical array of dependencies	 */	function add( $handle, $src, $deps = array(), $ver = false, $args = null ) {		if ( isset($this->registered[$handle]) )			return false;		$this->registered[$handle] = new _WP_Dependency( $handle, $src, $deps, $ver, $args );		return true;	}	/**	 * Adds extra data	 *	 * Adds data only if script has already been added	 *	 * @param string handle Script name	 * @param string data_name Name of object in which to store extra data	 * @param array data Array of extra data	 * @return bool success	 */	function add_data( $handle, $data_name, $data ) {		if ( !isset($this->registered[$handle]) )			return false;		return $this->registered[$handle]->add_data( $data_name, $data );	}	function remove( $handles ) {		foreach ( (array) $handles as $handle )			unset($this->registered[$handle]);	}	function enqueue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			if ( !in_array($handle[0], $this->queue) && isset($this->registered[$handle[0]]) ) {				$this->queue[] = $handle[0];				if ( isset($handle[1]) )					$this->args[$handle[0]] = $handle[1];			}		}	}	function dequeue( $handles ) {		foreach ( (array) $handles as $handle ) {			$handle = explode('?', $handle);			$key = array_search($handle[0], $this->queue);			if ( false !== $key ) {				unset($this->queue[$key]);				unset($this->args[$handle[0]]);			}		}	}	function query( $handle, $list = 'registered' ) { // registered, queue, done, to_do		switch ( $list ) :		case 'registered':		case 'scripts': // back compat			if ( isset($this->registered[$handle]) )				return $this->registered[$handle];			break;		case 'to_print': // back compat		case 'printed': // back compat			if ( 'to_print' == $list )				$list = 'to_do';			else				$list = 'printed';		default:			if ( in_array($handle, $this->$list) )				return true;			break;		endswitch;		return false;	}	function set_group( $handle, $recursion, $group ) {		$group = (int) $group;		if ( $recursion )			$group = min($this->group, $group);		else			$this->group = $group;		if ( isset($this->groups[$handle]) && $this->groups[$handle] <= $group )			return false;		$this->groups[$handle] = $group;		return true;	}}class _WP_Dependency {	var $handle;	var $src;	var $deps = array();	var $ver = false;	var $args = null;	var $extra = array();	function _WP_Dependency() {		@list($this->handle, $this->src, $this->deps, $this->ver, $this->args) = func_get_args();		if ( !is_array($this->deps) )			$this->deps = array();	}	function add_data( $name, $data ) {		if ( !is_scalar($name) )			return false;		$this->extra[$name] = $data;		return true;	}}
<?php// Silence is golden.?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * Gets the email message from the user's mailbox to add as * a WordPress post. Mailbox connection information must be * configured under Settings > Writing * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require(dirname(__FILE__) . '/wp-load.php');if ( ! apply_filters( 'enable_post_by_email_configuration', true ) )	wp_die( __( 'This action has been disabled by the administrator.' ) );/** Allow a plugin to do a complete takeover of Post by Email **/do_action('wp-mail.php');/** Get the POP3 class with which to access the mailbox. */require_once( ABSPATH . WPINC . '/class-pop3.php' );/** Only check at this interval for new messages. */if ( !defined('WP_MAIL_INTERVAL') )	define('WP_MAIL_INTERVAL', 300); // 5 minutes$last_checked = get_transient('mailserver_last_checked');if ( $last_checked )	wp_die(__('Slow down cowboy, no need to check for new mails so often!'));set_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);$time_difference = get_option('gmt_offset') * 3600;$phone_delim = '::';$pop3 = new POP3();if ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )	wp_die( esc_html( $pop3->ERROR ) );$count = $pop3->pass( get_option('mailserver_pass') );if( false === $count )	wp_die( esc_html( $pop3->ERROR ) );if( 0 === $count ) {	$pop3->quit();	wp_die( __('There doesn&#8217;t seem to be any new mail.') );}for ( $i = 1; $i <= $count; $i++ ) {	$message = $pop3->get($i);	$bodysignal = false;	$boundary = '';	$charset = '';	$content = '';	$content_type = '';	$content_transfer_encoding = '';	$post_author = 1;	$author_found = false;	$dmonths = array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');	foreach ($message as $line) {		// body signal		if ( strlen($line) < 3 )			$bodysignal = true;		if ( $bodysignal ) {			$content .= $line;		} else {			if ( preg_match('/Content-Type: /i', $line) ) {				$content_type = trim($line);				$content_type = substr($content_type, 14, strlen($content_type) - 14);				$content_type = explode(';', $content_type);				if ( ! empty( $content_type[1] ) ) {					$charset = explode('=', $content_type[1]);					$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';				}				$content_type = $content_type[0];			}			if ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {				$content_transfer_encoding = trim($line);				$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);				$content_transfer_encoding = explode(';', $content_transfer_encoding);				$content_transfer_encoding = $content_transfer_encoding[0];			}			if ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary="') ) && ( '' == $boundary ) ) {				$boundary = trim($line);				$boundary = explode('"', $boundary);				$boundary = $boundary[1];			}			if (preg_match('/Subject: /i', $line)) {				$subject = trim($line);				$subject = substr($subject, 9, strlen($subject) - 9);				// Captures any text in the subject before $phone_delim as the subject				if ( function_exists('iconv_mime_decode') ) {					$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));				} else {					$subject = wp_iso_descrambler($subject);				}				$subject = explode($phone_delim, $subject);				$subject = $subject[0];			}			// Set the author using the email address (From or Reply-To, the last used)			// otherwise use the site admin			if ( preg_match('/(From|Reply-To): /', $line) )  {				if ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )					$author = $matches[0];				else					$author = trim($line);				$author = sanitize_email($author);				if ( is_email($author) ) {					echo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';					$userdata = get_user_by_email($author);					if ( empty($userdata) ) {						$author_found = false;					} else {						$post_author = $userdata->ID;						$author_found = true;					}				} else {					$author_found = false;				}			}			if (preg_match('/Date: /i', $line)) { // of the form '20 Mar 2002 20:32:37'				$ddate = trim($line);				$ddate = str_replace('Date: ', '', $ddate);				if (strpos($ddate, ',')) {					$ddate = trim(substr($ddate, strpos($ddate, ',') + 1, strlen($ddate)));				}				$date_arr = explode(' ', $ddate);				$date_time = explode(':', $date_arr[3]);				$ddate_H = $date_time[0];				$ddate_i = $date_time[1];				$ddate_s = $date_time[2];				$ddate_m = $date_arr[1];				$ddate_d = $date_arr[0];				$ddate_Y = $date_arr[2];				for ( $j = 0; $j < 12; $j++ ) {					if ( $ddate_m == $dmonths[$j] ) {						$ddate_m = $j+1;					}				}				$time_zn = intval($date_arr[4]) * 36;				$ddate_U = gmmktime($ddate_H, $ddate_i, $ddate_s, $ddate_m, $ddate_d, $ddate_Y);				$ddate_U = $ddate_U - $time_zn;				$post_date = gmdate('Y-m-d H:i:s', $ddate_U + $time_difference);				$post_date_gmt = gmdate('Y-m-d H:i:s', $ddate_U);			}		}	}	// Set $post_status based on $author_found and on author's publish_posts capability	if ( $author_found ) {		$user = new WP_User($post_author);		$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';	} else {		// Author not found in DB, set status to pending.  Author already set to admin.		$post_status = 'pending';	}	$subject = trim($subject);	if ( $content_type == 'multipart/alternative' ) {		$content = explode('--'.$boundary, $content);		$content = $content[2];		// match case-insensitive content-transfer-encoding		if ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {			$content = explode($delim[0], $content);			$content = $content[1];		}		$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');	}	$content = trim($content);	//Give Post-By-Email extending plugins full access to the content	//Either the raw content or the content of the last quoted-printable section	$content = apply_filters('wp_mail_original_content', $content);	if ( false !== stripos($content_transfer_encoding, "quoted-printable") ) {		$content = quoted_printable_decode($content);	}	if ( function_exists('iconv') && ! empty( $charset ) ) {		$content = iconv($charset, get_option('blog_charset'), $content);	}	// Captures any text in the body after $phone_delim as the body	$content = explode($phone_delim, $content);	$content = empty( $content[1] ) ? $content[0] : $content[1];	$content = trim($content);	$post_content = apply_filters('phone_content', $content);	$post_title = xmlrpc_getposttitle($content);	if ($post_title == '') $post_title = $subject;	$post_category = array(get_option('default_email_category'));	$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');	$post_data = add_magic_quotes($post_data);	$post_ID = wp_insert_post($post_data);	if ( is_wp_error( $post_ID ) )		echo "\n" . $post_ID->get_error_message();	// We couldn't post, for whatever reason. Better move forward to the next email.	if ( empty( $post_ID ) )		continue;	do_action('publish_phone', $post_ID);	echo "\n<p>" . sprintf(__('<strong>Author:</strong> %s'), esc_html($post_author)) . '</p>';	echo "\n<p>" . sprintf(__('<strong>Posted title:</strong> %s'), esc_html($post_title)) . '</p>';	if(!$pop3->delete($i)) {		echo '<p>' . sprintf(__('Oops: %s'), esc_html($pop3->ERROR)) . '</p>';		$pop3->reset();		exit;	} else {		echo '<p>' . sprintf(__('Mission complete.  Message <strong>%s</strong> deleted.'), $i) . '</p>';	}}$pop3->quit();?>
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Defines Multisite upload constants. * * @since 3.0.0 */function ms_upload_constants(  ) {	global $wpdb;	/** @since 3.0.0 */	// Base uploads dir relative to ABSPATH	if ( !defined( 'UPLOADBLOGSDIR' ) )		define( 'UPLOADBLOGSDIR', 'wp-content/blogs.dir' );	/** @since 3.0.0 */	if ( !defined( 'UPLOADS' ) ) {		// Uploads dir relative to ABSPATH		define( 'UPLOADS', UPLOADBLOGSDIR . "/{$wpdb->blogid}/files/" );		if ( 'wp-content/blogs.dir' == UPLOADBLOGSDIR )			define( 'BLOGUPLOADDIR', WP_CONTENT_DIR . "/blogs.dir/{$wpdb->blogid}/files/" );	}}/** * Defines Multisite cookie constants. * * @since 3.0.0 */function ms_cookie_constants(  ) {	global $current_site;	/**	 * @since 1.2.0	 */	if ( !defined( 'COOKIEPATH' ) )		define( 'COOKIEPATH', $current_site->path );	/**	 * @since 1.5.0	 */	if ( !defined( 'SITECOOKIEPATH' ) )		define( 'SITECOOKIEPATH', $current_site->path );	/**	 * @since 2.6.0	 */	if ( !defined( 'ADMIN_COOKIE_PATH' ) ) {		if( !is_subdomain_install() ) {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH );		} else {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );		}	}	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') && is_subdomain_install() ) {		if ( !empty( $current_site->cookie_domain ) )			define('COOKIE_DOMAIN', '.' . $current_site->cookie_domain);		else			define('COOKIE_DOMAIN', '.' . $current_site->domain);	}}/** * Defines Multisite file constants. * * @since 3.0.0 */function ms_file_constants(  ) {	/**	 * Optional support for X-Sendfile header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_SENDFILE' ) )		define( 'WPMU_SENDFILE', false );	/**	 * Optional support for X-Accel-Redirect header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_ACCEL_REDIRECT' ) )		define( 'WPMU_ACCEL_REDIRECT', false );}/** * Defines Multisite subdomain constants and handles warnings and notices. * * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool. * * On first call, the constants are checked and defined. On second call, * we will have translations loaded and can trigger warnings easily. * * @since 3.0.0 */function ms_subdomain_constants() {	static $error = null;	static $error_warn = false;	if ( false === $error )		return;	if ( $error ) {		$vhost_deprecated = __( 'The constant <code>VHOST</code> <strong>is deprecated</strong>. Use the boolean constant <code>SUBDOMAIN_INSTALL</code> in wp-config.php to enable a subdomain configuration. Use is_subdomain_install() to check whether a subdomain configuration is enabled.' );		if ( $error_warn ) {			trigger_error( __( '<strong>Conflicting values for the constants VHOST and SUBDOMAIN_INSTALL.</strong> The value of SUBDOMAIN_INSTALL will be assumed to be your subdomain configuration setting.' ) . ' ' . $vhost_deprecated, E_USER_WARNING );		} else {	 		_deprecated_argument( 'define()', '3.0', $vhost_deprecated );		}		return;	}	if ( defined( 'SUBDOMAIN_INSTALL' ) && defined( 'VHOST' ) ) {		if ( SUBDOMAIN_INSTALL == ( 'yes' == VHOST ) ) {			$error = true;		} else {			$error = $error_warn = true;		}	} elseif ( defined( 'SUBDOMAIN_INSTALL' ) ) {		define( 'VHOST', SUBDOMAIN_INSTALL ? 'yes' : 'no' );	} elseif ( defined( 'VHOST' ) ) {		$error = true;		define( 'SUBDOMAIN_INSTALL', 'yes' == VHOST );	} else {		define( 'SUBDOMAIN_INSTALL', false );		define( 'VHOST', 'no' );	}}add_action( 'init', 'ms_subdomain_constants' );?>
<?php/** * This holds the version number in a separate file so we can bump it without cluttering the SVN *//** * The WordPress version string * * @global string $wp_version */$wp_version = '3.0';/** * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema. * * @global int $wp_db_version */$wp_db_version = 15260;/** * Holds the TinyMCE version * * @global string $tinymce_version */$tinymce_version = '327-1235';/** * Holds the cache manifest version * * @global string $manifest_version */$manifest_version = '20100530';/** * Holds the required PHP version * * @global string $required_php_version */$required_php_version = '4.3';/** * Holds the required MySQL version * * @global string $required_mysql_version */$required_mysql_version = '4.1.2';
<?php/** * WordPress Post Thumbnail Template Functions. * * Support for post thumbnails * Themes function.php must call add_theme_support( 'post-thumbnails' ) to use these. * * @package WordPress * @subpackage Template *//** * Check if post has an image attached. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post has an image attached. */function has_post_thumbnail( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return !! get_post_thumbnail_id( $post_id );}/** * Retrieve Post Thumbnail ID. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return int */function get_post_thumbnail_id( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return get_post_meta( $post_id, '_thumbnail_id', true );}/** * Display Post Thumbnail. * * @since 2.9.0 * * @param int $size Optional. Image size.  Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );. * @param string|array $attr Optional. Query string or array of attributes. */function the_post_thumbnail( $size = 'post-thumbnail', $attr = '' ) {	echo get_the_post_thumbnail( NULL, $size, $attr );}/** * Retrieve Post Thumbnail. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @param string $size Optional. Image size.  Defaults to 'thumbnail'. * @param string|array $attr Optional. Query string or array of attributes.  */function get_the_post_thumbnail( $post_id = NULL, $size = 'post-thumbnail', $attr = '' ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	$post_thumbnail_id = get_post_thumbnail_id( $post_id );	$size = apply_filters( 'post_thumbnail_size', $size );	if ( $post_thumbnail_id ) {		do_action( 'begin_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size ); // for "Just In Time" filtering of all of wp_get_attachment_image()'s filters		$html = wp_get_attachment_image( $post_thumbnail_id, $size, false, $attr );		do_action( 'end_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size );	} else {		$html = '';	}	return apply_filters( 'post_thumbnail_html', $html, $post_id, $post_thumbnail_id, $size, $attr );}?>
<?php/** * BackPress Styles enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r74 *//** * BackPress Styles enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r74 */class WP_Styles extends WP_Dependencies {	var $base_url;	var $content_url;	var $default_version;	var $text_direction = 'ltr';	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_styles', array(&$this) );	}	function do_item( $handle ) {		if ( !parent::do_item($handle) )			return false;		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		if ( $this->do_concat ) {			if ( $this->in_default_dir($this->registered[$handle]->src) && !isset($this->registered[$handle]->extra['conditional']) && !isset($this->registered[$handle]->extra['alt']) ) {				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			}		}		if ( isset($this->registered[$handle]->args) )			$media = esc_attr( $this->registered[$handle]->args );		else			$media = 'all';		$href = $this->_css_href( $this->registered[$handle]->src, $ver, $handle );		$rel = isset($this->registered[$handle]->extra['alt']) && $this->registered[$handle]->extra['alt'] ? 'alternate stylesheet' : 'stylesheet';		$title = isset($this->registered[$handle]->extra['title']) ? "title='" . esc_attr( $this->registered[$handle]->extra['title'] ) . "'" : '';		$end_cond = $tag = '';		if ( isset($this->registered[$handle]->extra['conditional']) && $this->registered[$handle]->extra['conditional'] ) {			$tag .= "<!--[if {$this->registered[$handle]->extra['conditional']}]>\n";			$end_cond = "<![endif]-->\n";		}		$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-css' $title href='$href' type='text/css' media='$media' />\n", $handle );		if ( 'rtl' === $this->text_direction && isset($this->registered[$handle]->extra['rtl']) && $this->registered[$handle]->extra['rtl'] ) {			if ( is_bool( $this->registered[$handle]->extra['rtl'] ) ) {				$suffix = isset( $this->registered[$handle]->extra['suffix'] ) ? $this->registered[$handle]->extra['suffix'] : '';				$rtl_href = str_replace( "{$suffix}.css", "-rtl{$suffix}.css", $this->_css_href( $this->registered[$handle]->src , $ver, "$handle-rtl" ));			} else {				$rtl_href = $this->_css_href( $this->registered[$handle]->extra['rtl'], $ver, "$handle-rtl" );			}			$tag .= apply_filters( 'style_loader_tag', "<link rel='$rel' id='$handle-rtl-css' $title href='$rtl_href' type='text/css' media='$media' />\n", $handle );		}		$tag .= $end_cond;		if ( $this->do_concat )			$this->print_html .= $tag;		else			echo $tag;		// Could do something with $this->registered[$handle]->extra here to print out extra CSS rules//		echo "<style type='text/css'>\n";//		echo "/* <![CDATA[ */\n";//		echo "/* ]]> */\n";//		echo "</style>\n";		return true;	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_styles_array', $this->to_do );		return $r;	}	function _css_href( $src, $ver, $handle ) {		if ( !is_bool($src) && !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = apply_filters( 'style_loader_src', $src, $handle );		return esc_url( $src );	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}}
<?php/** * WordPress Bookmark Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function add_link() {	return edit_link();}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function edit_link( $link_id = '' ) {	if (!current_user_can( 'manage_links' ))		wp_die( __( 'Cheatin&#8217; uh?' ));	$_POST['link_url'] = esc_html( $_POST['link_url'] );	$_POST['link_url'] = esc_url($_POST['link_url']);	$_POST['link_name'] = esc_html( $_POST['link_name'] );	$_POST['link_image'] = esc_html( $_POST['link_image'] );	$_POST['link_rss'] = esc_url($_POST['link_rss']);	if ( !isset($_POST['link_visible']) || 'N' != $_POST['link_visible'] )		$_POST['link_visible'] = 'Y';	if ( !empty( $link_id ) ) {		$_POST['link_id'] = $link_id;		return wp_update_link( $_POST);	} else {		return wp_insert_link( $_POST);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_default_link_to_edit() {	if ( isset( $_GET['linkurl'] ) )		$link->link_url = esc_url( $_GET['linkurl']);	else		$link->link_url = '';	if ( isset( $_GET['name'] ) )		$link->link_name = esc_attr( $_GET['name']);	else		$link->link_name = '';	$link->link_visible = 'Y';	return $link;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_delete_link( $link_id ) {	global $wpdb;	do_action( 'delete_link', $link_id );	wp_delete_object_term_relationships( $link_id, 'link_category' );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->links WHERE link_id = %d", $link_id ) );	do_action( 'deleted_link', $link_id );	clean_bookmark_cache( $link_id );	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_get_link_cats( $link_id = 0 ) {	$cats = wp_get_object_terms( $link_id, 'link_category', array('fields' => 'ids') );	return array_unique( $cats );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function get_link_to_edit( $link_id ) {	return get_bookmark( $link_id, OBJECT, 'edit' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_insert_link( $linkdata, $wp_error = false ) {	global $wpdb, $current_user;	$defaults = array( 'link_id' => 0, 'link_name' => '', 'link_url' => '', 'link_rating' => 0 );	$linkdata = wp_parse_args( $linkdata, $defaults );	$linkdata = sanitize_bookmark( $linkdata, 'db' );	extract( stripslashes_deep( $linkdata ), EXTR_SKIP );	$update = false;	if ( !empty( $link_id ) )		$update = true;	if ( trim( $link_name ) == '' ) {		if ( trim( $link_url ) != '' ) {			$link_name = $link_url;		} else {			return 0;		}	}	if ( trim( $link_url ) == '' )		return 0;	if ( empty( $link_rating ) )		$link_rating = 0;	if ( empty( $link_image ) )		$link_image = '';	if ( empty( $link_target ) )		$link_target = '';	if ( empty( $link_visible ) )		$link_visible = 'Y';	if ( empty( $link_owner ) )		$link_owner = $current_user->id;	if ( empty( $link_notes ) )		$link_notes = '';	if ( empty( $link_description ) )		$link_description = '';	if ( empty( $link_rss ) )		$link_rss = '';	if ( empty( $link_rel ) )		$link_rel = '';	// Make sure we set a valid category	if ( ! isset( $link_category ) ||0 == count( $link_category ) || !is_array( $link_category ) ) {		$link_category = array( get_option( 'default_link_category' ) );	}	if ( $update ) {		if ( false === $wpdb->update( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_rating', 'link_rel', 'link_notes', 'link_rss'), compact('link_id') ) ) {			if ( $wp_error )				return new WP_Error( 'db_update_error', __( 'Could not update link in the database' ), $wpdb->last_error );			else				return 0;		}	} else {		if ( false === $wpdb->insert( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_rel', 'link_notes', 'link_rss') ) ) {			if ( $wp_error )				return new WP_Error( 'db_insert_error', __( 'Could not insert link into the database' ), $wpdb->last_error );			else				return 0;		}		$link_id = (int) $wpdb->insert_id;	}	wp_set_link_cats( $link_id, $link_category );	if ( $update )		do_action( 'edit_link', $link_id );	else		do_action( 'add_link', $link_id );	clean_bookmark_cache( $link_id );	return $link_id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @param unknown_type $link_categories */function wp_set_link_cats( $link_id = 0, $link_categories = array() ) {	// If $link_categories isn't already an array, make it one:	if ( !is_array( $link_categories ) || 0 == count( $link_categories ) )		$link_categories = array( get_option( 'default_link_category' ) );	$link_categories = array_map( 'intval', $link_categories );	$link_categories = array_unique( $link_categories );	wp_set_object_terms( $link_id, $link_categories, 'link_category' );	clean_bookmark_cache( $link_id );}	// wp_set_link_cats()/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_update_link( $linkdata ) {	$link_id = (int) $linkdata['link_id'];	$link = get_bookmark( $link_id, ARRAY_A );	// Escape data pulled from DB.	$link = add_magic_quotes( $link );	// Passed link category list overwrites existing category list if not empty.	if ( isset( $linkdata['link_category'] ) && is_array( $linkdata['link_category'] )			 && 0 != count( $linkdata['link_category'] ) )		$link_cats = $linkdata['link_category'];	else		$link_cats = $link['link_category'];	// Merge old and new fields with new fields overwriting old ones.	$linkdata = array_merge( $link, $linkdata );	$linkdata['link_category'] = $link_cats;	return wp_insert_link( $linkdata );}?>
<?php/** * Portable PHP password hashing framework. * @package phpass * @since 2.5 * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ */## Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in# the public domain.## There's absolutely no warranty.## Please be sure to update the Version line if you edit this file in any way.# It is suggested that you leave the main version number intact, but indicate# your project name (after the slash) and add your own revision information.## Please do not change the "private" password hashing method implemented in# here, thereby making your hashes incompatible.  However, if you must, please# change the hash type identifier (the "$P$") to something different.## Obviously, since this code is in the public domain, the above are not# requirements (there can be none), but merely suggestions.#/** * Portable PHP password hashing framework. * * @package phpass * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ * @since 2.5 */class PasswordHash {	var $itoa64;	var $iteration_count_log2;	var $portable_hashes;	var $random_state;	function PasswordHash($iteration_count_log2, $portable_hashes)	{		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)			$iteration_count_log2 = 8;		$this->iteration_count_log2 = $iteration_count_log2;		$this->portable_hashes = $portable_hashes;		$this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons	}	function get_random_bytes($count)	{		$output = '';		if ( @is_readable('/dev/urandom') &&		    ($fh = @fopen('/dev/urandom', 'rb'))) {			$output = fread($fh, $count);			fclose($fh);		}		if (strlen($output) < $count) {			$output = '';			for ($i = 0; $i < $count; $i += 16) {				$this->random_state =				    md5(microtime() . $this->random_state);				$output .=				    pack('H*', md5($this->random_state));			}			$output = substr($output, 0, $count);		}		return $output;	}	function encode64($input, $count)	{		$output = '';		$i = 0;		do {			$value = ord($input[$i++]);			$output .= $this->itoa64[$value & 0x3f];			if ($i < $count)				$value |= ord($input[$i]) << 8;			$output .= $this->itoa64[($value >> 6) & 0x3f];			if ($i++ >= $count)				break;			if ($i < $count)				$value |= ord($input[$i]) << 16;			$output .= $this->itoa64[($value >> 12) & 0x3f];			if ($i++ >= $count)				break;			$output .= $this->itoa64[($value >> 18) & 0x3f];		} while ($i < $count);		return $output;	}	function gensalt_private($input)	{		$output = '$P$';		$output .= $this->itoa64[min($this->iteration_count_log2 +			((PHP_VERSION >= '5') ? 5 : 3), 30)];		$output .= $this->encode64($input, 6);		return $output;	}	function crypt_private($password, $setting)	{		$output = '*0';		if (substr($setting, 0, 2) == $output)			$output = '*1';		if (substr($setting, 0, 3) != '$P$')			return $output;		$count_log2 = strpos($this->itoa64, $setting[3]);		if ($count_log2 < 7 || $count_log2 > 30)			return $output;		$count = 1 << $count_log2;		$salt = substr($setting, 4, 8);		if (strlen($salt) != 8)			return $output;		# We're kind of forced to use MD5 here since it's the only		# cryptographic primitive available in all versions of PHP		# currently in use.  To implement our own low-level crypto		# in PHP would result in much worse performance and		# consequently in lower iteration counts and hashes that are		# quicker to crack (by non-PHP code).		if (PHP_VERSION >= '5') {			$hash = md5($salt . $password, TRUE);			do {				$hash = md5($hash . $password, TRUE);			} while (--$count);		} else {			$hash = pack('H*', md5($salt . $password));			do {				$hash = pack('H*', md5($hash . $password));			} while (--$count);		}		$output = substr($setting, 0, 12);		$output .= $this->encode64($hash, 16);		return $output;	}	function gensalt_extended($input)	{		$count_log2 = min($this->iteration_count_log2 + 8, 24);		# This should be odd to not reveal weak DES keys, and the		# maximum valid value is (2**24 - 1) which is odd anyway.		$count = (1 << $count_log2) - 1;		$output = '_';		$output .= $this->itoa64[$count & 0x3f];		$output .= $this->itoa64[($count >> 6) & 0x3f];		$output .= $this->itoa64[($count >> 12) & 0x3f];		$output .= $this->itoa64[($count >> 18) & 0x3f];		$output .= $this->encode64($input, 3);		return $output;	}	function gensalt_blowfish($input)	{		# This one needs to use a different order of characters and a		# different encoding scheme from the one in encode64() above.		# We care because the last character in our encoded string will		# only represent 2 bits.  While two known implementations of		# bcrypt will happily accept and correct a salt string which		# has the 4 unused bits set to non-zero, we do not want to take		# chances and we also do not want to waste an additional byte		# of entropy.		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';		$output = '$2a$';		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);		$output .= '$';		$i = 0;		do {			$c1 = ord($input[$i++]);			$output .= $itoa64[$c1 >> 2];			$c1 = ($c1 & 0x03) << 4;			if ($i >= 16) {				$output .= $itoa64[$c1];				break;			}			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 4;			$output .= $itoa64[$c1];			$c1 = ($c2 & 0x0f) << 2;			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 6;			$output .= $itoa64[$c1];			$output .= $itoa64[$c2 & 0x3f];		} while (1);		return $output;	}	function HashPassword($password)	{		$random = '';		if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {			$random = $this->get_random_bytes(16);			$hash =			    crypt($password, $this->gensalt_blowfish($random));			if (strlen($hash) == 60)				return $hash;		}		if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {			if (strlen($random) < 3)				$random = $this->get_random_bytes(3);			$hash =			    crypt($password, $this->gensalt_extended($random));			if (strlen($hash) == 20)				return $hash;		}		if (strlen($random) < 6)			$random = $this->get_random_bytes(6);		$hash =		    $this->crypt_private($password,		    $this->gensalt_private($random));		if (strlen($hash) == 34)			return $hash;		# Returning '*' on error is safe here, but would _not_ be safe		# in a crypt(3)-like function used _both_ for generating new		# hashes and for validating passwords against existing hashes.		return '*';	}	function CheckPassword($password, $stored_hash)	{		$hash = $this->crypt_private($password, $stored_hash);		if ($hash[0] == '*')			$hash = crypt($password, $stored_hash);		return $hash == $stored_hash;	}}?>
<?php/** * mail_fetch/setup.php * * @package SquirrelMail * * @copyright (c) 1999-2006 The SquirrelMail Project Team * * @copyright (c) 1999 CDI (cdi@thewebmasters.net) All Rights Reserved * Modified by Philippe Mingo 2001 mingo@rotedic.com * An RFC 1939 compliant wrapper class for the POP3 protocol. * * Licensed under the GNU GPL. For full terms see the file COPYING. * * pop3 class * * $Id$ */class POP3 {    var $ERROR      = '';       //  Error string.    var $TIMEOUT    = 60;       //  Default timeout before giving up on a                                //  network operation.    var $COUNT      = -1;       //  Mailbox msg count    var $BUFFER     = 512;      //  Socket buffer for socket fgets() calls.                                //  Per RFC 1939 the returned line a POP3                                //  server can send is 512 bytes.    var $FP         = '';       //  The connection to the server's                                //  file descriptor    var $MAILSERVER = '';       // Set this to hard code the server name    var $DEBUG      = FALSE;    // set to true to echo pop3                                // commands and responses to error_log                                // this WILL log passwords!    var $BANNER     = '';       //  Holds the banner returned by the                                //  pop server - used for apop()    var $ALLOWAPOP  = FALSE;    //  Allow or disallow apop()                                //  This must be set to true                                //  manually    function POP3 ( $server = '', $timeout = '' ) {        settype($this->BUFFER,"integer");        if( !empty($server) ) {            // Do not allow programs to alter MAILSERVER            // if it is already specified. They can get around            // this if they -really- want to, so don't count on it.            if(empty($this->MAILSERVER))                $this->MAILSERVER = $server;        }        if(!empty($timeout)) {            settype($timeout,"integer");            $this->TIMEOUT = $timeout;            if (!ini_get('safe_mode'))                set_time_limit($timeout);        }        return true;    }    function update_timer () {        if (!ini_get('safe_mode'))            set_time_limit($this->TIMEOUT);        return true;    }    function connect ($server, $port = 110)  {        //  Opens a socket to the specified server. Unless overridden,        //  port defaults to 110. Returns true on success, false on fail        // If MAILSERVER is set, override $server with it's value	if (!isset($port) || !$port) {$port = 110;}        if(!empty($this->MAILSERVER))            $server = $this->MAILSERVER;        if(empty($server)){            $this->ERROR = "POP3 connect: " . _("No server specified");            unset($this->FP);            return false;        }        $fp = @fsockopen("$server", $port, $errno, $errstr);        if(!$fp) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$errno] [$errstr]";            unset($this->FP);            return false;        }        socket_set_blocking($fp,-1);        $this->update_timer();        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG)            error_log("POP3 SEND [connect: $server] GOT [$reply]",0);        if(!$this->is_ok($reply)) {            $this->ERROR = "POP3 connect: " . _("Error ") . "[$reply]";            unset($this->FP);            return false;        }        $this->FP = $fp;        $this->BANNER = $this->parse_banner($reply);        return true;    }    function user ($user = "") {        // Sends the USER command, returns true or false        if( empty($user) ) {            $this->ERROR = "POP3 user: " . _("no login ID submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 user: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("USER $user");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 user: " . _("Error ") . "[$reply]";                return false;            } else                return true;        }    }    function pass ($pass = "")     {        // Sends the PASS command, returns # of msgs in mailbox,        // returns false (undef) on Auth failure        if(empty($pass)) {            $this->ERROR = "POP3 pass: " . _("No password submitted");            return false;        } elseif(!isset($this->FP)) {            $this->ERROR = "POP3 pass: " . _("connection not established");            return false;        } else {            $reply = $this->send_cmd("PASS $pass");            if(!$this->is_ok($reply)) {                $this->ERROR = "POP3 pass: " . _("Authentication failed") . " [$reply]";                $this->quit();                return false;            } else {                //  Auth successful.                $count = $this->last("count");                $this->COUNT = $count;                return $count;            }        }    }    function apop ($login,$pass) {        //  Attempts an APOP login. If this fails, it'll        //  try a standard login. YOUR SERVER MUST SUPPORT        //  THE USE OF THE APOP COMMAND!        //  (apop is optional per rfc1939)        if(!isset($this->FP)) {            $this->ERROR = "POP3 apop: " . _("No connection to server");            return false;        } elseif(!$this->ALLOWAPOP) {            $retVal = $this->login($login,$pass);            return $retVal;        } elseif(empty($login)) {            $this->ERROR = "POP3 apop: " . _("No login ID submitted");            return false;        } elseif(empty($pass)) {            $this->ERROR = "POP3 apop: " . _("No password submitted");            return false;        } else {            $banner = $this->BANNER;            if( (!$banner) or (empty($banner)) ) {                $this->ERROR = "POP3 apop: " . _("No server banner") . ' - ' . _("abort");                $retVal = $this->login($login,$pass);                return $retVal;            } else {                $AuthString = $banner;                $AuthString .= $pass;                $APOPString = md5($AuthString);                $cmd = "APOP $login $APOPString";                $reply = $this->send_cmd($cmd);                if(!$this->is_ok($reply)) {                    $this->ERROR = "POP3 apop: " . _("apop authentication failed") . ' - ' . _("abort");                    $retVal = $this->login($login,$pass);                    return $retVal;                } else {                    //  Auth successful.                    $count = $this->last("count");                    $this->COUNT = $count;                    return $count;                }            }        }    }    function login ($login = "", $pass = "") {        // Sends both user and pass. Returns # of msgs in mailbox or        // false on failure (or -1, if the error occurs while getting        // the number of messages.)        if( !isset($this->FP) ) {            $this->ERROR = "POP3 login: " . _("No connection to server");            return false;        } else {            $fp = $this->FP;            if( !$this->user( $login ) ) {                //  Preserve the error generated by user()                return false;            } else {                $count = $this->pass($pass);                if( (!$count) || ($count == -1) ) {                    //  Preserve the error generated by last() and pass()                    return false;                } else                    return $count;            }        }    }    function top ($msgNum, $numLines = "0") {        //  Gets the header and first $numLines of the msg body        //  returns data in an array with each returned line being        //  an array element. If $numLines is empty, returns        //  only the header information, and none of the body.        if(!isset($this->FP)) {            $this->ERROR = "POP3 top: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "TOP $msgNum $numLines";        fwrite($fp, "TOP $msgNum $numLines\r\n");        $reply = fgets($fp, $buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) {            @error_log("POP3 SEND [$cmd] GOT [$reply]",0);        }        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 top: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function pop_list ($msgNum = "") {        //  If called with an argument, returns that msgs' size in octets        //  No argument returns an associative array of undeleted        //  msg numbers and their sizes in octets        if(!isset($this->FP))        {            $this->ERROR = "POP3 pop_list: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $Total = $this->COUNT;        if( (!$Total) or ($Total == -1) )        {            return false;        }        if($Total == 0)        {            return array("0","0");            // return -1;   // mailbox empty        }        $this->update_timer();        if(!empty($msgNum))        {            $cmd = "LIST $msgNum";            fwrite($fp,"$cmd\r\n");            $reply = fgets($fp,$this->BUFFER);            $reply = $this->strip_clf($reply);            if($this->DEBUG) {                @error_log("POP3 SEND [$cmd] GOT [$reply]",0);            }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 pop_list: " . _("Error ") . "[$reply]";                return false;            }            list($junk,$num,$size) = preg_split('/\s+/',$reply);            return $size;        }        $cmd = "LIST";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $reply = $this->strip_clf($reply);            $this->ERROR = "POP3 pop_list: " . _("Error ") .  "[$reply]";            return false;        }        $MsgArray = array();        $MsgArray[0] = $Total;        for($msgC=1;$msgC <= $Total; $msgC++)        {            if($msgC > $Total) { break; }            $line = fgets($fp,$this->BUFFER);            $line = $this->strip_clf($line);            if(ereg("^\.",$line))            {                $this->ERROR = "POP3 pop_list: " . _("Premature end of list");                return false;            }            list($thisMsg,$msgSize) = preg_split('/\s+/',$line);            settype($thisMsg,"integer");            if($thisMsg != $msgC)            {                $MsgArray[$msgC] = "deleted";            }            else            {                $MsgArray[$msgC] = $msgSize;            }        }        return $MsgArray;    }    function get ($msgNum) {        //  Retrieve the specified msg number. Returns an array        //  where each line of the msg is an array element.        if(!isset($this->FP))        {            $this->ERROR = "POP3 get: " . _("No connection to server");            return false;        }        $this->update_timer();        $fp = $this->FP;        $buffer = $this->BUFFER;        $cmd = "RETR $msgNum";        $reply = $this->send_cmd($cmd);        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 get: " . _("Error ") . "[$reply]";            return false;        }        $count = 0;        $MsgArray = array();        $line = fgets($fp,$buffer);        while ( !ereg("^\.\r\n",$line))        {            if ( $line{0} == '.' ) { $line = substr($line,1); }            $MsgArray[$count] = $line;            $count++;            $line = fgets($fp,$buffer);            if(empty($line))    { break; }        }        return $MsgArray;    }    function last ( $type = "count" ) {        //  Returns the highest msg number in the mailbox.        //  returns -1 on error, 0+ on success, if type != count        //  results in a popstat() call (2 element array returned)        $last = -1;        if(!isset($this->FP))        {            $this->ERROR = "POP3 last: " . _("No connection to server");            return $last;        }        $reply = $this->send_cmd("STAT");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 last: " . _("Error ") . "[$reply]";            return $last;        }        $Vars = preg_split('/\s+/',$reply);        $count = $Vars[1];        $size = $Vars[2];        settype($count,"integer");        settype($size,"integer");        if($type != "count")        {            return array($count,$size);        }        return $count;    }    function reset () {        //  Resets the status of the remote server. This includes        //  resetting the status of ALL msgs to not be deleted.        //  This method automatically closes the connection to the server.        if(!isset($this->FP))        {            $this->ERROR = "POP3 reset: " . _("No connection to server");            return false;        }        $reply = $this->send_cmd("RSET");        if(!$this->is_ok($reply))        {            //  The POP3 RSET command -never- gives a -ERR            //  response - if it ever does, something truely            //  wild is going on.            $this->ERROR = "POP3 reset: " . _("Error ") . "[$reply]";            @error_log("POP3 reset: ERROR [$reply]",0);        }        $this->quit();        return true;    }    function send_cmd ( $cmd = "" )    {        //  Sends a user defined command string to the        //  POP server and returns the results. Useful for        //  non-compliant or custom POP servers.        //  Do NOT includ the \r\n as part of your command        //  string - it will be appended automatically.        //  The return value is a standard fgets() call, which        //  will read up to $this->BUFFER bytes of data, until it        //  encounters a new line, or EOF, whichever happens first.        //  This method works best if $cmd responds with only        //  one line of data.        if(!isset($this->FP))        {            $this->ERROR = "POP3 send_cmd: " . _("No connection to server");            return false;        }        if(empty($cmd))        {            $this->ERROR = "POP3 send_cmd: " . _("Empty command string");            return "";        }        $fp = $this->FP;        $buffer = $this->BUFFER;        $this->update_timer();        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$buffer);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        return $reply;    }    function quit() {        //  Closes the connection to the POP3 server, deleting        //  any msgs marked as deleted.        if(!isset($this->FP))        {            $this->ERROR = "POP3 quit: " . _("connection does not exist");            return false;        }        $fp = $this->FP;        $cmd = "QUIT";        fwrite($fp,"$cmd\r\n");        $reply = fgets($fp,$this->BUFFER);        $reply = $this->strip_clf($reply);        if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }        fclose($fp);        unset($this->FP);        return true;    }    function popstat () {        //  Returns an array of 2 elements. The number of undeleted        //  msgs in the mailbox, and the size of the mbox in octets.        $PopArray = $this->last("array");        if($PopArray == -1) { return false; }        if( (!$PopArray) or (empty($PopArray)) )        {            return false;        }        return $PopArray;    }    function uidl ($msgNum = "")    {        //  Returns the UIDL of the msg specified. If called with        //  no arguments, returns an associative array where each        //  undeleted msg num is a key, and the msg's uidl is the element        //  Array element 0 will contain the total number of msgs        if(!isset($this->FP)) {            $this->ERROR = "POP3 uidl: " . _("No connection to server");            return false;        }        $fp = $this->FP;        $buffer = $this->BUFFER;        if(!empty($msgNum)) {            $cmd = "UIDL $msgNum";            $reply = $this->send_cmd($cmd);            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            list ($ok,$num,$myUidl) = preg_split('/\s+/',$reply);            return $myUidl;        } else {            $this->update_timer();            $UIDLArray = array();            $Total = $this->COUNT;            $UIDLArray[0] = $Total;            if ($Total < 1)            {                return $UIDLArray;            }            $cmd = "UIDL";            fwrite($fp, "UIDL\r\n");            $reply = fgets($fp, $buffer);            $reply = $this->strip_clf($reply);            if($this->DEBUG) { @error_log("POP3 SEND [$cmd] GOT [$reply]",0); }            if(!$this->is_ok($reply))            {                $this->ERROR = "POP3 uidl: " . _("Error ") . "[$reply]";                return false;            }            $line = "";            $count = 1;            $line = fgets($fp,$buffer);            while ( !ereg("^\.\r\n",$line)) {                if(ereg("^\.\r\n",$line)) {                    break;                }                list ($msg,$msgUidl) = preg_split('/\s+/',$line);                $msgUidl = $this->strip_clf($msgUidl);                if($count == $msg) {                    $UIDLArray[$msg] = $msgUidl;                }                else                {                    $UIDLArray[$count] = 'deleted';                }                $count++;                $line = fgets($fp,$buffer);            }        }        return $UIDLArray;    }    function delete ($msgNum = "") {        //  Flags a specified msg as deleted. The msg will not        //  be deleted until a quit() method is called.        if(!isset($this->FP))        {            $this->ERROR = "POP3 delete: " . _("No connection to server");            return false;        }        if(empty($msgNum))        {            $this->ERROR = "POP3 delete: " . _("No msg number submitted");            return false;        }        $reply = $this->send_cmd("DELE $msgNum");        if(!$this->is_ok($reply))        {            $this->ERROR = "POP3 delete: " . _("Command failed ") . "[$reply]";            return false;        }        return true;    }    //  *********************************************************    //  The following methods are internal to the class.    function is_ok ($cmd = "") {        //  Return true or false on +OK or -ERR        if( empty($cmd) )            return false;        else            return( ereg ("^\+OK", $cmd ) );    }    function strip_clf ($text = "") {        // Strips \r\n from server responses        if(empty($text))            return $text;        else {            $stripped = str_replace("\r",'',$text);            $stripped = str_replace("\n",'',$stripped);            return $stripped;        }    }    function parse_banner ( $server_text ) {        $outside = true;        $banner = "";        $length = strlen($server_text);        for($count =0; $count < $length; $count++)        {            $digit = substr($server_text,$count,1);            if(!empty($digit))             {                if( (!$outside) && ($digit != '<') && ($digit != '>') )                {                    $banner .= $digit;                }                if ($digit == '<')                {                    $outside = false;                }                if($digit == '>')                {                    $outside = true;                }            }        }        $banner = $this->strip_clf($banner);    // Just in case        return "<$banner>";    }}   // End class?>
<?php/** * The template for displaying Author Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php	/* Queue the first post, that way we know who	 * the author is when we try to get their name,	 * URL, description, avatar, etc.	 *	 * We reset this later so we can run the loop	 * properly with a call to rewind_posts().	 */	if ( have_posts() )		the_post();?>				<h1 class="page-title author"><?php printf( __( 'Author Archives: %s', 'twentyten' ), "<span class='vcard'><a class='url fn n' href='" . get_author_posts_url( get_the_author_meta( 'ID' ) ) . "' title='" . esc_attr( get_the_author() ) . "' rel='me'>" . get_the_author() . "</a></span>" ); ?></h1><?php// If a user has filled out their description, show a bio on their entries.if ( get_the_author_meta( 'description' ) ) : ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( __( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>						</div><!-- #author-description	-->					</div><!-- #entry-author-info --><?php endif; ?><?php	/* Since we called the_post() above, we need to	 * rewind the loop back to the beginning that way	 * we can run the loop properly, in full.	 */	rewind_posts();	/* Run the loop for the author archive page to output the authors posts	 * If you want to overload this in a child theme then include a file	 * called loop-author.php and that will be used instead.	 */	 get_template_part( 'loop', 'author' );?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * WordPress SSH2 Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing SSH2. * * To use this class you must follow these steps for PHP 5.2.6+ * * @contrib http://kevin.vanzonneveld.net/techblog/article/make_ssh_connections_with_php/ - Installation Notes * * Complie libssh2 (Note: Only 0.14 is officaly working with PHP 5.2.6+ right now, But many users have found the latest versions work) * * cd /usr/src * wget http://surfnet.dl.sourceforge.net/sourceforge/libssh2/libssh2-0.14.tar.gz * tar -zxvf libssh2-0.14.tar.gz * cd libssh2-0.14/ * ./configure * make all install * * Note: Do not leave the directory yet! * * Enter: pecl install -f ssh2 * * Copy the ssh.so file it creates to your PHP Module Directory. * Open up your PHP.INI file and look for where extensions are placed. * Add in your PHP.ini file: extension=ssh2.so * * Restart Apache! * Check phpinfo() streams to confirm that: ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp  exist. * * Note: as of WordPress 2.8, This utilises the PHP5+ function 'stream_get_contents' * * @since 2.7 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_SSH2 extends WP_Filesystem_Base {	var $link = false;	var $sftp_link = false;	var $keys = false;	var $errors = array();	var $options = array();	function WP_Filesystem_SSH2($opt='') {		$this->method = 'ssh2';		$this->errors = new WP_Error();		//Check if possible to use ssh2 functions.		if ( ! extension_loaded('ssh2') ) {			$this->errors->add('no_ssh2_ext', __('The ssh2 PHP extension is not available'));			return false;		}		if ( !function_exists('stream_get_contents') ) {			$this->errors->add('ssh2_php_requirement', __('The ssh2 PHP extension is available, however, we require the PHP5 function <code>stream_get_contents()</code>'));			return false;		}		// Set defaults:		if ( empty($opt['port']) )			$this->options['port'] = 22;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('SSH2 hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( !empty ($opt['public_key']) && !empty ($opt['private_key']) ) {			$this->options['public_key'] = $opt['public_key'];			$this->options['private_key'] = $opt['private_key'];			$this->options['hostkey'] = array('hostkey' => 'ssh-rsa');			$this->keys = true;		} elseif ( empty ($opt['username']) ) {			$this->errors->add('empty_username', __('SSH2 username is required'));		}		if ( !empty($opt['username']) )			$this->options['username'] = $opt['username'];		if ( empty ($opt['password']) ) {			if ( !$this->keys )	//password can be blank if we are using keys				$this->errors->add('empty_password', __('SSH2 password is required'));		} else {			$this->options['password'] = $opt['password'];		}	}	function connect() {		if ( ! $this->keys ) {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port']);		} else {			$this->link = @ssh2_connect($this->options['hostname'], $this->options['port'], $this->options['hostkey']);		}		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to SSH2 Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( !$this->keys ) {			if ( ! @ssh2_auth_password($this->link, $this->options['username'], $this->options['password']) ) {				$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));				return false;			}		} else {			if ( ! @ssh2_auth_pubkey_file($this->link, $this->options['username'], $this->options['public_key'], $this->options['private_key'], $this->options['password'] ) ) {				$this->errors->add('auth', sprintf(__('Public and Private keys incorrect for %s'), $this->options['username']));				return false;			}		}		$this->sftp_link = ssh2_sftp($this->link);		return true;	}	function run_command( $command, $returnbool = false) {		if ( ! $this->link )			return false;		if ( ! ($stream = ssh2_exec($this->link, $command)) ) {			$this->errors->add('command', sprintf(__('Unable to perform command: %s'), $command));		} else {			stream_set_blocking( $stream, true );			stream_set_timeout( $stream, FS_TIMEOUT );			$data = stream_get_contents( $stream );			fclose( $stream );			if ( $returnbool )				return ( $data === false ) ? false : '' != trim($data);			else				return $data;		}		return false;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		$file = ltrim($file, '/');		return file_get_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function get_contents_array($file) {		$file = ltrim($file, '/');		return file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function put_contents($file, $contents, $mode = false ) {		$file = ltrim($file, '/');		$ret = file_put_contents('ssh2.sftp://' . $this->sftp_link . '/' . $file, $contents);		$this->chmod($file, $mode);		return false !== $ret;	}	function cwd() {		$cwd = $this->run_command('pwd');		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return $this->run_command('cd ' . $dir, true);	}	function chgrp($file, $group, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chgrp %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chgrp -R %o %s', $mode, escapeshellarg($file)), true);	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $this->exists($file) )			return false;		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chmod %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chmod -R %o %s', $mode, escapeshellarg($file)), true);	}	function chown($file, $owner, $recursive = false ) {		if ( ! $this->exists($file) )			return false;		if ( ! $recursive || ! $this->is_dir($file) )			return $this->run_command(sprintf('chown %o %s', $mode, escapeshellarg($file)), true);		return $this->run_command(sprintf('chown -R %o %s', $mode, escapeshellarg($file)), true);	}	function owner($file) {		$owneruid = @fileowner('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $owneruid )			return false;		if ( ! function_exists('posix_getpwuid') )			return $owneruid;		$ownerarray = posix_getpwuid($owneruid);		return $ownerarray['name'];	}	function getchmod($file) {		return substr(decoct(@fileperms( 'ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/') )),3);	}	function group($file) {		$gid = @filegroup('ssh2.sftp://' . $this->sftp_link . '/' . ltrim($file, '/'));		if ( ! $gid )			return false;		if ( ! function_exists('posix_getgrgid') )			return $gid;		$grouparray = posix_getgrgid($gid);		return $grouparray['name'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return @ssh2_sftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false) {		if ( $this->is_file($file) )			return ssh2_sftp_unlink($this->sftp_link, $file);		if ( ! $recursive )			 return ssh2_sftp_rmdir($this->sftp_link, $file);		$filelist = $this->dirlist($file);		if ( is_array($filelist) ) {			foreach ( $filelist as $filename => $fileinfo) {				$this->delete($file . '/' . $filename, $recursive);			}		}		return ssh2_sftp_rmdir($this->sftp_link, $file);	}	function exists($file) {		$file = ltrim($file, '/');		return file_exists('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_file($file) {		$file = ltrim($file, '/');		return is_file('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_dir($path) {		$path = ltrim($path, '/');		return is_dir('ssh2.sftp://' . $this->sftp_link . '/' . $path);	}	function is_readable($file) {		$file = ltrim($file, '/');		return is_readable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function is_writable($file) {		$file = ltrim($file, '/');		return is_writable('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function atime($file) {		$file = ltrim($file, '/');		return fileatime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function mtime($file) {		$file = ltrim($file, '/');		return filemtime('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function size($file) {		$file = ltrim($file, '/');		return filesize('ssh2.sftp://' . $this->sftp_link . '/' . $file);	}	function touch($file, $time = 0, $atime = 0) {		//Not implmented.	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		$path = untrailingslashit($path);		if ( ! $chmod )			$chmod = FS_CHMOD_DIR;		if ( ! ssh2_sftp_mkdir($this->sftp_link, $path, $chmod, true) )			return false;		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function dirlist($path, $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path);		} else {			$limit_file = false;		}		if ( ! $this->is_dir($path) )			return false;		$ret = array();		$dir = @dir('ssh2.sftp://' . $this->sftp_link .'/' . ltrim($path, '/') );		if ( ! $dir )			return false;		while (false !== ($entry = $dir->read()) ) {			$struc = array();			$struc['name'] = $entry;			if ( '.' == $struc['name'] || '..' == $struc['name'] )				continue; //Do not care about these folders.			if ( ! $include_hidden && '.' == $struc['name'][0] )				continue;			if ( $limit_file && $struc['name'] != $limit_file )				continue;			$struc['perms'] 	= $this->gethchmod($path.'/'.$entry);			$struc['permsn']	= $this->getnumchmodfromh($struc['perms']);			$struc['number'] 	= false;			$struc['owner']    	= $this->owner($path.'/'.$entry);			$struc['group']    	= $this->group($path.'/'.$entry);			$struc['size']    	= $this->size($path.'/'.$entry);			$struc['lastmodunix']= $this->mtime($path.'/'.$entry);			$struc['lastmod']   = date('M j',$struc['lastmodunix']);			$struc['time']    	= date('h:i:s',$struc['lastmodunix']);			$struc['type']		= $this->is_dir($path.'/'.$entry) ? 'd' : 'f';			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		$dir->close();		unset($dir);		return $ret;	}}
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Defines the newline characters, if not defined already. * * This can be redefined. * * @since 2.5 * @var string */if(!defined('CRLF')) define('CRLF',"\r\n");/** * Sets whatever to autodetect ASCII mode. * * This can be redefined. * * @since 2.5 * @var int */if(!defined("FTP_AUTOASCII")) define("FTP_AUTOASCII", -1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_BINARY")) define("FTP_BINARY", 1);/** * * This can be redefined. * @since 2.5 * @var int */if(!defined("FTP_ASCII")) define("FTP_ASCII", 0);/** * Whether to force FTP. * * This can be redefined. * * @since 2.5 * @var bool */if(!defined('FTP_FORCE')) define('FTP_FORCE', true);/** * @since 2.5 * @var string */define('FTP_OS_Unix','u');/** * @since 2.5 * @var string */define('FTP_OS_Windows','w');/** * @since 2.5 * @var string */define('FTP_OS_Mac','m');/** * PemFTP base class * */class ftp_base {	/* Public variables */	var $LocalEcho;	var $Verbose;	var $OS_local;	var $OS_remote;	/* Private variables */	var $_lastaction;	var $_errors;	var $_type;	var $_umask;	var $_timeout;	var $_passive;	var $_host;	var $_fullhost;	var $_port;	var $_datahost;	var $_dataport;	var $_ftp_control_sock;	var $_ftp_data_sock;	var $_ftp_temp_sock;	var $_ftp_buff_size;	var $_login;	var $_password;	var $_connected;	var $_ready;	var $_code;	var $_message;	var $_can_restore;	var $_port_available;	var $_curtype;	var $_features;	var $_error_array;	var $AuthorizedTransferMode;	var $OS_FullName;	var $_eol_code;	var $AutoAsciiExt;	/* Constructor */	function ftp_base($port_mode=FALSE) {		$this->__construct($port_mode);	}	function __construct($port_mode=FALSE, $verb=FALSE, $le=FALSE) {		$this->LocalEcho=$le;		$this->Verbose=$verb;		$this->_lastaction=NULL;		$this->_error_array=array();		$this->_eol_code=array(FTP_OS_Unix=>"\n", FTP_OS_Mac=>"\r", FTP_OS_Windows=>"\r\n");		$this->AuthorizedTransferMode=array(FTP_AUTOASCII, FTP_ASCII, FTP_BINARY);		$this->OS_FullName=array(FTP_OS_Unix => 'UNIX', FTP_OS_Windows => 'WINDOWS', FTP_OS_Mac => 'MACOS');		$this->AutoAsciiExt=array("ASP","BAT","C","CPP","CSS","CSV","JS","H","HTM","HTML","SHTML","INI","LOG","PHP3","PHTML","PL","PERL","SH","SQL","TXT");		$this->_port_available=($port_mode==TRUE);		$this->SendMSG("Staring FTP client class".($this->_port_available?"":" without PORT mode support"));		$this->_connected=FALSE;		$this->_ready=FALSE;		$this->_can_restore=FALSE;		$this->_code=0;		$this->_message="";		$this->_ftp_buff_size=4096;		$this->_curtype=NULL;		$this->SetUmask(0022);		$this->SetType(FTP_AUTOASCII);		$this->SetTimeout(30);		$this->Passive(!$this->_port_available);		$this->_login="anonymous";		$this->_password="anon@ftp.com";		$this->_features=array();	    $this->OS_local=FTP_OS_Unix;		$this->OS_remote=FTP_OS_Unix;		$this->features=array();		if(strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') $this->OS_local=FTP_OS_Windows;		elseif(strtoupper(substr(PHP_OS, 0, 3)) === 'MAC') $this->OS_local=FTP_OS_Mac;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Public functions                                                                  -->// <!-- --------------------------------------------------------------------------------------- -->	function parselisting($line) {		$is_windows = ($this->OS_remote == FTP_OS_Windows);		if ($is_windows && preg_match("/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/",$line,$lucifer)) {			$b = array();			if ($lucifer[3]<70) { $lucifer[3]+=2000; } else { $lucifer[3]+=1900; } // 4digit year fix			$b['isdir'] = ($lucifer[7]=="<DIR>");			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4]+(strcasecmp($lucifer[6],"PM")==0?12:0),$lucifer[5],0,$lucifer[1],$lucifer[2],$lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} else if (!$is_windows && $lucifer=preg_split("/[ ]/",$line,9,PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount=count($lucifer);			if ($lcount<8) return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === "d";			$b['islink'] = $lucifer[0]{0} === "l";			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ($lcount==8) {				sscanf($lucifer[5],"%d-%d-%d",$b['year'],$b['month'],$b['day']);				sscanf($lucifer[6],"%d:%d",$b['hour'],$b['minute']);				$b['time'] = @mktime($b['hour'],$b['minute'],0,$b['month'],$b['day'],$b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if (preg_match("/([0-9]{2}):([0-9]{2})/",$lucifer[7],$l2)) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime(sprintf("%d %s %d %02d:%02d",$b['day'],$b['month'],$b['year'],$b['hour'],$b['minute']));				$b['name'] = $lucifer[8];			}		}		return $b;	}	function SendMSG($message = "", $crlf=true) {		if ($this->Verbose) {			echo $message.($crlf?CRLF:"");			flush();		}		return TRUE;	}	function SetType($mode=FTP_AUTOASCII) {		if(!in_array($mode, $this->AuthorizedTransferMode)) {			$this->SendMSG("Wrong type");			return FALSE;		}		$this->_type=$mode;		$this->SendMSG("Transfer type: ".($this->_type==FTP_BINARY?"binary":($this->_type==FTP_ASCII?"ASCII":"auto ASCII") ) );		return TRUE;	}	function _settype($mode=FTP_ASCII) {		if($this->_ready) {			if($mode==FTP_BINARY) {				if($this->_curtype!=FTP_BINARY) {					if(!$this->_exec("TYPE I", "SetType")) return FALSE;					$this->_curtype=FTP_BINARY;				}			} elseif($this->_curtype!=FTP_ASCII) {				if(!$this->_exec("TYPE A", "SetType")) return FALSE;				$this->_curtype=FTP_ASCII;			}		} else return FALSE;		return TRUE;	}	function Passive($pasv=NULL) {		if(is_null($pasv)) $this->_passive=!$this->_passive;		else $this->_passive=$pasv;		if(!$this->_port_available and !$this->_passive) {			$this->SendMSG("Only passive connections available!");			$this->_passive=TRUE;			return FALSE;		}		$this->SendMSG("Passive mode ".($this->_passive?"on":"off"));		return TRUE;	}	function SetServer($host, $port=21, $reconnect=true) {		if(!is_long($port)) {	        $this->verbose=true;    	    $this->SendMSG("Incorrect port syntax");			return FALSE;		} else {			$ip=@gethostbyname($host);	        $dns=@gethostbyaddr($host);	        if(!$ip) $ip=$host;	        if(!$dns) $dns=$host;	        // Validate the IPAddress PHP4 returns -1 for invalid, PHP5 false	        // -1 === "255.255.255.255" which is the broadcast address which is also going to be invalid	        $ipaslong = ip2long($ip);			if ( ($ipaslong == false) || ($ipaslong === -1) ) {				$this->SendMSG("Wrong host name/address \"".$host."\"");				return FALSE;			}	        $this->_host=$ip;	        $this->_fullhost=$dns;	        $this->_port=$port;	        $this->_dataport=$port-1;		}		$this->SendMSG("Host \"".$this->_fullhost."(".$this->_host."):".$this->_port."\"");		if($reconnect){			if($this->_connected) {				$this->SendMSG("Reconnecting");				if(!$this->quit(FTP_FORCE)) return FALSE;				if(!$this->connect()) return FALSE;			}		}		return TRUE;	}	function SetUmask($umask=0022) {		$this->_umask=$umask;		umask($this->_umask);		$this->SendMSG("UMASK 0".decoct($this->_umask));		return TRUE;	}	function SetTimeout($timeout=30) {		$this->_timeout=$timeout;		$this->SendMSG("Timeout ".$this->_timeout);		if($this->_connected)			if(!$this->_settimeout($this->_ftp_control_sock)) return FALSE;		return TRUE;	}	function connect($server=NULL) {		if(!empty($server)) {			if(!$this->SetServer($server)) return false;		}		if($this->_ready) return true;	    $this->SendMsg('Local OS : '.$this->OS_FullName[$this->OS_local]);		if(!($this->_ftp_control_sock = $this->_connect($this->_host, $this->_port))) {			$this->SendMSG("Error : Cannot connect to remote host \"".$this->_fullhost." :".$this->_port."\"");			return FALSE;		}		$this->SendMSG("Connected to remote host \"".$this->_fullhost.":".$this->_port."\". Waiting for greeting.");		do {			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			$this->_lastaction=time();		} while($this->_code<200);		$this->_ready=true;		$syst=$this->systype();		if(!$syst) $this->SendMSG("Can't detect remote OS");		else {			if(preg_match("/win|dos|novell/i", $syst[0])) $this->OS_remote=FTP_OS_Windows;			elseif(preg_match("/os/i", $syst[0])) $this->OS_remote=FTP_OS_Mac;			elseif(preg_match("/(li|u)nix/i", $syst[0])) $this->OS_remote=FTP_OS_Unix;			else $this->OS_remote=FTP_OS_Mac;			$this->SendMSG("Remote OS: ".$this->OS_FullName[$this->OS_remote]);		}		if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");		else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		return TRUE;	}	function quit($force=false) {		if($this->_ready) {			if(!$this->_exec("QUIT") and !$force) return FALSE;			if(!$this->_checkCode() and !$force) return FALSE;			$this->_ready=false;			$this->SendMSG("Session finished");		}		$this->_quit();		return TRUE;	}	function login($user=NULL, $pass=NULL) {		if(!is_null($user)) $this->_login=$user;		else $this->_login="anonymous";		if(!is_null($pass)) $this->_password=$pass;		else $this->_password="anon@anon.com";		if(!$this->_exec("USER ".$this->_login, "login")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code!=230) {			if(!$this->_exec((($this->_code==331)?"PASS ":"ACCT ").$this->_password, "login")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		$this->SendMSG("Authentication succeeded");		if(empty($this->_features)) {			if(!$this->features()) $this->SendMSG("Can't get features list. All supported - disabled");			else $this->SendMSG("Supported features: ".implode(", ", array_keys($this->_features)));		}		return TRUE;	}	function pwd() {		if(!$this->_exec("PWD", "pwd")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} \"(.+)\".+", "\\1", $this->_message);	}	function cdup() {		if(!$this->_exec("CDUP", "cdup")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return true;	}	function chdir($pathname) {		if(!$this->_exec("CWD ".$pathname, "chdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rmdir($pathname) {		if(!$this->_exec("RMD ".$pathname, "rmdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function mkdir($pathname) {		if(!$this->_exec("MKD ".$pathname, "mkdir")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function rename($from, $to) {		if(!$this->_exec("RNFR ".$from, "rename")) return FALSE;		if(!$this->_checkCode()) return FALSE;		if($this->_code==350) {			if(!$this->_exec("RNTO ".$to, "rename")) return FALSE;			if(!$this->_checkCode()) return FALSE;		} else return FALSE;		return TRUE;	}	function filesize($pathname) {		if(!isset($this->_features["SIZE"])) {			$this->PushError("filesize", "not supported by server");			return FALSE;		}		if(!$this->_exec("SIZE ".$pathname, "filesize")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);	}	function abort() {		if(!$this->_exec("ABOR", "abort")) return FALSE;		if(!$this->_checkCode()) {			if($this->_code!=426) return FALSE;			if(!$this->_readmsg("abort")) return FALSE;			if(!$this->_checkCode()) return FALSE;		}		return true;	}	function mdtm($pathname) {		if(!isset($this->_features["MDTM"])) {			$this->PushError("mdtm", "not supported by server");			return FALSE;		}		if(!$this->_exec("MDTM ".$pathname, "mdtm")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$mdtm = ereg_replace("^[0-9]{3} ([0-9]+)".CRLF, "\\1", $this->_message);		$date = sscanf($mdtm, "%4d%2d%2d%2d%2d%2d");		$timestamp = mktime($date[3], $date[4], $date[5], $date[1], $date[2], $date[0]);		return $timestamp;	}	function systype() {		if(!$this->_exec("SYST", "systype")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$DATA = explode(" ", $this->_message);		return array($DATA[1], $DATA[3]);	}	function delete($pathname) {		if(!$this->_exec("DELE ".$pathname, "delete")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function site($command, $fnction="site") {		if(!$this->_exec("SITE ".$command, $fnction)) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function chmod($pathname, $mode) {		if(!$this->site( sprintf('CHMOD %o %s', $mode, $pathname), "chmod")) return FALSE;		return TRUE;	}	function restore($from) {		if(!isset($this->_features["REST"])) {			$this->PushError("restore", "not supported by server");			return FALSE;		}		if($this->_curtype!=FTP_BINARY) {			$this->PushError("restore", "can't restore in ASCII mode");			return FALSE;		}		if(!$this->_exec("REST ".$from, "resore")) return FALSE;		if(!$this->_checkCode()) return FALSE;		return TRUE;	}	function features() {		if(!$this->_exec("FEAT", "features")) return FALSE;		if(!$this->_checkCode()) return FALSE;		$f=preg_split("/[".CRLF."]+/", preg_replace("/[0-9]{3}[ -].*[".CRLF."]+/", "", $this->_message), -1, PREG_SPLIT_NO_EMPTY);		$this->_features=array();		foreach($f as $k=>$v) {			$v=explode(" ", trim($v));			$this->_features[array_shift($v)]=$v;		}		return true;	}	function rawlist($pathname="", $arg="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "LIST", "rawlist");	}	function nlist($pathname="") {		return $this->_list(($arg?" ".$arg:"").($pathname?" ".$pathname:""), "NLST", "nlist");	}	function is_exists($pathname) {		return $this->file_exists($pathname);	}	function file_exists($pathname) {		$exists=true;		if(!$this->_exec("RNFR ".$pathname, "rename")) $exists=FALSE;		else {			if(!$this->_checkCode()) $exists=FALSE;			$this->abort();		}		if($exists) $this->SendMSG("Remote file ".$pathname." exists");		else $this->SendMSG("Remote file ".$pathname." does not exist");		return $exists;	}	function fget($fp, $remotefile,$rest=0) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out=$this->_data_read($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function get($remotefile, $localfile=NULL, $rest=0) {		if(is_null($localfile)) $localfile=$remotefile;		if (@file_exists($localfile)) $this->SendMSG("Warning : local file will be overwritten");		$fp = @fopen($localfile, "w");		if (!$fp) {			$this->PushError("get","can't open local file", "Cannot create \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("RETR ".$remotefile, "get")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$out=$this->_data_read($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $out;	}	function fput($remotefile, $fp) {		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($remotefile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function put($localfile, $remotefile=NULL, $rest=0) {		if(is_null($remotefile)) $remotefile=$localfile;		if (!file_exists($localfile)) {			$this->PushError("put","can't open local file", "No such file or directory \"".$localfile."\"");			return FALSE;		}		$fp = @fopen($localfile, "r");		if (!$fp) {			$this->PushError("put","can't open local file", "Cannot read file \"".$localfile."\"");			return FALSE;		}		if($this->_can_restore and $rest!=0) fseek($fp, $rest);		$pi=pathinfo($localfile);		if($this->_type==FTP_ASCII or ($this->_type==FTP_AUTOASCII and in_array(strtoupper($pi["extension"]), $this->AutoAsciiExt))) $mode=FTP_ASCII;		else $mode=FTP_BINARY;		if(!$this->_data_prepare($mode)) {			fclose($fp);			return FALSE;		}		if($this->_can_restore and $rest!=0) $this->restore($rest);		if(!$this->_exec("STOR ".$remotefile, "put")) {			$this->_data_close();			fclose($fp);			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			fclose($fp);			return FALSE;		}		$ret=$this->_data_write($mode, $fp);		fclose($fp);		$this->_data_close();		if(!$this->_readmsg()) return FALSE;		if(!$this->_checkCode()) return FALSE;		return $ret;	}	function mput($local=".", $remote=NULL, $continious=false) {		$local=realpath($local);		if(!@file_exists($local)) {			$this->PushError("mput","can't open local folder", "Cannot stat folder \"".$local."\"");			return FALSE;		}		if(!is_dir($local)) return $this->put($local, $remote);		if(empty($remote)) $remote=".";		elseif(!$this->file_exists($remote) and !$this->mkdir($remote)) return FALSE;		if($handle = opendir($local)) {			$list=array();			while (false !== ($file = readdir($handle))) {				if ($file != "." && $file != "..") $list[]=$file;			}			closedir($handle);		} else {			$this->PushError("mput","can't open local folder", "Cannot read folder \"".$local."\"");			return FALSE;		}		if(empty($list)) return TRUE;		$ret=true;		foreach($list as $el) {			if(is_dir($local."/".$el)) $t=$this->mput($local."/".$el, $remote."/".$el);			else $t=$this->put($local."/".$el, $remote."/".$el);			if(!$t) {				$ret=FALSE;				if(!$continious) break;			}		}		return $ret;	}	function mget($remote, $local=".", $continious=false) {		$list=$this->rawlist($remote, "-lA");		if($list===false) {			$this->PushError("mget","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return FALSE;		}		if(empty($list)) return true;		if(!@file_exists($local)) {			if(!@mkdir($local)) {				$this->PushError("mget","can't create local folder", "Cannot create folder \"".$local."\"");				return FALSE;			}		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if($el["type"]=="d") {				if(!$this->mget($remote."/".$el["name"], $local."/".$el["name"], $continious)) {					$this->PushError("mget", "can't copy folder", "Can't copy remote folder \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			} else {				if(!$this->get($remote."/".$el["name"], $local."/".$el["name"])) {					$this->PushError("mget", "can't copy file", "Can't copy remote file \"".$remote."/".$el["name"]."\" to local \"".$local."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}			@chmod($local."/".$el["name"], $el["perms"]);			$t=strtotime($el["date"]);			if($t!==-1 and $t!==false) @touch($local."/".$el["name"], $t);		}		return $ret;	}	function mdel($remote, $continious=false) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("mdel","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		foreach($list as $k=>$v) {			$list[$k]=$this->parselisting($v);			if($list[$k]["name"]=="." or $list[$k]["name"]=="..") unset($list[$k]);		}		$ret=true;		foreach($list as $el) {			if ( empty($el) )				continue;			if($el["type"]=="d") {				if(!$this->mdel($remote."/".$el["name"], $continious)) {					$ret=false;					if(!$continious) break;				}			} else {				if (!$this->delete($remote."/".$el["name"])) {					$this->PushError("mdel", "can't delete file", "Can't delete remote file \"".$remote."/".$el["name"]."\"");					$ret=false;					if(!$continious) break;				}			}		}		if(!$this->rmdir($remote)) {			$this->PushError("mdel", "can't delete folder", "Can't delete remote folder \"".$remote."/".$el["name"]."\"");			$ret=false;		}		return $ret;	}	function mmkdir($dir, $mode = 0777) {		if(empty($dir)) return FALSE;		if($this->is_exists($dir) or $dir == "/" ) return TRUE;		if(!$this->mmkdir(dirname($dir), $mode)) return false;		$r=$this->mkdir($dir, $mode);		$this->chmod($dir,$mode);		return $r;	}	function glob($pattern, $handle=NULL) {		$path=$output=null;		if(PHP_OS=='WIN32') $slash='\\';		else $slash='/';		$lastpos=strrpos($pattern,$slash);		if(!($lastpos===false)) {			$path=substr($pattern,0,-$lastpos-1);			$pattern=substr($pattern,$lastpos);		} else $path=getcwd();		if(is_array($handle) and !empty($handle)) {			while($dir=each($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}		} else {			$handle=@opendir($path);			if($handle===false) return false;			while($dir=readdir($handle)) {				if($this->glob_pattern_match($pattern,$dir))				$output[]=$dir;			}			closedir($handle);		}		if(is_array($output)) return $output;		return false;	}	function glob_pattern_match($pattern,$string) {		$out=null;		$chunks=explode(';',$pattern);		foreach($chunks as $pattern) {			$escape=array('$','^','.','{','}','(',')','[',']','|');			while(strpos($pattern,'**')!==false)				$pattern=str_replace('**','*',$pattern);			foreach($escape as $probe)				$pattern=str_replace($probe,"\\$probe",$pattern);			$pattern=str_replace('?*','*',				str_replace('*?','*',					str_replace('*',".*",						str_replace('?','.{1,1}',$pattern))));			$out[]=$pattern;		}		if(count($out)==1) return($this->glob_regexp("^$out[0]$",$string));		else {			foreach($out as $tester)				if($this->my_regexp("^$tester$",$string)) return true;		}		return false;	}	function glob_regexp($pattern,$probe) {		$sensitive=(PHP_OS!='WIN32');		return ($sensitive?			ereg($pattern,$probe):			eregi($pattern,$probe)		);	}	function dirlist($remote) {		$list=$this->rawlist($remote, "-la");		if($list===false) {			$this->PushError("dirlist","can't read remote folder list", "Can't read remote folder \"".$remote."\" contents");			return false;		}		$dirlist = array();		foreach($list as $k=>$v) {			$entry=$this->parselisting($v);			if ( empty($entry) )				continue;			if($entry["name"]=="." or $entry["name"]=="..")				continue;			$dirlist[$entry['name']] = $entry;		}		return $dirlist;	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _checkCode() {		return ($this->_code<400 and $this->_code>0);	}	function _list($arg="", $cmd="LIST", $fnction="_list") {		if(!$this->_data_prepare()) return false;		if(!$this->_exec($cmd.$arg, $fnction)) {			$this->_data_close();			return FALSE;		}		if(!$this->_checkCode()) {			$this->_data_close();			return FALSE;		}		$out="";		if($this->_code<200) {			$out=$this->_data_read();			$this->_data_close();			if(!$this->_readmsg()) return FALSE;			if(!$this->_checkCode()) return FALSE;			if($out === FALSE ) return FALSE;			$out=preg_split("/[".CRLF."]+/", $out, -1, PREG_SPLIT_NO_EMPTY);//			$this->SendMSG(implode($this->_eol_code[$this->OS_local], $out));		}		return $out;	}// <!-- --------------------------------------------------------------------------------------- -->// <!-- Partie : gestion des erreurs                                                            -->// <!-- --------------------------------------------------------------------------------------- -->// Gnre une erreur pour traitement externe  la classe	function PushError($fctname,$msg,$desc=false){		$error=array();		$error['time']=time();		$error['fctname']=$fctname;		$error['msg']=$msg;		$error['desc']=$desc;		if($desc) $tmp=' ('.$desc.')'; else $tmp='';		$this->SendMSG($fctname.': '.$msg.$tmp);		return(array_push($this->_error_array,$error));	}// Rcupre une erreur externe	function PopError(){		if(count($this->_error_array)) return(array_pop($this->_error_array));			else return(false);	}}$mod_sockets=TRUE;if (!extension_loaded('sockets')) {	$prefix = (PHP_SHLIB_SUFFIX == 'dll') ? 'php_' : '';	if(!@dl($prefix . 'sockets.' . PHP_SHLIB_SUFFIX)) $mod_sockets=FALSE;}require_once "class-ftp-".($mod_sockets?"sockets":"pure").".php";?>
<?php/** * Class for working with PO files * * @version $Id: po.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage po */require_once dirname(__FILE__) . '/translations.php';define('PO_MAX_LINE_LEN', 79);ini_set('auto_detect_line_endings', 1);/** * Routines for working with PO files */if ( !class_exists( 'PO' ) ):class PO extends Gettext_Translations {	/**	 * Exports headers to a PO entry	 *	 * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end	 */	function export_headers() {		$header_string = '';		foreach($this->headers as $header => $value) {			$header_string.= "$header: $value\n";		}		$poified = PO::poify($header_string);		return rtrim("msgid \"\"\nmsgstr $poified");	}	/**	 * Exports all entries to PO format	 *	 * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end	 */	function export_entries() {		//TODO sorting		return implode("\n\n", array_map(array('PO', 'export_entry'), $this->entries));	}	/**	 * Exports the whole PO file as a string	 *	 * @param bool $include_headers whether to include the headers in the export	 * @return string ready for inclusion in PO file string for headers and all the enrtries	 */	function export($include_headers = true) {		$res = '';		if ($include_headers) {			$res .= $this->export_headers();			$res .= "\n\n";		}		$res .= $this->export_entries();		return $res;	}	/**	 * Same as {@link export}, but writes the result to a file	 *	 * @param string $filename where to write the PO string	 * @param bool $include_headers whether to include tje headers in the export	 * @return bool true on success, false on error	 */	function export_to_file($filename, $include_headers = true) {		$fh = fopen($filename, 'w');		if (false === $fh) return false;		$export = $this->export($include_headers);		$res = fwrite($fh, $export);		if (false === $res) return false;		return fclose($fh);	}	/**	 * Formats a string in PO-style	 *	 * @static	 * @param string $string the string to format	 * @return string the poified string	 */	function poify($string) {		$quote = '"';		$slash = '\\';		$newline = "\n";		$replaces = array(			"$slash" 	=> "$slash$slash",			"$quote"	=> "$slash$quote",			"\t" 		=> '\t',		);		$string = str_replace(array_keys($replaces), array_values($replaces), $string);		$po = $quote.implode("${slash}n$quote$newline$quote", explode($newline, $string)).$quote;		// add empty string on first line for readbility		if (false !== strpos($string, $newline) &&				(substr_count($string, $newline) > 1 || !($newline === substr($string, -strlen($newline))))) {			$po = "$quote$quote$newline$po";		}		// remove empty strings		$po = str_replace("$newline$quote$quote", '', $po);		return $po;	}	/**	 * Gives back the original string from a PO-formatted string	 *	 * @static	 * @param string $string PO-formatted string	 * @return string enascaped string	 */	function unpoify($string) {		$escapes = array('t' => "\t", 'n' => "\n", '\\' => '\\');		$lines = array_map('trim', explode("\n", $string));		$lines = array_map(array('PO', 'trim_quotes'), $lines);		$unpoified = '';		$previous_is_backslash = false;		foreach($lines as $line) {			preg_match_all('/./u', $line, $chars);			$chars = $chars[0];			foreach($chars as $char) {				if (!$previous_is_backslash) {					if ('\\' == $char)						$previous_is_backslash = true;					else						$unpoified .= $char;				} else {					$previous_is_backslash = false;					$unpoified .= isset($escapes[$char])? $escapes[$char] : $char;				}			}		}		return $unpoified;	}	/**	 * Inserts $with in the beginning of every new line of $string and	 * returns the modified string	 *	 * @static	 * @param string $string prepend lines in this string	 * @param string $with prepend lines with this string	 */	function prepend_each_line($string, $with) {		$php_with = var_export($with, true);		$lines = explode("\n", $string);		// do not prepend the string on the last empty line, artefact by explode		if ("\n" == substr($string, -1)) unset($lines[count($lines) - 1]);		$res = implode("\n", array_map(create_function('$x', "return $php_with.\$x;"), $lines));		// give back the empty line, we ignored above		if ("\n" == substr($string, -1)) $res .= "\n";		return $res;	}	/**	 * Prepare a text as a comment -- wraps the lines and prepends #	 * and a special character to each line	 *	 * @access private	 * @param string $text the comment text	 * @param string $char character to denote a special PO comment,	 * 	like :, default is a space	 */	function comment_block($text, $char=' ') {		$text = wordwrap($text, PO_MAX_LINE_LEN - 3);		return PO::prepend_each_line($text, "#$char ");	}	/**	 * Builds a string from the entry for inclusion in PO file	 *	 * @static	 * @param object &$entry the entry to convert to po string	 * @return string|bool PO-style formatted string for the entry or	 * 	false if the entry is empty	 */	function export_entry(&$entry) {		if (is_null($entry->singular)) return false;		$po = array();		if (!empty($entry->translator_comments)) $po[] = PO::comment_block($entry->translator_comments);		if (!empty($entry->extracted_comments)) $po[] = PO::comment_block($entry->extracted_comments, '.');		if (!empty($entry->references)) $po[] = PO::comment_block(implode(' ', $entry->references), ':');		if (!empty($entry->flags)) $po[] = PO::comment_block(implode(", ", $entry->flags), ',');		if (!is_null($entry->context)) $po[] = 'msgctxt '.PO::poify($entry->context);		$po[] = 'msgid '.PO::poify($entry->singular);		if (!$entry->is_plural) {			$translation = empty($entry->translations)? '' : $entry->translations[0];			$po[] = 'msgstr '.PO::poify($translation);		} else {			$po[] = 'msgid_plural '.PO::poify($entry->plural);			$translations = empty($entry->translations)? array('', '') : $entry->translations;			foreach($translations as $i => $translation) {				$po[] = "msgstr[$i] ".PO::poify($translation);			}		}		return implode("\n", $po);	}	function import_from_file($filename) {		$f = fopen($filename, 'r');		if (!$f) return false;		$lineno = 0;		while (true) {			$res = $this->read_entry($f, $lineno);			if (!$res) break;			if ($res['entry']->singular == '') {				$this->set_headers($this->make_headers($res['entry']->translations[0]));			} else {				$this->add_entry($res['entry']);			}		}		PO::read_line($f, 'clear');		return $res !== false;	}	function read_entry($f, $lineno = 0) {		$entry = new Translation_Entry();		// where were we in the last step		// can be: comment, msgctxt, msgid, msgid_plural, msgstr, msgstr_plural		$context = '';		$msgstr_index = 0;		$is_final = create_function('$context', 'return $context == "msgstr" || $context == "msgstr_plural";');		while (true) {			$lineno++;			$line = PO::read_line($f);			if (!$line)  {				if (feof($f)) {					if ($is_final($context))						break;					elseif (!$context) // we haven't read a line and eof came						return null;					else						return false;				} else {					return false;				}			}			if ($line == "\n") continue;			$line = trim($line);			if (preg_match('/^#/', $line, $m)) {				// the comment is the start of a new entry				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				// comments have to be at the beginning				if ($context && $context != 'comment') {					return false;				}				// add comment				$this->add_comment_to_entry($entry, $line);			} elseif (preg_match('/^msgctxt\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'comment') {					return false;				}				$context = 'msgctxt';				$entry->context .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid\s+(".*")/', $line, $m)) {				if ($is_final($context)) {					PO::read_line($f, 'put-back');					$lineno--;					break;				}				if ($context && $context != 'msgctxt' && $context != 'comment') {					return false;				}				$context = 'msgid';				$entry->singular .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgid_plural\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgid_plural';				$entry->is_plural = true;				$entry->plural .= PO::unpoify($m[1]);			} elseif (preg_match('/^msgstr\s+(".*")/', $line, $m)) {				if ($context != 'msgid') {					return false;				}				$context = 'msgstr';				$entry->translations = array(PO::unpoify($m[1]));			} elseif (preg_match('/^msgstr\[(\d+)\]\s+(".*")/', $line, $m)) {				if ($context != 'msgid_plural' && $context != 'msgstr_plural') {					return false;				}				$context = 'msgstr_plural';				$msgstr_index = $m[1];				$entry->translations[$m[1]] = PO::unpoify($m[2]);			} elseif (preg_match('/^".*"$/', $line)) {				$unpoified = PO::unpoify($line);				switch ($context) {					case 'msgid':						$entry->singular .= $unpoified; break;					case 'msgctxt':						$entry->context .= $unpoified; break;					case 'msgid_plural':						$entry->plural .= $unpoified; break;					case 'msgstr':						$entry->translations[0] .= $unpoified; break;					case 'msgstr_plural':						$entry->translations[$msgstr_index] .= $unpoified; break;					default:						return false;				}			} else {				return false;			}		}		if (array() == array_filter($entry->translations, create_function('$t', 'return $t || "0" === $t;'))) {			$entry->translations = array();		}		return array('entry' => $entry, 'lineno' => $lineno);	}	function read_line($f, $action = 'read') {		static $last_line = '';		static $use_last_line = false;		if ('clear' == $action) {			$last_line = '';			return true;		}		if ('put-back' == $action) {			$use_last_line = true;			return true;		}		$line = $use_last_line? $last_line : fgets($f);		$last_line = $line;		$use_last_line = false;		return $line;	}	function add_comment_to_entry(&$entry, $po_comment_line) {		$first_two = substr($po_comment_line, 0, 2);		$comment = trim(substr($po_comment_line, 2));		if ('#:' == $first_two) {			$entry->references = array_merge($entry->references, preg_split('/\s+/', $comment));		} elseif ('#.' == $first_two) {			$entry->extracted_comments = trim($entry->extracted_comments . "\n" . $comment);		} elseif ('#,' == $first_two) {			$entry->flags = array_merge($entry->flags, preg_split('/,\s*/', $comment));		} else {			$entry->translator_comments = trim($entry->translator_comments . "\n" . $comment);		}	}	function trim_quotes($s) {		if ( substr($s, 0, 1) == '"') $s = substr($s, 1);		if ( substr($s, -1, 1) == '"') $s = substr($s, 0, -1);		return $s;	}}endif;
<?php/** * Accepts file uploads from swfupload or other asynchronous upload methods. * * @package WordPress * @subpackage Administration */define('WP_ADMIN', true);if ( defined('ABSPATH') )	require_once(ABSPATH . 'wp-load.php');else	require_once('../wp-load.php');// Flash often fails to send cookies with the POST or upload, so we need to pass it in GET or POST insteadif ( is_ssl() && empty($_COOKIE[SECURE_AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[SECURE_AUTH_COOKIE] = $_REQUEST['auth_cookie'];elseif ( empty($_COOKIE[AUTH_COOKIE]) && !empty($_REQUEST['auth_cookie']) )	$_COOKIE[AUTH_COOKIE] = $_REQUEST['auth_cookie'];if ( empty($_COOKIE[LOGGED_IN_COOKIE]) && !empty($_REQUEST['logged_in_cookie']) )	$_COOKIE[LOGGED_IN_COOKIE] = $_REQUEST['logged_in_cookie'];unset($current_user);require_once('./admin.php');header('Content-Type: text/plain; charset=' . get_option('blog_charset'));if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));// just fetch the detail form for that attachmentif ( isset($_REQUEST['attachment_id']) && ($id = intval($_REQUEST['attachment_id'])) && $_REQUEST['fetch'] ) {	if ( 2 == $_REQUEST['fetch'] ) {		add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id, array( 'send' => false, 'delete' => true ));	} else {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_item($id);	}	exit;}check_admin_referer('media-form');$id = media_handle_upload('async-upload', $_REQUEST['post_id']);if ( is_wp_error($id) ) {	echo '<div class="error-div">	<a class="dismiss" href="#" onclick="jQuery(this).parents(\'div.media-item\').slideUp(200, function(){jQuery(this).remove();});">' . __('Dismiss') . '</a>	<strong>' . sprintf(__('&#8220;%s&#8221; has failed to upload due to an error'), esc_html($_FILES['async-upload']['name']) ) . '</strong><br />' .	esc_html($id->get_error_message()) . '</div>';	exit;}if ( $_REQUEST['short'] ) {	// short form response - attachment ID only	echo $id;} else {	// long form response - big chunk o html	$type = $_REQUEST['type'];	echo apply_filters("async_upload_{$type}", $id);}?>
<?phpif ( !defined('ABSPATH') )	exit;require(ABSPATH . 'wp-includes/version.php');$man_version = md5( $tinymce_version . $manifest_version );$mce_ver = "ver=$tinymce_version";/** * Retrieve list of all cacheable WP files * * Array format: file, version (optional), bool (whether to use src and set ignoreQuery, defaults to true) */function &get_manifest() {	global $mce_ver;	$files = array(		array('images/align-center.png'),		array('images/align-left.png'),		array('images/align-none.png'),		array('images/align-right.png'),		array('images/archive-link.png'),		array('images/blue-grad.png'),		array('images/bubble_bg.gif'),		array('images/bubble_bg-rtl.gif'),		array('images/button-grad.png'),		array('images/button-grad-active.png'),		array('images/comment-grey-bubble.png'),		array('images/date-button.gif'),		array('images/ed-bg.gif'),		array('images/fade-butt.png'),		array('images/fav.png'),		array('images/fav-arrow.gif'),		array('images/fav-arrow-rtl.gif'),		array('images/generic.png'),		array('images/gray-grad.png'),		array('images/icons32.png'),		array('images/icons32-vs.png'),		array('images/list.png'),		array('images/list-vs.png'),		array('images/wpspin_light.gif'),		array('images/wpspin_dark.gif'),		array('images/logo.gif'),		array('images/logo-ghost.png'),		array('images/logo-login.gif'),		array('images/media-button-image.gif'),		array('images/media-button-music.gif'),		array('images/media-button-other.gif'),		array('images/media-button-video.gif'),		array('images/menu.png'),		array('images/menu-vs.png'),		array('images/menu-arrows.gif'),		array('images/menu-bits.gif'),		array('images/menu-bits-rtl.gif'),		array('images/menu-dark.gif'),		array('images/menu-dark-rtl.gif'),		array('images/no.png'),		array('images/required.gif'),		array('images/resize.gif'),		array('images/screen-options-right.gif'),		array('images/screen-options-right-up.gif'),		array('images/se.png'),		array('images/star.gif'),		array('images/toggle-arrow.gif'),		array('images/toggle-arrow-rtl.gif'),		array('images/white-grad.png'),		array('images/white-grad-active.png'),		array('images/wordpress-logo.png'),		array('images/wp-logo.png'),		array('images/xit.gif'),		array('images/yes.png'),		array('../wp-includes/images/crystal/archive.png'),		array('../wp-includes/images/crystal/audio.png'),		array('../wp-includes/images/crystal/code.png'),		array('../wp-includes/images/crystal/default.png'),		array('../wp-includes/images/crystal/document.png'),		array('../wp-includes/images/crystal/interactive.png'),		array('../wp-includes/images/crystal/text.png'),		array('../wp-includes/images/crystal/video.png'),		array('../wp-includes/images/crystal/spreadsheet.png'),		array('../wp-includes/images/rss.png'),		array('../wp-includes/images/blank.gif'),		array('../wp-includes/images/upload.png'),		array('../wp-includes/js/thickbox/loadingAnimation.gif'),		array('../wp-includes/js/thickbox/tb-close.png'),	);	if ( @is_file('../wp-includes/js/tinymce/tiny_mce.js') ) :	$mce = array(		array('../wp-includes/js/tinymce/wp-tinymce.php', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce.js', $mce_ver),		array('../wp-includes/js/tinymce/langs/wp-langs-en.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/mctabs.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/validate.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/form_utils.js', $mce_ver),		array('../wp-includes/js/tinymce/utils/editable_selects.js', $mce_ver),		array('../wp-includes/js/tinymce/tiny_mce_popup.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/editor_template.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/source_editor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/anchor.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/image.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/link.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/color_picker.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/charmap.htm', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/color_picker.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/charmap.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/image.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/link.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/source_editor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/js/anchor.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/ui.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/content.css', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/dialog.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/fullscreen/fullscreen.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/template.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/window.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/js/media.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/media.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/media/css/media.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pasteword.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/js/pastetext.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pasteword.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/blank.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/paste/pastetext.htm', $mce_ver),		array('../wp-includes/js/tinymce/plugins/safari/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/spellchecker/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/tabfocus/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wordpress/css/content.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/editimage.html', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/js/editimage.js', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpeditimage/css/editimage-rtl.css', $mce_ver),		array('../wp-includes/js/tinymce/plugins/wpgallery/editor_plugin.js', $mce_ver),		array('../wp-includes/js/tinymce/themes/advanced/img/icons.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/colorpicker.jpg'),		array('../wp-includes/js/tinymce/themes/advanced/img/fm.gif'),		array('../wp-includes/js/tinymce/themes/advanced/img/gotmoxie.png'),		array('../wp-includes/js/tinymce/themes/advanced/img/sflogo.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/butt2.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/fade-butt.png'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/tabs.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/wp_theme/img/down_arrow.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/progress.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_check.gif'),		array('../wp-includes/js/tinymce/themes/advanced/skins/default/img/menu_arrow.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/drag.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/corners.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/buttons.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/horizontal.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/alert.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/button.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/confirm.gif'),		array('../wp-includes/js/tinymce/plugins/inlinepopups/skins/clearlooks2/img/vertical.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flash.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/flv_player.swf'),		array('../wp-includes/js/tinymce/plugins/media/img/quicktime.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/realmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/shockwave.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/windowsmedia.gif'),		array('../wp-includes/js/tinymce/plugins/media/img/trans.gif'),		array('../wp-includes/js/tinymce/plugins/spellchecker/img/wline.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/more_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/page_bug.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/toolbars.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/help.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/image.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/media.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/video.gif'),		array('../wp-includes/js/tinymce/plugins/wordpress/img/audio.gif'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/image.png'),		array('../wp-includes/js/tinymce/plugins/wpeditimage/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/delete.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/edit.png'),		array('../wp-includes/js/tinymce/plugins/wpgallery/img/gallery.png')	);	$files = array_merge($files, $mce);	endif;	return $files;}
<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Socket Based FTP implementation * * @package PemFTP * @subpackage Socket * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(true, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@socket_set_option($sock, SOL_SOCKET, SO_RCVTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set receive timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		if(!@socket_set_option($sock, SOL_SOCKET , SO_SNDTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set send timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		return true;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		if(!($sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {			$this->PushError('_connect','socket create failed',socket_strerror(socket_last_error($sock)));			return FALSE;		}		if(!$this->_settimeout($sock)) return FALSE;		$this->SendMSG("Connecting to \"".$host.":".$port."\"");		if (!($res = @socket_connect($sock, $host, $port))) {			$this->PushError('_connect','socket connect failed',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@socket_read($this->_ftp_control_sock, 4096, PHP_BINARY_READ);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed', socket_strerror(socket_last_error($this->_ftp_control_sock)));			} else {				$this->_message.=$tmp;				$go = !preg_match("/^([0-9]{3})(-.+\\1)? [^".CRLF."]+".CRLF."$/Us", $this->_message, $regs);			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@socket_write($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed', socket_strerror(socket_last_error($this->stream)));			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		$this->SendMSG("Creating data socket");		$this->_ftp_data_sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);		if ($this->_ftp_data_sock < 0) {			$this->PushError('_data_prepare','socket create failed',socket_strerror(socket_last_error($this->_ftp_data_sock)));			return FALSE;		}		if(!$this->_settimeout($this->_ftp_data_sock)) {			$this->_data_close();			return FALSE;		}		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			if(!@socket_connect($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","socket_connect", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			else $this->_ftp_temp_sock=$this->_ftp_data_sock;		} else {			if(!@socket_getsockname($this->_ftp_control_sock, $addr, $port)) {				$this->PushError("_data_prepare","can't get control socket information", socket_strerror(socket_last_error($this->_ftp_control_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_bind($this->_ftp_data_sock,$addr)){				$this->PushError("_data_prepare","can't bind data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_listen($this->_ftp_data_sock)) {				$this->PushError("_data_prepare","can't listen data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_getsockname($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","can't get data socket information", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!$this->_exec('PORT '.str_replace('.',',',$this->_datahost.'.'.($this->_dataport>>8).'.'.($this->_dataport&0x00FF)), "_port")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_read","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}		}		while(($block=@socket_read($this->_ftp_temp_sock, $this->_ftp_buff_size, PHP_BINARY_READ))!==false) {			if($block==="") break;			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_write","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return false;			}		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return true;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@socket_write($this->_ftp_temp_sock, $block))===FALSE) {				$this->PushError("_data_write","socket_write", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@socket_close($this->_ftp_temp_sock);		@socket_close($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit() {		if($this->_connected) {			@socket_close($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * The custom background script. * * @package WordPress * @subpackage Administration *//** * The custom background class. * * @since 3.0.0 * @package WordPress * @subpackage Administration */class Custom_Background {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since unknown	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 3.0.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Background	 */	function Custom_Background($admin_header_callback = '', $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Background admin page.	 *	 * @since 3.0.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Background'), __('Background'), 'edit_theme_options', 'custom-background', array(&$this, 'admin_page'));		add_action("load-$page", array(&$this, 'admin_load'));		add_action("load-$page", array(&$this, 'take_action'), 49);		add_action("load-$page", array(&$this, 'handle_upload'), 49);		if ( $this->admin_header_callback )			add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Set up the enqueue for the CSS & JavaScript files.	 *	 * @since 3.0.0	 */	function admin_load() {		add_contextual_help( $this->page, '<p>' . __( 'You can customize the look of your site without touching any of your theme&#8217;s code by using a custom background. Your background can be an image or a color.' ) . '</p>' .		'<p>' . __( 'To use a background image, simply upload it, then choose your display options below. You can display a single instance of your image, or tile it to fill the screen. You can have your background fixed in place, so your site content moves on top of it, or you can have it scroll with your site.' ) . '</p>' .		'<p>' . __( 'You can also choose a background color. If you know the hexadecimal code for the color you want, enter it in the Color field. If not, click on the Select a Color link, and a color picker will allow you to choose the exact shade you want.' ) . '</p>' .		'<p>' . __( 'Don&#8217;t forget to click on the Save Changes button when you are finished.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Background_SubPanel" target="_blank">Documentation on Custom Background</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );		wp_enqueue_script('custom-background');		wp_enqueue_style('farbtastic');	}	/**	 * Execute custom background modification.	 *	 * @since 3.0.0	 */	function take_action() {		if ( empty($_POST) )			return;		if ( isset($_POST['reset-background']) ) {			check_admin_referer('custom-background-reset', '_wpnonce-custom-background-reset');			remove_theme_mod('background_image');			remove_theme_mod('background_image_thumb');			$this->updated = true;			return;		}		if ( isset($_POST['remove-background']) ) {			// @TODO: Uploaded files are not removed here.			check_admin_referer('custom-background-remove', '_wpnonce-custom-background-remove');			set_theme_mod('background_image', '');			set_theme_mod('background_image_thumb', '');			$this->updated = true;			return;		}		if ( isset($_POST['background-repeat']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-repeat'], array('repeat', 'no-repeat', 'repeat-x', 'repeat-y')) )				$repeat = $_POST['background-repeat'];			else				$repeat = 'repeat';			set_theme_mod('background_repeat', $repeat);		}		if ( isset($_POST['background-position-x']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-position-x'], array('center', 'right', 'left')) )				$position = $_POST['background-position-x'];			else				$position = 'left';			set_theme_mod('background_position_x', $position);		}		if ( isset($_POST['background-attachment']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-attachment'], array('fixed', 'scroll')) )				$attachment = $_POST['background-attachment'];			else				$attachment = 'fixed';			set_theme_mod('background_attachment', $attachment);		}		if ( isset($_POST['background-color']) ) {			check_admin_referer('custom-background');			$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['background-color']);			if ( strlen($color) == 6 || strlen($color) == 3 )				set_theme_mod('background_color', $color);			else				set_theme_mod('background_color', '');		}		$this->updated = true;	}	/**	 * Display the custom background page.	 *	 * @since 3.0.0	 */	function admin_page() {?><div class="wrap" id="custom-background"><?php screen_icon(); ?><h2><?php _e('Custom Background'); ?></h2><?php if ( !empty($this->updated) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Background updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php }	if ( $this->admin_image_div_callback ) {		call_user_func($this->admin_image_div_callback);	} else {?><h3><?php _e('Background Image'); ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e('Preview'); ?></th><td><?php$background_styles = '';if ( $bgcolor = get_background_color() )	$background_styles .= 'background-color: #' . $bgcolor . ';';if ( get_background_image() ) {	// background-image URL must be single quote, see below	$background_styles .= ' background-image: url(\'' . get_theme_mod('background_image_thumb', '') . '\');'		. ' background-repeat: ' . get_theme_mod('background_repeat', 'repeat') . ';'		. ' background-position: top ' . get_theme_mod('background_position_x', 'left');}?><div id="custom-background-image" style="<?php echo $background_styles; ?>"><?php // must be double quote, see above ?><?php if ( get_background_image() ) { ?><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><br /><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><?php } ?></div><?php } ?></td></tr><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e('Remove Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-remove', '_wpnonce-custom-background-remove'); ?><input type="submit" class="button" name="remove-background" value="<?php esc_attr_e('Remove Background Image'); ?>" /><br/><?php _e('This will remove the background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><?php if ( defined( 'BACKGROUND_IMAGE' ) ) : // Show only if a default background image exists ?><tr valign="top"><th scope="row"><?php _e('Restore Original Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-reset', '_wpnonce-custom-background-reset'); ?><input type="submit" class="button" name="reset-background" value="<?php esc_attr_e('Restore Original Image'); ?>" /><br/><?php _e('This will restore the original background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Upload Image'); ?></th><td><form enctype="multipart/form-data" id="upload-form" method="post" action=""><label for="upload"><?php _e('Choose an image from your computer:'); ?></label><br /><input type="file" id="upload" name="import" /><input type="hidden" name="action" value="save" /><?php wp_nonce_field('custom-background-upload', '_wpnonce-custom-background-upload') ?><input type="submit" class="button" value="<?php esc_attr_e('Upload'); ?>" /></p></form></td></tr></tbody></table><h3><?php _e('Display Options') ?></h3><form method="post" action=""><table class="form-table"><tbody><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Position' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Position' ); ?></span></legend><label><input name="background-position-x" type="radio" value="left"<?php checked('left', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Left') ?></label><label><input name="background-position-x" type="radio" value="center"<?php checked('center', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Center') ?></label><label><input name="background-position-x" type="radio" value="right"<?php checked('right', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Right') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Repeat' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Repeat' ); ?></span></legend><label><input type="radio" name="background-repeat" value="no-repeat"<?php checked('no-repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('No Repeat'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat"<?php checked('repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-x"<?php checked('repeat-x', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Horizontally'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-y"<?php checked('repeat-y', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Vertically'); ?></option></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Attachment' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Attachment' ); ?></span></legend><label><input name="background-attachment" type="radio" value="scroll" <?php checked('scroll', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Scroll') ?></label><label><input name="background-attachment" type="radio" value="fixed" <?php checked('fixed', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Fixed') ?></label></fieldset></td></tr><?php endif; // get_background_image() ?><tr valign="top"><th scope="row"><?php _e( 'Color' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Color' ); ?></span></legend><input type="text" name="background-color" id="background-color" value="#<?php echo esc_attr(get_background_color()) ?>" /><a class="hide-if-no-js" href="#" id="pickcolor"><?php _e('Select a Color'); ?></a><div id="colorPickerDiv" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></fieldset></td></tr></tbody></table><?php wp_nonce_field('custom-background'); ?><p class="submit"><input type="submit" class="button-primary" name="save-background-options" value="<?php esc_attr_e('Save Changes'); ?>" /></p></form></div><?php	}	/**	 * Handle a Image upload for the background image.	 *	 * @since 3.0.0	 */	function handle_upload() {		if ( empty($_FILES) )			return;		check_admin_referer('custom-background-upload', '_wpnonce-custom-background-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'] );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(			'post_title' => $filename,			'post_content' => $url,			'post_mime_type' => $type,			'guid' => $url		);		// Save the data		$id = wp_insert_attachment($object, $file);		// Add the meta-data		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		set_theme_mod('background_image', esc_url($url));		$thumbnail = wp_get_attachment_image_src( $id, 'thumbnail' );		set_theme_mod('background_image_thumb', esc_url( $thumbnail[0] ) );		do_action('wp_create_file_in_uploads', $file, $id); // For replication		$this->updated = true;	}}?>
<?php/** * Administration Functions * * This file is deprecated, use 'wp-admin/includes/admin.php' instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/admin.php' );/** WordPress Administration API: Includes all Administration functions. */require_once(ABSPATH . 'wp-admin/includes/admin.php');?>
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);$basepath = dirname(__FILE__);function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return false;	return @file_get_contents($path);}$expires_offset = 31536000;header('Content-Type: application/x-javascript; charset=UTF-8');header('Vary: Accept-Encoding'); // Handle proxiesheader('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( isset($_GET['c']) && 1 == $_GET['c'] && isset($_SERVER['HTTP_ACCEPT_ENCODING'])	&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && ( $file = get_file($basepath . '/wp-tinymce.js.gz') ) ) {	header('Content-Encoding: gzip');	echo $file;} else {	echo get_file($basepath . '/tiny_mce.js');}exit;
<?php/** * MagpieRSS: a simple RSS integration tool * * A compiled file for RSS syndication * * @author Kellan Elliott-McCrea <kellan@protest.net> * @version 0.51 * @license GPL * * @package External * @subpackage MagpieRSS *//** * Deprecated. Use SimplePie (class-simplepie.php) instead. */_deprecated_file( basename( __FILE__ ), '3.0', WPINC . '/class-simplepie.php' );/* * Hook to use another RSS object instead of MagpieRSS */do_action('load_feed_engine');/** RSS feed constant. */define('RSS', 'RSS');define('ATOM', 'Atom');define('MAGPIE_USER_AGENT', 'WordPress/' . $GLOBALS['wp_version']);class MagpieRSS {	var $parser;	var $current_item	= array();	// item currently being parsed	var $items			= array();	// collection of parsed items	var $channel		= array();	// hash of channel fields	var $textinput		= array();	var $image			= array();	var $feed_type;	var $feed_version;	// parser variables	var $stack				= array(); // parser stack	var $inchannel			= false;	var $initem 			= false;	var $incontent			= false; // if in Atom <content mode="xml"> field	var $intextinput		= false;	var $inimage 			= false;	var $current_field		= '';	var $current_namespace	= false;	//var $ERROR = "";	var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');	function MagpieRSS ($source) {		# if PHP xml isn't compiled in, die		#		if ( !function_exists('xml_parser_create') )			trigger_error( "Failed to load PHP's XML Extension. http://www.php.net/manual/en/ref.xml.php" );		$parser = @xml_parser_create();		if ( !is_resource($parser) )			trigger_error( "Failed to create an instance of PHP's XML parser. http://www.php.net/manual/en/ref.xml.php");		$this->parser = $parser;		# pass in parser, and a reference to this object		# set up handlers		#		xml_set_object( $this->parser, $this );		xml_set_element_handler($this->parser,				'feed_start_element', 'feed_end_element' );		xml_set_character_data_handler( $this->parser, 'feed_cdata' );		$status = xml_parse( $this->parser, $source );		if (! $status ) {			$errorcode = xml_get_error_code( $this->parser );			if ( $errorcode != XML_ERROR_NONE ) {				$xml_error = xml_error_string( $errorcode );				$error_line = xml_get_current_line_number($this->parser);				$error_col = xml_get_current_column_number($this->parser);				$errormsg = "$xml_error at line $error_line, column $error_col";				$this->error( $errormsg );			}		}		xml_parser_free( $this->parser );		$this->normalize();	}	function feed_start_element($p, $element, &$attrs) {		$el = $element = strtolower($element);		$attrs = array_change_key_case($attrs, CASE_LOWER);		// check for a namespace, and split if found		$ns	= false;		if ( strpos( $element, ':' ) ) {			list($ns, $el) = split( ':', $element, 2);		}		if ( $ns and $ns != 'rdf' ) {			$this->current_namespace = $ns;		}		# if feed type isn't set, then this is first element of feed		# identify feed from root element		#		if (!isset($this->feed_type) ) {			if ( $el == 'rdf' ) {				$this->feed_type = RSS;				$this->feed_version = '1.0';			}			elseif ( $el == 'rss' ) {				$this->feed_type = RSS;				$this->feed_version = $attrs['version'];			}			elseif ( $el == 'feed' ) {				$this->feed_type = ATOM;				$this->feed_version = $attrs['version'];				$this->inchannel = true;			}			return;		}		if ( $el == 'channel' )		{			$this->inchannel = true;		}		elseif ($el == 'item' or $el == 'entry' )		{			$this->initem = true;			if ( isset($attrs['rdf:about']) ) {				$this->current_item['about'] = $attrs['rdf:about'];			}		}		// if we're in the default namespace of an RSS feed,		//  record textinput or image fields		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'textinput' )		{			$this->intextinput = true;		}		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'image' )		{			$this->inimage = true;		}		# handle atom content constructs		elseif ( $this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			// avoid clashing w/ RSS mod_content			if ($el == 'content' ) {				$el = 'atom_content';			}			$this->incontent = $el;		}		// if inside an Atom content construct (e.g. content or summary) field treat tags as text		elseif ($this->feed_type == ATOM and $this->incontent )		{			// if tags are inlined, then flatten			$attrs_str = join(' ',					array_map(array('MagpieRSS', 'map_attrs'),					array_keys($attrs),					array_values($attrs) ) );			$this->append_content( "<$element $attrs_str>"  );			array_unshift( $this->stack, $el );		}		// Atom support many links per containging element.		// Magpie treats link elements of type rel='alternate'		// as being equivalent to RSS's simple link element.		//		elseif ($this->feed_type == ATOM and $el == 'link' )		{			if ( isset($attrs['rel']) and $attrs['rel'] == 'alternate' )			{				$link_el = 'link';			}			else {				$link_el = 'link_' . $attrs['rel'];			}			$this->append($link_el, $attrs['href']);		}		// set stack[0] to current element		else {			array_unshift($this->stack, $el);		}	}	function feed_cdata ($p, $text) {		if ($this->feed_type == ATOM and $this->incontent)		{			$this->append_content( $text );		}		else {			$current_el = join('_', array_reverse($this->stack));			$this->append($current_el, $text);		}	}	function feed_end_element ($p, $el) {		$el = strtolower($el);		if ( $el == 'item' or $el == 'entry' )		{			$this->items[] = $this->current_item;			$this->current_item = array();			$this->initem = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'textinput' )		{			$this->intextinput = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'image' )		{			$this->inimage = false;		}		elseif ($this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			$this->incontent = false;		}		elseif ($el == 'channel' or $el == 'feed' )		{			$this->inchannel = false;		}		elseif ($this->feed_type == ATOM and $this->incontent  ) {			// balance tags properly			// note:  i don't think this is actually neccessary			if ( $this->stack[0] == $el )			{				$this->append_content("</$el>");			}			else {				$this->append_content("<$el />");			}			array_shift( $this->stack );		}		else {			array_shift( $this->stack );		}		$this->current_namespace = false;	}	function concat (&$str1, $str2="") {		if (!isset($str1) ) {			$str1="";		}		$str1 .= $str2;	}	function append_content($text) {		if ( $this->initem ) {			$this->concat( $this->current_item[ $this->incontent ], $text );		}		elseif ( $this->inchannel ) {			$this->concat( $this->channel[ $this->incontent ], $text );		}	}	// smart append - field and namespace aware	function append($el, $text) {		if (!$el) {			return;		}		if ( $this->current_namespace )		{			if ( $this->initem ) {				$this->concat(					$this->current_item[ $this->current_namespace ][ $el ], $text);			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $this->current_namespace][ $el ], $text );			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $this->current_namespace][ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $this->current_namespace ][ $el ], $text );			}		}		else {			if ( $this->initem ) {				$this->concat(					$this->current_item[ $el ], $text);			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $el ], $text );			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $el ], $text );			}		}	}	function normalize () {		// if atom populate rss fields		if ( $this->is_atom() ) {			$this->channel['descripton'] = $this->channel['tagline'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['summary']) )					$item['description'] = $item['summary'];				if ( isset($item['atom_content']))					$item['content']['encoded'] = $item['atom_content'];				$this->items[$i] = $item;			}		}		elseif ( $this->is_rss() ) {			$this->channel['tagline'] = $this->channel['description'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['description']))					$item['summary'] = $item['description'];				if ( isset($item['content']['encoded'] ) )					$item['atom_content'] = $item['content']['encoded'];				$this->items[$i] = $item;			}		}	}	function is_rss () {		if ( $this->feed_type == RSS ) {			return $this->feed_version;		}		else {			return false;		}	}	function is_atom() {		if ( $this->feed_type == ATOM ) {			return $this->feed_version;		}		else {			return false;		}	}	function map_attrs($k, $v) {		return "$k=\"$v\"";	}	function error( $errormsg, $lvl = E_USER_WARNING ) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		} else {			error_log( $errormsg, 0);		}	}}if ( !function_exists('fetch_rss') ) :/** * Build Magpie object based on RSS from URL. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve feed * @return bool|MagpieRSS false on failure or MagpieRSS object on success. */function fetch_rss ($url) {	// initialize constants	init();	if ( !isset($url) ) {		// error("fetch_rss called without a url");		return false;	}	// if cache is disabled	if ( !MAGPIE_CACHE_ON ) {		// fetch file, and parse it		$resp = _fetch_remote_file( $url );		if ( is_success( $resp->status ) ) {			return _response_to_rss( $resp );		}		else {			// error("Failed to fetch $url and cache is off");			return false;		}	}	// else cache is ON	else {		// Flow		// 1. check cache		// 2. if there is a hit, make sure its fresh		// 3. if cached obj fails freshness check, fetch remote		// 4. if remote fails, return stale object, or error		$cache = new RSSCache( MAGPIE_CACHE_DIR, MAGPIE_CACHE_AGE );		if (MAGPIE_DEBUG and $cache->ERROR) {			debug($cache->ERROR, E_USER_WARNING);		}		$cache_status 	 = 0;		// response of check_cache		$request_headers = array(); // HTTP headers to send with fetch		$rss 			 = 0;		// parsed RSS object		$errormsg		 = 0;		// errors, if any		if (!$cache->ERROR) {			// return cache HIT, MISS, or STALE			$cache_status = $cache->check_cache( $url );		}		// if object cached, and cache is fresh, return cached obj		if ( $cache_status == 'HIT' ) {			$rss = $cache->get( $url );			if ( isset($rss) and $rss ) {				$rss->from_cache = 1;				if ( MAGPIE_DEBUG > 1) {				debug("MagpieRSS: Cache HIT", E_USER_NOTICE);			}				return $rss;			}		}		// else attempt a conditional get		// set up headers		if ( $cache_status == 'STALE' ) {			$rss = $cache->get( $url );			if ( isset($rss->etag) and $rss->last_modified ) {				$request_headers['If-None-Match'] = $rss->etag;				$request_headers['If-Last-Modified'] = $rss->last_modified;			}		}		$resp = _fetch_remote_file( $url, $request_headers );		if (isset($resp) and $resp) {			if ($resp->status == '304' ) {				// we have the most current copy				if ( MAGPIE_DEBUG > 1) {					debug("Got 304 for $url");				}				// reset cache on 304 (at minutillo insistent prodding)				$cache->set($url, $rss);				return $rss;			}			elseif ( is_success( $resp->status ) ) {				$rss = _response_to_rss( $resp );				if ( $rss ) {					if (MAGPIE_DEBUG > 1) {						debug("Fetch successful");					}					// add object to cache					$cache->set( $url, $rss );					return $rss;				}			}			else {				$errormsg = "Failed to fetch $url. ";				if ( $resp->error ) {					# compensate for Snoopy's annoying habbit to tacking					# on '\n'					$http_error = substr($resp->error, 0, -2);					$errormsg .= "(HTTP Error: $http_error)";				}				else {					$errormsg .=  "(HTTP Response: " . $resp->response_code .')';				}			}		}		else {			$errormsg = "Unable to retrieve RSS file for unknown reasons.";		}		// else fetch failed		// attempt to return cached object		if ($rss) {			if ( MAGPIE_DEBUG ) {				debug("Returning STALE object for $url");			}			return $rss;		}		// else we totally failed		// error( $errormsg );		return false;	} // end if ( !MAGPIE_CACHE_ON ) {} // end fetch_rss()endif;/** * Retrieve URL headers and content using WP HTTP Request API. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve * @param array $headers Optional. Headers to send to the URL. * @return Snoopy style response */function _fetch_remote_file($url, $headers = "" ) {	$resp = wp_remote_request($url, array('headers' => $headers, 'timeout' => MAGPIE_FETCH_TIME_OUT));	if ( is_wp_error($resp) ) {		$error = array_shift($resp->errors);		$resp = new stdClass;		$resp->status = 500;		$resp->response_code = 500;		$resp->error = $error[0] . "\n"; //\n = Snoopy compatibility		return $resp;	}	// Snoopy returns headers unprocessed.	// Also note, WP_HTTP lowercases all keys, Snoopy did not.	$return_headers = array();	foreach ( $resp['headers'] as $key => $value ) {		if ( !is_array($value) ) {			$return_headers[] = "$key: $value";		} else {			foreach ( $value as $v )				$return_headers[] = "$key: $v";		}	}	$response = new stdClass;	$response->status = $resp['response']['code'];	$response->response_code = $resp['response']['code'];	$response->headers = $return_headers;	$response->results = $resp['body'];	return $response;}/** * Retrieve * * @since unknown * @package External * @subpackage MagpieRSS * * @param unknown_type $resp * @return unknown */function _response_to_rss ($resp) {	$rss = new MagpieRSS( $resp->results );	// if RSS parsed successfully	if ( $rss && (!isset($rss->ERROR) || !$rss->ERROR) ) {		// find Etag, and Last-Modified		foreach( (array) $resp->headers as $h) {			// 2003-03-02 - Nicola Asuni (www.tecnick.com) - fixed bug "Undefined offset: 1"			if (strpos($h, ": ")) {				list($field, $val) = explode(": ", $h, 2);			}			else {				$field = $h;				$val = "";			}			if ( $field == 'etag' ) {				$rss->etag = $val;			}			if ( $field == 'last-modified' ) {				$rss->last_modified = $val;			}		}		return $rss;	} // else construct error message	else {		$errormsg = "Failed to parse RSS file.";		if ($rss) {			$errormsg .= " (" . $rss->ERROR . ")";		}		// error($errormsg);		return false;	} // end if ($rss and !$rss->error)}/** * Set up constants with default values, unless user overrides. * * @since unknown * @package External * @subpackage MagpieRSS */function init () {	if ( defined('MAGPIE_INITALIZED') ) {		return;	}	else {		define('MAGPIE_INITALIZED', 1);	}	if ( !defined('MAGPIE_CACHE_ON') ) {		define('MAGPIE_CACHE_ON', 1);	}	if ( !defined('MAGPIE_CACHE_DIR') ) {		define('MAGPIE_CACHE_DIR', './cache');	}	if ( !defined('MAGPIE_CACHE_AGE') ) {		define('MAGPIE_CACHE_AGE', 60*60); // one hour	}	if ( !defined('MAGPIE_CACHE_FRESH_ONLY') ) {		define('MAGPIE_CACHE_FRESH_ONLY', 0);	}		if ( !defined('MAGPIE_DEBUG') ) {		define('MAGPIE_DEBUG', 0);	}	if ( !defined('MAGPIE_USER_AGENT') ) {		$ua = 'WordPress/' . $GLOBALS['wp_version'];		if ( MAGPIE_CACHE_ON ) {			$ua = $ua . ')';		}		else {			$ua = $ua . '; No cache)';		}		define('MAGPIE_USER_AGENT', $ua);	}	if ( !defined('MAGPIE_FETCH_TIME_OUT') ) {		define('MAGPIE_FETCH_TIME_OUT', 2);	// 2 second timeout	}	// use gzip encoding to fetch rss files if supported?	if ( !defined('MAGPIE_USE_GZIP') ) {		define('MAGPIE_USE_GZIP', true);	}}function is_info ($sc) {	return $sc >= 100 && $sc < 200;}function is_success ($sc) {	return $sc >= 200 && $sc < 300;}function is_redirect ($sc) {	return $sc >= 300 && $sc < 400;}function is_error ($sc) {	return $sc >= 400 && $sc < 600;}function is_client_error ($sc) {	return $sc >= 400 && $sc < 500;}function is_server_error ($sc) {	return $sc >= 500 && $sc < 600;}class RSSCache {	var $BASE_CACHE;	// where the cache files are stored	var $MAX_AGE	= 43200;  		// when are files stale, default twelve hours	var $ERROR 		= '';			// accumulate error messages	function RSSCache ($base='', $age='') {		$this->BASE_CACHE = WP_CONTENT_DIR . '/cache';		if ( $base ) {			$this->BASE_CACHE = $base;		}		if ( $age ) {			$this->MAX_AGE = $age;		}	}/*=======================================================================*\	Function:	set	Purpose:	add an item to the cache, keyed on url	Input:		url from wich the rss file was fetched	Output:		true on sucess\*=======================================================================*/	function set ($url, $rss) {		$cache_option = 'rss_' . $this->file_name( $url );		set_transient($cache_option, $rss, $this->MAX_AGE);		return $cache_option;	}/*=======================================================================*\	Function:	get	Purpose:	fetch an item from the cache	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function get ($url) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( ! $rss = get_transient( $cache_option ) ) {			$this->debug(				"Cache doesn't contain: $url (cache option: $cache_option)"			);			return 0;		}		return $rss;	}/*=======================================================================*\	Function:	check_cache	Purpose:	check a url for membership in the cache				and whether the object is older then MAX_AGE (ie. STALE)	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function check_cache ( $url ) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( get_transient($cache_option) ) {			// object exists and is current				return 'HIT';		} else {			// object does not exist			return 'MISS';		}	}/*=======================================================================*\	Function:	serialize\*=======================================================================*/	function serialize ( $rss ) {		return serialize( $rss );	}/*=======================================================================*\	Function:	unserialize\*=======================================================================*/	function unserialize ( $data ) {		return unserialize( $data );	}/*=======================================================================*\	Function:	file_name	Purpose:	map url to location in cache	Input:		url from wich the rss file was fetched	Output:		a file name\*=======================================================================*/	function file_name ($url) {		return md5( $url );	}/*=======================================================================*\	Function:	error	Purpose:	register error\*=======================================================================*/	function error ($errormsg, $lvl=E_USER_WARNING) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		$this->ERROR = $errormsg;		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		}		else {			error_log( $errormsg, 0);		}	}			function debug ($debugmsg, $lvl=E_USER_NOTICE) {		if ( MAGPIE_DEBUG ) {			$this->error("MagpieRSS [debug] $debugmsg", $lvl);		}	}}if ( !function_exists('parse_w3cdtf') ) :function parse_w3cdtf ( $date_str ) {	# regex to match wc3dtf	$pat = "/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/";	if ( preg_match( $pat, $date_str, $match ) ) {		list( $year, $month, $day, $hours, $minutes, $seconds) =			array( $match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);		# calc epoch for current date assuming GMT		$epoch = gmmktime( $hours, $minutes, $seconds, $month, $day, $year);		$offset = 0;		if ( $match[11] == 'Z' ) {			# zulu time, aka GMT		}		else {			list( $tz_mod, $tz_hour, $tz_min ) =				array( $match[8], $match[9], $match[10]);			# zero out the variables			if ( ! $tz_hour ) { $tz_hour = 0; }			if ( ! $tz_min ) { $tz_min = 0; }			$offset_secs = (($tz_hour*60)+$tz_min)*60;			# is timezone ahead of GMT?  then subtract offset			#			if ( $tz_mod == '+' ) {				$offset_secs = $offset_secs * -1;			}			$offset = $offset_secs;		}		$epoch = $epoch + $offset;		return $epoch;	}	else {		return -1;	}}endif;if ( !function_exists('wp_rss') ) :/** * Display all RSS items in a HTML ordered list. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. */function wp_rss( $url, $num_items = -1 ) {	if ( $rss = fetch_rss( $url ) ) {		echo '<ul>';		if ( $num_items !== -1 ) {			$rss->items = array_slice( $rss->items, 0, $num_items );		}		foreach ( (array) $rss->items as $item ) {			printf(				'<li><a href="%1$s" title="%2$s">%3$s</a></li>',				esc_url( $item['link'] ),				esc_attr( strip_tags( $item['description'] ) ),				htmlentities( $item['title'] )			);		}		echo '</ul>';	} else {		_e( 'An error has occurred, which probably means the feed is down. Try again later.' );	}}endif;if ( !function_exists('get_rss') ) :/** * Display RSS items in HTML list items. * * You have to specify which HTML list you want, either ordered or unordered * before using the function. You also have to specify how many items you wish * to display. You can't display all of them like you can with wp_rss() * function. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. * @return bool False on failure. */function get_rss ($url, $num_items = 5) { // Like get posts, but for RSS	$rss = fetch_rss($url);	if ( $rss ) {		$rss->items = array_slice($rss->items, 0, $num_items);		foreach ( (array) $rss->items as $item ) {			echo "<li>\n";			echo "<a href='$item[link]' title='$item[description]'>";			echo htmlentities($item['title']);			echo "</a><br />\n";			echo "</li>\n";		}	} else {		return false;	}}endif;?>
<?php/** * Quick way to create a WordPress Post. * * @package WordPress * @subpackage Administration *//** * @var string * @name $mode */$mode = 'sidebar';/** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('edit_posts') )	wp_die(__('Cheatin&#8217; uh?'));$post = get_default_post_to_edit();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></title><style type="text/css" media="screen">body {	font-size: 0.9em;	margin: 0;	padding: 0;}form {	padding: 1%;}.tags-wrap p {	font-size: 0.75em;	margin-top: 0.4em;}.button-highlighted, #wphead, label {	font-weight: bold;}#post-title, #tags-input, #content {	width: 99%;	padding: 2px;}#wphead {	font-size: 1.4em;	background-color: #E4F2FD;	color: #555555;	padding: 0.2em 1%;}#wphead p {	margin: 3px;}.button {	font-family: "Lucida Grande", "Lucida Sans Unicode", Tahoma, Verdana, sans-serif;	padding: 3px 5px;	margin-right: 5px;	font-size: 0.75em;	line-height: 1.5em;	border: 1px solid #80b5d0;	-moz-border-radius: 3px;	-khtml-border-radius: 3px;	-webkit-border-radius: 3px;	border-radius: 3px;	cursor: pointer;	background-color: #e5e5e5;	color: #246;}.button:hover {	border-color: #535353;}.updated {	background-color: #FFFBCC;	border: 1px solid #E6DB55;	margin-bottom: 1em;	padding: 0 0.6em;}.updated p {	margin: 0.6em;}</style></head><body id="sidebar"><div id="wphead"><p><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></p></div><form name="post" action="post.php" method="post"><div><input type="hidden" name="action" value="post" /><input type="hidden" name="user_ID" value="<?php echo esc_attr($user_ID) ?>" /><input type="hidden" name="mode" value="sidebar" /><input type="hidden" name="ping_status" value="<?php echo esc_attr($post->ping_status); ?>" /><input type="hidden" name="comment_status" value="<?php echo esc_attr($post->comment_status); ?>" /><?php wp_nonce_field('add-post');if ( 'b' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post published.') . '</p></div>';elseif ( 'c' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post saved.') . '</p></div>';?><p><label for="post-title"><?php _e('Title:'); ?></label><input type="text" name="post_title" id="post-title" size="20" tabindex="1" autocomplete="off" value="" /></p><p><label for="content"><?php _e('Post:'); ?></label><textarea rows="8" cols="12" name="content" id="content" style="height:10em;line-height:1.4em;" tabindex="2"></textarea></p><div class="tags-wrap"><label for="tags-input"><?php _e('Tags:') ?></label><input type="text" name="tags_input" id="tags-input" tabindex="3" value="" /><p><?php _e('Separate tags with commas'); ?></p></div><p><input name="saveasdraft" type="submit" id="saveasdraft" tabindex="9" accesskey="s" class="button" value="<?php esc_attr_e('Save as Draft'); ?>" /><?php if ( current_user_can('publish_posts') ) : ?><input name="publish" type="submit" id="publish" tabindex="6" accesskey="p" value="<?php esc_attr_e('Publish') ?>" class="button button-highlighted" /><?php endif; ?></p></div></form></body></html>
<?php/** * Site/blog functions that work with the blogs table and related data. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// @todo use update_blog_detailsfunction wpmu_update_blogs_date() {	global $wpdb;	$wpdb->update( $wpdb->blogs, array('last_updated' => current_time('mysql', true)), array('blog_id' => $wpdb->blogid) );	refresh_blog_details( $wpdb->blogid );	do_action( 'wpmu_blog_updated', $wpdb->blogid );}function get_blogaddress_by_id( $blog_id ) {	$bloginfo = get_blog_details( (int) $blog_id, false ); // only get bare details!	return esc_url( 'http://' . $bloginfo->domain . $bloginfo->path );}function get_blogaddress_by_name( $blogname ) {	global $current_site;	if ( is_subdomain_install() ) {		if ( $blogname == 'main' )			$blogname = 'www';		$url = rtrim( network_home_url(), '/' );		if ( !empty( $blogname ) )			$url = preg_replace( '|^([^\.]+://)|', '$1' . $blogname . '.', $url );	} else {		$url = network_home_url( $blogname );	}	return esc_url( $url . '/' );}function get_blogaddress_by_domain( $domain, $path ){	if ( is_subdomain_install() ) {		$url = "http://".$domain.$path;	} else {		if ( $domain != $_SERVER['HTTP_HOST'] ) {			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );			$url = 'http://' . substr( $domain, strpos( $domain, '.' ) + 1 ) . $path;			// we're not installing the main blog			if ( $blogname != 'www.' )				$url .= $blogname . '/';		} else { // main blog			$url = 'http://' . $domain . $path;		}	}	return esc_url( $url );}function get_id_from_blogname( $name ) {	global $wpdb, $current_site;	$blog_id = wp_cache_get( "get_id_from_blogname_" . $name, 'blog-details' );	if ( $blog_id )		return $blog_id;	if ( is_subdomain_install() ) {		$domain = $name . '.' . $current_site->domain;		$path = $current_site->path;	} else {		$domain = $current_site->domain;		$path = $current_site->path . $name . '/';	}	$blog_id = $wpdb->get_var( $wpdb->prepare("SELECT blog_id FROM {$wpdb->blogs} WHERE domain = %s AND path = %s", $domain, $path) );	wp_cache_set( 'get_id_from_blogname_' . $name, $blog_id, 'blog-details' );	return $blog_id;}/** * Retrieve the details for a blog from the blogs table and blog options. * * @since 3.0.0 * @param int|string|array $fields A blog ID, a blog name, or an array of fields to query against. * @param bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true. * @return object Blog details. */function get_blog_details( $fields, $get_all = true ) {	global $wpdb;	if ( is_array($fields ) ) {		if ( isset($fields['blog_id']) ) {			$blog_id = $fields['blog_id'];		} elseif ( isset($fields['domain']) && isset($fields['path']) ) {			$key = md5( $fields['domain'] . $fields['path'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) AND path = %s ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'], $fields['path'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s AND path = %s", $fields['domain'], $fields['path'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} elseif ( isset($fields['domain']) && is_subdomain_install() ) {			$key = md5( $fields['domain'] );			$blog = wp_cache_get($key, 'blog-lookup');			if ( false !== $blog )				return $blog;			if ( substr( $fields['domain'], 0, 4 ) == 'www.' ) {				$nowww = substr( $fields['domain'], 4 );				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain IN (%s,%s) ORDER BY CHAR_LENGTH(domain) DESC", $nowww, $fields['domain'] ) );			} else {				$blog = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE domain = %s", $fields['domain'] ) );			}			if ( $blog ) {				wp_cache_set($blog->blog_id . 'short', $blog, 'blog-details');				$blog_id = $blog->blog_id;			} else {				return false;			}		} else {			return false;		}	} else {		if ( !is_numeric( $fields ) )			$blog_id = get_id_from_blogname( $fields );		else			$blog_id = $fields;	}	$blog_id = (int) $blog_id;	$all = $get_all == true ? '' : 'short';	$details = wp_cache_get( $blog_id . $all, 'blog-details' );	if ( $details ) {		if ( ! is_object( $details ) ) {			if ( $details == -1 ) {				return false;			} else {				// Clear old pre-serialized objects. Cache clients do better with that.				wp_cache_delete( $blog_id . $all, 'blog-details' );				unset($details);			}		} else {			return $details;		}	}	// Try the other cache.	if ( $get_all ) {		$details = wp_cache_get( $blog_id . 'short', 'blog-details' );	} else {		$details = wp_cache_get( $blog_id, 'blog-details' );		// If short was requested and full cache is set, we can return.		if ( $details ) {			if ( ! is_object( $details ) ) {				if ( $details == -1 ) {					return false;				} else {					// Clear old pre-serialized objects. Cache clients do better with that.					wp_cache_delete( $blog_id, 'blog-details' );					unset($details);				}			} else {				return $details;			}		}	}	if ( empty($details) ) {		$details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->blogs WHERE blog_id = %d /* get_blog_details */", $blog_id ) );		if ( ! $details ) {			// Set the full cache.			wp_cache_set( $blog_id, -1, 'blog-details' );			return false;		}	}	if ( ! $get_all ) {		wp_cache_set( $blog_id . $all, $details, 'blog-details' );		return $details;	}	$details->blogname		= get_blog_option( $blog_id, 'blogname' );	$details->siteurl		= get_blog_option( $blog_id, 'siteurl' );	$details->post_count	= get_blog_option( $blog_id, 'post_count' );	$details = apply_filters( 'blog_details', $details );	wp_cache_set( $blog_id . $all, $details, 'blog-details' );	$key = md5( $details->domain . $details->path );	wp_cache_set( $key, $details, 'blog-lookup' );	return $details;}/** * Clear the blog details cache. * * @since 3.0.0 * * @param int $blog_id Blog ID */function refresh_blog_details( $blog_id ) {	$blog_id = (int) $blog_id;	$details = get_blog_details( $blog_id, false );	wp_cache_delete( $blog_id , 'blog-details' );	wp_cache_delete( $blog_id . 'short' , 'blog-details' );	wp_cache_delete( md5( $details->domain . $details->path )  , 'blog-lookup' );	wp_cache_delete( 'current_blog_' . $details->domain, 'site-options' );	wp_cache_delete( 'current_blog_' . $details->domain . $details->path, 'site-options' );}/** * Update the details for a blog. Updates the blogs table for a given blog id. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param array $details Array of details keyed by blogs table field names. * @return bool True if update succeeds, false otherwise. */function update_blog_details( $blog_id, $details = array() ) {	global $wpdb;	if ( empty($details) )		return false;	if ( is_object($details) )		$details = get_object_vars($details);	$current_details = get_blog_details($blog_id, false);	if ( empty($current_details) )		return false;	$current_details = get_object_vars($current_details);	$details = array_merge($current_details, $details);	$details['last_updated'] = current_time('mysql', true);	$update_details = array();	$fields = array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id');	foreach ( array_intersect( array_keys( $details ), $fields ) as $field )		$update_details[$field] = $details[$field];	$wpdb->update( $wpdb->blogs, $update_details, array('blog_id' => $blog_id) );	// If spam status changed, issue actions.	if ( $details[ 'spam' ] != $current_details[ 'spam' ] ) {		if ( $details[ 'spam' ] == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	if ( isset($details[ 'public' ]) )		update_blog_option( $blog_id, 'blog_public', $details[ 'public' ], false );	refresh_blog_details($blog_id);	return true;}/** * Retrieve option value based on setting name and blog_id. * * If the option does not exist or does not have a value, then the return value * will be false. This is useful to check whether you need to install an option * and is commonly used during installation of plugin options and to test * whether upgrading is required. * * There is a filter called 'blog_option_$option' with the $option being * replaced with the option name. The filter takes two parameters. $value and * $blog_id. It returns $value. * The 'option_$option' filter in get_option() is not called. * * @since NA * @package WordPress MU * @subpackage Option * @uses apply_filters() Calls 'blog_option_$optionname' with the option name value. * * @param int $blog_id is the id of the blog. * @param string $setting Name of option to retrieve. Should already be SQL-escaped * @param string $default (optional) Default value returned if option not found. * @return mixed Value set for the option. */function get_blog_option( $blog_id, $setting, $default = false ) {	global $wpdb;	$key = $blog_id."-".$setting."-blog_option";	$value = wp_cache_get( $key, "site-options" );	if ( $value == null ) {		if ( $blog_id == $wpdb->blogid ) {			$value = get_option( $setting, $default );			$notoptions = wp_cache_get( 'notoptions', 'options' );			if ( isset( $notoptions[$setting] ) ) {				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			} elseif ( $value == false ) {				wp_cache_set( $key, 'falsevalue', 'site-options' );			} else {				wp_cache_set( $key, $value, 'site-options' );			}			return apply_filters( 'blog_option_' . $setting, $value, $blog_id );		} else {			$blog_prefix = $wpdb->get_blog_prefix( $blog_id );			$row = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$blog_prefix}options WHERE option_name = %s", $setting ) );			if ( is_object( $row ) ) { // Has to be get_row instead of get_var because of funkiness with 0, false, null values				$value = $row->option_value;				if ( $value == false )					wp_cache_set( $key, 'falsevalue', 'site-options' );				else					wp_cache_set( $key, $value, 'site-options' );			} else { // option does not exist, so we must cache its non-existence				wp_cache_set( $key, 'noop', 'site-options' );				$value = $default;			}		}	} elseif ( $value == 'noop' ) {		$value = $default;	} elseif ( $value == 'falsevalue' ) {		$value = false;	}	// If home is not set use siteurl.	if ( 'home' == $setting && '' == $value )		return get_blog_option( $blog_id, 'siteurl' );	if ( 'siteurl' == $setting || 'home' == $setting || 'category_base' == $setting )		$value = untrailingslashit( $value );	if (! @unserialize( $value ) )		$value = stripslashes( $value );	return apply_filters( 'blog_option_' . $setting, maybe_unserialize( $value ), $blog_id );}function add_blog_option( $id, $key, $value ) {	$id = (int) $id;	switch_to_blog($id);	add_option( $key, $value );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options' );}function delete_blog_option( $id, $key ) {	$id = (int) $id;	switch_to_blog($id);	delete_option( $key );	restore_current_blog();	wp_cache_set( $id."-".$key."-blog_option", '', 'site-options' );}function update_blog_option( $id, $key, $value, $refresh = true ) {	$id = (int) $id;	switch_to_blog($id);	update_option( $key, $value );	restore_current_blog();	if ( $refresh == true )		refresh_blog_details( $id );	wp_cache_set( $id."-".$key."-blog_option", $value, 'site-options');}function switch_to_blog( $new_blog, $validate = false ) {	global $wpdb, $table_prefix, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( empty($new_blog) )		$new_blog = $blog_id;	if ( $validate && ! get_blog_details( $new_blog ) )		return false;	if ( empty($switched_stack) )		$switched_stack = array();	$switched_stack[] = $blog_id;	/* If we're switching to the same blog id that we're on,	* set the right vars, do the associated actions, but skip	* the extra unnecessary work */	if ( $blog_id == $new_blog ) {		do_action( 'switch_blog', $blog_id, $blog_id );		$switched = true;		return true;	}	$wpdb->set_blog_id($new_blog);	$table_prefix = $wpdb->prefix;	$prev_blog_id = $blog_id;	$blog_id = $new_blog;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient', 'global-posts' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	$switched = true;	return true;}function restore_current_blog() {	global $table_prefix, $wpdb, $blog_id, $switched, $switched_stack, $wp_roles, $current_user, $wp_object_cache;	if ( !$switched )		return false;	if ( !is_array( $switched_stack ) )		return false;	$blog = array_pop( $switched_stack );	if ( $blog_id == $blog ) {		do_action( 'switch_blog', $blog, $blog );		/* If we still have items in the switched stack, consider ourselves still 'switched' */		$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );		return true;	}	$wpdb->set_blog_id($blog);	$prev_blog_id = $blog_id;	$blog_id = $blog;	$table_prefix = $wpdb->prefix;	if ( is_object( $wp_roles ) ) {		$wpdb->suppress_errors();		if ( method_exists( $wp_roles ,'_init' ) )			$wp_roles->_init();		elseif ( method_exists( $wp_roles, '__construct' ) )			$wp_roles->__construct();		$wpdb->suppress_errors( false );	}	if ( is_object( $current_user ) )		$current_user->for_blog( $blog_id );	if ( is_object( $wp_object_cache ) && isset( $wp_object_cache->global_groups ) )		$global_groups = $wp_object_cache->global_groups;	else		$global_groups = false;	wp_cache_init();	if ( function_exists('wp_cache_add_global_groups') ) {		if ( is_array( $global_groups ) )			wp_cache_add_global_groups( $global_groups );		else			wp_cache_add_global_groups( array( 'users', 'userlogins', 'usermeta', 'site-options', 'site-lookup', 'blog-lookup', 'blog-details', 'rss', 'site-transient' ) );		wp_cache_add_non_persistent_groups(array( 'comment', 'counts', 'plugins' ));	}	do_action('switch_blog', $blog_id, $prev_blog_id);	/* If we still have items in the switched stack, consider ourselves still 'switched' */	$switched = ( is_array( $switched_stack ) && count( $switched_stack ) > 0 );	return true;}function is_archived( $id ) {	return get_blog_status($id, 'archived');}function update_archived( $id, $archived ) {	update_blog_status($id, 'archived', $archived);	return $archived;}/** * Update a blog details field. * * @since 3.0.0 * * @param int $blog_id BLog ID * @param string $pref A field name * @param string $value Value for $pref * @param bool $refresh Whether to refresh the blog details cache. Default is true. */function update_blog_status( $blog_id, $pref, $value, $refresh = true ) {	global $wpdb;	if ( !in_array( $pref, array( 'site_id', 'domain', 'path', 'registered', 'last_updated', 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id') ) )		return $value;	$wpdb->update( $wpdb->blogs, array($pref => $value, 'last_updated' => current_time('mysql', true)), array('blog_id' => $blog_id) );	if ( $refresh )		refresh_blog_details($blog_id);	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( "make_spam_blog", $blog_id );		else			do_action( "make_ham_blog", $blog_id );	}	return $value;}function get_blog_status( $id, $pref ) {	global $wpdb;	$details = get_blog_details( $id, false );	if ( $details )		return $details->$pref;	return $wpdb->get_var( $wpdb->prepare("SELECT %s FROM {$wpdb->blogs} WHERE blog_id = %d", $pref, $id) );}function get_last_updated( $deprecated = '', $start = 0, $quantity = 40 ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' AND last_updated != '0000-00-00 00:00:00' ORDER BY last_updated DESC limit %d, %d", $wpdb->siteid, $start, $quantity ) , ARRAY_A );}?>
<?phpif ( !class_exists('SimplePie') )	require_once (ABSPATH . WPINC . '/class-simplepie.php');class WP_Feed_Cache extends SimplePie_Cache {	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function WP_Feed_Cache() {		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension) {		return new WP_Feed_Cache_Transient($location, $filename, $extension);	}}class WP_Feed_Cache_Transient {	var $name;	var $mod_name;	var $lifetime = 43200; //Default lifetime in cache of 12 hours	function WP_Feed_Cache_Transient($location, $filename, $extension) {		$this->name = 'feed_' . $filename;		$this->mod_name = 'feed_mod_' . $filename;		$this->lifetime = apply_filters('wp_feed_cache_transient_lifetime', $this->lifetime, $filename);	}	function save($data) {		if ( is_a($data, 'SimplePie') )			$data = $data->data;		set_transient($this->name, $data, $this->lifetime);		set_transient($this->mod_name, time(), $this->lifetime);		return true;	}	function load() {		return get_transient($this->name);	}	function mtime() {		return get_transient($this->mod_name);	}	function touch() {		return set_transient($this->mod_name, time(), $this->lifetime);	}	function unlink() {		delete_transient($this->name);		delete_transient($this->mod_name);		return true;	}}class WP_SimplePie_File extends SimplePie_File {	function WP_SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false) {		$this->url = $url;		$this->timeout = $timeout;		$this->redirects = $redirects;		$this->headers = $headers;		$this->useragent = $useragent;		$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE;		if ( preg_match('/^http(s)?:\/\//i', $url) ) {			$args = array( 'timeout' => $this->timeout, 'redirection' => $this->redirects);			if ( !empty($this->headers) )				$args['headers'] = $this->headers;			if ( SIMPLEPIE_USERAGENT != $this->useragent ) //Use default WP user agent unless custom has been specified				$args['user-agent'] = $this->useragent;			$res = wp_remote_request($url, $args);			if ( is_wp_error($res) ) {				$this->error = 'WP HTTP Error: ' . $res->get_error_message();				$this->success = false;			} else {				$this->headers = $res['headers'];				$this->body = $res['body'];				$this->status_code = $res['response']['code'];			}		} else {			if ( ! $this->body = file_get_contents($url) ) {				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}
<?php/** * WordPress Upgrade Functions. Old file, must not be used. Include * wp-admin/includes/upgrade.php instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/upgrade.php' );require_once(ABSPATH . 'wp-admin/includes/upgrade.php');?>
<?php/** * Navigation Menu template functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Create HTML list of nav menu items. * * @package WordPress * @since 3.0.0 * @uses Walker */class Walker_Nav_Menu extends Walker {	/**	 * @see Walker::$tree_type	 * @since 3.0.0	 * @var string	 */	var $tree_type = array( 'post_type', 'taxonomy', 'custom' );	/**	 * @see Walker::$db_fields	 * @since 3.0.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array( 'parent' => 'menu_item_parent', 'id' => 'db_id' );	/**	 * @see Walker::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class=\"sub-menu\">\n";	}	/**	 * @see Walker::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $wp_query;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$class_names = $value = '';		$classes = empty( $item->classes ) ? array() : (array) $item->classes;		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item ) );		$class_names = ' class="' . esc_attr( $class_names ) . '"';		$output .= $indent . '<li id="menu-item-'. $item->ID . '"' . $value . $class_names .'>';		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';		$attributes .= ! empty( $item->target )     ? ' target="' . esc_attr( $item->target     ) .'"' : '';		$attributes .= ! empty( $item->xfn )        ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';		$attributes .= ! empty( $item->url )        ? ' href="'   . esc_attr( $item->url        ) .'"' : '';		$item_output = $args->before;		$item_output .= '<a'. $attributes .'>';		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;		$item_output .= '</a>';		$item_output .= $args->after;		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );	}	/**	 * @see Walker::end_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $item, $depth) {		$output .= "</li>\n";	}}/** * Displays a navigation menu. * * Optional $args contents: * * menu - The menu that is desired.  Accepts (matching in order) id, slug, name. Defaults to blank. * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'. * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented. * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'. * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'. * container_id - The ID that is applied to the container. Defaults to blank. * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'. * before - Text before the link text. * after - Text after the link text. * link_before - Text before the link. * link_after - Text after the link. * echo - Whether to echo the menu or return it. Defaults to echo. * depth - how many levels of the hierarchy are to be included.  0 means all.  Defaults to 0. * walker - allows a custom walker to be specified. * theme_location - the location in the theme to be used.  Must be registered with register_nav_menu() in order to be selectable by the user. * * @since 3.0.0 * * @param array $args Arguments */function wp_nav_menu( $args = array() ) {	static $menu_id_slugs = array();	$defaults = array( 'menu' => '', 'container' => 'div', 'container_class' => '', 'container_id' => '', 'menu_class' => 'menu', 'menu_id' => '',	'echo' => true, 'fallback_cb' => 'wp_page_menu', 'before' => '', 'after' => '', 'link_before' => '', 'link_after' => '',	'depth' => 0, 'walker' => '', 'theme_location' => '' );	$args = wp_parse_args( $args, $defaults );	$args = apply_filters( 'wp_nav_menu_args', $args );	$args = (object) $args;	// Get the nav menu based on the requested menu	$menu = wp_get_nav_menu_object( $args->menu );	// Get the nav menu based on the theme_location	if ( ! $menu && $args->theme_location && ( $locations = get_nav_menu_locations() ) && isset( $locations[ $args->theme_location ] ) )		$menu = wp_get_nav_menu_object( $locations[ $args->theme_location ] );	// get the first menu that has items if we still can't find a menu	if ( ! $menu && !$args->theme_location ) {		$menus = wp_get_nav_menus();		foreach ( $menus as $menu_maybe ) {			if ( $menu_items = wp_get_nav_menu_items($menu_maybe->term_id) ) {				$menu = $menu_maybe;				break;			}		}	}	// If the menu exists, get its items.	if ( $menu && ! is_wp_error($menu) && !isset($menu_items) )		$menu_items = wp_get_nav_menu_items( $menu->term_id );	// If no menu was found or if the menu has no items and no location was requested, call the fallback_cb if it exists	if ( ( !$menu || is_wp_error($menu) || ( isset($menu_items) && empty($menu_items) && !$args->theme_location ) )		&& ( function_exists($args->fallback_cb) || is_callable( $args->fallback_cb ) ) )			return call_user_func( $args->fallback_cb, (array) $args );	// If no fallback function was specified and the menu doesn't exists, bail.	if ( !$menu || is_wp_error($menu) )		return false;	$nav_menu = $items = '';	$show_container = false;	if ( $args->container ) {		$allowed_tags = apply_filters( 'wp_nav_menu_container_allowedtags', array( 'div', 'nav' ) );		if ( in_array( $args->container, $allowed_tags ) ) {			$show_container = true;			$class = $args->container_class ? ' class="' . esc_attr( $args->container_class ) . '"' : ' class="menu-'. $menu->slug .'-container"';			$id = $args->container_id ? ' id="' . esc_attr( $args->container_id ) . '"' : '';			$nav_menu .= '<'. $args->container . $id . $class . '>';		}	}	// Set up the $menu_item variables	_wp_menu_item_classes_by_context( $menu_items );	$sorted_menu_items = array();	foreach ( (array) $menu_items as $key => $menu_item )		$sorted_menu_items[$menu_item->menu_order] = $menu_item;	unset($menu_items);	$items .= walk_nav_menu_tree( $sorted_menu_items, $args->depth, $args );	unset($sorted_menu_items);	// Attributes	if ( ! empty( $args->menu_id ) ) {		$slug = $args->menu_id;	} else {		$slug = 'menu-' . $menu->slug;		while ( in_array( $slug, $menu_id_slugs ) ) {			if ( preg_match( '#-(\d+)$#', $slug, $matches ) )				$slug = preg_replace('#-(\d+)$#', '-' . ++$matches[1], $slug);			else				$slug = $slug . '-1';		}	}	$menu_id_slugs[] = $slug;	$attributes = ' id="' . $slug . '"';	$attributes .= $args->menu_class ? ' class="'. $args->menu_class .'"' : '';	$nav_menu .= '<ul'. $attributes .'>';	// Allow plugins to hook into the menu to add their own <li>'s	$items = apply_filters( 'wp_nav_menu_items', $items, $args );	$items = apply_filters( "wp_nav_menu_{$menu->slug}_items", $items, $args );	$nav_menu .= $items;	unset($items);	$nav_menu .= '</ul>';	if ( $show_container )		$nav_menu .= '</' . $args->container . '>';	$nav_menu = apply_filters( 'wp_nav_menu', $nav_menu, $args );	if ( $args->echo )		echo $nav_menu;	else		return $nav_menu;}/** * Add the class property classes for the current context, if applicable. * * @access private * @since 3.0 * * @param array $menu_items The current menu item objects to which to add the class property information. */function _wp_menu_item_classes_by_context( &$menu_items ) {	global $wp_query;	$queried_object = $wp_query->get_queried_object();	$queried_object_id = (int) $wp_query->queried_object_id;	$active_object = '';	$active_ancestor_item_ids = array();	$active_parent_item_ids = array();	$active_parent_object_ids = array();	$possible_taxonomy_ancestors = array();	$possible_object_parents = array();	$home_page_id = (int) get_option( 'page_for_posts' );	if ( $wp_query->is_singular && ! empty( $queried_object->post_type ) && ! is_post_type_hierarchical( $queried_object->post_type ) ) {		foreach ( (array) get_object_taxonomies( $queried_object->post_type ) as $taxonomy ) {			if ( is_taxonomy_hierarchical( $taxonomy ) ) {				$term_hierarchy = _get_term_hierarchy( $taxonomy );				$terms = wp_get_object_terms( $queried_object_id, $taxonomy, array( 'fields' => 'ids' ) );				if ( is_array( $terms ) ) {					$possible_object_parents = array_merge( $possible_object_parents, $terms );					$term_to_ancestor = array();					foreach ( (array) $term_hierarchy as $anc => $descs ) {						foreach ( (array) $descs as $desc )							$term_to_ancestor[ $desc ] = $anc;					}					foreach ( $terms as $desc ) {						do {							$possible_taxonomy_ancestors[ $taxonomy ][] = $desc;							if ( isset( $term_to_ancestor[ $desc ] ) ) {								$_desc = $term_to_ancestor[ $desc ];								unset( $term_to_ancestor[ $desc ] );								$desc = $_desc;							} else {								$desc = 0;							}						} while ( ! empty( $desc ) );					}				}			}		}	} elseif ( ! empty( $queried_object->post_type ) && is_post_type_hierarchical( $queried_object->post_type ) ) {		_get_post_ancestors( $queried_object );	} elseif ( ! empty( $queried_object->taxonomy ) && is_taxonomy_hierarchical( $queried_object->taxonomy ) ) {		$term_hierarchy = _get_term_hierarchy( $queried_object->taxonomy );		$term_to_ancestor = array();		foreach ( (array) $term_hierarchy as $anc => $descs ) {			foreach ( (array) $descs as $desc )				$term_to_ancestor[ $desc ] = $anc;		}		$desc = $queried_object->term_id;		do {			$possible_taxonomy_ancestors[ $queried_object->taxonomy ][] = $desc;			if ( isset( $term_to_ancestor[ $desc ] ) ) {				$_desc = $term_to_ancestor[ $desc ];				unset( $term_to_ancestor[ $desc ] );				$desc = $_desc;			} else {				$desc = 0;			}		} while ( ! empty( $desc ) );	}	$possible_object_parents = array_filter( $possible_object_parents );	foreach ( (array) $menu_items as $key => $menu_item ) {		$classes = (array) $menu_item->classes;		$classes[] = 'menu-item';		$classes[] = 'menu-item-type-' . $menu_item->type;		// if the menu item corresponds to a taxonomy term for the currently-queried non-hierarchical post object		if ( $wp_query->is_singular && 'taxonomy' == $menu_item->type && in_array( $menu_item->object_id, $possible_object_parents ) ) {			$active_parent_object_ids[] = (int) $menu_item->object_id;			$active_parent_item_ids[] = (int) $menu_item->db_id;			$active_object = $queried_object->post_type;		// if the menu item corresponds to the currently-queried post or taxonomy object		} elseif (			$menu_item->object_id == $queried_object_id &&			(				( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && $wp_query->is_home && $home_page_id == $menu_item->object_id ) ||				( 'post_type' == $menu_item->type && $wp_query->is_singular ) ||				( 'taxonomy' == $menu_item->type && ( $wp_query->is_category || $wp_query->is_tag || $wp_query->is_tax ) )			)		) {			$classes[] = 'current-menu-item';			$_anc_id = (int) $menu_item->db_id;			while(				( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&				! in_array( $_anc_id, $active_ancestor_item_ids )			) {				$active_ancestor_item_ids[] = $_anc_id;			}			if ( 'post_type' == $menu_item->type && 'page' == $menu_item->object ) {				// Back compat classes for pages to match wp_page_menu()				$classes[] = 'page_item';				$classes[] = 'page-item-' . $menu_item->object_id;				$classes[] = 'current_page_item';			}			$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;			$active_parent_object_ids[] = (int) $menu_item->post_parent;			$active_object = $menu_item->object;		// if the menu item corresponds to the currently-requested URL		} elseif ( 'custom' == $menu_item->object ) {			$current_url = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];			$item_url = strpos( $menu_item->url, '#' ) ? substr( $menu_item->url, 0, strpos( $menu_item->url, '#' ) ) : $menu_item->url;			if ( $item_url == $current_url ) {				$classes[] = 'current-menu-item';				$_anc_id = (int) $menu_item->db_id;				while(					( $_anc_id = get_post_meta( $_anc_id, '_menu_item_menu_item_parent', true ) ) &&					! in_array( $_anc_id, $active_ancestor_item_ids )				) {					$active_ancestor_item_ids[] = $_anc_id;				}				if ( untrailingslashit($current_url) == home_url() ) {					$classes[] = 'menu-item-home';					// Back compat for home limk to match wp_page_menu()					$classes[] = 'current_page_item';				}				$active_parent_item_ids[] = (int) $menu_item->menu_item_parent;				$active_parent_object_ids[] = (int) $menu_item->post_parent;				$active_object = $menu_item->object;			}		}		// back-compat with wp_page_menu: add "current_page_parent" to static home page link for any non-page query		if ( ! empty( $home_page_id ) && 'post_type' == $menu_item->type && empty( $wp_query->is_page ) && $home_page_id == $menu_item->object_id )			$classes[] = 'current_page_parent';		$menu_items[$key]->classes = array_unique( $classes );	}	$active_ancestor_item_ids = array_filter( array_unique( $active_ancestor_item_ids ) );	$active_parent_item_ids = array_filter( array_unique( $active_parent_item_ids ) );	$active_parent_object_ids = array_filter( array_unique( $active_parent_object_ids ) );	// set parent's class	foreach ( (array) $menu_items as $key => $parent_item ) {		$classes = (array) $parent_item->classes;		if (			isset( $parent_item->type ) &&			(				// ancestral post object				(					'post_type' == $parent_item->type &&					! empty( $queried_object->post_type ) &&					is_post_type_hierarchical( $queried_object->post_type ) &&					in_array( $parent_item->object_id, $queried_object->ancestors )				) ||				// ancestral term				(					'taxonomy' == $parent_item->type &&					isset( $possible_taxonomy_ancestors[ $parent_item->object ] ) &&					in_array( $parent_item->object_id, $possible_taxonomy_ancestors[ $parent_item->object ] )				)			)		) {			$classes[] = empty( $queried_object->taxonomy ) ? 'current-' . $queried_object->post_type . '-ancestor' : 'current-' . $queried_object->taxonomy . '-ancestor';		}		if ( in_array(  intval( $parent_item->db_id ), $active_ancestor_item_ids ) ) {			$classes[] = 'current-menu-ancestor';		}		if ( in_array( $parent_item->db_id, $active_parent_item_ids ) )			$classes[] = 'current-menu-parent';		if ( in_array( $parent_item->object_id, $active_parent_object_ids ) )			$classes[] = 'current-' . $active_object . '-parent';		if ( 'post_type' == $parent_item->type && 'page' == $parent_item->object ) {			// Back compat classes for pages to match wp_page_menu()			if ( in_array('current-menu-parent', $classes) )				$classes[] = 'current_page_parent';			if ( in_array('current-menu-ancestor', $classes) )				$classes[] = 'current_page_ancestor';		}		$menu_items[$key]->classes = array_unique( $classes );	}}/** * Retrieve the HTML list content for nav menu items. * * @uses Walker_Nav_Menu to create HTML list content. * @since 2.1.0 * @see Walker::walk() for parameters and return description. */function walk_nav_menu_tree( $items, $depth, $r ) {	$walker = ( empty($r->walker) ) ? new Walker_Nav_Menu : $r->walker;	$args = array( $items, $depth, $r );	return call_user_func_array( array(&$walker, 'walk'), $args );}?>
<?php/** * Parse OPML XML files and store in globals. * * @package WordPress * @subpackage Administration */if ( ! defined('ABSPATH') )	die();global $opml, $map;// columns we wish to find are:  link_url, link_name, link_target, link_description// we need to map XML attribute names to our columns$opml_map = array('URL'         => 'link_url',	'HTMLURL'     => 'link_url',	'TEXT'        => 'link_name',	'TITLE'       => 'link_name',	'TARGET'      => 'link_target',	'DESCRIPTION' => 'link_description',	'XMLURL'      => 'link_rss');$map = $opml_map;/** * XML callback function for the start of a new XML tag. * * @since unknown * @access private * * @uses $updated_timestamp Not used inside function. * @uses $all_links Not used inside function. * @uses $map Stores names of attributes to use. * @global array $names * @global array $urls * @global array $targets * @global array $descriptions * @global array $feeds * * @param mixed $parser XML Parser resource. * @param string $tagName XML element name. * @param array $attrs XML element attributes. */function startElement($parser, $tagName, $attrs) {	global $updated_timestamp, $all_links, $map;	global $names, $urls, $targets, $descriptions, $feeds;	if ($tagName == 'OUTLINE') {		foreach (array_keys($map) as $key) {			if (isset($attrs[$key])) {				$$map[$key] = $attrs[$key];			}		}		//echo("got data: link_url = [$link_url], link_name = [$link_name], link_target = [$link_target], link_description = [$link_description]<br />\n");		// save the data away.		$names[] = $link_name;		$urls[] = $link_url;		$targets[] = $link_target;		$feeds[] = $link_rss;		$descriptions[] = $link_description;	} // end if outline}/** * XML callback function that is called at the end of a XML tag. * * @since unknown * @access private * @package WordPress * @subpackage Dummy * * @param mixed $parser XML Parser resource. * @param string $tagName XML tag name. */function endElement($parser, $tagName) {	// nothing to do.}// Create an XML parser$xml_parser = xml_parser_create();// Set the functions to handle opening and closing tagsxml_set_element_handler($xml_parser, "startElement", "endElement");if (!xml_parse($xml_parser, $opml, true)) {	echo(sprintf(__('XML error: %1$s at line %2$s'),	xml_error_string(xml_get_error_code($xml_parser)),	xml_get_current_line_number($xml_parser)));}// Free up memory used by the XML parserxml_parser_free($xml_parser);?>
<?php/** * WordPress implementation for PHP functions missing from older PHP versions. * * @package PHP * @access private */// Added in PHP 5.0if (!function_exists('http_build_query')) {	function http_build_query($data, $prefix=null, $sep=null) {		return _http_build_query($data, $prefix, $sep);	}}// from php.net (modified by Mark Jaquith to behave like the native PHP5 function)function _http_build_query($data, $prefix=null, $sep=null, $key='', $urlencode=true) {	$ret = array();	foreach ( (array) $data as $k => $v ) {		if ( $urlencode)			$k = urlencode($k);		if ( is_int($k) && $prefix != null )			$k = $prefix.$k;		if ( !empty($key) )			$k = $key . '%5B' . $k . '%5D';		if ( $v === NULL )			continue;		elseif ( $v === FALSE )			$v = '0';		if ( is_array($v) || is_object($v) )			array_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));		elseif ( $urlencode )			array_push($ret, $k.'='.urlencode($v));		else			array_push($ret, $k.'='.$v);	}	if ( NULL === $sep )		$sep = ini_get('arg_separator.output');	return implode($sep, $ret);}if ( !function_exists('_') ) {	function _($string) {		return $string;	}}if (!function_exists('stripos')) {	function stripos($haystack, $needle, $offset = 0) {		return strpos(strtolower($haystack), strtolower($needle), $offset);	}}if ( !function_exists('hash_hmac') ):function hash_hmac($algo, $data, $key, $raw_output = false) {	return _hash_hmac($algo, $data, $key, $raw_output);}endif;function _hash_hmac($algo, $data, $key, $raw_output = false) {	$packs = array('md5' => 'H32', 'sha1' => 'H40');	if ( !isset($packs[$algo]) )		return false;	$pack = $packs[$algo];	if (strlen($key) > 64)		$key = pack($pack, $algo($key));	$key = str_pad($key, 64, chr(0));	$ipad = (substr($key, 0, 64) ^ str_repeat(chr(0x36), 64));	$opad = (substr($key, 0, 64) ^ str_repeat(chr(0x5C), 64));	$hmac = $algo($opad . pack($pack, $algo($ipad . $data)));	if ( $raw_output )		return pack( $pack, $hmac );	return $hmac;}if ( !function_exists('mb_substr') ):	function mb_substr( $str, $start, $length=null, $encoding=null ) {		return _mb_substr($str, $start, $length, $encoding);	}endif;function _mb_substr( $str, $start, $length=null, $encoding=null ) {	// the solution below, works only for utf-8, so in case of a different	// charset, just use built-in substr	$charset = get_option( 'blog_charset' );	if ( !in_array( $charset, array('utf8', 'utf-8', 'UTF8', 'UTF-8') ) ) {		return is_null( $length )? substr( $str, $start ) : substr( $str, $start, $length);	}	// use the regex unicode support to separate the UTF-8 characters into an array	preg_match_all( '/./us', $str, $match );	$chars = is_null( $length )? array_slice( $match[0], $start ) : array_slice( $match[0], $start, $length );	return implode( '', $chars );}if ( !function_exists( 'htmlspecialchars_decode' ) ) {	// Added in PHP 5.1.0	// Error checks from PEAR::PHP_Compat	function htmlspecialchars_decode( $string, $quote_style = ENT_COMPAT )	{		if ( !is_scalar( $string ) ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 1 to be string, ' . gettype( $string ) . ' given', E_USER_WARNING );			return;		}		if ( !is_int( $quote_style ) && $quote_style !== null ) {			trigger_error( 'htmlspecialchars_decode() expects parameter 2 to be integer, ' . gettype( $quote_style ) . ' given', E_USER_WARNING );			return;		}		return wp_specialchars_decode( $string, $quote_style );	}}// For PHP < 5.2.0if ( !function_exists('json_encode') ) {	function json_encode( $string ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		return $wp_json->encodeUnsafe( $string );	}}if ( !function_exists('json_decode') ) {	function json_decode( $string, $assoc_array = false ) {		global $wp_json;		if ( !is_a($wp_json, 'Services_JSON') ) {			require_once( ABSPATH . WPINC . '/class-json.php' );			$wp_json = new Services_JSON();		}		$res = $wp_json->decode( $string );		if ( $assoc_array )			$res = _json_decode_object_helper( $res );		return $res;	}	function _json_decode_object_helper($data) {		if ( is_object($data) )			$data = get_object_vars($data);		return is_array($data) ? array_map(__FUNCTION__, $data) : $data;	}}// pathinfo that fills 'filename' without extension like in PHP 5.2+function pathinfo52($path) {	$parts = pathinfo($path);	if ( !isset($parts['filename']) ) {		$parts['filename'] = substr( $parts['basename'], 0, strrpos($parts['basename'], '.') );		if ( empty($parts['filename']) ) // there's no extension			$parts['filename'] = $parts['basename'];	}	return $parts;}
<?php/** * WordPress Diff bastard child of old MediaWiki Diff Formatter. * * Basically all that remains is the table structure and some method names. * * @package WordPress * @subpackage Diff */if ( !class_exists( 'Text_Diff' ) ) {	/** Text_Diff class */	require( dirname(__FILE__).'/Text/Diff.php' );	/** Text_Diff_Renderer class */	require( dirname(__FILE__).'/Text/Diff/Renderer.php' );	/** Text_Diff_Renderer_inline class */	require( dirname(__FILE__).'/Text/Diff/Renderer/inline.php' );}/** * Table renderer to display the diff lines. * * @since 2.6.0 * @uses Text_Diff_Renderer Extends */class WP_Text_Diff_Renderer_Table extends Text_Diff_Renderer {	/**	 * @see Text_Diff_Renderer::_leading_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_leading_context_lines  = 10000;	/**	 * @see Text_Diff_Renderer::_trailing_context_lines	 * @var int	 * @access protected	 * @since 2.6.0	 */	var $_trailing_context_lines = 10000;	/**	 * {@internal Missing Description}}	 *	 * @var float	 * @access protected	 * @since 2.6.0	 */	var $_diff_threshold = 0.6;	/**	 * Inline display helper object name.	 *	 * @var string	 * @access protected	 * @since 2.6.0	 */	var $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';	/**	 * PHP4 Constructor - Call parent constructor with params array.	 *	 * This will set class properties based on the key value pairs in the array.	 *	 * @since unknown	 *	 * @param array $params	 */	function Text_Diff_Renderer_Table( $params = array() ) {		$parent = get_parent_class($this);		$this->$parent( $params );	}	/**	 * @ignore	 *	 * @param string $header	 * @return string	 */	function _startBlock( $header ) {		return '';	}	/**	 * @ignore	 *	 * @param array $lines	 * @param string $prefix	 */	function _lines( $lines, $prefix=' ' ) {	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function addedLine( $line ) {		return "<td>+</td><td class='diff-addedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function deletedLine( $line ) {		return "<td>-</td><td class='diff-deletedline'>{$line}</td>";	}	/**	 * @ignore	 *	 * @param string $line HTML-escape the value.	 * @return string	 */	function contextLine( $line ) {		return "<td> </td><td class='diff-context'>{$line}</td>";	}	/**	 * @ignore	 *	 * @return string	 */	function emptyLine() {		return '<td colspan="2">&nbsp;</td>';	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _added( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->emptyLine() . $this->addedLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _deleted( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' . $this->deletedLine( $line ) . $this->emptyLine() . "</tr>\n";		}		return $r;	}	/**	 * @ignore	 * @access private	 *	 * @param array $lines	 * @param bool $encode	 * @return string	 */	function _context( $lines, $encode = true ) {		$r = '';		foreach ($lines as $line) {			if ( $encode )				$line = htmlspecialchars( $line );			$r .= '<tr>' .				$this->contextLine( $line ) . $this->contextLine( $line ) . "</tr>\n";		}		return $r;	}	/**	 * Process changed lines to do word-by-word diffs for extra highlighting.	 *	 * (TRAC style) sometimes these lines can actually be deleted or added rows.	 * We do additional processing to figure that out	 *	 * @access private	 * @since 2.6.0	 *	 * @param array $orig	 * @param array $final	 * @return string	 */	function _changed( $orig, $final ) {		$r = '';		// Does the aforementioned additional processing		// *_matches tell what rows are "the same" in orig and final.  Those pairs will be diffed to get word changes		//	match is numeric: an index in other column		//	match is 'X': no match.  It is a new row		// *_rows are column vectors for the orig column and the final column.		//	row >= 0: an indix of the $orig or $final array		//	row  < 0: a blank row for that column		list($orig_matches, $final_matches, $orig_rows, $final_rows) = $this->interleave_changed_lines( $orig, $final );		// These will hold the word changes as determined by an inline diff		$orig_diffs  = array();		$final_diffs = array();		// Compute word diffs for each matched pair using the inline diff		foreach ( $orig_matches as $o => $f ) {			if ( is_numeric($o) && is_numeric($f) ) {				$text_diff = new Text_Diff( 'auto', array( array($orig[$o]), array($final[$f]) ) );				$renderer = new $this->inline_diff_renderer;				$diff = $renderer->render( $text_diff );				// If they're too different, don't include any <ins> or <dels>				if ( $diff_count = preg_match_all( '!(<ins>.*?</ins>|<del>.*?</del>)!', $diff, $diff_matches ) ) {					// length of all text between <ins> or <del>					$stripped_matches = strlen(strip_tags( join(' ', $diff_matches[0]) ));					// since we count lengith of text between <ins> or <del> (instead of picking just one),					//	we double the length of chars not in those tags.					$stripped_diff = strlen(strip_tags( $diff )) * 2 - $stripped_matches;					$diff_ratio = $stripped_matches / $stripped_diff;					if ( $diff_ratio > $this->_diff_threshold )						continue; // Too different.  Don't save diffs.				}				// Un-inline the diffs by removing del or ins				$orig_diffs[$o]  = preg_replace( '|<ins>.*?</ins>|', '', $diff );				$final_diffs[$f] = preg_replace( '|<del>.*?</del>|', '', $diff );			}		}		foreach ( array_keys($orig_rows) as $row ) {			// Both columns have blanks.  Ignore them.			if ( $orig_rows[$row] < 0 && $final_rows[$row] < 0 )				continue;			// If we have a word based diff, use it.  Otherwise, use the normal line.			if ( isset( $orig_diffs[$orig_rows[$row]] ) )				$orig_line = $orig_diffs[$orig_rows[$row]];			elseif ( isset( $orig[$orig_rows[$row]] ) )				$orig_line = htmlspecialchars($orig[$orig_rows[$row]]);			else				$orig_line = '';			if ( isset( $final_diffs[$final_rows[$row]] ) )				$final_line = $final_diffs[$final_rows[$row]];			elseif ( isset( $final[$final_rows[$row]] ) )				$final_line = htmlspecialchars($final[$final_rows[$row]]);			else				$final_line = '';			if ( $orig_rows[$row] < 0 ) { // Orig is blank.  This is really an added row.				$r .= $this->_added( array($final_line), false );			} elseif ( $final_rows[$row] < 0 ) { // Final is blank.  This is really a deleted row.				$r .= $this->_deleted( array($orig_line), false );			} else { // A true changed row.				$r .= '<tr>' . $this->deletedLine( $orig_line ) . $this->addedLine( $final_line ) . "</tr>\n";			}		}		return $r;	}	/**	 * Takes changed blocks and matches which rows in orig turned into which rows in final.	 *	 * Returns	 *	*_matches ( which rows match with which )	 *	*_rows ( order of rows in each column interleaved with blank rows as	 *		necessary )	 *	 * @since 2.6.0	 *	 * @param unknown_type $orig	 * @param unknown_type $final	 * @return unknown	 */	function interleave_changed_lines( $orig, $final ) {		// Contains all pairwise string comparisons.  Keys are such that this need only be a one dimensional array.		$matches = array();		foreach ( array_keys($orig) as $o ) {			foreach ( array_keys($final) as $f ) {				$matches["$o,$f"] = $this->compute_string_distance( $orig[$o], $final[$f] );			}		}		asort($matches); // Order by string distance.		$orig_matches  = array();		$final_matches = array();		foreach ( $matches as $keys => $difference ) {			list($o, $f) = explode(',', $keys);			$o = (int) $o;			$f = (int) $f;			// Already have better matches for these guys			if ( isset($orig_matches[$o]) && isset($final_matches[$f]) )				continue;			// First match for these guys.  Must be best match			if ( !isset($orig_matches[$o]) && !isset($final_matches[$f]) ) {				$orig_matches[$o] = $f;				$final_matches[$f] = $o;				continue;			}			// Best match of this final is already taken?  Must mean this final is a new row.			if ( isset($orig_matches[$o]) )				$final_matches[$f] = 'x';			// Best match of this orig is already taken?  Must mean this orig is a deleted row.			elseif ( isset($final_matches[$f]) )				$orig_matches[$o] = 'x';		}		// We read the text in this order		ksort($orig_matches);		ksort($final_matches);		// Stores rows and blanks for each column.		$orig_rows = $orig_rows_copy = array_keys($orig_matches);		$final_rows = array_keys($final_matches);		// Interleaves rows with blanks to keep matches aligned.		// We may end up with some extraneous blank rows, but we'll just ignore them later.		foreach ( $orig_rows_copy as $orig_row ) {			$final_pos = array_search($orig_matches[$orig_row], $final_rows, true);			$orig_pos = (int) array_search($orig_row, $orig_rows, true);			if ( false === $final_pos ) { // This orig is paired with a blank final.				array_splice( $final_rows, $orig_pos, 0, -1 );			} elseif ( $final_pos < $orig_pos ) { // This orig's match is up a ways.  Pad final with blank rows.				$diff_pos = $final_pos - $orig_pos;				while ( $diff_pos < 0 )					array_splice( $final_rows, $orig_pos, 0, $diff_pos++ );			} elseif ( $final_pos > $orig_pos ) { // This orig's match is down a ways.  Pad orig with blank rows.				$diff_pos = $orig_pos - $final_pos;				while ( $diff_pos < 0 )					array_splice( $orig_rows, $orig_pos, 0, $diff_pos++ );			}		}		// Pad the ends with blank rows if the columns aren't the same length		$diff_count = count($orig_rows) - count($final_rows);		if ( $diff_count < 0 ) {			while ( $diff_count < 0 )				array_push($orig_rows, $diff_count++);		} elseif ( $diff_count > 0 ) {			$diff_count = -1 * $diff_count;			while ( $diff_count < 0 )				array_push($final_rows, $diff_count++);		}		return array($orig_matches, $final_matches, $orig_rows, $final_rows);/*		// Debug		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Orig -> Final --";		foreach ( $orig_matches as $o => $f ) {			echo "\n\n\n\n\n";			echo "ORIG: $o, FINAL: $f\n";			var_dump($orig[$o],$final[$f]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Matches: Final -> Orig --";		foreach ( $final_matches as $f => $o ) {			echo "\n\n\n\n\n";			echo "FINAL: $f, ORIG: $o\n";			var_dump($final[$f],$orig[$o]);		}		echo "\n\n\n\n\n";		echo "-- DEBUG Rows: Orig -- Final --";		echo "\n\n\n\n\n";		foreach ( $orig_rows as $row => $o ) {			if ( $o < 0 )				$o = 'X';			$f = $final_rows[$row];			if ( $f < 0 )				$f = 'X';			echo "$o -- $f\n";		}		echo "\n\n\n\n\n";		echo "-- END DEBUG --";		echo "\n\n\n\n\n";		return array($orig_matches, $final_matches, $orig_rows, $final_rows);*/	}	/**	 * Computes a number that is intended to reflect the "distance" between two strings.	 *	 * @since 2.6.0	 *	 * @param string $string1	 * @param string $string2	 * @return int	 */	function compute_string_distance( $string1, $string2 ) {		// Vectors containing character frequency for all chars in each string		$chars1 = count_chars($string1);		$chars2 = count_chars($string2);		// L1-norm of difference vector.		$difference = array_sum( array_map( array(&$this, 'difference'), $chars1, $chars2 ) );		// $string1 has zero length? Odd.  Give huge penalty by not dividing.		if ( !$string1 )			return $difference;		// Return distance per charcter (of string1)		return $difference / strlen($string1);	}	/**	 * @ignore	 * @since 2.6.0	 *	 * @param int $a	 * @param int $b	 * @return int	 */	function difference( $a, $b ) {		return abs( $a - $b );	}}/** * Better word splitting than the PEAR package provides. * * @since 2.6.0 * @uses Text_Diff_Renderer_inline Extends */class WP_Text_Diff_Renderer_inline extends Text_Diff_Renderer_inline {	/**	 * @ignore	 * @since 2.6.0	 *	 * @param string $string	 * @param string $newlineEscape	 * @return string	 */	function _splitOnWords($string, $newlineEscape = "\n") {		$string = str_replace("\0", '', $string);		$words  = preg_split( '/([^\w])/u', $string, -1, PREG_SPLIT_DELIM_CAPTURE );		$words  = str_replace( "\n", $newlineEscape, $words );		return $words;	}}?>
<?php/** * Press This Display and Handler. * * @package WordPress * @subpackage Press_This *//** WordPress Administration Bootstrap */require_once('./admin.php');header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! current_user_can('edit_posts') )	wp_die( __( 'Cheatin&#8217; uh?' ) );/** * Press It form handler. * * @package WordPress * @subpackage Press_This * @since 2.6.0 * * @return int Post ID */function press_it() {	// define some basic variables	$quick['post_status'] = 'draft'; // set as draft first	$quick['post_category'] = isset($_POST['post_category']) ? $_POST['post_category'] : null;	$quick['tax_input'] = isset($_POST['tax_input']) ? $_POST['tax_input'] : null;	$quick['post_title'] = ( trim($_POST['title']) != '' ) ? $_POST['title'] : '  ';	$quick['post_content'] = isset($_POST['post_content']) ? $_POST['post_content'] : '';	// insert the post with nothing in it, to get an ID	$post_ID = wp_insert_post($quick, true);	if ( is_wp_error($post_ID) )		wp_die($post_ID);	$content = isset($_POST['content']) ? $_POST['content'] : '';	$upload = false;	if ( !empty($_POST['photo_src']) && current_user_can('upload_files') ) {		foreach( (array) $_POST['photo_src'] as $key => $image) {			// see if files exist in content - we don't want to upload non-used selected files.			if ( strpos($_POST['content'], htmlspecialchars($image)) !== false ) {				$desc = isset($_POST['photo_description'][$key]) ? $_POST['photo_description'][$key] : '';				$upload = media_sideload_image($image, $post_ID, $desc);				// Replace the POSTED content <img> with correct uploaded ones. Regex contains fix for Magic Quotes				if ( !is_wp_error($upload) )					$content = preg_replace('/<img ([^>]*)src=\\\?(\"|\')'.preg_quote(htmlspecialchars($image), '/').'\\\?(\2)([^>\/]*)\/*>/is', $upload, $content);			}		}	}	// set the post_content and status	$quick['post_status'] = isset($_POST['publish']) ? 'publish' : 'draft';	$quick['post_content'] = $content;	// error handling for media_sideload	if ( is_wp_error($upload) ) {		wp_delete_post($post_ID);		wp_die($upload);	} else {		$quick['ID'] = $post_ID;		wp_update_post($quick);	}	return $post_ID;}// For submitted posts.if ( isset($_REQUEST['action']) && 'post' == $_REQUEST['action'] ) {	check_admin_referer('press-this');	$post_ID = press_it();	$posted =  $post_ID;} else {	$post_ID = 0;}// Set Variables$title = isset( $_GET['t'] ) ? trim( strip_tags( html_entity_decode( stripslashes( $_GET['t'] ) , ENT_QUOTES) ) ) : '';$selection = '';if ( !empty($_GET['s']) ) {	$selection = str_replace('&apos;', "'", stripslashes($_GET['s']));	$selection = trim( htmlspecialchars( html_entity_decode($selection, ENT_QUOTES) ) );}if ( ! empty($selection) ) {	$selection = preg_replace('/(\r?\n|\r)/', '</p><p>', $selection);	$selection = '<p>' . str_replace('<p></p>', '', $selection) . '</p>';}$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';$image = isset($_GET['i']) ? $_GET['i'] : '';if ( !empty($_REQUEST['ajax']) ) {	switch ($_REQUEST['ajax']) {		case 'video': ?>			<script type="text/javascript" charset="utf-8">			/* <![CDATA[ */				jQuery('.select').click(function() {					append_editor(jQuery('#embed-code').val());					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});				jQuery('.close').click(function() {					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});			/* ]]> */			</script>			<div class="postbox">				<h2><label for="embed-code"><?php _e('Embed Code') ?></label></h2>				<div class="inside">					<textarea name="embed-code" id="embed-code" rows="8" cols="40"><?php echo wp_htmledit_pre( $selection ); ?></textarea>					<p id="options"><a href="#" class="select button"><?php _e('Insert Video'); ?></a> <a href="#" class="close button"><?php _e('Cancel'); ?></a></p>				</div>			</div>			<?php break;		case 'photo_thickbox': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo_description"><?php _e('Description') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p class="centered">				<input type="hidden" name="this_photo" value="<?php echo esc_attr($image); ?>" id="this_photo" />				<a href="#" class="select">					<img src="<?php echo esc_url($image); ?>" alt="<?php echo esc_attr(__('Click to insert.')); ?>" title="<?php echo esc_attr(__('Click to insert.')); ?>" />				</a>			</p>			<p id="options"><a href="#" class="select button"><?php _e('Insert Image'); ?></a> <a href="#" class="cancel button"><?php _e('Cancel'); ?></a></p>			<?php break;		case 'photo_thickbox_url': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo"><?php _e('URL') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo" name="this_photo" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" />				</div>			</div>			<h3 class="tb"><label for="photo_description"><?php _e('Description') ?></label></h3>			<div id="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p id="options"><a href="#" class="select"><?php _e('Insert Image'); ?></a> | <a href="#" class="cancel"><?php _e('Cancel'); ?></a></p>			<?php break;	case 'photo_images':		/**		 * Retrieve all image URLs from given URI.		 *		 * @package WordPress		 * @subpackage Press_This		 * @since 2.6.0		 *		 * @param string $uri		 * @return string		 */		function get_images_from_uri($uri) {			$uri = preg_replace('/\/#.+?$/','', $uri);			if ( preg_match('/\.(jpg|jpe|jpeg|png|gif)$/', $uri) && !strpos($uri,'blogger.com') )				return "'" . esc_attr( html_entity_decode($uri) ) . "'";			$content = wp_remote_fopen($uri);			if ( false === $content )				return '';			$host = parse_url($uri);			$pattern = '/<img ([^>]*)src=(\"|\')([^<>\'\"]+)(\2)([^>]*)\/*>/i';			$content = str_replace(array("\n","\t","\r"), '', $content);			preg_match_all($pattern, $content, $matches);			if ( empty($matches[0]) )				return '';			$sources = array();			foreach ($matches[3] as $src) {				// if no http in url				if (strpos($src, 'http') === false)					// if it doesn't have a relative uri					if ( strpos($src, '../') === false && strpos($src, './') === false && strpos($src, '/') === 0)						$src = 'http://'.str_replace('//','/', $host['host'].'/'.$src);					else						$src = 'http://'.str_replace('//','/', $host['host'].'/'.dirname($host['path']).'/'.$src);				$sources[] = esc_attr($src);			}			return "'" . implode("','", $sources) . "'";		}		$url = wp_kses(urldecode($url), null);		echo 'new Array('.get_images_from_uri($url).')';		break;	case 'photo_js': ?>		// gather images and load some default JS		var last = null		var img, img_tag, aspect, w, h, skip, i, strtoappend = "";		if(photostorage == false) {		var my_src = eval(			jQuery.ajax({		   		type: "GET",		   		url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",				cache : false,				async : false,		   		data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",				dataType : "script"			}).responseText		);		if(my_src.length == 0) {			var my_src = eval(				jQuery.ajax({		   			type: "GET",		   			url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",					cache : false,					async : false,		   			data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",					dataType : "script"				}).responseText			);			if(my_src.length == 0) {				strtoappend = '<?php _e('Unable to retrieve images or no images on page.'); ?>';			}		}		}		for (i = 0; i < my_src.length; i++) {			img = new Image();			img.src = my_src[i];			img_attr = 'id="img' + i + '"';			skip = false;			maybeappend = '<a href="?ajax=photo_thickbox&amp;i=' + encodeURIComponent(img.src) + '&amp;u=<?php echo urlencode($url); ?>&amp;height=400&amp;width=500" title="" class="thickbox"><img src="' + img.src + '" ' + img_attr + '/></a>';			if (img.width && img.height) {				if (img.width >= 30 && img.height >= 30) {					aspect = img.width / img.height;					scale = (aspect > 1) ? (71 / img.width) : (71 / img.height);					w = img.width;					h = img.height;					if (scale < 1) {						w = parseInt(img.width * scale);						h = parseInt(img.height * scale);					}					img_attr += ' style="width: ' + w + 'px; height: ' + h + 'px;"';					strtoappend += maybeappend;				}			} else {				strtoappend += maybeappend;			}		}		function pick(img, desc) {			if (img) {				if('object' == typeof jQuery('.photolist input') && jQuery('.photolist input').length != 0) length = jQuery('.photolist input').length;				if(length == 0) length = 1;				jQuery('.photolist').append('<input name="photo_src[' + length + ']" value="' + img +'" type="hidden"/>');				jQuery('.photolist').append('<input name="photo_description[' + length + ']" value="' + desc +'" type="hidden"/>');				insert_editor( "\n\n" + encodeURI('<p style="text-align: center;"><a href="<?php echo $url; ?>"><img src="' + img +'" alt="' + desc + '" /></a></p>'));			}			return false;		}		function image_selector() {			tb_remove();			desc = jQuery('#this_photo_description').val();			src = jQuery('#this_photo').val();			pick(src, desc);			jQuery('#extra-fields').hide();			jQuery('#extra-fields').html('');			return false;		}			jQuery('#extra-fields').html('<div class="postbox"><h2>Add Photos <small id="photo_directions">(<?php _e("click images to select") ?>)</small></h2><ul class="actions"><li><a href="#" id="photo-add-url" class="thickbox button"><?php _e("Add from URL") ?> +</a></li></ul><div class="inside"><div class="titlewrap"><div id="img_container"></div></div><p id="options"><a href="#" class="close button"><?php _e('Cancel'); ?></a><a href="#" class="refresh button"><?php _e('Refresh'); ?></a></p></div>');			jQuery('#img_container').html(strtoappend);		<?php break;}die;}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<title><?php _e('Press This') ?></title><?php	add_thickbox();	wp_enqueue_style( 'press-this' );	wp_enqueue_style( 'press-this-ie');	wp_enqueue_style( 'colors' );	wp_enqueue_script( 'post' );	wp_enqueue_script( 'editor' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time() ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'press-this';var photostorage = false;//]]></script><?php	do_action('admin_print_styles');	do_action('admin_print_scripts');	do_action('admin_head');	if ( user_can_richedit() )		wp_tiny_mce( true, array( 'height' => '370' ) );?>	<script type="text/javascript">	function insert_plain_editor(text) {		edCanvas = document.getElementById('content');		edInsertContent(edCanvas, text);	}	function set_editor(text) {		if ( '' == text || '<p></p>' == text ) text = '<p><br /></p>';		if ( tinyMCE.activeEditor ) tinyMCE.execCommand('mceSetContent', false, text);	}	function insert_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceInsertContent', false, '<p>' + decodeURI(tinymce.DOM.decode(text)) + '</p>', {format : 'raw'});		} else {			insert_plain_editor(decodeURI(text));		}	}	function append_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceSetContent', false, tinyMCE.activeEditor.getContent({format : 'raw'}) + '<p>' + text + '</p>');			tinyMCE.execCommand('mceCleanup');		} else {			insert_plain_editor(text);		}	}	function show(tab_name) {		jQuery('#extra-fields').html('');		switch(tab_name) {			case 'video' :				jQuery('#extra-fields').load('<?php echo esc_url($_SERVER['PHP_SELF']); ?>', { ajax: 'video', s: '<?php echo esc_attr($selection); ?>'}, function() {					<?php					$content = '';					if ( preg_match("/youtube\.com\/watch/i", $url) ) {						list($domain, $video_id) = split("v=", $url);						$video_id = esc_attr($video_id);						$content = '<object width="425" height="350"><param name="movie" value="http://www.youtube.com/v/' . $video_id . '"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/' . $video_id . '" type="application/x-shockwave-flash" wmode="transparent" width="425" height="350"></embed></object>';					} elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) {						list($domain, $video_id) = split(".com/", $url);						$video_id = esc_attr($video_id);						$content = '<object width="400" height="225"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />	<embed src="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="225"></embed></object>';						if ( trim($selection) == '' )							$selection = '<p><a href="http://www.vimeo.com/' . $video_id . '?pg=embed&sec=' . $video_id . '">' . $title . '</a> on <a href="http://vimeo.com?pg=embed&sec=' . $video_id . '">Vimeo</a></p>';					} elseif ( strpos( $selection, '<object' ) !== false ) {						$content = $selection;					}					?>					jQuery('#embed-code').prepend('<?php echo htmlentities($content); ?>');				});				jQuery('#extra-fields').show();				return false;				break;			case 'photo' :				function setup_photo_actions() {					jQuery('.close').click(function() {						jQuery('#extra-fields').hide();						jQuery('#extra-fields').html('');					});					jQuery('.refresh').click(function() {						photostorage = false;						show('photo');					});					jQuery('#photo-add-url').attr('href', '?ajax=photo_thickbox_url&height=200&width=500');					tb_init('#extra-fields .thickbox');					jQuery('#waiting').hide();					jQuery('#extra-fields').show();				}				jQuery('#extra-fields').before('<div id="waiting"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /> <?php echo esc_js( __( 'Loading...' ) ); ?></div>');				if(photostorage == false) {					jQuery.ajax({						type: "GET",						cache : false,						url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",						data: "ajax=photo_js&u=<?php echo urlencode($url)?>",						dataType : "script",						success : function(data) {							eval(data);							photostorage = jQuery('#extra-fields').html();							setup_photo_actions();						}					});				} else {					jQuery('#extra-fields').html(photostorage);					setup_photo_actions();				}				return false;				break;		}	}	jQuery(document).ready(function($) {		//resize screen		window.resizeTo(720,540);		// set button actions    	jQuery('#photo_button').click(function() { show('photo'); return false; });		jQuery('#video_button').click(function() { show('video'); return false; });		// auto select		<?php if ( preg_match("/youtube\.com\/watch/i", $url) ) { ?>			show('video');		<?php } elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) { ?>			show('video');		<?php  } elseif ( preg_match("/flickr\.com/i", $url) ) { ?>			show('photo');		<?php } ?>		jQuery('#title').unbind();		jQuery('#publish, #save').click(function() { jQuery('#saving').css('display', 'inline'); });		$('#tagsdiv-post_tag, #categorydiv').children('h3, .handlediv').click(function(){			$(this).siblings('.inside').toggle();		});	});</script></head><body class="press-this wp-admin"><div id="wphead"></div><form action="press-this.php?action=post" method="post"><div id="poststuff" class="metabox-holder">	<div id="side-info-column">		<div class="sleeve">			<h1 id="viewsite"><a href="<?php echo get_option('home'); ?>/" target="_blank"><?php bloginfo('name'); ?> &rsaquo; <?php _e('Press This') ?></a></span></h1>			<?php wp_nonce_field('press-this') ?>			<input type="hidden" name="post_type" id="post_type" value="text"/>			<input type="hidden" name="autosave" id="autosave" />			<input type="hidden" id="original_post_status" name="original_post_status" value="draft" />			<input type="hidden" id="prev_status" name="prev_status" value="draft" />			<!-- This div holds the photo metadata -->			<div class="photolist"></div>			<div id="submitdiv" class="stuffbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><?php _e('Publish') ?></h3>				<div class="inside">					<p>						<input class="button" type="submit" name="draft" value="<?php esc_attr_e('Save Draft') ?>" id="save" />						<?php if ( current_user_can('publish_posts') ) { ?>							<input class="button-primary" type="submit" name="publish" value="<?php esc_attr_e('Publish') ?>" id="publish" />						<?php } else { ?>							<br /><br /><input class="button-primary" type="submit" name="review" value="<?php esc_attr_e('Submit for Review') ?>" id="review" />						<?php } ?>						<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" id="saving" style="display:none;" />					</p>				</div>			</div>			<?php $tax = get_taxonomy( 'category' ); ?>			<div id="categorydiv" class="postbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>"><br /></div>				<h3 class="hndle"><?php _e('Categories') ?></h3>				<div class="inside">				<div id="taxonomy-category" class="categorydiv">					<ul id="category-tabs" class="category-tabs">						<li class="tabs"><a href="#category-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>						<li class="hide-if-no-js"><a href="#category-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>					</ul>					<div id="category-pop" class="tabs-panel" style="display: none;">						<ul id="categorychecklist-pop" class="categorychecklist form-no-clear" >							<?php $popular_ids = wp_popular_terms_checklist( 'category' ); ?>						</ul>					</div>					<div id="category-all" class="tabs-panel">						<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">							<?php wp_terms_checklist($post_ID, array( 'taxonomy' => 'category', 'popular_cats' => $popular_ids ) ) ?>						</ul>					</div>					<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>					<p><em><?php _e('You cannot modify this Taxonomy.'); ?></em></p>					<?php endif; ?>					<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>						<div id="category-adder" class="wp-hidden-children">							<h4>								<a id="category-add-toggle" href="#category-add" class="hide-if-no-js" tabindex="3">									<?php printf( __( '+ %s' ), $tax->labels->add_new_item ); ?>								</a>							</h4>							<p id="category-add" class="category-add wp-hidden-child">								<label class="screen-reader-text" for="newcategory"><?php echo $tax->labels->add_new_item; ?></label>								<input type="text" name="newcategory" id="newcategory" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>								<label class="screen-reader-text" for="newcategory_parent">									<?php echo $tax->labels->parent_item_colon; ?>								</label>								<?php wp_dropdown_categories( array( 'taxonomy' => 'category', 'hide_empty' => 0, 'name' => 'newcategory_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>								<input type="button" id="category-add-submit" class="add:categorychecklist:category-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />								<?php wp_nonce_field( 'add-category', '_ajax_nonce', false ); ?>								<span id="category-ajax-response"></span>							</p>						</div>					<?php endif; ?>				</div>				</div>			</div>			<div id="tagsdiv-post_tag" class="stuffbox" >				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><span><?php _e('Post Tags'); ?></span></h3>				<div class="inside">					<div class="tagsdiv" id="post_tag">						<p class="jaxtag">							<label class="screen-reader-text" for="newtag"><?php _e('Post Tags'); ?></label>							<input type="hidden" name="tax_input[post_tag]" class="the-tags" id="tax-input[post_tag]" value="" />							<div class="ajaxtag">								<input type="text" name="newtag[post_tag]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />								<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" />							</div>						</p>						<div class="tagchecklist"></div>					</div>					<p class="tagcloud-link"><a href="#titlediv" class="tagcloud-link" id="link-post_tag"><?php _e('Choose from the most used tags in Post Tags'); ?></a></p>				</div>			</div>		</div>	</div>	<div class="posting">		<?php if ( isset($posted) && intval($posted) ) { $post_ID = intval($posted); ?>		<div id="message" class="updated"><p><strong><?php _e('Your post has been saved.'); ?></strong> <a onclick="window.opener.location.replace(this.href); window.close();" href="<?php echo get_permalink( $post_ID); ?>"><?php _e('View post'); ?></a> | <a href="<?php echo get_edit_post_link( $post_ID ); ?>" onclick="window.opener.location.replace(this.href); window.close();"><?php _e('Edit Post'); ?></a> | <a href="#" onclick="window.close();"><?php _e('Close Window'); ?></a></p></div>		<?php } ?>		<div id="titlediv">			<div class="titlewrap">				<input name="title" id="title" class="text" value="<?php echo esc_attr($title);?>"/>			</div>		</div>		<div id="extra-fields" style="display: none"></div>		<div class="postdivrich">			<ul id="actions" class="actions">				<li id="photo_button">					Add: <?php if ( current_user_can('upload_files') ) { ?><a title="<?php _e('Insert an Image'); ?>" href="#"><img alt="<?php _e('Insert an Image'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-image.gif?ver=20100531' ) ); ?>"/></a>					<?php } ?>				</li>				<li id="video_button">					<a title="<?php _e('Embed a Video'); ?>" href="#"><img alt="<?php _e('Embed a Video'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-video.gif?ver=20100531' ) ); ?>"/></a>				</li>				<?php if ( user_can_richedit() ) { ?>				<li id="switcher">					<?php wp_print_scripts( 'quicktags' ); ?>					<?php add_filter('the_editor_content', 'wp_richedit_pre'); ?>					<a id="edButtonHTML" onclick="switchEditors.go('content', 'html');"><?php _e('HTML'); ?></a>					<a id="edButtonPreview" class="active" onclick="switchEditors.go('content', 'tinymce');"><?php _e('Visual'); ?></a>					<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('content')" /></div>				</li>				<?php } ?>			</ul>			<div id="quicktags"></div>			<div class="editor-container">				<textarea name="content" id="content" style="width:100%;" class="theEditor" rows="15"><?php					if ( $selection )						echo wp_richedit_pre($selection);					if ( $url ) {						echo '<p>';						if ( $selection )							_e('via ');						printf( "<a href='%s'>%s</a>.</p>", esc_url( $url ), esc_html( $title ) );					}				?></textarea>			</div>		</div>	</div></div></form><?php do_action('admin_print_footer_scripts'); ?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * Deprecated multisite admin functions from past WordPress versions and WordPress MU. * You shouldn't use these functions and look for the alternatives instead. The functions * will be removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//** * @deprecated 3.0.0 */function wpmu_menu() {	_deprecated_function(__FUNCTION__, '3.0' );	// deprecated. See #11763}/**  * Determines if the available space defined by the admin has been exceeded by the user.  *  * @deprecated 3.0.0  * @see is_upload_space_available() */function wpmu_checkAvailableSpace() {	_deprecated_function(__FUNCTION__, '3.0', 'is_upload_space_available()' );	if ( !is_upload_space_available() )		wp_die( __('Sorry, you must delete files before you can upload any more.') );}/** * @deprecated 3.0.0 */function mu_options( $options ) {	_deprecated_function(__FUNCTION__, '3.0' );	return $options;}/** * @deprecated 3.0.0 * @see activate_plugin() */function activate_sitewide_plugin() {	_deprecated_function(__FUNCTION__, '3.0', 'activate_plugin()' );	return false;}/** * @deprecated 3.0.0 * @see deactivate_sitewide_plugin() */function deactivate_sitewide_plugin( $plugin = false ) {	_deprecated_function(__FUNCTION__, '3.0', 'deactivate_plugin()' );	return;}/** * @deprecated 3.0.0 * @see is_network_only_plugin() */function is_wpmu_sitewide_plugin( $file ) {	_deprecated_function(__FUNCTION__, '3.0', 'is_network_only_plugin()' );	return is_network_only_plugin( $file );}?>
<?php/** * BackPress script procedural API. * * @package BackPress * @since r16 *//** * Prints script tags in document head. * * Called by admin-header.php and by wp_head hook. Since it is called by wp_head * on every page load, the function does not instantiate the WP_Scripts object * unless script names are explicitly passed. Does make use of already * instantiated $wp_scripts if present. Use provided wp_print_scripts hook to * register/enqueue new scripts. * * @since r16 * @see WP_Dependencies::print_scripts() */function wp_print_scripts( $handles = false ) {	do_action( 'wp_print_scripts' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_scripts = new WP_Scripts();	}	return $wp_scripts->do_items( $handles );}/** * Register new JavaScript file. * * @since r16 * @param string $handle Script name * @param string $src Script url * @param array $deps (optional) Array of script names on which this script depends * @param string|bool $ver (optional) Script version (used for cache busting), set to NULL to disable * @param bool (optional) Wether to enqueue the script before </head> or before </body> * @return null */function wp_register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->add( $handle, $src, $deps, $ver );	if ( $in_footer )		$wp_scripts->add_data( $handle, 'group', 1 );}/** * Localizes a script. * * Localizes only if script has already been added. * * @since r16 * @see WP_Scripts::localize() */function wp_localize_script( $handle, $object_name, $l10n ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		return false;	return $wp_scripts->localize( $handle, $object_name, $l10n );}/** * Remove a registered script. * * @since r16 * @see WP_Scripts::remove() For parameter information. */function wp_deregister_script( $handle ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$wp_scripts->remove( $handle );}/** * Enqueues script. * * Registers the script if src provided (does NOT overwrite) and enqueues. * * @since r16 * @see wp_register_script() For parameter information. */function wp_enqueue_script( $handle, $src = false, $deps = array(), $ver = false, $in_footer = false ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_scripts->add( $_handle[0], $src, $deps, $ver );		if ( $in_footer )			$wp_scripts->add_data( $_handle[0], 'group', 1 );	}	$wp_scripts->enqueue( $handle );}/** * Check whether script has been added to WordPress Scripts. * * The values for list defaults to 'queue', which is the same as enqueue for * scripts. * * @since WP unknown; BP unknown * * @param string $handle Handle used to add script. * @param string $list Optional, defaults to 'queue'. Others values are 'registered', 'queue', 'done', 'to_do' * @return bool */function wp_script_is( $handle, $list = 'queue' ) {	global $wp_scripts;	if ( !is_a($wp_scripts, 'WP_Scripts') )		$wp_scripts = new WP_Scripts();	$query = $wp_scripts->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * Revisions administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script('list-revisions');wp_reset_vars(array('revision', 'left', 'right', 'action'));$revision_id = absint($revision);$left        = absint($left);$right       = absint($right);$redirect = 'edit.php';switch ( $action ) :case 'restore' :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !current_user_can( 'edit_post', $revision->post_parent ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	check_admin_referer( "restore-post_$post->ID|$revision->ID" );	wp_restore_post_revision( $revision->ID );	$redirect = add_query_arg( array( 'message' => 5, 'revision' => $revision->ID ), get_edit_post_link( $post->ID, 'url' ) );	break;case 'diff' :	if ( !$left_revision  = get_post( $left ) )		break;	if ( !$right_revision = get_post( $right ) )		break;	if ( !current_user_can( 'read_post', $left_revision->ID ) || !current_user_can( 'read_post', $right_revision->ID ) )		break;	// If we're comparing a revision to itself, redirect to the 'view' page for that revision or the edit page for that post	if ( $left_revision->ID == $right_revision->ID ) {		$redirect = get_edit_post_link( $left_revision->ID );		include( './js/revisions-js.php' );		break;	}	// Don't allow reverse diffs?	if ( strtotime($right_revision->post_modified_gmt) < strtotime($left_revision->post_modified_gmt) ) {		$redirect = add_query_arg( array( 'left' => $right, 'right' => $left ) );		break;	}	if ( $left_revision->ID == $right_revision->post_parent ) // right is a revision of left		$post =& $left_revision;	elseif ( $left_revision->post_parent == $right_revision->ID ) // left is a revision of right		$post =& $right_revision;	elseif ( $left_revision->post_parent == $right_revision->post_parent ) // both are revisions of common parent		$post = get_post( $left_revision->post_parent );	else		break; // Don't diff two unrelated revisions	if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) { // Revisions disabled		if (			// we're not looking at an autosave			( !wp_is_post_autosave( $left_revision ) && !wp_is_post_autosave( $right_revision ) )		||			// we're not comparing an autosave to the current post			( $post->ID !== $left_revision->ID && $post->ID !== $right_revision->ID )		) {			$redirect = 'edit.php?post_type=' . $post->post_type;			break;		}	}	if (		// They're the same		$left_revision->ID == $right_revision->ID	||		// Neither is a revision		( !wp_get_post_revision( $left_revision->ID ) && !wp_get_post_revision( $right_revision->ID ) )	)		break;	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$h2 = sprintf( __( 'Compare Revisions of &#8220;%1$s&#8221;' ), $post_title );	$title = __( 'Revisions' );	$left  = $left_revision->ID;	$right = $right_revision->ID;	$redirect = false;	break;case 'view' :default :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	if ( !current_user_can( 'read_post', $revision->ID ) || !current_user_can( 'read_post', $post->ID ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$revision_title = wp_post_revision_title( $revision, false );	$h2 = sprintf( __( 'Revision for &#8220;%1$s&#8221; created on %2$s' ), $post_title, $revision_title );	$title = __( 'Revisions' );	// Sets up the diff radio buttons	$left  = $revision->ID;	$right = $post->ID;	$redirect = false;	break;endswitch;// Empty post_type means either malformed object found, or no valid parent was found.if ( !$redirect && empty($post->post_type) )	$redirect = 'edit.php';if ( !empty($redirect) ) {	wp_redirect( $redirect );	exit;}// This is so that the correct "Edit" menu item is selected.if ( !empty($post->post_type) && 'post' != $post->post_type )	$parent_file = $submenu_file = 'edit.php?post_type=' . $post->post_type;else	$parent_file = $submenu_file = 'edit.php';require_once( './admin-header.php' );?><div class="wrap"><h2 class="long-header"><?php echo $h2; ?></h2><table class="form-table ie-fixed">	<col class="th" /><?php if ( 'diff' == $action ) : ?><tr id="revision">	<th scope="row"></th>	<th scope="col" class="th-full">		<span class="alignleft"><?php printf( __('Older: %s'), wp_post_revision_title( $left_revision ) ); ?></span>		<span class="alignright"><?php printf( __('Newer: %s'), wp_post_revision_title( $right_revision ) ); ?></span>	</th></tr><?php endif;// use get_post_to_edit filters?$identical = true;foreach ( _wp_post_revision_fields() as $field => $field_title ) :	if ( 'diff' == $action ) {		$left_content = apply_filters( "_wp_post_revision_field_$field", $left_revision->$field, $field );		$right_content = apply_filters( "_wp_post_revision_field_$field", $right_revision->$field, $field );		if ( !$content = wp_text_diff( $left_content, $right_content ) )			continue; // There is no difference between left and right		$identical = false;	} else {		add_filter( "_wp_post_revision_field_$field", 'htmlspecialchars' );		$content = apply_filters( "_wp_post_revision_field_$field", $revision->$field, $field );	}	?>	<tr id="revision-field-<?php echo $field; ?>">		<th scope="row"><?php echo esc_html( $field_title ); ?></th>		<td><div class="pre"><?php echo $content; ?></div></td>	</tr>	<?phpendforeach;if ( 'diff' == $action && $identical ) :	?>	<tr><td colspan="2"><div class="updated"><p><?php _e( 'These revisions are identical.' ); ?></p></div></td></tr>	<?phpendif;?></table><br class="clear" /><h2><?php echo $title; ?></h2><?php$args = array( 'format' => 'form-table', 'parent' => true, 'right' => $right, 'left' => $left );if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') )	$args['type'] = 'autosave';wp_list_post_revisions( $post, $args );?></div><?phprequire_once( './admin-footer.php' );
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** The descriptions for theme files. */$wp_file_descriptions = array (	'index.php' => __( 'Main Index Template' ),	'style.css' => __( 'Stylesheet' ),	'editor-style.css' => __( 'Visual Editor Stylesheet' ),	'rtl.css' => __( 'RTL Stylesheet' ),	'comments.php' => __( 'Comments' ),	'comments-popup.php' => __( 'Popup Comments' ),	'footer.php' => __( 'Footer' ),	'header.php' => __( 'Header' ),	'sidebar.php' => __( 'Sidebar' ),	'archive.php' => __( 'Archives' ),	'author.php' => __( 'Author Template' ),	'tag.php' => __( 'Tag Template' ),	'category.php' => __( 'Category Template' ),	'page.php' => __( 'Page Template' ),	'search.php' => __( 'Search Results' ),	'searchform.php' => __( 'Search Form' ),	'single.php' => __( 'Single Post' ),	'404.php' => __( '404 Template' ),	'link.php' => __( 'Links Template' ),	'functions.php' => __( 'Theme Functions' ),	'attachment.php' => __( 'Attachment Template' ),	'image.php' => __('Image Attachment Template'),	'video.php' => __('Video Attachment Template'),	'audio.php' => __('Audio Attachment Template'),	'application.php' => __('Application Attachment Template'),	'my-hacks.php' => __( 'my-hacks.php (legacy hacks support)' ),	'.htaccess' => __( '.htaccess (for rewrite rules )' ),	// Deprecated files	'wp-layout.css' => __( 'Stylesheet' ), 'wp-comments.php' => __( 'Comments Template' ), 'wp-comments-popup.php' => __( 'Popup Comments Template' ));/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_file_description( $file ) {	global $wp_file_descriptions;	if ( isset( $wp_file_descriptions[basename( $file )] ) ) {		return $wp_file_descriptions[basename( $file )];	}	elseif ( file_exists( $file ) && is_file( $file ) ) {		$template_data = implode( '', file( $file ) );		if ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ))			return _cleanup_header_comment($name[1]) . ' Page Template';	}	return basename( $file );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_home_path() {	$home = get_option( 'home' );	$siteurl = get_option( 'siteurl' );	if ( $home != '' && $home != $siteurl ) {	        $wp_path_rel_to_home = str_replace($home, '', $siteurl); /* $siteurl - $home */	        $pos = strpos($_SERVER["SCRIPT_FILENAME"], $wp_path_rel_to_home);	        $home_path = substr($_SERVER["SCRIPT_FILENAME"], 0, $pos);		$home_path = trailingslashit( $home_path );	} else {		$home_path = ABSPATH;	}	return $home_path;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_real_file_to_edit( $file ) {	if ('index.php' == $file || '.htaccess' == $file ) {		$real_file = get_home_path() . $file;	} else {		$real_file = WP_CONTENT_DIR . $file;	}	return $real_file;}/** * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep. * The depth of the recursiveness can be controlled by the $levels param. * * @since 2.6.0 * * @param string $folder Full path to folder * @param int $levels (optional) Levels of folders to follow, Default: 100 (PHP Loop limit). * @return bool|array False on failure, Else array of files */function list_files( $folder = '', $levels = 100 ) {	if ( empty($folder) )		return false;	if ( ! $levels )		return false;	$files = array();	if ( $dir = @opendir( $folder ) ) {		while (($file = readdir( $dir ) ) !== false ) {			if ( in_array($file, array('.', '..') ) )				continue;			if ( is_dir( $folder . '/' . $file ) ) {				$files2 = list_files( $folder . '/' . $file, $levels - 1);				if ( $files2 )					$files = array_merge($files, $files2 );				else					$files[] = $folder . '/' . $file . '/';			} else {				$files[] = $folder . '/' . $file;			}		}	}	@closedir( $dir );	return $files;}/** * Determines a writable directory for temporary files. * Function's preference is to WP_CONTENT_DIR followed by the return value of <code>sys_get_temp_dir()</code>, before finally defaulting to /tmp/ * * In the event that this function does not find a writable location, It may be overridden by the <code>WP_TEMP_DIR</code> constant in your <code>wp-config.php</code> file. * * @since 2.5.0 * * @return string Writable temporary directory */function get_temp_dir() {	static $temp;	if ( defined('WP_TEMP_DIR') )		return trailingslashit(WP_TEMP_DIR);	if ( $temp )		return trailingslashit($temp);	$temp = WP_CONTENT_DIR . '/';	if ( is_dir($temp) && @is_writable($temp) )		return $temp;	if  ( function_exists('sys_get_temp_dir') ) {		$temp = sys_get_temp_dir();		if ( @is_writable($temp) )			return trailingslashit($temp);	}	$temp = ini_get('upload_tmp_dir');	if ( is_dir($temp) && @is_writable($temp) )		return trailingslashit($temp);	$temp = '/tmp/';	return $temp;}/** * Returns a filename of a Temporary unique file. * Please note that the calling function must unlink() this itself. * * The filename is based off the passed parameter or defaults to the current unix timestamp, * while the directory can either be passed as well, or by leaving  it blank, default to a writable temporary directory. * * @since 2.6.0 * * @param string $filename (optional) Filename to base the Unique file off * @param string $dir (optional) Directory to store the file in * @return string a writable filename */function wp_tempnam($filename = '', $dir = '') {	if ( empty($dir) )		$dir = get_temp_dir();	$filename = basename($filename);	if ( empty($filename) )		$filename = time();	$filename = preg_replace('|\..*$|', '.tmp', $filename);	$filename = $dir . wp_unique_filename($dir, $filename);	touch($filename);	return $filename;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $allowed_files * @return unknown */function validate_file_to_edit( $file, $allowed_files = '' ) {	$code = validate_file( $file, $allowed_files );	if (!$code )		return $file;	switch ( $code ) {		case 1 :			wp_die( __('Sorry, can&#8217;t edit files with &#8220;..&#8221; in the name. If you are trying to edit a file in your WordPress home directory, you can just type the name of the file in.' ));		//case 2 :		//	wp_die( __('Sorry, can&#8217;t call files with their real path.' ));		case 3 :			wp_die( __('Sorry, that file cannot be edited.' ));	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $file Reference to a single element of $_FILES. Call the function once for each uploaded file. * @param array $overrides Optional. An associative array of names=>values to override default variables with extract( $overrides, EXTR_OVERWRITE ). * @return array On success, returns an associative array of file attributes. On failure, returns $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ). */function wp_handle_upload( &$file, $overrides = false, $time = null ) {	// The default error handler.	if ( ! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	$file = apply_filters( 'wp_handle_upload_prefilter', $file );	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may have had one or more 'wp_handle_upload_prefilter' functions error out the file.  Handle that gracefully.	if ( isset( $file['error'] ) && !is_numeric( $file['error'] ) && $file['error'] )		return $upload_error_handler( $file, $file['error'] );	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_upload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	$test_upload = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return call_user_func($upload_error_handler, $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( $file['error'] > 0 )		return call_user_func($upload_error_handler, $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !($file['size'] > 0 ) ) {		if ( is_multisite() )			$error_msg = __( 'File is empty. Please upload something more substantial.' );		else			$error_msg = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return call_user_func($upload_error_handler, $file, $error_msg);	}	// A properly uploaded file will pass this test. There should be no reason to override this one.	if ( $test_upload && ! @ is_uploaded_file( $file['tmp_name'] ) )		return call_user_func($upload_error_handler, $file, __( 'Specified file failed upload test.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return call_user_func($upload_error_handler, $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	} else {		$type = '';	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir($time) ) && false === $uploads['error'] ) )		return call_user_func($upload_error_handler, $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ move_uploaded_file( $file['tmp_name'], $new_file ) )		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	return apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'upload' );}/** * {@internal Missing Short Description}} * * Pass this function an array similar to that of a $_FILES POST array. * * @since unknown * * @param unknown_type $file * @param unknown_type $overrides * @return unknown */function wp_handle_sideload( &$file, $overrides = false ) {	// The default error handler.	if (! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_sideload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return $upload_error_handler( $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( ! empty( $file['error'] ) )		return $upload_error_handler( $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !(filesize($file['tmp_name']) > 0 ) )		return $upload_error_handler( $file, __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini.' ));	// A properly uploaded file will pass this test. There should be no reason to override this one.	if (! @ is_file( $file['tmp_name'] ) )		return $upload_error_handler( $file, __( 'Specified file does not exist.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return $upload_error_handler( $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )		return $upload_error_handler( $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Strip the query strings.	$filename = str_replace('?','-', $filename);	$filename = str_replace('&','-', $filename);	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ rename( $file['tmp_name'], $new_file ) ) {		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	}	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	$return = apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'sideload' );	return $return;}/** * Downloads a url to a local temporary file using the WordPress HTTP Class. * Please note, That the calling function must unlink() the  file. * * @since 2.5.0 * * @param string $url the URL of the file to download * @return mixed WP_Error on failure, string Filename on success. */function download_url( $url ) {	//WARNING: The file is not automatically deleted, The script must unlink() the file.	if ( ! $url )		return new WP_Error('http_no_url', __('Invalid URL Provided.'));	$tmpfname = wp_tempnam($url);	if ( ! $tmpfname )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$handle = @fopen($tmpfname, 'wb');	if ( ! $handle )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$response = wp_remote_get($url, array('timeout' => 300));	if ( is_wp_error($response) ) {		fclose($handle);		unlink($tmpfname);		return $response;	}	if ( $response['response']['code'] != '200' ){		fclose($handle);		unlink($tmpfname);		return new WP_Error('http_404', trim($response['response']['message']));	}	fwrite($handle, $response['body']);	fclose($handle);	return $tmpfname;}/** * Unzip's a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present. * * Attempts to increase the PHP Memory limit to 256M before uncompressing, * However, The most memory required shouldn't be much larger than the Archive itself. * * @since 2.5.0 * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @return mixed WP_Error on failure, True on success */function unzip_file($file, $to) {	global $wp_filesystem;	if ( ! $wp_filesystem || !is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	// Unzip can use a lot of memory, but not this much hopefully	@ini_set('memory_limit', '256M');	$needed_dirs = array();	$to = trailingslashit($to);	// Determine any parent dir's needed (of the upgrade directory)	if ( ! $wp_filesystem->is_dir($to) ) { //Only do parents if no children exist		$path = preg_split('![/\\\]!', untrailingslashit($to));		for ( $i = count($path); $i >= 0; $i-- ) {			if ( empty($path[$i]) )				continue;			$dir = implode('/', array_slice($path, 0, $i+1) );			if ( preg_match('!^[a-z]:$!i', $dir) ) // Skip it if it looks like a Windows Drive letter.				continue;			if ( ! $wp_filesystem->is_dir($dir) )				$needed_dirs[] = $dir;			else				break; // A folder exists, therefor, we dont need the check the levels below this		}	}	if ( class_exists('ZipArchive') && apply_filters('unzip_file_use_ziparchive', true ) ) {		$result = _unzip_file_ziparchive($file, $to, $needed_dirs);		if ( true === $result ) {			return $result;		} elseif ( is_wp_error($result) ) {			if ( 'incompatible_archive' != $result->get_error_code() )				return $result;		}	}	// Fall through to PclZip if ZipArchive is not available, or encountered an error opening the file.	return _unzip_file_pclzip($file, $to, $needed_dirs);}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {	global $wp_filesystem;	$z = new ZipArchive();	// PHP4-compat - php4 classes can't contain constants	$zopen = $z->open($file, /* ZIPARCHIVE::CHECKCONS */ 4);	if ( true !== $zopen )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'));	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		if ( '/' == substr($info['name'], -1) ) // directory			$needed_dirs[] = $to . untrailingslashit($info['name']);		else			$needed_dirs[] = $to . untrailingslashit(dirname($info['name']));	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the Dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '/' == substr($info['name'], -1) ) // directory			continue;		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		$contents = $z->getFromIndex($i);		if ( false === $contents )			return new WP_Error('extract_failed', __('Could not extract file from archive.'), $info['name']);		if ( ! $wp_filesystem->put_contents( $to . $info['name'], $contents, FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $info['filename']);	}	$z->close();	return true;}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_pclzip($file, $to, $needed_dirs = array()) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-pclzip.php');	$archive = new PclZip($file);	// Is the archive valid?	if ( false == ($archive_files = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING)) )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'), $archive->errorInfo(true));	if ( 0 == count($archive_files) )		return new WP_Error('empty_archive', __('Empty archive.'));	// Determine any children directories needed (From within the archive)	foreach ( $archive_files as $file ) {		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	// Extract the files from the zip	foreach ( $archive_files as $file ) {		if ( $file['folder'] )			continue;		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		if ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $file['filename']);	}	return true;}/** * Copies a directory from one location to another via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and setup. * * @since 2.5.0 * * @param string $from source directory * @param string $to destination directory * @return mixed WP_Error on failure, True on success. */function copy_dir($from, $to) {	global $wp_filesystem;	$dirlist = $wp_filesystem->dirlist($from);	$from = trailingslashit($from);	$to = trailingslashit($to);	foreach ( (array) $dirlist as $filename => $fileinfo ) {		if ( 'f' == $fileinfo['type'] ) {			if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) ) {				// If copy failed, chmod file to 0644 and try again.				$wp_filesystem->chmod($to . $filename, 0644);				if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) )					return new WP_Error('copy_failed', __('Could not copy file.'), $to . $filename);			}			$wp_filesystem->chmod($to . $filename, FS_CHMOD_FILE);		} elseif ( 'd' == $fileinfo['type'] ) {			if ( !$wp_filesystem->is_dir($to . $filename) ) {				if ( !$wp_filesystem->mkdir($to . $filename, FS_CHMOD_DIR) )					return new WP_Error('mkdir_failed', __('Could not create directory.'), $to . $filename);			}			$result = copy_dir($from . $filename, $to . $filename);			if ( is_wp_error($result) )				return $result;		}	}	return true;}/** * Initialises and connects the WordPress Filesystem Abstraction classes. * This function will include the chosen transport and attempt connecting. * * Plugins may add extra transports, And force WordPress to use them by returning the filename via the 'filesystem_method_file' filter. * * @since 2.5.0 * * @param array $args (optional) Connection args, These are passed directly to the WP_Filesystem_*() classes. * @param string $context (optional) Context for get_filesystem_method(), See function declaration for more information. * @return boolean false on failure, true on success */function WP_Filesystem( $args = false, $context = false ) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php');	$method = get_filesystem_method($args, $context);	if ( ! $method )		return false;	if ( ! class_exists("WP_Filesystem_$method") ) {		$abstraction_file = apply_filters('filesystem_method_file', ABSPATH . 'wp-admin/includes/class-wp-filesystem-' . $method . '.php', $method);		if ( ! file_exists($abstraction_file) )			return;		require_once($abstraction_file);	}	$method = "WP_Filesystem_$method";	$wp_filesystem = new $method($args);	//Define the timeouts for the connections. Only available after the construct is called to allow for per-transport overriding of the default.	if ( ! defined('FS_CONNECT_TIMEOUT') )		define('FS_CONNECT_TIMEOUT', 30);	if ( ! defined('FS_TIMEOUT') )		define('FS_TIMEOUT', 30);	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return false;	if ( !$wp_filesystem->connect() )		return false; //There was an erorr connecting to the server.	// Set the permission constants if not already set.	if ( ! defined('FS_CHMOD_DIR') )		define('FS_CHMOD_DIR', 0755 );	if ( ! defined('FS_CHMOD_FILE') )		define('FS_CHMOD_FILE', 0644 );	return true;}/** * Determines which Filesystem Method to use. * The priority of the Transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets (Via Sockets class, or fsoxkopen()) * * Note that the return value of this function can be overridden in 2 ways *  - By defining FS_METHOD in your <code>wp-config.php</code> file *  - By using the filesystem_method filter * Valid values for these are: 'direct', 'ssh', 'ftpext' or 'ftpsockets' * Plugins may also define a custom transport handler, See the WP_Filesystem function for more information. * * @since 2.5.0 * * @param array $args Connection details. * @param string $context Full path to the directory that is tested for being writable. * @return string The transport to use, see description for valid return values. */function get_filesystem_method($args = array(), $context = false) {	$method = defined('FS_METHOD') ? FS_METHOD : false; //Please ensure that this is either 'direct', 'ssh', 'ftpext' or 'ftpsockets'	if ( ! $method && function_exists('getmyuid') && function_exists('fileowner') ){		if ( !$context )			$context = WP_CONTENT_DIR;		$context = trailingslashit($context);		$temp_file_name = $context . 'temp-write-test-' . time();		$temp_handle = @fopen($temp_file_name, 'w');		if ( $temp_handle ) {			if ( getmyuid() == @fileowner($temp_file_name) )				$method = 'direct';			@fclose($temp_handle);			@unlink($temp_file_name);		} 	}	if ( ! $method && isset($args['connection_type']) && 'ssh' == $args['connection_type'] && extension_loaded('ssh2') && function_exists('stream_get_contents') ) $method = 'ssh2';	if ( ! $method && extension_loaded('ftp') ) $method = 'ftpext';	if ( ! $method && ( extension_loaded('sockets') || function_exists('fsockopen') ) ) $method = 'ftpsockets'; //Sockets: Socket extension; PHP Mode: FSockopen / fwrite / fread	return apply_filters('filesystem_method', $method, $args);}/** * Displays a form to the user to request for their FTP/SSH details in order to  connect to the filesystem. * All chosen/entered details are saved, Excluding the Password. * * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467) to specify an alternate FTP/SSH port. * * Plugins may override this form by returning true|false via the <code>request_filesystem_credentials</code> filter. * * @since 2.5.0 * * @param string $form_post the URL to post the form to * @param string $type the chosen Filesystem method in use * @param boolean $error if the current request has failed to connect * @param string $context The directory which is needed access to, The write-test will be performed on  this directory by get_filesystem_method() * @param string $extra_fields Extra POST fields which should be checked for to be included in the post. * @return boolean False on failure. True on success. */function request_filesystem_credentials($form_post, $type = '', $error = false, $context = false, $extra_fields = null) {	$req_cred = apply_filters( 'request_filesystem_credentials', '', $form_post, $type, $error, $context, $extra_fields );	if ( '' !== $req_cred )		return $req_cred;	if ( empty($type) )		$type = get_filesystem_method(array(), $context);	if ( 'direct' == $type )		return true;	if ( is_null( $extra_fields ) )		$extra_fields = array( 'version', 'locale' );	$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));	// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)	$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($_POST['hostname']) ? stripslashes($_POST['hostname']) : $credentials['hostname']);	$credentials['username'] = defined('FTP_USER') ? FTP_USER : (!empty($_POST['username']) ? stripslashes($_POST['username']) : $credentials['username']);	$credentials['password'] = defined('FTP_PASS') ? FTP_PASS : (!empty($_POST['password']) ? stripslashes($_POST['password']) : '');	// Check to see if we are setting the public/private keys for ssh	$credentials['public_key'] = defined('FTP_PUBKEY') ? FTP_PUBKEY : (!empty($_POST['public_key']) ? stripslashes($_POST['public_key']) : '');	$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($_POST['private_key']) ? stripslashes($_POST['private_key']) : '');	//sanitize the hostname, Some people might pass in odd-data:	$credentials['hostname'] = preg_replace('|\w+://|', '', $credentials['hostname']); //Strip any schemes off	if ( strpos($credentials['hostname'], ':') ) {		list( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);		if ( ! is_numeric($credentials['port']) )			unset($credentials['port']);	} else {		unset($credentials['port']);	}	if ( (defined('FTP_SSH') && FTP_SSH) || (defined('FS_METHOD') && 'ssh' == FS_METHOD) )		$credentials['connection_type'] = 'ssh';	else if ( (defined('FTP_SSL') && FTP_SSL) && 'ftpext' == $type ) //Only the FTP Extension understands SSL		$credentials['connection_type'] = 'ftps';	else if ( !empty($_POST['connection_type']) )		$credentials['connection_type'] = stripslashes($_POST['connection_type']);	else if ( !isset($credentials['connection_type']) ) //All else fails (And its not defaulted to something else saved), Default to FTP		$credentials['connection_type'] = 'ftp';	if ( ! $error &&			(				( !empty($credentials['password']) && !empty($credentials['username']) && !empty($credentials['hostname']) ) ||				( 'ssh' == $credentials['connection_type'] && !empty($credentials['public_key']) && !empty($credentials['private_key']) )			) ) {		$stored_credentials = $credentials;		if ( !empty($stored_credentials['port']) ) //save port as part of hostname to simplify above code.			$stored_credentials['hostname'] .= ':' . $stored_credentials['port'];		unset($stored_credentials['password'], $stored_credentials['port'], $stored_credentials['private_key'], $stored_credentials['public_key']);		update_option('ftp_credentials', $stored_credentials);		return $credentials;	}	$hostname = '';	$username = '';	$password = '';	$connection_type = '';	if ( !empty($credentials) )		extract($credentials, EXTR_OVERWRITE);	if ( $error ) {		$error_string = __('<strong>Error:</strong> There was an error connecting to the server, Please verify the settings are correct.');		if ( is_wp_error($error) )			$error_string = $error->get_error_message();		echo '<div id="message" class="error"><p>' . $error_string . '</p></div>';	}	$types = array();	if ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )		$types[ 'ftp' ] = __('FTP');	if ( extension_loaded('ftp') ) //Only this supports FTPS		$types[ 'ftps' ] = __('FTPS (SSL)');	if ( extension_loaded('ssh2') && function_exists('stream_get_contents') )		$types[ 'ssh' ] = __('SSH2');	$types = apply_filters('fs_ftp_connection_types', $types, $credentials, $type, $error, $context);?><script type="text/javascript"><!--jQuery(function($){	jQuery("#ssh").click(function () {		jQuery("#ssh_keys").show();	});	jQuery("#ftp, #ftps").click(function () {		jQuery("#ssh_keys").hide();	});	jQuery('form input[value=""]:first').focus();});--></script><form action="<?php echo $form_post ?>" method="post"><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Connection Information') ?></h2><p><?php	$label_user = __('Username');	$label_pass = __('Password');	_e('To perform the requested action, WordPress needs to access to your web server.');	echo ' ';	if ( ( isset( $types['ftp'] ) || isset( $types['ftps'] ) ) ) {		if ( isset( $types['ssh'] ) ) {			_e('Please enter your FTP or SSH credentials to proceed.');			$label_user = __('FTP/SSH Username');			$label_pass = __('FTP/SSH Password');		} else {			_e('Please enter your FTP credentials to proceed.');			$label_user = __('FTP Username');			$label_pass = __('FTP Password');		}		echo ' ';	}	_e('If you do not remember your credentials, you should contact your web host.');?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="hostname"><?php _e('Hostname') ?></label></th><td><input name="hostname" type="text" id="hostname" value="<?php echo esc_attr($hostname); if ( !empty($port) ) echo ":$port"; ?>"<?php disabled( defined('FTP_HOST') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="username"><?php echo $label_user; ?></label></th><td><input name="username" type="text" id="username" value="<?php echo esc_attr($username) ?>"<?php disabled( defined('FTP_USER') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="password"><?php echo $label_pass; ?></label></th><td><input name="password" type="password" id="password" value="<?php if ( defined('FTP_PASS') ) echo '*****'; ?>"<?php disabled( defined('FTP_PASS') ); ?> size="40" /></td></tr><?php if ( isset($types['ssh']) ) : ?><tr id="ssh_keys" valign="top" style="<?php if ( 'ssh' != $connection_type ) echo 'display:none' ?>"><th scope="row"><?php _e('Authentication Keys') ?><div class="key-labels textright"><label for="public_key"><?php _e('Public Key:') ?></label ><br /><label for="private_key"><?php _e('Private Key:') ?></label></div></th><td><br /><input name="public_key" type="text" id="public_key" value="<?php echo esc_attr($public_key) ?>"<?php disabled( defined('FTP_PUBKEY') ); ?> size="40" /><br /><input name="private_key" type="text" id="private_key" value="<?php echo esc_attr($private_key) ?>"<?php disabled( defined('FTP_PRIKEY') ); ?> size="40" /><div><?php _e('Enter the location on the server where the keys are located. If a passphrase is needed, enter that in the password field above.') ?></div></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Connection Type') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Connection Type') ?></span></legend><?php	$disabled = disabled( (defined('FTP_SSL') && FTP_SSL) || (defined('FTP_SSH') && FTP_SSH), true, false );	foreach ( $types as $name => $text ) : ?>	<label for="<?php echo esc_attr($name) ?>">		<input type="radio" name="connection_type" id="<?php echo esc_attr($name) ?>" value="<?php echo esc_attr($name) ?>"<?php checked($name, $connection_type); echo $disabled; ?> />		<?php echo $text ?>	</label>	<?php endforeach; ?></fieldset></td></tr></table><?phpforeach ( (array) $extra_fields as $field ) {	if ( isset( $_POST[ $field ] ) )		echo '<input type="hidden" name="' . esc_attr( $field ) . '" value="' . esc_attr( stripslashes( $_POST[ $field ] ) ) . '" />';}?><p class="submit"><input id="upgrade" name="upgrade" type="submit" class="button" value="<?php esc_attr_e('Proceed'); ?>" /></p></div></form><?php	return false;}?>
<?php/** * WordPress FTP Filesystem. * * @package WordPress * @subpackage Filesystem *//** * WordPress Filesystem Class for implementing FTP. * * @since 2.5 * @package WordPress * @subpackage Filesystem * @uses WP_Filesystem_Base Extends class */class WP_Filesystem_FTPext extends WP_Filesystem_Base {	var $link;	var $errors = null;	var $options = array();	function WP_Filesystem_FTPext($opt='') {		$this->method = 'ftpext';		$this->errors = new WP_Error();		//Check if possible to use ftp functions.		if ( ! extension_loaded('ftp') ) {			$this->errors->add('no_ftp_ext', __('The ftp PHP extension is not available'));			return false;		}		// Set defaults:		//This Class uses the timeout on a per-connection basis, Others use it on a per-action basis.		if ( ! defined('FS_TIMEOUT') )			define('FS_TIMEOUT', 240);		if ( empty($opt['port']) )			$this->options['port'] = 21;		else			$this->options['port'] = $opt['port'];		if ( empty($opt['hostname']) )			$this->errors->add('empty_hostname', __('FTP hostname is required'));		else			$this->options['hostname'] = $opt['hostname'];		if ( ! empty($opt['base']) )			$this->wp_base = $opt['base'];		// Check if the options provided are OK.		if ( empty($opt['username']) )			$this->errors->add('empty_username', __('FTP username is required'));		else			$this->options['username'] = $opt['username'];		if ( empty($opt['password']) )			$this->errors->add('empty_password', __('FTP password is required'));		else			$this->options['password'] = $opt['password'];		$this->options['ssl'] = false;		if ( isset($opt['connection_type']) && 'ftps' == $opt['connection_type'] )			$this->options['ssl'] = true;	}	function connect() {		if ( isset($this->options['ssl']) && $this->options['ssl'] && function_exists('ftp_ssl_connect') )			$this->link = @ftp_ssl_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		else			$this->link = @ftp_connect($this->options['hostname'], $this->options['port'], FS_CONNECT_TIMEOUT);		if ( ! $this->link ) {			$this->errors->add('connect', sprintf(__('Failed to connect to FTP Server %1$s:%2$s'), $this->options['hostname'], $this->options['port']));			return false;		}		if ( ! @ftp_login($this->link,$this->options['username'], $this->options['password']) ) {			$this->errors->add('auth', sprintf(__('Username/Password incorrect for %s'), $this->options['username']));			return false;		}		//Set the Connection to use Passive FTP		@ftp_pasv( $this->link, true );		if ( @ftp_get_option($this->link, FTP_TIMEOUT_SEC) < FS_TIMEOUT )			@ftp_set_option($this->link, FTP_TIMEOUT_SEC, FS_TIMEOUT);		return true;	}	function get_contents($file, $type = '', $resumepos = 0 ) {		if ( empty($type) )			$type = FTP_BINARY;		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		if ( ! @ftp_fget($this->link, $temp, $file, $type, $resumepos) )			return false;		fseek($temp, 0); //Skip back to the start of the file being written to		$contents = '';		while ( ! feof($temp) )			$contents .= fread($temp, 8192);		fclose($temp);		unlink($tempfile);		return $contents;	}	function get_contents_array($file) {		return explode("\n", $this->get_contents($file));	}	function put_contents($file, $contents, $mode = false ) {		$tempfile = wp_tempnam($file);		$temp = fopen($tempfile, 'w+');		if ( ! $temp )			return false;		fwrite($temp, $contents);		fseek($temp, 0); //Skip back to the start of the file being written to		$type = $this->is_binary($contents) ? FTP_BINARY : FTP_ASCII;		$ret = @ftp_fput($this->link, $file, $temp, $type);		fclose($temp);		unlink($tempfile);		$this->chmod($file, $mode);		return $ret;	}	function cwd() {		$cwd = @ftp_pwd($this->link);		if ( $cwd )			$cwd = trailingslashit($cwd);		return $cwd;	}	function chdir($dir) {		return @ftp_chdir($this->link, $dir);	}	function chgrp($file, $group, $recursive = false ) {		return false;	}	function chmod($file, $mode = false, $recursive = false) {		if ( ! $mode ) {			if ( $this->is_file($file) )				$mode = FS_CHMOD_FILE;			elseif ( $this->is_dir($file) )				$mode = FS_CHMOD_DIR;			else				return false;		}		// chmod any sub-objects if recursive.		if ( $recursive && $this->is_dir($file) ) {			$filelist = $this->dirlist($file);			foreach ( (array)$filelist as $filename => $filemeta )				$this->chmod($file . '/' . $filename, $mode, $recursive);		}		// chmod the file or directory		if ( ! function_exists('ftp_chmod') )			return (bool)@ftp_site($this->link, sprintf('CHMOD %o %s', $mode, $file));		return (bool)@ftp_chmod($this->link, $mode, $file);	}	function chown($file, $owner, $recursive = false ) {		return false;	}	function owner($file) {		$dir = $this->dirlist($file);		return $dir[$file]['owner'];	}	function getchmod($file) {		$dir = $this->dirlist($file);		return $dir[$file]['permsn'];	}	function group($file) {		$dir = $this->dirlist($file);		return $dir[$file]['group'];	}	function copy($source, $destination, $overwrite = false ) {		if ( ! $overwrite && $this->exists($destination) )			return false;		$content = $this->get_contents($source);		if ( false === $content)			return false;		return $this->put_contents($destination, $content);	}	function move($source, $destination, $overwrite = false) {		return ftp_rename($this->link, $source, $destination);	}	function delete($file, $recursive = false ) {		if ( empty($file) )			return false;		if ( $this->is_file($file) )			return @ftp_delete($this->link, $file);		if ( !$recursive )			return @ftp_rmdir($this->link, $file);		$filelist = $this->dirlist( trailingslashit($file) );		if ( !empty($filelist) )			foreach ( $filelist as $delete_file )				$this->delete( trailingslashit($file) . $delete_file['name'], $recursive);		return @ftp_rmdir($this->link, $file);	}	function exists($file) {		$list = @ftp_nlist($this->link, $file);		return !empty($list); //empty list = no file, so invert.	}	function is_file($file) {		return $this->exists($file) && !$this->is_dir($file);	}	function is_dir($path) {		$cwd = $this->cwd();		$result = @ftp_chdir($this->link, trailingslashit($path) );		if ( $result && $path == $this->cwd() || $this->cwd() != $cwd ) {			@ftp_chdir($this->link, $cwd);			return true;		}		return false;	}	function is_readable($file) {		//Get dir list, Check if the file is readable by the current user??		return true;	}	function is_writable($file) {		//Get dir list, Check if the file is writable by the current user??		return true;	}	function atime($file) {		return false;	}	function mtime($file) {		return ftp_mdtm($this->link, $file);	}	function size($file) {		return ftp_size($this->link, $file);	}	function touch($file, $time = 0, $atime = 0) {		return false;	}	function mkdir($path, $chmod = false, $chown = false, $chgrp = false) {		if ( !@ftp_mkdir($this->link, $path) )			return false;		$this->chmod($path, $chmod);		if ( $chown )			$this->chown($path, $chown);		if ( $chgrp )			$this->chgrp($path, $chgrp);		return true;	}	function rmdir($path, $recursive = false) {		return $this->delete($path, $recursive);	}	function parselisting($line) {		static $is_windows;		if ( is_null($is_windows) )			$is_windows = stripos( ftp_systype($this->link), 'win') !== false;		if ( $is_windows && preg_match('/([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)/', $line, $lucifer) ) {			$b = array();			if ( $lucifer[3] < 70 )				$lucifer[3] +=2000;			else				$lucifer[3] += 1900; // 4digit year fix			$b['isdir'] = ( $lucifer[7] == '<DIR>');			if ( $b['isdir'] )				$b['type'] = 'd';			else				$b['type'] = 'f';			$b['size'] = $lucifer[7];			$b['month'] = $lucifer[1];			$b['day'] = $lucifer[2];			$b['year'] = $lucifer[3];			$b['hour'] = $lucifer[4];			$b['minute'] = $lucifer[5];			$b['time'] = @mktime($lucifer[4] + (strcasecmp($lucifer[6], "PM") == 0 ? 12 : 0), $lucifer[5], 0, $lucifer[1], $lucifer[2], $lucifer[3]);			$b['am/pm'] = $lucifer[6];			$b['name'] = $lucifer[8];		} elseif ( !$is_windows && $lucifer = preg_split('/[ ]/', $line, 9, PREG_SPLIT_NO_EMPTY)) {			//echo $line."\n";			$lcount = count($lucifer);			if ( $lcount < 8 )				return '';			$b = array();			$b['isdir'] = $lucifer[0]{0} === 'd';			$b['islink'] = $lucifer[0]{0} === 'l';			if ( $b['isdir'] )				$b['type'] = 'd';			elseif ( $b['islink'] )				$b['type'] = 'l';			else				$b['type'] = 'f';			$b['perms'] = $lucifer[0];			$b['number'] = $lucifer[1];			$b['owner'] = $lucifer[2];			$b['group'] = $lucifer[3];			$b['size'] = $lucifer[4];			if ( $lcount == 8 ) {				sscanf($lucifer[5], '%d-%d-%d', $b['year'], $b['month'], $b['day']);				sscanf($lucifer[6], '%d:%d', $b['hour'], $b['minute']);				$b['time'] = @mktime($b['hour'], $b['minute'], 0, $b['month'], $b['day'], $b['year']);				$b['name'] = $lucifer[7];			} else {				$b['month'] = $lucifer[5];				$b['day'] = $lucifer[6];				if ( preg_match('/([0-9]{2}):([0-9]{2})/', $lucifer[7], $l2) ) {					$b['year'] = date("Y");					$b['hour'] = $l2[1];					$b['minute'] = $l2[2];				} else {					$b['year'] = $lucifer[7];					$b['hour'] = 0;					$b['minute'] = 0;				}				$b['time'] = strtotime( sprintf('%d %s %d %02d:%02d', $b['day'], $b['month'], $b['year'], $b['hour'], $b['minute']) );				$b['name'] = $lucifer[8];			}		}		return $b;	}	function dirlist($path = '.', $include_hidden = true, $recursive = false) {		if ( $this->is_file($path) ) {			$limit_file = basename($path);			$path = dirname($path) . '/';		} else {			$limit_file = false;		}		$pwd = @ftp_pwd($this->link);		if ( ! @ftp_chdir($this->link, $path) ) // Cant change to folder = folder doesnt exist			return false;		$list = @ftp_rawlist($this->link, '-a', false);		@ftp_chdir($this->link, $pwd);		if ( empty($list) ) // Empty array = non-existent folder (real folder will show . at least)			return false;		$dirlist = array();		foreach ( $list as $k => $v ) {			$entry = $this->parselisting($v);			if ( empty($entry) )				continue;			if ( '.' == $entry['name'] || '..' == $entry['name'] )				continue;			if ( ! $include_hidden && '.' == $entry['name'][0] )				continue;			if ( $limit_file && $entry['name'] != $limit_file)				continue;			$dirlist[ $entry['name'] ] = $entry;		}		$ret = array();		foreach ( (array)$dirlist as $struc ) {			if ( 'd' == $struc['type'] ) {				if ( $recursive )					$struc['files'] = $this->dirlist($path . '/' . $struc['name'], $include_hidden, $recursive);				else					$struc['files'] = array();			}			$ret[ $struc['name'] ] = $struc;		}		return $ret;	}	function __destruct() {		if ( $this->link )			ftp_close($this->link);	}}?>
<?php/** * Used to set up and fix common variables and include * the Multisite procedural and class library. * * Allows for some configuration in wp-config.php (see ms-default-constants.php) * * @package WordPress * @subpackage Multisite * @since 3.0.0 */// $base sanity check.if ( 'BASE' == $base )	die( /*WP_I18N_BASE_ERROR*/'Configuration error in <code>wp-config.php</code>. <code>$base</code> is set to <code>BASE</code> when it should be like <code>/</code> or <code>/blogs/</code>.'/*/WP_I18N_BASE_ERROR*/ );/** Include Multisite initialization functions */require( ABSPATH . WPINC . '/ms-load.php' );require( ABSPATH . WPINC . '/ms-default-constants.php' );if ( defined( 'SUNRISE' ) )	include_once( WP_CONTENT_DIR . '/sunrise.php' );/** Check for and define SUBDOMAIN_INSTALL and the deprecated VHOST constant. */ms_subdomain_constants();if ( !isset( $current_site ) || !isset( $current_blog ) ) {	$domain = addslashes( $_SERVER['HTTP_HOST'] );	if ( false !== strpos( $domain, ':' ) ) {		if ( substr( $domain, -3 ) == ':80' ) {			$domain = substr( $domain, 0, -3 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -3 );		} elseif ( substr( $domain, -4 ) == ':443' ) {			$domain = substr( $domain, 0, -4 );			$_SERVER['HTTP_HOST'] = substr( $_SERVER['HTTP_HOST'], 0, -4 );		} else {			wp_die( /*WP_I18N_NO_PORT_NUMBER*/'Multisite only works without the port number in the URL.'/*/WP_I18N_NO_PORT_NUMBER*/ );		}	}	$domain = rtrim( $domain, '.' );	$cookie_domain = $domain;	if ( substr( $cookie_domain, 0, 4 ) == 'www.' )		$cookie_domain = substr( $cookie_domain, 4 );	$path = preg_replace( '|([a-z0-9-]+.php.*)|', '', $_SERVER['REQUEST_URI'] );	$path = str_replace ( '/wp-admin/', '/', $path );	$path = preg_replace( '|(/[a-z0-9-]+?/).*|', '$1', $path );	$current_site = wpmu_current_site();	if ( ! isset( $current_site->blog_id ) )		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );	if ( is_subdomain_install() ) {		$current_blog = wp_cache_get( 'current_blog_' . $domain, 'site-options' );		if ( !$current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain, $current_blog, 'site-options' );		}		if ( $current_blog && $current_blog->site_id != $current_site->id )			$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE id = %d", $current_blog->site_id ) );		else			$blogname = substr( $domain, 0, strpos( $domain, '.' ) );	} else {		$blogname = htmlspecialchars( substr( $_SERVER[ 'REQUEST_URI' ], strlen( $path ) ) );		if ( false !== strpos( $blogname, '/' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '/' ) );		if ( false !== strpos( $blogname, '?' ) )			$blogname = substr( $blogname, 0, strpos( $blogname, '?' ) );		$reserved_blognames = array( 'page', 'comments', 'blog', 'wp-admin', 'wp-includes', 'wp-content', 'files', 'feed' );		if ( $blogname != '' && ! in_array( $blogname, $reserved_blognames ) && ! is_file( $blogname ) )			$path .= $blogname . '/';		$current_blog = wp_cache_get( 'current_blog_' . $domain . $path, 'site-options' );		if ( ! $current_blog ) {			$current_blog = get_blog_details( array( 'domain' => $domain, 'path' => $path ), false );			if ( $current_blog )				wp_cache_set( 'current_blog_' . $domain . $path, $current_blog, 'site-options' );		}	}	if ( ! defined( 'WP_INSTALLING' ) && is_subdomain_install() && ! is_object( $current_blog ) ) {		if ( defined( 'NOBLOGREDIRECT' ) ) {			$destination = NOBLOGREDIRECT;			if ( '%siteurl%' == $destination )				$destination = "http://" . $current_site->domain . $current_site->path;		} else {			$destination = 'http://' . $current_site->domain . $current_site->path . 'wp-signup.php?new=' . str_replace( '.' . $current_site->domain, '', $domain );		}		header( 'Location: ' . $destination );		die();	}	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( $current_site && ! $current_blog ) {			if ( $current_site->domain != $_SERVER[ 'HTTP_HOST' ] ) {				header( 'Location: http://' . $current_site->domain . $current_site->path );				exit;			}			$current_blog = get_blog_details( array( 'domain' => $current_site->domain, 'path' => $current_site->path ), false );		}		if ( ! $current_blog || ! $current_site )			ms_not_installed();	}	$blog_id = $current_blog->blog_id;	$public  = $current_blog->public;	if ( empty( $current_blog->site_id ) )		$current_blog->site_id = 1;	$site_id = $current_blog->site_id;	$current_site = get_current_site_name( $current_site );	if ( ! $blog_id ) {		if ( defined( 'WP_INSTALLING' ) ) {			$current_blog->blog_id = $blog_id = 1;		} else {			$msg = ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) ? ' ' . /*WP_I18N_TABLES_MISSING*/'Database tables are missing.'/*/WP_I18N_TABLES_MISSING*/ : '';			wp_die( /*WP_I18N_NO_BLOG*/'No site by that name on this system.'/*/WP_I18N_NO_BLOG*/ . $msg );		}	}}$wpdb->set_prefix( $table_prefix, false ); // $table_prefix can be set in sunrise.php$wpdb->set_blog_id( $current_blog->blog_id, $current_blog->site_id );$table_prefix = $wpdb->get_blog_prefix();// need to init cache again after blog_id is setwp_start_object_cache();// Define upload directory constantsms_upload_constants();
<?php/** * The template for displaying Search Results pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) : ?>				<h1 class="page-title"><?php printf( __( 'Search Results for: %s', 'twentyten' ), '<span>' . get_search_query() . '</span>' ); ?></h1>				<?php				/* Run the loop for the search to output the results.				 * If you want to overload this in a child theme then include a file				 * called loop-search.php and that will be used instead.				 */				 get_template_part( 'loop', 'search' );				?><?php else : ?>				<div id="post-0" class="post no-results not-found">					<h2 class="entry-title"><?php _e( 'Nothing Found', 'twentyten' ); ?></h2>					<div class="entry-content">						<p><?php _e( 'Sorry, but nothing matched your search criteria. Please try again with some different keywords.', 'twentyten' ); ?></p>						<?php get_search_form(); ?>					</div><!-- .entry-content -->				</div><!-- #post-0 --><?php endif; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Creates common globals for the rest of WordPress * * Sets $pagenow global which is the current page. Checks * for the browser to set which one is currently being used. * * Detects which user environment WordPress is being used on. * Only attempts to check for Apache and IIS. Two web servers * with known permalink capability. * * @package WordPress */// On which page are we ?if ( is_admin() ) {	// wp-admin pages are checked more carefully	preg_match('#/wp-admin/?(.*?)$#i', $PHP_SELF, $self_matches);	$pagenow = $self_matches[1];	$pagenow = trim($pagenow, '/');	$pagenow = preg_replace('#\?.*?$#', '', $pagenow);	if ( '' === $pagenow || 'index' === $pagenow || 'index.php' === $pagenow ) {		$pagenow = 'index.php';	} else {		preg_match('#(.*?)(/|$)#', $pagenow, $self_matches);		$pagenow = strtolower($self_matches[1]);		if ( '.php' !== substr($pagenow, -4, 4) )			$pagenow .= '.php'; // for Options +Multiviews: /wp-admin/themes/index.php (themes.php is queried)	}} else {	if ( preg_match('#([^/]+\.php)([?/].*?)?$#i', $PHP_SELF, $self_matches) )		$pagenow = strtolower($self_matches[1]);	else		$pagenow = 'index.php';}// Simple browser detection$is_lynx = $is_gecko = $is_winIE = $is_macIE = $is_opera = $is_NS4 = $is_safari = $is_chrome = $is_iphone = false;if ( isset($_SERVER['HTTP_USER_AGENT']) ) {	if ( strpos($_SERVER['HTTP_USER_AGENT'], 'Lynx') !== false ) {		$is_lynx = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'chrome') !== false ) {		$is_chrome = true;	} elseif ( stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false ) {		$is_safari = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Gecko') !== false ) {		$is_gecko = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Win') !== false ) {		$is_winIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mac') !== false ) {		$is_macIE = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Opera') !== false ) {		$is_opera = true;	} elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Nav') !== false && strpos($_SERVER['HTTP_USER_AGENT'], 'Mozilla/4.') !== false ) {		$is_NS4 = true;	}}if ( $is_safari && stripos($_SERVER['HTTP_USER_AGENT'], 'mobile') !== false )	$is_iphone = true;$is_IE = ( $is_macIE || $is_winIE );// Server detection/** * Whether the server software is Apache or something else * @global bool $is_apache */$is_apache = (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'LiteSpeed') !== false);/** * Whether the server software is IIS or something else * @global bool $is_IIS */$is_IIS = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS') !== false || strpos($_SERVER['SERVER_SOFTWARE'], 'ExpressionDevServer') !== false);/** * Whether the server software is IIS 7.X * @global bool $is_iis7 */$is_iis7 = (strpos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS/7.') !== false);?>
<?php/** * The template for displaying attachments. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<p class="page-title"><a href="<?php echo get_permalink( $post->post_parent ); ?>" title="<?php esc_attr( printf( __( 'Return to %s', 'twentyten' ), get_the_title( $post->post_parent ) ) ); ?>" rel="gallery"><?php					/* translators: %s - title of parent post */					printf( __( '<span class="meta-nav">&larr;</span> %s', 'twentyten' ), get_the_title( $post->post_parent ) );				?></a></p>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h2 class="entry-title"><?php the_title(); ?></h2>					<div class="entry-meta">						<?php							printf(__('<span class="%1$s">By</span> %2$s', 'twentyten'),								'meta-prep meta-prep-author',								sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',									get_author_posts_url( get_the_author_meta( 'ID' ) ),									sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),									get_the_author()								)							);						?>						<span class="meta-sep">|</span>						<?php							printf( __('<span class="%1$s">Published</span> %2$s', 'twentyten'),								'meta-prep meta-prep-entry-date',								sprintf( '<span class="entry-date"><abbr class="published" title="%1$s">%2$s</abbr></span>',									esc_attr( get_the_time() ),									get_the_date()								)							);							if ( wp_attachment_is_image() ) {								echo ' <span class="meta-sep">|</span> ';								$metadata = wp_get_attachment_metadata();								printf( __( 'Full size is %s pixels', 'twentyten'),									sprintf( '<a href="%1$s" title="%2$s">%3$s &times; %4$s</a>',										wp_get_attachment_url(),										esc_attr( __('Link to full-size image', 'twentyten') ),										$metadata['width'],										$metadata['height']									)								);							}						?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<div class="entry-attachment"><?php if ( wp_attachment_is_image() ) :	$attachments = array_values( get_children( array( 'post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID' ) ) );	foreach ( $attachments as $k => $attachment ) {		if ( $attachment->ID == $post->ID )			break;	}	$k++;	// If there is more than 1 image attachment in a gallery	if ( count( $attachments ) > 1 ) {		if ( isset( $attachments[ $k ] ) )			// get the URL of the next image attachment			$next_attachment_url = get_attachment_link( $attachments[ $k ]->ID );		else			// or get the URL of the first image attachment			$next_attachment_url = get_attachment_link( $attachments[ 0 ]->ID );	} else {		// or, if there's only 1 image attachment, get the URL of the image		$next_attachment_url = wp_get_attachment_url();	}?>						<p class="attachment"><a href="<?php echo $next_attachment_url; ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php							$attachment_size = apply_filters( 'twentyten_attachment_size', 900 );							echo wp_get_attachment_image( $post->ID, array( $attachment_size, 9999 ) ); // filterable image width with, essentially, no limit for image height.						?></a></p>						<div id="nav-below" class="navigation">							<div class="nav-previous"><?php previous_image_link( false ); ?></div>							<div class="nav-next"><?php next_image_link( false ); ?></div>						</div><!-- #nav-below --><?php else : ?>						<a href="<?php echo wp_get_attachment_url(); ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php echo basename( get_permalink() ); ?></a><?php endif; ?>						</div><!-- .entry-attachment -->						<div class="entry-caption"><?php if ( !empty( $post->post_excerpt ) ) the_excerpt(); ?></div><?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?><?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content -->					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), ' <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## --><?php comments_template(); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Link/Bookmark API * * @package WordPress * @subpackage Bookmark *//** * Retrieve Bookmark data based on ID * * @since 2.1.0 * @uses $wpdb Database Object * * @param int $bookmark_id * @param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant * @param string $filter Optional, default is 'raw'. * @return array|object Type returned depends on $output value. */function get_bookmark($bookmark, $output = OBJECT, $filter = 'raw') {	global $wpdb;	if ( empty($bookmark) ) {		if ( isset($GLOBALS['link']) )			$_bookmark = & $GLOBALS['link'];		else			$_bookmark = null;	} elseif ( is_object($bookmark) ) {		wp_cache_add($bookmark->link_id, $bookmark, 'bookmark');		$_bookmark = $bookmark;	} else {		if ( isset($GLOBALS['link']) && ($GLOBALS['link']->link_id == $bookmark) ) {			$_bookmark = & $GLOBALS['link'];		} elseif ( ! $_bookmark = wp_cache_get($bookmark, 'bookmark') ) {			$_bookmark = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->links WHERE link_id = %d LIMIT 1", $bookmark));			$_bookmark->link_category = array_unique( wp_get_object_terms($_bookmark->link_id, 'link_category', array('fields' => 'ids')) );			wp_cache_add($_bookmark->link_id, $_bookmark, 'bookmark');		}	}	$_bookmark = sanitize_bookmark($_bookmark, $filter);	if ( $output == OBJECT ) {		return $_bookmark;	} elseif ( $output == ARRAY_A ) {		return get_object_vars($_bookmark);	} elseif ( $output == ARRAY_N ) {		return array_values(get_object_vars($_bookmark));	} else {		return $_bookmark;	}}/** * Retrieve single bookmark data item or field. * * @since 2.3.0 * @uses get_bookmark() Gets bookmark object using $bookmark as ID * @uses sanitize_bookmark_field() Sanitizes Bookmark field based on $context. * * @param string $field The name of the data field to return * @param int $bookmark The bookmark ID to get field * @param string $context Optional. The context of how the field will be used. * @return string */function get_bookmark_field( $field, $bookmark, $context = 'display' ) {	$bookmark = (int) $bookmark;	$bookmark = get_bookmark( $bookmark );	if ( is_wp_error($bookmark) )		return $bookmark;	if ( !is_object($bookmark) )		return '';	if ( !isset($bookmark->$field) )		return '';	return sanitize_bookmark_field($field, $bookmark->$field, $bookmark->link_id, $context);}/** * Retrieves the list of bookmarks * * Attempts to retrieve from the cache first based on MD5 hash of arguments. If * that fails, then the query will be built from the arguments and executed. The * results will be stored to the cache. * * List of default arguments are as follows: * 'orderby' - Default is 'name' (string). How to order the links by. String is *		based off of the bookmark scheme. * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either *		ascending or descending order. * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to *		display. * 'category' - Default is empty string (string). Include the links in what *		category ID(s). * 'category_name' - Default is empty string (string). Get links by category *		name. * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide *		links marked as 'invisible'. * 'show_updated' - Default is 0 (integer). Will show the time of when the *		bookmark was last updated. * 'include' - Default is empty string (string). Include other categories *		separated by commas. * 'exclude' - Default is empty string (string). Exclude other categories *		separated by commas. * * @since 2.1.0 * @uses $wpdb Database Object * @link http://codex.wordpress.org/Template_Tags/get_bookmarks * * @param string|array $args List of arguments to overwrite the defaults * @return array List of bookmark row objects */function get_bookmarks($args = '') {	global $wpdb;	$defaults = array(		'orderby' => 'name', 'order' => 'ASC',		'limit' => -1, 'category' => '',		'category_name' => '', 'hide_invisible' => 1,		'show_updated' => 0, 'include' => '',		'exclude' => '', 'search' => ''	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$cache = array();	$key = md5( serialize( $r ) );	if ( $cache = wp_cache_get( 'get_bookmarks', 'bookmark' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) )			return apply_filters('get_bookmarks', $cache[ $key ], $r );	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$exclude = '';  //ignore exclude, category, and category_name params if using include		$category = '';		$category_name = '';		$inclinks = preg_split('/[\s,]+/',$include);		if ( count($inclinks) ) {			foreach ( $inclinks as $inclink ) {				if (empty($inclusions))					$inclusions = ' AND ( link_id = ' . intval($inclink) . ' ';				else					$inclusions .= ' OR link_id = ' . intval($inclink) . ' ';			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$exlinks = preg_split('/[\s,]+/',$exclude);		if ( count($exlinks) ) {			foreach ( $exlinks as $exlink ) {				if (empty($exclusions))					$exclusions = ' AND ( link_id <> ' . intval($exlink) . ' ';				else					$exclusions .= ' AND link_id <> ' . intval($exlink) . ' ';			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	if ( !empty($category_name) ) {		if ( $category = get_term_by('name', $category_name, 'link_category') ) {			$category = $category->term_id;		} else {			$cache[ $key ] = array();			wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );			return apply_filters( 'get_bookmarks', array(), $r );		}	}	if ( ! empty($search) ) {		$search = like_escape($search);		$search = " AND ( (link_url LIKE '%$search%') OR (link_name LIKE '%$search%') OR (link_description LIKE '%$search%') ) ";	}	$category_query = '';	$join = '';	if ( !empty($category) ) {		$incategories = preg_split('/[\s,]+/',$category);		if ( count($incategories) ) {			foreach ( $incategories as $incat ) {				if (empty($category_query))					$category_query = ' AND ( tt.term_id = ' . intval($incat) . ' ';				else					$category_query .= ' OR tt.term_id = ' . intval($incat) . ' ';			}		}	}	if (!empty($category_query)) {		$category_query .= ") AND taxonomy = 'link_category'";		$join = " INNER JOIN $wpdb->term_relationships AS tr ON ($wpdb->links.link_id = tr.object_id) INNER JOIN $wpdb->term_taxonomy as tt ON tt.term_taxonomy_id = tr.term_taxonomy_id";	}	if ( $show_updated && get_option('links_recently_updated_time') ) {		$recently_updated_test = ", IF (DATE_ADD(link_updated, INTERVAL " . get_option('links_recently_updated_time') . " MINUTE) >= NOW(), 1,0) as recently_updated ";	} else {		$recently_updated_test = '';	}	$get_updated = ( $show_updated ) ? ', UNIX_TIMESTAMP(link_updated) AS link_updated_f ' : '';	$orderby = strtolower($orderby);	$length = '';	switch ($orderby) {		case 'length':			$length = ", CHAR_LENGTH(link_name) AS length";			break;		case 'rand':			$orderby = 'rand()';			break;		default:			$orderparams = array();			foreach ( explode(',', $orderby) as $ordparam )				$orderparams[] = 'link_' . trim($ordparam);			$orderby = implode(',', $orderparams);	}	if ( 'link_id' == $orderby )		$orderby = "$wpdb->links.link_id";	$visible = '';	if ( $hide_invisible )		$visible = "AND link_visible = 'Y'";	$query = "SELECT * $length $recently_updated_test $get_updated FROM $wpdb->links $join WHERE 1=1 $visible $category_query";	$query .= " $exclusions $inclusions $search";	$query .= " ORDER BY $orderby $order";	if ($limit != -1)		$query .= " LIMIT $limit";	$results = $wpdb->get_results($query);	$cache[ $key ] = $results;	wp_cache_set( 'get_bookmarks', $cache, 'bookmark' );	return apply_filters('get_bookmarks', $results, $r);}/** * Sanitizes all bookmark fields * * @since 2.3.0 * * @param object|array $bookmark Bookmark row * @param string $context Optional, default is 'display'. How to filter the *		fields * @return object|array Same type as $bookmark but with fields sanitized. */function sanitize_bookmark($bookmark, $context = 'display') {	$fields = array('link_id', 'link_url', 'link_name', 'link_image', 'link_target', 'link_category',		'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_updated',		'link_rel', 'link_notes', 'link_rss', );	if ( is_object($bookmark) ) {		$do_object = true;		$link_id = $bookmark->link_id;	} else {		$do_object = false;		$link_id = $bookmark['link_id'];	}	foreach ( $fields as $field ) {		if ( $do_object ) {			if ( isset($bookmark->$field) )				$bookmark->$field = sanitize_bookmark_field($field, $bookmark->$field, $link_id, $context);		} else {			if ( isset($bookmark[$field]) )				$bookmark[$field] = sanitize_bookmark_field($field, $bookmark[$field], $link_id, $context);		}	}	return $bookmark;}/** * Sanitizes a bookmark field * * Sanitizes the bookmark fields based on what the field name is. If the field * has a strict value set, then it will be tested for that, else a more generic * filtering is applied. After the more strict filter is applied, if the * $context is 'raw' then the value is immediately return. * * Hooks exist for the more generic cases. With the 'edit' context, the * 'edit_$field' filter will be called and passed the $value and $bookmark_id * respectively. With the 'db' context, the 'pre_$field' filter is called and * passed the value. The 'display' context is the final context and has the * $field has the filter name and is passed the $value, $bookmark_id, and * $context respectively. * * @since 2.3.0 * * @param string $field The bookmark field * @param mixed $value The bookmark field value * @param int $bookmark_id Bookmark ID * @param string $context How to filter the field value. Either 'raw', 'edit', *		'attribute', 'js', 'db', or 'display' * @return mixed The filtered value */function sanitize_bookmark_field($field, $value, $bookmark_id, $context) {	switch ( $field ) {	case 'link_id' : // ints	case 'link_rating' :		$value = (int) $value;		break;	case 'link_category' : // array( ints )		$value = array_map('absint', (array) $value);		// We return here so that the categories aren't filtered.		// The 'link_category' filter is for the name of a link category, not an array of a link's link categories		return $value;		break;	case 'link_visible' : // bool stored as Y|N		$value = preg_replace('/[^YNyn]/', '', $value);		break;	case 'link_target' : // "enum"		$targets = array('_top', '_blank');		if ( ! in_array($value, $targets) )			$value = '';		break;	}	if ( 'raw' == $context )		return $value;	if ( 'edit' == $context ) {		$format_to_edit = array('link_notes');		$value = apply_filters("edit_$field", $value, $bookmark_id);		if ( in_array($field, $format_to_edit) ) {			$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		$value = apply_filters("pre_$field", $value);	} else {		// Use display filters by default.		$value = apply_filters($field, $value, $bookmark_id, $context);		if ( 'attribute' == $context )			$value = esc_attr($value);		else if ( 'js' == $context )			$value = esc_js($value);	}	return $value;}/** * Deletes bookmark cache * * @since 2.7.0 * @uses wp_cache_delete() Deletes the contents of 'get_bookmarks' */function clean_bookmark_cache($bookmark_id) {	wp_cache_delete( $bookmark_id, 'bookmark' );	wp_cache_delete( 'get_bookmarks', 'bookmark' );}?>
<?php/** * The Sidebar containing the primary and secondary widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>		<div id="primary" class="widget-area" role="complementary">			<ul class="xoxo"><?php	/* When we call the dynamic_sidebar() function, it'll spit out	 * the widgets for that widget area. If it instead returns false,	 * then the sidebar simply doesn't exist, so we'll hard-code in	 * some default sidebar stuff just in case.	 */	if ( ! dynamic_sidebar( 'primary-widget-area' ) ) : ?>				<li id="search" class="widget-container widget_search">				<?php get_search_form(); ?>			</li>			<li id="archives" class="widget-container">				<h3 class="widget-title"><?php _e( 'Archives', 'twentyten' ); ?></h3>				<ul>					<?php wp_get_archives( 'type=monthly' ); ?>				</ul>			</li>			<li id="meta" class="widget-container">				<h3 class="widget-title"><?php _e( 'Meta', 'twentyten' ); ?></h3>				<ul>					<?php wp_register(); ?>					<li><?php wp_loginout(); ?></li>					<?php wp_meta(); ?>				</ul>			</li>		<?php endif; // end primary widget area ?>			</ul>		</div><!-- #primary .widget-area --><?php	// A second sidebar for widgets, just because.	if ( is_active_sidebar( 'secondary-widget-area' ) ) : ?>		<div id="secondary" class="widget-area" role="complementary">			<ul class="xoxo">				<?php dynamic_sidebar( 'secondary-widget-area' ); ?>			</ul>		</div><!-- #secondary .widget-area --><?php endif; ?>
<?php/** * The Template for displaying all single posts. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="nav-above" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-above -->				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-meta">						<?php twentyten_posted_on(); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content --><?php if ( get_the_author_meta( 'description' ) ) : // If a user has filled out their description, show a bio on their entries  ?>					<div id="entry-author-info">						<div id="author-avatar">							<?php echo get_avatar( get_the_author_meta( 'user_email' ), apply_filters( 'twentyten_author_bio_avatar_size', 60 ) ); ?>						</div><!-- #author-avatar -->						<div id="author-description">							<h2><?php printf( esc_attr__( 'About %s', 'twentyten' ), get_the_author() ); ?></h2>							<?php the_author_meta( 'description' ); ?>							<div id="author-link">								<a href="<?php echo get_author_posts_url( get_the_author_meta( 'ID' ) ); ?>">									<?php printf( __( 'View all posts by %s <span class="meta-nav">&rarr;</span>', 'twentyten' ), get_the_author() ); ?>								</a>							</div><!-- #author-link	-->						</div><!-- #author-description -->					</div><!-- #entry-author-info --><?php endif; ?>					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## -->				<div id="nav-below" class="navigation">					<div class="nav-previous"><?php previous_post_link( '%link', '<span class="meta-nav">' . _x( '&larr;', 'Previous post link', 'twentyten' ) . '</span> %title' ); ?></div>					<div class="nav-next"><?php next_post_link( '%link', '%title <span class="meta-nav">' . _x( '&rarr;', 'Next post link', 'twentyten' ) . '</span>' ); ?></div>				</div><!-- #nav-below -->				<?php comments_template( '', true ); ?><?php endwhile; // end of the loop. ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * WordPress Comment Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * @uses $wpdb * * @param string $comment_author * @param string $comment_date * @return mixed Comment ID on success. */function comment_exists($comment_author, $comment_date) {	global $wpdb;	$comment_author = stripslashes($comment_author);	$comment_date = stripslashes($comment_date);	return $wpdb->get_var( $wpdb->prepare("SELECT comment_post_ID FROM $wpdb->comments			WHERE comment_author = %s AND comment_date = %s", $comment_author, $comment_date) );}/** * {@internal Missing Short Description}} * * @since unknown */function edit_comment() {	$comment_post_ID = (int) $_POST['comment_post_ID'];	if (!current_user_can( 'edit_post', $comment_post_ID ))		wp_die( __('You are not allowed to edit comments on this post, so you cannot edit this comment.' ));	$_POST['comment_author'] = $_POST['newcomment_author'];	$_POST['comment_author_email'] = $_POST['newcomment_author_email'];	$_POST['comment_author_url'] = $_POST['newcomment_author_url'];	$_POST['comment_approved'] = $_POST['comment_status'];	$_POST['comment_content'] = $_POST['content'];	$_POST['comment_ID'] = (int) $_POST['comment_ID'];	foreach ( array ('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $_POST['hidden_' . $timeunit] ) && $_POST['hidden_' . $timeunit] != $_POST[$timeunit] ) {			$_POST['edit_date'] = '1';			break;		}	}	if (!empty ( $_POST['edit_date'] ) ) {		$aa = $_POST['aa'];		$mm = $_POST['mm'];		$jj = $_POST['jj'];		$hh = $_POST['hh'];		$mn = $_POST['mn'];		$ss = $_POST['ss'];		$jj = ($jj > 31 ) ? 31 : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$_POST['comment_date'] = "$aa-$mm-$jj $hh:$mn:$ss";	}	wp_update_comment( $_POST);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_comment_to_edit( $id ) {	if ( !$comment = get_comment($id) )		return false;	$comment->comment_ID = (int) $comment->comment_ID;	$comment->comment_post_ID = (int) $comment->comment_post_ID;	$comment->comment_content = format_to_edit( $comment->comment_content );	$comment->comment_content = apply_filters( 'comment_edit_pre', $comment->comment_content);	$comment->comment_author = format_to_edit( $comment->comment_author );	$comment->comment_author_email = format_to_edit( $comment->comment_author_email );	$comment->comment_author_url = format_to_edit( $comment->comment_author_url );	$comment->comment_author_url = esc_url($comment->comment_author_url);	return $comment;}/** * Get the number of pending comments on a post or posts * * @since unknown * @uses $wpdb * * @param int|array $post_id Either a single Post ID or an array of Post IDs * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs */function get_pending_comments_num( $post_id ) {	global $wpdb;	$single = false;	if ( !is_array($post_id) ) {		$post_id_array = (array) $post_id;		$single = true;	} else {		$post_id_array = $post_id;	}	$post_id_array = array_map('intval', $post_id_array);	$post_id_in = "'" . implode("', '", $post_id_array) . "'";	$pending = $wpdb->get_results( "SELECT comment_post_ID, COUNT(comment_ID) as num_comments FROM $wpdb->comments WHERE comment_post_ID IN ( $post_id_in ) AND comment_approved = '0' GROUP BY comment_post_ID", ARRAY_A );	if ( $single ) {		if ( empty($pending) )			return 0;		else			return absint($pending[0]['num_comments']);	}	$pending_keyed = array();	// Default to zero pending for all posts in request	foreach ( $post_id_array as $id )		$pending_keyed[$id] = 0;	if ( !empty($pending) )		foreach ( $pending as $pend )			$pending_keyed[$pend['comment_post_ID']] = absint($pend['num_comments']);	return $pending_keyed;}/** * Add avatars to relevant places in admin, or try to. * * @since 2.5.0 * @uses $comment * * @param string $name User name. * @return string Avatar with Admin name. */function floated_admin_avatar( $name ) {	global $comment;	$avatar = get_avatar( $comment, 32 );	return "$avatar $name";}function enqueue_comment_hotkeys_js() {	if ( 'true' == get_user_option( 'comment_shortcuts' ) )		wp_enqueue_script( 'jquery-table-hotkeys' );}if ( is_admin() && isset($pagenow) && ('edit-comments.php' == $pagenow || 'edit.php' == $pagenow) ) {	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );}?>
<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * Update/Install Plugin/Theme administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');include_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';if ( isset($_GET['action']) ) {	$plugin = isset($_REQUEST['plugin']) ? trim($_REQUEST['plugin']) : '';	$theme = isset($_REQUEST['theme']) ? urldecode($_REQUEST['theme']) : '';	$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';	if ( 'update-selected' == $action ) {		if ( ! current_user_can( 'update_plugins' ) )			wp_die( __( 'You do not have sufficient permissions to update plugins for this site.' ) );		check_admin_referer( 'bulk-update-plugins' );		if ( isset( $_GET['plugins'] ) )			$plugins = explode( ',', stripslashes($_GET['plugins']) );		elseif ( isset( $_POST['checked'] ) )			$plugins = (array) $_POST['checked'];		else			$plugins = array();		$plugins = array_map('urldecode', $plugins);		$url = 'update.php?action=update-selected&amp;plugins=' . urlencode(implode(',', $plugins));		$nonce = 'bulk-update-plugins';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Plugin_Upgrader( new Bulk_Plugin_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $plugins );		iframe_footer();	} elseif ( 'upgrade-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('upgrade-plugin_' . $plugin);		$title = __('Upgrade Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugins.php';		require_once('./admin-header.php');		$nonce = 'upgrade-plugin_' . $plugin;		$url = 'update.php?action=upgrade-plugin&plugin=' . $plugin;		$upgrader = new Plugin_Upgrader( new Plugin_Upgrader_Skin( compact('title', 'nonce', 'url', 'plugin') ) );		$upgrader->upgrade($plugin);		include('./admin-footer.php');	} elseif ('activate-plugin' == $action ) {		if ( ! current_user_can('update_plugins') )			wp_die(__('You do not have sufficient permissions to update plugins for this site.'));		check_admin_referer('activate-plugin_' . $plugin);		if ( ! isset($_GET['failure']) && ! isset($_GET['success']) ) {			wp_redirect( 'update.php?action=activate-plugin&failure=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			activate_plugin( $plugin, '', ! empty( $_GET['networkwide'] ) );			wp_redirect( 'update.php?action=activate-plugin&success=true&plugin=' . $plugin . '&_wpnonce=' . $_GET['_wpnonce'] );			die();		}		iframe_header( __('Plugin Reactivation'), true );		if ( isset($_GET['success']) )			echo '<p>' . __('Plugin reactivated successfully.') . '</p>';		if ( isset($_GET['failure']) ){			echo '<p>' . __('Plugin failed to reactivate due to a fatal error.') . '</p>';			if ( defined('E_RECOVERABLE_ERROR') )				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR);			else				error_reporting(E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING);			@ini_set('display_errors', true); //Ensure that Fatal errors are displayed.			include(WP_PLUGIN_DIR . '/' . $plugin);		}		iframe_footer();	} elseif ( 'install-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		include_once ABSPATH . 'wp-admin/includes/plugin-install.php'; //for plugins_api..		check_admin_referer('install-plugin_' . $plugin);		$api = plugins_api('plugin_information', array('slug' => $plugin, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		$title = __('Plugin Install');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-plugin_' . $plugin;		$url = 'update.php?action=install-plugin&plugin=' . $plugin;		if ( isset($_GET['from']) )			$url .= '&from=' . urlencode(stripslashes($_GET['from']));		$type = 'web'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-plugin' == $action ) {		if ( ! current_user_can('install_plugins') )			wp_die(__('You do not have sufficient permissions to install plugins for this site.'));		check_admin_referer('plugin-upload');		$file_upload = new File_Upload_Upgrader('pluginzip', 'package');		$title = __('Upload Plugin');		$parent_file = 'plugins.php';		$submenu_file = 'plugin-install.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Plugin from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'plugin-upload';		$url = add_query_arg(array('package' => $file_upload->filename ), 'update.php?action=upload-plugin');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} elseif ( 'upgrade-theme' == $action ) {		if ( ! current_user_can('update_themes') )			wp_die(__('You do not have sufficient permissions to update themes for this site.'));		check_admin_referer('upgrade-theme_' . $theme);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Upgrade Theme');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$nonce = 'upgrade-theme_' . $theme;		$url = 'update.php?action=upgrade-theme&theme=' . $theme;		$upgrader = new Theme_Upgrader( new Theme_Upgrader_Skin( compact('title', 'nonce', 'url', 'theme') ) );		$upgrader->upgrade($theme);		include('./admin-footer.php');	} elseif ( 'update-selected-themes' == $action ) {		if ( ! current_user_can( 'update_themes' ) )			wp_die( __( 'You do not have sufficient permissions to update themes for this site.' ) );		check_admin_referer( 'bulk-update-themes' );		if ( isset( $_GET['themes'] ) )			$themes = explode( ',', stripslashes($_GET['themes']) );		elseif ( isset( $_POST['checked'] ) )			$themes = (array) $_POST['checked'];		else			$themes = array();		$themes = array_map('urldecode', $themes);		$url = 'update.php?action=update-selected-themes&amp;themes=' . urlencode(implode(',', $themes));		$nonce = 'bulk-update-themes';		require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );		wp_enqueue_script('jquery');		iframe_header();		$upgrader = new Theme_Upgrader( new Bulk_Theme_Upgrader_Skin( compact( 'nonce', 'url' ) ) );		$upgrader->bulk_upgrade( $themes );		iframe_footer();	} elseif ( 'install-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		include_once ABSPATH . 'wp-admin/includes/theme-install.php'; //for themes_api..		check_admin_referer('install-theme_' . $theme);		$api = themes_api('theme_information', array('slug' => $theme, 'fields' => array('sections' => false) ) ); //Save on a bit of bandwidth.		if ( is_wp_error($api) )	 		wp_die($api);		add_thickbox();		wp_enqueue_script('theme-preview');		$title = __('Install Themes');		$parent_file = 'themes.php';		$submenu_file = 'themes.php';		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme: %s'), $api->name . ' ' . $api->version );		$nonce = 'install-theme_' . $theme;		$url = 'update.php?action=install-theme&theme=' . $theme;		$type = 'web'; //Install theme type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('title', 'url', 'nonce', 'plugin', 'api') ) );		$upgrader->install($api->download_link);		include('./admin-footer.php');	} elseif ( 'upload-theme' == $action ) {		if ( ! current_user_can('install_themes') )			wp_die(__('You do not have sufficient permissions to install themes for this site.'));		check_admin_referer('theme-upload');		$file_upload = new File_Upload_Upgrader('themezip', 'package');		$title = __('Upload Theme');		$parent_file = 'themes.php';		$submenu_file = 'theme-install.php';		add_thickbox();		wp_enqueue_script('theme-preview');		require_once('./admin-header.php');		$title = sprintf( __('Installing Theme from uploaded file: %s'), basename( $file_upload->filename ) );		$nonce = 'theme-upload';		$url = add_query_arg(array('package' => $file_upload->filename), 'update.php?action=upload-theme');		$type = 'upload'; //Install plugin type, From Web or an Upload.		$upgrader = new Theme_Upgrader( new Theme_Installer_Skin( compact('type', 'title', 'nonce', 'url') ) );		$upgrader->install( $file_upload->package );		include('./admin-footer.php');	} else {		do_action('update-custom_' . $action);	}}
<?php/** * Edit attachments table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( have_posts() ) { ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('upload'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('upload', false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:post"><?phpadd_filter('the_title','esc_html');$alt = '';$posts_columns = get_column_headers('upload');$hidden = get_hidden_columns('upload');while ( have_posts() ) : the_post();if ( $is_trash && $post->post_status != 'trash' )	continue;elseif ( !$is_trash && $post->post_status == 'trash' )	continue;$alt = ( 'alternate' == $alt ) ? '' : 'alternate';global $current_user;$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );$att_title = _draft_or_post_title();?>	<tr id='post-<?php echo $id; ?>' class='<?php echo trim( $alt . ' author-' . $post_owner . ' status-' . $post->post_status ); ?>' valign="top"><?phpforeach ($posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can('edit_post', $post->ID) ) { ?><input type="checkbox" name="media[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'icon':		$attributes = 'class="column-icon media-icon"' . $style;		?>		<td <?php echo $attributes ?>><?php			if ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) {				if ( $is_trash ) echo $thumb;				else {?>				<a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>">					<?php echo $thumb; ?>				</a><?php			}			}		?></td>		<?php		// TODO		break;	case 'media':		?>		<td <?php echo $attributes ?>><strong><?php if ( $is_trash ) echo $att_title; else { ?><a href="<?php echo get_edit_post_link( $post->ID, true ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $att_title; ?></a><?php } ?></strong>		<p>		<?php		if ( preg_match( '/^.*?\.(\w+)$/', get_attached_file( $post->ID ), $matches ) )			echo esc_html( strtoupper( $matches[1] ) );		else			echo strtoupper( str_replace( 'image/', '', get_post_mime_type() ) );		?>		</p>		<?php		$actions = array();		if ( current_user_can('edit_post', $post->ID) && !$is_trash )			$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '">' . __('Edit') . '</a>';		if ( current_user_can('delete_post', $post->ID) ) {			if ( $is_trash )				$actions['untrash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=untrash&amp;post=$post->ID", 'untrash-attachment_' . $post->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS && MEDIA_TRASH )				$actions['trash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=trash&amp;post=$post->ID", 'trash-attachment_' . $post->ID) . "'>" . __('Trash') . "</a>";			if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) {				$delete_ays = (!$is_trash && !MEDIA_TRASH) ? " onclick='return showNotice.warn();'" : '';				$actions['delete'] = "<a class='submitdelete'$delete_ays href='" . wp_nonce_url("post.php?action=delete&amp;post=$post->ID", 'delete-attachment_' . $post->ID) . "'>" . __('Delete Permanently') . "</a>";			}		}		if ( !$is_trash ) {			$title =_draft_or_post_title($post->post_parent);			$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters( 'media_row_actions', $actions, $post );		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		?></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><?php the_author() ?></td>		<?php		break;	case 'tags':		?>		<td <?php echo $attributes ?>><?php		$tags = get_the_tags();		if ( !empty( $tags ) ) {			$out = array();			foreach ( $tags as $c )				$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";			echo join( ', ', $out );		} else {			_e('No Tags');		}		?></td>		<?php		break;	case 'desc':		?>		<td <?php echo $attributes ?>><?php echo has_excerpt() ? $post->post_excerpt : ''; ?></td>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $post->post_date;			$time = get_post_time( 'G', true, $post, false );			if ( ( abs($t_diff = time() - $time) ) < 86400 ) {				if ( $t_diff < 0 )					$h_time = sprintf( __('%s from now'), human_time_diff( $time ) );				else					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			} else {				$h_time = mysql2date(__('Y/m/d'), $m_time);			}		}		?>		<td <?php echo $attributes ?>><?php echo $h_time ?></td>		<?php		break;	case 'parent':		if ( $post->post_parent > 0 ) {			if ( get_post($post->post_parent) ) {				$title =_draft_or_post_title($post->post_parent);			}			?>			<td <?php echo $attributes ?>><strong><a href="<?php echo get_edit_post_link( $post->post_parent ); ?>"><?php echo $title ?></a></strong>, <?php echo get_the_time(__('Y/m/d')); ?></td>			<?php		} else {			?>			<td <?php echo $attributes ?>><?php _e('(Unattached)'); ?><br />			<a class="hide-if-no-js" onclick="findPosts.open('media[]','<?php echo $post->ID ?>');return false;" href="#the-list"><?php _e('Attach'); ?></a></td>			<?php		}		break;	case 'comments':		$attributes = 'class="comments column-comments num"' . $style;		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $post->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'actions':		?>		<td <?php echo $attributes ?>>		<a href="media.php?action=edit&amp;attachment_id=<?php the_ID(); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php _e('Edit'); ?></a> |		<a href="<?php the_permalink(); ?>"><?php _e('Get permalink'); ?></a>		</td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_media_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?>	</tr><?php endwhile; ?>	</tbody></table><?php } else { ?><p><?php _e('No media attachments found.') ?></p><?php} // end if ( have_posts() )?>
<?php/** * Redirects to the Comments RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'comments_rss2_url' ), 301 );?>
<?php/** * Deprecated functions from WordPress MU and the multisite feature. You shouldn't * use these functions and look for the alternatives instead. The functions will be * removed in a later version. * * @package WordPress * @subpackage Deprecated * @since 3.0.0 *//* * Deprecated functions come here to die. *//** * @since unknown * @deprecated 3.0.0 * @deprecated Use wp_generate_password() * @see wp_generate_password() */function generate_random_password( $len = 8 ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_generate_password()' );	return wp_generate_password( $len );}/** * Determine if user is a site admin. * * Plugins should use is_multisite() instead of checking if this function exists * to determine if multisite is enabled. * * This function must reside in a file included only if is_multisite() due to * legacy function_exists() checks to determine if multisite is enabled. * * @since MU * @deprecated 3.0.0 * @deprecated Use is_super_admin() * @see is_super_admin() * @see is_multisite() * */function is_site_admin( $user_login = '' ) {	_deprecated_function( __FUNCTION__, '3.0', 'is_super_admin()' );	if ( empty( $user_login ) ) {		$user_id = get_current_user_id();		if ( !$user_id )			return false;	} else {		$user = new WP_User( null, $user_login) ;		if ( empty( $user->id ) )			return false;		$user_id = $user->id;	}	return is_super_admin( $user_id );}if ( !function_exists( 'graceful_fail' ) ) :/** * @since MU * @deprecated 3.0.0 * @deprecated Use wp_die() * @see wp_die() */function graceful_fail( $message ) {	_deprecated_function( __FUNCTION__, '3.0', 'wp_die()' );	$message = apply_filters( 'graceful_fail', $message );	$message_template = apply_filters( 'graceful_fail_template','<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Error!</title><style type="text/css">img {	border: 0;}body {line-height: 1.6em; font-family: Georgia, serif; width: 390px; margin: auto;text-align: center;}.message {	font-size: 22px;	width: 350px;	margin: auto;}</style></head><body><p class="message">%s</p></body></html>' );	die( sprintf( $message_template, $message ) );}endif;/** * @since MU * @deprecated 3.0.0 * @deprecated Use get_user_by() * @see get_user_by() */function get_user_details( $username ) {	_deprecated_function( __FUNCTION__, '3.0', 'get_user_by()' );	return get_user_by('login', $username);}/** * @since MU * @deprecated 3.0.0 * @deprecated Use clean_post_cache() * @see clean_post_cache() */function clear_global_post_cache( $post_id ) {	_deprecated_function( __FUNCTION__, '3.0', 'clean_post_cache()' );}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_main_site() * @see is_main_site() */function is_main_blog() {	_deprecated_function( __FUNCTION__, '3.0', 'is_main_site()' );	return is_main_site();}/** * @since MU * @deprecated 3.0.0 * @deprecated Use is_email() * @see is_email() */function validate_email( $email, $check_domain = true) {	_deprecated_function( __FUNCTION__, '3.0', 'is_email()' );	return is_email( $email, $check_domain );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_blog_list( $start = 0, $num = 10, $deprecated = '' ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	global $wpdb;	$blogs = $wpdb->get_results( $wpdb->prepare("SELECT blog_id, domain, path FROM $wpdb->blogs WHERE site_id = %d AND public = '1' AND archived = '0' AND mature = '0' AND spam = '0' AND deleted = '0' ORDER BY registered DESC", $wpdb->siteid), ARRAY_A );	foreach ( (array) $blogs as $details ) {		$blog_list[ $details['blog_id'] ] = $details;		$blog_list[ $details['blog_id'] ]['postcount'] = $wpdb->get_var( "SELECT COUNT(ID) FROM " . $wpdb->get_blog_prefix( $details['blog_id'] ). "posts WHERE post_status='publish' AND post_type='post'" );	}	unset( $blogs );	$blogs = $blog_list;	if ( false == is_array( $blogs ) )		return array();	if ( $num == 'all' )		return array_slice( $blogs, $start, count( $blogs ) );	else		return array_slice( $blogs, $start, $num );}/** * @since MU * @deprecated 3.0.0 * @deprecated Don't use this, really. */function get_most_active_blogs( $num = 10, $display = true ) {	_deprecated_function( __FUNCTION__, '3.0', "Don't use this, really." );	$blogs = get_blog_list( 0, 'all', false ); // $blog_id -> $details	if ( is_array( $blogs ) ) {		reset( $blogs );		foreach ( (array) $blogs as $key => $details ) {			$most_active[ $details['blog_id'] ] = $details['postcount'];			$blog_list[ $details['blog_id'] ] = $details; // array_slice() removes keys!!		}		arsort( $most_active );		reset( $most_active );		foreach ( (array) $most_active as $key => $details )			$t[ $key ] = $blog_list[ $key ];		unset( $most_active );		$most_active = $t;	}	if ( $display == true ) {		if ( is_array( $most_active ) ) {			reset( $most_active );			foreach ( (array) $most_active as $key => $details ) {				$url = esc_url('http://' . $details['domain'] . $details['path']);				echo '<li>' . $details['postcount'] . " <a href='$url'>$url</a></li>";			}		}	}	return array_slice( $most_active, 0, $num );}?>
<?php/** * Class for a set of entries for translation and their associated headers * * @version $Id: translations.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage translations */require_once dirname(__FILE__) . '/entry.php';if ( !class_exists( 'Translations' ) ):class Translations {	var $entries = array();	var $headers = array();	/**	 * Add entry to the PO structure	 *	 * @param object &$entry	 * @return bool true on success, false if the entry doesn't have a key	 */	function add_entry($entry) {		if (is_array($entry)) {			$entry = new Translation_Entry($entry);		}		$key = $entry->key();		if (false === $key) return false;		$this->entries[$key] = &$entry;		return true;	}	/**	 * Sets $header PO header to $value	 *	 * If the header already exists, it will be overwritten	 *	 * TODO: this should be out of this class, it is gettext specific	 *	 * @param string $header header name, without trailing :	 * @param string $value header value, without trailing \n	 */	function set_header($header, $value) {		$this->headers[$header] = $value;	}	function set_headers(&$headers) {		foreach($headers as $header => $value) {			$this->set_header($header, $value);		}	}	function get_header($header) {		return isset($this->headers[$header])? $this->headers[$header] : false;	}	function translate_entry(&$entry) {		$key = $entry->key();		return isset($this->entries[$key])? $this->entries[$key] : false;	}	function translate($singular, $context=null) {		$entry = new Translation_Entry(array('singular' => $singular, 'context' => $context));		$translated = $this->translate_entry($entry);		return ($translated && !empty($translated->translations))? $translated->translations[0] : $singular;	}	/**	 * Given the number of items, returns the 0-based index of the plural form to use	 *	 * Here, in the base Translations class, the commong logic for English is implmented:	 * 	0 if there is one element, 1 otherwise	 *	 * This function should be overrided by the sub-classes. For example MO/PO can derive the logic	 * from their headers.	 *	 * @param integer $count number of items	 */	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {		$entry = new Translation_Entry(array('singular' => $singular, 'plural' => $plural, 'context' => $context));		$translated = $this->translate_entry($entry);		$index = $this->select_plural_form($count);		$total_plural_forms = $this->get_plural_forms_count();		if ($translated && 0 <= $index && $index < $total_plural_forms &&				is_array($translated->translations) &&				isset($translated->translations[$index]))			return $translated->translations[$index];		else			return 1 == $count? $singular : $plural;	}	/**	 * Merge $other in the current object.	 *	 * @param Object &$other Another Translation object, whose translations will be merged in this one	 * @return void	 **/	function merge_with(&$other) {		foreach( $other->entries as $entry ) {			$this->entries[$entry->key()] = $entry;		}	}}class Gettext_Translations extends Translations {	/**	 * The gettext implmentation of select_plural_form.	 *	 * It lives in this class, because there are more than one descendand, which will use it and	 * they can't share it effectively.	 *	 */	function gettext_select_plural_form($count) {		if (!isset($this->_gettext_select_plural_form) || is_null($this->_gettext_select_plural_form)) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}		return call_user_func($this->_gettext_select_plural_form, $count);	}	function nplurals_and_expression_from_header($header) {		if (preg_match('/^\s*nplurals\s*=\s*(\d+)\s*;\s+plural\s*=\s*(.+)$/', $header, $matches)) {			$nplurals = (int)$matches[1];			$expression = trim($this->parenthesize_plural_exression($matches[2]));			return array($nplurals, $expression);		} else {			return array(2, 'n != 1');		}	}	/**	 * Makes a function, which will return the right translation index, according to the	 * plural forms header	 */	function make_plural_form_function($nplurals, $expression) {		$expression = str_replace('n', '$n', $expression);		$func_body = "			\$index = (int)($expression);			return (\$index < $nplurals)? \$index : $nplurals - 1;";		return create_function('$n', $func_body);	}	/**	 * Adds parantheses to the inner parts of ternary operators in	 * plural expressions, because PHP evaluates ternary oerators from left to right	 *	 * @param string $expression the expression without parentheses	 * @return string the expression with parentheses added	 */	function parenthesize_plural_exression($expression) {		$expression .= ';';		$res = '';		$depth = 0;		for ($i = 0; $i < strlen($expression); ++$i) {			$char = $expression[$i];			switch ($char) {				case '?':					$res .= ' ? (';					$depth++;					break;				case ':':					$res .= ') : (';					break;				case ';':					$res .= str_repeat(')', $depth) . ';';					$depth= 0;					break;				default:					$res .= $char;			}		}		return rtrim($res, ';');	}	function make_headers($translation) {		$headers = array();		// sometimes \ns are used instead of real new lines		$translation = str_replace('\n', "\n", $translation);		$lines = explode("\n", $translation);		foreach($lines as $line) {			$parts = explode(':', $line, 2);			if (!isset($parts[1])) continue;			$headers[trim($parts[0])] = trim($parts[1]);		}		return $headers;	}	function set_header($header, $value) {		parent::set_header($header, $value);		if ('Plural-Forms' == $header) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}	}}endif;if ( !class_exists( 'NOOP_Translations' ) ):/** * Provides the same interface as Translations, but doesn't do anything */class NOOP_Translations {	var $entries = array();	var $headers = array();	function add_entry($entry) {		return true;	}	function set_header($header, $value) {	}	function set_headers(&$headers) {	}	function get_header($header) {		return false;	}	function translate_entry(&$entry) {		return false;	}	function translate($singular, $context=null) {		return $singular;	}	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {			return 1 == $count? $singular : $plural;	}	function merge_with(&$other) {	}}endif;
<?php/** * API for creating dynamic sidebar without hardcoding functionality into * themes. Includes both internal WordPress routines and theme use routines. * * This functionality was found in a plugin before WordPress 2.2 release which * included it in the core from that point on. * * @link http://codex.wordpress.org/Plugins/WordPress_Widgets WordPress Widgets * @link http://codex.wordpress.org/Plugins/WordPress_Widgets_Api Widgets API * * @package WordPress * @subpackage Widgets *//** * This class must be extended for each widget and WP_Widget::widget(), WP_Widget::update() * and WP_Widget::form() need to be over-ridden. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget {	var $id_base;			// Root id for all widgets of this type.	var $name;				// Name for this widget type.	var $widget_options;	// Option array passed to wp_register_sidebar_widget()	var $control_options;	// Option array passed to wp_register_widget_control()	var $number = false;	// Unique ID number of the current instance.	var $id = false;		// Unique ID string of the current instance (id_base-number)	var $updated = false;	// Set true when we update the data after a POST submit - makes sure we don't do it twice.	// Member functions that you must over-ride.	/** Echo the widget content.	 *	 * Subclasses should over-ride this function to generate their widget code.	 *	 * @param array $args Display arguments including before_title, after_title, before_widget, and after_widget.	 * @param array $instance The settings for the particular instance of the widget	 */	function widget($args, $instance) {		die('function WP_Widget::widget() must be over-ridden in a sub-class.');	}	/** Update a particular instance.	 *	 * This function should check that $new_instance is set correctly.	 * The newly calculated value of $instance should be returned.	 * If "false" is returned, the instance won't be saved/updated.	 *	 * @param array $new_instance New settings for this instance as input by the user via form()	 * @param array $old_instance Old settings for this instance	 * @return array Settings to save or bool false to cancel saving	 */	function update($new_instance, $old_instance) {		return $new_instance;	}	/** Echo the settings update form	 *	 * @param array $instance Current settings	 */	function form($instance) {		echo '<p class="no-options-widget">' . __('There are no options for this widget.') . '</p>';		return 'noform';	}	// Functions you'll need to call.	/**	 * PHP4 constructor	 */	function WP_Widget( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->__construct( $id_base, $name, $widget_options, $control_options );	}	/**	 * PHP5 constructor	 *	 * @param string $id_base Optional Base ID for the widget, lower case,	 * if left empty a portion of the widget's class name will be used. Has to be unique.	 * @param string $name Name for the widget displayed on the configuration page.	 * @param array $widget_options Optional Passed to wp_register_sidebar_widget()	 *	 - description: shown on the configuration page	 *	 - classname	 * @param array $control_options Optional Passed to wp_register_widget_control()	 *	 - width: required if more than 250px	 *	 - height: currently not used but may be needed in the future	 */	function __construct( $id_base = false, $name, $widget_options = array(), $control_options = array() ) {		$this->id_base = empty($id_base) ? preg_replace( '/(wp_)?widget_/', '', strtolower(get_class($this)) ) : strtolower($id_base);		$this->name = $name;		$this->option_name = 'widget_' . $this->id_base;		$this->widget_options = wp_parse_args( $widget_options, array('classname' => $this->option_name) );		$this->control_options = wp_parse_args( $control_options, array('id_base' => $this->id_base) );	}	/**	 * Constructs name attributes for use in form() fields	 *	 * This function should be used in form() methods to create name attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string Name attribute for $field_name	 */	function get_field_name($field_name) {		return 'widget-' . $this->id_base . '[' . $this->number . '][' . $field_name . ']';	}	/**	 * Constructs id attributes for use in form() fields	 *	 * This function should be used in form() methods to create id attributes for fields to be saved by update()	 *	 * @param string $field_name Field name	 * @return string ID attribute for $field_name	 */	function get_field_id($field_name) {		return 'widget-' . $this->id_base . '-' . $this->number . '-' . $field_name;	}	// Private Functions. Don't worry about these.	function _register() {		$settings = $this->get_settings();		$empty = true;		if ( is_array($settings) ) {			foreach ( array_keys($settings) as $number ) {				if ( is_numeric($number) ) {					$this->_set($number);					$this->_register_one($number);					$empty = false;				}			}		}		if ( $empty ) {			// If there are none, we register the widget's existance with a			// generic template			$this->_set(1);			$this->_register_one();		}	}	function _set($number) {		$this->number = $number;		$this->id = $this->id_base . '-' . $number;	}	function _get_display_callback() {		return array(&$this, 'display_callback');	}	function _get_update_callback() {		return array(&$this, 'update_callback');	}	function _get_form_callback() {		return array(&$this, 'form_callback');	}	/** Generate the actual widget content.	 *	Just finds the instance and calls widget().	 *	Do NOT over-ride this function. */	function display_callback( $args, $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$this->_set( $widget_args['number'] );		$instance = $this->get_settings();		if ( array_key_exists( $this->number, $instance ) ) {			$instance = $instance[$this->number];			// filters the widget's settings, return false to stop displaying the widget			$instance = apply_filters('widget_display_callback', $instance, $this, $args);			if ( false !== $instance )				$this->widget($args, $instance);		}	}	/** Deal with changed settings.	 *	Do NOT over-ride this function. */	function update_callback( $widget_args = 1 ) {		global $wp_registered_widgets;		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		// We need to update the data		if ( $this->updated )			return;		$sidebars_widgets = wp_get_sidebars_widgets();		if ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {			// Delete the settings for this instance of the widget			if ( isset($_POST['the-widget-id']) )				$del_id = $_POST['the-widget-id'];			else				return;			if ( isset($wp_registered_widgets[$del_id]['params'][0]['number']) ) {				$number = $wp_registered_widgets[$del_id]['params'][0]['number'];				if ( $this->id_base . '-' . $number == $del_id )					unset($all_instances[$number]);			}		} else {			if ( isset($_POST['widget-' . $this->id_base]) && is_array($_POST['widget-' . $this->id_base]) ) {				$settings = $_POST['widget-' . $this->id_base];			} elseif ( isset($_POST['id_base']) && $_POST['id_base'] == $this->id_base ) {				$num = $_POST['multi_number'] ? (int) $_POST['multi_number'] : (int) $_POST['widget_number'];				$settings = array( $num => array() );			} else {				return;			}			foreach ( $settings as $number => $new_instance ) {				$new_instance = stripslashes_deep($new_instance);				$this->_set($number);				$old_instance = isset($all_instances[$number]) ? $all_instances[$number] : array();				$instance = $this->update($new_instance, $old_instance);				// filters the widget's settings before saving, return false to cancel saving (keep the old settings if updating)				$instance = apply_filters('widget_update_callback', $instance, $new_instance, $old_instance, $this);				if ( false !== $instance )					$all_instances[$number] = $instance;				break; // run only once			}		}		$this->save_settings($all_instances);		$this->updated = true;	}	/** Generate the control form.	 *	Do NOT over-ride this function. */	function form_callback( $widget_args = 1 ) {		if ( is_numeric($widget_args) )			$widget_args = array( 'number' => $widget_args );		$widget_args = wp_parse_args( $widget_args, array( 'number' => -1 ) );		$all_instances = $this->get_settings();		if ( -1 == $widget_args['number'] ) {			// We echo out a form where 'number' can be set later			$this->_set('__i__');			$instance = array();		} else {			$this->_set($widget_args['number']);			$instance = $all_instances[ $widget_args['number'] ];		}		// filters the widget admin form before displaying, return false to stop displaying it		$instance = apply_filters('widget_form_callback', $instance, $this);		$return = null;		if ( false !== $instance ) {			$return = $this->form($instance);			// add extra fields in the widget form - be sure to set $return to null if you add any			// if the widget has no form the text echoed from the default form method can be hidden using css			do_action_ref_array( 'in_widget_form', array(&$this, &$return, $instance) );		}		return $return;	}	/** Helper function: Registers a single instance. */	function _register_one($number = -1) {		wp_register_sidebar_widget(	$this->id, $this->name,	$this->_get_display_callback(), $this->widget_options, array( 'number' => $number ) );		_register_widget_update_callback( $this->id_base, $this->_get_update_callback(), $this->control_options, array( 'number' => -1 ) );		_register_widget_form_callback(	$this->id, $this->name,	$this->_get_form_callback(), $this->control_options, array( 'number' => $number ) );	}	function save_settings($settings) {		$settings['_multiwidget'] = 1;		update_option( $this->option_name, $settings );	}	function get_settings() {		$settings = get_option($this->option_name);		if ( false === $settings && isset($this->alt_option_name) )			$settings = get_option($this->alt_option_name);		if ( !is_array($settings) )			$settings = array();		if ( !array_key_exists('_multiwidget', $settings) ) {			// old format, conver if single widget			$settings = wp_convert_widget_settings($this->id_base, $this->option_name, $settings);		}		unset($settings['_multiwidget'], $settings['__i__']);		return $settings;	}}/** * Singleton that registers and instantiates WP_Widget classes. * * @package WordPress * @subpackage Widgets * @since 2.8 */class WP_Widget_Factory {	var $widgets = array();	function WP_Widget_Factory() {		add_action( 'widgets_init', array( &$this, '_register_widgets' ), 100 );	}	function register($widget_class) {		$this->widgets[$widget_class] = & new $widget_class();	}	function unregister($widget_class) {		if ( isset($this->widgets[$widget_class]) )			unset($this->widgets[$widget_class]);	}	function _register_widgets() {		global $wp_registered_widgets;		$keys = array_keys($this->widgets);		$registered = array_keys($wp_registered_widgets);		$registered = array_map('_get_widget_id_base', $registered);		foreach ( $keys as $key ) {			// don't register new widget if old widget with the same id is already registered			if ( in_array($this->widgets[$key]->id_base, $registered, true) ) {				unset($this->widgets[$key]);				continue;			}			$this->widgets[$key]->_register();		}	}}/* Global Variables *//** @ignore */global $wp_registered_sidebars, $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;/** * Stores the sidebars, since many themes can have more than one. * * @global array $wp_registered_sidebars * @since 2.2.0 */$wp_registered_sidebars = array();/** * Stores the registered widgets. * * @global array $wp_registered_widgets * @since 2.2.0 */$wp_registered_widgets = array();/** * Stores the registered widget control (options). * * @global array $wp_registered_widget_controls * @since 2.2.0 */$wp_registered_widget_controls = array();$wp_registered_widget_updates = array();/** * Private */$_wp_sidebars_widgets = array();/** * Private */ $_wp_deprecated_widgets_callbacks = array( 	'wp_widget_pages',	'wp_widget_pages_control',	'wp_widget_calendar',	'wp_widget_calendar_control',	'wp_widget_archives',	'wp_widget_archives_control',	'wp_widget_links',	'wp_widget_meta',	'wp_widget_meta_control',	'wp_widget_search',	'wp_widget_recent_entries',	'wp_widget_recent_entries_control',	'wp_widget_tag_cloud',	'wp_widget_tag_cloud_control',	'wp_widget_categories',	'wp_widget_categories_control',	'wp_widget_text',	'wp_widget_text_control',	'wp_widget_rss',	'wp_widget_rss_control',	'wp_widget_recent_comments',	'wp_widget_recent_comments_control' );/* Template tags & API functions *//** * Register a widget * * Registers a WP_Widget widget * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function register_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->register($widget_class);}/** * Unregister a widget * * Unregisters a WP_Widget widget. Useful for unregistering default widgets. * Run within a function hooked to the widgets_init action. * * @since 2.8.0 * * @see WP_Widget * @see WP_Widget_Factory * @uses WP_Widget_Factory * * @param string $widget_class The name of a class that extends WP_Widget */function unregister_widget($widget_class) {	global $wp_widget_factory;	$wp_widget_factory->unregister($widget_class);}/** * Creates multiple sidebars. * * If you wanted to quickly create multiple sidebars for a theme or internally. * This function will allow you to do so. If you don't pass the 'name' and/or * 'id' in $args, then they will be built for you. * * The default for the name is "Sidebar #", with '#' being replaced with the * number the sidebar is currently when greater than one. If first sidebar, the * name will be just "Sidebar". The default for id is "sidebar-" followed by the * number the sidebar creation is currently at. If the id is provided, and mutliple * sidebars are being defined, the id will have "-2" appended, and so on. * * @since 2.2.0 * * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here. * @uses parse_str() Converts a string to an array to be used in the rest of the function. * @uses register_sidebar() Sends single sidebar information [name, id] to this *	function to handle building the sidebar. * * @param int $number Number of sidebars to create. * @param string|array $args Builds Sidebar based off of 'name' and 'id' values. */function register_sidebars($number = 1, $args = array()) {	global $wp_registered_sidebars;	$number = (int) $number;	if ( is_string($args) )		parse_str($args, $args);	for ( $i = 1; $i <= $number; $i++ ) {		$_args = $args;		if ( $number > 1 )			$_args['name'] = isset($args['name']) ? sprintf($args['name'], $i) : sprintf(__('Sidebar %d'), $i);		else			$_args['name'] = isset($args['name']) ? $args['name'] : __('Sidebar');		// Custom specified ID's are suffixed if they exist already.		// Automatically generated sidebar names need to be suffixed regardless starting at -0		if ( isset($args['id']) ) {			$_args['id'] = $args['id'];			$n = 2; // Start at -2 for conflicting custom ID's			while ( isset($wp_registered_sidebars[$_args['id']]) )				$_args['id'] = $args['id'] . '-' . $n++;		} else {			$n = count($wp_registered_sidebars);			do {				$_args['id'] = 'sidebar-' . ++$n;			} while ( isset($wp_registered_sidebars[$_args['id']]) );		}		register_sidebar($_args);	}}/** * Builds the definition for a single sidebar and returns the ID. * * The $args parameter takes either a string or an array with 'name' and 'id' * contained in either usage. It will be noted that the values will be applied * to all sidebars, so if creating more than one, it will be advised to allow * for WordPress to create the defaults for you. * * Example for string would be <code>'name=whatever;id=whatever1'</code> and for * the array it would be <code>array( *    'name' => 'whatever', *    'id' => 'whatever1')</code>. * * name - The name of the sidebar, which presumably the title which will be *     displayed. * id - The unique identifier by which the sidebar will be called by. * before_widget - The content that will prepended to the widgets when they are *     displayed. * after_widget - The content that will be appended to the widgets when they are *     displayed. * before_title - The content that will be prepended to the title when displayed. * after_title - the content that will be appended to the title when displayed. * * <em>Content</em> is assumed to be HTML and should be formatted as such, but * doesn't have to be. * * @since 2.2.0 * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string|array $args Builds Sidebar based off of 'name' and 'id' values * @return string The sidebar id that was added. */function register_sidebar($args = array()) {	global $wp_registered_sidebars;	$i = count($wp_registered_sidebars) + 1;	$defaults = array(		'name' => sprintf(__('Sidebar %d'), $i ),		'id' => "sidebar-$i",		'description' => '',		'before_widget' => '<li id="%1$s" class="widget %2$s">',		'after_widget' => "</li>\n",		'before_title' => '<h2 class="widgettitle">',		'after_title' => "</h2>\n",	);	$sidebar = wp_parse_args( $args, $defaults );	$wp_registered_sidebars[$sidebar['id']] = $sidebar;	add_theme_support('widgets');	do_action( 'register_sidebar', $sidebar );	return $sidebar['id'];}/** * Removes a sidebar from the list. * * @since 2.2.0 * * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID. * * @param string $name The ID of the sidebar when it was added. */function unregister_sidebar( $name ) {	global $wp_registered_sidebars;	if ( isset( $wp_registered_sidebars[$name] ) )		unset( $wp_registered_sidebars[$name] );}/** * Register widget for use in sidebars. * * The default widget option is 'classname' that can be override. * * The function can also be used to unregister widgets when $output_callback * parameter is an empty string. * * @since 2.2.0 * * @uses $wp_registered_widgets Uses stored registered widgets. * @uses $wp_register_widget_defaults Retrieves widget defaults. * * @param int|string $id Widget ID. * @param string $name Widget display title. * @param callback $output_callback Run when widget is called. * @param array|string Optional. $options Widget Options. * @param mixed $params,... Widget parameters to add to widget. * @return null Will return if $output_callback is empty after removing widget. */function wp_register_sidebar_widget($id, $name, $output_callback, $options = array()) {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	if ( empty($output_callback) ) {		unset($wp_registered_widgets[$id]);		return;	}	$id_base = _get_widget_id_base($id);	if ( in_array($output_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($output_callback) ) {		if ( isset($wp_registered_widget_controls[$id]) )			unset($wp_registered_widget_controls[$id]);		if ( isset($wp_registered_widget_updates[$id_base]) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$defaults = array('classname' => $output_callback);	$options = wp_parse_args($options, $defaults);	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $output_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	if ( is_callable($output_callback) && ( !isset($wp_registered_widgets[$id]) || did_action( 'widgets_init' ) ) ) {		do_action( 'wp_register_sidebar_widget', $widget );		$wp_registered_widgets[$id] = $widget;	}}/** * Retrieve description for widget. * * When registering widgets, the options can also include 'description' that * describes the widget for display on the widget administration panel or * in the theme. * * @since 2.5.0 * * @param int|string $id Widget ID. * @return string Widget description, if available. Null on failure to retrieve description. */function wp_widget_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_widgets;	if ( isset($wp_registered_widgets[$id]['description']) )		return esc_html( $wp_registered_widgets[$id]['description'] );}/** * Retrieve description for a sidebar. * * When registering sidebars a 'description' parameter can be included that * describes the sidebar for display on the widget administration panel. * * @since 2.9.0 * * @param int|string $id sidebar ID. * @return string Sidebar description, if available. Null on failure to retrieve description. */function wp_sidebar_description( $id ) {	if ( !is_scalar($id) )		return;	global $wp_registered_sidebars;	if ( isset($wp_registered_sidebars[$id]['description']) )		return esc_html( $wp_registered_sidebars[$id]['description'] );}/** * Remove widget from sidebar. * * @since 2.2.0 * * @param int|string $id Widget ID. */function wp_unregister_sidebar_widget($id) {	do_action( 'wp_unregister_sidebar_widget', $id );	wp_register_sidebar_widget($id, '', '');	wp_unregister_widget_control($id);}/** * Registers widget control callback for customizing options. * * The options contains the 'height', 'width', and 'id_base' keys. The 'height' * option is never used. The 'width' option is the width of the fully expanded * control form, but try hard to use the default width. The 'id_base' is for * multi-widgets (widgets which allow multiple instances such as the text * widget), an id_base must be provided. The widget id will end up looking like * {$id_base}-{$unique_number}. * * @since 2.2.0 * * @param int|string $id Sidebar ID. * @param string $name Sidebar display name. * @param callback $control_callback Run when sidebar is displayed. * @param array|string $options Optional. Widget options. See above long description. * @param mixed $params,... Optional. Additional parameters to add to widget. */function wp_register_widget_control($id, $name, $control_callback, $options = array()) {	global $wp_registered_widget_controls, $wp_registered_widget_updates, $wp_registered_widgets, $_wp_deprecated_widgets_callbacks;	$id = strtolower($id);	$id_base = _get_widget_id_base($id);	if ( empty($control_callback) ) {		unset($wp_registered_widget_controls[$id]);		unset($wp_registered_widget_updates[$id_base]);		return;	}	if ( in_array($control_callback, $_wp_deprecated_widgets_callbacks, true) && !is_callable($control_callback) ) {		if ( isset($wp_registered_widgets[$id]) )			unset($wp_registered_widgets[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 ); // height is never used	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $control_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;	if ( isset($wp_registered_widget_updates[$id_base]) )		return;	if ( isset($widget['params'][0]['number']) )		$widget['params'][0]['number'] = -1;	unset($widget['width'], $widget['height'], $widget['name'], $widget['id']);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_update_callback($id_base, $update_callback, $options = array()) {	global $wp_registered_widget_updates;	if ( isset($wp_registered_widget_updates[$id_base]) ) {		if ( empty($update_callback) )			unset($wp_registered_widget_updates[$id_base]);		return;	}	$widget = array(		'callback' => $update_callback,		'params' => array_slice(func_get_args(), 3)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_updates[$id_base] = $widget;}function _register_widget_form_callback($id, $name, $form_callback, $options = array()) {	global $wp_registered_widget_controls;	$id = strtolower($id);	if ( empty($form_callback) ) {		unset($wp_registered_widget_controls[$id]);		return;	}	if ( isset($wp_registered_widget_controls[$id]) && !did_action( 'widgets_init' ) )		return;	$defaults = array('width' => 250, 'height' => 200 );	$options = wp_parse_args($options, $defaults);	$options['width'] = (int) $options['width'];	$options['height'] = (int) $options['height'];	$widget = array(		'name' => $name,		'id' => $id,		'callback' => $form_callback,		'params' => array_slice(func_get_args(), 4)	);	$widget = array_merge($widget, $options);	$wp_registered_widget_controls[$id] = $widget;}/** * Remove control callback for widget. * * @since 2.2.0 * @uses wp_register_widget_control() Unregisters by using empty callback. * * @param int|string $id Widget ID. */function wp_unregister_widget_control($id) {	return wp_register_widget_control($id, '', '');}/** * Display dynamic sidebar. * * By default it displays the default sidebar or 'sidebar-1'. The 'sidebar-1' is * not named by the theme, the actual name is '1', but 'sidebar-' is added to * the registered sidebars for the name. If you named your sidebar 'after-post', * then the parameter $index will still be 'after-post', but the lookup will be * for 'sidebar-after-post'. * * It is confusing for the $index parameter, but just know that it should just * work. When you register the sidebar in the theme, you will use the same name * for this function or "Pay no heed to the man behind the curtain." Just accept * it as an oddity of WordPress sidebar register and display. * * @since 2.2.0 * * @param int|string $index Optional, default is 1. Name or ID of dynamic sidebar. * @return bool True, if widget sidebar was found and called. False if not found or not called. */function dynamic_sidebar($index = 1) {	global $wp_registered_sidebars, $wp_registered_widgets;	if ( is_int($index) ) {		$index = "sidebar-$index";	} else {		$index = sanitize_title($index);		foreach ( (array) $wp_registered_sidebars as $key => $value ) {			if ( sanitize_title($value['name']) == $index ) {				$index = $key;				break;			}		}	}	$sidebars_widgets = wp_get_sidebars_widgets();	if ( empty($wp_registered_sidebars[$index]) || !array_key_exists($index, $sidebars_widgets) || !is_array($sidebars_widgets[$index]) || empty($sidebars_widgets[$index]) )		return false;	$sidebar = $wp_registered_sidebars[$index];	$did_one = false;	foreach ( (array) $sidebars_widgets[$index] as $id ) {		if ( !isset($wp_registered_widgets[$id]) ) continue;		$params = array_merge(			array( array_merge( $sidebar, array('widget_id' => $id, 'widget_name' => $wp_registered_widgets[$id]['name']) ) ),			(array) $wp_registered_widgets[$id]['params']		);		// Substitute HTML id and class attributes into before_widget		$classname_ = '';		foreach ( (array) $wp_registered_widgets[$id]['classname'] as $cn ) {			if ( is_string($cn) )				$classname_ .= '_' . $cn;			elseif ( is_object($cn) )				$classname_ .= '_' . get_class($cn);		}		$classname_ = ltrim($classname_, '_');		$params[0]['before_widget'] = sprintf($params[0]['before_widget'], $id, $classname_);		$params = apply_filters( 'dynamic_sidebar_params', $params );		$callback = $wp_registered_widgets[$id]['callback'];		do_action( 'dynamic_sidebar', $wp_registered_widgets[$id] );		if ( is_callable($callback) ) {			call_user_func_array($callback, $params);			$did_one = true;		}	}	return $did_one;}/** * Whether widget is displayied on the front-end. * * Either $callback or $id_base can be used * $id_base is the first argument when extending WP_Widget class * Without the optional $widget_id parameter, returns the ID of the first sidebar * in which the first instance of the widget with the given callback or $id_base is found. * With the $widget_id parameter, returns the ID of the sidebar where * the widget with that callback/$id_base AND that ID is found. * * NOTE: $widget_id and $id_base are the same for single widgets. To be effective * this function has to run after widgets have initialized, at action 'init' or later. * * @since 2.2.0 * * @param callback Optional, Widget callback to check. * @param int $widget_id Optional, but needed for checking. Widget ID. * @param string $id_base Optional, the base ID of a widget created by extending WP_Widget. * @param bool $skip_inactive Optional, whether to check in 'wp_inactive_widgets'. * @return mixed false if widget is not active or id of sidebar in which the widget is active. */function is_active_widget($callback = false, $widget_id = false, $id_base = false, $skip_inactive = true) {	global $wp_registered_widgets;	$sidebars_widgets = wp_get_sidebars_widgets();	if ( is_array($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $sidebar => $widgets ) {			if ( $skip_inactive && 'wp_inactive_widgets' == $sidebar )				continue;			if ( is_array($widgets) ) {				foreach ( $widgets as $widget ) {					if ( ( $callback && isset($wp_registered_widgets[$widget]['callback']) && $wp_registered_widgets[$widget]['callback'] == $callback ) || ( $id_base && _get_widget_id_base($widget) == $id_base ) ) {						if ( !$widget_id || $widget_id == $wp_registered_widgets[$widget]['id'] )							return $sidebar;					}				}			}		}	}	return false;}/** * Whether the dynamic sidebar is enabled and used by theme. * * @since 2.2.0 * * @return bool True, if using widgets. False, if not using widgets. */function is_dynamic_sidebar() {	global $wp_registered_widgets, $wp_registered_sidebars;	$sidebars_widgets = get_option('sidebars_widgets');	foreach ( (array) $wp_registered_sidebars as $index => $sidebar ) {		if ( count($sidebars_widgets[$index]) ) {			foreach ( (array) $sidebars_widgets[$index] as $widget )				if ( array_key_exists($widget, $wp_registered_widgets) )					return true;		}	}	return false;}/** * Whether a sidebar is in use. * * @since 2.8 * * @param mixed $index, sidebar name, id or number to check. * @return bool true if the sidebar is in use, false otherwise. */function is_active_sidebar( $index ) {	$index = ( is_int($index) ) ? "sidebar-$index" : sanitize_title($index);	$sidebars_widgets = wp_get_sidebars_widgets();	if ( !empty($sidebars_widgets[$index]) )		return true;	return false;}/* Internal Functions *//** * Retrieve full list of sidebars and their widgets. * * Will upgrade sidebar widget list, if needed. Will also save updated list, if * needed. * * @since 2.2.0 * @access private * * @param bool $deprecated. Not used. * @return array Upgraded list of widgets to version 3 array format when called from the admin. */function wp_get_sidebars_widgets($deprecated = true) {	if ( $deprecated !== true )		_deprecated_argument( __FUNCTION__, '2.8.1' );	global $wp_registered_widgets, $wp_registered_sidebars, $_wp_sidebars_widgets;	// If loading from front page, consult $_wp_sidebars_widgets rather than options	// to see if wp_convert_widget_settings() has made manipulations in memory.	if ( !is_admin() ) {		if ( empty($_wp_sidebars_widgets) )			$_wp_sidebars_widgets = get_option('sidebars_widgets', array());		$sidebars_widgets = $_wp_sidebars_widgets;	} else {		$sidebars_widgets = get_option('sidebars_widgets', array());		$_sidebars_widgets = array();		if ( isset($sidebars_widgets['wp_inactive_widgets']) || empty($sidebars_widgets) )			$sidebars_widgets['array_version'] = 3;		elseif ( !isset($sidebars_widgets['array_version']) )			$sidebars_widgets['array_version'] = 1;		switch ( $sidebars_widgets['array_version'] ) {			case 1 :				foreach ( (array) $sidebars_widgets as $index => $sidebar )				if ( is_array($sidebar) )				foreach ( (array) $sidebar as $i => $name ) {					$id = strtolower($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$id = sanitize_title($name);					if ( isset($wp_registered_widgets[$id]) ) {						$_sidebars_widgets[$index][$i] = $id;						continue;					}					$found = false;					foreach ( $wp_registered_widgets as $widget_id => $widget ) {						if ( strtolower($widget['name']) == strtolower($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						} elseif ( sanitize_title($widget['name']) == sanitize_title($name) ) {							$_sidebars_widgets[$index][$i] = $widget['id'];							$found = true;							break;						}					}					if ( $found )						continue;					unset($_sidebars_widgets[$index][$i]);				}				$_sidebars_widgets['array_version'] = 2;				$sidebars_widgets = $_sidebars_widgets;				unset($_sidebars_widgets);			case 2 :				$sidebars = array_keys( $wp_registered_sidebars );				if ( !empty( $sidebars ) ) {					// Move the known-good ones first					foreach ( (array) $sidebars as $id ) {						if ( array_key_exists( $id, $sidebars_widgets ) ) {							$_sidebars_widgets[$id] = $sidebars_widgets[$id];							unset($sidebars_widgets[$id], $sidebars[$id]);						}					}					// move the rest to wp_inactive_widgets					if ( !isset($_sidebars_widgets['wp_inactive_widgets']) )						$_sidebars_widgets['wp_inactive_widgets'] = array();					if ( !empty($sidebars_widgets) ) {						foreach ( $sidebars_widgets as $lost => $val ) {							if ( is_array($val) )								$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );						}					}					$sidebars_widgets = $_sidebars_widgets;					unset($_sidebars_widgets);				}		}	}	if ( is_array( $sidebars_widgets ) && isset($sidebars_widgets['array_version']) )		unset($sidebars_widgets['array_version']);	$sidebars_widgets = apply_filters('sidebars_widgets', $sidebars_widgets);	return $sidebars_widgets;}/** * Set the sidebar widget option to update sidebars. * * @since 2.2.0 * @access private * * @param array $sidebars_widgets Sidebar widgets and their settings. */function wp_set_sidebars_widgets( $sidebars_widgets ) {	if ( !isset( $sidebars_widgets['array_version'] ) )		$sidebars_widgets['array_version'] = 3;	update_option( 'sidebars_widgets', $sidebars_widgets );}/** * Retrieve default registered sidebars list. * * @since 2.2.0 * @access private * * @return array */function wp_get_widget_defaults() {	global $wp_registered_sidebars;	$defaults = array();	foreach ( (array) $wp_registered_sidebars as $index => $sidebar )		$defaults[$index] = array();	return $defaults;}/** * Convert the widget settings from single to multi-widget format. * * @since 2.8.0 * * @return array */function wp_convert_widget_settings($base_name, $option_name, $settings) {	// This test may need expanding.	$single = $changed = false;	if ( empty($settings) ) {		$single = true;	} else {		foreach ( array_keys($settings) as $number ) {			if ( 'number' == $number )				continue;			if ( !is_numeric($number) ) {				$single = true;				break;			}		}	}	if ( $single ) {		$settings = array( 2 => $settings );		// If loading from the front page, update sidebar in memory but don't save to options		if ( is_admin() ) {			$sidebars_widgets = get_option('sidebars_widgets');		} else {			if ( empty($GLOBALS['_wp_sidebars_widgets']) )				$GLOBALS['_wp_sidebars_widgets'] = get_option('sidebars_widgets', array());			$sidebars_widgets = &$GLOBALS['_wp_sidebars_widgets'];		}		foreach ( (array) $sidebars_widgets as $index => $sidebar ) {			if ( is_array($sidebar) ) {				foreach ( $sidebar as $i => $name ) {					if ( $base_name == $name ) {						$sidebars_widgets[$index][$i] = "$name-2";						$changed = true;						break 2;					}				}			}		}		if ( is_admin() && $changed )			update_option('sidebars_widgets', $sidebars_widgets);	}	$settings['_multiwidget'] = 1;	if ( is_admin() )		update_option( $option_name, $settings );	return $settings;}/** * Output an arbitrary widget as a template tag * * @since 2.8 * * @param string $widget the widget's PHP class name (see default-widgets.php) * @param array $instance the widget's instance settings * @param array $args the widget's sidebar args * @return void **/function the_widget($widget, $instance = array(), $args = array()) {	global $wp_widget_factory;	$widget_obj = $wp_widget_factory->widgets[$widget];	if ( !is_a($widget_obj, 'WP_Widget') )		return;	$before_widget = sprintf('<div class="widget %s">', $widget_obj->widget_options['classname']);	$default_args = array('before_widget' => $before_widget, 'after_widget' => "</div>", 'before_title' => '<h2 class="widgettitle">', 'after_title' => '</h2>');	$args = wp_parse_args($args, $default_args);	$instance = wp_parse_args($instance);	do_action( 'the_widget', $widget, $instance, $args );	$widget_obj->_set(-1);	$widget_obj->widget($args, $instance);}/** * Private */function _get_widget_id_base($id) {	return preg_replace( '/-[0-9]+$/', '', $id );}
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * A class to render Diffs in different formats. * * This class renders the diff in classic diff format. It is intended that * this class be customized via inheritance, to obtain fancier outputs. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @package Text_Diff */class Text_Diff_Renderer {    /**     * Number of leading context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_leading_context_lines = 0;    /**     * Number of trailing context "lines" to preserve.     *     * This should be left at zero for this class, but subclasses may want to     * set this to other values.     */    var $_trailing_context_lines = 0;    /**     * Constructor.     */    function Text_Diff_Renderer($params = array())    {        foreach ($params as $param => $value) {            $v = '_' . $param;            if (isset($this->$v)) {                $this->$v = $value;            }        }    }    /**     * Get any renderer parameters.     *     * @return array  All parameters of this renderer object.     */    function getParams()    {        $params = array();        foreach (get_object_vars($this) as $k => $v) {            if ($k[0] == '_') {                $params[substr($k, 1)] = $v;            }        }        return $params;    }    /**     * Renders a diff.     *     * @param Text_Diff $diff  A Text_Diff object.     *     * @return string  The formatted output.     */    function render($diff)    {        $xi = $yi = 1;        $block = false;        $context = array();        $nlead = $this->_leading_context_lines;        $ntrail = $this->_trailing_context_lines;        $output = $this->_startDiff();        $diffs = $diff->getDiff();        foreach ($diffs as $i => $edit) {            /* If these are unchanged (copied) lines, and we want to keep             * leading or trailing context lines, extract them from the copy             * block. */            if (is_a($edit, 'Text_Diff_Op_copy')) {                /* Do we have any diff blocks yet? */                if (is_array($block)) {                    /* How many lines to keep as context from the copy                     * block. */                    $keep = $i == count($diffs) - 1 ? $ntrail : $nlead + $ntrail;                    if (count($edit->orig) <= $keep) {                        /* We have less lines in the block than we want for                         * context => keep the whole block. */                        $block[] = $edit;                    } else {                        if ($ntrail) {                            /* Create a new block with as many lines as we need                             * for the trailing context. */                            $context = array_slice($edit->orig, 0, $ntrail);                            $block[] = &new Text_Diff_Op_copy($context);                        }                        /* @todo */                        $output .= $this->_block($x0, $ntrail + $xi - $x0,                                                 $y0, $ntrail + $yi - $y0,                                                 $block);                        $block = false;                    }                }                /* Keep the copy block as the context for the next block. */                $context = $edit->orig;            } else {                /* Don't we have any diff blocks yet? */                if (!is_array($block)) {                    /* Extract context lines from the preceding copy block. */                    $context = array_slice($context, count($context) - $nlead);                    $x0 = $xi - count($context);                    $y0 = $yi - count($context);                    $block = array();                    if ($context) {                        $block[] = &new Text_Diff_Op_copy($context);                    }                }                $block[] = $edit;            }            if ($edit->orig) {                $xi += count($edit->orig);            }            if ($edit->final) {                $yi += count($edit->final);            }        }        if (is_array($block)) {            $output .= $this->_block($x0, $xi - $x0,                                     $y0, $yi - $y0,                                     $block);        }        return $output . $this->_endDiff();    }    function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)    {        $output = $this->_startBlock($this->_blockHeader($xbeg, $xlen, $ybeg, $ylen));        foreach ($edits as $edit) {            switch (strtolower(get_class($edit))) {            case 'text_diff_op_copy':                $output .= $this->_context($edit->orig);                break;            case 'text_diff_op_add':                $output .= $this->_added($edit->final);                break;            case 'text_diff_op_delete':                $output .= $this->_deleted($edit->orig);                break;            case 'text_diff_op_change':                $output .= $this->_changed($edit->orig, $edit->final);                break;            }        }        return $output . $this->_endBlock();    }    function _startDiff()    {        return '';    }    function _endDiff()    {        return '';    }    function _blockHeader($xbeg, $xlen, $ybeg, $ylen)    {        if ($xlen > 1) {            $xbeg .= ',' . ($xbeg + $xlen - 1);        }        if ($ylen > 1) {            $ybeg .= ',' . ($ybeg + $ylen - 1);        }        // this matches the GNU Diff behaviour        if ($xlen && !$ylen) {            $ybeg--;        } elseif (!$xlen) {            $xbeg--;        }        return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;    }    function _startBlock($header)    {        return $header . "\n";    }    function _endBlock()    {        return '';    }    function _lines($lines, $prefix = ' ')    {        return $prefix . implode("\n$prefix", $lines) . "\n";    }    function _context($lines)    {        return $this->_lines($lines, '  ');    }    function _added($lines)    {        return $this->_lines($lines, '> ');    }    function _deleted($lines)    {        return $this->_lines($lines, '< ');    }    function _changed($orig, $final)    {        return $this->_deleted($orig) . "---\n" . $this->_added($final);    }}
<?php/** * Deprecated. Use registration.php. * * @package WordPress */_deprecated_file( basename(__FILE__), '2.1', WPINC .  '/registration.php' );require_once(ABSPATH . WPINC .  '/registration.php');?>
