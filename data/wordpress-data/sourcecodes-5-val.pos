<?php/** * WordPress Administration Media API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_tabs() {	$_default_tabs = array(		'type' => __('From Computer'), // handler action suffix => tab text		'type_url' => __('From URL'),		'gallery' => __('Gallery'),		'library' => __('Media Library')	);	return apply_filters('media_upload_tabs', $_default_tabs);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tabs * @return unknown */function update_gallery_tab($tabs) {	global $wpdb;	if ( !isset($_REQUEST['post_id']) ) {		unset($tabs['gallery']);		return $tabs;	}	$post_id = intval($_REQUEST['post_id']);	if ( $post_id )		$attachments = intval( $wpdb->get_var( $wpdb->prepare( "SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d", $post_id ) ) );	if ( empty($attachments) ) {		unset($tabs['gallery']);		return $tabs;	}	$tabs['gallery'] = sprintf(__('Gallery (%s)'), "<span id='attachments-count'>$attachments</span>");	return $tabs;}add_filter('media_upload_tabs', 'update_gallery_tab');/** * {@internal Missing Short Description}} * * @since unknown */function the_media_upload_tabs() {	global $redir_tab;	$tabs = media_upload_tabs();	if ( !empty($tabs) ) {		echo "<ul id='sidemenu'>\n";		if ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) )			$current = $redir_tab;		elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) )			$current = $_GET['tab'];		else			$current = apply_filters('media_upload_default_tab', 'type');		foreach ( $tabs as $callback => $text ) {			$class = '';			if ( $current == $callback )				$class = " class='current'";			$href = add_query_arg(array('tab'=>$callback, 's'=>false, 'paged'=>false, 'post_mime_type'=>false, 'm'=>false));			$link = "<a href='" . esc_url($href) . "'$class>$text</a>";			echo "\t<li id='" . esc_attr("tab-$callback") . "'>$link</li>\n";		}		echo "</ul>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $rel * @param unknown_type $size * @return unknown */function get_image_send_to_editor($id, $caption, $title, $align, $url='', $rel = false, $size='medium', $alt = '') {	$html = get_image_tag($id, $alt, $title, $align, $size);	$rel = $rel ? ' rel="attachment wp-att-' . esc_attr($id).'"' : '';	if ( $url )		$html = '<a href="' . esc_attr($url) . "\"$rel>$html</a>";	$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );	return $html;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $id * @param unknown_type $alt * @param unknown_type $title * @param unknown_type $align * @param unknown_type $url * @param unknown_type $size * @return unknown */function image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {	if ( empty($caption) || apply_filters( 'disable_captions', '' ) )		return $html;	$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';	if ( ! preg_match( '/width="([0-9]+)/', $html, $matches ) )		return $html;	$width = $matches[1];	$html = preg_replace( '/(class=["\'][^\'"]*)align(none|left|right|center)\s?/', '$1', $html );	if ( empty($align) )		$align = 'none';	$shcode = '[caption id="' . $id . '" align="align' . $align	. '" width="' . $width . '" caption="' . addslashes($caption) . '"]' . $html . '[/caption]';	return apply_filters( 'image_add_caption_shortcode', $shcode, $html );}add_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html */function media_send_to_editor($html) {?><script type="text/javascript">/* <![CDATA[ */var win = window.dialogArguments || opener || parent || top;win.send_to_editor('<?php echo addslashes($html); ?>');/* ]]> */</script><?php	exit;}/** * {@internal Missing Short Description}} * * This handles the file upload POST itself, creating the attachment post. * * @since unknown * * @param string $file_id Index into the {@link $_FILES} array of the upload * @param int $post_id The post ID the media is associated with * @param array $post_data allows you to overwrite some of the attachment * @param array $overrides allows you to override the {@link wp_handle_upload()} behavior * @return int the ID of the attachment */function media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {	$time = current_time('mysql');	if ( $post = get_post($post_id) ) {		if ( substr( $post->post_date, 0, 4 ) > 0 )			$time = $post->post_date;	}	$name = $_FILES[$file_id]['name'];	$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$name_parts = pathinfo($name);	$name = trim( substr( $name, 0, -(1 + strlen($name_parts['extension'])) ) );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = $name;	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the data	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );	}	return $id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file_array * @param unknown_type $post_id * @param unknown_type $desc * @param unknown_type $post_data * @return unknown */function media_handle_sideload($file_array, $post_id, $desc = null, $post_data = array()) {	$overrides = array('test_form'=>false);	$file = wp_handle_sideload($file_array, $overrides);	if ( isset($file['error']) )		return new WP_Error( 'upload_error', $file['error'] );	$url = $file['url'];	$type = $file['type'];	$file = $file['file'];	$title = preg_replace('/\.[^.]+$/', '', basename($file));	$content = '';	// use image exif/iptc data for title and caption defaults if possible	if ( $image_meta = @wp_read_image_metadata($file) ) {		if ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )			$title = $image_meta['title'];		if ( trim( $image_meta['caption'] ) )			$content = $image_meta['caption'];	}	$title = @$desc;	// Construct the attachment array	$attachment = array_merge( array(		'post_mime_type' => $type,		'guid' => $url,		'post_parent' => $post_id,		'post_title' => $title,		'post_content' => $content,	), $post_data );	// Save the attachment metadata	$id = wp_insert_attachment($attachment, $file, $post_id);	if ( !is_wp_error($id) ) {		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		return $url;	}	return $id;}/** * {@internal Missing Short Description}} * * Wrap iframe content (produced by $content_func) in a doctype, html head/body * etc any additional function args will be passed to content_func. * * @since unknown * * @param unknown_type $content_func */function wp_iframe($content_func /* ... */) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );// Check callback name for 'media'if ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) ) || 0 === strpos( $content_func, 'media' ) )	wp_enqueue_style( 'media' );wp_enqueue_style( 'ie' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time(); ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup';//]]></script><?phpdo_action('admin_enqueue_scripts', 'media-upload-popup');do_action('admin_print_styles-media-upload-popup');do_action('admin_print_styles');do_action('admin_print_scripts-media-upload-popup');do_action('admin_print_scripts');do_action('admin_head-media-upload-popup');do_action('admin_head');if ( is_string($content_func) )	do_action( "admin_head_{$content_func}" );?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>><?php	$args = func_get_args();	$args = array_slice($args, 1);	call_user_func_array($content_func, $args);	do_action('admin_print_footer_scripts');?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html><?php}/** * {@internal Missing Short Description}} * * @since unknown */function media_buttons() {	$do_image = $do_audio = $do_video = true;	if ( is_multisite() ) {		$media_buttons = get_site_option( 'mu_media_buttons' );		if ( empty($media_buttons['image']) )			$do_image = false;		if ( empty($media_buttons['audio']) )			$do_audio = false;		if ( empty($media_buttons['video']) )			$do_video = false;	}	$out = '';	if ( $do_image )		$out .= _media_button(__('Add an Image'), 'images/media-button-image.gif?ver=20100531', 'image');	if ( $do_video )		$out .= _media_button(__('Add Video'), 'images/media-button-video.gif?ver=20100531', 'video');	if ( $do_audio )		$out .= _media_button(__('Add Audio'), 'images/media-button-music.gif?ver=20100531', 'audio');	$out .= _media_button(__('Add Media'), 'images/media-button-other.gif?ver=20100531', 'media');	$context = apply_filters('media_buttons_context', __('Upload/Insert %s'));	printf($context, $out);}add_action( 'media_buttons', 'media_buttons' );function _media_button($title, $icon, $type) {	return "<a href='" . esc_url( get_upload_iframe_src($type) ) . "' id='add_$type' class='thickbox' title='$title'><img src='" . esc_url( admin_url( $icon ) ) . "' alt='$title' /></a>";}function get_upload_iframe_src($type) {	global $post_ID, $temp_ID;	$uploading_iframe_ID = (int) (0 == $post_ID ? $temp_ID : $post_ID);	$upload_iframe_src = add_query_arg('post_id', $uploading_iframe_ID, 'media-upload.php');	if ( 'media' != $type )		$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);	$upload_iframe_src = apply_filters($type . '_upload_iframe_src', $upload_iframe_src);	return add_query_arg('TB_iframe', true, $upload_iframe_src);}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_form_handler() {	check_admin_referer('media-form');	$errors = null;	if ( isset($_POST['send']) ) {		$keys = array_keys($_POST['send']);		$send_id = (int) array_shift($keys);	}	if ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {		$post = $_post = get_post($attachment_id, ARRAY_A);		if ( isset($attachment['post_content']) )			$post['post_content'] = $attachment['post_content'];		if ( isset($attachment['post_title']) )			$post['post_title'] = $attachment['post_title'];		if ( isset($attachment['post_excerpt']) )			$post['post_excerpt'] = $attachment['post_excerpt'];		if ( isset($attachment['menu_order']) )			$post['menu_order'] = $attachment['menu_order'];		if ( isset($send_id) && $attachment_id == $send_id ) {			if ( isset($attachment['post_parent']) )				$post['post_parent'] = $attachment['post_parent'];		}		$post = apply_filters('attachment_fields_to_save', $post, $attachment);		if ( isset($attachment['image_alt']) ) {			$image_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);			if ( $image_alt != stripslashes($attachment['image_alt']) ) {				$image_alt = wp_strip_all_tags( stripslashes($attachment['image_alt']), true );				// update_meta expects slashed				update_post_meta( $attachment_id, '_wp_attachment_image_alt', addslashes($image_alt) );			}		}		if ( isset($post['errors']) ) {			$errors[$attachment_id] = $post['errors'];			unset($post['errors']);		}		if ( $post != $_post )			wp_update_post($post);		foreach ( get_attachment_taxonomies($post) as $t ) {			if ( isset($attachment[$t]) )				wp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);		}	}	if ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>		<script type="text/javascript">		/* <![CDATA[ */		var win = window.dialogArguments || opener || parent || top;		win.tb_remove();		/* ]]> */		</script>		<?php		exit;	}	if ( isset($send_id) ) {		$attachment = stripslashes_deep( $_POST['attachments'][$send_id] );		$html = $attachment['post_title'];		if ( !empty($attachment['url']) ) {			$rel = '';			if ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )				$rel = " rel='attachment wp-att-" . esc_attr($send_id) . "'";			$html = "<a href='{$attachment['url']}'$rel>$html</a>";		}		$html = apply_filters('media_send_to_editor', $html, $send_id, $attachment);		return media_send_to_editor($html);	}	return $errors;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_image() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$alt = $align = '';		$src = $_POST['insertonly']['src'];		if ( !empty($src) && !strpos($src, '://') )			$src = "http://$src";		$alt = esc_attr($_POST['insertonly']['alt']);		if ( isset($_POST['insertonly']['align']) ) {			$align = esc_attr($_POST['insertonly']['align']);			$class = " class='align$align'";		}		if ( !empty($src) )			$html = "<img src='" . esc_url($src) . "' alt='$alt'$class />";		$html = apply_filters('image_send_to_editor_url', $html, esc_url_raw($src), $alt, $align);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'image', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'image', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $post_id * @param unknown_type $desc * @return unknown */function media_sideload_image($file, $post_id, $desc = null) {	if (!empty($file) ) {		// Download file to temp location		$tmp = download_url($file);		// Set variables for storage		// fix file filename for query strings		preg_match('/[^\?]+\.(jpg|JPG|jpe|JPE|jpeg|JPEG|gif|GIF|png|PNG)/', $file, $matches);		$file_array['name'] = basename($matches[0]);		$file_array['tmp_name'] = $tmp;		// If error storing temporarily, unlink		if ( is_wp_error($tmp) ) {			@unlink($file_array['tmp_name']);			$file_array['tmp_name'] = '';		}		// do the validation and storage stuff		$id = media_handle_sideload($file_array, $post_id, @$desc);		$src = $id;		// If error storing permanently, unlink		if ( is_wp_error($id) ) {			@unlink($file_array['tmp_name']);			return $id;		}	}	// Finally check to make sure the file has been saved, then return the html	if ( !empty($src) ) {		$alt = @$desc;		$html = "<img src='$src' alt='$alt' />";		return $html;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_audio() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('audio_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'audio', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'audio', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_video() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);        if ( empty($title) )            $title = esc_attr( basename($href) );		if ( !empty($title) && !empty($href) )            $html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('video_send_to_editor_url', $html, $href, $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'video', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'video', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_file() {	$errors = array();	$id = 0;	if ( isset($_POST['html-upload']) && !empty($_FILES) ) {		// Upload File button was clicked		$id = media_handle_upload('async-upload', $_REQUEST['post_id']);		unset($_FILES);		if ( is_wp_error($id) ) {			$errors['upload_error'] = $id;			$id = false;		}	}	if ( !empty($_POST['insertonlybutton']) ) {		$href = $_POST['insertonly']['href'];		if ( !empty($href) && !strpos($href, '://') )			$href = "http://$href";		$title = esc_attr($_POST['insertonly']['title']);		if ( empty($title) )			$title = basename($href);		if ( !empty($title) && !empty($href) )			$html = "<a href='" . esc_url($href) . "' >$title</a>";		$html = apply_filters('file_send_to_editor_url', $html, esc_url_raw($href), $title);		return media_send_to_editor($html);	}	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	if ( isset($_POST['save']) ) {		$errors['upload_notice'] = __('Saved.');		return media_upload_gallery();	}	if ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' )		return wp_iframe( 'media_upload_type_url_form', 'file', $errors, $id );	return wp_iframe( 'media_upload_type_form', 'file', $errors, $id );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_gallery() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	wp_enqueue_script('admin-gallery');	return wp_iframe( 'media_upload_gallery_form', $errors );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function media_upload_library() {	$errors = array();	if ( !empty($_POST) ) {		$return = media_upload_form_handler();		if ( is_string($return) )			return $return;		if ( is_array($return) )			$errors = $return;	}	return wp_iframe( 'media_upload_library_form', $errors );}/** * Retrieve HTML for the image alignment radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_align_input_fields( $post, $checked = '' ) {	if ( empty($checked) )		$checked = get_user_setting('align', 'none');	$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));	if ( !array_key_exists( (string) $checked, $alignments ) )		$checked = 'none';	$out = array();	foreach ( $alignments as $name => $label ) {		$name = esc_attr($name);		$out[] = "<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'".		 	( $checked == $name ? " checked='checked'" : "" ) .			" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>";	}	return join("\n", $out);}/** * Retrieve HTML for the size radio buttons with the specified one checked. * * @since unknown * * @param unknown_type $post * @param unknown_type $checked * @return unknown */function image_size_input_fields( $post, $check = '' ) {		// get a list of the actual pixel dimensions of each possible intermediate version of this image		$size_names = array('thumbnail' => __('Thumbnail'), 'medium' => __('Medium'), 'large' => __('Large'), 'full' => __('Full Size'));		if ( empty($check) )			$check = get_user_setting('imgsize', 'medium');		foreach ( $size_names as $size => $label ) {			$downsize = image_downsize($post->ID, $size);			$checked = '';			// is this size selectable?			$enabled = ( $downsize[3] || 'full' == $size );			$css_id = "image-size-{$size}-{$post->ID}";			// if this size is the default but that's not available, don't select it			if ( $size == $check ) {				if ( $enabled )					$checked = " checked='checked'";				else					$check = '';			} elseif ( !$check && $enabled && 'thumbnail' != $size ) {				// if $check is not enabled, default to the first available size that's bigger than a thumbnail				$check = $size;				$checked = " checked='checked'";			}			$html = "<div class='image-size-item'><input type='radio' " . disabled( $enabled, false, false ) . "name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />";			$html .= "<label for='{$css_id}'>$label</label>";			// only show the dimensions if that choice is available			if ( $enabled )				$html .= " <label for='{$css_id}' class='help'>" . sprintf( "(%d&nbsp;&times;&nbsp;%d)", $downsize[1], $downsize[2] ). "</label>";			$html .= '</div>';			$out[] = $html;		}		return array(			'label' => __('Size'),			'input' => 'html',			'html'  => join("\n", $out),		);}/** * Retrieve HTML for the Link URL buttons with the default link type as specified. * * @since unknown * * @param unknown_type $post * @param unknown_type $url_type * @return unknown */function image_link_input_fields($post, $url_type = '') {	$file = wp_get_attachment_url($post->ID);	$link = get_attachment_link($post->ID);	if ( empty($url_type) )		$url_type = get_user_setting('urlbutton', 'post');	$url = '';	if ( $url_type == 'file' )		$url = $file;	elseif ( $url_type == 'post' )		$url = $link;	return "	<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='" . esc_attr($url) . "' /><br />	<button type='button' class='button urlnone' title=''>" . __('None') . "</button>	<button type='button' class='button urlfile' title='" . esc_attr($file) . "'>" . __('File URL') . "</button>	<button type='button' class='button urlpost' title='" . esc_attr($link) . "'>" . __('Post URL') . "</button>";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function image_attachment_fields_to_edit($form_fields, $post) {	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);		if ( empty($alt) )			$alt = '';		$form_fields['post_title']['required'] = true;		$form_fields['image_alt'] = array(			'value' => $alt,			'label' => __('Alternate Text'),			'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')		);		$form_fields['align'] = array(			'label' => __('Alignment'),			'input' => 'html',			'html'  => image_align_input_fields($post, get_option('image_default_align')),		);		$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );	} else {		unset( $form_fields['image_alt'] );	}	return $form_fields;}add_filter('attachment_fields_to_edit', 'image_attachment_fields_to_edit', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $form_fields * @param unknown_type $post * @return unknown */function media_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);	return $form_fields;}function media_post_single_attachment_fields_to_edit( $form_fields, $post ) {	unset($form_fields['image_url']);	return $form_fields;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $attachment * @return unknown */function image_attachment_fields_to_save($post, $attachment) {	if ( substr($post['post_mime_type'], 0, 5) == 'image' ) {		if ( strlen(trim($post['post_title'])) == 0 ) {			$post['post_title'] = preg_replace('/\.\w+$/', '', basename($post['guid']));			$post['errors']['post_title']['errors'][] = __('Empty Title filled from filename.');		}	}	return $post;}add_filter('attachment_fields_to_save', 'image_attachment_fields_to_save', 10, 2);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $html * @param unknown_type $attachment_id * @param unknown_type $attachment * @return unknown */function image_media_send_to_editor($html, $attachment_id, $attachment) {	$post =& get_post($attachment_id);	if ( substr($post->post_mime_type, 0, 5) == 'image' ) {		$url = $attachment['url'];		$align = !empty($attachment['align']) ? $attachment['align'] : 'none';		$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';		$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';		$rel = ( $url == get_attachment_link($attachment_id) );		return get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);	}	return $html;}add_filter('media_send_to_editor', 'image_media_send_to_editor', 10, 3);/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post * @param unknown_type $errors * @return unknown */function get_attachment_fields_to_edit($post, $errors = null) {	if ( is_int($post) )		$post =& get_post($post);	if ( is_array($post) )		$post = (object) $post;	$image_url = wp_get_attachment_url($post->ID);	$edit_post = sanitize_post($post, 'edit');	$form_fields = array(		'post_title'   => array(			'label'      => __('Title'),			'value'      => $edit_post->post_title		),		'image_alt'   => array(),		'post_excerpt' => array(			'label'      => __('Caption'),			'value'      => $edit_post->post_excerpt		),		'post_content' => array(			'label'      => __('Description'),			'value'      => $edit_post->post_content,			'input'      => 'textarea'		),		'url'          => array(			'label'      => __('Link URL'),			'input'      => 'html',			'html'       => image_link_input_fields($post, get_option('image_default_link_type')),			'helps'      => __('Enter a link URL or click above for presets.')		),		'menu_order'   => array(			'label'      => __('Order'),			'value'      => $edit_post->menu_order		),		'image_url'	=> array(			'label'      => __('File URL'),			'input'      => 'html',			'html'       => "<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='" . esc_attr($image_url) . "' /><br />",			'value'      => wp_get_attachment_url($post->ID),			'helps'      => __('Location of the uploaded file.')		)	);	foreach ( get_attachment_taxonomies($post) as $taxonomy ) {		$t = (array) get_taxonomy($taxonomy);		if ( empty($t['label']) )			$t['label'] = $taxonomy;		if ( empty($t['args']) )			$t['args'] = array();		$terms = get_object_term_cache($post->ID, $taxonomy);		if ( empty($terms) )			$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);		$values = array();		foreach ( $terms as $term )			$values[] = $term->name;		$t['value'] = join(', ', $values);		$form_fields[$taxonomy] = $t;	}	// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default	// The recursive merge is easily traversed with array casting: foreach( (array) $things as $thing )	$form_fields = array_merge_recursive($form_fields, (array) $errors);	$form_fields = apply_filters('attachment_fields_to_edit', $form_fields, $post);	return $form_fields;}/** * Retrieve HTML for media items of post gallery. * * The HTML markup retrieved will be created for the progress of SWF Upload * component. Will also create link for showing and hiding the form to modify * the image attachment. * * @since unknown * * @param int $post_id Optional. Post ID. * @param array $errors Errors for attachment, if any. * @return string */function get_media_items( $post_id, $errors ) {	$attachments = array();	if ( $post_id ) {		$post = get_post($post_id);		if ( $post && $post->post_type == 'attachment' )			$attachments = array($post->ID => $post);		else			$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );	} else {		if ( is_array($GLOBALS['wp_the_query']->posts) )			foreach ( $GLOBALS['wp_the_query']->posts as $attachment )				$attachments[$attachment->ID] = $attachment;	}	$output = '';	foreach ( (array) $attachments as $id => $attachment ) {		if ( $attachment->post_status == 'trash' )			continue;		if ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )			$output .= "\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress'><div class='bar'></div></div><div id='media-upload-error-$id'></div><div class='filename'></div>$item\n</div>";	}	return $output;}/** * Retrieve HTML form for modifying the image attachment. * * @since unknown * * @param int $attachment_id Attachment ID for modification. * @param string|array $args Optional. Override defaults. * @return string HTML form for attachment. */function get_media_item( $attachment_id, $args = null ) {	global $redir_tab;	if ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )		$thumb_url = $thumb_url[0];	else		$thumb_url = false;	$post = get_post( $attachment_id );	$default_args = array( 'errors' => null, 'send' => post_type_supports(get_post_type($post->post_parent), 'editor'), 'delete' => true, 'toggle' => true, 'show_title' => true );	$args = wp_parse_args( $args, $default_args );	extract( $args, EXTR_SKIP );	$toggle_on  = __( 'Show' );	$toggle_off = __( 'Hide' );	$filename = basename( $post->guid );	$title = esc_attr( $post->post_title );	if ( $_tags = get_the_tags( $attachment_id ) ) {		foreach ( $_tags as $tag )			$tags[] = $tag->name;		$tags = esc_attr( join( ', ', $tags ) );	}	$post_mime_types = get_post_mime_types();	$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );	$type = array_shift( $keys );	$type_html = "<input type='hidden' id='type-of-$attachment_id' value='" . esc_attr( $type ) . "' />";	$form_fields = get_attachment_fields_to_edit( $post, $errors );	if ( $toggle ) {		$class = empty( $errors ) ? 'startclosed' : 'startopen';		$toggle_links = "	<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>	<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>";	} else {		$class = 'form-table';		$toggle_links = '';	}	$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case	$display_title = $show_title ? "<div class='filename new'><span class='title'>" . wp_html_excerpt( $display_title, 60 ) . "</span></div>" : '';	$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );	$order = '';	foreach ( $form_fields as $key => $val ) {		if ( 'menu_order' == $key ) {			if ( $gallery )				$order = "<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ). "' /></div>";			else				$order = "<input type='hidden' name='attachments[$attachment_id][menu_order]' value='" . esc_attr( $val['value'] ) . "' />";			unset( $form_fields['menu_order'] );			break;		}	}	$media_dims = '';	$meta = wp_get_attachment_metadata( $post->ID );	if ( is_array( $meta ) && array_key_exists( 'width', $meta ) && array_key_exists( 'height', $meta ) )		$media_dims .= "<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> ";	$media_dims = apply_filters( 'media_meta', $media_dims, $post );	$image_edit_button = '';	if ( gd_edit_image_support( $post->post_mime_type ) ) {		$nonce = wp_create_nonce( "image_editor-$post->ID" );		$image_edit_button = "<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \"$nonce\" )' class='button' value='" . esc_attr__( 'Edit Image' ) . "' /> <img src='" . esc_url( admin_url( 'images/wpspin_light.gif' ) ) . "' class='imgedit-wait-spin' alt='' />";	}	$attachment_url = get_permalink( $attachment_id );	$item = "	$type_html	$toggle_links	$order	$display_title	<table class='slidetoggle describe $class'>		<thead class='media-item-info' id='media-head-$post->ID'>		<tr valign='top'>			<td class='A1B1' id='thumbnail-head-$post->ID'>			<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' style='margin-top: 3px' /></a></p>			<p>$image_edit_button</p>			</td>			<td>			<p><strong>" . __('File name:') . "</strong> $filename</p>			<p><strong>" . __('File type:') . "</strong> $post->post_mime_type</p>			<p><strong>" . __('Upload date:') . "</strong> " . mysql2date( get_option('date_format'), $post->post_date ). '</p>';			if ( !empty( $media_dims ) )				$item .= "<p><strong>" . __('Dimensions:') . "</strong> $media_dims</p>\n";			$item .= "</td></tr>\n";	$item .= "		</thead>		<tbody>		<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>		<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\n";	$defaults = array(		'input'      => 'text',		'required'   => false,		'value'      => '',		'extra_rows' => array(),	);	if ( $send )		$send = "<input type='submit' class='button' name='send[$attachment_id]' value='" . esc_attr__( 'Insert into Post' ) . "' />";	if ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {		if ( !EMPTY_TRASH_DAYS ) {			$delete = "<a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Delete Permanently' ) . '</a>';		} elseif ( !MEDIA_TRASH ) {			$delete = "<a href='#' class='del-link' onclick=\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\">" . __( 'Delete' ) . "</a>			 <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>" . sprintf( __( 'You are about to delete <strong>%s</strong>.' ), $filename ) . "			 <a href='" . wp_nonce_url( "post.php?action=delete&amp;post=$attachment_id", 'delete-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='button'>" . __( 'Continue' ) . "</a>			 <a href='#' class='button' onclick=\"this.parentNode.style.display='none';return false;\">" . __( 'Cancel' ) . "</a>			 </div>";		} else {			$delete = "<a href='" . wp_nonce_url( "post.php?action=trash&amp;post=$attachment_id", 'trash-attachment_' . $attachment_id ) . "' id='del[$attachment_id]' class='delete'>" . __( 'Move to Trash' ) . "</a>			<a href='" . wp_nonce_url( "post.php?action=untrash&amp;post=$attachment_id", 'untrash-attachment_' . $attachment_id ) . "' id='undo[$attachment_id]' class='undo hidden'>" . __( 'Undo' ) . "</a>";		}	} else {		$delete = '';	}	$thumbnail = '';	$calling_post_id = 0;	if ( isset( $_GET['post_id'] ) )		$calling_post_id = absint( $_GET['post_id'] );	elseif ( isset( $_POST ) && count( $_POST ) ) // Like for async-upload where $_GET['post_id'] isn't set		$calling_post_id = $post->post_parent;	if ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {		$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$calling_post_id" );		$thumbnail = "<a class='wp-post-thumbnail' id='wp-post-thumbnail-" . $attachment_id . "' href='#' onclick='WPSetAsThumbnail(\"$attachment_id\", \"$ajax_nonce\");return false;'>" . esc_html__( "Use as featured image" ) . "</a>";	}	if ( ( $send || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) )		$form_fields['buttons'] = array( 'tr' => "\t\t<tr class='submit'><td></td><td class='savesend'>$send $thumbnail $delete</td></tr>\n" );	$hidden_fields = array();	foreach ( $form_fields as $id => $field ) {		if ( $id{0} == '_' )			continue;		if ( !empty( $field['tr'] ) ) {			$item .= $field['tr'];			continue;		}		$field = array_merge( $defaults, $field );		$name = "attachments[$attachment_id][$id]";		if ( $field['input'] == 'hidden' ) {			$hidden_fields[$name] = $field['value'];			continue;		}		$required      = $field['required'] ? '<span class="alignright"><abbr title="required" class="required">*</abbr></span>' : '';		$aria_required = $field['required'] ? " aria-required='true' " : '';		$class  = $id;		$class .= $field['required'] ? ' form-required' : '';		$item .= "\t\t<tr class='$class'>\n\t\t\t<th valign='top' scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label></th>\n\t\t\t<td class='field'>";		if ( !empty( $field[ $field['input'] ] ) )			$item .= $field[ $field['input'] ];		elseif ( $field['input'] == 'textarea' ) {			$item .= "<textarea type='text' id='$name' name='$name' $aria_required>" . esc_html( $field['value'] ) . '</textarea>';		} else {			$item .= "<input type='text' class='text' id='$name' name='$name' value='" . esc_attr( $field['value'] ) . "' $aria_required />";		}		if ( !empty( $field['helps'] ) )			$item .= "<p class='help'>" . join( "</p>\n<p class='help'>", array_unique( (array) $field['helps'] ) ) . '</p>';		$item .= "</td>\n\t\t</tr>\n";		$extra_rows = array();		if ( !empty( $field['errors'] ) )			foreach ( array_unique( (array) $field['errors'] ) as $error )				$extra_rows['error'][] = $error;		if ( !empty( $field['extra_rows'] ) )			foreach ( $field['extra_rows'] as $class => $rows )				foreach ( (array) $rows as $html )					$extra_rows[$class][] = $html;		foreach ( $extra_rows as $class => $rows )			foreach ( $rows as $html )				$item .= "\t\t<tr><td></td><td class='$class'>$html</td></tr>\n";	}	if ( !empty( $form_fields['_final'] ) )		$item .= "\t\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\n";	$item .= "\t</tbody>\n";	$item .= "\t</table>\n";	foreach ( $hidden_fields as $name => $value )		$item .= "\t<input type='hidden' name='$name' id='$name' value='" . esc_attr( $value ) . "' />\n";	if ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {		$parent = (int) $_REQUEST['post_id'];		$parent_name = "attachments[$attachment_id][post_parent]";		$item .= "\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\n";	}	return $item;}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_header() {	?>	<script type="text/javascript">post_id = <?php echo intval($_REQUEST['post_id']); ?>;</script>	<div id="media-upload-header">	<?php the_media_upload_tabs(); ?>	</div>	<?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_form( $errors = null ) {	global $type, $tab;	$flash_action_url = admin_url('async-upload.php');	// If Mac and mod_security, no Flash. :(	$flash = true;	if ( false !== stripos($_SERVER['HTTP_USER_AGENT'], 'mac') && apache_mod_loaded('mod_security') )		$flash = false;	$flash = apply_filters('flash_uploader', $flash);	$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;	$upload_size_unit = $max_upload_size =  wp_max_upload_size();	$sizes = array( 'KB', 'MB', 'GB' );	for ( $u = -1; $upload_size_unit > 1024 && $u < count( $sizes ) - 1; $u++ )		$upload_size_unit /= 1024;	if ( $u < 0 ) {		$upload_size_unit = 0;		$u = 0;	} else {		$upload_size_unit = (int) $upload_size_unit;	}?><script type="text/javascript">//<![CDATA[var uploaderMode = 0;jQuery(document).ready(function($){	uploaderMode = getUserSetting('uploader');	$('.upload-html-bypass a').click(function(){deleteUserSetting('uploader');uploaderMode=0;swfuploadPreLoad();return false;});	$('.upload-flash-bypass a').click(function(){setUserSetting('uploader', '1');uploaderMode=1;swfuploadPreLoad();return false;});});//]]></script><div id="media-upload-notice"><?php if (isset($errors['upload_notice']) ) { ?>	<?php echo $errors['upload_notice']; ?><?php } ?></div><div id="media-upload-error"><?php if (isset($errors['upload_error']) && is_wp_error($errors['upload_error'])) { ?>	<?php echo $errors['upload_error']->get_error_message(); ?><?php } ?></div><?php// Check quota for this blog if multisiteif ( is_multisite() && !is_upload_space_available() ) {	echo '<p>' . sprintf( __( 'Sorry, you have filled your storage quota (%s MB).' ), get_space_allowed() ) . '</p>';	return;}do_action('pre-upload-ui');if ( $flash ) : ?><script type="text/javascript">//<![CDATA[var swfu;SWFUpload.onload = function() {	var settings = {			button_text: '<span class="button"><?php _e('Select Files'); ?><\/span>',			button_text_style: '.button { text-align: center; font-weight: bold; font-family:"Lucida Grande",Verdana,Arial,"Bitstream Vera Sans",sans-serif; font-size: 11px; text-shadow: 0 1px 0 #FFFFFF; color:#464646; }',			button_height: "23",			button_width: "132",			button_text_top_padding: 3,			button_image_url: '<?php echo includes_url('images/upload.png?ver=20100531'); ?>',			button_placeholder_id: "flash-browse-button",			upload_url : "<?php echo esc_attr( $flash_action_url ); ?>",			flash_url : "<?php echo includes_url('js/swfupload/swfupload.swf'); ?>",			file_post_name: "async-upload",			file_types: "<?php echo apply_filters('upload_file_glob', '*.*'); ?>",			post_params : {				"post_id" : "<?php echo $post_id; ?>",				"auth_cookie" : "<?php echo (is_ssl() ? $_COOKIE[SECURE_AUTH_COOKIE] : $_COOKIE[AUTH_COOKIE]); ?>",				"logged_in_cookie": "<?php echo $_COOKIE[LOGGED_IN_COOKIE]; ?>",				"_wpnonce" : "<?php echo wp_create_nonce('media-form'); ?>",				"type" : "<?php echo $type; ?>",				"tab" : "<?php echo $tab; ?>",				"short" : "1"			},			file_size_limit : "<?php echo $max_upload_size; ?>b",			file_dialog_start_handler : fileDialogStart,			file_queued_handler : fileQueued,			upload_start_handler : uploadStart,			upload_progress_handler : uploadProgress,			upload_error_handler : uploadError,			upload_success_handler : uploadSuccess,			upload_complete_handler : uploadComplete,			file_queue_error_handler : fileQueueError,			file_dialog_complete_handler : fileDialogComplete,			swfupload_pre_load_handler: swfuploadPreLoad,			swfupload_load_failed_handler: swfuploadLoadFailed,			custom_settings : {				degraded_element_id : "html-upload-ui", // id of the element displayed when swfupload is unavailable				swfupload_element_id : "flash-upload-ui" // id of the element displayed when swfupload is available			},			debug: false		};		swfu = new SWFUpload(settings);};//]]></script><div id="flash-upload-ui" class="hide-if-no-js"><?php do_action('pre-flash-upload-ui'); ?>	<div>	<?php _e( 'Choose files to upload' ); ?>	<div id="flash-browse-button"></div>	<span><input id="cancel-upload" disabled="disabled" onclick="cancelUpload()" type="button" value="<?php esc_attr_e('Cancel Upload'); ?>" class="button" /></span>	</div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p><?php do_action('post-flash-upload-ui'); ?>	<p class="howto"><?php _e('After a file has been uploaded, you can add titles and descriptions.'); ?></p></div><?php endif; // $flash ?><div id="html-upload-ui"><?php do_action('pre-html-upload-ui'); ?>	<p id="async-upload-wrap">	<label class="screen-reader-text" for="async-upload"><?php _e('Upload'); ?></label>	<input type="file" name="async-upload" id="async-upload" /> <input type="submit" class="button" name="html-upload" value="<?php esc_attr_e('Upload'); ?>" /> <a href="#" onclick="try{top.tb_remove();}catch(e){}; return false;"><?php _e('Cancel'); ?></a>	</p>	<div class="clear"></div>	<p class="media-upload-size"><?php printf( __( 'Maximum upload file size: %d%s' ), $upload_size_unit, $sizes[$u] ); ?></p>	<?php if ( is_lighttpd_before_150() ): ?>	<p><?php _e('If you want to use all capabilities of the uploader, like uploading multiple files at once, please upgrade to lighttpd 1.5.'); ?></p>	<?php endif;?><?php do_action('post-html-upload-ui', $flash); ?></div><?php do_action('post-upload-ui'); ?><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="submit" class="hidden" name="save" value="" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><h3 class="media-title"><?php _e('Add media files from your computer'); ?></h3><?php media_upload_form( $errors ); ?><script type="text/javascript">//<![CDATA[jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});	}	updateMediaForm();});//]]></script><div id="media-items"><?phpif ( $id ) {	if ( !is_wp_error($id) ) {		add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);		echo get_media_items( $id, $errors );	} else {		echo '<div id="media-upload-error">'.esc_html($id->get_error_message()).'</div>';		exit;	}}?></div><p class="savebutton ml-submit"><input type="submit" class="button" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @param unknown_type $errors * @param unknown_type $id */function media_upload_type_url_form($type = 'file', $errors = null, $id = null) {	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=type&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$callback = "type_url_form_$type";?><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form type-form validate" id="<?php echo $type; ?>-form"><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><?php wp_nonce_field('media-form'); ?><?php if ( is_callable($callback) ) { ?><h3 class="media-title"><?php _e('Add media file from URL'); ?></h3><script type="text/javascript">//<![CDATA[var addExtImage = {	width : '',	height : '',	align : 'alignnone',	insert : function() {		var t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';		if ( '' == f.src.value || '' == t.width )			return false;		if ( f.title.value ) {			title = f.title.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');			title = ' title="'+title+'"';		}		if ( f.alt.value )			alt = f.alt.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php if ( ! apply_filters( 'disable_captions', '' ) ) { ?>		if ( f.caption.value )			caption = f.caption.value.replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<?php } ?>		cls = caption ? '' : ' class="'+t.align+'"';		html = '<img alt="'+alt+'" src="'+f.src.value+'"'+title+cls+' width="'+t.width+'" height="'+t.height+'" />';		if ( f.url.value )			html = '<a href="'+f.url.value+'">'+html+'</a>';		if ( caption )			html = '[caption id="" align="'+t.align+'" width="'+t.width+'" caption="'+caption+'"]'+html+'[/caption]';		var win = window.dialogArguments || opener || parent || top;		win.send_to_editor(html);		return false;	},	resetImageData : function() {		var t = addExtImage;		t.width = t.height = '';		document.getElementById('go_button').style.color = '#bbb';		if ( ! document.forms[0].src.value )			document.getElementById('status_img').innerHTML = '*';		else document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>" alt="" />';	},	updateImageData : function() {		var t = addExtImage;		t.width = t.preloadImg.width;		t.height = t.preloadImg.height;		document.getElementById('go_button').style.color = '#333';		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>" alt="" />';	},	getImageData : function() {		var t = addExtImage, src = document.forms[0].src.value;		if ( ! src ) {			t.resetImageData();			return false;		}		document.getElementById('status_img').innerHTML = '<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />';		t.preloadImg = new Image();		t.preloadImg.onload = t.updateImageData;		t.preloadImg.onerror = t.resetImageData;		t.preloadImg.src = src;	}}//]]></script><div id="media-items"><div class="media-item media-blank"><?php echo apply_filters($callback, call_user_func($callback)); ?></div></div></form><?php	} else {		wp_die( __('Unknown action.') );	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_gallery_form($errors) {	global $redir_tab, $type;	$redir_tab = 'gallery';	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=gallery&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="sort-buttons" class="hide-if-no-js"><span><?php _e('All Tabs:'); ?><a href="#" id="showall"><?php _e('Show'); ?></a><a href="#" id="hideall" style="display:none;"><?php _e('Hide'); ?></a></span><?php _e('Sort Order:'); ?><a href="#" id="asc"><?php _e('Ascending'); ?></a> |<a href="#" id="desc"><?php _e('Descending'); ?></a> |<a href="#" id="clear"><?php _ex('Clear', 'verb'); ?></a></div><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="gallery-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><table class="widefat" cellspacing="0"><thead><tr><th><?php _e('Media'); ?></th><th class="order-head"><?php _e('Order'); ?></th><th class="actions-head"><?php _e('Actions'); ?></th></tr></thead></table><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items($post_id, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" style="display:none;" name="save" id="save-all" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="type" value="<?php echo esc_attr( $GLOBALS['type'] ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $GLOBALS['tab'] ); ?>" /></p><div id="gallery-settings" style="display:none;"><div class="title"><?php _e('Gallery Settings'); ?></div><table id="basic" class="describe"><tbody>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Link thumbnails to:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" name="linkto" id="linkto-file" value="file" />		<label for="linkto-file" class="radio"><?php _e('Image File'); ?></label>		<input type="radio" checked="checked" name="linkto" id="linkto-post" value="post" />		<label for="linkto-post" class="radio"><?php _e('Attachment Page'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order images by:'); ?></span>		</label>	</th>	<td class="field">		<select id="orderby" name="orderby">			<option value="menu_order" selected="selected"><?php _e('Menu order'); ?></option>			<option value="title"><?php _e('Title'); ?></option>			<option value="ID"><?php _e('Date/Time'); ?></option>			<option value="rand"><?php _e('Random'); ?></option>		</select>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Order:'); ?></span>		</label>	</th>	<td class="field">		<input type="radio" checked="checked" name="order" id="order-asc" value="asc" />		<label for="order-asc" class="radio"><?php _e('Ascending'); ?></label>		<input type="radio" name="order" id="order-desc" value="desc" />		<label for="order-desc" class="radio"><?php _e('Descending'); ?></label>	</td>	</tr>	<tr>	<th scope="row" class="label">		<label>		<span class="alignleft"><?php _e('Gallery columns:'); ?></span>		</label>	</th>	<td class="field">		<select id="columns" name="columns">			<option value="2">2</option>			<option value="3" selected="selected">3</option>			<option value="4">4</option>			<option value="5">5</option>			<option value="6">6</option>			<option value="7">7</option>			<option value="8">8</option>			<option value="9">9</option>		</select>	</td>	</tr></tbody></table><p class="ml-submit"><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="insert-gallery" id="insert-gallery" value="<?php esc_attr_e( 'Insert gallery' ); ?>" /><input type="button" class="button" style="display:none;" onMouseDown="wpgallery.update();" name="update-gallery" id="update-gallery" value="<?php esc_attr_e( 'Update gallery settings' ); ?>" /></p></div></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $errors */function media_upload_library_form($errors) {	global $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;	media_upload_header();	$post_id = intval($_REQUEST['post_id']);	$form_action_url = admin_url("media-upload.php?type=$type&tab=library&post_id=$post_id");	$form_action_url = apply_filters('media_upload_form_url', $form_action_url, $type);	$_GET['paged'] = isset( $_GET['paged'] ) ? intval($_GET['paged']) : 0;	if ( $_GET['paged'] < 1 )		$_GET['paged'] = 1;	$start = ( $_GET['paged'] - 1 ) * 10;	if ( $start < 1 )		$start = 0;	add_filter( 'post_limits', create_function( '$a', "return 'LIMIT $start, 10';" ) );	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();?><form id="filter" action="" method="get"><input type="hidden" name="type" value="<?php echo esc_attr( $type ); ?>" /><input type="hidden" name="tab" value="<?php echo esc_attr( $tab ); ?>" /><input type="hidden" name="post_id" value="<?php echo (int) $post_id; ?>" /><input type="hidden" name="post_mime_type" value="<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>" /><p id="media-search" class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e('Search Media');?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $_type => $reals )	foreach ( $reals as $real )		if ( isset($num_posts[$_type]) )			$num_posts[$_type] += $_num_posts[$real];		else			$num_posts[$_type] = $_num_posts[$real];// If available type specified by media button clicked, filter by that typeif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {	$_GET['post_mime_type'] = $type;	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}if ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )	$class = ' class="current"';else	$class = '';$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . "'$class>".__('All Types')."</a>";foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	$type_links[] = "<li><a href='" . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . "'$class>" . sprintf(_n($label[2][0], $label[2][1], $num_posts[$mime_type]), "<span id='$mime_type-counter'>" . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';}echo implode(' | </li>', $type_links) . '</li>';unset($type_links);?></ul><div class="tablenav"><?php$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($wp_query->found_posts / 10),	'current' => $_GET['paged']));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><?php$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";$arc_result = $wpdb->get_results( $arc_query );$month_count = count($arc_result);if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?><select name='m'><option<?php selected( @$_GET['m'], 0 ); ?> value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . "'>";	echo esc_html( $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear" );	echo "</option>\n";}?></select><?php } ?><input type="submit" id="post-query-submit" value="<?php echo esc_attr( __( 'Filter &#187;' ) ); ?>" class="button-secondary" /></div><br class="clear" /></div></form><form enctype="multipart/form-data" method="post" action="<?php echo esc_attr($form_action_url); ?>" class="media-upload-form validate" id="library-form"><?php wp_nonce_field('media-form'); ?><?php //media_upload_form( $errors ); ?><script type="text/javascript"><!--jQuery(function($){	var preloaded = $(".media-item.preloaded");	if ( preloaded.length > 0 ) {		preloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});		updateMediaForm();	}});--></script><div id="media-items"><?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?><?php echo get_media_items(null, $errors); ?></div><p class="ml-submit"><input type="submit" class="button savebutton" name="save" value="<?php esc_attr_e( 'Save all changes' ); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo (int) $post_id; ?>" /></p></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_image() {	if ( !apply_filters( 'disable_captions', '' ) ) {		$caption = '		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="caption">' . __('Image Caption') . '</label></span>			</th>			<td class="field"><input id="caption" name="caption" value="" type="text" /></td>		</tr>';	} else {		$caption = '';	}	$default_align = get_option('image_default_align');	if ( empty($default_align) )		$default_align = 'none';	return '	<h4 class="media-sub-title">' . __('Insert an image from another web site') . '</h4>	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label" style="width:130px;">				<span class="alignleft"><label for="src">' . __('Image URL') . '</label></span>				<span class="alignright"><abbr id="status_img" title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="src" name="src" value="" type="text" aria-required="true" onblur="addExtImage.getImageData()" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="title">' . __('Image Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="title" name="title" value="" type="text" aria-required="true" /></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="alt">' . __('Alternate Text') . '</label></span>			</th>			<td class="field"><input id="alt" name="alt" value="" type="text" aria-required="true" />			<p class="help">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>		</tr>		' . $caption . '		<tr class="align">			<th valign="top" scope="row" class="label"><p><label for="align">' . __('Alignment') . '</label></p></th>			<td class="field">				<input name="align" id="align-none" value="none" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'none' ? ' checked="checked"' : '').' />				<label for="align-none" class="align image-align-none-label">' . __('None') . '</label>				<input name="align" id="align-left" value="left" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'left' ? ' checked="checked"' : '').' />				<label for="align-left" class="align image-align-left-label">' . __('Left') . '</label>				<input name="align" id="align-center" value="center" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'center' ? ' checked="checked"' : '').' />				<label for="align-center" class="align image-align-center-label">' . __('Center') . '</label>				<input name="align" id="align-right" value="right" onclick="addExtImage.align=\'align\'+this.value" type="radio"' . ($default_align == 'right' ? ' checked="checked"' : '').' />				<label for="align-right" class="align image-align-right-label">' . __('Right') . '</label>			</td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="url">' . __('Link Image To:') . '</label></span>			</th>			<td class="field"><input id="url" name="url" value="" type="text" /><br />			<button type="button" class="button" value="" onclick="document.forms[0].url.value=null">' . __('None') . '</button>			<button type="button" class="button" value="" onclick="document.forms[0].url.value=document.forms[0].src.value">' . __('Link to image') . '</button>			<p class="help">' . __('Enter a link URL or click above for presets.') . '</p></td>		</tr>	' . _insert_into_post_button('image') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_audio() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Audio File URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Still Alive by Jonathan Coulton&#8221;') . '</td></tr>	' . _insert_into_post_button('audio') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_video() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('Video URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Lucy on YouTube&#8220;') . '</td></tr>	' . _insert_into_post_button('video') . '	</tbody></table>';}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function type_url_form_file() {	return '	<table class="describe"><tbody>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[href]">' . __('URL') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[href]" name="insertonly[href]" value="" type="text" aria-required="true"></td>		</tr>		<tr>			<th valign="top" scope="row" class="label">				<span class="alignleft"><label for="insertonly[title]">' . __('Title') . '</label></span>				<span class="alignright"><abbr title="required" class="required">*</abbr></span>			</th>			<td class="field"><input id="insertonly[title]" name="insertonly[title]" value="" type="text" aria-required="true"></td>		</tr>		<tr><td></td><td class="help">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</td></tr>	' . _insert_into_post_button('file') . '	</tbody></table>';}function _insert_into_post_button($type) {	if ( !post_type_supports(get_post_type($_GET['post_id']), 'editor') )		return '';	if ( 'image' == $type )	return '		<tr>			<td></td>			<td>				<input type="button" class="button" id="go_button" style="color:#bbb;" onclick="addExtImage.insert()" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';	return '		<tr>			<td></td>			<td>				<input type="submit" class="button" name="insertonlybutton" value="' . esc_attr__('Insert into Post') . '" />			</td>		</tr>	';}/** * {@internal Missing Short Description}} * * Support a GET parameter for disabling the flash uploader. * * @since unknown * * @param unknown_type $flash * @return unknown */function media_upload_use_flash($flash) {	if ( array_key_exists('flash', $_REQUEST) )		$flash = !empty($_REQUEST['flash']);	return $flash;}add_filter('flash_uploader', 'media_upload_use_flash');/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_flash_bypass() {	echo '<p class="upload-flash-bypass">';	printf( __('You are using the Flash uploader.  Problems?  Try the <a href="%s">Browser uploader</a> instead.'), esc_url(add_query_arg('flash', 0)) );	echo '</p>';}/** * {@internal Missing Short Description}} * * @since unknown */function media_upload_html_bypass($flash = true) {	echo '<p class="upload-html-bypass hide-if-no-js">';	_e('You are using the Browser uploader.');	if ( $flash ) {		// the user manually selected the browser uploader, so let them switch back to Flash		echo ' ';		printf( __('Try the <a href="%s">Flash uploader</a> instead.'), esc_url(add_query_arg('flash', 1)) );	}	echo "</p>\n";}add_action('post-flash-upload-ui', 'media_upload_flash_bypass');add_action('post-html-upload-ui', 'media_upload_html_bypass');/** * {@internal Missing Short Description}} * * Make sure the GET parameter sticks when we submit a form. * * @since unknown * * @param unknown_type $url * @return unknown */function media_upload_bypass_url($url) {	if ( array_key_exists('flash', $_REQUEST) )		$url = add_query_arg('flash', intval($_REQUEST['flash']));	return $url;}add_filter('media_upload_form_url', 'media_upload_bypass_url');add_filter('async_upload_image', 'get_media_item', 10, 2);add_filter('async_upload_audio', 'get_media_item', 10, 2);add_filter('async_upload_video', 'get_media_item', 10, 2);add_filter('async_upload_file', 'get_media_item', 10, 2);add_action('media_upload_image', 'media_upload_image');add_action('media_upload_audio', 'media_upload_audio');add_action('media_upload_video', 'media_upload_video');add_action('media_upload_file', 'media_upload_file');add_filter('media_upload_gallery', 'media_upload_gallery');add_filter('media_upload_library', 'media_upload_library');
<?php/** * WordPress Export Administration Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once ('admin.php');if ( !current_user_can('export') )	wp_die(__('You do not have sufficient permissions to export the content of this site.'));/** Load WordPress export API */require_once('./includes/export.php');$title = __('Export');add_contextual_help($current_screen,	'<p>' . __('You can export a file of your site&#8217;s content in order to import it into another installation or platform. The export file will be an XML file format called WXR. Posts, pages, comments, custom fields, categories, and tags can be included. You can set filters to have the WXR file only include a certain date, author, category, tag, all posts or all pages, certain publishing statuses.') . '</p>' .	'<p>' . __('Once generated, your WXR file can be imported by another WordPress site or by another blogging platform able to access this format.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Export_SubPanel" target="_blank">Export Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( isset( $_GET['download'] ) ) {		$author = isset($_GET['author']) ? $_GET['author'] : 'all';		$taxonomy = array();		foreach ( get_taxonomies( array( 'show_ui' => true ) ) as $tax )			$taxonomy[ $tax ] = ! empty( $_GET['taxonomy'][ $tax ] ) ? $_GET['taxonomy'][ $tax ] : 'all';		$post_type = isset($_GET['post_type']) ? stripslashes_deep($_GET['post_type']) : 'all';		$status = isset($_GET['status']) ? stripslashes_deep($_GET['status']) : 'all';		$mm_start = isset($_GET['mm_start']) ? $_GET['mm_start'] : 'all';		$mm_end = isset($_GET['mm_end']) ? $_GET['mm_end'] : 'all';		if( $mm_start != 'all' ) {			$start_date = sprintf( "%04d-%02d-%02d", substr( $mm_start, 0, 4 ), substr( $mm_start, 5, 2 ), 1 );		} else {			$start_date = 'all';		}		if( $mm_end != 'all' ) {			$end_date = sprintf( "%04d-%02d-%02d", substr( $mm_end, 0, 4 ), substr( $mm_end, 5, 2 ), 1 );		} else {			$end_date = 'all';		}	export_wp( array( 'author' => $author, 'taxonomy' => $taxonomy, 'post_type' => $post_type, 'post_status' => $status, 'start_date' => $start_date, 'end_date' => $end_date ) );	die();}require_once ('admin-header.php');$dateoptions = $edateoptions = '';$types = "'" . implode("', '", get_post_types( array( 'public' => true, 'can_export' => true ), 'names' )) . "'";$stati = "'" . implode("', '", get_post_stati( array( 'internal' => false ), 'names' )) . "'";if ( $monthyears = $wpdb->get_results("SELECT DISTINCT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, YEAR(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `eyear`, MONTH(DATE_ADD(post_date, INTERVAL 1 MONTH)) AS `emonth` FROM $wpdb->posts WHERE post_type IN ($types) AND post_status IN ($stati) ORDER BY post_date ASC ") ) {	foreach ( $monthyears as $k => $monthyear )		$monthyears[$k]->lmonth = $wp_locale->get_month( $monthyear->month, 2 );	for( $s = 0, $e = count( $monthyears ) - 1; $e >= 0; $s++, $e-- ) {		$dateoptions .= "\t<option value=\"" . $monthyears[$s]->year . '-' . zeroise( $monthyears[$s]->month, 2 ) . '">' . $monthyears[$s]->lmonth . ' ' . $monthyears[$s]->year . "</option>\n";		$edateoptions .= "\t<option value=\"" . $monthyears[$e]->eyear . '-' . zeroise( $monthyears[$e]->emonth, 2 ) . '">' . $monthyears[$e]->lmonth . ' ' . $monthyears[$e]->year . "</option>\n";	}}?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><p><?php _e('When you click the button below WordPress will create an XML file for you to save to your computer.'); ?></p><p><?php _e('This format, which we call WordPress eXtended RSS or WXR, will contain your posts, pages, comments, custom fields, categories, and tags.'); ?></p><p><?php _e('Once you&#8217;ve saved the download file, you can use the Import function on another WordPress site to import this site.'); ?></p><form action="" method="get"><h3><?php _e('Filters'); ?></h3><table class="form-table"><tr><th><label for="mm_start"><?php _e('Start Date'); ?></label></th><td><select name="mm_start" id="mm_start">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $dateoptions; ?></select></td></tr><tr><th><label for="mm_end" id="mm_end"><?php _e('End Date'); ?></label></th><td><select name="mm_end" id="mm_end">	<option value="all" selected="selected"><?php _e('All Dates'); ?></option><?php echo $edateoptions; ?></select></td></tr><tr><th><label for="author"><?php _e('Authors'); ?></label></th><td><select name="author" id="author"><option value="all" selected="selected"><?php _e('All Authors'); ?></option><?php$authors = $wpdb->get_results( "SELECT DISTINCT u.id, u.display_name FROM $wpdb->users u INNER JOIN $wpdb->posts p WHERE u.id = p.post_author ORDER BY u.display_name" );foreach ( (array) $authors as $author ) {	echo "<option value='{$author->id}'>{$author->display_name}</option>\n";}?></select></td></tr><?php foreach ( get_taxonomies( array( 'show_ui' => true ), 'objects' ) as $tax_obj ) {	$term_dropdown = wp_dropdown_categories( array( 'taxonomy' => $tax_obj->name, 'hide_if_empty' => true, 'show_option_all' => __( 'All Terms' ), 'name' => 'taxonomy[' . $tax_obj->name . ']', 'id' => 'taxonomy-' . $tax_obj->name, 'class' => '', 'echo' => false ) );	if ( $term_dropdown )		echo '<tr><th><label for="taxonomy-' . $tax_obj->name . '">' . $tax_obj->labels->name . '</label></th><td>' . $term_dropdown . '</td></tr>';}?><tr><th><label for="post_type"><?php _e('Content Types'); ?></label></th><td><select name="post_type" id="post_type">	<option value="all" selected="selected"><?php _e('All Content'); ?></option>	<?php foreach ( get_post_types( array( 'public' => true, 'can_export' => true ), 'objects' ) as $post_type_obj ) { ?>		<option value="<?php echo $post_type_obj->name; ?>"><?php echo $post_type_obj->labels->name; ?></option>	<?php } ?></select></td></tr><tr><th><label for="status"><?php _e('Statuses'); ?></label></th><td><select name="status" id="status">	<option value="all" selected="selected"><?php _e('All Statuses'); ?></option><?php foreach ( get_post_stati( array( 'internal' => false ), 'objects' ) as $post_status_obj ) { ?>	<option value="<?php echo $post_status_obj->name; ?>"><?php echo $post_status_obj->label; ?></option><?php } ?></select></td></tr></table><p class="submit"><input type="submit" name="submit" class="button" value="<?php esc_attr_e('Download Export File'); ?>" /><input type="hidden" name="download" value="true" /></p></form></div><?phpinclude ('admin-footer.php');?>
<?php/** * WordPress Post Administration API. * * @package WordPress * @subpackage Administration *//** * Rename $_POST data from form names to DB post columns. * * Manipulates $_POST directly. * * @package WordPress * @since 2.6.0 * * @param bool $update Are we updating a pre-existing post? * @param post_data array Array of post data. Defaults to the contents of $_POST. * @return object|bool WP_Error on failure, true on success. */function _wp_translate_postdata( $update = false, $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	if ( $update )		$post_data['ID'] = (int) $post_data['post_ID'];	$post_data['post_content'] = isset($post_data['content']) ? $post_data['content'] : '';	$post_data['post_excerpt'] = isset($post_data['excerpt']) ? $post_data['excerpt'] : '';	$post_data['post_parent'] = isset($post_data['parent_id'])? $post_data['parent_id'] : '';	if ( isset($post_data['trackback_url']) )		$post_data['to_ping'] = $post_data['trackback_url'];	if ( !isset($post_data['user_ID']) )		$post_data['user_ID'] = $GLOBALS['user_ID'];	if (!empty ( $post_data['post_author_override'] ) ) {		$post_data['post_author'] = (int) $post_data['post_author_override'];	} else {		if (!empty ( $post_data['post_author'] ) ) {			$post_data['post_author'] = (int) $post_data['post_author'];		} else {			$post_data['post_author'] = (int) $post_data['user_ID'];		}	}	$ptype = get_post_type_object( $post_data['post_type'] );	if ( isset($post_data['user_ID']) && ($post_data['post_author'] != $post_data['user_ID']) ) {		if ( !current_user_can( $ptype->cap->edit_others_posts ) ) {			if ( 'page' == $post_data['post_type'] ) {				return new WP_Error( 'edit_others_pages', $update ?					__( 'You are not allowed to edit pages as this user.' ) :					__( 'You are not allowed to create pages as this user.' )				);			} else {				return new WP_Error( 'edit_others_posts', $update ?					__( 'You are not allowed to edit posts as this user.' ) :					__( 'You are not allowed to post as this user.' )				);			}		}	}	// What to do based on which button they pressed	if ( isset($post_data['saveasdraft']) && '' != $post_data['saveasdraft'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['saveasprivate']) && '' != $post_data['saveasprivate'] )		$post_data['post_status'] = 'private';	if ( isset($post_data['publish']) && ( '' != $post_data['publish'] ) && ( !isset($post_data['post_status']) || $post_data['post_status'] != 'private' ) )		$post_data['post_status'] = 'publish';	if ( isset($post_data['advanced']) && '' != $post_data['advanced'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['pending']) && '' != $post_data['pending'] )		$post_data['post_status'] = 'pending';	if ( isset( $post_data['ID'] ) )		$post_id = $post_data['ID'];	else		$post_id = false;	$previous_status = $post_id ? get_post_field( 'post_status', $post_id ) : false;	// Posts 'submitted for approval' present are submitted to $_POST the same as if they were being published.	// Change status from 'publish' to 'pending' if user lacks permissions to publish or to resave published posts.	if ( isset($post_data['post_status']) && ('publish' == $post_data['post_status'] && !current_user_can( $ptype->cap->publish_posts )) )		if ( $previous_status != 'publish' || !current_user_can( 'edit_post', $post_id ) )			$post_data['post_status'] = 'pending';	if ( ! isset($post_data['post_status']) )		$post_data['post_status'] = $previous_status;	if (!isset( $post_data['comment_status'] ))		$post_data['comment_status'] = 'closed';	if (!isset( $post_data['ping_status'] ))		$post_data['ping_status'] = 'closed';	foreach ( array('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $post_data['hidden_' . $timeunit] ) && $post_data['hidden_' . $timeunit] != $post_data[$timeunit] ) {			$post_data['edit_date'] = '1';			break;		}	}	if ( !empty( $post_data['edit_date'] ) ) {		$aa = $post_data['aa'];		$mm = $post_data['mm'];		$jj = $post_data['jj'];		$hh = $post_data['hh'];		$mn = $post_data['mn'];		$ss = $post_data['ss'];		$aa = ($aa <= 0 ) ? date('Y') : $aa;		$mm = ($mm <= 0 ) ? date('n') : $mm;		$jj = ($jj > 31 ) ? 31 : $jj;		$jj = ($jj <= 0 ) ? date('j') : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$post_data['post_date'] = sprintf( "%04d-%02d-%02d %02d:%02d:%02d", $aa, $mm, $jj, $hh, $mn, $ss );		$post_data['post_date_gmt'] = get_gmt_from_date( $post_data['post_date'] );	}	return $post_data;}/** * Update an existing post with values provided in $_POST. * * @since unknown * * @param array $post_data Optional. * @return int Post ID. */function edit_post( $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	$post_ID = (int) $post_data['post_ID'];	$ptype = get_post_type_object($post_data['post_type']);	if ( !current_user_can( $ptype->cap->edit_post, $post_ID ) ) {		if ( 'page' == $post_data['post_type'] )			wp_die( __('You are not allowed to edit this page.' ));		else			wp_die( __('You are not allowed to edit this post.' ));	}	// Autosave shouldn't save too soon after a real save	if ( 'autosave' == $post_data['action'] ) {		$post =& get_post( $post_ID );		$now = time();		$then = strtotime($post->post_date_gmt . ' +0000');		$delta = AUTOSAVE_INTERVAL / 2;		if ( ($now - $then) < $delta )			return $post_ID;	}	$post_data = _wp_translate_postdata( true, $post_data );	if ( 'autosave' != $post_data['action']  && 'auto-draft' == $post_data['post_status'] )		$post_data['post_status'] = 'draft';	if ( is_wp_error($post_data) )		wp_die( $post_data->get_error_message() );	if ( isset($post_data['visibility']) ) {		switch ( $post_data['visibility'] ) {			case 'public' :				$post_data['post_password'] = '';				break;			case 'password' :				unset( $post_data['sticky'] );				break;			case 'private' :				$post_data['post_status'] = 'private';				$post_data['post_password'] = '';				unset( $post_data['sticky'] );				break;		}	}	// Meta Stuff	if ( isset($post_data['meta']) && $post_data['meta'] ) {		foreach ( $post_data['meta'] as $key => $value )			update_meta( $key, $value['key'], $value['value'] );	}	if ( isset($post_data['deletemeta']) && $post_data['deletemeta'] ) {		foreach ( $post_data['deletemeta'] as $key => $value )			delete_meta( $key );	}	add_meta( $post_ID );	update_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	wp_update_post( $post_data );	// Reunite any orphaned attachments with their parent	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	if ( current_user_can( 'edit_others_posts' ) ) {		if ( !empty($post_data['sticky']) )			stick_post($post_ID);		else			unstick_post($post_ID);	}	return $post_ID;}/** * Process the post data for the bulk editing of posts. * * Updates all bulk edited posts/pages, adding (but not removing) tags and * categories. Skips pages when they would be their own parent or child. * * @since 2.7.0 * * @param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal. * @return array */function bulk_edit_posts( $post_data = null ) {	global $wpdb;	if ( empty($post_data) )		$post_data = &$_POST;	if ( isset($post_data['post_type']) )		$ptype = get_post_type_object($post_data['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			wp_die( __('You are not allowed to edit pages.'));		else			wp_die( __('You are not allowed to edit posts.'));	}	if ( -1 == $post_data['_status'] ) {		$post_data['post_status'] = null;		unset($post_data['post_status']);	} else {		$post_data['post_status'] = $post_data['_status'];	}	unset($post_data['_status']);	$post_IDs = array_map( 'intval', (array) $post_data['post'] );	$reset = array( 'post_author', 'post_status', 'post_password', 'post_parent', 'page_template', 'comment_status', 'ping_status', 'keep_private', 'tax_input', 'post_category', 'sticky' );	foreach ( $reset as $field ) {		if ( isset($post_data[$field]) && ( '' == $post_data[$field] || -1 == $post_data[$field] ) )			unset($post_data[$field]);	}	if ( isset($post_data['post_category']) ) {		if ( is_array($post_data['post_category']) && ! empty($post_data['post_category']) )			$new_cats = array_map( 'absint', $post_data['post_category'] );		else			unset($post_data['post_category']);	}	$tax_input = array();	if ( isset($post_data['tax_input'])) {		foreach ( $post_data['tax_input'] as $tax_name => $terms ) {			if ( empty($terms) )				continue;			if ( is_taxonomy_hierarchical( $tax_name ) )				$tax_input[$tax_name] = array_map( 'absint', $terms );			else {				$tax_input[$tax_name] = preg_replace( '/\s*,\s*/', ',', rtrim( trim($terms), ' ,' ) );				$tax_input[$tax_name] = explode(',', $tax_input[$tax_name]);			}		}	}	if ( isset($post_data['post_parent']) && ($parent = (int) $post_data['post_parent']) ) {		$pages = $wpdb->get_results("SELECT ID, post_parent FROM $wpdb->posts WHERE post_type = 'page'");		$children = array();		for ( $i = 0; $i < 50 && $parent > 0; $i++ ) {			$children[] = $parent;			foreach ( $pages as $page ) {				if ( $page->ID == $parent ) {					$parent = $page->post_parent;					break;				}			}		}	}	$updated = $skipped = $locked = array();	foreach ( $post_IDs as $post_ID ) {		$post_type_object = get_post_type_object( get_post_type( $post_ID ) );		if ( !isset( $post_type_object ) || ( isset($children) && in_array($post_ID, $children) ) || !current_user_can( $post_type_object->cap->edit_post, $post_ID ) ) {			$skipped[] = $post_ID;			continue;		}		if ( wp_check_post_lock( $post_ID ) ) {			$locked[] = $post_ID;			continue;		}		$tax_names = get_object_taxonomies( get_post($post_ID) );		foreach ( $tax_names as $tax_name ) {			$taxonomy_obj = get_taxonomy($tax_name);			if (  isset( $tax_input[$tax_name]) && current_user_can( $taxonomy_obj->cap->assign_terms ) )				$new_terms = $tax_input[$tax_name];			else				$new_terms = array();			if ( $taxonomy_obj->hierarchical )				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'ids') );			else				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'names') );			$post_data['tax_input'][$tax_name] = array_merge( $current_terms, $new_terms );		}		if ( isset($new_cats) && in_array( 'category', $tax_names ) ) {			$cats = (array) wp_get_post_categories($post_ID);			$post_data['post_category'] = array_unique( array_merge($cats, $new_cats) );			unset( $post_data['tax_input']['category'] );		}		$post_data['ID'] = $post_ID;		$updated[] = wp_update_post( $post_data );		if ( isset( $post_data['sticky'] ) && current_user_can( 'edit_others_posts' ) ) {			if ( 'sticky' == $post_data['sticky'] )				stick_post( $post_ID );			else				unstick_post( $post_ID );		}	}	return array( 'updated' => $updated, 'skipped' => $skipped, 'locked' => $locked );}/** * Default post information to use when populating the "Write Post" form. * * @since unknown * *@param string A post type string, defaults to 'post'. * @return object stdClass object containing all the default post data as attributes */function get_default_post_to_edit( $post_type = 'post', $create_in_db = false ) {	global $wpdb;	$post_title = '';	if ( !empty( $_REQUEST['post_title'] ) )		$post_title = esc_html( stripslashes( $_REQUEST['post_title'] ));	$post_content = '';	if ( !empty( $_REQUEST['content'] ) )		$post_content = esc_html( stripslashes( $_REQUEST['content'] ));	$post_excerpt = '';	if ( !empty( $_REQUEST['excerpt'] ) )		$post_excerpt = esc_html( stripslashes( $_REQUEST['excerpt'] ));	if ( $create_in_db ) {		// Cleanup old auto-drafts more than 7 days old		$old_posts = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date" );		foreach ( (array) $old_posts as $delete )			wp_delete_post( $delete, true ); // Force delete		$post = get_post( wp_insert_post( array( 'post_title' => __( 'Auto Draft' ), 'post_type' => $post_type, 'post_status' => 'auto-draft' ) ) );	} else {		$post->ID = 0;		$post->post_author = '';		$post->post_date = '';		$post->post_date_gmt = '';		$post->post_password = '';		$post->post_type = $post_type;		$post->post_status = 'draft';		$post->to_ping = '';		$post->pinged = '';		$post->comment_status = get_option( 'default_comment_status' );		$post->ping_status = get_option( 'default_ping_status' );		$post->post_pingback = get_option( 'default_pingback_flag' );		$post->post_category = get_option( 'default_category' );		$post->page_template = 'default';		$post->post_parent = 0;		$post->menu_order = 0;	}	$post->post_content = apply_filters( 'default_content', $post_content, $post );	$post->post_title   = apply_filters( 'default_title',   $post_title, $post   );	$post->post_excerpt = apply_filters( 'default_excerpt', $post_excerpt, $post );	$post->post_name = '';	return $post;}/** * Get the default page information to use. * * @since 2.5.0 * * @return object stdClass object containing all the default post data as attributes */function get_default_page_to_edit() {	$page = get_default_post_to_edit();	$page->post_type = 'page';	return $page;}/** * Get an existing post and format it for editing. * * @since unknown * * @param unknown_type $id * @return unknown */function get_post_to_edit( $id ) {	$post = get_post( $id, OBJECT, 'edit' );	if ( $post->post_type == 'page' )		$post->page_template = get_post_meta( $id, '_wp_page_template', true );	return $post;}/** * Determine if a post exists based on title, content, and date * * @since unknown * * @param string $title Post title * @param string $content Optional post content * @param string $date Optional post date * @return int Post ID if post exists, 0 otherwise. */function post_exists($title, $content = '', $date = '') {	global $wpdb;	$post_title = stripslashes( sanitize_post_field( 'post_title', $title, 0, 'db' ) );	$post_content = stripslashes( sanitize_post_field( 'post_content', $content, 0, 'db' ) );	$post_date = stripslashes( sanitize_post_field( 'post_date', $date, 0, 'db' ) );	$query = "SELECT ID FROM $wpdb->posts WHERE 1=1";	$args = array();	if ( !empty ( $date ) ) {		$query .= ' AND post_date = %s';		$args[] = $post_date;	}	if ( !empty ( $title ) ) {		$query .= ' AND post_title = %s';		$args[] = $post_title;	}	if ( !empty ( $content ) ) {		$query .= 'AND post_content = %s';		$args[] = $post_content;	}	if ( !empty ( $args ) )		return $wpdb->get_var( $wpdb->prepare($query, $args) );	return 0;}/** * Creates a new post from the "Write Post" form using $_POST information. * * @since unknown * * @return unknown */function wp_write_post() {	global $user_ID;	if ( isset($_POST['post_type']) )		$ptype = get_post_type_object($_POST['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			return new WP_Error( 'edit_pages', __( 'You are not allowed to create pages on this site.' ) );		else			return new WP_Error( 'edit_posts', __( 'You are not allowed to create posts or drafts on this site.' ) );	}	// Check for autosave collisions	// Does this need to be updated? ~ Mark	$temp_id = false;	if ( isset($_POST['temp_ID']) ) {		$temp_id = (int) $_POST['temp_ID'];		if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )			$draft_ids = array();		foreach ( $draft_ids as $temp => $real )			if ( time() + $temp > 86400 ) // 1 day: $temp is equal to -1 * time( then )				unset($draft_ids[$temp]);		if ( isset($draft_ids[$temp_id]) ) { // Edit, don't write			$_POST['post_ID'] = $draft_ids[$temp_id];			unset($_POST['temp_ID']);			update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );			return edit_post();		}	}	$translated = _wp_translate_postdata( false );	if ( is_wp_error($translated) )		return $translated;	if ( isset($_POST['visibility']) ) {		switch ( $_POST['visibility'] ) {			case 'public' :				$_POST['post_password'] = '';				break;			case 'password' :				unset( $_POST['sticky'] );				break;			case 'private' :				$_POST['post_status'] = 'private';				$_POST['post_password'] = '';				unset( $_POST['sticky'] );				break;		}	}	// Create the post.	$post_ID = wp_insert_post( $_POST );	if ( is_wp_error( $post_ID ) )		return $post_ID;	if ( empty($post_ID) )		return 0;	add_meta( $post_ID );	add_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	// Reunite any orphaned attachments with their parent	// Does this need to be udpated? ~ Mark	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	if ( $temp_id && $temp_id != $draft_temp_id )		_relocate_children( $temp_id, $post_ID );	// Update autosave collision detection	if ( $temp_id ) {		$draft_ids[$temp_id] = $post_ID;		update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );	}	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	return $post_ID;}/** * Calls wp_write_post() and handles the errors. * * @since unknown * * @return unknown */function write_post() {	$result = wp_write_post();	if ( is_wp_error( $result ) )		wp_die( $result->get_error_message() );	else		return $result;}//// Post Meta///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_ID * @return unknown */function add_meta( $post_ID ) {	global $wpdb;	$post_ID = (int) $post_ID;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$metakeyselect = isset($_POST['metakeyselect']) ? stripslashes( trim( $_POST['metakeyselect'] ) ) : '';	$metakeyinput = isset($_POST['metakeyinput']) ? stripslashes( trim( $_POST['metakeyinput'] ) ) : '';	$metavalue = isset($_POST['metavalue']) ? maybe_serialize( stripslashes_deep( $_POST['metavalue'] ) ) : '';	if ( is_string($metavalue) )		$metavalue = trim( $metavalue );	if ( ('0' === $metavalue || !empty ( $metavalue ) ) && ((('#NONE#' != $metakeyselect) && !empty ( $metakeyselect) ) || !empty ( $metakeyinput) ) ) {		// We have a key/value pair. If both the select and the		// input for the key have data, the input takes precedence: 		if ('#NONE#' != $metakeyselect)			$metakey = $metakeyselect;		if ( $metakeyinput)			$metakey = $metakeyinput; // default		if ( in_array($metakey, $protected) )			return false;		wp_cache_delete($post_ID, 'post_meta');		$wpdb->insert( $wpdb->postmeta, array( 'post_id' => $post_ID, 'meta_key' => $metakey, 'meta_value' => $metavalue ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, $metakey, $metavalue );		return $wpdb->insert_id;	}	return false;} // add_meta/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function delete_meta( $mid ) {	global $wpdb;	$mid = (int) $mid;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'delete_postmeta', $mid );	wp_cache_delete($post_id, 'post_meta');	$rval = $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'deleted_postmeta', $mid );	return $rval;}/** * Get a list of previously defined keys. * * @since unknown * * @return unknown */function get_meta_keys() {	global $wpdb;	$keys = $wpdb->get_col( "			SELECT meta_key			FROM $wpdb->postmeta			GROUP BY meta_key			ORDER BY meta_key" );	return $keys;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function get_post_meta_by_id( $mid ) {	global $wpdb;	$mid = (int) $mid;	$meta = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	if ( is_serialized_string( $meta->meta_value ) )		$meta->meta_value = maybe_unserialize( $meta->meta_value );	return $meta;}/** * {@internal Missing Short Description}} * * Some postmeta stuff. * * @since unknown * * @param unknown_type $postid * @return unknown */function has_meta( $postid ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value, meta_id, post_id			FROM $wpdb->postmeta WHERE post_id = %d			ORDER BY meta_key,meta_id", $postid), ARRAY_A );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta_id * @param unknown_type $meta_key Expect Slashed * @param unknown_type $meta_value Expect Slashed * @return unknown */function update_meta( $meta_id, $meta_key, $meta_value ) {	global $wpdb;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$meta_key = stripslashes($meta_key);	if ( in_array($meta_key, $protected) )		return false;	if ( '' === trim( $meta_value ) )		return false;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $meta_id) );	$meta_value = maybe_serialize( stripslashes_deep( $meta_value ) );	$meta_id = (int) $meta_id;	$data  = compact( 'meta_key', 'meta_value' );	$where = compact( 'meta_id' );	do_action( 'update_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	$rval = $wpdb->update( $wpdb->postmeta, $data, $where );	wp_cache_delete($post_id, 'post_meta');	do_action( 'updated_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	return $rval;}//// Private///** * Replace hrefs of attachment anchors with up-to-date permalinks. * * @since unknown * @access private * * @param unknown_type $post_ID * @return unknown */function _fix_attachment_links( $post_ID ) {	global $_fix_attachment_link_id;	$post = & get_post( $post_ID, ARRAY_A );	$search = "#<a[^>]+rel=('|\")[^'\"]*attachment[^>]*>#ie";	// See if we have any rel="attachment" links	if ( 0 == preg_match_all( $search, $post['post_content'], $anchor_matches, PREG_PATTERN_ORDER ) )		return;	$i = 0;	$search = "#[\s]+rel=(\"|')(.*?)wp-att-(\d+)\\1#i";	foreach ( $anchor_matches[0] as $anchor ) {		if ( 0 == preg_match( $search, $anchor, $id_matches ) )			continue;		$id = (int) $id_matches[3];		// While we have the attachment ID, let's adopt any orphans.		$attachment = & get_post( $id, ARRAY_A );		if ( ! empty( $attachment) && ! is_object( get_post( $attachment['post_parent'] ) ) ) {			$attachment['post_parent'] = $post_ID;			// Escape data pulled from DB.			$attachment = add_magic_quotes( $attachment );			wp_update_post( $attachment );		}		$post_search[$i] = $anchor;		 $_fix_attachment_link_id = $id;		$post_replace[$i] = preg_replace_callback( "#href=(\"|')[^'\"]*\\1#", '_fix_attachment_links_replace_cb', $anchor );		++$i;	}	$post['post_content'] = str_replace( $post_search, $post_replace, $post['post_content'] );	// Escape data pulled from DB.	$post = add_magic_quotes( $post);	return wp_update_post( $post);}function _fix_attachment_links_replace_cb($match) {        global $_fix_attachment_link_id;        return stripslashes( 'href='.$match[1] ).get_attachment_link( $_fix_attachment_link_id ).stripslashes( $match[1] );}/** * Move child posts to a new parent. * * @since unknown * @access private * * @param unknown_type $old_ID * @param unknown_type $new_ID * @return unknown */function _relocate_children( $old_ID, $new_ID ) {	global $wpdb;	$old_ID = (int) $old_ID;	$new_ID = (int) $new_ID;	$children = $wpdb->get_col( $wpdb->prepare("		SELECT post_id		FROM $wpdb->postmeta		WHERE meta_key = '_wp_attachment_temp_parent'		AND meta_value = %d", $old_ID) );	foreach ( $children as $child_id ) {		$wpdb->update($wpdb->posts, array('post_parent' => $new_ID), array('ID' => $child_id) );		delete_post_meta($child_id, '_wp_attachment_temp_parent');	}}/** * Get all the possible statuses for a post_type * * @since 2.5.0 * * @param string $type The post_type you want the statuses for * @return array As array of all the statuses for the supplied post type */function get_available_post_statuses($type = 'post') {	$stati = wp_count_posts($type);	return array_keys(get_object_vars($stati));}/** * Run the wp query to fetch the posts for listing on the edit posts page * * @since 2.5.0 * * @param array|bool $q Array of query variables to use to build the query or false to use $_GET superglobal. * @return array */function wp_edit_posts_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m'] = isset($q['m']) ? (int) $q['m'] : 0;	$q['cat'] = isset($q['cat']) ? (int) $q['cat'] : 0;	$post_stati  = get_post_stati();	if ( isset($q['post_type']) && in_array( $q['post_type'], get_post_types() ) )		$post_type = $q['post_type'];	else		$post_type = 'post';	$avail_post_stati = get_available_post_statuses($post_type);	if ( isset($q['post_status']) && in_array( $q['post_status'], $post_stati ) ) {		$post_status = $q['post_status'];		$perm = 'readable';	}	if ( isset($q['post_status']) && 'pending' === $q['post_status'] ) {		$order = 'ASC';		$orderby = 'modified';	} elseif ( isset($q['post_status']) && 'draft' === $q['post_status'] ) {		$order = 'DESC';		$orderby = 'modified';	} else {		$order = 'DESC';		$orderby = 'date';	}	$per_page = 'edit_' . $post_type . '_per_page';	$posts_per_page = (int) get_user_option( $per_page );	if ( empty( $posts_per_page ) || $posts_per_page < 1 )		$posts_per_page = 15;	$posts_per_page = apply_filters( $per_page, $posts_per_page );	$query = compact('post_type', 'post_status', 'perm', 'order', 'orderby', 'posts_per_page');	// Hierarchical types require special args.	if ( is_post_type_hierarchical( $post_type ) ) {		$query['orderby'] = 'menu_order title';		$query['order'] = 'asc';		$query['posts_per_page'] = -1;		$query['posts_per_archive_page'] = -1;	}	wp( $query );	return $avail_post_stati;}/** * Get default post mime types * * @since 2.9.0 * * @return array */function get_post_mime_types() {	$post_mime_types = array(	//	array( adj, noun )		'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class="count">(%s)</span>', 'Images <span class="count">(%s)</span>')),		'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class="count">(%s)</span>', 'Audio <span class="count">(%s)</span>')),		'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class="count">(%s)</span>', 'Video <span class="count">(%s)</span>')),	);	return apply_filters('post_mime_types', $post_mime_types);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @return unknown */function get_available_post_mime_types($type = 'attachment') {	global $wpdb;	$types = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_mime_type FROM $wpdb->posts WHERE post_type = %s", $type));	return $types;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $q * @return unknown */function wp_edit_attachments_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m']   = isset( $q['m'] ) ? (int) $q['m'] : 0;	$q['cat'] = isset( $q['cat'] ) ? (int) $q['cat'] : 0;	$q['post_type'] = 'attachment';	$q['post_status'] = isset( $q['status'] ) && 'trash' == $q['status'] ? 'trash' : 'inherit';	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty( $media_per_page ) || $media_per_page < 1 )		$media_per_page = 20;	$q['posts_per_page'] = apply_filters( 'upload_per_page', $media_per_page );	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($q['post_mime_type']) && !array_intersect( (array) $q['post_mime_type'], array_keys($post_mime_types) ) )		unset($q['post_mime_type']);	wp($q);	return array($post_mime_types, $avail_post_mime_types);}/** * {@internal Missing Short Description}} * * @uses get_user_option() * @since unknown * * @param unknown_type $id * @param unknown_type $page * @return unknown */function postbox_classes( $id, $page ) {	if ( isset( $_GET['edit'] ) && $_GET['edit'] == $id )		return '';	if ( $closed = get_user_option('closedpostboxes_'.$page ) ) {		if ( !is_array( $closed ) ) {			return '';		}		return in_array( $id, $closed )? 'closed' : '';	} else {		return '';	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param int|object $id    Post ID or post object. * @param string $title (optional) Title * @param string $name (optional) Name * @return array With two entries of type string */function get_sample_permalink($id, $title = null, $name = null) {	$post = &get_post($id);	if ( !$post->ID )		return array('', '');	$ptype = get_post_type_object($post->post_type);	$original_status = $post->post_status;	$original_date = $post->post_date;	$original_name = $post->post_name;	// Hack: get_permalink would return ugly permalink for	// drafts, so we will fake, that our post is published	if ( in_array($post->post_status, array('draft', 'pending')) ) {		$post->post_status = 'publish';		$post->post_name = sanitize_title($post->post_name ? $post->post_name : $post->post_title, $post->ID);	}	// If the user wants to set a new name -- override the current one	// Note: if empty name is supplied -- use the title instead, see #6072	if ( !is_null($name) )		$post->post_name = sanitize_title($name ? $name : $title, $post->ID);	$post->post_name = wp_unique_post_slug($post->post_name, $post->ID, $post->post_status, $post->post_type, $post->post_parent);	$post->filter = 'sample';	$permalink = get_permalink($post, true);	// Replace custom post_type Token with generic pagename token for ease of use.	$permalink = str_replace("%$post->post_type%", '%pagename%', $permalink);	// Handle page hierarchy	if ( $ptype->hierarchical ) {		$uri = get_page_uri($post);		$uri = untrailingslashit($uri);		$uri = strrev( stristr( strrev( $uri ), '/' ) );		$uri = untrailingslashit($uri);		if ( !empty($uri) )			$uri .= '/';		$permalink = str_replace('%pagename%', "${uri}%pagename%", $permalink);	}	$permalink = array($permalink, apply_filters('editable_slug', $post->post_name));	$post->post_status = $original_status;	$post->post_date = $original_date;	$post->post_name = $original_name;	unset($post->filter);	return $permalink;}/** * sample permalink html * * intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. * * @since unknown * * @param int|object $id Post ID or post object. * @param string $new_title (optional) New title * @param string $new_slug (optional) New slug * @return string intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. */function get_sample_permalink_html( $id, $new_title = null, $new_slug = null ) {	global $wpdb;	$post = &get_post($id);	list($permalink, $post_name) = get_sample_permalink($post->ID, $new_title, $new_slug);	if ( 'publish' == $post->post_status ) {		$ptype = get_post_type_object($post->post_type);		$view_post = $ptype->labels->view_item;		$title = __('Click to edit this part of the permalink');	} else {		$title = __('Temporary permalink. Click to edit this part.');	}	if ( false === strpos($permalink, '%postname%') && false === strpos($permalink, '%pagename%') ) {		$return = '<strong>' . __('Permalink:') . "</strong>\n" . '<span id="sample-permalink">' . $permalink . "</span>\n";		if ( current_user_can( 'manage_options' ) && !( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') ) )			$return .= '<span id="change-permalinks"><a href="options-permalink.php" class="button" target="_blank">' . __('Change Permalinks') . "</a></span>\n";		if ( isset($view_post) )			$return .= "<span id='view-post-btn'><a href='$permalink' class='button' target='_blank'>$view_post</a></span>\n";		$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);		return $return;	}	if ( function_exists('mb_strlen') ) {		if ( mb_strlen($post_name) > 30 ) {			$post_name_abridged = mb_substr($post_name, 0, 14). '&hellip;' . mb_substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	} else {		if ( strlen($post_name) > 30 ) {			$post_name_abridged = substr($post_name, 0, 14). '&hellip;' . substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	}	$post_name_html = '<span id="editable-post-name" title="' . $title . '">' . $post_name_abridged . '</span>';	$display_link = str_replace(array('%pagename%','%postname%'), $post_name_html, $permalink);	$view_link = str_replace(array('%pagename%','%postname%'), $post_name, $permalink);	$return =  '<strong>' . __('Permalink:') . "</strong>\n";	$return .= '<span id="sample-permalink">' . $display_link . "</span>\n";	$return .= '&lrm;'; // Fix bi-directional text display defect in RTL languages.	$return .= '<span id="edit-slug-buttons"><a href="#post_name" class="edit-slug button hide-if-no-js" onclick="editPermalink(' . $id . '); return false;">' . __('Edit') . "</a></span>\n";	$return .= '<span id="editable-post-name-full">' . $post_name . "</span>\n";	if ( isset($view_post) )		$return .= "<span id='view-post-btn'><a href='$view_link' class='button' target='_blank'>$view_post</a></span>\n";	$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);	return $return;}/** * Output HTML for the post thumbnail meta-box. * * @since 2.9.0 * * @param int $thumbnail_id ID of the attachment used for thumbnail * @return string html */function _wp_post_thumbnail_html( $thumbnail_id = NULL ) {	global $content_width, $_wp_additional_image_sizes, $post_ID;	$set_thumbnail_link = '<p class="hide-if-no-js"><a title="' . esc_attr__( 'Set featured image' ) . '" href="' . esc_url( get_upload_iframe_src('image') ) . '" id="set-post-thumbnail" class="thickbox">%s</a></p>';	$content = sprintf($set_thumbnail_link, esc_html__( 'Set featured image' ));	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$old_content_width = $content_width;		$content_width = 266;		if ( !isset( $_wp_additional_image_sizes['post-thumbnail'] ) )			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, array( $content_width, $content_width ) );		else			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'post-thumbnail' );		if ( !empty( $thumbnail_html ) ) {			$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$post_ID" );			$content = sprintf($set_thumbnail_link, $thumbnail_html);			$content .= '<p class="hide-if-no-js"><a href="#" id="remove-post-thumbnail" onclick="WPRemoveThumbnail(\'' . $ajax_nonce . '\');return false;">' . esc_html__( 'Remove featured image' ) . '</a></p>';		}		$content_width = $old_content_width;	}	return apply_filters( 'admin_post_thumbnail_html', $content );}/** * Check to see if the post is currently being edited by another user. * * @since 2.5.0 * * @param int $post_id ID of the post to check for editing * @return bool|int False: not locked or locked by current user. Int: user ID of user with lock. */function wp_check_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	$lock = get_post_meta( $post->ID, '_edit_lock', true );	$last = get_post_meta( $post->ID, '_edit_last', true );	$time_window = apply_filters( 'wp_check_post_lock_window', AUTOSAVE_INTERVAL * 2 );	if ( $lock && $lock > time() - $time_window && $last != $current_user->ID )		return $last;	return false;}/** * Mark the post as currently being edited by the current user * * @since 2.5.0 * * @param int $post_id ID of the post to being edited * @return bool Returns false if the post doesn't exist of there is no current user */function wp_set_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	if ( !$current_user || !$current_user->ID )		return false;	$now = time();	update_post_meta( $post->ID, '_edit_lock', $now );}/** * Outputs the notice message to say that someone else is editing this post at the moment. * * @since 2.8.5 * @return none */function _admin_notice_post_locked() {	global $post;	$last_user = get_userdata( get_post_meta( $post->ID, '_edit_last', true ) );	$last_user_name = $last_user ? $last_user->display_name : __('Somebody');	switch ($post->post_type) {		case 'post':			$message = __( 'Warning: %s is currently editing this post' );			break;		case 'page':			$message = __( 'Warning: %s is currently editing this page' );			break;		default:			$message = __( 'Warning: %s is currently editing this.' );	}	$message = sprintf( $message, esc_html( $last_user_name ) );	echo "<div class='error'><p>$message</p></div>";}/** * Creates autosave data for the specified post from $_POST data. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_translate_postdata() * @uses _wp_post_revision_fields() * * @return unknown */function wp_create_post_autosave( $post_id ) {	$translated = _wp_translate_postdata( true );	if ( is_wp_error( $translated ) )		return $translated;	// Only store one autosave.  If there is already an autosave, overwrite it.	if ( $old_autosave = wp_get_post_autosave( $post_id ) ) {		$new_autosave = _wp_post_revision_fields( $_POST, true );		$new_autosave['ID'] = $old_autosave->ID;		$current_user = wp_get_current_user();		$new_autosave['post_author'] = $current_user->ID;		return wp_update_post( $new_autosave );	}	// _wp_put_post_revision() expects unescaped.	$_POST = stripslashes_deep($_POST);	// Otherwise create the new autosave as a special post revision	return _wp_put_post_revision( $_POST, true );}/** * Save draft or manually autosave for showing preview. * * @package WordPress * @since 2.7.0 * * @uses wp_write_post() * @uses edit_post() * @uses get_post() * @uses current_user_can() * @uses wp_create_post_autosave() * * @return str URL to redirect to show the preview */function post_preview() {	$post_ID = (int) $_POST['post_ID'];	$status = get_post_status( $post_ID );	if ( 'auto-draft' == $status )		wp_die( __('Preview not available. Please save as a draft first.') );	if ( isset($_POST['catslist']) )		$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( isset($_POST['tags_input']) )		$_POST['tags_input'] = explode(",", $_POST['tags_input']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			wp_die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			wp_die(__('You are not allowed to edit this post.'));	}	if ( 'draft' == $post->post_status ) {		$id = edit_post();	} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.		$id = wp_create_post_autosave( $post->ID );		if ( ! is_wp_error($id) )			$id = $post->ID;	}	if ( is_wp_error($id) )		wp_die( $id->get_error_message() );	if ( $_POST['post_status'] == 'draft'  ) {		$url = add_query_arg( 'preview', 'true', get_permalink($id) );	} else {		$nonce = wp_create_nonce('post_preview_' . $id);		$url = add_query_arg( array( 'preview' => 'true', 'preview_id' => $id, 'preview_nonce' => $nonce ), get_permalink($id) );	}	return $url;}/** * Adds the TinyMCE editor used on the Write and Edit screens. * * @package WordPress * @since 2.7.0 * * TinyMCE is loaded separately from other Javascript by using wp-tinymce.php. It outputs concatenated * and optionaly pre-compressed version of the core and all default plugins. Additional plugins are loaded * directly by TinyMCE using non-blocking method. Custom plugins can be refreshed by adding a query string * to the URL when queueing them with the mce_external_plugins filter. * * @param bool $teeny optional Output a trimmed down version used in Press This. * @param mixed $settings optional An array that can add to or overwrite the default TinyMCE settings. */function wp_tiny_mce( $teeny = false, $settings = false ) {	global $concatenate_scripts, $compress_scripts, $tinymce_version, $editor_styles;	if ( ! user_can_richedit() )		return;	$baseurl = includes_url('js/tinymce');	$mce_locale = ( '' == get_locale() ) ? 'en' : strtolower( substr(get_locale(), 0, 2) ); // only ISO 639-1	/*	The following filter allows localization scripts to change the languages displayed in the spellchecker's drop-down menu.	By default it uses Google's spellchecker API, but can be configured to use PSpell/ASpell if installed on the server.	The + sign marks the default language. More information:	http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker	*/	$mce_spellchecker_languages = apply_filters('mce_spellchecker_languages', '+English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr,German=de,Italian=it,Polish=pl,Portuguese=pt,Spanish=es,Swedish=sv');	if ( $teeny ) {		$plugins = apply_filters( 'teeny_mce_plugins', array('safari', 'inlinepopups', 'media', 'fullscreen', 'wordpress') );		$ext_plugins = '';	} else {		$plugins = array( 'safari', 'inlinepopups', 'spellchecker', 'paste', 'wordpress', 'media', 'fullscreen', 'wpeditimage', 'wpgallery', 'tabfocus' );		/*		The following filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' => 'url'.		It adds the plugin's name to TinyMCE's plugins init and the call to PluginManager to load the plugin.		The url should be absolute and should include the js file name to be loaded. Example:		array( 'myplugin' => 'http://my-site.com/wp-content/plugins/myfolder/mce_plugin.js' )		If the plugin uses a button, it should be added with one of the "$mce_buttons" filters.		*/		$mce_external_plugins = apply_filters('mce_external_plugins', array());		$ext_plugins = '';		if ( ! empty($mce_external_plugins) ) {			/*			The following filter loads external language files for TinyMCE plugins.			It takes an associative array 'plugin_name' => 'path', where path is the			include path to the file. The language file should follow the same format as			/tinymce/langs/wp-langs.php and should define a variable $strings that			holds all translated strings.			When this filter is not used, the function will try to load {mce_locale}.js.			If that is not found, en.js will be tried next.			*/			$mce_external_languages = apply_filters('mce_external_languages', array());			$loaded_langs = array();			$strings = '';			if ( ! empty($mce_external_languages) ) {				foreach ( $mce_external_languages as $name => $path ) {					if ( @is_file($path) && @is_readable($path) ) {						include_once($path);						$ext_plugins .= $strings . "\n";						$loaded_langs[] = $name;					}				}			}			foreach ( $mce_external_plugins as $name => $url ) {				if ( is_ssl() ) $url = str_replace('http://', 'https://', $url);				$plugins[] = '-' . $name;				$plugurl = dirname($url);				$strings = $str1 = $str2 = '';				if ( ! in_array($name, $loaded_langs) ) {					$path = str_replace( WP_PLUGIN_URL, '', $plugurl );					$path = WP_PLUGIN_DIR . $path . '/langs/';					if ( function_exists('realpath') )						$path = trailingslashit( realpath($path) );					if ( @is_file($path . $mce_locale . '.js') )						$strings .= @file_get_contents($path . $mce_locale . '.js') . "\n";					if ( @is_file($path . $mce_locale . '_dlg.js') )						$strings .= @file_get_contents($path . $mce_locale . '_dlg.js') . "\n";					if ( 'en' != $mce_locale && empty($strings) ) {						if ( @is_file($path . 'en.js') ) {							$str1 = @file_get_contents($path . 'en.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str1, 1 ) . "\n";						}						if ( @is_file($path . 'en_dlg.js') ) {							$str2 = @file_get_contents($path . 'en_dlg.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str2, 1 ) . "\n";						}					}					if ( ! empty($strings) )						$ext_plugins .= "\n" . $strings . "\n";				}				$ext_plugins .= 'tinyMCEPreInit.load_ext("' . $plugurl . '", "' . $mce_locale . '");' . "\n";				$ext_plugins .= 'tinymce.PluginManager.load("' . $name . '", "' . $url . '");' . "\n";			}		}	}	$plugins = implode($plugins, ',');	if ( $teeny ) {		$mce_buttons = apply_filters( 'teeny_mce_buttons', array('bold, italic, underline, blockquote, separator, strikethrough, bullist, numlist,justifyleft, justifycenter, justifyright, undo, redo, link, unlink, fullscreen') );		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = $mce_buttons_3 = $mce_buttons_4 = '';	} else {		$mce_buttons = apply_filters('mce_buttons', array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'link', 'unlink', 'wp_more', '|', 'spellchecker', 'fullscreen', 'wp_adv' ));		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = array('formatselect', 'underline', 'justifyfull', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'media', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo', 'wp_help' );		if ( is_multisite() )			unset( $mce_buttons_2[ array_search( 'media', $mce_buttons_2 ) ] );		$mce_buttons_2 = apply_filters('mce_buttons_2', $mce_buttons_2);		$mce_buttons_2 = implode($mce_buttons_2, ',');		$mce_buttons_3 = apply_filters('mce_buttons_3', array());		$mce_buttons_3 = implode($mce_buttons_3, ',');		$mce_buttons_4 = apply_filters('mce_buttons_4', array());		$mce_buttons_4 = implode($mce_buttons_4, ',');	}	$no_captions = (bool) apply_filters( 'disable_captions', '' );	// TinyMCE init settings	$initArray = array (		'mode' => 'specific_textareas',		'editor_selector' => 'theEditor',		'width' => '100%',		'theme' => 'advanced',		'skin' => 'wp_theme',		'theme_advanced_buttons1' => $mce_buttons,		'theme_advanced_buttons2' => $mce_buttons_2,		'theme_advanced_buttons3' => $mce_buttons_3,		'theme_advanced_buttons4' => $mce_buttons_4,		'language' => $mce_locale,		'spellchecker_languages' => $mce_spellchecker_languages,		'theme_advanced_toolbar_location' => 'top',		'theme_advanced_toolbar_align' => 'left',		'theme_advanced_statusbar_location' => 'bottom',		'theme_advanced_resizing' => true,		'theme_advanced_resize_horizontal' => false,		'dialog_type' => 'modal',		'relative_urls' => false,		'remove_script_host' => false,		'convert_urls' => false,		'apply_source_formatting' => false,		'remove_linebreaks' => true,		'gecko_spellcheck' => true,		'entities' => '38,amp,60,lt,62,gt',		'accessibility_focus' => true,		'tabfocus_elements' => 'major-publishing-actions',		'media_strict' => false,		'paste_remove_styles' => true,		'paste_remove_spans' => true,		'paste_strip_class_attributes' => 'all',		'wpeditimage_disable_captions' => $no_captions,		'plugins' => $plugins	);	if ( ! empty( $editor_styles ) && is_array( $editor_styles ) ) {		$mce_css = array();		$style_uri = get_stylesheet_directory_uri();		if ( TEMPLATEPATH == STYLESHEETPATH ) {			foreach ( $editor_styles as $file )				$mce_css[] = "$style_uri/$file";		} else {			$style_dir    = get_stylesheet_directory();			$template_uri = get_template_directory_uri();			$template_dir = get_template_directory();			foreach ( $editor_styles as $file ) {				if ( file_exists( "$style_dir/$file" ) )					$mce_css[] = "$style_uri/$file";				if ( file_exists( "$template_dir/$file" ) )					$mce_css[] = "$template_uri/$file";			}		}		$mce_css = implode( ',', $mce_css );	} else {		$mce_css = '';	}	$mce_css = trim( apply_filters( 'mce_css', $mce_css ), ' ,' );	if ( ! empty($mce_css) )		$initArray['content_css'] = $mce_css;	if ( is_array($settings) )		$initArray = array_merge($initArray, $settings);	// For people who really REALLY know what they're doing with TinyMCE	// You can modify initArray to add, remove, change elements of the config before tinyMCE.init	// Setting "valid_elements", "invalid_elements" and "extended_valid_elements" can be done through "tiny_mce_before_init".	// Best is to use the default cleanup by not specifying valid_elements, as TinyMCE contains full set of XHTML 1.0.	if ( $teeny ) {		$initArray = apply_filters('teeny_mce_before_init', $initArray);	} else {		$initArray = apply_filters('tiny_mce_before_init', $initArray);	}	if ( empty($initArray['theme_advanced_buttons3']) && !empty($initArray['theme_advanced_buttons4']) ) {		$initArray['theme_advanced_buttons3'] = $initArray['theme_advanced_buttons4'];		$initArray['theme_advanced_buttons4'] = '';	}	if ( ! isset($concatenate_scripts) )		script_concat_settings();	$language = $initArray['language'];	$compressed = $compress_scripts && $concatenate_scripts && isset($_SERVER['HTTP_ACCEPT_ENCODING'])		&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip');	/**	 * Deprecated	 *	 * The tiny_mce_version filter is not needed since external plugins are loaded directly by TinyMCE.	 * These plugins can be refreshed by appending query string to the URL passed to mce_external_plugins filter.	 * If the plugin has a popup dialog, a query string can be added to the button action that opens it (in the plugin's code).	 */	$version = apply_filters('tiny_mce_version', '');	$version = 'ver=' . $tinymce_version . $version;	if ( 'en' != $language )		include_once(ABSPATH . WPINC . '/js/tinymce/langs/wp-langs.php');	$mce_options = '';	foreach ( $initArray as $k => $v )	    $mce_options .= $k . ':"' . $v . '", ';	$mce_options = rtrim( trim($mce_options), '\n\r,' ); ?><script type="text/javascript">/* <![CDATA[ */tinyMCEPreInit = {	base : "<?php echo $baseurl; ?>",	suffix : "",	query : "<?php echo $version; ?>",	mceInit : {<?php echo $mce_options; ?>},	load_ext : function(url,lang){var sl=tinymce.ScriptLoader;sl.markDone(url+'/langs/'+lang+'.js');sl.markDone(url+'/langs/'+lang+'_dlg.js');}};/* ]]> */</script><?php	if ( $compressed )		echo "<script type='text/javascript' src='$baseurl/wp-tinymce.php?c=1&amp;$version'></script>\n";	else		echo "<script type='text/javascript' src='$baseurl/tiny_mce.js?$version'></script>\n";	if ( 'en' != $language && isset($lang) )		echo "<script type='text/javascript'>\n$lang\n</script>\n";	else		echo "<script type='text/javascript' src='$baseurl/langs/wp-langs-en.js?$version'></script>\n";?><script type="text/javascript">/* <![CDATA[ */<?php if ( $ext_plugins ) echo "$ext_plugins\n"; ?><?php if ( $compressed ) { ?>tinyMCEPreInit.go();<?php } else { ?>(function(){var t=tinyMCEPreInit,sl=tinymce.ScriptLoader,ln=t.mceInit.language,th=t.mceInit.theme,pl=t.mceInit.plugins;sl.markDone(t.base+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'_dlg.js');tinymce.each(pl.split(','),function(n){if(n&&n.charAt(0)!='-'){sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'.js');sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'_dlg.js');}});})();<?php } ?>tinyMCE.init(tinyMCEPreInit.mceInit);/* ]]> */</script><?php}
<?php/** * Options Management Administration Panel. * * If accessed directly in a browser this page shows a list of all saved options * along with editable fields for their values. Serialized data is not supported * and there is no way to remove options via this page. It is not linked to from * anywhere else in the admin. * * This file is also the target of the forms in core and custom options pages * that use the Settings API. In this case it saves the new option values * and returns the user to their page of origin. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Settings');$this_file = 'options.php';$parent_file = 'options-general.php';wp_reset_vars(array('action', 'option_page'));if ( empty($option_page) ) // This is for back compat and will eventually be removed.	$option_page = 'options';if ( !current_user_can('manage_options') )	wp_die(__('Cheatin&#8217; uh?'));// Handle admin email change requestsif ( is_multisite() ) {	if ( ! empty($_GET[ 'adminhash' ] ) ) {		$new_admin_details = get_option( 'adminhash' );		$redirect = 'options-general.php?updated=false';		if ( is_array( $new_admin_details ) && $new_admin_details[ 'hash' ] == $_GET[ 'adminhash' ] && !empty($new_admin_details[ 'newemail' ]) ) {			update_option( 'admin_email', $new_admin_details[ 'newemail' ] );			delete_option( 'adminhash' );			delete_option( 'new_admin_email' );			$redirect = 'options-general.php?updated=true';		}		wp_redirect( admin_url( $redirect ) );		exit;	} elseif ( ! empty( $_GET['dismiss'] ) && 'new_admin_email' == $_GET['dismiss'] ) {		delete_option( 'adminhash' );		delete_option( 'new_admin_email' );		wp_redirect( admin_url( 'options-general.php?updated=true' ) );		exit;	}}if ( is_multisite() && !is_super_admin() && 'update' != $action )	wp_die(__('Cheatin&#8217; uh?'));$whitelist_options = array(	'general' => array( 'blogname', 'blogdescription', 'gmt_offset', 'date_format', 'time_format', 'start_of_week', 'timezone_string' ),	'discussion' => array( 'default_pingback_flag', 'default_ping_status', 'default_comment_status', 'comments_notify', 'moderation_notify', 'comment_moderation', 'require_name_email', 'comment_whitelist', 'comment_max_links', 'moderation_keys', 'blacklist_keys', 'show_avatars', 'avatar_rating', 'avatar_default', 'close_comments_for_old_posts', 'close_comments_days_old', 'thread_comments', 'thread_comments_depth', 'page_comments', 'comments_per_page', 'default_comments_page', 'comment_order', 'comment_registration' ),	'media' => array( 'thumbnail_size_w', 'thumbnail_size_h', 'thumbnail_crop', 'medium_size_w', 'medium_size_h', 'large_size_w', 'large_size_h', 'image_default_size', 'image_default_align', 'image_default_link_type', 'embed_autourls', 'embed_size_w', 'embed_size_h' ),	'privacy' => array( 'blog_public' ),	'reading' => array( 'posts_per_page', 'posts_per_rss', 'rss_use_excerpt', 'blog_charset', 'show_on_front', 'page_on_front', 'page_for_posts' ),	'writing' => array( 'default_post_edit_rows', 'use_smilies', 'default_category', 'default_email_category', 'use_balanceTags', 'default_link_category', 'enable_app', 'enable_xmlrpc' ),	'options' => array( '' ) );$mail_options = array('mailserver_url', 'mailserver_port', 'mailserver_login', 'mailserver_pass');$uploads_options = array('uploads_use_yearmonth_folders', 'upload_path', 'upload_url_path');if ( !is_multisite() ) {	if ( !defined( 'WP_SITEURL' ) )		$whitelist_options['general'][] = 'siteurl';	if ( !defined( 'WP_HOME' ) )		$whitelist_options['general'][] = 'home';	$whitelist_options['general'][] = 'admin_email';	$whitelist_options['general'][] = 'users_can_register';	$whitelist_options['general'][] = 'default_role';	$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options['writing'][] = 'ping_sites';	$whitelist_options['media'] = array_merge($whitelist_options['media'], $uploads_options);} else {	$whitelist_options['general'][] = 'new_admin_email';	$whitelist_options['general'][] = 'WPLANG';	$whitelist_options['general'][] = 'language';	if ( apply_filters( 'enable_post_by_email_configuration', true ) )		$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options[ 'misc' ] = array();}$whitelist_options = apply_filters( 'whitelist_options', $whitelist_options );/* * If $_GET['action'] == 'update' we are saving settings sent from a settings page */if ( 'update' == $action ) {	if ( 'options' == $option_page && !isset( $_POST['option_page'] ) ) { // This is for back compat and will eventually be removed.		$unregistered = true;		check_admin_referer( 'update-options' );	} else {		$unregistered = false;		check_admin_referer( $option_page . '-options' );	}	if ( !isset( $whitelist_options[ $option_page ] ) )		wp_die( __( 'Error: options page not found.' ) );	if ( 'options' == $option_page ) {		if ( is_multisite() && ! is_super_admin() )			wp_die( __( 'You do not have sufficient permissions to modify unregistered settings for this site.' ) );		$options = explode( ',', stripslashes( $_POST[ 'page_options' ] ) );	} else {		$options = $whitelist_options[ $option_page ];	}	// Handle custom date/time formats	if ( 'general' == $option_page ) {		if ( !empty($_POST['date_format']) && isset($_POST['date_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['date_format'] ) )			$_POST['date_format'] = $_POST['date_format_custom'];		if ( !empty($_POST['time_format']) && isset($_POST['time_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['time_format'] ) )			$_POST['time_format'] = $_POST['time_format_custom'];		// Map UTC+- timezones to gmt_offsets and set timezone_string to empty.		if ( !empty($_POST['timezone_string']) && preg_match('/^UTC[+-]/', $_POST['timezone_string']) ) {			$_POST['gmt_offset'] = $_POST['timezone_string'];			$_POST['gmt_offset'] = preg_replace('/UTC\+?/', '', $_POST['gmt_offset']);			$_POST['timezone_string'] = '';		}	}	if ( $options ) {		foreach ( $options as $option ) {			if ( $unregistered )				_deprecated_argument( 'options.php', '2.7', sprintf( __( 'The <code>%1$s</code> setting is unregistered. Unregistered settings are deprecated. See http://codex.wordpress.org/Settings_API' ), $option, $option_page ) );			$option = trim($option);			$value = null;			if ( isset($_POST[$option]) )				$value = $_POST[$option];			if ( !is_array($value) )				$value = trim($value);			$value = stripslashes_deep($value);			update_option($option, $value);		}	}	/**	 *  Handle settings errors and return to options page	 */	// If no settings errors were registered add a general 'updated' message.	if ( !count( get_settings_errors() ) )		add_settings_error('general', 'settings_updated', __('Settings saved.'), 'updated');	set_transient('settings_errors', get_settings_errors(), 30);	/**	 * Redirect back to the settings page that was submitted	 */	$goback = add_query_arg( 'updated', 'true',  wp_get_referer() );	wp_redirect( $goback );	exit;}include('./admin-header.php'); ?><div class="wrap"><?php screen_icon(); ?>  <h2><?php esc_html_e('All Settings'); ?></h2>  <form name="form" action="options.php" method="post" id="all-options">  <?php wp_nonce_field('options-options') ?>  <input type="hidden" name="action" value="update" />  <input type='hidden' name='option_page' value='options' />  <table class="form-table"><?php$options = $wpdb->get_results( "SELECT * FROM $wpdb->options ORDER BY option_name" );foreach ( (array) $options as $option ) :	$disabled = false;	if ( $option->option_name == '' )		continue;	if ( is_serialized( $option->option_value ) ) {		if ( is_serialized_string( $option->option_value ) ) {			// this is a serialized string, so we should display it			$value = maybe_unserialize( $option->option_value );			$options_to_update[] = $option->option_name;			$class = 'all-options';		} else {			$value = 'SERIALIZED DATA';			$disabled = true;			$class = 'all-options disabled';		}	} else {		$value = $option->option_value;		$options_to_update[] = $option->option_name;		$class = 'all-options';	}	$name = esc_attr( $option->option_name );	echo "<tr>	<th scope='row'><label for='$name'>" . esc_html( $option->option_name ) . "</label></th><td>";	if ( strpos( $value, "\n" ) !== false )		echo "<textarea class='$class' name='$name' id='$name' cols='30' rows='5'>" . wp_htmledit_pre( $value ) . "</textarea>";	else		echo "<input class='regular-text $class' type='text' name='$name' id='$name' value='" . esc_attr( $value ) . "'" . disabled( $disabled, true, false ) . " />";	echo "</td></tr>";endforeach;?>  </table><p class="submit"><input type="hidden" name="page_options" value="<?php echo esc_attr( implode( ',', $options_to_update ) ); ?>" /><input type="submit" name="Update" value="<?php esc_attr_e( 'Save Changes' ); ?>" class="button-primary" /></p>  </form></div><?phpinclude('./admin-footer.php');?>
<?php/** * Upgrade WordPress Page. * * @package WordPress * @subpackage Administration *//** * We are upgrading WordPress. * * @since unknown * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require( '../wp-load.php' );timer_start();require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );delete_site_transient('update_core');if ( isset( $_GET['step'] ) )	$step = $_GET['step'];else	$step = 0;// Do it.  No output.if ( 'upgrade_db' === $step ) {	wp_upgrade();	die( '0' );}$step = (int) $step;$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo( 'html_type' ); ?>; charset=<?php echo get_option( 'blog_charset' ); ?>" />	<title><?php _e( 'WordPress &rsaquo; Upgrade' ); ?></title>	<?php	wp_admin_css( 'install', true );	wp_admin_css( 'ie', true );	?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php if ( get_option( 'db_version' ) == $wp_db_version || !is_blog_installed() ) : ?><h2><?php _e( 'No Upgrade Required' ); ?></h2><p><?php _e( 'Your WordPress database is already up-to-date!' ); ?></p><p class="step"><a class="button" href="<?php echo get_option( 'home' ); ?>/"><?php _e( 'Continue' ); ?></a></p><?php elseif ( !$php_compat || !$mysql_compat ) :	if ( !$mysql_compat && !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );	elseif ( !$php_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );	elseif ( !$mysql_compat )		printf( __('You cannot upgrade because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );?><?php else :switch ( $step ) :	case 0:		$goback = stripslashes( wp_get_referer() );		$goback = esc_url_raw( $goback );		$goback = urlencode( $goback );?><h2><?php _e( 'Database Upgrade Required' ); ?></h2><p><?php _e( 'WordPress has been updated! Before we send you on your way, we have to upgrade your database to the newest version.' ); ?></p><p><?php _e( 'The upgrade process may take a little while, so please be patient.' ); ?></p><p class="step"><a class="button" href="upgrade.php?step=1&amp;backto=<?php echo $goback; ?>"><?php _e( 'Upgrade WordPress Database' ); ?></a></p><?php		break;	case 1:		wp_upgrade();			$backto = !empty($_GET['backto']) ? stripslashes( urldecode( $_GET['backto'] ) ) :  __get_option( 'home' ) . '/';			$backto = esc_url_raw( $backto );			$backto = wp_validate_redirect($backto, __get_option( 'home' ) . '/');?><h2><?php _e( 'Upgrade Complete' ); ?></h2>	<p><?php _e( 'Your WordPress database has been successfully upgraded!' ); ?></p>	<p class="step"><a class="button" href="<?php echo $backto; ?>"><?php _e( 'Continue' ); ?></a></p><!--<pre><?php printf( __( '%s queries' ), $wpdb->num_queries ); ?><?php printf( __( '%s seconds' ), timer_stop( 0 ) ); ?></pre>--><?php		break;endswitch;endif;?></body></html>
<?php/** * Canonical API to handle WordPress Redirecting * * Based on "Permalink Redirect" from Scott Yang and "Enforce www. Preference" * by Mark Jaquith * * @package WordPress * @since 2.3.0 *//** * Redirects incoming links to the proper URL based on the site url. * * Search engines consider www.somedomain.com and somedomain.com to be two * different URLs when they both go to the same location. This SEO enhancement * prevents penality for duplicate content by redirecting all incoming links to * one or the other. * * Prevents redirection for feeds, trackbacks, searches, comment popup, and * admin URLs. Does not redirect on IIS, page/post previews, and on form data. * * Will also attempt to find the correct link when a user enters a URL that does * not exist based on exact WordPress query. Will instead try to parse the URL * or query in an attempt to figure the correct page to go to. * * @since 2.3.0 * @uses $wp_rewrite * @uses $is_IIS * * @param string $requested_url Optional. The URL that was requested, used to *		figure if redirect is needed. * @param bool $do_redirect Optional. Redirect to the new URL. * @return null|false|string Null, if redirect not needed. False, if redirect *		not needed or the string of the URL */function redirect_canonical($requested_url=null, $do_redirect=true) {	global $wp_rewrite, $is_IIS, $wp_query, $wpdb;	if ( is_trackback() || is_search() || is_comments_popup() || is_admin() || $is_IIS || ( isset($_POST) && count($_POST) ) || is_preview() || is_robots() )		return;	if ( !$requested_url ) {		// build the URL in the address bar		$requested_url  = is_ssl() ? 'https://' : 'http://';		$requested_url .= $_SERVER['HTTP_HOST'];		$requested_url .= $_SERVER['REQUEST_URI'];	}	$original = @parse_url($requested_url);	if ( false === $original )		return;	// Some PHP setups turn requests for / into /index.php in REQUEST_URI	// See: http://trac.wordpress.org/ticket/5017	// See: http://trac.wordpress.org/ticket/7173	// Disabled, for now:	// $original['path'] = preg_replace('|/index\.php$|', '/', $original['path']);	$redirect = $original;	$redirect_url = false;	// Notice fixing	if ( !isset($redirect['path']) )		$redirect['path'] = '';	if ( !isset($redirect['query']) )		$redirect['query'] = '';	if ( is_singular() && 1 > $wp_query->post_count && ($id = get_query_var('p')) ) {		$vars = $wpdb->get_results( $wpdb->prepare("SELECT post_type, post_parent FROM $wpdb->posts WHERE ID = %d", $id) );		if ( isset($vars[0]) && $vars = $vars[0] ) {			if ( 'revision' == $vars->post_type && $vars->post_parent > 0 )				$id = $vars->post_parent;			if ( $redirect_url = get_permalink($id) )				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);		}	}	// These tests give us a WP-generated permalink	if ( is_404() ) {		// Redirect ?page_id, ?p=, ?attachment_id= to their respective url's		$id = max( get_query_var('p'), get_query_var('page_id'), get_query_var('attachment_id') );		if ( $id && $redirect_post = get_post($id) ) {			$post_type_obj = get_post_type_object($redirect_post->post_type);			if ( $post_type_obj->public ) {				$redirect_url = get_permalink($redirect_post);				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);			}		}		if ( ! $redirect_url )			$redirect_url = redirect_guess_404_permalink();	} elseif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() ) {		// rewriting of old ?p=X, ?m=2004, ?m=200401, ?m=20040101		if ( is_attachment() && !empty($_GET['attachment_id']) && ! $redirect_url ) {			if ( $redirect_url = get_attachment_link(get_query_var('attachment_id')) )				$redirect['query'] = remove_query_arg('attachment_id', $redirect['query']);		} elseif ( is_single() && !empty($_GET['p']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('p')) )				$redirect['query'] = remove_query_arg(array('p', 'post_type'), $redirect['query']);			if ( get_query_var( 'page' ) ) {				$redirect_url = trailingslashit( $redirect_url ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );				$redirect['query'] = remove_query_arg( 'page', $redirect['query'] );			}		} elseif ( is_single() && !empty($_GET['name'])  && ! $redirect_url ) {			if ( $redirect_url = get_permalink( $wp_query->get_queried_object_id() ) )				$redirect['query'] = remove_query_arg('name', $redirect['query']);		} elseif ( is_page() && !empty($_GET['page_id']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('page_id')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( is_page() && !is_feed() && isset($wp_query->queried_object) && 'page' == get_option('show_on_front') && $wp_query->queried_object->ID == get_option('page_on_front')  && ! $redirect_url ) {			$redirect_url = home_url('/');		} elseif ( is_home() && !empty($_GET['page_id']) && 'page' == get_option('show_on_front') && get_query_var('page_id') == get_option('page_for_posts')  && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_option('page_for_posts')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( !empty($_GET['m']) && ( is_year() || is_month() || is_day() ) ) {			$m = get_query_var('m');			switch ( strlen($m) ) {				case 4: // Yearly					$redirect_url = get_year_link($m);					break;				case 6: // Monthly					$redirect_url = get_month_link( substr($m, 0, 4), substr($m, 4, 2) );					break;				case 8: // Daily					$redirect_url = get_day_link(substr($m, 0, 4), substr($m, 4, 2), substr($m, 6, 2));					break;			}			if ( $redirect_url )				$redirect['query'] = remove_query_arg('m', $redirect['query']);		// now moving on to non ?m=X year/month/day links		} elseif ( is_day() && get_query_var('year') && get_query_var('monthnum') && !empty($_GET['day']) ) {			if ( $redirect_url = get_day_link(get_query_var('year'), get_query_var('monthnum'), get_query_var('day')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum', 'day'), $redirect['query']);		} elseif ( is_month() && get_query_var('year') && !empty($_GET['monthnum']) ) {			if ( $redirect_url = get_month_link(get_query_var('year'), get_query_var('monthnum')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum'), $redirect['query']);		} elseif ( is_year() && !empty($_GET['year']) ) {			if ( $redirect_url = get_year_link(get_query_var('year')) )				$redirect['query'] = remove_query_arg('year', $redirect['query']);		} elseif ( is_author() && !empty($_GET['author']) && preg_match( '|^[0-9]+$|', $_GET['author'] ) ) {			$author = get_userdata(get_query_var('author'));			if ( false !== $author && $redirect_url = get_author_posts_url($author->ID, $author->user_nicename) )				$redirect['query'] = remove_query_arg('author', $redirect['query']);		} elseif ( is_category() || is_tag() || is_tax() ) { // Terms (Tags/categories)			$term_count = 0;			foreach ( array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and') as $key )				$term_count += count($wp_query->query_vars[$key]);			$obj = $wp_query->get_queried_object();			if ( $term_count <= 1 && !empty($obj->term_id) && ( $tax_url = get_term_link((int)$obj->term_id, $obj->taxonomy) ) && !is_wp_error($tax_url) ) {				if ( is_category() ) {					$redirect['query'] = remove_query_arg( array( 'category_name', 'category', 'cat'), $redirect['query']);				} elseif ( is_tag() ) {					$redirect['query'] = remove_query_arg( array( 'tag', 'tag_id'), $redirect['query']);				} elseif ( is_tax() ) { // Custom taxonomies will have a custom query var, remove those too:					$tax = get_taxonomy( $obj->taxonomy );					if ( false !== $tax->query_var)						$redirect['query'] = remove_query_arg($tax->query_var, $redirect['query']);					else						$redirect['query'] = remove_query_arg( array( 'term', 'taxonomy'), $redirect['query']);				}				$tax_url = parse_url($tax_url);				if ( ! empty($tax_url['query']) ) { // Custom taxonomies may only be accessable via ?taxonomy=..&term=..					parse_str($tax_url['query'], $query_vars);					$redirect['query'] = add_query_arg($query_vars, $redirect['query']);				} else { // Taxonomy is accessable via a "pretty-URL"					$redirect['path'] = $tax_url['path'];				}			}		} elseif ( is_single() && strpos($wp_rewrite->permalink_structure, '%category%') !== false ) {			$category = get_term_by('slug', get_query_var('category_name'), 'category');			$post_terms = wp_get_object_terms($wp_query->get_queried_object_id(), 'category', array('fields' => 'tt_ids'));			if ( (!$category || is_wp_error($category)) || ( !is_wp_error($post_terms) && !empty($post_terms) && !in_array($category->term_taxonomy_id, $post_terms) ) )				$redirect_url = get_permalink($wp_query->get_queried_object_id());		}		// paging and feeds		if ( get_query_var('paged') || is_feed() || get_query_var('cpage') ) {			if ( !$redirect_url )				$redirect_url = $requested_url;			$paged_redirect = @parse_url($redirect_url);			while ( preg_match( '#/page/?[0-9]+?(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/(comments/?)?(feed|rss|rdf|atom|rss2)(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/comment-page-[0-9]+(/+)?$#', $paged_redirect['path'] ) ) {				// Strip off paging and feed				$paged_redirect['path'] = preg_replace('#/page/?[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing paging				$paged_redirect['path'] = preg_replace('#/(comments/?)?(feed|rss2?|rdf|atom)(/+|$)#', '/', $paged_redirect['path']); // strip off feed endings				$paged_redirect['path'] = preg_replace('#/comment-page-[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing comment paging			}			$addl_path = '';			if ( is_feed() ) {				$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';				if ( get_query_var( 'withcomments' ) )					$addl_path .= 'comments/';				$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() ==  get_query_var('feed') || 'feed' == get_query_var('feed') ) ? '' : get_query_var('feed') ), 'feed' );				$redirect['query'] = remove_query_arg( 'feed', $redirect['query'] );			}			if ( get_query_var('paged') > 0 ) {				$paged = get_query_var('paged');				$redirect['query'] = remove_query_arg( 'paged', $redirect['query'] );				if ( !is_feed() ) {					if ( $paged > 1 && !is_single() ) {						$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit("page/$paged", 'paged');					} elseif ( !is_single() ) {						$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';					}				} elseif ( $paged > 1 ) {					$redirect['query'] = add_query_arg( 'paged', $paged, $redirect['query'] );				}			}			if ( get_option('page_comments') && ( ( 'newest' == get_option('default_comments_page') && get_query_var('cpage') > 0 ) || ( 'newest' != get_option('default_comments_page') && get_query_var('cpage') > 1 ) ) ) {				$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit( 'comment-page-' . get_query_var('cpage'), 'commentpaged' );				$redirect['query'] = remove_query_arg( 'cpage', $redirect['query'] );			}			$paged_redirect['path'] = user_trailingslashit( preg_replace('|/index.php/?$|', '/', $paged_redirect['path']) ); // strip off trailing /index.php/			if ( !empty( $addl_path ) && $wp_rewrite->using_index_permalinks() && strpos($paged_redirect['path'], '/index.php/') === false )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . 'index.php/';			if ( !empty( $addl_path ) )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . $addl_path;			$redirect_url = $paged_redirect['scheme'] . '://' . $paged_redirect['host'] . $paged_redirect['path'];			$redirect['path'] = $paged_redirect['path'];		}	}	// tack on any additional query vars	$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	if ( $redirect_url && !empty($redirect['query']) ) {		if ( strpos($redirect_url, '?') !== false )			$redirect_url .= '&';		else			$redirect_url .= '?';		$redirect_url .= $redirect['query'];	}	if ( $redirect_url )		$redirect = @parse_url($redirect_url);	// www.example.com vs example.com	$user_home = @parse_url(home_url());	if ( !empty($user_home['host']) )		$redirect['host'] = $user_home['host'];	if ( empty($user_home['path']) )		$user_home['path'] = '/';	// Handle ports	if ( !empty($user_home['port']) )		$redirect['port'] = $user_home['port'];	else		unset($redirect['port']);	// trailing /index.php	$redirect['path'] = preg_replace('|/index.php/*?$|', '/', $redirect['path']);	// Remove trailing spaces from the path	$redirect['path'] = preg_replace( '#(%20| )+$#', '', $redirect['path'] );	if ( !empty( $redirect['query'] ) ) {		// Remove trailing spaces from certain terminating query string args		$redirect['query'] = preg_replace( '#((p|page_id|cat|tag)=[^&]*?)(%20| )+$#', '$1', $redirect['query'] );		// Clean up empty query strings		$redirect['query'] = trim(preg_replace( '#(^|&)(p|page_id|cat|tag)=?(&|$)#', '&', $redirect['query']), '&');		// Remove redundant leading ampersands		$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	}	// strip /index.php/ when we're not using PATHINFO permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$redirect['path'] = str_replace('/index.php/', '/', $redirect['path']);	// trailing slashes	if ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() && !is_404() && (!is_front_page() || ( is_front_page() && (get_query_var('paged') > 1) ) ) ) {		$user_ts_type = '';		if ( get_query_var('paged') > 0 ) {			$user_ts_type = 'paged';		} else {			foreach ( array('single', 'category', 'page', 'day', 'month', 'year', 'home') as $type ) {				$func = 'is_' . $type;				if ( call_user_func($func) ) {					$user_ts_type = $type;					break;				}			}		}		$redirect['path'] = user_trailingslashit($redirect['path'], $user_ts_type);	} elseif ( is_front_page() ) {		$redirect['path'] = trailingslashit($redirect['path']);	}	// Strip multiple slashes out of the URL	if ( strpos($redirect['path'], '//') > -1 )		$redirect['path'] = preg_replace('|/+|', '/', $redirect['path']);	// Always trailing slash the Front Page URL	if ( trailingslashit( $redirect['path'] ) == trailingslashit( $user_home['path'] ) )		$redirect['path'] = trailingslashit($redirect['path']);	// Ignore differences in host capitalization, as this can lead to infinite redirects	// Only redirect no-www <=> yes-www	if ( strtolower($original['host']) == strtolower($redirect['host']) ||		( strtolower($original['host']) != 'www.' . strtolower($redirect['host']) && 'www.' . strtolower($original['host']) != strtolower($redirect['host']) ) )		$redirect['host'] = $original['host'];	$compare_original = array($original['host'], $original['path']);	if ( !empty( $original['port'] ) )		$compare_original[] = $original['port'];	if ( !empty( $original['query'] ) )		$compare_original[] = $original['query'];	$compare_redirect = array($redirect['host'], $redirect['path']);	if ( !empty( $redirect['port'] ) )		$compare_redirect[] = $redirect['port'];	if ( !empty( $redirect['query'] ) )		$compare_redirect[] = $redirect['query'];	if ( $compare_original !== $compare_redirect ) {		$redirect_url = $redirect['scheme'] . '://' . $redirect['host'];		if ( !empty($redirect['port']) )			$redirect_url .= ':' . $redirect['port'];		$redirect_url .= $redirect['path'];		if ( !empty($redirect['query']) )			$redirect_url .= '?' . $redirect['query'];	}	if ( !$redirect_url || $redirect_url == $requested_url )		return false;	// Note that you can use the "redirect_canonical" filter to cancel a canonical redirect for whatever reason by returning FALSE	$redirect_url = apply_filters('redirect_canonical', $redirect_url, $requested_url);	if ( !$redirect_url || $redirect_url == $requested_url ) // yes, again -- in case the filter aborted the request		return false;	if ( $do_redirect ) {		// protect against chained redirects		if ( !redirect_canonical($redirect_url, false) ) {			wp_redirect($redirect_url, 301);			exit();		} else {			// Debug			// die("1: $redirect_url<br />2: " . redirect_canonical( $redirect_url, false ) );			return false;		}	} else {		return $redirect_url;	}}/** * Attempts to guess correct post based on query vars. * * @since 2.3.0 * @uses $wpdb * * @return bool|string Returns False, if it can't find post, returns correct *		location on success. */function redirect_guess_404_permalink() {	global $wpdb;	if ( !get_query_var('name') )		return false;	$where = $wpdb->prepare("post_name LIKE %s", get_query_var('name') . '%');	// if any of post_type, year, monthnum, or day are set, use them to refine the query	if ( get_query_var('post_type') )		$where .= $wpdb->prepare(" AND post_type = %s", get_query_var('post_type'));	if ( get_query_var('year') )		$where .= $wpdb->prepare(" AND YEAR(post_date) = %d", get_query_var('year'));	if ( get_query_var('monthnum') )		$where .= $wpdb->prepare(" AND MONTH(post_date) = %d", get_query_var('monthnum'));	if ( get_query_var('day') )		$where .= $wpdb->prepare(" AND DAYOFMONTH(post_date) = %d", get_query_var('day'));	$post_id = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE $where AND post_status = 'publish'");	if ( !$post_id )		return false;	return get_permalink($post_id);}add_action('template_redirect', 'redirect_canonical');?>
<?php/** * Main WordPress API * * @package WordPress *//** * Converts MySQL DATETIME field to user specified date format. * * If $dateformatstring has 'G' value, then gmmktime() function will be used to * make the time. If $dateformatstring is set to 'U', then mktime() function * will be used to make the time. * * The $translate will only be used, if it is set to true and it is by default * and if the $wp_locale object has the month and weekday set. * * @since 0.71 * * @param string $dateformatstring Either 'G', 'U', or php date format. * @param string $mysqlstring Time from mysql DATETIME field. * @param bool $translate Optional. Default is true. Will switch format to locale. * @return string Date formated by $dateformatstring or locale (if available). */function mysql2date( $dateformatstring, $mysqlstring, $translate = true ) {	$m = $mysqlstring;	if ( empty( $m ) )		return false;	if ( 'G' == $dateformatstring ) {		return strtotime( $m . ' +0000' );	}	$i = strtotime( $m );	if ( 'U' == $dateformatstring )		return $i;	if ( $translate)	    return date_i18n( $dateformatstring, $i );	else	    return date( $dateformatstring, $i );}/** * Retrieve the current time based on specified type. * * The 'mysql' type will return the time in the format for MySQL DATETIME field. * The 'timestamp' type will return the current timestamp. * * If $gmt is set to either '1' or 'true', then both types will use GMT time. * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option. * * @since 1.0.0 * * @param string $type Either 'mysql' or 'timestamp'. * @param int|bool $gmt Optional. Whether to use GMT timezone. Default is false. * @return int|string String if $type is 'gmt', int if $type is 'timestamp'. */function current_time( $type, $gmt = 0 ) {	switch ( $type ) {		case 'mysql':			return ( $gmt ) ? gmdate( 'Y-m-d H:i:s' ) : gmdate( 'Y-m-d H:i:s', ( time() + ( get_option( 'gmt_offset' ) * 3600 ) ) );			break;		case 'timestamp':			return ( $gmt ) ? time() : time() + ( get_option( 'gmt_offset' ) * 3600 );			break;	}}/** * Retrieve the date in localized format, based on timestamp. * * If the locale specifies the locale month and weekday, then the locale will * take over the format for the date. If it isn't, then the date format string * will be used instead. * * @since 0.71 * * @param string $dateformatstring Format to display the date. * @param int $unixtimestamp Optional. Unix timestamp. * @param bool $gmt Optional, default is false. Whether to convert to GMT for time. * @return string The date, translated if locale specifies it. */function date_i18n( $dateformatstring, $unixtimestamp = false, $gmt = false ) {	global $wp_locale;	$i = $unixtimestamp;	// Sanity check for PHP 5.1.0-	if ( false === $i || intval($i) < 0 ) {		if ( ! $gmt )			$i = current_time( 'timestamp' );		else			$i = time();		// we should not let date() interfere with our		// specially computed timestamp		$gmt = true;	}	// store original value for language with untypical grammars	// see http://core.trac.wordpress.org/ticket/9396	$req_format = $dateformatstring;	$datefunc = $gmt? 'gmdate' : 'date';	if ( ( !empty( $wp_locale->month ) ) && ( !empty( $wp_locale->weekday ) ) ) {		$datemonth = $wp_locale->get_month( $datefunc( 'm', $i ) );		$datemonth_abbrev = $wp_locale->get_month_abbrev( $datemonth );		$dateweekday = $wp_locale->get_weekday( $datefunc( 'w', $i ) );		$dateweekday_abbrev = $wp_locale->get_weekday_abbrev( $dateweekday );		$datemeridiem = $wp_locale->get_meridiem( $datefunc( 'a', $i ) );		$datemeridiem_capital = $wp_locale->get_meridiem( $datefunc( 'A', $i ) );		$dateformatstring = ' '.$dateformatstring;		$dateformatstring = preg_replace( "/([^\\\])D/", "\\1" . backslashit( $dateweekday_abbrev ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])F/", "\\1" . backslashit( $datemonth ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])l/", "\\1" . backslashit( $dateweekday ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])M/", "\\1" . backslashit( $datemonth_abbrev ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])a/", "\\1" . backslashit( $datemeridiem ), $dateformatstring );		$dateformatstring = preg_replace( "/([^\\\])A/", "\\1" . backslashit( $datemeridiem_capital ), $dateformatstring );		$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );	}	$j = @$datefunc( $dateformatstring, $i );	// allow plugins to redo this entirely for languages with untypical grammars	$j = apply_filters('date_i18n', $j, $req_format, $i, $gmt);	return $j;}/** * Convert integer number to format based on the locale. * * @since 2.3.0 * * @param int $number The number to convert based on locale. * @param int $decimals Precision of the number of decimal places. * @return string Converted number in string format. */function number_format_i18n( $number, $decimals = 0 ) {	global $wp_locale;	$formatted = number_format( $number, absint( $decimals ), $wp_locale->number_format['decimal_point'], $wp_locale->number_format['thousands_sep'] );	return apply_filters( 'number_format_i18n', $formatted );}/** * Convert number of bytes largest unit bytes will fit into. * * It is easier to read 1kB than 1024 bytes and 1MB than 1048576 bytes. Converts * number of bytes to human readable number by taking the number of that unit * that the bytes will go into it. Supports TB value. * * Please note that integers in PHP are limited to 32 bits, unless they are on * 64 bit architecture, then they have 64 bit size. If you need to place the * larger size then what PHP integer type will hold, then use a string. It will * be converted to a double, which should always have 64 bit length. * * Technically the correct unit names for powers of 1024 are KiB, MiB etc. * @link http://en.wikipedia.org/wiki/Byte * * @since 2.3.0 * * @param int|string $bytes Number of bytes. Note max integer size for integers. * @param int $decimals Precision of number of decimal places. Deprecated. * @return bool|string False on failure. Number string on success. */function size_format( $bytes, $decimals = 0 ) {	$quant = array(		// ========================= Origin ====		'TB' => 1099511627776,  // pow( 1024, 4)		'GB' => 1073741824,     // pow( 1024, 3)		'MB' => 1048576,        // pow( 1024, 2)		'kB' => 1024,           // pow( 1024, 1)		'B ' => 1,              // pow( 1024, 0)	);	foreach ( $quant as $unit => $mag )		if ( doubleval($bytes) >= $mag )			return number_format_i18n( $bytes / $mag, $decimals ) . ' ' . $unit;	return false;}/** * Get the week start and end from the datetime or date string from mysql. * * @since 0.71 * * @param string $mysqlstring Date or datetime field type from mysql. * @param int $start_of_week Optional. Start of the week as an integer. * @return array Keys are 'start' and 'end'. */function get_weekstartend( $mysqlstring, $start_of_week = '' ) {	$my = substr( $mysqlstring, 0, 4 ); // Mysql string Year	$mm = substr( $mysqlstring, 8, 2 ); // Mysql string Month	$md = substr( $mysqlstring, 5, 2 ); // Mysql string day	$day = mktime( 0, 0, 0, $md, $mm, $my ); // The timestamp for mysqlstring day.	$weekday = date( 'w', $day ); // The day of the week from the timestamp	if ( !is_numeric($start_of_week) )		$start_of_week = get_option( 'start_of_week' );	if ( $weekday < $start_of_week )		$weekday += 7;	$start = $day - 86400 * ( $weekday - $start_of_week ); // The most recent week start day on or before $day	$end = $start + 604799; // $start + 7 days - 1 second	return compact( 'start', 'end' );}/** * Unserialize value only if it was serialized. * * @since 2.0.0 * * @param string $original Maybe unserialized original, if is needed. * @return mixed Unserialized data can be any type. */function maybe_unserialize( $original ) {	if ( is_serialized( $original ) ) // don't attempt to unserialize data that wasn't serialized going in		return @unserialize( $original );	return $original;}/** * Check value to find if it was serialized. * * If $data is not an string, then returned value will always be false. * Serialized data is always a string. * * @since 2.0.5 * * @param mixed $data Value to check to see if was serialized. * @return bool False if not serialized and true if it was. */function is_serialized( $data ) {	// if it isn't a string, it isn't serialized	if ( !is_string( $data ) )		return false;	$data = trim( $data );	if ( 'N;' == $data )		return true;	if ( !preg_match( '/^([adObis]):/', $data, $badions ) )		return false;	switch ( $badions[1] ) {		case 'a' :		case 'O' :		case 's' :			if ( preg_match( "/^{$badions[1]}:[0-9]+:.*[;}]\$/s", $data ) )				return true;			break;		case 'b' :		case 'i' :		case 'd' :			if ( preg_match( "/^{$badions[1]}:[0-9.E-]+;\$/", $data ) )				return true;			break;	}	return false;}/** * Check whether serialized data is of string type. * * @since 2.0.5 * * @param mixed $data Serialized data * @return bool False if not a serialized string, true if it is. */function is_serialized_string( $data ) {	// if it isn't a string, it isn't a serialized string	if ( !is_string( $data ) )		return false;	$data = trim( $data );	if ( preg_match( '/^s:[0-9]+:.*;$/s', $data ) ) // this should fetch all serialized strings		return true;	return false;}/** * Retrieve option value based on name of option. * * If the option does not exist or does not have a value, then the return value * will be false. This is useful to check whether you need to install an option * and is commonly used during installation of plugin options and to test * whether upgrading is required. * * If the option was serialized then it will be unserialized when it is returned. * * @since 1.5.0 * @package WordPress * @subpackage Option * @uses apply_filters() Calls 'pre_option_$option' before checking the option. * 	Any value other than false will "short-circuit" the retrieval of the option *	and return the returned value. You should not try to override special options, * 	but you will not be prevented from doing so. * @uses apply_filters() Calls 'option_$option', after checking the option, with * 	the option value. * * @param string $option Name of option to retrieve. Expected to not be SQL-escaped. * @return mixed Value set for the option. */function get_option( $option, $default = false ) {	global $wpdb;	// Allow plugins to short-circuit options.	$pre = apply_filters( 'pre_option_' . $option, false );	if ( false !== $pre )		return $pre;	$option = trim($option);	if ( empty($option) )		return false;	if ( defined( 'WP_SETUP_CONFIG' ) )		return false;	if ( ! defined( 'WP_INSTALLING' ) ) {		// prevent non-existent options from triggering multiple queries		$notoptions = wp_cache_get( 'notoptions', 'options' );		if ( isset( $notoptions[$option] ) )			return $default;		$alloptions = wp_load_alloptions();		if ( isset( $alloptions[$option] ) ) {			$value = $alloptions[$option];		} else {			$value = wp_cache_get( $option, 'options' );			if ( false === $value ) {				$row = $wpdb->get_row( $wpdb->prepare( "SELECT option_value FROM $wpdb->options WHERE option_name = %s LIMIT 1", $option ) );				// Has to be get_row instead of get_var because of funkiness with 0, false, null values				if ( is_object( $row ) ) {					$value = $row->option_value;					wp_cache_add( $option, $value, 'options' );				} else { // option does not exist, so we must cache its non-existence					$notoptions[$option] = true;					wp_cache_set( 'notoptions', $notoptions, 'options' );					return $default;				}			}		}	} else {		$suppress = $wpdb->suppress_errors();		$row = $wpdb->get_row( $wpdb->prepare( "SELECT option_value FROM $wpdb->options WHERE option_name = %s LIMIT 1", $option ) );		$wpdb->suppress_errors( $suppress );		if ( is_object( $row ) )			$value = $row->option_value;		else			return $default;	}	// If home is not set use siteurl.	if ( 'home' == $option && '' == $value )		return get_option( 'siteurl' );	if ( in_array( $option, array('siteurl', 'home', 'category_base', 'tag_base') ) )		$value = untrailingslashit( $value );	return apply_filters( 'option_' . $option, maybe_unserialize( $value ) );}/** * Protect WordPress special option from being modified. * * Will die if $option is in protected list. Protected options are 'alloptions' * and 'notoptions' options. * * @since 2.2.0 * @package WordPress * @subpackage Option * * @param string $option Option name. */function wp_protect_special_option( $option ) {	$protected = array( 'alloptions', 'notoptions' );	if ( in_array( $option, $protected ) )		wp_die( sprintf( __( '%s is a protected WP option and may not be modified' ), esc_html( $option ) ) );}/** * Print option value after sanitizing for forms. * * @uses attr Sanitizes value. * @since 1.5.0 * @package WordPress * @subpackage Option * * @param string $option Option name. */function form_option( $option ) {	echo esc_attr( get_option( $option ) );}/** * Loads and caches all autoloaded options, if available or all options. * * @since 2.2.0 * @package WordPress * @subpackage Option * * @return array List of all options. */function wp_load_alloptions() {	global $wpdb;	if ( !defined( 'WP_INSTALLING' ) || !is_multisite() )		$alloptions = wp_cache_get( 'alloptions', 'options' );	else		$alloptions = false;	if ( !$alloptions ) {		$suppress = $wpdb->suppress_errors();		if ( !$alloptions_db = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options WHERE autoload = 'yes'" ) )			$alloptions_db = $wpdb->get_results( "SELECT option_name, option_value FROM $wpdb->options" );		$wpdb->suppress_errors($suppress);		$alloptions = array();		foreach ( (array) $alloptions_db as $o )			$alloptions[$o->option_name] = $o->option_value;			if ( !defined( 'WP_INSTALLING' ) || !is_multisite() )				wp_cache_add( 'alloptions', $alloptions, 'options' );	}	return $alloptions;}/** * Loads and caches certain often requested site options if is_multisite() and a peristent cache is not being used. * * @since 3.0.0 * @package WordPress * @subpackage Option * * @param int $site_id Optional site ID for which to query the options. Defaults to the current site. */function wp_load_core_site_options( $site_id = null ) {	global $wpdb, $_wp_using_ext_object_cache;	if ( !is_multisite() || $_wp_using_ext_object_cache || defined( 'WP_INSTALLING' ) )		return;	if ( empty($site_id) )		$site_id = $wpdb->siteid;	$core_options = array('site_name', 'siteurl', 'active_sitewide_plugins', '_site_transient_timeout_theme_roots', '_site_transient_theme_roots', 'site_admins', 'dashboard_blog', 'can_compress_scripts', 'global_terms_enabled' );	$core_options_in = "'" . implode("', '", $core_options) . "'";	$options = $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value FROM $wpdb->sitemeta WHERE meta_key IN ($core_options_in) AND site_id = %d", $site_id) );	foreach ( $options as $option ) {		$key = $option->meta_key;		$cache_key = "{$site_id}:$key";		$option->meta_value = maybe_unserialize( $option->meta_value );		wp_cache_set( $cache_key, $option->meta_value, 'site-options' );	}}/** * Update the value of an option that was already added. * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is inserted into the database. Remember, * resources can not be serialized or added as an option. * * If the option does not exist, then the option will be added with the option * value, but you will not be able to set whether it is autoloaded. If you want * to set whether an option is autoloaded, then you need to use the add_option(). * * @since 1.0.0 * @package WordPress * @subpackage Option * * @uses apply_filters() Calls 'pre_update_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'update_option' hook before updating the option. * @uses do_action() Calls 'update_option_$option' and 'updated_option' hooks on success. * * @param string $option Option name. Expected to not be SQL-escaped. * @param mixed $newvalue Option value. Expected to not be SQL-escaped. * @return bool False if value was not updated and true if value was updated. */function update_option( $option, $newvalue ) {	global $wpdb;	$option = trim($option);	if ( empty($option) )		return false;	wp_protect_special_option( $option );	if ( is_object($newvalue) )		$newvalue = wp_clone($newvalue);	$newvalue = sanitize_option( $option, $newvalue );	$oldvalue = get_option( $option );	$newvalue = apply_filters( 'pre_update_option_' . $option, $newvalue, $oldvalue );	// If the new and old values are the same, no need to update.	if ( $newvalue === $oldvalue )		return false;	if ( false === $oldvalue )		return add_option( $option, $newvalue );	$notoptions = wp_cache_get( 'notoptions', 'options' );	if ( is_array( $notoptions ) && isset( $notoptions[$option] ) ) {		unset( $notoptions[$option] );		wp_cache_set( 'notoptions', $notoptions, 'options' );	}	$_newvalue = $newvalue;	$newvalue = maybe_serialize( $newvalue );	do_action( 'update_option', $option, $oldvalue, $_newvalue );	if ( ! defined( 'WP_INSTALLING' ) ) {		$alloptions = wp_load_alloptions();		if ( isset( $alloptions[$option] ) ) {			$alloptions[$option] = $_newvalue;			wp_cache_set( 'alloptions', $alloptions, 'options' );		} else {			wp_cache_set( $option, $_newvalue, 'options' );		}	}	$result = $wpdb->update( $wpdb->options, array( 'option_value' => $newvalue ), array( 'option_name' => $option ) );	if ( $result ) {		do_action( "update_option_{$option}", $oldvalue, $_newvalue );		do_action( 'updated_option', $option, $oldvalue, $_newvalue );		return true;	}	return false;}/** * Add a new option. * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is inserted into the database. Remember, * resources can not be serialized or added as an option. * * You can create options without values and then add values later. Does not * check whether the option has already been added, but does check that you * aren't adding a protected WordPress option. Care should be taken to not name * options the same as the ones which are protected and to not add options * that were already added. * * @package WordPress * @subpackage Option * @since 1.0.0 * @link http://alex.vort-x.net/blog/ Thanks Alex Stapleton * * @uses do_action() Calls 'add_option' hook before adding the option. * @uses do_action() Calls 'add_option_$option' and 'added_option' hooks on success. * * @param string $option Name of option to add. Expected to not be SQL-escaped. * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped. * @param mixed $deprecated Optional. Description. Not used anymore. * @param bool $autoload Optional. Default is enabled. Whether to load the option when WordPress starts up. * @return null returns when finished. */function add_option( $option, $value = '', $deprecated = '', $autoload = 'yes' ) {	global $wpdb;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.3' );	$option = trim($option);	if ( empty($option) )		return false;	wp_protect_special_option( $option );	if ( is_object($value) )		$value = wp_clone($value);	$value = sanitize_option( $option, $value );	// Make sure the option doesn't already exist. We can check the 'notoptions' cache before we ask for a db query	$notoptions = wp_cache_get( 'notoptions', 'options' );	if ( !is_array( $notoptions ) || !isset( $notoptions[$option] ) )		if ( false !== get_option( $option ) )			return;	$_value = $value;	$value = maybe_serialize( $value );	$autoload = ( 'no' === $autoload ) ? 'no' : 'yes';	do_action( 'add_option', $option, $_value );	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( 'yes' == $autoload ) {			$alloptions = wp_load_alloptions();			$alloptions[$option] = $value;			wp_cache_set( 'alloptions', $alloptions, 'options' );		} else {			wp_cache_set( $option, $value, 'options' );		}	}	// This option exists now	$notoptions = wp_cache_get( 'notoptions', 'options' ); // yes, again... we need it to be fresh	if ( is_array( $notoptions ) && isset( $notoptions[$option] ) ) {		unset( $notoptions[$option] );		wp_cache_set( 'notoptions', $notoptions, 'options' );	}	$result = $wpdb->query( $wpdb->prepare( "INSERT INTO `$wpdb->options` (`option_name`, `option_value`, `autoload`) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE `option_name` = VALUES(`option_name`), `option_value` = VALUES(`option_value`), `autoload` = VALUES(`autoload`)", $option, $value, $autoload ) );	if ( $result ) {		do_action( "add_option_{$option}", $option, $_value );		do_action( 'added_option', $option, $_value );		return true;	}	return false;}/** * Removes option by name. Prevents removal of protected WordPress options. * * @package WordPress * @subpackage Option * @since 1.2.0 * * @uses do_action() Calls 'delete_option' hook before option is deleted. * @uses do_action() Calls 'deleted_option' and 'delete_option_$option' hooks on success. * * @param string $option Name of option to remove. Expected to not be SQL-escaped. * @return bool True, if option is successfully deleted. False on failure. */function delete_option( $option ) {	global $wpdb;	wp_protect_special_option( $option );	// Get the ID, if no ID then return	$row = $wpdb->get_row( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $option ) );	if ( is_null( $row ) )		return false;	do_action( 'delete_option', $option );	$result = $wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->options WHERE option_name = %s", $option) );	if ( ! defined( 'WP_INSTALLING' ) ) {		if ( 'yes' == $row->autoload ) {			$alloptions = wp_load_alloptions();			if ( is_array( $alloptions ) && isset( $alloptions[$option] ) ) {				unset( $alloptions[$option] );				wp_cache_set( 'alloptions', $alloptions, 'options' );			}		} else {			wp_cache_delete( $option, 'options' );		}	}	if ( $result ) {		do_action( "delete_option_$option", $option );		do_action( 'deleted_option', $option );		return true;	}	return false;}/** * Delete a transient * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @uses do_action() Calls 'delete_transient_$transient' hook before transient is deleted. * @uses do_action() Calls 'deleted_transient' hook on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return bool true if successful, false otherwise */function delete_transient( $transient ) {	global $_wp_using_ext_object_cache;    do_action( 'delete_transient_' . $transient, $transient );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_delete( $transient, 'transient' );	} else {		$option_timeout = '_transient_timeout_' . $transient;		$option = '_transient_' . $transient;		$result = delete_option( $option );		if ( $result )			delete_option( $option_timeout );	}	if ( $result )		do_action( 'deleted_transient', $transient );	return $result;}/** * Get the value of a transient * * If the transient does not exist or does not have a value, then the return value * will be false. * * @uses apply_filters() Calls 'pre_transient_$transient' hook before checking the transient. * 	Any value other than false will "short-circuit" the retrieval of the transient *	and return the returned value. * @uses apply_filters() Calls 'transient_$option' hook, after checking the transient, with * 	the transient value. * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @param string $transient Transient name. Expected to not be SQL-escaped * @return mixed Value of transient */function get_transient( $transient ) {	global $_wp_using_ext_object_cache;	$pre = apply_filters( 'pre_transient_' . $transient, false );	if ( false !== $pre )		return $pre;	if ( $_wp_using_ext_object_cache ) {		$value = wp_cache_get( $transient, 'transient' );	} else {		$transient_option = '_transient_' . $transient;		if ( ! defined( 'WP_INSTALLING' ) ) {			// If option is not in alloptions, it is not autoloaded and thus has a timeout			$alloptions = wp_load_alloptions();			if ( !isset( $alloptions[$transient_option] ) ) {				$transient_timeout = '_transient_timeout_' . $transient;				if ( get_option( $transient_timeout ) < time() ) {					delete_option( $transient_option  );					delete_option( $transient_timeout );					return false;				}			}		}		$value = get_option( $transient_option );	}	return apply_filters( 'transient_' . $transient, $value );}/** * Set/update the value of a transient * * You do not need to serialize values. If the value needs to be serialized, then * it will be serialized before it is set. * * @since 2.8.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_set_transient_$transient' hook to allow overwriting the * 	transient value to be stored. * @uses do_action() Calls 'set_transient_$transient' and 'setted_transient' hooks on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @param mixed $value Transient value. Expected to not be SQL-escaped. * @param int $expiration Time until expiration in seconds, default 0 * @return bool False if value was not set and true if value was set. */function set_transient( $transient, $value, $expiration = 0 ) {	global $_wp_using_ext_object_cache;    $value = apply_filters( 'pre_set_transient_' . $transient, $value );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_set( $transient, $value, 'transient', $expiration );	} else {		$transient_timeout = '_transient_timeout_' . $transient;		$transient = '_transient_' . $transient;		if ( false === get_option( $transient ) ) {			$autoload = 'yes';			if ( $expiration ) {				$autoload = 'no';				add_option( $transient_timeout, time() + $expiration, '', 'no' );			}			$result = add_option( $transient, $value, '', $autoload );		} else {			if ( $expiration )				update_option( $transient_timeout, time() + $expiration );			$result = update_option( $transient, $value );		}	}	if ( $result ) {		do_action( 'set_transient_' . $transient );		do_action( 'setted_transient', $transient );	}	return $result;}/** * Saves and restores user interface settings stored in a cookie. * * Checks if the current user-settings cookie is updated and stores it. When no * cookie exists (different browser used), adds the last saved cookie restoring * the settings. * * @package WordPress * @subpackage Option * @since 2.7.0 */function wp_user_settings() {	if ( ! is_admin() )		return;	if ( defined('DOING_AJAX') )		return;	if ( ! $user = wp_get_current_user() )		return;	$settings = get_user_option( 'user-settings', $user->ID );	if ( isset( $_COOKIE['wp-settings-' . $user->ID] ) ) {		$cookie = preg_replace( '/[^A-Za-z0-9=&_]/', '', $_COOKIE['wp-settings-' . $user->ID] );		if ( ! empty( $cookie ) && strpos( $cookie, '=' ) ) {			if ( $cookie == $settings )				return;			$last_time = (int) get_user_option( 'user-settings-time', $user->ID );			$saved = isset( $_COOKIE['wp-settings-time-' . $user->ID]) ? preg_replace( '/[^0-9]/', '', $_COOKIE['wp-settings-time-' . $user->ID] ) : 0;			if ( $saved > $last_time ) {				update_user_option( $user->ID, 'user-settings', $cookie, false );				update_user_option( $user->ID, 'user-settings-time', time() - 5, false );				return;			}		}	}	setcookie( 'wp-settings-' . $user->ID, $settings, time() + 31536000, SITECOOKIEPATH );	setcookie( 'wp-settings-time-' . $user->ID, time(), time() + 31536000, SITECOOKIEPATH );	$_COOKIE['wp-settings-' . $user->ID] = $settings;}/** * Retrieve user interface setting value based on setting name. * * @package WordPress * @subpackage Option * @since 2.7.0 * * @param string $name The name of the setting. * @param string $default Optional default value to return when $name is not set. * @return mixed the last saved user setting or the default value/false if it doesn't exist. */function get_user_setting( $name, $default = false ) {	$all = get_all_user_settings();	return isset($all[$name]) ? $all[$name] : $default;}/** * Add or update user interface setting. * * Both $name and $value can contain only ASCII letters, numbers and underscores. * This function has to be used before any output has started as it calls setcookie(). * * @package WordPress * @subpackage Option * @since 2.8.0 * * @param string $name The name of the setting. * @param string $value The value for the setting. * @return bool true if set successfully/false if not. */function set_user_setting( $name, $value ) {	if ( headers_sent() )		return false;	$all = get_all_user_settings();	$name = preg_replace( '/[^A-Za-z0-9_]+/', '', $name );	if ( empty($name) )		return false;	$all[$name] = $value;	return wp_set_all_user_settings($all);}/** * Delete user interface settings. * * Deleting settings would reset them to the defaults. * This function has to be used before any output has started as it calls setcookie(). * * @package WordPress * @subpackage Option * @since 2.7.0 * * @param mixed $names The name or array of names of the setting to be deleted. * @return bool true if deleted successfully/false if not. */function delete_user_setting( $names ) {	if ( headers_sent() )		return false;	$all = get_all_user_settings();	$names = (array) $names;	foreach ( $names as $name ) {		if ( isset($all[$name]) ) {			unset($all[$name]);			$deleted = true;		}	}	if ( isset($deleted) )		return wp_set_all_user_settings($all);	return false;}/** * Retrieve all user interface settings. * * @package WordPress * @subpackage Option * @since 2.7.0 * * @return array the last saved user settings or empty array. */function get_all_user_settings() {	global $_updated_user_settings;	if ( ! $user = wp_get_current_user() )		return array();	if ( isset($_updated_user_settings) && is_array($_updated_user_settings) )		return $_updated_user_settings;	$all = array();	if ( isset($_COOKIE['wp-settings-' . $user->ID]) ) {		$cookie = preg_replace( '/[^A-Za-z0-9=&_]/', '', $_COOKIE['wp-settings-' . $user->ID] );		if ( $cookie && strpos($cookie, '=') ) // the '=' cannot be 1st char			parse_str($cookie, $all);	} else {		$option = get_user_option('user-settings', $user->ID);		if ( $option && is_string($option) )			parse_str( $option, $all );	}	return $all;}/** * Private. Set all user interface settings. * * @package WordPress * @subpackage Option * @since 2.8.0 * * @param unknown $all * @return bool */function wp_set_all_user_settings($all) {	global $_updated_user_settings;	if ( ! $user = wp_get_current_user() )		return false;	$_updated_user_settings = $all;	$settings = '';	foreach ( $all as $k => $v ) {		$v = preg_replace( '/[^A-Za-z0-9_]+/', '', $v );		$settings .= $k . '=' . $v . '&';	}	$settings = rtrim($settings, '&');	update_user_option( $user->ID, 'user-settings', $settings, false );	update_user_option( $user->ID, 'user-settings-time', time(), false );	return true;}/** * Delete the user settings of the current user. * * @package WordPress * @subpackage Option * @since 2.7.0 */function delete_all_user_settings() {	if ( ! $user = wp_get_current_user() )		return;	update_user_option( $user->ID, 'user-settings', '', false );	setcookie('wp-settings-' . $user->ID, ' ', time() - 31536000, SITECOOKIEPATH);}/** * Serialize data, if needed. * * @since 2.0.5 * * @param mixed $data Data that might be serialized. * @return mixed A scalar data */function maybe_serialize( $data ) {	if ( is_array( $data ) || is_object( $data ) )		return serialize( $data );	if ( is_serialized( $data ) )		return serialize( $data );	return $data;}/** * Retrieve post title from XMLRPC XML. * * If the title element is not part of the XML, then the default post title from * the $post_default_title will be used instead. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @global string $post_default_title Default XMLRPC post title. * * @param string $content XMLRPC XML Request content * @return string Post title */function xmlrpc_getposttitle( $content ) {	global $post_default_title;	if ( preg_match( '/<title>(.+?)<\/title>/is', $content, $matchtitle ) ) {		$post_title = $matchtitle[1];	} else {		$post_title = $post_default_title;	}	return $post_title;}/** * Retrieve the post category or categories from XMLRPC XML. * * If the category element is not found, then the default post category will be * used. The return type then would be what $post_default_category. If the * category is found, then it will always be an array. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @global string $post_default_category Default XMLRPC post category. * * @param string $content XMLRPC XML Request content * @return string|array List of categories or category name. */function xmlrpc_getpostcategory( $content ) {	global $post_default_category;	if ( preg_match( '/<category>(.+?)<\/category>/is', $content, $matchcat ) ) {		$post_category = trim( $matchcat[1], ',' );		$post_category = explode( ',', $post_category );	} else {		$post_category = $post_default_category;	}	return $post_category;}/** * XMLRPC XML content without title and category elements. * * @package WordPress * @subpackage XMLRPC * @since 0.71 * * @param string $content XMLRPC XML Request content * @return string XMLRPC XML Request content without title and category elements. */function xmlrpc_removepostdata( $content ) {	$content = preg_replace( '/<title>(.+?)<\/title>/si', '', $content );	$content = preg_replace( '/<category>(.+?)<\/category>/si', '', $content );	$content = trim( $content );	return $content;}/** * Open the file handle for debugging. * * This function is used for XMLRPC feature, but it is general purpose enough * to be used in anywhere. * * @see fopen() for mode options. * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param string $filename File path to debug file. * @param string $mode Same as fopen() mode parameter. * @return bool|resource File handle. False on failure. */function debug_fopen( $filename, $mode ) {	global $debug;	if ( 1 == $debug ) {		$fp = fopen( $filename, $mode );		return $fp;	} else {		return false;	}}/** * Write contents to the file used for debugging. * * Technically, this can be used to write to any file handle when the global * $debug is set to 1 or true. * * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param resource $fp File handle for debugging file. * @param string $string Content to write to debug file. */function debug_fwrite( $fp, $string ) {	global $debug;	if ( 1 == $debug )		fwrite( $fp, $string );}/** * Close the debugging file handle. * * Technically, this can be used to close any file handle when the global $debug * is set to 1 or true. * * @package WordPress * @subpackage Debug * @since 0.71 * @uses $debug Used for whether debugging is enabled. * * @param resource $fp Debug File handle. */function debug_fclose( $fp ) {	global $debug;	if ( 1 == $debug )		fclose( $fp );}/** * Check content for video and audio links to add as enclosures. * * Will not add enclosures that have already been added and will * remove enclosures that are no longer in the post. This is called as * pingbacks and trackbacks. * * @package WordPress * @since 1.5.0 * * @uses $wpdb * * @param string $content Post Content * @param int $post_ID Post ID */function do_enclose( $content, $post_ID ) {	global $wpdb;	include_once( ABSPATH . WPINC . '/class-IXR.php' );	$log = debug_fopen( ABSPATH . 'enclosures.log', 'a' );	$post_links = array();	debug_fwrite( $log, 'BEGIN ' . date( 'YmdHis', time() ) . "\n" );	$pung = get_enclosed( $post_ID );	$ltrs = '\w';	$gunk = '/#~:.?+=&%@!\-';	$punc = '.:?\-';	$any = $ltrs . $gunk . $punc;	preg_match_all( "{\b http : [$any] +? (?= [$punc] * [^$any] | $)}x", $content, $post_links_temp );	debug_fwrite( $log, 'Post contents:' );	debug_fwrite( $log, $content . "\n" );	foreach ( $pung as $link_test ) {		if ( !in_array( $link_test, $post_links_temp[0] ) ) { // link no longer in post			$mid = $wpdb->get_col( $wpdb->prepare("SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE (%s)", $post_ID, $link_test . '%') );			do_action( 'delete_postmeta', $mid );			$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN(%s)", implode( ',', $mid ) ) );			do_action( 'deleted_postmeta', $mid );		}	}	foreach ( (array) $post_links_temp[0] as $link_test ) {		if ( !in_array( $link_test, $pung ) ) { // If we haven't pung it already			$test = @parse_url( $link_test );			if ( false === $test )				continue;			if ( isset( $test['query'] ) )				$post_links[] = $link_test;			elseif ( $test['path'] != '/' && $test['path'] != '' )				$post_links[] = $link_test;		}	}	foreach ( (array) $post_links as $url ) {		if ( $url != '' && !$wpdb->get_var( $wpdb->prepare( "SELECT post_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE (%s)", $post_ID, $url . '%' ) ) ) {			if ( $headers = wp_get_http_headers( $url) ) {				$len = (int) $headers['content-length'];				$type = $headers['content-type'];				$allowed_types = array( 'video', 'audio' );				// Check to see if we can figure out the mime type from				// the extension				$url_parts = @parse_url( $url );				if ( false !== $url_parts ) {					$extension = pathinfo( $url_parts['path'], PATHINFO_EXTENSION );					if ( !empty( $extension ) ) {						foreach ( get_allowed_mime_types( ) as $exts => $mime ) {							if ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {								$type = $mime;								break;							}						}					}				}				if ( in_array( substr( $type, 0, strpos( $type, "/" ) ), $allowed_types ) ) {					$meta_value = "$url\n$len\n$type\n";					$wpdb->insert($wpdb->postmeta, array('post_id' => $post_ID, 'meta_key' => 'enclosure', 'meta_value' => $meta_value) );					do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, 'enclosure', $meta_value );				}			}		}	}}/** * Perform a HTTP HEAD or GET request. * * If $file_path is a writable filename, this will do a GET request and write * the file to that path. * * @since 2.5.0 * * @param string $url URL to fetch. * @param string|bool $file_path Optional. File path to write request to. * @param int $red (private) The number of Redirects followed, Upon 5 being hit, returns false. * @return bool|string False on failure and string of headers if HEAD request. */function wp_get_http( $url, $file_path = false, $red = 1 ) {	@set_time_limit( 60 );	if ( $red > 5 )		return false;	$options = array();	$options['redirection'] = 5;	if ( false == $file_path )		$options['method'] = 'HEAD';	else		$options['method'] = 'GET';	$response = wp_remote_request($url, $options);	if ( is_wp_error( $response ) )		return false;	$headers = wp_remote_retrieve_headers( $response );	$headers['response'] = $response['response']['code'];	// WP_HTTP no longer follows redirects for HEAD requests.	if ( 'HEAD' == $options['method'] && in_array($headers['response'], array(301, 302)) && isset( $headers['location'] ) ) {		return wp_get_http( $headers['location'], $file_path, ++$red );	}	if ( false == $file_path )		return $headers;	// GET request - write it to the supplied filename	$out_fp = fopen($file_path, 'w');	if ( !$out_fp )		return $headers;	fwrite( $out_fp,  $response['body']);	fclose($out_fp);	clearstatcache();	return $headers;}/** * Retrieve HTTP Headers from URL. * * @since 1.5.1 * * @param string $url * @param bool $deprecated Not Used. * @return bool|string False on failure, headers on success. */function wp_get_http_headers( $url, $deprecated = false ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.7' );	$response = wp_remote_head( $url );	if ( is_wp_error( $response ) )		return false;	return wp_remote_retrieve_headers( $response );}/** * Whether today is a new day. * * @since 0.71 * @uses $day Today * @uses $previousday Previous day * * @return int 1 when new day, 0 if not a new day. */function is_new_day() {	global $day, $previousday;	if ( $day != $previousday )		return 1;	else		return 0;}/** * Build URL query based on an associative and, or indexed array. * * This is a convenient function for easily building url queries. It sets the * separator to '&' and uses _http_build_query() function. * * @see _http_build_query() Used to build the query * @link http://us2.php.net/manual/en/function.http-build-query.php more on what *		http_build_query() does. * * @since 2.3.0 * * @param array $data URL-encode key/value pairs. * @return string URL encoded string */function build_query( $data ) {	return _http_build_query( $data, null, '&', '', false );}/** * Retrieve a modified URL query string. * * You can rebuild the URL and append a new query variable to the URL query by * using this function. You can also retrieve the full URL with query data. * * Adding a single key & value or an associative array. Setting a key value to * emptystring removes the key. Omitting oldquery_or_uri uses the $_SERVER * value. * * @since 1.5.0 * * @param mixed $param1 Either newkey or an associative_array * @param mixed $param2 Either newvalue or oldquery or uri * @param mixed $param3 Optional. Old query or uri * @return string New URL query string. */function add_query_arg() {	$ret = '';	if ( is_array( func_get_arg(0) ) ) {		if ( @func_num_args() < 2 || false === @func_get_arg( 1 ) )			$uri = $_SERVER['REQUEST_URI'];		else			$uri = @func_get_arg( 1 );	} else {		if ( @func_num_args() < 3 || false === @func_get_arg( 2 ) )			$uri = $_SERVER['REQUEST_URI'];		else			$uri = @func_get_arg( 2 );	}	if ( $frag = strstr( $uri, '#' ) )		$uri = substr( $uri, 0, -strlen( $frag ) );	else		$frag = '';	if ( preg_match( '|^https?://|i', $uri, $matches ) ) {		$protocol = $matches[0];		$uri = substr( $uri, strlen( $protocol ) );	} else {		$protocol = '';	}	if ( strpos( $uri, '?' ) !== false ) {		$parts = explode( '?', $uri, 2 );		if ( 1 == count( $parts ) ) {			$base = '?';			$query = $parts[0];		} else {			$base = $parts[0] . '?';			$query = $parts[1];		}	} elseif ( !empty( $protocol ) || strpos( $uri, '=' ) === false ) {		$base = $uri . '?';		$query = '';	} else {		$base = '';		$query = $uri;	}	wp_parse_str( $query, $qs );	$qs = urlencode_deep( $qs ); // this re-URL-encodes things that were already in the query string	if ( is_array( func_get_arg( 0 ) ) ) {		$kayvees = func_get_arg( 0 );		$qs = array_merge( $qs, $kayvees );	} else {		$qs[func_get_arg( 0 )] = func_get_arg( 1 );	}	foreach ( (array) $qs as $k => $v ) {		if ( $v === false )			unset( $qs[$k] );	}	$ret = build_query( $qs );	$ret = trim( $ret, '?' );	$ret = preg_replace( '#=(&|$)#', '$1', $ret );	$ret = $protocol . $base . $ret . $frag;	$ret = rtrim( $ret, '?' );	return $ret;}/** * Removes an item or list from the query string. * * @since 1.5.0 * * @param string|array $key Query key or keys to remove. * @param bool $query When false uses the $_SERVER value. * @return string New URL query string. */function remove_query_arg( $key, $query=false ) {	if ( is_array( $key ) ) { // removing multiple keys		foreach ( $key as $k )			$query = add_query_arg( $k, false, $query );		return $query;	}	return add_query_arg( $key, false, $query );}/** * Walks the array while sanitizing the contents. * * @since 0.71 * * @param array $array Array to used to walk while sanitizing contents. * @return array Sanitized $array. */function add_magic_quotes( $array ) {	foreach ( (array) $array as $k => $v ) {		if ( is_array( $v ) ) {			$array[$k] = add_magic_quotes( $v );		} else {			$array[$k] = addslashes( $v );		}	}	return $array;}/** * HTTP request for URI to retrieve content. * * @since 1.5.1 * @uses wp_remote_get() * * @param string $uri URI/URL of web page to retrieve. * @return bool|string HTTP content. False on failure. */function wp_remote_fopen( $uri ) {	$parsed_url = @parse_url( $uri );	if ( !$parsed_url || !is_array( $parsed_url ) )		return false;	$options = array();	$options['timeout'] = 10;	$response = wp_remote_get( $uri, $options );	if ( is_wp_error( $response ) )		return false;	return $response['body'];}/** * Set up the WordPress query. * * @since 2.0.0 * * @param string $query_vars Default WP_Query arguments. */function wp( $query_vars = '' ) {	global $wp, $wp_query, $wp_the_query;	$wp->main( $query_vars );	if ( !isset($wp_the_query) )		$wp_the_query = $wp_query;}/** * Retrieve the description for the HTTP status. * * @since 2.3.0 * * @param int $code HTTP status code. * @return string Empty string if not found, or description if found. */function get_status_header_desc( $code ) {	global $wp_header_to_desc;	$code = absint( $code );	if ( !isset( $wp_header_to_desc ) ) {		$wp_header_to_desc = array(			100 => 'Continue',			101 => 'Switching Protocols',			102 => 'Processing',			200 => 'OK',			201 => 'Created',			202 => 'Accepted',			203 => 'Non-Authoritative Information',			204 => 'No Content',			205 => 'Reset Content',			206 => 'Partial Content',			207 => 'Multi-Status',			226 => 'IM Used',			300 => 'Multiple Choices',			301 => 'Moved Permanently',			302 => 'Found',			303 => 'See Other',			304 => 'Not Modified',			305 => 'Use Proxy',			306 => 'Reserved',			307 => 'Temporary Redirect',			400 => 'Bad Request',			401 => 'Unauthorized',			402 => 'Payment Required',			403 => 'Forbidden',			404 => 'Not Found',			405 => 'Method Not Allowed',			406 => 'Not Acceptable',			407 => 'Proxy Authentication Required',			408 => 'Request Timeout',			409 => 'Conflict',			410 => 'Gone',			411 => 'Length Required',			412 => 'Precondition Failed',			413 => 'Request Entity Too Large',			414 => 'Request-URI Too Long',			415 => 'Unsupported Media Type',			416 => 'Requested Range Not Satisfiable',			417 => 'Expectation Failed',			422 => 'Unprocessable Entity',			423 => 'Locked',			424 => 'Failed Dependency',			426 => 'Upgrade Required',			500 => 'Internal Server Error',			501 => 'Not Implemented',			502 => 'Bad Gateway',			503 => 'Service Unavailable',			504 => 'Gateway Timeout',			505 => 'HTTP Version Not Supported',			506 => 'Variant Also Negotiates',			507 => 'Insufficient Storage',			510 => 'Not Extended'		);	}	if ( isset( $wp_header_to_desc[$code] ) )		return $wp_header_to_desc[$code];	else		return '';}/** * Set HTTP status header. * * @since 2.0.0 * @uses apply_filters() Calls 'status_header' on status header string, HTTP *		HTTP code, HTTP code description, and protocol string as separate *		parameters. * * @param int $header HTTP status code * @return unknown */function status_header( $header ) {	$text = get_status_header_desc( $header );	if ( empty( $text ) )		return false;	$protocol = $_SERVER["SERVER_PROTOCOL"];	if ( 'HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol )		$protocol = 'HTTP/1.0';	$status_header = "$protocol $header $text";	if ( function_exists( 'apply_filters' ) )		$status_header = apply_filters( 'status_header', $status_header, $header, $text, $protocol );	return @header( $status_header, true, $header );}/** * Gets the header information to prevent caching. * * The several different headers cover the different ways cache prevention is handled * by different browsers * * @since 2.8 * * @uses apply_filters() * @return array The associative array of header names and field values. */function wp_get_nocache_headers() {	$headers = array(		'Expires' => 'Wed, 11 Jan 1984 05:00:00 GMT',		'Last-Modified' => gmdate( 'D, d M Y H:i:s' ) . ' GMT',		'Cache-Control' => 'no-cache, must-revalidate, max-age=0',		'Pragma' => 'no-cache',	);	if ( function_exists('apply_filters') ) {		$headers = apply_filters('nocache_headers', $headers);	}	return $headers;}/** * Sets the headers to prevent caching for the different browsers. * * Different browsers support different nocache headers, so several headers must * be sent so that all of them get the point that no caching should occur. * * @since 2.0.0 * @uses wp_get_nocache_headers() */function nocache_headers() {	$headers = wp_get_nocache_headers();	foreach( (array) $headers as $name => $field_value )		@header("{$name}: {$field_value}");}/** * Set the headers for caching for 10 days with JavaScript content type. * * @since 2.1.0 */function cache_javascript_headers() {	$expiresOffset = 864000; // 10 days	header( "Content-Type: text/javascript; charset=" . get_bloginfo( 'charset' ) );	header( "Vary: Accept-Encoding" ); // Handle proxies	header( "Expires: " . gmdate( "D, d M Y H:i:s", time() + $expiresOffset ) . " GMT" );}/** * Retrieve the number of database queries during the WordPress execution. * * @since 2.0.0 * * @return int Number of database queries */function get_num_queries() {	global $wpdb;	return $wpdb->num_queries;}/** * Whether input is yes or no. Must be 'y' to be true. * * @since 1.0.0 * * @param string $yn Character string containing either 'y' or 'n' * @return bool True if yes, false on anything else */function bool_from_yn( $yn ) {	return ( strtolower( $yn ) == 'y' );}/** * Loads the feed template from the use of an action hook. * * If the feed action does not have a hook, then the function will die with a * message telling the visitor that the feed is not valid. * * It is better to only have one hook for each feed. * * @since 2.1.0 * @uses $wp_query Used to tell if the use a comment feed. * @uses do_action() Calls 'do_feed_$feed' hook, if a hook exists for the feed. */function do_feed() {	global $wp_query;	$feed = get_query_var( 'feed' );	// Remove the pad, if present.	$feed = preg_replace( '/^_+/', '', $feed );	if ( $feed == '' || $feed == 'feed' )		$feed = get_default_feed();	$hook = 'do_feed_' . $feed;	if ( !has_action($hook) ) {		$message = sprintf( __( 'ERROR: %s is not a valid feed template.' ), esc_html($feed));		wp_die( $message, '', array( 'response' => 404 ) );	}	do_action( $hook, $wp_query->is_comment_feed );}/** * Load the RDF RSS 0.91 Feed template. * * @since 2.1.0 */function do_feed_rdf() {	load_template( ABSPATH . WPINC . '/feed-rdf.php' );}/** * Load the RSS 1.0 Feed Template * * @since 2.1.0 */function do_feed_rss() {	load_template( ABSPATH . WPINC . '/feed-rss.php' );}/** * Load either the RSS2 comment feed or the RSS2 posts feed. * * @since 2.1.0 * * @param bool $for_comments True for the comment feed, false for normal feed. */function do_feed_rss2( $for_comments ) {	if ( $for_comments )		load_template( ABSPATH . WPINC . '/feed-rss2-comments.php' );	else		load_template( ABSPATH . WPINC . '/feed-rss2.php' );}/** * Load either Atom comment feed or Atom posts feed. * * @since 2.1.0 * * @param bool $for_comments True for the comment feed, false for normal feed. */function do_feed_atom( $for_comments ) {	if ($for_comments)		load_template( ABSPATH . WPINC . '/feed-atom-comments.php');	else		load_template( ABSPATH . WPINC . '/feed-atom.php' );}/** * Display the robot.txt file content. * * The echo content should be with usage of the permalinks or for creating the * robot.txt file. * * @since 2.1.0 * @uses do_action() Calls 'do_robotstxt' hook for displaying robot.txt rules. */function do_robots() {	header( 'Content-Type: text/plain; charset=utf-8' );	do_action( 'do_robotstxt' );	$output = '';	$public = get_option( 'blog_public' );	if ( '0' ==  $public ) {		$output .= "User-agent: *\n";		$output .= "Disallow: /\n";	} else {		$output .= "User-agent: *\n";		$output .= "Disallow:\n";	}	echo apply_filters('robots_txt', $output, $public);}/** * Test whether blog is already installed. * * The cache will be checked first. If you have a cache plugin, which saves the * cache values, then this will work. If you use the default WordPress cache, * and the database goes away, then you might have problems. * * Checks for the option siteurl for whether WordPress is installed. * * @since 2.1.0 * @uses $wpdb * * @return bool Whether blog is already installed. */function is_blog_installed() {	global $wpdb;	// Check cache first. If options table goes away and we have true cached, oh well.	if ( wp_cache_get( 'is_blog_installed' ) )		return true;	$suppress = $wpdb->suppress_errors();	if ( ! defined( 'WP_INSTALLING' ) ) {		$alloptions = wp_load_alloptions();	}	// If siteurl is not set to autoload, check it specifically	if ( !isset( $alloptions['siteurl'] ) )		$installed = $wpdb->get_var( "SELECT option_value FROM $wpdb->options WHERE option_name = 'siteurl'" );	else		$installed = $alloptions['siteurl'];	$wpdb->suppress_errors( $suppress );	$installed = !empty( $installed );	wp_cache_set( 'is_blog_installed', $installed );	if ( $installed )		return true;	$suppress = $wpdb->suppress_errors();	$tables = $wpdb->get_col('SHOW TABLES');	$wpdb->suppress_errors( $suppress );	$wp_tables = $wpdb->tables();	// Loop over the WP tables.  If none exist, then scratch install is allowed.	// If one or more exist, suggest table repair since we got here because the options	// table could not be accessed.	foreach ( $wp_tables as $table ) {		// If one of the WP tables exist, then we are in an insane state.		if ( in_array( $table, $tables ) ) {			// The existence of custom user tables shouldn't suggest an insane state or prevent a clean install.			if ( defined( 'CUSTOM_USER_TABLE' ) && CUSTOM_USER_TABLE == $table )				continue;			if ( defined( 'CUSTOM_USER_META_TABLE' ) && CUSTOM_USER_META_TABLE == $table )				continue;			// If visiting repair.php, return true and let it take over.			if ( defined('WP_REPAIRING') )				return true;			// Die with a DB error.			$wpdb->error = sprintf( /*WP_I18N_NO_TABLES*/'One or more database tables are unavailable.  The database may need to be <a href="%s">repaired</a>.'/*/WP_I18N_NO_TABLES*/, 'maint/repair.php?referrer=is_blog_installed' );			dead_db();		}	}	wp_cache_set( 'is_blog_installed', false );	return false;}/** * Retrieve URL with nonce added to URL query. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $actionurl URL to add nonce action * @param string $action Optional. Nonce action name * @return string URL with nonce action added. */function wp_nonce_url( $actionurl, $action = -1 ) {	$actionurl = str_replace( '&amp;', '&', $actionurl );	return esc_html( add_query_arg( '_wpnonce', wp_create_nonce( $action ), $actionurl ) );}/** * Retrieve or display nonce hidden field for forms. * * The nonce field is used to validate that the contents of the form came from * the location on the current site and not somewhere else. The nonce does not * offer absolute protection, but should protect against most cases. It is very * important to use nonce field in forms. * * If you set $echo to true and set $referer to true, then you will need to * retrieve the {@link wp_referer_field() wp referer field}. If you have the * $referer set to true and are echoing the nonce field, it will also echo the * referer field. * * The $action and $name are optional, but if you want to have better security, * it is strongly suggested to set those two parameters. It is easier to just * call the function without any parameters, because validation of the nonce * doesn't require any parameters, but since crackers know what the default is * it won't be difficult for them to find a way around your nonce and cause * damage. * * The input name will be whatever $name value you gave. The input value will be * the nonce creation value. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action Optional. Action name. * @param string $name Optional. Nonce name. * @param bool $referer Optional, default true. Whether to set the referer field for validation. * @param bool $echo Optional, default true. Whether to display or return hidden form field. * @return string Nonce field. */function wp_nonce_field( $action = -1, $name = "_wpnonce", $referer = true , $echo = true ) {	$name = esc_attr( $name );	$nonce_field = '<input type="hidden" id="' . $name . '" name="' . $name . '" value="' . wp_create_nonce( $action ) . '" />';	if ( $echo )		echo $nonce_field;	if ( $referer )		wp_referer_field( $echo );	return $nonce_field;}/** * Retrieve or display referer hidden field for forms. * * The referer link is the current Request URI from the server super global. The * input name is '_wp_http_referer', in case you wanted to check manually. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param bool $echo Whether to echo or return the referer field. * @return string Referer field. */function wp_referer_field( $echo = true ) {	$ref = esc_attr( $_SERVER['REQUEST_URI'] );	$referer_field = '<input type="hidden" name="_wp_http_referer" value="'. $ref . '" />';	if ( $echo )		echo $referer_field;	return $referer_field;}/** * Retrieve or display original referer hidden field for forms. * * The input name is '_wp_original_http_referer' and will be either the same * value of {@link wp_referer_field()}, if that was posted already or it will * be the current page, if it doesn't exist. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param bool $echo Whether to echo the original http referer * @param string $jump_back_to Optional, default is 'current'. Can be 'previous' or page you want to jump back to. * @return string Original referer field. */function wp_original_referer_field( $echo = true, $jump_back_to = 'current' ) {	$jump_back_to = ( 'previous' == $jump_back_to ) ? wp_get_referer() : $_SERVER['REQUEST_URI'];	$ref = ( wp_get_original_referer() ) ? wp_get_original_referer() : $jump_back_to;	$orig_referer_field = '<input type="hidden" name="_wp_original_http_referer" value="' . esc_attr( stripslashes( $ref ) ) . '" />';	if ( $echo )		echo $orig_referer_field;	return $orig_referer_field;}/** * Retrieve referer from '_wp_http_referer', HTTP referer, or current page respectively. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @return string|bool False on failure. Referer URL on success. */function wp_get_referer() {	$ref = '';	if ( ! empty( $_REQUEST['_wp_http_referer'] ) )		$ref = $_REQUEST['_wp_http_referer'];	else if ( ! empty( $_SERVER['HTTP_REFERER'] ) )		$ref = $_SERVER['HTTP_REFERER'];	if ( $ref !== $_SERVER['REQUEST_URI'] )		return $ref;	return false;}/** * Retrieve original referer that was posted, if it exists. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @return string|bool False if no original referer or original referer if set. */function wp_get_original_referer() {	if ( !empty( $_REQUEST['_wp_original_http_referer'] ) )		return $_REQUEST['_wp_original_http_referer'];	return false;}/** * Recursive directory creation based on full path. * * Will attempt to set permissions on folders. * * @since 2.0.1 * * @param string $target Full path to attempt to create. * @return bool Whether the path was created. True if path already exists. */function wp_mkdir_p( $target ) {	// from php.net/mkdir user contributed notes	$target = str_replace( '//', '/', $target );	// safe mode fails with a trailing slash under certain PHP versions.	$target = rtrim($target, '/'); // Use rtrim() instead of untrailingslashit to avoid formatting.php dependency.	if ( empty($target) )		$target = '/';	if ( file_exists( $target ) )		return @is_dir( $target );	// Attempting to create the directory may clutter up our display.	if ( @mkdir( $target ) ) {		$stat = @stat( dirname( $target ) );		$dir_perms = $stat['mode'] & 0007777;  // Get the permission bits.		@chmod( $target, $dir_perms );		return true;	} elseif ( is_dir( dirname( $target ) ) ) {			return false;	}	// If the above failed, attempt to create the parent node, then try again.	if ( ( $target != '/' ) && ( wp_mkdir_p( dirname( $target ) ) ) )		return wp_mkdir_p( $target );	return false;}/** * Test if a give filesystem path is absolute ('/foo/bar', 'c:\windows'). * * @since 2.5.0 * * @param string $path File path * @return bool True if path is absolute, false is not absolute. */function path_is_absolute( $path ) {	// this is definitive if true but fails if $path does not exist or contains a symbolic link	if ( realpath($path) == $path )		return true;	if ( strlen($path) == 0 || $path{0} == '.' )		return false;	// windows allows absolute paths like this	if ( preg_match('#^[a-zA-Z]:\\\\#', $path) )		return true;	// a path starting with / or \ is absolute; anything else is relative	return (bool) preg_match('#^[/\\\\]#', $path);}/** * Join two filesystem paths together (e.g. 'give me $path relative to $base'). * * If the $path is absolute, then it the full path is returned. * * @since 2.5.0 * * @param string $base * @param string $path * @return string The path with the base or absolute path. */function path_join( $base, $path ) {	if ( path_is_absolute($path) )		return $path;	return rtrim($base, '/') . '/' . ltrim($path, '/');}/** * Get an array containing the current upload directory's path and url. * * Checks the 'upload_path' option, which should be from the web root folder, * and if it isn't empty it will be used. If it is empty, then the path will be * 'WP_CONTENT_DIR/uploads'. If the 'UPLOADS' constant is defined, then it will * override the 'upload_path' option and 'WP_CONTENT_DIR/uploads' path. * * The upload URL path is set either by the 'upload_url_path' option or by using * the 'WP_CONTENT_URL' constant and appending '/uploads' to the path. * * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in * the administration settings panel), then the time will be used. The format * will be year first and then month. * * If the path couldn't be created, then an error will be returned with the key * 'error' containing the error message. The error suggests that the parent * directory is not writable by the server. * * On success, the returned array will have many indices: * 'path' - base directory and sub directory or full path to upload directory. * 'url' - base url and sub directory or absolute URL to upload directory. * 'subdir' - sub directory if uploads use year/month folders option is on. * 'basedir' - path without subdir. * 'baseurl' - URL path without subdir. * 'error' - set to false. * * @since 2.0.0 * @uses apply_filters() Calls 'upload_dir' on returned array. * * @param string $time Optional. Time formatted in 'yyyy/mm'. * @return array See above for description. */function wp_upload_dir( $time = null ) {	global $switched;	$siteurl = get_option( 'siteurl' );	$upload_path = get_option( 'upload_path' );	$upload_path = trim($upload_path);	$main_override = defined( 'MULTISITE' ) && is_main_site();	if ( empty($upload_path) ) {		$dir = WP_CONTENT_DIR . '/uploads';	} else {		$dir = $upload_path;		if ( 'wp-content/uploads' == $upload_path ) {			$dir = WP_CONTENT_DIR . '/uploads';		} elseif ( 0 !== strpos($dir, ABSPATH) ) {			// $dir is absolute, $upload_path is (maybe) relative to ABSPATH			$dir = path_join( ABSPATH, $dir );		}	}	if ( !$url = get_option( 'upload_url_path' ) ) {		if ( empty($upload_path) || ( 'wp-content/uploads' == $upload_path ) || ( $upload_path == $dir ) )			$url = WP_CONTENT_URL . '/uploads';		else			$url = trailingslashit( $siteurl ) . $upload_path;	}	if ( defined('UPLOADS') && !$main_override && ( !isset( $switched ) || $switched === false ) ) {		$dir = ABSPATH . UPLOADS;		$url = trailingslashit( $siteurl ) . UPLOADS;	}	if ( is_multisite() && !$main_override && ( !isset( $switched ) || $switched === false ) ) {		if ( defined( 'BLOGUPLOADDIR' ) )			$dir = untrailingslashit(BLOGUPLOADDIR);		$url = str_replace( UPLOADS, 'files', $url );	}	$bdir = $dir;	$burl = $url;	$subdir = '';	if ( get_option( 'uploads_use_yearmonth_folders' ) ) {		// Generate the yearly and monthly dirs		if ( !$time )			$time = current_time( 'mysql' );		$y = substr( $time, 0, 4 );		$m = substr( $time, 5, 2 );		$subdir = "/$y/$m";	}	$dir .= $subdir;	$url .= $subdir;	$uploads = apply_filters( 'upload_dir', array( 'path' => $dir, 'url' => $url, 'subdir' => $subdir, 'basedir' => $bdir, 'baseurl' => $burl, 'error' => false ) );	// Make sure we have an uploads dir	if ( ! wp_mkdir_p( $uploads['path'] ) ) {		$message = sprintf( __( 'Unable to create directory %s. Is its parent directory writable by the server?' ), $uploads['path'] );		return array( 'error' => $message );	}	return $uploads;}/** * Get a filename that is sanitized and unique for the given directory. * * If the filename is not unique, then a number will be added to the filename * before the extension, and will continue adding numbers until the filename is * unique. * * The callback must accept two parameters, the first one is the directory and * the second is the filename. The callback must be a function. * * @since 2.5 * * @param string $dir * @param string $filename * @param string $unique_filename_callback Function name, must be a function. * @return string New filename, if given wasn't unique. */function wp_unique_filename( $dir, $filename, $unique_filename_callback = null ) {	// sanitize the file name before we begin processing	$filename = sanitize_file_name($filename);	// separate the filename into a name and extension	$info = pathinfo($filename);	$ext = !empty($info['extension']) ? '.' . $info['extension'] : '';	$name = basename($filename, $ext);	// edge case: if file is named '.ext', treat as an empty name	if ( $name === $ext )		$name = '';	// Increment the file number until we have a unique file to save in $dir. Use $override['unique_filename_callback'] if supplied.	if ( $unique_filename_callback && is_callable( $unique_filename_callback ) ) {		$filename = $unique_filename_callback( $dir, $name );	} else {		$number = '';		// change '.ext' to lower case		if ( $ext && strtolower($ext) != $ext ) {			$ext2 = strtolower($ext);			$filename2 = preg_replace( '|' . preg_quote($ext) . '$|', $ext2, $filename );			// check for both lower and upper case extension or image sub-sizes may be overwritten			while ( file_exists($dir . "/$filename") || file_exists($dir . "/$filename2") ) {				$new_number = $number + 1;				$filename = str_replace( "$number$ext", "$new_number$ext", $filename );				$filename2 = str_replace( "$number$ext2", "$new_number$ext2", $filename2 );				$number = $new_number;			}			return $filename2;		}		while ( file_exists( $dir . "/$filename" ) ) {			if ( '' == "$number$ext" )				$filename = $filename . ++$number . $ext;			else				$filename = str_replace( "$number$ext", ++$number . $ext, $filename );		}	}	return $filename;}/** * Create a file in the upload folder with given content. * * If there is an error, then the key 'error' will exist with the error message. * If success, then the key 'file' will have the unique file path, the 'url' key * will have the link to the new file. and the 'error' key will be set to false. * * This function will not move an uploaded file to the upload folder. It will * create a new file with the content in $bits parameter. If you move the upload * file, read the content of the uploaded file, and then you can give the * filename and content to this function, which will add it to the upload * folder. * * The permissions will be set on the new file automatically by this function. * * @since 2.0.0 * * @param string $name * @param null $deprecated Never used. Set to null. * @param mixed $bits File content * @param string $time Optional. Time formatted in 'yyyy/mm'. * @return array */function wp_upload_bits( $name, $deprecated, $bits, $time = null ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.0' );	if ( empty( $name ) )		return array( 'error' => __( 'Empty filename' ) );	$wp_filetype = wp_check_filetype( $name );	if ( !$wp_filetype['ext'] )		return array( 'error' => __( 'Invalid file type' ) );	$upload = wp_upload_dir( $time );	if ( $upload['error'] !== false )		return $upload;	$upload_bits_error = apply_filters( 'wp_upload_bits', array( 'name' => $name, 'bits' => $bits, 'time' => $time ) );	if ( !is_array( $upload_bits_error ) ) {		$upload[ 'error' ] = $upload_bits_error;		return $upload;	}	$filename = wp_unique_filename( $upload['path'], $name );	$new_file = $upload['path'] . "/$filename";	if ( ! wp_mkdir_p( dirname( $new_file ) ) ) {		$message = sprintf( __( 'Unable to create directory %s. Is its parent directory writable by the server?' ), dirname( $new_file ) );		return array( 'error' => $message );	}	$ifp = @ fopen( $new_file, 'wb' );	if ( ! $ifp )		return array( 'error' => sprintf( __( 'Could not write file %s' ), $new_file ) );	@fwrite( $ifp, $bits );	fclose( $ifp );	clearstatcache();	// Set correct file permissions	$stat = @ stat( dirname( $new_file ) );	$perms = $stat['mode'] & 0007777;	$perms = $perms & 0000666;	@ chmod( $new_file, $perms );	clearstatcache();	// Compute the URL	$url = $upload['url'] . "/$filename";	return array( 'file' => $new_file, 'url' => $url, 'error' => false );}/** * Retrieve the file type based on the extension name. * * @package WordPress * @since 2.5.0 * @uses apply_filters() Calls 'ext2type' hook on default supported types. * * @param string $ext The extension to search. * @return string|null The file type, example: audio, video, document, spreadsheet, etc. Null if not found. */function wp_ext2type( $ext ) {	$ext2type = apply_filters( 'ext2type', array(		'audio'       => array( 'aac', 'ac3',  'aif',  'aiff', 'm3a',  'm4a',   'm4b', 'mka', 'mp1', 'mp2',  'mp3', 'ogg', 'oga', 'ram', 'wav', 'wma' ),		'video'       => array( 'asf', 'avi',  'divx', 'dv',   'flv',  'm4v',   'mkv', 'mov', 'mp4', 'mpeg', 'mpg', 'mpv', 'ogm', 'ogv', 'qt',  'rm', 'vob', 'wmv' ),		'document'    => array( 'doc', 'docx', 'docm', 'dotm', 'odt',  'pages', 'pdf', 'rtf', 'wp',  'wpd' ),		'spreadsheet' => array( 'numbers',     'ods',  'xls',  'xlsx', 'xlsb',  'xlsm' ),		'interactive' => array( 'key', 'ppt',  'pptx', 'pptm', 'odp',  'swf' ),		'text'        => array( 'asc', 'csv',  'tsv',  'txt' ),		'archive'     => array( 'bz2', 'cab',  'dmg',  'gz',   'rar',  'sea',   'sit', 'sqx', 'tar', 'tgz',  'zip' ),		'code'        => array( 'css', 'htm',  'html', 'php',  'js' ),	));	foreach ( $ext2type as $type => $exts )		if ( in_array( $ext, $exts ) )			return $type;}/** * Retrieve the file type from the file name. * * You can optionally define the mime array, if needed. * * @since 2.0.4 * * @param string $filename File name or path. * @param array $mimes Optional. Key is the file extension with value as the mime type. * @return array Values with extension first and mime type. */function wp_check_filetype( $filename, $mimes = null ) {	if ( empty($mimes) )		$mimes = get_allowed_mime_types();	$type = false;	$ext = false;	foreach ( $mimes as $ext_preg => $mime_match ) {		$ext_preg = '!\.(' . $ext_preg . ')$!i';		if ( preg_match( $ext_preg, $filename, $ext_matches ) ) {			$type = $mime_match;			$ext = $ext_matches[1];			break;		}	}	return compact( 'ext', 'type' );}/** * Attempt to determine the real file type of a file. * If unable to, the file name extension will be used to determine type. * * If it's determined that the extension does not match the file's real type, * then the "proper_filename" value will be set with a proper filename and extension. * * Currently this function only supports validating images known to getimagesize(). * * @since 3.0.0 * * @param string $file Full path to the image. * @param string $filename The filename of the image (may differ from $file due to $file being in a tmp directory) * @param array $mimes Optional. Key is the file extension with value as the mime type. * @return array Values for the extension, MIME, and either a corrected filename or false if original $filename is valid */function wp_check_filetype_and_ext( $file, $filename, $mimes = null ) {	$proper_filename = false;	// Do basic extension validation and MIME mapping	$wp_filetype = wp_check_filetype( $filename, $mimes );	extract( $wp_filetype );	// We can't do any further validation without a file to work with	if ( ! file_exists( $file ) )		return compact( 'ext', 'type', 'proper_filename' );	// We're able to validate images using GD	if ( $type && 0 === strpos( $type, 'image/' ) && function_exists('getimagesize') ) {		// Attempt to figure out what type of image it actually is		$imgstats = @getimagesize( $file );		// If getimagesize() knows what kind of image it really is and if the real MIME doesn't match the claimed MIME		if ( !empty($imgstats['mime']) && $imgstats['mime'] != $type ) {			// This is a simplified array of MIMEs that getimagesize() can detect and their extensions			// You shouldn't need to use this filter, but it's here just in case			$mime_to_ext = apply_filters( 'getimagesize_mimes_to_exts', array(				'image/jpeg' => 'jpg',				'image/png'  => 'png',				'image/gif'  => 'gif',				'image/bmp'  => 'bmp',				'image/tiff' => 'tif',			) );			// Replace whatever is after the last period in the filename with the correct extension			if ( ! empty( $mime_to_ext[ $imgstats['mime'] ] ) ) {				$filename_parts = explode( '.', $filename );				array_pop( $filename_parts );				$filename_parts[] = $mime_to_ext[ $imgstats['mime'] ];				$new_filename = implode( '.', $filename_parts );				if ( $new_filename != $filename )					$proper_filename = $new_filename; // Mark that it changed				// Redefine the extension / MIME				$wp_filetype = wp_check_filetype( $new_filename, $mimes );				extract( $wp_filetype );			}		}	}	// Let plugins try and validate other types of files	// Should return an array in the style of array( 'ext' => $ext, 'type' => $type, 'proper_filename' => $proper_filename )	return apply_filters( 'wp_check_filetype_and_ext', compact( 'ext', 'type', 'proper_filename' ), $file, $filename, $mimes );}/** * Retrieve list of allowed mime types and file extensions. * * @since 2.8.6 * * @return array Array of mime types keyed by the file extension regex corresponding to those types. */function get_allowed_mime_types() {	static $mimes = false;	if ( !$mimes ) {		// Accepted MIME types are set here as PCRE unless provided.		$mimes = apply_filters( 'upload_mimes', array(		'jpg|jpeg|jpe' => 'image/jpeg',		'gif' => 'image/gif',		'png' => 'image/png',		'bmp' => 'image/bmp',		'tif|tiff' => 'image/tiff',		'ico' => 'image/x-icon',		'asf|asx|wax|wmv|wmx' => 'video/asf',		'avi' => 'video/avi',		'divx' => 'video/divx',		'flv' => 'video/x-flv',		'mov|qt' => 'video/quicktime',		'mpeg|mpg|mpe' => 'video/mpeg',		'txt|asc|c|cc|h' => 'text/plain',		'csv' => 'text/csv',		'tsv' => 'text/tab-separated-values',		'rtx' => 'text/richtext',		'css' => 'text/css',		'htm|html' => 'text/html',		'mp3|m4a|m4b' => 'audio/mpeg',		'mp4|m4v' => 'video/mp4',		'ra|ram' => 'audio/x-realaudio',		'wav' => 'audio/wav',		'ogg|oga' => 'audio/ogg',		'ogv' => 'video/ogg',		'mid|midi' => 'audio/midi',		'wma' => 'audio/wma',		'mka' => 'audio/x-matroska',		'mkv' => 'video/x-matroska',		'rtf' => 'application/rtf',		'js' => 'application/javascript',		'pdf' => 'application/pdf',		'doc|docx' => 'application/msword',		'pot|pps|ppt|pptx|ppam|pptm|sldm|ppsm|potm' => 'application/vnd.ms-powerpoint',		'wri' => 'application/vnd.ms-write',		'xla|xls|xlsx|xlt|xlw|xlam|xlsb|xlsm|xltm' => 'application/vnd.ms-excel',		'mdb' => 'application/vnd.ms-access',		'mpp' => 'application/vnd.ms-project',		'docm|dotm' => 'application/vnd.ms-word',		'pptx|sldx|ppsx|potx' => 'application/vnd.openxmlformats-officedocument.presentationml',		'xlsx|xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml',		'docx|dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml',		'onetoc|onetoc2|onetmp|onepkg' => 'application/onenote',		'swf' => 'application/x-shockwave-flash',		'class' => 'application/java',		'tar' => 'application/x-tar',		'zip' => 'application/zip',		'gz|gzip' => 'application/x-gzip',		'exe' => 'application/x-msdownload',		// openoffice formats		'odt' => 'application/vnd.oasis.opendocument.text',		'odp' => 'application/vnd.oasis.opendocument.presentation',		'ods' => 'application/vnd.oasis.opendocument.spreadsheet',		'odg' => 'application/vnd.oasis.opendocument.graphics',		'odc' => 'application/vnd.oasis.opendocument.chart',		'odb' => 'application/vnd.oasis.opendocument.database',		'odf' => 'application/vnd.oasis.opendocument.formula',		// wordperfect formats		'wp|wpd' => 'application/wordperfect',		) );	}	return $mimes;}/** * Retrieve nonce action "Are you sure" message. * * The action is split by verb and noun. The action format is as follows: * verb-action_extra. The verb is before the first dash and has the format of * letters and no spaces and numbers. The noun is after the dash and before the * underscore, if an underscore exists. The noun is also only letters. * * The filter will be called for any action, which is not defined by WordPress. * You may use the filter for your plugin to explain nonce actions to the user, * when they get the "Are you sure?" message. The filter is in the format of * 'explain_nonce_$verb-$noun' with the $verb replaced by the found verb and the * $noun replaced by the found noun. The two parameters that are given to the * hook are the localized "Are you sure you want to do this?" message with the * extra text (the text after the underscore). * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action Nonce action. * @return string Are you sure message. */function wp_explain_nonce( $action ) {	if ( $action !== -1 && preg_match( '/([a-z]+)-([a-z]+)(_(.+))?/', $action, $matches ) ) {		$verb = $matches[1];		$noun = $matches[2];		$trans = array();		$trans['update']['attachment'] = array( __( 'Your attempt to edit this attachment: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['add']['category']      = array( __( 'Your attempt to add this category has failed.' ), false );		$trans['delete']['category']   = array( __( 'Your attempt to delete this category: &#8220;%s&#8221; has failed.' ), 'get_cat_name' );		$trans['update']['category']   = array( __( 'Your attempt to edit this category: &#8220;%s&#8221; has failed.' ), 'get_cat_name' );		$trans['delete']['comment']    = array( __( 'Your attempt to delete this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['unapprove']['comment'] = array( __( 'Your attempt to unapprove this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['approve']['comment']   = array( __( 'Your attempt to approve this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['update']['comment']    = array( __( 'Your attempt to edit this comment: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['bulk']['comments']     = array( __( 'Your attempt to bulk modify comments has failed.' ), false );		$trans['moderate']['comments'] = array( __( 'Your attempt to moderate comments has failed.' ), false );		$trans['add']['bookmark']      = array( __( 'Your attempt to add this link has failed.' ), false );		$trans['delete']['bookmark']   = array( __( 'Your attempt to delete this link: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['update']['bookmark']   = array( __( 'Your attempt to edit this link: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['bulk']['bookmarks']    = array( __( 'Your attempt to bulk modify links has failed.' ), false );		$trans['add']['page']          = array( __( 'Your attempt to add this page has failed.' ), false );		$trans['delete']['page']       = array( __( 'Your attempt to delete this page: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['update']['page']       = array( __( 'Your attempt to edit this page: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['edit']['plugin']       = array( __( 'Your attempt to edit this plugin file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['activate']['plugin']   = array( __( 'Your attempt to activate this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['deactivate']['plugin'] = array( __( 'Your attempt to deactivate this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['upgrade']['plugin']    = array( __( 'Your attempt to upgrade this plugin: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['add']['post']          = array( __( 'Your attempt to add this post has failed.' ), false );		$trans['delete']['post']       = array( __( 'Your attempt to delete this post: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['update']['post']       = array( __( 'Your attempt to edit this post: &#8220;%s&#8221; has failed.' ), 'get_the_title' );		$trans['add']['user']          = array( __( 'Your attempt to add this user has failed.' ), false );		$trans['delete']['users']      = array( __( 'Your attempt to delete users has failed.' ), false );		$trans['bulk']['users']        = array( __( 'Your attempt to bulk modify users has failed.' ), false );		$trans['update']['user']       = array( __( 'Your attempt to edit this user: &#8220;%s&#8221; has failed.' ), 'get_the_author_meta', 'display_name' );		$trans['update']['profile']    = array( __( 'Your attempt to modify the profile for: &#8220;%s&#8221; has failed.' ), 'get_the_author_meta', 'display_name' );		$trans['update']['options']    = array( __( 'Your attempt to edit your settings has failed.' ), false );		$trans['update']['permalink']  = array( __( 'Your attempt to change your permalink structure to: %s has failed.' ), 'use_id' );		$trans['edit']['file']         = array( __( 'Your attempt to edit this file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['edit']['theme']        = array( __( 'Your attempt to edit this theme file: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['switch']['theme']      = array( __( 'Your attempt to switch to this theme: &#8220;%s&#8221; has failed.' ), 'use_id' );		$trans['log']['out']           = array( sprintf( __( 'You are attempting to log out of %s' ), get_bloginfo( 'sitename' ) ), false );		if ( isset( $trans[$verb][$noun] ) ) {			if ( !empty( $trans[$verb][$noun][1] ) ) {				$lookup = $trans[$verb][$noun][1];				if ( isset($trans[$verb][$noun][2]) )					$lookup_value = $trans[$verb][$noun][2];				$object = $matches[4];				if ( 'use_id' != $lookup ) {					if ( isset( $lookup_value ) )						$object = call_user_func( $lookup, $lookup_value, $object );					else						$object = call_user_func( $lookup, $object );				}				return sprintf( $trans[$verb][$noun][0], esc_html($object) );			} else {				return $trans[$verb][$noun][0];			}		}		return apply_filters( 'explain_nonce_' . $verb . '-' . $noun, __( 'Are you sure you want to do this?' ), isset($matches[4]) ? $matches[4] : '' );	} else {		return apply_filters( 'explain_nonce_' . $action, __( 'Are you sure you want to do this?' ) );	}}/** * Display "Are You Sure" message to confirm the action being taken. * * If the action has the nonce explain message, then it will be displayed along * with the "Are you sure?" message. * * @package WordPress * @subpackage Security * @since 2.0.4 * * @param string $action The nonce action. */function wp_nonce_ays( $action ) {	$title = __( 'WordPress Failure Notice' );	$html = esc_html( wp_explain_nonce( $action ) );	if ( 'log-out' == $action )		$html .= "</p><p>" . sprintf( __( "Do you really want to <a href='%s'>log out</a>?"), wp_logout_url() );	elseif ( wp_get_referer() )		$html .= "</p><p><a href='" . esc_url( remove_query_arg( 'updated', wp_get_referer() ) ) . "'>" . __( 'Please try again.' ) . "</a>";	wp_die( $html, $title, array('response' => 403) );}/** * Kill WordPress execution and display HTML message with error message. * * This function complements the die() PHP function. The difference is that * HTML will be displayed to the user. It is recommended to use this function * only, when the execution should not continue any further. It is not * recommended to call this function very often and try to handle as many errors * as possible siliently. * * @since 2.0.4 * * @param string $message Error message. * @param string $title Error title. * @param string|array $args Optional arguements to control behaviour. */function wp_die( $message, $title = '', $args = array() ) {	if ( function_exists( 'apply_filters' ) ) {		$function = apply_filters( 'wp_die_handler', '_default_wp_die_handler');	}else {		$function = '_default_wp_die_handler';	}	call_user_func( $function, $message, $title, $args );}/** * Kill WordPress execution and display HTML message with error message. * * This is the default handler for wp_die if you want a custom one for your * site then you can overload using the wp_die_handler filter in wp_die * * @since 3.0.0 * @access private * * @param string $message Error message. * @param string $title Error title. * @param string|array $args Optional arguements to control behaviour. */function _default_wp_die_handler( $message, $title = '', $args = array() ) {	$defaults = array( 'response' => 500 );	$r = wp_parse_args($args, $defaults);	$have_gettext = function_exists('__');	if ( function_exists( 'is_wp_error' ) && is_wp_error( $message ) ) {		if ( empty( $title ) ) {			$error_data = $message->get_error_data();			if ( is_array( $error_data ) && isset( $error_data['title'] ) )				$title = $error_data['title'];		}		$errors = $message->get_error_messages();		switch ( count( $errors ) ) :		case 0 :			$message = '';			break;		case 1 :			$message = "<p>{$errors[0]}</p>";			break;		default :			$message = "<ul>\n\t\t<li>" . join( "</li>\n\t\t<li>", $errors ) . "</li>\n\t</ul>";			break;		endswitch;	} elseif ( is_string( $message ) ) {		$message = "<p>$message</p>";	}	if ( isset( $r['back_link'] ) && $r['back_link'] ) {		$back_text = $have_gettext? __('&laquo; Back') : '&laquo; Back';		$message .= "\n<p><a href='javascript:history.back()'>$back_text</p>";	}	if ( defined( 'WP_SITEURL' ) && '' != WP_SITEURL )		$admin_dir = WP_SITEURL . '/wp-admin/';	elseif ( function_exists( 'get_bloginfo' ) && '' != get_bloginfo( 'wpurl' ) )		$admin_dir = get_bloginfo( 'wpurl' ) . '/wp-admin/';	elseif ( strpos( $_SERVER['PHP_SELF'], 'wp-admin' ) !== false )		$admin_dir = '';	else		$admin_dir = 'wp-admin/';	if ( !function_exists( 'did_action' ) || !did_action( 'admin_head' ) ) :	if ( !headers_sent() ) {		status_header( $r['response'] );		nocache_headers();		header( 'Content-Type: text/html; charset=utf-8' );	}	if ( empty($title) )		$title = $have_gettext ? __('WordPress &rsaquo; Error') : 'WordPress &rsaquo; Error';	$text_direction = 'ltr';	if ( isset($r['text_direction']) && 'rtl' == $r['text_direction'] )		$text_direction = 'rtl';	elseif ( function_exists( 'is_rtl' ) && is_rtl() )		$text_direction = 'rtl';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><!-- Ticket #11289, IE bug fix: always pad the error page with enough characters such that it is greater than 512 bytes, even after gzip compression abcdefghijklmnopqrstuvwxyz1234567890aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz11223344556677889900abacbcbdcdcededfefegfgfhghgihihjijikjkjlklkmlmlnmnmononpopoqpqprqrqsrsrtstsubcbcdcdedefefgfabcadefbghicjkldmnoepqrfstugvwxhyz1i234j567k890laabmbccnddeoeffpgghqhiirjjksklltmmnunoovppqwqrrxsstytuuzvvw0wxx1yyz2z113223434455666777889890091abc2def3ghi4jkl5mno6pqr7stu8vwx9yz11aab2bcc3dd4ee5ff6gg7hh8ii9j0jk1kl2lmm3nnoo4p5pq6qrr7ss8tt9uuvv0wwx1x2yyzz13aba4cbcb5dcdc6dedfef8egf9gfh0ghg1ihi2hji3jik4jkj5lkl6kml7mln8mnm9ono --><html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php echo $title ?></title>	<link rel="stylesheet" href="<?php echo $admin_dir; ?>css/install.css" type="text/css" /><?phpif ( 'rtl' == $text_direction ) : ?>	<link rel="stylesheet" href="<?php echo $admin_dir; ?>css/install-rtl.css" type="text/css" /><?php endif; ?></head><body id="error-page"><?php endif; ?>	<?php echo $message; ?></body></html><?php	die();}/** * Retrieve the WordPress home page URL. * * If the constant named 'WP_HOME' exists, then it willl be used and returned by * the function. This can be used to counter the redirection on your local * development environment. * * @access private * @package WordPress * @since 2.2.0 * * @param string $url URL for the home location * @return string Homepage location. */function _config_wp_home( $url = '' ) {	if ( defined( 'WP_HOME' ) )		return WP_HOME;	return $url;}/** * Retrieve the WordPress site URL. * * If the constant named 'WP_SITEURL' is defined, then the value in that * constant will always be returned. This can be used for debugging a site on * your localhost while not having to change the database to your URL. * * @access private * @package WordPress * @since 2.2.0 * * @param string $url URL to set the WordPress site location. * @return string The WordPress Site URL */function _config_wp_siteurl( $url = '' ) {	if ( defined( 'WP_SITEURL' ) )		return WP_SITEURL;	return $url;}/** * Set the localized direction for MCE plugin. * * Will only set the direction to 'rtl', if the WordPress locale has the text * direction set to 'rtl'. * * Fills in the 'directionality', 'plugins', and 'theme_advanced_button1' array * keys. These keys are then returned in the $input array. * * @access private * @package WordPress * @subpackage MCE * @since 2.1.0 * * @param array $input MCE plugin array. * @return array Direction set for 'rtl', if needed by locale. */function _mce_set_direction( $input ) {	if ( is_rtl() ) {		$input['directionality'] = 'rtl';		$input['plugins'] .= ',directionality';		$input['theme_advanced_buttons1'] .= ',ltr';	}	return $input;}/** * Convert smiley code to the icon graphic file equivalent. * * You can turn off smilies, by going to the write setting screen and unchecking * the box, or by setting 'use_smilies' option to false or removing the option. * * Plugins may override the default smiley list by setting the $wpsmiliestrans * to an array, with the key the code the blogger types in and the value the * image file. * * The $wp_smiliessearch global is for the regular expression and is set each * time the function is called. * * The full list of smilies can be found in the function and won't be listed in * the description. Probably should create a Codex page for it, so that it is * available. * * @global array $wpsmiliestrans * @global array $wp_smiliessearch * @since 2.2.0 */function smilies_init() {	global $wpsmiliestrans, $wp_smiliessearch;	// don't bother setting up smilies if they are disabled	if ( !get_option( 'use_smilies' ) )		return;	if ( !isset( $wpsmiliestrans ) ) {		$wpsmiliestrans = array(		':mrgreen:' => 'icon_mrgreen.gif',		':neutral:' => 'icon_neutral.gif',		':twisted:' => 'icon_twisted.gif',		  ':arrow:' => 'icon_arrow.gif',		  ':shock:' => 'icon_eek.gif',		  ':smile:' => 'icon_smile.gif',		    ':???:' => 'icon_confused.gif',		   ':cool:' => 'icon_cool.gif',		   ':evil:' => 'icon_evil.gif',		   ':grin:' => 'icon_biggrin.gif',		   ':idea:' => 'icon_idea.gif',		   ':oops:' => 'icon_redface.gif',		   ':razz:' => 'icon_razz.gif',		   ':roll:' => 'icon_rolleyes.gif',		   ':wink:' => 'icon_wink.gif',		    ':cry:' => 'icon_cry.gif',		    ':eek:' => 'icon_surprised.gif',		    ':lol:' => 'icon_lol.gif',		    ':mad:' => 'icon_mad.gif',		    ':sad:' => 'icon_sad.gif',		      '8-)' => 'icon_cool.gif',		      '8-O' => 'icon_eek.gif',		      ':-(' => 'icon_sad.gif',		      ':-)' => 'icon_smile.gif',		      ':-?' => 'icon_confused.gif',		      ':-D' => 'icon_biggrin.gif',		      ':-P' => 'icon_razz.gif',		      ':-o' => 'icon_surprised.gif',		      ':-x' => 'icon_mad.gif',		      ':-|' => 'icon_neutral.gif',		      ';-)' => 'icon_wink.gif',		       '8)' => 'icon_cool.gif',		       '8O' => 'icon_eek.gif',		       ':(' => 'icon_sad.gif',		       ':)' => 'icon_smile.gif',		       ':?' => 'icon_confused.gif',		       ':D' => 'icon_biggrin.gif',		       ':P' => 'icon_razz.gif',		       ':o' => 'icon_surprised.gif',		       ':x' => 'icon_mad.gif',		       ':|' => 'icon_neutral.gif',		       ';)' => 'icon_wink.gif',		      ':!:' => 'icon_exclaim.gif',		      ':?:' => 'icon_question.gif',		);	}	if (count($wpsmiliestrans) == 0) {		return;	}	/*	 * NOTE: we sort the smilies in reverse key order. This is to make sure	 * we match the longest possible smilie (:???: vs :?) as the regular	 * expression used below is first-match	 */	krsort($wpsmiliestrans);	$wp_smiliessearch = '/(?:\s|^)';	$subchar = '';	foreach ( (array) $wpsmiliestrans as $smiley => $img ) {		$firstchar = substr($smiley, 0, 1);		$rest = substr($smiley, 1);		// new subpattern?		if ($firstchar != $subchar) {			if ($subchar != '') {				$wp_smiliessearch .= ')|(?:\s|^)';			}			$subchar = $firstchar;			$wp_smiliessearch .= preg_quote($firstchar, '/') . '(?:';		} else {			$wp_smiliessearch .= '|';		}		$wp_smiliessearch .= preg_quote($rest, '/');	}	$wp_smiliessearch .= ')(?:\s|$)/m';}/** * Merge user defined arguments into defaults array. * * This function is used throughout WordPress to allow for both string or array * to be merged into another array. * * @since 2.2.0 * * @param string|array $args Value to merge with $defaults * @param array $defaults Array that serves as the defaults. * @return array Merged user defined values with defaults. */function wp_parse_args( $args, $defaults = '' ) {	if ( is_object( $args ) )		$r = get_object_vars( $args );	elseif ( is_array( $args ) )		$r =& $args;	else		wp_parse_str( $args, $r );	if ( is_array( $defaults ) )		return array_merge( $defaults, $r );	return $r;}/** * Clean up an array, comma- or space-separated list of IDs * * @since 3.0.0 * * @param array|string $list * @return array Sanitized array of IDs */function wp_parse_id_list( $list ) {	if ( !is_array($list) )		$list = preg_split('/[\s,]+/', $list);	return array_unique(array_map('absint', $list));}/** * Filters a list of objects, based on a set of key => value arguments * * @since 3.0.0 * * @param array $list An array of objects to filter * @param array $args An array of key => value arguments to match against each object * @param string $operator The logical operation to perform. 'or' means only one element *	from the array needs to match; 'and' means all elements must match. The default is 'and'. * @param bool|string $field A field from the object to place instead of the entire object * @return array A list of objects or object fields */function wp_filter_object_list( $list, $args = array(), $operator = 'and', $field = false ) {	if ( !is_array($list) )		return array();	if ( empty($args) )		$args = array();	if ( empty($args) && !$field )		return $list;	// nothing to do	$count = count($args);	$filtered = array();	foreach ( $list as $key => $obj ) {		$matched = count(array_intersect_assoc(get_object_vars($obj), $args));		if ( ('and' == $operator && $matched == $count) || ('or' == $operator && $matched <= $count) ) {			if ( $field )				$filtered[] = $obj->$field;			else				$filtered[$key] = $obj;		}	}	return $filtered;}/** * Determines if default embed handlers should be loaded. * * Checks to make sure that the embeds library hasn't already been loaded. If * it hasn't, then it will load the embeds library. * * @since 2.9.0 */function wp_maybe_load_embeds() {	if ( ! apply_filters('load_default_embeds', true) )		return;	require_once( ABSPATH . WPINC . '/default-embeds.php' );}/** * Determines if Widgets library should be loaded. * * Checks to make sure that the widgets library hasn't already been loaded. If * it hasn't, then it will load the widgets library and run an action hook. * * @since 2.2.0 * @uses add_action() Calls '_admin_menu' hook with 'wp_widgets_add_menu' value. */function wp_maybe_load_widgets() {	if ( ! apply_filters('load_default_widgets', true) )		return;	require_once( ABSPATH . WPINC . '/default-widgets.php' );	add_action( '_admin_menu', 'wp_widgets_add_menu' );}/** * Append the Widgets menu to the themes main menu. * * @since 2.2.0 * @uses $submenu The administration submenu list. */function wp_widgets_add_menu() {	global $submenu;	$submenu['themes.php'][7] = array( __( 'Widgets' ), 'edit_theme_options', 'widgets.php' );	ksort( $submenu['themes.php'], SORT_NUMERIC );}/** * Flush all output buffers for PHP 5.2. * * Make sure all output buffers are flushed before our singletons our destroyed. * * @since 2.2.0 */function wp_ob_end_flush_all() {	$levels = ob_get_level();	for ($i=0; $i<$levels; $i++)		ob_end_flush();}/** * Load the correct database class file. * * This function is used to load the database class file either at runtime or by * wp-admin/setup-config.php We must globalise $wpdb to ensure that it is * defined globally by the inline code in wp-db.php. * * @since 2.5.0 * @global $wpdb WordPress Database Object */function require_wp_db() {	global $wpdb;	if ( file_exists( WP_CONTENT_DIR . '/db.php' ) )		require_once( WP_CONTENT_DIR . '/db.php' );	else		require_once( ABSPATH . WPINC . '/wp-db.php' );}/** * Load custom DB error or display WordPress DB error. * * If a file exists in the wp-content directory named db-error.php, then it will * be loaded instead of displaying the WordPress DB error. If it is not found, * then the WordPress DB error will be displayed instead. * * The WordPress DB error sets the HTTP status header to 500 to try to prevent * search engines from caching the message. Custom DB messages should do the * same. * * This function was backported to the the WordPress 2.3.2, but originally was * added in WordPress 2.5.0. * * @since 2.3.2 * @uses $wpdb */function dead_db() {	global $wpdb;	// Load custom DB error template, if present.	if ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {		require_once( WP_CONTENT_DIR . '/db-error.php' );		die();	}	// If installing or in the admin, provide the verbose message.	if ( defined('WP_INSTALLING') || defined('WP_ADMIN') )		wp_die($wpdb->error);	// Otherwise, be terse.	status_header( 500 );	nocache_headers();	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Database Error</title></head><body>	<h1>Error establishing a database connection</h1></body></html><?php	die();}/** * Converts value to nonnegative integer. * * @since 2.5.0 * * @param mixed $maybeint Data you wish to have convered to an nonnegative integer * @return int An nonnegative integer */function absint( $maybeint ) {	return abs( intval( $maybeint ) );}/** * Determines if the blog can be accessed over SSL. * * Determines if blog can be accessed over SSL by using cURL to access the site * using the https in the siteurl. Requires cURL extension to work correctly. * * @since 2.5.0 * * @param string $url * @return bool Whether SSL access is available */function url_is_accessable_via_ssl($url){	if (in_array('curl', get_loaded_extensions())) {		$ssl = preg_replace( '/^http:\/\//', 'https://',  $url );		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $ssl);		curl_setopt($ch, CURLOPT_FAILONERROR, true);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);		curl_exec($ch);		$status = curl_getinfo($ch, CURLINFO_HTTP_CODE);		curl_close ($ch);		if ($status == 200 || $status == 401) {			return true;		}	}	return false;}/** * Secure URL, if available or the given URL. * * @since 2.5.0 * * @param string $url Complete URL path with transport. * @return string Secure or regular URL path. */function atom_service_url_filter($url){	if ( url_is_accessable_via_ssl($url) )		return preg_replace( '/^http:\/\//', 'https://',  $url );	else		return $url;}/** * Marks a function as deprecated and informs when it has been used. * * There is a hook deprecated_function_run that will be called that can be used * to get the backtrace up to what file and function called the deprecated * function. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * This function is to be used in every function in depreceated.php * * @package WordPress * @subpackage Debug * @since 2.5.0 * @access private * * @uses do_action() Calls 'deprecated_function_run' and passes the function name, what to use instead, *   and the version the function was deprecated in. * @uses apply_filters() Calls 'deprecated_function_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $function The function that was called * @param string $version The version of WordPress that deprecated the function * @param string $replacement Optional. The function that should have been called */function _deprecated_function( $function, $version, $replacement=null ) {	do_action( 'deprecated_function_run', $function, $replacement, $version );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_function_trigger_error', true ) ) {		if ( ! is_null($replacement) )			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $function, $version, $replacement ) );		else			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );	}}/** * Marks a file as deprecated and informs when it has been used. * * There is a hook deprecated_file_included that will be called that can be used * to get the backtrace up to what file and function included the deprecated * file. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * This function is to be used in every file that is depreceated * * @package WordPress * @subpackage Debug * @since 2.5.0 * @access private * * @uses do_action() Calls 'deprecated_file_included' and passes the file name, what to use instead, *   the version in which the file was deprecated, and any message regarding the change. * @uses apply_filters() Calls 'deprecated_file_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $file The file that was included * @param string $version The version of WordPress that deprecated the file * @param string $replacement Optional. The file that should have been included based on ABSPATH * @param string $message Optional. A message regarding the change */function _deprecated_file( $file, $version, $replacement = null, $message = '' ) {	do_action( 'deprecated_file_included', $file, $replacement, $version, $message );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_file_trigger_error', true ) ) {		$message = empty( $message ) ? '' : ' ' . $message;		if ( ! is_null( $replacement ) )			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $file, $version, $replacement ) . $message );		else			trigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $file, $version ) . $message );	}}/** * Marks a function argument as deprecated and informs when it has been used. * * This function is to be used whenever a deprecated function argument is used. * Before this function is called, the argument must be checked for whether it was * used by comparing it to its default value or evaluating whether it is empty. * For example: * <code> * if ( !empty($deprecated) ) * 	_deprecated_argument( __FUNCTION__, '3.0' ); * </code> * * There is a hook deprecated_argument_run that will be called that can be used * to get the backtrace up to what file and function used the deprecated * argument. * * The current behavior is to trigger an user error if WP_DEBUG is true. * * @package WordPress * @subpackage Debug * @since 3.0.0 * @access private * * @uses do_action() Calls 'deprecated_argument_run' and passes the function name, a message on the change, *   and the version in which the argument was deprecated. * @uses apply_filters() Calls 'deprecated_argument_trigger_error' and expects boolean value of true to do *   trigger or false to not trigger error. * * @param string $function The function that was called * @param string $version The version of WordPress that deprecated the argument used * @param string $message Optional. A message regarding the change. */function _deprecated_argument( $function, $version, $message = null ) {	do_action( 'deprecated_argument_run', $function, $message, $version );	// Allow plugin to filter the output error trigger	if ( WP_DEBUG && apply_filters( 'deprecated_argument_trigger_error', true ) ) {		if ( ! is_null( $message ) )			trigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s'), $function, $version, $message ) );		else			trigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );	}}/** * Is the server running earlier than 1.5.0 version of lighttpd * * @since 2.5.0 * * @return bool Whether the server is running lighttpd < 1.5.0 */function is_lighttpd_before_150() {	$server_parts = explode( '/', isset( $_SERVER['SERVER_SOFTWARE'] )? $_SERVER['SERVER_SOFTWARE'] : '' );	$server_parts[1] = isset( $server_parts[1] )? $server_parts[1] : '';	return  'lighttpd' == $server_parts[0] && -1 == version_compare( $server_parts[1], '1.5.0' );}/** * Does the specified module exist in the apache config? * * @since 2.5.0 * * @param string $mod e.g. mod_rewrite * @param bool $default The default return value if the module is not found * @return bool */function apache_mod_loaded($mod, $default = false) {	global $is_apache;	if ( !$is_apache )		return false;	if ( function_exists('apache_get_modules') ) {		$mods = apache_get_modules();		if ( in_array($mod, $mods) )			return true;	} elseif ( function_exists('phpinfo') ) {			ob_start();			phpinfo(8);			$phpinfo = ob_get_clean();			if ( false !== strpos($phpinfo, $mod) )				return true;	}	return $default;}/** * File validates against allowed set of defined rules. * * A return value of '1' means that the $file contains either '..' or './'. A * return value of '2' means that the $file contains ':' after the first * character. A return value of '3' means that the file is not in the allowed * files list. * * @since 1.2.0 * * @param string $file File path. * @param array $allowed_files List of allowed files. * @return int 0 means nothing is wrong, greater than 0 means something was wrong. */function validate_file( $file, $allowed_files = '' ) {	if ( false !== strpos( $file, '..' ))		return 1;	if ( false !== strpos( $file, './' ))		return 1;	if (!empty ( $allowed_files ) && (!in_array( $file, $allowed_files ) ) )		return 3;	if (':' == substr( $file, 1, 1 ))		return 2;	return 0;}/** * Determine if SSL is used. * * @since 2.6.0 * * @return bool True if SSL, false if not used. */function is_ssl() {	if ( isset($_SERVER['HTTPS']) ) {		if ( 'on' == strtolower($_SERVER['HTTPS']) )			return true;		if ( '1' == $_SERVER['HTTPS'] )			return true;	} elseif ( isset($_SERVER['SERVER_PORT']) && ( '443' == $_SERVER['SERVER_PORT'] ) ) {		return true;	}	return false;}/** * Whether SSL login should be forced. * * @since 2.6.0 * * @param string|bool $force Optional. * @return bool True if forced, false if not forced. */function force_ssl_login( $force = null ) {	static $forced = false;	if ( !is_null( $force ) ) {		$old_forced = $forced;		$forced = $force;		return $old_forced;	}	return $forced;}/** * Whether to force SSL used for the Administration Panels. * * @since 2.6.0 * * @param string|bool $force * @return bool True if forced, false if not forced. */function force_ssl_admin( $force = null ) {	static $forced = false;	if ( !is_null( $force ) ) {		$old_forced = $forced;		$forced = $force;		return $old_forced;	}	return $forced;}/** * Guess the URL for the site. * * Will remove wp-admin links to retrieve only return URLs not in the wp-admin * directory. * * @since 2.6.0 * * @return string */function wp_guess_url() {	if ( defined('WP_SITEURL') && '' != WP_SITEURL ) {		$url = WP_SITEURL;	} else {		$schema = is_ssl() ? 'https://' : 'http://';		$url = preg_replace('|/wp-admin/.*|i', '', $schema . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);	}	return $url;}/** * Suspend cache invalidation. * * Turns cache invalidation on and off.  Useful during imports where you don't wont to do invalidations * every time a post is inserted.  Callers must be sure that what they are doing won't lead to an inconsistent * cache when invalidation is suspended. * * @since 2.7.0 * * @param bool $suspend Whether to suspend or enable cache invalidation * @return bool The current suspend setting */function wp_suspend_cache_invalidation($suspend = true) {	global $_wp_suspend_cache_invalidation;	$current_suspend = $_wp_suspend_cache_invalidation;	$_wp_suspend_cache_invalidation = $suspend;	return $current_suspend;}/** * Retrieve site option value based on name of option. * * @see get_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses apply_filters() Calls 'pre_site_option_$option' before checking the option. * 	Any value other than false will "short-circuit" the retrieval of the option *	and return the returned value. * @uses apply_filters() Calls 'site_option_$option', after checking the  option, with * 	the option value. * * @param string $option Name of option to retrieve. Expected to not be SQL-escaped. * @param mixed $default Optional value to return if option doesn't exist. Default false. * @param bool $use_cache Whether to use cache. Multisite only. Default true. * @return mixed Value set for the option. */function get_site_option( $option, $default = false, $use_cache = true ) {	global $wpdb;	// Allow plugins to short-circuit site options. 	$pre = apply_filters( 'pre_site_option_' . $option, false ); 	if ( false !== $pre ) 		return $pre;	if ( !is_multisite() ) {		$value = get_option($option, $default);	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $use_cache )			$value = wp_cache_get($cache_key, 'site-options');		if ( !isset($value) || (false === $value) ) {			$row = $wpdb->get_row( $wpdb->prepare("SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );			// Has to be get_row instead of get_var because of funkiness with 0, false, null values			if ( is_object( $row ) )				$value = $row->meta_value;			else				$value = $default;			$value = maybe_unserialize( $value );			wp_cache_set( $cache_key, $value, 'site-options' );		}	} 	return apply_filters( 'site_option_' . $option, $value );}/** * Add a new site option. * * @see add_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses apply_filters() Calls 'pre_add_site_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'add_site_option_$option' and 'add_site_option' hooks on success. * * @param string $option Name of option to add. Expected to not be SQL-escaped. * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped. * @return bool False if option was not added and true if option was added. */function add_site_option( $option, $value ) {	global $wpdb;	$value = apply_filters( 'pre_add_site_option_' . $option, $value );	if ( !is_multisite() ) {		$result = add_option( $option, $value );	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $wpdb->get_row( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) ) )			return update_site_option( $option, $value );		$value = sanitize_option( $option, $value );		wp_cache_set( $cache_key, $value, 'site-options' );		$_value = $value;		$value = maybe_serialize($value);		$result = $wpdb->insert( $wpdb->sitemeta, array('site_id' => $wpdb->siteid, 'meta_key' => $option, 'meta_value' => $value ) );		$value = $_value;	}	do_action( "add_site_option_{$option}", $option, $value );	do_action( "add_site_option", $option, $value );	return $result;}/** * Removes site option by name. * * @see delete_option() * @package WordPress * @subpackage Option * @since 2.8.0 * * @uses do_action() Calls 'pre_delete_site_option_$option' hook before option is deleted. * @uses do_action() Calls 'delete_site_option' and 'delete_site_option_$option' * 	hooks on success. * * @param string $option Name of option to remove. Expected to not be SQL-escaped. * @return bool True, if succeed. False, if failure. */function delete_site_option( $option ) {	global $wpdb;	// ms_protect_special_option( $option ); @todo	do_action( 'pre_delete_site_option_' . $option );	if ( !is_multisite() ) {		$result = delete_option( $option );	} else {		$row = $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM {$wpdb->sitemeta} WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );		if ( is_null( $row ) || !$row->meta_id )			return false;		$cache_key = "{$wpdb->siteid}:$option";		wp_cache_delete( $cache_key, 'site-options' );		$result = $wpdb->query( $wpdb->prepare( "DELETE FROM {$wpdb->sitemeta} WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) );	}	if ( $result ) {		do_action( "delete_site_option_{$option}", $option );		do_action( "delete_site_option", $option );		return true;	}	return false;}/** * Update the value of a site option that was already added. * * @see update_option() * @since 2.8.0 * @package WordPress * @subpackage Option * * @uses apply_filters() Calls 'pre_update_site_option_$option' hook to allow overwriting the * 	option value to be stored. * @uses do_action() Calls 'update_site_option_$option' and 'update_site_option' hooks on success. * * @param string $option Name of option. Expected to not be SQL-escaped. * @param mixed $value Option value. Expected to not be SQL-escaped. * @return bool False if value was not updated and true if value was updated. */function update_site_option( $option, $value ) {	global $wpdb;	$oldvalue = get_site_option( $option );	$value = apply_filters( 'pre_update_site_option_' . $option, $value, $oldvalue );	if ( $value === $oldvalue )		return false;	if ( !is_multisite() ) {		$result = update_option( $option, $value );	} else {		$cache_key = "{$wpdb->siteid}:$option";		if ( $value && !$wpdb->get_row( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE meta_key = %s AND site_id = %d", $option, $wpdb->siteid ) ) )			return add_site_option( $option, $value );		$value = sanitize_option( $option, $value );		wp_cache_set( $cache_key, $value, 'site-options' );		$_value = $value;		$value = maybe_serialize( $value );		$result = $wpdb->update( $wpdb->sitemeta, array( 'meta_value' => $value ), array( 'site_id' => $wpdb->siteid, 'meta_key' => $option ) );		$value = $_value;	}	if ( $result ) {		do_action( "update_site_option_{$option}", $option, $value );		do_action( "update_site_option", $option, $value );		return true;	}	return false;}/** * Delete a site transient * * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses do_action() Calls 'delete_site_transient_$transient' hook before transient is deleted. * @uses do_action() Calls 'deleted_site_transient' hook on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return bool True if successful, false otherwise */function delete_site_transient( $transient ) {	global $_wp_using_ext_object_cache;	do_action( 'delete_site_transient_' . $transient, $transient );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_delete( $transient, 'site-transient' );	} else {		$option_timeout = '_site_transient_timeout_' . $transient;		$option = '_site_transient_' . $transient;		$result = delete_site_option( $option );		if ( $result )			delete_site_option( $option_timeout );	}	if ( $result )		do_action( 'deleted_site_transient', $transient );	return $result;}/** * Get the value of a site transient * * If the transient does not exist or does not have a value, then the return value * will be false. * * @see get_transient() * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_site_transient_$transient' hook before checking the transient. * 	Any value other than false will "short-circuit" the retrieval of the transient *	and return the returned value. * @uses apply_filters() Calls 'site_transient_$option' hook, after checking the transient, with * 	the transient value. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @return mixed Value of transient */function get_site_transient( $transient ) {	global $_wp_using_ext_object_cache;	$pre = apply_filters( 'pre_site_transient_' . $transient, false );	if ( false !== $pre )		return $pre;	if ( $_wp_using_ext_object_cache ) {		$value = wp_cache_get( $transient, 'site-transient' );	} else {		// Core transients that do not have a timeout. Listed here so querying timeouts can be avoided.		$no_timeout = array('update_core', 'update_plugins', 'update_themes');		$transient_option = '_site_transient_' . $transient;		if ( ! in_array( $transient, $no_timeout ) ) {			$transient_timeout = '_site_transient_timeout_' . $transient;			$timeout = get_site_option( $transient_timeout );			if ( false !== $timeout && $timeout < time() ) {				delete_site_option( $transient_option  );				delete_site_option( $transient_timeout );				return false;			}		}		$value = get_site_option( $transient_option );	}	return apply_filters( 'site_transient_' . $transient, $value );}/** * Set/update the value of a site transient * * You do not need to serialize values, if the value needs to be serialize, then * it will be serialized before it is set. * * @see set_transient() * @since 2.9.0 * @package WordPress * @subpackage Transient * * @uses apply_filters() Calls 'pre_set_site_transient_$transient' hook to allow overwriting the * 	transient value to be stored. * @uses do_action() Calls 'set_site_transient_$transient' and 'setted_site_transient' hooks on success. * * @param string $transient Transient name. Expected to not be SQL-escaped. * @param mixed $value Transient value. Expected to not be SQL-escaped. * @param int $expiration Time until expiration in seconds, default 0 * @return bool False if value was not set and true if value was set. */function set_site_transient( $transient, $value, $expiration = 0 ) {	global $_wp_using_ext_object_cache;    $value = apply_filters( 'pre_set_site_transient_' . $transient, $value );	if ( $_wp_using_ext_object_cache ) {		$result = wp_cache_set( $transient, $value, 'site-transient', $expiration );	} else {		$transient_timeout = '_site_transient_timeout_' . $transient;		$transient = '_site_transient_' . $transient;		if ( false === get_site_option( $transient ) ) {			if ( $expiration )				add_site_option( $transient_timeout, time() + $expiration );			$result = add_site_option( $transient, $value );		} else {			if ( $expiration )				update_site_option( $transient_timeout, time() + $expiration );			$result = update_site_option( $transient, $value );		}	}	if ( $result ) {		do_action( 'set_site_transient_' . $transient );		do_action( 'setted_site_transient', $transient );	}	return $result;}/** * is main site * * * @since 3.0.0 * @package WordPress * * @param int $blog_id optional blog id to test (default current blog) * @return bool True if not multisite or $blog_id is main site */function is_main_site( $blog_id = '' ) {	global $current_site, $current_blog;	if ( !is_multisite() )		return true;	if ( !$blog_id )		$blog_id = $current_blog->blog_id;	return $blog_id == $current_site->blog_id;}/** * Whether global terms are enabled. * * * @since 3.0.0 * @package WordPress * * @return bool True if multisite and global terms enabled */function global_terms_enabled() {	if ( ! is_multisite() )		return false;	static $global_terms = null;	if ( is_null( $global_terms ) ) {		$filter = apply_filters( 'global_terms_enabled', null );		if ( ! is_null( $filter ) )			$global_terms = (bool) $filter;		else			$global_terms = (bool) get_site_option( 'global_terms_enabled', false );	}	return $global_terms;}/** * gmt_offset modification for smart timezone handling * * Overrides the gmt_offset option if we have a timezone_string available * * @since 2.8.0 * * @return float|bool */function wp_timezone_override_offset() {	if ( !wp_timezone_supported() ) {		return false;	}	if ( !$timezone_string = get_option( 'timezone_string' ) ) {		return false;	}	$timezone_object = timezone_open( $timezone_string );	$datetime_object = date_create();	if ( false === $timezone_object || false === $datetime_object ) {		return false;	}	return round( timezone_offset_get( $timezone_object, $datetime_object ) / 3600, 2 );}/** * Check for PHP timezone support * * @since 2.9.0 * * @return bool */function wp_timezone_supported() {	$support = false;	if (		function_exists( 'date_create' ) &&		function_exists( 'date_default_timezone_set' ) &&		function_exists( 'timezone_identifiers_list' ) &&		function_exists( 'timezone_open' ) &&		function_exists( 'timezone_offset_get' )	) {		$support = true;	}	return apply_filters( 'timezone_support', $support );}/** * {@internal Missing Short Description}} * * @since 2.9.0 * * @param unknown_type $a * @param unknown_type $b * @return int */function _wp_timezone_choice_usort_callback( $a, $b ) {	// Don't use translated versions of Etc	if ( 'Etc' === $a['continent'] && 'Etc' === $b['continent'] ) {		// Make the order of these more like the old dropdown		if ( 'GMT+' === substr( $a['city'], 0, 4 ) && 'GMT+' === substr( $b['city'], 0, 4 ) ) {			return -1 * ( strnatcasecmp( $a['city'], $b['city'] ) );		}		if ( 'UTC' === $a['city'] ) {			if ( 'GMT+' === substr( $b['city'], 0, 4 ) ) {				return 1;			}			return -1;		}		if ( 'UTC' === $b['city'] ) {			if ( 'GMT+' === substr( $a['city'], 0, 4 ) ) {				return -1;			}			return 1;		}		return strnatcasecmp( $a['city'], $b['city'] );	}	if ( $a['t_continent'] == $b['t_continent'] ) {		if ( $a['t_city'] == $b['t_city'] ) {			return strnatcasecmp( $a['t_subcity'], $b['t_subcity'] );		}		return strnatcasecmp( $a['t_city'], $b['t_city'] );	} else {		// Force Etc to the bottom of the list		if ( 'Etc' === $a['continent'] ) {			return 1;		}		if ( 'Etc' === $b['continent'] ) {			return -1;		}		return strnatcasecmp( $a['t_continent'], $b['t_continent'] );	}}/** * Gives a nicely formatted list of timezone strings // temporary! Not in final * * @since 2.9.0 * * @param string $selected_zone Selected Zone * @return string */function wp_timezone_choice( $selected_zone ) {	static $mo_loaded = false;	$continents = array( 'Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	// Load translations for continents and cities	if ( !$mo_loaded ) {		$locale = get_locale();		$mofile = WP_LANG_DIR . '/continents-cities-' . $locale . '.mo';		load_textdomain( 'continents-cities', $mofile );		$mo_loaded = true;	}	$zonen = array();	foreach ( timezone_identifiers_list() as $zone ) {		$zone = explode( '/', $zone );		if ( !in_array( $zone[0], $continents ) ) {			continue;		}		// This determines what gets set and translated - we don't translate Etc/* strings here, they are done later		$exists = array(			0 => ( isset( $zone[0] ) && $zone[0] ),			1 => ( isset( $zone[1] ) && $zone[1] ),			2 => ( isset( $zone[2] ) && $zone[2] ),		);		$exists[3] = ( $exists[0] && 'Etc' !== $zone[0] );		$exists[4] = ( $exists[1] && $exists[3] );		$exists[5] = ( $exists[2] && $exists[3] );		$zonen[] = array(			'continent'   => ( $exists[0] ? $zone[0] : '' ),			'city'        => ( $exists[1] ? $zone[1] : '' ),			'subcity'     => ( $exists[2] ? $zone[2] : '' ),			't_continent' => ( $exists[3] ? translate( str_replace( '_', ' ', $zone[0] ), 'continents-cities' ) : '' ),			't_city'      => ( $exists[4] ? translate( str_replace( '_', ' ', $zone[1] ), 'continents-cities' ) : '' ),			't_subcity'   => ( $exists[5] ? translate( str_replace( '_', ' ', $zone[2] ), 'continents-cities' ) : '' )		);	}	usort( $zonen, '_wp_timezone_choice_usort_callback' );	$structure = array();	if ( empty( $selected_zone ) ) {		$structure[] = '<option selected="selected" value="">' . __( 'Select a city' ) . '</option>';	}	foreach ( $zonen as $key => $zone ) {		// Build value in an array to join later		$value = array( $zone['continent'] );		if ( empty( $zone['city'] ) ) {			// It's at the continent level (generally won't happen)			$display = $zone['t_continent'];		} else {			// It's inside a continent group			// Continent optgroup			if ( !isset( $zonen[$key - 1] ) || $zonen[$key - 1]['continent'] !== $zone['continent'] ) {				$label = $zone['t_continent'];				$structure[] = '<optgroup label="'. esc_attr( $label ) .'">';			}			// Add the city to the value			$value[] = $zone['city'];			$display = $zone['t_city'];			if ( !empty( $zone['subcity'] ) ) {				// Add the subcity to the value				$value[] = $zone['subcity'];				$display .= ' - ' . $zone['t_subcity'];			}		}		// Build the value		$value = join( '/', $value );		$selected = '';		if ( $value === $selected_zone ) {			$selected = 'selected="selected" ';		}		$structure[] = '<option ' . $selected . 'value="' . esc_attr( $value ) . '">' . esc_html( $display ) . "</option>";		// Close continent optgroup		if ( !empty( $zone['city'] ) && ( !isset($zonen[$key + 1]) || (isset( $zonen[$key + 1] ) && $zonen[$key + 1]['continent'] !== $zone['continent']) ) ) {			$structure[] = '</optgroup>';		}	}	// Do UTC	$structure[] = '<optgroup label="'. esc_attr__( 'UTC' ) .'">';	$selected = '';	if ( 'UTC' === $selected_zone )		$selected = 'selected="selected" ';	$structure[] = '<option ' . $selected . 'value="' . esc_attr( 'UTC' ) . '">' . __('UTC') . '</option>';	$structure[] = '</optgroup>';	// Do manual UTC offsets	$structure[] = '<optgroup label="'. esc_attr__( 'Manual Offsets' ) .'">';	$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,		0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);	foreach ( $offset_range as $offset ) {		if ( 0 <= $offset )			$offset_name = '+' . $offset;		else			$offset_name = (string) $offset;		$offset_value = $offset_name;		$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);		$offset_name = 'UTC' . $offset_name;		$offset_value = 'UTC' . $offset_value;		$selected = '';		if ( $offset_value === $selected_zone )			$selected = 'selected="selected" ';		$structure[] = '<option ' . $selected . 'value="' . esc_attr( $offset_value ) . '">' . esc_html( $offset_name ) . "</option>";	}	$structure[] = '</optgroup>';	return join( "\n", $structure );}/** * Strip close comment and close php tags from file headers used by WP * See http://core.trac.wordpress.org/ticket/8497 * * @since 2.8.0 * * @param string $str * @return string */function _cleanup_header_comment($str) {	return trim(preg_replace("/\s*(?:\*\/|\?>).*/", '', $str));}/** * Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS. * * @since 2.9.0 */function wp_scheduled_delete() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	$posts_to_delete = $wpdb->get_results($wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < '%d'", $delete_timestamp), ARRAY_A);	foreach ( (array) $posts_to_delete as $post ) {		$post_id = (int) $post['post_id'];		if ( !$post_id )			continue;		$del_post = get_post($post_id);		if ( !$del_post || 'trash' != $del_post->post_status ) {			delete_post_meta($post_id, '_wp_trash_meta_status');			delete_post_meta($post_id, '_wp_trash_meta_time');		} else {			wp_delete_post($post_id);		}	}	$comments_to_delete = $wpdb->get_results($wpdb->prepare("SELECT comment_id FROM $wpdb->commentmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < '%d'", $delete_timestamp), ARRAY_A);	foreach ( (array) $comments_to_delete as $comment ) {		$comment_id = (int) $comment['comment_id'];		if ( !$comment_id )			continue;		$del_comment = get_comment($comment_id);		if ( !$del_comment || 'trash' != $del_comment->comment_approved ) {			delete_comment_meta($comment_id, '_wp_trash_meta_time');			delete_comment_meta($comment_id, '_wp_trash_meta_status');		} else {			wp_delete_comment($comment_id);		}	}}/** * Parse the file contents to retrieve its metadata. * * Searches for metadata for a file, such as a plugin or theme.  Each piece of * metadata must be on its own line. For a field spanning multple lines, it * must not have any newlines or only parts of it will be displayed. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the file contents when it has all of the required data. * * The first 8kiB of the file will be pulled in and if the file data is not * within that first 8kiB, then the author should correct their plugin file * and move the data headers to the top. * * The file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @since 2.9.0 * * @param string $file Path to the file * @param bool $markup If the returned data should have HTML markup applied * @param string $context If specified adds filter hook "extra_<$context>_headers" */function get_file_data( $file, $default_headers, $context = '' ) {	// We don't need to write to the file, so just open for reading.	$fp = fopen( $file, 'r' );	// Pull only the first 8kiB of the file in.	$file_data = fread( $fp, 8192 );	// PHP will close file handle, but we are good citizens.	fclose( $fp );	if ( $context != '' ) {		$extra_headers = apply_filters( "extra_$context".'_headers', array() );		$extra_headers = array_flip( $extra_headers );		foreach( $extra_headers as $key=>$value ) {			$extra_headers[$key] = $key;		}		$all_headers = array_merge($extra_headers, $default_headers);	} else {		$all_headers = $default_headers;	}	foreach ( $all_headers as $field => $regex ) {		preg_match( '/' . preg_quote( $regex, '/' ) . ':(.*)$/mi', $file_data, ${$field});		if ( !empty( ${$field} ) )			${$field} = _cleanup_header_comment( ${$field}[1] );		else			${$field} = '';	}	$file_data = compact( array_keys( $all_headers ) );	return $file_data;}/* * Used internally to tidy up the search terms * * @access private * @since 2.9.0 * * @param string $t * @return string */function _search_terms_tidy($t) {	return trim($t, "\"'\n\r ");}/** * Returns true * * Useful for returning true to filters easily * * @since 3.0.0 * @see __return_false() * @return bool true */function __return_true() {	return true;}/** * Returns false * * Useful for returning false to filters easily * * @since 3.0.0 * @see __return_true() * @return bool false */function __return_false() {	return false;}/** * Returns 0 * * Useful for returning 0 to filters easily * * @since 3.0.0 * @see __return_zero() * @return int 0 */function __return_zero() {	return 0;}/** * Returns an empty array * * Useful for returning an empty array to filters easily * * @since 3.0.0 * @see __return_zero() * @return array Empty array */function __return_empty_array() {	return array();}/** * Send a HTTP header to disable content type sniffing in browsers which support it. * * @link http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx * @link http://src.chromium.org/viewvc/chrome?view=rev&revision=6985 * * @since 3.0.0 * @return none */function send_nosniff_header() {	@header( 'X-Content-Type-Options: nosniff' );}/** * Returns a MySQL expression for selecting the week number based on the start_of_week option. * * @internal * @since 3.0.0 * @param string $column * @return string */function _wp_mysql_week( $column ) {	switch ( $start_of_week = (int) get_option( 'start_of_week' ) ) {	default :	case 0 :		return "WEEK( $column, 0 )";	case 1 :		return "WEEK( $column, 1 )";	case 2 :	case 3 :	case 4 :	case 5 :	case 6 :		return "WEEK( DATE_SUB( $column, INTERVAL $start_of_week DAY ), 0 )";	}}?>
<?php/** * Update Core administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('update_plugins') )	wp_die(__('You do not have sufficient permissions to update plugins for this site.'));function list_core_update( $update ) {	global $wp_local_package, $wpdb;	$version_string = ('en_US' == $update->locale && 'en_US' == get_locale() ) ?			$update->current : sprintf("%s&ndash;<strong>%s</strong>", $update->current, $update->locale);	$current = false;	if ( !isset($update->response) || 'latest' == $update->response )		$current = true;	$submit = __('Update Automatically');	$form_action = 'update-core.php?action=do-core-upgrade';	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$show_buttons = true;	if ( 'development' == $update->response ) {		$message = __('You are using a development version of WordPress.  You can update to the latest nightly build automatically or download the nightly build and install it manually:');		$download = __('Download nightly build');	} else {		if ( $current ) {			$message = sprintf(__('You have the latest version of WordPress. You do not need to update. However, if you want to re-install version %s, you can do so automatically or download the package and re-install manually:'), $version_string);			$submit = __('Re-install Automatically');			$form_action = 'update-core.php?action=do-core-reinstall';		} else {			$php_compat     = version_compare( $php_version, $update->php_version, '>=' );			$mysql_compat   = version_compare( $mysql_version, $update->mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );			if ( !$mysql_compat && !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $update->current, $update->php_version, $update->mysql_version, $php_version, $mysql_version );			elseif ( !$php_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $update->current, $update->php_version, $php_version );			elseif ( !$mysql_compat )				$message = sprintf( __('You cannot update because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $update->current, $update->mysql_version, $mysql_version );			else				$message = 	sprintf(__('You can update to <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> automatically or download the package and install it manually:'), $version_string);			if ( !$mysql_compat || !$php_compat )				$show_buttons = false;		}		$download = sprintf(__('Download %s'), $version_string);	}	echo '<p>';	echo $message;	echo '</p>';	echo '<form method="post" action="' . $form_action . '" name="upgrade" class="upgrade">';	wp_nonce_field('upgrade-core');	echo '<p>';	echo '<input name="version" value="'. esc_attr($update->current) .'" type="hidden"/>';	echo '<input name="locale" value="'. esc_attr($update->locale) .'" type="hidden"/>';	if ( $show_buttons ) {		echo '<input id="upgrade" class="button" type="submit" value="' . esc_attr($submit) . '" name="upgrade" />&nbsp;';		echo '<a href="' . esc_url($update->package) . '" class="button">' . $download . '</a>&nbsp;';	}	if ( 'en_US' != $update->locale )		if ( !isset( $update->dismissed ) || !$update->dismissed )			echo '<input id="dismiss" class="button" type="submit" value="' . esc_attr__('Hide this update') . '" name="dismiss" />';		else			echo '<input id="undismiss" class="button" type="submit" value="' . esc_attr__('Bring back this update') . '" name="undismiss" />';	echo '</p>';	if ( 'en_US' != $update->locale && ( !isset($wp_local_package) || $wp_local_package != $update->locale ) )	    echo '<p class="hint">'.__('This localized version contains both the translation and various other localization fixes. You can skip upgrading if you want to keep your current translation.').'</p>';	else if ( 'en_US' == $update->locale && get_locale() != 'en_US' ) {	    echo '<p class="hint">'.sprintf( __('You are about to install WordPress %s <strong>in English.</strong> There is a chance this upgrade will break your translation. You may prefer to wait for the localized version to be released.'), $update->current ).'</p>';	}	echo '</form>';}function dismissed_updates() {	$dismissed = get_core_updates( array( 'dismissed' => true, 'available' => false ) );	if ( $dismissed ) {		$show_text = esc_js(__('Show hidden updates'));		$hide_text = esc_js(__('Hide hidden updates'));	?>	<script type="text/javascript">		jQuery(function($) {			$('dismissed-updates').show();			$('#show-dismissed').toggle(function(){$(this).text('<?php echo $hide_text; ?>');}, function() {$(this).text('<?php echo $show_text; ?>')});			$('#show-dismissed').click(function() { $('#dismissed-updates').toggle('slow');});		});	</script>	<?php		echo '<p class="hide-if-no-js"><a id="show-dismissed" href="#">'.__('Show hidden updates').'</a></p>';		echo '<ul id="dismissed-updates" class="core-updates dismissed">';		foreach( (array) $dismissed as $update) {			echo '<li>';			list_core_update( $update );			echo '</li>';		}		echo '</ul>';	}}/** * Display upgrade WordPress for downloading latest or upgrading automatically form. * * @since 2.7 * * @return null */function core_upgrade_preamble() {	global $upgrade_error;	$updates = get_core_updates();?>	<div class="wrap">	<?php screen_icon('tools'); ?>	<h2><?php _e('WordPress Updates'); ?></h2><?php	if ( $upgrade_error ) {		echo '<div class="error"><p>';		_e('Please select one or more plugins to upgrade.');		echo '</p></div>';	}	if ( !isset($updates[0]->response) || 'latest' == $updates[0]->response ) {		echo '<h3>';		_e('You have the latest version of WordPress.');		echo '</h3>';	} else {		echo '<div class="updated"><p>';		_e('<strong>Important:</strong> before updating, please <a href="http://codex.wordpress.org/WordPress_Backups">backup your database and files</a>. For help with updates, visit the <a href="http://codex.wordpress.org/Updating_WordPress">Updating WordPress</a> Codex page.');		echo '</p></div>';		echo '<h3 class="response">';		_e( 'An updated version of WordPress is available.' );		echo '</h3>';	}	echo '<ul class="core-updates">';	$alternate = true;	foreach( (array) $updates as $update ) {		$class = $alternate? ' class="alternate"' : '';		$alternate = !$alternate;		echo "<li $class>";		list_core_update( $update );		echo '</li>';	}	echo '</ul>';	echo '<p>' . __( 'While your site is being updated, it will be in maintenance mode. As soon as your updates are complete, your site will return to normal.' ) . '</p>';	dismissed_updates();	list_plugin_updates();	list_theme_updates();	do_action('core_upgrade_preamble');	echo '</div>';}function list_plugin_updates() {	global $wp_version;	$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);	require_once(ABSPATH . 'wp-admin/includes/plugin-install.php');	$plugins = get_plugin_updates();	if ( empty( $plugins ) ) {		echo '<h3>' . __( 'Plugins' ) . '</h3>';		echo '<p>' . __( 'Your plugins are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-plugin-upgrade';	$core_updates = get_core_updates();	if ( !isset($core_updates[0]->response) || 'latest' == $core_updates[0]->response || 'development' == $core_updates[0]->response || version_compare( $core_updates[0]->current, $cur_wp_version, '=') )		$core_update_version = false;	else		$core_update_version = $core_updates[0]->current;	?><h3><?php _e( 'Plugins' ); ?></h3><p><?php _e( 'The following plugins have new versions available. Check the ones you want to update and then click &#8220;Update Plugins&#8221;.' ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-plugins" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-plugins" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-plugins-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="plugins-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="plugins-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $plugins as $plugin_file => $plugin_data) {		$info = plugins_api('plugin_information', array('slug' => $plugin_data->update->slug ));		// Get plugin compat for running version of WordPress.		if ( isset($info->tested) && version_compare($info->tested, $cur_wp_version, '>=') ) {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: 100%% (according to its author)'), $cur_wp_version);		} elseif ( isset($info->compatibility[$cur_wp_version][$plugin_data->update->new_version]) ) {			$compat = $info->compatibility[$cur_wp_version][$plugin_data->update->new_version];			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $cur_wp_version, $compat[0], $compat[2], $compat[1]);		} else {			$compat = '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $cur_wp_version);		}		// Get plugin compat for updated version of WordPress.		if ( $core_update_version ) {			if ( isset($info->compatibility[$core_update_version][$plugin_data->update->new_version]) ) {				$update_compat = $info->compatibility[$core_update_version][$plugin_data->update->new_version];				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: %2$d%% (%3$d "works" votes out of %4$d total)'), $core_update_version, $update_compat[0], $update_compat[2], $update_compat[1]);			} else {				$compat .= '<br />' . sprintf(__('Compatibility with WordPress %1$s: Unknown'), $core_update_version);			}		}		// Get the upgrade notice for the new plugin version.		if ( isset($plugin_data->update->upgrade_notice) ) {			$upgrade_notice = '<br />' . strip_tags($plugin_data->update->upgrade_notice);		} else {			$upgrade_notice = '';		}		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($plugin_file) . "' /></th>		<td class='plugin-title'><strong>{$plugin_data->Name}</strong>" . sprintf(__('You have version %1$s installed. Update to %2$s.'), $plugin_data->Version, $plugin_data->update->new_version) . $compat . $upgrade_notice . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-plugins-2" class="button" type="submit" value="<?php esc_attr_e('Update Plugins'); ?>" name="upgrade" /></p></form><?php}function list_theme_updates() {	$themes = get_theme_updates();	if ( empty( $themes ) ) {		echo '<h3>' . __( 'Themes' ) . '</h3>';		echo '<p>' . __( 'Your themes are all up to date.' ) . '</p>';		return;	}	$form_action = 'update-core.php?action=do-theme-upgrade';?><h3><?php _e( 'Themes' ); ?></h3><p><?php _e( 'The following themes have new versions available. Check the ones you want to update and then click &#8220;Update Themes&#8221;.' ); ?></p><p><?php printf( __('<strong>Please Note:</strong> Any customizations you have made to the Themes files will be lost. Please consider using <a href="%s">child themes</a> for modifications.'), _x('http://codex.wordpress.org/Child_Themes', 'Link used in suggestion to use child themes in GUU') ); ?></p><form method="post" action="<?php echo $form_action; ?>" name="upgrade-themes" class="upgrade"><?php wp_nonce_field('upgrade-core'); ?><p><input id="upgrade-themes" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p><table class="widefat" cellspacing="0" id="update-themes-table">	<thead>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all"><?php _e('Select All'); ?></label></th>	</tr>	</thead>	<tfoot>	<tr>		<th scope="col" class="manage-column check-column"><input type="checkbox" id="themes-select-all-2" /></th>		<th scope="col" class="manage-column"><label for="themes-select-all-2"><?php _e('Select All'); ?></label></th>	</tr>	</tfoot>	<tbody class="plugins"><?php	foreach ( (array) $themes as $stylesheet => $theme_data) {		$screenshot = $theme_data->{'Theme Root URI'} . '/' . $stylesheet . '/' . $theme_data->Screenshot;		echo "	<tr class='active'>		<th scope='row' class='check-column'><input type='checkbox' name='checked[]' value='" . esc_attr($stylesheet) . "' /></th>		<td class='plugin-title'><img src='$screenshot' width='64' height='64' style='float:left; padding: 5px' /><strong>{$theme_data->Name}</strong>" .  sprintf(__('You have version %1$s installed. Update to %2$s.'), $theme_data->Version, $theme_data->update['new_version']) . "</td>	</tr>";	}?>	</tbody></table><p><input id="upgrade-themes-2" class="button" type="submit" value="<?php esc_attr_e('Update Themes'); ?>" name="upgrade" /></p></form><?php}/** * Upgrade WordPress core display. * * @since 2.7 * * @return null */function do_core_upgrade( $reinstall = false ) {	global $wp_filesystem;	if ( $reinstall )		$url = 'update-core.php?action=do-core-reinstall';	else		$url = 'update-core.php?action=do-core-upgrade';	$url = wp_nonce_url($url, 'upgrade-core');	if ( false === ($credentials = request_filesystem_credentials($url, '', false, ABSPATH)) )		return;	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	if ( ! WP_Filesystem($credentials, ABSPATH) ) {		request_filesystem_credentials($url, '', true, ABSPATH); //Failed to connect, Error and request again		return;	}?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e('Update WordPress'); ?></h2><?php	if ( $wp_filesystem->errors->get_error_code() ) {		foreach ( $wp_filesystem->errors->get_error_messages() as $message )			show_message($message);		echo '</div>';		return;	}	if ( $reinstall )		$update->response = 'reinstall';	$result = wp_update_core($update, 'show_message');	if ( is_wp_error($result) ) {		show_message($result);		if ('up_to_date' != $result->get_error_code() )			show_message( __('Installation Failed') );	} else {		show_message( __('WordPress updated successfully') );		show_message( '<strong>' . __('Actions:') . '</strong> <a href="' . esc_url( admin_url() ) . '">' . __('Go to Dashboard') . '</a>' );	}	echo '</div>';}function do_dismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	dismiss_core_update( $update );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function do_undismiss_core_update() {	$version = isset( $_POST['version'] )? $_POST['version'] : false;	$locale = isset( $_POST['locale'] )? $_POST['locale'] : 'en_US';	$update = find_core_update( $version, $locale );	if ( !$update )		return;	undismiss_core_update( $version, $locale );	wp_redirect( wp_nonce_url('update-core.php?action=upgrade-core', 'upgrade-core') );}function no_update_actions($actions) {	return '';}$action = isset($_GET['action']) ? $_GET['action'] : 'upgrade-core';$upgrade_error = false;if ( 'do-plugin-upgrade' == $action && !isset($_GET['plugins']) && !isset($_POST['checked']) ) {	$upgrade_error = true;	$action = 'upgrade-core';}$title = __('WordPress Updates');$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen lets you update to the latest version of WordPress as well as update your themes and plugins from the WordPress.org repository. When updates are available, the number of available updates will appear in a bubble on the left hand menu as a notification. It is very important to keep your WordPress installation up to date for security reasons, so when you see a number appear, make sure you take the time to update, which is an easy process.') . '</p>' .	'<p>' . __('Updating your WordPress installation is a simple one-click procedure; just click on the Update button when it says a new version is available.') . '</p>' .	'<p>' . __('To upgrade themes or plugins from this screen, use the checkboxes to make your selection and click on the appropriate Update button. Check the box at the top of the Themes or Plugins section to select all and update them all at once.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_Updates_SubPanel" target="_blank">Documentation on Updating WordPress</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');if ( 'upgrade-core' == $action ) {	wp_version_check();	require_once('./admin-header.php');	core_upgrade_preamble();} elseif ( 'do-core-upgrade' == $action || 'do-core-reinstall' == $action ) {	check_admin_referer('upgrade-core');	// do the (un)dismiss actions before headers,	// so that they can redirect	if ( isset( $_POST['dismiss'] ) )		do_dismiss_core_update();	elseif ( isset( $_POST['undismiss'] ) )		do_undismiss_core_update();	require_once('./admin-header.php');	if ( 'do-core-reinstall' == $action )		$reinstall = true;	else		$reinstall = false;	if ( isset( $_POST['upgrade'] ) )		do_core_upgrade($reinstall);} elseif ( 'do-plugin-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['plugins'] ) ) {		$plugins = explode( ',', $_GET['plugins'] );	} elseif ( isset( $_POST['checked'] ) ) {		$plugins = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected&plugins=' . urlencode(implode(',', $plugins));	$url = wp_nonce_url($url, 'bulk-update-plugins');	$title = __('Update Plugins');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('plugins');	echo '<h2>' . esc_html__('Update Plugins') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';} elseif ( 'do-theme-upgrade' == $action ) {	check_admin_referer('upgrade-core');	if ( isset( $_GET['themes'] ) ) {		$themes = explode( ',', $_GET['themes'] );	} elseif ( isset( $_POST['checked'] ) ) {		$themes = (array) $_POST['checked'];	} else {		wp_redirect('update-core.php');		exit;	}	$url = 'update.php?action=update-selected-themes&themes=' . urlencode(implode(',', $themes));	$url = wp_nonce_url($url, 'bulk-update-themes');	$title = __('Update Themes');	require_once('./admin-header.php');	echo '<div class="wrap">';	screen_icon('themes');	echo '<h2>' . esc_html__('Update Themes') . '</h2>';	echo "<iframe src='$url' style='width: 100%; height: 100%; min-height: 750px;' frameborder='0'></iframe>";	echo '</div>';}include('./admin-footer.php');
<?php/** * WordPress Dashboard Widget Administration Panel API * * @package WordPress * @subpackage Administration *//** * Registers dashboard widgets. * * handles POST data, sets up filters. * * @since unknown */function wp_dashboard_setup() {	global $wp_registered_widgets, $wp_registered_widget_controls, $wp_dashboard_control_callbacks;	$wp_dashboard_control_callbacks = array();	$update = false;	$widget_options = get_option( 'dashboard_widget_options' );	if ( !$widget_options || !is_array($widget_options) )		$widget_options = array();	/* Register Widgets and Controls */	// Right Now	wp_add_dashboard_widget( 'dashboard_right_now', __( 'Right Now' ), 'wp_dashboard_right_now' );	// Recent Comments Widget	if ( !isset( $widget_options['dashboard_recent_comments'] ) || !isset( $widget_options['dashboard_recent_comments']['items'] ) ) {		$update = true;		$widget_options['dashboard_recent_comments'] = array(			'items' => 5,		);	}	$recent_comments_title = __( 'Recent Comments' );	wp_add_dashboard_widget( 'dashboard_recent_comments', $recent_comments_title, 'wp_dashboard_recent_comments', 'wp_dashboard_recent_comments_control' );	// Incoming Links Widget	if ( !isset( $widget_options['dashboard_incoming_links'] ) || !isset( $widget_options['dashboard_incoming_links']['home'] ) || $widget_options['dashboard_incoming_links']['home'] != get_option('home') ) {		$update = true;		$num_items = isset($widget_options['dashboard_incoming_links']['items']) ? $widget_options['dashboard_incoming_links']['items'] : 10;		$widget_options['dashboard_incoming_links'] = array(			'home' => get_option('home'),			'link' => apply_filters( 'dashboard_incoming_links_link', 'http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'url' => isset($widget_options['dashboard_incoming_links']['url']) ? apply_filters( 'dashboard_incoming_links_feed', $widget_options['dashboard_incoming_links']['url'] ) : apply_filters( 'dashboard_incoming_links_feed', 'http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=' . $num_items . '&output=rss&partner=wordpress&q=link:' . trailingslashit( get_option('home') ) ),			'items' => $num_items,			'show_date' => isset($widget_options['dashboard_incoming_links']['show_date']) ? $widget_options['dashboard_incoming_links']['show_date'] : false		);	}	wp_add_dashboard_widget( 'dashboard_incoming_links', __( 'Incoming Links' ), 'wp_dashboard_incoming_links', 'wp_dashboard_incoming_links_control' );	// WP Plugins Widget	if ( current_user_can( 'install_plugins' ) )		wp_add_dashboard_widget( 'dashboard_plugins', __( 'Plugins' ), 'wp_dashboard_plugins' );	// QuickPress Widget	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_quick_press', __( 'QuickPress' ), 'wp_dashboard_quick_press' );	// Recent Drafts	if ( current_user_can('edit_posts') )		wp_add_dashboard_widget( 'dashboard_recent_drafts', __('Recent Drafts'), 'wp_dashboard_recent_drafts' );	// Primary feed (Dev Blog) Widget	if ( !isset( $widget_options['dashboard_primary'] ) ) {		$update = true;		$widget_options['dashboard_primary'] = array(			'link' => apply_filters( 'dashboard_primary_link',  __( 'http://wordpress.org/development/' ) ),			'url' => apply_filters( 'dashboard_primary_feed',  __( 'http://wordpress.org/development/feed/' ) ),			'title' => apply_filters( 'dashboard_primary_title', __( 'WordPress Blog' ) ),			'items' => 2,			'show_summary' => 1,			'show_author' => 0,			'show_date' => 1,		);	}	wp_add_dashboard_widget( 'dashboard_primary', $widget_options['dashboard_primary']['title'], 'wp_dashboard_primary', 'wp_dashboard_primary_control' );	// Secondary Feed (Planet) Widget	if ( !isset( $widget_options['dashboard_secondary'] ) ) {		$update = true;		$widget_options['dashboard_secondary'] = array(			'link' => apply_filters( 'dashboard_secondary_link',  __( 'http://planet.wordpress.org/' ) ),			'url' => apply_filters( 'dashboard_secondary_feed',  __( 'http://planet.wordpress.org/feed/' ) ),			'title' => apply_filters( 'dashboard_secondary_title', __( 'Other WordPress News' ) ),			'items' => 5,			'show_summary' => 0,			'show_author' => 0,			'show_date' => 0,		);	}	wp_add_dashboard_widget( 'dashboard_secondary', $widget_options['dashboard_secondary']['title'], 'wp_dashboard_secondary', 'wp_dashboard_secondary_control' );	// Hook to register new widgets	do_action( 'wp_dashboard_setup' );	// Filter widget order	$dashboard_widgets = apply_filters( 'wp_dashboard_widgets', array() );	foreach ( $dashboard_widgets as $widget_id ) {		$name = empty( $wp_registered_widgets[$widget_id]['all_link'] ) ? $wp_registered_widgets[$widget_id]['name'] : $wp_registered_widgets[$widget_id]['name'] . " <a href='{$wp_registered_widgets[$widget_id]['all_link']}' class='edit-box open-box'>" . __('View all') . '</a>';		wp_add_dashboard_widget( $widget_id, $name, $wp_registered_widgets[$widget_id]['callback'], $wp_registered_widget_controls[$widget_id]['callback'] );	}	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget_id']) ) {		ob_start(); // hack - but the same hack wp-admin/widgets.php uses		wp_dashboard_trigger_widget_control( $_POST['widget_id'] );		ob_end_clean();		wp_redirect( remove_query_arg( 'edit' ) );		exit;	}	if ( $update )		update_option( 'dashboard_widget_options', $widget_options );	do_action('do_meta_boxes', 'dashboard', 'normal', '');	do_action('do_meta_boxes', 'dashboard', 'side', '');}function wp_add_dashboard_widget( $widget_id, $widget_name, $callback, $control_callback = null ) {	global $wp_dashboard_control_callbacks;	if ( $control_callback && current_user_can( 'edit_dashboard' ) && is_callable( $control_callback ) ) {		$wp_dashboard_control_callbacks[$widget_id] = $control_callback;		if ( isset( $_GET['edit'] ) && $widget_id == $_GET['edit'] ) {			list($url) = explode( '#', add_query_arg( 'edit', false ), 2 );			$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( $url ) . '">' . __( 'Cancel' ) . '</a></span>';			add_meta_box( $widget_id, $widget_name, '_wp_dashboard_control_callback', 'dashboard', 'normal', 'core' );			return;		}		list($url) = explode( '#', add_query_arg( 'edit', $widget_id ), 2 );		$widget_name .= ' <span class="postbox-title-action"><a href="' . esc_url( "$url#$widget_id" ) . '" class="edit-box open-box">' . __( 'Configure' ) . '</a></span>';	}	$side_widgets = array('dashboard_quick_press', 'dashboard_recent_drafts', 'dashboard_primary', 'dashboard_secondary');	$location = 'normal';	if ( in_array($widget_id, $side_widgets) )		$location = 'side';	add_meta_box( $widget_id, $widget_name , $callback, 'dashboard', $location, 'core' );}function _wp_dashboard_control_callback( $dashboard, $meta_box ) {	echo '<form action="" method="post" class="dashboard-widget-control-form">';	wp_dashboard_trigger_widget_control( $meta_box['id'] );	echo '<p class="submit"><input type="hidden" name="widget_id" value="' . esc_attr($meta_box['id']) . '" /><input type="submit" value="' . esc_attr__( 'Submit' ) . '" /></p>';	echo '</form>';}/** * Displays the dashboard. * * @since unknown */function wp_dashboard() {	global $screen_layout_columns;	$hide2 = $hide3 = $hide4 = '';	switch ( $screen_layout_columns ) {		case 4:			$width = 'width:24.5%;';			break;		case 3:			$width = 'width:32.67%;';			$hide4 = 'display:none;';			break;		case 2:			$width = 'width:49%;';			$hide3 = $hide4 = 'display:none;';			break;		default:			$width = 'width:98%;';			$hide2 = $hide3 = $hide4 = 'display:none;';	}?><div id="dashboard-widgets" class="metabox-holder"><?php	echo "\t<div class='postbox-container' style='$width'>\n";	do_meta_boxes( 'dashboard', 'normal', '' );	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";	do_meta_boxes( 'dashboard', 'side', '' );	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";	do_meta_boxes( 'dashboard', 'column3', '' );	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";	do_meta_boxes( 'dashboard', 'column4', '' );?></div></div><form style="display:none" method="get" action="">	<p><?php	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );?>	</p></form><?php}/* Dashboard Widgets */function wp_dashboard_right_now() {	global $wp_registered_sidebars;	$num_posts = wp_count_posts( 'post' );	$num_pages = wp_count_posts( 'page' );	$num_cats  = wp_count_terms('category');	$num_tags = wp_count_terms('post_tag');	$num_comm = wp_count_comments( );	echo "\n\t".'<div class="table table_content">';	echo "\n\t".'<p class="sub">' . __('Content') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Posts	$num = number_format_i18n( $num_posts->publish );	$text = _n( 'Post', 'Posts', intval($num_posts->publish) );	if ( current_user_can( 'edit_posts' ) ) {		$num = "<a href='edit.php'>$num</a>";		$text = "<a href='edit.php'>$text</a>";	}	echo '<td class="first b b-posts">' . $num . '</td>';	echo '<td class="t posts">' . $text . '</td>';	echo '</tr><tr>';	/* TODO: Show status breakdown on hover	if ( $can_edit_pages && !empty($num_pages->publish) ) { // how many pages is not exposed in feeds.  Don't show if !current_user_can		$post_type_texts[] = '<a href="edit-pages.php">'.sprintf( _n( '%s page', '%s pages', $num_pages->publish ), number_format_i18n( $num_pages->publish ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->draft) ) {		$post_type_texts[] = '<a href="edit.php?post_status=draft">'.sprintf( _n( '%s draft', '%s drafts', $num_posts->draft ), number_format_i18n( $num_posts->draft ) ).'</a>';	}	if ( $can_edit_posts && !empty($num_posts->future) ) {		$post_type_texts[] = '<a href="edit.php?post_status=future">'.sprintf( _n( '%s scheduled post', '%s scheduled posts', $num_posts->future ), number_format_i18n( $num_posts->future ) ).'</a>';	}	if ( current_user_can('publish_posts') && !empty($num_posts->pending) ) {		$pending_text = sprintf( _n( 'There is <a href="%1$s">%2$s post</a> pending your review.', 'There are <a href="%1$s">%2$s posts</a> pending your review.', $num_posts->pending ), 'edit.php?post_status=pending', number_format_i18n( $num_posts->pending ) );	} else {		$pending_text = '';	}	*/	// Pages	$num = number_format_i18n( $num_pages->publish );	$text = _n( 'Page', 'Pages', $num_pages->publish );	if ( current_user_can( 'edit_pages' ) ) {		$num = "<a href='edit.php?post_type=page'>$num</a>";		$text = "<a href='edit.php?post_type=page'>$text</a>";	}	echo '<td class="first b b_pages">' . $num . '</td>';	echo '<td class="t pages">' . $text . '</td>';	echo '</tr><tr>';	// Categories	$num = number_format_i18n( $num_cats );	$text = _n( 'Category', 'Categories', $num_cats );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php?taxonomy=category'>$num</a>";		$text = "<a href='edit-tags.php?taxonomy=category'>$text</a>";	}	echo '<td class="first b b-cats">' . $num . '</td>';	echo '<td class="t cats">' . $text . '</td>';	echo '</tr><tr>';	// Tags	$num = number_format_i18n( $num_tags );	$text = _n( 'Tag', 'Tags', $num_tags );	if ( current_user_can( 'manage_categories' ) ) {		$num = "<a href='edit-tags.php'>$num</a>";		$text = "<a href='edit-tags.php'>$text</a>";	}	echo '<td class="first b b-tags">' . $num . '</td>';	echo '<td class="t tags">' . $text . '</td>';	echo "</tr>";	do_action('right_now_content_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="table table_discussion">';	echo "\n\t".'<p class="sub">' . __('Discussion') . '</p>'."\n\t".'<table>';	echo "\n\t".'<tr class="first">';	// Total Comments	$num = '<span class="total-count">' . number_format_i18n($num_comm->total_comments) . '</span>';	$text = _n( 'Comment', 'Comments', $num_comm->total_comments );	if ( current_user_can( 'moderate_comments' ) ) {		$num = '<a href="edit-comments.php">' . $num . '</a>';		$text = '<a href="edit-comments.php">' . $text . '</a>';	}	echo '<td class="b b-comments">' . $num . '</td>';	echo '<td class="last t comments">' . $text . '</td>';	echo '</tr><tr>';	// Approved Comments	$num = '<span class="approved-count">' . number_format_i18n($num_comm->approved) . '</span>';	$text = _nx( 'Approved', 'Approved', $num_comm->approved, 'Right Now' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=approved'>$num</a>";		$text = "<a class='approved' href='edit-comments.php?comment_status=approved'>$text</a>";	}	echo '<td class="b b_approved">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Pending Comments	$num = '<span class="pending-count">' . number_format_i18n($num_comm->moderated) . '</span>';	$text = _n( 'Pending', 'Pending', $num_comm->moderated );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=moderated'>$num</a>";		$text = "<a class='waiting' href='edit-comments.php?comment_status=moderated'>$text</a>";	}	echo '<td class="b b-waiting">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>\n\t<tr>";	// Spam Comments	$num = number_format_i18n($num_comm->spam);	$text = _nx( 'Spam', 'Spam', $num_comm->spam, 'comment' );	if ( current_user_can( 'moderate_comments' ) ) {		$num = "<a href='edit-comments.php?comment_status=spam'><span class='spam-count'>$num</span></a>";		$text = "<a class='spam' href='edit-comments.php?comment_status=spam'>$text</a>";	}	echo '<td class="b b-spam">' . $num . '</td>';	echo '<td class="last t">' . $text . '</td>';	echo "</tr>";	do_action('right_now_table_end');	do_action('right_now_discussion_table_end');	echo "\n\t</table>\n\t</div>";	echo "\n\t".'<div class="versions">';	$ct = current_theme_info();	echo "\n\t<p>";	if ( !empty($wp_registered_sidebars) ) {		$sidebars_widgets = wp_get_sidebars_widgets();		$num_widgets = 0;		foreach ( (array) $sidebars_widgets as $k => $v ) {			if ( 'wp_inactive_widgets' == $k )				continue;			if ( is_array($v) )				$num_widgets = $num_widgets + count($v);		}		$num = number_format_i18n( $num_widgets );		$switch_themes = $ct->title;		if ( current_user_can( 'switch_themes') ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			$switch_themes = '<a href="themes.php">' . $switch_themes . '</a>';		}		if ( current_user_can( 'edit_theme_options' ) ) {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widget</a></span>', 'Theme <span class="b">%1$s</span> with <span class="b"><a href="widgets.php">%2$s Widgets</a></span>', $num_widgets), $switch_themes, $num);		} else {			printf(_n('Theme <span class="b">%1$s</span> with <span class="b">%2$s Widget</span>', 'Theme <span class="b">%1$s</span> with <span class="b">%2$s Widgets</span>', $num_widgets), $switch_themes, $num);		}	} else {		if ( current_user_can( 'switch_themes' ) ) {			echo '<a href="themes.php" class="button rbutton">' . __('Change Theme') . '</a>';			printf( __('Theme <span class="b"><a href="themes.php">%1$s</a></span>'), $ct->title );		} else {			printf( __('Theme <span class="b">%1$s</span>'), $ct->title );		}	}	echo '</p>';	update_right_now_message();	echo "\n\t".'<br class="clear" /></div>';	do_action( 'rightnow_end' );	do_action( 'activity_box_end' );}function wp_dashboard_quick_press_output() {	global $post_ID;	$drafts = false;	if ( 'post' === strtolower( $_SERVER['REQUEST_METHOD'] ) && isset( $_POST['action'] ) && 0 === strpos( $_POST['action'], 'post-quickpress' ) && (int) $_POST['post_ID'] ) {		$view = get_permalink( $_POST['post_ID'] );		$edit = esc_url( get_edit_post_link( $_POST['post_ID'] ) );		if ( 'post-quickpress-publish' == $_POST['action'] ) {			if ( current_user_can('publish_posts') )				printf( '<div class="updated"><p>' . __( 'Post published. <a href="%s">View post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( $view ), $edit );			else				printf( '<div class="updated"><p>' . __( 'Post submitted. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );		} else {			printf( '<div class="updated"><p>' . __( 'Draft saved. <a href="%s">Preview post</a> | <a href="%s">Edit post</a>' ) . '</p></div>', esc_url( add_query_arg( 'preview', 1, $view ) ), $edit );			$drafts_query = new WP_Query( array(				'post_type' => 'post',				'post_status' => 'draft',				'author' => $GLOBALS['current_user']->ID,				'posts_per_page' => 1,				'orderby' => 'modified',				'order' => 'DESC'			) );			if ( $drafts_query->posts )				$drafts =& $drafts_query->posts;		}		printf('<p class="textright">' . __('You can also try %s, easy blogging from anywhere on the Web.') . '</p>', '<a href="' . esc_url( admin_url( 'tools.php' ) ) . '">' . __('Press This') . '</a>' );		$_REQUEST = array(); // hack for get_default_post_to_edit()	}	/* Check if a new auto-draft (= no new post_ID) is needed or if the old can be used */	$last_post_id = (int) get_user_option( 'dashboard_quick_press_last_post_id' ); // Get the last post_ID	if ( $last_post_id ) {		$post = get_post( $last_post_id );		if ( empty( $post ) || $post->post_status != 'auto-draft' ) { // auto-draft doesn't exists anymore			$post = get_default_post_to_edit('post', true);			update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID		} else {			$post->post_title = ''; // Remove the auto draft title		}	} else {		$post = get_default_post_to_edit('post', true);		update_user_option( (int) $GLOBALS['current_user']->ID, 'dashboard_quick_press_last_post_id', (int) $post->ID ); // Save post_ID	}	$post_ID = (int) $post->ID;?>	<form name="post" action="<?php echo esc_url( admin_url( 'post.php' ) ); ?>" method="post" id="quick-press">		<h4 id="quick-post-title"><label for="title"><?php _e('Title') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="post_title" id="title" tabindex="1" autocomplete="off" value="<?php echo esc_attr( $post->post_title ); ?>" />		</div>		<?php if ( current_user_can( 'upload_files' ) ) : ?>		<div id="media-buttons" class="hide-if-no-js">			<?php do_action( 'media_buttons' ); ?>		</div>		<?php endif; ?>		<h4 id="content-label"><label for="content"><?php _e('Content') ?></label></h4>		<div class="textarea-wrap">			<textarea name="content" id="content" class="mceEditor" rows="3" cols="15" tabindex="2"><?php echo $post->post_content; ?></textarea>		</div>		<script type="text/javascript">edCanvas = document.getElementById('content');edInsertContent = null;</script>		<h4><label for="tags-input"><?php _e('Tags') ?></label></h4>		<div class="input-text-wrap">			<input type="text" name="tags_input" id="tags-input" tabindex="3" value="<?php echo get_tags_to_edit( $post->ID ); ?>" />		</div>		<p class="submit">			<input type="hidden" name="action" id="quickpost-action" value="post-quickpress-save" />			<input type="hidden" name="quickpress_post_ID" value="<?php echo $post_ID; ?>" />			<input type="hidden" name="post_type" value="post" />			<?php wp_nonce_field('add-post'); ?>			<input type="submit" name="save" id="save-post" class="button" tabindex="4" value="<?php esc_attr_e('Save Draft'); ?>" />			<input type="reset" value="<?php esc_attr_e( 'Reset' ); ?>" class="button" />			<span id="publishing-action">				<input type="submit" name="publish" id="publish" accesskey="p" tabindex="5" class="button-primary" value="<?php current_user_can('publish_posts') ? esc_attr_e('Publish') : esc_attr_e('Submit for Review'); ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" />			</span>			<br class="clear" />		</p>	</form><?php	if ( $drafts )		wp_dashboard_recent_drafts( $drafts );}function wp_dashboard_quick_press() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_recent_drafts( $drafts = false ) {	if ( !$drafts ) {		$drafts_query = new WP_Query( array(			'post_type' => 'post',			'post_status' => 'draft',			'author' => $GLOBALS['current_user']->ID,			'posts_per_page' => 5,			'orderby' => 'modified',			'order' => 'DESC'		) );		$drafts =& $drafts_query->posts;	}	if ( $drafts && is_array( $drafts ) ) {		$list = array();		foreach ( $drafts as $draft ) {			$url = get_edit_post_link( $draft->ID );			$title = _draft_or_post_title( $draft->ID );			$item = "<h4><a href='$url' title='" . sprintf( __( 'Edit &#8220;%s&#8221;' ), esc_attr( $title ) ) . "'>" . esc_html($title) . "</a> <abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'>" . get_the_time( get_option( 'date_format' ), $draft ) . '</abbr></h4>';			if ( $the_content = preg_split( '#\s#', strip_tags( $draft->post_content ), 11, PREG_SPLIT_NO_EMPTY ) )				$item .= '<p>' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 < count( $the_content ) ? '&hellip;' : '' ) . '</p>';			$list[] = $item;		}?>	<ul>		<li><?php echo join( "</li>\n<li>", $list ); ?></li>	</ul>	<p class="textright"><a href="edit.php?post_status=draft" class="button"><?php _e('View all'); ?></a></p><?php	} else {		_e('There are no drafts at the moment');	}}/** * Display recent comments dashboard widget content. * * @since unknown */function wp_dashboard_recent_comments() {	global $wpdb;	if ( current_user_can('edit_posts') )		$allowed_states = array('0', '1');	else		$allowed_states = array('1');	// Select all comment types and filter out spam later for better query performance.	$comments = array();	$start = 0;	$widgets = get_option( 'dashboard_widget_options' );	if ( isset( $widgets['dashboard_recent_comments'] ) && isset( $widgets['dashboard_recent_comments']['items'] ) )		$total_items = (int) $widgets['dashboard_recent_comments']['items'];	else		$total_items = 5;	while ( count( $comments ) < 5 && $possible = $wpdb->get_results( "SELECT * FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {		foreach ( $possible as $comment ) {			if ( count( $comments ) >= $total_items )				break;			if ( in_array( $comment->comment_approved, $allowed_states ) && current_user_can( 'read_post', $comment->comment_post_ID ) )				$comments[] = $comment;		}		$start = $start + 50;	}	if ( $comments ) :?>		<div id="the-comment-list" class="list:comment"><?php		foreach ( $comments as $comment )			_wp_dashboard_recent_comments_row( $comment );?>		</div><?php		if ( current_user_can('edit_posts') ) { ?>			<p class="textright"><a href="edit-comments.php" class="button"><?php _e('View all'); ?></a></p><?php	}		wp_comment_reply( -1, false, 'dashboard', false );		wp_comment_trashnotice();	else :?>	<p><?php _e( 'No comments yet.' ); ?></p><?php	endif; // $comments;}function _wp_dashboard_recent_comments_row( &$comment, $show_date = true ) {	$GLOBALS['comment'] =& $comment;	$comment_post_url = get_edit_post_link( $comment->comment_post_ID );	$comment_post_title = strip_tags(get_the_title( $comment->comment_post_ID ));	$comment_post_link = "<a href='$comment_post_url'>$comment_post_title</a>";	$comment_link = '<a class="comment-link" href="' . esc_url(get_comment_link()) . '">#</a>';	$actions_string = '';	if ( current_user_can('edit_post', $comment->comment_post_ID) ) {		// preorder it: Approve | Reply | Edit | Spam | Trash		$actions = array(			'approve' => '', 'unapprove' => '',			'reply' => '',			'edit' => '',			'spam' => '',			'trash' => '', 'delete' => ''		);		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce" );		$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';		$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';		$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . __('Edit comment') . "'>". __('Edit') . '</a>';		$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$comment->comment_post_ID.'\');return false;" class="vim-r hide-if-no-js" title="'.__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';		$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '</a>';		if ( !EMPTY_TRASH_DAYS )			$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';		else			$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . __( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';		$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';			// Reply and quickedit need a hide-if-no-js span			if ( 'reply' == $action || 'quickedit' == $action )				$action .= ' hide-if-no-js';			$actions_string .= "<span class='$action'>$sep$link</span>";		}	}?>		<div id="comment-<?php echo $comment->comment_ID; ?>" <?php comment_class( array( 'comment-item', wp_get_comment_status($comment->comment_ID) ) ); ?>>			<?php if ( !$comment->comment_type || 'comment' == $comment->comment_type ) : ?>			<?php echo get_avatar( $comment, 50 ); ?>			<div class="dashboard-comment-wrap">			<h4 class="comment-meta">				<?php printf( /* translators: 1: comment author, 2: post link, 3: notification if the comment is pending */__( 'From %1$s on %2$s%3$s' ),					'<cite class="comment-author">' . get_comment_author_link() . '</cite>', $comment_post_link.' '.$comment_link, ' <span class="approve">' . __( '[Pending]' ) . '</span>' ); ?>			</h4>			<?php			else :				switch ( $comment->comment_type ) :				case 'pingback' :					$type = __( 'Pingback' );					break;				case 'trackback' :					$type = __( 'Trackback' );					break;				default :					$type = ucwords( $comment->comment_type );				endswitch;				$type = esc_html( $type );			?>			<div class="dashboard-comment-wrap">			<?php /* translators: %1$s is type of comment, %2$s is link to the post */ ?>			<h4 class="comment-meta"><?php printf( _x( '%1$s on %2$s', 'dashboard' ), "<strong>$type</strong>", $comment_post_link." ".$comment_link ); ?></h4>			<p class="comment-author"><?php comment_author_link(); ?></p>			<?php endif; // comment_type ?>			<blockquote><p><?php comment_excerpt(); ?></p></blockquote>			<p class="row-actions"><?php echo $actions_string; ?></p>			</div>		</div><?php}/** * The recent comments dashboard widget control. * * @since 3.0.0 */function wp_dashboard_recent_comments_control() {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options['dashboard_recent_comments']) )		$widget_options['dashboard_recent_comments'] = array();	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-recent-comments']) ) {		$number = (int) stripslashes($_POST['widget-recent-comments']['items']);		if ( $number < 1 || $number > 30 )			$number = 5;		$widget_options['dashboard_recent_comments']['items'] = $number;		update_option( 'dashboard_widget_options', $widget_options );	}	$number = isset( $widget_options['dashboard_recent_comments']['items'] ) ? (int) $widget_options['dashboard_recent_comments']['items'] : '';	echo '<p><label for="comments-number">' . __('Number of comments to show:') . '</label>';	echo '<input id="comments-number" name="widget-recent-comments[items]" type="text" value="' . $number . '" size="3" /> <small>' . __( '(at most 30)' ) . '</small></p>';}function wp_dashboard_incoming_links() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display incoming links dashboard widget content. * * @since unknown */function wp_dashboard_incoming_links_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_incoming_links'], EXTR_SKIP );	$rss = fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p>';		}		return;	}	if ( !$rss->get_item_quantity() ) {		echo '<p>' . __('This dashboard widget queries <a href="http://blogsearch.google.com/">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.') . "</p>\n";		$rss->__destruct();		unset($rss);		return;	}	echo "<ul>\n";	if ( !isset($items) )		$items = 10;	foreach ( $rss->get_items(0, $items) as $item ) {		$publisher = '';		$site_link = '';		$link = '';		$content = '';		$date = '';		$link = esc_url( strip_tags( $item->get_link() ) );		$author = $item->get_author();		if ( $author ) {			$site_link = esc_url( strip_tags( $author->get_link() ) );			if ( !$publisher = esc_html( strip_tags( $author->get_name() ) ) )				$publisher = __( 'Somebody' );		} else {		  $publisher = __( 'Somebody' );		}		if ( $site_link )			$publisher = "<a href='$site_link'>$publisher</a>";		else			$publisher = "<strong>$publisher</strong>";		$content = $item->get_content();		$content = wp_html_excerpt($content, 50) . ' ...';		if ( $link )			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here <a href="%2$s">saying</a>, "%3$s"' );		else			/* translators: incoming links feed, %1$s is other person, %3$s is content */			$text = __( '%1$s linked here saying, "%3$s"' );		if ( $show_date ) {			if ( $show_author || $show_summary )				/* translators: incoming links feed, %4$s is the date */				$text .= ' ' . __( 'on %4$s' );			$date = esc_html( strip_tags( $item->get_date() ) );			$date = strtotime( $date );			$date = gmdate( get_option( 'date_format' ), $date );		}		echo "\t<li>" . sprintf( $text, $publisher, $link, $content, $date ) . "</li>\n";	}	echo "</ul>\n";	$rss->__destruct();	unset($rss);}function wp_dashboard_incoming_links_control() {	wp_dashboard_rss_control( 'dashboard_incoming_links', array( 'title' => false, 'show_summary' => false, 'show_author' => false ) );}function wp_dashboard_primary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_primary_control() {	wp_dashboard_rss_control( 'dashboard_primary' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param int $widget_id */function wp_dashboard_rss_output( $widget_id ) {	$widgets = get_option( 'dashboard_widget_options' );	echo '<div class="rss-widget">';	wp_widget_rss_output( $widgets[$widget_id] );	echo "</div>";}function wp_dashboard_secondary() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}function wp_dashboard_secondary_control() {	wp_dashboard_rss_control( 'dashboard_secondary' );}/** * Display secondary dashboard RSS widget feed. * * @since unknown * * @return unknown */function wp_dashboard_secondary_output() {	$widgets = get_option( 'dashboard_widget_options' );	@extract( @$widgets['dashboard_secondary'], EXTR_SKIP );	$rss = @fetch_feed( $url );	if ( is_wp_error($rss) ) {		if ( is_admin() || current_user_can('manage_options') ) {			echo '<div class="rss-widget"><p>';			printf(__('<strong>RSS Error</strong>: %s'), $rss->get_error_message());			echo '</p></div>';		}	} elseif ( !$rss->get_item_quantity() ) {		$rss->__destruct();		unset($rss);		return false;	} else {		echo '<div class="rss-widget">';		wp_widget_rss_output( $rss, $widgets['dashboard_secondary'] );		echo '</div>';		$rss->__destruct();		unset($rss);	}}function wp_dashboard_plugins() {	echo '<p class="widget-loading hide-if-no-js">' . __( 'Loading&#8230;' ) . '</p><p class="describe hide-if-js">' . __('This widget requires JavaScript.') . '</p>';}/** * Display plugins most popular, newest plugins, and recently updated widget text. * * @since unknown */function wp_dashboard_plugins_output() {	$popular = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/popular/' );	$new     = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/new/' );	$updated = fetch_feed( 'http://wordpress.org/extend/plugins/rss/browse/updated/' );	if ( false === $plugin_slugs = get_transient( 'plugin_slugs' ) ) {		$plugin_slugs = array_keys( get_plugins() );		set_transient( 'plugin_slugs', $plugin_slugs, 86400 );	}	foreach ( array( 'popular' => __('Most Popular'), 'new' => __('Newest Plugins'), 'updated' => __('Recently Updated') ) as $feed => $label ) {		if ( is_wp_error($$feed) || !$$feed->get_item_quantity() )			continue;		$items = $$feed->get_items(0, 5);		// Pick a random, non-installed plugin		while ( true ) {			// Abort this foreach loop iteration if there's no plugins left of this type			if ( 0 == count($items) )				continue 2;			$item_key = array_rand($items);			$item = $items[$item_key];			list($link, $frag) = explode( '#', $item->get_link() );			$link = esc_url($link);			if ( preg_match( '|/([^/]+?)/?$|', $link, $matches ) )				$slug = $matches[1];			else {				unset( $items[$item_key] );				continue;			}			// Is this random plugin's slug already installed? If so, try again.			reset( $plugin_slugs );			foreach ( $plugin_slugs as $plugin_slug ) {				if ( $slug == substr( $plugin_slug, 0, strlen( $slug ) ) ) {					unset( $items[$item_key] );					continue 2;				}			}			// If we get to this point, then the random plugin isn't installed and we can stop the while().			break;		}		// Eliminate some common badly formed plugin descriptions		while ( ( null !== $item_key = array_rand($items) ) && false !== strpos( $items[$item_key]->get_description(), 'Plugin Name:' ) )			unset($items[$item_key]);		if ( !isset($items[$item_key]) )			continue;		// current bbPress feed item titles are: user on "topic title"		if ( preg_match( '/&quot;(.*)&quot;/s', $item->get_title(), $matches ) )			$title = $matches[1];		else // but let's make it forward compatible if things change			$title = $item->get_title();		$title = esc_html( $title );		$description = esc_html( strip_tags(@html_entity_decode($item->get_description(), ENT_QUOTES, get_option('blog_charset'))) );		$ilink = wp_nonce_url('plugin-install.php?tab=plugin-information&plugin=' . $slug, 'install-plugin_' . $slug) .							'&amp;TB_iframe=true&amp;width=600&amp;height=800';		echo "<h4>$label</h4>\n";		echo "<h5><a href='$link'>$title</a></h5>&nbsp;<span>(<a href='$ilink' class='thickbox' title='$title'>" . __( 'Install' ) . "</a>)</span>\n";		echo "<p>$description</p>\n";		$$feed->__destruct();		unset($$feed);	}}/** * Checks to see if all of the feed url in $check_urls are cached. * * If $check_urls is empty, look for the rss feed url found in the dashboard * widget optios of $widget_id. If cached, call $callback, a function that * echoes out output for this widget. If not cache, echo a "Loading..." stub * which is later replaced by AJAX call (see top of /wp-admin/index.php) * * @since unknown * * @param int $widget_id * @param callback $callback * @param array $check_urls RSS feeds * @return bool False on failure. True on success. */function wp_dashboard_cached_rss_widget( $widget_id, $callback, $check_urls = array() ) {	$loading = '<p class="widget-loading">' . __( 'Loading&#8230;' ) . '</p>';	if ( empty($check_urls) ) {		$widgets = get_option( 'dashboard_widget_options' );		if ( empty($widgets[$widget_id]['url']) ) {			echo $loading;			return false;		}		$check_urls = array( $widgets[$widget_id]['url'] );	}	include_once ABSPATH . WPINC . '/class-feed.php';	foreach ( $check_urls as $check_url ) {		$cache = new WP_Feed_Cache_Transient('', md5($check_url), '');		if ( ! $cache->load() ) {			echo $loading;			return false;		}	}	if ( $callback && is_callable( $callback ) ) {		$args = array_slice( func_get_args(), 2 );		array_unshift( $args, $widget_id );		call_user_func_array( $callback, $args );	}	return true;}/* Dashboard Widgets Controls */// Calls widget_control callback/** * Calls widget control callback. * * @since unknown * * @param int $widget_control_id Registered Widget ID. */function wp_dashboard_trigger_widget_control( $widget_control_id = false ) {	global $wp_dashboard_control_callbacks;	if ( is_scalar($widget_control_id) && $widget_control_id && isset($wp_dashboard_control_callbacks[$widget_control_id]) && is_callable($wp_dashboard_control_callbacks[$widget_control_id]) ) {		call_user_func( $wp_dashboard_control_callbacks[$widget_control_id], '', array( 'id' => $widget_control_id, 'callback' => $wp_dashboard_control_callbacks[$widget_control_id] ) );	}}/** * The RSS dashboard widget control. * * Sets up $args to be used as input to wp_widget_rss_form(). Handles POST data * from RSS-type widgets. * * @since unknown * * @param string widget_id * @param array form_inputs */function wp_dashboard_rss_control( $widget_id, $form_inputs = array() ) {	if ( !$widget_options = get_option( 'dashboard_widget_options' ) )		$widget_options = array();	if ( !isset($widget_options[$widget_id]) )		$widget_options[$widget_id] = array();	$number = 1; // Hack to use wp_widget_rss_form()	$widget_options[$widget_id]['number'] = $number;	if ( 'POST' == $_SERVER['REQUEST_METHOD'] && isset($_POST['widget-rss'][$number]) ) {		$_POST['widget-rss'][$number] = stripslashes_deep( $_POST['widget-rss'][$number] );		$widget_options[$widget_id] = wp_widget_rss_process( $_POST['widget-rss'][$number] );		// title is optional.  If black, fill it if possible		if ( !$widget_options[$widget_id]['title'] && isset($_POST['widget-rss'][$number]['title']) ) {			$rss = fetch_feed($widget_options[$widget_id]['url']);			if ( is_wp_error($rss) ) {				$widget_options[$widget_id]['title'] = htmlentities(__('Unknown Feed'));			} else {				$widget_options[$widget_id]['title'] = htmlentities(strip_tags($rss->get_title()));				$rss->__destruct();				unset($rss);			}		}		update_option( 'dashboard_widget_options', $widget_options );	}	wp_widget_rss_form( $widget_options[$widget_id], $form_inputs );}/** * Empty function usable by plugins to output empty dashboard widget (to be populated later by JS). */function wp_dashboard_empty() {}?>
<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * Edit post administration panel. * * Manage Post actions: post, edit, delete, etc. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'edit.php';$submenu_file = 'edit.php';wp_reset_vars(array('action', 'safe_mode', 'withcomments', 'posts', 'content', 'edited_post_title', 'comment_error', 'profile', 'trackback_url', 'excerpt', 'showcomments', 'commentstart', 'commentend', 'commentorder'));if ( isset($_GET['post']) )	$post_id = (int) $_GET['post'];elseif ( isset($_POST['post_ID']) )	$post_id = (int) $_POST['post_ID'];else	$post_id = 0;$post_ID = $post_id;$post = null;$post_type_object = null;$post_type = null;if ( $post_id ) {	$post = get_post($post_id);	if ( $post ) {		$post_type_object = get_post_type_object($post->post_type);		if ( $post_type_object ) {			$post_type = $post->post_type;			$current_screen->post_type = $post->post_type;			$current_screen->id = $current_screen->post_type;		}	}} elseif ( isset($_POST['post_type']) ) {	$post_type_object = get_post_type_object($_POST['post_type']);	if ( $post_type_object ) {		$post_type = $post_type_object->name;		$current_screen->post_type = $post_type;		$current_screen->id = $current_screen->post_type;	}}/** * Redirect to previous page. * * @param int $post_id Optional. Post ID. */function redirect_post($post_id = '') {	if ( !empty($_POST['mode']) && 'sidebar' == $_POST['mode'] ) {		if ( isset($_POST['saveasdraft']) )			$location = 'sidebar.php?a=c';		elseif ( isset($_POST['publish']) )			$location = 'sidebar.php?a=b';	} elseif ( isset($_POST['save']) || isset($_POST['publish']) ) {		$status = get_post_status( $post_id );		if ( isset( $_POST['publish'] ) ) {			switch ( $status ) {				case 'pending':					$message = 8;					break;				case 'future':					$message = 9;					break;				default:					$message = 6;			}		} else {				$message = 'draft' == $status ? 10 : 1;		}		$location = add_query_arg( 'message', $message, get_edit_post_link( $post_id, 'url' ) );	} elseif ( isset($_POST['addmeta']) && $_POST['addmeta'] ) {		$location = add_query_arg( 'message', 2, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( isset($_POST['deletemeta']) && $_POST['deletemeta'] ) {		$location = add_query_arg( 'message', 3, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( 'post-quickpress-save-cont' == $_POST['action'] ) {		$location = "post.php?action=edit&post=$post_id&message=7";	} else {		$location = add_query_arg( 'message', 4, get_edit_post_link( $post_id, 'url' ) );	}	wp_redirect( apply_filters( 'redirect_post_location', $location, $post_id ) );}if ( isset( $_POST['deletepost'] ) )	$action = 'delete';elseif ( isset($_POST['wp-preview']) && 'dopreview' == $_POST['wp-preview'] )	$action = 'preview';$sendback = wp_get_referer();if ( strpos($sendback, 'post.php') !== false || strpos($sendback, 'post-new.php') !== false ) {	$sendback = admin_url('edit.php');	$sendback .= ( !empty( $post_type ) ) ? '?post_type=' . $post_type : '';} else {	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), $sendback );}switch($action) {case 'postajaxpost':case 'post':case 'post-quickpress-publish':case 'post-quickpress-save':	check_admin_referer('add-' . $post_type);	if ( 'post-quickpress-publish' == $action )		$_POST['publish'] = 'publish'; // tell write_post() to publish	if ( 'post-quickpress-publish' == $action || 'post-quickpress-save' == $action ) {		$_POST['comment_status'] = get_option('default_comment_status');		$_POST['ping_status'] = get_option('default_ping_status');	}	if ( !empty( $_POST['quickpress_post_ID'] ) ) {		$_POST['post_ID'] = (int) $_POST['quickpress_post_ID'];		$post_id = edit_post();	} else {		$post_id = 'postajaxpost' == $action ? edit_post() : write_post();	}	if ( 0 === strpos( $action, 'post-quickpress' ) ) {		$_POST['post_ID'] = $post_id;		// output the quickpress dashboard widget		require_once(ABSPATH . 'wp-admin/includes/dashboard.php');		wp_dashboard_quick_press_output();		exit;	}	redirect_post($post_id);	exit();	break;case 'edit':	$editing = true;	if ( empty( $post_id ) ) {		wp_redirect("post.php");		exit();	}	$p = $post_id;	if ( empty($post->ID) )		wp_die( __('You attempted to edit an item that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( !current_user_can($post_type_object->cap->edit_post, $post_id) )		wp_die( __('You are not allowed to edit this item.') );	if ( 'trash' == $post->post_status )		wp_die( __('You can&#8217;t edit this item because it is in the Trash. Please restore it and try again.') );	if ( null == $post_type_object )		wp_die( __('Unknown post type.') );	$post_type = $post->post_type;	if ( 'post' == $post_type ) {		$parent_file = "edit.php";		$submenu_file = "edit.php";	} else {		$parent_file = "edit.php?post_type=$post_type";		$submenu_file = "edit.php?post_type=$post_type";	}	if ( $last = wp_check_post_lock( $post->ID ) ) {		add_action('admin_notices', '_admin_notice_post_locked' );	} else {		wp_set_post_lock( $post->ID );		wp_enqueue_script('autosave');	}	$title = $post_type_object->labels->edit_item;	$post = get_post_to_edit($post_id);	if ( post_type_supports($post_type, 'comments') ) {		wp_enqueue_script('admin-comments');		enqueue_comment_hotkeys_js();	}	include('./edit-form-advanced.php');	break;case 'editattachment':	check_admin_referer('update-attachment_' . $post_id);	// Don't let these be changed	unset($_POST['guid']);	$_POST['post_type'] = 'attachment';	// Update the thumbnail filename	$newmeta = wp_get_attachment_metadata( $post_id, true );	$newmeta['thumb'] = $_POST['thumb'];	wp_update_attachment_metadata( $post_id, $newmeta );case 'editpost':	check_admin_referer('update-' . $post_type . '_' . $post_id);	$post_id = edit_post();	redirect_post($post_id); // Send user on their way while we keep working	exit();	break;case 'trash':	check_admin_referer('trash-' . $post_type . '_' . $post_id);	$post = & get_post($post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item to the Trash.') );	if ( ! wp_trash_post($post_id) )		wp_die( __('Error in moving to Trash.') );	wp_redirect( add_query_arg( array('trashed' => 1, 'ids' => $post_id), $sendback ) );	exit();	break;case 'untrash':	check_admin_referer('untrash-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item out of the Trash.') );	if ( ! wp_untrash_post($post_id) )		wp_die( __('Error in restoring from Trash.') );	wp_redirect( add_query_arg('untrashed', 1, $sendback) );	exit();	break;case 'delete':	check_admin_referer('delete-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to delete this item.') );	$force = !EMPTY_TRASH_DAYS;	if ( $post->post_type == 'attachment' ) {		$force = ( $force || !MEDIA_TRASH );		if ( ! wp_delete_attachment($post_id, $force) )			wp_die( __('Error in deleting.') );	} else {		if ( !wp_delete_post($post_id, $force) )			wp_die( __('Error in deleting.') );	}	wp_redirect( add_query_arg('deleted', 1, $sendback) );	exit();	break;case 'preview':	check_admin_referer( 'autosave', 'autosavenonce' );	$url = post_preview();	wp_redirect($url);	exit();	break;default:		wp_redirect('edit.php');	exit();	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * WordPress Administration Update API * * @package WordPress * @subpackage Administration */// The admin side of our 1.1 update system/** * Selects the first update version from the update_core option * * @return object the response from the API */function get_preferred_from_update_core() {	$updates = get_core_updates();	if ( !is_array( $updates ) )		return false;	if ( empty( $updates ) )		return (object)array('response' => 'latest');	return $updates[0];}/** * Get available core updates * * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too, * 	set $options['available'] to false to skip not-dimissed updates. * @return array Array of the update objects */function get_core_updates( $options = array() ) {	$options = array_merge( array('available' => true, 'dismissed' => false ), $options );	$dismissed = get_site_option( 'dismissed_update_core' );	if ( !is_array( $dismissed ) ) $dismissed = array();	$from_api = get_site_transient( 'update_core' );	if ( empty($from_api) )		return false;	if ( !isset( $from_api->updates ) || !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	if ( !is_array( $updates ) ) return false;	$result = array();	foreach($updates as $update) {		if ( array_key_exists( $update->current.'|'.$update->locale, $dismissed ) ) {			if ( $options['dismissed'] ) {				$update->dismissed = true;				$result[]= $update;			}		} else {			if ( $options['available'] ) {				$update->dismissed = false;				$result[]= $update;			}		}	}	return $result;}function dismiss_core_update( $update ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$dismissed[ $update->current.'|'.$update->locale ] = true;	return update_site_option( 'dismissed_update_core', $dismissed );}function undismiss_core_update( $version, $locale ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$key = $version.'|'.$locale;	if ( !isset( $dismissed[$key] ) ) return false;	unset( $dismissed[$key] );	return update_site_option( 'dismissed_update_core', $dismissed );}function find_core_update( $version, $locale ) {	$from_api = get_site_transient( 'update_core' );	if ( !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	foreach($updates as $update) {		if ( $update->current == $version && $update->locale == $locale )			return $update;	}	return false;}function core_update_footer( $msg = '' ) {	if ( is_multisite() && !current_user_can('update_core') )		return false;	if ( !current_user_can('update_core') )		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->current ) )		$cur->current = '';	if ( ! isset( $cur->url ) )		$cur->url = '';	if ( ! isset( $cur->response ) )		$cur->response = '';	switch ( $cur->response ) {	case 'development' :		return sprintf( __( 'You are using a development version (%1$s). Cool! Please <a href="%2$s">stay updated</a>.' ), $GLOBALS['wp_version'], 'update-core.php');	break;	case 'upgrade' :		return sprintf( '<strong>'.__( '<a href="%1$s">Get Version %2$s</a>' ).'</strong>', 'update-core.php', $cur->current);	break;	case 'latest' :	default :		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	break;	}}add_filter( 'update_footer', 'core_update_footer' );function update_nag() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	global $pagenow;	if ( 'update-core.php' == $pagenow )		return;	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->response ) || $cur->response != 'upgrade' )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! <a href="%2$s">Please update now</a>.'), $cur->current, 'update-core.php' );	else		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! Please notify the site administrator.'), $cur->current );	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'update_nag', 3 );// Called directly from dashboardfunction update_right_now_message() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	$cur = get_preferred_from_update_core();	$msg = sprintf( __('You are using <span class="b">WordPress %s</span>.'), $GLOBALS['wp_version'] );	if ( isset( $cur->response ) && $cur->response == 'upgrade' && current_user_can('update_core') )		$msg .= " <a href='update-core.php' class='button'>" . sprintf( __('Update to %s'), $cur->current ? $cur->current : __( 'Latest' ) ) . '</a>';	echo "<span id='wp-version-message'>$msg</span>";}function get_plugin_updates() {	$all_plugins = get_plugins();	$upgrade_plugins = array();	$current = get_site_transient( 'update_plugins' );	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {		if ( isset( $current->response[ $plugin_file ] ) ) {			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];		}	}	return $upgrade_plugins;}function wp_plugin_update_rows() {	if ( !current_user_can('update_plugins' ) )		return;	$plugins = get_site_transient( 'update_plugins' );	if ( isset($plugins->response) && is_array($plugins->response) ) {		$plugins = array_keys( $plugins->response );		foreach( $plugins as $plugin_file ) {			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );		}	}}add_action( 'admin_init', 'wp_plugin_update_rows' );function wp_plugin_update_row( $file, $plugin_data ) {	$current = get_site_transient( 'update_plugins' );	if ( !isset( $current->response[ $file ] ) )		return false;	$r = $current->response[ $file ];	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );	$details_url = admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&TB_iframe=true&width=600&height=800');	echo '<tr class="plugin-update-tr"><td colspan="3" class="plugin-update"><div class="update-message">';	if ( ! current_user_can('update_plugins') )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else if ( empty($r->package) )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> <em>automatic upgrade unavailable for this plugin</em>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> or <a href="%5$s">upgrade automatically</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version, wp_nonce_url('update.php?action=upgrade-plugin&plugin=' . $file, 'upgrade-plugin_' . $file) );	do_action( "in_plugin_update_message-$file", $plugin_data, $r );	echo '</div></td></tr>';}function wp_update_plugin($plugin, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Plugin_Upgrader();	return $upgrader->upgrade($plugin);}function get_theme_updates() {	$themes = get_themes();	$current = get_site_transient('update_themes');	$update_themes = array();	foreach ( $themes as $theme ) {		$theme = (object) $theme;		if ( isset($current->response[ $theme->Stylesheet ]) ) {			$update_themes[$theme->Stylesheet] = $theme;			$update_themes[$theme->Stylesheet]->update = $current->response[ $theme->Stylesheet ];		}	}	return $update_themes;}function wp_update_theme($theme, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Theme_Upgrader();	return $upgrader->upgrade($theme);}function wp_update_core($current, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Core_Upgrader();	return $upgrader->upgrade($current);}function maintenance_nag() {	global $upgrading;	if ( ! isset( $upgrading ) )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );	else		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'maintenance_nag' );?>
<?php/** * Edit user administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'redirect', 'profile', 'user_id', 'wp_http_referer'));$user_id = (int) $user_id;$current_user = wp_get_current_user();if ( ! defined( 'IS_PROFILE_PAGE' ) )	define( 'IS_PROFILE_PAGE', ( $user_id == $current_user->ID ) );if ( ! $user_id && IS_PROFILE_PAGE )	$user_id = $current_user->ID;elseif ( ! $user_id && ! IS_PROFILE_PAGE )	wp_die(__( 'Invalid user ID.' ) );elseif ( ! get_userdata( $user_id ) )	wp_die( __('Invalid user ID.') );wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');$title = IS_PROFILE_PAGE ? __('Profile') : __('Edit User');if ( current_user_can('edit_users') && !IS_PROFILE_PAGE )	$submenu_file = 'users.php';else	$submenu_file = 'profile.php';$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('Your profile contains information about you (your &#8220;account&#8221;) as well as some personal options related to using WordPress.') . '</p>' .    '<p>' . __('You can change your password, turn on keyboard shortcuts, change the color scheme of your WordPress administration screens, and turn off the WYSIWYG (Visual) editor, among other things.') . '</p>' .    '<p>' . __('Your username cannot be changed, but you can use other fields to enter your real name or a nickname, and change which name to display on your posts.') . '</p>' .    '<p>' . __('Required fields are indicated; the rest are optional. Profile information will only be displayed if your theme is set up to do so.') . '</p>' .    '<p>' . __('Remember to click the Update Profile button when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Your_Profile_SubPanel" target="_blank">Documentation on User Profiles</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$wp_http_referer = remove_query_arg(array('update', 'delete_count'), stripslashes($wp_http_referer));$all_post_caps = array('posts', 'pages');$user_can_edit = false;foreach ( $all_post_caps as $post_cap )	$user_can_edit |= current_user_can("edit_$post_cap");/** * Optional SSL preference that can be turned on by hooking to the 'personal_options' action. * * @since 2.7.0 * * @param object $user User data object */function use_ssl_preference($user) {?>	<tr>		<th scope="row"><?php _e('Use https')?></th>		<td><label for="use_ssl"><input name="use_ssl" type="checkbox" id="use_ssl" value="1" <?php checked('1', $user->use_ssl); ?> /> <?php _e('Always use https when visiting the admin'); ?></label></td>	</tr><?php}// Only allow super admins on multisite to edit every user.if ( is_multisite() && ! current_user_can( 'manage_network_users' ) && $user_id != $current_user->ID && ! apply_filters( 'enable_edit_any_user_configuration', true ) )	wp_die( __( 'You do not have permission to edit this user.' ) );// Execute confirmed email change. See send_confirmation_on_profile_email().if ( is_multisite() && IS_PROFILE_PAGE && isset( $_GET[ 'newuseremail' ] ) && $current_user->ID ) {	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email[ 'hash' ] == $_GET[ 'newuseremail' ] ) {		$user->ID = $current_user->ID;		$user->user_email = esc_html( trim( $new_email[ 'newemail' ] ) );		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $current_user->user_login ) ) )			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $user->user_email, $current_user->user_login ) );		wp_update_user( get_object_vars( $user ) );		delete_option( $current_user->ID . '_new_email' );		wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );		die();	}} elseif ( is_multisite() && IS_PROFILE_PAGE && !empty( $_GET['dismiss'] ) && $current_user->ID . '_new_email' == $_GET['dismiss'] ) {	delete_option( $current_user->ID . '_new_email' );	wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );	die();}switch ($action) {case 'switchposts':check_admin_referer();/* TODO: Switch all posts from one user to another user */break;case 'update':check_admin_referer('update-user_' . $user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));if ( IS_PROFILE_PAGE )	do_action('personal_options_update', $user_id);else	do_action('edit_user_profile_update', $user_id);if ( !is_multisite() ) {	$errors = edit_user($user_id);} else {	$user = get_userdata( $user_id );	// Update the email address in signups, if present.	if ( $user->user_login && isset( $_POST[ 'email' ] ) && is_email( $_POST[ 'email' ] ) && $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $user->user_login ) ) )		$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $_POST[ 'email' ], $user_login ) );	// WPMU must delete the user from the current blog if WP added him after editing.	$delete_role = false;	$blog_prefix = $wpdb->get_blog_prefix();	if ( $user_id != $current_user->ID ) {		$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$user_id}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );		if ( null == $cap && $_POST[ 'role' ] == '' ) {			$_POST[ 'role' ] = 'contributor';			$delete_role = true;		}	}	if ( !isset( $errors ) || ( isset( $errors ) && is_object( $errors ) && false == $errors->get_error_codes() ) )		$errors = edit_user($user_id);	if ( $delete_role ) // stops users being added to current blog when they are edited		delete_user_meta( $user_id, $blog_prefix . 'capabilities' );	if ( is_multisite() && !IS_PROFILE_PAGE && current_user_can( 'manage_network_options' ) && !isset($super_admins) && empty( $_POST['super_admin'] ) == is_super_admin( $user_id ) )		empty( $_POST['super_admin'] ) ? revoke_super_admin( $user_id ) : grant_super_admin( $user_id );}if ( !is_wp_error( $errors ) ) {	$redirect = (IS_PROFILE_PAGE ? "profile.php?" : "user-edit.php?user_id=$user_id&"). "updated=true";	$redirect = add_query_arg('wp_http_referer', urlencode($wp_http_referer), $redirect);	wp_redirect($redirect);	exit;}default:$profileuser = get_user_to_edit($user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));include ('admin-header.php');?><?php if ( !IS_PROFILE_PAGE && is_super_admin( $profileuser->ID ) && current_user_can( 'manage_network_options' ) ) { ?>	<div class="updated"><p><strong><?php _e('Important:'); ?></strong> <?php _e('This user has super admin privileges.'); ?></p></div><?php } ?><?php if ( isset($_GET['updated']) ) : ?><div id="message" class="updated">	<p><strong><?php _e('User updated.') ?></strong></p>	<?php if ( $wp_http_referer && !IS_PROFILE_PAGE ) : ?>	<p><a href="users.php"><?php _e('&larr; Back to Authors and Users'); ?></a></p>	<?php endif; ?></div><?php endif; ?><?php if ( isset( $errors ) && is_wp_error( $errors ) ) : ?><div class="error"><p><?php echo implode( "</p>\n<p>", $errors->get_error_messages() ); ?></p></div><?php endif; ?><div class="wrap" id="profile-page"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="your-profile" action="<?php echo esc_url( admin_url( IS_PROFILE_PAGE ? 'profile.php' : 'user-edit.php' ) ); ?>" method="post"<?php do_action('user_edit_form_tag'); ?>><?php wp_nonce_field('update-user_' . $user_id) ?><?php if ( $wp_http_referer ) : ?>	<input type="hidden" name="wp_http_referer" value="<?php echo esc_url($wp_http_referer); ?>" /><?php endif; ?><p><input type="hidden" name="from" value="profile" /><input type="hidden" name="checkuser_id" value="<?php echo $user_ID ?>" /></p><h3><?php _e('Personal Options'); ?></h3><table class="form-table"><?php if ( rich_edit_exists() && !( IS_PROFILE_PAGE && !$user_can_edit ) ) : // don't bother showing the option if the editor has been removed ?>	<tr>		<th scope="row"><?php _e('Visual Editor')?></th>		<td><label for="rich_editing"><input name="rich_editing" type="checkbox" id="rich_editing" value="false" <?php checked('false', $profileuser->rich_editing); ?> /> <?php _e('Disable the visual editor when writing'); ?></label></td>	</tr><?php endif; ?><?php if ( count($_wp_admin_css_colors) > 1 && has_action('admin_color_scheme_picker') ) : ?><tr><th scope="row"><?php _e('Admin Color Scheme')?></th><td><?php do_action( 'admin_color_scheme_picker' ); ?></td></tr><?phpendif; // $_wp_admin_css_colorsif ( !( IS_PROFILE_PAGE && !$user_can_edit ) ) : ?><tr><th scope="row"><?php _e( 'Keyboard Shortcuts' ); ?></th><td><label for="comment_shortcuts"><input type="checkbox" name="comment_shortcuts" id="comment_shortcuts" value="true" <?php if ( !empty($profileuser->comment_shortcuts) ) checked('true', $profileuser->comment_shortcuts); ?> /> <?php _e('Enable keyboard shortcuts for comment moderation.'); ?></label> <?php _e('<a href="http://codex.wordpress.org/Keyboard_Shortcuts">More information</a>'); ?></td></tr><?phpendif;do_action('personal_options', $profileuser);?></table><?php	if ( IS_PROFILE_PAGE )		do_action('profile_personal_options', $profileuser);?><h3><?php _e('Name') ?></h3><table class="form-table">	<tr>		<th><label for="user_login"><?php _e('Username'); ?></label></th>		<td><input type="text" name="user_login" id="user_login" value="<?php echo esc_attr($profileuser->user_login); ?>" disabled="disabled" class="regular-text" /> <span class="description"><?php _e('Usernames cannot be changed.'); ?></span></td>	</tr><?php if ( !IS_PROFILE_PAGE ): ?><tr><th><label for="role"><?php _e('Role:') ?></label></th><td><select name="role" id="role"><?php// Get the highest/primary role for this user// TODO: create a function that does this: wp_get_user_role()$user_roles = $profileuser->roles;$user_role = array_shift($user_roles);// print the full list of roles with the primary one selected.wp_dropdown_roles($user_role);// print the 'no role' option. Make it selected if the user has no role yet.if ( $user_role )	echo '<option value="">' . __('&mdash; No role for this site &mdash;') . '</option>';else	echo '<option value="" selected="selected">' . __('&mdash; No role for this site &mdash;') . '</option>';?></select><?php if ( is_multisite() && current_user_can( 'manage_network_options' ) && !isset($super_admins) ) { ?><p><label><input type="checkbox" id="super_admin" name="super_admin"<?php checked( is_super_admin( $profileuser->ID ) ); ?> /> <?php _e( 'Grant this user super admin privileges for the Network.'); ?></label></p><?php } ?></td></tr><?php endif; //!IS_PROFILE_PAGE ?><tr>	<th><label for="first_name"><?php _e('First Name') ?></label></th>	<td><input type="text" name="first_name" id="first_name" value="<?php echo esc_attr($profileuser->first_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="last_name"><?php _e('Last Name') ?></label></th>	<td><input type="text" name="last_name" id="last_name" value="<?php echo esc_attr($profileuser->last_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="nickname"><?php _e('Nickname'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="nickname" id="nickname" value="<?php echo esc_attr($profileuser->nickname) ?>" class="regular-text" /></td></tr><tr>	<th><label for="display_name"><?php _e('Display name publicly as') ?></label></th>	<td>		<select name="display_name" id="display_name">		<?php			$public_display = array();			$public_display['display_username']  = $profileuser->user_login;			$public_display['display_nickname']  = $profileuser->nickname;			if ( !empty($profileuser->first_name) )				$public_display['display_firstname'] = $profileuser->first_name;			if ( !empty($profileuser->last_name) )				$public_display['display_lastname'] = $profileuser->last_name;			if ( !empty($profileuser->first_name) && !empty($profileuser->last_name) ) {				$public_display['display_firstlast'] = $profileuser->first_name . ' ' . $profileuser->last_name;				$public_display['display_lastfirst'] = $profileuser->last_name . ' ' . $profileuser->first_name;			}			if ( !in_array( $profileuser->display_name, $public_display ) ) // Only add this if it isn't duplicated elsewhere				$public_display = array( 'display_displayname' => $profileuser->display_name ) + $public_display;			$public_display = array_map( 'trim', $public_display );			$public_display = array_unique( $public_display );			foreach ( $public_display as $id => $item ) {		?>			<option id="<?php echo $id; ?>" value="<?php echo esc_attr($item); ?>"<?php selected( $profileuser->display_name, $item ); ?>><?php echo $item; ?></option>		<?php			}		?>		</select>	</td></tr></table><h3><?php _e('Contact Info') ?></h3><table class="form-table"><tr>	<th><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="email" id="email" value="<?php echo esc_attr($profileuser->user_email) ?>" class="regular-text" />	<?php	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email && $new_email != $current_user->user_email ) : ?>	<div class="updated inline">	<p><?php printf( __('There is a pending change of your e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_email['newemail'], esc_url( admin_url( 'profile.php?dismiss=' . $current_user->ID . '_new_email' ) ) ); ?></p>	</div>	<?php endif; ?>	</td></tr><tr>	<th><label for="url"><?php _e('Website') ?></label></th>	<td><input type="text" name="url" id="url" value="<?php echo esc_attr($profileuser->user_url) ?>" class="regular-text code" /></td></tr><?php	foreach (_wp_get_user_contactmethods() as $name => $desc) {?><tr>	<th><label for="<?php echo $name; ?>"><?php echo apply_filters('user_'.$name.'_label', $desc); ?></label></th>	<td><input type="text" name="<?php echo $name; ?>" id="<?php echo $name; ?>" value="<?php echo esc_attr($profileuser->$name) ?>" class="regular-text" /></td></tr><?php	}?></table><h3><?php IS_PROFILE_PAGE ? _e('About Yourself') : _e('About the user'); ?></h3><table class="form-table"><tr>	<th><label for="description"><?php _e('Biographical Info'); ?></label></th>	<td><textarea name="description" id="description" rows="5" cols="30"><?php echo esc_html($profileuser->description); ?></textarea><br />	<span class="description"><?php _e('Share a little biographical information to fill out your profile. This may be shown publicly.'); ?></span></td></tr><?php$show_password_fields = apply_filters('show_password_fields', true, $profileuser);if ( $show_password_fields ) :?><tr id="password">	<th><label for="pass1"><?php _e('New Password'); ?></label></th>	<td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("If you would like to change the password type a new one. Otherwise leave this blank."); ?></span><br />		<input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("Type your new password again."); ?></span><br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>	</td></tr><?php endif; ?></table><?php	if ( IS_PROFILE_PAGE )		do_action( 'show_user_profile', $profileuser );	else		do_action( 'edit_user_profile', $profileuser );?><?php if ( count($profileuser->caps) > count($profileuser->roles) && apply_filters('additional_capabilities_display', true, $profileuser) ) { ?><br class="clear" />	<table width="99%" style="border: none;" cellspacing="2" cellpadding="3" class="editform">		<tr>			<th scope="row"><?php _e('Additional Capabilities') ?></th>			<td><?php			$output = '';			foreach ( $profileuser->caps as $cap => $value ) {				if ( !$wp_roles->is_role($cap) ) {					if ( $output != '' )						$output .= ', ';					$output .= $value ? $cap : "Denied: {$cap}";				}			}			echo $output;			?></td>		</tr>	</table><?php } ?><p class="submit">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="<?php echo esc_attr($user_id); ?>" />	<input type="submit" class="button-primary" value="<?php IS_PROFILE_PAGE ? esc_attr_e('Update Profile') : esc_attr_e('Update User') ?>" name="submit" /></p></form></div><?phpbreak;}?><script type="text/javascript" charset="utf-8">	if (window.location.hash == '#password') {		document.getElementById('pass1').focus();	}</script><?phpinclude('./admin-footer.php');?>
<?php/** * Manages WordPress comments * * @package WordPress * @subpackage Comment *//** * Checks whether a comment passes internal checks to be allowed to add. * * If comment moderation is set in the administration, then all comments, * regardless of their type and whitelist will be set to false. If the number of * links exceeds the amount in the administration, then the check fails. If any * of the parameter contents match the blacklist of words, then the check fails. * * If the number of links exceeds the amount in the administration, then the * check fails. If any of the parameter contents match the blacklist of words, * then the check fails. * * If the comment is a trackback and part of the blogroll, then the trackback is * automatically whitelisted. If the comment author was approved before, then * the comment is automatically whitelisted. * * If none of the checks fail, then the failback is to set the check to pass * (return true). * * @since 1.2.0 * @uses $wpdb * * @param string $author Comment Author's name * @param string $email Comment Author's email * @param string $url Comment Author's URL * @param string $comment Comment contents * @param string $user_ip Comment Author's IP address * @param string $user_agent Comment Author's User Agent * @param string $comment_type Comment type, either user submitted comment, *		trackback, or pingback * @return bool Whether the checks passed (true) and the comments should be *		displayed or set to moderated */function check_comment($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type) {	global $wpdb;	if ( 1 == get_option('comment_moderation') )		return false; // If moderation is set to manual	// Check # of external links	if ( $max_links = get_option( 'comment_max_links' ) ) {		$num_links = preg_match_all( '/<a [^>]*href/i', apply_filters( 'comment_text', $comment ), $out );		$num_links = apply_filters( 'comment_max_links_url', $num_links, $url ); // provide for counting of $url as a link		if ( $num_links >= $max_links )			return false;	}	$mod_keys = trim(get_option('moderation_keys'));	if ( !empty($mod_keys) ) {		$words = explode("\n", $mod_keys );		foreach ( (array) $words as $word) {			$word = trim($word);			// Skip empty lines			if ( empty($word) )				continue;			// Do some escaping magic so that '#' chars in the			// spam words don't break things:			$word = preg_quote($word, '#');			$pattern = "#$word#i";			if ( preg_match($pattern, $author) ) return false;			if ( preg_match($pattern, $email) ) return false;			if ( preg_match($pattern, $url) ) return false;			if ( preg_match($pattern, $comment) ) return false;			if ( preg_match($pattern, $user_ip) ) return false;			if ( preg_match($pattern, $user_agent) ) return false;		}	}	// Comment whitelisting:	if ( 1 == get_option('comment_whitelist')) {		if ( 'trackback' == $comment_type || 'pingback' == $comment_type ) { // check if domain is in blogroll			$uri = parse_url($url);			$domain = $uri['host'];			$uri = parse_url( home_url() );			$home_domain = $uri['host'];			if ( $wpdb->get_var($wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_url LIKE (%s) LIMIT 1", '%'.$domain.'%')) || $domain == $home_domain )				return true;			else				return false;		} elseif ( $author != '' && $email != '' ) {			// expected_slashed ($author, $email)			$ok_to_comment = $wpdb->get_var("SELECT comment_approved FROM $wpdb->comments WHERE comment_author = '$author' AND comment_author_email = '$email' and comment_approved = '1' LIMIT 1");			if ( ( 1 == $ok_to_comment ) &&				( empty($mod_keys) || false === strpos( $email, $mod_keys) ) )					return true;			else				return false;		} else {			return false;		}	}	return true;}/** * Retrieve the approved comments for post $post_id. * * @since 2.0.0 * @uses $wpdb * * @param int $post_id The ID of the post * @return array $comments The approved comments */function get_approved_comments($post_id) {	global $wpdb;	return $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_approved = '1' ORDER BY comment_date", $post_id));}/** * Retrieves comment data given a comment ID or comment object. * * If an object is passed then the comment data will be cached and then returned * after being passed through a filter. If the comment is empty, then the global * comment variable will be used, if it is set. * * If the comment is empty, then the global comment variable will be used, if it * is set. * * @since 2.0.0 * @uses $wpdb * * @param object|string|int $comment Comment to retrieve. * @param string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants. * @return object|array|null Depends on $output value. */function &get_comment(&$comment, $output = OBJECT) {	global $wpdb;	$null = null;	if ( empty($comment) ) {		if ( isset($GLOBALS['comment']) )			$_comment = & $GLOBALS['comment'];		else			$_comment = null;	} elseif ( is_object($comment) ) {		wp_cache_add($comment->comment_ID, $comment, 'comment');		$_comment = $comment;	} else {		if ( isset($GLOBALS['comment']) && ($GLOBALS['comment']->comment_ID == $comment) ) {			$_comment = & $GLOBALS['comment'];		} elseif ( ! $_comment = wp_cache_get($comment, 'comment') ) {			$_comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID = %d LIMIT 1", $comment));			if ( ! $_comment )				return $null;			wp_cache_add($_comment->comment_ID, $_comment, 'comment');		}	}	$_comment = apply_filters('get_comment', $_comment);	if ( $output == OBJECT ) {		return $_comment;	} elseif ( $output == ARRAY_A ) {		$__comment = get_object_vars($_comment);		return $__comment;	} elseif ( $output == ARRAY_N ) {		$__comment = array_values(get_object_vars($_comment));		return $__comment;	} else {		return $_comment;	}}/** * Retrieve a list of comments. * * The comment list can be for the blog as a whole or for an individual post. * * The list of comment arguments are 'status', 'orderby', 'comment_date_gmt', * 'order', 'number', 'offset', and 'post_id'. * * @since 2.7.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options to override defaults. * @return array List of comments. */function get_comments( $args = '' ) {	global $wpdb;	$defaults = array(		'author_email' => '',		'ID' => '',		'karma' => '',		'number' => '',		'offset' => '',		'orderby' => '',		'order' => 'DESC',		'parent' => '',		'post_ID' => '',		'post_id' => 0,		'status' => '',		'type' => '',		'user_id' => '',	);	$args = wp_parse_args( $args, $defaults );	extract( $args, EXTR_SKIP );	// $args can be whatever, only use the args defined in defaults to compute the key	$key = md5( serialize( compact(array_keys($defaults)) )  );	$last_changed = wp_cache_get('last_changed', 'comment');	if ( !$last_changed ) {		$last_changed = time();		wp_cache_set('last_changed', $last_changed, 'comment');	}	$cache_key = "get_comments:$key:$last_changed";	if ( $cache = wp_cache_get( $cache_key, 'comment' ) ) {		return $cache;	}	$post_id = absint($post_id);	if ( 'hold' == $status )		$approved = "comment_approved = '0'";	elseif ( 'approve' == $status )		$approved = "comment_approved = '1'";	elseif ( 'spam' == $status )		$approved = "comment_approved = 'spam'";	elseif ( 'trash' == $status )		$approved = "comment_approved = 'trash'";	else		$approved = "( comment_approved = '0' OR comment_approved = '1' )";	$order = ( 'ASC' == $order ) ? 'ASC' : 'DESC';	if ( ! empty( $orderby ) ) {		$ordersby = is_array($orderby) ? $orderby : preg_split('/[,\s]/', $orderby);		$ordersby = array_intersect(			$ordersby,			array(				'comment_agent',				'comment_approved',				'comment_author',				'comment_author_email',				'comment_author_IP',				'comment_author_url',				'comment_content',				'comment_date',				'comment_date_gmt',				'comment_ID',				'comment_karma',				'comment_parent',				'comment_post_ID',				'comment_type',				'user_id',			)		);		$orderby = empty( $ordersby ) ? 'comment_date_gmt' : implode(', ', $ordersby);	} else {		$orderby = 'comment_date_gmt';	}	$number = absint($number);	$offset = absint($offset);	if ( !empty($number) ) {		if ( $offset )			$number = 'LIMIT ' . $offset . ',' . $number;		else			$number = 'LIMIT ' . $number;	} else {		$number = '';	}	$post_where = '';	if ( ! empty($post_id) )		$post_where .= $wpdb->prepare( 'comment_post_ID = %d AND ', $post_id );	if ( '' !== $author_email )		$post_where .= $wpdb->prepare( 'comment_author_email = %s AND ', $author_email );	if ( '' !== $karma )		$post_where .= $wpdb->prepare( 'comment_karma = %d AND ', $karma );	if ( 'comment' == $type )		$post_where .= "comment_type = '' AND ";	elseif ( ! empty( $type ) )		$post_where .= $wpdb->prepare( 'comment_type = %s AND ', $type );	if ( '' !== $parent )		$post_where .= $wpdb->prepare( 'comment_parent = %d AND ', $parent );	if ( '' !== $user_id )		$post_where .= $wpdb->prepare( 'user_id = %d AND ', $user_id );	$comments = $wpdb->get_results( "SELECT * FROM $wpdb->comments WHERE $post_where $approved ORDER BY $orderby $order $number" );	wp_cache_add( $cache_key, $comments, 'comment' );	return $comments;}/** * Retrieve all of the WordPress supported comment statuses. * * Comments have a limited set of valid status values, this provides the comment * status values and descriptions. * * @package WordPress * @subpackage Post * @since 2.7.0 * * @return array List of comment statuses. */function get_comment_statuses( ) {	$status = array(		'hold'		=> __('Unapproved'),		/* translators: comment status  */		'approve'	=> _x('Approved', 'adjective'),		/* translators: comment status */		'spam'		=> _x('Spam', 'adjective'),	);	return $status;}/** * The date the last comment was modified. * * @since 1.5.0 * @uses $wpdb * @global array $cache_lastcommentmodified * * @param string $timezone Which timezone to use in reference to 'gmt', 'blog', *		or 'server' locations. * @return string Last comment modified date. */function get_lastcommentmodified($timezone = 'server') {	global $cache_lastcommentmodified, $wpdb;	if ( isset($cache_lastcommentmodified[$timezone]) )		return $cache_lastcommentmodified[$timezone];	$add_seconds_server = date('Z');	switch ( strtolower($timezone)) {		case 'gmt':			$lastcommentmodified = $wpdb->get_var("SELECT comment_date_gmt FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1");			break;		case 'blog':			$lastcommentmodified = $wpdb->get_var("SELECT comment_date FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1");			break;		case 'server':			$lastcommentmodified = $wpdb->get_var($wpdb->prepare("SELECT DATE_ADD(comment_date_gmt, INTERVAL %s SECOND) FROM $wpdb->comments WHERE comment_approved = '1' ORDER BY comment_date_gmt DESC LIMIT 1", $add_seconds_server));			break;	}	$cache_lastcommentmodified[$timezone] = $lastcommentmodified;	return $lastcommentmodified;}/** * The amount of comments in a post or total comments. * * A lot like {@link wp_count_comments()}, in that they both return comment * stats (albeit with different types). The {@link wp_count_comments()} actual * caches, but this function does not. * * @since 2.0.0 * @uses $wpdb * * @param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide. * @return array The amount of spam, approved, awaiting moderation, and total comments. */function get_comment_count( $post_id = 0 ) {	global $wpdb;	$post_id = (int) $post_id;	$where = '';	if ( $post_id > 0 ) {		$where = $wpdb->prepare("WHERE comment_post_ID = %d", $post_id);	}	$totals = (array) $wpdb->get_results("		SELECT comment_approved, COUNT( * ) AS total		FROM {$wpdb->comments}		{$where}		GROUP BY comment_approved	", ARRAY_A);	$comment_count = array(		"approved"              => 0,		"awaiting_moderation"   => 0,		"spam"                  => 0,		"total_comments"        => 0	);	foreach ( $totals as $row ) {		switch ( $row['comment_approved'] ) {			case 'spam':				$comment_count['spam'] = $row['total'];				$comment_count["total_comments"] += $row['total'];				break;			case 1:				$comment_count['approved'] = $row['total'];				$comment_count['total_comments'] += $row['total'];				break;			case 0:				$comment_count['awaiting_moderation'] = $row['total'];				$comment_count['total_comments'] += $row['total'];				break;			default:				break;		}	}	return $comment_count;}//// Comment meta functions///** * Add meta data field to a comment. * * @since 2.9.0 * @uses add_metadata * @link http://codex.wordpress.org/Function_Reference/add_comment_meta * * @param int $comment_id Comment ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_comment_meta($comment_id, $meta_key, $meta_value, $unique = false) {	return add_metadata('comment', $comment_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a comment. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 2.9.0 * @uses delete_metadata * @link http://codex.wordpress.org/Function_Reference/delete_comment_meta * * @param int $comment_id comment ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_comment_meta($comment_id, $meta_key, $meta_value = '') {	return delete_metadata('comment', $comment_id, $meta_key, $meta_value);}/** * Retrieve comment meta field for a comment. * * @since 2.9.0 * @uses get_metadata * @link http://codex.wordpress.org/Function_Reference/get_comment_meta * * @param int $comment_id Comment ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_comment_meta($comment_id, $key, $single = false) {	return get_metadata('comment', $comment_id, $key, $single);}/** * Update comment meta field based on comment ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and comment ID. * * If the meta field for the comment does not exist, it will be added. * * @since 2.9.0 * @uses update_metadata * @link http://codex.wordpress.org/Function_Reference/update_comment_meta * * @param int $comment_id Comment ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_comment_meta($comment_id, $meta_key, $meta_value, $prev_value = '') {	return update_metadata('comment', $comment_id, $meta_key, $meta_value, $prev_value);}/** * Sanitizes the cookies sent to the user already. * * Will only do anything if the cookies have already been created for the user. * Mostly used after cookies had been sent to use elsewhere. * * @since 2.0.4 */function sanitize_comment_cookies() {	if ( isset($_COOKIE['comment_author_'.COOKIEHASH]) ) {		$comment_author = apply_filters('pre_comment_author_name', $_COOKIE['comment_author_'.COOKIEHASH]);		$comment_author = stripslashes($comment_author);		$comment_author = esc_attr($comment_author);		$_COOKIE['comment_author_'.COOKIEHASH] = $comment_author;	}	if ( isset($_COOKIE['comment_author_email_'.COOKIEHASH]) ) {		$comment_author_email = apply_filters('pre_comment_author_email', $_COOKIE['comment_author_email_'.COOKIEHASH]);		$comment_author_email = stripslashes($comment_author_email);		$comment_author_email = esc_attr($comment_author_email);		$_COOKIE['comment_author_email_'.COOKIEHASH] = $comment_author_email;	}	if ( isset($_COOKIE['comment_author_url_'.COOKIEHASH]) ) {		$comment_author_url = apply_filters('pre_comment_author_url', $_COOKIE['comment_author_url_'.COOKIEHASH]);		$comment_author_url = stripslashes($comment_author_url);		$_COOKIE['comment_author_url_'.COOKIEHASH] = $comment_author_url;	}}/** * Validates whether this comment is allowed to be made. * * @since 2.0.0 * @uses $wpdb * @uses apply_filters() Calls 'pre_comment_approved' hook on the type of comment * @uses apply_filters() Calls 'comment_duplicate_trigger' hook on commentdata. * @uses do_action() Calls 'check_comment_flood' hook on $comment_author_IP, $comment_author_email, and $comment_date_gmt * * @param array $commentdata Contains information on the comment * @return mixed Signifies the approval status (0|1|'spam') */function wp_allow_comment($commentdata) {	global $wpdb;	extract($commentdata, EXTR_SKIP);	// Simple duplicate check	// expected_slashed ($comment_post_ID, $comment_author, $comment_author_email, $comment_content)	$dupe = "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = '$comment_post_ID' AND comment_approved != 'trash' AND ( comment_author = '$comment_author' ";	if ( $comment_author_email )		$dupe .= "OR comment_author_email = '$comment_author_email' ";	$dupe .= ") AND comment_content = '$comment_content' LIMIT 1";	if ( $wpdb->get_var($dupe) ) {		do_action( 'comment_duplicate_trigger', $commentdata );		if ( defined('DOING_AJAX') )			die( __('Duplicate comment detected; it looks as though you&#8217;ve already said that!') );		wp_die( __('Duplicate comment detected; it looks as though you&#8217;ve already said that!') );	}	do_action( 'check_comment_flood', $comment_author_IP, $comment_author_email, $comment_date_gmt );	if ( isset($user_id) && $user_id) {		$userdata = get_userdata($user_id);		$user = new WP_User($user_id);		$post_author = $wpdb->get_var($wpdb->prepare("SELECT post_author FROM $wpdb->posts WHERE ID = %d LIMIT 1", $comment_post_ID));	}	if ( isset($userdata) && ( $user_id == $post_author || $user->has_cap('moderate_comments') ) ) {		// The author and the admins get respect.		$approved = 1;	 } else {		// Everyone else's comments will be checked.		if ( check_comment($comment_author, $comment_author_email, $comment_author_url, $comment_content, $comment_author_IP, $comment_agent, $comment_type) )			$approved = 1;		else			$approved = 0;		if ( wp_blacklist_check($comment_author, $comment_author_email, $comment_author_url, $comment_content, $comment_author_IP, $comment_agent) )			$approved = 'spam';	}	$approved = apply_filters('pre_comment_approved', $approved);	return $approved;}/** * Check whether comment flooding is occurring. * * Won't run, if current user can manage options, so to not block * administrators. * * @since 2.3.0 * @uses $wpdb * @uses apply_filters() Calls 'comment_flood_filter' filter with first *		parameter false, last comment timestamp, new comment timestamp. * @uses do_action() Calls 'comment_flood_trigger' action with parameters with *		last comment timestamp and new comment timestamp. * * @param string $ip Comment IP. * @param string $email Comment author email address. * @param string $date MySQL time string. */function check_comment_flood_db( $ip, $email, $date ) {	global $wpdb;	if ( current_user_can( 'manage_options' ) )		return; // don't throttle admins	$hour_ago = gmdate( 'Y-m-d H:i:s', time() - 3600 );	if ( $lasttime = $wpdb->get_var( $wpdb->prepare( "SELECT `comment_date_gmt` FROM `$wpdb->comments` WHERE `comment_date_gmt` >= %s AND ( `comment_author_IP` = %s OR `comment_author_email` = %s ) ORDER BY `comment_date_gmt` DESC LIMIT 1", $hour_ago, $ip, $email ) ) ) {		$time_lastcomment = mysql2date('U', $lasttime, false);		$time_newcomment  = mysql2date('U', $date, false);		$flood_die = apply_filters('comment_flood_filter', false, $time_lastcomment, $time_newcomment);		if ( $flood_die ) {			do_action('comment_flood_trigger', $time_lastcomment, $time_newcomment);			if ( defined('DOING_AJAX') )				die( __('You are posting comments too quickly.  Slow down.') );			wp_die( __('You are posting comments too quickly.  Slow down.'), '', array('response' => 403) );		}	}}/** * Separates an array of comments into an array keyed by comment_type. * * @since 2.7.0 * * @param array $comments Array of comments * @return array Array of comments keyed by comment_type. */function &separate_comments(&$comments) {	$comments_by_type = array('comment' => array(), 'trackback' => array(), 'pingback' => array(), 'pings' => array());	$count = count($comments);	for ( $i = 0; $i < $count; $i++ ) {		$type = $comments[$i]->comment_type;		if ( empty($type) )			$type = 'comment';		$comments_by_type[$type][] = &$comments[$i];		if ( 'trackback' == $type || 'pingback' == $type )			$comments_by_type['pings'][] = &$comments[$i];	}	return $comments_by_type;}/** * Calculate the total number of comment pages. * * @since 2.7.0 * @uses get_query_var() Used to fill in the default for $per_page parameter. * @uses get_option() Used to fill in defaults for parameters. * @uses Walker_Comment * * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments * @param int $per_page Optional comments per page. * @param boolean $threaded Optional control over flat or threaded comments. * @return int Number of comment pages. */function get_comment_pages_count( $comments = null, $per_page = null, $threaded = null ) {	global $wp_query;	if ( null === $comments && null === $per_page && null === $threaded && !empty($wp_query->max_num_comment_pages) )		return $wp_query->max_num_comment_pages;	if ( !$comments || !is_array($comments) )		$comments = $wp_query->comments;	if ( empty($comments) )		return 0;	if ( !isset($per_page) )		$per_page = (int) get_query_var('comments_per_page');	if ( 0 === $per_page )		$per_page = (int) get_option('comments_per_page');	if ( 0 === $per_page )		return 1;	if ( !isset($threaded) )		$threaded = get_option('thread_comments');	if ( $threaded ) {		$walker = new Walker_Comment;		$count = ceil( $walker->get_number_of_root_elements( $comments ) / $per_page );	} else {		$count = ceil( count( $comments ) / $per_page );	}	return $count;}/** * Calculate what page number a comment will appear on for comment paging. * * @since 2.7.0 * @uses get_comment() Gets the full comment of the $comment_ID parameter. * @uses get_option() Get various settings to control function and defaults. * @uses get_page_of_comment() Used to loop up to top level comment. * * @param int $comment_ID Comment ID. * @param array $args Optional args. * @return int|null Comment page number or null on error. */function get_page_of_comment( $comment_ID, $args = array() ) {	global $wpdb;	if ( !$comment = get_comment( $comment_ID ) )		return;	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_query_var('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] < 1 )		return 1;	if ( '' === $args['max_depth'] ) {		if ( get_option('thread_comments') )			$args['max_depth'] = get_option('thread_comments_depth');		else			$args['max_depth'] = -1;	}	// Find this comment's top level parent if threading is enabled	if ( $args['max_depth'] > 1 && 0 != $comment->comment_parent )		return get_page_of_comment( $comment->comment_parent, $args );	$allowedtypes = array(		'comment' => '',		'pingback' => 'pingback',		'trackback' => 'trackback',	);	$comtypewhere = ( 'all' != $args['type'] && isset($allowedtypes[$args['type']]) ) ? " AND comment_type = '" . $allowedtypes[$args['type']] . "'" : '';	// Count comments older than this one	$oldercoms = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(comment_ID) FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_parent = 0 AND comment_approved = '1' AND comment_date_gmt < '%s'" . $comtypewhere, $comment->comment_post_ID, $comment->comment_date_gmt ) );	// No older comments? Then it's page #1.	if ( 0 == $oldercoms )		return 1;	// Divide comments older than this one by comments per page to get this comment's page number	return ceil( ( $oldercoms + 1 ) / $args['per_page'] );}/** * Does comment contain blacklisted characters or words. * * @since 1.5.0 * @uses do_action() Calls 'wp_blacklist_check' hook for all parameters. * * @param string $author The author of the comment * @param string $email The email of the comment * @param string $url The url used in the comment * @param string $comment The comment content * @param string $user_ip The comment author IP address * @param string $user_agent The author's browser user agent * @return bool True if comment contains blacklisted content, false if comment does not */function wp_blacklist_check($author, $email, $url, $comment, $user_ip, $user_agent) {	do_action('wp_blacklist_check', $author, $email, $url, $comment, $user_ip, $user_agent);	$mod_keys = trim( get_option('blacklist_keys') );	if ( '' == $mod_keys )		return false; // If moderation keys are empty	$words = explode("\n", $mod_keys );	foreach ( (array) $words as $word ) {		$word = trim($word);		// Skip empty lines		if ( empty($word) ) { continue; }		// Do some escaping magic so that '#' chars in the		// spam words don't break things:		$word = preg_quote($word, '#');		$pattern = "#$word#i";		if (			   preg_match($pattern, $author)			|| preg_match($pattern, $email)			|| preg_match($pattern, $url)			|| preg_match($pattern, $comment)			|| preg_match($pattern, $user_ip)			|| preg_match($pattern, $user_agent)		 )			return true;	}	return false;}/** * Retrieve total comments for blog or single post. * * The properties of the returned object contain the 'moderated', 'approved', * and spam comments for either the entire blog or single post. Those properties * contain the amount of comments that match the status. The 'total_comments' * property contains the integer of total comments. * * The comment stats are cached and then retrieved, if they already exist in the * cache. * * @since 2.5.0 * * @param int $post_id Optional. Post ID. * @return object Comment stats. */function wp_count_comments( $post_id = 0 ) {	global $wpdb;	$post_id = (int) $post_id;	$stats = apply_filters('wp_count_comments', array(), $post_id);	if ( !empty($stats) )		return $stats;	$count = wp_cache_get("comments-{$post_id}", 'counts');	if ( false !== $count )		return $count;	$where = '';	if ( $post_id > 0 )		$where = $wpdb->prepare( "WHERE comment_post_ID = %d", $post_id );	$count = $wpdb->get_results( "SELECT comment_approved, COUNT( * ) AS num_comments FROM {$wpdb->comments} {$where} GROUP BY comment_approved", ARRAY_A );	$total = 0;	$approved = array('0' => 'moderated', '1' => 'approved', 'spam' => 'spam', 'trash' => 'trash', 'post-trashed' => 'post-trashed');	$known_types = array_keys( $approved );	foreach ( (array) $count as $row ) {		// Don't count post-trashed toward totals		if ( 'post-trashed' != $row['comment_approved'] && 'trash' != $row['comment_approved'] )			$total += $row['num_comments'];		if ( in_array( $row['comment_approved'], $known_types ) )			$stats[$approved[$row['comment_approved']]] = $row['num_comments'];	}	$stats['total_comments'] = $total;	foreach ( $approved as $key ) {		if ( empty($stats[$key]) )			$stats[$key] = 0;	}	$stats = (object) $stats;	wp_cache_set("comments-{$post_id}", $stats, 'counts');	return $stats;}/** * Trashes or deletes a comment. * * The comment is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * The post comment count will be updated if the comment was approved and has a * post ID available. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_comment' hook on comment ID * @uses do_action() Calls 'deleted_comment' hook on comment ID after deletion, on success * @uses do_action() Calls 'wp_set_comment_status' hook on comment ID with 'delete' set for the second parameter * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param int $comment_id Comment ID * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return bool False if delete comment query failure, true on success. */function wp_delete_comment($comment_id, $force_delete = false) {	global $wpdb;	if (!$comment = get_comment($comment_id))		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && !in_array( wp_get_comment_status($comment_id), array( 'trash', 'spam' ) ) )		return wp_trash_comment($comment_id);	do_action('delete_comment', $comment_id);	// Move children up a level.	$children = $wpdb->get_col( $wpdb->prepare("SELECT comment_ID FROM $wpdb->comments WHERE comment_parent = %d", $comment_id) );	if ( !empty($children) ) {		$wpdb->update($wpdb->comments, array('comment_parent' => $comment->comment_parent), array('comment_parent' => $comment_id));		clean_comment_cache($children);	}	// Delete metadata	$meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->commentmeta WHERE comment_id = %d ", $comment_id ) );	if ( !empty($meta_ids) ) {		do_action( 'delete_commentmeta', $meta_ids );		$in_meta_ids = "'" . implode("', '", $meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->commentmeta WHERE meta_id IN ($in_meta_ids)" );		do_action( 'deleted_commentmeta', $meta_ids );	}	if ( ! $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->comments WHERE comment_ID = %d LIMIT 1", $comment_id) ) )		return false;	do_action('deleted_comment', $comment_id);	$post_id = $comment->comment_post_ID;	if ( $post_id && $comment->comment_approved == 1 )		wp_update_comment_count($post_id);	clean_comment_cache($comment_id);	do_action('wp_set_comment_status', $comment_id, 'delete');	wp_transition_comment_status('delete', $comment->comment_approved, $comment);	return true;}/** * Moves a comment to the Trash * * If trash is disabled, comment is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_comment' before trashing * @uses do_action() on 'trashed_comment' after trashing * @uses wp_delete_comment() if trash is disabled * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_trash_comment($comment_id) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_comment($comment_id, true);	if ( !$comment = get_comment($comment_id) )		return false;	do_action('trash_comment', $comment_id);	if ( wp_set_comment_status($comment_id, 'trash') ) {		add_comment_meta($comment_id, '_wp_trash_meta_status', $comment->comment_approved);		add_comment_meta($comment_id, '_wp_trash_meta_time', time() );		do_action('trashed_comment', $comment_id);		return true;	}	return false;}/** * Removes a comment from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_comment' before untrashing * @uses do_action() on 'untrashed_comment' after untrashing * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_untrash_comment($comment_id) {	if ( ! (int)$comment_id )		return false;	do_action('untrash_comment', $comment_id);	$status = (string) get_comment_meta($comment_id, '_wp_trash_meta_status', true);	if ( empty($status) )		$status = '0';	if ( wp_set_comment_status($comment_id, $status) ) {		delete_comment_meta($comment_id, '_wp_trash_meta_time');		delete_comment_meta($comment_id, '_wp_trash_meta_status');		do_action('untrashed_comment', $comment_id);		return true;	}	return false;}/** * Marks a comment as Spam * * @since 2.9.0 * @uses do_action() on 'spam_comment' before spamming * @uses do_action() on 'spammed_comment' after spamming * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_spam_comment($comment_id) {	if ( !$comment = get_comment($comment_id) )		return false;	do_action('spam_comment', $comment_id);	if ( wp_set_comment_status($comment_id, 'spam') ) {		add_comment_meta($comment_id, '_wp_trash_meta_status', $comment->comment_approved);		do_action('spammed_comment', $comment_id);		return true;	}	return false;}/** * Removes a comment from the Spam * * @since 2.9.0 * @uses do_action() on 'unspam_comment' before unspamming * @uses do_action() on 'unspammed_comment' after unspamming * * @param int $comment_id Comment ID. * @return mixed False on failure */function wp_unspam_comment($comment_id) {	if ( ! (int)$comment_id )		return false;	do_action('unspam_comment', $comment_id);	$status = (string) get_comment_meta($comment_id, '_wp_trash_meta_status', true);	if ( empty($status) )		$status = '0';	if ( wp_set_comment_status($comment_id, $status) ) {		delete_comment_meta($comment_id, '_wp_trash_meta_status');		do_action('unspammed_comment', $comment_id);		return true;	}	return false;}/** * The status of a comment by ID. * * @since 1.0.0 * * @param int $comment_id Comment ID * @return string|bool Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure. */function wp_get_comment_status($comment_id) {	$comment = get_comment($comment_id);	if ( !$comment )		return false;	$approved = $comment->comment_approved;	if ( $approved == NULL )		return false;	elseif ( $approved == '1' )		return 'approved';	elseif ( $approved == '0' )		return 'unapproved';	elseif ( $approved == 'spam' )		return 'spam';	elseif ( $approved == 'trash' )		return 'trash';	else		return false;}/** * Call hooks for when a comment status transition occurs. * * Calls hooks for comment status transitions. If the new comment status is not the same * as the previous comment status, then two hooks will be ran, the first is * 'transition_comment_status' with new status, old status, and comment data. The * next action called is 'comment_OLDSTATUS_to_NEWSTATUS' the NEWSTATUS is the * $new_status parameter and the OLDSTATUS is $old_status parameter; it has the * comment data. * * The final action will run whether or not the comment statuses are the same. The * action is named 'comment_NEWSTATUS_COMMENTTYPE', NEWSTATUS is from the $new_status * parameter and COMMENTTYPE is comment_type comment data. * * @since 2.7.0 * * @param string $new_status New comment status. * @param string $old_status Previous comment status. * @param object $comment Comment data. */function wp_transition_comment_status($new_status, $old_status, $comment) {	// Translate raw statuses to human readable formats for the hooks	// This is not a complete list of comment status, it's only the ones that need to be renamed	$comment_statuses = array(		0         => 'unapproved',		'hold'    => 'unapproved', // wp_set_comment_status() uses "hold"		1         => 'approved',		'approve' => 'approved', // wp_set_comment_status() uses "approve"	);	if ( isset($comment_statuses[$new_status]) ) $new_status = $comment_statuses[$new_status];	if ( isset($comment_statuses[$old_status]) ) $old_status = $comment_statuses[$old_status];	// Call the hooks	if ( $new_status != $old_status ) {		do_action('transition_comment_status', $new_status, $old_status, $comment);		do_action("comment_${old_status}_to_$new_status", $comment);	}	do_action("comment_${new_status}_$comment->comment_type", $comment->comment_ID, $comment);}/** * Get current commenter's name, email, and URL. * * Expects cookies content to already be sanitized. User of this function might * wish to recheck the returned array for validity. * * @see sanitize_comment_cookies() Use to sanitize cookies * * @since 2.0.4 * * @return array Comment author, email, url respectively. */function wp_get_current_commenter() {	// Cookies should already be sanitized.	$comment_author = '';	if ( isset($_COOKIE['comment_author_'.COOKIEHASH]) )		$comment_author = $_COOKIE['comment_author_'.COOKIEHASH];	$comment_author_email = '';	if ( isset($_COOKIE['comment_author_email_'.COOKIEHASH]) )		$comment_author_email = $_COOKIE['comment_author_email_'.COOKIEHASH];	$comment_author_url = '';	if ( isset($_COOKIE['comment_author_url_'.COOKIEHASH]) )		$comment_author_url = $_COOKIE['comment_author_url_'.COOKIEHASH];	return compact('comment_author', 'comment_author_email', 'comment_author_url');}/** * Inserts a comment to the database. * * The available comment data key names are 'comment_author_IP', 'comment_date', * 'comment_date_gmt', 'comment_parent', 'comment_approved', and 'user_id'. * * @since 2.0.0 * @uses $wpdb * * @param array $commentdata Contains information on the comment. * @return int The new comment's ID. */function wp_insert_comment($commentdata) {	global $wpdb;	extract(stripslashes_deep($commentdata), EXTR_SKIP);	if ( ! isset($comment_author_IP) )		$comment_author_IP = '';	if ( ! isset($comment_date) )		$comment_date = current_time('mysql');	if ( ! isset($comment_date_gmt) )		$comment_date_gmt = get_gmt_from_date($comment_date);	if ( ! isset($comment_parent) )		$comment_parent = 0;	if ( ! isset($comment_approved) )		$comment_approved = 1;	if ( ! isset($comment_karma) )		$comment_karma = 0;	if ( ! isset($user_id) )		$user_id = 0;	if ( ! isset($comment_type) )		$comment_type = '';	$data = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_author_IP', 'comment_date', 'comment_date_gmt', 'comment_content', 'comment_karma', 'comment_approved', 'comment_agent', 'comment_type', 'comment_parent', 'user_id');	$wpdb->insert($wpdb->comments, $data);	$id = (int) $wpdb->insert_id;	if ( $comment_approved == 1 )		wp_update_comment_count($comment_post_ID);	$comment = get_comment($id);	do_action('wp_insert_comment', $id, $comment);	return $id;}/** * Filters and sanitizes comment data. * * Sets the comment data 'filtered' field to true when finished. This can be * checked as to whether the comment should be filtered and to keep from * filtering the same comment more than once. * * @since 2.0.0 * @uses apply_filters() Calls 'pre_user_id' hook on comment author's user ID * @uses apply_filters() Calls 'pre_comment_user_agent' hook on comment author's user agent * @uses apply_filters() Calls 'pre_comment_author_name' hook on comment author's name * @uses apply_filters() Calls 'pre_comment_content' hook on the comment's content * @uses apply_filters() Calls 'pre_comment_user_ip' hook on comment author's IP * @uses apply_filters() Calls 'pre_comment_author_url' hook on comment author's URL * @uses apply_filters() Calls 'pre_comment_author_email' hook on comment author's email address * * @param array $commentdata Contains information on the comment. * @return array Parsed comment information. */function wp_filter_comment($commentdata) {	if ( isset($commentdata['user_ID']) )		$commentdata['user_id'] = apply_filters('pre_user_id', $commentdata['user_ID']);	elseif ( isset($commentdata['user_id']) )		$commentdata['user_id'] = apply_filters('pre_user_id', $commentdata['user_id']);	$commentdata['comment_agent']        = apply_filters('pre_comment_user_agent', ( isset( $commentdata['comment_agent'] ) ? $commentdata['comment_agent'] : '' ) );	$commentdata['comment_author']       = apply_filters('pre_comment_author_name', $commentdata['comment_author']);	$commentdata['comment_content']      = apply_filters('pre_comment_content', $commentdata['comment_content']);	$commentdata['comment_author_IP']    = apply_filters('pre_comment_user_ip', $commentdata['comment_author_IP']);	$commentdata['comment_author_url']   = apply_filters('pre_comment_author_url', $commentdata['comment_author_url']);	$commentdata['comment_author_email'] = apply_filters('pre_comment_author_email', $commentdata['comment_author_email']);	$commentdata['filtered'] = true;	return $commentdata;}/** * Whether comment should be blocked because of comment flood. * * @since 2.1.0 * * @param bool $block Whether plugin has already blocked comment. * @param int $time_lastcomment Timestamp for last comment. * @param int $time_newcomment Timestamp for new comment. * @return bool Whether comment should be blocked. */function wp_throttle_comment_flood($block, $time_lastcomment, $time_newcomment) {	if ( $block ) // a plugin has already blocked... we'll let that decision stand		return $block;	if ( ($time_newcomment - $time_lastcomment) < 15 )		return true;	return false;}/** * Adds a new comment to the database. * * Filters new comment to ensure that the fields are sanitized and valid before * inserting comment into database. Calls 'comment_post' action with comment ID * and whether comment is approved by WordPress. Also has 'preprocess_comment' * filter for processing the comment data before the function handles it. * * @since 1.5.0 * @uses apply_filters() Calls 'preprocess_comment' hook on $commentdata parameter array before processing * @uses do_action() Calls 'comment_post' hook on $comment_ID returned from adding the comment and if the comment was approved. * @uses wp_filter_comment() Used to filter comment before adding comment. * @uses wp_allow_comment() checks to see if comment is approved. * @uses wp_insert_comment() Does the actual comment insertion to the database. * * @param array $commentdata Contains information on the comment. * @return int The ID of the comment after adding. */function wp_new_comment( $commentdata ) {	$commentdata = apply_filters('preprocess_comment', $commentdata);	$commentdata['comment_post_ID'] = (int) $commentdata['comment_post_ID'];	if ( isset($commentdata['user_ID']) )		$commentdata['user_id'] = $commentdata['user_ID'] = (int) $commentdata['user_ID'];	elseif ( isset($commentdata['user_id']) )		$commentdata['user_id'] = (int) $commentdata['user_id'];	$commentdata['comment_parent'] = isset($commentdata['comment_parent']) ? absint($commentdata['comment_parent']) : 0;	$parent_status = ( 0 < $commentdata['comment_parent'] ) ? wp_get_comment_status($commentdata['comment_parent']) : '';	$commentdata['comment_parent'] = ( 'approved' == $parent_status || 'unapproved' == $parent_status ) ? $commentdata['comment_parent'] : 0;	$commentdata['comment_author_IP'] = preg_replace( '/[^0-9a-fA-F:., ]/', '',$_SERVER['REMOTE_ADDR'] );	$commentdata['comment_agent']     = substr($_SERVER['HTTP_USER_AGENT'], 0, 254);	$commentdata['comment_date']     = current_time('mysql');	$commentdata['comment_date_gmt'] = current_time('mysql', 1);	$commentdata = wp_filter_comment($commentdata);	$commentdata['comment_approved'] = wp_allow_comment($commentdata);	$comment_ID = wp_insert_comment($commentdata);	do_action('comment_post', $comment_ID, $commentdata['comment_approved']);	if ( 'spam' !== $commentdata['comment_approved'] ) { // If it's spam save it silently for later crunching		if ( '0' == $commentdata['comment_approved'] )			wp_notify_moderator($comment_ID);		$post = &get_post($commentdata['comment_post_ID']); // Don't notify if it's your own comment		if ( get_option('comments_notify') && $commentdata['comment_approved'] && ( ! isset( $commentdata['user_id'] ) || $post->post_author != $commentdata['user_id'] ) )			wp_notify_postauthor($comment_ID, empty( $commentdata['comment_type'] ) ? $commentdata['comment_type'] : '' );	}	return $comment_ID;}/** * Sets the status of a comment. * * The 'wp_set_comment_status' action is called after the comment is handled and * will only be called, if the comment status is either 'hold', 'approve', or * 'spam'. If the comment status is not in the list, then false is returned and * if the status is 'delete', then the comment is deleted without calling the * action. * * @since 1.0.0 * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param int $comment_id Comment ID. * @param string $comment_status New comment status, either 'hold', 'approve', 'spam', or 'delete'. * @param bool $wp_error Whether to return a WP_Error object if there is a failure. Default is false. * @return bool False on failure or deletion and true on success. */function wp_set_comment_status($comment_id, $comment_status, $wp_error = false) {	global $wpdb;	$status = '0';	switch ( $comment_status ) {		case 'hold':		case '0':			$status = '0';			break;		case 'approve':		case '1':			$status = '1';			if ( get_option('comments_notify') ) {				$comment = get_comment($comment_id);				wp_notify_postauthor($comment_id, $comment->comment_type);			}			break;		case 'spam':			$status = 'spam';			break;		case 'trash':			$status = 'trash';			break;		default:			return false;	}	$comment_old = wp_clone(get_comment($comment_id));	if ( !$wpdb->update( $wpdb->comments, array('comment_approved' => $status), array('comment_ID' => $comment_id) ) ) {		if ( $wp_error )			return new WP_Error('db_update_error', __('Could not update comment status'), $wpdb->last_error);		else			return false;	}	clean_comment_cache($comment_id);	$comment = get_comment($comment_id);	do_action('wp_set_comment_status', $comment_id, $comment_status);	wp_transition_comment_status($comment_status, $comment_old->comment_approved, $comment);	wp_update_comment_count($comment->comment_post_ID);	return true;}/** * Updates an existing comment in the database. * * Filters the comment and makes sure certain fields are valid before updating. * * @since 2.0.0 * @uses $wpdb * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object * * @param array $commentarr Contains information on the comment. * @return int Comment was updated if value is 1, or was not updated if value is 0. */function wp_update_comment($commentarr) {	global $wpdb;	// First, get all of the original fields	$comment = get_comment($commentarr['comment_ID'], ARRAY_A);	// Escape data pulled from DB.	$comment = esc_sql($comment);	$old_status = $comment['comment_approved'];	// Merge old and new fields with new fields overwriting old ones.	$commentarr = array_merge($comment, $commentarr);	$commentarr = wp_filter_comment( $commentarr );	// Now extract the merged array.	extract(stripslashes_deep($commentarr), EXTR_SKIP);	$comment_content = apply_filters('comment_save_pre', $comment_content);	$comment_date_gmt = get_gmt_from_date($comment_date);	if ( !isset($comment_approved) )		$comment_approved = 1;	else if ( 'hold' == $comment_approved )		$comment_approved = 0;	else if ( 'approve' == $comment_approved )		$comment_approved = 1;	$data = compact('comment_content', 'comment_author', 'comment_author_email', 'comment_approved', 'comment_karma', 'comment_author_url', 'comment_date', 'comment_date_gmt');	$rval = $wpdb->update( $wpdb->comments, $data, compact( 'comment_ID' ) );	clean_comment_cache($comment_ID);	wp_update_comment_count($comment_post_ID);	do_action('edit_comment', $comment_ID);	$comment = get_comment($comment_ID);	wp_transition_comment_status($comment->comment_approved, $old_status, $comment);	return $rval;}/** * Whether to defer comment counting. * * When setting $defer to true, all post comment counts will not be updated * until $defer is set to false. When $defer is set to false, then all * previously deferred updated post comment counts will then be automatically * updated without having to call wp_update_comment_count() after. * * @since 2.5.0 * @staticvar bool $_defer * * @param bool $defer * @return unknown */function wp_defer_comment_counting($defer=null) {	static $_defer = false;	if ( is_bool($defer) ) {		$_defer = $defer;		// flush any deferred counts		if ( !$defer )			wp_update_comment_count( null, true );	}	return $_defer;}/** * Updates the comment count for post(s). * * When $do_deferred is false (is by default) and the comments have been set to * be deferred, the post_id will be added to a queue, which will be updated at a * later date and only updated once per post ID. * * If the comments have not be set up to be deferred, then the post will be * updated. When $do_deferred is set to true, then all previous deferred post * IDs will be updated along with the current $post_id. * * @since 2.1.0 * @see wp_update_comment_count_now() For what could cause a false return value * * @param int $post_id Post ID * @param bool $do_deferred Whether to process previously deferred post comment counts * @return bool True on success, false on failure */function wp_update_comment_count($post_id, $do_deferred=false) {	static $_deferred = array();	if ( $do_deferred ) {		$_deferred = array_unique($_deferred);		foreach ( $_deferred as $i => $_post_id ) {			wp_update_comment_count_now($_post_id);			unset( $_deferred[$i] ); /** @todo Move this outside of the foreach and reset $_deferred to an array instead */		}	}	if ( wp_defer_comment_counting() ) {		$_deferred[] = $post_id;		return true;	}	elseif ( $post_id ) {		return wp_update_comment_count_now($post_id);	}}/** * Updates the comment count for the post. * * @since 2.5.0 * @uses $wpdb * @uses do_action() Calls 'wp_update_comment_count' hook on $post_id, $new, and $old * @uses do_action() Calls 'edit_posts' hook on $post_id and $post * * @param int $post_id Post ID * @return bool False on '0' $post_id or if post with ID does not exist. True on success. */function wp_update_comment_count_now($post_id) {	global $wpdb;	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( !$post = get_post($post_id) )		return false;	$old = (int) $post->comment_count;	$new = (int) $wpdb->get_var( $wpdb->prepare("SELECT COUNT(*) FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_approved = '1'", $post_id) );	$wpdb->update( $wpdb->posts, array('comment_count' => $new), array('ID' => $post_id) );	if ( 'page' == $post->post_type )		clean_page_cache( $post_id );	else		clean_post_cache( $post_id );	do_action('wp_update_comment_count', $post_id, $new, $old);	do_action('edit_post', $post_id, $post);	return true;}//// Ping and trackback functions.///** * Finds a pingback server URI based on the given URL. * * Checks the HTML for the rel="pingback" link and x-pingback headers. It does * a check for the x-pingback headers first and returns that, if available. The * check for the rel="pingback" has more overhead than just the header. * * @since 1.5.0 * * @param string $url URL to ping. * @param int $deprecated Not Used. * @return bool|string False on failure, string containing URI on success. */function discover_pingback_server_uri( $url, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.7' );	$pingback_str_dquote = 'rel="pingback"';	$pingback_str_squote = 'rel=\'pingback\'';	/** @todo Should use Filter Extension or custom preg_match instead. */	$parsed_url = parse_url($url);	if ( ! isset( $parsed_url['host'] ) ) // Not an URL. This should never happen.		return false;	//Do not search for a pingback server on our own uploads	$uploads_dir = wp_upload_dir();	if ( 0 === strpos($url, $uploads_dir['baseurl']) )		return false;	$response = wp_remote_head( $url, array( 'timeout' => 2, 'httpversion' => '1.0' ) );	if ( is_wp_error( $response ) )		return false;	if ( isset( $response['headers']['x-pingback'] ) )		return $response['headers']['x-pingback'];	// Not an (x)html, sgml, or xml page, no use going further.	if ( isset( $response['headers']['content-type'] ) && preg_match('#(image|audio|video|model)/#is', $response['headers']['content-type']) )		return false;	// Now do a GET since we're going to look in the html headers (and we're sure its not a binary file)	$response = wp_remote_get( $url, array( 'timeout' => 2, 'httpversion' => '1.0' ) );	if ( is_wp_error( $response ) )		return false;	$contents = $response['body'];	$pingback_link_offset_dquote = strpos($contents, $pingback_str_dquote);	$pingback_link_offset_squote = strpos($contents, $pingback_str_squote);	if ( $pingback_link_offset_dquote || $pingback_link_offset_squote ) {		$quote = ($pingback_link_offset_dquote) ? '"' : '\'';		$pingback_link_offset = ($quote=='"') ? $pingback_link_offset_dquote : $pingback_link_offset_squote;		$pingback_href_pos = @strpos($contents, 'href=', $pingback_link_offset);		$pingback_href_start = $pingback_href_pos+6;		$pingback_href_end = @strpos($contents, $quote, $pingback_href_start);		$pingback_server_url_len = $pingback_href_end - $pingback_href_start;		$pingback_server_url = substr($contents, $pingback_href_start, $pingback_server_url_len);		// We may find rel="pingback" but an incomplete pingback URL		if ( $pingback_server_url_len > 0 ) { // We got it!			return $pingback_server_url;		}	}	return false;}/** * Perform all pingbacks, enclosures, trackbacks, and send to pingback services. * * @since 2.1.0 * @uses $wpdb */function do_all_pings() {	global $wpdb;	// Do pingbacks	while ($ping = $wpdb->get_row("SELECT * FROM {$wpdb->posts}, {$wpdb->postmeta} WHERE {$wpdb->posts}.ID = {$wpdb->postmeta}.post_id AND {$wpdb->postmeta}.meta_key = '_pingme' LIMIT 1")) {		$mid = $wpdb->get_var( "SELECT meta_id FROM {$wpdb->postmeta} WHERE post_id = {$ping->ID} AND meta_key = '_pingme' LIMIT 1");		do_action( 'delete_postmeta', $mid );		$wpdb->query( $wpdb->prepare( "DELETE FROM {$wpdb->postmeta} WHERE meta_id = %d", $mid ) );		do_action( 'deleted_postmeta', $mid );		pingback($ping->post_content, $ping->ID);	}	// Do Enclosures	while ($enclosure = $wpdb->get_row("SELECT * FROM {$wpdb->posts}, {$wpdb->postmeta} WHERE {$wpdb->posts}.ID = {$wpdb->postmeta}.post_id AND {$wpdb->postmeta}.meta_key = '_encloseme' LIMIT 1")) {		$mid = $wpdb->get_var( $wpdb->prepare("SELECT meta_id FROM {$wpdb->postmeta} WHERE post_id = %d AND meta_key = '_encloseme'", $enclosure->ID) );		do_action( 'delete_postmeta', $mid );		$wpdb->query( $wpdb->prepare("DELETE FROM {$wpdb->postmeta} WHERE meta_id =  %d", $mid) );		do_action( 'deleted_postmeta', $mid );		do_enclose($enclosure->post_content, $enclosure->ID);	}	// Do Trackbacks	$trackbacks = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE to_ping <> '' AND post_status = 'publish'");	if ( is_array($trackbacks) )		foreach ( $trackbacks as $trackback )			do_trackbacks($trackback);	//Do Update Services/Generic Pings	generic_ping();}/** * Perform trackbacks. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID to do trackbacks on. */function do_trackbacks($post_id) {	global $wpdb;	$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) );	$to_ping = get_to_ping($post_id);	$pinged  = get_pung($post_id);	if ( empty($to_ping) ) {		$wpdb->update($wpdb->posts, array('to_ping' => ''), array('ID' => $post_id) );		return;	}	if ( empty($post->post_excerpt) )		$excerpt = apply_filters('the_content', $post->post_content);	else		$excerpt = apply_filters('the_excerpt', $post->post_excerpt);	$excerpt = str_replace(']]>', ']]&gt;', $excerpt);	$excerpt = wp_html_excerpt($excerpt, 252) . '...';	$post_title = apply_filters('the_title', $post->post_title);	$post_title = strip_tags($post_title);	if ( $to_ping ) {		foreach ( (array) $to_ping as $tb_ping ) {			$tb_ping = trim($tb_ping);			if ( !in_array($tb_ping, $pinged) ) {				trackback($tb_ping, $post_title, $excerpt, $post_id);				$pinged[] = $tb_ping;			} else {				$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '$tb_ping', '')) WHERE ID = %d", $post_id) );			}		}	}}/** * Sends pings to all of the ping site services. * * @since 1.2.0 * * @param int $post_id Post ID. Not actually used. * @return int Same as Post ID from parameter */function generic_ping($post_id = 0) {	$services = get_option('ping_sites');	$services = explode("\n", $services);	foreach ( (array) $services as $service ) {		$service = trim($service);		if ( '' != $service )			weblog_ping($service);	}	return $post_id;}/** * Pings back the links found in a post. * * @since 0.71 * @uses $wp_version * @uses IXR_Client * * @param string $content Post content to check for links. * @param int $post_ID Post ID. */function pingback($content, $post_ID) {	global $wp_version;	include_once(ABSPATH . WPINC . '/class-IXR.php');	// original code by Mort (http://mort.mine.nu:8080)	$post_links = array();	$pung = get_pung($post_ID);	// Variables	$ltrs = '\w';	$gunk = '/#~:.?+=&%@!\-';	$punc = '.:?\-';	$any = $ltrs . $gunk . $punc;	// Step 1	// Parsing the post, external links (if any) are stored in the $post_links array	// This regexp comes straight from phpfreaks.com	// http://www.phpfreaks.com/quickcode/Extract_All_URLs_on_a_Page/15.php	preg_match_all("{\b http : [$any] +? (?= [$punc] * [^$any] | $)}x", $content, $post_links_temp);	// Step 2.	// Walking thru the links array	// first we get rid of links pointing to sites, not to specific files	// Example:	// http://dummy-weblog.org	// http://dummy-weblog.org/	// http://dummy-weblog.org/post.php	// We don't wanna ping first and second types, even if they have a valid <link/>	foreach ( (array) $post_links_temp[0] as $link_test ) :		if ( !in_array($link_test, $pung) && (url_to_postid($link_test) != $post_ID) // If we haven't pung it already and it isn't a link to itself				&& !is_local_attachment($link_test) ) : // Also, let's never ping local attachments.			if ( $test = @parse_url($link_test) ) {				if ( isset($test['query']) )					$post_links[] = $link_test;				elseif ( ($test['path'] != '/') && ($test['path'] != '') )					$post_links[] = $link_test;			}		endif;	endforeach;	do_action_ref_array('pre_ping', array(&$post_links, &$pung));	foreach ( (array) $post_links as $pagelinkedto ) {		$pingback_server_url = discover_pingback_server_uri($pagelinkedto, 2048);		if ( $pingback_server_url ) {			@ set_time_limit( 60 );			 // Now, the RPC call			$pagelinkedfrom = get_permalink($post_ID);			// using a timeout of 3 seconds should be enough to cover slow servers			$client = new IXR_Client($pingback_server_url);			$client->timeout = 3;			$client->useragent = apply_filters( 'pingback_useragent', $client->useragent . ' -- WordPress/' . $wp_version, $client->useragent, $pingback_server_url, $pagelinkedto, $pagelinkedfrom);			// when set to true, this outputs debug messages by itself			$client->debug = false;			if ( $client->query('pingback.ping', $pagelinkedfrom, $pagelinkedto) || ( isset($client->error->code) && 48 == $client->error->code ) ) // Already registered				add_ping( $post_ID, $pagelinkedto );		}	}}/** * Check whether blog is public before returning sites. * * @since 2.1.0 * * @param mixed $sites Will return if blog is public, will not return if not public. * @return mixed Empty string if blog is not public, returns $sites, if site is public. */function privacy_ping_filter($sites) {	if ( '0' != get_option('blog_public') )		return $sites;	else		return '';}/** * Send a Trackback. * * Updates database when sending trackback to prevent duplicates. * * @since 0.71 * @uses $wpdb * * @param string $trackback_url URL to send trackbacks. * @param string $title Title of post. * @param string $excerpt Excerpt of post. * @param int $ID Post ID. * @return mixed Database query from update. */function trackback($trackback_url, $title, $excerpt, $ID) {	global $wpdb;	if ( empty($trackback_url) )		return;	$options = array();	$options['timeout'] = 4;	$options['body'] = array(		'title' => $title,		'url' => get_permalink($ID),		'blog_name' => get_option('blogname'),		'excerpt' => $excerpt	);	$response = wp_remote_post($trackback_url, $options);	if ( is_wp_error( $response ) )		return;	$tb_url = addslashes( $trackback_url );	$wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET pinged = CONCAT(pinged, '\n', '$tb_url') WHERE ID = %d", $ID) );	return $wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '$tb_url', '')) WHERE ID = %d", $ID) );}/** * Send a pingback. * * @since 1.2.0 * @uses $wp_version * @uses IXR_Client * * @param string $server Host of blog to connect to. * @param string $path Path to send the ping. */function weblog_ping($server = '', $path = '') {	global $wp_version;	include_once(ABSPATH . WPINC . '/class-IXR.php');	// using a timeout of 3 seconds should be enough to cover slow servers	$client = new IXR_Client($server, ((!strlen(trim($path)) || ('/' == $path)) ? false : $path));	$client->timeout = 3;	$client->useragent .= ' -- WordPress/'.$wp_version;	// when set to true, this outputs debug messages by itself	$client->debug = false;	$home = trailingslashit( home_url() );	if ( !$client->query('weblogUpdates.extendedPing', get_option('blogname'), $home, get_bloginfo('rss2_url') ) ) // then try a normal ping		$client->query('weblogUpdates.ping', get_option('blogname'), $home);}//// Cache///** * Removes comment ID from the comment cache. * * @since 2.3.0 * @package WordPress * @subpackage Cache * * @param int|array $id Comment ID or array of comment IDs to remove from cache */function clean_comment_cache($ids) {	foreach ( (array) $ids as $id )		wp_cache_delete($id, 'comment');}/** * Updates the comment cache of given comments. * * Will add the comments in $comments to the cache. If comment ID already exists * in the comment cache then it will not be updated. The comment is added to the * cache using the comment group with the key using the ID of the comments. * * @since 2.3.0 * @package WordPress * @subpackage Cache * * @param array $comments Array of comment row objects */function update_comment_cache($comments) {	foreach ( (array) $comments as $comment )		wp_cache_add($comment->comment_ID, $comment, 'comment');}//// Internal///** * Close comments on old posts on the fly, without any extra DB queries.  Hooked to the_posts. * * @access private * @since 2.7.0 * * @param object $posts Post data object. * @return object */function _close_comments_for_old_posts( $posts ) {	if ( empty($posts) || !is_singular() || !get_option('close_comments_for_old_posts') )		return $posts;	$days_old = (int) get_option('close_comments_days_old');	if ( !$days_old )		return $posts;	if ( time() - strtotime( $posts[0]->post_date_gmt ) > ( $days_old * 24 * 60 * 60 ) ) {		$posts[0]->comment_status = 'closed';		$posts[0]->ping_status = 'closed';	}	return $posts;}/** * Close comments on an old post.  Hooked to comments_open and pings_open. * * @access private * @since 2.7.0 * * @param bool $open Comments open or closed * @param int $post_id Post ID * @return bool $open */function _close_comments_for_old_post( $open, $post_id ) {	if ( ! $open )		return $open;	if ( !get_option('close_comments_for_old_posts') )		return $open;	$days_old = (int) get_option('close_comments_days_old');	if ( !$days_old )		return $open;	$post = get_post($post_id);	if ( time() - strtotime( $post->post_date_gmt ) > ( $days_old * 24 * 60 * 60 ) )		return false;	return $open;}?>
<?php/** * Link Management Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once ('admin.php');// Handle bulk deletesif ( isset($_GET['action']) && isset($_GET['linkcheck']) ) {	check_admin_referer('bulk-bookmarks');	$doaction = $_GET['action'] ? $_GET['action'] : $_GET['action2'];	if ( ! current_user_can('manage_links') )		wp_die( __('You do not have sufficient permissions to edit the links for this site.') );	if ( 'delete' == $doaction ) {		$bulklinks = (array) $_GET['linkcheck'];		foreach ( $bulklinks as $link_id ) {			$link_id = (int) $link_id;			wp_delete_link($link_id);		}		wp_safe_redirect( wp_get_referer() );		exit;	}} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_reset_vars(array('action', 'cat_id', 'linkurl', 'name', 'image', 'description', 'visible', 'target', 'category', 'link_id', 'submit', 'order_by', 'links_show_cat_id', 'rating', 'rel', 'notes', 'linkcheck[]'));if ( empty($cat_id) )	$cat_id = 'all';if ( empty($order_by) )	$order_by = 'order_name';$title = __('Links');$this_file = $parent_file = 'link-manager.php';add_contextual_help( $current_screen,	'<p>' . sprintf(__('You can add links here to be displayed on your site, usually using <a href="%s">Widgets</a>. By default, links to several sites in the WordPress community are included as examples.'), 'widgets.php') . '</p>' .    '<p>' . __('Links may be separated into categories; these are different than the categories used on your posts.') . '</p>' .    '<p>' . __('You can customize the display of this screen using the Screen Options tab and/or the dropdown filters above the links table.') . '</p>' .    '<p>' . __('If you delete a link, it will be removed permanently, as Links do not have a Trash function yet.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Links_Edit_SubPanel" target="_blank">Link Management Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include_once ('./admin-header.php');if ( ! current_user_can('manage_links') )	wp_die(__("You do not have sufficient permissions to edit the links for this site."));switch ($order_by) {	case 'order_id' :		$sqlorderby = 'id';		break;	case 'order_url' :		$sqlorderby = 'url';		break;	case 'order_desc' :		$sqlorderby = 'description';		break;	case 'order_owner' :		$sqlorderby = 'owner';		break;	case 'order_rating' :		$sqlorderby = 'rating';		break;	case 'order_name' :	default :		$sqlorderby = 'name';		break;} ?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="link-add.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'link'); ?></a> <?phpif ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?phpif ( isset($_GET['deleted']) ) {	echo '<div id="message" class="updated"><p>';	$deleted = (int) $_GET['deleted'];	printf(_n('%s link deleted.', '%s links deleted', $deleted), $deleted);	echo '</p></div>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}?><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="link-search-input"><?php _e( 'Search Links' ); ?>:</label>	<input type="text" id="link-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Links' ); ?>" class="button" /></p></form><br class="clear" /><form id="posts-filter" action="" method="get"><div class="tablenav"><?phpif ( 'all' == $cat_id )	$cat_id = '';$args = array( 'category' => $cat_id, 'hide_invisible' => 0, 'orderby' => $sqlorderby, 'hide_empty' => 0 );if ( ! empty( $_GET['s'] ) )	$args['search'] = $_GET['s'];$links = get_bookmarks( $args );if ( $links ) {?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php$categories = get_terms('link_category', array("hide_empty" => 1));$select_cat = "<select name=\"cat_id\">\n";$select_cat .= '<option value="all"'  . (($cat_id == 'all') ? " selected='selected'" : '') . '>' . __('View all Categories') . "</option>\n";foreach ((array) $categories as $cat)	$select_cat .= '<option value="' . esc_attr($cat->term_id) . '"' . (($cat->term_id == $cat_id) ? " selected='selected'" : '') . '>' . sanitize_term_field('name', $cat->name, $cat->term_id, 'link_category', 'display') . "</option>\n";$select_cat .= "</select>\n";$select_order = "<select name=\"order_by\">\n";$select_order .= '<option value="order_id"' . (($order_by == 'order_id') ? " selected='selected'" : '') . '>' .  __('Order by Link ID') . "</option>\n";$select_order .= '<option value="order_name"' . (($order_by == 'order_name') ? " selected='selected'" : '') . '>' .  __('Order by Name') . "</option>\n";$select_order .= '<option value="order_url"' . (($order_by == 'order_url') ? " selected='selected'" : '') . '>' .  __('Order by Address') . "</option>\n";$select_order .= '<option value="order_rating"' . (($order_by == 'order_rating') ? " selected='selected'" : '') . '>' .  __('Order by Rating') . "</option>\n";$select_order .= "</select>\n";echo $select_cat;echo $select_order;?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /></div><br class="clear" /></div><div class="clear"></div><?php	$link_columns = get_column_headers('link-manager');	$hidden = get_hidden_columns('link-manager');?><?php wp_nonce_field('bulk-bookmarks') ?><table class="widefat fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers('link-manager'); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers('link-manager', false); ?>	</tr>	</tfoot>	<tbody><?php	$alt = 0;	foreach ($links as $link) {		$link = sanitize_bookmark($link);		$link->link_name = esc_attr($link->link_name);		$link->link_category = wp_get_link_cats($link->link_id);		$short_url = str_replace('http://', '', $link->link_url);		$short_url = preg_replace('/^www\./i', '', $short_url);		if ('/' == substr($short_url, -1))			$short_url = substr($short_url, 0, -1);		if (strlen($short_url) > 35)			$short_url = substr($short_url, 0, 32).'...';		$visible = ($link->link_visible == 'Y') ? __('Yes') : __('No');		$rating  = $link->link_rating;		$style = ($alt % 2) ? '' : ' class="alternate"';		++ $alt;		$edit_link = get_edit_bookmark_link();		?><tr id="link-<?php echo $link->link_id; ?>" valign="middle" <?php echo $style; ?>><?php		foreach($link_columns as $column_name=>$column_display_name) {			$class = "class=\"column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch($column_name) {				case 'cb':					echo '<th scope="row" class="check-column"><input type="checkbox" name="linkcheck[]" value="'. esc_attr($link->link_id) .'" /></th>';					break;				case 'name':					echo "<td $attributes><strong><a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $link->link_name)) . "'>$link->link_name</a></strong><br />";					$actions = array();					$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';					$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("link.php?action=delete&amp;link_id=$link->link_id", 'delete-bookmark_' . $link->link_id) . "' onclick=\"if ( confirm('" . esc_js(sprintf( __("You are about to delete this link '%s'\n  'Cancel' to stop, 'OK' to delete."), $link->link_name )) . "') ) { return true;}return false;\">" . __('Delete') . "</a>";					$action_count = count($actions);					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $linkaction ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						echo "<span class='$action'>$linkaction$sep</span>";					}					echo '</div>';					echo '</td>';					break;				case 'url':					echo "<td $attributes><a href='$link->link_url' title='".sprintf(__('Visit %s'), $link->link_name)."'>$short_url</a></td>";					break;				case 'categories':					?><td <?php echo $attributes ?>><?php					$cat_names = array();					foreach ($link->link_category as $category) {						$cat = get_term($category, 'link_category', OBJECT, 'display');						if ( is_wp_error( $cat ) )							echo $cat->get_error_message();						$cat_name = $cat->name;						if ( $cat_id != $category )							$cat_name = "<a href='link-manager.php?cat_id=$category'>$cat_name</a>";						$cat_names[] = $cat_name;					}					echo implode(', ', $cat_names);					?></td><?php					break;				case 'rel':					?><td <?php echo $attributes ?>><?php echo empty($link->link_rel) ? '<br />' : $link->link_rel; ?></td><?php					break;				case 'visible':					?><td <?php echo $attributes ?>><?php echo $visible; ?></td><?php					break;				case 'rating': 					?><td <?php echo $attributes ?>><?php echo $rating; ?></td><?php					break;				default:					?>					<td <?php echo $attributes ?>><?php do_action('manage_link_custom_column', $column_name, $link->link_id); ?></td>					<?php					break;			}		}		echo "\n    </tr>\n";	}?>	</tbody></table><div class="tablenav"><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><?php } else { ?><p><?php _e( 'No links found.' ) ?></p><?php } ?><br class="clear" /></div></form><div id="ajax-response"></div></div><?phpinclude('./admin-footer.php');
<?php/** * Main WordPress Formatting API. * * Handles many functions for formatting output. * * @package WordPress **//** * Replaces common plain text characters into formatted entities * * As an example, * <code> * 'cause today's effort makes it worth tomorrow's "holiday"... * </code> * Becomes: * <code> * &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221;&#8230; * </code> * Code within certain html blocks are skipped. * * @since 0.71 * @uses $wp_cockneyreplace Array of formatted entities for certain common phrases * * @param string $text The text to be formatted * @return string The string replaced with html entities */function wptexturize($text) {	global $wp_cockneyreplace;	static $static_setup = false, $opening_quote, $closing_quote, $default_no_texturize_tags, $default_no_texturize_shortcodes, $static_characters, $static_replacements, $dynamic_characters, $dynamic_replacements;	$output = '';	$curl = '';	$textarr = preg_split('/(<.*>|\[.*\])/Us', $text, -1, PREG_SPLIT_DELIM_CAPTURE);	$stop = count($textarr);	// No need to set up these variables more than once	if (!$static_setup) {		/* translators: opening curly quote */		$opening_quote = _x('&#8220;', 'opening curly quote');		/* translators: closing curly quote */		$closing_quote = _x('&#8221;', 'closing curly quote');		$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');		$default_no_texturize_shortcodes = array('code');		// if a plugin has provided an autocorrect array, use it		if ( isset($wp_cockneyreplace) ) {			$cockney = array_keys($wp_cockneyreplace);			$cockneyreplace = array_values($wp_cockneyreplace);		} else {			$cockney = array("'tain't","'twere","'twas","'tis","'twill","'til","'bout","'nuff","'round","'cause");			$cockneyreplace = array("&#8217;tain&#8217;t","&#8217;twere","&#8217;twas","&#8217;tis","&#8217;twill","&#8217;til","&#8217;bout","&#8217;nuff","&#8217;round","&#8217;cause");		}		$static_characters = array_merge(array('---', ' -- ', '--', ' - ', 'xn&#8211;', '...', '``', '\'\'', ' (tm)'), $cockney);		$static_replacements = array_merge(array('&#8212;', ' &#8212; ', '&#8211;', ' &#8211; ', 'xn--', '&#8230;', $opening_quote, $closing_quote, ' &#8482;'), $cockneyreplace);		$dynamic_characters = array('/\'(\d\d(?:&#8217;|\')?s)/', '/\'(\d+)/', '/(\s|\A|[([{<]|")\'/', '/(\d+)"/', '/(\d+)\'/', '/(\S)\'([^\'\s])/', '/(\s|\A|[([{<])"(?!\s)/', '/"(\s|\S|\Z)/', '/\'([\s.]|\Z)/', '/\b(\d+)x(\d+)\b/');		$dynamic_replacements = array('&#8217;$1','&#8217;$1', '$1&#8216;', '$1&#8243;', '$1&#8242;', '$1&#8217;$2', '$1' . $opening_quote . '$2', $closing_quote . '$1', '&#8217;$1', '$1&#215;$2');		$static_setup = true;	}	// Transform into regexp sub-expression used in _wptexturize_pushpop_element	// Must do this everytime in case plugins use these filters in a context sensitive manner	$no_texturize_tags = '(' . implode('|', apply_filters('no_texturize_tags', $default_no_texturize_tags) ) . ')';	$no_texturize_shortcodes = '(' . implode('|', apply_filters('no_texturize_shortcodes', $default_no_texturize_shortcodes) ) . ')';	$no_texturize_tags_stack = array();	$no_texturize_shortcodes_stack = array();	for ( $i = 0; $i < $stop; $i++ ) {		$curl = $textarr[$i];		if ( !empty($curl) && '<' != $curl{0} && '[' != $curl{0}				&& empty($no_texturize_shortcodes_stack) && empty($no_texturize_tags_stack)) {			// This is not a tag, nor is the texturization disabled			// static strings			$curl = str_replace($static_characters, $static_replacements, $curl);			// regular expressions			$curl = preg_replace($dynamic_characters, $dynamic_replacements, $curl);		} elseif (!empty($curl)) {			/*			 * Only call _wptexturize_pushpop_element if first char is correct			 * tag opening			 */			if ('<' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_tags_stack, $no_texturize_tags, '<', '>');			elseif ('[' == $curl{0})				_wptexturize_pushpop_element($curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes, '[', ']');		}		$curl = preg_replace('/&([^#])(?![a-zA-Z1-4]{1,8};)/', '&#038;$1', $curl);		$output .= $curl;	}	return $output;}/** * Search for disabled element tags. Push element to stack on tag open and pop * on tag close. Assumes first character of $text is tag opening. * * @access private * @since 2.9.0 * * @param string $text Text to check. First character is assumed to be $opening * @param array $stack Array used as stack of opened tag elements * @param string $disabled_elements Tags to match against formatted as regexp sub-expression * @param string $opening Tag opening character, assumed to be 1 character long * @param string $opening Tag closing  character * @return object */function _wptexturize_pushpop_element($text, &$stack, $disabled_elements, $opening = '<', $closing = '>') {	// Check if it is a closing tag -- otherwise assume opening tag	if (strncmp($opening . '/', $text, 2)) {		// Opening? Check $text+1 against disabled elements		if (preg_match('/^' . $disabled_elements . '\b/', substr($text, 1), $matches)) {			/*			 * This disables texturize until we find a closing tag of our type			 * (e.g. <pre>) even if there was invalid nesting before that			 *			 * Example: in the case <pre>sadsadasd</code>"baba"</pre>			 *          "baba" won't be texturize			 */			array_push($stack, $matches[1]);		}	} else {		// Closing? Check $text+2 against disabled elements		$c = preg_quote($closing, '/');		if (preg_match('/^' . $disabled_elements . $c . '/', substr($text, 2), $matches)) {			$last = array_pop($stack);			// Make sure it matches the opening tag			if ($last != $matches[1])				array_push($stack, $last);		}	}}/** * Accepts matches array from preg_replace_callback in wpautop() or a string. * * Ensures that the contents of a <<pre>>...<</pre>> HTML block are not * converted into paragraphs or line-breaks. * * @since 1.2.0 * * @param array|string $matches The array or string * @return string The pre block without paragraph/line-break conversion. */function clean_pre($matches) {	if ( is_array($matches) )		$text = $matches[1] . $matches[2] . "</pre>";	else		$text = $matches;	$text = str_replace('<br />', '', $text);	$text = str_replace('<p>', "\n", $text);	$text = str_replace('</p>', '', $text);	return $text;}/** * Replaces double line-breaks with paragraph elements. * * A group of regex replaces used to identify text formatted with newlines and * replace double line-breaks with HTML paragraph tags. The remaining * line-breaks after conversion become <<br />> tags, unless $br is set to '0' * or 'false'. * * @since 0.71 * * @param string $pee The text which has to be formatted. * @param int|bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true. * @return string Text which has been converted into correct paragraph tags. */function wpautop($pee, $br = 1) {	if ( trim($pee) === '' )		return '';	$pee = $pee . "\n"; // just to make things a little easier, pad the end	$pee = preg_replace('|<br />\s*<br />|', "\n\n", $pee);	// Space things out a little	$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|option|form|map|area|blockquote|address|math|style|input|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';	$pee = preg_replace('!(<' . $allblocks . '[^>]*>)!', "\n$1", $pee);	$pee = preg_replace('!(</' . $allblocks . '>)!', "$1\n\n", $pee);	$pee = str_replace(array("\r\n", "\r"), "\n", $pee); // cross-platform newlines	if ( strpos($pee, '<object') !== false ) {		$pee = preg_replace('|\s*<param([^>]*)>\s*|', "<param$1>", $pee); // no pee inside object/embed		$pee = preg_replace('|\s*</embed>\s*|', '</embed>', $pee);	}	$pee = preg_replace("/\n\n+/", "\n\n", $pee); // take care of duplicates	// make paragraphs, including one at the end	$pees = preg_split('/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);	$pee = '';	foreach ( $pees as $tinkle )		$pee .= '<p>' . trim($tinkle, "\n") . "</p>\n";	$pee = preg_replace('|<p>\s*</p>|', '', $pee); // under certain strange conditions it could create a P of entirely whitespace	$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', "<p>$1</p></$2>", $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee); // don't pee all over a tag	$pee = preg_replace("|<p>(<li.+?)</p>|", "$1", $pee); // problem with nested lists	$pee = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $pee);	$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);	$pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)!', "$1", $pee);	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);	if ($br) {		$pee = preg_replace_callback('/<(script|style).*?<\/\\1>/s', create_function('$matches', 'return str_replace("\n", "<WPPreserveNewline />", $matches[0]);'), $pee);		$pee = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $pee); // optionally make line breaks		$pee = str_replace('<WPPreserveNewline />', "\n", $pee);	}	$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*<br />!', "$1", $pee);	$pee = preg_replace('!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);	if (strpos($pee, '<pre') !== false)		$pee = preg_replace_callback('!(<pre[^>]*>)(.*?)</pre>!is', 'clean_pre', $pee );	$pee = preg_replace( "|\n</p>$|", '</p>', $pee );	return $pee;}/** * Don't auto-p wrap shortcodes that stand alone * * Ensures that shortcodes are not wrapped in <<p>>...<</p>>. * * @since 2.9.0 * * @param string $pee The content. * @return string The filtered content. */function shortcode_unautop($pee) {	global $shortcode_tags;	if ( !empty($shortcode_tags) && is_array($shortcode_tags) ) {		$tagnames = array_keys($shortcode_tags);		$tagregexp = join( '|', array_map('preg_quote', $tagnames) );		$pee = preg_replace('/<p>\\s*?(\\[(' . $tagregexp . ')\\b.*?\\/?\\](?:.+?\\[\\/\\2\\])?)\\s*<\\/p>/s', '$1', $pee);	}	return $pee;}/** * Checks to see if a string is utf8 encoded. * * NOTE: This function checks for 5-Byte sequences, UTF8 *       has Bytes Sequences with a maximum length of 4. * * @author bmorel at ssi dot fr (modified) * @since 1.2.1 * * @param string $str The string to be checked * @return bool True if $str fits a UTF-8 model, false otherwise. */function seems_utf8($str) {	$length = strlen($str);	for ($i=0; $i < $length; $i++) {		$c = ord($str[$i]);		if ($c < 0x80) $n = 0; # 0bbbbbbb		elseif (($c & 0xE0) == 0xC0) $n=1; # 110bbbbb		elseif (($c & 0xF0) == 0xE0) $n=2; # 1110bbbb		elseif (($c & 0xF8) == 0xF0) $n=3; # 11110bbb		elseif (($c & 0xFC) == 0xF8) $n=4; # 111110bb		elseif (($c & 0xFE) == 0xFC) $n=5; # 1111110b		else return false; # Does not match any model		for ($j=0; $j<$n; $j++) { # n bytes matching 10bbbbbb follow ?			if ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))				return false;		}	}	return true;}/** * Converts a number of special characters into their HTML entities. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to encode " to * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded. * * @since 1.2.2 * * @param string $string The text which is to be encoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @param string $charset Optional. The character encoding of the string. Default is false. * @param boolean $double_encode Optional. Whether to encode existing html entities. Default is false. * @return string The encoded text with HTML entities. */function _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no specialchars - saves some processing	if ( !preg_match( '/[&<>"\']/', $string ) ) {		return $string;	}	// Account for the previous behaviour of the function when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()	if ( !$charset ) {		static $_charset;		if ( !isset( $_charset ) ) {			$alloptions = wp_load_alloptions();			$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';		}		$charset = $_charset;	}	if ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {		$charset = 'UTF-8';	}	$_quote_style = $quote_style;	if ( $quote_style === 'double' ) {		$quote_style = ENT_COMPAT;		$_quote_style = ENT_COMPAT;	} elseif ( $quote_style === 'single' ) {		$quote_style = ENT_NOQUOTES;	}	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = wp_specialchars_decode( $string, $_quote_style );		/* Critical */		// The previous line decodes &amp;phrase; into &phrase;  We must guarantee that &phrase; is valid before proceeding.		$string = wp_kses_normalize_entities($string);		// Now proceed with custom double-encoding silliness		$string = preg_replace( '/&(#?x?[0-9a-z]+);/i', '|wp_entity|$1|/wp_entity|', $string );	}	$string = @htmlspecialchars( $string, $quote_style, $charset );	// Handle double encoding ourselves	if ( !$double_encode ) {		$string = str_replace( array( '|wp_entity|', '|/wp_entity|' ), array( '&', ';' ), $string );	}	// Backwards compatibility	if ( 'single' === $_quote_style ) {		$string = str_replace( "'", '&#039;', $string );	}	return $string;}/** * Converts a number of HTML entities into their special characters. * * Specifically deals with: &, <, >, ", and '. * * $quote_style can be set to ENT_COMPAT to decode " entities, * or ENT_QUOTES to do both " and '. Default is ENT_NOQUOTES where no quotes are decoded. * * @since 2.8 * * @param string $string The text which is to be decoded. * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES. * @return string The decoded text without HTML entities. */function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Don't bother if there are no entities - saves a lot of processing	if ( strpos( $string, '&' ) === false ) {		return $string;	}	// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value	if ( empty( $quote_style ) ) {		$quote_style = ENT_NOQUOTES;	} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {		$quote_style = ENT_QUOTES;	}	// More complete than get_html_translation_table( HTML_SPECIALCHARS )	$single = array( '&#039;'  => '\'', '&#x27;' => '\'' );	$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );	$double = array( '&quot;' => '"', '&#034;'  => '"', '&#x22;' => '"' );	$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );	$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );	$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );	if ( $quote_style === ENT_QUOTES ) {		$translation = array_merge( $single, $double, $others );		$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );	} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {		$translation = array_merge( $double, $others );		$translation_preg = array_merge( $double_preg, $others_preg );	} elseif ( $quote_style === 'single' ) {		$translation = array_merge( $single, $others );		$translation_preg = array_merge( $single_preg, $others_preg );	} elseif ( $quote_style === ENT_NOQUOTES ) {		$translation = $others;		$translation_preg = $others_preg;	}	// Remove zero padding on numeric entities	$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );	// Replace characters according to translation table	return strtr( $string, $translation );}/** * Checks for invalid UTF8 in a string. * * @since 2.8 * * @param string $string The text which is to be checked. * @param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false. * @return string The checked text. */function wp_check_invalid_utf8( $string, $strip = false ) {	$string = (string) $string;	if ( 0 === strlen( $string ) ) {		return '';	}	// Store the site charset as a static to avoid multiple calls to get_option()	static $is_utf8;	if ( !isset( $is_utf8 ) ) {		$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );	}	if ( !$is_utf8 ) {		return $string;	}	// Check for support for utf8 in the installed PCRE library once and store the result in a static	static $utf8_pcre;	if ( !isset( $utf8_pcre ) ) {		$utf8_pcre = @preg_match( '/^./u', 'a' );	}	// We can't demand utf8 in the PCRE installation, so just return the string in those cases	if ( !$utf8_pcre ) {		return $string;	}	// preg_match fails when it encounters invalid UTF8 in $string	if ( 1 === @preg_match( '/^./us', $string ) ) {		return $string;	}	// Attempt to strip the bad chars if requested (not recommended)	if ( $strip && function_exists( 'iconv' ) ) {		return iconv( 'utf-8', 'utf-8', $string );	}	return '';}/** * Encode the Unicode values to be used in the URI. * * @since 1.5.0 * * @param string $utf8_string * @param int $length Max length of the string * @return string String with Unicode encoded for URI. */function utf8_uri_encode( $utf8_string, $length = 0 ) {	$unicode = '';	$values = array();	$num_octets = 1;	$unicode_length = 0;	$string_length = strlen( $utf8_string );	for ($i = 0; $i < $string_length; $i++ ) {		$value = ord( $utf8_string[ $i ] );		if ( $value < 128 ) {			if ( $length && ( $unicode_length >= $length ) )				break;			$unicode .= chr($value);			$unicode_length++;		} else {			if ( count( $values ) == 0 ) $num_octets = ( $value < 224 ) ? 2 : 3;			$values[] = $value;			if ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )				break;			if ( count( $values ) == $num_octets ) {				if ($num_octets == 3) {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]) . '%' . dechex($values[2]);					$unicode_length += 9;				} else {					$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]);					$unicode_length += 6;				}				$values = array();				$num_octets = 1;			}		}	}	return $unicode;}/** * Converts all accent characters to ASCII characters. * * If there are no accent characters, then the string given is just returned. * * @since 1.2.1 * * @param string $string Text that might have accent characters * @return string Filtered string with replaced "nice" characters. */function remove_accents($string) {	if ( !preg_match('/[\x80-\xff]/', $string) )		return $string;	if (seems_utf8($string)) {		$chars = array(		// Decompositions for Latin-1 Supplement		chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',		chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',		chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',		chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',		chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',		chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',		chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',		chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',		chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',		chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',		chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',		chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',		chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',		chr(195).chr(159) => 's', chr(195).chr(160) => 'a',		chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',		chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',		chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',		chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',		chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',		chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',		chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',		chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',		chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',		chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',		chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',		chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',		chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',		chr(195).chr(191) => 'y',		// Decompositions for Latin Extended-A		chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',		chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',		chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',		chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',		chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',		chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',		chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',		chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',		chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',		chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',		chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',		chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',		chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',		chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',		chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',		chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',		chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',		chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',		chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',		chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',		chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',		chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',		chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',		chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',		chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',		chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',		chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',		chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',		chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',		chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',		chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',		chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',		chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',		chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',		chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',		chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',		chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',		chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',		chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',		chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',		chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',		chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',		chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',		chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',		chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',		chr(197).chr(154) => 'S',chr(197).chr(155) => 's',		chr(197).chr(156) => 'S',chr(197).chr(157) => 's',		chr(197).chr(158) => 'S',chr(197).chr(159) => 's',		chr(197).chr(160) => 'S', chr(197).chr(161) => 's',		chr(197).chr(162) => 'T', chr(197).chr(163) => 't',		chr(197).chr(164) => 'T', chr(197).chr(165) => 't',		chr(197).chr(166) => 'T', chr(197).chr(167) => 't',		chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',		chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',		chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',		chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',		chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',		chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',		chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',		chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',		chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',		chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',		chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',		chr(197).chr(190) => 'z', chr(197).chr(191) => 's',		// Euro Sign		chr(226).chr(130).chr(172) => 'E',		// GBP (Pound) Sign		chr(194).chr(163) => '');		$string = strtr($string, $chars);	} else {		// Assume ISO-8859-1 if not UTF-8		$chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)			.chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)			.chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)			.chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)			.chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)			.chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)			.chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)			.chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)			.chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)			.chr(252).chr(253).chr(255);		$chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";		$string = strtr($string, $chars['in'], $chars['out']);		$double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));		$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');		$string = str_replace($double_chars['in'], $double_chars['out'], $string);	}	return $string;}/** * Sanitizes a filename replacing whitespace with dashes * * Removes special characters that are illegal in filenames on certain * operating systems and special characters requiring special escaping * to manipulate at the command line. Replaces spaces and consecutive * dashes with a single dash. Trim period, dash and underscore from beginning * and end of filename. * * @since 2.1.0 * * @param string $filename The filename to be sanitized * @return string The sanitized filename */function sanitize_file_name( $filename ) {	$filename_raw = $filename;	$special_chars = array("?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}", chr(0));	$special_chars = apply_filters('sanitize_file_name_chars', $special_chars, $filename_raw);	$filename = str_replace($special_chars, '', $filename);	$filename = preg_replace('/[\s-]+/', '-', $filename);	$filename = trim($filename, '.-_');	// Split the filename into a base and extension[s]	$parts = explode('.', $filename);	// Return if only one extension	if ( count($parts) <= 2 )		return apply_filters('sanitize_file_name', $filename, $filename_raw);	// Process multiple extensions	$filename = array_shift($parts);	$extension = array_pop($parts);	$mimes = get_allowed_mime_types();	// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character	// long alpha string not in the extension whitelist.	foreach ( (array) $parts as $part) {		$filename .= '.' . $part;		if ( preg_match("/^[a-zA-Z]{2,5}\d?$/", $part) ) {			$allowed = false;			foreach ( $mimes as $ext_preg => $mime_match ) {				$ext_preg = '!(^' . $ext_preg . ')$!i';				if ( preg_match( $ext_preg, $part ) ) {					$allowed = true;					break;				}			}			if ( !$allowed )				$filename .= '_';		}	}	$filename .= '.' . $extension;	return apply_filters('sanitize_file_name', $filename, $filename_raw);}/** * Sanitize username stripping out unsafe characters. * * If $strict is true, only alphanumeric characters (as well as _, space, ., -, * @) are returned. * Removes tags, octets, entities, and if strict is enabled, will remove all * non-ASCII characters. After sanitizing, it passes the username, raw username * (the username in the parameter), and the strict parameter as parameters for * the filter. * * @since 2.0.0 * @uses apply_filters() Calls 'sanitize_user' hook on username, raw username, *		and $strict parameter. * * @param string $username The username to be sanitized. * @param bool $strict If set limits $username to specific characters. Default false. * @return string The sanitized username, after passing through filters. */function sanitize_user( $username, $strict = false ) {	$raw_username = $username;	$username = wp_strip_all_tags( $username );	$username = remove_accents( $username );	// Kill octets	$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );	$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities	// If strict, reduce to ASCII for max portability.	if ( $strict )		$username = preg_replace( '|[^a-z0-9 _.\-@]|i', '', $username );	// Consolidate contiguous whitespace	$username = preg_replace( '|\s+|', ' ', $username );	return apply_filters( 'sanitize_user', $username, $raw_username, $strict );}/** * Sanitize a string key. * * Keys are used as internal identifiers. They should be lowercase ASCII.  Dashes and underscores are allowed. * * @since 3.0.0 * * @param string $key String key * @return string Sanitized key */function sanitize_key( $key ) {	$raw_key = $key;	$key = wp_strip_all_tags($key);	// Kill octets	$key = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $key);	$key = preg_replace('/&.+?;/', '', $key); // Kill entities	$key = preg_replace('|[^a-z0-9 _.\-@]|i', '', $key);	// Consolidate contiguous whitespace	$key = preg_replace('|\s+|', ' ', $key);	return apply_filters('sanitize_key', $key, $raw_key);}/** * Sanitizes title or use fallback title. * * Specifically, HTML and PHP tags are stripped. Further actions can be added * via the plugin API. If $title is empty and $fallback_title is set, the latter * will be used. * * @since 1.0.0 * * @param string $title The string to be sanitized. * @param string $fallback_title Optional. A title to use if $title is empty. * @return string The sanitized string. */function sanitize_title($title, $fallback_title = '') {	$raw_title = $title;	$title = strip_tags($title);	$title = apply_filters('sanitize_title', $title, $raw_title);	if ( '' === $title || false === $title )		$title = $fallback_title;	return $title;}/** * Sanitizes title, replacing whitespace with dashes. * * Limits the output to alphanumeric characters, underscore (_) and dash (-). * Whitespace becomes a dash. * * @since 1.2.0 * * @param string $title The title to be sanitized. * @return string The sanitized title. */function sanitize_title_with_dashes($title) {	$title = strip_tags($title);	// Preserve escaped octets.	$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);	// Remove percent signs that are not part of an octet.	$title = str_replace('%', '', $title);	// Restore octets.	$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);	$title = remove_accents($title);	if (seems_utf8($title)) {		if (function_exists('mb_strtolower')) {			$title = mb_strtolower($title, 'UTF-8');		}		$title = utf8_uri_encode($title, 200);	}	$title = strtolower($title);	$title = preg_replace('/&.+?;/', '', $title); // kill entities	$title = str_replace('.', '-', $title);	$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);	$title = preg_replace('/\s+/', '-', $title);	$title = preg_replace('|-+|', '-', $title);	$title = trim($title, '-');	return $title;}/** * Ensures a string is a valid SQL order by clause. * * Accepts one or more columns, with or without ASC/DESC, and also accepts * RAND(). * * @since 2.5.1 * * @param string $orderby Order by string to be checked. * @return string|false Returns the order by clause if it is a match, false otherwise. */function sanitize_sql_orderby( $orderby ){	preg_match('/^\s*([a-z0-9_]+(\s+(ASC|DESC))?(\s*,\s*|\s*$))+|^\s*RAND\(\s*\)\s*$/i', $orderby, $obmatches);	if ( !$obmatches )		return false;	return $orderby;}/** * Santizes a html classname to ensure it only contains valid characters * * Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty * string then it will return the alternative value supplied. * * @todo Expand to support the full range of CDATA that a class attribute can contain. * * @since 2.8.0 * * @param string $class The classname to be sanitized * @param string $fallback Optional. The value to return if the sanitization end's up as an empty string. * 	Defaults to an empty string. * @return string The sanitized value */function sanitize_html_class( $class, $fallback = '' ) {	//Strip out any % encoded octets	$sanitized = preg_replace('|%[a-fA-F0-9][a-fA-F0-9]|', '', $class);	//Limit to A-Z,a-z,0-9,'-'	$sanitized = preg_replace('/[^A-Za-z0-9-]/', '', $sanitized);	if ( '' == $sanitized )		$sanitized = $fallback;	return apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );}/** * Converts a number of characters from a string. * * Metadata tags <<title>> and <<category>> are removed, <<br>> and <<hr>> are * converted into correct XHTML and Unicode characters are converted to the * valid range. * * @since 0.71 * * @param string $content String of characters to be converted. * @param string $deprecated Not used. * @return string Converted string. */function convert_chars($content, $deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.71' );	// Translation of invalid Unicode references range to valid range	$wp_htmltranswinuni = array(	'&#128;' => '&#8364;', // the Euro sign	'&#129;' => '',	'&#130;' => '&#8218;', // these are Windows CP1252 specific characters	'&#131;' => '&#402;',  // they would look weird on non-Windows browsers	'&#132;' => '&#8222;',	'&#133;' => '&#8230;',	'&#134;' => '&#8224;',	'&#135;' => '&#8225;',	'&#136;' => '&#710;',	'&#137;' => '&#8240;',	'&#138;' => '&#352;',	'&#139;' => '&#8249;',	'&#140;' => '&#338;',	'&#141;' => '',	'&#142;' => '&#382;',	'&#143;' => '',	'&#144;' => '',	'&#145;' => '&#8216;',	'&#146;' => '&#8217;',	'&#147;' => '&#8220;',	'&#148;' => '&#8221;',	'&#149;' => '&#8226;',	'&#150;' => '&#8211;',	'&#151;' => '&#8212;',	'&#152;' => '&#732;',	'&#153;' => '&#8482;',	'&#154;' => '&#353;',	'&#155;' => '&#8250;',	'&#156;' => '&#339;',	'&#157;' => '',	'&#158;' => '',	'&#159;' => '&#376;'	);	// Remove metadata tags	$content = preg_replace('/<title>(.+?)<\/title>/','',$content);	$content = preg_replace('/<category>(.+?)<\/category>/','',$content);	// Converts lone & characters into &#38; (a.k.a. &amp;)	$content = preg_replace('/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content);	// Fix Word pasting	$content = strtr($content, $wp_htmltranswinuni);	// Just a little XHTML help	$content = str_replace('<br>', '<br />', $content);	$content = str_replace('<hr>', '<hr />', $content);	return $content;}/** * Will only balance the tags if forced to and the option is set to balance tags. * * The option 'use_balanceTags' is used for whether the tags will be balanced. * Both the $force parameter and 'use_balanceTags' option will have to be true * before the tags will be balanced. * * @since 0.71 * * @param string $text Text to be balanced * @param bool $force Forces balancing, ignoring the value of the option. Default false. * @return string Balanced text */function balanceTags( $text, $force = false ) {	if ( !$force && get_option('use_balanceTags') == 0 )		return $text;	return force_balance_tags( $text );}/** * Balances tags of string using a modified stack. * * @since 2.0.4 * * @author Leonard Lin <leonard@acm.org> * @license GPL v2.0 * @copyright November 4, 2001 * @version 1.1 * @todo Make better - change loop condition to $text in 1.2 * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004 *		1.1  Fixed handling of append/stack pop order of end text *			 Added Cleaning Hooks *		1.0  First Version * * @param string $text Text to be balanced. * @return string Balanced text. */function force_balance_tags( $text ) {	$tagstack = array();	$stacksize = 0;	$tagqueue = '';	$newtext = '';	$single_tags = array('br', 'hr', 'img', 'input'); // Known single-entity/self-closing tags	$nestable_tags = array('blockquote', 'div', 'span'); // Tags that can be immediately nested within themselves	// WP bug fix for comments - in case you REALLY meant to type '< !--'	$text = str_replace('< !--', '<    !--', $text);	// WP bug fix for LOVE <3 (and other situations with '<' before a number)	$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);	while ( preg_match("/<(\/?[\w:]*)\s*([^>]*)>/", $text, $regex) ) {		$newtext .= $tagqueue;		$i = strpos($text, $regex[0]);		$l = strlen($regex[0]);		// clear the shifter		$tagqueue = '';		// Pop or Push		if ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag			$tag = strtolower(substr($regex[1],1));			// if too many closing tags			if( $stacksize <= 0 ) {				$tag = '';				// or close to be safe $tag = '/' . $tag;			}			// if stacktop value = tag close value then pop			else if ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag				$tag = '</' . $tag . '>'; // Close Tag				// Pop				array_pop( $tagstack );				$stacksize--;			} else { // closing tag not at top, search for it				for ( $j = $stacksize-1; $j >= 0; $j-- ) {					if ( $tagstack[$j] == $tag ) {					// add tag to tagqueue						for ( $k = $stacksize-1; $k >= $j; $k--) {							$tagqueue .= '</' . array_pop( $tagstack ) . '>';							$stacksize--;						}						break;					}				}				$tag = '';			}		} else { // Begin Tag			$tag = strtolower($regex[1]);			// Tag Cleaning			// If self-closing or '', don't do anything.			if ( substr($regex[2],-1) == '/' || $tag == '' ) {				// do nothing			}			// ElseIf it's a known single-entity tag but it doesn't close itself, do so			elseif ( in_array($tag, $single_tags) ) {				$regex[2] .= '/';			} else {	// Push the tag onto the stack				// If the top of the stack is the same as the tag we want to push, close previous tag				if ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {					$tagqueue = '</' . array_pop ($tagstack) . '>';					$stacksize--;				}				$stacksize = array_push ($tagstack, $tag);			}			// Attributes			$attributes = $regex[2];			if( !empty($attributes) )				$attributes = ' '.$attributes;			$tag = '<' . $tag . $attributes . '>';			//If already queuing a close tag, then put this tag on, too			if ( !empty($tagqueue) ) {				$tagqueue .= $tag;				$tag = '';			}		}		$newtext .= substr($text, 0, $i) . $tag;		$text = substr($text, $i + $l);	}	// Clear Tag Queue	$newtext .= $tagqueue;	// Add Remaining text	$newtext .= $text;	// Empty Stack	while( $x = array_pop($tagstack) )		$newtext .= '</' . $x . '>'; // Add remaining tags to close	// WP fix for the bug with HTML comments	$newtext = str_replace("< !--","<!--",$newtext);	$newtext = str_replace("<    !--","< !--",$newtext);	return $newtext;}/** * Acts on text which is about to be edited. * * Unless $richedit is set, it is simply a holder for the 'format_to_edit' * filter. If $richedit is set true htmlspecialchars() will be run on the * content, converting special characters to HTMl entities. * * @since 0.71 * * @param string $content The text about to be edited. * @param bool $richedit Whether the $content should pass through htmlspecialchars(). Default false. * @return string The text after the filter (and possibly htmlspecialchars()) has been run. */function format_to_edit($content, $richedit = false) {	$content = apply_filters('format_to_edit', $content);	if (! $richedit )		$content = htmlspecialchars($content);	return $content;}/** * Holder for the 'format_to_post' filter. * * @since 0.71 * * @param string $content The text to pass through the filter. * @return string Text returned from the 'format_to_post' filter. */function format_to_post($content) {	$content = apply_filters('format_to_post', $content);	return $content;}/** * Add leading zeros when necessary. * * If you set the threshold to '4' and the number is '10', then you will get * back '0010'. If you set the number to '4' and the number is '5000', then you * will get back '5000'. * * Uses sprintf to append the amount of zeros based on the $threshold parameter * and the size of the number. If the number is large enough, then no zeros will * be appended. * * @since 0.71 * * @param mixed $number Number to append zeros to if not greater than threshold. * @param int $threshold Digit places number needs to be to not have zeros added. * @return string Adds leading zeros to number if needed. */function zeroise($number, $threshold) {	return sprintf('%0'.$threshold.'s', $number);}/** * Adds backslashes before letters and before a number at the start of a string. * * @since 0.71 * * @param string $string Value to which backslashes will be added. * @return string String with backslashes inserted. */function backslashit($string) {	$string = preg_replace('/^([0-9])/', '\\\\\\\\\1', $string);	$string = preg_replace('/([a-z])/i', '\\\\\1', $string);	return $string;}/** * Appends a trailing slash. * * Will remove trailing slash if it exists already before adding a trailing * slash. This prevents double slashing a string or path. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 1.2.0 * @uses untrailingslashit() Unslashes string if it was slashed already. * * @param string $string What to add the trailing slash to. * @return string String with trailing slash added. */function trailingslashit($string) {	return untrailingslashit($string) . '/';}/** * Removes trailing slash if it exists. * * The primary use of this is for paths and thus should be used for paths. It is * not restricted to paths and offers no specific path support. * * @since 2.2.0 * * @param string $string What to remove the trailing slash from. * @return string String without the trailing slash. */function untrailingslashit($string) {	return rtrim($string, '/');}/** * Adds slashes to escape strings. * * Slashes will first be removed if magic_quotes_gpc is set, see {@link * http://www.php.net/magic_quotes} for more details. * * @since 0.71 * * @param string $gpc The string returned from HTTP request data. * @return string Returns a string escaped with slashes. */function addslashes_gpc($gpc) {	if ( get_magic_quotes_gpc() )		$gpc = stripslashes($gpc);	return esc_sql($gpc);}/** * Navigates through an array and removes slashes from the values. * * If an array is passed, the array_map() function causes a callback to pass the * value back to the function. The slashes from this value will removed. * * @since 2.0.0 * * @param array|string $value The array or string to be striped. * @return array|string Stripped array (or string in the callback). */function stripslashes_deep($value) {	if ( is_array($value) ) {		$value = array_map('stripslashes_deep', $value);	} elseif ( is_object($value) ) {		$vars = get_object_vars( $value );		foreach ($vars as $key=>$data) {			$value->{$key} = stripslashes_deep( $data );		}	} else {		$value = stripslashes($value);	}	return $value;}/** * Navigates through an array and encodes the values to be used in a URL. * * Uses a callback to pass the value of the array back to the function as a * string. * * @since 2.2.0 * * @param array|string $value The array or string to be encoded. * @return array|string $value The encoded array (or string from the callback). */function urlencode_deep($value) {	$value = is_array($value) ? array_map('urlencode_deep', $value) : urlencode($value);	return $value;}/** * Converts email addresses characters to HTML entities to block spam bots. * * @since 0.71 * * @param string $emailaddy Email address. * @param int $mailto Optional. Range from 0 to 1. Used for encoding. * @return string Converted email address. */function antispambot($emailaddy, $mailto=0) {	$emailNOSPAMaddy = '';	srand ((float) microtime() * 1000000);	for ($i = 0; $i < strlen($emailaddy); $i = $i + 1) {		$j = floor(rand(0, 1+$mailto));		if ($j==0) {			$emailNOSPAMaddy .= '&#'.ord(substr($emailaddy,$i,1)).';';		} elseif ($j==1) {			$emailNOSPAMaddy .= substr($emailaddy,$i,1);		} elseif ($j==2) {			$emailNOSPAMaddy .= '%'.zeroise(dechex(ord(substr($emailaddy, $i, 1))), 2);		}	}	$emailNOSPAMaddy = str_replace('@','&#64;',$emailNOSPAMaddy);	return $emailNOSPAMaddy;}/** * Callback to convert URI match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URI address. */function _make_url_clickable_cb($matches) {	$url = $matches[2];	$url = esc_url($url);	if ( empty($url) )		return $matches[0];	return $matches[1] . "<a href=\"$url\" rel=\"nofollow\">$url</a>";}/** * Callback to convert URL match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with URL address. */function _make_web_ftp_clickable_cb($matches) {	$ret = '';	$dest = $matches[2];	$dest = 'http://' . $dest;	$dest = esc_url($dest);	if ( empty($dest) )		return $matches[0];	// removed trailing [.,;:)] from URL	if ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {		$ret = substr($dest, -1);		$dest = substr($dest, 0, strlen($dest)-1);	}	return $matches[1] . "<a href=\"$dest\" rel=\"nofollow\">$dest</a>$ret";}/** * Callback to convert email address match to HTML A element. * * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link * make_clickable()}. * * @since 2.3.2 * @access private * * @param array $matches Single Regex Match. * @return string HTML A element with email address. */function _make_email_clickable_cb($matches) {	$email = $matches[2] . '@' . $matches[3];	return $matches[1] . "<a href=\"mailto:$email\">$email</a>";}/** * Convert plaintext URI to HTML links. * * Converts URI, www and ftp, and email addresses. Finishes by fixing links * within links. * * @since 0.71 * * @param string $ret Content to convert URIs. * @return string Content with converted URIs. */function make_clickable($ret) {	$ret = ' ' . $ret;	// in testing, using arrays here was found to be faster	$ret = preg_replace_callback('#(?<=[\s>])(\()?([\w]+?://(?:[\w\\x80-\\xff\#$%&~/=?@\[\](+-]|[.,;:](?![\s<]|(\))?([\s]|$))|(?(1)\)(?![\s<.,;:]|$)|\)))+)#is', '_make_url_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])((www|ftp)\.[\w\\x80-\\xff\#$%&~/.\-;:=,?@\[\]+]+)#is', '_make_web_ftp_clickable_cb', $ret);	$ret = preg_replace_callback('#([\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret);	// this one is not in an array because we need it to run last, for cleanup of accidental links within links	$ret = preg_replace("#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i", "$1$3</a>", $ret);	$ret = trim($ret);	return $ret;}/** * Adds rel nofollow string to all HTML A elements in content. * * @since 1.5.0 * * @param string $text Content that may contain HTML A elements. * @return string Converted content. */function wp_rel_nofollow( $text ) {	// This is a pre save filter, so text is already escaped.	$text = stripslashes($text);	$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);	$text = esc_sql($text);	return $text;}/** * Callback to used to add rel=nofollow string to HTML A element. * * Will remove already existing rel="nofollow" and rel='nofollow' from the * string to prevent from invalidating (X)HTML. * * @since 2.3.0 * * @param array $matches Single Match * @return string HTML A Element with rel nofollow. */function wp_rel_nofollow_callback( $matches ) {	$text = $matches[1];	$text = str_replace(array(' rel="nofollow"', " rel='nofollow'"), '', $text);	return "<a $text rel=\"nofollow\">";}/** * Convert one smiley code to the icon graphic file equivalent. * * Looks up one smiley code in the $wpsmiliestrans global array and returns an * <img> string for that smiley. * * @global array $wpsmiliestrans * @since 2.8.0 * * @param string $smiley Smiley code to convert to image. * @return string Image string for smiley. */function translate_smiley($smiley) {	global $wpsmiliestrans;	if (count($smiley) == 0) {		return '';	}	$siteurl = get_option( 'siteurl' );	$smiley = trim(reset($smiley));	$img = $wpsmiliestrans[$smiley];	$smiley_masked = esc_attr($smiley);	$srcurl = apply_filters('smilies_src', "$siteurl/wp-includes/images/smilies/$img", $img, $siteurl);	return " <img src='$srcurl' alt='$smiley_masked' class='wp-smiley' /> ";}/** * Convert text equivalent of smilies to images. * * Will only convert smilies if the option 'use_smilies' is true and the global * used in the function isn't empty. * * @since 0.71 * @uses $wp_smiliessearch * * @param string $text Content to convert smilies from text. * @return string Converted content with text smilies replaced with images. */function convert_smilies($text) {	global $wp_smiliessearch;	$output = '';	if ( get_option('use_smilies') && !empty($wp_smiliessearch) ) {		// HTML loop taken from texturize function, could possible be consolidated		$textarr = preg_split("/(<.*>)/U", $text, -1, PREG_SPLIT_DELIM_CAPTURE); // capture the tags as well as in between		$stop = count($textarr);// loop stuff		for ($i = 0; $i < $stop; $i++) {			$content = $textarr[$i];			if ((strlen($content) > 0) && ('<' != $content{0})) { // If it's not a tag				$content = preg_replace_callback($wp_smiliessearch, 'translate_smiley', $content);			}			$output .= $content;		}	} else {		// return default text.		$output = $text;	}	return $output;}/** * Verifies that an email is valid. * * Does not grok i18n domains. Not RFC compliant. * * @since 0.71 * * @param string $email Email address to verify. * @param boolean $deprecated. Deprecated. * @return string|bool Either false or the valid email address. */function is_email( $email, $deprecated = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'is_email', false, $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'is_email', false, $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	if ( !preg_match( '/^[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]+$/', $local ) ) {		return apply_filters( 'is_email', false, $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	if ( preg_match( '/\.{2,}/', $domain ) ) {		return apply_filters( 'is_email', false, $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	if ( trim( $domain, " \t\n\r\0\x0B." ) !== $domain ) {		return apply_filters( 'is_email', false, $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'is_email', false, $email, 'domain_no_periods' );	}	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens and whitespace		if ( trim( $sub, " \t\n\r\0\x0B-" ) !== $sub ) {			return apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );		}		// Test for invalid characters		if ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {			return apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );		}	}	// Congratulations your email made it!	return apply_filters( 'is_email', $email, $email, null );}/** * Convert to ASCII from email subjects. * * @since 1.2.0 * @usedby wp_mail() handles charsets in email subjects * * @param string $string Subject line * @return string Converted string to ASCII */function wp_iso_descrambler($string) {	/* this may only work with iso-8859-1, I'm afraid */	if (!preg_match('#\=\?(.+)\?Q\?(.+)\?\=#i', $string, $matches)) {		return $string;	} else {		$subject = str_replace('_', ' ', $matches[2]);		$subject = preg_replace_callback('#\=([0-9a-f]{2})#i', create_function('$match', 'return chr(hexdec(strtolower($match[1])));'), $subject);		return $subject;	}}/** * Returns a date in the GMT equivalent. * * Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the * value of the 'gmt_offset' option. Return format can be overridden using the * $format parameter. If PHP5 is supported, the function uses the DateTime and * DateTimeZone objects to respect time zone differences in DST. * * @since 1.2.0 * * @uses get_option() to retrieve the the value of 'gmt_offset'. * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string GMT version of the date provided. */function get_gmt_from_date($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$tz = get_option('timezone_string');	if( class_exists('DateTime') && $tz ) {		//PHP5		date_default_timezone_set( $tz );		$datetime = new DateTime( $string );		$datetime->setTimezone( new DateTimeZone('UTC') );		$offset = $datetime->getOffset();		$datetime->modify( '+' . $offset / 3600 . ' hours');		$string_gmt = gmdate($format, $datetime->format('U'));		date_default_timezone_set('UTC');	}	else {		//PHP4		$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);		$string_gmt = gmdate($format, $string_time - get_option('gmt_offset') * 3600);	}	return $string_gmt;}/** * Converts a GMT date into the correct format for the blog. * * Requires and returns in the Y-m-d H:i:s format. Simply adds the value of * gmt_offset.Return format can be overridden using the $format parameter * * @since 1.2.0 * * @param string $string The date to be converted. * @param string $format The format string for the returned date (default is Y-m-d H:i:s) * @return string Formatted date relative to the GMT offset. */function get_date_from_gmt($string, $format = 'Y-m-d H:i:s') {	preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches);	$string_time = gmmktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);	$string_localtime = gmdate($format, $string_time + get_option('gmt_offset')*3600);	return $string_localtime;}/** * Computes an offset in seconds from an iso8601 timezone. * * @since 1.5.0 * * @param string $timezone Either 'Z' for 0 offset or 'hhmm'. * @return int|float The offset in seconds. */function iso8601_timezone_to_offset($timezone) {	// $timezone is either 'Z' or '[+|-]hhmm'	if ($timezone == 'Z') {		$offset = 0;	} else {		$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;		$hours   = intval(substr($timezone, 1, 2));		$minutes = intval(substr($timezone, 3, 4)) / 60;		$offset  = $sign * 3600 * ($hours + $minutes);	}	return $offset;}/** * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]. * * @since 1.5.0 * * @param string $date_string Date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}. * @param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'. * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s. */function iso8601_to_datetime($date_string, $timezone = 'user') {	$timezone = strtolower($timezone);	if ($timezone == 'gmt') {		preg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);		if (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset			$offset = iso8601_timezone_to_offset($date_bits[7]);		} else { // we don't have a timezone, so we assume user local timezone (not server's!)			$offset = 3600 * get_option('gmt_offset');		}		$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);		$timestamp -= $offset;		return gmdate('Y-m-d H:i:s', $timestamp);	} else if ($timezone == 'user') {		return preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\+|\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);	}}/** * Adds a element attributes to open links in new windows. * * Comment text in popup windows should be filtered through this. Right now it's * a moderately dumb function, ideally it would detect whether a target or rel * attribute was already there and adjust its actions accordingly. * * @since 0.71 * * @param string $text Content to replace links to open in a new window. * @return string Content that has filtered links. */function popuplinks($text) {	$text = preg_replace('/<a (.+?)>/i', "<a $1 target='_blank' rel='external'>", $text);	return $text;}/** * Strips out all characters that are not allowable in an email. * * @since 1.5.0 * * @param string $email Email address to filter. * @return string Filtered email address. */function sanitize_email( $email ) {	// Test for the minimum length the email can be	if ( strlen( $email ) < 3 ) {		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );	}	// Test for an @ character after the first position	if ( strpos( $email, '@', 1 ) === false ) {		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );	}	// Split out the local and domain parts	list( $local, $domain ) = explode( '@', $email, 2 );	// LOCAL PART	// Test for invalid characters	$local = preg_replace( '/[^a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~\.-]/', '', $local );	if ( '' === $local ) {		return apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );	}	// DOMAIN PART	// Test for sequences of periods	$domain = preg_replace( '/\.{2,}/', '', $domain );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );	}	// Test for leading and trailing periods and whitespace	$domain = trim( $domain, " \t\n\r\0\x0B." );	if ( '' === $domain ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );	}	// Split the domain into subs	$subs = explode( '.', $domain );	// Assume the domain will have at least two subs	if ( 2 > count( $subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );	}	// Create an array that will contain valid subs	$new_subs = array();	// Loop through each sub	foreach ( $subs as $sub ) {		// Test for leading and trailing hyphens		$sub = trim( $sub, " \t\n\r\0\x0B-" );		// Test for invalid characters		$sub = preg_replace( '/^[^a-z0-9-]+$/i', '', $sub );		// If there's anything left, add it to the valid subs		if ( '' !== $sub ) {			$new_subs[] = $sub;		}	}	// If there aren't 2 or more valid subs	if ( 2 > count( $new_subs ) ) {		return apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );	}	// Join valid subs into the new domain	$domain = join( '.', $new_subs );	// Put the email back together	$email = $local . '@' . $domain;	// Congratulations your email made it!	return apply_filters( 'sanitize_email', $email, $email, null );}/** * Determines the difference between two timestamps. * * The difference is returned in a human readable format such as "1 hour", * "5 mins", "2 days". * * @since 1.5.0 * * @param int $from Unix timestamp from which the difference begins. * @param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set. * @return string Human readable time difference. */function human_time_diff( $from, $to = '' ) {	if ( empty($to) )		$to = time();	$diff = (int) abs($to - $from);	if ($diff <= 3600) {		$mins = round($diff / 60);		if ($mins <= 1) {			$mins = 1;		}		/* translators: min=minute */		$since = sprintf(_n('%s min', '%s mins', $mins), $mins);	} else if (($diff <= 86400) && ($diff > 3600)) {		$hours = round($diff / 3600);		if ($hours <= 1) {			$hours = 1;		}		$since = sprintf(_n('%s hour', '%s hours', $hours), $hours);	} elseif ($diff >= 86400) {		$days = round($diff / 86400);		if ($days <= 1) {			$days = 1;		}		$since = sprintf(_n('%s day', '%s days', $days), $days);	}	return $since;}/** * Generates an excerpt from the content, if needed. * * The excerpt word amount will be 55 words and if the amount is greater than * that, then the string ' [...]' will be appended to the excerpt. If the string * is less than 55 words, then the content will be returned as is. * * The 55 word limit can be modified by plugins/themes using the excerpt_length filter * The ' [...]' string can be modified by plugins/themes using the excerpt_more filter * * @since 1.5.0 * * @param string $text The excerpt. If set to empty an excerpt is generated. * @return string The excerpt. */function wp_trim_excerpt($text) {	$raw_excerpt = $text;	if ( '' == $text ) {		$text = get_the_content('');		$text = strip_shortcodes( $text );		$text = apply_filters('the_content', $text);		$text = str_replace(']]>', ']]&gt;', $text);		$text = strip_tags($text);		$excerpt_length = apply_filters('excerpt_length', 55);		$excerpt_more = apply_filters('excerpt_more', ' ' . '[...]');		$words = preg_split("/[\n\r\t ]+/", $text, $excerpt_length + 1, PREG_SPLIT_NO_EMPTY);		if ( count($words) > $excerpt_length ) {			array_pop($words);			$text = implode(' ', $words);			$text = $text . $excerpt_more;		} else {			$text = implode(' ', $words);		}	}	return apply_filters('wp_trim_excerpt', $text, $raw_excerpt);}/** * Converts named entities into numbered entities. * * @since 1.5.1 * * @param string $text The text within which entities will be converted. * @return string Text with converted entities. */function ent2ncr($text) {	$to_ncr = array(		'&quot;' => '&#34;',		'&amp;' => '&#38;',		'&frasl;' => '&#47;',		'&lt;' => '&#60;',		'&gt;' => '&#62;',		'|' => '&#124;',		'&nbsp;' => '&#160;',		'&iexcl;' => '&#161;',		'&cent;' => '&#162;',		'&pound;' => '&#163;',		'&curren;' => '&#164;',		'&yen;' => '&#165;',		'&brvbar;' => '&#166;',		'&brkbar;' => '&#166;',		'&sect;' => '&#167;',		'&uml;' => '&#168;',		'&die;' => '&#168;',		'&copy;' => '&#169;',		'&ordf;' => '&#170;',		'&laquo;' => '&#171;',		'&not;' => '&#172;',		'&shy;' => '&#173;',		'&reg;' => '&#174;',		'&macr;' => '&#175;',		'&hibar;' => '&#175;',		'&deg;' => '&#176;',		'&plusmn;' => '&#177;',		'&sup2;' => '&#178;',		'&sup3;' => '&#179;',		'&acute;' => '&#180;',		'&micro;' => '&#181;',		'&para;' => '&#182;',		'&middot;' => '&#183;',		'&cedil;' => '&#184;',		'&sup1;' => '&#185;',		'&ordm;' => '&#186;',		'&raquo;' => '&#187;',		'&frac14;' => '&#188;',		'&frac12;' => '&#189;',		'&frac34;' => '&#190;',		'&iquest;' => '&#191;',		'&Agrave;' => '&#192;',		'&Aacute;' => '&#193;',		'&Acirc;' => '&#194;',		'&Atilde;' => '&#195;',		'&Auml;' => '&#196;',		'&Aring;' => '&#197;',		'&AElig;' => '&#198;',		'&Ccedil;' => '&#199;',		'&Egrave;' => '&#200;',		'&Eacute;' => '&#201;',		'&Ecirc;' => '&#202;',		'&Euml;' => '&#203;',		'&Igrave;' => '&#204;',		'&Iacute;' => '&#205;',		'&Icirc;' => '&#206;',		'&Iuml;' => '&#207;',		'&ETH;' => '&#208;',		'&Ntilde;' => '&#209;',		'&Ograve;' => '&#210;',		'&Oacute;' => '&#211;',		'&Ocirc;' => '&#212;',		'&Otilde;' => '&#213;',		'&Ouml;' => '&#214;',		'&times;' => '&#215;',		'&Oslash;' => '&#216;',		'&Ugrave;' => '&#217;',		'&Uacute;' => '&#218;',		'&Ucirc;' => '&#219;',		'&Uuml;' => '&#220;',		'&Yacute;' => '&#221;',		'&THORN;' => '&#222;',		'&szlig;' => '&#223;',		'&agrave;' => '&#224;',		'&aacute;' => '&#225;',		'&acirc;' => '&#226;',		'&atilde;' => '&#227;',		'&auml;' => '&#228;',		'&aring;' => '&#229;',		'&aelig;' => '&#230;',		'&ccedil;' => '&#231;',		'&egrave;' => '&#232;',		'&eacute;' => '&#233;',		'&ecirc;' => '&#234;',		'&euml;' => '&#235;',		'&igrave;' => '&#236;',		'&iacute;' => '&#237;',		'&icirc;' => '&#238;',		'&iuml;' => '&#239;',		'&eth;' => '&#240;',		'&ntilde;' => '&#241;',		'&ograve;' => '&#242;',		'&oacute;' => '&#243;',		'&ocirc;' => '&#244;',		'&otilde;' => '&#245;',		'&ouml;' => '&#246;',		'&divide;' => '&#247;',		'&oslash;' => '&#248;',		'&ugrave;' => '&#249;',		'&uacute;' => '&#250;',		'&ucirc;' => '&#251;',		'&uuml;' => '&#252;',		'&yacute;' => '&#253;',		'&thorn;' => '&#254;',		'&yuml;' => '&#255;',		'&OElig;' => '&#338;',		'&oelig;' => '&#339;',		'&Scaron;' => '&#352;',		'&scaron;' => '&#353;',		'&Yuml;' => '&#376;',		'&fnof;' => '&#402;',		'&circ;' => '&#710;',		'&tilde;' => '&#732;',		'&Alpha;' => '&#913;',		'&Beta;' => '&#914;',		'&Gamma;' => '&#915;',		'&Delta;' => '&#916;',		'&Epsilon;' => '&#917;',		'&Zeta;' => '&#918;',		'&Eta;' => '&#919;',		'&Theta;' => '&#920;',		'&Iota;' => '&#921;',		'&Kappa;' => '&#922;',		'&Lambda;' => '&#923;',		'&Mu;' => '&#924;',		'&Nu;' => '&#925;',		'&Xi;' => '&#926;',		'&Omicron;' => '&#927;',		'&Pi;' => '&#928;',		'&Rho;' => '&#929;',		'&Sigma;' => '&#931;',		'&Tau;' => '&#932;',		'&Upsilon;' => '&#933;',		'&Phi;' => '&#934;',		'&Chi;' => '&#935;',		'&Psi;' => '&#936;',		'&Omega;' => '&#937;',		'&alpha;' => '&#945;',		'&beta;' => '&#946;',		'&gamma;' => '&#947;',		'&delta;' => '&#948;',		'&epsilon;' => '&#949;',		'&zeta;' => '&#950;',		'&eta;' => '&#951;',		'&theta;' => '&#952;',		'&iota;' => '&#953;',		'&kappa;' => '&#954;',		'&lambda;' => '&#955;',		'&mu;' => '&#956;',		'&nu;' => '&#957;',		'&xi;' => '&#958;',		'&omicron;' => '&#959;',		'&pi;' => '&#960;',		'&rho;' => '&#961;',		'&sigmaf;' => '&#962;',		'&sigma;' => '&#963;',		'&tau;' => '&#964;',		'&upsilon;' => '&#965;',		'&phi;' => '&#966;',		'&chi;' => '&#967;',		'&psi;' => '&#968;',		'&omega;' => '&#969;',		'&thetasym;' => '&#977;',		'&upsih;' => '&#978;',		'&piv;' => '&#982;',		'&ensp;' => '&#8194;',		'&emsp;' => '&#8195;',		'&thinsp;' => '&#8201;',		'&zwnj;' => '&#8204;',		'&zwj;' => '&#8205;',		'&lrm;' => '&#8206;',		'&rlm;' => '&#8207;',		'&ndash;' => '&#8211;',		'&mdash;' => '&#8212;',		'&lsquo;' => '&#8216;',		'&rsquo;' => '&#8217;',		'&sbquo;' => '&#8218;',		'&ldquo;' => '&#8220;',		'&rdquo;' => '&#8221;',		'&bdquo;' => '&#8222;',		'&dagger;' => '&#8224;',		'&Dagger;' => '&#8225;',		'&bull;' => '&#8226;',		'&hellip;' => '&#8230;',		'&permil;' => '&#8240;',		'&prime;' => '&#8242;',		'&Prime;' => '&#8243;',		'&lsaquo;' => '&#8249;',		'&rsaquo;' => '&#8250;',		'&oline;' => '&#8254;',		'&frasl;' => '&#8260;',		'&euro;' => '&#8364;',		'&image;' => '&#8465;',		'&weierp;' => '&#8472;',		'&real;' => '&#8476;',		'&trade;' => '&#8482;',		'&alefsym;' => '&#8501;',		'&crarr;' => '&#8629;',		'&lArr;' => '&#8656;',		'&uArr;' => '&#8657;',		'&rArr;' => '&#8658;',		'&dArr;' => '&#8659;',		'&hArr;' => '&#8660;',		'&forall;' => '&#8704;',		'&part;' => '&#8706;',		'&exist;' => '&#8707;',		'&empty;' => '&#8709;',		'&nabla;' => '&#8711;',		'&isin;' => '&#8712;',		'&notin;' => '&#8713;',		'&ni;' => '&#8715;',		'&prod;' => '&#8719;',		'&sum;' => '&#8721;',		'&minus;' => '&#8722;',		'&lowast;' => '&#8727;',		'&radic;' => '&#8730;',		'&prop;' => '&#8733;',		'&infin;' => '&#8734;',		'&ang;' => '&#8736;',		'&and;' => '&#8743;',		'&or;' => '&#8744;',		'&cap;' => '&#8745;',		'&cup;' => '&#8746;',		'&int;' => '&#8747;',		'&there4;' => '&#8756;',		'&sim;' => '&#8764;',		'&cong;' => '&#8773;',		'&asymp;' => '&#8776;',		'&ne;' => '&#8800;',		'&equiv;' => '&#8801;',		'&le;' => '&#8804;',		'&ge;' => '&#8805;',		'&sub;' => '&#8834;',		'&sup;' => '&#8835;',		'&nsub;' => '&#8836;',		'&sube;' => '&#8838;',		'&supe;' => '&#8839;',		'&oplus;' => '&#8853;',		'&otimes;' => '&#8855;',		'&perp;' => '&#8869;',		'&sdot;' => '&#8901;',		'&lceil;' => '&#8968;',		'&rceil;' => '&#8969;',		'&lfloor;' => '&#8970;',		'&rfloor;' => '&#8971;',		'&lang;' => '&#9001;',		'&rang;' => '&#9002;',		'&larr;' => '&#8592;',		'&uarr;' => '&#8593;',		'&rarr;' => '&#8594;',		'&darr;' => '&#8595;',		'&harr;' => '&#8596;',		'&loz;' => '&#9674;',		'&spades;' => '&#9824;',		'&clubs;' => '&#9827;',		'&hearts;' => '&#9829;',		'&diams;' => '&#9830;'	);	return str_replace( array_keys($to_ncr), array_values($to_ncr), $text );}/** * Formats text for the rich text editor. * * The filter 'richedit_pre' is applied here. If $text is empty the filter will * be applied to an empty string. * * @since 2.0.0 * * @param string $text The text to be formatted. * @return string The formatted text after filter is applied. */function wp_richedit_pre($text) {	// Filtering a blank results in an annoying <br />\n	if ( empty($text) ) return apply_filters('richedit_pre', '');	$output = convert_chars($text);	$output = wpautop($output);	$output = htmlspecialchars($output, ENT_NOQUOTES);	return apply_filters('richedit_pre', $output);}/** * Formats text for the HTML editor. * * Unless $output is empty it will pass through htmlspecialchars before the * 'htmledit_pre' filter is applied. * * @since 2.5.0 * * @param string $output The text to be formatted. * @return string Formatted text after filter applied. */function wp_htmledit_pre($output) {	if ( !empty($output) )		$output = htmlspecialchars($output, ENT_NOQUOTES); // convert only < > &	return apply_filters('htmledit_pre', $output);}/** * Perform a deep string replace operation to ensure the values in $search are no longer present * * Repeats the replacement operation until it no longer replaces anything so as to remove "nested" values * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that * str_replace would return * * @since 2.8.1 * @access private * * @param string|array $search * @param string $subject * @return string The processed string */function _deep_replace( $search, $subject ) {	$found = true;	$subject = (string) $subject;	while ( $found ) {		$found = false;		foreach ( (array) $search as $val ) {			while ( strpos( $subject, $val ) !== false ) {				$found = true;				$subject = str_replace( $val, '', $subject );			}		}	}	return $subject;}/** * Escapes data for use in a MySQL query * * This is just a handy shortcut for $wpdb->escape(), for completeness' sake * * @since 2.8.0 * @param string $sql Unescaped SQL data * @return string The cleaned $sql */function esc_sql( $sql ) {	global $wpdb;	return $wpdb->escape( $sql );}/** * Checks and cleans a URL. * * A number of characters are removed from the URL. If the URL is for displaying * (the default behaviour) amperstands are also replaced. The 'clean_url' filter * is applied to the returned cleaned URL. * * @since 2.8.0 * @uses wp_kses_bad_protocol() To only permit protocols in the URL set *		via $protocols or the common ones set in the function. * * @param string $url The URL to be cleaned. * @param array $protocols Optional. An array of acceptable protocols. *		Defaults to 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet' if not set. * @param string $_context Private. Use esc_url_raw() for database usage. * @return string The cleaned $url after the 'clean_url' filter is applied. */function esc_url( $url, $protocols = null, $_context = 'display' ) {	$original_url = $url;	if ( '' == $url )		return $url;	$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);	$strip = array('%0d', '%0a', '%0D', '%0A');	$url = _deep_replace($strip, $url);	$url = str_replace(';//', '://', $url);	/* If the URL doesn't appear to contain a scheme, we	 * presume it needs http:// appended (unless a relative	 * link starting with / or a php file).	 */	if ( strpos($url, ':') === false &&		substr( $url, 0, 1 ) != '/' && substr( $url, 0, 1 ) != '#' && !preg_match('/^[a-z0-9-]+?\.php/i', $url) )		$url = 'http://' . $url;	// Replace ampersands and single quotes only when displaying.	if ( 'display' == $_context ) {		$url = preg_replace('/&([^#])(?![a-z]{2,8};)/', '&#038;$1', $url);		$url = str_replace( "'", '&#039;', $url );	}	if ( !is_array($protocols) )		$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');	if ( wp_kses_bad_protocol( $url, $protocols ) != $url )		return '';	return apply_filters('clean_url', $url, $original_url, $_context);}/** * Performs esc_url() for database usage. * * @since 2.8.0 * @uses esc_url() * * @param string $url The URL to be cleaned. * @param array $protocols An array of acceptable protocols. * @return string The cleaned URL. */function esc_url_raw( $url, $protocols = null ) {	return esc_url( $url, $protocols, 'db' );}/** * Convert entities, while preserving already-encoded entities. * * @link http://www.php.net/htmlentities Borrowed from the PHP Manual user notes. * * @since 1.2.2 * * @param string $myHTML The text to be converted. * @return string Converted text. */function htmlentities2($myHTML) {	$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );	$translation_table[chr(38)] = '&';	return preg_replace( "/&(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/", "&amp;", strtr($myHTML, $translation_table) );}/** * Escape single quotes, htmlspecialchar " < > &, and fix line endings. * * Escapes text strings for echoing in JS. It is intended to be used for inline JS * (in a tag attribute, for example onclick="..."). Note that the strings have to * be in single quotes. The filter 'js_escape' is also applied here. * * @since 2.8.0 * * @param string $text The text to be escaped. * @return string Escaped text. */function esc_js( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );	$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", stripslashes( $safe_text ) );	$safe_text = str_replace( "\r", '', $safe_text );	$safe_text = str_replace( "\n", '\\n', addslashes( $safe_text ) );	return apply_filters( 'js_escape', $safe_text, $text );}/** * Escaping for HTML blocks. * * @since 2.8.0 * * @param string $text * @return string */function esc_html( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'esc_html', $safe_text, $text );}/** * Escaping for HTML attributes. * * @since 2.8.0 * * @param string $text * @return string */function esc_attr( $text ) {	$safe_text = wp_check_invalid_utf8( $text );	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );	return apply_filters( 'attribute_escape', $safe_text, $text );}/** * Escape a HTML tag name. * * @since 2.5.0 * * @param string $tag_name * @return string */function tag_escape($tag_name) {	$safe_tag = strtolower( preg_replace('/[^a-zA-Z_:]/', '', $tag_name) );	return apply_filters('tag_escape', $safe_tag, $tag_name);}/** * Escapes text for SQL LIKE special characters % and _. * * @since 2.5.0 * * @param string $text The text to be escaped. * @return string text, safe for inclusion in LIKE query. */function like_escape($text) {	return str_replace(array("%", "_"), array("\\%", "\\_"), $text);}/** * Convert full URL paths to absolute paths. * * Removes the http or https protocols and the domain. Keeps the path '/' at the * beginning, so it isn't a true relative link, but from the web root base. * * @since 2.1.0 * * @param string $link Full URL path. * @return string Absolute path. */function wp_make_link_relative( $link ) {	return preg_replace( '|https?://[^/]+(/.*)|i', '$1', $link );}/** * Sanitises various option values based on the nature of the option. * * This is basically a switch statement which will pass $value through a number * of functions depending on the $option. * * @since 2.0.5 * * @param string $option The name of the option. * @param string $value The unsanitised value. * @return string Sanitized value. */function sanitize_option($option, $value) {	switch ( $option ) {		case 'admin_email':			$value = sanitize_email($value);			if ( !is_email($value) ) {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('admin_email', 'invalid_admin_email', __('The email address entered did not appear to be a valid email address. Please enter a valid email address.'));			}			break;		case 'thumbnail_size_w':		case 'thumbnail_size_h':		case 'medium_size_w':		case 'medium_size_h':		case 'large_size_w':		case 'large_size_h':		case 'embed_size_h':		case 'default_post_edit_rows':		case 'mailserver_port':		case 'comment_max_links':		case 'page_on_front':		case 'page_for_posts':		case 'rss_excerpt_length':		case 'default_category':		case 'default_email_category':		case 'default_link_category':		case 'close_comments_days_old':		case 'comments_per_page':		case 'thread_comments_depth':		case 'users_can_register':		case 'start_of_week':			$value = absint( $value );			break;		case 'embed_size_w':			if ( '' !== $value )				$value = absint( $value );			break;		case 'posts_per_page':		case 'posts_per_rss':			$value = (int) $value;			if ( empty($value) )				$value = 1;			if ( $value < -1 )				$value = abs($value);			break;		case 'default_ping_status':		case 'default_comment_status':			// Options that if not there have 0 value but need to be something like "closed"			if ( $value == '0' || $value == '')				$value = 'closed';			break;		case 'blogdescription':		case 'blogname':			$value = addslashes($value);			$value = wp_filter_post_kses( $value ); // calls stripslashes then addslashes			$value = stripslashes($value);			$value = esc_html( $value );			break;		case 'blog_charset':			$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes			break;		case 'date_format':		case 'time_format':		case 'mailserver_url':		case 'mailserver_login':		case 'mailserver_pass':		case 'ping_sites':		case 'upload_path':			$value = strip_tags($value);			$value = addslashes($value);			$value = wp_filter_kses($value); // calls stripslashes then addslashes			$value = stripslashes($value);			break;		case 'gmt_offset':			$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes			break;		case 'siteurl':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('siteurl', 'invalid_siteurl', __('The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		case 'home':			if ( (bool)preg_match( '#http(s?)://(.+)#i', $value) ) {				$value = esc_url_raw($value);			} else {				$value = get_option( $option ); // Resets option to stored value in the case of failed sanitization				if ( function_exists('add_settings_error') )					add_settings_error('home', 'invalid_home', __('The Site address you entered did not appear to be a valid URL. Please enter a valid URL.'));			}			break;		default :			$value = apply_filters("sanitize_option_{$option}", $value, $option);			break;	}	return $value;}/** * Parses a string into variables to be stored in an array. * * Uses {@link http://www.php.net/parse_str parse_str()} and stripslashes if * {@link http://www.php.net/magic_quotes magic_quotes_gpc} is on. * * @since 2.2.1 * @uses apply_filters() for the 'wp_parse_str' filter. * * @param string $string The string to be parsed. * @param array $array Variables will be stored in this array. */function wp_parse_str( $string, &$array ) {	parse_str( $string, $array );	if ( get_magic_quotes_gpc() )		$array = stripslashes_deep( $array );	$array = apply_filters( 'wp_parse_str', $array );}/** * Convert lone less than signs. * * KSES already converts lone greater than signs. * * @uses wp_pre_kses_less_than_callback in the callback function. * @since 2.3.0 * * @param string $text Text to be converted. * @return string Converted text. */function wp_pre_kses_less_than( $text ) {	return preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);}/** * Callback function used by preg_replace. * * @uses esc_html to format the $matches text. * @since 2.3.0 * * @param array $matches Populated by matches to preg_replace. * @return string The text returned after esc_html if needed. */function wp_pre_kses_less_than_callback( $matches ) {	if ( false === strpos($matches[0], '>') )		return esc_html($matches[0]);	return $matches[0];}/** * WordPress implementation of PHP sprintf() with filters. * * @since 2.5.0 * @link http://www.php.net/sprintf * * @param string $pattern The string which formatted args are inserted. * @param mixed $args,... Arguments to be formatted into the $pattern string. * @return string The formatted string. */function wp_sprintf( $pattern ) {	$args = func_get_args( );	$len = strlen($pattern);	$start = 0;	$result = '';	$arg_index = 0;	while ( $len > $start ) {		// Last character: append and break		if ( strlen($pattern) - 1 == $start ) {			$result .= substr($pattern, -1);			break;		}		// Literal %: append and continue		if ( substr($pattern, $start, 2) == '%%' ) {			$start += 2;			$result .= '%';			continue;		}		// Get fragment before next %		$end = strpos($pattern, '%', $start + 1);		if ( false === $end )			$end = $len;		$fragment = substr($pattern, $start, $end - $start);		// Fragment has a specifier		if ( $pattern{$start} == '%' ) {			// Find numbered arguments or take the next one in order			if ( preg_match('/^%(\d+)\$/', $fragment, $matches) ) {				$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';				$fragment = str_replace("%{$matches[1]}$", '%', $fragment);			} else {				++$arg_index;				$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';			}			// Apply filters OR sprintf			$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );			if ( $_fragment != $fragment )				$fragment = $_fragment;			else				$fragment = sprintf($fragment, strval($arg) );		}		// Append to result and move to next fragment		$result .= $fragment;		$start = $end;	}	return $result;}/** * Localize list items before the rest of the content. * * The '%l' must be at the first characters can then contain the rest of the * content. The list items will have ', ', ', and', and ' and ' added depending * on the amount of list items in the $args parameter. * * @since 2.5.0 * * @param string $pattern Content containing '%l' at the beginning. * @param array $args List items to prepend to the content and replace '%l'. * @return string Localized list items and rest of the content. */function wp_sprintf_l($pattern, $args) {	// Not a match	if ( substr($pattern, 0, 2) != '%l' )		return $pattern;	// Nothing to work with	if ( empty($args) )		return '';	// Translate and filter the delimiter set (avoid ampersands and entities here)	$l = apply_filters('wp_sprintf_l', array(		/* translators: used between list items, there is a space after the coma */		'between'          => __(', '),		/* translators: used between list items, there is a space after the and */		'between_last_two' => __(', and '),		/* translators: used between only two list items, there is a space after the and */		'between_only_two' => __(' and '),		));	$args = (array) $args;	$result = array_shift($args);	if ( count($args) == 1 )		$result .= $l['between_only_two'] . array_shift($args);	// Loop when more than two args	$i = count($args);	while ( $i ) {		$arg = array_shift($args);		$i--;		if ( 0 == $i )			$result .= $l['between_last_two'] . $arg;		else			$result .= $l['between'] . $arg;	}	return $result . substr($pattern, 2);}/** * Safely extracts not more than the first $count characters from html string. * * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT* * be counted as one character. For example &amp; will be counted as 4, &lt; as * 3, etc. * * @since 2.5.0 * * @param integer $str String to get the excerpt from. * @param integer $count Maximum number of characters to take. * @return string The excerpt. */function wp_html_excerpt( $str, $count ) {	$str = wp_strip_all_tags( $str, true );	$str = mb_substr( $str, 0, $count );	// remove part of an entity at the end	$str = preg_replace( '/&[^;\s]{0,6}$/', '', $str );	return $str;}/** * Add a Base url to relative links in passed content. * * By default it supports the 'src' and 'href' attributes. However this can be * changed via the 3rd param. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $base The base URL to prefix to links. * @param array $attrs The attributes which should be processed. * @return string The processed content. */function links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {	$attrs = implode('|', (array)$attrs);	return preg_replace_callback("!($attrs)=(['\"])(.+?)\\2!i",			create_function('$m', 'return _links_add_base($m, "' . $base . '");'),			$content);}/** * Callback to add a base url to relative links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $base The base URL to prefix to links. * @return string The processed link. */function _links_add_base($m, $base) {	//1 = attribute name  2 = quotation mark  3 = URL	return $m[1] . '=' . $m[2] .		(strpos($m[3], 'http://') === false ?			path_join($base, $m[3]) :			$m[3])		. $m[2];}/** * Adds a Target attribute to all links in passed content. * * This function by default only applies to <a> tags, however this can be * modified by the 3rd param. * * <b>NOTE:</b> Any current target attributed will be striped and replaced. * * @since 2.7.0 * * @param string $content String to search for links in. * @param string $target The Target to add to the links. * @param array $tags An array of tags to apply to. * @return string The processed content. */function links_add_target( $content, $target = '_blank', $tags = array('a') ) {	$tags = implode('|', (array)$tags);	return preg_replace_callback("!<($tags)(.+?)>!i",			create_function('$m', 'return _links_add_target($m, "' . $target . '");'),			$content);}/** * Callback to add a target attribute to all links in passed content. * * @since 2.7.0 * @access private * * @param string $m The matched link. * @param string $target The Target to add to the links. * @return string The processed link. */function _links_add_target( $m, $target ) {	$tag = $m[1];	$link = preg_replace('|(target=[\'"](.*?)[\'"])|i', '', $m[2]);	return '<' . $tag . $link . ' target="' . $target . '">';}// normalize EOL characters and strip duplicate whitespacefunction normalize_whitespace( $str ) {	$str  = trim($str);	$str  = str_replace("\r", "\n", $str);	$str  = preg_replace( array( '/\n+/', '/[ \t]+/' ), array( "\n", ' ' ), $str );	return $str;}/** * Properly strip all HTML tags including script and style * * @since 2.9.0 * * @param string $string String containing HTML tags * @param bool $remove_breaks optional Whether to remove left over line breaks and white space chars * @return string The processed string. */function wp_strip_all_tags($string, $remove_breaks = false) {	$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\1>@si', '', $string );	$string = strip_tags($string);	if ( $remove_breaks )		$string = preg_replace('/[\r\n\t ]+/', ' ', $string);	return trim($string);}/** * Sanitize a string from user input or from the db * * check for invalid UTF-8, * Convert single < characters to entity, * strip all tags, * remove line breaks, tabs and extra white space, * strip octets. * * @since 2.9.0 * * @param string $str * @return string */function sanitize_text_field($str) {	$filtered = wp_check_invalid_utf8( $str );	if ( strpos($filtered, '<') !== false ) {		$filtered = wp_pre_kses_less_than( $filtered );		// This will strip extra whitespace for us.		$filtered = wp_strip_all_tags( $filtered, true );	} else {		$filtered = trim( preg_replace('/[\r\n\t ]+/', ' ', $filtered) );	}	$match = array();	$found = false;	while ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {		$filtered = str_replace($match[0], '', $filtered);		$found = true;	}	if ( $found ) {		// Strip out the whitespace that may now exist after removing the octets.		$filtered = trim( preg_replace('/ +/', ' ', $filtered) );	}	return apply_filters('sanitize_text_field', $filtered, $str);}/** * Forever eliminate "Wordpress" from the planet (or at least the little bit we can influence). * * Violating our coding standards for a good function name. * * @since 3.0.0 */function capital_P_dangit( $text ) {       return str_replace( 'Wordpress', 'WordPress', $text );}?>
<?php/** * Category Template Tags and API. * * @package WordPress * @subpackage Template *//** * Retrieve category link URL. * * @since 1.0.0 * @uses apply_filters() Calls 'category_link' filter on category link and category ID. * * @param int $category_id Category ID. * @return string */function get_category_link( $category_id ) {	global $wp_rewrite;	$catlink = $wp_rewrite->get_category_permastruct();	if ( empty( $catlink ) ) {		$catlink = home_url('?cat=' . $category_id);	} else {		$category = &get_category( $category_id );		if ( is_wp_error( $category ) )			return $category;		$category_nicename = $category->slug;		if ( $category->parent == $category_id ) // recursive recursion			$category->parent = 0;		elseif ($category->parent != 0 )			$category_nicename = get_category_parents( $category->parent, false, '/', true ) . $category_nicename;		$catlink = str_replace( '%category%', $category_nicename, $catlink );		$catlink = home_url( user_trailingslashit( $catlink, 'category' ) );	}	return apply_filters( 'category_link', $catlink, $category_id );}/** * Retrieve category parents with separator. * * @since 1.2.0 * * @param int $id Category ID. * @param bool $link Optional, default is false. Whether to format with link. * @param string $separator Optional, default is '/'. How to separate categories. * @param bool $nicename Optional, default is false. Whether to use nice name for display. * @param array $visited Optional. Already linked to categories to prevent duplicates. * @return string */function get_category_parents( $id, $link = false, $separator = '/', $nicename = false, $visited = array() ) {	$chain = '';	$parent = &get_category( $id );	if ( is_wp_error( $parent ) )		return $parent;	if ( $nicename )		$name = $parent->slug;	else		$name = $parent->cat_name;	if ( $parent->parent && ( $parent->parent != $parent->term_id ) && !in_array( $parent->parent, $visited ) ) {		$visited[] = $parent->parent;		$chain .= get_category_parents( $parent->parent, $link, $separator, $nicename, $visited );	}	if ( $link )		$chain .= '<a href="' . get_category_link( $parent->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $parent->cat_name ) ) . '">'.$name.'</a>' . $separator;	else		$chain .= $name.$separator;	return $chain;}/** * Retrieve post categories. * * @since 0.71 * @uses $post * * @param int $id Optional, default to current post ID. The post ID. * @return array */function get_the_category( $id = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	$categories = get_object_term_cache( $id, 'category' );	if ( false === $categories ) {		$categories = wp_get_object_terms( $id, 'category' );		wp_cache_add($id, $categories, 'category_relationships');	}	if ( !empty( $categories ) )		usort( $categories, '_usort_terms_by_name' );	else		$categories = array();	foreach ( (array) array_keys( $categories ) as $key ) {		_make_cat_compat( $categories[$key] );	}	return $categories;}/** * Sort categories by name. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_name( $a, $b ) {	return strcmp( $a->name, $b->name );}/** * Sort categories by ID. * * Used by usort() as a callback, should not be used directly. Can actually be * used to sort any term object. * * @since 2.3.0 * @access private * * @param object $a * @param object $b * @return int */function _usort_terms_by_ID( $a, $b ) {	if ( $a->term_id > $b->term_id )		return 1;	elseif ( $a->term_id < $b->term_id )		return -1;	else		return 0;}/** * Retrieve category name based on category ID. * * @since 0.71 * * @param int $cat_ID Category ID. * @return string Category name. */function get_the_category_by_ID( $cat_ID ) {	$cat_ID = (int) $cat_ID;	$category = &get_category( $cat_ID );	if ( is_wp_error( $category ) )		return $category;	return $category->name;}/** * Retrieve category list in either HTML list or custom format. * * @since 1.5.1 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. * @return string */function get_the_category_list( $separator = '', $parents='', $post_id = false ) {	global $wp_rewrite;	$categories = get_the_category( $post_id );	if ( !is_object_in_taxonomy( get_post_type( $post_id ), 'category' ) )		return apply_filters( 'the_category', '', $separator, $parents );	if ( empty( $categories ) )		return apply_filters( 'the_category', __( 'Uncategorized' ), $separator, $parents );	$rel = ( is_object( $wp_rewrite ) && $wp_rewrite->using_permalinks() ) ? 'rel="category tag"' : 'rel="category"';	$thelist = '';	if ( '' == $separator ) {		$thelist .= '<ul class="post-categories">';		foreach ( $categories as $category ) {			$thelist .= "\n\t<li>";			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a></li>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= $category->name.'</a></li>';					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a></li>';			}		}		$thelist .= '</ul>';	} else {		$i = 0;		foreach ( $categories as $category ) {			if ( 0 < $i )				$thelist .= $separator;			switch ( strtolower( $parents ) ) {				case 'multiple':					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, true, $separator );					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->cat_name.'</a>';					break;				case 'single':					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>';					if ( $category->parent )						$thelist .= get_category_parents( $category->parent, false, $separator );					$thelist .= "$category->cat_name</a>";					break;				case '':				default:					$thelist .= '<a href="' . get_category_link( $category->term_id ) . '" title="' . esc_attr( sprintf( __( "View all posts in %s" ), $category->name ) ) . '" ' . $rel . '>' . $category->name.'</a>';			}			++$i;		}	}	return apply_filters( 'the_category', $thelist, $separator, $parents );}/** * Check if the current post in within any of the given categories. * * The given categories are checked against the post's categories' term_ids, names and slugs. * Categories given as integers will only be checked against the post's categories' term_ids. * * Prior to v2.5 of WordPress, category names were not supported. * Prior to v2.7, category slugs were not supported. * Prior to v2.7, only one category could be compared: in_category( $single_category ). * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 1.2.0 * * @uses is_object_in_term() * * @param int|string|array $category. Category ID, name or slug, or array of said. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post is in any of the given categories. */function in_category( $category, $_post = null ) {	if ( empty( $category ) )		return false;	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'category', $category );	if ( is_wp_error( $r ) )		return false;	return $r;}/** * Display the category list for the post. * * @since 0.71 * * @param string $separator Optional, default is empty string. Separator for between the categories. * @param string $parents Optional. How to display the parents. * @param int $post_id Optional. Post ID to retrieve categories. */function the_category( $separator = '', $parents='', $post_id = false ) {	echo get_the_category_list( $separator, $parents, $post_id );}/** * Retrieve category description. * * @since 1.0.0 * * @param int $category Optional. Category ID. Will use global category ID by default. * @return string Category description, available. */function category_description( $category = 0 ) {	return term_description( $category, 'category' );}/** * Display or retrieve the HTML dropdown list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'show_option_none' (string) - Text to display for showing no categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link get_categories()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'depth' (int) - The max depth. *     'tab_index' (int) - Tab index for select element. *     'name' (string) - The name attribute value for select element. *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted. *     'class' (string) - The class attribute value for select element. *     'selected' (int) - Which category ID is selected. *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category. * * The 'hierarchical' argument, which is disabled by default, will override the * depth argument, unless it is true. When the argument is false, it will * display all of the categories. When it is enabled it will use the value in * the 'depth' argument. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_dropdown_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'id', 'order' => 'ASC',		'show_last_update' => 0, 'show_count' => 0,		'hide_empty' => 1, 'child_of' => 0,		'exclude' => '', 'echo' => 1,		'selected' => 0, 'hierarchical' => 0,		'name' => 'cat', 'id' => '',		'class' => 'postform', 'depth' => 0,		'tab_index' => 0, 'taxonomy' => 'category',		'hide_if_empty' => false	);	$defaults['selected'] = ( is_category() ) ? get_query_var( 'cat' ) : 0;	// Back compat.	if ( isset( $args['type'] ) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$args['taxonomy'] = 'link_category';	}	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	$r['include_last_update_time'] = $r['show_last_update'];	extract( $r );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	$categories = get_terms( $taxonomy, $r );	$name = esc_attr( $name );	$class = esc_attr( $class );	$id = $id ? esc_attr( $id ) : $name;	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output = "<select name='$name' id='$id' class='$class' $tab_index_attribute>\n";	else		$output = '';	if ( empty($categories) && ! $r['hide_if_empty'] && !empty($show_option_none) ) {		$show_option_none = apply_filters( 'list_cats', $show_option_none );		$output .= "\t<option value='-1' selected='selected'>$show_option_none</option>\n";	}	if ( ! empty( $categories ) ) {		if ( $show_option_all ) {			$show_option_all = apply_filters( 'list_cats', $show_option_all );			$selected = ( '0' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='0'$selected>$show_option_all</option>\n";		}		if ( $show_option_none ) {			$show_option_none = apply_filters( 'list_cats', $show_option_none );			$selected = ( '-1' === strval($r['selected']) ) ? " selected='selected'" : '';			$output .= "\t<option value='-1'$selected>$show_option_none</option>\n";		}		if ( $hierarchical )			$depth = $r['depth'];  // Walk the full depth.		else			$depth = -1; // Flat.		$output .= walk_category_dropdown_tree( $categories, $depth, $r );	}	if ( ! $r['hide_if_empty'] || ! empty($categories) )		$output .= "</select>\n";	$output = apply_filters( 'wp_dropdown_cats', $output );	if ( $echo )		echo $output;	return $output;}/** * Display or retrieve the HTML list of categories. * * The list of arguments is below: *     'show_option_all' (string) - Text to display for showing all categories. *     'orderby' (string) default is 'ID' - What column to use for ordering the * categories. *     'order' (string) default is 'ASC' - What direction to order categories. *     'show_last_update' (bool|int) default is 0 - See {@link * walk_category_dropdown_tree()} *     'show_count' (bool|int) default is 0 - Whether to show how many posts are * in the category. *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that * don't have any posts attached to them. *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the * description instead of the category title. *     'feed' - See {@link get_categories()}. *     'feed_type' - See {@link get_categories()}. *     'feed_image' - See {@link get_categories()}. *     'child_of' (int) default is 0 - See {@link get_categories()}. *     'exclude' (string) - See {@link get_categories()}. *     'exclude_tree' (string) - See {@link get_categories()}. *     'echo' (bool|int) default is 1 - Whether to display or retrieve content. *     'current_category' (int) - See {@link get_categories()}. *     'hierarchical' (bool) - See {@link get_categories()}. *     'title_li' (string) - See {@link get_categories()}. *     'depth' (int) - The max depth. * * @since 2.1.0 * * @param string|array $args Optional. Override default arguments. * @return string HTML content only if 'echo' argument is 0. */function wp_list_categories( $args = '' ) {	$defaults = array(		'show_option_all' => '', 'show_option_none' => __('No categories'),		'orderby' => 'name', 'order' => 'ASC',		'show_last_update' => 0, 'style' => 'list',		'show_count' => 0, 'hide_empty' => 1,		'use_desc_for_title' => 1, 'child_of' => 0,		'feed' => '', 'feed_type' => '',		'feed_image' => '', 'exclude' => '',		'exclude_tree' => '', 'current_category' => 0,		'hierarchical' => true, 'title_li' => __( 'Categories' ),		'echo' => 1, 'depth' => 0,		'taxonomy' => 'category'	);	$r = wp_parse_args( $args, $defaults );	if ( !isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] )		$r['pad_counts'] = true;	if ( isset( $r['show_date'] ) )		$r['include_last_update_time'] = $r['show_date'];	if ( true == $r['hierarchical'] ) {		$r['exclude_tree'] = $r['exclude'];		$r['exclude'] = '';	}	if ( !isset( $r['class'] ) )		$r['class'] = ( 'category' == $r['taxonomy'] ) ? 'categories' : $r['taxonomy'];	extract( $r );	if ( !taxonomy_exists($taxonomy) )		return false;	$categories = get_categories( $r );	$output = '';	if ( $title_li && 'list' == $style )			$output = '<li class="' . $class . '">' . $title_li . '<ul>';	if ( empty( $categories ) ) {		if ( ! empty( $show_option_none ) ) {			if ( 'list' == $style )				$output .= '<li>' . $show_option_none . '</li>';			else				$output .= $show_option_none;		}	} else {		global $wp_query;		if( !empty( $show_option_all ) )			if ( 'list' == $style )				$output .= '<li><a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a></li>';			else				$output .= '<a href="' .  get_bloginfo( 'url' )  . '">' . $show_option_all . '</a>';		if ( empty( $r['current_category'] ) && ( is_category() || is_tax() ) )			$r['current_category'] = $wp_query->get_queried_object_id();		if ( $hierarchical )			$depth = $r['depth'];		else			$depth = -1; // Flat.		$output .= walk_category_tree( $categories, $depth, $r );	}	if ( $title_li && 'list' == $style )		$output .= '</ul></li>';	$output = apply_filters( 'wp_list_categories', $output, $args );	if ( $echo )		echo $output;	else		return $output;}/** * Display tag cloud. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the top 45 tags in the tag cloud list. * * The 'topic_count_text_callback' argument is a function, which, given the count * of the posts  with that tag, returns a text for the tooltip of the tag link. * * The 'exclude' and 'include' arguments are used for the {@link get_tags()} * function. Only one should be used, because only one will be used and the * other ignored, if they are both set. * * @since 2.3.0 * * @param array|string $args Optional. Override default arguments. * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument. */function wp_tag_cloud( $args = '' ) {	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag', 'echo' => true	);	$args = wp_parse_args( $args, $defaults );	$tags = get_terms( $args['taxonomy'], array_merge( $args, array( 'orderby' => 'count', 'order' => 'DESC' ) ) ); // Always query top tags	if ( empty( $tags ) )		return;	foreach ( $tags as $key => $tag ) {		if ( 'edit' == $args['link'] )			$link = get_edit_tag_link( $tag->term_id, $args['taxonomy'] );		else			$link = get_term_link( intval($tag->term_id), $args['taxonomy'] );		if ( is_wp_error( $link ) )			return false;		$tags[ $key ]->link = $link;		$tags[ $key ]->id = $tag->term_id;	}	$return = wp_generate_tag_cloud( $tags, $args ); // Here's where those top tags get sorted according to $args	$return = apply_filters( 'wp_tag_cloud', $return, $args );	if ( 'array' == $args['format'] || empty($args['echo']) )		return $return;	echo $return;}/** * Default text for tooltip for tag links * * @param integer $count number of posts with that tag * @return string text for the tooltip of a tag link. */function default_topic_count_text( $count ) {	return sprintf( _n('%s topic', '%s topics', $count), number_format_i18n( $count ) );}/** * Default topic count scaling for tag links * * @param integer $count number of posts with that tag * @return integer scaled count */function default_topic_count_scale( $count ) {	return round(log10($count + 1) * 100);}/** * Generates a tag cloud (heatmap) from provided data. * * The text size is set by the 'smallest' and 'largest' arguments, which will * use the 'unit' argument value for the CSS text size unit. The 'format' * argument can be 'flat' (default), 'list', or 'array'. The flat value for the * 'format' argument will separate tags with spaces. The list value for the * 'format' argument will format the tags in a UL HTML list. The array value for * the 'format' argument will return in PHP array type format. * * The 'tag_cloud_sort' filter allows you to override the sorting. * Passed to the filter: $tags array and $args array, has to return the $tags array * after sorting it. * * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'. * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or * 'RAND'. * * The 'number' argument is how many tags to return. By default, the limit will * be to return the entire tag cloud list. * * The 'topic_count_text_callback' argument is a function, which given the count * of the posts  with that tag returns a text for the tooltip of the tag link. * * @todo Complete functionality. * @since 2.3.0 * * @param array $tags List of tags. * @param string|array $args Optional, override default arguments. * @return string */function wp_generate_tag_cloud( $tags, $args = '' ) {	global $wp_rewrite;	$defaults = array(		'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 0,		'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',		'topic_count_text_callback' => 'default_topic_count_text',		'topic_count_scale_callback' => 'default_topic_count_scale', 'filter' => 1,	);	if ( !isset( $args['topic_count_text_callback'] ) && isset( $args['single_text'] ) && isset( $args['multiple_text'] ) ) {		$body = 'return sprintf (			_n(' . var_export($args['single_text'], true) . ', ' . var_export($args['multiple_text'], true) . ', $count),			number_format_i18n( $count ));';		$args['topic_count_text_callback'] = create_function('$count', $body);	}	$args = wp_parse_args( $args, $defaults );	extract( $args );	if ( empty( $tags ) )		return;	$tags_sorted = apply_filters( 'tag_cloud_sort', $tags, $args );	if ( $tags_sorted != $tags  ) { // the tags have been sorted by a plugin		$tags = $tags_sorted;		unset($tags_sorted);	} else {		if ( 'RAND' == $order ) {			shuffle($tags);		} else {			// SQL cannot save you; this is a second (potentially different) sort on a subset of data.			if ( 'name' == $orderby )				uasort( $tags, create_function('$a, $b', 'return strnatcasecmp($a->name, $b->name);') );			else				uasort( $tags, create_function('$a, $b', 'return ($a->count > $b->count);') );			if ( 'DESC' == $order )				$tags = array_reverse( $tags, true );		}	}	if ( $number > 0 )		$tags = array_slice($tags, 0, $number);	$counts = array();	$real_counts = array(); // For the alt tag	foreach ( (array) $tags as $key => $tag ) {		$real_counts[ $key ] = $tag->count;		$counts[ $key ] = $topic_count_scale_callback($tag->count);	}	$min_count = min( $counts );	$spread = max( $counts ) - $min_count;	if ( $spread <= 0 )		$spread = 1;	$font_spread = $largest - $smallest;	if ( $font_spread < 0 )		$font_spread = 1;	$font_step = $font_spread / $spread;	$a = array();	foreach ( $tags as $key => $tag ) {		$count = $counts[ $key ];		$real_count = $real_counts[ $key ];		$tag_link = '#' != $tag->link ? esc_url( $tag->link ) : '#';		$tag_id = isset($tags[ $key ]->id) ? $tags[ $key ]->id : $key;		$tag_name = $tags[ $key ]->name;		$a[] = "<a href='$tag_link' class='tag-link-$tag_id' title='" . esc_attr( $topic_count_text_callback( $real_count ) ) . "' style='font-size: " .			( $smallest + ( ( $count - $min_count ) * $font_step ) )			. "$unit;'>$tag_name</a>";	}	switch ( $format ) :	case 'array' :		$return =& $a;		break;	case 'list' :		$return = "<ul class='wp-tag-cloud'>\n\t<li>";		$return .= join( "</li>\n\t<li>", $a );		$return .= "</li>\n</ul>\n";		break;	default :		$return = join( $separator, $a );		break;	endswitch;    if ( $filter )		return apply_filters( 'wp_generate_tag_cloud', $return, $tags, $args );    else		return $return;}//// Helper functions///** * Retrieve HTML list content for category list. * * @uses Walker_Category to create HTML list content. * @since 2.1.0 * @see Walker_Category::walk() for parameters and return description. */function walk_category_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_Category;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}/** * Retrieve HTML dropdown (select) content for category list. * * @uses Walker_CategoryDropdown to create HTML dropdown content. * @since 2.1.0 * @see Walker_CategoryDropdown::walk() for parameters and return description. */function walk_category_dropdown_tree() {	$args = func_get_args();	// the user's options are the third parameter	if ( empty($args[2]['walker']) || !is_a($args[2]['walker'], 'Walker') )		$walker = new Walker_CategoryDropdown;	else		$walker = $args[2]['walker'];	return call_user_func_array(array( &$walker, 'walk' ), $args );}//// Tags///** * Retrieve the link to the tag. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters. * * @param int $tag_id Tag (term) ID. * @return string */function get_tag_link( $tag_id ) {	global $wp_rewrite;	$taglink = $wp_rewrite->get_tag_permastruct();	$tag = &get_term( $tag_id, 'post_tag' );	if ( is_wp_error( $tag ) )		return $tag;	$slug = $tag->slug;	if ( empty( $taglink ) ) {		$file = get_option( 'home' ) . '/';		$taglink = $file . '?tag=' . $slug;	} else {		$taglink = str_replace( '%tag%', $slug, $taglink );		$taglink = get_option( 'home' ) . user_trailingslashit( $taglink, 'category' );	}	return apply_filters( 'tag_link', $taglink, $tag_id );}/** * Retrieve the tags for a post. * * @since 2.3.0 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags. * * @param int $id Post ID. * @return array */function get_the_tags( $id = 0 ) {	return apply_filters( 'get_the_tags', get_the_terms( $id, 'post_tag' ) );}/** * Retrieve the tags for a post formatted as a string. * * @since 2.3.0 * @uses apply_filters() Calls 'the_tags' filter on string list of tags. * * @param string $before Optional. Before tags. * @param string $sep Optional. Between tags. * @param string $after Optional. After tags. * @return string */function get_the_tag_list( $before = '', $sep = '', $after = '' ) {	return apply_filters( 'the_tags', get_the_term_list( 0, 'post_tag', $before, $sep, $after ), $before, $sep, $after);}/** * Retrieve the tags for a post. * * @since 2.3.0 * * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function the_tags( $before = null, $sep = ', ', $after = '' ) {	if ( null === $before )		$before = __('Tags: ');	echo get_the_tag_list($before, $sep, $after);}/** * Retrieve tag description. * * @since 2.8 * * @param int $tag Optional. Tag ID. Will use global tag ID by default. * @return string Tag description, available. */function tag_description( $tag = 0 ) {	return term_description( $tag );}/** * Retrieve term description. * * @since 2.8 * * @param int $term Optional. Term ID. Will use global term ID by default. * @return string Term description, available. */function term_description( $term = 0, $taxonomy = 'post_tag' ) {	if ( !$term && ( is_tax() || is_tag() || is_category() ) ) {		global $wp_query;		$term = $wp_query->get_queried_object();		$taxonomy = $term->taxonomy;		$term = $term->term_id;	}	$description = get_term_field( 'description', $term, $taxonomy );	return is_wp_error( $description ) ? '' : $description;}/** * Retrieve the terms of the taxonomy that are attached to the post. * * This function can only be used within the loop. * * @since 2.5.0 * * @param int $id Post ID. Is not optional. * @param string $taxonomy Taxonomy name. * @return array|bool False on failure. Array of term objects on success. */function get_the_terms( $id = 0, $taxonomy ) {	global $post; 	$id = (int) $id;	if ( !$id ) {		if ( !$post->ID )			return false;		else			$id = (int) $post->ID;	}	$terms = get_object_term_cache( $id, $taxonomy );	if ( false === $terms )		$terms = wp_get_object_terms( $id, $taxonomy );	if ( empty( $terms ) )		return false;	return $terms;}/** * Retrieve a post's terms as a list with specified format. * * @since 2.5.0 * * @param int $id Post ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return string */function get_the_term_list( $id = 0, $taxonomy, $before = '', $sep = '', $after = '' ) {	$terms = get_the_terms( $id, $taxonomy );	if ( is_wp_error( $terms ) )		return $terms;	if ( empty( $terms ) )		return false;	foreach ( $terms as $term ) {		$link = get_term_link( $term, $taxonomy );		if ( is_wp_error( $link ) )			return $link;		$term_links[] = '<a href="' . $link . '" rel="tag">' . $term->name . '</a>';	}	$term_links = apply_filters( "term_links-$taxonomy", $term_links );	return $before . join( $sep, $term_links ) . $after;}/** * Display the terms in a list. * * @since 2.5.0 * * @param int $id Term ID. * @param string $taxonomy Taxonomy name. * @param string $before Optional. Before list. * @param string $sep Optional. Separate items using this. * @param string $after Optional. After list. * @return null|bool False on WordPress error. Returns null when displaying. */function the_terms( $id, $taxonomy, $before = '', $sep = ', ', $after = '' ) {	$term_list = get_the_term_list( $id, $taxonomy, $before, $sep, $after );	if ( is_wp_error( $term_list ) )		return false;	echo apply_filters('the_terms', $term_list, $taxonomy, $before, $sep, $after);}/** * Check if the current post has any of given tags. * * The given tags are checked against the post's tags' term_ids, names and slugs. * Tags given as integers will only be checked against the post's tags' term_ids. * If no tags are given, determines if post has any tags. * * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids) * Prior to v2.7, this function could only be used in the WordPress Loop. * As of 2.7, the function can be used anywhere if it is provided a post ID or post object. * * @since 2.6.0 * * @uses is_object_in_term() * * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for. * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified). */function has_tag( $tag = '', $_post = null ) {	if ( $_post ) {		$_post = get_post( $_post );	} else {		$_post =& $GLOBALS['post'];	}	if ( !$_post )		return false;	$r = is_object_in_term( $_post->ID, 'post_tag', $tag );	if ( is_wp_error( $r ) )		return false;	return $r;}?>
<?php/** * Permalink settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Permalink Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides some common options for your default permalinks URL structure.') . '</p>' .	'<p>' . __('If you pick an option other than Default, your general URL path with structure tags, terms surrounded by <code>%</code>, will also appear in the custom structure field and your path can be further modified there.') . '</p>' .	'<p>' . __('When you assign multiple categories or tags to a post, only one can show up in the permalink: the lowest numbered category. This applies if your custom structure includes <code>%category%</code> or <code>%tag%</code>.') . '</p>' .	'<p>' . __('Note that permalinks beginning with the category, tag, author or postname structure tags require more advanced server resources. Double-check your hosting details to make sure those are in place or start your permalinks with other structure tags.') . '</p>' .	'<p>' . __('The Optional fields let you customize the &#8220;category&#8221; and &#8220;tag&#8221; base names that will appear in archive URLs. For example, the page listing all posts in the &#8220;Uncategorized&#8221; category could be <code>/topics/uncategorized</code> instead of <code>/category/uncategorized</code>.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Permalinks_SubPanel" target="_blank">Permalinks Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Using_Permalinks" target="_blank">Using Permalinks Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');/** * Display JavaScript on the page. * * @package WordPress * @subpackage Permalink_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[function GetElementsWithClassName(elementName, className) {var allElements = document.getElementsByTagName(elementName);var elemColl = new Array();for (i = 0; i < allElements.length; i++) {if (allElements[i].className == className) {elemColl[elemColl.length] = allElements[i];}}return elemColl;}function upit() {var inputColl = GetElementsWithClassName('input', 'tog');var structure = document.getElementById('permalink_structure');var inputs = '';for (i = 0; i < inputColl.length; i++) {if ( inputColl[i].checked && inputColl[i].value != '') {inputs += inputColl[i].value + ' ';}}inputs = inputs.substr(0,inputs.length - 1);if ( 'custom' != inputs )structure.value = inputs;}function blurry() {if (!document.getElementById) return;var structure = document.getElementById('permalink_structure');structure.onfocus = function () { document.getElementById('custom_selection').checked = 'checked'; }var aInputs = document.getElementsByTagName('input');for (var i = 0; i < aInputs.length; i++) {aInputs[i].onclick = aInputs[i].onkeyup = upit;}}window.onload = blurry;//]]></script><?php}add_filter('admin_head', 'add_js');include('./admin-header.php');$home_path = get_home_path();$iis7_permalinks = iis7_supports_permalinks();$prefix = $blog_prefix = '';if ( ! got_mod_rewrite() && ! $iis7_permalinks )	$prefix = '/index.php';if ( is_multisite() && !is_subdomain_install() && is_main_site() )	$blog_prefix = '/blog';if ( isset($_POST['permalink_structure']) || isset($_POST['category_base']) ) {	check_admin_referer('update-permalink');	if ( isset( $_POST['permalink_structure'] ) ) {		if ( isset( $_POST['selection'] ) && 'custom' != $_POST['selection'] )			$permalink_structure = $_POST['selection'];		else			$permalink_structure = $_POST['permalink_structure'];		if ( ! empty( $permalink_structure ) ) {			$permalink_structure = preg_replace( '#/+#', '/', '/' . str_replace( '#', '', $permalink_structure ) );			if ( $prefix && $blog_prefix )				$permalink_structure = $prefix . preg_replace( '#^/?index\.php#', '', $permalink_structure );			else				$permalink_structure = $blog_prefix . $permalink_structure;		}		$wp_rewrite->set_permalink_structure( $permalink_structure );	}	if ( isset( $_POST['category_base'] ) ) {		$category_base = $_POST['category_base'];		if ( ! empty( $category_base ) )			$category_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $category_base ) );		$wp_rewrite->set_category_base( $category_base );	}	if ( isset( $_POST['tag_base'] ) ) {		$tag_base = $_POST['tag_base'];		if ( ! empty( $tag_base ) )			$tag_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $tag_base ) );		$wp_rewrite->set_tag_base( $tag_base );	}}$permalink_structure = get_option('permalink_structure');$category_base = get_option('category_base');$tag_base = get_option( 'tag_base' );if ( $iis7_permalinks ) {	if ( ( ! file_exists($home_path . 'web.config') && win_is_writable($home_path) ) || win_is_writable($home_path . 'web.config') )		$writable = true;	else		$writable = false;} else {	if ( ( ! file_exists($home_path . '.htaccess') && is_writable($home_path) ) || is_writable($home_path . '.htaccess') )		$writable = true;	else		$writable = false;}if ( $wp_rewrite->using_index_permalinks() )	$usingpi = true;else	$usingpi = false;$wp_rewrite->flush_rules();if (isset($_POST['submit'])) : ?><div id="message" class="updated"><p><?phpif ( ! is_multisite() ) {	if ( $iis7_permalinks ) {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your web.config now');		else if ( $permalink_structure && ! $usingpi && $writable )			_e('Permalink structure updated. Remove write access on web.config file now!');		else			_e('Permalink structure updated');	} else {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your .htaccess now.');		else			_e('Permalink structure updated.');	}} else {	_e('Permalink structure updated.');}?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form" action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>  <p><?php _e('By default WordPress uses web <abbr title="Universal Resource Locator">URL</abbr>s which have question marks and lots of numbers in them, however WordPress offers you the ability to create a custom URL structure for your permalinks and archives. This can improve the aesthetics, usability, and forward-compatibility of your links. A <a href="http://codex.wordpress.org/Using_Permalinks">number of tags are available</a>, and here are some examples to get you started.'); ?></p><?phpif ( is_multisite() && !is_subdomain_install() && is_main_site() ) {	$permalink_structure = preg_replace( '|^/?blog|', '', $permalink_structure );	$category_base = preg_replace( '|^/?blog|', '', $category_base );	$tag_base = preg_replace( '|^/?blog|', '', $tag_base );}$structures = array(	'',	$prefix . '/%year%/%monthnum%/%day%/%postname%/',	$prefix . '/%year%/%monthnum%/%postname%/',	$prefix . '/archives/%post_id%'	);?><h3><?php _e('Common settings'); ?></h3><table class="form-table">	<tr>		<th><label><input name="selection" type="radio" value="" class="tog" <?php checked('', $permalink_structure); ?> /> <?php _e('Default'); ?></label></th>		<td><code><?php echo get_option('home'); ?>/?p=123</code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[1]); ?>" class="tog" <?php checked($structures[1], $permalink_structure); ?> /> <?php _e('Day and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/' . date('d') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[2]); ?>" class="tog" <?php checked($structures[2], $permalink_structure); ?> /> <?php _e('Month and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[3]); ?>" class="tog" <?php checked($structures[3], $permalink_structure); ?> /> <?php _e('Numeric'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix; ?>/archives/123</code></td>	</tr>	<tr>		<th>			<label><input name="selection" id="custom_selection" type="radio" value="custom" class="tog" <?php checked( !in_array($permalink_structure, $structures) ); ?> />			<?php _e('Custom Structure'); ?>			</label>		</th>		<td>			<?php echo $blog_prefix; ?>			<input name="permalink_structure" id="permalink_structure" type="text" value="<?php echo esc_attr($permalink_structure); ?>" class="regular-text code" />		</td>	</tr></table><h3><?php _e('Optional'); ?></h3><?php if ( $is_apache || $iis7_permalinks ) : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <kbd>topics</kbd> as your category base would make your category links like <code>http://example.org/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php else : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <code>topics</code> as your category base would make your category links like <code>http://example.org/index.php/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php endif; ?><table class="form-table">	<tr>		<th><label for="category_base"><?php /* translators: prefix for category permalinks */ _e('Category base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="category_base" id="category_base" type="text" value="<?php echo esc_attr( $category_base ); ?>" class="regular-text code" /></td>	</tr>	<tr>		<th><label for="tag_base"><?php _e('Tag base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="tag_base" id="tag_base" type="text" value="<?php echo esc_attr($tag_base); ?>" class="regular-text code" /></td>	</tr>	<?php do_settings_fields('permalink', 'optional'); ?></table><?php do_settings_sections('permalink'); ?><p class="submit">	<input type="submit" name="submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p>  </form><?php if ( !is_multisite() ) { ?><?php if ( $iis7_permalinks ) :	if ( isset($_POST['submit']) && $permalink_structure && ! $usingpi && ! $writable ) :		if ( file_exists($home_path . 'web.config') ) : ?><p><?php _e('If your <code>web.config</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this rule inside of the <code>/&lt;configuration&gt;/&lt;system.webServer&gt;/&lt;rewrite&gt;/&lt;rules&gt;</code> element in <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="9" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules()); ?></textarea></p></form><p><?php _e('If you temporarily make your <code>web.config</code> file writable for us to generate rewrite rules automatically, do not forget to revert the permissions after rule has been saved.')  ?></p>		<?php else : ?><p><?php _e('If the root directory of your site were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Create a new file, called <code>web.config</code> in the root directory of your site. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this code into the <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="18" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules(true)); ?></textarea></p></form><p><?php _e('If you temporarily make your site&#8217;s root directory writable for us to generate the <code>web.config</code> file automatically, do not forget to revert the permissions after the file has been created.')  ?></p>		<?php endif; ?>	<?php endif; ?><?php else :	if ( $permalink_structure && ! $usingpi && ! $writable ) : ?><p><?php _e('If your <code>.htaccess</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so these are the mod_rewrite rules you should have in your <code>.htaccess</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="6" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->mod_rewrite_rules()); ?></textarea></p></form>	<?php endif; ?><?php endif; ?><?php } // multisite ?></div><?php require('./admin-footer.php'); ?>
<?php/** * Discussion settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Discussion Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides many options for controlling the management and display of comments and links to your posts/pages. So many, in fact, they won&#8217;t all fit here! :) Use the documentation link below to get information on what each discussion setting does.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Discussion_SubPanel" target="_blank">Discussion Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form method="post" action="options.php"><?php settings_fields('discussion'); ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Default article settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Default article settings') ?></span></legend><label for="default_pingback_flag"><input name="default_pingback_flag" type="checkbox" id="default_pingback_flag" value="1" <?php checked('1', get_option('default_pingback_flag')); ?> /><?php _e('Attempt to notify any blogs linked to from the article.') ?></label><br /><label for="default_ping_status"><input name="default_ping_status" type="checkbox" id="default_ping_status" value="open" <?php checked('open', get_option('default_ping_status')); ?> /><?php _e('Allow link notifications from other blogs (pingbacks and trackbacks.)') ?></label><br /><label for="default_comment_status"><input name="default_comment_status" type="checkbox" id="default_comment_status" value="open" <?php checked('open', get_option('default_comment_status')); ?> /><?php _e('Allow people to post comments on new articles') ?></label><br /><small><em><?php echo '(' . __('These settings may be overridden for individual articles.') . ')'; ?></em></small></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Other comment settings') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Other comment settings') ?></span></legend><label for="require_name_email"><input type="checkbox" name="require_name_email" id="require_name_email" value="1" <?php checked('1', get_option('require_name_email')); ?> /> <?php _e('Comment author must fill out name and e-mail') ?></label><br /><label for="comment_registration"><input name="comment_registration" type="checkbox" id="comment_registration" value="1" <?php checked('1', get_option('comment_registration')); ?> /><?php _e('Users must be registered and logged in to comment') ?><?php if ( !get_option( 'users_can_register' ) && is_multisite() ) _e( ' (Signup has been disabled. Only members of this site can comment.)' ); ?></label><br /><label for="close_comments_for_old_posts"><input name="close_comments_for_old_posts" type="checkbox" id="close_comments_for_old_posts" value="1" <?php checked('1', get_option('close_comments_for_old_posts')); ?> /><?php printf( __('Automatically close comments on articles older than %s days'), '</label><input name="close_comments_days_old" type="text" id="close_comments_days_old" value="' . esc_attr(get_option('close_comments_days_old')) . '" class="small-text" />') ?><br /><label for="thread_comments"><input name="thread_comments" type="checkbox" id="thread_comments" value="1" <?php checked('1', get_option('thread_comments')); ?> /><?php$maxdeep = (int) apply_filters( 'thread_comments_depth_max', 10 );$thread_comments_depth = '</label><select name="thread_comments_depth" id="thread_comments_depth">';for ( $i = 2; $i <= $maxdeep; $i++ ) {	$thread_comments_depth .= "<option value='" . esc_attr($i) . "'";	if ( get_option('thread_comments_depth') == $i ) $thread_comments_depth .= " selected='selected'";	$thread_comments_depth .= ">$i</option>";}$thread_comments_depth .= '</select>';printf( __('Enable threaded (nested) comments %s levels deep'), $thread_comments_depth );?><br /><label for="page_comments"><input name="page_comments" type="checkbox" id="page_comments" value="1" <?php checked('1', get_option('page_comments')); ?> /><?php$default_comments_page = '</label><label for="default_comments_page"><select name="default_comments_page" id="default_comments_page"><option value="newest"';if ( 'newest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('last') . '</option><option value="oldest"';if ( 'oldest' == get_option('default_comments_page') ) $default_comments_page .= ' selected="selected"';$default_comments_page .= '>' . __('first') . '</option></select>';printf( __('Break comments into pages with %1$s top level comments per page and the %2$s page displayed by default'), '</label><label for="comments_per_page"><input name="comments_per_page" type="text" id="comments_per_page" value="' . esc_attr(get_option('comments_per_page')) . '" class="small-text" />', $default_comments_page );?></label><br /><label for="comment_order"><?php$comment_order = '<select name="comment_order" id="comment_order"><option value="asc"';if ( 'asc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('older') . '</option><option value="desc"';if ( 'desc' == get_option('comment_order') ) $comment_order .= ' selected="selected"';$comment_order .= '>' . __('newer') . '</option></select>';printf( __('Comments should be displayed with the %s comments at the top of each page'), $comment_order );?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('E-mail me whenever') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('E-mail me whenever') ?></span></legend><label for="comments_notify"><input name="comments_notify" type="checkbox" id="comments_notify" value="1" <?php checked('1', get_option('comments_notify')); ?> /><?php _e('Anyone posts a comment') ?> </label><br /><label for="moderation_notify"><input name="moderation_notify" type="checkbox" id="moderation_notify" value="1" <?php checked('1', get_option('moderation_notify')); ?> /><?php _e('A comment is held for moderation') ?> </label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Before a comment appears') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Before a comment appears') ?></span></legend><label for="comment_moderation"><input name="comment_moderation" type="checkbox" id="comment_moderation" value="1" <?php checked('1', get_option('comment_moderation')); ?> /><?php _e('An administrator must always approve the comment') ?> </label><br /><label for="comment_whitelist"><input type="checkbox" name="comment_whitelist" id="comment_whitelist" value="1" <?php checked('1', get_option('comment_whitelist')); ?> /> <?php _e('Comment author must have a previously approved comment') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Moderation') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Moderation') ?></span></legend><p><label for="comment_max_links"><?php printf(__('Hold a comment in the queue if it contains %s or more links. (A common characteristic of comment spam is a large number of hyperlinks.)'), '<input name="comment_max_links" type="text" id="comment_max_links" value="' . esc_attr(get_option('comment_max_links')) . '" class="small-text" />' ) ?></label></p><p><label for="moderation_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be held in the <a href="edit-comments.php?comment_status=moderated">moderation queue</a>. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="moderation_keys" rows="10" cols="50" id="moderation_keys" class="large-text code"><?php form_option('moderation_keys'); ?></textarea></p></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Comment Blacklist') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Comment Blacklist') ?></span></legend><p><label for="blacklist_keys"><?php _e('When a comment contains any of these words in its content, name, URL, e-mail, or IP, it will be marked as spam. One word or IP per line. It will match inside words, so &#8220;press&#8221; will match &#8220;WordPress&#8221;.') ?></label></p><p><textarea name="blacklist_keys" rows="10" cols="50" id="blacklist_keys" class="large-text code"><?php form_option('blacklist_keys'); ?></textarea></p></fieldset></td></tr><?php do_settings_fields('discussion', 'default'); ?></table><h3><?php _e('Avatars') ?></h3><p><?php _e('An avatar is an image that follows you from weblog to weblog appearing beside your name when you comment on avatar enabled sites.  Here you can enable the display of avatars for people who comment on your site.'); ?></p><?php // the above would be a good place to link to codex documentation on the gravatar functions, for putting it in themes. anything like that? ?><table class="form-table"><tr valign="top"><th scope="row"><?php _e('Avatar Display') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Avatar Display') ?></span></legend><?php	$yesorno = array( 0 => __( 'Don&#8217;t show Avatars' ), 1 => __( 'Show Avatars' ) );	foreach ( $yesorno as $key => $value) {		$selected = (get_option('show_avatars') == $key) ? 'checked="checked"' : '';		echo "\n\t<label><input type='radio' name='show_avatars' value='" . esc_attr($key) . "' $selected/> $value</label><br />";	}?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Maximum Rating') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Maximum Rating') ?></span></legend><?php$ratings = array(	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'G' => __('G &#8212; Suitable for all audiences'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'PG' => __('PG &#8212; Possibly offensive, usually for audiences 13 and above'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'R' => __('R &#8212; Intended for adult audiences above 17'),	/* translators: Content suitability rating: http://bit.ly/89QxZA */	'X' => __('X &#8212; Even more mature than above'));foreach ($ratings as $key => $rating) :	$selected = (get_option('avatar_rating') == $key) ? 'checked="checked"' : '';	echo "\n\t<label><input type='radio' name='avatar_rating' value='" . esc_attr($key) . "' $selected/> $rating</label><br />";endforeach;?></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e('Default Avatar') ?></th><td class="defaultavatarpicker"><fieldset><legend class="screen-reader-text"><span><?php _e('Default Avatar') ?></span></legend><?php _e('For users without a custom avatar of their own, you can either display a generic logo or a generated one based on their e-mail address.'); ?><br /><?php$avatar_defaults = array(	'mystery' => __('Mystery Man'),	'blank' => __('Blank'),	'gravatar_default' => __('Gravatar Logo'),	'identicon' => __('Identicon (Generated)'),	'wavatar' => __('Wavatar (Generated)'),	'monsterid' => __('MonsterID (Generated)'));$avatar_defaults = apply_filters('avatar_defaults', $avatar_defaults);$default = get_option('avatar_default');if ( empty($default) )	$default = 'mystery';$size = 32;$avatar_list = '';foreach ( $avatar_defaults as $default_key => $default_name ) {	$selected = ($default == $default_key) ? 'checked="checked" ' : '';	$avatar_list .= "\n\t<label><input type='radio' name='avatar_default' id='avatar_{$default_key}' value='" . esc_attr($default_key)  . "' {$selected}/> ";	$avatar = get_avatar( $user_email, $size, $default_key );	$avatar_list .= preg_replace("/src='(.+?)'/", "src='\$1&amp;forcedefault=1'", $avatar);	$avatar_list .= ' ' . $default_name . '</label>';	$avatar_list .= '<br />';}echo apply_filters('default_avatar_select', $avatar_list);?></fieldset></td></tr><?php do_settings_fields('discussion', 'avatars'); ?></table><?php do_settings_sections('discussion'); ?><p class="submit"><input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p></form></div><?php include('./admin-footer.php'); ?>
<?php/** * Edit Tags Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars( array('action', 'tag', 'taxonomy', 'post_type') );if ( empty($taxonomy) )	$taxonomy = 'post_tag';if ( !taxonomy_exists($taxonomy) )	wp_die(__('Invalid taxonomy'));$tax = get_taxonomy($taxonomy);$title = $tax->labels->name;if ( empty($post_type) || !in_array( $post_type, get_post_types( array('public' => true) ) ) )	$post_type = 'post';if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit-tags.php?taxonomy=$taxonomy&amp;post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = "edit-tags.php?taxonomy=$taxonomy";}if ( isset( $_GET['action'] ) && isset($_GET['delete_tags']) && ( 'delete' == $_GET['action'] || 'delete' == $_GET['action2'] ) )	$action = 'bulk-delete';switch($action) {case 'add-tag':	check_admin_referer('add-tag');	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 1, $location);	else		$location = add_query_arg('message', 4, $location);	wp_redirect($location);	exit;break;case 'delete':	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( !isset( $_GET['tag_ID'] ) ) {		wp_redirect($location);		exit;	}	$tag_ID = (int) $_GET['tag_ID'];	check_admin_referer('delete-tag_' .  $tag_ID);	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	wp_delete_term( $tag_ID, $taxonomy);	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'bulk-delete':	check_admin_referer('bulk-tags');	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$tags = (array) $_GET['delete_tags'];	foreach( $tags as $tag_ID ) {		wp_delete_term( $tag_ID, $taxonomy);	}	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	$location = add_query_arg('message', 6, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = $tax->labels->edit_item;	require_once ('admin-header.php');	$tag_ID = (int) $_GET['tag_ID'];	$tag = get_term($tag_ID, $taxonomy, OBJECT, 'edit');	include('./edit-tag-form.php');break;case 'editedtag':	$tag_ID = (int) $_POST['tag_ID'];	check_admin_referer('update-tag_' . $tag_ID);	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_update_term($tag_ID, $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;default:if ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('admin-tags');if ( current_user_can($tax->cap->edit_terms) )	wp_enqueue_script('inline-edit-tax');if ( 'category' == $taxonomy || 'post_tag' == $taxonomy ) {	if ( 'category' == $taxonomy )		$help = '<p>' . sprintf(__('You can use categories to define sections of your site and group related posts. The default category is &#8220;Uncategorized&#8221; until you change it in your <a href="%s">writing settings</a>.'), 'options-writing.php') . '</p>';	else		$help = '<p>' . __('You can assign keywords to your posts using Post Tags. Unlike categories, tags have no hierarchy, meaning there&#8217;s no relationship from one tag to another.') . '</p>';	$help .='<p>' . __('What&#8217;s the difference between categories and tags? Normally, tags are ad-hoc keywords that identify important information in your post (names, subjects, etc) that may or may not recur in other posts, while categories are pre-determined sections. If you think of your site like a book, the categories are like the Table of Contents and the tags are like the terms in the index.') . '</p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('When adding a new category on this screen, you&#8217;ll fill in the following fields:') . '</p>';	else		$help .= '<p>' . __('When adding a new tag on this screen, you&#8217;ll fill in the following fields:') . '</p>';	$help .= '<ul>' .		'<li>' . __('<strong>Name</strong> - The name is how it appears on your site.') . '</li>';	if ( ! global_terms_enabled() )		$help .= '<li>' . __('<strong>Slug</strong> - The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.') . '</li>';	if ( 'category' == $taxonomy )		$help .= '<li>' . __('<strong>Parent</strong> - Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional. To create a subcategory, just choose another category from the Parent dropdown.') . '</li>';	$help .= '<li>' . __('<strong>Description</strong> - The description is not prominent by default; however, some themes may display it.') . '</li>' .		'</ul>' .		'<p>' . __('You can change the display of this screen using the Screen Options tab to set how many items are displayed per screen and to display/hide columns in the table.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Manage_Categories_SubPanel" target="_blank">Categories Documentation</a>') . '</p>';	else		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Post_Tags_SubPanel" target="_blank">Tags Documentation</a>') . '</p>';	$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';	add_contextual_help($current_screen, $help);	unset($help);}require_once ('admin-header.php');$messages[1] = __('Item added.');$messages[2] = __('Item deleted.');$messages[3] = __('Item updated.');$messages[4] = __('Item not added.');$messages[5] = __('Item not updated.');$messages[6] = __('Items deleted.');?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><div id="ajax-response"></div><form class="search-form" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><p class="search-box">	<label class="screen-reader-text" for="tag-search-input"><?php echo $tax->labels->search_items; ?>:</label>	<input type="text" id="tag-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $tax->labels->search_items );  ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$tags_per_page = (int) get_user_option( 'edit_' .  $taxonomy . '_per_page' );if ( empty($tags_per_page) || $tags_per_page < 1 )	$tags_per_page = 20;if ( 'post_tag' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_tags_per_page', $tags_per_page );	$tags_per_page = apply_filters( 'tagsperpage', $tags_per_page ); // Old filter} elseif ( 'category' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_categories_per_page', $tags_per_page ); // Old filter} else {	$tags_per_page = apply_filters( 'edit_' . $taxonomy . '_per_page', $tags_per_page );}$searchterms = !empty($_GET['s']) ? trim(stripslashes($_GET['s'])) : '';$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms($taxonomy, array('search' => $searchterms)) / $tags_per_page),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-tags'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat tag fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers($current_screen); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:tag"><?php tag_rows( $pagenum, $tags_per_page, $searchterms, $taxonomy ); ?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><?php if ( 'category' == $taxonomy ) : ?><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the posts in that category. Instead, posts that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), apply_filters('the_category', get_cat_name(get_option('default_category')))) ?></p><?php if ( current_user_can( 'import' ) ) : ?><p><?php printf(__('Categories can be selectively converted to tags using the <a href="%s">category to tag converter</a>.'), 'import.php') ?></p><?php endif; ?></div><?php elseif ( 'post_tag' == $taxonomy && current_user_can( 'import' ) ) : ?><div class="form-wrap"><p><?php printf(__('Tags can be selectively converted to categories using the <a href="%s">tag to category converter</a>'), 'import.php') ;?>.</p></div><?php endif;do_action('after-' . $taxonomy . '-table', $taxonomy);?></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?phpif ( !is_taxonomy_hierarchical($taxonomy) ) {	if ( current_user_can( $tax->cap->edit_terms ) )		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false, 'link' => 'edit' ) );	else		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false ) );	if ( $tag_cloud ) :	?><div class="tagcloud"><h3><?php echo $tax->labels->popular_items; ?></h3><?php echo $tag_cloud; unset( $tag_cloud ); ?></div><?phpendif;}if ( current_user_can($tax->cap->edit_terms) ) {	if ( 'category' == $taxonomy )		do_action('add_category_form_pre', (object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_pre_add_form	else		do_action('add_tag_form_pre', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categories	do_action($taxonomy . '_pre_add_form', $taxonomy);?><div class="form-wrap"><h3><?php echo $tax->labels->add_new_item; ?></h3><form id="addtag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="add-tag" /><input type="hidden" name="screen" value="<?php echo esc_attr($current_screen->id); ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><?php wp_nonce_field('add-tag'); ?><div class="form-field form-required">	<label for="tag-name"><?php _ex('Name', 'Taxonomy Name'); ?></label>	<input name="tag-name" id="tag-name" type="text" value="" size="40" aria-required="true" />	<p><?php _e('The name is how it appears on your site.'); ?></p></div><?php if ( ! global_terms_enabled() ) : ?><div class="form-field">	<label for="tag-slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label>	<input name="slug" id="tag-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php endif; // is_multisite() ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?><div class="form-field">	<label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label>	<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'taxonomy' => $taxonomy, 'name' => 'parent', 'orderby' => 'name', 'hierarchical' => true, 'show_option_none' => __('None'))); ?>	<?php if ( 'category' == $taxonomy ) : // @todo: Generic text for hierarchical taxonomies ?>		<p><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></p>	<?php endif; ?></div><?php endif; // is_taxonomy_hierarchical() ?><div class="form-field">	<label for="tag-description"><?php _ex('Description', 'Taxonomy Description'); ?></label>	<textarea name="description" id="tag-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><?phpif ( ! is_taxonomy_hierarchical($taxonomy) )	do_action('add_tag_form_fields', $taxonomy);do_action($taxonomy . '_add_form_fields', $taxonomy);?><p class="submit"><input type="submit" class="button" name="submit" id="submit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" /></p><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form',	(object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_add_formelse	do_action('add_tag_form', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categoriesdo_action($taxonomy . '_add_form', $taxonomy);?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-tags', $taxonomy); ?><?phpbreak;}include('./admin-footer.php');?>
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * WordPress Administration Scheme API * * Here we keep the DB structure and option values. * * @package WordPress * @subpackage Administration *//** * The database character collate. * @var string * @global string * @name $charset_collate */$charset_collate = '';// Declare these as global in case schema.php is included from a function.global $wpdb, $wp_queries;if ( ! empty($wpdb->charset) )	$charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";if ( ! empty($wpdb->collate) )	$charset_collate .= " COLLATE $wpdb->collate";/** Create WordPress database tables SQL */$wp_queries = "CREATE TABLE $wpdb->terms ( term_id bigint(20) unsigned NOT NULL auto_increment, name varchar(200) NOT NULL default '', slug varchar(200) NOT NULL default '', term_group bigint(10) NOT NULL default 0, PRIMARY KEY  (term_id), UNIQUE KEY slug (slug), KEY name (name)) $charset_collate;CREATE TABLE $wpdb->term_taxonomy ( term_taxonomy_id bigint(20) unsigned NOT NULL auto_increment, term_id bigint(20) unsigned NOT NULL default 0, taxonomy varchar(32) NOT NULL default '', description longtext NOT NULL, parent bigint(20) unsigned NOT NULL default 0, count bigint(20) NOT NULL default 0, PRIMARY KEY  (term_taxonomy_id), UNIQUE KEY term_id_taxonomy (term_id,taxonomy), KEY taxonomy (taxonomy)) $charset_collate;CREATE TABLE $wpdb->term_relationships ( object_id bigint(20) unsigned NOT NULL default 0, term_taxonomy_id bigint(20) unsigned NOT NULL default 0, term_order int(11) NOT NULL default 0, PRIMARY KEY  (object_id,term_taxonomy_id), KEY term_taxonomy_id (term_taxonomy_id)) $charset_collate;CREATE TABLE $wpdb->commentmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  comment_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY comment_id (comment_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->comments (  comment_ID bigint(20) unsigned NOT NULL auto_increment,  comment_post_ID bigint(20) unsigned NOT NULL default '0',  comment_author tinytext NOT NULL,  comment_author_email varchar(100) NOT NULL default '',  comment_author_url varchar(200) NOT NULL default '',  comment_author_IP varchar(100) NOT NULL default '',  comment_date datetime NOT NULL default '0000-00-00 00:00:00',  comment_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  comment_content text NOT NULL,  comment_karma int(11) NOT NULL default '0',  comment_approved varchar(20) NOT NULL default '1',  comment_agent varchar(255) NOT NULL default '',  comment_type varchar(20) NOT NULL default '',  comment_parent bigint(20) unsigned NOT NULL default '0',  user_id bigint(20) unsigned NOT NULL default '0',  PRIMARY KEY  (comment_ID),  KEY comment_approved (comment_approved),  KEY comment_post_ID (comment_post_ID),  KEY comment_approved_date_gmt (comment_approved,comment_date_gmt),  KEY comment_date_gmt (comment_date_gmt),  KEY comment_parent (comment_parent)) $charset_collate;CREATE TABLE $wpdb->links (  link_id bigint(20) unsigned NOT NULL auto_increment,  link_url varchar(255) NOT NULL default '',  link_name varchar(255) NOT NULL default '',  link_image varchar(255) NOT NULL default '',  link_target varchar(25) NOT NULL default '',  link_description varchar(255) NOT NULL default '',  link_visible varchar(20) NOT NULL default 'Y',  link_owner bigint(20) unsigned NOT NULL default '1',  link_rating int(11) NOT NULL default '0',  link_updated datetime NOT NULL default '0000-00-00 00:00:00',  link_rel varchar(255) NOT NULL default '',  link_notes mediumtext NOT NULL,  link_rss varchar(255) NOT NULL default '',  PRIMARY KEY  (link_id),  KEY link_visible (link_visible)) $charset_collate;CREATE TABLE $wpdb->options (  option_id bigint(20) unsigned NOT NULL auto_increment,  blog_id int(11) NOT NULL default '0',  option_name varchar(64) NOT NULL default '',  option_value longtext NOT NULL,  autoload varchar(20) NOT NULL default 'yes',  PRIMARY KEY  (option_id),  UNIQUE KEY option_name (option_name)) $charset_collate;CREATE TABLE $wpdb->postmeta (  meta_id bigint(20) unsigned NOT NULL auto_increment,  post_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (meta_id),  KEY post_id (post_id),  KEY meta_key (meta_key)) $charset_collate;CREATE TABLE $wpdb->posts (  ID bigint(20) unsigned NOT NULL auto_increment,  post_author bigint(20) unsigned NOT NULL default '0',  post_date datetime NOT NULL default '0000-00-00 00:00:00',  post_date_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content longtext NOT NULL,  post_title text NOT NULL,  post_excerpt text NOT NULL,  post_status varchar(20) NOT NULL default 'publish',  comment_status varchar(20) NOT NULL default 'open',  ping_status varchar(20) NOT NULL default 'open',  post_password varchar(20) NOT NULL default '',  post_name varchar(200) NOT NULL default '',  to_ping text NOT NULL,  pinged text NOT NULL,  post_modified datetime NOT NULL default '0000-00-00 00:00:00',  post_modified_gmt datetime NOT NULL default '0000-00-00 00:00:00',  post_content_filtered text NOT NULL,  post_parent bigint(20) unsigned NOT NULL default '0',  guid varchar(255) NOT NULL default '',  menu_order int(11) NOT NULL default '0',  post_type varchar(20) NOT NULL default 'post',  post_mime_type varchar(100) NOT NULL default '',  comment_count bigint(20) NOT NULL default '0',  PRIMARY KEY  (ID),  KEY post_name (post_name),  KEY type_status_date (post_type,post_status,post_date,ID),  KEY post_parent (post_parent),  KEY post_author (post_author)) $charset_collate;CREATE TABLE $wpdb->users (  ID bigint(20) unsigned NOT NULL auto_increment,  user_login varchar(60) NOT NULL default '',  user_pass varchar(64) NOT NULL default '',  user_nicename varchar(50) NOT NULL default '',  user_email varchar(100) NOT NULL default '',  user_url varchar(100) NOT NULL default '',  user_registered datetime NOT NULL default '0000-00-00 00:00:00',  user_activation_key varchar(60) NOT NULL default '',  user_status int(11) NOT NULL default '0',  display_name varchar(250) NOT NULL default '',  PRIMARY KEY  (ID),  KEY user_login_key (user_login),  KEY user_nicename (user_nicename)) $charset_collate;CREATE TABLE $wpdb->usermeta (  umeta_id bigint(20) unsigned NOT NULL auto_increment,  user_id bigint(20) unsigned NOT NULL default '0',  meta_key varchar(255) default NULL,  meta_value longtext,  PRIMARY KEY  (umeta_id),  KEY user_id (user_id),  KEY meta_key (meta_key)) $charset_collate;";/** * Create WordPress options and set the default values. * * @since 1.5.0 * @uses $wpdb * @uses $wp_db_version */function populate_options() {	global $wpdb, $wp_db_version, $current_site;	$guessurl = wp_guess_url();	do_action('populate_options');	if ( ini_get('safe_mode') ) {		// Safe mode can break mkdir() so use a flat structure by default.		$uploads_use_yearmonth_folders = 0;	} else {		$uploads_use_yearmonth_folders = 1;	}	$options = array(	'siteurl' => $guessurl,	'blogname' => __('My Site'),	/* translators: blog tagline */	'blogdescription' => __('Just another WordPress site'),	'users_can_register' => 0,	'admin_email' => 'you@example.com',	'start_of_week' => 1,	'use_balanceTags' => 0,	'use_smilies' => 1,	'require_name_email' => 1,	'comments_notify' => 1,	'posts_per_rss' => 10,	'rss_use_excerpt' => 0,	'mailserver_url' => 'mail.example.com',	'mailserver_login' => 'login@example.com',	'mailserver_pass' => 'password',	'mailserver_port' => 110,	'default_category' => 1,	'default_comment_status' => 'open',	'default_ping_status' => 'open',	'default_pingback_flag' => 1,	'default_post_edit_rows' => 10,	'posts_per_page' => 10,	/* translators: default date format, see http://php.net/date */	'date_format' => __('F j, Y'),	/* translators: default time format, see http://php.net/date */	'time_format' => __('g:i a'),	/* translators: links last updated date format, see http://php.net/date */	'links_updated_date_format' => __('F j, Y g:i a'),	'links_recently_updated_prepend' => '<em>',	'links_recently_updated_append' => '</em>',	'links_recently_updated_time' => 120,	'comment_moderation' => 0,	'moderation_notify' => 1,	'permalink_structure' => '',	'gzipcompression' => 0,	'hack_file' => 0,	'blog_charset' => 'UTF-8',	'moderation_keys' => '',	'active_plugins' => array(),	'home' => $guessurl,	'category_base' => '',	'ping_sites' => 'http://rpc.pingomatic.com/',	'advanced_edit' => 0,	'comment_max_links' => 2,	'gmt_offset' => date('Z') / 3600,	// 1.5	'default_email_category' => 1,	'recently_edited' => '',	'template' => WP_DEFAULT_THEME,	'stylesheet' => WP_DEFAULT_THEME,	'comment_whitelist' => 1,	'blacklist_keys' => '',	'comment_registration' => 0,	'rss_language' => 'en',	'html_type' => 'text/html',	// 1.5.1	'use_trackback' => 0,	// 2.0	'default_role' => 'subscriber',	'db_version' => $wp_db_version,	// 2.0.1	'uploads_use_yearmonth_folders' => $uploads_use_yearmonth_folders,	'upload_path' => '',	// 2.1	'blog_public' => '1',	'default_link_category' => 2,	'show_on_front' => 'posts',	// 2.2	'tag_base' => '',	// 2.5	'show_avatars' => '1',	'avatar_rating' => 'G',	'upload_url_path' => '',	'thumbnail_size_w' => 150,	'thumbnail_size_h' => 150,	'thumbnail_crop' => 1,	'medium_size_w' => 300,	'medium_size_h' => 300,	// 2.6	'avatar_default' => 'mystery',	'enable_app' => 0,	'enable_xmlrpc' => 0,	// 2.7	'large_size_w' => 1024,	'large_size_h' => 1024,	'image_default_link_type' => 'file',	'image_default_size' => '',	'image_default_align' => '',	'close_comments_for_old_posts' => 0,	'close_comments_days_old' => 14,	'thread_comments' => 1,	'thread_comments_depth' => 5,	'page_comments' => 0,	'comments_per_page' => 50,	'default_comments_page' => 'newest',	'comment_order' => 'asc',	'sticky_posts' => array(),	'widget_categories' => array(),	'widget_text' => array(),	'widget_rss' => array(),	// 2.8	'timezone_string' => '',	// 2.9	'embed_autourls' => 1,	'embed_size_w' => '',	'embed_size_h' => 600,	// 3.0	'page_for_posts' => 0,	'page_on_front' => 0,	);	// 3.0 multisite	if ( is_multisite() ) {		/* translators: blog tagline */		$options[ 'blogdescription' ] = sprintf(__('Just another %s site'), $current_site->site_name );		$options[ 'permalink_structure' ] = '/%year%/%monthnum%/%day%/%postname%/';	}	// Set autoload to no for these options	$fat_options = array( 'moderation_keys', 'recently_edited', 'blacklist_keys' );	$existing_options = $wpdb->get_col("SELECT option_name FROM $wpdb->options");	$insert = '';	foreach ( $options as $option => $value ) {		if ( in_array($option, $existing_options) )			continue;		if ( in_array($option, $fat_options) )			$autoload = 'no';		else			$autoload = 'yes';		$option = $wpdb->escape($option);		if ( is_array($value) )			$value = serialize($value);		$value = $wpdb->escape($value);		if ( !empty($insert) )			$insert .= ', ';		$insert .= "('$option', '$value', '$autoload')";	}	if ( !empty($insert) )		$wpdb->query("INSERT INTO $wpdb->options (option_name, option_value, autoload) VALUES " . $insert);	// in case it is set, but blank, update "home"	if ( !__get_option('home') ) update_option('home', $guessurl);	// Delete unused options	$unusedoptions = array ('blodotgsping_url', 'bodyterminator', 'emailtestonly', 'phoneemail_separator', 'smilies_directory', 'subjectprefix', 'use_bbcode', 'use_blodotgsping', 'use_phoneemail', 'use_quicktags', 'use_weblogsping', 'weblogs_cache_file', 'use_preview', 'use_htmltrans', 'smilies_directory', 'fileupload_allowedusers', 'use_phoneemail', 'default_post_status', 'default_post_category', 'archive_mode', 'time_difference', 'links_minadminlevel', 'links_use_adminlevels', 'links_rating_type', 'links_rating_char', 'links_rating_ignore_zero', 'links_rating_single_image', 'links_rating_image0', 'links_rating_image1', 'links_rating_image2', 'links_rating_image3', 'links_rating_image4', 'links_rating_image5', 'links_rating_image6', 'links_rating_image7', 'links_rating_image8', 'links_rating_image9', 'weblogs_cacheminutes', 'comment_allowed_tags', 'search_engine_friendly_urls', 'default_geourl_lat', 'default_geourl_lon', 'use_default_geourl', 'weblogs_xml_url', 'new_users_can_blog', '_wpnonce', '_wp_http_referer', 'Update', 'action', 'rich_editing', 'autosave_interval', 'deactivated_plugins', 'can_compress_scripts',		'page_uris', 'update_core', 'update_plugins', 'update_themes', 'doing_cron', 'random_seed', 'rss_excerpt_length', 'secret', 'use_linksupdate', 'default_comment_status_page' );	foreach ($unusedoptions as $option)		delete_option($option);	// delete obsolete magpie stuff	$wpdb->query("DELETE FROM $wpdb->options WHERE option_name REGEXP '^rss_[0-9a-f]{32}(_ts)?$'");}/** * Execute WordPress role creation for the various WordPress versions. * * @since 2.0.0 */function populate_roles() {	populate_roles_160();	populate_roles_210();	populate_roles_230();	populate_roles_250();	populate_roles_260();	populate_roles_270();	populate_roles_280();	populate_roles_300();}/** * Create the roles for WordPress 2.0 * * @since 2.0.0 */function populate_roles_160() {	// Add roles	// Dummy gettext calls to get strings in the catalog.	/* translators: user role */	_x('Administrator', 'User role');	/* translators: user role */	_x('Editor', 'User role');	/* translators: user role */	_x('Author', 'User role');	/* translators: user role */	_x('Contributor', 'User role');	/* translators: user role */	_x('Subscriber', 'User role');	add_role('administrator', 'Administrator');	add_role('editor', 'Editor');	add_role('author', 'Author');	add_role('contributor', 'Contributor');	add_role('subscriber', 'Subscriber');	// Add caps for Administrator role	$role =& get_role('administrator');	$role->add_cap('switch_themes');	$role->add_cap('edit_themes');	$role->add_cap('activate_plugins');	$role->add_cap('edit_plugins');	$role->add_cap('edit_users');	$role->add_cap('edit_files');	$role->add_cap('manage_options');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('import');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_10');	$role->add_cap('level_9');	$role->add_cap('level_8');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Editor role	$role =& get_role('editor');	$role->add_cap('moderate_comments');	$role->add_cap('manage_categories');	$role->add_cap('manage_links');	$role->add_cap('upload_files');	$role->add_cap('unfiltered_html');	$role->add_cap('edit_posts');	$role->add_cap('edit_others_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('edit_pages');	$role->add_cap('read');	$role->add_cap('level_7');	$role->add_cap('level_6');	$role->add_cap('level_5');	$role->add_cap('level_4');	$role->add_cap('level_3');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Author role	$role =& get_role('author');	$role->add_cap('upload_files');	$role->add_cap('edit_posts');	$role->add_cap('edit_published_posts');	$role->add_cap('publish_posts');	$role->add_cap('read');	$role->add_cap('level_2');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Contributor role	$role =& get_role('contributor');	$role->add_cap('edit_posts');	$role->add_cap('read');	$role->add_cap('level_1');	$role->add_cap('level_0');	// Add caps for Subscriber role	$role =& get_role('subscriber');	$role->add_cap('read');	$role->add_cap('level_0');}/** * Create and modify WordPress roles for WordPress 2.1. * * @since 2.1.0 */function populate_roles_210() {	$roles = array('administrator', 'editor');	foreach ($roles as $role) {		$role =& get_role($role);		if ( empty($role) )			continue;		$role->add_cap('edit_others_pages');		$role->add_cap('edit_published_pages');		$role->add_cap('publish_pages');		$role->add_cap('delete_pages');		$role->add_cap('delete_others_pages');		$role->add_cap('delete_published_pages');		$role->add_cap('delete_posts');		$role->add_cap('delete_others_posts');		$role->add_cap('delete_published_posts');		$role->add_cap('delete_private_posts');		$role->add_cap('edit_private_posts');		$role->add_cap('read_private_posts');		$role->add_cap('delete_private_pages');		$role->add_cap('edit_private_pages');		$role->add_cap('read_private_pages');	}	$role =& get_role('administrator');	if ( ! empty($role) ) {		$role->add_cap('delete_users');		$role->add_cap('create_users');	}	$role =& get_role('author');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');		$role->add_cap('delete_published_posts');	}	$role =& get_role('contributor');	if ( ! empty($role) ) {		$role->add_cap('delete_posts');	}}/** * Create and modify WordPress roles for WordPress 2.3. * * @since 2.3.0 */function populate_roles_230() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'unfiltered_upload' );	}}/** * Create and modify WordPress roles for WordPress 2.5. * * @since 2.5.0 */function populate_roles_250() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'edit_dashboard' );	}}/** * Create and modify WordPress roles for WordPress 2.6. * * @since 2.6.0 */function populate_roles_260() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_plugins' );		$role->add_cap( 'delete_plugins' );	}}/** * Create and modify WordPress roles for WordPress 2.7. * * @since 2.7.0 */function populate_roles_270() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_plugins' );		$role->add_cap( 'update_themes' );	}}/** * Create and modify WordPress roles for WordPress 2.8. * * @since 2.8.0 */function populate_roles_280() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'install_themes' );	}}/** * Create and modify WordPress roles for WordPress 3.0. * * @since 3.0.0 */function populate_roles_300() {	$role =& get_role( 'administrator' );	if ( !empty( $role ) ) {		$role->add_cap( 'update_core' );		$role->add_cap( 'list_users' );		$role->add_cap( 'remove_users' );		$role->add_cap( 'add_users' );		$role->add_cap( 'promote_users' );		$role->add_cap( 'edit_theme_options' );		$role->add_cap( 'delete_themes' );		$role->add_cap( 'export' );	}}/** * populate network settings * * @since 3.0.0 * * @param int $network_id id of network to populate * @return bool|WP_Error True on success, or WP_Error on warning (with the install otherwise successful, * 	so the error code must be checked) or failure. */function populate_network( $network_id = 1, $domain = '', $email = '', $site_name = '', $path = '/', $subdomain_install = false ) {	global $wpdb, $current_site, $wp_db_version, $wp_rewrite;	$errors = new WP_Error();	if ( '' == $domain )		$errors->add( 'empty_domain', __( 'You must provide a domain name.' ) );	if ( '' == $site_name )		$errors->add( 'empty_sitename', __( 'You must provide a name for your network of sites.' ) );	// check for network collision	if ( $network_id == $wpdb->get_var( $wpdb->prepare( "SELECT id FROM $wpdb->site WHERE id = %d", $network_id ) ) )		$errors->add( 'siteid_exists', __( 'The network already exists.' ) );	$site_user = get_user_by_email( $email );	if ( ! is_email( $email ) )		$errors->add( 'invalid_email', __( 'You must provide a valid e-mail address.' ) );	if ( $errors->get_error_code() )		return $errors;	// set up site tables	$template = get_option( 'template' );	$stylesheet = get_option( 'stylesheet' );	$allowed_themes = array( $stylesheet => true );	if ( $template != $stylesheet )		$allowed_themes[ $template ] = true;	if ( WP_DEFAULT_THEME != $stylesheet && WP_DEFAULT_THEME != $template )		$allowed_themes[ WP_DEFAULT_THEME ] = true;	if ( 1 == $network_id ) {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path ) );		$network_id = $wpdb->insert_id;	} else {		$wpdb->insert( $wpdb->site, array( 'domain' => $domain, 'path' => $path, 'id' => $network_id ) );	}	if ( !is_multisite() ) {		$site_admins = array( $site_user->user_login );		$users = get_users_of_blog();		if ( $users ) {			foreach ( $users as $user ) {				if ( is_super_admin( $user->ID ) && !in_array( $user->user_login, $site_admins ) )					$site_admins[] = $user->user_login;			}		}	} else {		$site_admins = get_site_option( 'site_admins' );	}	$welcome_email = __( 'Dear User,Your new SITE_NAME site has been successfully set up at:BLOG_URLYou can log in to the administrator account with the following information:Username: USERNAMEPassword: PASSWORDLogin Here: BLOG_URLwp-login.phpWe hope you enjoy your new site.Thanks!--The Team @ SITE_NAME' );	$sitemeta = array(		'site_name' => $site_name,		'admin_email' => $site_user->user_email,		'admin_user_id' => $site_user->ID,		'registration' => 'none',		'upload_filetypes' => 'jpg jpeg png gif mp3 mov avi wmv midi mid pdf',		'blog_upload_space' => 10,		'fileupload_maxk' => 1500,		'site_admins' => $site_admins,		'allowedthemes' => $allowed_themes,		'illegal_names' => array( 'www', 'web', 'root', 'admin', 'main', 'invite', 'administrator', 'files' ),		'wpmu_upgrade_site' => $wp_db_version,		'welcome_email' => $welcome_email,		'first_post' => __( 'Welcome to <a href="SITE_URL">SITE_NAME</a>. This is your first post. Edit or delete it, then start blogging!' ),		// @todo - network admins should have a method of editing the network siteurl (used for cookie hash)		'siteurl' => get_option( 'siteurl' ) . '/',		'add_new_users' => '0',		'upload_space_check_disabled' => '0',		'subdomain_install' => intval( $subdomain_install ),		'global_terms_enabled' => global_terms_enabled() ? '1' : '0'	);	if ( !intval( $subdomain_install ) )		$sitemeta['illegal_names'][] = 'blog';	$insert = '';	foreach ( $sitemeta as $meta_key => $meta_value ) {		$meta_key = $wpdb->escape( $meta_key );		if ( is_array( $meta_value ) )			$meta_value = serialize( $meta_value );		$meta_value = $wpdb->escape( $meta_value );		if ( !empty( $insert ) )			$insert .= ', ';		$insert .= "( $network_id, '$meta_key', '$meta_value')";	}	$wpdb->query( "INSERT INTO $wpdb->sitemeta ( site_id, meta_key, meta_value ) VALUES " . $insert );	$current_site->domain = $domain;	$current_site->path = $path;	$current_site->site_name = ucfirst( $domain );	if ( !is_multisite() ) {		$wpdb->insert( $wpdb->blogs, array( 'site_id' => $network_id, 'domain' => $domain, 'path' => $path, 'registered' => current_time( 'mysql' ) ) );		$blog_id = $wpdb->insert_id;		update_user_meta( $site_user->ID, 'source_domain', $domain );		update_user_meta( $site_user->ID, 'primary_blog', $blog_id );		if ( !$upload_path = get_option( 'upload_path' ) ) {			$upload_path = substr( WP_CONTENT_DIR, strlen( ABSPATH ) ) . '/uploads';			update_option( 'upload_path', $upload_path );		}		update_option( 'fileupload_url', get_option( 'siteurl' ) . '/' . $upload_path );	}	if ( $subdomain_install )		update_option( 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/');	else		update_option( 'permalink_structure', '/blog/%year%/%monthnum%/%day%/%postname%/');	$wp_rewrite->flush_rules();	if ( $subdomain_install ) {		$vhost_ok = false;		$errstr = '';		$hostname = substr( md5( time() ), 0, 6 ) . '.' . $domain; // Very random hostname!		$page = wp_remote_get( 'http://' . $hostname, array( 'timeout' => 5, 'httpversion' => '1.1' ) );		if ( is_wp_error( $page ) )			$errstr = $page->get_error_message();		elseif ( 200 == $page['response']['code'] )				$vhost_ok = true;		if ( ! $vhost_ok ) {			$msg = '<p><strong>' . __( 'Warning! Wildcard DNS may not be configured correctly!' ) . '</strong></p>';			$msg .= '<p>' . sprintf( __( 'The installer attempted to contact a random hostname (<code>%1$s</code>) on your domain.' ), $hostname );			if ( ! empty ( $errstr ) )				$msg .= ' ' . sprintf( __( 'This resulted in an error message: %s' ), '<code>' . $errstr . '</code>' );			$msg .= '</p>';			$msg .= '<p>' . _e( 'To use a subdomain configuration, you must have a wildcard entry in your DNS. This usually means adding a <code>*</code> hostname record pointing at your web server in your DNS configuration tool.' ) . '</p>';			$msg .= '<p>' . __( 'You can still use your site but any subdomain you create may not be accessible. If you know your DNS is correct, ignore this message.' ) . '</p>';			return new WP_Error( 'no_wildcard_dns', $msg );		}	}	return true;}?>
<?php/** * WordPress Administration Template Header * * @package WordPress * @subpackage Administration */@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! defined( 'WP_ADMIN' ) )	require_once( './admin.php' );get_admin_page_title();$title = esc_html( strip_tags( $title ) );wp_user_settings();wp_menu_unfold();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php echo $title; ?> &lsaquo; <?php bloginfo('name') ?>  &#8212; WordPress</title><?phpwp_admin_css( 'css/global' );wp_admin_css();wp_admin_css( 'css/colors' );wp_admin_css( 'css/ie' );if ( is_multisite() )	wp_admin_css( 'css/ms' );wp_enqueue_script('utils');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {		'url': '<?php echo SITECOOKIEPATH; ?>',		'uid': '<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>',		'time':'<?php echo time() ?>'	},	ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>',	pagenow = '<?php echo $current_screen->id; ?>',	typenow = '<?php if ( isset($current_screen->post_type) ) echo $current_screen->post_type; ?>',	adminpage = '<?php echo $admin_body_class; ?>',	thousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',	decimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',	isRtl = <?php echo (int) is_rtl(); ?>;//]]></script><?phpif ( in_array( $pagenow, array('post.php', 'post-new.php') ) ) {	add_action( 'admin_print_footer_scripts', 'wp_tiny_mce', 25 );	wp_enqueue_script('quicktags');}do_action('admin_enqueue_scripts', $hook_suffix);do_action("admin_print_styles-$hook_suffix");do_action('admin_print_styles');do_action("admin_print_scripts-$hook_suffix");do_action('admin_print_scripts');do_action("admin_head-$hook_suffix");do_action('admin_head');if ( get_user_setting('mfold') == 'f' )	$admin_body_class .= ' folded';if ( $is_iphone ) { ?><style type="text/css">.row-actions{visibility:visible;}</style><?php } ?></head><body class="wp-admin no-js <?php echo apply_filters( 'admin_body_class', '' ) . " $admin_body_class"; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><div id="wpwrap"><div id="wpcontent"><div id="wphead"><?php$blog_name = get_bloginfo('name', 'display');if ( '' == $blog_name ) {	$blog_name = '&nbsp;';} else {	$blog_name_excerpt = wp_html_excerpt($blog_name, 40);	if ( $blog_name != $blog_name_excerpt )		$blog_name_excerpt = trim($blog_name_excerpt) . '&hellip;';	$blog_name = $blog_name_excerpt;	unset($blog_name_excerpt);}$title_class = '';if ( function_exists('mb_strlen') ) {	if ( mb_strlen($blog_name, 'UTF-8') > 30 )		$title_class = 'class="long-title"';} else {	if ( strlen($blog_name) > 30 )		$title_class = 'class="long-title"';}?><img id="header-logo" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" alt="" width="32" height="32" /><h1 id="site-heading" <?php echo $title_class ?>>	<a href="<?php echo trailingslashit( get_bloginfo( 'url' ) ); ?>" title="<?php esc_attr_e('Visit Site') ?>">		<span id="site-title"><?php echo $blog_name ?></span>	</a><?php if ( current_user_can('manage_options') && '1' != get_option('blog_public') ): ?>	<a id="privacy-on-link" href="options-privacy.php" title="<?php echo esc_attr( apply_filters('privacy_on_link_title', __('Your site is asking search engines not to index its content') ) ); ?>"><?php echo apply_filters('privacy_on_link_text', __('Search Engines Blocked') ); ?></a><?php endif; ?></h1><?php do_action('in_admin_header'); ?><div id="wphead-info"><div id="user_info"><p><?php$links = array();$links[5] = sprintf(__('Howdy, <a href="%1$s" title="Edit your profile">%2$s</a>'), 'profile.php', $user_identity);$links[15] = '| <a href="' . wp_logout_url() . '" title="' . __('Log Out') . '">' . __('Log Out') . '</a>';$links = apply_filters('admin_user_info_links', $links, $current_user);ksort($links);echo implode(' ', $links);?></p></div><?php favorite_actions($current_screen); ?></div></div><div id="wpbody"><?phpunset($title_class, $blog_name);require(ABSPATH . 'wp-admin/menu-header.php');$current_screen->parent_file = $parent_file;$current_screen->parent_base = preg_replace('/\?.*$/', '', $parent_file);$current_screen->parent_base = str_replace('.php', '', $current_screen->parent_base);?><div id="wpbody-content"><?phpscreen_meta($current_screen);do_action('admin_notices');if ( $parent_file == 'options-general.php' )	require(ABSPATH . 'wp-admin/options-head.php');
<?php/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Edit extends Walker_Nav_Menu  {	/**	 * @see Walker_Nav_Menu::start_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function start_lvl(&$output) {}	/**	 * @see Walker_Nav_Menu::end_lvl()	 * @since 3.0.0	 *	 * @param string $output Passed by reference.	 * @param int $depth Depth of page.	 */	function end_lvl(&$output) {	}	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_wp_nav_menu_max_depth;		$_wp_nav_menu_max_depth = $depth > $_wp_nav_menu_max_depth ? $depth : $_wp_nav_menu_max_depth;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		ob_start();		$item_id = esc_attr( $item->ID );		$removed_args = array(			'action',			'customlink-tab',			'edit-menu-item',			'menu-item',			'page-tab',			'_wpnonce',		);		$original_title = '';		if ( 'taxonomy' == $item->type ) {			$original_title = get_term_field( 'name', $item->object_id, $item->object, 'raw' );		} elseif ( 'post_type' == $item->type ) {			$original_object = get_post( $item->object_id );			$original_title = $original_object->post_title;		}		$classes = array(			'menu-item menu-item-depth-' . $depth,			'menu-item-' . esc_attr( $item->object ),			'menu-item-edit-' . ( ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? 'active' : 'inactive'),		);		$title = $item->title;		if ( isset( $item->post_status ) && 'draft' == $item->post_status ) {			$classes[] = 'pending';			/* translators: %s: title of menu item in draft status */			$title = sprintf( __('%s (Pending)'), $item->title );		}		$title = empty( $item->label ) ? $title : $item->label;		?>		<li id="menu-item-<?php echo $item_id; ?>" class="<?php echo implode(' ', $classes ); ?>">			<dl class="menu-item-bar">				<dt class="menu-item-handle">					<span class="item-title"><?php echo esc_html( $title ); ?></span>					<span class="item-controls">						<span class="item-type"><?php echo esc_html( $item->type_label ); ?></span>						<span class="item-order">							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-up-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-up"><abbr title="<?php esc_attr_e('Move up'); ?>">&#8593;</abbr></a>							|							<a href="<?php								echo wp_nonce_url(									add_query_arg(										array(											'action' => 'move-down-menu-item',											'menu-item' => $item_id,										),										remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )									),									'move-menu_item'								);							?>" class="item-move-down"><abbr title="<?php esc_attr_e('Move down'); ?>">&#8595;</abbr></a>						</span>						<a class="item-edit" id="edit-<?php echo $item_id; ?>" title="<?php _e('Edit Menu Item'); ?>" href="<?php							echo ( isset( $_GET['edit-menu-item'] ) && $item_id == $_GET['edit-menu-item'] ) ? admin_url( 'nav-menus.php' ) : add_query_arg( 'edit-menu-item', $item_id, remove_query_arg( $removed_args, admin_url( 'nav-menus.php#menu-item-settings-' . $item_id ) ) );						?>"><?php _e( 'Edit Menu Item' ); ?></a>					</span>				</dt>			</dl>			<div class="menu-item-settings" id="menu-item-settings-<?php echo $item_id; ?>">				<?php if( 'custom' == $item->type ) : ?>					<p class="field-url description description-wide">						<label for="edit-menu-item-url-<?php echo $item_id; ?>">							<?php _e( 'URL' ); ?><br />							<input type="text" id="edit-menu-item-url-<?php echo $item_id; ?>" class="widefat code edit-menu-item-url" name="menu-item-url[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->url ); ?>" />						</label>					</p>				<?php endif; ?>				<p class="description description-thin">					<label for="edit-menu-item-title-<?php echo $item_id; ?>">						<?php _e( 'Navigation Label' ); ?><br />						<input type="text" id="edit-menu-item-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-title" name="menu-item-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->title ); ?>" />					</label>				</p>				<p class="description description-thin">					<label for="edit-menu-item-attr-title-<?php echo $item_id; ?>">						<?php _e( 'Title Attribute' ); ?><br />						<input type="text" id="edit-menu-item-attr-title-<?php echo $item_id; ?>" class="widefat edit-menu-item-attr-title" name="menu-item-attr-title[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->post_excerpt ); ?>" />					</label>				</p>				<p class="field-link-target description description-thin">					<label for="edit-menu-item-target-<?php echo $item_id; ?>">						<?php _e( 'Link Target' ); ?><br />						<select id="edit-menu-item-target-<?php echo $item_id; ?>" class="widefat edit-menu-item-target" name="menu-item-target[<?php echo $item_id; ?>]">							<option value="" <?php selected( $item->target, ''); ?>><?php _e('Same window or tab'); ?></option>							<option value="_blank" <?php selected( $item->target, '_blank'); ?>><?php _e('New window or tab'); ?></option>						</select>					</label>				</p>				<p class="field-css-classes description description-thin">					<label for="edit-menu-item-classes-<?php echo $item_id; ?>">						<?php _e( 'CSS Classes (optional)' ); ?><br />						<input type="text" id="edit-menu-item-classes-<?php echo $item_id; ?>" class="widefat code edit-menu-item-classes" name="menu-item-classes[<?php echo $item_id; ?>]" value="<?php echo esc_attr( implode(' ', $item->classes ) ); ?>" />					</label>				</p>				<p class="field-xfn description description-thin">					<label for="edit-menu-item-xfn-<?php echo $item_id; ?>">						<?php _e( 'Link Relationship (XFN)' ); ?><br />						<input type="text" id="edit-menu-item-xfn-<?php echo $item_id; ?>" class="widefat code edit-menu-item-xfn" name="menu-item-xfn[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->xfn ); ?>" />					</label>				</p>				<p class="field-description description description-wide">					<label for="edit-menu-item-description-<?php echo $item_id; ?>">						<?php _e( 'Description' ); ?><br />						<textarea id="edit-menu-item-description-<?php echo $item_id; ?>" class="widefat edit-menu-item-description" rows="3" cols="20" name="menu-item-description[<?php echo $item_id; ?>]"><?php echo esc_html( $item->description ); ?></textarea>						<span class="description"><?php _e('The description will be displayed in the menu if the current theme supports it.'); ?></span>					</label>				</p>				<div class="menu-item-actions description-wide submitbox">					<?php if( 'custom' != $item->type ) : ?>						<p class="link-to-original">							<?php printf( __('Original: %s'), '<a href="' . esc_attr( $item->url ) . '">' . esc_html( $original_title ) . '</a>' ); ?>						</p>					<?php endif; ?>					<a class="item-delete submitdelete deletion" id="delete-<?php echo $item_id; ?>" href="<?php					echo wp_nonce_url(						add_query_arg(							array(								'action' => 'delete-menu-item',								'menu-item' => $item_id,							),							remove_query_arg($removed_args, admin_url( 'nav-menus.php' ) )						),						'delete-menu_item_' . $item_id					); ?>"><?php _e('Remove'); ?></a> <span class="meta-sep"> | </span> <a class="item-cancel submitcancel" id="cancel-<?php echo $item_id; ?>" href="<?php	echo add_query_arg( array('edit-menu-item' => $item_id, 'cancel' => time()), remove_query_arg( $removed_args, admin_url( 'nav-menus.php' ) ) );						?>#menu-item-settings-<?php echo $item_id; ?>"><?php _e('Cancel'); ?></a>				</div>				<input class="menu-item-data-db-id" type="hidden" name="menu-item-db-id[<?php echo $item_id; ?>]" value="<?php echo $item_id; ?>" />				<input class="menu-item-data-object-id" type="hidden" name="menu-item-object-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object_id ); ?>" />				<input class="menu-item-data-object" type="hidden" name="menu-item-object[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->object ); ?>" />				<input class="menu-item-data-parent-id" type="hidden" name="menu-item-parent-id[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_item_parent ); ?>" />				<input class="menu-item-data-position" type="hidden" name="menu-item-position[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->menu_order ); ?>" />				<input class="menu-item-data-type" type="hidden" name="menu-item-type[<?php echo $item_id; ?>]" value="<?php echo esc_attr( $item->type ); ?>" />			</div><!-- .menu-item-settings-->			<ul class="menu-item-transport"></ul>		<?php		$output .= ob_get_clean();	}}/** * Create HTML list of nav menu input items. * * @package WordPress * @since 3.0.0 * @uses Walker_Nav_Menu */class Walker_Nav_Menu_Checklist extends Walker_Nav_Menu  {	/**	 * @see Walker::start_el()	 * @since 3.0.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $item Menu item data object.	 * @param int $depth Depth of menu item. Used for padding.	 * @param int $current_page Menu item ID.	 * @param object $args	 */	function start_el(&$output, $item, $depth, $args) {		global $_nav_menu_placeholder;		$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;		$possible_object_id = isset( $item->post_type ) && 'nav_menu_item' == $item->post_type ? $item->object_id : $_nav_menu_placeholder;		$possible_db_id = ( ! empty( $item->ID ) ) && ( 0 < $possible_object_id ) ? (int) $item->ID : 0;		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';		$output .= $indent . '<li>';		$output .= '<label class="menu-item-title">';		$output .= '<input type="checkbox" class="menu-item-checkbox';		if ( ! empty( $item->_add_to_top ) ) {			$output .= ' add-to-top';		}		$output .= '" name="menu-item[' . $possible_object_id . '][menu-item-object-id]" value="'. esc_attr( $item->object_id ) .'" /> ';		$output .= empty( $item->label ) ? esc_html( $item->title ) : esc_html( $item->label );		$output .= '</label>';		// Menu item hidden fields		$output .= '<input type="hidden" class="menu-item-db-id" name="menu-item[' . $possible_object_id . '][menu-item-db-id]" value="' . $possible_db_id . '" />';		$output .= '<input type="hidden" class="menu-item-object" name="menu-item[' . $possible_object_id . '][menu-item-object]" value="'. esc_attr( $item->object ) .'" />';		$output .= '<input type="hidden" class="menu-item-parent-id" name="menu-item[' . $possible_object_id . '][menu-item-parent-id]" value="'. esc_attr( $item->menu_item_parent ) .'" />';		$output .= '<input type="hidden" class="menu-item-type" name="menu-item[' . $possible_object_id . '][menu-item-type]" value="'. esc_attr( $item->type ) .'" />';		$output .= '<input type="hidden" class="menu-item-title" name="menu-item[' . $possible_object_id . '][menu-item-title]" value="'. esc_attr( $item->title ) .'" />';		$output .= '<input type="hidden" class="menu-item-url" name="menu-item[' . $possible_object_id . '][menu-item-url]" value="'. esc_attr( $item->url ) .'" />';		$output .= '<input type="hidden" class="menu-item-target" name="menu-item[' . $possible_object_id . '][menu-item-target]" value="'. esc_attr( $item->target ) .'" />';		$output .= '<input type="hidden" class="menu-item-attr_title" name="menu-item[' . $possible_object_id . '][menu-item-attr_title]" value="'. esc_attr( $item->attr_title ) .'" />';		$output .= '<input type="hidden" class="menu-item-description" name="menu-item[' . $possible_object_id . '][menu-item-description]" value="'. esc_attr( $item->description ) .'" />';		$output .= '<input type="hidden" class="menu-item-classes" name="menu-item[' . $possible_object_id . '][menu-item-classes]" value="'. esc_attr( implode( ' ', $item->classes ) ) .'" />';		$output .= '<input type="hidden" class="menu-item-xfn" name="menu-item[' . $possible_object_id . '][menu-item-xfn]" value="'. esc_attr( $item->xfn ) .'" />';	}}/** * Prints the appropriate response to a menu quick search. * * @since 3.0.0 * * @param array $request The unsanitized request values. */function _wp_ajax_menu_quick_search( $request = array() ) {	$args = array();	$type = isset( $request['type'] ) ? $request['type'] : '';	$object_type = isset( $request['object_type'] ) ? $request['object_type'] : '';	$query = isset( $request['q'] ) ? $request['q'] : '';	$response_format = isset( $request['response-format'] ) && in_array( $request['response-format'], array( 'json', 'markup' ) ) ? $request['response-format'] : 'json';	if ( 'markup' == $response_format ) {		$args['walker'] = new Walker_Nav_Menu_Checklist;	}	if ( 'get-post-item' == $type ) {		if ( post_type_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( $object_id ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_post( $object_id );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => get_the_title( $object_id ),							'post_type' => get_post_type( $object_id ),						)					);					echo "\n";				}			}		} elseif ( taxonomy_exists( $object_type ) ) {			if ( isset( $request['ID'] ) ) {				$object_id = (int) $request['ID'];				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_term( $object_id, $object_type ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					$post_obj = get_term( $object_id, $object_type );					echo json_encode(						array(							'ID' => $object_id,							'post_title' => $post_obj->name,							'post_type' => $object_type,						)					);					echo "\n";				}			}		}	} elseif ( preg_match('/quick-search-(posttype|taxonomy)-([a-zA-Z_-]*\b)/', $type, $matches) ) {		if ( 'posttype' == $matches[1] && get_post_type_object( $matches[2] ) ) {			query_posts(array(				'posts_per_page' => 10,				'post_type' => $matches[2],				's' => $query,			));			if ( ! have_posts() )				return;			while ( have_posts() ) {				the_post();				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( get_post( get_the_ID() ) ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => get_the_ID(),							'post_title' => get_the_title(),							'post_type' => get_post_type(),						)					);					echo "\n";				}			}		} elseif ( 'taxonomy' == $matches[1] ) {			$terms = get_terms( $matches[2], array(				'name__like' => $query,				'number' => 10,			));			if ( empty( $terms ) || is_wp_error( $terms ) )				return;			foreach( (array) $terms as $term ) {				if ( 'markup' == $response_format ) {					echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', array( $term ) ), 0, (object) $args );				} elseif ( 'json' == $response_format ) {					echo json_encode(						array(							'ID' => $term->term_id,							'post_title' => $term->name,							'post_type' => $matches[2],						)					);					echo "\n";				}			}		}	}}/** * Register nav menu metaboxes and advanced menu items * * @since 3.0.0 **/function wp_nav_menu_setup() {	// Register meta boxes	if ( wp_get_nav_menus() )		add_meta_box( 'nav-menu-theme-locations', __( 'Theme Locations' ), 'wp_nav_menu_locations_meta_box' , 'nav-menus', 'side', 'default' );	add_meta_box( 'add-custom-links', __('Custom Links'), 'wp_nav_menu_item_link_meta_box', 'nav-menus', 'side', 'default' );	wp_nav_menu_post_type_meta_boxes();	wp_nav_menu_taxonomy_meta_boxes();	// Register advanced menu items (columns)	add_filter( 'manage_nav-menus_columns', 'wp_nav_menu_manage_columns');	// If first time editing, disable advanced items by default.	if( false === get_user_option( 'managenav-menuscolumnshidden' ) ) {		$user = wp_get_current_user();		update_user_option($user->ID, 'managenav-menuscolumnshidden',			array( 0 => 'link-target', 1 => 'css-classes', 2 => 'xfn', 3 => 'description', ),			true);	}}/** * Limit the amount of meta boxes to just links, pages and cats for first time users. * * @since 3.0.0 **/function wp_initial_nav_menu_meta_boxes() {	global $wp_meta_boxes;	if ( get_user_option( 'metaboxhidden_nav-menus' ) !== false || ! is_array($wp_meta_boxes) )		return;	$initial_meta_boxes = array( 'nav-menu-theme-locations', 'add-custom-links', 'add-page', 'add-category' );	$hidden_meta_boxes = array();	foreach ( array_keys($wp_meta_boxes['nav-menus']) as $context ) {		foreach ( array_keys($wp_meta_boxes['nav-menus'][$context]) as $priority ) {			foreach ( $wp_meta_boxes['nav-menus'][$context][$priority] as $box ) {				if ( in_array( $box['id'], $initial_meta_boxes ) ) {					unset( $box['id'] );				} else {					$hidden_meta_boxes[] = $box['id'];				}			}		}	}	$user = wp_get_current_user();	update_user_option( $user->ID, 'metaboxhidden_nav-menus', $hidden_meta_boxes, true );}/** * Creates metaboxes for any post type menu item. * * @since 3.0.0 */function wp_nav_menu_post_type_meta_boxes() {	$post_types = get_post_types( array( 'show_in_nav_menus' => true ), 'object' );	if ( ! $post_types )		return;	foreach ( $post_types as $post_type ) {		$post_type = apply_filters( 'nav_menu_meta_box_object', $post_type );		if ( $post_type ) {			$id = $post_type->name;			add_meta_box( "add-{$id}", $post_type->labels->name, 'wp_nav_menu_item_post_type_meta_box', 'nav-menus', 'side', 'default', $post_type );		}	}}/** * Creates metaboxes for any taxonomy menu item. * * @since 3.0.0 */function wp_nav_menu_taxonomy_meta_boxes() {	$taxonomies = get_taxonomies( array( 'show_in_nav_menus' => true ), 'object' );	if ( !$taxonomies )		return;	foreach ( $taxonomies as $tax ) {		$tax = apply_filters( 'nav_menu_meta_box_object', $tax );		if ( $tax ) {			$id = $tax->name;			add_meta_box( "add-{$id}", $tax->labels->name, 'wp_nav_menu_item_taxonomy_meta_box', 'nav-menus', 'side', 'default', $tax );		}	}}/** * Displays a metabox for the nav menu theme locations. * * @since 3.0.0 */function wp_nav_menu_locations_meta_box() {	global $nav_menu_selected_id;	if ( ! current_theme_supports( 'menus' ) ) {		// We must only support widgets. Leave a message and bail.		echo '<p class="howto">' . __('The current theme does not natively support menus, but you can use the &#8220;Custom Menu&#8221; widget to add any menus you create here to the theme&#8217;s sidebar.') . '</p>';		return;	}	$locations = get_registered_nav_menus();	$menus = wp_get_nav_menus();	$menu_locations = get_nav_menu_locations();	$num_locations = count( array_keys($locations) );	echo '<p class="howto">' . sprintf( _n('Your theme supports %s menu. Select which menu you would like to use.', 'Your theme supports %s menus. Select which menu appears in each location.', $num_locations ), number_format_i18n($num_locations) ) . '</p>';	foreach ( $locations as $location => $description ) {		?>		<p>			<label class="howto" for="locations-<?php echo $location; ?>">				<span><?php echo $description; ?></span>				<select name="menu-locations[<?php echo $location; ?>]" id="locations-<?php echo $location; ?>">					<option value="0"></option>					<?php foreach ( $menus as $menu ) : ?>					<option<?php selected( isset( $menu_locations[ $location ] ) && $menu_locations[ $location ] == $menu->term_id ); ?>						value="<?php echo $menu->term_id; ?>"><?php						$truncated_name = wp_html_excerpt( $menu->name, 40 );						echo $truncated_name == $menu->name ? $menu->name : trim( $truncated_name ) . '&hellip;';					?></option>					<?php endforeach; ?>				</select>			</label>		</p>	<?php	}	?>	<p class="button-controls">		<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-primary" name="nav-menu-locations" value="<?php esc_attr_e( 'Save' ); ?>" />	</p>	<?php}/** * Displays a metabox for the custom links menu item. * * @since 3.0.0 */function wp_nav_menu_item_link_meta_box() {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$_nav_menu_placeholder = 0 > $_nav_menu_placeholder ? $_nav_menu_placeholder - 1 : -1;	$current_tab = 'create';	if ( isset( $_REQUEST['customlink-tab'] ) && in_array( $_REQUEST['customlink-tab'], array('create', 'all') ) ) {		$current_tab = $_REQUEST['customlink-tab'];	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div class="customlinkdiv" id="customlinkdiv">			<input type="hidden" value="custom" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-type]" />			<p id="menu-item-url-wrap">				<label class="howto" for="custom-menu-item-url">					<span><?php _e('URL'); ?></span>					<input id="custom-menu-item-url" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-url]" type="text" class="code menu-item-textbox" value="http://" />				</label>			</p>			<p id="menu-item-name-wrap">				<label class="howto" for="custom-menu-item-name">					<span><?php _e('Label'); ?></span>					<input id="custom-menu-item-name" name="menu-item[<?php echo $_nav_menu_placeholder; ?>][menu-item-title]" type="text" class="regular-text menu-item-textbox input-with-default-title" title="<?php esc_attr_e('Menu Item'); ?>" />				</label>			</p>		<p class="button-controls">			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-custom-menu-item" id="submit-customlinkdiv" />			</span>		</p>	</div><!-- /.customlinkdiv -->	<?php}/** * Displays a metabox for a post type menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $post_type The post type object. */function wp_nav_menu_item_post_type_meta_box( $object, $post_type ) {	global $_nav_menu_placeholder, $nav_menu_selected_id;	$post_type_name = $post_type['args']->name;	// paginate browsing for large numbers of post objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$post_type_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'title',		'posts_per_page' => $per_page,		'post_type' => $post_type_name,		'suppress_filters' => true,		'update_post_term_cache' => false,		'update_post_meta_cache' => false	);	if ( isset( $post_type['args']->_default_query ) )		$args = array_merge($args, (array) $post_type['args']->_default_query );	// @todo transient caching of these results with proper invalidation on updating of a post of this type	$get_posts = new WP_Query;	$posts = $get_posts->query( $args );	if ( ! $get_posts->post_count ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$post_type_object = get_post_type_object($post_type_name);	$num_pages = $get_posts->max_num_pages;	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$post_type_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'post_type',				'item-object' => $post_type_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	if ( !$posts )		$error = '<li id="error">'. $post_type['args']->labels->not_found .'</li>';	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-recent';	if ( isset( $_REQUEST[$post_type_name . '-tab'] ) && in_array( $_REQUEST[$post_type_name . '-tab'], array('all', 'search') ) ) {		$current_tab = $_REQUEST[$post_type_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="posttype-<?php echo $post_type_name; ?>" class="posttypediv">		<ul id="posttype-<?php echo $post_type_name; ?>-tabs" class="posttype-tabs add-menu-item-tabs">			<li <?php echo ( 'most-recent' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'most-recent', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent"><?php _e('Most Recent'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#<?php echo $post_type_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($post_type_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-posttype-<?php echo $post_type_name; ?>-search"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-posttype-<?php echo $post_type_name; ?>-most-recent" class="tabs-panel <?php			echo ( 'most-recent' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $post_type_name; ?>checklist-most-recent" class="categorychecklist form-no-clear">				<?php				$recent_args = array_merge( $args, array( 'orderby' => 'post_date', 'order' => 'DESC', 'showposts' => 15 ) );				$most_recent = $get_posts->query( $recent_args );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $most_recent), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-posttype-<?php echo $post_type_name; ?>-search">			<?php			if ( isset( $_REQUEST['quick-search-posttype-' . $post_type_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-posttype-' . $post_type_name] );				$search_results = get_posts( array( 's' => $searched, 'post_type' => $post_type_name, 'fields' => 'all', 'order' => 'DESC', ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-posttype-<?php echo $post_type_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $post_type_name; ?>-search-checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<div id="<?php echo $post_type_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $post_type_name; ?>checklist" class="list:<?php echo $post_type_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				// if we're dealing with pages, let's put a checkbox for the front page at the top of the list				if ( 'page' == $post_type_name ) {					$front_page = 'page' == get_option('show_on_front') ? (int) get_option( 'page_on_front' ) : 0;					if ( ! empty( $front_page ) ) {						$front_page_obj = get_post( $front_page );						$front_page_obj->_add_to_top = true;						$front_page_obj->label = sprintf( _x('Home: %s', 'nav menu front page title'), $front_page_obj->post_title );						array_unshift( $posts, $front_page_obj );					} else {						$_nav_menu_placeholder = ( 0 > $_nav_menu_placeholder ) ? intval($_nav_menu_placeholder) - 1 : -1;						array_unshift( $posts, (object) array(							'_add_to_top' => true,							'ID' => 0,							'object_id' => $_nav_menu_placeholder,							'post_content' => '',							'post_excerpt' => '',							'post_title' => _x('Home', 'nav menu home label'),							'post_type' => 'nav_menu_item',							'type' => 'custom',							'url' => home_url('/'),						) );					}				}				$checkbox_items = walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $posts), 0, (object) $args );				if ( 'all' == $current_tab && ! empty( $_REQUEST['selectall'] ) ) {					$checkbox_items = preg_replace('/(type=(.)checkbox(\2))/', '$1 checked=$2checked$2', $checkbox_items);				}				echo $checkbox_items;				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$post_type_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#posttype-<?php echo $post_type_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-post-type-menu-item" id="submit-posttype-<?php echo $post_type_name; ?>" />			</span>		</p>	</div><!-- /.posttypediv -->	<?php}/** * Displays a metabox for a taxonomy menu item. * * @since 3.0.0 * * @param string $object Not used. * @param string $taxonomy The taxonomy object. */function wp_nav_menu_item_taxonomy_meta_box( $object, $taxonomy ) {	global $nav_menu_selected_id;	$taxonomy_name = $taxonomy['args']->name;	// paginate browsing for large numbers of objects	$per_page = 50;	$pagenum = isset( $_REQUEST[$taxonomy_name . '-tab'] ) && isset( $_REQUEST['paged'] ) ? absint( $_REQUEST['paged'] ) : 1;	$offset = 0 < $pagenum ? $per_page * ( $pagenum - 1 ) : 0;	$args = array(		'child_of' => 0,		'exclude' => '',		'hide_empty' => false,		'hierarchical' => 1,		'include' => '',		'include_last_update_time' => false,		'number' => $per_page,		'offset' => $offset,		'order' => 'ASC',		'orderby' => 'name',		'pad_counts' => false,	);	$terms = get_terms( $taxonomy_name, $args );	if ( ! $terms || is_wp_error($terms) ) {		echo '<p>' . __( 'No items.' ) . '</p>';		return;	}	$num_pages = ceil( wp_count_terms( $taxonomy_name , array_merge( $args, array('number' => '', 'offset' => '') ) ) / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg(			array(				$taxonomy_name . '-tab' => 'all',				'paged' => '%#%',				'item-type' => 'taxonomy',				'item-object' => $taxonomy_name,			)		),		'format' => '',		'prev_text' => __('&laquo;'),		'next_text' => __('&raquo;'),		'total' => $num_pages,		'current' => $pagenum	));	$walker = new Walker_Nav_Menu_Checklist;	$current_tab = 'most-used';	if ( isset( $_REQUEST[$taxonomy_name . '-tab'] ) && in_array( $_REQUEST[$taxonomy_name . '-tab'], array('all', 'most-used', 'search') ) ) {		$current_tab = $_REQUEST[$taxonomy_name . '-tab'];	}	if ( ! empty( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {		$current_tab = 'search';	}	$removed_args = array(		'action',		'customlink-tab',		'edit-menu-item',		'menu-item',		'page-tab',		'_wpnonce',	);	?>	<div id="taxonomy-<?php echo $taxonomy_name; ?>" class="taxonomydiv">		<ul id="taxonomy-<?php echo $taxonomy_name; ?>-tabs" class="taxonomy-tabs add-menu-item-tabs">			<li <?php echo ( 'most-used' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'most-used', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-pop"><?php _e('Most Used'); ?></a></li>			<li <?php echo ( 'all' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'all', remove_query_arg($removed_args))); ?>#tabs-panel-<?php echo $taxonomy_name; ?>-all"><?php _e('View All'); ?></a></li>			<li <?php echo ( 'search' == $current_tab ? ' class="tabs"' : '' ); ?>><a class="nav-tab-link" href="<?php if ( $nav_menu_selected_id ) echo esc_url(add_query_arg($taxonomy_name . '-tab', 'search', remove_query_arg($removed_args))); ?>#tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>"><?php _e('Search'); ?></a></li>		</ul>		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-pop" class="tabs-panel <?php			echo ( 'most-used' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<ul id="<?php echo $taxonomy_name; ?>checklist-pop" class="categorychecklist form-no-clear" >				<?php				$popular_terms = get_terms( $taxonomy_name, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $popular_terms), 0, (object) $args );				?>			</ul>		</div><!-- /.tabs-panel -->		<div id="tabs-panel-<?php echo $taxonomy_name; ?>-all" class="tabs-panel tabs-panel-view-all <?php			echo ( 'all' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>">			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>			<ul id="<?php echo $taxonomy_name; ?>checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $terms), 0, (object) $args );				?>			</ul>			<?php if ( ! empty( $page_links ) ) : ?>				<div class="add-menu-item-pagelinks">					<?php echo $page_links; ?>				</div>			<?php endif; ?>		</div><!-- /.tabs-panel -->		<div class="tabs-panel <?php			echo ( 'search' == $current_tab ? 'tabs-panel-active' : 'tabs-panel-inactive' );		?>" id="tabs-panel-search-taxonomy-<?php echo $taxonomy_name; ?>">			<?php			if ( isset( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] ) ) {				$searched = esc_attr( $_REQUEST['quick-search-taxonomy-' . $taxonomy_name] );				$search_results = get_terms( $taxonomy_name, array( 'name__like' => $searched, 'fields' => 'all', 'orderby' => 'count', 'order' => 'DESC', 'hierarchical' => false ) );			} else {				$searched = '';				$search_results = array();			}			?>			<p class="quick-search-wrap">				<input type="text" class="quick-search regular-text input-with-default-title" title="<?php esc_attr_e('Search'); ?>" value="<?php echo $searched; ?>" name="quick-search-taxonomy-<?php echo $taxonomy_name; ?>" />				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit" class="quick-search-submit button-secondary hide-if-js" value="<?php esc_attr_e('Search'); ?>" />			</p>			<ul id="<?php echo $taxonomy_name; ?>-search-checklist" class="list:<?php echo $taxonomy_name?> categorychecklist form-no-clear">			<?php if ( ! empty( $search_results ) && ! is_wp_error( $search_results ) ) : ?>				<?php				$args['walker'] = $walker;				echo walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $search_results), 0, (object) $args );				?>			<?php elseif ( is_wp_error( $search_results ) ) : ?>				<li><?php echo $search_results->get_error_message(); ?></li>			<?php elseif ( ! empty( $searched ) ) : ?>				<li><?php _e('No results found.'); ?></li>			<?php endif; ?>			</ul>		</div><!-- /.tabs-panel -->		<p class="button-controls">			<span class="list-controls">				<a href="<?php					echo esc_url(add_query_arg(						array(							$taxonomy_name . '-tab' => 'all',							'selectall' => 1,						),						remove_query_arg($removed_args)					));				?>#taxonomy-<?php echo $taxonomy_name; ?>" class="select-all"><?php _e('Select All'); ?></a>			</span>			<span class="add-to-menu">				<img class="waiting" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />				<input type="submit"<?php disabled( $nav_menu_selected_id, 0 ); ?> class="button-secondary submit-add-to-menu" value="<?php esc_attr_e('Add to Menu'); ?>" name="add-taxonomy-menu-item" id="submit-taxonomy-<?php echo $taxonomy_name; ?>" />			</span>		</p>	</div><!-- /.taxonomydiv -->	<?php}/** * Save posted nav menu item data. * * @since 3.0.0 * * @param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item. * @param array $menu_data The unsanitized posted menu item data. * @return array The database IDs of the items saved */function wp_save_nav_menu_items( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$items_saved = array();	if ( 0 == $menu_id || is_nav_menu( $menu_id ) ) {		// Loop through all the menu items' POST values		foreach( (array) $menu_data as $_possible_db_id => $_item_object_data ) {			if (				empty( $_item_object_data['menu-item-object-id'] ) && // checkbox is not checked				(					! isset( $_item_object_data['menu-item-type'] ) || // and item type either isn't set					in_array( $_item_object_data['menu-item-url'], array( 'http://', '' ) ) || // or URL is the default					! ( 'custom' == $_item_object_data['menu-item-type'] && ! isset( $_item_object_data['menu-item-db-id'] ) ) ||  // or it's not a custom menu item (but not the custom home page)					! empty( $_item_object_data['menu-item-db-id'] ) // or it *is* a custom menu item that already exists				)			) {				continue; // then this potential menu item is not getting added to this menu			}			// if this possible menu item doesn't actually have a menu database ID yet			if (				empty( $_item_object_data['menu-item-db-id'] ) ||				( 0 > $_possible_db_id ) ||				$_possible_db_id != $_item_object_data['menu-item-db-id']			) {				$_actual_db_id = 0;			} else {				$_actual_db_id = (int) $_item_object_data['menu-item-db-id'];			}			$args = array(				'menu-item-db-id' => ( isset( $_item_object_data['menu-item-db-id'] ) ? $_item_object_data['menu-item-db-id'] : '' ),				'menu-item-object-id' => ( isset( $_item_object_data['menu-item-object-id'] ) ? $_item_object_data['menu-item-object-id'] : '' ),				'menu-item-object' => ( isset( $_item_object_data['menu-item-object'] ) ? $_item_object_data['menu-item-object'] : '' ),				'menu-item-parent-id' => ( isset( $_item_object_data['menu-item-parent-id'] ) ? $_item_object_data['menu-item-parent-id'] : '' ),				'menu-item-position' => ( isset( $_item_object_data['menu-item-position'] ) ? $_item_object_data['menu-item-position'] : '' ),				'menu-item-type' => ( isset( $_item_object_data['menu-item-type'] ) ? $_item_object_data['menu-item-type'] : '' ),				'menu-item-title' => ( isset( $_item_object_data['menu-item-title'] ) ? $_item_object_data['menu-item-title'] : '' ),				'menu-item-url' => ( isset( $_item_object_data['menu-item-url'] ) ? $_item_object_data['menu-item-url'] : '' ),				'menu-item-description' => ( isset( $_item_object_data['menu-item-description'] ) ? $_item_object_data['menu-item-description'] : '' ),				'menu-item-attr-title' => ( isset( $_item_object_data['menu-item-attr-title'] ) ? $_item_object_data['menu-item-attr-title'] : '' ),				'menu-item-target' => ( isset( $_item_object_data['menu-item-target'] ) ? $_item_object_data['menu-item-target'] : '' ),				'menu-item-classes' => ( isset( $_item_object_data['menu-item-classes'] ) ? $_item_object_data['menu-item-classes'] : '' ),				'menu-item-xfn' => ( isset( $_item_object_data['menu-item-xfn'] ) ? $_item_object_data['menu-item-xfn'] : '' ),			);			$items_saved[] = wp_update_nav_menu_item( $menu_id, $_actual_db_id, $args );		}	}	return $items_saved;}/** * Adds custom arguments to some of the meta box object types. * * @since 3.0.0 * * @access private * * @param object $object The post type or taxonomy meta-object. * @return object The post type of taxonomy object. */function _wp_nav_menu_meta_box_object( $object = null ) {	if ( isset( $object->name ) ) {		if ( 'page' == $object->name ) {			$object->_default_query = array(				'orderby' => 'menu_order title',				'post_status' => 'publish',			);		// posts should show only published items		} elseif ( 'post' == $object->name ) {			$object->_default_query = array(				'post_status' => 'publish',			);		// cats should be in reverse chronological order		} elseif ( 'category' == $object->name ) {			$object->_default_query = array(				'orderby' => 'id',				'order' => 'DESC',			);		// custom post types should show only published items		} else {			$object->_default_query = array(				'post_status' => 'publish',			);		}	}	return $object;}/** * Returns the menu formatted to edit. * * @since 3.0.0 * * @param string $menu_id The ID of the menu to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_get_nav_menu_to_edit( $menu_id = 0 ) {	$menu = wp_get_nav_menu_object( $menu_id );	// If the menu exists, get its items.	if ( is_nav_menu( $menu ) ) {		$menu_items = wp_get_nav_menu_items( $menu->term_id, array('post_status' => 'any') );		$result = '<div id="menu-instructions" class="post-body-plain';		$result .= ( ! empty($menu_items) ) ? ' menu-instructions-inactive">' : '">';		$result .= '<p>' . __('Select menu items (pages, categories, links) from the boxes at left to begin building your custom menu.') . '</p>';		$result .= '</div>';		if( empty($menu_items) )			return $result . ' <ul class="menu" id="menu-to-edit"> </ul>';		$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $menu_id );		if ( class_exists( $walker_class_name ) )			$walker = new $walker_class_name;		else			return new WP_Error( 'menu_walker_not_exist', sprintf( __('The Walker class named <strong>%s</strong> does not exist.'), $walker_class_name ) );		$some_pending_menu_items = false;		foreach( (array) $menu_items as $menu_item ) {			if ( isset( $menu_item->post_status ) && 'draft' == $menu_item->post_status )				$some_pending_menu_items = true;		}		if ( $some_pending_menu_items )			$result .= '<div class="updated inline"><p>' . __('Click Save Menu to make pending menu items public.') . '</p></div>';		$result .= '<ul class="menu" id="menu-to-edit"> ';		$result .= walk_nav_menu_tree( array_map('wp_setup_nav_menu_item', $menu_items), 0, (object) array('walker' => $walker ) );		$result .= ' </ul> ';		return $result;	} elseif ( is_wp_error( $menu ) ) {		return $menu;	}}/** * Returns the columns for the nav menus page. * * @since 3.0.0 * * @param string $menu_item_id The ID of the menu item to format. * @return string|WP_Error $output The menu formatted to edit or error object on failure. */function wp_nav_menu_manage_columns() {	return array(		'_title' => __('Show advanced menu properties'),		'cb' => '<input type="checkbox" />',		'link-target' => __('Link Target'),		'css-classes' => __('CSS Classes'),		'xfn' => __('Link Relationship (XFN)'),		'description' => __('Description'),	);}/** * Deletes orphaned draft menu items * * @access private * @since 3.0.0 * */function _wp_delete_orphaned_draft_menu_items() {	global $wpdb;	$delete_timestamp = time() - (60*60*24*EMPTY_TRASH_DAYS);	// delete orphaned draft menu items	$menu_items_to_delete = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts AS p LEFT JOIN $wpdb->postmeta AS m ON p.ID = m.post_id WHERE post_type = 'nav_menu_item' AND post_status = 'draft' AND meta_key = '_menu_item_orphaned' AND meta_value < '%d'", $delete_timestamp ) );	foreach( (array) $menu_items_to_delete as $menu_item_id )		wp_delete_post( $menu_item_id, true );}add_action('admin_head-nav-menus.php', '_wp_delete_orphaned_draft_menu_items');?>
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
