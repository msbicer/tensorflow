<?php/** * PemFTP - A Ftp implementation in pure PHP * * @package PemFTP * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html *//** * Socket Based FTP implementation * * @package PemFTP * @subpackage Socket * @since 2.5 * * @version 1.0 * @copyright Alexey Dotsenko * @author Alexey Dotsenko * @link http://www.phpclasses.org/browse/package/1743.html Site * @license LGPL License http://www.opensource.org/licenses/lgpl-license.html */class ftp extends ftp_base {	function ftp($verb=FALSE, $le=FALSE) {		$this->__construct($verb, $le);	}	function __construct($verb=FALSE, $le=FALSE) {		parent::__construct(true, $verb, $le);	}// <!-- --------------------------------------------------------------------------------------- -->// <!--       Private functions                                                                 -->// <!-- --------------------------------------------------------------------------------------- -->	function _settimeout($sock) {		if(!@socket_set_option($sock, SOL_SOCKET, SO_RCVTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set receive timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		if(!@socket_set_option($sock, SOL_SOCKET , SO_SNDTIMEO, array("sec"=>$this->_timeout, "usec"=>0))) {			$this->PushError('_connect','socket set send timeout',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		return true;	}	function _connect($host, $port) {		$this->SendMSG("Creating socket");		if(!($sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {			$this->PushError('_connect','socket create failed',socket_strerror(socket_last_error($sock)));			return FALSE;		}		if(!$this->_settimeout($sock)) return FALSE;		$this->SendMSG("Connecting to \"".$host.":".$port."\"");		if (!($res = @socket_connect($sock, $host, $port))) {			$this->PushError('_connect','socket connect failed',socket_strerror(socket_last_error($sock)));			@socket_close($sock);			return FALSE;		}		$this->_connected=true;		return $sock;	}	function _readmsg($fnction="_readmsg"){		if(!$this->_connected) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		$result=true;		$this->_message="";		$this->_code=0;		$go=true;		do {			$tmp=@socket_read($this->_ftp_control_sock, 4096, PHP_BINARY_READ);			if($tmp===false) {				$go=$result=false;				$this->PushError($fnction,'Read failed', socket_strerror(socket_last_error($this->_ftp_control_sock)));			} else {				$this->_message.=$tmp;				$go = !preg_match("/^([0-9]{3})(-.+\\1)? [^".CRLF."]+".CRLF."$/Us", $this->_message, $regs);			}		} while($go);		if($this->LocalEcho) echo "GET < ".rtrim($this->_message, CRLF).CRLF;		$this->_code=(int)$regs[1];		return $result;	}	function _exec($cmd, $fnction="_exec") {		if(!$this->_ready) {			$this->PushError($fnction,'Connect first');			return FALSE;		}		if($this->LocalEcho) echo "PUT > ",$cmd,CRLF;		$status=@socket_write($this->_ftp_control_sock, $cmd.CRLF);		if($status===false) {			$this->PushError($fnction,'socket write failed', socket_strerror(socket_last_error($this->stream)));			return FALSE;		}		$this->_lastaction=time();		if(!$this->_readmsg($fnction)) return FALSE;		return TRUE;	}	function _data_prepare($mode=FTP_ASCII) {		if(!$this->_settype($mode)) return FALSE;		$this->SendMSG("Creating data socket");		$this->_ftp_data_sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);		if ($this->_ftp_data_sock < 0) {			$this->PushError('_data_prepare','socket create failed',socket_strerror(socket_last_error($this->_ftp_data_sock)));			return FALSE;		}		if(!$this->_settimeout($this->_ftp_data_sock)) {			$this->_data_close();			return FALSE;		}		if($this->_passive) {			if(!$this->_exec("PASV", "pasv")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}			$ip_port = explode(",", ereg_replace("^.+ \\(?([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+)\\)?.*".CRLF."$", "\\1", $this->_message));			$this->_datahost=$ip_port[0].".".$ip_port[1].".".$ip_port[2].".".$ip_port[3];            $this->_dataport=(((int)$ip_port[4])<<8) + ((int)$ip_port[5]);			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			if(!@socket_connect($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","socket_connect", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			else $this->_ftp_temp_sock=$this->_ftp_data_sock;		} else {			if(!@socket_getsockname($this->_ftp_control_sock, $addr, $port)) {				$this->PushError("_data_prepare","can't get control socket information", socket_strerror(socket_last_error($this->_ftp_control_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_bind($this->_ftp_data_sock,$addr)){				$this->PushError("_data_prepare","can't bind data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_listen($this->_ftp_data_sock)) {				$this->PushError("_data_prepare","can't listen data socket", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!@socket_getsockname($this->_ftp_data_sock, $this->_datahost, $this->_dataport)) {				$this->PushError("_data_prepare","can't get data socket information", socket_strerror(socket_last_error($this->_ftp_data_sock)));				$this->_data_close();				return FALSE;			}			if(!$this->_exec('PORT '.str_replace('.',',',$this->_datahost.'.'.($this->_dataport>>8).'.'.($this->_dataport&0x00FF)), "_port")) {				$this->_data_close();				return FALSE;			}			if(!$this->_checkCode()) {				$this->_data_close();				return FALSE;			}		}		return TRUE;	}	function _data_read($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_read","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}		}		while(($block=@socket_read($this->_ftp_temp_sock, $this->_ftp_buff_size, PHP_BINARY_READ))!==false) {			if($block==="") break;			if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_local], $block);			if(is_resource($fp)) $out+=fwrite($fp, $block, strlen($block));			else $out.=$block;		}		return $out;	}	function _data_write($mode=FTP_ASCII, $fp=NULL) {		$NewLine=$this->_eol_code[$this->OS_local];		if(is_resource($fp)) $out=0;		else $out="";		if(!$this->_passive) {			$this->SendMSG("Connecting to ".$this->_datahost.":".$this->_dataport);			$this->_ftp_temp_sock=socket_accept($this->_ftp_data_sock);			if($this->_ftp_temp_sock===FALSE) {				$this->PushError("_data_write","socket_accept", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return false;			}		}		if(is_resource($fp)) {			while(!feof($fp)) {				$block=fread($fp, $this->_ftp_buff_size);				if(!$this->_data_write_block($mode, $block)) return false;			}		} elseif(!$this->_data_write_block($mode, $fp)) return false;		return true;	}	function _data_write_block($mode, $block) {		if($mode!=FTP_BINARY) $block=preg_replace("/\r\n|\r|\n/", $this->_eol_code[$this->OS_remote], $block);		do {			if(($t=@socket_write($this->_ftp_temp_sock, $block))===FALSE) {				$this->PushError("_data_write","socket_write", socket_strerror(socket_last_error($this->_ftp_temp_sock)));				$this->_data_close();				return FALSE;			}			$block=substr($block, $t);		} while(!empty($block));		return true;	}	function _data_close() {		@socket_close($this->_ftp_temp_sock);		@socket_close($this->_ftp_data_sock);		$this->SendMSG("Disconnected data from remote host");		return TRUE;	}	function _quit() {		if($this->_connected) {			@socket_close($this->_ftp_control_sock);			$this->_connected=false;			$this->SendMSG("Socket closed");		}	}}?>
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php// Silence is golden.?>
<?php/** * Author Template functions for use in themes. * * These functions must be used within the WordPress Loop. * * @link http://codex.wordpress.org/Author_Templates * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current post. * * @since 1.5 * @uses $authordata The current author's DB object. * @uses apply_filters() Calls 'the_author' hook on the author display name. * * @param string $deprecated Deprecated. * @return string The author's display name. */function get_the_author($deprecated = '') {	global $authordata;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	return apply_filters('the_author', is_object($authordata) ? $authordata->display_name : null);}/** * Display the name of the author of the current post. * * The behavior of this function is based off of old functionality predating * get_the_author(). This function is not deprecated, but is designed to echo * the value from get_the_author() and as an result of any old theme that might * still use the old behavior will also pass the value from get_the_author(). * * The normal, expected behavior of this function is to echo the author and not * return it. However, backwards compatiability has to be maintained. * * @since 0.71 * @see get_the_author() * @link http://codex.wordpress.org/Template_Tags/the_author * * @param string $deprecated Deprecated. * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. * @return string The author's display name, from get_the_author(). */function the_author( $deprecated = '', $deprecated_echo = true ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '1.5', __('Use <code>get_the_author()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_the_author();	return get_the_author();}/** * Retrieve the author who last edited the current post. * * @since 2.8 * @uses $post The current post's DB object. * @uses get_post_meta() Retrieves the ID of the author who last edited the current post. * @uses get_userdata() Retrieves the author's DB object. * @uses apply_filters() Calls 'the_modified_author' hook on the author display name. * @return string The author's display name. */function get_the_modified_author() {	global $post;	if ( $last_id = get_post_meta($post->ID, '_edit_last', true) ) {		$last_user = get_userdata($last_id);		return apply_filters('the_modified_author', $last_user->display_name);	}}/** * Display the name of the author who last edited the current post. * * @since 2.8 * @see get_the_author() * @return string The author's display name, from get_the_modified_author(). */function the_modified_author() {	echo get_the_modified_author();}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @uses $authordata The current author's DB object (if $user_id not specified). * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @return string The author's field from the current author's DB object. */function get_the_author_meta($field = '', $user_id = false) {	if ( ! $user_id )		global $authordata;	else		$authordata = get_userdata( $user_id );	$field = strtolower($field);	$user_field = "user_$field";	if ( 'id' == $field )		$value = isset($authordata->ID) ? (int)$authordata->ID : 0;	elseif ( isset($authordata->$user_field) )		$value = $authordata->$user_field;	else		$value = isset($authordata->$field) ? $authordata->$field : '';	return apply_filters('get_the_author_' . $field, $value, $user_id);}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @echo string The author's field from the current author's DB object. */function the_author_meta($field = '', $user_id = false) {	echo apply_filters('the_author_' . $field, get_the_author_meta($field, $user_id), $user_id);}/** * Retrieve either author's link or author's name. * * If the author has a home page set, return an HTML link, otherwise just return the * author's name. * * @uses get_the_author_meta() * @uses get_the_author() */function get_the_author_link() {	if ( get_the_author_meta('url') ) {		return '<a href="' . get_the_author_meta('url') . '" title="' . esc_attr( sprintf(__("Visit %s&#8217;s website"), get_the_author()) ) . '" rel="external">' . get_the_author() . '</a>';	} else {		return get_the_author();	}}/** * Display either author's link or author's name. * * If the author has a home page set, echo an HTML link, otherwise just echo the * author's name. * * @link http://codex.wordpress.org/Template_Tags/the_author_link * @since 2.1 * @uses get_the_author_link() */function the_author_link() {	echo get_the_author_link();}/** * Retrieve the number of posts by the author of the current post. * * @since 1.5 * @uses $post The current post in the Loop's DB object. * @uses count_user_posts() * @return int The number of posts by the author. */function get_the_author_posts() {	global $post;	return count_user_posts($post->post_author);}/** * Display the number of posts by the author of the current post. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts * @since 0.71 * @uses get_the_author_posts() Echoes returned value from function. */function the_author_posts() {	echo get_the_author_posts();}/** * Display an HTML link to the author page of the author of the current post. * * Does just echo get_author_posts_url() function, like the others do. The * reason for this, is that another function is used to help in printing the * link to the author's posts. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts_link * @since 1.2.0 * @uses $authordata The current author's DB object. * @uses get_author_posts_url() * @uses get_the_author() * @param string $deprecated Deprecated. */function the_author_posts_link($deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	global $authordata;	$link = sprintf(		'<a href="%1$s" title="%2$s">%3$s</a>',		get_author_posts_url( $authordata->ID, $authordata->user_nicename ),		esc_attr( sprintf( __( 'Posts by %s' ), get_the_author() ) ),		get_the_author()	);	echo apply_filters( 'the_author_posts_link', $link );}/** * Retrieve the URL to the author page of the author of the current post. * * @since 2.1.0 * @uses $wp_rewrite WP_Rewrite * @return string The URL to the author's page. */function get_author_posts_url($author_id, $author_nicename = '') {	global $wp_rewrite;	$auth_ID = (int) $author_id;	$link = $wp_rewrite->get_author_permastruct();	if ( empty($link) ) {		$file = home_url() . '/';		$link = $file . '?author=' . $auth_ID;	} else {		if ( '' == $author_nicename ) {			$user = get_userdata($author_id);			if ( !empty($user->user_nicename) )				$author_nicename = $user->user_nicename;		}		$link = str_replace('%author%', $author_nicename, $link);		$link = home_url() . trailingslashit($link);	}	$link = apply_filters('author_link', $link, $author_id, $author_nicename);	return $link;}/** * List all the authors of the blog, with several options available. * * <ul> * <li>optioncount (boolean) (false): Show the count in parenthesis next to the * author's name.</li> * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is * installed bydefault.</li> * <li>show_fullname (boolean) (false): Show their full names.</li> * <li>hide_empty (boolean) (true): Don't show authors without any posts.</li> * <li>feed (string) (''): If isn't empty, show links to author's feeds.</li> * <li>feed_image (string) (''): If isn't empty, use this image to link to * feeds.</li> * <li>echo (boolean) (true): Set to false to return the output, instead of * echoing.</li> * <li>style (string) ('list'): Whether to display list of authors in list form * or as a string.</li> * <li>html (bool) (true): Whether to list the items in html for or plaintext. * </li> * </ul> * * @link http://codex.wordpress.org/Template_Tags/wp_list_authors * @since 1.2.0 * @param array $args The argument array. * @return null|string The output, if echo is set to false. */function wp_list_authors($args = '') {	global $wpdb;	$defaults = array(		'optioncount' => false, 'exclude_admin' => true,		'show_fullname' => false, 'hide_empty' => true,		'feed' => '', 'feed_image' => '', 'feed_type' => '', 'echo' => true,		'style' => 'list', 'html' => true	);	$r = wp_parse_args( $args, $defaults );	extract($r, EXTR_SKIP);	$return = '';	/** @todo Move select to get_authors(). */	$users = get_users_of_blog();	$author_ids = array();	foreach ( (array) $users as $user )		$author_ids[] = $user->user_id;	if ( count($author_ids) > 0  ) {		$author_ids = implode(',', $author_ids );		$authors = $wpdb->get_results( "SELECT ID, user_nicename from $wpdb->users WHERE ID IN($author_ids) " . ($exclude_admin ? "AND user_login <> 'admin' " : '') . "ORDER BY display_name" );	} else {		$authors = array();	}	$author_count = array();	foreach ( (array) $wpdb->get_results("SELECT DISTINCT post_author, COUNT(ID) AS count FROM $wpdb->posts WHERE post_type = 'post' AND " . get_private_posts_cap_sql( 'post' ) . " GROUP BY post_author") as $row )		$author_count[$row->post_author] = $row->count;	foreach ( (array) $authors as $author ) {		$link = '';		$author = get_userdata( $author->ID );		$posts = (isset($author_count[$author->ID])) ? $author_count[$author->ID] : 0;		$name = $author->display_name;		if ( $show_fullname && ($author->first_name != '' && $author->last_name != '') )			$name = "$author->first_name $author->last_name";		if( !$html ) {			if ( $posts == 0 ) {				if ( ! $hide_empty )					$return .= $name . ', ';			} else				$return .= $name . ', ';			// No need to go further to process HTML.			continue;		}		if ( !($posts == 0 && $hide_empty) && 'list' == $style )			$return .= '<li>';		if ( $posts == 0 ) {			if ( ! $hide_empty )				$link = $name;		} else {			$link = '<a href="' . get_author_posts_url($author->ID, $author->user_nicename) . '" title="' . esc_attr( sprintf(__("Posts by %s"), $author->display_name) ) . '">' . $name . '</a>';			if ( (! empty($feed_image)) || (! empty($feed)) ) {				$link .= ' ';				if (empty($feed_image))					$link .= '(';				$link .= '<a href="' . get_author_feed_link($author->ID) . '"';				if ( !empty($feed) ) {					$title = ' title="' . esc_attr($feed) . '"';					$alt = ' alt="' . esc_attr($feed) . '"';					$name = $feed;					$link .= $title;				}				$link .= '>';				if ( !empty($feed_image) )					$link .= "<img src=\"" . esc_url($feed_image) . "\" style=\"border: none;\"$alt$title" . ' />';				else					$link .= $name;				$link .= '</a>';				if ( empty($feed_image) )					$link .= ')';			}			if ( $optioncount )				$link .= ' ('. $posts . ')';		}		if ( $posts || ! $hide_empty )			$return .= $link . ( ( 'list' == $style ) ? '</li>' : ', ' );	}	$return = trim($return, ', ');	if ( ! $echo )		return $return;	echo $return;}?>
<?php/** * Includes all of the WordPress Administration API files. * * @package WordPress * @subpackage Administration *//** WordPress Bookmark Administration API */require_once(ABSPATH . 'wp-admin/includes/bookmark.php');/** WordPress Comment Administration API */require_once(ABSPATH . 'wp-admin/includes/comment.php');/** WordPress Administration File API */require_once(ABSPATH . 'wp-admin/includes/file.php');/** WordPress Image Administration API */require_once(ABSPATH . 'wp-admin/includes/image.php');/** WordPress Media Administration API */require_once(ABSPATH . 'wp-admin/includes/media.php');/** WordPress Import Administration API */require_once(ABSPATH . 'wp-admin/includes/import.php');/** WordPress Misc Administration API */require_once(ABSPATH . 'wp-admin/includes/misc.php');/** WordPress Plugin Administration API */require_once(ABSPATH . 'wp-admin/includes/plugin.php');/** WordPress Post Administration API */require_once(ABSPATH . 'wp-admin/includes/post.php');/** WordPress Taxonomy Administration API */require_once(ABSPATH . 'wp-admin/includes/taxonomy.php');/** WordPress Template Administration API */require_once(ABSPATH . 'wp-admin/includes/template.php');/** WordPress Theme Administration API */require_once(ABSPATH . 'wp-admin/includes/theme.php');/** WordPress User Administration API */require_once(ABSPATH . 'wp-admin/includes/user.php');/** WordPress Update Administration API */require_once(ABSPATH . 'wp-admin/includes/update.php');/** WordPress Registration API */require_once(ABSPATH . WPINC . '/registration.php');/** WordPress Deprecated Administration API */require_once(ABSPATH . 'wp-admin/includes/deprecated.php');/** WordPress Multi-Site support API */if ( is_multisite() ) {	require_once(ABSPATH . 'wp-admin/includes/ms.php');	require_once(ABSPATH . 'wp-admin/includes/ms-deprecated.php');}?>
<?php/** * WordPress Image Editor * * @package WordPress * @subpackage Administration */function wp_image_editor($post_id, $msg = false) {	$nonce = wp_create_nonce("image_editor-$post_id");	$meta = wp_get_attachment_metadata($post_id);	$thumb = image_get_intermediate_size($post_id, 'thumbnail');	$sub_sizes = isset($meta['sizes']) && is_array($meta['sizes']);	$note = '';	if ( is_array($meta) && isset($meta['width']) )		$big = max( $meta['width'], $meta['height'] );	else		die( __('Image data does not exist. Please re-upload the image.') );	$sizer = $big > 400 ? 400 / $big : 1;	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$can_restore = !empty($backup_sizes) && isset($backup_sizes['full-orig'])		&& $backup_sizes['full-orig']['file'] != basename($meta['file']);	if ( $msg ) {		if ( isset($msg->error) )			$note = "<div class='error'><p>$msg->error</p></div>";		elseif ( isset($msg->msg) )			$note = "<div class='updated'><p>$msg->msg</p></div>";	}	?>	<div class="imgedit-wrap">	<?php echo $note; ?>	<table id="imgedit-panel-<?php echo $post_id; ?>"><tbody>	<tr><td>	<div class="imgedit-menu">		<div onclick="imageEdit.crop(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-crop disabled" title="<?php esc_attr_e( 'Crop' ); ?>"></div><?php	// On some setups GD library does not provide imagerotate() - Ticket #11536	if ( function_exists('imagerotate') ) { ?>		<div class="imgedit-rleft"  onclick="imageEdit.rotate( 90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate counter-clockwise' ); ?>"></div>		<div class="imgedit-rright" onclick="imageEdit.rotate(-90, <?php echo "$post_id, '$nonce'"; ?>, this)" title="<?php esc_attr_e( 'Rotate clockwise' ); ?>"></div><?php } else {		$note_gdlib = esc_attr__('Image rotation is not supported by your web host (function imagerotate() is missing)');?>	    <div class="imgedit-rleft disabled"  title="<?php echo $note_gdlib; ?>"></div>	    <div class="imgedit-rright disabled" title="<?php echo $note_gdlib; ?>"></div><?php } ?>		<div onclick="imageEdit.flip(1, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-flipv" title="<?php esc_attr_e( 'Flip vertically' ); ?>"></div>		<div onclick="imageEdit.flip(2, <?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-fliph" title="<?php esc_attr_e( 'Flip horizontally' ); ?>"></div>		<div id="image-undo-<?php echo $post_id; ?>" onclick="imageEdit.undo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-undo disabled" title="<?php esc_attr_e( 'Undo' ); ?>"></div>		<div id="image-redo-<?php echo $post_id; ?>" onclick="imageEdit.redo(<?php echo "$post_id, '$nonce'"; ?>, this)" class="imgedit-redo disabled" title="<?php esc_attr_e( 'Redo' ); ?>"></div>		<br class="clear" />	</div>	<input type="hidden" id="imgedit-sizer-<?php echo $post_id; ?>" value="<?php echo $sizer; ?>" />	<input type="hidden" id="imgedit-minthumb-<?php echo $post_id; ?>" value="<?php echo ( get_option('thumbnail_size_w') . ':' . get_option('thumbnail_size_h') ); ?>" />	<input type="hidden" id="imgedit-history-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-undone-<?php echo $post_id; ?>" value="0" />	<input type="hidden" id="imgedit-selection-<?php echo $post_id; ?>" value="" />	<input type="hidden" id="imgedit-x-<?php echo $post_id; ?>" value="<?php echo $meta['width']; ?>" />	<input type="hidden" id="imgedit-y-<?php echo $post_id; ?>" value="<?php echo $meta['height']; ?>" />	<div id="imgedit-crop-<?php echo $post_id; ?>" class="imgedit-crop-wrap">	<img id="image-preview-<?php echo $post_id; ?>" onload="imageEdit.imgLoaded('<?php echo $post_id; ?>')" src="<?php echo admin_url('admin-ajax.php'); ?>?action=imgedit-preview&amp;_ajax_nonce=<?php echo $nonce; ?>&amp;postid=<?php echo $post_id; ?>&amp;rand=<?php echo rand(1, 99999); ?>" />	</div>	<div class="imgedit-submit">		<input type="button" onclick="imageEdit.close(<?php echo $post_id; ?>, 1)" class="button" value="<?php esc_attr_e( 'Cancel' ); ?>" />		<input type="button" onclick="imageEdit.save(<?php echo "$post_id, '$nonce'"; ?>)" disabled="disabled" class="button-primary imgedit-submit-btn" value="<?php esc_attr_e( 'Save' ); ?>" />	</div>	</td>	<td class="imgedit-settings">	<div class="imgedit-group">	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Scale Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('You can proportionally scale the original image. For best results the scaling should be done before performing any other operations on it like crop, rotate, etc. Note that if you make the image larger it may become fuzzy.'); ?></p>		<p><?php printf( __('Original dimensions %s'), $meta['width'] . '&times;' . $meta['height'] ); ?></p>		<div class="imgedit-submit">		<span class="nowrap"><input type="text" id="imgedit-scale-width-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 1)" style="width:4em;" value="<?php echo $meta['width']; ?>" />&times;<input type="text" id="imgedit-scale-height-<?php echo $post_id; ?>" onkeyup="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" onblur="imageEdit.scaleChanged(<?php echo $post_id; ?>, 0)" style="width:4em;" value="<?php echo $meta['height']; ?>" />		<span class="imgedit-scale-warn" id="imgedit-scale-warn-<?php echo $post_id; ?>">!</span></span>		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'scale')" class="button-primary" value="<?php esc_attr_e( 'Scale' ); ?>" />		</div>		</div>	</div><?php if ( $can_restore ) { ?>	<div class="imgedit-group-top">		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><strong><?php _e('Restore Original Image'); ?></strong></a>		<div class="imgedit-help">		<p><?php _e('Discard any changes and restore the original image.');		if ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE )			echo ' '.__('Previously edited copies of the image will not be deleted.');		?></p>		<div class="imgedit-submit">		<input type="button" onclick="imageEdit.action(<?php echo "$post_id, '$nonce'"; ?>, 'restore')" class="button-primary" value="<?php esc_attr_e( 'Restore image' ); ?>" <?php echo $can_restore; ?> />		</div>		</div>	</div><?php } ?>	</div>	<div class="imgedit-group">	<div class="imgedit-group-top">		<strong><?php _e('Image Crop'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<div class="imgedit-help">		<p><?php _e('The image can be cropped by clicking on it and dragging to select the desired part. While dragging the dimensions of the selection are displayed below.'); ?></p>		<strong><?php _e('Keyboard Shortcuts'); ?></strong>		<ul>		<li><?php _e('Arrow: move by 10px'); ?></li>		<li><?php _e('Shift + arrow: move by 1px'); ?></li>		<li><?php _e('Ctrl + arrow: resize by 10px'); ?></li>		<li><?php _e('Ctrl + Shift + arrow: resize by 1px'); ?></li>		<li><?php _e('Shift + drag: lock aspect ratio'); ?></li>		</ul>		<p><strong><?php _e('Crop Aspect Ratio'); ?></strong><br />		<?php _e('You can specify the crop selection aspect ratio then hold down the Shift key while dragging to lock it. The values can be 1:1 (square), 4:3, 16:9, etc. If there is a selection, specifying aspect ratio will set it immediately.'); ?></p>		<p><strong><?php _e('Crop Selection'); ?></strong><br />		<?php _e('Once started, the selection can be adjusted by entering new values (in pixels). Note that these values are scaled to approximately match the original image dimensions. The minimum selection size equals the thumbnail size as set in the Media settings.'); ?></p>		</div>	</div>	<p>		<?php _e('Aspect ratio:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-crop-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 0, this)" style="width:3em;" />		:		<input type="text" id="imgedit-crop-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setRatioSelection(<?php echo $post_id; ?>, 1, this)" style="width:3em;" />		</span>	</p>	<p id="imgedit-crop-sel-<?php echo $post_id; ?>">		<?php _e('Selection:'); ?>		<span  class="nowrap">		<input type="text" id="imgedit-sel-width-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		:		<input type="text" id="imgedit-sel-height-<?php echo $post_id; ?>" onkeyup="imageEdit.setNumSelection(<?php echo $post_id; ?>)" style="width:4em;" />		</span>	</p>	</div>	<?php if ( $thumb && $sub_sizes ) {		$thumb_img = wp_constrain_dimensions( $thumb['width'], $thumb['height'], 160, 120 );	?>	<div class="imgedit-group imgedit-applyto">	<div class="imgedit-group-top">		<strong><?php _e('Thumbnail Settings'); ?></strong>		<a class="imgedit-help-toggle" onclick="imageEdit.toggleHelp(this);return false;" href="#"><?php _e('(help)'); ?></a>		<p class="imgedit-help"><?php _e('The thumbnail image can be cropped differently. For example it can be square or contain only a portion of the original image to showcase it better. Here you can select whether to apply changes to all image sizes or make the thumbnail different.'); ?></p>	</div>	<p>		<img src="<?php echo $thumb['url']; ?>" width="<?php echo $thumb_img[0]; ?>" height="<?php echo $thumb_img[1]; ?>" class="imgedit-size-preview" alt="" /><br /><?php _e('Current thumbnail'); ?>	</p>	<p id="imgedit-save-target-<?php echo $post_id; ?>">		<strong><?php _e('Apply changes to:'); ?></strong><br />		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="all" checked="checked" />		<?php _e('All image sizes'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="thumbnail" />		<?php _e('Thumbnail'); ?></label>		<label class="imgedit-label">		<input type="radio" name="imgedit-target-<?php echo $post_id; ?>" value="nothumb" />		<?php _e('All sizes except thumbnail'); ?></label>	</p>	</div>	<?php } ?>	</td></tr>	</tbody></table>	<div class="imgedit-wait" id="imgedit-wait-<?php echo $post_id; ?>"></div>	<script type="text/javascript">imageEdit.init(<?php echo $post_id; ?>);</script>	<div class="hidden" id="imgedit-leaving-<?php echo $post_id; ?>"><?php _e("There are unsaved changes that will be lost.  'OK' to continue, 'Cancel' to return to the Image Editor."); ?></div>	</div><?php}function load_image_to_edit($post_id, $mime_type, $size = 'full') {	$filepath = get_attached_file($post_id);	if ( $filepath && file_exists($filepath) ) {		if ( 'full' != $size && ( $data = image_get_intermediate_size($post_id, $size) ) )			$filepath = path_join( dirname($filepath), $data['file'] );	} elseif ( WP_Http_Fopen::test() ) {		$filepath = wp_get_attachment_url($post_id);	}	$filepath = apply_filters('load_image_to_edit_path', $filepath, $post_id, $size);	if ( empty($filepath) )		return false;	switch ( $mime_type ) {		case 'image/jpeg':			$image = imagecreatefromjpeg($filepath);			break;		case 'image/png':			$image = imagecreatefrompng($filepath);			break;		case 'image/gif':			$image = imagecreatefromgif($filepath);			break;		default:			$image = false;			break;	}	if ( is_resource($image) ) {		$image = apply_filters('load_image_to_edit', $image, $post_id, $size);		if ( function_exists('imagealphablending') && function_exists('imagesavealpha') ) {			imagealphablending($image, false);			imagesavealpha($image, true);		}	}	return $image;}function wp_stream_image($image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	switch ( $mime_type ) {		case 'image/jpeg':			header('Content-Type: image/jpeg');			return imagejpeg($image, null, 90);		case 'image/png':			header('Content-Type: image/png');			return imagepng($image);		case 'image/gif':			header('Content-Type: image/gif');			return imagegif($image);		default:			return false;	}}function wp_save_image_file($filename, $image, $mime_type, $post_id) {	$image = apply_filters('image_save_pre', $image, $post_id);	$saved = apply_filters('wp_save_image_file', null, $filename, $image, $mime_type, $post_id);	if ( null !== $saved )		return $saved;	switch ( $mime_type ) {		case 'image/jpeg':			return imagejpeg( $image, $filename, apply_filters( 'jpeg_quality', 90, 'edit_image' ) );		case 'image/png':			return imagepng($image, $filename);		case 'image/gif':			return imagegif($image, $filename);		default:			return false;	}}function _image_get_preview_ratio($w, $h) {	$max = max($w, $h);	return $max > 400 ? (400 / $max) : 1;}function _rotate_image_resource($img, $angle) {	if ( function_exists('imagerotate') ) {		$rotated = imagerotate($img, $angle, 0);		if ( is_resource($rotated) ) {			imagedestroy($img);			$img = $rotated;		}	}	return $img;}function _flip_image_resource($img, $horz, $vert) {	$w = imagesx($img);	$h = imagesy($img);	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		$sx = $vert ? ($w - 1) : 0;		$sy = $horz ? ($h - 1) : 0;		$sw = $vert ? -$w : $w;		$sh = $horz ? -$h : $h;		if ( imagecopyresampled($dst, $img, 0, 0, $sx, $sy, $w, $h, $sw, $sh) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function _crop_image_resource($img, $x, $y, $w, $h) {	$dst = wp_imagecreatetruecolor($w, $h);	if ( is_resource($dst) ) {		if ( imagecopy($dst, $img, 0, 0, $x, $y, $w, $h) ) {			imagedestroy($img);			$img = $dst;		}	}	return $img;}function image_edit_apply_changes($img, $changes) {	if ( !is_array($changes) )		return $img;	// expand change operations	foreach ( $changes as $key => $obj ) {		if ( isset($obj->r) ) {			$obj->type = 'rotate';			$obj->angle = $obj->r;			unset($obj->r);		} elseif ( isset($obj->f) ) {			$obj->type = 'flip';			$obj->axis = $obj->f;			unset($obj->f);		} elseif ( isset($obj->c) ) {			$obj->type = 'crop';			$obj->sel = $obj->c;			unset($obj->c);		}		$changes[$key] = $obj;	}	// combine operations	if ( count($changes) > 1 ) {		$filtered = array($changes[0]);		for ( $i = 0, $j = 1; $j < count($changes); $j++ ) {			$combined = false;			if ( $filtered[$i]->type == $changes[$j]->type ) {				switch ( $filtered[$i]->type ) {					case 'rotate':						$filtered[$i]->angle += $changes[$j]->angle;						$combined = true;						break;					case 'flip':						$filtered[$i]->axis ^= $changes[$j]->axis;						$combined = true;						break;				}			}			if ( !$combined )				$filtered[++$i] = $changes[$j];		}		$changes = $filtered;		unset($filtered);	}	// image resource before applying the changes	$img = apply_filters('image_edit_before_change', $img, $changes);	foreach ( $changes as $operation ) {		switch ( $operation->type ) {			case 'rotate':				if ( $operation->angle != 0 )					$img = _rotate_image_resource($img, $operation->angle);				break;			case 'flip':				if ( $operation->axis != 0 )					$img = _flip_image_resource($img, ($operation->axis & 1) != 0, ($operation->axis & 2) != 0);				break;			case 'crop':				$sel = $operation->sel;				$scale = 1 / _image_get_preview_ratio( imagesx($img), imagesy($img) ); // discard preview scaling				$img = _crop_image_resource($img, $sel->x * $scale, $sel->y * $scale, $sel->w * $scale, $sel->h * $scale);				break;		}	}	return $img;}function stream_preview_image($post_id) {	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit( $post_id, $post->post_mime_type, array(400, 400) );	if ( !is_resource($img) )		return false;	$changes = !empty($_REQUEST['history']) ? json_decode( stripslashes($_REQUEST['history']) ) : null;	if ( $changes )		$img = image_edit_apply_changes($img, $changes);	// scale the image	$w = imagesx($img);	$h = imagesy($img);	$ratio = _image_get_preview_ratio($w, $h);	$w2 = $w * $ratio;	$h2 = $h * $ratio;	$preview = wp_imagecreatetruecolor($w2, $h2);	imagecopyresampled( $preview, $img, 0, 0, 0, 0, $w2, $h2, $w, $h );	wp_stream_image($preview, $post->post_mime_type, $post_id);	imagedestroy($preview);	imagedestroy($img);	return true;}function wp_restore_image($post_id) {	$meta = wp_get_attachment_metadata($post_id);	$file = get_attached_file($post_id);	$backup_sizes = get_post_meta( $post_id, '_wp_attachment_backup_sizes', true );	$restored = false;	$msg = '';	if ( !is_array($backup_sizes) ) {		$msg->error = __('Cannot load image metadata.');		return $msg;	}	$parts = pathinfo($file);	$suffix = time() . rand(100, 999);	$default_sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );	if ( isset($backup_sizes['full-orig']) && is_array($backup_sizes['full-orig']) ) {		$data = $backup_sizes['full-orig'];		if ( $parts['basename'] != $data['file'] ) {			if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {				// delete only if it's edited image				if ( preg_match('/-e[0-9]{13}\./', $parts['basename']) ) {					$delpath = apply_filters('wp_delete_file', $file);					@unlink($delpath);				}			} else {				$backup_sizes["full-$suffix"] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $parts['basename']);			}		}		$restored_file = path_join($parts['dirname'], $data['file']);		$restored = update_attached_file($post_id, $restored_file);		$meta['file'] = _wp_relative_upload_path( $restored_file );		$meta['width'] = $data['width'];		$meta['height'] = $data['height'];		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";	}	foreach ( $default_sizes as $default_size ) {		if ( isset($backup_sizes["$default_size-orig"]) ) {			$data = $backup_sizes["$default_size-orig"];			if ( isset($meta['sizes'][$default_size]) && $meta['sizes'][$default_size]['file'] != $data['file'] ) {				if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE ) {					// delete only if it's edited image					if ( preg_match('/-e[0-9]{13}-/', $meta['sizes'][$default_size]['file']) ) {						$delpath = apply_filters( 'wp_delete_file', path_join($parts['dirname'], $meta['sizes'][$default_size]['file']) );						@unlink($delpath);					}				} else {					$backup_sizes["$default_size-{$suffix}"] = $meta['sizes'][$default_size];				}			}			$meta['sizes'][$default_size] = $data;		} else {			unset($meta['sizes'][$default_size]);		}	}	if ( !wp_update_attachment_metadata($post_id, $meta) || !update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes) ) {		$msg->error = __('Cannot save image metadata.');		return $msg;	}	if ( !$restored )		$msg->error = __('Image metadata is inconsistent.');	else		$msg->msg = __('Image restored successfully.');	return $msg;}function wp_save_image($post_id) {	$return = '';	$success = $delete = $scaled = $nocrop = false;	$post = get_post($post_id);	@ini_set('memory_limit', '256M');	$img = load_image_to_edit($post_id, $post->post_mime_type);	if ( !is_resource($img) ) {		$return->error = esc_js( __('Unable to create new image.') );		return $return;	}	$fwidth = !empty($_REQUEST['fwidth']) ? intval($_REQUEST['fwidth']) : 0;	$fheight = !empty($_REQUEST['fheight']) ? intval($_REQUEST['fheight']) : 0;	$target = !empty($_REQUEST['target']) ? preg_replace('/[^a-z0-9_-]+/i', '', $_REQUEST['target']) : '';	$scale = !empty($_REQUEST['do']) && 'scale' == $_REQUEST['do'];	if ( $scale && $fwidth > 0 && $fheight > 0 ) {		$sX = imagesx($img);		$sY = imagesy($img);		// check if it has roughly the same w / h ratio		$diff = round($sX / $sY, 2) - round($fwidth / $fheight, 2);		if ( -0.1 < $diff && $diff < 0.1 ) {			// scale the full size image			$dst = wp_imagecreatetruecolor($fwidth, $fheight);			if ( imagecopyresampled( $dst, $img, 0, 0, 0, 0, $fwidth, $fheight, $sX, $sY ) ) {				imagedestroy($img);				$img = $dst;				$scaled = true;			}		}		if ( !$scaled ) {			$return->error = esc_js( __('Error while saving the scaled image. Please reload the page and try again.') );			return $return;		}	} elseif ( !empty($_REQUEST['history']) ) {		$changes = json_decode( stripslashes($_REQUEST['history']) );		if ( $changes )			$img = image_edit_apply_changes($img, $changes);	} else {		$return->error = esc_js( __('Nothing to save, the image has not changed.') );		return $return;	}	$meta = wp_get_attachment_metadata($post_id);	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	if ( !is_array($meta) ) {		$return->error = esc_js( __('Image data does not exist. Please re-upload the image.') );		return $return;	}	if ( !is_array($backup_sizes) )		$backup_sizes = array();	// generate new filename	$path = get_attached_file($post_id);	$path_parts = pathinfo52( $path );	$filename = $path_parts['filename'];	$suffix = time() . rand(100, 999);	if ( defined('IMAGE_EDIT_OVERWRITE') && IMAGE_EDIT_OVERWRITE &&		isset($backup_sizes['full-orig']) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] ) {		if ( 'thumbnail' == $target )			$new_path = "{$path_parts['dirname']}/{$filename}-temp.{$path_parts['extension']}";		else			$new_path = $path;	} else {		while( true ) {			$filename = preg_replace( '/-e([0-9]+)$/', '', $filename );			$filename .= "-e{$suffix}";			$new_filename = "{$filename}.{$path_parts['extension']}";			$new_path = "{$path_parts['dirname']}/$new_filename";			if ( file_exists($new_path) )				$suffix++;			else				break;		}	}	// save the full-size file, also needed to create sub-sizes	if ( !wp_save_image_file($new_path, $img, $post->post_mime_type, $post_id) ) {		$return->error = esc_js( __('Unable to save the image.') );		return $return;	}	if ( 'nothumb' == $target || 'all' == $target || 'full' == $target || $scaled ) {		$tag = false;		if ( isset($backup_sizes['full-orig']) ) {			if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes['full-orig']['file'] != $path_parts['basename'] )				$tag = "full-$suffix";		} else {			$tag = 'full-orig';		}		if ( $tag )			$backup_sizes[$tag] = array('width' => $meta['width'], 'height' => $meta['height'], 'file' => $path_parts['basename']);		$success = update_attached_file($post_id, $new_path);		$meta['file'] = _wp_relative_upload_path($new_path);		$meta['width'] = imagesx($img);		$meta['height'] = imagesy($img);		list ( $uwidth, $uheight ) = wp_constrain_dimensions($meta['width'], $meta['height'], 128, 96);		$meta['hwstring_small'] = "height='$uheight' width='$uwidth'";		if ( $success && ('nothumb' == $target || 'all' == $target) ) {			$sizes = apply_filters( 'intermediate_image_sizes', array('large', 'medium', 'thumbnail') );			if ( 'nothumb' == $target )				$sizes = array_diff( $sizes, array('thumbnail') );		}		$return->fw = $meta['width'];		$return->fh = $meta['height'];	} elseif ( 'thumbnail' == $target ) {		$sizes = array( 'thumbnail' );		$success = $delete = $nocrop = true;	}	if ( isset($sizes) ) {		foreach ( $sizes as $size ) {			$tag = false;			if ( isset($meta['sizes'][$size]) ) {				if ( isset($backup_sizes["$size-orig"]) ) {					if ( ( !defined('IMAGE_EDIT_OVERWRITE') || !IMAGE_EDIT_OVERWRITE ) && $backup_sizes["$size-orig"]['file'] != $meta['sizes'][$size]['file'] )						$tag = "$size-$suffix";				} else {					$tag = "$size-orig";				}				if ( $tag )					$backup_sizes[$tag] = $meta['sizes'][$size];			}			$crop = $nocrop ? false : get_option("{$size}_crop");			$resized = image_make_intermediate_size($new_path, get_option("{$size}_size_w"), get_option("{$size}_size_h"), $crop );			if ( $resized )				$meta['sizes'][$size] = $resized;			else				unset($meta['sizes'][$size]);		}	}	if ( $success ) {		wp_update_attachment_metadata($post_id, $meta);		update_post_meta( $post_id, '_wp_attachment_backup_sizes', $backup_sizes);		if ( $target == 'thumbnail' || $target == 'all' || $target == 'full' ) {			$file_url = wp_get_attachment_url($post_id);			if ( $thumb = $meta['sizes']['thumbnail'] )				$return->thumbnail = path_join( dirname($file_url), $thumb['file'] );			else				$return->thumbnail = "$file_url?w=128&h=128";		}	} else {		$delete = true;	}	if ( $delete ) {		$delpath = apply_filters('wp_delete_file', $new_path);		@unlink($delpath);	}	imagedestroy($img);	$return->msg = esc_js( __('Image saved') );	return $return;}
<?php/** * MagpieRSS: a simple RSS integration tool * * A compiled file for RSS syndication * * @author Kellan Elliott-McCrea <kellan@protest.net> * @version 0.51 * @license GPL * * @package External * @subpackage MagpieRSS *//** * Deprecated. Use SimplePie (class-simplepie.php) instead. */_deprecated_file( basename( __FILE__ ), '3.0', WPINC . '/class-simplepie.php' );/* * Hook to use another RSS object instead of MagpieRSS */do_action('load_feed_engine');/** RSS feed constant. */define('RSS', 'RSS');define('ATOM', 'Atom');define('MAGPIE_USER_AGENT', 'WordPress/' . $GLOBALS['wp_version']);class MagpieRSS {	var $parser;	var $current_item	= array();	// item currently being parsed	var $items			= array();	// collection of parsed items	var $channel		= array();	// hash of channel fields	var $textinput		= array();	var $image			= array();	var $feed_type;	var $feed_version;	// parser variables	var $stack				= array(); // parser stack	var $inchannel			= false;	var $initem 			= false;	var $incontent			= false; // if in Atom <content mode="xml"> field	var $intextinput		= false;	var $inimage 			= false;	var $current_field		= '';	var $current_namespace	= false;	//var $ERROR = "";	var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');	function MagpieRSS ($source) {		# if PHP xml isn't compiled in, die		#		if ( !function_exists('xml_parser_create') )			trigger_error( "Failed to load PHP's XML Extension. http://www.php.net/manual/en/ref.xml.php" );		$parser = @xml_parser_create();		if ( !is_resource($parser) )			trigger_error( "Failed to create an instance of PHP's XML parser. http://www.php.net/manual/en/ref.xml.php");		$this->parser = $parser;		# pass in parser, and a reference to this object		# set up handlers		#		xml_set_object( $this->parser, $this );		xml_set_element_handler($this->parser,				'feed_start_element', 'feed_end_element' );		xml_set_character_data_handler( $this->parser, 'feed_cdata' );		$status = xml_parse( $this->parser, $source );		if (! $status ) {			$errorcode = xml_get_error_code( $this->parser );			if ( $errorcode != XML_ERROR_NONE ) {				$xml_error = xml_error_string( $errorcode );				$error_line = xml_get_current_line_number($this->parser);				$error_col = xml_get_current_column_number($this->parser);				$errormsg = "$xml_error at line $error_line, column $error_col";				$this->error( $errormsg );			}		}		xml_parser_free( $this->parser );		$this->normalize();	}	function feed_start_element($p, $element, &$attrs) {		$el = $element = strtolower($element);		$attrs = array_change_key_case($attrs, CASE_LOWER);		// check for a namespace, and split if found		$ns	= false;		if ( strpos( $element, ':' ) ) {			list($ns, $el) = split( ':', $element, 2);		}		if ( $ns and $ns != 'rdf' ) {			$this->current_namespace = $ns;		}		# if feed type isn't set, then this is first element of feed		# identify feed from root element		#		if (!isset($this->feed_type) ) {			if ( $el == 'rdf' ) {				$this->feed_type = RSS;				$this->feed_version = '1.0';			}			elseif ( $el == 'rss' ) {				$this->feed_type = RSS;				$this->feed_version = $attrs['version'];			}			elseif ( $el == 'feed' ) {				$this->feed_type = ATOM;				$this->feed_version = $attrs['version'];				$this->inchannel = true;			}			return;		}		if ( $el == 'channel' )		{			$this->inchannel = true;		}		elseif ($el == 'item' or $el == 'entry' )		{			$this->initem = true;			if ( isset($attrs['rdf:about']) ) {				$this->current_item['about'] = $attrs['rdf:about'];			}		}		// if we're in the default namespace of an RSS feed,		//  record textinput or image fields		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'textinput' )		{			$this->intextinput = true;		}		elseif (			$this->feed_type == RSS and			$this->current_namespace == '' and			$el == 'image' )		{			$this->inimage = true;		}		# handle atom content constructs		elseif ( $this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			// avoid clashing w/ RSS mod_content			if ($el == 'content' ) {				$el = 'atom_content';			}			$this->incontent = $el;		}		// if inside an Atom content construct (e.g. content or summary) field treat tags as text		elseif ($this->feed_type == ATOM and $this->incontent )		{			// if tags are inlined, then flatten			$attrs_str = join(' ',					array_map(array('MagpieRSS', 'map_attrs'),					array_keys($attrs),					array_values($attrs) ) );			$this->append_content( "<$element $attrs_str>"  );			array_unshift( $this->stack, $el );		}		// Atom support many links per containging element.		// Magpie treats link elements of type rel='alternate'		// as being equivalent to RSS's simple link element.		//		elseif ($this->feed_type == ATOM and $el == 'link' )		{			if ( isset($attrs['rel']) and $attrs['rel'] == 'alternate' )			{				$link_el = 'link';			}			else {				$link_el = 'link_' . $attrs['rel'];			}			$this->append($link_el, $attrs['href']);		}		// set stack[0] to current element		else {			array_unshift($this->stack, $el);		}	}	function feed_cdata ($p, $text) {		if ($this->feed_type == ATOM and $this->incontent)		{			$this->append_content( $text );		}		else {			$current_el = join('_', array_reverse($this->stack));			$this->append($current_el, $text);		}	}	function feed_end_element ($p, $el) {		$el = strtolower($el);		if ( $el == 'item' or $el == 'entry' )		{			$this->items[] = $this->current_item;			$this->current_item = array();			$this->initem = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'textinput' )		{			$this->intextinput = false;		}		elseif ($this->feed_type == RSS and $this->current_namespace == '' and $el == 'image' )		{			$this->inimage = false;		}		elseif ($this->feed_type == ATOM and in_array($el, $this->_CONTENT_CONSTRUCTS) )		{			$this->incontent = false;		}		elseif ($el == 'channel' or $el == 'feed' )		{			$this->inchannel = false;		}		elseif ($this->feed_type == ATOM and $this->incontent  ) {			// balance tags properly			// note:  i don't think this is actually neccessary			if ( $this->stack[0] == $el )			{				$this->append_content("</$el>");			}			else {				$this->append_content("<$el />");			}			array_shift( $this->stack );		}		else {			array_shift( $this->stack );		}		$this->current_namespace = false;	}	function concat (&$str1, $str2="") {		if (!isset($str1) ) {			$str1="";		}		$str1 .= $str2;	}	function append_content($text) {		if ( $this->initem ) {			$this->concat( $this->current_item[ $this->incontent ], $text );		}		elseif ( $this->inchannel ) {			$this->concat( $this->channel[ $this->incontent ], $text );		}	}	// smart append - field and namespace aware	function append($el, $text) {		if (!$el) {			return;		}		if ( $this->current_namespace )		{			if ( $this->initem ) {				$this->concat(					$this->current_item[ $this->current_namespace ][ $el ], $text);			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $this->current_namespace][ $el ], $text );			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $this->current_namespace][ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $this->current_namespace ][ $el ], $text );			}		}		else {			if ( $this->initem ) {				$this->concat(					$this->current_item[ $el ], $text);			}			elseif ($this->intextinput) {				$this->concat(					$this->textinput[ $el ], $text );			}			elseif ($this->inimage) {				$this->concat(					$this->image[ $el ], $text );			}			elseif ($this->inchannel) {				$this->concat(					$this->channel[ $el ], $text );			}		}	}	function normalize () {		// if atom populate rss fields		if ( $this->is_atom() ) {			$this->channel['descripton'] = $this->channel['tagline'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['summary']) )					$item['description'] = $item['summary'];				if ( isset($item['atom_content']))					$item['content']['encoded'] = $item['atom_content'];				$this->items[$i] = $item;			}		}		elseif ( $this->is_rss() ) {			$this->channel['tagline'] = $this->channel['description'];			for ( $i = 0; $i < count($this->items); $i++) {				$item = $this->items[$i];				if ( isset($item['description']))					$item['summary'] = $item['description'];				if ( isset($item['content']['encoded'] ) )					$item['atom_content'] = $item['content']['encoded'];				$this->items[$i] = $item;			}		}	}	function is_rss () {		if ( $this->feed_type == RSS ) {			return $this->feed_version;		}		else {			return false;		}	}	function is_atom() {		if ( $this->feed_type == ATOM ) {			return $this->feed_version;		}		else {			return false;		}	}	function map_attrs($k, $v) {		return "$k=\"$v\"";	}	function error( $errormsg, $lvl = E_USER_WARNING ) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		} else {			error_log( $errormsg, 0);		}	}}if ( !function_exists('fetch_rss') ) :/** * Build Magpie object based on RSS from URL. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve feed * @return bool|MagpieRSS false on failure or MagpieRSS object on success. */function fetch_rss ($url) {	// initialize constants	init();	if ( !isset($url) ) {		// error("fetch_rss called without a url");		return false;	}	// if cache is disabled	if ( !MAGPIE_CACHE_ON ) {		// fetch file, and parse it		$resp = _fetch_remote_file( $url );		if ( is_success( $resp->status ) ) {			return _response_to_rss( $resp );		}		else {			// error("Failed to fetch $url and cache is off");			return false;		}	}	// else cache is ON	else {		// Flow		// 1. check cache		// 2. if there is a hit, make sure its fresh		// 3. if cached obj fails freshness check, fetch remote		// 4. if remote fails, return stale object, or error		$cache = new RSSCache( MAGPIE_CACHE_DIR, MAGPIE_CACHE_AGE );		if (MAGPIE_DEBUG and $cache->ERROR) {			debug($cache->ERROR, E_USER_WARNING);		}		$cache_status 	 = 0;		// response of check_cache		$request_headers = array(); // HTTP headers to send with fetch		$rss 			 = 0;		// parsed RSS object		$errormsg		 = 0;		// errors, if any		if (!$cache->ERROR) {			// return cache HIT, MISS, or STALE			$cache_status = $cache->check_cache( $url );		}		// if object cached, and cache is fresh, return cached obj		if ( $cache_status == 'HIT' ) {			$rss = $cache->get( $url );			if ( isset($rss) and $rss ) {				$rss->from_cache = 1;				if ( MAGPIE_DEBUG > 1) {				debug("MagpieRSS: Cache HIT", E_USER_NOTICE);			}				return $rss;			}		}		// else attempt a conditional get		// set up headers		if ( $cache_status == 'STALE' ) {			$rss = $cache->get( $url );			if ( isset($rss->etag) and $rss->last_modified ) {				$request_headers['If-None-Match'] = $rss->etag;				$request_headers['If-Last-Modified'] = $rss->last_modified;			}		}		$resp = _fetch_remote_file( $url, $request_headers );		if (isset($resp) and $resp) {			if ($resp->status == '304' ) {				// we have the most current copy				if ( MAGPIE_DEBUG > 1) {					debug("Got 304 for $url");				}				// reset cache on 304 (at minutillo insistent prodding)				$cache->set($url, $rss);				return $rss;			}			elseif ( is_success( $resp->status ) ) {				$rss = _response_to_rss( $resp );				if ( $rss ) {					if (MAGPIE_DEBUG > 1) {						debug("Fetch successful");					}					// add object to cache					$cache->set( $url, $rss );					return $rss;				}			}			else {				$errormsg = "Failed to fetch $url. ";				if ( $resp->error ) {					# compensate for Snoopy's annoying habbit to tacking					# on '\n'					$http_error = substr($resp->error, 0, -2);					$errormsg .= "(HTTP Error: $http_error)";				}				else {					$errormsg .=  "(HTTP Response: " . $resp->response_code .')';				}			}		}		else {			$errormsg = "Unable to retrieve RSS file for unknown reasons.";		}		// else fetch failed		// attempt to return cached object		if ($rss) {			if ( MAGPIE_DEBUG ) {				debug("Returning STALE object for $url");			}			return $rss;		}		// else we totally failed		// error( $errormsg );		return false;	} // end if ( !MAGPIE_CACHE_ON ) {} // end fetch_rss()endif;/** * Retrieve URL headers and content using WP HTTP Request API. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL to retrieve * @param array $headers Optional. Headers to send to the URL. * @return Snoopy style response */function _fetch_remote_file($url, $headers = "" ) {	$resp = wp_remote_request($url, array('headers' => $headers, 'timeout' => MAGPIE_FETCH_TIME_OUT));	if ( is_wp_error($resp) ) {		$error = array_shift($resp->errors);		$resp = new stdClass;		$resp->status = 500;		$resp->response_code = 500;		$resp->error = $error[0] . "\n"; //\n = Snoopy compatibility		return $resp;	}	// Snoopy returns headers unprocessed.	// Also note, WP_HTTP lowercases all keys, Snoopy did not.	$return_headers = array();	foreach ( $resp['headers'] as $key => $value ) {		if ( !is_array($value) ) {			$return_headers[] = "$key: $value";		} else {			foreach ( $value as $v )				$return_headers[] = "$key: $v";		}	}	$response = new stdClass;	$response->status = $resp['response']['code'];	$response->response_code = $resp['response']['code'];	$response->headers = $return_headers;	$response->results = $resp['body'];	return $response;}/** * Retrieve * * @since unknown * @package External * @subpackage MagpieRSS * * @param unknown_type $resp * @return unknown */function _response_to_rss ($resp) {	$rss = new MagpieRSS( $resp->results );	// if RSS parsed successfully	if ( $rss && (!isset($rss->ERROR) || !$rss->ERROR) ) {		// find Etag, and Last-Modified		foreach( (array) $resp->headers as $h) {			// 2003-03-02 - Nicola Asuni (www.tecnick.com) - fixed bug "Undefined offset: 1"			if (strpos($h, ": ")) {				list($field, $val) = explode(": ", $h, 2);			}			else {				$field = $h;				$val = "";			}			if ( $field == 'etag' ) {				$rss->etag = $val;			}			if ( $field == 'last-modified' ) {				$rss->last_modified = $val;			}		}		return $rss;	} // else construct error message	else {		$errormsg = "Failed to parse RSS file.";		if ($rss) {			$errormsg .= " (" . $rss->ERROR . ")";		}		// error($errormsg);		return false;	} // end if ($rss and !$rss->error)}/** * Set up constants with default values, unless user overrides. * * @since unknown * @package External * @subpackage MagpieRSS */function init () {	if ( defined('MAGPIE_INITALIZED') ) {		return;	}	else {		define('MAGPIE_INITALIZED', 1);	}	if ( !defined('MAGPIE_CACHE_ON') ) {		define('MAGPIE_CACHE_ON', 1);	}	if ( !defined('MAGPIE_CACHE_DIR') ) {		define('MAGPIE_CACHE_DIR', './cache');	}	if ( !defined('MAGPIE_CACHE_AGE') ) {		define('MAGPIE_CACHE_AGE', 60*60); // one hour	}	if ( !defined('MAGPIE_CACHE_FRESH_ONLY') ) {		define('MAGPIE_CACHE_FRESH_ONLY', 0);	}		if ( !defined('MAGPIE_DEBUG') ) {		define('MAGPIE_DEBUG', 0);	}	if ( !defined('MAGPIE_USER_AGENT') ) {		$ua = 'WordPress/' . $GLOBALS['wp_version'];		if ( MAGPIE_CACHE_ON ) {			$ua = $ua . ')';		}		else {			$ua = $ua . '; No cache)';		}		define('MAGPIE_USER_AGENT', $ua);	}	if ( !defined('MAGPIE_FETCH_TIME_OUT') ) {		define('MAGPIE_FETCH_TIME_OUT', 2);	// 2 second timeout	}	// use gzip encoding to fetch rss files if supported?	if ( !defined('MAGPIE_USE_GZIP') ) {		define('MAGPIE_USE_GZIP', true);	}}function is_info ($sc) {	return $sc >= 100 && $sc < 200;}function is_success ($sc) {	return $sc >= 200 && $sc < 300;}function is_redirect ($sc) {	return $sc >= 300 && $sc < 400;}function is_error ($sc) {	return $sc >= 400 && $sc < 600;}function is_client_error ($sc) {	return $sc >= 400 && $sc < 500;}function is_server_error ($sc) {	return $sc >= 500 && $sc < 600;}class RSSCache {	var $BASE_CACHE;	// where the cache files are stored	var $MAX_AGE	= 43200;  		// when are files stale, default twelve hours	var $ERROR 		= '';			// accumulate error messages	function RSSCache ($base='', $age='') {		$this->BASE_CACHE = WP_CONTENT_DIR . '/cache';		if ( $base ) {			$this->BASE_CACHE = $base;		}		if ( $age ) {			$this->MAX_AGE = $age;		}	}/*=======================================================================*\	Function:	set	Purpose:	add an item to the cache, keyed on url	Input:		url from wich the rss file was fetched	Output:		true on sucess\*=======================================================================*/	function set ($url, $rss) {		$cache_option = 'rss_' . $this->file_name( $url );		set_transient($cache_option, $rss, $this->MAX_AGE);		return $cache_option;	}/*=======================================================================*\	Function:	get	Purpose:	fetch an item from the cache	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function get ($url) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( ! $rss = get_transient( $cache_option ) ) {			$this->debug(				"Cache doesn't contain: $url (cache option: $cache_option)"			);			return 0;		}		return $rss;	}/*=======================================================================*\	Function:	check_cache	Purpose:	check a url for membership in the cache				and whether the object is older then MAX_AGE (ie. STALE)	Input:		url from wich the rss file was fetched	Output:		cached object on HIT, false on MISS\*=======================================================================*/	function check_cache ( $url ) {		$this->ERROR = "";		$cache_option = 'rss_' . $this->file_name( $url );		if ( get_transient($cache_option) ) {			// object exists and is current				return 'HIT';		} else {			// object does not exist			return 'MISS';		}	}/*=======================================================================*\	Function:	serialize\*=======================================================================*/	function serialize ( $rss ) {		return serialize( $rss );	}/*=======================================================================*\	Function:	unserialize\*=======================================================================*/	function unserialize ( $data ) {		return unserialize( $data );	}/*=======================================================================*\	Function:	file_name	Purpose:	map url to location in cache	Input:		url from wich the rss file was fetched	Output:		a file name\*=======================================================================*/	function file_name ($url) {		return md5( $url );	}/*=======================================================================*\	Function:	error	Purpose:	register error\*=======================================================================*/	function error ($errormsg, $lvl=E_USER_WARNING) {		// append PHP's error message if track_errors enabled		if ( isset($php_errormsg) ) {			$errormsg .= " ($php_errormsg)";		}		$this->ERROR = $errormsg;		if ( MAGPIE_DEBUG ) {			trigger_error( $errormsg, $lvl);		}		else {			error_log( $errormsg, 0);		}	}			function debug ($debugmsg, $lvl=E_USER_NOTICE) {		if ( MAGPIE_DEBUG ) {			$this->error("MagpieRSS [debug] $debugmsg", $lvl);		}	}}if ( !function_exists('parse_w3cdtf') ) :function parse_w3cdtf ( $date_str ) {	# regex to match wc3dtf	$pat = "/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/";	if ( preg_match( $pat, $date_str, $match ) ) {		list( $year, $month, $day, $hours, $minutes, $seconds) =			array( $match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);		# calc epoch for current date assuming GMT		$epoch = gmmktime( $hours, $minutes, $seconds, $month, $day, $year);		$offset = 0;		if ( $match[11] == 'Z' ) {			# zulu time, aka GMT		}		else {			list( $tz_mod, $tz_hour, $tz_min ) =				array( $match[8], $match[9], $match[10]);			# zero out the variables			if ( ! $tz_hour ) { $tz_hour = 0; }			if ( ! $tz_min ) { $tz_min = 0; }			$offset_secs = (($tz_hour*60)+$tz_min)*60;			# is timezone ahead of GMT?  then subtract offset			#			if ( $tz_mod == '+' ) {				$offset_secs = $offset_secs * -1;			}			$offset = $offset_secs;		}		$epoch = $epoch + $offset;		return $epoch;	}	else {		return -1;	}}endif;if ( !function_exists('wp_rss') ) :/** * Display all RSS items in a HTML ordered list. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. */function wp_rss( $url, $num_items = -1 ) {	if ( $rss = fetch_rss( $url ) ) {		echo '<ul>';		if ( $num_items !== -1 ) {			$rss->items = array_slice( $rss->items, 0, $num_items );		}		foreach ( (array) $rss->items as $item ) {			printf(				'<li><a href="%1$s" title="%2$s">%3$s</a></li>',				esc_url( $item['link'] ),				esc_attr( strip_tags( $item['description'] ) ),				htmlentities( $item['title'] )			);		}		echo '</ul>';	} else {		_e( 'An error has occurred, which probably means the feed is down. Try again later.' );	}}endif;if ( !function_exists('get_rss') ) :/** * Display RSS items in HTML list items. * * You have to specify which HTML list you want, either ordered or unordered * before using the function. You also have to specify how many items you wish * to display. You can't display all of them like you can with wp_rss() * function. * * @since unknown * @package External * @subpackage MagpieRSS * * @param string $url URL of feed to display. Will not auto sense feed URL. * @param int $num_items Optional. Number of items to display, default is all. * @return bool False on failure. */function get_rss ($url, $num_items = 5) { // Like get posts, but for RSS	$rss = fetch_rss($url);	if ( $rss ) {		$rss->items = array_slice($rss->items, 0, $num_items);		foreach ( (array) $rss->items as $item ) {			echo "<li>\n";			echo "<a href='$item[link]' title='$item[description]'>";			echo htmlentities($item['title']);			echo "</a><br />\n";			echo "</li>\n";		}	} else {		return false;	}}endif;?>
<?php/** * Comment Moderation Administration Panel. * * Redirects to edit-comments.php?comment_status=moderated. * * @package WordPress * @subpackage Administration */require_once('../wp-load.php');wp_redirect('edit-comments.php?comment_status=moderated');?>
<?php/** * These functions can be replaced via plugins. If plugins do not redefine these * functions, then these will be used instead. * * @package WordPress */if ( !function_exists('wp_set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * Some WordPress functionality is based on the current user and not based on * the signed in user. Therefore, it opens the ability to edit and perform * actions on users who aren't signed in. * * @since 2.0.3 * @global object $current_user The current user object which holds the user data. * @uses do_action() Calls 'set_current_user' hook after setting the current user. * * @param int $id User ID * @param string $name User's username * @return WP_User Current user User object */function wp_set_current_user($id, $name = '') {	global $current_user;	if ( isset($current_user) && ($id == $current_user->ID) )		return $current_user;	$current_user = new WP_User($id, $name);	setup_userdata($current_user->ID);	do_action('set_current_user');	return $current_user;}endif;if ( !function_exists('wp_get_current_user') ) :/** * Retrieve the current user object. * * @since 2.0.3 * * @return WP_User Current user WP_User object */function wp_get_current_user() {	global $current_user;	get_currentuserinfo();	return $current_user;}endif;if ( !function_exists('get_currentuserinfo') ) :/** * Populate global variables with information about the currently logged in user. * * Will set the current user, if the current user is not set. The current user * will be set to the logged in person. If no user is logged in, then it will * set the current user to 0, which is invalid and won't have any permissions. * * @since 0.71 * @uses $current_user Checks if the current user is set * @uses wp_validate_auth_cookie() Retrieves current logged in user. * * @return bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set */function get_currentuserinfo() {	global $current_user;	if ( defined('XMLRPC_REQUEST') && XMLRPC_REQUEST )		return false;	if ( ! empty($current_user) )		return;	if ( ! $user = wp_validate_auth_cookie() ) {		 if ( is_admin() || empty($_COOKIE[LOGGED_IN_COOKIE]) || !$user = wp_validate_auth_cookie($_COOKIE[LOGGED_IN_COOKIE], 'logged_in') ) {		 	wp_set_current_user(0);		 	return false;		 }	}	wp_set_current_user($user);}endif;if ( !function_exists('get_userdata') ) :/** * Retrieve user info by user ID. * * @since 0.71 * * @param int $user_id User ID * @return bool|object False on failure, User DB row object */function get_userdata( $user_id ) {	global $wpdb;	if ( ! is_numeric( $user_id ) )		return false;	$user_id = absint( $user_id );	if ( ! $user_id )		return false;	$user = wp_cache_get( $user_id, 'users' );	if ( $user )		return $user;	if ( ! $user = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d LIMIT 1", $user_id ) ) )		return false;	_fill_user( $user );	return $user;}endif;if ( !function_exists('cache_users') ) :/** * Retrieve info for user lists to prevent multiple queries by get_userdata() * * @since 3.0.0 * * @param array $users User ID numbers list */function cache_users( $users ) {	global $wpdb;	$clean = array();	foreach($users as $id) {		$id = (int) $id;		if (wp_cache_get($id, 'users')) {			// seems to be cached already		} else {			$clean[] = $id;		}	}	if ( 0 == count($clean) )		return;	$list = implode(',', $clean);	$results = $wpdb->get_results("SELECT * FROM $wpdb->users WHERE ID IN ($list)");	_fill_many_users($results);}endif;if ( !function_exists('get_user_by') ) :/** * Retrieve user info by a given field * * @since 2.8.0 * * @param string $field The field to retrieve the user with.  id | slug | email | login * @param int|string $value A value for $field.  A user ID, slug, email address, or login name. * @return bool|object False on failure, User DB row object */function get_user_by($field, $value) {	global $wpdb;	switch ($field) {		case 'id':			return get_userdata($value);			break;		case 'slug':			$user_id = wp_cache_get($value, 'userslugs');			$field = 'user_nicename';			break;		case 'email':			$user_id = wp_cache_get($value, 'useremail');			$field = 'user_email';			break;		case 'login':			$value = sanitize_user( $value );			$user_id = wp_cache_get($value, 'userlogins');			$field = 'user_login';			break;		default:			return false;	}	 if ( false !== $user_id )		return get_userdata($user_id);	if ( !$user = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->users WHERE $field = %s", $value) ) )		return false;	_fill_user($user);	return $user;}endif;if ( !function_exists('get_userdatabylogin') ) :/** * Retrieve user info by login name. * * @since 0.71 * * @param string $user_login User's username * @return bool|object False on failure, User DB row object */function get_userdatabylogin($user_login) {	return get_user_by('login', $user_login);}endif;if ( !function_exists('get_user_by_email') ) :/** * Retrieve user info by email. * * @since 2.5 * * @param string $email User's email address * @return bool|object False on failure, User DB row object */function get_user_by_email($email) {	return get_user_by('email', $email);}endif;if ( !function_exists( 'wp_mail' ) ) :/** * Send mail, similar to PHP's mail * * A true return value does not automatically mean that the user received the * email successfully. It just only means that the method used was able to * process the request without any errors. * * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from * creating a from address like 'Name <email@address.com>' when both are set. If * just 'wp_mail_from' is set, then just the email address will be used with no * name. * * The default content type is 'text/plain' which does not allow using HTML. * However, you can set the content type of the email by using the * 'wp_mail_content_type' filter. * * The default charset is based on the charset used on the blog. The charset can * be set using the 'wp_mail_charset' filter. * * @since 1.2.1 * @uses apply_filters() Calls 'wp_mail' hook on an array of all of the parameters. * @uses apply_filters() Calls 'wp_mail_from' hook to get the from email address. * @uses apply_filters() Calls 'wp_mail_from_name' hook to get the from address name. * @uses apply_filters() Calls 'wp_mail_content_type' hook to get the email content type. * @uses apply_filters() Calls 'wp_mail_charset' hook to get the email charset * @uses do_action_ref_array() Calls 'phpmailer_init' hook on the reference to *		phpmailer object. * @uses PHPMailer * @ * * @param string|array $to Array or comma-separated list of email addresses to send message. * @param string $subject Email subject * @param string $message Message contents * @param string|array $headers Optional. Additional headers. * @param string|array $attachments Optional. Files to attach. * @return bool Whether the email contents were sent successfully. */function wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {	// Compact the input, apply the filters, and extract them back out	extract( apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) ) );	if ( !is_array($attachments) )		$attachments = explode( "\n", str_replace( "\r\n", "\n", $attachments ) );	global $phpmailer;	// (Re)create it, if it's gone missing	if ( !is_object( $phpmailer ) || !is_a( $phpmailer, 'PHPMailer' ) ) {		require_once ABSPATH . WPINC . '/class-phpmailer.php';		require_once ABSPATH . WPINC . '/class-smtp.php';		$phpmailer = new PHPMailer();	}	// Headers	if ( empty( $headers ) ) {		$headers = array();	} else {		if ( !is_array( $headers ) ) {			// Explode the headers out, so this function can take both			// string headers and an array of headers.			$tempheaders = explode( "\n", str_replace( "\r\n", "\n", $headers ) );		} else {			$tempheaders = $headers;		}		$headers = array();		// If it's actually got contents		if ( !empty( $tempheaders ) ) {			// Iterate through the raw headers			foreach ( (array) $tempheaders as $header ) {				if ( strpos($header, ':') === false ) {					if ( false !== stripos( $header, 'boundary=' ) ) {						$parts = preg_split('/boundary=/i', trim( $header ) );						$boundary = trim( str_replace( array( "'", '"' ), '', $parts[1] ) );					}					continue;				}				// Explode them out				list( $name, $content ) = explode( ':', trim( $header ), 2 );				// Cleanup crew				$name    = trim( $name    );				$content = trim( $content );				switch ( strtolower( $name ) ) {					// Mainly for legacy -- process a From: header if it's there					case 'from':						if ( strpos($content, '<' ) !== false ) {							// So... making my life hard again?							$from_name = substr( $content, 0, strpos( $content, '<' ) - 1 );							$from_name = str_replace( '"', '', $from_name );							$from_name = trim( $from_name );							$from_email = substr( $content, strpos( $content, '<' ) + 1 );							$from_email = str_replace( '>', '', $from_email );							$from_email = trim( $from_email );						} else {							$from_email = trim( $content );						}						break;					case 'content-type':						if ( strpos( $content, ';' ) !== false ) {							list( $type, $charset ) = explode( ';', $content );							$content_type = trim( $type );							if ( false !== stripos( $charset, 'charset=' ) ) {								$charset = trim( str_replace( array( 'charset=', '"' ), '', $charset ) );							} elseif ( false !== stripos( $charset, 'boundary=' ) ) {								$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '"' ), '', $charset ) );								$charset = '';							}						} else {							$content_type = trim( $content );						}						break;					case 'cc':						$cc = array_merge( (array) $cc, explode( ',', $content ) );						break;					case 'bcc':						$bcc = array_merge( (array) $bcc, explode( ',', $content ) );						break;					default:						// Add it to our grand headers array						$headers[trim( $name )] = trim( $content );						break;				}			}		}	}	// Empty out the values that may be set	$phpmailer->ClearAddresses();	$phpmailer->ClearAllRecipients();	$phpmailer->ClearAttachments();	$phpmailer->ClearBCCs();	$phpmailer->ClearCCs();	$phpmailer->ClearCustomHeaders();	$phpmailer->ClearReplyTos();	// From email and name	// If we don't have a name from the input headers	if ( !isset( $from_name ) )		$from_name = 'WordPress';	/* If we don't have an email from the input headers default to wordpress@$sitename	 * Some hosts will block outgoing mail from this address if it doesn't exist but	 * there's no easy alternative. Defaulting to admin_email might appear to be another	 * option but some hosts may refuse to relay mail from an unknown domain. See	 * http://trac.wordpress.org/ticket/5007.	 */	if ( !isset( $from_email ) ) {		// Get the site domain and get rid of www.		$sitename = strtolower( $_SERVER['SERVER_NAME'] );		if ( substr( $sitename, 0, 4 ) == 'www.' ) {			$sitename = substr( $sitename, 4 );		}		$from_email = 'wordpress@' . $sitename;	}	// Plugin authors can override the potentially troublesome default	$phpmailer->From     = apply_filters( 'wp_mail_from'     , $from_email );	$phpmailer->FromName = apply_filters( 'wp_mail_from_name', $from_name  );	// Set destination addresses	if ( !is_array( $to ) )		$to = explode( ',', $to );	foreach ( (array) $to as $recipient ) {		$phpmailer->AddAddress( trim( $recipient ) );	}	// Set mail's subject and body	$phpmailer->Subject = $subject;	$phpmailer->Body    = $message;	// Add any CC and BCC recipients	if ( !empty( $cc ) ) {		foreach ( (array) $cc as $recipient ) {			$phpmailer->AddCc( trim($recipient) );		}	}	if ( !empty( $bcc ) ) {		foreach ( (array) $bcc as $recipient) {			$phpmailer->AddBcc( trim($recipient) );		}	}	// Set to use PHP's mail()	$phpmailer->IsMail();	// Set Content-Type and charset	// If we don't have a content-type from the input headers	if ( !isset( $content_type ) )		$content_type = 'text/plain';	$content_type = apply_filters( 'wp_mail_content_type', $content_type );	$phpmailer->ContentType = $content_type;	// Set whether it's plaintext, depending on $content_type	if ( 'text/html' == $content_type )		$phpmailer->IsHTML( true );	// If we don't have a charset from the input headers	if ( !isset( $charset ) )		$charset = get_bloginfo( 'charset' );	// Set the content-type and charset	$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );	// Set custom headers	if ( !empty( $headers ) ) {		foreach( (array) $headers as $name => $content ) {			$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );		}		if ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )			$phpmailer->AddCustomHeader( sprintf( "Content-Type: %s;\n\t boundary=\"%s\"", $content_type, $boundary ) );	}	if ( !empty( $attachments ) ) {		foreach ( $attachments as $attachment ) {			$phpmailer->AddAttachment($attachment);		}	}	do_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );	// Send!	$result = @$phpmailer->Send();	return $result;}endif;if ( !function_exists('wp_authenticate') ) :/** * Checks a user's login information and logs them in if it checks out. * * @since 2.5.0 * * @param string $username User's username * @param string $password User's password * @return WP_Error|WP_User WP_User object if login successful, otherwise WP_Error object. */function wp_authenticate($username, $password) {	$username = sanitize_user($username);	$password = trim($password);	$user = apply_filters('authenticate', null, $username, $password);	if ( $user == null ) {		// TODO what should the error message be? (Or would these even happen?)		// Only needed if all authentication handlers fail to return anything.		$user = new WP_Error('authentication_failed', __('<strong>ERROR</strong>: Invalid username or incorrect password.'));	}	$ignore_codes = array('empty_username', 'empty_password');	if (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {		do_action('wp_login_failed', $username);	}	return $user;}endif;if ( !function_exists('wp_logout') ) :/** * Log the current user out. * * @since 2.5.0 */function wp_logout() {	wp_clear_auth_cookie();	do_action('wp_logout');}endif;if ( !function_exists('wp_validate_auth_cookie') ) :/** * Validates authentication cookie. * * The checks include making sure that the authentication cookie is set and * pulling in the contents (if $cookie is not used). * * Makes sure the cookie is not expired. Verifies the hash in cookie is what is * should be and compares the two. * * @since 2.5 * * @param string $cookie Optional. If used, will validate contents instead of cookie's * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return bool|int False if invalid cookie, User ID if valid. */function wp_validate_auth_cookie($cookie = '', $scheme = '') {	if ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {		do_action('auth_cookie_malformed', $cookie, $scheme);		return false;	}	extract($cookie_elements, EXTR_OVERWRITE);	$expired = $expiration;	// Allow a grace period for POST and AJAX requests	if ( defined('DOING_AJAX') || 'POST' == $_SERVER['REQUEST_METHOD'] )		$expired += 3600;	// Quick check to see if an honest cookie has expired	if ( $expired < time() ) {		do_action('auth_cookie_expired', $cookie_elements);		return false;	}	$user = get_userdatabylogin($username);	if ( ! $user ) {		do_action('auth_cookie_bad_username', $cookie_elements);		return false;	}	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($username . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $username . '|' . $expiration, $key);	if ( $hmac != $hash ) {		do_action('auth_cookie_bad_hash', $cookie_elements);		return false;	}	if ( $expiration < time() ) // AJAX/POST grace period set above		$GLOBALS['login_grace_period'] = 1;	do_action('auth_cookie_valid', $cookie_elements, $user);	return $user->ID;}endif;if ( !function_exists('wp_generate_auth_cookie') ) :/** * Generate authentication cookie contents. * * @since 2.5 * @uses apply_filters() Calls 'auth_cookie' hook on $cookie contents, User ID *		and expiration of cookie. * * @param int $user_id User ID * @param int $expiration Cookie expiration in seconds * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return string Authentication cookie contents */function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth') {	$user = get_userdata($user_id);	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($user->user_login . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $user->user_login . '|' . $expiration, $key);	$cookie = $user->user_login . '|' . $expiration . '|' . $hash;	return apply_filters('auth_cookie', $cookie, $user_id, $expiration, $scheme);}endif;if ( !function_exists('wp_parse_auth_cookie') ) :/** * Parse a cookie into its components * * @since 2.7 * * @param string $cookie * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return array Authentication cookie components */function wp_parse_auth_cookie($cookie = '', $scheme = '') {	if ( empty($cookie) ) {		switch ($scheme){			case 'auth':				$cookie_name = AUTH_COOKIE;				break;			case 'secure_auth':				$cookie_name = SECURE_AUTH_COOKIE;				break;			case "logged_in":				$cookie_name = LOGGED_IN_COOKIE;				break;			default:				if ( is_ssl() ) {					$cookie_name = SECURE_AUTH_COOKIE;					$scheme = 'secure_auth';				} else {					$cookie_name = AUTH_COOKIE;					$scheme = 'auth';				}	    }		if ( empty($_COOKIE[$cookie_name]) )			return false;		$cookie = $_COOKIE[$cookie_name];	}	$cookie_elements = explode('|', $cookie);	if ( count($cookie_elements) != 3 )		return false;	list($username, $expiration, $hmac) = $cookie_elements;	return compact('username', 'expiration', 'hmac', 'scheme');}endif;if ( !function_exists('wp_set_auth_cookie') ) :/** * Sets the authentication cookies based User ID. * * The $remember parameter increases the time that the cookie will be kept. The * default the cookie is kept without remembering is two days. When $remember is * set, the cookies will be kept for 14 days or two weeks. * * @since 2.5 * * @param int $user_id User ID * @param bool $remember Whether to remember the user */function wp_set_auth_cookie($user_id, $remember = false, $secure = '') {	if ( $remember ) {		$expiration = $expire = time() + apply_filters('auth_cookie_expiration', 1209600, $user_id, $remember);	} else {		$expiration = time() + apply_filters('auth_cookie_expiration', 172800, $user_id, $remember);		$expire = 0;	}	if ( '' === $secure )		$secure = is_ssl();	if ( $secure ) {		$auth_cookie_name = SECURE_AUTH_COOKIE;		$scheme = 'secure_auth';	} else {		$auth_cookie_name = AUTH_COOKIE;		$scheme = 'auth';	}	$auth_cookie = wp_generate_auth_cookie($user_id, $expiration, $scheme);	$logged_in_cookie = wp_generate_auth_cookie($user_id, $expiration, 'logged_in');	do_action('set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme);	do_action('set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in');	// Set httponly if the php version is >= 5.2.0	if ( version_compare(phpversion(), '5.2.0', 'ge') ) {		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, false, true);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, false, true);	} else {		$cookie_domain = COOKIE_DOMAIN;		if ( !empty($cookie_domain) )			$cookie_domain .= '; HttpOnly';		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, $cookie_domain, $secure);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, $cookie_domain, $secure);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, $cookie_domain);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, $cookie_domain);	}}endif;if ( !function_exists('wp_clear_auth_cookie') ) :/** * Removes all of the cookies associated with authentication. * * @since 2.5 */function wp_clear_auth_cookie() {	do_action('clear_auth_cookie');	setcookie(AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Old cookies	setcookie(AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Even older cookies	setcookie(USER_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(USER_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);}endif;if ( !function_exists('is_user_logged_in') ) :/** * Checks if the current visitor is a logged in user. * * @since 2.0.0 * * @return bool True if user is logged in, false if not logged in. */function is_user_logged_in() {	$user = wp_get_current_user();	if ( $user->id == 0 )		return false;	return true;}endif;if ( !function_exists('auth_redirect') ) :/** * Checks if a user is logged in, if not it redirects them to the login page. * * @since 1.5 */function auth_redirect() {	// Checks if a user is logged in, if not redirects them to the login page	$secure = ( is_ssl() || force_ssl_admin() );	// If https is required and request is http, redirect	if ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {		if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {			wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));			exit();		} else {			wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);			exit();		}	}	if ( $user_id = wp_validate_auth_cookie( '', apply_filters( 'auth_redirect_scheme', '' ) ) ) {		do_action('auth_redirect', $user_id);		// If the user wants ssl but the session is not ssl, redirect.		if ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {			if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {				wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));				exit();			} else {				wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);				exit();			}		}		return;  // The cookie is good so we're done	}	// The cookie is no good so force login	nocache_headers();	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$redirect = ( strpos($_SERVER['REQUEST_URI'], '/options.php') && wp_get_referer() ) ? wp_get_referer() : $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];	$login_url = wp_login_url($redirect, true);	wp_redirect($login_url);	exit();}endif;if ( !function_exists('check_admin_referer') ) :/** * Makes sure that a user was referred from another admin page. * * To avoid security exploits. * * @since 1.2.0 * @uses do_action() Calls 'check_admin_referer' on $action. * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_admin_referer($action = -1, $query_arg = '_wpnonce') {	$adminurl = strtolower(admin_url());	$referer = strtolower(wp_get_referer());	$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;	if ( !$result && !(-1 == $action && strpos($referer, $adminurl) !== false) ) {		wp_nonce_ays($action);		die();	}	do_action('check_admin_referer', $action, $result);	return $result;}endif;if ( !function_exists('check_ajax_referer') ) :/** * Verifies the AJAX request to prevent processing requests external of the blog. * * @since 2.0.3 * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {	if ( $query_arg )		$nonce = $_REQUEST[$query_arg];	else		$nonce = isset($_REQUEST['_ajax_nonce']) ? $_REQUEST['_ajax_nonce'] : $_REQUEST['_wpnonce'];	$result = wp_verify_nonce( $nonce, $action );	if ( $die && false == $result )		die('-1');	do_action('check_ajax_referer', $action, $result);	return $result;}endif;if ( !function_exists('wp_redirect') ) :/** * Redirects to another page, with a workaround for the IIS Set-Cookie bug. * * @link http://support.microsoft.com/kb/q176113/ * @since 1.5.1 * @uses apply_filters() Calls 'wp_redirect' hook on $location and $status. * * @param string $location The path to redirect to * @param int $status Status code to use * @return bool False if $location is not set */function wp_redirect($location, $status = 302) {	global $is_IIS;	$location = apply_filters('wp_redirect', $location, $status);	$status = apply_filters('wp_redirect_status', $status, $location);	if ( !$location ) // allows the wp_redirect filter to cancel a redirect		return false;	$location = wp_sanitize_redirect($location);	if ( $is_IIS ) {		header("Refresh: 0;url=$location");	} else {		if ( php_sapi_name() != 'cgi-fcgi' )			status_header($status); // This causes problems on IIS and some FastCGI setups		header("Location: $location", true, $status);	}}endif;if ( !function_exists('wp_sanitize_redirect') ) :/** * Sanitizes a URL for use in a redirect. * * @since 2.3 * * @return string redirect-sanitized URL **/function wp_sanitize_redirect($location) {	$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!]|i', '', $location);	$location = wp_kses_no_null($location);	// remove %0d and %0a from location	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	return $location;}endif;if ( !function_exists('wp_safe_redirect') ) :/** * Performs a safe (local) redirect, using wp_redirect(). * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to wp-admin on the siteurl * instead. This prevents malicious redirects which redirect to another host, * but only used in a few places. * * @since 2.3 * @uses wp_validate_redirect() To validate the redirect is to an allowed host. * * @return void Does not return anything **/function wp_safe_redirect($location, $status = 302) {	// Need to look at the URL the way it will end up in wp_redirect()	$location = wp_sanitize_redirect($location);	$location = wp_validate_redirect($location, admin_url());	wp_redirect($location, $status);}endif;if ( !function_exists('wp_validate_redirect') ) :/** * Validates a URL for use in a redirect. * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to $default supplied * * @since 2.8.1 * @uses apply_filters() Calls 'allowed_redirect_hosts' on an array containing *		WordPress host string and $location host string. * * @param string $location The redirect to validate * @param string $default The value to return is $location is not allowed * @return string redirect-sanitized URL **/function wp_validate_redirect($location, $default = '') {	// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'	if ( substr($location, 0, 2) == '//' )		$location = 'http:' . $location;	// In php 5 parse_url may fail if the URL query part contains http://, bug #38143	$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;	$lp  = parse_url($test);	// Give up if malformed URL	if ( false === $lp )		return $default;	// Allow only http and https schemes. No data:, etc.	if ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )		return $default;	// Reject if scheme is set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.	if ( isset($lp['scheme'])  && !isset($lp['host']) )		return $default;	$wpp = parse_url(home_url());	$allowed_hosts = (array) apply_filters('allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '');	if ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )		$location = $default;	return $location;}endif;if ( ! function_exists('wp_notify_postauthor') ) :/** * Notify an author of a comment/trackback/pingback to one of their posts. * * @since 1.0.0 * * @param int $comment_id Comment ID * @param string $comment_type Optional. The comment type either 'comment' (default), 'trackback', or 'pingback' * @return bool False if user email does not exist. True on completion. */function wp_notify_postauthor($comment_id, $comment_type='') {	$comment = get_comment($comment_id);	$post    = get_post($comment->comment_post_ID);	$user    = get_userdata( $post->post_author );	if ( $comment->user_id == $post->post_author ) return false; // The author moderated a comment on his own post	if ('' == $user->user_email) return false; // If there's no email to send the comment to	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	if ( empty( $comment_type ) ) $comment_type = 'comment';	if ('comment' == $comment_type) {		$notify_message  = sprintf( __( 'New comment on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";		$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all comments on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Comment: "%2$s"'), $blogname, $post->post_title );	} elseif ('trackback' == $comment_type) {		$notify_message  = sprintf( __( 'New trackback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: website name, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all trackbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Trackback: "%2$s"'), $blogname, $post->post_title );	} elseif ('pingback' == $comment_type) {		$notify_message  = sprintf( __( 'New pingback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . sprintf('[...] %s [...]', $comment->comment_content ) . "\r\n\r\n";		$notify_message .= __('You can see all pingbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Pingback: "%2$s"'), $blogname, $post->post_title );	}	$notify_message .= get_permalink($comment->comment_post_ID) . "#comments\r\n\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$wp_email = 'wordpress@' . preg_replace('#^www\.#', '', strtolower($_SERVER['SERVER_NAME']));	if ( '' == $comment->comment_author ) {		$from = "From: \"$blogname\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: $comment->comment_author_email";	} else {		$from = "From: \"$comment->comment_author\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: \"$comment->comment_author_email\" <$comment->comment_author_email>";	}	$message_headers = "$from\n"		. "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	if ( isset($reply_to) )		$message_headers .= $reply_to . "\n";	$notify_message = apply_filters('comment_notification_text', $notify_message, $comment_id);	$subject = apply_filters('comment_notification_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_notification_headers', $message_headers, $comment_id);	@wp_mail($user->user_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_notify_moderator') ) :/** * Notifies the moderator of the blog about a new comment that is awaiting approval. * * @since 1.0 * @uses $wpdb * * @param int $comment_id Comment ID * @return bool Always returns true */function wp_notify_moderator($comment_id) {	global $wpdb;	if( get_option( "moderation_notify" ) == 0 )		return true;	$comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID=%d LIMIT 1", $comment_id));	$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID=%d LIMIT 1", $comment->comment_post_ID));	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	$comments_waiting = $wpdb->get_var("SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'");	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	switch ($comment->comment_type)	{		case 'trackback':			$notify_message  = sprintf( __('A new trackback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Trackback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		case 'pingback':			$notify_message  = sprintf( __('A new pingback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Pingback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		default: //Comments			$notify_message  = sprintf( __('A new comment on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";			$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;	}	$notify_message .= sprintf( __('Approve it: %s'),  admin_url("comment.php?action=approve&c=$comment_id") ) . "\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:', 		'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . "\r\n";	$notify_message .= admin_url("edit-comments.php?comment_status=moderated") . "\r\n";	$subject = sprintf( __('[%1$s] Please moderate: "%2$s"'), $blogname, $post->post_title );	$admin_email = get_option('admin_email');	$message_headers = '';	$notify_message = apply_filters('comment_moderation_text', $notify_message, $comment_id);	$subject = apply_filters('comment_moderation_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_moderation_headers', $message_headers);	@wp_mail($admin_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_password_change_notification') ) :/** * Notify the blog admin of a user changing password, normally via email. * * @since 2.7 * * @param object $user User Object */function wp_password_change_notification(&$user) {	// send a copy of password change notification to the admin	// but check to see if it's the admin whose password we're changing, and skip this	if ( $user->user_email != get_option('admin_email') ) {		$message = sprintf(__('Password Lost and Changed for user: %s'), $user->user_login) . "\r\n";		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);		wp_mail(get_option('admin_email'), sprintf(__('[%s] Password Lost/Changed'), $blogname), $message);	}}endif;if ( !function_exists('wp_new_user_notification') ) :/** * Notify the blog admin of a new user, normally via email. * * @since 2.0 * * @param int $user_id User ID * @param string $plaintext_pass Optional. The user's plaintext password */function wp_new_user_notification($user_id, $plaintext_pass = '') {	$user = new WP_User($user_id);	$user_login = stripslashes($user->user_login);	$user_email = stripslashes($user->user_email);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$message  = sprintf(__('New user registration on your site %s:'), $blogname) . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= sprintf(__('E-mail: %s'), $user_email) . "\r\n";	@wp_mail(get_option('admin_email'), sprintf(__('[%s] New User Registration'), $blogname), $message);	if ( empty($plaintext_pass) )		return;	$message  = sprintf(__('Username: %s'), $user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $plaintext_pass) . "\r\n";	$message .= wp_login_url() . "\r\n";	wp_mail($user_email, sprintf(__('[%s] Your username and password'), $blogname), $message);}endif;if ( !function_exists('wp_nonce_tick') ) :/** * Get the time-dependent variable for nonce creation. * * A nonce has a lifespan of two ticks. Nonces in their second tick may be * updated, e.g. by autosave. * * @since 2.5 * * @return int */function wp_nonce_tick() {	$nonce_life = apply_filters('nonce_life', 86400);	return ceil(time() / ( $nonce_life / 2 ));}endif;if ( !function_exists('wp_verify_nonce') ) :/** * Verify that correct nonce was used with time limit. * * The user is given an amount of time to use the token, so therefore, since the * UID and $action remain the same, the independent variable is the time. * * @since 2.0.3 * * @param string $nonce Nonce that was used in the form to verify * @param string|int $action Should give context to what is taking place and be the same when nonce was created. * @return bool Whether the nonce check passed or failed. */function wp_verify_nonce($nonce, $action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	// Nonce generated 0-12 hours ago	if ( substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 1;	// Nonce generated 12-24 hours ago	if ( substr(wp_hash(($i - 1) . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 2;	// Invalid nonce	return false;}endif;if ( !function_exists('wp_create_nonce') ) :/** * Creates a random, one time use token. * * @since 2.0.3 * * @param string|int $action Scalar value to add context to the nonce. * @return string The one use form token */function wp_create_nonce($action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	return substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10);}endif;if ( !function_exists('wp_salt') ) :/** * Get salt to add to hashes to help prevent attacks. * * The secret key is located in two places: the database in case the secret key * isn't defined in the second place, which is in the wp-config.php file. If you * are going to set the secret key, then you must do so in the wp-config.php * file. * * The secret key in the database is randomly generated and will be appended to * the secret key that is in wp-config.php file in some instances. It is * important to have the secret key defined or changed in wp-config.php. * * If you have installed WordPress 2.5 or later, then you will have the * SECRET_KEY defined in the wp-config.php already. You will want to change the * value in it because hackers will know what it is. If you have upgraded to * WordPress 2.5 or later version from a version before WordPress 2.5, then you * should add the constant to your wp-config.php file. * * Below is an example of how the SECRET_KEY constant is defined with a value. * You must not copy the below example and paste into your wp-config.php. If you * need an example, then you can have a * {@link https://api.wordpress.org/secret-key/1.1/ secret key created} for you. * * <code> * define('SECRET_KEY', 'mAry1HadA15|\/|b17w55w1t3asSn09w'); * </code> * * Salting passwords helps against tools which has stored hashed values of * common dictionary strings. The added values makes it harder to crack if given * salt string is not weak. * * @since 2.5 * @link https://api.wordpress.org/secret-key/1.1/ Create a Secret Key for wp-config.php * * @param string $scheme Authentication scheme * @return string Salt value */function wp_salt($scheme = 'auth') {	global $wp_default_secret_key;	$secret_key = '';	if ( defined('SECRET_KEY') && ('' != SECRET_KEY) && ( $wp_default_secret_key != SECRET_KEY) )		$secret_key = SECRET_KEY;	if ( 'auth' == $scheme ) {		if ( defined('AUTH_KEY') && ('' != AUTH_KEY) && ( $wp_default_secret_key != AUTH_KEY) )			$secret_key = AUTH_KEY;		if ( defined('AUTH_SALT') && ('' != AUTH_SALT) && ( $wp_default_secret_key != AUTH_SALT) ) {			$salt = AUTH_SALT;		} elseif ( defined('SECRET_SALT') && ('' != SECRET_SALT) && ( $wp_default_secret_key != SECRET_SALT) ) {			$salt = SECRET_SALT;		} else {			$salt = get_site_option('auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('auth_salt', $salt);			}		}	} elseif ( 'secure_auth' == $scheme ) {		if ( defined('SECURE_AUTH_KEY') && ('' != SECURE_AUTH_KEY) && ( $wp_default_secret_key != SECURE_AUTH_KEY) )			$secret_key = SECURE_AUTH_KEY;		if ( defined('SECURE_AUTH_SALT') && ('' != SECURE_AUTH_SALT) && ( $wp_default_secret_key != SECURE_AUTH_SALT) ) {			$salt = SECURE_AUTH_SALT;		} else {			$salt = get_site_option('secure_auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('secure_auth_salt', $salt);			}		}	} elseif ( 'logged_in' == $scheme ) {		if ( defined('LOGGED_IN_KEY') && ('' != LOGGED_IN_KEY) && ( $wp_default_secret_key != LOGGED_IN_KEY) )			$secret_key = LOGGED_IN_KEY;		if ( defined('LOGGED_IN_SALT') && ('' != LOGGED_IN_SALT) && ( $wp_default_secret_key != LOGGED_IN_SALT) ) {			$salt = LOGGED_IN_SALT;		} else {			$salt = get_site_option('logged_in_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('logged_in_salt', $salt);			}		}	} elseif ( 'nonce' == $scheme ) {		if ( defined('NONCE_KEY') && ('' != NONCE_KEY) && ( $wp_default_secret_key != NONCE_KEY) )			$secret_key = NONCE_KEY;		if ( defined('NONCE_SALT') && ('' != NONCE_SALT) && ( $wp_default_secret_key != NONCE_SALT) ) {			$salt = NONCE_SALT;		} else {			$salt = get_site_option('nonce_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('nonce_salt', $salt);			}		}	} else {		// ensure each auth scheme has its own unique salt		$salt = hash_hmac('md5', $scheme, $secret_key);	}	return apply_filters('salt', $secret_key . $salt, $scheme);}endif;if ( !function_exists('wp_hash') ) :/** * Get hash of given string. * * @since 2.0.3 * @uses wp_salt() Get WordPress salt * * @param string $data Plain text to hash * @return string Hash of $data */function wp_hash($data, $scheme = 'auth') {	$salt = wp_salt($scheme);	return hash_hmac('md5', $data, $salt);}endif;if ( !function_exists('wp_hash_password') ) :/** * Create a hash (encrypt) of a plain text password. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object * @uses PasswordHash::HashPassword * * @param string $password Plain text user password to hash * @return string The hash string of the password */function wp_hash_password($password) {	global $wp_hasher;	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	return $wp_hasher->HashPassword($password);}endif;if ( !function_exists('wp_check_password') ) :/** * Checks the plaintext password against the encrypted Password. * * Maintains compatibility between old version and the new cookie authentication * protocol using PHPass library. The $hash parameter is the encrypted password * and the function compares the plain text password when encypted similarly * against the already encrypted password to see if they match. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object used for checking the password *	against the $hash + $password * @uses PasswordHash::CheckPassword * * @param string $password Plaintext user's password * @param string $hash Hash of the user's password to check against. * @return bool False, if the $password does not match the hashed password */function wp_check_password($password, $hash, $user_id = '') {	global $wp_hasher;	// If the hash is still md5...	if ( strlen($hash) <= 32 ) {		$check = ( $hash == md5($password) );		if ( $check && $user_id ) {			// Rehash using new hash.			wp_set_password($password, $user_id);			$hash = wp_hash_password($password);		}		return apply_filters('check_password', $check, $password, $hash, $user_id);	}	// If the stored hash is longer than an MD5, presume the	// new style phpass portable hash.	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	$check = $wp_hasher->CheckPassword($password, $hash);	return apply_filters('check_password', $check, $password, $hash, $user_id);}endif;if ( !function_exists('wp_generate_password') ) :/** * Generates a random password drawn from the defined set of characters. * * @since 2.5 * * @param int $length The length of password to generate * @param bool $special_chars Whether to include standard special characters. Default true. * @param bool $extra_special_chars Whether to include other special characters. Used when *   generating secret keys and salts. Default false. * @return string The random password **/function wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';	if ( $special_chars )		$chars .= '!@#$%^&*()';	if ( $extra_special_chars )		$chars .= '-_ []{}<>~`+=,.;:/?|';	$password = '';	for ( $i = 0; $i < $length; $i++ ) {		$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);	}	// random_password filter was previously in random_password function which was deprecated	return apply_filters('random_password', $password);}endif;if ( !function_exists('wp_rand') ) : /** * Generates a random number * * @since 2.6.2 * * @param int $min Lower limit for the generated number (optional, default is 0) * @param int $max Upper limit for the generated number (optional, default is 4294967295) * @return int A random number between min and max */function wp_rand( $min = 0, $max = 0 ) {	global $rnd_value;	// Reset $rnd_value after 14 uses	// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value	if ( strlen($rnd_value) < 8 ) {		if ( defined( 'WP_SETUP_CONFIG' ) )			static $seed = '';		else			$seed = get_transient('random_seed');		$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );		$rnd_value .= sha1($rnd_value);		$rnd_value .= sha1($rnd_value . $seed);		$seed = md5($seed . $rnd_value);		if ( ! defined( 'WP_SETUP_CONFIG' ) )			set_transient('random_seed', $seed);	}	// Take the first 8 digits for our value	$value = substr($rnd_value, 0, 8);	// Strip the first eight, leaving the remainder for the next call to wp_rand().	$rnd_value = substr($rnd_value, 8);	$value = abs(hexdec($value));	// Reduce the value to be within the min - max range	// 4294967295 = 0xffffffff = max random number	if ( $max != 0 )		$value = $min + (($max - $min + 1) * ($value / (4294967295 + 1)));	return abs(intval($value));}endif;if ( !function_exists('wp_set_password') ) :/** * Updates the user's password with a new encrypted one. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @uses $wpdb WordPress database object for queries * @uses wp_hash_password() Used to encrypt the user's password before passing to the database * * @param string $password The plaintext new user password * @param int $user_id User ID */function wp_set_password( $password, $user_id ) {	global $wpdb;	$hash = wp_hash_password($password);	$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );	wp_cache_delete($user_id, 'users');}endif;if ( !function_exists( 'get_avatar' ) ) :/** * Retrieve the avatar for a user who provided a user ID or email address. * * @since 2.5 * @param int|string|object $id_or_email A user ID,  email address, or comment object * @param int $size Size of the avatar image * @param string $default URL to a default image to use if no avatar is available * @param string $alt Alternate text to use in image tag. Defaults to blank * @return string <img> tag for the user's avatar*/function get_avatar( $id_or_email, $size = '96', $default = '', $alt = false ) {	if ( ! get_option('show_avatars') )		return false;	if ( false === $alt)		$safe_alt = '';	else		$safe_alt = esc_attr( $alt );	if ( !is_numeric($size) )		$size = '96';	$email = '';	if ( is_numeric($id_or_email) ) {		$id = (int) $id_or_email;		$user = get_userdata($id);		if ( $user )			$email = $user->user_email;	} elseif ( is_object($id_or_email) ) {		// No avatar for pingbacks or trackbacks		$allowed_comment_types = apply_filters( 'get_avatar_comment_types', array( 'comment' ) );		if ( ! empty( $id_or_email->comment_type ) && ! in_array( $id_or_email->comment_type, (array) $allowed_comment_types ) )			return false;		if ( !empty($id_or_email->user_id) ) {			$id = (int) $id_or_email->user_id;			$user = get_userdata($id);			if ( $user)				$email = $user->user_email;		} elseif ( !empty($id_or_email->comment_author_email) ) {			$email = $id_or_email->comment_author_email;		}	} else {		$email = $id_or_email;	}	if ( empty($default) ) {		$avatar_default = get_option('avatar_default');		if ( empty($avatar_default) )			$default = 'mystery';		else			$default = $avatar_default;	}	if ( !empty($email) )		$email_hash = md5( strtolower( $email ) );	if ( is_ssl() ) {		$host = 'https://secure.gravatar.com';	} else {		if ( !empty($email) )			$host = sprintf( "http://%d.gravatar.com", ( hexdec( $email_hash{0} ) % 2 ) );		else			$host = 'http://0.gravatar.com';	}	if ( 'mystery' == $default )		$default = "$host/avatar/ad516503a11cd5ca435acc9bb6523536?s={$size}"; // ad516503a11cd5ca435acc9bb6523536 == md5('unknown@gravatar.com')	elseif ( 'blank' == $default )		$default = includes_url('images/blank.gif');	elseif ( !empty($email) && 'gravatar_default' == $default )		$default = '';	elseif ( 'gravatar_default' == $default )		$default = "$host/avatar/s={$size}";	elseif ( empty($email) )		$default = "$host/avatar/?d=$default&amp;s={$size}";	elseif ( strpos($default, 'http://') === 0 )		$default = add_query_arg( 's', $size, $default );	if ( !empty($email) ) {		$out = "$host/avatar/";		$out .= $email_hash;		$out .= '?s='.$size;		$out .= '&amp;d=' . urlencode( $default );		$rating = get_option('avatar_rating');		if ( !empty( $rating ) )			$out .= "&amp;r={$rating}";		$avatar = "<img alt='{$safe_alt}' src='{$out}' class='avatar avatar-{$size} photo' height='{$size}' width='{$size}' />";	} else {		$avatar = "<img alt='{$safe_alt}' src='{$default}' class='avatar avatar-{$size} photo avatar-default' height='{$size}' width='{$size}' />";	}	return apply_filters('get_avatar', $avatar, $id_or_email, $size, $default, $alt);}endif;if ( !function_exists( 'wp_text_diff' ) ) :/** * Displays a human readable HTML representation of the difference between two strings. * * The Diff is available for getting the changes between versions. The output is * HTML, so the primary use is for displaying the changes. If the two strings * are equivalent, then an empty string will be returned. * * The arguments supported and can be changed are listed below. * * 'title' : Default is an empty string. Titles the diff in a manner compatible *		with the output. * 'title_left' : Default is an empty string. Change the HTML to the left of the *		title. * 'title_right' : Default is an empty string. Change the HTML to the right of *		the title. * * @since 2.6 * @see wp_parse_args() Used to change defaults to user defined settings. * @uses Text_Diff * @uses WP_Text_Diff_Renderer_Table * * @param string $left_string "old" (left) version of string * @param string $right_string "new" (right) version of string * @param string|array $args Optional. Change 'title', 'title_left', and 'title_right' defaults. * @return string Empty string if strings are equivalent or HTML with differences. */function wp_text_diff( $left_string, $right_string, $args = null ) {	$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );	$args = wp_parse_args( $args, $defaults );	if ( !class_exists( 'WP_Text_Diff_Renderer_Table' ) )		require( ABSPATH . WPINC . '/wp-diff.php' );	$left_string  = normalize_whitespace($left_string);	$right_string = normalize_whitespace($right_string);	$left_lines  = split("\n", $left_string);	$right_lines = split("\n", $right_string);	$text_diff = new Text_Diff($left_lines, $right_lines);	$renderer  = new WP_Text_Diff_Renderer_Table();	$diff = $renderer->render($text_diff);	if ( !$diff )		return '';	$r  = "<table class='diff'>\n";	$r .= "<col class='ltype' /><col class='content' /><col class='ltype' /><col class='content' />";	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "<thead>";	if ( $args['title'] )		$r .= "<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\n";	if ( $args['title_left'] || $args['title_right'] ) {		$r .= "<tr class='diff-sub-title'>\n";		$r .= "\t<td></td><th>$args[title_left]</th>\n";		$r .= "\t<td></td><th>$args[title_right]</th>\n";		$r .= "</tr>\n";	}	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "</thead>\n";	$r .= "<tbody>\n$diff\n</tbody>\n";	$r .= "</table>";	return $r;}endif;
<?php/** * WordPress Category API * * @package WordPress *//** * Retrieves all category IDs. * * @since 2.0.0 * @link http://codex.wordpress.org/Function_Reference/get_all_category_ids * * @return object List of all of the category IDs. */function get_all_category_ids() {	if ( ! $cat_ids = wp_cache_get( 'all_category_ids', 'category' ) ) {		$cat_ids = get_terms( 'category', array('fields' => 'ids', 'get' => 'all') );		wp_cache_add( 'all_category_ids', $cat_ids, 'category' );	}	return $cat_ids;}/** * Retrieve list of category objects. * * If you change the type to 'link' in the arguments, then the link categories * will be returned instead. Also all categories will be updated to be backwards * compatible with pre-2.3 plugins and themes. * * @since 2.1.0 * @see get_terms() Type of arguments that can be changed. * @link http://codex.wordpress.org/Function_Reference/get_categories * * @param string|array $args Optional. Change the defaults retrieving categories. * @return array List of categories. */function &get_categories( $args = '' ) {	$defaults = array( 'taxonomy' => 'category' );	$args = wp_parse_args( $args, $defaults );	$taxonomy = apply_filters( 'get_categories_taxonomy', $args['taxonomy'], $args );	// Back compat	if ( isset($args['type']) && 'link' == $args['type'] ) {		_deprecated_argument( __FUNCTION__, '3.0', '' );		$taxonomy = $args['taxonomy'] = 'link_category';	}	$categories = (array) get_terms( $taxonomy, $args );	foreach ( array_keys( $categories ) as $k )		_make_cat_compat( $categories[$k] );	return $categories;}/** * Retrieves category data given a category ID or category object. * * If you pass the $category parameter an object, which is assumed to be the * category row object retrieved the database. It will cache the category data. * * If you pass $category an integer of the category ID, then that category will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * The category will converted to maintain backwards compatibility. * * @since 1.5.1 * @uses get_term() Used to get the category data from the taxonomy. * * @param int|object $category Category ID or Category row object * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return mixed Category data in type defined by $output parameter. */function &get_category( $category, $output = OBJECT, $filter = 'raw' ) {	$category = get_term( $category, 'category', $output, $filter );	if ( is_wp_error( $category ) )		return $category;	_make_cat_compat( $category );	return $category;}/** * Retrieve category based on URL containing the category slug. * * Breaks the $category_path parameter up to get the category slug. * * Tries to find the child path and will return it. If it doesn't find a * match, then it will return the first category matching slug, if $full_match, * is set to false. If it does not, then it will return null. * * It is also possible that it will return a WP_Error object on failure. Check * for it when using this function. * * @since 2.1.0 * * @param string $category_path URL containing category slugs. * @param bool $full_match Optional. Whether full path should be matched. * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @return null|object|array Null on failure. Type is based on $output value. */function get_category_by_path( $category_path, $full_match = true, $output = OBJECT ) {	$category_path = rawurlencode( urldecode( $category_path ) );	$category_path = str_replace( '%2F', '/', $category_path );	$category_path = str_replace( '%20', ' ', $category_path );	$category_paths = '/' . trim( $category_path, '/' );	$leaf_path  = sanitize_title( basename( $category_paths ) );	$category_paths = explode( '/', $category_paths );	$full_path = '';	foreach ( (array) $category_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title( $pathdir );	$categories = get_terms( 'category', array('get' => 'all', 'slug' => $leaf_path) );	if ( empty( $categories ) )		return null;	foreach ( $categories as $category ) {		$path = '/' . $leaf_path;		$curcategory = $category;		while ( ( $curcategory->parent != 0 ) && ( $curcategory->parent != $curcategory->term_id ) ) {			$curcategory = get_term( $curcategory->parent, 'category' );			if ( is_wp_error( $curcategory ) )				return $curcategory;			$path = '/' . $curcategory->slug . $path;		}		if ( $path == $full_path )			return get_category( $category->term_id, $output );	}	// If full matching is not required, return the first cat that matches the leaf.	if ( ! $full_match )		return get_category( $categories[0]->term_id, $output );	return null;}/** * Retrieve category object by category slug. * * @since 2.3.0 * * @param string $slug The category slug. * @return object Category data object */function get_category_by_slug( $slug  ) {	$category = get_term_by( 'slug', $slug, 'category' );	if ( $category )		_make_cat_compat( $category );	return $category;}/** * Retrieve the ID of a category from its name. * * @since 1.0.0 * * @param string $cat_name Optional. Default is 'General' and can be any category name. * @return int 0, if failure and ID of category on success. */function get_cat_ID( $cat_name='General' ) {	$cat = get_term_by( 'name', $cat_name, 'category' );	if ( $cat )		return $cat->term_id;	return 0;}/** * Retrieve the name of a category from its ID. * * @since 1.0.0 * * @param int $cat_id Category ID * @return string Category name, or an empty string if category doesn't exist. */function get_cat_name( $cat_id ) {	$cat_id = (int) $cat_id;	$category = &get_category( $cat_id );	if ( ! $category || is_wp_error( $category ) )		return '';	return $category->name;}/** * Check if a category is an ancestor of another category. * * You can use either an id or the category object for both parameters. If you * use an integer the category will be retrieved. * * @since 2.1.0 * * @param int|object $cat1 ID or object to check if this is the parent category. * @param int|object $cat2 The child category. * @return bool Whether $cat2 is child of $cat1 */function cat_is_ancestor_of( $cat1, $cat2 ) {	if ( ! isset($cat1->term_id) )		$cat1 = &get_category( $cat1 );	if ( ! isset($cat2->parent) )		$cat2 = &get_category( $cat2 );	if ( empty($cat1->term_id) || empty($cat2->parent) )		return false;	if ( $cat2->parent == $cat1->term_id )		return true;	return cat_is_ancestor_of( $cat1, get_category( $cat2->parent ) );}/** * Sanitizes category data based on context. * * @since 2.3.0 * @uses sanitize_term() See this function for what context are supported. * * @param object|array $category Category data * @param string $context Optional. Default is 'display'. * @return object|array Same type as $category with sanitized data for safe use. */function sanitize_category( $category, $context = 'display' ) {	return sanitize_term( $category, 'category', $context );}/** * Sanitizes data in single category key field. * * @since 2.3.0 * @uses sanitize_term_field() See function for more details. * * @param string $field Category key to sanitize * @param mixed $value Category value to sanitize * @param int $cat_id Category ID * @param string $context What filter to use, 'raw', 'display', etc. * @return mixed Same type as $value after $value has been sanitized. */function sanitize_category_field( $field, $value, $cat_id, $context ) {	return sanitize_term_field( $field, $value, $cat_id, 'category', $context );}/* Tags *//** * Retrieves all post tags. * * @since 2.3.0 * @see get_terms() For list of arguments to pass. * @uses apply_filters() Calls 'get_tags' hook on array of tags and with $args. * * @param string|array $args Tag arguments to use when retrieving tags. * @return array List of tags. */function &get_tags( $args = '' ) {	$tags = get_terms( 'post_tag', $args );	if ( empty( $tags ) ) {		$return = array();		return $return;	}	$tags = apply_filters( 'get_tags', $tags, $args );	return $tags;}/** * Retrieve post tag by tag ID or tag object. * * If you pass the $tag parameter an object, which is assumed to be the tag row * object retrieved the database. It will cache the tag data. * * If you pass $tag an integer of the tag ID, then that tag will * be retrieved from the database, if it isn't already cached, and pass it back. * * If you look at get_term(), then both types will be passed through several * filters and finally sanitized based on the $filter parameter value. * * @since 2.3.0 * * @param int|object $tag * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N * @param string $filter Optional. Default is raw or no WordPress defined filter will applied. * @return object|array Return type based on $output value. */function &get_tag( $tag, $output = OBJECT, $filter = 'raw' ) {	return get_term( $tag, 'post_tag', $output, $filter );}/* Cache *//** * Update the categories cache. * * This function does not appear to be used anymore or does not appear to be * needed. It might be a legacy function left over from when there was a need * for updating the category cache. * * @since 1.5.0 * * @return bool Always return True */function update_category_cache() {	return true;}/** * Remove the category cache data based on ID. * * @since 2.1.0 * @uses clean_term_cache() Clears the cache for the category based on ID * * @param int $id Category ID */function clean_category_cache( $id ) {	clean_term_cache( $id, 'category' );}/** * Update category structure to old pre 2.3 from new taxonomy structure. * * This function was added for the taxonomy support to update the new category * structure with the old category one. This will maintain compatibility with * plugins and themes which depend on the old key or property names. * * The parameter should only be passed a variable and not create the array or * object inline to the parameter. The reason for this is that parameter is * passed by reference and PHP will fail unless it has the variable. * * There is no return value, because everything is updated on the variable you * pass to it. This is one of the features with using pass by reference in PHP. * * @since 2.3.0 * @access private * * @param array|object $category Category Row object or array */function _make_cat_compat( &$category ) {	if ( is_object( $category ) ) {		$category->cat_ID = &$category->term_id;		$category->category_count = &$category->count;		$category->category_description = &$category->description;		$category->cat_name = &$category->name;		$category->category_nicename = &$category->slug;		$category->category_parent = &$category->parent;	} elseif ( is_array( $category ) && isset( $category['term_id'] ) ) {		$category['cat_ID'] = &$category['term_id'];		$category['category_count'] = &$category['count'];		$category['category_description'] = &$category['description'];		$category['cat_name'] = &$category['name'];		$category['category_nicename'] = &$category['slug'];		$category['category_parent'] = &$category['parent'];	}}?>
<?php/** * Base WordPress Filesystem. * * @package WordPress * @subpackage Filesystem *//** * Base WordPress Filesystem class for which Filesystem implementations extend * * @since 2.5 */class WP_Filesystem_Base {	/**	 * Whether to display debug data for the connection.	 *	 * @since 2.5	 * @access public	 * @var bool	 */	var $verbose = false;	/**	 * Cached list of local filepaths to maped remote filepaths.	 *	 * @since 2.7	 * @access private	 * @var array	 */	var $cache = array();	/**	 * The Access method of the current connection, Set automatically.	 *	 * @since 2.5	 * @access public	 * @var string	 */	var $method = '';	/**	 * Returns the path on the remote filesystem of ABSPATH	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function abspath() {		$folder = $this->find_folder(ABSPATH);		//Perhaps the FTP folder is rooted at the WordPress install, Check for wp-includes folder in root, Could have some false positives, but rare.		if ( ! $folder && $this->is_dir('/wp-includes') )			$folder = '/';		return $folder;	}	/**	 * Returns the path on the remote filesystem of WP_CONTENT_DIR	 *	 * @since 2.7	 * @access public	 * @return string The location of the remote path.	 */	function wp_content_dir() {		return $this->find_folder(WP_CONTENT_DIR);	}	/**	 * Returns the path on the remote filesystem of WP_PLUGIN_DIR	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_plugins_dir() {		return $this->find_folder(WP_PLUGIN_DIR);	}	/**	 * Returns the path on the remote filesystem of the Themes Directory	 *	 * @since 2.7	 * @access public	 *	 * @return string The location of the remote path.	 */	function wp_themes_dir() {		return $this->wp_content_dir() . '/themes';	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function find_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir() methods instead.	 *	 * @since 2.5	 * @deprecated 2.7	 * @access public	 *	 * @param string $base The folder to start searching from	 * @param bool $echo True to display debug information	 * @return string The location of the remote path.	 */	function get_base_dir($base = '.', $echo = false) {		_deprecated_function(__FUNCTION__, '2.7', 'WP_Filesystem::abspath() or WP_Filesystem::wp_*_dir()' );		$this->verbose = $echo;		return $this->abspath();	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Assumes that on Windows systems, Stripping off the Drive letter is OK	 * Sanitizes \\ to / in windows filepaths.	 *	 * @since 2.7	 * @access public	 *	 * @param string $folder the folder to locate	 * @return string The location of the remote path.	 */	function find_folder($folder) {		if ( strpos($this->method, 'ftp') !== false ) {			$constant_overrides = array( 'FTP_BASE' => ABSPATH, 'FTP_CONTENT_DIR' => WP_CONTENT_DIR, 'FTP_PLUGIN_DIR' => WP_PLUGIN_DIR );			foreach ( $constant_overrides as $constant => $dir )				if ( defined($constant) && $folder === $dir )					return trailingslashit(constant($constant));		} elseif ( 'direct' == $this->method ) {			$folder = str_replace('\\', '/', $folder); //Windows path sanitiation			return trailingslashit($folder);		}		$folder = preg_replace('|^([a-z]{1}):|i', '', $folder); //Strip out windows driveletter if its there.		$folder = str_replace('\\', '/', $folder); //Windows path sanitiation		if ( isset($this->cache[ $folder ] ) )			return $this->cache[ $folder ];		if ( $this->exists($folder) ) { //Folder exists at that absolute path.			$folder = trailingslashit($folder);			$this->cache[ $folder ] = $folder;			return $folder;		}		if ( $return = $this->search_for_folder($folder) )			$this->cache[ $folder ] = $return;		return $return;	}	/**	 * Locates a folder on the remote filesystem.	 *	 * Expects Windows sanitized path	 *	 * @since 2.7	 * @access private	 *	 * @param string $folder the folder to locate	 * @param string $base the folder to start searching from	 * @param bool $loop if the function has recursed, Internal use only	 * @return string The location of the remote path.	 */	function search_for_folder($folder, $base = '.', $loop = false ) {		if ( empty( $base ) || '.' == $base )			$base = trailingslashit($this->cwd());		$folder = untrailingslashit($folder);		$folder_parts = explode('/', $folder);		$last_path = $folder_parts[ count($folder_parts) - 1 ];		$files = $this->dirlist( $base );		foreach ( $folder_parts as $key ) {			if ( $key == $last_path )				continue; //We want this to be caught by the next code block.			//Working from /home/ to /user/ to /wordpress/ see if that file exists within the current folder,			// If its found, change into it and follow through looking for it.			// If it cant find WordPress down that route, it'll continue onto the next folder level, and see if that matches, and so on.			// If it reaches the end, and still cant find it, it'll return false for the entire function.			if ( isset($files[ $key ]) ){				//Lets try that folder:				$newdir = trailingslashit(path_join($base, $key));				if ( $this->verbose )					printf( __('Changing to %s') . '<br/>', $newdir );				if ( $ret = $this->search_for_folder( $folder, $newdir, $loop) )					return $ret;			}		}		//Only check this as a last resort, to prevent locating the incorrect install. All above proceeedures will fail quickly if this is the right branch to take.		if (isset( $files[ $last_path ] ) ) {			if ( $this->verbose )				printf( __('Found %s') . '<br/>',  $base . $last_path );			return trailingslashit($base . $last_path);		}		if ( $loop )			return false; //Prevent tihs function looping again.		//As an extra last resort, Change back to / if the folder wasnt found. This comes into effect when the CWD is /home/user/ but WP is at /var/www/.... mainly dedicated setups.		return $this->search_for_folder($folder, '/', true);	}	/**	 * Returns the *nix style file permissions for a file	 *	 * From the PHP documentation page for fileperms()	 *	 * @link http://docs.php.net/fileperms	 * @since 2.5	 * @access public	 *	 * @param string $file string filename	 * @return int octal representation of permissions	 */	function gethchmod($file){		$perms = $this->getchmod($file);		if (($perms & 0xC000) == 0xC000) // Socket			$info = 's';		elseif (($perms & 0xA000) == 0xA000) // Symbolic Link			$info = 'l';		elseif (($perms & 0x8000) == 0x8000) // Regular			$info = '-';		elseif (($perms & 0x6000) == 0x6000) // Block special			$info = 'b';		elseif (($perms & 0x4000) == 0x4000) // Directory			$info = 'd';		elseif (($perms & 0x2000) == 0x2000) // Character special			$info = 'c';		elseif (($perms & 0x1000) == 0x1000) // FIFO pipe			$info = 'p';		else // Unknown			$info = 'u';		// Owner		$info .= (($perms & 0x0100) ? 'r' : '-');		$info .= (($perms & 0x0080) ? 'w' : '-');		$info .= (($perms & 0x0040) ?					(($perms & 0x0800) ? 's' : 'x' ) :					(($perms & 0x0800) ? 'S' : '-'));		// Group		$info .= (($perms & 0x0020) ? 'r' : '-');		$info .= (($perms & 0x0010) ? 'w' : '-');		$info .= (($perms & 0x0008) ?					(($perms & 0x0400) ? 's' : 'x' ) :					(($perms & 0x0400) ? 'S' : '-'));		// World		$info .= (($perms & 0x0004) ? 'r' : '-');		$info .= (($perms & 0x0002) ? 'w' : '-');		$info .= (($perms & 0x0001) ?					(($perms & 0x0200) ? 't' : 'x' ) :					(($perms & 0x0200) ? 'T' : '-'));		return $info;	}	/**	 * Converts *nix style file permissions to a octal number.	 *	 * Converts '-rw-r--r--' to 0644	 * From "info at rvgate dot nl"'s comment on the PHP documentation for chmod() 	 *	 * @link http://docs.php.net/manual/en/function.chmod.php#49614	 * @since 2.5	 * @access public	 *	 * @param string $mode string *nix style file permission	 * @return int octal representation	 */	function getnumchmodfromh($mode) {		$realmode = '';		$legal =  array('', 'w', 'r', 'x', '-');		$attarray = preg_split('//', $mode);		for ($i=0; $i < count($attarray); $i++)		   if ($key = array_search($attarray[$i], $legal))			   $realmode .= $legal[$key];		$mode = str_pad($realmode, 9, '-');		$trans = array('-'=>'0', 'r'=>'4', 'w'=>'2', 'x'=>'1');		$mode = strtr($mode,$trans);		$newmode = '';		$newmode .= $mode[0] + $mode[1] + $mode[2];		$newmode .= $mode[3] + $mode[4] + $mode[5];		$newmode .= $mode[6] + $mode[7] + $mode[8];		return $newmode;	}	/**	 * Determines if the string provided contains binary characters.	 *	 * @since 2.7	 * @access private	 *	 * @param string $text String to test against	 * @return bool true if string is binary, false otherwise	 */	function is_binary( $text ) {		return (bool) preg_match('|[^\x20-\x7E]|', $text); //chr(32)..chr(127)	}}?>
<?php/** * User Profile Administration Panel. * * @package WordPress * @subpackage Administration *//** * This is a profile page. * * @since unknown * @var bool */define('IS_PROFILE_PAGE', true);/** Load User Editing Page */require_once('./user-edit.php');?>
<?php/** * Theme editor administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_themes') )	wp_die('<p>'.__('You do not have sufficient permissions to edit templates for this site.').'</p>');$title = __("Edit Themes");$parent_file = 'themes.php';$help = '<p>' . __('You can use the Theme Editor to edit the individual CSS and PHP files which make up your theme.') . '</p>';$help .= '<p>' . __('Begin by choosing a theme to edit from the dropdown menu and clicking Select. A list then appears of all the template files. Clicking once on any file name causes the file to appear in the large Editor box.') . '</p>';$help .= '<p>' . __('For PHP files, you can use the Documentation dropdown to select from functions recognized in that file. Lookup takes you to a web page with reference material about that particular function.') . '</p>';$help .= '<p>' . __('After typing in your edits, click Update File.') . '</p>';$help .= '<p>' . __('<strong>Advice:</strong> think very carefully about your site crashing if you are live-editing the theme currently in use.') . '</p>';$help .= '<p>' . __('Upgrading to a newer version of the same theme will override changes made here. To avoid this, consider creating a <a href="http://codex.wordpress.org/Child_Themes" target="_blank">child theme</a> instead.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Theme_Development" target="_blank">Documentation on Theme Development</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Editing_Files" target="_blank">Documentation on Editing Files</a>') . '</p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Template_Tags" target="_blank">Documentation on Template Tags</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);wp_reset_vars(array('action', 'redirect', 'profile', 'error', 'warning', 'a', 'file', 'theme', 'dir'));wp_admin_css( 'theme-editor' );$themes = get_themes();if (empty($theme)) {	$theme = get_current_theme();} else {	$theme = stripslashes($theme);}if ( ! isset($themes[$theme]) )	wp_die(__('The requested theme does not exist.'));$allowed_files = array_merge($themes[$theme]['Stylesheet Files'], $themes[$theme]['Template Files']);if (empty($file)) {	$file = $allowed_files[0];} else {	$file = stripslashes($file);	if ( 'theme' == $dir ) {		$file = dirname(dirname($themes[$theme]['Template Dir'])) . $file ;	} else if ( 'style' == $dir) {		$file = dirname(dirname($themes[$theme]['Stylesheet Dir'])) . $file ;	}}validate_file_to_edit($file, $allowed_files);$scrollto = isset($_REQUEST['scrollto']) ? (int) $_REQUEST['scrollto'] : 0;$file_show = basename( $file );switch($action) {case 'update':	check_admin_referer('edit-theme_' . $file . $theme);	$newcontent = stripslashes($_POST['newcontent']);	$theme = urlencode($theme);	if (is_writeable($file)) {		//is_writable() not always reliable, check return value. see comments @ http://uk.php.net/is_writable		$f = fopen($file, 'w+');		if ($f !== FALSE) {			fwrite($f, $newcontent);			fclose($f);			$location = "theme-editor.php?file=$file&theme=$theme&a=te&scrollto=$scrollto";		} else {			$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";		}	} else {		$location = "theme-editor.php?file=$file&theme=$theme&scrollto=$scrollto";	}	$location = wp_kses_no_null($location);	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	header("Location: $location");	exit();break;default:	require_once('./admin-header.php');	update_recently_edited($file);	if ( !is_file($file) )		$error = 1;	if ( !$error && filesize($file) > 0 ) {		$f = fopen($file, 'r');		$content = fread($f, filesize($file));		if ( '.php' == substr( $file, strrpos( $file, '.' ) ) ) {			$functions = wp_doc_link_parse( $content );			$docs_select = '<select name="docs-list" id="docs-list">';			$docs_select .= '<option value="">' . esc_attr__( 'Function Name...' ) . '</option>';			foreach ( $functions as $function ) {				$docs_select .= '<option value="' . esc_attr( urlencode( $function ) ) . '">' . htmlspecialchars( $function ) . '()</option>';			}			$docs_select .= '</select>';		}		$content = htmlspecialchars( $content );	}	?><?php if (isset($_GET['a'])) : ?> <div id="message" class="updated"><p><?php _e('File edited successfully.') ?></p></div><?php endif;$description = get_file_description($file);$desc_header = ( $description != $file_show ) ? "<strong>$description</strong> (%s)" : "%s";?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><div class="fileedit-sub"><div class="alignleft"><big><?php echo sprintf($desc_header, $file_show); ?></big></div><div class="alignright">	<form action="theme-editor.php" method="post">		<strong><label for="theme"><?php _e('Select theme to edit:'); ?> </label></strong>		<select name="theme" id="theme"><?php	foreach ($themes as $a_theme) {	$theme_name = $a_theme['Name'];	if ($theme_name == $theme) $selected = " selected='selected'";	else $selected = '';	$theme_name = esc_attr($theme_name);	echo "\n\t<option value=\"$theme_name\" $selected>$theme_name</option>";}?>		</select>		<input type="submit" name="Submit" value="<?php esc_attr_e('Select') ?>" class="button" />	</form></div><br class="clear" /></div>	<div id="templateside"><?phpif ($allowed_files) :?>	<h3><?php _e('Templates'); ?></h3>	<ul><?php	$template_mapping = array();	$template_dir = $themes[$theme]['Template Dir'];	foreach ( $themes[$theme]['Template Files'] as $template_file ) {		$description = trim( get_file_description($template_file) );		$template_show = basename($template_file);		$filedesc = ( $description != $template_file ) ? "$description<br /><span class='nonessential'>($template_show)</span>" : "$description";		$filedesc = ( $template_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($template_show)</span></span>" : $filedesc;		// If we have two files of the same name prefer the one in the Template Directory		// This means that we display the correct files for child themes which overload Templates as well as Styles		if ( array_key_exists($description, $template_mapping ) ) {			if ( false !== strpos( $template_file, $template_dir ) )  {				$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );			}		} else {			$template_mapping[ $description ] = array( _get_template_edit_filename($template_file, $template_dir), $filedesc );		}	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $template_file, $filedesc ) ) = each( $template_mapping ) ) :	?>		<li><a href="theme-editor.php?file=<?php echo "$template_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=theme"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul>	<h3><?php /* translators: Theme stylesheets in theme editor */ _ex('Styles', 'Theme stylesheets in theme editor'); ?></h3>	<ul><?php	$template_mapping = array();	$stylesheet_dir = $themes[$theme]['Stylesheet Dir'];	foreach ( $themes[$theme]['Stylesheet Files'] as $style_file ) {		$description = trim( get_file_description($style_file) );		$style_show = basename($style_file);		$filedesc = ( $description != $style_file ) ? "$description<br /><span class='nonessential'>($style_show)</span>" : "$description";		$filedesc = ( $style_file == $file ) ? "<span class='highlight'>$description<br /><span class='nonessential'>($style_show)</span></span>" : $filedesc;		$template_mapping[ $description ] = array( _get_template_edit_filename($style_file, $stylesheet_dir), $filedesc );	}	ksort( $template_mapping );	while ( list( $template_sorted_key, list( $style_file, $filedesc ) ) = each( $template_mapping ) ) :		?>		<li><a href="theme-editor.php?file=<?php echo "$style_file"; ?>&amp;theme=<?php echo urlencode($theme) ?>&amp;dir=style"><?php echo $filedesc ?></a></li><?php endwhile; ?>	</ul><?php endif; ?></div><?php if (!$error) { ?>	<form name="template" id="template" action="theme-editor.php" method="post">	<?php wp_nonce_field('edit-theme_' . $file . $theme) ?>		 <div><textarea cols="70" rows="25" name="newcontent" id="newcontent" tabindex="1"><?php echo $content ?></textarea>		 <input type="hidden" name="action" value="update" />		 <input type="hidden" name="file" value="<?php echo esc_attr($file) ?>" />		 <input type="hidden" name="theme" value="<?php echo esc_attr($theme) ?>" />		 <input type="hidden" name="scrollto" id="scrollto" value="<?php echo $scrollto; ?>" />		 </div>	<?php if ( isset($functions ) && count($functions) ) { ?>		<div id="documentation" class="hide-if-no-js">		<label for="docs-list"><?php _e('Documentation:') ?></label>		<?php echo $docs_select; ?>		<input type="button" class="button" value=" <?php esc_attr_e( 'Lookup' ); ?> " onclick="if ( '' != jQuery('#docs-list').val() ) { window.open( 'http://api.wordpress.org/core/handbook/1.0/?function=' + escape( jQuery( '#docs-list' ).val() ) + '&amp;locale=<?php echo urlencode( get_locale() ) ?>&amp;version=<?php echo urlencode( $wp_version ) ?>&amp;redirect=true'); }" />		</div>	<?php } ?>		<div><?php if ( is_writeable($file) ) : ?>			<p class="submit"><?php	echo "<input type='submit' name='submit' class='button-primary' value='" . esc_attr__('Update File') . "' tabindex='2' />";?></p><?php else : ?><p><em><?php _e('You need to make this file writable before you can save your changes. See <a href="http://codex.wordpress.org/Changing_File_Permissions">the Codex</a> for more information.'); ?></em></p><?php endif; ?>		</div>	</form><?php	} else {		echo '<div class="error"><p>' . __('Oops, no such file exists! Double check the name and try again, merci.') . '</p></div>';	}?><br class="clear" /></div><script type="text/javascript">/* <![CDATA[ */jQuery(document).ready(function($){	$('#template').submit(function(){ $('#scrollto').val( $('#newcontent').scrollTop() ); });	$('#newcontent').scrollTop( $('#scrollto').val() );});/* ]]> */</script><?phpbreak;}include("./admin-footer.php");
<?php/** * WordPress API for media display. * * @package WordPress *//** * Scale down the default size of an image. * * This is so that the image is a better fit for the editor and theme. * * The $size parameter accepts either an array or a string. The supported string * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at * 128 width and 96 height in pixels. Also supported for the string value is * 'medium' and 'full'. The 'full' isn't actually supported, but any value other * than the supported will result in the content_width size or 500 if that is * not set. * * Finally, there is a filter named, 'editor_max_image_size' that will be called * on the calculated array for width and height, respectively. The second * parameter will be the value that was in the $size parameter. The returned * type for the hook is an array with the width as the first element and the * height as the second element. * * @since 2.5.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $width Width of the image * @param int $height Height of the image * @param string|array $size Size of what the result image should be. * @return array Width and height of what the result image should resize to. */function image_constrain_size_for_editor($width, $height, $size = 'medium') {	global $content_width, $_wp_additional_image_sizes;	if ( is_array($size) ) {		$max_width = $size[0];		$max_height = $size[1];	}	elseif ( $size == 'thumb' || $size == 'thumbnail' ) {		$max_width = intval(get_option('thumbnail_size_w'));		$max_height = intval(get_option('thumbnail_size_h'));		// last chance thumbnail size defaults		if ( !$max_width && !$max_height ) {			$max_width = 128;			$max_height = 96;		}	}	elseif ( $size == 'medium' ) {		$max_width = intval(get_option('medium_size_w'));		$max_height = intval(get_option('medium_size_h'));		// if no width is set, default to the theme content width if available	}	elseif ( $size == 'large' ) {		// we're inserting a large size image into the editor.  if it's a really		// big image we'll scale it down to fit reasonably within the editor		// itself, and within the theme's content width if it's known.  the user		// can resize it in the editor if they wish.		$max_width = intval(get_option('large_size_w'));		$max_height = intval(get_option('large_size_h'));		if ( intval($content_width) > 0 )			$max_width = min( intval($content_width), $max_width );	} elseif ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) && in_array( $size, array_keys( $_wp_additional_image_sizes ) ) ) {		$max_width = intval( $_wp_additional_image_sizes[$size]['width'] );		$max_height = intval( $_wp_additional_image_sizes[$size]['height'] );		if ( intval($content_width) > 0 && is_admin() ) // Only in admin. Assume that theme authors know what they're doing.			$max_width = min( intval($content_width), $max_width );	}	// $size == 'full' has no constraint	else {		$max_width = $width;		$max_height = $height;	}	list( $max_width, $max_height ) = apply_filters( 'editor_max_image_size', array( $max_width, $max_height ), $size );	return wp_constrain_dimensions( $width, $height, $max_width, $max_height );}/** * Retrieve width and height attributes using given width and height values. * * Both attributes are required in the sense that both parameters must have a * value, but are optional in that if you set them to false or null, then they * will not be added to the returned string. * * You can set the value using a string, but it will only take numeric values. * If you wish to put 'px' after the numbers, then it will be stripped out of * the return. * * @since 2.5.0 * * @param int|string $width Optional. Width attribute value. * @param int|string $height Optional. Height attribute value. * @return string HTML attributes for width and, or height. */function image_hwstring($width, $height) {	$out = '';	if ($width)		$out .= 'width="'.intval($width).'" ';	if ($height)		$out .= 'height="'.intval($height).'" ';	return $out;}/** * Scale an image to fit a particular size (such as 'thumb' or 'medium'). * * Array with image url, width, height, and whether is intermediate size, in * that order is returned on success is returned. $is_intermediate is true if * $url is a resized image, false if it is the original. * * The URL might be the original image, or it might be a resized version. This * function won't create a new resized copy, it will just return an already * resized one if it exists. * * A plugin may use the 'image_downsize' filter to hook into and offer image * resizing services for images. The hook must return an array with the same * elements that are returned in the function. The first element being the URL * to the new image that was resized. * * @since 2.5.0 * @uses apply_filters() Calls 'image_downsize' on $id and $size to provide *		resize services. * * @param int $id Attachment ID for image. * @param string $size Optional, default is 'medium'. Size of image, can be 'thumbnail'. * @return bool|array False on failure, array on success. */function image_downsize($id, $size = 'medium') {	if ( !wp_attachment_is_image($id) )		return false;	$img_url = wp_get_attachment_url($id);	$meta = wp_get_attachment_metadata($id);	$width = $height = 0;	$is_intermediate = false;	// plugins can use this to provide resize services	if ( $out = apply_filters('image_downsize', false, $id, $size) )		return $out;	// try for a new style intermediate size	if ( $intermediate = image_get_intermediate_size($id, $size) ) {		$img_url = str_replace(basename($img_url), $intermediate['file'], $img_url);		$width = $intermediate['width'];		$height = $intermediate['height'];		$is_intermediate = true;	}	elseif ( $size == 'thumbnail' ) {		// fall back to the old thumbnail		if ( ($thumb_file = wp_get_attachment_thumb_file($id)) && $info = getimagesize($thumb_file) ) {			$img_url = str_replace(basename($img_url), basename($thumb_file), $img_url);			$width = $info[0];			$height = $info[1];			$is_intermediate = true;		}	}	if ( !$width && !$height && isset($meta['width'], $meta['height']) ) {		// any other type: use the real image		$width = $meta['width'];		$height = $meta['height'];	}	if ( $img_url) {		// we have the actual image size, but might need to further constrain it if content_width is narrower		list( $width, $height ) = image_constrain_size_for_editor( $width, $height, $size );		return array( $img_url, $width, $height, $is_intermediate );	}	return false;}/** * Registers a new image size */function add_image_size( $name, $width = 0, $height = 0, $crop = FALSE ) {	global $_wp_additional_image_sizes;	$_wp_additional_image_sizes[$name] = array( 'width' => absint( $width ), 'height' => absint( $height ), 'crop' => !!$crop );}/** * Registers an image size for the post thumbnail */function set_post_thumbnail_size( $width = 0, $height = 0, $crop = FALSE ) {	add_image_size( 'post-thumbnail', $width, $height, $crop );}/** * An <img src /> tag for an image attachment, scaling it down if requested. * * The filter 'get_image_tag_class' allows for changing the class name for the * image without having to use regular expressions on the HTML content. The * parameters are: what WordPress will use for the class, the Attachment ID, * image align value, and the size the image should be. * * The second filter 'get_image_tag' has the HTML content, which can then be * further manipulated by a plugin to change all attribute values and even HTML * content. * * @since 2.5.0 * * @uses apply_filters() The 'get_image_tag_class' filter is the IMG element *		class attribute. * @uses apply_filters() The 'get_image_tag' filter is the full IMG element with *		all attributes. * * @param int $id Attachment ID. * @param string $alt Image Description for the alt attribute. * @param string $title Image Description for the title attribute. * @param string $align Part of the class name for aligning the image. * @param string $size Optional. Default is 'medium'. * @return string HTML IMG element for given image attachment */function get_image_tag($id, $alt, $title, $align, $size='medium') {	list( $img_src, $width, $height ) = image_downsize($id, $size);	$hwstring = image_hwstring($width, $height);	$class = 'align' . esc_attr($align) .' size-' . esc_attr($size) . ' wp-image-' . $id;	$class = apply_filters('get_image_tag_class', $class, $id, $align, $size);	$html = '<img src="' . esc_attr($img_src) . '" alt="' . esc_attr($alt) . '" title="' . esc_attr($title).'" '.$hwstring.'class="'.$class.'" />';	$html = apply_filters( 'get_image_tag', $html, $id, $alt, $title, $align, $size );	return $html;}/** * Load an image from a string, if PHP supports it. * * @since 2.1.0 * * @param string $file Filename of the image to load. * @return resource The resulting image resource on success, Error string on failure. */function wp_load_image( $file ) {	if ( is_numeric( $file ) )		$file = get_attached_file( $file );	if ( ! file_exists( $file ) )		return sprintf(__('File &#8220;%s&#8221; doesn&#8217;t exist?'), $file);	if ( ! function_exists('imagecreatefromstring') )		return __('The GD image library is not installed.');	// Set artificially high because GD uses uncompressed images in memory	@ini_set('memory_limit', '256M');	$image = imagecreatefromstring( file_get_contents( $file ) );	if ( !is_resource( $image ) )		return sprintf(__('File &#8220;%s&#8221; is not an image.'), $file);	return $image;}/** * Calculates the new dimentions for a downsampled image. * * If either width or height are empty, no constraint is applied on * that dimension. * * @since 2.5.0 * * @param int $current_width Current width of the image. * @param int $current_height Current height of the image. * @param int $max_width Optional. Maximum wanted width. * @param int $max_height Optional. Maximum wanted height. * @return array First item is the width, the second item is the height. */function wp_constrain_dimensions( $current_width, $current_height, $max_width=0, $max_height=0 ) {	if ( !$max_width and !$max_height )		return array( $current_width, $current_height );	$width_ratio = $height_ratio = 1.0;	$did_width = $did_height = false;	if ( $max_width > 0 && $current_width > 0 && $current_width > $max_width ) {		$width_ratio = $max_width / $current_width;		$did_width = true;	}	if ( $max_height > 0 && $current_height > 0 && $current_height > $max_height ) {		$height_ratio = $max_height / $current_height;		$did_height = true;	}	// Calculate the larger/smaller ratios	$smaller_ratio = min( $width_ratio, $height_ratio );	$larger_ratio  = max( $width_ratio, $height_ratio );	if ( intval( $current_width * $larger_ratio ) > $max_width || intval( $current_height * $larger_ratio ) > $max_height ) 		// The larger ratio is too big. It would result in an overflow.		$ratio = $smaller_ratio;	else		// The larger ratio fits, and is likely to be a more "snug" fit.		$ratio = $larger_ratio;	$w = intval( $current_width  * $ratio );	$h = intval( $current_height * $ratio );	// Sometimes, due to rounding, we'll end up with a result like this: 465x700 in a 177x177 box is 117x176... a pixel short	// We also have issues with recursive calls resulting in an ever-changing result. Contraining to the result of a constraint should yield the original result.	// Thus we look for dimensions that are one pixel shy of the max value and bump them up	if ( $did_width && $w == $max_width - 1 )		$w = $max_width; // Round it up	if ( $did_height && $h == $max_height - 1 )		$h = $max_height; // Round it up	return array( $w, $h );}/** * Retrieve calculated resized dimensions for use in imagecopyresampled(). * * Calculate dimensions and coordinates for a resized image that fits within a * specified width and height. If $crop is true, the largest matching central * portion of the image will be cropped out and resized to the required size. * * @since 2.5.0 * * @param int $orig_w Original width. * @param int $orig_h Original height. * @param int $dest_w New width. * @param int $dest_h New height. * @param bool $crop Optional, default is false. Whether to crop image or resize. * @return bool|array False, on failure. Returned array matches parameters for imagecopyresampled() PHP function. */function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {	if ($orig_w <= 0 || $orig_h <= 0)		return false;	// at least one of dest_w or dest_h must be specific	if ($dest_w <= 0 && $dest_h <= 0)		return false;	if ( $crop ) {		// crop the largest possible portion of the original image that we can size to $dest_w x $dest_h		$aspect_ratio = $orig_w / $orig_h;		$new_w = min($dest_w, $orig_w);		$new_h = min($dest_h, $orig_h);		if ( !$new_w ) {			$new_w = intval($new_h * $aspect_ratio);		}		if ( !$new_h ) {			$new_h = intval($new_w / $aspect_ratio);		}		$size_ratio = max($new_w / $orig_w, $new_h / $orig_h);		$crop_w = round($new_w / $size_ratio);		$crop_h = round($new_h / $size_ratio);		$s_x = floor( ($orig_w - $crop_w) / 2 );		$s_y = floor( ($orig_h - $crop_h) / 2 );	} else {		// don't crop, just resize using $dest_w x $dest_h as a maximum bounding box		$crop_w = $orig_w;		$crop_h = $orig_h;		$s_x = 0;		$s_y = 0;		list( $new_w, $new_h ) = wp_constrain_dimensions( $orig_w, $orig_h, $dest_w, $dest_h );	}	// if the resulting image would be the same size or larger we don't want to resize it	if ( $new_w >= $orig_w && $new_h >= $orig_h )		return false;	// the return array matches the parameters to imagecopyresampled()	// int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h	return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );}/** * Scale down an image to fit a particular size and save a new copy of the image. * * The PNG transparency will be preserved using the function, as well as the * image type. If the file going in is PNG, then the resized image is going to * be PNG. The only supported image types are PNG, GIF, and JPEG. * * Some functionality requires API to exist, so some PHP version may lose out * support. This is not the fault of WordPress (where functionality is * downgraded, not actual defects), but of your PHP version. * * @since 2.5.0 * * @param string $file Image file path. * @param int $max_w Maximum width to resize to. * @param int $max_h Maximum height to resize to. * @param bool $crop Optional. Whether to crop image or resize. * @param string $suffix Optional. File Suffix. * @param string $dest_path Optional. New image file path. * @param int $jpeg_quality Optional, default is 90. Image quality percentage. * @return mixed WP_Error on failure. String with new destination path. */function image_resize( $file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90 ) {	$image = wp_load_image( $file );	if ( !is_resource( $image ) )		return new WP_Error( 'error_loading_image', $image, $file );	$size = @getimagesize( $file );	if ( !$size )		return new WP_Error('invalid_image', __('Could not read image size'), $file);	list($orig_w, $orig_h, $orig_type) = $size;	$dims = image_resize_dimensions($orig_w, $orig_h, $max_w, $max_h, $crop);	if ( !$dims )		return new WP_Error( 'error_getting_dimensions', __('Could not calculate resized image dimensions') );	list($dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) = $dims;	$newimage = wp_imagecreatetruecolor( $dst_w, $dst_h );	imagecopyresampled( $newimage, $image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);	// convert from full colors to index colors, like original PNG.	if ( IMAGETYPE_PNG == $orig_type && function_exists('imageistruecolor') && !imageistruecolor( $image ) )		imagetruecolortopalette( $newimage, false, imagecolorstotal( $image ) );	// we don't need the original in memory anymore	imagedestroy( $image );	// $suffix will be appended to the destination filename, just before the extension	if ( !$suffix )		$suffix = "{$dst_w}x{$dst_h}";	$info = pathinfo($file);	$dir = $info['dirname'];	$ext = $info['extension'];	$name = basename($file, ".{$ext}");	if ( !is_null($dest_path) and $_dest_path = realpath($dest_path) )		$dir = $_dest_path;	$destfilename = "{$dir}/{$name}-{$suffix}.{$ext}";	if ( IMAGETYPE_GIF == $orig_type ) {		if ( !imagegif( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} elseif ( IMAGETYPE_PNG == $orig_type ) {		if ( !imagepng( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} else {		// all other formats are converted to jpg		$destfilename = "{$dir}/{$name}-{$suffix}.jpg";		if ( !imagejpeg( $newimage, $destfilename, apply_filters( 'jpeg_quality', $jpeg_quality, 'image_resize' ) ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	}	imagedestroy( $newimage );	// Set correct file permissions	$stat = stat( dirname( $destfilename ));	$perms = $stat['mode'] & 0000666; //same permissions as parent folder, strip off the executable bits	@ chmod( $destfilename, $perms );	return $destfilename;}/** * Resize an image to make a thumbnail or intermediate size. * * The returned array has the file size, the image width, and image height. The * filter 'image_make_intermediate_size' can be used to hook in and change the * values of the returned array. The only parameter is the resized file path. * * @since 2.5.0 * * @param string $file File path. * @param int $width Image width. * @param int $height Image height. * @param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize. * @return bool|array False, if no image was created. Metadata array on success. */function image_make_intermediate_size($file, $width, $height, $crop=false) {	if ( $width || $height ) {		$resized_file = image_resize($file, $width, $height, $crop);		if ( !is_wp_error($resized_file) && $resized_file && $info = getimagesize($resized_file) ) {			$resized_file = apply_filters('image_make_intermediate_size', $resized_file);			return array(				'file' => basename( $resized_file ),				'width' => $info[0],				'height' => $info[1],			);		}	}	return false;}/** * Retrieve the image's intermediate size (resized) path, width, and height. * * The $size parameter can be an array with the width and height respectively. * If the size matches the 'sizes' metadata array for width and height, then it * will be used. If there is no direct match, then the nearest image size larger * than the specified size will be used. If nothing is found, then the function * will break out and return false. * * The metadata 'sizes' is used for compatible sizes that can be used for the * parameter $size value. * * The url path will be given, when the $size parameter is a string. * * If you are passing an array for the $size, you should consider using * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @since 2.5.0 * @see add_image_size() * * @param int $post_id Attachment ID for image. * @param array|string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @return bool|array False on failure or array of file path, width, and height on success. */function image_get_intermediate_size($post_id, $size='thumbnail') {	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post_id ) ) )		return false;	// get the best one for a specified set of dimensions	if ( is_array($size) && !empty($imagedata['sizes']) ) {		foreach ( $imagedata['sizes'] as $_size => $data ) {			// already cropped to width or height; so use this size			if ( ( $data['width'] == $size[0] && $data['height'] <= $size[1] ) || ( $data['height'] == $size[1] && $data['width'] <= $size[0] ) ) {				$file = $data['file'];				list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );				return compact( 'file', 'width', 'height' );			}			// add to lookup table: area => size			$areas[$data['width'] * $data['height']] = $_size;		}		if ( !$size || !empty($areas) ) {			// find for the smallest image not smaller than the desired size			ksort($areas);			foreach ( $areas as $_size ) {				$data = $imagedata['sizes'][$_size];				if ( $data['width'] >= $size[0] || $data['height'] >= $size[1] ) {					// Skip images with unexpectedly divergent aspect ratios (crops)					// First, we calculate what size the original image would be if constrained to a box the size of the current image in the loop					$maybe_cropped = image_resize_dimensions($imagedata['width'], $imagedata['height'], $data['width'], $data['height'], false );					// If the size doesn't match within one pixel, then it is of a different aspect ratio, so we skip it, unless it's the thumbnail size					if ( 'thumbnail' != $_size && ( !$maybe_cropped || ( $maybe_cropped[4] != $data['width'] && $maybe_cropped[4] + 1 != $data['width'] ) || ( $maybe_cropped[5] != $data['height'] && $maybe_cropped[5] + 1 != $data['height'] ) ) )						continue;					// If we're still here, then we're going to use this size					$file = $data['file'];					list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );					return compact( 'file', 'width', 'height' );				}			}		}	}	if ( is_array($size) || empty($size) || empty($imagedata['sizes'][$size]) )		return false;	$data = $imagedata['sizes'][$size];	// include the full filesystem path of the intermediate file	if ( empty($data['path']) && !empty($data['file']) ) {		$file_url = wp_get_attachment_url($post_id);		$data['path'] = path_join( dirname($imagedata['file']), $data['file'] );		$data['url'] = path_join( dirname($file_url), $data['file'] );	}	return $data;}/** * Get the available image sizes * @since 3.0.0 * @return array Returns a filtered array of image size strings */function get_intermediate_image_sizes() {	global $_wp_additional_image_sizes;	$image_sizes = array('thumbnail', 'medium', 'large'); // Standard sizes	if ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) )		$image_sizes = array_merge( $image_sizes, array_keys( $_wp_additional_image_sizes ) );	return apply_filters( 'intermediate_image_sizes', $image_sizes );}/** * Retrieve an image to represent an attachment. * * A mime icon for files, thumbnail or intermediate size for images. * * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return bool|array Returns an array (url, width, height), or false, if no image is available. */function wp_get_attachment_image_src($attachment_id, $size='thumbnail', $icon = false) {	// get a thumbnail or intermediate image if there is one	if ( $image = image_downsize($attachment_id, $size) )		return $image;	$src = false;	if ( $icon && $src = wp_mime_type_icon($attachment_id) ) {		$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );		$src_file = $icon_dir . '/' . basename($src);		@list($width, $height) = getimagesize($src_file);	}	if ( $src && $width && $height )		return array( $src, $width, $height );	return false;}/** * Get an HTML img element representing an image attachment * * While $size will accept an array, it is better to register a size with * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @see add_image_size() * @uses apply_filters() Calls 'wp_get_attachment_image_attributes' hook on attributes array * @uses wp_get_attachment_image_src() Gets attachment file URL and dimensions * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return string HTML img element or empty string on failure. */function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = false, $attr = '') {	$html = '';	$image = wp_get_attachment_image_src($attachment_id, $size, $icon);	if ( $image ) {		list($src, $width, $height) = $image;		$hwstring = image_hwstring($width, $height);		if ( is_array($size) )			$size = join('x', $size);		$attachment =& get_post($attachment_id);		$default_attr = array(			'src'	=> $src,			'class'	=> "attachment-$size",			'alt'	=> trim(strip_tags( get_post_meta($attachment_id, '_wp_attachment_image_alt', true) )), // Use Alt field first			'title'	=> trim(strip_tags( $attachment->post_title )),		);		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_excerpt )); // If not, Use the Caption		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_title )); // Finally, use the title		$attr = wp_parse_args($attr, $default_attr);		$attr = apply_filters( 'wp_get_attachment_image_attributes', $attr, $attachment );		$attr = array_map( 'esc_attr', $attr );		$html = rtrim("<img $hwstring");		foreach ( $attr as $name => $value ) {			$html .= " $name=" . '"' . $value . '"';		}		$html .= ' />';	}	return $html;}/** * Adds a 'wp-post-image' class to post thumbnail thumbnails * Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to * dynamically add/remove itself so as to only filter post thumbnail thumbnails * * @since 2.9.0 * @param array $attr Attributes including src, class, alt, title * @return array */function _wp_post_thumbnail_class_filter( $attr ) {	$attr['class'] .= ' wp-post-image';	return $attr;}/** * Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_add( $attr ) {	add_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}/** * Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_remove( $attr ) {	remove_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}add_shortcode('wp_caption', 'img_caption_shortcode');add_shortcode('caption', 'img_caption_shortcode');/** * The Caption shortcode. * * Allows a plugin to replace the content that would otherwise be returned. The * filter is 'img_caption_shortcode' and passes an empty string, the attr * parameter and the content parameter values. * * The supported attributes for the shortcode are 'id', 'align', 'width', and * 'caption'. * * @since 2.6.0 * * @param array $attr Attributes attributed to the shortcode. * @param string $content Optional. Shortcode content. * @return string */function img_caption_shortcode($attr, $content = null) {	// Allow plugins/themes to override the default caption template.	$output = apply_filters('img_caption_shortcode', '', $attr, $content);	if ( $output != '' )		return $output;	extract(shortcode_atts(array(		'id'	=> '',		'align'	=> 'alignnone',		'width'	=> '',		'caption' => ''	), $attr));	if ( 1 > (int) $width || empty($caption) )		return $content;	if ( $id ) $id = 'id="' . esc_attr($id) . '" ';	return '<div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'	. do_shortcode( $content ) . '<p class="wp-caption-text">' . $caption . '</p></div>';}add_shortcode('gallery', 'gallery_shortcode');/** * The Gallery shortcode. * * This implements the functionality of the Gallery Shortcode for displaying * WordPress images on a post. * * @since 2.5.0 * * @param array $attr Attributes attributed to the shortcode. * @return string HTML content to display gallery. */function gallery_shortcode($attr) {	global $post, $wp_locale;	static $instance = 0;	$instance++;	// Allow plugins/themes to override the default gallery template.	$output = apply_filters('post_gallery', '', $attr);	if ( $output != '' )		return $output;	// We're trusting author input, so let's at least make sure it looks like a valid orderby statement	if ( isset( $attr['orderby'] ) ) {		$attr['orderby'] = sanitize_sql_orderby( $attr['orderby'] );		if ( !$attr['orderby'] )			unset( $attr['orderby'] );	}	extract(shortcode_atts(array(		'order'      => 'ASC',		'orderby'    => 'menu_order ID',		'id'         => $post->ID,		'itemtag'    => 'dl',		'icontag'    => 'dt',		'captiontag' => 'dd',		'columns'    => 3,		'size'       => 'thumbnail',		'include'    => '',		'exclude'    => ''	), $attr));	$id = intval($id);	if ( 'RAND' == $order )		$orderby = 'none';	if ( !empty($include) ) {		$include = preg_replace( '/[^0-9,]+/', '', $include );		$_attachments = get_posts( array('include' => $include, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );		$attachments = array();		foreach ( $_attachments as $key => $val ) {			$attachments[$val->ID] = $_attachments[$key];		}	} elseif ( !empty($exclude) ) {		$exclude = preg_replace( '/[^0-9,]+/', '', $exclude );		$attachments = get_children( array('post_parent' => $id, 'exclude' => $exclude, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	} else {		$attachments = get_children( array('post_parent' => $id, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	}	if ( empty($attachments) )		return '';	if ( is_feed() ) {		$output = "\n";		foreach ( $attachments as $att_id => $attachment )			$output .= wp_get_attachment_link($att_id, $size, true) . "\n";		return $output;	}	$itemtag = tag_escape($itemtag);	$captiontag = tag_escape($captiontag);	$columns = intval($columns);	$itemwidth = $columns > 0 ? floor(100/$columns) : 100;	$float = is_rtl() ? 'right' : 'left';	$selector = "gallery-{$instance}";	$output = apply_filters('gallery_style', "		<style type='text/css'>			#{$selector} {				margin: auto;			}			#{$selector} .gallery-item {				float: {$float};				margin-top: 10px;				text-align: center;				width: {$itemwidth}%;			}			#{$selector} img {				border: 2px solid #cfcfcf;			}			#{$selector} .gallery-caption {				margin-left: 0;			}		</style>		<!-- see gallery_shortcode() in wp-includes/media.php -->		<div id='$selector' class='gallery galleryid-{$id}'>");	$i = 0;	foreach ( $attachments as $id => $attachment ) {		$link = isset($attr['link']) && 'file' == $attr['link'] ? wp_get_attachment_link($id, $size, false, false) : wp_get_attachment_link($id, $size, true, false);		$output .= "<{$itemtag} class='gallery-item'>";		$output .= "			<{$icontag} class='gallery-icon'>				$link			</{$icontag}>";		if ( $captiontag && trim($attachment->post_excerpt) ) {			$output .= "				<{$captiontag} class='gallery-caption'>				" . wptexturize($attachment->post_excerpt) . "				</{$captiontag}>";		}		$output .= "</{$itemtag}>";		if ( $columns > 0 && ++$i % $columns == 0 )			$output .= '<br style="clear: both" />';	}	$output .= "			<br style='clear: both;' />		</div>\n";	return $output;}/** * Display previous image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function previous_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(true, $size, $text);}/** * Display next image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function next_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(false, $size, $text);}/** * Display next or previous image link that has the same post parent. * * Retrieves the current attachment object from the $post global. * * @since 2.5.0 * * @param bool $prev Optional. Default is true to display previous link, true for next. */function adjacent_image_link($prev = true, $size = 'thumbnail', $text = false) {	global $post;	$post = get_post($post);	$attachments = array_values(get_children( array('post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID') ));	foreach ( $attachments as $k => $attachment )		if ( $attachment->ID == $post->ID )			break;	$k = $prev ? $k - 1 : $k + 1;	if ( isset($attachments[$k]) )		echo wp_get_attachment_link($attachments[$k]->ID, $size, true, false, $text);}/** * Retrieve taxonomies attached to the attachment. * * @since 2.5.0 * * @param int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object. * @return array Empty array on failure. List of taxonomies on success. */function get_attachment_taxonomies($attachment) {	if ( is_int( $attachment ) )		$attachment = get_post($attachment);	else if ( is_array($attachment) )		$attachment = (object) $attachment;	if ( ! is_object($attachment) )		return array();	$filename = basename($attachment->guid);	$objects = array('attachment');	if ( false !== strpos($filename, '.') )		$objects[] = 'attachment:' . substr($filename, strrpos($filename, '.') + 1);	if ( !empty($attachment->post_mime_type) ) {		$objects[] = 'attachment:' . $attachment->post_mime_type;		if ( false !== strpos($attachment->post_mime_type, '/') )			foreach ( explode('/', $attachment->post_mime_type) as $token )				if ( !empty($token) )					$objects[] = "attachment:$token";	}	$taxonomies = array();	foreach ( $objects as $object )		if ( $taxes = get_object_taxonomies($object) )			$taxonomies = array_merge($taxonomies, $taxes);	return array_unique($taxonomies);}/** * Check if the installed version of GD supports particular image type * * @since 2.9.0 * * @param $mime_type string * @return bool */function gd_edit_image_support($mime_type) {	if ( function_exists('imagetypes') ) {		switch( $mime_type ) {			case 'image/jpeg':				return (imagetypes() & IMG_JPG) != 0;			case 'image/png':				return (imagetypes() & IMG_PNG) != 0;			case 'image/gif':				return (imagetypes() & IMG_GIF) != 0;		}	} else {		switch( $mime_type ) {			case 'image/jpeg':				return function_exists('imagecreatefromjpeg');			case 'image/png':				return function_exists('imagecreatefrompng');			case 'image/gif':				return function_exists('imagecreatefromgif');		}	}	return false;}/** * Create new GD image resource with transparency support * * @since 2.9.0 * * @param $width * @param $height * @return image resource */function wp_imagecreatetruecolor($width, $height) {	$img = imagecreatetruecolor($width, $height);	if ( is_resource($img) && function_exists('imagealphablending') && function_exists('imagesavealpha') ) {		imagealphablending($img, false);		imagesavealpha($img, true);	}	return $img;}/** * API for easily embedding rich media such as videos and images into content. * * @package WordPress * @subpackage Embed * @since 2.9.0 */class WP_Embed {	var $handlers = array();	var $post_ID;	var $usecache = true;	var $linkifunknown = true;	/**	 * PHP4 constructor	 */	function WP_Embed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 */	function __construct() {		// Hack to get the [embed] shortcode to run before wpautop()		add_filter( 'the_content', array(&$this, 'run_shortcode'), 8 );		// Shortcode placeholder for strip_shortcodes()		add_shortcode( 'embed', '__return_false' );		// Attempts to embed all URLs in a post		if ( get_option('embed_autourls') )			add_filter( 'the_content', array(&$this, 'autoembed'), 8 );		// After a post is saved, invalidate the oEmbed cache		add_action( 'save_post', array(&$this, 'delete_oembed_caches') );		// After a post is saved, cache oEmbed items via AJAX		add_action( 'edit_form_advanced', array(&$this, 'maybe_run_ajax_cache') );	}	/**	 * Process the [embed] shortcode.	 *	 * Since the [embed] shortcode needs to be run earlier than other shortcodes,	 * this function removes all existing shortcodes, registers the [embed] shortcode,	 * calls {@link do_shortcode()}, and then re-registers the old shortcodes.	 *	 * @uses $shortcode_tags	 * @uses remove_all_shortcodes()	 * @uses add_shortcode()	 * @uses do_shortcode()	 *	 * @param string $content Content to parse	 * @return string Content with shortcode parsed	 */	function run_shortcode( $content ) {		global $shortcode_tags;		// Backup current registered shortcodes and clear them all out		$orig_shortcode_tags = $shortcode_tags;		remove_all_shortcodes();		add_shortcode( 'embed', array(&$this, 'shortcode') );		// Do the shortcode (only the [embed] one is registered)		$content = do_shortcode( $content );		// Put the original shortcodes back		$shortcode_tags = $orig_shortcode_tags;		return $content;	}	/**	 * If a post/page was saved, then output Javascript to make	 * an AJAX request that will call WP_Embed::cache_oembed().	 */	function maybe_run_ajax_cache() {		global $post_ID;		if ( empty($post_ID) || empty($_GET['message']) || 1 != $_GET['message'] )			return;?><script type="text/javascript">/* <![CDATA[ */	jQuery(document).ready(function($){		$.get("<?php echo admin_url( 'admin-ajax.php?action=oembed-cache&post=' . $post_ID ); ?>");	});/* ]]> */</script><?php	}	/**	 * Register an embed handler. Do not use this function directly, use {@link wp_embed_register_handler()} instead.	 * This function should probably also only be used for sites that do not support oEmbed.	 *	 * @param string $id An internal ID/name for the handler. Needs to be unique.	 * @param string $regex The regex that will be used to see if this handler should be used for a URL.	 * @param callback $callback The callback function that will be called if the regex is matched.	 * @param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.	 */	function register_handler( $id, $regex, $callback, $priority = 10 ) {		$this->handlers[$priority][$id] = array(			'regex'    => $regex,			'callback' => $callback,		);	}	/**	 * Unregister a previously registered embed handler. Do not use this function directly, use {@link wp_embed_unregister_handler()} instead.	 *	 * @param string $id The handler ID that should be removed.	 * @param int $priority Optional. The priority of the handler to be removed (default: 10).	 */	function unregister_handler( $id, $priority = 10 ) {		if ( isset($this->handlers[$priority][$id]) )			unset($this->handlers[$priority][$id]);	}	/**	 * The {@link do_shortcode()} callback function.	 *	 * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers.	 * If none of the regex matches and it's enabled, then the URL will be given to the {@link WP_oEmbed} class.	 *	 * @uses wp_oembed_get()	 * @uses wp_parse_args()	 * @uses wp_embed_defaults()	 * @uses WP_Embed::maybe_make_link()	 * @uses get_option()	 * @uses current_user_can()	 * @uses wp_cache_get()	 * @uses wp_cache_set()	 * @uses get_post_meta()	 * @uses update_post_meta()	 *	 * @param array $attr Shortcode attributes.	 * @param string $url The URL attempting to be embeded.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function shortcode( $attr, $url = '' ) {		global $post;		if ( empty($url) )			return '';		$rawattr = $attr;		$attr = wp_parse_args( $attr, wp_embed_defaults() );		// Look for known internal handlers		ksort( $this->handlers );		foreach ( $this->handlers as $priority => $handlers ) {			foreach ( $handlers as $id => $handler ) {				if ( preg_match( $handler['regex'], $url, $matches ) && is_callable( $handler['callback'] ) ) {					if ( false !== $return = call_user_func( $handler['callback'], $matches, $attr, $url, $rawattr ) )						return apply_filters( 'embed_handler_html', $return, $url, $attr );				}			}		}		$post_ID = ( !empty($post->ID) ) ? $post->ID : null;		if ( !empty($this->post_ID) ) // Potentially set by WP_Embed::cache_oembed()			$post_ID = $this->post_ID;		// Unknown URL format. Let oEmbed have a go.		if ( $post_ID ) {			// Check for a cached result (stored in the post meta)			$cachekey = '_oembed_' . md5( $url . serialize( $attr ) );			if ( $this->usecache ) {				$cache = get_post_meta( $post_ID, $cachekey, true );				// Failures are cached				if ( '{{unknown}}' === $cache )					return $this->maybe_make_link( $url );				if ( !empty($cache) )					return apply_filters( 'embed_oembed_html', $cache, $url, $attr );			}			// Use oEmbed to get the HTML			$attr['discover'] = ( apply_filters('embed_oembed_discover', false) && author_can( $post_ID, 'unfiltered_html' ) );			$html = wp_oembed_get( $url, $attr );			// Cache the result			$cache = ( $html ) ? $html : '{{unknown}}';			update_post_meta( $post_ID, $cachekey, $cache );			// If there was a result, return it			if ( $html )				return apply_filters( 'embed_oembed_html', $html, $url, $attr );		}		// Still unknown		return $this->maybe_make_link( $url );	}	/**	 * Delete all oEmbed caches.	 *	 * @param int $post_ID Post ID to delete the caches for.	 */	function delete_oembed_caches( $post_ID ) {		$post_metas = get_post_custom_keys( $post_ID );		if ( empty($post_metas) )			return;		foreach( $post_metas as $post_meta_key ) {			if ( '_oembed_' == substr( $post_meta_key, 0, 8 ) )				delete_post_meta( $post_ID, $post_meta_key );		}	}	/**	 * Triggers a caching of all oEmbed results.	 *	 * @param int $post_ID Post ID to do the caching for.	 */	function cache_oembed( $post_ID ) {		$post = get_post( $post_ID );		if ( empty($post->ID) || !in_array( $post->post_type, apply_filters( 'embed_cache_oembed_types', array( 'post', 'page' ) ) ) )			return;		// Trigger a caching		if ( !empty($post->post_content) ) {			$this->post_ID = $post->ID;			$this->usecache = false;			$content = $this->run_shortcode( $post->post_content );			if ( get_option('embed_autourls') )				$this->autoembed( $content );			$this->usecache = true;		}	}	/**	 * Passes any unlinked URLs that are on their own line to {@link WP_Embed::shortcode()} for potential embedding.	 *	 * @uses WP_Embed::autoembed_callback()	 *	 * @param string $content The content to be searched.	 * @return string Potentially modified $content.	 */	function autoembed( $content ) {		return preg_replace_callback( '|^\s*(https?://[^\s"]+)\s*$|im', array(&$this, 'autoembed_callback'), $content );	}	/**	 * Callback function for {@link WP_Embed::autoembed()}.	 *	 * @uses WP_Embed::shortcode()	 *	 * @param array $match A regex match array.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function autoembed_callback( $match ) {		$oldval = $this->linkifunknown;		$this->linkifunknown = false;		$return = $this->shortcode( array(), $match[1] );		$this->linkifunknown = $oldval;		return "\n$return\n";	}	/**	 * Conditionally makes a hyperlink based on an internal class variable.	 *	 * @param string $url URL to potentially be linked.	 * @return string Linked URL or the original URL.	 */	function maybe_make_link( $url ) {		$output = ( $this->linkifunknown ) ? '<a href="' . esc_attr($url) . '">' . esc_html($url) . '</a>' : $url;		return apply_filters( 'embed_maybe_make_link', $output, $url );	}}$wp_embed = new WP_Embed();/** * Register an embed handler. This function should probably only be used for sites that do not support oEmbed. * * @since 2.9.0 * @see WP_Embed::register_handler() */function wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {	global $wp_embed;	$wp_embed->register_handler( $id, $regex, $callback, $priority );}/** * Unregister a previously registered embed handler. * * @since 2.9.0 * @see WP_Embed::unregister_handler() */function wp_embed_unregister_handler( $id, $priority = 10 ) {	global $wp_embed;	$wp_embed->unregister_handler( $id, $priority );}/** * Create default array of embed parameters. * * @since 2.9.0 * * @return array Default embed parameters. */function wp_embed_defaults() {	if ( !empty($GLOBALS['content_width']) )		$theme_width = (int) $GLOBALS['content_width'];	$width = get_option('embed_size_w');	if ( empty($width) && !empty($theme_width) )		$width = $theme_width;	if ( empty($width) )		$width = 500;	$height = get_option('embed_size_h');	if ( empty($height) )		$height = 700;	return apply_filters( 'embed_defaults', array(		'width'  => $width,		'height' => $height,	) );}/** * Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height. * * @since 2.9.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $example_width The width of an example embed. * @param int $example_height The height of an example embed. * @param int $max_width The maximum allowed width. * @param int $max_height The maximum allowed height. * @return array The maximum possible width and height based on the example ratio. */function wp_expand_dimensions( $example_width, $example_height, $max_width, $max_height ) {	$example_width  = (int) $example_width;	$example_height = (int) $example_height;	$max_width      = (int) $max_width;	$max_height     = (int) $max_height;	return wp_constrain_dimensions( $example_width * 1000000, $example_height * 1000000, $max_width, $max_height );}/** * Attempts to fetch the embed HTML for a provided URL using oEmbed. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * @uses WP_oEmbed::get_html() * * @param string $url The URL that should be embeded. * @param array $args Addtional arguments and parameters. * @return string The original URL on failure or the embed HTML on success. */function wp_oembed_get( $url, $args = '' ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	return $oembed->get_html( $url, $args );}/** * Adds a URL format and oEmbed provider URL pair. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * * @param string $format The format of URL that this provider can handle. You can use asterisks as wildcards. * @param string $provider The URL to the oEmbed provider. * @param boolean $regex Whether the $format parameter is in a regex format. */function wp_oembed_add_provider( $format, $provider, $regex = false ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	$oembed->providers[$format] = array( $provider, $regex );}
<?php/** * Defines constants and global variables that can be overridden, generally in wp-config.php. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Defines Multisite upload constants. * * @since 3.0.0 */function ms_upload_constants(  ) {	global $wpdb;	/** @since 3.0.0 */	// Base uploads dir relative to ABSPATH	if ( !defined( 'UPLOADBLOGSDIR' ) )		define( 'UPLOADBLOGSDIR', 'wp-content/blogs.dir' );	/** @since 3.0.0 */	if ( !defined( 'UPLOADS' ) ) {		// Uploads dir relative to ABSPATH		define( 'UPLOADS', UPLOADBLOGSDIR . "/{$wpdb->blogid}/files/" );		if ( 'wp-content/blogs.dir' == UPLOADBLOGSDIR )			define( 'BLOGUPLOADDIR', WP_CONTENT_DIR . "/blogs.dir/{$wpdb->blogid}/files/" );	}}/** * Defines Multisite cookie constants. * * @since 3.0.0 */function ms_cookie_constants(  ) {	global $current_site;	/**	 * @since 1.2.0	 */	if ( !defined( 'COOKIEPATH' ) )		define( 'COOKIEPATH', $current_site->path );	/**	 * @since 1.5.0	 */	if ( !defined( 'SITECOOKIEPATH' ) )		define( 'SITECOOKIEPATH', $current_site->path );	/**	 * @since 2.6.0	 */	if ( !defined( 'ADMIN_COOKIE_PATH' ) ) {		if( !is_subdomain_install() ) {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH );		} else {			define( 'ADMIN_COOKIE_PATH', SITECOOKIEPATH . 'wp-admin' );		}	}	/**	 * @since 2.0.0	 */	if ( !defined('COOKIE_DOMAIN') && is_subdomain_install() ) {		if ( !empty( $current_site->cookie_domain ) )			define('COOKIE_DOMAIN', '.' . $current_site->cookie_domain);		else			define('COOKIE_DOMAIN', '.' . $current_site->domain);	}}/** * Defines Multisite file constants. * * @since 3.0.0 */function ms_file_constants(  ) {	/**	 * Optional support for X-Sendfile header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_SENDFILE' ) )		define( 'WPMU_SENDFILE', false );	/**	 * Optional support for X-Accel-Redirect header	 * @since 3.0.0	 */	if ( !defined( 'WPMU_ACCEL_REDIRECT' ) )		define( 'WPMU_ACCEL_REDIRECT', false );}/** * Defines Multisite subdomain constants and handles warnings and notices. * * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool. * * On first call, the constants are checked and defined. On second call, * we will have translations loaded and can trigger warnings easily. * * @since 3.0.0 */function ms_subdomain_constants() {	static $error = null;	static $error_warn = false;	if ( false === $error )		return;	if ( $error ) {		$vhost_deprecated = __( 'The constant <code>VHOST</code> <strong>is deprecated</strong>. Use the boolean constant <code>SUBDOMAIN_INSTALL</code> in wp-config.php to enable a subdomain configuration. Use is_subdomain_install() to check whether a subdomain configuration is enabled.' );		if ( $error_warn ) {			trigger_error( __( '<strong>Conflicting values for the constants VHOST and SUBDOMAIN_INSTALL.</strong> The value of SUBDOMAIN_INSTALL will be assumed to be your subdomain configuration setting.' ) . ' ' . $vhost_deprecated, E_USER_WARNING );		} else {	 		_deprecated_argument( 'define()', '3.0', $vhost_deprecated );		}		return;	}	if ( defined( 'SUBDOMAIN_INSTALL' ) && defined( 'VHOST' ) ) {		if ( SUBDOMAIN_INSTALL == ( 'yes' == VHOST ) ) {			$error = true;		} else {			$error = $error_warn = true;		}	} elseif ( defined( 'SUBDOMAIN_INSTALL' ) ) {		define( 'VHOST', SUBDOMAIN_INSTALL ? 'yes' : 'no' );	} elseif ( defined( 'VHOST' ) ) {		$error = true;		define( 'SUBDOMAIN_INSTALL', 'yes' == VHOST );	} else {		define( 'SUBDOMAIN_INSTALL', false );		define( 'VHOST', 'no' );	}}add_action( 'init', 'ms_subdomain_constants' );?>
<?php/** * Manage link category administration actions. * * This page is accessed by the link management pages and handles the forms and * AJAX processes for category actions. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'cat'));switch($action) {case 'addcat':	check_admin_referer('add-link-category');	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	if ( wp_insert_term($_POST['name'], 'link_category', $_POST ) ) {		wp_redirect('edit-link-categories.php?message=1#addcat');	} else {		wp_redirect('edit-link-categories.php?message=4#addcat');	}	exit;break;case 'delete':	$cat_ID = (int) $_GET['cat_ID'];	check_admin_referer('delete-link-category_' .  $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$cat_name = get_term_field('name', $cat_ID, 'link_category');	$default_cat_id = get_option('default_link_category');	// Don't delete the default cats.	if ( $cat_ID == $default_cat_id )		wp_die(sprintf(__("Can&#8217;t delete the <strong>%s</strong> category: this is the default one"), $cat_name));	wp_delete_term($cat_ID, 'link_category', array('default' => $default_cat_id));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = __('Edit Category');	$parent_file = 'link-manager.php';	$submenu_file = 'edit-link-categories.php';	require_once ('admin-header.php');	$cat_ID = (int) $_GET['cat_ID'];	$category = get_term_to_edit($cat_ID, 'link_category');	include('./edit-link-category-form.php');	include('./admin-footer.php');	exit;break;case 'editedcat':	$cat_ID = (int) $_POST['cat_ID'];	check_admin_referer('update-link-category_' . $cat_ID);	if ( !current_user_can('manage_categories') )		wp_die(__('Cheatin&#8217; uh?'));	$location = 'edit-link-categories.php';	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-link-categories.php') )			$location = $referer;	}	$update =  wp_update_term($cat_ID, 'link_category', $_POST);	if ( $update && !is_wp_error($update) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;}?>
<?phpif ( !class_exists('SimplePie') )	require_once (ABSPATH . WPINC . '/class-simplepie.php');class WP_Feed_Cache extends SimplePie_Cache {	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function WP_Feed_Cache() {		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension) {		return new WP_Feed_Cache_Transient($location, $filename, $extension);	}}class WP_Feed_Cache_Transient {	var $name;	var $mod_name;	var $lifetime = 43200; //Default lifetime in cache of 12 hours	function WP_Feed_Cache_Transient($location, $filename, $extension) {		$this->name = 'feed_' . $filename;		$this->mod_name = 'feed_mod_' . $filename;		$this->lifetime = apply_filters('wp_feed_cache_transient_lifetime', $this->lifetime, $filename);	}	function save($data) {		if ( is_a($data, 'SimplePie') )			$data = $data->data;		set_transient($this->name, $data, $this->lifetime);		set_transient($this->mod_name, time(), $this->lifetime);		return true;	}	function load() {		return get_transient($this->name);	}	function mtime() {		return get_transient($this->mod_name);	}	function touch() {		return set_transient($this->mod_name, time(), $this->lifetime);	}	function unlink() {		delete_transient($this->name);		delete_transient($this->mod_name);		return true;	}}class WP_SimplePie_File extends SimplePie_File {	function WP_SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false) {		$this->url = $url;		$this->timeout = $timeout;		$this->redirects = $redirects;		$this->headers = $headers;		$this->useragent = $useragent;		$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE;		if ( preg_match('/^http(s)?:\/\//i', $url) ) {			$args = array( 'timeout' => $this->timeout, 'redirection' => $this->redirects);			if ( !empty($this->headers) )				$args['headers'] = $this->headers;			if ( SIMPLEPIE_USERAGENT != $this->useragent ) //Use default WP user agent unless custom has been specified				$args['user-agent'] = $this->useragent;			$res = wp_remote_request($url, $args);			if ( is_wp_error($res) ) {				$this->error = 'WP HTTP Error: ' . $res->get_error_message();				$this->success = false;			} else {				$this->headers = $res['headers'];				$this->body = $res['body'];				$this->status_code = $res['response']['code'];			}		} else {			if ( ! $this->body = file_get_contents($url) ) {				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}
<?php/** * WordPress API for creating bbcode like tags or what WordPress calls * "shortcodes." The tag and attribute parsing or regular expression code is * based on the Textpattern tag parser. * * A few examples are below: * * [shortcode /] * [shortcode foo="bar" baz="bing" /] * [shortcode foo="bar"]content[/shortcode] * * Shortcode tags support attributes and enclosed content, but does not entirely * support inline shortcodes in other shortcodes. You will have to call the * shortcode parser in your function to account for that. * * {@internal * Please be aware that the above note was made during the beta of WordPress 2.6 * and in the future may not be accurate. Please update the note when it is no * longer the case.}} * * To apply shortcode tags to content: * * <code> * $out = do_shortcode($content); * </code> * * @link http://codex.wordpress.org/Shortcode_API * * @package WordPress * @subpackage Shortcodes * @since 2.5 *//** * Container for storing shortcode tags and their hook to call for the shortcode * * @since 2.5 * @name $shortcode_tags * @var array * @global array $shortcode_tags */$shortcode_tags = array();/** * Add hook for shortcode tag. * * There can only be one hook for each shortcode. Which means that if another * plugin has a similar shortcode, it will override yours or yours will override * theirs depending on which order the plugins are included and/or ran. * * Simplest example of a shortcode tag using the API: * * <code> * // [footag foo="bar"] * function footag_func($atts) { * 	return "foo = {$atts[foo]}"; * } * add_shortcode('footag', 'footag_func'); * </code> * * Example with nice attribute defaults: * * <code> * // [bartag foo="bar"] * function bartag_func($atts) { * 	extract(shortcode_atts(array( * 		'foo' => 'no foo', * 		'baz' => 'default baz', * 	), $atts)); * * 	return "foo = {$foo}"; * } * add_shortcode('bartag', 'bartag_func'); * </code> * * Example with enclosed content: * * <code> * // [baztag]content[/baztag] * function baztag_func($atts, $content='') { * 	return "content = $content"; * } * add_shortcode('baztag', 'baztag_func'); * </code> * * @since 2.5 * @uses $shortcode_tags * * @param string $tag Shortcode tag to be searched in post content. * @param callable $func Hook to run when shortcode is found. */function add_shortcode($tag, $func) {	global $shortcode_tags;	if ( is_callable($func) )		$shortcode_tags[$tag] = $func;}/** * Removes hook for shortcode. * * @since 2.5 * @uses $shortcode_tags * * @param string $tag shortcode tag to remove hook for. */function remove_shortcode($tag) {	global $shortcode_tags;	unset($shortcode_tags[$tag]);}/** * Clear all shortcodes. * * This function is simple, it clears all of the shortcode tags by replacing the * shortcodes global by a empty array. This is actually a very efficient method * for removing all shortcodes. * * @since 2.5 * @uses $shortcode_tags */function remove_all_shortcodes() {	global $shortcode_tags;	$shortcode_tags = array();}/** * Search content for shortcodes and filter shortcodes through their hooks. * * If there are no shortcode tags defined, then the content will be returned * without any filtering. This might cause issues when plugins are disabled but * the shortcode will still show up in the post or content. * * @since 2.5 * @uses $shortcode_tags * @uses get_shortcode_regex() Gets the search pattern for searching shortcodes. * * @param string $content Content to search for shortcodes * @return string Content with shortcodes filtered out. */function do_shortcode($content) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace_callback('/'.$pattern.'/s', 'do_shortcode_tag', $content);}/** * Retrieve the shortcode regular expression for searching. * * The regular expression combines the shortcode tags in the regular expression * in a regex class. * * The regular expresion contains 6 different sub matches to help with parsing. * * 1/6 - An extra [ or ] to allow for escaping shortcodes with double [[]] * 2 - The shortcode name * 3 - The shortcode argument list * 4 - The self closing / * 5 - The content of a shortcode when it wraps some content. * * @since 2.5 * @uses $shortcode_tags * * @return string The shortcode search regular expression */function get_shortcode_regex() {	global $shortcode_tags;	$tagnames = array_keys($shortcode_tags);	$tagregexp = join( '|', array_map('preg_quote', $tagnames) );	// WARNING! Do not change this regex without changing do_shortcode_tag() and strip_shortcodes()	return '(.?)\[('.$tagregexp.')\b(.*?)(?:(\/))?\](?:(.+?)\[\/\2\])?(.?)';}/** * Regular Expression callable for do_shortcode() for calling shortcode hook. * @see get_shortcode_regex for details of the match array contents. * * @since 2.5 * @access private * @uses $shortcode_tags * * @param array $m Regular expression match array * @return mixed False on failure. */function do_shortcode_tag( $m ) {	global $shortcode_tags;	// allow [[foo]] syntax for escaping a tag	if ( $m[1] == '[' && $m[6] == ']' ) {		return substr($m[0], 1, -1);	}	$tag = $m[2];	$attr = shortcode_parse_atts( $m[3] );	if ( isset( $m[5] ) ) {		// enclosing tag - extra parameter		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, $m[5], $tag ) . $m[6];	} else {		// self-closing tag		return $m[1] . call_user_func( $shortcode_tags[$tag], $attr, NULL,  $tag ) . $m[6];	}}/** * Retrieve all attributes from the shortcodes tag. * * The attributes list has the attribute name as the key and the value of the * attribute as the value in the key/value pair. This allows for easier * retrieval of the attributes, since all attributes have to be known. * * @since 2.5 * * @param string $text * @return array List of attributes and their value. */function shortcode_parse_atts($text) {	$atts = array();	$pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';	$text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);	if ( preg_match_all($pattern, $text, $match, PREG_SET_ORDER) ) {		foreach ($match as $m) {			if (!empty($m[1]))				$atts[strtolower($m[1])] = stripcslashes($m[2]);			elseif (!empty($m[3]))				$atts[strtolower($m[3])] = stripcslashes($m[4]);			elseif (!empty($m[5]))				$atts[strtolower($m[5])] = stripcslashes($m[6]);			elseif (isset($m[7]) and strlen($m[7]))				$atts[] = stripcslashes($m[7]);			elseif (isset($m[8]))				$atts[] = stripcslashes($m[8]);		}	} else {		$atts = ltrim($text);	}	return $atts;}/** * Combine user attributes with known attributes and fill in defaults when needed. * * The pairs should be considered to be all of the attributes which are * supported by the caller and given as a list. The returned attributes will * only contain the attributes in the $pairs list. * * If the $atts list has unsupported attributes, then they will be ignored and * removed from the final returned list. * * @since 2.5 * * @param array $pairs Entire list of supported attributes and their defaults. * @param array $atts User defined attributes in shortcode tag. * @return array Combined and filtered attribute list. */function shortcode_atts($pairs, $atts) {	$atts = (array)$atts;	$out = array();	foreach($pairs as $name => $default) {		if ( array_key_exists($name, $atts) )			$out[$name] = $atts[$name];		else			$out[$name] = $default;	}	return $out;}/** * Remove all shortcode tags from the given content. * * @since 2.5 * @uses $shortcode_tags * * @param string $content Content to remove shortcode tags. * @return string Content without shortcode tags. */function strip_shortcodes( $content ) {	global $shortcode_tags;	if (empty($shortcode_tags) || !is_array($shortcode_tags))		return $content;	$pattern = get_shortcode_regex();	return preg_replace('/'.$pattern.'/s', '$1$6', $content);}add_filter('the_content', 'do_shortcode', 11); // AFTER wpautop()?>
<?php/** * Redirects to the RDF feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'rdf_url' ), 301 );?>
<?php/** * These functions are needed to load Multisite. * * @since 3.0.0 * * @package WordPress * @subpackage Multisite *//** * Whether a subdomain configuration is enabled. * * @since 3.0.0 * * @return bool True if subdomain configuration is enabled, false otherwise. */function is_subdomain_install() {	if ( defined('SUBDOMAIN_INSTALL') )		return SUBDOMAIN_INSTALL;	if ( defined('VHOST') && VHOST == 'yes' )		return true;	return false;}/** * Checks status of current blog. * * Checks if the blog is deleted, inactive, archived, or spammed. * * Dies with a default message if the blog does not pass the check. * * To change the default message when a blog does not pass the check, * use the wp-content/blog-deleted.php, blog-inactive.php and * blog-suspended.php drop-ins. * * @return bool|string Returns true on success, or drop-in file to include. */function ms_site_check() {	global $wpdb, $current_blog;	// Allow short-circuiting	$check = apply_filters('ms_site_check', null);	if ( null !== $check )		return true;	// Allow super admins to see blocked sites	if ( is_super_admin() )		return true;	if ( '1' == $current_blog->deleted ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-deleted.php' ) ) {			return WP_CONTENT_DIR . '/blog-deleted.php';		} else {			header( 'HTTP/1.1 410 Gone' );			wp_die( /*WP_I18N_USER_DELETED_BLOG*/'This user has elected to delete their account and the content is no longer available.'/*/WP_I18N_USER_DELETED_BLOG*/ );		}	}	if ( '2' == $current_blog->deleted ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-inactive.php' ) )			return WP_CONTENT_DIR . '/blog-inactive.php';		else			wp_die( sprintf( /*WP_I18N_BLOG_NOT_ACTIVATED*/'This site has not been activated yet. If you are having problems activating your site, please contact <a href="mailto:%1$s">%1$s</a>.'/*/WP_I18N_BLOG_NOT_ACTIVATED*/, str_replace( '@', ' AT ', get_site_option( 'admin_email', "support@{$current_site->domain}" ) ) ) );	}	if ( $current_blog->archived == '1' || $current_blog->spam == '1' ) {		if ( file_exists( WP_CONTENT_DIR . '/blog-suspended.php' ) ) {			return WP_CONTENT_DIR . '/blog-suspended.php';		} else {			header( 'HTTP/1.1 410 Gone' );			wp_die( /*WP_I18N_ARCHIVED*/'This site has been archived or suspended.'/*/WP_I18N_ARCHIVED*/ );		}	}	return true;}/** * Sets current site name. * * @access private * @since 3.0.0 * @return object $current_site object with site_name */function get_current_site_name( $current_site ) {	global $wpdb;	$current_site->site_name = wp_cache_get( $current_site->id . ':current_site_name', 'site-options' );	if ( ! $current_site->site_name ) {		$current_site->site_name = wp_cache_get( $current_site->id . ':site_name', 'site-options' );		if ( ! $current_site->site_name ) {			$current_site->site_name = $wpdb->get_var( $wpdb->prepare( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = %d AND meta_key = 'site_name'", $current_site->id ) );			if ( ! $current_site->site_name )				$current_site->site_name = ucfirst( $current_site->domain );		}		wp_cache_set( $current_site->id . ':current_site_name', $current_site->site_name, 'site-options' );	}	return $current_site;}/** * Sets current_site object. * * @access private * @since 3.0.0 * @return object $current_site object */function wpmu_current_site() {	global $wpdb, $current_site, $domain, $path, $sites, $cookie_domain;	if ( defined( 'DOMAIN_CURRENT_SITE' ) && defined( 'PATH_CURRENT_SITE' ) ) {		$current_site->id = defined( 'SITE_ID_CURRENT_SITE' ) ? SITE_ID_CURRENT_SITE : 1;		$current_site->domain = DOMAIN_CURRENT_SITE;		$current_site->path   = $path = PATH_CURRENT_SITE;		if ( defined( 'BLOG_ID_CURRENT_SITE' ) )			$current_site->blog_id = BLOG_ID_CURRENT_SITE;		elseif ( defined( 'BLOGID_CURRENT_SITE' ) ) // deprecated.			$current_site->blog_id = BLOGID_CURRENT_SITE;		if ( DOMAIN_CURRENT_SITE == $domain )			$current_site->cookie_domain = $cookie_domain;		elseif ( substr( $current_site->domain, 0, 4 ) == 'www.' )			$current_site->cookie_domain = substr( $current_site->domain, 4 );		else			$current_site->cookie_domain = $current_site->domain;		wp_load_core_site_options( $current_site->id );		return $current_site;	}	$current_site = wp_cache_get( 'current_site', 'site-options' );	if ( $current_site )		return $current_site;	$sites = $wpdb->get_results( "SELECT * FROM $wpdb->site" ); // usually only one site	if ( 1 == count( $sites ) ) {		$current_site = $sites[0];		wp_load_core_site_options( $current_site->id );		$path = $current_site->path;		$current_site->blog_id = $wpdb->get_var( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE domain = %s AND path = %s", $current_site->domain, $current_site->path ) );		$current_site = get_current_site_name( $current_site );		if ( substr( $current_site->domain, 0, 4 ) == 'www.' )			$current_site->cookie_domain = substr( $current_site->domain, 4 );		wp_cache_set( 'current_site', $current_site, 'site-options' );		return $current_site;	}	$path = substr( $_SERVER[ 'REQUEST_URI' ], 0, 1 + strpos( $_SERVER[ 'REQUEST_URI' ], '/', 1 ) );	if ( $domain == $cookie_domain )		$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE domain = %s AND path = %s", $domain, $path ) );	else		$current_site = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->site WHERE domain IN ( %s, %s ) AND path = %s ORDER BY CHAR_LENGTH( domain ) DESC LIMIT 1", $domain, $cookie_domain, $path ) );	if ( ! $current_site ) {		if ( $domain == $cookie_domain )			$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path='/'", $domain ) );		else			$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain IN ( %s, %s ) AND path = '/' ORDER BY CHAR_LENGTH( domain ) DESC LIMIT 1", $domain, $cookie_domain, $path ) );	}	if ( $current_site ) {		$path = $current_site->path;		$current_site->cookie_domain = $cookie_domain;		return $current_site;	}	if ( is_subdomain_install() ) {		$sitedomain = substr( $domain, 1 + strpos( $domain, '.' ) );		$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path = %s", $sitedomain, $path) );		if ( $current_site ) {			$current_site->cookie_domain = $current_site->domain;			return $current_site;		}		$current_site = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->site WHERE domain = %s AND path='/'", $sitedomain) );	}	if ( $current_site || defined( 'WP_INSTALLING' ) ) {		$path = '/';		return $current_site;	}	// Still no dice.	// @todo Update or remove WPMU codex link.	if ( 1 == count( $sites ) )		wp_die( sprintf( /*WP_I18N_BLOG_DOESNT_EXIST*/'That site does not exist. Please try <a href="%s">%s</a>.'/*/WP_I18N_BLOG_DOESNT_EXIST*/, $sites[0]->domain . $sites[0]->path ) );	else		wp_die( /*WP_I18N_NO_SITE_DEFINED*/'No site defined on this host. If you are the owner of this site, please check <a href="http://codex.wordpress.org/Debugging_WPMU">Debugging WPMU</a> for help.'/*/WP_I18N_NO_SITE_DEFINED*/ );}/** * Displays a failure message. * * Used when a blog's tables do not exist. Checks for a missing $wpdb->site table as well. * * @todo update Codex link for 3.0.0 * * @access private * @since 3.0.0 */function ms_not_installed() {	global $wpdb, $domain, $path;	$title = /*WP_I18N_FATAL_ERROR*/'Error establishing database connection'/*/WP_I18N_FATAL_ERROR*/;	$msg  = '<h1>' . $title . '</h1>';	if ( ! is_admin() )		die( $msg );	$msg .= '<p>' . /*WP_I18N_CONTACT_OWNER*/'If your site does not display, please contact the owner of this network.'/*/WP_I18N_CONTACT_OWNER*/ . '';	$msg .= ' ' . /*WP_I18N_CHECK_MYSQL*/'If you are the owner of this network please check that MySQL is running properly and all tables are error free.'/*/WP_I18N_CHECK_MYSQL*/ . '</p>';	if ( false && !$wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		$msg .= '<p>' . sprintf( /*WP_I18N_TABLES_MISSING_LONG*/'<strong>Database tables are missing.</strong> This means that MySQL is not running, WordPress was not installed properly, or someone deleted <code>%s</code>. You really should look at your database now.'/*/WP_I18N_TABLES_MISSING_LONG*/, $wpdb->site ) . '</p>';	else		$msg .= '<p>' . sprintf( /*WP_I18N_NO_SITE_FOUND*/'<strong>Could not find site <code>%1$s</code>.</strong> Searched for table <code>%2$s</code> in database <code>%3$s</code>. Is that right?'/*/WP_I18N_NO_SITE_FOUND*/, rtrim( $domain . $path, '/' ), $wpdb->blogs, DB_NAME ) . '</p>';	$msg .= '<p><strong>' . /*WP_I18N_WHAT_DO_I_DO*/'What do I do now?'/*WP_I18N_WHAT_DO_I_DO*/ . '</strong> ';	$msg .= /*WP_I18N_RTFM*/'Read the <a target="_blank" href="http://codex.wordpress.org/Debugging_WPMU">bug report</a> page. Some of the guidelines there may help you figure out what went wrong.'/*/WP_I18N_RTFM*/;	$msg .= ' ' . /*WP_I18N_STUCK*/'If you&#8217;re still stuck with this message, then check that your database contains the following tables:'/*/WP_I18N_STUCK*/ . '</p><ul>';	foreach ( $wpdb->tables('global') as $t => $table ) {		if ( 'sitecategories' == $t )			continue;		$msg .= '<li>' . $table . '</li>';	}	$msg .= '</ul>';	wp_die( $msg, $title );}?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function home_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;require(ABSPATH . WPINC . '/script-loader.php');require(ABSPATH . WPINC . '/version.php');$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$expires_offset = 31536000;$out = '';$wp_scripts = new WP_Scripts();wp_default_scripts($wp_scripts);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_scripts->registered) )		continue;	$path = ABSPATH . $wp_scripts->registered[$handle]->src;	$out .= get_file($path) . "\n";}header('Content-Type: application/x-javascript; charset=UTF-8');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * The plugin API is located in this file, which allows for creating actions * and filters and hooking functions, and methods. The functions or methods will * then be run when the action or filter is called. * * The API callback examples reference functions, but can be methods of classes. * To hook methods, you'll need to pass an array one of two ways. * * Any of the syntaxes explained in the PHP documentation for the * {@link http://us2.php.net/manual/en/language.pseudo-types.php#language.types.callback 'callback'} * type are valid. * * Also see the {@link http://codex.wordpress.org/Plugin_API Plugin API} for * more information and examples on how to use a lot of these functions. * * @package WordPress * @subpackage Plugin * @since 1.5 *//** * Hooks a function or method to a specific filter action. * * Filters are the hooks that WordPress launches to modify text of various types * before adding it to the database or sending it to the browser screen. Plugins * can specify that one or more of its PHP functions is executed to * modify specific types of text at these times, using the Filter API. * * To use the API, the following code should be used to bind a callback to the * filter. * * <code> * function example_hook($example) { echo $example; } * add_filter('example_filter', 'example_hook'); * </code> * * In WordPress 1.5.1+, hooked functions can take extra arguments that are set * when the matching do_action() or apply_filters() call is run. The * $accepted_args allow for calling functions only when the number of args * match. Hooked functions can take extra arguments that are set when the * matching do_action() or apply_filters() call is run. For example, the action * comment_id_not_found will pass any functions that hook onto it the ID of the * requested comment. * * <strong>Note:</strong> the function will return true no matter if the * function was hooked fails or not. There are no checks for whether the * function exists beforehand and no checks to whether the <tt>$function_to_add * is even a string. It is up to you to take care and this is done for * optimization purposes, so everything is as quick as possible. * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters added in the form of *	wp_filter['tag']['array of priorities']['array of functions serialized']['array of ['array (functions, accepted_args)']'] * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added, it doesn't need to run through that process. * * @param string $tag The name of the filter to hook the $function_to_add to. * @param callback $function_to_add The name of the function to be called when the filter is applied. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). * @return boolean true */function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	global $wp_filter, $merged_filters;	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);	$wp_filter[$tag][$priority][$idx] = array('function' => $function_to_add, 'accepted_args' => $accepted_args);	unset( $merged_filters[ $tag ] );	return true;}/** * Check if any filter has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @global array $wp_filter Stores all of the filters * * @param string $tag The name of the filter hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_filter($tag, $function_to_check = false) {	global $wp_filter;	$has = !empty($wp_filter[$tag]);	if ( false === $function_to_check || false == $has )		return $has;	if ( !$idx = _wp_filter_build_unique_id($tag, $function_to_check, false) )		return false;	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {		if ( isset($wp_filter[$tag][$priority][$idx]) )			return $priority;	}	return false;}/** * Call the functions added to a filter hook. * * The callback functions attached to filter hook $tag are invoked by calling * this function. This function can be used to create a new filter hook by * simply calling this function with the name of the new hook specified using * the $tag parameter. * * The function allows for additional arguments to be added and passed to hooks. * <code> * function example_hook($string, $arg1, $arg2) * { *		//Do stuff *		return $string; * } * $value = apply_filters('example_filter', 'filter me', 'arg1', 'arg2'); * </code> * * @package WordPress * @subpackage Plugin * @since 0.71 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param mixed $value The value on which the filters hooked to <tt>$tag</tt> are applied on. * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag</tt>. * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters($tag, $value) {	global $wp_filter, $merged_filters, $wp_current_filter;	$args = array();	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$args = func_get_args();		_wp_call_all_hook($args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $value;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	if ( empty($args) )		$args = func_get_args();	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) ){				$args[1] = $value;				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));			}	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $value;}/** * Execute functions hooked on a specific filter hook, specifying arguments in an array. * * @see apply_filters() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 3.0.0 * @global array $wp_filter Stores all of the filters * @global array $merged_filters Merges the filter hooks using this function. * @global array $wp_current_filter stores the list of current filters with the current one last * * @param string $tag The name of the filter hook. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return mixed The filtered value after all hooked functions are applied to it. */function apply_filters_ref_array($tag, $args) {	global $wp_filter, $merged_filters, $wp_current_filter;	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return $args[0];	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop( $wp_current_filter );	return $args[0];}/** * Removes a function from a specified filter hook. * * This function removes a function attached to a specified filter hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * To remove a hook, the $function_to_remove and $priority arguments must match * when the hook was added. This goes for both filters and actions. No warning * will be given on removal failure. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The filter hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional. The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function existed before it was removed. */function remove_filter($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	$function_to_remove = _wp_filter_build_unique_id($tag, $function_to_remove, $priority);	$r = isset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);	if ( true === $r) {		unset($GLOBALS['wp_filter'][$tag][$priority][$function_to_remove]);		if ( empty($GLOBALS['wp_filter'][$tag][$priority]) )			unset($GLOBALS['wp_filter'][$tag][$priority]);		unset($GLOBALS['merged_filters'][$tag]);	}	return $r;}/** * Remove all of the hooks from a filter. * * @since 2.7 * * @param string $tag The filter to remove hooks from. * @param int $priority The priority number to remove. * @return bool True when finished. */function remove_all_filters($tag, $priority = false) {	global $wp_filter, $merged_filters;	if( isset($wp_filter[$tag]) ) {		if( false !== $priority && isset($wp_filter[$tag][$priority]) )			unset($wp_filter[$tag][$priority]);		else			unset($wp_filter[$tag]);	}	if( isset($merged_filters[$tag]) )		unset($merged_filters[$tag]);	return true;}/** * Retrieve the name of the current filter or action. * * @package WordPress * @subpackage Plugin * @since 2.5 * * @return string Hook name of the current filter or action. */function current_filter() {	global $wp_current_filter;	return end( $wp_current_filter );}/** * Hooks a function on to a specific action. * * Actions are the hooks that the WordPress core launches at specific points * during execution, or when specific events occur. Plugins can specify that * one or more of its PHP functions are executed at these points, using the * Action API. * * @uses add_filter() Adds an action. Parameter list and functionality are the same. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The name of the action to which the $function_to_add is hooked. * @param callback $function_to_add The name of the function you wish to be called. * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action. * @param int $accepted_args optional. The number of arguments the function accept (default 1). */function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {	return add_filter($tag, $function_to_add, $priority, $accepted_args);}/** * Execute functions hooked on a specific action hook. * * This function invokes all functions attached to action hook $tag. It is * possible to create new action hooks by simply calling this function, * specifying the name of the new hook using the <tt>$tag</tt> parameter. * * You can pass extra arguments to the hooks, much like you can with * apply_filters(). * * @see apply_filters() This function works similar with the exception that * nothing is returned and only the functions or methods are called. * * @package WordPress * @subpackage Plugin * @since 1.2 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action. * @return null Will return null if $tag does not exist in $wp_filter array */function do_action($tag, $arg = '') {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	$args = array();	if ( is_array($arg) && 1 == count($arg) && isset($arg[0]) && is_object($arg[0]) ) // array(&$this)		$args[] =& $arg[0];	else		$args[] = $arg;	for ( $a = 2; $a < func_num_args(); $a++ )		$args[] = func_get_arg($a);	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach ( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Retrieve the number times an action is fired. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action hook. * @return int The number of times action hook <tt>$tag</tt> is fired */function did_action($tag) {	global $wp_actions;	if ( ! isset( $wp_actions ) || ! isset( $wp_actions[$tag] ) )		return 0;	return $wp_actions[$tag];}/** * Execute functions hooked on a specific action hook, specifying arguments in an array. * * @see do_action() This function is identical, but the arguments passed to the * functions hooked to <tt>$tag</tt> are supplied using an array. * * @package WordPress * @subpackage Plugin * @since 2.1 * @global array $wp_filter Stores all of the filters * @global array $wp_actions Increments the amount of times action was triggered. * * @param string $tag The name of the action to be executed. * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt> * @return null Will return null if $tag does not exist in $wp_filter array */function do_action_ref_array($tag, $args) {	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;	if ( ! isset($wp_actions) )		$wp_actions = array();	if ( ! isset($wp_actions[$tag]) )		$wp_actions[$tag] = 1;	else		++$wp_actions[$tag];	$wp_current_filter[] = $tag;	// Do 'all' actions first	if ( isset($wp_filter['all']) ) {		$all_args = func_get_args();		_wp_call_all_hook($all_args);	}	if ( !isset($wp_filter[$tag]) ) {		array_pop($wp_current_filter);		return;	}	// Sort	if ( !isset( $merged_filters[ $tag ] ) ) {		ksort($wp_filter[$tag]);		$merged_filters[ $tag ] = true;	}	reset( $wp_filter[ $tag ] );	do {		foreach( (array) current($wp_filter[$tag]) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));	} while ( next($wp_filter[$tag]) !== false );	array_pop($wp_current_filter);}/** * Check if any action has been registered for a hook. * * @package WordPress * @subpackage Plugin * @since 2.5 * @see has_filter() has_action() is an alias of has_filter(). * * @param string $tag The name of the action hook. * @param callback $function_to_check optional.  If specified, return the priority of that function on this hook or false if not attached. * @return int|boolean Optionally returns the priority on that hook for the specified function. */function has_action($tag, $function_to_check = false) {	return has_filter($tag, $function_to_check);}/** * Removes a function from a specified action hook. * * This function removes a function attached to a specified action hook. This * method can be used to remove default functions attached to a specific filter * hook and possibly replace them with a substitute. * * @package WordPress * @subpackage Plugin * @since 1.2 * * @param string $tag The action hook to which the function to be removed is hooked. * @param callback $function_to_remove The name of the function which should be removed. * @param int $priority optional The priority of the function (default: 10). * @param int $accepted_args optional. The number of arguments the function accpets (default: 1). * @return boolean Whether the function is removed. */function remove_action($tag, $function_to_remove, $priority = 10, $accepted_args = 1) {	return remove_filter($tag, $function_to_remove, $priority, $accepted_args);}/** * Remove all of the hooks from an action. * * @since 2.7 * * @param string $tag The action to remove hooks from. * @param int $priority The priority number to remove them from. * @return bool True when finished. */function remove_all_actions($tag, $priority = false) {	return remove_all_filters($tag, $priority);}//// Functions for handling plugins.///** * Gets the basename of a plugin. * * This method extracts the name of a plugin from its filename. * * @package WordPress * @subpackage Plugin * @since 1.5 * * @access private * * @param string $file The filename of plugin. * @return string The name of a plugin. * @uses WP_PLUGIN_DIR */function plugin_basename($file) {	$file = str_replace('\\','/',$file); // sanitize for Win32 installs	$file = preg_replace('|/+|','/', $file); // remove any duplicate slash	$plugin_dir = str_replace('\\','/',WP_PLUGIN_DIR); // sanitize for Win32 installs	$plugin_dir = preg_replace('|/+|','/', $plugin_dir); // remove any duplicate slash	$mu_plugin_dir = str_replace('\\','/',WPMU_PLUGIN_DIR); // sanitize for Win32 installs	$mu_plugin_dir = preg_replace('|/+|','/', $mu_plugin_dir); // remove any duplicate slash	$file = preg_replace('#^' . preg_quote($plugin_dir, '#') . '/|^' . preg_quote($mu_plugin_dir, '#') . '/#','',$file); // get relative path from plugins dir	$file = trim($file, '/');	return $file;}/** * Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the filesystem path of the directory that contains the plugin */function plugin_dir_path( $file ) {	return trailingslashit( dirname( $file ) );}/** * Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in * @package WordPress * @subpackage Plugin * @since 2.8 * * @param string $file The filename of the plugin (__FILE__) * @return string the URL path of the directory that contains the plugin */function plugin_dir_url( $file ) {	return trailingslashit( plugins_url( '', $file ) );}/** * Set the activation hook for a plugin. * * When a plugin is activated, the action 'activate_PLUGINNAME' hook is * activated. In the name of this hook, PLUGINNAME is replaced with the name of * the plugin, including the optional subdirectory. For example, when the plugin * is located in wp-content/plugin/sampleplugin/sample.php, then the name of * this hook will become 'activate_sampleplugin/sample.php'. When the plugin * consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_activation_hook($file, $function) {	$file = plugin_basename($file);	add_action('activate_' . $file, $function);}/** * Set the deactivation hook for a plugin. * * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is * deactivated. In the name of this hook, PLUGINNAME is replaced with the name * of the plugin, including the optional subdirectory. For example, when the * plugin is located in wp-content/plugin/sampleplugin/sample.php, then * the name of this hook will become 'activate_sampleplugin/sample.php'. * * When the plugin consists of only one file and is (as by default) located at * wp-content/plugin/sample.php the name of this hook will be * 'activate_sample.php'. * * @package WordPress * @subpackage Plugin * @since 2.0 * * @param string $file The filename of the plugin including the path. * @param callback $function the function hooked to the 'activate_PLUGIN' action. */function register_deactivation_hook($file, $function) {	$file = plugin_basename($file);	add_action('deactivate_' . $file, $function);}/** * Set the uninstallation hook for a plugin. * * Registers the uninstall hook that will be called when the user clicks on the * uninstall link that calls for the plugin to uninstall itself. The link won't * be active unless the plugin hooks into the action. * * The plugin should not run arbitrary code outside of functions, when * registering the uninstall hook. In order to run using the hook, the plugin * will have to be included, which means that any code laying outside of a * function will be run during the uninstall process. The plugin should not * hinder the uninstall process. * * If the plugin can not be written without running code within the plugin, then * the plugin should create a file named 'uninstall.php' in the base plugin * folder. This file will be called, if it exists, during the uninstall process * bypassing the uninstall hook. The plugin, when using the 'uninstall.php' * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before * executing. * * @since 2.7 * * @param string $file * @param callback $callback The callback to run when the hook is called. */function register_uninstall_hook($file, $callback) {	// The option should not be autoloaded, because it is not needed in most	// cases. Emphasis should be put on using the 'uninstall.php' way of	// uninstalling the plugin.	$uninstallable_plugins = (array) get_option('uninstall_plugins');	$uninstallable_plugins[plugin_basename($file)] = $callback;	update_option('uninstall_plugins', $uninstallable_plugins);}/** * Calls the 'all' hook, which will process the functions hooked into it. * * The 'all' hook passes all of the arguments or parameters that were used for * the hook, which this function was called for. * * This function is used internally for apply_filters(), do_action(), and * do_action_ref_array() and is not meant to be used from outside those * functions. This function does not check for the existence of the all hook, so * it will fail unless the all hook exists prior to this function call. * * @package WordPress * @subpackage Plugin * @since 2.5 * @access private * * @uses $wp_filter Used to process all of the functions in the 'all' hook * * @param array $args The collected parameters from the hook that was called. * @param string $hook Optional. The hook name that was used to call the 'all' hook. */function _wp_call_all_hook($args) {	global $wp_filter;	reset( $wp_filter['all'] );	do {		foreach( (array) current($wp_filter['all']) as $the_ )			if ( !is_null($the_['function']) )				call_user_func_array($the_['function'], $args);	} while ( next($wp_filter['all']) !== false );}/** * Build Unique ID for storage and retrieval. * * The old way to serialize the callback caused issues and this function is the * solution. It works by checking for objects and creating an a new property in * the class to keep track of the object and new objects of the same class that * need to be added. * * It also allows for the removal of actions and filters for objects after they * change class properties. It is possible to include the property $wp_filter_id * in your class and set it to "null" or a number to bypass the workaround. * However this will prevent you from adding new classes and any new classes * will overwrite the previous hook by the same class. * * Functions and static method callbacks are just returned as strings and * shouldn't have any speed penalty. * * @package WordPress * @subpackage Plugin * @access private * @since 2.2.3 * @link http://trac.wordpress.org/ticket/3875 * * @global array $wp_filter Storage for all of the filters and actions * @param string $tag Used in counting how many hooks were applied * @param callback $function Used for creating unique id * @param int|bool $priority Used in counting how many hooks were applied.  If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise. * @param string $type filter or action * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a uniqe id. */function _wp_filter_build_unique_id($tag, $function, $priority) {	global $wp_filter;	static $filter_id_count = 0;	if ( is_string($function) )		return $function;	if ( is_object($function) ) {		// Closures are currently implemented as objects		$function = array( $function, '' );	} else {		$function = (array) $function;	}	if (is_object($function[0]) ) {		// Object Class Calling		if ( function_exists('spl_object_hash') ) {			return spl_object_hash($function[0]) . $function[1];		} else {			$obj_idx = get_class($function[0]).$function[1];			if ( !isset($function[0]->wp_filter_id) ) {				if ( false === $priority )					return false;				$obj_idx .= isset($wp_filter[$tag][$priority]) ? count((array)$wp_filter[$tag][$priority]) : $filter_id_count;				$function[0]->wp_filter_id = $filter_id_count;				++$filter_id_count;			} else {				$obj_idx .= $function[0]->wp_filter_id;			}			return $obj_idx;		}	} else if ( is_string($function[0]) ) {		// Static Calling		return $function[0].$function[1];	}}?>
<?php/** * The custom background script. * * @package WordPress * @subpackage Administration *//** * The custom background class. * * @since 3.0.0 * @package WordPress * @subpackage Administration */class Custom_Background {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since unknown	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 3.0.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Background	 */	function Custom_Background($admin_header_callback = '', $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Background admin page.	 *	 * @since 3.0.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Background'), __('Background'), 'edit_theme_options', 'custom-background', array(&$this, 'admin_page'));		add_action("load-$page", array(&$this, 'admin_load'));		add_action("load-$page", array(&$this, 'take_action'), 49);		add_action("load-$page", array(&$this, 'handle_upload'), 49);		if ( $this->admin_header_callback )			add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Set up the enqueue for the CSS & JavaScript files.	 *	 * @since 3.0.0	 */	function admin_load() {		add_contextual_help( $this->page, '<p>' . __( 'You can customize the look of your site without touching any of your theme&#8217;s code by using a custom background. Your background can be an image or a color.' ) . '</p>' .		'<p>' . __( 'To use a background image, simply upload it, then choose your display options below. You can display a single instance of your image, or tile it to fill the screen. You can have your background fixed in place, so your site content moves on top of it, or you can have it scroll with your site.' ) . '</p>' .		'<p>' . __( 'You can also choose a background color. If you know the hexadecimal code for the color you want, enter it in the Color field. If not, click on the Select a Color link, and a color picker will allow you to choose the exact shade you want.' ) . '</p>' .		'<p>' . __( 'Don&#8217;t forget to click on the Save Changes button when you are finished.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Background_SubPanel" target="_blank">Documentation on Custom Background</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );		wp_enqueue_script('custom-background');		wp_enqueue_style('farbtastic');	}	/**	 * Execute custom background modification.	 *	 * @since 3.0.0	 */	function take_action() {		if ( empty($_POST) )			return;		if ( isset($_POST['reset-background']) ) {			check_admin_referer('custom-background-reset', '_wpnonce-custom-background-reset');			remove_theme_mod('background_image');			remove_theme_mod('background_image_thumb');			$this->updated = true;			return;		}		if ( isset($_POST['remove-background']) ) {			// @TODO: Uploaded files are not removed here.			check_admin_referer('custom-background-remove', '_wpnonce-custom-background-remove');			set_theme_mod('background_image', '');			set_theme_mod('background_image_thumb', '');			$this->updated = true;			return;		}		if ( isset($_POST['background-repeat']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-repeat'], array('repeat', 'no-repeat', 'repeat-x', 'repeat-y')) )				$repeat = $_POST['background-repeat'];			else				$repeat = 'repeat';			set_theme_mod('background_repeat', $repeat);		}		if ( isset($_POST['background-position-x']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-position-x'], array('center', 'right', 'left')) )				$position = $_POST['background-position-x'];			else				$position = 'left';			set_theme_mod('background_position_x', $position);		}		if ( isset($_POST['background-attachment']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-attachment'], array('fixed', 'scroll')) )				$attachment = $_POST['background-attachment'];			else				$attachment = 'fixed';			set_theme_mod('background_attachment', $attachment);		}		if ( isset($_POST['background-color']) ) {			check_admin_referer('custom-background');			$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['background-color']);			if ( strlen($color) == 6 || strlen($color) == 3 )				set_theme_mod('background_color', $color);			else				set_theme_mod('background_color', '');		}		$this->updated = true;	}	/**	 * Display the custom background page.	 *	 * @since 3.0.0	 */	function admin_page() {?><div class="wrap" id="custom-background"><?php screen_icon(); ?><h2><?php _e('Custom Background'); ?></h2><?php if ( !empty($this->updated) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Background updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php }	if ( $this->admin_image_div_callback ) {		call_user_func($this->admin_image_div_callback);	} else {?><h3><?php _e('Background Image'); ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e('Preview'); ?></th><td><?php$background_styles = '';if ( $bgcolor = get_background_color() )	$background_styles .= 'background-color: #' . $bgcolor . ';';if ( get_background_image() ) {	// background-image URL must be single quote, see below	$background_styles .= ' background-image: url(\'' . get_theme_mod('background_image_thumb', '') . '\');'		. ' background-repeat: ' . get_theme_mod('background_repeat', 'repeat') . ';'		. ' background-position: top ' . get_theme_mod('background_position_x', 'left');}?><div id="custom-background-image" style="<?php echo $background_styles; ?>"><?php // must be double quote, see above ?><?php if ( get_background_image() ) { ?><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><br /><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><?php } ?></div><?php } ?></td></tr><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e('Remove Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-remove', '_wpnonce-custom-background-remove'); ?><input type="submit" class="button" name="remove-background" value="<?php esc_attr_e('Remove Background Image'); ?>" /><br/><?php _e('This will remove the background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><?php if ( defined( 'BACKGROUND_IMAGE' ) ) : // Show only if a default background image exists ?><tr valign="top"><th scope="row"><?php _e('Restore Original Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-reset', '_wpnonce-custom-background-reset'); ?><input type="submit" class="button" name="reset-background" value="<?php esc_attr_e('Restore Original Image'); ?>" /><br/><?php _e('This will restore the original background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Upload Image'); ?></th><td><form enctype="multipart/form-data" id="upload-form" method="post" action=""><label for="upload"><?php _e('Choose an image from your computer:'); ?></label><br /><input type="file" id="upload" name="import" /><input type="hidden" name="action" value="save" /><?php wp_nonce_field('custom-background-upload', '_wpnonce-custom-background-upload') ?><input type="submit" class="button" value="<?php esc_attr_e('Upload'); ?>" /></p></form></td></tr></tbody></table><h3><?php _e('Display Options') ?></h3><form method="post" action=""><table class="form-table"><tbody><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Position' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Position' ); ?></span></legend><label><input name="background-position-x" type="radio" value="left"<?php checked('left', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Left') ?></label><label><input name="background-position-x" type="radio" value="center"<?php checked('center', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Center') ?></label><label><input name="background-position-x" type="radio" value="right"<?php checked('right', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Right') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Repeat' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Repeat' ); ?></span></legend><label><input type="radio" name="background-repeat" value="no-repeat"<?php checked('no-repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('No Repeat'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat"<?php checked('repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-x"<?php checked('repeat-x', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Horizontally'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-y"<?php checked('repeat-y', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Vertically'); ?></option></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Attachment' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Attachment' ); ?></span></legend><label><input name="background-attachment" type="radio" value="scroll" <?php checked('scroll', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Scroll') ?></label><label><input name="background-attachment" type="radio" value="fixed" <?php checked('fixed', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Fixed') ?></label></fieldset></td></tr><?php endif; // get_background_image() ?><tr valign="top"><th scope="row"><?php _e( 'Color' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Color' ); ?></span></legend><input type="text" name="background-color" id="background-color" value="#<?php echo esc_attr(get_background_color()) ?>" /><a class="hide-if-no-js" href="#" id="pickcolor"><?php _e('Select a Color'); ?></a><div id="colorPickerDiv" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></fieldset></td></tr></tbody></table><?php wp_nonce_field('custom-background'); ?><p class="submit"><input type="submit" class="button-primary" name="save-background-options" value="<?php esc_attr_e('Save Changes'); ?>" /></p></form></div><?php	}	/**	 * Handle a Image upload for the background image.	 *	 * @since 3.0.0	 */	function handle_upload() {		if ( empty($_FILES) )			return;		check_admin_referer('custom-background-upload', '_wpnonce-custom-background-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'] );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(			'post_title' => $filename,			'post_content' => $url,			'post_mime_type' => $type,			'guid' => $url		);		// Save the data		$id = wp_insert_attachment($object, $file);		// Add the meta-data		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		set_theme_mod('background_image', esc_url($url));		$thumbnail = wp_get_attachment_image_src( $id, 'thumbnail' );		set_theme_mod('background_image_thumb', esc_url( $thumbnail[0] ) );		do_action('wp_create_file_in_uploads', $file, $id); // For replication		$this->updated = true;	}}?>
<?php/** * Loads the correct template based on the visitor's url * @package WordPress */if ( defined('WP_USE_THEMES') && WP_USE_THEMES )	do_action('template_redirect');// Process feeds and trackbacks even if not using themes.if ( is_robots() ) :	do_action('do_robots');	return;elseif ( is_feed() ) :	do_feed();	return;elseif ( is_trackback() ) :	include( ABSPATH . 'wp-trackback.php' );	return;endif;if ( defined('WP_USE_THEMES') && WP_USE_THEMES ) :	$template = false;	if     ( is_404()            && $template = get_404_template()            ) :	elseif ( is_search()         && $template = get_search_template()         ) :	elseif ( is_tax()            && $template = get_taxonomy_template()       ) :	elseif ( is_front_page()     && $template = get_front_page_template()     ) :	elseif ( is_home()           && $template = get_home_template()           ) :	elseif ( is_attachment()     && $template = get_attachment_template()     ) :		remove_filter('the_content', 'prepend_attachment');	elseif ( is_single()         && $template = get_single_template()         ) :	elseif ( is_page()           && $template = get_page_template()           ) :	elseif ( is_category()       && $template = get_category_template()       ) :	elseif ( is_tag()            && $template = get_tag_template()            ) :	elseif ( is_author()         && $template = get_author_template()         ) :	elseif ( is_date()           && $template = get_date_template()           ) :	elseif ( is_archive()        && $template = get_archive_template()        ) :	elseif ( is_comments_popup() && $template = get_comments_popup_template() ) :	elseif ( is_paged()          && $template = get_paged_template()          ) :	else :		$template = get_index_template();	endif;	if ( $template = apply_filters( 'template_include', $template ) )		include( $template );	return;endif;?>
<?php/** * Handles Comment Post to WordPress and prevents duplicate comment posting. * * @package WordPress */if ( 'POST' != $_SERVER['REQUEST_METHOD'] ) {	header('Allow: POST');	header('HTTP/1.1 405 Method Not Allowed');	header('Content-Type: text/plain');	exit;}/** Sets up the WordPress Environment. */require( dirname(__FILE__) . '/wp-load.php' );nocache_headers();$comment_post_ID = isset($_POST['comment_post_ID']) ? (int) $_POST['comment_post_ID'] : 0;$post = get_post($comment_post_ID);if ( empty($post->comment_status) ) {	do_action('comment_id_not_found', $comment_post_ID);	exit;}// get_post_status() will get the parent status for attachments.$status = get_post_status($post);$status_obj = get_post_status_object($status);if ( !comments_open($comment_post_ID) ) {	do_action('comment_closed', $comment_post_ID);	wp_die( __('Sorry, comments are closed for this item.') );} elseif ( 'trash' == $status ) {	do_action('comment_on_trash', $comment_post_ID);	exit;} elseif ( !$status_obj->public && !$status_obj->private ) {	do_action('comment_on_draft', $comment_post_ID);	exit;} elseif ( post_password_required($comment_post_ID) ) {	do_action('comment_on_password_protected', $comment_post_ID);	exit;} else {	do_action('pre_comment_on_post', $comment_post_ID);}$comment_author       = ( isset($_POST['author']) )  ? trim(strip_tags($_POST['author'])) : null;$comment_author_email = ( isset($_POST['email']) )   ? trim($_POST['email']) : null;$comment_author_url   = ( isset($_POST['url']) )     ? trim($_POST['url']) : null;$comment_content      = ( isset($_POST['comment']) ) ? trim($_POST['comment']) : null;// If the user is logged in$user = wp_get_current_user();if ( $user->ID ) {	if ( empty( $user->display_name ) )		$user->display_name=$user->user_login;	$comment_author       = $wpdb->escape($user->display_name);	$comment_author_email = $wpdb->escape($user->user_email);	$comment_author_url   = $wpdb->escape($user->user_url);	if ( current_user_can('unfiltered_html') ) {		if ( wp_create_nonce('unfiltered-html-comment_' . $comment_post_ID) != $_POST['_wp_unfiltered_html_comment'] ) {			kses_remove_filters(); // start with a clean slate			kses_init_filters(); // set up the filters		}	}} else {	if ( get_option('comment_registration') || 'private' == $status )		wp_die( __('Sorry, you must be logged in to post a comment.') );}$comment_type = '';if ( get_option('require_name_email') && !$user->ID ) {	if ( 6 > strlen($comment_author_email) || '' == $comment_author )		wp_die( __('Error: please fill the required fields (name, email).') );	elseif ( !is_email($comment_author_email))		wp_die( __('Error: please enter a valid email address.') );}if ( '' == $comment_content )	wp_die( __('Error: please type a comment.') );$comment_parent = isset($_POST['comment_parent']) ? absint($_POST['comment_parent']) : 0;$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');$comment_id = wp_new_comment( $commentdata );$comment = get_comment($comment_id);if ( !$user->ID ) {	$comment_cookie_lifetime = apply_filters('comment_cookie_lifetime', 30000000);	setcookie('comment_author_' . COOKIEHASH, $comment->comment_author, time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);	setcookie('comment_author_email_' . COOKIEHASH, $comment->comment_author_email, time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);	setcookie('comment_author_url_' . COOKIEHASH, esc_url($comment->comment_author_url), time() + $comment_cookie_lifetime, COOKIEPATH, COOKIE_DOMAIN);}$location = empty($_POST['redirect_to']) ? get_comment_link($comment_id) : $_POST['redirect_to'] . '#comment-' . $comment_id;$location = apply_filters('comment_post_redirect', $location, $comment);wp_redirect($location);?>
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 2.0.4                                                          ||   Contact: via sourceforge.net support pages (also www.codeworxtech.com)  ||      Info: http://phpmailer.sourceforge.net                               ||   Support: http://sourceforge.net/projects/phpmailer/                     || ------------------------------------------------------------------------- ||    Author: Andy Prevost (project admininistrator)                         ||    Author: Brent R. Matzelle (original founder)                           || Copyright (c) 2004-2007, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         || ------------------------------------------------------------------------- || We offer a number of paid services (www.codeworxtech.com):                || - Web Hosting on highly optimized fast and secure servers                 || - Technology Consulting                                                   || - Oursourcing (highly qualified programmers and graphic designers)        |'---------------------------------------------------------------------------' *//** * SMTP is rfc 821 compliant and implements all the rfc 821 SMTP * commands except TURN which will always return a not implemented * error. SMTP also provides some utility methods for sending mail * to an SMTP server. * @package PHPMailer * @author Chris Ryan */class SMTP{  /**   *  SMTP server port   *  @var int   */  var $SMTP_PORT = 25;  /**   *  SMTP reply line ending   *  @var string   */  var $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  var $do_debug;       # the level of debug to perform  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  var $do_verp = false;  /**#@+   * @access private   */  var $smtp_conn;      # the socket to the server  var $error;          # error if any on the last call  var $helo_rply;      # the reply the server sent to us for HELO  /**#@-*/  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return void   */  function SMTP() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /*************************************************************   *                    CONNECTION FUNCTIONS                  *   ***********************************************************/  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @return bool   */  function Connect($host,$port=0,$tval=30) {    # set the error val to null so there is no confusion    $this->error = null;    # make sure we are __not__ connected    if($this->connected()) {      # ok we are connected! what should we do?      # for now we will just give an error saying we      # are already connected      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    #connect to the smtp server    $this->smtp_conn = fsockopen($host,    # the host of the server                                 $port,    # the port to use                                 $errno,   # error number if any                                 $errstr,  # error message if any                                 $tval);   # give up after ? secs    # verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": $errstr ($errno)" . $this->CRLF;      }      return false;    }    # sometimes the SMTP server takes a little longer to respond    # so we will give it a longer timeout for the first read    // Windows still does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN")     socket_set_timeout($this->smtp_conn, $tval, 0);    # get any announcement stuff    $announce = $this->get_lines();    # set the timeout  of any socket functions at 1/10 of a second    //if(function_exists("socket_set_timeout"))    //   socket_set_timeout($this->smtp_conn, 0, 100000);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $announce;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @return bool   */  function Authenticate($username, $password) {    // Start authentication    fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "AUTH not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded username    fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "Username not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded password    fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 235) {      $this->error =        array("error" => "Password not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access private   * @return bool   */  function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        # hmm this is an odd situation... the socket is        # valid but we are not connected anymore        if($this->do_debug >= 1) {            echo "SMTP -> NOTICE:" . $this->CRLF .                 "EOF caught while checking if connected";        }        $this->Close();        return false;      }      return true; # everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  function Close() {    $this->error = null; # so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      # close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /***************************************************************   *                        SMTP COMMANDS                       *   *************************************************************/  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being separated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Data($msg_data) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # the server is ready to accept data!    # according to rfc 821 we should not send more than 1000    # including the CRLF    # characters on a single line so we will break the data up    # into lines by \r and/or \n then if needed we will break    # each of those into smaller lines to fit within the limit.    # in addition we will be looking for lines that start with    # a period '.' and append and additional period '.' to that    # line. NOTE: this does not count towards are limit.    # normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    # we need to find a good way to determine is headers are    # in the msg_data or if it is a straight msg body    # currently I am assuming rfc 822 definitions of msg headers    # and if the first field of the first line (':' sperated)    # does not contain a space then it _should_ be a header    # and we can process all lines before a blank "" line as    # headers.    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; # used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      # ok we need to break this line up into several      # smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        # Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;        }        $lines_out[] = substr($line,0,$pos);        $line = substr($line,$pos + 1);        # if we are processing headers we need to        # add a LWSP-char to the front of the new line        # rfc 822 on long msg headers        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      # now send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    # ok all the message data has been sent so lets get this    # over with aleady    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Expand takes the name and asks the server to list all the   * people who are members of the _list_. Expand will return   * back and array of the result or false if an error occurs.   * Each value in the array returned has the format of:   *     [ <full-name> <sp> ] <path>   * The definition of <path> is defined in rfc 821   *   * Implements rfc 821: EXPN <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 550   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string array   */  function Expand($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Expand() without being connected");      return false;    }    fputs($this->smtp_conn,"EXPN " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "EXPN not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # parse the reply and place in our array to return to user    $entries = explode($this->CRLF,$rply);    while(list(,$l) = @each($entries)) {      $list[] = substr($l,4);    }    return $list;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @return bool   */  function Hello($host="") {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    # if a hostname for the HELO was not specified determine    # a suitable one to send    if(empty($host)) {      # we need to determine some sort of appopiate default      # to send to the server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host))    {      if(!$this->SendHello("HELO", $host))          return false;    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @return bool   */  function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER: " . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Gets help information on the keyword specified. If the keyword   * is not specified then returns generic help, ussually contianing   * A list of keywords that help is available on. This function   * returns the results back to the user. It is up to the user to   * handle the returned data. If an error occurs then false is   * returned with $this->error set appropiately.   *   * Implements rfc 821: HELP [ <SP> <string> ] <CRLF>   *   * SMTP CODE SUCCESS: 211,214   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string   */  function Help($keyword="") {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Help() without being connected");      return false;    }    $extra = "";    if(!empty($keyword)) {      $extra = " " . $keyword;    }    fputs($this->smtp_conn,"HELP" . $extra . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 211 && $code != 214) {      $this->error =        array("error" => "HELP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @return bool   */  function Mail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? "XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the command NOOP to the SMTP server.   *   * Implements from rfc 821: NOOP <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 421   * @access public   * @return bool   */  function Noop() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Noop() without being connected");      return false;    }    fputs($this->smtp_conn,"NOOP" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "NOOP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @return bool   */  function Quit($close_on_error=true) {    $this->error = null; # so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    # send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    # get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $byemsg;    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      # use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $e["error"] . ": " .                 $byemsg . $this->CRLF;      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Recipient($to) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  function Reset() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in.   *   * Implements rfc 821: SEND <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function Send($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Send() without being connected");      return false;    }    fputs($this->smtp_conn,"SEND FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SEND not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendAndMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in or mail it to them if they are not.   *   * Implements rfc 821: SOML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendOrMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendOrMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SOML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SOML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF;    }    return false;  }  /**   * Verifies that the name is recognized by the server.   * Returns false if the name could not be verified otherwise   * the response from the server is returned.   *   * Implements rfc 821: VRFY <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,553   * SMTP CODE ERROR  : 500,501,502,421   * @access public   * @return int   */  function Verify($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Verify() without being connected");      return false;    }    fputs($this->smtp_conn,"VRFY " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "VRFY failed on name '$name'",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /*******************************************************************   *                       INTERNAL FUNCTIONS                       *   ******************************************************************/  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  function get_lines() {    $data = "";    while($str = @fgets($this->smtp_conn,515)) {      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data was \"$data\"" .                 $this->CRLF;        echo "SMTP -> get_lines(): \$str is \"$str\"" .                 $this->CRLF;      }      $data .= $str;      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;      }      # if the 4th character is a space then we are done reading      # so just break the loop      if(substr($str,3,1) == " ") { break; }    }    return $data;  }} ?>
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><hr /><div id="footer" role="contentinfo"><!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->	<p>		<?php printf(__('%1$s is proudly powered by %2$s'), get_bloginfo('name'),		'<a href="http://wordpress.org/">WordPress</a>'); ?>		<br /><?php printf(__('%1$s and %2$s.'), '<a href="' . get_bloginfo('rss2_url') . '">' . __('Entries (RSS)') . '</a>', '<a href="' . get_bloginfo('comments_rss2_url') . '">' . __('Comments (RSS)') . '</a>'); ?>		<!-- <?php printf(__('%d queries. %s seconds.'), get_num_queries(), timer_stop(0, 3)); ?> -->	</p></div></div><!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ --><?php /* "Just what do you think you're doing Dave?" */ ?>		<?php wp_footer(); ?></body></html>
<?php/** * The template for displaying attachments. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<p class="page-title"><a href="<?php echo get_permalink( $post->post_parent ); ?>" title="<?php esc_attr( printf( __( 'Return to %s', 'twentyten' ), get_the_title( $post->post_parent ) ) ); ?>" rel="gallery"><?php					/* translators: %s - title of parent post */					printf( __( '<span class="meta-nav">&larr;</span> %s', 'twentyten' ), get_the_title( $post->post_parent ) );				?></a></p>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h2 class="entry-title"><?php the_title(); ?></h2>					<div class="entry-meta">						<?php							printf(__('<span class="%1$s">By</span> %2$s', 'twentyten'),								'meta-prep meta-prep-author',								sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',									get_author_posts_url( get_the_author_meta( 'ID' ) ),									sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),									get_the_author()								)							);						?>						<span class="meta-sep">|</span>						<?php							printf( __('<span class="%1$s">Published</span> %2$s', 'twentyten'),								'meta-prep meta-prep-entry-date',								sprintf( '<span class="entry-date"><abbr class="published" title="%1$s">%2$s</abbr></span>',									esc_attr( get_the_time() ),									get_the_date()								)							);							if ( wp_attachment_is_image() ) {								echo ' <span class="meta-sep">|</span> ';								$metadata = wp_get_attachment_metadata();								printf( __( 'Full size is %s pixels', 'twentyten'),									sprintf( '<a href="%1$s" title="%2$s">%3$s &times; %4$s</a>',										wp_get_attachment_url(),										esc_attr( __('Link to full-size image', 'twentyten') ),										$metadata['width'],										$metadata['height']									)								);							}						?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<div class="entry-attachment"><?php if ( wp_attachment_is_image() ) :	$attachments = array_values( get_children( array( 'post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID' ) ) );	foreach ( $attachments as $k => $attachment ) {		if ( $attachment->ID == $post->ID )			break;	}	$k++;	// If there is more than 1 image attachment in a gallery	if ( count( $attachments ) > 1 ) {		if ( isset( $attachments[ $k ] ) )			// get the URL of the next image attachment			$next_attachment_url = get_attachment_link( $attachments[ $k ]->ID );		else			// or get the URL of the first image attachment			$next_attachment_url = get_attachment_link( $attachments[ 0 ]->ID );	} else {		// or, if there's only 1 image attachment, get the URL of the image		$next_attachment_url = wp_get_attachment_url();	}?>						<p class="attachment"><a href="<?php echo $next_attachment_url; ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php							$attachment_size = apply_filters( 'twentyten_attachment_size', 900 );							echo wp_get_attachment_image( $post->ID, array( $attachment_size, 9999 ) ); // filterable image width with, essentially, no limit for image height.						?></a></p>						<div id="nav-below" class="navigation">							<div class="nav-previous"><?php previous_image_link( false ); ?></div>							<div class="nav-next"><?php next_image_link( false ); ?></div>						</div><!-- #nav-below --><?php else : ?>						<a href="<?php echo wp_get_attachment_url(); ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php echo basename( get_permalink() ); ?></a><?php endif; ?>						</div><!-- .entry-attachment -->						<div class="entry-caption"><?php if ( !empty( $post->post_excerpt ) ) the_excerpt(); ?></div><?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?><?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content -->					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), ' <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## --><?php comments_template(); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * WordPress Administration Template Footer * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');?><div class="clear"></div></div><!-- wpbody-content --><div class="clear"></div></div><!-- wpbody --><div class="clear"></div></div><!-- wpcontent --></div><!-- wpwrap --><div id="footer"><p id="footer-left" class="alignleft"><?phpdo_action( 'in_admin_footer' );$upgrade = apply_filters( 'update_footer', '' );echo apply_filters( 'admin_footer_text', '<span id="footer-thankyou">' . __('Thank you for creating with <a href="http://wordpress.org/">WordPress</a>.').'</span> | '.__('<a href="http://codex.wordpress.org/">Documentation</a>').' | '.__('<a href="http://wordpress.org/support/forum/4">Feedback</a>') ); ?></p><p id="footer-upgrade" class="alignright"><?php echo $upgrade; ?></p><div class="clear"></div></div><?phpdo_action('admin_footer', '');do_action('admin_print_footer_scripts');do_action("admin_footer-" . $GLOBALS['hook_suffix']);// get_site_option() won't exist when auto upgrading from <= 2.7if ( function_exists('get_site_option') ) {	if ( false === get_site_option('can_compress_scripts') )		compression_test();}?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * WordPress Upgrade Functions. Old file, must not be used. Include * wp-admin/includes/upgrade.php instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/upgrade.php' );require_once(ABSPATH . 'wp-admin/includes/upgrade.php');?>
<?php/** * IXR - The Inutio XML-RPC Library * * @package IXR * @since 1.5 * * @copyright Incutio Ltd 2002-2005 * @version 1.7 (beta) 23rd May 2005 * @author Simon Willison * @link http://scripts.incutio.com/xmlrpc/ Site * @link http://scripts.incutio.com/xmlrpc/manual.php Manual * @license BSD License http://www.opensource.org/licenses/bsd-license.php *//** * IXR_Value * * @package IXR * @since 1.5 */class IXR_Value {    var $data;    var $type;    function IXR_Value ($data, $type = false) {        $this->data = $data;        if (!$type) {            $type = $this->calculateType();        }        $this->type = $type;        if ($type == 'struct') {            /* Turn all the values in the array in to new IXR_Value objects */            foreach ($this->data as $key => $value) {                $this->data[$key] = new IXR_Value($value);            }        }        if ($type == 'array') {            for ($i = 0, $j = count($this->data); $i < $j; $i++) {                $this->data[$i] = new IXR_Value($this->data[$i]);            }        }    }    function calculateType() {        if ($this->data === true || $this->data === false) {            return 'boolean';        }        if (is_integer($this->data)) {            return 'int';        }        if (is_double($this->data)) {            return 'double';        }        // Deal with IXR object types base64 and date        if (is_object($this->data) && is_a($this->data, 'IXR_Date')) {            return 'date';        }        if (is_object($this->data) && is_a($this->data, 'IXR_Base64')) {            return 'base64';        }        // If it is a normal PHP object convert it in to a struct        if (is_object($this->data)) {            $this->data = get_object_vars($this->data);            return 'struct';        }        if (!is_array($this->data)) {            return 'string';        }        /* We have an array - is it an array or a struct ? */        if ($this->isStruct($this->data)) {            return 'struct';        } else {            return 'array';        }    }    function getXml() {        /* Return XML for this value */        switch ($this->type) {            case 'boolean':                return '<boolean>'.(($this->data) ? '1' : '0').'</boolean>';                break;            case 'int':                return '<int>'.$this->data.'</int>';                break;            case 'double':                return '<double>'.$this->data.'</double>';                break;            case 'string':                return '<string>'.htmlspecialchars($this->data).'</string>';                break;            case 'array':                $return = '<array><data>'."\n";                foreach ($this->data as $item) {                    $return .= '  <value>'.$item->getXml()."</value>\n";                }                $return .= '</data></array>';                return $return;                break;            case 'struct':                $return = '<struct>'."\n";                foreach ($this->data as $name => $value) {					$name = htmlspecialchars($name);                    $return .= "  <member><name>$name</name><value>";                    $return .= $value->getXml()."</value></member>\n";                }                $return .= '</struct>';                return $return;                break;            case 'date':            case 'base64':                return $this->data->getXml();                break;        }        return false;    }    function isStruct($array) {        /* Nasty function to check if an array is a struct or not */        $expected = 0;        foreach ($array as $key => $value) {            if ((string)$key != (string)$expected) {                return true;            }            $expected++;        }        return false;    }}/** * IXR_Message * * @package IXR * @since 1.5 */class IXR_Message {    var $message;    var $messageType;  // methodCall / methodResponse / fault    var $faultCode;    var $faultString;    var $methodName;    var $params;    // Current variable stacks    var $_arraystructs = array();   // The stack used to keep track of the current array/struct    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array    var $_currentStructName = array();  // A stack as well    var $_param;    var $_value;    var $_currentTag;    var $_currentTagContents;    // The XML parser    var $_parser;    function IXR_Message (&$message) {        $this->message = &$message;    }    function parse() {		// first remove the XML declaration		// this method avoids the RAM usage of preg_replace on very large messages		$header = preg_replace( '/<\?xml.*?\?'.'>/', '', substr( $this->message, 0, 100 ), 1 );		$this->message = substr_replace($this->message, $header, 0, 100);        if (trim($this->message) == '') {            return false;		}        $this->_parser = xml_parser_create();        // Set XML parser to take the case of tags in to account        xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, false);        // Set XML parser callback functions        xml_set_object($this->_parser, $this);        xml_set_element_handler($this->_parser, 'tag_open', 'tag_close');		xml_set_character_data_handler($this->_parser, 'cdata');		$chunk_size = 262144; // 256Kb, parse in chunks to avoid the RAM usage on very large messages		do {			if ( strlen($this->message) <= $chunk_size )				$final=true;			$part = substr( $this->message, 0, $chunk_size );			$this->message = substr( $this->message, $chunk_size );			if ( !xml_parse( $this->_parser, $part, $final ) )				return false;			if ( $final )				break;		} while ( true );		xml_parser_free($this->_parser);        // Grab the error messages, if any        if ($this->messageType == 'fault') {            $this->faultCode = $this->params[0]['faultCode'];            $this->faultString = $this->params[0]['faultString'];		}        return true;    }    function tag_open($parser, $tag, $attr) {        $this->_currentTagContents = '';        $this->currentTag = $tag;        switch($tag) {            case 'methodCall':            case 'methodResponse':            case 'fault':                $this->messageType = $tag;                break;            /* Deal with stacks of arrays and structs */            case 'data':    // data is to all intents and puposes more interesting than array                $this->_arraystructstypes[] = 'array';                $this->_arraystructs[] = array();                break;            case 'struct':                $this->_arraystructstypes[] = 'struct';                $this->_arraystructs[] = array();                break;        }    }    function cdata($parser, $cdata) {        $this->_currentTagContents .= $cdata;    }    function tag_close($parser, $tag) {        $valueFlag = false;        switch($tag) {            case 'int':            case 'i4':                $value = (int) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'double':                $value = (double) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'string':                $value = $this->_currentTagContents;                $valueFlag = true;                break;            case 'dateTime.iso8601':                $value = new IXR_Date(trim($this->_currentTagContents));                // $value = $iso->getTimestamp();                $valueFlag = true;                break;            case 'value':                // "If no type is indicated, the type is string."                if (trim($this->_currentTagContents) != '') {                    $value = (string)$this->_currentTagContents;                    $valueFlag = true;                }                break;            case 'boolean':                $value = (boolean) trim($this->_currentTagContents);                $valueFlag = true;                break;            case 'base64':                $value = base64_decode( trim( $this->_currentTagContents ) );                $valueFlag = true;                break;            /* Deal with stacks of arrays and structs */            case 'data':            case 'struct':                $value = array_pop($this->_arraystructs);                array_pop($this->_arraystructstypes);                $valueFlag = true;                break;            case 'member':                array_pop($this->_currentStructName);                break;            case 'name':                $this->_currentStructName[] = trim($this->_currentTagContents);                break;            case 'methodName':                $this->methodName = trim($this->_currentTagContents);                break;        }        if ($valueFlag) {            if (count($this->_arraystructs) > 0) {                // Add value to struct or array                if ($this->_arraystructstypes[count($this->_arraystructstypes)-1] == 'struct') {                    // Add to struct                    $this->_arraystructs[count($this->_arraystructs)-1][$this->_currentStructName[count($this->_currentStructName)-1]] = $value;                } else {                    // Add to array                    $this->_arraystructs[count($this->_arraystructs)-1][] = $value;                }            } else {                // Just add as a paramater                $this->params[] = $value;            }        }        $this->_currentTagContents = '';    }}/** * IXR_Server * * @package IXR * @since 1.5 */class IXR_Server {    var $data;    var $callbacks = array();    var $message;    var $capabilities;    function IXR_Server($callbacks = false, $data = false) {        $this->setCapabilities();        if ($callbacks) {            $this->callbacks = $callbacks;        }        $this->setCallbacks();        $this->serve($data);    }    function serve($data = false) {        if (!$data) {            global $HTTP_RAW_POST_DATA;            if (!$HTTP_RAW_POST_DATA) {               header( 'Content-Type: text/plain' );               die('XML-RPC server accepts POST requests only.');            }            $data = &$HTTP_RAW_POST_DATA;        }        $this->message = new IXR_Message($data);        if (!$this->message->parse()) {            $this->error(-32700, 'parse error. not well formed');        }        if ($this->message->messageType != 'methodCall') {            $this->error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');        }        $result = $this->call($this->message->methodName, $this->message->params);        // Is the result an error?        if (is_a($result, 'IXR_Error')) {            $this->error($result);        }        // Encode the result        $r = new IXR_Value($result);        $resultxml = $r->getXml();        // Create the XML        $xml = <<<EOD<methodResponse>  <params>    <param>      <value>        $resultxml      </value>    </param>  </params></methodResponse>EOD;        // Send it        $this->output($xml);    }    function call($methodname, $args) {        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method '.                $methodname.' does not exist.');        }        $method = $this->callbacks[$methodname];        // Perform the callback and send the response        if (count($args) == 1) {            // If only one paramater just send that instead of the whole array            $args = $args[0];        }        // Are we dealing with a function or a method?        if ( is_string( $method ) && substr($method, 0, 5) == 'this:' ) {            // It's a class method - check it exists            $method = substr($method, 5);            if (!method_exists($this, $method)) {                return new IXR_Error(-32601, 'server error. requested class method "'.                    $method.'" does not exist.');            }            // Call the method            $result = $this->$method($args);        } else {            // It's a function - does it exist?            if (is_array($method)) {                if (!method_exists($method[0], $method[1])) {                    return new IXR_Error(-32601, 'server error. requested object method "'.                        $method[1].'" does not exist.');                }            } else if (!function_exists($method)) {                return new IXR_Error(-32601, 'server error. requested function "'.                    $method.'" does not exist.');            }            // Call the function            $result = call_user_func($method, $args);        }        return $result;    }    function error($error, $message = false) {        // Accepts either an error object or an error code and message        if ($message && !is_object($error)) {            $error = new IXR_Error($error, $message);        }        $this->output($error->getXml());    }    function output($xml) {        $xml = '<?xml version="1.0"?>'."\n".$xml;        $length = strlen($xml);        header('Connection: close');        header('Content-Length: '.$length);        header('Content-Type: text/xml');        header('Date: '.date('r'));        echo $xml;        exit;    }    function hasMethod($method) {        return in_array($method, array_keys($this->callbacks));    }    function setCapabilities() {        // Initialises capabilities array        $this->capabilities = array(            'xmlrpc' => array(                'specUrl' => 'http://www.xmlrpc.com/spec',                'specVersion' => 1            ),            'faults_interop' => array(                'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',                'specVersion' => 20010516            ),            'system.multicall' => array(                'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',                'specVersion' => 1            ),        );    }    function getCapabilities($args) {        return $this->capabilities;    }    function setCallbacks() {        $this->callbacks['system.getCapabilities'] = 'this:getCapabilities';        $this->callbacks['system.listMethods'] = 'this:listMethods';        $this->callbacks['system.multicall'] = 'this:multiCall';    }    function listMethods($args) {        // Returns a list of methods - uses array_reverse to ensure user defined        // methods are listed before server defined methods        return array_reverse(array_keys($this->callbacks));    }    function multiCall($methodcalls) {        // See http://www.xmlrpc.com/discuss/msgReader$1208        $return = array();        foreach ($methodcalls as $call) {            $method = $call['methodName'];            $params = $call['params'];            if ($method == 'system.multicall') {                $result = new IXR_Error(-32600, 'Recursive calls to system.multicall are forbidden');            } else {                $result = $this->call($method, $params);            }            if (is_a($result, 'IXR_Error')) {                $return[] = array(                    'faultCode' => $result->code,                    'faultString' => $result->message                );            } else {                $return[] = array($result);            }        }        return $return;    }}/** * IXR_Request * * @package IXR * @since 1.5 */class IXR_Request {    var $method;    var $args;    var $xml;    function IXR_Request($method, $args) {        $this->method = $method;        $this->args = $args;        $this->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$this->method}</methodName><params>EOD;        foreach ($this->args as $arg) {            $this->xml .= '<param><value>';            $v = new IXR_Value($arg);            $this->xml .= $v->getXml();            $this->xml .= "</value></param>\n";        }        $this->xml .= '</params></methodCall>';    }    function getLength() {        return strlen($this->xml);    }    function getXml() {        return $this->xml;    }}/** * IXR_Client * * @package IXR * @since 1.5 */class IXR_Client {    var $server;    var $port;    var $path;    var $useragent;	var $headers;    var $response;    var $message = false;    var $debug = false;    var $timeout;    // Storage place for an error message    var $error = false;    function IXR_Client($server, $path = false, $port = 80, $timeout = false) {        if (!$path) {            // Assume we have been given a URL instead            $bits = parse_url($server);            $this->server = $bits['host'];            $this->port = isset($bits['port']) ? $bits['port'] : 80;            $this->path = isset($bits['path']) ? $bits['path'] : '/';            // Make absolutely sure we have a path            if (!$this->path) {                $this->path = '/';            }        } else {            $this->server = $server;            $this->path = $path;            $this->port = $port;        }        $this->useragent = 'The Incutio XML-RPC PHP Library';        $this->timeout = $timeout;    }    function query() {        $args = func_get_args();        $method = array_shift($args);        $request = new IXR_Request($method, $args);        $length = $request->getLength();        $xml = $request->getXml();        $r = "\r\n";        $request  = "POST {$this->path} HTTP/1.0$r";		$this->headers['Host']			= $this->server;		$this->headers['Content-Type']	= 'text/xml';		$this->headers['User-Agent']	= $this->useragent;		$this->headers['Content-Length']= $length;		foreach( $this->headers as $header => $value ) {			$request .= "{$header}: {$value}{$r}";		}		$request .= $r;        $request .= $xml;        // Now send the request        if ($this->debug) {            echo '<pre class="ixr_request">'.htmlspecialchars($request)."\n</pre>\n\n";        }        if ($this->timeout) {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr, $this->timeout);        } else {            $fp = @fsockopen($this->server, $this->port, $errno, $errstr);        }        if (!$fp) {            $this->error = new IXR_Error(-32300, "transport error - could not open socket: $errno $errstr");            return false;        }        fputs($fp, $request);        $contents = '';        $debug_contents = '';        $gotFirstLine = false;        $gettingHeaders = true;        while (!feof($fp)) {            $line = fgets($fp, 4096);            if (!$gotFirstLine) {                // Check line for '200'                if (strstr($line, '200') === false) {                    $this->error = new IXR_Error(-32301, 'transport error - HTTP status code was not 200');                    return false;                }                $gotFirstLine = true;            }            if (trim($line) == '') {                $gettingHeaders = false;            }            if (!$gettingHeaders) {            	// WP#12559 remove trim so as to not strip newlines from received response.                $contents .= $line;            }            if ($this->debug) {                $debug_contents .= $line;            }        }        if ($this->debug) {            echo '<pre class="ixr_response">'.htmlspecialchars($debug_contents)."\n</pre>\n\n";        }        // Now parse what we've got back        $this->message = new IXR_Message($contents);        if (!$this->message->parse()) {            // XML error            $this->error = new IXR_Error(-32700, 'parse error. not well formed');            return false;        }        // Is the message a fault?        if ($this->message->messageType == 'fault') {            $this->error = new IXR_Error($this->message->faultCode, $this->message->faultString);            return false;        }        // Message must be OK        return true;    }    function getResponse() {        // methodResponses can only have one param - return that        return $this->message->params[0];    }    function isError() {        return (is_object($this->error));    }    function getErrorCode() {        return $this->error->code;    }    function getErrorMessage() {        return $this->error->message;    }}/** * IXR_Error * * @package IXR * @since 1.5 */class IXR_Error {    var $code;    var $message;    function IXR_Error($code, $message) {        $this->code = $code;        // WP adds htmlspecialchars(). See #5666        $this->message = htmlspecialchars($message);    }    function getXml() {        $xml = <<<EOD<methodResponse>  <fault>    <value>      <struct>        <member>          <name>faultCode</name>          <value><int>{$this->code}</int></value>        </member>        <member>          <name>faultString</name>          <value><string>{$this->message}</string></value>        </member>      </struct>    </value>  </fault></methodResponse>EOD;        return $xml;    }}/** * IXR_Date * * @package IXR * @since 1.5 */class IXR_Date {    var $year;    var $month;    var $day;    var $hour;    var $minute;    var $second;    var $timezone;    function IXR_Date($time) {        // $time can be a PHP timestamp or an ISO one        if (is_numeric($time)) {            $this->parseTimestamp($time);        } else {            $this->parseIso($time);        }    }    function parseTimestamp($timestamp) {        $this->year = date('Y', $timestamp);        $this->month = date('m', $timestamp);        $this->day = date('d', $timestamp);        $this->hour = date('H', $timestamp);        $this->minute = date('i', $timestamp);        $this->second = date('s', $timestamp);        // WP adds timezone. See #2036        $this->timezone = '';    }    function parseIso($iso) {        $this->year = substr($iso, 0, 4);        $this->month = substr($iso, 4, 2);        $this->day = substr($iso, 6, 2);        $this->hour = substr($iso, 9, 2);        $this->minute = substr($iso, 12, 2);        $this->second = substr($iso, 15, 2);        // WP adds timezone. See #2036        $this->timezone = substr($iso, 17);    }    function getIso() {    	// WP adds timezone. See #2036        return $this->year.$this->month.$this->day.'T'.$this->hour.':'.$this->minute.':'.$this->second.$this->timezone;    }    function getXml() {        return '<dateTime.iso8601>'.$this->getIso().'</dateTime.iso8601>';    }    function getTimestamp() {        return mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year);    }}/** * IXR_Base64 * * @package IXR * @since 1.5 */class IXR_Base64 {    var $data;    function IXR_Base64($data) {        $this->data = $data;    }    function getXml() {        return '<base64>'.base64_encode($this->data).'</base64>';    }}/** * IXR_IntrospectionServer * * @package IXR * @since 1.5 */class IXR_IntrospectionServer extends IXR_Server {    var $signatures;    var $help;    function IXR_IntrospectionServer() {        $this->setCallbacks();        $this->setCapabilities();        $this->capabilities['introspection'] = array(            'specUrl' => 'http://xmlrpc.usefulinc.com/doc/reserved.html',            'specVersion' => 1        );        $this->addCallback(            'system.methodSignature',            'this:methodSignature',            array('array', 'string'),            'Returns an array describing the return type and required parameters of a method'        );        $this->addCallback(            'system.getCapabilities',            'this:getCapabilities',            array('struct'),            'Returns a struct describing the XML-RPC specifications supported by this server'        );        $this->addCallback(            'system.listMethods',            'this:listMethods',            array('array'),            'Returns an array of available methods on this server'        );        $this->addCallback(            'system.methodHelp',            'this:methodHelp',            array('string', 'string'),            'Returns a documentation string for the specified method'        );    }    function addCallback($method, $callback, $args, $help) {        $this->callbacks[$method] = $callback;        $this->signatures[$method] = $args;        $this->help[$method] = $help;    }    function call($methodname, $args) {        // Make sure it's in an array        if ($args && !is_array($args)) {            $args = array($args);        }        // Over-rides default call method, adds signature check        if (!$this->hasMethod($methodname)) {            return new IXR_Error(-32601, 'server error. requested method "'.$this->message->methodName.'" not specified.');        }        $method = $this->callbacks[$methodname];        $signature = $this->signatures[$methodname];        $returnType = array_shift($signature);        // Check the number of arguments        if (count($args) != count($signature)) {            return new IXR_Error(-32602, 'server error. wrong number of method parameters');        }        // Check the argument types        $ok = true;        $argsbackup = $args;        for ($i = 0, $j = count($args); $i < $j; $i++) {            $arg = array_shift($args);            $type = array_shift($signature);            switch ($type) {                case 'int':                case 'i4':                    if (is_array($arg) || !is_int($arg)) {                        $ok = false;                    }                    break;                case 'base64':                case 'string':                    if (!is_string($arg)) {                        $ok = false;                    }                    break;                case 'boolean':                    if ($arg !== false && $arg !== true) {                        $ok = false;                    }                    break;                case 'float':                case 'double':                    if (!is_float($arg)) {                        $ok = false;                    }                    break;                case 'date':                case 'dateTime.iso8601':                    if (!is_a($arg, 'IXR_Date')) {                        $ok = false;                    }                    break;            }            if (!$ok) {                return new IXR_Error(-32602, 'server error. invalid method parameters');            }        }        // It passed the test - run the "real" method call        return parent::call($methodname, $argsbackup);    }    function methodSignature($method) {        if (!$this->hasMethod($method)) {            return new IXR_Error(-32601, 'server error. requested method "'.$method.'" not specified.');        }        // We should be returning an array of types        $types = $this->signatures[$method];        $return = array();        foreach ($types as $type) {            switch ($type) {                case 'string':                    $return[] = 'string';                    break;                case 'int':                case 'i4':                    $return[] = 42;                    break;                case 'double':                    $return[] = 3.1415;                    break;                case 'dateTime.iso8601':                    $return[] = new IXR_Date(time());                    break;                case 'boolean':                    $return[] = true;                    break;                case 'base64':                    $return[] = new IXR_Base64('base64');                    break;                case 'array':                    $return[] = array('array');                    break;                case 'struct':                    $return[] = array('struct' => 'struct');                    break;            }        }        return $return;    }    function methodHelp($method) {        return $this->help[$method];    }}/** * IXR_ClientMulticall * * @package IXR * @since 1.5 */class IXR_ClientMulticall extends IXR_Client {    var $calls = array();    function IXR_ClientMulticall($server, $path = false, $port = 80) {        parent::IXR_Client($server, $path, $port);        $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';    }    function addCall() {        $args = func_get_args();        $methodName = array_shift($args);        $struct = array(            'methodName' => $methodName,            'params' => $args        );        $this->calls[] = $struct;    }    function query() {        // Prepare multicall, then call the parent::query() method        return parent::query('system.multicall', $this->calls);    }}?>
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** * Create a thumbnail from an Image given a maximum side size. * * This function can handle most image file formats which PHP supports. If PHP * does not have the functionality to save in a file of the same format, the * thumbnail will be created as a jpeg. * * @since 1.2.0 * * @param mixed $file Filename of the original image, Or attachment id. * @param int $max_side Maximum length of a single side for the thumbnail. * @param mixed $deprecated Never used. * @return string Thumbnail path on success, Error string on failure. */function wp_create_thumbnail( $file, $max_side, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.2' );	$thumbpath = image_resize( $file, $max_side, $max_side );	return apply_filters( 'wp_create_thumbnail', $thumbpath );}/** * Crop an Image to a given size. * * @since 2.1.0 * * @param string|int $src_file The source file or Attachment ID. * @param int $src_x The start x position to crop from. * @param int $src_y The start y position to crop from. * @param int $src_w The width to crop. * @param int $src_h The height to crop. * @param int $dst_w The destination width. * @param int $dst_h The destination height. * @param int $src_abs Optional. If the source crop points are absolute. * @param string $dst_file Optional. The destination file to write to. * @return string|WP_Error|false New filepath on success, WP_Error or false on failure. */function wp_crop_image( $src_file, $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs = false, $dst_file = false ) {	if ( is_numeric( $src_file ) ) // Handle int as attachment ID		$src_file = get_attached_file( $src_file );	$src = wp_load_image( $src_file );	if ( !is_resource( $src ) )		return new WP_Error( 'error_loading_image', $src, $src_file );	$dst = wp_imagecreatetruecolor( $dst_w, $dst_h );	if ( $src_abs ) {		$src_w -= $src_x;		$src_h -= $src_y;	}	if (function_exists('imageantialias'))		imageantialias( $dst, true );	imagecopyresampled( $dst, $src, 0, 0, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h );	imagedestroy( $src ); // Free up memory	if ( ! $dst_file )		$dst_file = str_replace( basename( $src_file ), 'cropped-' . basename( $src_file ), $src_file );	$dst_file = preg_replace( '/\\.[^\\.]+$/', '.jpg', $dst_file );	if ( imagejpeg( $dst, $dst_file, apply_filters( 'jpeg_quality', 90, 'wp_crop_image' ) ) )		return $dst_file;	else		return false;}/** * Generate post thumbnail attachment meta data. * * @since 2.1.0 * * @param int $attachment_id Attachment Id to process. * @param string $file Filepath of the Attached image. * @return mixed Metadata for attachment. */function wp_generate_attachment_metadata( $attachment_id, $file ) {	$attachment = get_post( $attachment_id );	$metadata = array();	if ( preg_match('!^image/!', get_post_mime_type( $attachment )) && file_is_displayable_image($file) ) {		$imagesize = getimagesize( $file );		$metadata['width'] = $imagesize[0];		$metadata['height'] = $imagesize[1];		list($uwidth, $uheight) = wp_constrain_dimensions($metadata['width'], $metadata['height'], 128, 96);		$metadata['hwstring_small'] = "height='$uheight' width='$uwidth'";		// Make the file path relative to the upload dir		$metadata['file'] = _wp_relative_upload_path($file);		// make thumbnails and other intermediate sizes		global $_wp_additional_image_sizes;		foreach ( get_intermediate_image_sizes() as $s ) {			$sizes[$s] = array( 'width' => '', 'height' => '', 'crop' => FALSE );			if ( isset( $_wp_additional_image_sizes[$s]['width'] ) )				$sizes[$s]['width'] = intval( $_wp_additional_image_sizes[$s]['width'] ); // For theme-added sizes			else				$sizes[$s]['width'] = get_option( "{$s}_size_w" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['height'] ) )				$sizes[$s]['height'] = intval( $_wp_additional_image_sizes[$s]['height'] ); // For theme-added sizes			else				$sizes[$s]['height'] = get_option( "{$s}_size_h" ); // For default sizes set in options			if ( isset( $_wp_additional_image_sizes[$s]['crop'] ) )				$sizes[$s]['crop'] = intval( $_wp_additional_image_sizes[$s]['crop'] ); // For theme-added sizes			else				$sizes[$s]['crop'] = get_option( "{$s}_crop" ); // For default sizes set in options		}		$sizes = apply_filters( 'intermediate_image_sizes_advanced', $sizes );		foreach ($sizes as $size => $size_data ) {			$resized = image_make_intermediate_size( $file, $size_data['width'], $size_data['height'], $size_data['crop'] );			if ( $resized )				$metadata['sizes'][$size] = $resized;		}		// fetch additional metadata from exif/iptc		$image_meta = wp_read_image_metadata( $file );		if ( $image_meta )			$metadata['image_meta'] = $image_meta;	}	return apply_filters( 'wp_generate_attachment_metadata', $metadata, $attachment_id );}/** * Calculated the new dimentions for a downsampled image. * * @since 2.0.0 * @see wp_constrain_dimensions() * * @param int $width Current width of the image * @param int $height Current height of the image * @return mixed Array(height,width) of shrunk dimensions. */function get_udims( $width, $height) {	return wp_constrain_dimensions( $width, $height, 128, 96 );}/** * Convert a fraction string to a decimal. * * @since 2.5.0 * * @param string $str * @return int|float */function wp_exif_frac2dec($str) {	@list( $n, $d ) = explode( '/', $str );	if ( !empty($d) )		return $n / $d;	return $str;}/** * Convert the exif date format to a unix timestamp. * * @since 2.5.0 * * @param string $str * @return int */function wp_exif_date2ts($str) {	@list( $date, $time ) = explode( ' ', trim($str) );	@list( $y, $m, $d ) = explode( ':', $date );	return strtotime( "{$y}-{$m}-{$d} {$time}" );}/** * Get extended image metadata, exif or iptc as available. * * Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso * created_timestamp, focal_length, shutter_speed, and title. * * The IPTC metadata that is retrieved is APP13, credit, byline, created date * and time, caption, copyright, and title. Also includes FNumber, Model, * DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime. * * @todo Try other exif libraries if available. * @since 2.5.0 * * @param string $file * @return bool|array False on failure. Image metadata array on success. */function wp_read_image_metadata( $file ) {	if ( ! file_exists( $file ) )		return false;	list( , , $sourceImageType ) = getimagesize( $file );	// exif contains a bunch of data we'll probably never need formatted in ways	// that are difficult to use. We'll normalize it and just extract the fields	// that are likely to be useful.  Fractions and numbers are converted to	// floats, dates to unix timestamps, and everything else to strings.	$meta = array(		'aperture' => 0,		'credit' => '',		'camera' => '',		'caption' => '',		'created_timestamp' => 0,		'copyright' => '',		'focal_length' => 0,		'iso' => 0,		'shutter_speed' => 0,		'title' => '',	);	// read iptc first, since it might contain data not available in exif such	// as caption, description etc	if ( is_callable( 'iptcparse' ) ) {		getimagesize( $file, $info );		if ( ! empty( $info['APP13'] ) ) {			$iptc = iptcparse( $info['APP13'] );			// headline, "A brief synopsis of the caption."			if ( ! empty( $iptc['2#105'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#105'][0] ) );			// title, "Many use the Title field to store the filename of the image, though the field may be used in many ways."			elseif ( ! empty( $iptc['2#005'][0] ) )				$meta['title'] = utf8_encode( trim( $iptc['2#005'][0] ) );			if ( ! empty( $iptc['2#120'][0] ) ) { // description / legacy caption				$caption = utf8_encode( trim( $iptc['2#120'][0] ) );				if ( empty( $meta['title'] ) ) {					// Assume the title is stored in 2:120 if it's short.					if ( strlen( $caption ) < 80 )						$meta['title'] = $caption;					else						$meta['caption'] = $caption;				} elseif ( $caption != $meta['title'] ) {					$meta['caption'] = $caption;				}			}			if ( ! empty( $iptc['2#110'][0] ) ) // credit				$meta['credit'] = utf8_encode(trim($iptc['2#110'][0]));			elseif ( ! empty( $iptc['2#080'][0] ) ) // creator / legacy byline				$meta['credit'] = utf8_encode(trim($iptc['2#080'][0]));			if ( ! empty( $iptc['2#055'][0] ) and ! empty( $iptc['2#060'][0] ) ) // created date and time				$meta['created_timestamp'] = strtotime( $iptc['2#055'][0] . ' ' . $iptc['2#060'][0] );			if ( ! empty( $iptc['2#116'][0] ) ) // copyright				$meta['copyright'] = utf8_encode( trim( $iptc['2#116'][0] ) );		 }	}	// fetch additional info from exif if available	if ( is_callable( 'exif_read_data' ) && in_array( $sourceImageType, apply_filters( 'wp_read_image_metadata_types', array( IMAGETYPE_JPEG, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM ) ) ) ) {		$exif = @exif_read_data( $file );		if ( !empty( $exif['Title'] ) )			$meta['title'] = utf8_encode( trim( $exif['Title'] ) );		if ( ! empty( $exif['ImageDescription'] ) ) {			if ( empty( $meta['title'] ) && strlen( $exif['ImageDescription'] ) < 80 ) {				// Assume the title is stored in ImageDescription				$meta['title'] = utf8_encode( trim( $exif['ImageDescription'] ) );				if ( ! empty( $exif['COMPUTED']['UserComment'] ) && trim( $exif['COMPUTED']['UserComment'] ) != $meta['title'] )					$meta['caption'] = utf8_encode( trim( $exif['COMPUTED']['UserComment'] ) );			} elseif ( trim( $exif['ImageDescription'] ) != $meta['title'] ) {				$meta['caption'] = utf8_encode( trim( $exif['ImageDescription'] ) );			}		} elseif ( ! empty( $exif['Comments'] ) && trim( $exif['Comments'] ) != $meta['title'] ) {			$meta['caption'] = utf8_encode( trim( $exif['Comments'] ) );		}		if ( ! empty( $exif['Artist'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Artist'] ) );		elseif ( ! empty($exif['Author'] ) )			$meta['credit'] = utf8_encode( trim( $exif['Author'] ) );		if ( ! empty( $exif['Copyright'] ) )			$meta['copyright'] = utf8_encode( trim( $exif['Copyright'] ) );		if ( ! empty($exif['FNumber'] ) )			$meta['aperture'] = round( wp_exif_frac2dec( $exif['FNumber'] ), 2 );		if ( ! empty($exif['Model'] ) )			$meta['camera'] = utf8_encode( trim( $exif['Model'] ) );		if ( ! empty($exif['DateTimeDigitized'] ) )			$meta['created_timestamp'] = wp_exif_date2ts($exif['DateTimeDigitized'] );		if ( ! empty($exif['FocalLength'] ) )			$meta['focal_length'] = wp_exif_frac2dec( $exif['FocalLength'] );		if ( ! empty($exif['ISOSpeedRatings'] ) )			$meta['iso'] = utf8_encode( trim( $exif['ISOSpeedRatings'] ) );		if ( ! empty($exif['ExposureTime'] ) )			$meta['shutter_speed'] = wp_exif_frac2dec( $exif['ExposureTime'] );	}	return apply_filters( 'wp_read_image_metadata', $meta, $file, $sourceImageType );}/** * Validate that file is an image. * * @since 2.5.0 * * @param string $path File path to test if valid image. * @return bool True if valid image, false if not valid image. */function file_is_valid_image($path) {	$size = @getimagesize($path);	return !empty($size);}/** * Validate that file is suitable for displaying within a web page. * * @since 2.5.0 * @uses apply_filters() Calls 'file_is_displayable_image' on $result and $path. * * @param string $path File path to test. * @return bool True if suitable, false if not suitable. */function file_is_displayable_image($path) {	$info = @getimagesize($path);	if ( empty($info) )		$result = false;	elseif ( !in_array($info[2], array(IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG)) )	// only gif, jpeg and png images can reliably be displayed		$result = false;	else		$result = true;	return apply_filters('file_is_displayable_image', $result, $path);}
<?php/** * Contains Translation_Entry class * * @version $Id: entry.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage entry */if ( !class_exists( 'Translation_Entry' ) ):/** * Translation_Entry class encapsulates a translatable string */class Translation_Entry {	/**	 * Whether the entry contains a string and its plural form, default is false	 *	 * @var boolean	 */	var $is_plural = false;	var $context = null;	var $singular = null;	var $plural = null;	var $translations = array();	var $translator_comments = '';	var $extracted_comments = '';	var $references = array();	var $flags = array();	/**	 * @param array $args associative array, support following keys:	 * 	- singular (string) -- the string to translate, if omitted and empty entry will be created	 * 	- plural (string) -- the plural form of the string, setting this will set {@link $is_plural} to true	 * 	- translations (array) -- translations of the string and possibly -- its plural forms	 * 	- context (string) -- a string differentiating two equal strings used in different contexts	 * 	- translator_comments (string) -- comments left by translators	 * 	- extracted_comments (string) -- comments left by developers	 * 	- references (array) -- places in the code this strings is used, in relative_to_root_path/file.php:linenum form	 * 	- flags (array) -- flags like php-format	 */	function Translation_Entry($args=array()) {		// if no singular -- empty object		if (!isset($args['singular'])) {			return;		}		// get member variable values from args hash		foreach ($args as $varname => $value) {			$this->$varname = $value;		}		if (isset($args['plural'])) $this->is_plural = true;		if (!is_array($this->translations)) $this->translations = array();		if (!is_array($this->references)) $this->references = array();		if (!is_array($this->flags)) $this->flags = array();	}	/**	 * Generates a unique key for this entry	 *	 * @return string|bool the key or false if the entry is empty	 */	function key() {		if (is_null($this->singular)) return false;		// prepend context and EOT, like in MO files		return is_null($this->context)? $this->singular : $this->context.chr(4).$this->singular;	}}endif;
<?php/** * Reading settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __( 'Reading Settings' );$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen contains the settings that affect the display of your content.') . '</p>' .	'<p>' . sprintf(__('You can choose what&#8217;s displayed on the front page of your site. It can be posts in reverse chronological order (classic blog), or a fixed/static page. To set a static home page, you first need to create two <a href="%s">Pages</a>. One will become the front page, and the other will be where your posts are displayed.'), 'post-new.php?post_type=page') . '</p>' .	'<p>' . __('You can also control the display of your content in RSS feeds, including the maximum numbers of posts to display, whether to show full text or a summary, and the character set encoding.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Reading_SubPanel" target="_blank">Reading Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form1" method="post" action="options.php"><?php settings_fields( 'reading' ); ?><?php if ( ! get_pages() ) : ?><input name="show_on_front" type="hidden" value="posts" /><table class="form-table"><?php else :	if ( 'page' == get_option( 'show_on_front' ) && ! get_option( 'page_on_front' ) && ! get_option( 'page_for_posts' ) )		update_option( 'show_on_front', 'posts' );?><table class="form-table"><tr valign="top"><th scope="row"><?php _e( 'Front page displays' ); ?></th><td id="front-static-pages"><fieldset><legend class="screen-reader-text"><span><?php _e( 'Front page displays' ); ?></span></legend>	<p><label>		<input name="show_on_front" type="radio" value="posts" class="tog" <?php checked( 'posts', get_option( 'show_on_front' ) ); ?> />		<?php _e( 'Your latest posts' ); ?>	</label>	</p>	<p><label>		<input name="show_on_front" type="radio" value="page" class="tog" <?php checked( 'page', get_option( 'show_on_front' ) ); ?> />		<?php printf( __( 'A <a href="%s">static page</a> (select below)' ), 'edit.php?post_type=page' ); ?>	</label>	</p><ul>	<li><label for="page_on_front"><?php printf( __( 'Front page: %s' ), wp_dropdown_pages( array( 'name' => 'page_on_front', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_on_front' ) ) ) ); ?></label></li>	<li><label for="page_for_posts"><?php printf( __( 'Posts page: %s' ), wp_dropdown_pages( array( 'name' => 'page_for_posts', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_for_posts' ) ) ) ); ?></label></li></ul><?php if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_for_posts' ) == get_option( 'page_on_front' ) ) : ?><div id="front-page-warning" class="error inline"><p><?php _e( '<strong>Warning:</strong> these pages should not be the same!' ); ?></p></div><?php endif; ?></fieldset></td></tr><?php endif; ?><tr valign="top"><th scope="row"><label for="posts_per_page"><?php _e( 'Blog pages show at most' ); ?></label></th><td><input name="posts_per_page" type="text" id="posts_per_page" value="<?php form_option( 'posts_per_page' ); ?>" class="small-text" /> <?php _e( 'posts' ); ?></td></tr><tr valign="top"><th scope="row"><label for="posts_per_rss"><?php _e( 'Syndication feeds show the most recent' ); ?></label></th><td><input name="posts_per_rss" type="text" id="posts_per_rss" value="<?php form_option( 'posts_per_rss' ); ?>" class="small-text" /> <?php _e( 'items' ); ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'For each article in a feed, show' ); ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'For each article in a feed, show' ); ?> </span></legend><p><label><input name="rss_use_excerpt"  type="radio" value="0" <?php checked( 0, get_option( 'rss_use_excerpt' ) ); ?>	/> <?php _e( 'Full text' ); ?></label><br /><label><input name="rss_use_excerpt" type="radio" value="1" <?php checked( 1, get_option( 'rss_use_excerpt' ) ); ?> /> <?php _e( 'Summary' ); ?></label></p></fieldset></td></tr><tr valign="top"><th scope="row"><label for="blog_charset"><?php _e( 'Encoding for pages and feeds' ); ?></label></th><td><input name="blog_charset" type="text" id="blog_charset" value="<?php form_option( 'blog_charset' ); ?>" class="regular-text" /><span class="description"><?php _e( 'The <a href="http://codex.wordpress.org/Glossary#Character_set">character encoding</a> of your site (UTF-8 is recommended, if you are adventurous there are some <a href="http://en.wikipedia.org/wiki/Character_set">other encodings</a>)' ); ?></span></td></tr><?php do_settings_fields( 'reading', 'default' ); ?></table><?php do_settings_sections( 'reading' ); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php include( './admin-footer.php' ); ?>
<?phpdefine('WP_REPAIRING', true);require_once('../../wp-load.php');header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e('WordPress &rsaquo; Database Repair'); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="../images/wordpress-logo.png" /></h1><?phpif ( !defined('WP_ALLOW_REPAIR') ) {	echo '<p>'.__('To allow use of this page to automatically repair database problems, please add the following line to your wp-config.php file.  Once this line is added to your config, reload this page.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";} elseif ( isset($_GET['repair']) ) {	$problems = array();	check_admin_referer('repair_db');	if ( 2 == $_GET['repair'] )		$optimize = true;	else		$optimize = false;	$okay = true;	$tables = $wpdb->tables();	// Sitecategories may not exist if global terms are disabled.	if ( is_multisite() && ! $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->sitecategories'" ) )		unset( $tables['sitecategories'] );	$tables = array_merge( $tables, (array) apply_filters( 'tables_to_repair', array() ) ); // Return tables with table prefixes.	// Loop over the tables, checking and repairing as needed.	foreach ( $tables as $table ) {		$check = $wpdb->get_row("CHECK TABLE $table");		if ( 'OK' == $check->Msg_text ) {			echo "<p>The $table table is okay.";		} else {			echo "<p>The $table table is not okay. It is reporting the following error: <code>$check->Msg_text</code>.  WordPress will attempt to repair this table&hellip;";			$repair = $wpdb->get_row("REPAIR TABLE $table");			if ( 'OK' == $check->Msg_text ) {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully repaired the $table table.";			} else {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to repair the $table table. Error: $check->Msg_text<br />";				$problems["$table"] = $check->Msg_text;				$okay = false;			}		}		if ( $okay && $optimize ) {			$check = $wpdb->get_row("ANALYZE TABLE $table");			if ( 'Table is already up to date' == $check->Msg_text )  {				echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;The $table table is already optimized.";			} else {				$check = $wpdb->get_row("OPTIMIZE TABLE $table");				if ( 'OK' == $check->Msg_text || 'Table is already up to date' == $check->Msg_text )					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Successfully optimized the $table table.";				else					echo "<br />&nbsp;&nbsp;&nbsp;&nbsp;Failed to optimize the $table table. Error: $check->Msg_text";			}		}		echo '</p>';	}	if ( !empty($problems) ) {		printf('<p>'.__('Some database problems could not be repaired. Please copy-and-paste the following list of errors to the <a href="%s">WordPress support forums</a> to get additional assistance.').'</p>', 'http://wordpress.org/support/forum/3');		$problem_output = array();		foreach ( $problems as $table => $problem )			$problem_output[] = "$table: $problem";		echo '<textarea name="errors" id="errors" rows="20" cols="60">' . format_to_edit(implode("\n", $problem_output)) . '</textarea>';	} else {		echo '<p>'.__('Repairs complete.  Please remove the following line from wp-config.php to prevent this page from being used by unauthorized users.')."</p><code>define('WP_ALLOW_REPAIR', true);</code>";	}} else {	if ( isset($_GET['referrer']) && 'is_blog_installed' == $_GET['referrer'] )		_e('One or more database tables is unavailable.  To allow WordPress to attempt to repair these tables, press the "Repair Database" button. Repairing can take awhile, so please be patient.');	else		_e('WordPress can automatically look for some common database problems and repair them.  Repairing can take awhile, so please be patient.')?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=1', 'repair_db') ?>"><?php _e( 'Repair Database' ); ?></a></p>	<?php _e('WordPress can also attempt to optimize the database.  This improves performance in some situations.  Repairing and optimizing the database can take a long time and the database will be locked while optimizing.'); ?>	<p class="step"><a class="button" href="<?php echo wp_nonce_url('repair.php?repair=2', 'repair_db') ?>"><?php _e( 'Repair and Optimize Database' ); ?></a></p><?php}?></body></html>
<?php/** * XML-RPC protocol support for WordPress * * @license GPL v2 <./license.txt> * @package WordPress *//** * Whether this is a XMLRPC Request * * @var bool */define('XMLRPC_REQUEST', true);// Some browser-embedded clients send cookies. We don't want them.$_COOKIE = array();// A bug in PHP < 5.2.2 makes $HTTP_RAW_POST_DATA not set by default,// but we can do it ourself.if ( !isset( $HTTP_RAW_POST_DATA ) ) {	$HTTP_RAW_POST_DATA = file_get_contents( 'php://input' );}// fix for mozBlog and other cases where '<?xml' isn't on the very first lineif ( isset($HTTP_RAW_POST_DATA) )	$HTTP_RAW_POST_DATA = trim($HTTP_RAW_POST_DATA);/** Include the bootstrap for setting up WordPress environment */include('./wp-load.php');if ( isset( $_GET['rsd'] ) ) { // http://archipelago.phrasewise.com/rsdheader('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);?><?php echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd">  <service>    <engineName>WordPress</engineName>    <engineLink>http://wordpress.org/</engineLink>    <homePageLink><?php bloginfo_rss('url') ?></homePageLink>    <apis>      <api name="WordPress" blogID="1" preferred="true" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Movable Type" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="MetaWeblog" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Blogger" blogID="1" preferred="false" apiLink="<?php echo site_url('xmlrpc.php', 'rpc') ?>" />      <api name="Atom" blogID="" preferred="false" apiLink="<?php echo apply_filters('atom_service_url', site_url('wp-app.php/service', 'rpc') ) ?>" />    </apis>  </service></rsd><?phpexit;}include_once(ABSPATH . 'wp-admin/includes/admin.php');include_once(ABSPATH . WPINC . '/class-IXR.php');// Turn off all warnings and errors.// error_reporting(0);/** * Posts submitted via the xmlrpc interface get that title * @name post_default_title * @var string */$post_default_title = "";/** * Whether to enable XMLRPC Logging. * * @name xmlrpc_logging * @var int|bool */$xmlrpc_logging = 0;/** * logIO() - Writes logging info to a file. * * @uses $xmlrpc_logging * @package WordPress * @subpackage Logging * * @param string $io Whether input or output * @param string $msg Information describing logging reason. * @return bool Always return true */function logIO($io,$msg) {	global $xmlrpc_logging;	if ($xmlrpc_logging) {		$fp = fopen("../xmlrpc.log","a+");		$date = gmdate("Y-m-d H:i:s ");		$iot = ($io == "I") ? " Input: " : " Output: ";		fwrite($fp, "\n\n".$date.$iot.$msg);		fclose($fp);	}	return true;}if ( isset($HTTP_RAW_POST_DATA) )	logIO("I", $HTTP_RAW_POST_DATA);/** * WordPress XMLRPC server implementation. * * Implements compatability for Blogger API, MetaWeblog API, MovableType, and * pingback. Additional WordPress API for managing comments, pages, posts, * options, etc. * * Since WordPress 2.6.0, WordPress XMLRPC server can be disabled in the * administration panels. * * @package WordPress * @subpackage Publishing * @since 1.5.0 */class wp_xmlrpc_server extends IXR_Server {	/**	 * Register all of the XMLRPC methods that XMLRPC server understands.	 *	 * PHP4 constructor and sets up server and method property. Passes XMLRPC	 * methods through the 'xmlrpc_methods' filter to allow plugins to extend	 * or replace XMLRPC methods.	 *	 * @since 1.5.0	 *	 * @return wp_xmlrpc_server	 */	function wp_xmlrpc_server() {		$this->methods = array(			// WordPress API			'wp.getUsersBlogs'		=> 'this:wp_getUsersBlogs',			'wp.getPage'			=> 'this:wp_getPage',			'wp.getPages'			=> 'this:wp_getPages',			'wp.newPage'			=> 'this:wp_newPage',			'wp.deletePage'			=> 'this:wp_deletePage',			'wp.editPage'			=> 'this:wp_editPage',			'wp.getPageList'		=> 'this:wp_getPageList',			'wp.getAuthors'			=> 'this:wp_getAuthors',			'wp.getCategories'		=> 'this:mw_getCategories',		// Alias			'wp.getTags'			=> 'this:wp_getTags',			'wp.newCategory'		=> 'this:wp_newCategory',			'wp.deleteCategory'		=> 'this:wp_deleteCategory',			'wp.suggestCategories'	=> 'this:wp_suggestCategories',			'wp.uploadFile'			=> 'this:mw_newMediaObject',	// Alias			'wp.getCommentCount'	=> 'this:wp_getCommentCount',			'wp.getPostStatusList'	=> 'this:wp_getPostStatusList',			'wp.getPageStatusList'	=> 'this:wp_getPageStatusList',			'wp.getPageTemplates'	=> 'this:wp_getPageTemplates',			'wp.getOptions'			=> 'this:wp_getOptions',			'wp.setOptions'			=> 'this:wp_setOptions',			'wp.getComment'			=> 'this:wp_getComment',			'wp.getComments'		=> 'this:wp_getComments',			'wp.deleteComment'		=> 'this:wp_deleteComment',			'wp.editComment'		=> 'this:wp_editComment',			'wp.newComment'			=> 'this:wp_newComment',			'wp.getCommentStatusList' => 'this:wp_getCommentStatusList',			// Blogger API			'blogger.getUsersBlogs' => 'this:blogger_getUsersBlogs',			'blogger.getUserInfo' => 'this:blogger_getUserInfo',			'blogger.getPost' => 'this:blogger_getPost',			'blogger.getRecentPosts' => 'this:blogger_getRecentPosts',			'blogger.getTemplate' => 'this:blogger_getTemplate',			'blogger.setTemplate' => 'this:blogger_setTemplate',			'blogger.newPost' => 'this:blogger_newPost',			'blogger.editPost' => 'this:blogger_editPost',			'blogger.deletePost' => 'this:blogger_deletePost',			// MetaWeblog API (with MT extensions to structs)			'metaWeblog.newPost' => 'this:mw_newPost',			'metaWeblog.editPost' => 'this:mw_editPost',			'metaWeblog.getPost' => 'this:mw_getPost',			'metaWeblog.getRecentPosts' => 'this:mw_getRecentPosts',			'metaWeblog.getCategories' => 'this:mw_getCategories',			'metaWeblog.newMediaObject' => 'this:mw_newMediaObject',			// MetaWeblog API aliases for Blogger API			// see http://www.xmlrpc.com/stories/storyReader$2460			'metaWeblog.deletePost' => 'this:blogger_deletePost',			'metaWeblog.getTemplate' => 'this:blogger_getTemplate',			'metaWeblog.setTemplate' => 'this:blogger_setTemplate',			'metaWeblog.getUsersBlogs' => 'this:blogger_getUsersBlogs',			// MovableType API			'mt.getCategoryList' => 'this:mt_getCategoryList',			'mt.getRecentPostTitles' => 'this:mt_getRecentPostTitles',			'mt.getPostCategories' => 'this:mt_getPostCategories',			'mt.setPostCategories' => 'this:mt_setPostCategories',			'mt.supportedMethods' => 'this:mt_supportedMethods',			'mt.supportedTextFilters' => 'this:mt_supportedTextFilters',			'mt.getTrackbackPings' => 'this:mt_getTrackbackPings',			'mt.publishPost' => 'this:mt_publishPost',			// PingBack			'pingback.ping' => 'this:pingback_ping',			'pingback.extensions.getPingbacks' => 'this:pingback_extensions_getPingbacks',			'demo.sayHello' => 'this:sayHello',			'demo.addTwoNumbers' => 'this:addTwoNumbers'		);		$this->initialise_blog_option_info( );		$this->methods = apply_filters('xmlrpc_methods', $this->methods);	}	function serve_request() {		$this->IXR_Server($this->methods);	}	/**	 * Test XMLRPC API by saying, "Hello!" to client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return string	 */	function sayHello($args) {		return 'Hello!';	}	/**	 * Test XMLRPC API by adding two numbers for client.	 *	 * @since 1.5.0	 *	 * @param array $args Method Parameters.	 * @return int	 */	function addTwoNumbers($args) {		$number1 = $args[0];		$number2 = $args[1];		return $number1 + $number2;	}	/**	 * Check user's credentials.	 *	 * @since 1.5.0	 *	 * @param string $user_login User's username.	 * @param string $user_pass User's password.	 * @return bool Whether authentication passed.	 * @deprecated use wp_xmlrpc_server::login	 * @see wp_xmlrpc_server::login	 */	function login_pass_ok($user_login, $user_pass) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		if (!user_pass_ok($user_login, $user_pass)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		return true;	}	/**	 * Log user in.	 *	 * @since 2.8	 *	 * @param string $username User's username.	 * @param string $password User's password.	 * @return mixed WP_User object if authentication passed, false otherwise	 */	function login($username, $password) {		if ( !get_option( 'enable_xmlrpc' ) ) {			$this->error = new IXR_Error( 405, sprintf( __( 'XML-RPC services are disabled on this site.  An admin user can enable them at %s'),  admin_url('options-writing.php') ) );			return false;		}		$user = wp_authenticate($username, $password);		if (is_wp_error($user)) {			$this->error = new IXR_Error(403, __('Bad login/pass combination.'));			return false;		}		wp_set_current_user( $user->ID );		return $user;	}	/**	 * Sanitize string or array of strings for database.	 *	 * @since 1.5.2	 *	 * @param string|array $array Sanitize single string or array of strings.	 * @return string|array Type matches $array and sanitized for the database.	 */	function escape(&$array) {		global $wpdb;		if (!is_array($array)) {			return($wpdb->escape($array));		} else {			foreach ( (array) $array as $k => $v ) {				if ( is_array($v) ) {					$this->escape($array[$k]);				} else if ( is_object($v) ) {					//skip				} else {					$array[$k] = $wpdb->escape($v);				}			}		}	}	/**	 * Retrieve custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @return array Custom fields, if exist.	 */	function get_custom_fields($post_id) {		$post_id = (int) $post_id;		$custom_fields = array();		foreach ( (array) has_meta($post_id) as $meta ) {			// Don't expose protected fields.			if ( strpos($meta['meta_key'], '_wp_') === 0 ) {				continue;			}			$custom_fields[] = array(				"id"    => $meta['meta_id'],				"key"   => $meta['meta_key'],				"value" => $meta['meta_value']			);		}		return $custom_fields;	}	/**	 * Set custom fields for post.	 *	 * @since 2.5.0	 *	 * @param int $post_id Post ID.	 * @param array $fields Custom fields.	 */	function set_custom_fields($post_id, $fields) {		$post_id = (int) $post_id;		foreach ( (array) $fields as $meta ) {			if ( isset($meta['id']) ) {				$meta['id'] = (int) $meta['id'];				if ( isset($meta['key']) ) {					update_meta($meta['id'], $meta['key'], $meta['value']);				}				else {					delete_meta($meta['id']);				}			}			else {				$_POST['metakeyinput'] = $meta['key'];				$_POST['metavalue'] = $meta['value'];				add_meta($post_id);			}		}	}	/**	 * Set up blog options property.	 *	 * Passes property through 'xmlrpc_blog_options' filter.	 *	 * @since 2.6.0	 */	function initialise_blog_option_info( ) {		global $wp_version;		$this->blog_options = array(			// Read only options			'software_name'		=> array(				'desc'			=> __( 'Software Name' ),				'readonly'		=> true,				'value'			=> 'WordPress'			),			'software_version'	=> array(				'desc'			=> __( 'Software Version' ),				'readonly'		=> true,				'value'			=> $wp_version			),			'blog_url'			=> array(				'desc'			=> __( 'Site URL' ),				'readonly'		=> true,				'option'		=> 'siteurl'			),			// Updatable options			'time_zone'			=> array(				'desc'			=> __( 'Time Zone' ),				'readonly'		=> false,				'option'		=> 'gmt_offset'			),			'blog_title'		=> array(				'desc'			=> __( 'Site Title' ),				'readonly'		=> false,				'option'			=> 'blogname'			),			'blog_tagline'		=> array(				'desc'			=> __( 'Site Tagline' ),				'readonly'		=> false,				'option'		=> 'blogdescription'			),			'date_format'		=> array(				'desc'			=> __( 'Date Format' ),				'readonly'		=> false,				'option'		=> 'date_format'			),			'time_format'		=> array(				'desc'			=> __( 'Time Format' ),				'readonly'		=> false,				'option'		=> 'time_format'			),			'users_can_register'	=> array(				'desc'			=> __( 'Allow new users to sign up' ),				'readonly'		=> false,				'option'		=> 'users_can_register'			)		);		$this->blog_options = apply_filters( 'xmlrpc_blog_options', $this->blog_options );	}	/**	 * Retrieve the blogs of the user.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getUsersBlogs( $args ) {		global $current_site;		// If this isn't on WPMU then just use blogger_getUsersBlogs		if ( !is_multisite() ) {			array_unshift( $args, 1 );			return $this->blogger_getUsersBlogs( $args );		}		$this->escape( $args );		$username = $args[0];		$password = $args[1];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action( 'xmlrpc_call', 'wp.getUsersBlogs' );		$blogs = (array) get_blogs_of_user( $user->ID );		$struct = array( );		foreach ( $blogs as $blog ) {			// Don't include blogs that aren't hosted at this site			if ( $blog->site_id != $current_site->id )				continue;			$blog_id = $blog->userblog_id;			switch_to_blog($blog_id);			$is_admin = current_user_can('manage_options');			$struct[] = array(				'isAdmin'		=> $is_admin,				'url'			=> get_option( 'home' ) . '/',				'blogid'		=> $blog_id,				'blogName'		=> get_option( 'blogname' ),				'xmlrpc'		=> site_url( 'xmlrpc.php' )			);			restore_current_blog( );		}		return $struct;	}	/**	 * Retrieve page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$page_id	= (int) $args[1];		$username	= $args[2];		$password	= $args[3];		if ( !$user = $this->login($username, $password) ) {			return $this->error;		}		if ( !current_user_can( 'edit_page', $page_id ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this page.' ) );		do_action('xmlrpc_call', 'wp.getPage');		// Lookup page info.		$page = get_page($page_id);		// If we found the page then format the data.		if ( $page->ID && ($page->post_type == "page") ) {			// Get all of the page content and link.			$full_page = get_extended($page->post_content);			$link = post_permalink($page->ID);			// Get info the page parent if there is one.			$parent_title = "";			if ( !empty($page->post_parent) ) {				$parent = get_page($page->post_parent);				$parent_title = $parent->post_title;			}			// Determine comment and ping settings.			$allow_comments = comments_open($page->ID) ? 1 : 0;			$allow_pings = pings_open($page->ID) ? 1 : 0;			// Format page date.			$page_date = mysql2date("Ymd\TH:i:s", $page->post_date, false);			$page_date_gmt = mysql2date("Ymd\TH:i:s", $page->post_date_gmt, false);			// For drafts use the GMT version of the date			if ( $page->post_status == 'draft' )				$page_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page->post_date ), 'Ymd\TH:i:s' );			// Pull the categories info together.			$categories = array();			foreach ( wp_get_post_categories($page->ID) as $cat_id ) {				$categories[] = get_cat_name($cat_id);			}			// Get the author info.			$author = get_userdata($page->post_author);			$page_template = get_post_meta( $page->ID, '_wp_page_template', true );			if ( empty( $page_template ) )				$page_template = 'default';			$page_struct = array(				"dateCreated"			=> new IXR_Date($page_date),				"userid"				=> $page->post_author,				"page_id"				=> $page->ID,				"page_status"			=> $page->post_status,				"description"			=> $full_page["main"],				"title"					=> $page->post_title,				"link"					=> $link,				"permaLink"				=> $link,				"categories"			=> $categories,				"excerpt"				=> $page->post_excerpt,				"text_more"				=> $full_page["extended"],				"mt_allow_comments"		=> $allow_comments,				"mt_allow_pings"		=> $allow_pings,				"wp_slug"				=> $page->post_name,				"wp_password"			=> $page->post_password,				"wp_author"				=> $author->display_name,				"wp_page_parent_id"		=> $page->post_parent,				"wp_page_parent_title"	=> $parent_title,				"wp_page_order"			=> $page->menu_order,				"wp_author_id"			=> $author->ID,				"wp_author_display_name"	=> $author->display_name,				"date_created_gmt"		=> new IXR_Date($page_date_gmt),				"custom_fields"			=> $this->get_custom_fields($page_id),				"wp_page_template"		=> $page_template			);			return($page_struct);		}		// If the page doesn't exist indicate that.		else {			return(new IXR_Error(404, __("Sorry, no such page.")));		}	}	/**	 * Retrieve Pages.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPages($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$num_pages	= isset($args[3]) ? (int) $args[3] : 10;		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPages');		$pages = get_posts( array('post_type' => 'page', 'post_status' => 'any', 'numberposts' => $num_pages) );		$num_pages = count($pages);		// If we have pages, put together their info.		if ( $num_pages >= 1 ) {			$pages_struct = array();			for ( $i = 0; $i < $num_pages; $i++ ) {				$page = wp_xmlrpc_server::wp_getPage(array(					$blog_id, $pages[$i]->ID, $username, $password				));				$pages_struct[] = $page;			}			return($pages_struct);		}		// If no pages were found return an error.		else {			return(array());		}	}	/**	 * Create new page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_newPage($args) {		// Items not escaped here will be escaped in newPost.		$username	= $this->escape($args[1]);		$password	= $this->escape($args[2]);		$page		= $args[3];		$publish	= $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newPage');		// Make sure the user is allowed to add new pages.		if ( !current_user_can("publish_pages") )			return(new IXR_Error(401, __("Sorry, you cannot add new pages.")));		// Mark this as content for a page.		$args[3]["post_type"] = "page";		// Let mw_newPost do all of the heavy lifting.		return($this->mw_newPost($args));	}	/**	 * Delete page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return bool True, if success.	 */	function wp_deletePage($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$page_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deletePage');		// Get the current page based on the page_id and		// make sure it is a page and not a post.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user can delete pages.		if ( !current_user_can("delete_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to delete this page.")));		// Attempt to delete the page.		$result = wp_delete_post($page_id);		if ( !$result )			return(new IXR_Error(500, __("Failed to delete the page.")));		return(true);	}	/**	 * Edit page.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_editPage($args) {		// Items not escaped here will be escaped in editPost.		$blog_id	= (int) $args[0];		$page_id	= (int) $this->escape($args[1]);		$username	= $this->escape($args[2]);		$password	= $this->escape($args[3]);		$content	= $args[4];		$publish	= $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.editPage');		// Get the page data and make sure it is a page.		$actual_page = wp_get_single_post($page_id, ARRAY_A);		if ( !$actual_page || ($actual_page["post_type"] != "page") )			return(new IXR_Error(404, __("Sorry, no such page.")));		// Make sure the user is allowed to edit pages.		if ( !current_user_can("edit_page", $page_id) )			return(new IXR_Error(401, __("Sorry, you do not have the right to edit this page.")));		// Mark this as content for a page.		$content["post_type"] = "page";		// Arrange args in the way mw_editPost understands.		$args = array(			$page_id,			$username,			$password,			$content,			$publish		);		// Let mw_editPost do all of the heavy lifting.		return($this->mw_editPost($args));	}	/**	 * Retrieve page list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_getPageList($args) {		global $wpdb;		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit pages.' ) );		do_action('xmlrpc_call', 'wp.getPageList');		// Get list of pages ids and titles		$page_list = $wpdb->get_results("			SELECT ID page_id,				post_title page_title,				post_parent page_parent_id,				post_date_gmt,				post_date,				post_status			FROM {$wpdb->posts}			WHERE post_type = 'page'			ORDER BY ID		");		// The date needs to be formated properly.		$num_pages = count($page_list);		for ( $i = 0; $i < $num_pages; $i++ ) {			$post_date = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date, false);			$post_date_gmt = mysql2date("Ymd\TH:i:s", $page_list[$i]->post_date_gmt, false);			$page_list[$i]->dateCreated = new IXR_Date($post_date);			$page_list[$i]->date_created_gmt = new IXR_Date($post_date_gmt);			// For drafts use the GMT version of the date			if ( $page_list[$i]->post_status == 'draft' ) {				$page_list[$i]->date_created_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $page_list[$i]->post_date ), 'Ymd\TH:i:s' );				$page_list[$i]->date_created_gmt = new IXR_Date( $page_list[$i]->date_created_gmt );			}			unset($page_list[$i]->post_date_gmt);			unset($page_list[$i]->post_date);			unset($page_list[$i]->post_status);		}		return($page_list);	}	/**	 * Retrieve authors list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getAuthors($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can("edit_posts") )			return(new IXR_Error(401, __("Sorry, you cannot edit posts on this site.")));		do_action('xmlrpc_call', 'wp.getAuthors');		$authors = array();		foreach ( (array) get_users_of_blog() as $row ) {			$authors[] = array(				"user_id"       => $row->user_id,				"user_login"    => $row->user_login,				"display_name"  => $row->display_name			);		}		return($authors);	}	/**	 * Get list of all tags	 *	 * @since 2.7	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getTags( $args ) {		$this->escape( $args );		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view tags.' ) );		do_action( 'xmlrpc_call', 'wp.getKeywords' );		$tags = array( );		if ( $all_tags = get_tags() ) {			foreach( (array) $all_tags as $tag ) {				$struct['tag_id']			= $tag->term_id;				$struct['name']				= $tag->name;				$struct['count']			= $tag->count;				$struct['slug']				= $tag->slug;				$struct['html_url']			= esc_html( get_tag_link( $tag->term_id ) );				$struct['rss_url']			= esc_html( get_tag_feed_link( $tag->term_id ) );				$tags[] = $struct;			}		}		return $tags;	}	/**	 * Create new category.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return int Category ID.	 */	function wp_newCategory($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.newCategory');		// Make sure the user is allowed to add a category.		if ( !current_user_can("manage_categories") )			return(new IXR_Error(401, __("Sorry, you do not have the right to add a category.")));		// If no slug was provided make it empty so that		// WordPress will generate one.		if ( empty($category["slug"]) )			$category["slug"] = "";		// If no parent_id was provided make it empty		// so that it will be a top level page (no parent).		if ( !isset($category["parent_id"]) )			$category["parent_id"] = "";		// If no description was provided make it empty.		if ( empty($category["description"]) )			$category["description"] = "";		$new_category = array(			"cat_name"				=> $category["name"],			"category_nicename"		=> $category["slug"],			"category_parent"		=> $category["parent_id"],			"category_description"	=> $category["description"]		);		$cat_id = wp_insert_category($new_category);		if ( !$cat_id )			return(new IXR_Error(500, __("Sorry, the new category failed.")));		return($cat_id);	}	/**	 * Remove category.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return mixed See {@link wp_delete_category()} for return info.	 */	function wp_deleteCategory($args) {		$this->escape($args);		$blog_id		= (int) $args[0];		$username		= $args[1];		$password		= $args[2];		$category_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'wp.deleteCategory');		if ( !current_user_can("manage_categories") )			return new IXR_Error( 401, __( "Sorry, you do not have the right to delete a category." ) );		return wp_delete_category( $category_id );	}	/**	 * Retrieve category list.	 *	 * @since 2.2.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_suggestCategories($args) {		$this->escape($args);		$blog_id				= (int) $args[0];		$username				= $args[1];		$password				= $args[2];		$category				= $args[3];		$max_results			= (int) $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts to this site in order to view categories.' ) );		do_action('xmlrpc_call', 'wp.suggestCategories');		$category_suggestions = array();		$args = array('get' => 'all', 'number' => $max_results, 'name__like' => $category);		foreach ( (array) get_categories($args) as $cat ) {			$category_suggestions[] = array(				"category_id"	=> $cat->cat_ID,				"category_name"	=> $cat->cat_name			);		}		return($category_suggestions);	}	/**	 * Retrieve comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.getComment');		if ( ! $comment = get_comment($comment_id) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		// Format page date.		$comment_date = mysql2date("Ymd\TH:i:s", $comment->comment_date, false);		$comment_date_gmt = mysql2date("Ymd\TH:i:s", $comment->comment_date_gmt, false);		if ( '0' == $comment->comment_approved )			$comment_status = 'hold';		else if ( 'spam' == $comment->comment_approved )			$comment_status = 'spam';		else if ( '1' == $comment->comment_approved )			$comment_status = 'approve';		else			$comment_status = $comment->comment_approved;		$link = get_comment_link($comment);		$comment_struct = array(			"date_created_gmt"		=> new IXR_Date($comment_date_gmt),			"user_id"				=> $comment->user_id,			"comment_id"			=> $comment->comment_ID,			"parent"				=> $comment->comment_parent,			"status"				=> $comment_status,			"content"				=> $comment->comment_content,			"link"					=> $link,			"post_id"				=> $comment->comment_post_ID,			"post_title"			=> get_the_title($comment->comment_post_ID),			"author"				=> $comment->comment_author,			"author_url"			=> $comment->comment_author_url,			"author_email"			=> $comment->comment_author_email,			"author_ip"				=> $comment->comment_author_IP,			"type"					=> $comment->comment_type,		);		return $comment_struct;	}	/**	 * Retrieve comments.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getComments($args) {		$raw_args = $args;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$struct		= $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit comments.' ) );		do_action('xmlrpc_call', 'wp.getComments');		if ( isset($struct['status']) )			$status = $struct['status'];		else			$status = '';		$post_id = '';		if ( isset($struct['post_id']) )			$post_id = absint($struct['post_id']);		$offset = 0;		if ( isset($struct['offset']) )			$offset = absint($struct['offset']);		$number = 10;		if ( isset($struct['number']) )			$number = absint($struct['number']);		$comments = get_comments( array('status' => $status, 'post_id' => $post_id, 'offset' => $offset, 'number' => $number ) );		$num_comments = count($comments);		if ( ! $num_comments )			return array();		$comments_struct = array();		for ( $i = 0; $i < $num_comments; $i++ ) {			$comment = wp_xmlrpc_server::wp_getComment(array(				$raw_args[0], $raw_args[1], $raw_args[2], $comments[$i]->comment_ID,			));			$comments_struct[] = $comment;		}		return $comments_struct;	}	/**	 * Remove comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_delete_comment()}	 */	function wp_deleteComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.deleteComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		return wp_delete_comment($comment_ID);	}	/**	 * Edit comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return bool True, on success.	 */	function wp_editComment($args) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$comment_ID	= (int) $args[3];		$content_struct = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed to moderate comments on this site.' ) );		do_action('xmlrpc_call', 'wp.editComment');		if ( ! get_comment($comment_ID) )			return new IXR_Error( 404, __( 'Invalid comment ID.' ) );		if ( isset($content_struct['status']) ) {			$statuses = get_comment_statuses();			$statuses = array_keys($statuses);			if ( ! in_array($content_struct['status'], $statuses) )				return new IXR_Error( 401, __( 'Invalid comment status.' ) );			$comment_approved = $content_struct['status'];		}		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) ) {			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force			$comment_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$comment_date_gmt = iso8601_to_datetime($dateCreated, GMT);		}		if ( isset($content_struct['content']) )			$comment_content = $content_struct['content'];		if ( isset($content_struct['author']) )			$comment_author = $content_struct['author'];		if ( isset($content_struct['author_url']) )			$comment_author_url = $content_struct['author_url'];		if ( isset($content_struct['author_email']) )			$comment_author_email = $content_struct['author_email'];		// We've got all the data -- post it:		$comment = compact('comment_ID', 'comment_content', 'comment_approved', 'comment_date', 'comment_date_gmt', 'comment_author', 'comment_author_email', 'comment_author_url');		$result = wp_update_comment($comment);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, the comment could not be edited. Something wrong happened.'));		return true;	}	/**	 * Create new comment.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return mixed {@link wp_new_comment()}	 */	function wp_newComment($args) {		global $wpdb;		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post		= $args[3];		$content_struct = $args[4];		$allow_anon = apply_filters('xmlrpc_allow_anonymous_comments', false);		$user = $this->login($username, $password);		if ( !$user ) {			$logged_in = false;			if ( $allow_anon && get_option('comment_registration') )				return new IXR_Error( 403, __( 'You must be registered to comment' ) );			else if ( !$allow_anon )				return $this->error;		} else {			$logged_in = true;		}		if ( is_numeric($post) )			$post_id = absint($post);		else			$post_id = url_to_postid($post);		if ( ! $post_id )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		if ( ! get_post($post_id) )			return new IXR_Error( 404, __( 'Invalid post ID.' ) );		$comment['comment_post_ID'] = $post_id;		if ( $logged_in ) {			$comment['comment_author'] = $wpdb->escape( $user->display_name );			$comment['comment_author_email'] = $wpdb->escape( $user->user_email );			$comment['comment_author_url'] = $wpdb->escape( $user->user_url );			$comment['user_ID'] = $user->ID;		} else {			$comment['comment_author'] = '';			if ( isset($content_struct['author']) )				$comment['comment_author'] = $content_struct['author'];			$comment['comment_author_email'] = '';			if ( isset($content_struct['author_email']) )				$comment['comment_author_email'] = $content_struct['author_email'];			$comment['comment_author_url'] = '';			if ( isset($content_struct['author_url']) )				$comment['comment_author_url'] = $content_struct['author_url'];			$comment['user_ID'] = 0;			if ( get_option('require_name_email') ) {				if ( 6 > strlen($comment['comment_author_email']) || '' == $comment['comment_author'] )					return new IXR_Error( 403, __( 'Comment author name and email are required' ) );				elseif ( !is_email($comment['comment_author_email']) )					return new IXR_Error( 403, __( 'A valid email address is required' ) );			}		}		$comment['comment_parent'] = isset($content_struct['comment_parent']) ? absint($content_struct['comment_parent']) : 0;		$comment['comment_content'] = $content_struct['content'];		do_action('xmlrpc_call', 'wp.newComment');		return wp_new_comment($comment);	}	/**	 * Retrieve all of the comment status.	 *	 * @since 2.7.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentStatusList($args) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'moderate_comments' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getCommentStatusList');		return get_comment_statuses( );	}	/**	 * Retrieve comment count.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getCommentCount( $args ) {		$this->escape($args);		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$post_id	= (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about comments.' ) );		do_action('xmlrpc_call', 'wp.getCommentCount');		$count = wp_count_comments( $post_id );		return array(			"approved" => $count->approved,			"awaiting_moderation" => $count->moderated,			"spam" => $count->spam,			"total_comments" => $count->total_comments		);	}	/**	 * Retrieve post statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPostStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPostStatusList');		return get_post_statuses( );	}	/**	 * Retrieve page statuses.	 *	 * @since 2.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageStatusList( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		do_action('xmlrpc_call', 'wp.getPageStatusList');		return get_page_statuses( );	}	/**	 * Retrieve page templates.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getPageTemplates( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_pages' ) )			return new IXR_Error( 403, __( 'You are not allowed access to details about this site.' ) );		$templates = get_page_templates( );		$templates['Default'] = 'default';		return $templates;	}	/**	 * Retrieve blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function wp_getOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		// If no specific options where asked for, return all of them		if ( count( $options ) == 0 )			$options = array_keys($this->blog_options);		return $this->_getOptions($options);	}	/**	 * Retrieve blog options value from list.	 *	 * @since 2.6.0	 *	 * @param array $options Options to retrieve.	 * @return array	 */	function _getOptions($options) {		$data = array( );		foreach ( $options as $option ) {			if ( array_key_exists( $option, $this->blog_options ) ) {				$data[$option] = $this->blog_options[$option];				//Is the value static or dynamic?				if ( isset( $data[$option]['option'] ) ) {					$data[$option]['value'] = get_option( $data[$option]['option'] );					unset($data[$option]['option']);				}			}		}		return $data;	}	/**	 * Update blog options.	 *	 * @since 2.6.0	 *	 * @param array $args Method parameters.	 * @return unknown	 */	function wp_setOptions( $args ) {		$this->escape( $args );		$blog_id	= (int) $args[0];		$username	= $args[1];		$password	= $args[2];		$options	= (array) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'manage_options' ) )			return new IXR_Error( 403, __( 'You are not allowed to update options.' ) );		foreach ( $options as $o_name => $o_value ) {			$option_names[] = $o_name;			if ( !array_key_exists( $o_name, $this->blog_options ) )				continue;			if ( $this->blog_options[$o_name]['readonly'] == true )				continue;			update_option( $this->blog_options[$o_name]['option'], $o_value );		}		//Now return the updated values		return $this->_getOptions($option_names);	}	/* Blogger API functions.	 * specs on http://plant.blogger.com/api and http://groups.yahoo.com/group/bloggerDev/	 */	/**	 * Retrieve blogs that user owns.	 *	 * Will make more sense once we support multiple blogs.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUsersBlogs($args) {		if ( is_multisite() )			return $this->_multisite_getUsersBlogs($args);		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getUsersBlogs');		$is_admin = current_user_can('manage_options');		$struct = array(			'isAdmin'  => $is_admin,			'url'      => get_option('home') . '/',			'blogid'   => '1',			'blogName' => get_option('blogname'),			'xmlrpc'   => site_url( 'xmlrpc.php' )		);		return array($struct);	}	/**	 * Private function for retrieving a users blogs for multisite setups	 *	 * @access protected	 */	function _multisite_getUsersBlogs($args) {		global $current_blog;		$domain = $current_blog->domain;		$path = $current_blog->path . 'xmlrpc.php';		$protocol = is_ssl() ? 'https' : 'http';		$rpc = new IXR_Client("$protocol://{$domain}{$path}");		$rpc->query('wp.getUsersBlogs', $args[1], $args[2]);		$blogs = $rpc->getResponse();		if ( isset($blogs['faultCode']) )			return new IXR_Error($blogs['faultCode'], $blogs['faultString']);		if ( $_SERVER['HTTP_HOST'] == $domain && $_SERVER['REQUEST_URI'] == $path ) {			return $blogs;		} else {			foreach ( (array) $blogs as $blog ) {				if ( strpos($blog['url'], $_SERVER['HTTP_HOST']) )					return array($blog);			}			return array();		}	}	/**	 * Retrieve user's data.	 *	 * Gives your client some info about you, so you don't have to.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getUserInfo($args) {		$this->escape($args);		$username = $args[1];		$password  = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you do not have access to user data on this site.' ) );		do_action('xmlrpc_call', 'blogger.getUserInfo');		$struct = array(			'nickname'  => $user->nickname,			'userid'    => $user->ID,			'url'       => $user->user_url,			'lastname'  => $user->last_name,			'firstname' => $user->first_name		);		return $struct;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getPost($args) {		$this->escape($args);		$post_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'blogger.getPost');		$post_data = wp_get_single_post($post_ID, ARRAY_A);		$categories = implode(',', wp_get_post_categories($post_ID));		$content  = '<title>'.stripslashes($post_data['post_title']).'</title>';		$content .= '<category>'.$categories.'</category>';		$content .= stripslashes($post_data['post_content']);		$struct = array(			'userid'    => $post_data['post_author'],			'dateCreated' => new IXR_Date(mysql2date('Ymd\TH:i:s', $post_data['post_date'], false)),			'content'     => $content,			'postid'  => $post_data['ID']		);		return $struct;	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function blogger_getRecentPosts($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$num_posts  = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$categories = implode(',', wp_get_post_categories($entry['ID']));			$content  = '<title>'.stripslashes($entry['post_title']).'</title>';			$content .= '<category>'.$categories.'</category>';			$content .= stripslashes($entry['post_content']);			$struct[] = array(				'userid' => $entry['post_author'],				'dateCreated' => new IXR_Date($post_date),				'content' => $content,				'postid' => $entry['ID'],			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve blog_filename content.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return string	 */	function blogger_getTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$template   = $args[4]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.getTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user can not edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		$f = fopen($filename, 'r');		$content = fread($f, filesize($filename));		fclose($f);		/* so it is actually editable with a windows/mac client */		// FIXME: (or delete me) do we really want to cater to bad clients at the expense of good ones by BEEPing up their line breaks? commented.     $content = str_replace("\n", "\r\n", $content);		return $content;	}	/**	 * Updates the content of blog_filename.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when done.	 */	function blogger_setTemplate($args) {		$this->escape($args);		$blog_ID    = (int) $args[1];		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$template   = $args[5]; /* could be 'main' or 'archiveIndex', but we don't use it */		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.setTemplate');		if ( !current_user_can('edit_themes') )			return new IXR_Error(401, __('Sorry, this user cannot edit the template.'));		/* warning: here we make the assumption that the blog's URL is on the same server */		$filename = get_option('home') . '/';		$filename = preg_replace('#https?://.+?/#', $_SERVER['DOCUMENT_ROOT'].'/', $filename);		if ($f = fopen($filename, 'w+')) {			fwrite($f, $content);			fclose($f);		} else {			return new IXR_Error(500, __('Either the file is not writable, or something wrong happened. The file has not been updated.'));		}		return true;	}	/**	 * Create new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function blogger_newPost($args) {		$this->escape($args);		$blog_ID    = (int) $args[1]; /* though we don't use it yet */		$username = $args[2];		$password  = $args[3];		$content    = $args[4];		$publish    = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.newPost');		$cap = ($publish) ? 'publish_posts' : 'edit_posts';		if ( !current_user_can($cap) )			return new IXR_Error(401, __('Sorry, you are not allowed to post on this site.'));		$post_status = ($publish) ? 'publish' : 'draft';		$post_author = $user->ID;		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$post_date = current_time('mysql');		$post_date_gmt = current_time('mysql', 1);		$post_data = compact('blog_ID', 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status');		$post_ID = wp_insert_post($post_data);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return $post_ID;	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool true when done.	 */	function blogger_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$content     = $args[4];		$publish     = $args[5];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.editPost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		$this->escape($actual_post);		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to edit this post.'));		extract($actual_post, EXTR_SKIP);		if ( ('publish' == $post_status) && !current_user_can('publish_posts') )			return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		$post_title = xmlrpc_getposttitle($content);		$post_category = xmlrpc_getpostcategory($content);		$post_content = xmlrpc_removepostdata($content);		$postdata = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt');		$result = wp_update_post($postdata);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be edited.'));		$this->attach_uploads( $ID, $post_content );		return true;	}	/**	 * Remove a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True when post is deleted.	 */	function blogger_deletePost($args) {		$this->escape($args);		$post_ID     = (int) $args[1];		$username  = $args[2];		$password   = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'blogger.deletePost');		$actual_post = wp_get_single_post($post_ID,ARRAY_A);		if ( !$actual_post || $actual_post['post_type'] != 'post' )			return new IXR_Error(404, __('Sorry, no such post.'));		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you do not have the right to delete this post.'));		$result = wp_delete_post($post_ID);		if ( !$result )			return new IXR_Error(500, __('For some strange yet very annoying reason, this post could not be deleted.'));		return true;	}	/* MetaWeblog API functions	 * specs on wherever Dave Winer wants them to be	 */	/**	 * Create a new post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mw_newPost($args) {		$this->escape($args);		$blog_ID     = (int) $args[0]; // we will support this in the near future		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		// Let WordPress generate the post_name (slug) unless		// one has been provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was provided.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was provided.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $user->ID;		// If an author id was provided then use it instead.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to post as this user")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to create pages as this user")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch ( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$tags_input = $content_struct['mt_keywords'];		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		} else {			$comment_status = get_option("default_comment_status");		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct['mt_allow_pings'] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		} else {			$ping_status = get_option("default_ping_status");		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date = current_time('mysql');			$post_date_gmt = current_time('mysql', 1);		}		$catnames = $content_struct['categories'];		logIO('O', 'Post cats: ' . var_export($catnames,true));		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {				$post_category[] = get_cat_ID($cat);			}		}		// We've got all the data -- post it:		$postdata = compact('post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'to_ping', 'post_type', 'post_name', 'post_password', 'post_parent', 'menu_order', 'tags_input', 'page_template');		$post_ID = wp_insert_post($postdata, true);		if ( is_wp_error( $post_ID ) )			return new IXR_Error(500, $post_ID->get_error_message());		if ( !$post_ID )			return new IXR_Error(500, __('Sorry, your entry could not be posted. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $post_ID, $post_content );		logIO('O', "Posted ! ID: $post_ID");		return strval($post_ID);	}	function add_enclosure_if_new($post_ID, $enclosure) {		if ( is_array( $enclosure ) && isset( $enclosure['url'] ) && isset( $enclosure['length'] ) && isset( $enclosure['type'] ) ) {			$encstring = $enclosure['url'] . "\n" . $enclosure['length'] . "\n" . $enclosure['type'];			$found = false;			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						if ($enc == $encstring) {							$found = true;							break 2;						}					}				}			}			if (!$found)				add_post_meta( $post_ID, 'enclosure', $encstring );		}	}	/**	 * Attach upload to a post.	 *	 * @since 2.1.0	 *	 * @param int $post_ID Post ID.	 * @param string $post_content Post Content for attachment.	 */	function attach_uploads( $post_ID, $post_content ) {		global $wpdb;		// find any unattached files		$attachments = $wpdb->get_results( "SELECT ID, guid FROM {$wpdb->posts} WHERE post_parent = '0' AND post_type = 'attachment'" );		if ( is_array( $attachments ) ) {			foreach ( $attachments as $file ) {				if ( strpos( $post_content, $file->guid ) !== false )					$wpdb->update($wpdb->posts, array('post_parent' => $post_ID), array('ID' => $file->ID) );			}		}	}	/**	 * Edit a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mw_editPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$content_struct = $args[3];		$publish     = $args[4];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.editPost');		$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';		$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );		$post_type = 'post';		$page_template = '';		if ( !empty( $content_struct['post_type'] ) ) {			if ( $content_struct['post_type'] == 'page' ) {				$cap = ( $publish ) ? 'publish_pages' : 'edit_pages';				$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );				$post_type = 'page';				if ( !empty( $content_struct['wp_page_template'] ) )					$page_template = $content_struct['wp_page_template'];			} elseif ( $content_struct['post_type'] == 'post' ) {				// This is the default, no changes needed			} else {				// No other post_type values are allowed here				return new IXR_Error( 401, __( 'Invalid post type.' ) );			}		}		if ( !current_user_can( $cap ) )			return new IXR_Error( 401, $error_message );		$postdata = wp_get_single_post($post_ID, ARRAY_A);		// If there is no post data for the give post id, stop		// now and return an error.  Other wise a new post will be		// created (which was the old behavior).		if ( empty($postdata["ID"]) )			return(new IXR_Error(404, __("Invalid post ID.")));		$this->escape($postdata);		extract($postdata, EXTR_SKIP);		// Let WordPress manage slug if none was provided.		$post_name = "";		if ( isset($content_struct["wp_slug"]) )			$post_name = $content_struct["wp_slug"];		// Only use a password if one was given.		if ( isset($content_struct["wp_password"]) )			$post_password = $content_struct["wp_password"];		// Only set a post parent if one was given.		if ( isset($content_struct["wp_page_parent_id"]) )			$post_parent = $content_struct["wp_page_parent_id"];		// Only set the menu_order if it was given.		if ( isset($content_struct["wp_page_order"]) )			$menu_order = $content_struct["wp_page_order"];		$post_author = $postdata["post_author"];		// Only set the post_author if one is set.		if ( isset($content_struct["wp_author_id"]) && ($user->ID != $content_struct["wp_author_id"]) ) {			switch ( $post_type ) {				case "post":					if ( !current_user_can("edit_others_posts") )						return(new IXR_Error(401, __("You are not allowed to change the post author as this user.")));					break;				case "page":					if ( !current_user_can("edit_others_pages") )						return(new IXR_Error(401, __("You are not allowed to change the page author as this user.")));					break;				default:					return(new IXR_Error(401, __("Invalid post type.")));					break;			}			$post_author = $content_struct["wp_author_id"];		}		if ( isset($content_struct["mt_allow_comments"]) ) {			if ( !is_numeric($content_struct["mt_allow_comments"]) ) {				switch ( $content_struct["mt_allow_comments"] ) {					case "closed":						$comment_status = "closed";						break;					case "open":						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_comments"] ) {					case 0:					case 2:						$comment_status = "closed";						break;					case 1:						$comment_status = "open";						break;					default:						$comment_status = get_option("default_comment_status");						break;				}			}		}		if ( isset($content_struct["mt_allow_pings"]) ) {			if ( !is_numeric($content_struct["mt_allow_pings"]) ) {				switch ( $content_struct["mt_allow_pings"] ) {					case "closed":						$ping_status = "closed";						break;					case "open":						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			} else {				switch ( (int) $content_struct["mt_allow_pings"] ) {					case 0:						$ping_status = "closed";						break;					case 1:						$ping_status = "open";						break;					default:						$ping_status = get_option("default_ping_status");						break;				}			}		}		$post_title = $content_struct['title'];		$post_content = $content_struct['description'];		$catnames = $content_struct['categories'];		$post_category = array();		if ( is_array($catnames) ) {			foreach ($catnames as $cat) {		 		$post_category[] = get_cat_ID($cat);			}		}		$post_excerpt = $content_struct['mt_excerpt'];		$post_more = $content_struct['mt_text_more'];		$post_status = $publish ? 'publish' : 'draft';		if ( isset( $content_struct["{$post_type}_status"] ) ) {			switch( $content_struct["{$post_type}_status"] ) {				case 'draft':				case 'private':				case 'publish':					$post_status = $content_struct["{$post_type}_status"];					break;				case 'pending':					// Pending is only valid for posts, not pages.					if ( $post_type === 'post' )						$post_status = $content_struct["{$post_type}_status"];					break;				default:					$post_status = $publish ? 'publish' : 'draft';					break;			}		}		$tags_input = $content_struct['mt_keywords'];		if ( ('publish' == $post_status) ) {			if ( ( 'page' == $post_type ) && !current_user_can('publish_pages') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this page.'));			else if ( !current_user_can('publish_posts') )				return new IXR_Error(401, __('Sorry, you do not have the right to publish this post.'));		}		if ( $post_more )			$post_content = $post_content . "<!--more-->" . $post_more;		$to_ping = $content_struct['mt_tb_ping_urls'];		if ( is_array($to_ping) )			$to_ping = implode(' ', $to_ping);		// Do some timestamp voodoo		if ( !empty( $content_struct['date_created_gmt'] ) )			$dateCreated = str_replace( 'Z', '', $content_struct['date_created_gmt']->getIso() ) . 'Z'; // We know this is supposed to be GMT, so we're going to slap that Z on there by force		elseif ( !empty( $content_struct['dateCreated']) )			$dateCreated = $content_struct['dateCreated']->getIso();		if ( !empty( $dateCreated ) ) {			$post_date = get_date_from_gmt(iso8601_to_datetime($dateCreated));			$post_date_gmt = iso8601_to_datetime($dateCreated, GMT);		} else {			$post_date     = $postdata['post_date'];			$post_date_gmt = $postdata['post_date_gmt'];		}		// We've got all the data -- post it:		$newpost = compact('ID', 'post_content', 'post_title', 'post_category', 'post_status', 'post_excerpt', 'comment_status', 'ping_status', 'post_date', 'post_date_gmt', 'to_ping', 'post_name', 'post_password', 'post_parent', 'menu_order', 'post_author', 'tags_input', 'page_template');		$result = wp_update_post($newpost, true);		if ( is_wp_error( $result ) )			return new IXR_Error(500, $result->get_error_message());		if ( !$result )			return new IXR_Error(500, __('Sorry, your entry could not be edited. Something wrong happened.'));		// Only posts can be sticky		if ( $post_type == 'post' && isset( $content_struct['sticky'] ) ) {			if ( $content_struct['sticky'] == true )				stick_post( $post_ID );			elseif ( $content_struct['sticky'] == false )				unstick_post( $post_ID );		}		if ( isset($content_struct['custom_fields']) )			$this->set_custom_fields($post_ID, $content_struct['custom_fields']);		// Handle enclosures		$this->add_enclosure_if_new($post_ID, $content_struct['enclosure']);		$this->attach_uploads( $ID, $post_content );		logIO('O',"(MW) Edited ! ID: $post_ID");		return true;	}	/**	 * Retrieve post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you cannot edit this post.' ) );		do_action('xmlrpc_call', 'metaWeblog.getPost');		$postdata = wp_get_single_post($post_ID, ARRAY_A);		if ($postdata['post_date'] != '') {			$post_date = mysql2date('Ymd\TH:i:s', $postdata['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $postdata['post_date_gmt'], false);			// For drafts use the GMT version of the post date			if ( $postdata['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $postdata['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($post_ID);			foreach($catids as $catid)				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $post_ID );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag )					$tagnames[] = $tag->name;				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($postdata['post_content']);			$link = post_permalink($postdata['ID']);			// Get the author info.			$author = get_userdata($postdata['post_author']);			$allow_comments = ('open' == $postdata['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $postdata['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $postdata['post_status'] === 'future' )				$postdata['post_status'] = 'publish';			$sticky = false;			if ( is_sticky( $post_ID ) )				$sticky = true;			$enclosure = array();			foreach ( (array) get_post_custom($post_ID) as $key => $val) {				if ($key == 'enclosure') {					foreach ( (array) $val as $enc ) {						$encdata = split("\n", $enc);						$enclosure['url'] = trim(htmlspecialchars($encdata[0]));						$enclosure['length'] = (int) trim($encdata[1]);						$enclosure['type'] = trim($encdata[2]);						break 2;					}				}			}			$resp = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $postdata['post_author'],				'postid' => $postdata['ID'],				'description' => $post['main'],				'title' => $postdata['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				//	      'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $postdata['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $postdata['post_name'],				'wp_password' => $postdata['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name'	=> $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $postdata['post_status'],				'custom_fields' => $this->get_custom_fields($post_ID),				'sticky' => $sticky			);			if ( !empty($enclosure) ) $resp['enclosure'] = $enclosure;			return $resp;		} else {			return new IXR_Error(404, __('Sorry, no such post.'));		}	}	/**	 * Retrieve list of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getRecentPosts($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.getRecentPosts');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list )			return array( );		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$categories = array();			$catids = wp_get_post_categories($entry['ID']);			foreach( $catids as $catid )				$categories[] = get_cat_name($catid);			$tagnames = array();			$tags = wp_get_post_tags( $entry['ID'] );			if ( !empty( $tags ) ) {				foreach ( $tags as $tag ) {					$tagnames[] = $tag->name;				}				$tagnames = implode( ', ', $tagnames );			} else {				$tagnames = '';			}			$post = get_extended($entry['post_content']);			$link = post_permalink($entry['ID']);			// Get the post author info.			$author = get_userdata($entry['post_author']);			$allow_comments = ('open' == $entry['comment_status']) ? 1 : 0;			$allow_pings = ('open' == $entry['ping_status']) ? 1 : 0;			// Consider future posts as published			if ( $entry['post_status'] === 'future' )				$entry['post_status'] = 'publish';			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'description' => $post['main'],				'title' => $entry['post_title'],				'link' => $link,				'permaLink' => $link,				// commented out because no other tool seems to use this				// 'content' => $entry['post_content'],				'categories' => $categories,				'mt_excerpt' => $entry['post_excerpt'],				'mt_text_more' => $post['extended'],				'mt_allow_comments' => $allow_comments,				'mt_allow_pings' => $allow_pings,				'mt_keywords' => $tagnames,				'wp_slug' => $entry['post_name'],				'wp_password' => $entry['post_password'],				'wp_author_id' => $author->ID,				'wp_author_display_name' => $author->display_name,				'date_created_gmt' => new IXR_Date($post_date_gmt),				'post_status' => $entry['post_status'],				'custom_fields' => $this->get_custom_fields($entry['ID'])			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve the list of categories on a given blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_getCategories($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'metaWeblog.getCategories');		$categories_struct = array();		if ( $cats = get_categories(array('get' => 'all')) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['parentId'] = $cat->parent;				$struct['description'] = $cat->name;				$struct['categoryDescription'] = $cat->description;				$struct['categoryName'] = $cat->name;				$struct['htmlUrl'] = esc_html(get_category_link($cat->term_id));				$struct['rssUrl'] = esc_html(get_category_feed_link($cat->term_id, 'rss2'));				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Uploads a file, following your settings.	 *	 * Adapted from a patch by Johann Richard.	 *	 * @link http://mycvs.org/archives/2004/06/30/file-upload-to-wordpress-in-ecto/	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mw_newMediaObject($args) {		global $wpdb;		$blog_ID     = (int) $args[0];		$username  = $wpdb->escape($args[1]);		$password   = $wpdb->escape($args[2]);		$data        = $args[3];		$name = sanitize_file_name( $data['name'] );		$type = $data['type'];		$bits = $data['bits'];		logIO('O', '(MW) Received '.strlen($bits).' bytes');		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'metaWeblog.newMediaObject');		if ( !current_user_can('upload_files') ) {			logIO('O', '(MW) User does not have upload_files capability');			$this->error = new IXR_Error(401, __('You are not allowed to upload files to this site.'));			return $this->error;		}		if ( $upload_err = apply_filters( "pre_upload_error", false ) )			return new IXR_Error(500, $upload_err);		if ( !empty($data["overwrite"]) && ($data["overwrite"] == true) ) {			// Get postmeta info on the object.			$old_file = $wpdb->get_row("				SELECT ID				FROM {$wpdb->posts}				WHERE post_title = '{$name}'					AND post_type = 'attachment'			");			// Delete previous file.			wp_delete_attachment($old_file->ID);			// Make sure the new name is different by pre-pending the			// previous post id.			$filename = preg_replace("/^wpid\d+-/", "", $name);			$name = "wpid{$old_file->ID}-{$filename}";		}		$upload = wp_upload_bits($name, $type, $bits);		if ( ! empty($upload['error']) ) {			$errorString = sprintf(__('Could not write file %1$s (%2$s)'), $name, $upload['error']);			logIO('O', '(MW) ' . $errorString);			return new IXR_Error(500, $errorString);		}		// Construct the attachment array		// attach to post_id 0		$post_id = 0;		$attachment = array(			'post_title' => $name,			'post_content' => '',			'post_type' => 'attachment',			'post_parent' => $post_id,			'post_mime_type' => $type,			'guid' => $upload[ 'url' ]		);		// Save the data		$id = wp_insert_attachment( $attachment, $upload[ 'file' ], $post_id );		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );		return apply_filters( 'wp_handle_upload', array( 'file' => $name, 'url' => $upload[ 'url' ], 'type' => $type ), 'upload' );	}	/* MovableType API functions	 * specs on http://www.movabletype.org/docs/mtmanual_programmatic.html	 */	/**	 * Retrieve the post titles of recent posts.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getRecentPostTitles($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$num_posts   = (int) $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.getRecentPostTitles');		$posts_list = wp_get_recent_posts($num_posts);		if ( !$posts_list ) {			$this->error = new IXR_Error(500, __('Either there are no posts, or something went wrong.'));			return $this->error;		}		foreach ($posts_list as $entry) {			if ( !current_user_can( 'edit_post', $entry['ID'] ) )				continue;			$post_date = mysql2date('Ymd\TH:i:s', $entry['post_date'], false);			$post_date_gmt = mysql2date('Ymd\TH:i:s', $entry['post_date_gmt'], false);			// For drafts use the GMT version of the date			if ( $entry['post_status'] == 'draft' )				$post_date_gmt = get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $entry['post_date'] ), 'Ymd\TH:i:s' );			$struct[] = array(				'dateCreated' => new IXR_Date($post_date),				'userid' => $entry['post_author'],				'postid' => $entry['ID'],				'title' => $entry['post_title'],				'date_created_gmt' => new IXR_Date($post_date_gmt)			);		}		$recent_posts = array();		for ( $j=0; $j<count($struct); $j++ ) {			array_push($recent_posts, $struct[$j]);		}		return $recent_posts;	}	/**	 * Retrieve list of all categories on blog.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getCategoryList($args) {		$this->escape($args);		$blog_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_posts' ) )			return new IXR_Error( 401, __( 'Sorry, you must be able to edit posts on this site in order to view categories.' ) );		do_action('xmlrpc_call', 'mt.getCategoryList');		$categories_struct = array();		if ( $cats = get_categories(array('hide_empty' => 0, 'hierarchical' => 0)) ) {			foreach ( $cats as $cat ) {				$struct['categoryId'] = $cat->term_id;				$struct['categoryName'] = $cat->name;				$categories_struct[] = $struct;			}		}		return $categories_struct;	}	/**	 * Retrieve post categories.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_getPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		if ( !current_user_can( 'edit_post', $post_ID ) )			return new IXR_Error( 401, __( 'Sorry, you can not edit this post.' ) );		do_action('xmlrpc_call', 'mt.getPostCategories');		$categories = array();		$catids = wp_get_post_categories(intval($post_ID));		// first listed category will be the primary category		$isPrimary = true;		foreach ( $catids as $catid ) {			$categories[] = array(				'categoryName' => get_cat_name($catid),				'categoryId' => (string) $catid,				'isPrimary' => $isPrimary			);			$isPrimary = false;		}		return $categories;	}	/**	 * Sets categories for a post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return bool True on success.	 */	function mt_setPostCategories($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		$categories  = $args[3];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.setPostCategories');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		foreach ( $categories as $cat ) {			$catids[] = $cat['categoryId'];		}		wp_set_post_categories($post_ID, $catids);		return true;	}	/**	 * Retrieve an array of methods supported by this server.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function mt_supportedMethods($args) {		do_action('xmlrpc_call', 'mt.supportedMethods');		$supported_methods = array();		foreach ( $this->methods as $key => $value ) {			$supported_methods[] = $key;		}		return $supported_methods;	}	/**	 * Retrieve an empty array because we don't support per-post text filters.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 */	function mt_supportedTextFilters($args) {		do_action('xmlrpc_call', 'mt.supportedTextFilters');		return apply_filters('xmlrpc_text_filters', array());	}	/**	 * Retrieve trackbacks sent to a given post.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return mixed	 */	function mt_getTrackbackPings($args) {		global $wpdb;		$post_ID = intval($args);		do_action('xmlrpc_call', 'mt.getTrackbackPings');		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post )			return new IXR_Error(404, __('Sorry, no such post.'));		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$trackback_pings = array();		foreach ( $comments as $comment ) {			if ( 'trackback' == $comment->comment_type ) {				$content = $comment->comment_content;				$title = substr($content, 8, (strpos($content, '</strong>') - 8));				$trackback_pings[] = array(					'pingTitle' => $title,					'pingURL'   => $comment->comment_author_url,					'pingIP'    => $comment->comment_author_IP				);			}		}		return $trackback_pings;	}	/**	 * Sets a post's publish status to 'publish'.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return int	 */	function mt_publishPost($args) {		$this->escape($args);		$post_ID     = (int) $args[0];		$username  = $args[1];		$password   = $args[2];		if ( !$user = $this->login($username, $password) )			return $this->error;		do_action('xmlrpc_call', 'mt.publishPost');		if ( !current_user_can('edit_post', $post_ID) )			return new IXR_Error(401, __('Sorry, you cannot edit this post.'));		$postdata = wp_get_single_post($post_ID,ARRAY_A);		$postdata['post_status'] = 'publish';		// retain old cats		$cats = wp_get_post_categories($post_ID);		$postdata['post_category'] = $cats;		$this->escape($postdata);		$result = wp_update_post($postdata);		return $result;	}	/* PingBack functions	 * specs on www.hixie.ch/specs/pingback/pingback	 */	/**	 * Retrieves a pingback and registers it.	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_ping($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.ping');		$this->escape($args);		$pagelinkedfrom = $args[0];		$pagelinkedto   = $args[1];		$title = '';		$pagelinkedfrom = str_replace('&amp;', '&', $pagelinkedfrom);		$pagelinkedto = str_replace('&amp;', '&', $pagelinkedto);		$pagelinkedto = str_replace('&', '&amp;', $pagelinkedto);		// Check if the page linked to is in our site		$pos1 = strpos($pagelinkedto, str_replace(array('http://www.','http://','https://www.','https://'), '', get_option('home')));		if ( !$pos1 )			return new IXR_Error(0, __('Is there no link to us?'));		// let's find which post is linked to		// FIXME: does url_to_postid() cover all these cases already?		//        if so, then let's use it and drop the old code.		$urltest = parse_url($pagelinkedto);		if ( $post_ID = url_to_postid($pagelinkedto) ) {			$way = 'url_to_postid()';		} elseif ( preg_match('#p/[0-9]{1,}#', $urltest['path'], $match) ) {			// the path defines the post_ID (archives/p/XXXX)			$blah = explode('/', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the path';		} elseif ( preg_match('#p=[0-9]{1,}#', $urltest['query'], $match) ) {			// the querystring defines the post_ID (?p=XXXX)			$blah = explode('=', $match[0]);			$post_ID = (int) $blah[1];			$way = 'from the querystring';		} elseif ( isset($urltest['fragment']) ) {			// an #anchor is there, it's either...			if ( intval($urltest['fragment']) ) {				// ...an integer #XXXX (simpliest case)				$post_ID = (int) $urltest['fragment'];				$way = 'from the fragment (numeric)';			} elseif ( preg_match('/post-[0-9]+/',$urltest['fragment']) ) {				// ...a post id in the form 'post-###'				$post_ID = preg_replace('/[^0-9]+/', '', $urltest['fragment']);				$way = 'from the fragment (post-###)';			} elseif ( is_string($urltest['fragment']) ) {				// ...or a string #title, a little more complicated				$title = preg_replace('/[^a-z0-9]/i', '.', $urltest['fragment']);				$sql = $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_title RLIKE %s", $title);				if (! ($post_ID = $wpdb->get_var($sql)) ) {					// returning unknown error '0' is better than die()ing			  		return new IXR_Error(0, '');				}				$way = 'from the fragment (title)';			}		} else {			// TODO: Attempt to extract a post ID from the given URL	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$post_ID = (int) $post_ID;		logIO("O","(PB) URL='$pagelinkedto' ID='$post_ID' Found='$way'");		$post = get_post($post_ID);		if ( !$post ) // Post_ID not found	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		if ( $post_ID == url_to_postid($pagelinkedfrom) )			return new IXR_Error(0, __('The source URL and the target URL cannot both point to the same resource.'));		// Check if pings are on		if ( !pings_open($post) )	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		// Let's check that the remote site didn't already pingback this entry		if ( $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $post_ID, $pagelinkedfrom) ) )			return new IXR_Error( 48, __( 'The pingback has already been registered.' ) );		// very stupid, but gives time to the 'from' server to publish !		sleep(1);		// Let's check the remote site		$linea = wp_remote_fopen( $pagelinkedfrom );		if ( !$linea )	  		return new IXR_Error(16, __('The source URL does not exist.'));		$linea = apply_filters('pre_remote_source', $linea, $pagelinkedto);		// Work around bug in strip_tags():		$linea = str_replace('<!DOC', '<DOC', $linea);		$linea = preg_replace( '/[\s\r\n\t]+/', ' ', $linea ); // normalize spaces		$linea = preg_replace( "/ <(h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body)[^>]*>/", "\n\n", $linea );		preg_match('|<title>([^<]*?)</title>|is', $linea, $matchtitle);		$title = $matchtitle[1];		if ( empty( $title ) )			return new IXR_Error(32, __('We cannot find a title on that page.'));		$linea = strip_tags( $linea, '<a>' ); // just keep the tag we need		$p = explode( "\n\n", $linea );		$preg_target = preg_quote($pagelinkedto, '|');		foreach ( $p as $para ) {			if ( strpos($para, $pagelinkedto) !== false ) { // it exists, but is it a link?				preg_match("|<a[^>]+?".$preg_target."[^>]*>([^>]+?)</a>|", $para, $context);				// If the URL isn't in a link context, keep looking				if ( empty($context) )					continue;				// We're going to use this fake tag to mark the context in a bit				// the marker is needed in case the link text appears more than once in the paragraph				$excerpt = preg_replace('|\</?wpcontext\>|', '', $para);				// prevent really long link text				if ( strlen($context[1]) > 100 )					$context[1] = substr($context[1], 0, 100) . '...';				$marker = '<wpcontext>'.$context[1].'</wpcontext>';    // set up our marker				$excerpt= str_replace($context[0], $marker, $excerpt); // swap out the link for our marker				$excerpt = strip_tags($excerpt, '<wpcontext>');        // strip all tags but our context marker				$excerpt = trim($excerpt);				$preg_marker = preg_quote($marker, '|');				$excerpt = preg_replace("|.*?\s(.{0,100}$preg_marker.{0,100})\s.*|s", '$1', $excerpt);				$excerpt = strip_tags($excerpt); // YES, again, to remove the marker wrapper				break;			}		}		if ( empty($context) ) // Link to target not found			return new IXR_Error(17, __('The source URL does not contain a link to the target URL, and so cannot be used as a source.'));		$pagelinkedfrom = str_replace('&', '&amp;', $pagelinkedfrom);		$context = '[...] ' . esc_html( $excerpt ) . ' [...]';		$pagelinkedfrom = $wpdb->escape( $pagelinkedfrom );		$comment_post_ID = (int) $post_ID;		$comment_author = $title;		$this->escape($comment_author);		$comment_author_url = $pagelinkedfrom;		$comment_content = $context;		$this->escape($comment_content);		$comment_type = 'pingback';		$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_url', 'comment_content', 'comment_type');		$comment_ID = wp_new_comment($commentdata);		do_action('pingback_post', $comment_ID);		return sprintf(__('Pingback from %1$s to %2$s registered. Keep the web talking! :-)'), $pagelinkedfrom, $pagelinkedto);	}	/**	 * Retrieve array of URLs that pingbacked the given URL.	 *	 * Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html	 *	 * @since 1.5.0	 *	 * @param array $args Method parameters.	 * @return array	 */	function pingback_extensions_getPingbacks($args) {		global $wpdb;		do_action('xmlrpc_call', 'pingback.extensions.getPingbacks');		$this->escape($args);		$url = $args;		$post_ID = url_to_postid($url);		if ( !$post_ID ) {			// We aren't sure that the resource is available and/or pingback enabled	  		return new IXR_Error(33, __('The specified target URL cannot be used as a target. It either doesn&#8217;t exist, or it is not a pingback-enabled resource.'));		}		$actual_post = wp_get_single_post($post_ID, ARRAY_A);		if ( !$actual_post ) {			// No such post = resource not found	  		return new IXR_Error(32, __('The specified target URL does not exist.'));		}		$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_author_url, comment_content, comment_author_IP, comment_type FROM $wpdb->comments WHERE comment_post_ID = %d", $post_ID) );		if ( !$comments )			return array();		$pingbacks = array();		foreach ( $comments as $comment ) {			if ( 'pingback' == $comment->comment_type )				$pingbacks[] = $comment->comment_author_url;		}		return $pingbacks;	}}$wp_xmlrpc_server = new wp_xmlrpc_server();$wp_xmlrpc_server->serve_request();?>
<?php/** * WordPress Export Administration API * * @package WordPress * @subpackage Administration *//** * Version number for the export format. * * Bump this when something changes that might affect compatibility. * * @since unknown * @var string */define('WXR_VERSION', '1.0');/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $args */function export_wp( $args = array() ) {	global $wpdb, $post_ids, $post, $wp_taxonomies;	if ( ! is_array( $args ) )		$args = array( 'author' => $args );	$defaults = array( 'author' => null, 'taxonomy' => null, 'post_type' => null, 'post_status' => null, 'start_date' => null, 'end_date' => null );	$args = wp_parse_args( $args, $defaults );	extract($args);	do_action('export_wp');	if( strlen( $start_date ) > 4 && strlen( $end_date ) > 4 )		$filename = 'wordpress.' . $start_date . '.' . $end_date . '.xml';	else		$filename = 'wordpress.' . date( 'Y-m-d' ) . '.xml';	header( 'Content-Description: File Transfer' );	header( 'Content-Disposition: attachment; filename=' . $filename );	header( 'Content-Type: text/xml; charset=' . get_option( 'blog_charset' ), true );	if ( $post_type && $post_type != 'all' )		$where = $wpdb->prepare("WHERE post_type = %s ", $post_type);	else		$where = "WHERE post_type != 'revision' ";	if ( $author && $author != 'all' ) {		$author_id = (int) $author;		$where .= $wpdb->prepare( "AND post_author = %d ", $author_id );	}	if ( $start_date && $start_date != 'all' )		$where .= $wpdb->prepare( "AND post_date >= %s ", $start_date );	if ( $end_date && $end_date != 'all' )		$where .= $wpdb->prepare( "AND post_date < %s ", $end_date );	if ( $taxonomy && is_array( $taxonomy ) ) {		foreach ( $taxonomy as $term_id ) {			if ( $term_id != 'all' )				$where .= $wpdb->prepare( "AND ID IN (SELECT object_id FROM $wpdb->term_relationships WHERE term_taxonomy_id = %d) ", $term_id );		}	}	if ( $post_status && $post_status != 'all' )		$where .= $wpdb->prepare( "AND post_status = %s", $status );	// grab a snapshot of post IDs, just in case it changes during the export	$post_ids = $wpdb->get_col( "SELECT ID FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	$categories = (array) get_categories( array( 'get' => 'all' ) );	$tags = (array) get_tags( array( 'get' => 'all' ) );	$custom_taxonomies = $wp_taxonomies;	unset( $custom_taxonomies['category'] );	unset( $custom_taxonomies['post_tag'] );	unset( $custom_taxonomies['link_category'] );	$custom_taxonomies = array_keys( $custom_taxonomies );	$terms = (array) get_terms( $custom_taxonomies, array( 'get' => 'all' ) );	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param unknown_type $categories	 */	function wxr_missing_parents( $categories ) {		if ( ! is_array( $categories ) || empty( $categories ) )			return array();		foreach ( $categories as $category ){			$parents[$category->term_id] = $category->parent;		}		$parents = array_unique( array_diff( $parents, array_keys( $parents ) ) );		if ( $zero = array_search( '0', $parents ) )			unset( $parents[$zero] );		return $parents;	}	while ( $parents = wxr_missing_parents( $categories ) ) {		$found_parents = get_categories( array( 'include' => join( ', ', $parents) ) );		if ( is_array( $found_parents ) && count( $found_parents ) )			$categories = array_merge( $categories, $found_parents );		else			break;	}	// Put them in order to be inserted with no child going before its parent	$pass = 0;	$passes = 1000 + count( $categories );	while ( ( $cat = array_shift( $categories ) ) && ++$pass < $passes ) {		if ( $cat->parent == 0 || isset( $cats[$cat->parent] ) )			$cats[$cat->term_id] = $cat;		else			$categories[] = $cat;	}	unset( $categories );	/**	 * Place string in CDATA tag.	 *	 * @since unknown	 *	 * @param string $str String to place in XML CDATA tag.	 */	function wxr_cdata( $str ) {		if ( seems_utf8( $str ) == false )			$str = utf8_encode( $str );		// $str = ent2ncr(esc_html($str));		$str = "<![CDATA[$str" . ( ( substr( $str, -1 ) == ']' ) ? ' ' : '') . "]]>";		return $str;	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @return string Site URL.	 */	function wxr_site_url() {		global $current_site;		// mu: the base url		if ( isset( $current_site->domain ) )			return network_home_url();		// wp: the blog url		else			return get_bloginfo_rss( 'url' );	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_cat_name( $c ) {		if ( empty( $c->name ) )			return;		echo '<wp:cat_name>' . wxr_cdata( $c->name ) . '</wp:cat_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $c Category Object	 */	function wxr_category_description( $c ) {		if ( empty( $c->description ) )			return;		echo '<wp:category_description>' . wxr_cdata($c->description) . '</wp:category_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:tag_name>' . wxr_cdata($t->name) . '</wp:tag_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Tag Object	 */	function wxr_tag_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:tag_description>' . wxr_cdata($t->description) . '</wp:tag_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_name( $t ) {		if ( empty( $t->name ) )			return;		echo '<wp:term_name>' . wxr_cdata($t->name) . '</wp:term_name>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 *	 * @param object $t Term Object	 */	function wxr_term_description( $t ) {		if ( empty( $t->description ) )			return;		echo '<wp:term_description>' . wxr_cdata($t->description) . '</wp:term_description>';	}	/**	 * {@internal Missing Short Description}}	 *	 * @since unknown	 */	function wxr_post_taxonomy() {		global $post;		$the_list = '';		$filter = 'rss';		$taxonomies = get_object_taxonomies( 'post' );		$terms = wp_get_post_terms( $post->ID, $taxonomies );		foreach ( (array) $terms as $term ) {			$domain = ( 'post_tag' == $term->taxonomy ) ? 'tag' : $term->taxonomy;			$term_name = sanitize_term_field( 'name', $term->name, $term->term_id, $term->taxonomy, $filter );			// Back compat.			if ( 'category' == $term->taxonomy )				$the_list .= "\n\t\t<category><![CDATA[$term_name]]></category>\n";			elseif ( 'post_tag' == $term->taxonomy )				$the_list .= "\n\t\t<category domain=\"$domain\"><![CDATA[$term_name]]></category>\n";			// forwards compatibility as above			$the_list .= "\n\t\t<category domain=\"$domain\" nicename=\"{$term->slug}\"><![CDATA[$term_name]]></category>\n";		}		echo $the_list;	}	echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . '"?' . ">\n";	?><!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. --><!-- It contains information about your blog's posts, comments, and categories. --><!-- You may use this file to transfer that content from one site to another. --><!-- This file is not intended to serve as a complete backup of your blog. --><!-- To import this information into a WordPress blog follow these steps. --><!-- 1. Log in to that blog as an administrator. --><!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). --><!-- 3. Choose "WordPress" from the list. --><!-- 4. Upload this file using the form provided on that page. --><!-- 5. You will first be asked to map the authors in this export file to users --><!--    on the blog.  For each author, you may choose to map to an --><!--    existing user on the blog or to create a new user --><!-- 6. WordPress will then import each of the posts, comments, and categories --><!--    contained in this file into your blog --><?php the_generator( 'export' );?><rss version="2.0"	xmlns:excerpt="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/excerpt/"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:wp="http://wordpress.org/export/<?php echo WXR_VERSION; ?>/"><channel>	<title><?php bloginfo_rss( 'name' ); ?></title>	<link><?php bloginfo_rss( 'url' ) ?></link>	<description><?php bloginfo_rss( 'description' ) ?></description>	<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_lastpostmodified( 'GMT' ), false ); ?></pubDate>	<generator>http://wordpress.org/?v=<?php bloginfo_rss( 'version' ); ?></generator>	<language><?php echo get_option( 'rss_language' ); ?></language>	<wp:wxr_version><?php echo WXR_VERSION; ?></wp:wxr_version>	<wp:base_site_url><?php echo wxr_site_url(); ?></wp:base_site_url>	<wp:base_blog_url><?php bloginfo_rss( 'url' ); ?></wp:base_blog_url>	<?php if ( $cats ) : foreach ( $cats as $c ) : ?>	<wp:category><wp:category_nicename><?php echo $c->slug; ?></wp:category_nicename><wp:category_parent><?php echo $c->parent ? $cats[$c->parent]->name : ''; ?></wp:category_parent><?php wxr_cat_name( $c ); ?><?php wxr_category_description( $c ); ?></wp:category>	<?php endforeach; endif; ?>	<?php if ( $tags ) : foreach ( $tags as $t ) : ?>	<wp:tag><wp:tag_slug><?php echo $t->slug; ?></wp:tag_slug><?php wxr_tag_name( $t ); ?><?php wxr_tag_description( $t ); ?></wp:tag>	<?php endforeach; endif; ?>	<?php if ( $terms ) : foreach ( $terms as $t ) : ?>	<wp:term><wp:term_taxonomy><?php echo $t->taxonomy; ?></wp:term_taxonomy><wp:term_slug><?php echo $t->slug; ?></wp:term_slug><wp:term_parent><?php echo $t->parent ? $custom_taxonomies[$t->parent]->name : ''; ?></wp:term_parent><?php wxr_term_name( $t ); ?><?php wxr_term_description( $t ); ?></wp:term>	<?php endforeach; endif; ?>	<?php do_action( 'rss2_head' ); ?>	<?php if ( $post_ids ) {	global $wp_query;	$wp_query->in_the_loop = true;  // Fake being in the loop.	// fetch 20 posts at a time rather than loading the entire table into memory	while ( $next_posts = array_splice( $post_ids, 0, 20 ) ) {	$where = "WHERE ID IN (" . join( ',', $next_posts ) . ")";	$posts = $wpdb->get_results( "SELECT * FROM $wpdb->posts $where ORDER BY post_date_gmt ASC" );	// Begin Loop	foreach ($posts as $post) {	setup_postdata( $post );	$is_sticky = 0;	if ( is_sticky( $post->ID ) )		$is_sticky = 1;	?>	<item>		<title><?php echo apply_filters( 'the_title_rss', $post->post_title ); ?></title>		<link><?php the_permalink_rss() ?></link>		<pubDate><?php echo mysql2date( 'D, d M Y H:i:s +0000', get_post_time( 'Y-m-d H:i:s', true ), false ); ?></pubDate>		<dc:creator><?php echo wxr_cdata( get_the_author() ); ?></dc:creator>		<?php wxr_post_taxonomy() ?>		<guid isPermaLink="false"><?php esc_url( the_guid() ); ?></guid>		<description></description>		<content:encoded><?php echo wxr_cdata( apply_filters( 'the_content_export', $post->post_content ) ); ?></content:encoded>		<excerpt:encoded><?php echo wxr_cdata( apply_filters( 'the_excerpt_export', $post->post_excerpt ) ); ?></excerpt:encoded>		<wp:post_id><?php echo $post->ID; ?></wp:post_id>		<wp:post_date><?php echo $post->post_date; ?></wp:post_date>		<wp:post_date_gmt><?php echo $post->post_date_gmt; ?></wp:post_date_gmt>		<wp:comment_status><?php echo $post->comment_status; ?></wp:comment_status>		<wp:ping_status><?php echo $post->ping_status; ?></wp:ping_status>		<wp:post_name><?php echo $post->post_name; ?></wp:post_name>		<wp:status><?php echo $post->post_status; ?></wp:status>		<wp:post_parent><?php echo $post->post_parent; ?></wp:post_parent>		<wp:menu_order><?php echo $post->menu_order; ?></wp:menu_order>		<wp:post_type><?php echo $post->post_type; ?></wp:post_type>		<wp:post_password><?php echo $post->post_password; ?></wp:post_password>		<wp:is_sticky><?php echo $is_sticky; ?></wp:is_sticky>		<?php		if ( $post->post_type == 'attachment' ) { ?>		<wp:attachment_url><?php echo wp_get_attachment_url( $post->ID ); ?></wp:attachment_url>		<?php } ?>		<?php		$postmeta = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->postmeta WHERE post_id = %d", $post->ID ) );		if ( $postmeta ) {		?>		<?php foreach( $postmeta as $meta ) { ?>		<wp:postmeta>		<wp:meta_key><?php echo $meta->meta_key; ?></wp:meta_key>		<wp:meta_value><?php echo wxr_cdata( $meta->meta_value ); ?></wp:meta_value>		</wp:postmeta>		<?php } ?>		<?php } ?>		<?php		$comments = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d", $post->ID ) );		if ( $comments ) { foreach ( $comments as $c ) { ?>		<wp:comment>		<wp:comment_id><?php echo $c->comment_ID; ?></wp:comment_id>		<wp:comment_author><?php echo wxr_cdata( $c->comment_author ); ?></wp:comment_author>		<wp:comment_author_email><?php echo $c->comment_author_email; ?></wp:comment_author_email>		<wp:comment_author_url><?php echo esc_url_raw( $c->comment_author_url ); ?></wp:comment_author_url>		<wp:comment_author_IP><?php echo $c->comment_author_IP; ?></wp:comment_author_IP>		<wp:comment_date><?php echo $c->comment_date; ?></wp:comment_date>		<wp:comment_date_gmt><?php echo $c->comment_date_gmt; ?></wp:comment_date_gmt>		<wp:comment_content><?php echo wxr_cdata( $c->comment_content ) ?></wp:comment_content>		<wp:comment_approved><?php echo $c->comment_approved; ?></wp:comment_approved>		<wp:comment_type><?php echo $c->comment_type; ?></wp:comment_type>		<wp:comment_parent><?php echo $c->comment_parent; ?></wp:comment_parent>		<wp:comment_user_id><?php echo $c->user_id; ?></wp:comment_user_id>		</wp:comment>		<?php } } ?>	</item>	<?php	}	}} ?></channel></rss><?php}?>
<?php/** * Creates the password cookie and redirects back to where the * visitor was before. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php');if ( get_magic_quotes_gpc() )	$_POST['post_password'] = stripslashes($_POST['post_password']);// 10 dayssetcookie('wp-postpass_' . COOKIEHASH, $_POST['post_password'], time() + 864000, COOKIEPATH);wp_safe_redirect(wp_get_referer());?>
<?php/** * The template for displaying Comments. * * The area of the page that contains both current comments * and the comment form.  The actual display of comments is * handled by a callback to twentyten_comment which is * located in the functions.php file. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?>			<div id="comments"><?php if ( post_password_required() ) : ?>				<p class="nopassword"><?php _e( 'This post is password protected. Enter the password to view any comments.', 'twentyten' ); ?></p>			</div><!-- #comments --><?php		/* Stop the rest of comments.php from being processed,		 * but don't kill the script entirely -- we still have		 * to fully load the template.		 */		return;	endif;?><?php	// You can start editing here -- including this comment!?><?php if ( have_comments() ) : ?>			<h3 id="comments-title"><?php			printf( _n( 'One Response to %2$s', '%1$s Responses to %2$s', get_comments_number(), 'twentyten' ),			number_format_i18n( get_comments_number() ), '<em>' . get_the_title() . '</em>' );			?></h3><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div> <!-- .navigation --><?php endif; // check for comment navigation ?>			<ol class="commentlist">				<?php					/* Loop through and list the comments. Tell wp_list_comments()					 * to use twentyten_comment() to format the comments.					 * If you want to overload this in a child theme then you can					 * define twentyten_comment() and that will be used instead.					 * See twentyten_comment() in twentyten/functions.php for more.					 */					wp_list_comments( array( 'callback' => 'twentyten_comment' ) );				?>			</ol><?php if ( get_comment_pages_count() > 1 && get_option( 'page_comments' ) ) : // Are there comments to navigate through? ?>			<div class="navigation">				<div class="nav-previous"><?php previous_comments_link( __( '<span class="meta-nav">&larr;</span> Older Comments', 'twentyten' ) ); ?></div>				<div class="nav-next"><?php next_comments_link( __( 'Newer Comments <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?></div>			</div><!-- .navigation --><?php endif; // check for comment navigation ?><?php else : // or, if we don't have comments:	/* If there are no comments and comments are closed,	 * let's leave a little note, shall we?	 */	if ( ! comments_open() ) :?>	<p class="nocomments"><?php _e( 'Comments are closed.', 'twentyten' ); ?></p><?php endif; // end ! comments_open() ?><?php endif; // end have_comments() ?><?php comment_form(); ?></div><!-- #comments -->
<?php/** * Class for a set of entries for translation and their associated headers * * @version $Id: translations.php 406 2010-02-07 11:10:24Z nbachiyski $ * @package pomo * @subpackage translations */require_once dirname(__FILE__) . '/entry.php';if ( !class_exists( 'Translations' ) ):class Translations {	var $entries = array();	var $headers = array();	/**	 * Add entry to the PO structure	 *	 * @param object &$entry	 * @return bool true on success, false if the entry doesn't have a key	 */	function add_entry($entry) {		if (is_array($entry)) {			$entry = new Translation_Entry($entry);		}		$key = $entry->key();		if (false === $key) return false;		$this->entries[$key] = &$entry;		return true;	}	/**	 * Sets $header PO header to $value	 *	 * If the header already exists, it will be overwritten	 *	 * TODO: this should be out of this class, it is gettext specific	 *	 * @param string $header header name, without trailing :	 * @param string $value header value, without trailing \n	 */	function set_header($header, $value) {		$this->headers[$header] = $value;	}	function set_headers(&$headers) {		foreach($headers as $header => $value) {			$this->set_header($header, $value);		}	}	function get_header($header) {		return isset($this->headers[$header])? $this->headers[$header] : false;	}	function translate_entry(&$entry) {		$key = $entry->key();		return isset($this->entries[$key])? $this->entries[$key] : false;	}	function translate($singular, $context=null) {		$entry = new Translation_Entry(array('singular' => $singular, 'context' => $context));		$translated = $this->translate_entry($entry);		return ($translated && !empty($translated->translations))? $translated->translations[0] : $singular;	}	/**	 * Given the number of items, returns the 0-based index of the plural form to use	 *	 * Here, in the base Translations class, the commong logic for English is implmented:	 * 	0 if there is one element, 1 otherwise	 *	 * This function should be overrided by the sub-classes. For example MO/PO can derive the logic	 * from their headers.	 *	 * @param integer $count number of items	 */	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {		$entry = new Translation_Entry(array('singular' => $singular, 'plural' => $plural, 'context' => $context));		$translated = $this->translate_entry($entry);		$index = $this->select_plural_form($count);		$total_plural_forms = $this->get_plural_forms_count();		if ($translated && 0 <= $index && $index < $total_plural_forms &&				is_array($translated->translations) &&				isset($translated->translations[$index]))			return $translated->translations[$index];		else			return 1 == $count? $singular : $plural;	}	/**	 * Merge $other in the current object.	 *	 * @param Object &$other Another Translation object, whose translations will be merged in this one	 * @return void	 **/	function merge_with(&$other) {		foreach( $other->entries as $entry ) {			$this->entries[$entry->key()] = $entry;		}	}}class Gettext_Translations extends Translations {	/**	 * The gettext implmentation of select_plural_form.	 *	 * It lives in this class, because there are more than one descendand, which will use it and	 * they can't share it effectively.	 *	 */	function gettext_select_plural_form($count) {		if (!isset($this->_gettext_select_plural_form) || is_null($this->_gettext_select_plural_form)) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}		return call_user_func($this->_gettext_select_plural_form, $count);	}	function nplurals_and_expression_from_header($header) {		if (preg_match('/^\s*nplurals\s*=\s*(\d+)\s*;\s+plural\s*=\s*(.+)$/', $header, $matches)) {			$nplurals = (int)$matches[1];			$expression = trim($this->parenthesize_plural_exression($matches[2]));			return array($nplurals, $expression);		} else {			return array(2, 'n != 1');		}	}	/**	 * Makes a function, which will return the right translation index, according to the	 * plural forms header	 */	function make_plural_form_function($nplurals, $expression) {		$expression = str_replace('n', '$n', $expression);		$func_body = "			\$index = (int)($expression);			return (\$index < $nplurals)? \$index : $nplurals - 1;";		return create_function('$n', $func_body);	}	/**	 * Adds parantheses to the inner parts of ternary operators in	 * plural expressions, because PHP evaluates ternary oerators from left to right	 *	 * @param string $expression the expression without parentheses	 * @return string the expression with parentheses added	 */	function parenthesize_plural_exression($expression) {		$expression .= ';';		$res = '';		$depth = 0;		for ($i = 0; $i < strlen($expression); ++$i) {			$char = $expression[$i];			switch ($char) {				case '?':					$res .= ' ? (';					$depth++;					break;				case ':':					$res .= ') : (';					break;				case ';':					$res .= str_repeat(')', $depth) . ';';					$depth= 0;					break;				default:					$res .= $char;			}		}		return rtrim($res, ';');	}	function make_headers($translation) {		$headers = array();		// sometimes \ns are used instead of real new lines		$translation = str_replace('\n', "\n", $translation);		$lines = explode("\n", $translation);		foreach($lines as $line) {			$parts = explode(':', $line, 2);			if (!isset($parts[1])) continue;			$headers[trim($parts[0])] = trim($parts[1]);		}		return $headers;	}	function set_header($header, $value) {		parent::set_header($header, $value);		if ('Plural-Forms' == $header) {			list( $nplurals, $expression ) = $this->nplurals_and_expression_from_header($this->get_header('Plural-Forms'));			$this->_nplurals = $nplurals;			$this->_gettext_select_plural_form = $this->make_plural_form_function($nplurals, $expression);		}	}}endif;if ( !class_exists( 'NOOP_Translations' ) ):/** * Provides the same interface as Translations, but doesn't do anything */class NOOP_Translations {	var $entries = array();	var $headers = array();	function add_entry($entry) {		return true;	}	function set_header($header, $value) {	}	function set_headers(&$headers) {	}	function get_header($header) {		return false;	}	function translate_entry(&$entry) {		return false;	}	function translate($singular, $context=null) {		return $singular;	}	function select_plural_form($count) {		return 1 == $count? 0 : 1;	}	function get_plural_forms_count() {		return 2;	}	function translate_plural($singular, $plural, $count, $context = null) {			return 1 == $count? $singular : $plural;	}	function merge_with(&$other) {	}}endif;
<?php/** * Media management action handler. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'upload.php';$submenu_file = 'upload.php';wp_reset_vars(array('action'));switch( $action ) :case 'editattachment' :	$attachment_id = (int) $_POST['attachment_id'];	check_admin_referer('media-form');	if ( !current_user_can('edit_post', $attachment_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$errors = media_upload_form_handler();	if ( empty($errors) ) {		$location = 'media.php';		if ( $referer = wp_get_original_referer() ) {			if ( false !== strpos($referer, 'upload.php') || ( url_to_postid($referer) == $attachment_id )  )				$location = $referer;		}		if ( false !== strpos($location, 'upload.php') ) {			$location = remove_query_arg('message', $location);			$location = add_query_arg('posted',	$attachment_id, $location);		} elseif ( false !== strpos($location, 'media.php') ) {			$location = add_query_arg('message', 'updated', $location);		}		wp_redirect($location);		exit;	}	// no breakcase 'edit' :	$title = __('Edit Media');	if ( empty($errors) )		$errors = null;	if ( empty( $_GET['attachment_id'] ) ) {		wp_redirect('upload.php');		exit();	}	$att_id = (int) $_GET['attachment_id'];	if ( !current_user_can('edit_post', $att_id) )		wp_die ( __('You are not allowed to edit this attachment.') );	$att = get_post($att_id);	if ( empty($att->ID) ) wp_die( __('You attempted to edit an attachment that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( $att->post_status == 'trash' ) wp_die( __('You can&#8217;t edit this attachment because it is in the Trash. Please move it out of the Trash and try again.') );	add_filter('attachment_fields_to_edit', 'media_single_attachment_fields_to_edit', 10, 2);	wp_enqueue_script( 'wp-ajax-response' );	wp_enqueue_script('image-edit');	wp_enqueue_style('imgareaselect');	require( './admin-header.php' );	$parent_file = 'upload.php';	$message = '';	$class = '';	if ( isset($_GET['message']) ) {		switch ( $_GET['message'] ) :		case 'updated' :			$message = __('Media attachment updated.');			$class = 'updated';			break;		endswitch;	}	if ( $message )		echo "<div id='message' class='$class'><p>$message</p></div>\n";?><div class="wrap"><?php screen_icon(); ?><h2><?php _e( 'Edit Media' ); ?></h2><form method="post" action="" class="media-upload-form" id="media-single-form"><p class="submit" style="padding-bottom: 0;"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /></p><div class="media-single"><div id='media-item-<?php echo $att_id; ?>' class='media-item'><?php echo get_media_item( $att_id, array( 'toggle' => false, 'send' => false, 'delete' => false, 'show_title' => false, 'errors' => $errors ) ); ?></div></div><p class="submit"><input type="submit" class="button-primary" name="save" value="<?php esc_attr_e('Update Media'); ?>" /><input type="hidden" name="post_id" id="post_id" value="<?php echo isset($post_id) ? esc_attr($post_id) : ''; ?>" /><input type="hidden" name="attachment_id" id="attachment_id" value="<?php echo esc_attr($att_id); ?>" /><input type="hidden" name="action" value="editattachment" /><?php wp_original_referer_field(true, 'previous'); ?><?php wp_nonce_field('media-form'); ?></p></form></div><?php	require( './admin-footer.php' );	exit;default:	wp_redirect( 'upload.php' );	exit;endswitch;?>
<?php/** * Front to the WordPress application. This file doesn't do anything, but loads * wp-blog-header.php which does and tells WordPress to load the theme. * * @package WordPress *//** * Tells WordPress to load the WordPress theme and output it. * * @var bool */define('WP_USE_THEMES', true);/** Loads the WordPress Environment and Template */require('./wp-blog-header.php');?>
<?php/** * The main template file. * * This is the most generic template file in a WordPress theme * and one of the two required files for a theme (the other being style.css). * It is used to display a page when nothing more specific matches a query.  * E.g., it puts together the home page when no home.php file exists. * Learn more: http://codex.wordpress.org/Template_Hierarchy * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">			<?php			/* Run the loop to output the posts.			 * If you want to overload this in a child theme then include a file			 * called loop-index.php and that will be used instead.			 */			 get_template_part( 'loop', 'index' );			?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * BackPress styles procedural API. * * @package BackPress * @since r79 *//** * Display styles that are in the queue or part of $handles. * * @since r79 * @uses do_action() Calls 'wp_print_styles' hook. * @global object $wp_styles The WP_Styles object for printing styles. * * @param array|bool $handles Styles to be printed. An empty array prints the queue, *  an array with one string prints that style, and an array of strings prints those styles. * @return bool True on success, false on failure. */function wp_print_styles( $handles = false ) {	do_action( 'wp_print_styles' );	if ( '' === $handles ) // for wp_head		$handles = false;	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') ) {		if ( !$handles )			return array(); // No need to instantiate if nothing's there.		else			$wp_styles = new WP_Styles();	}	return $wp_styles->do_items( $handles );}/** * Register CSS style file. * * @since r79 * @see WP_Styles::add() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number. Set to NULL to disable. *  Used to ensure that the correct version is sent to the client regardless of caching. * @param string $media The media for which this stylesheet has been defined. */function wp_register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->add( $handle, $src, $deps, $ver, $media );}/** * Remove a registered CSS file. * * @since r79 * @see WP_Styles::remove() For additional information. * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. */function wp_deregister_style( $handle ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$wp_styles->remove( $handle );}/** * Enqueue a CSS style file. * * Registers the style if src provided (does NOT overwrite) and enqueues. * * @since r79 * @see WP_Styles::add(), WP_Styles::enqueue() * @global object $wp_styles The WP_Styles object for printing styles. * @link http://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types. * * @param string $handle Name of the stylesheet. * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '/css/mystyle.css'. * @param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies. * @param string|bool $ver String specifying the stylesheet version number, if it has one. This parameter *  is used to ensure that the correct version is sent to the client regardless of caching, and so should be included *  if a version number is available and makes sense for the stylesheet. * @param string $media The media for which this stylesheet has been defined. */function wp_enqueue_style( $handle, $src = false, $deps = array(), $ver = false, $media = 'all' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	if ( $src ) {		$_handle = explode('?', $handle);		$wp_styles->add( $_handle[0], $src, $deps, $ver, $media );	}	$wp_styles->enqueue( $handle );}/** * Check whether style has been added to WordPress Styles. * * The values for list defaults to 'queue', which is the same as wp_enqueue_style(). * * @since WP unknown; BP unknown * @global object $wp_styles The WP_Styles object for printing styles. * * @param string $handle Name of the stylesheet. * @param string $list Values are 'registered', 'done', 'queue' and 'to_do'. * @return bool True on success, false on failure. */function wp_style_is( $handle, $list = 'queue' ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	$query = $wp_styles->query( $handle, $list );	if ( is_object( $query ) )		return true;	return $query;}
<?php/** * File contains all the administration image manipulation functions. * * @package WordPress * @subpackage Administration *//** The descriptions for theme files. */$wp_file_descriptions = array (	'index.php' => __( 'Main Index Template' ),	'style.css' => __( 'Stylesheet' ),	'editor-style.css' => __( 'Visual Editor Stylesheet' ),	'rtl.css' => __( 'RTL Stylesheet' ),	'comments.php' => __( 'Comments' ),	'comments-popup.php' => __( 'Popup Comments' ),	'footer.php' => __( 'Footer' ),	'header.php' => __( 'Header' ),	'sidebar.php' => __( 'Sidebar' ),	'archive.php' => __( 'Archives' ),	'author.php' => __( 'Author Template' ),	'tag.php' => __( 'Tag Template' ),	'category.php' => __( 'Category Template' ),	'page.php' => __( 'Page Template' ),	'search.php' => __( 'Search Results' ),	'searchform.php' => __( 'Search Form' ),	'single.php' => __( 'Single Post' ),	'404.php' => __( '404 Template' ),	'link.php' => __( 'Links Template' ),	'functions.php' => __( 'Theme Functions' ),	'attachment.php' => __( 'Attachment Template' ),	'image.php' => __('Image Attachment Template'),	'video.php' => __('Video Attachment Template'),	'audio.php' => __('Audio Attachment Template'),	'application.php' => __('Application Attachment Template'),	'my-hacks.php' => __( 'my-hacks.php (legacy hacks support)' ),	'.htaccess' => __( '.htaccess (for rewrite rules )' ),	// Deprecated files	'wp-layout.css' => __( 'Stylesheet' ), 'wp-comments.php' => __( 'Comments Template' ), 'wp-comments-popup.php' => __( 'Popup Comments Template' ));/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_file_description( $file ) {	global $wp_file_descriptions;	if ( isset( $wp_file_descriptions[basename( $file )] ) ) {		return $wp_file_descriptions[basename( $file )];	}	elseif ( file_exists( $file ) && is_file( $file ) ) {		$template_data = implode( '', file( $file ) );		if ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ))			return _cleanup_header_comment($name[1]) . ' Page Template';	}	return basename( $file );}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_home_path() {	$home = get_option( 'home' );	$siteurl = get_option( 'siteurl' );	if ( $home != '' && $home != $siteurl ) {	        $wp_path_rel_to_home = str_replace($home, '', $siteurl); /* $siteurl - $home */	        $pos = strpos($_SERVER["SCRIPT_FILENAME"], $wp_path_rel_to_home);	        $home_path = substr($_SERVER["SCRIPT_FILENAME"], 0, $pos);		$home_path = trailingslashit( $home_path );	} else {		$home_path = ABSPATH;	}	return $home_path;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @return unknown */function get_real_file_to_edit( $file ) {	if ('index.php' == $file || '.htaccess' == $file ) {		$real_file = get_home_path() . $file;	} else {		$real_file = WP_CONTENT_DIR . $file;	}	return $real_file;}/** * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep. * The depth of the recursiveness can be controlled by the $levels param. * * @since 2.6.0 * * @param string $folder Full path to folder * @param int $levels (optional) Levels of folders to follow, Default: 100 (PHP Loop limit). * @return bool|array False on failure, Else array of files */function list_files( $folder = '', $levels = 100 ) {	if ( empty($folder) )		return false;	if ( ! $levels )		return false;	$files = array();	if ( $dir = @opendir( $folder ) ) {		while (($file = readdir( $dir ) ) !== false ) {			if ( in_array($file, array('.', '..') ) )				continue;			if ( is_dir( $folder . '/' . $file ) ) {				$files2 = list_files( $folder . '/' . $file, $levels - 1);				if ( $files2 )					$files = array_merge($files, $files2 );				else					$files[] = $folder . '/' . $file . '/';			} else {				$files[] = $folder . '/' . $file;			}		}	}	@closedir( $dir );	return $files;}/** * Determines a writable directory for temporary files. * Function's preference is to WP_CONTENT_DIR followed by the return value of <code>sys_get_temp_dir()</code>, before finally defaulting to /tmp/ * * In the event that this function does not find a writable location, It may be overridden by the <code>WP_TEMP_DIR</code> constant in your <code>wp-config.php</code> file. * * @since 2.5.0 * * @return string Writable temporary directory */function get_temp_dir() {	static $temp;	if ( defined('WP_TEMP_DIR') )		return trailingslashit(WP_TEMP_DIR);	if ( $temp )		return trailingslashit($temp);	$temp = WP_CONTENT_DIR . '/';	if ( is_dir($temp) && @is_writable($temp) )		return $temp;	if  ( function_exists('sys_get_temp_dir') ) {		$temp = sys_get_temp_dir();		if ( @is_writable($temp) )			return trailingslashit($temp);	}	$temp = ini_get('upload_tmp_dir');	if ( is_dir($temp) && @is_writable($temp) )		return trailingslashit($temp);	$temp = '/tmp/';	return $temp;}/** * Returns a filename of a Temporary unique file. * Please note that the calling function must unlink() this itself. * * The filename is based off the passed parameter or defaults to the current unix timestamp, * while the directory can either be passed as well, or by leaving  it blank, default to a writable temporary directory. * * @since 2.6.0 * * @param string $filename (optional) Filename to base the Unique file off * @param string $dir (optional) Directory to store the file in * @return string a writable filename */function wp_tempnam($filename = '', $dir = '') {	if ( empty($dir) )		$dir = get_temp_dir();	$filename = basename($filename);	if ( empty($filename) )		$filename = time();	$filename = preg_replace('|\..*$|', '.tmp', $filename);	$filename = $dir . wp_unique_filename($dir, $filename);	touch($filename);	return $filename;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $file * @param unknown_type $allowed_files * @return unknown */function validate_file_to_edit( $file, $allowed_files = '' ) {	$code = validate_file( $file, $allowed_files );	if (!$code )		return $file;	switch ( $code ) {		case 1 :			wp_die( __('Sorry, can&#8217;t edit files with &#8220;..&#8221; in the name. If you are trying to edit a file in your WordPress home directory, you can just type the name of the file in.' ));		//case 2 :		//	wp_die( __('Sorry, can&#8217;t call files with their real path.' ));		case 3 :			wp_die( __('Sorry, that file cannot be edited.' ));	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param array $file Reference to a single element of $_FILES. Call the function once for each uploaded file. * @param array $overrides Optional. An associative array of names=>values to override default variables with extract( $overrides, EXTR_OVERWRITE ). * @return array On success, returns an associative array of file attributes. On failure, returns $overrides['upload_error_handler'](&$file, $message ) or array( 'error'=>$message ). */function wp_handle_upload( &$file, $overrides = false, $time = null ) {	// The default error handler.	if ( ! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	$file = apply_filters( 'wp_handle_upload_prefilter', $file );	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may have had one or more 'wp_handle_upload_prefilter' functions error out the file.  Handle that gracefully.	if ( isset( $file['error'] ) && !is_numeric( $file['error'] ) && $file['error'] )		return $upload_error_handler( $file, $file['error'] );	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_upload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	$test_upload = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return call_user_func($upload_error_handler, $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( $file['error'] > 0 )		return call_user_func($upload_error_handler, $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !($file['size'] > 0 ) ) {		if ( is_multisite() )			$error_msg = __( 'File is empty. Please upload something more substantial.' );		else			$error_msg = __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.' );		return call_user_func($upload_error_handler, $file, $error_msg);	}	// A properly uploaded file will pass this test. There should be no reason to override this one.	if ( $test_upload && ! @ is_uploaded_file( $file['tmp_name'] ) )		return call_user_func($upload_error_handler, $file, __( 'Specified file failed upload test.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return call_user_func($upload_error_handler, $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	} else {		$type = '';	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir($time) ) && false === $uploads['error'] ) )		return call_user_func($upload_error_handler, $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ move_uploaded_file( $file['tmp_name'], $new_file ) )		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	return apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'upload' );}/** * {@internal Missing Short Description}} * * Pass this function an array similar to that of a $_FILES POST array. * * @since unknown * * @param unknown_type $file * @param unknown_type $overrides * @return unknown */function wp_handle_sideload( &$file, $overrides = false ) {	// The default error handler.	if (! function_exists( 'wp_handle_upload_error' ) ) {		function wp_handle_upload_error( &$file, $message ) {			return array( 'error'=>$message );		}	}	// You may define your own function and pass the name in $overrides['upload_error_handler']	$upload_error_handler = 'wp_handle_upload_error';	// You may define your own function and pass the name in $overrides['unique_filename_callback']	$unique_filename_callback = null;	// $_POST['action'] must be set and its value must equal $overrides['action'] or this:	$action = 'wp_handle_sideload';	// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].	$upload_error_strings = array( false,		__( "The uploaded file exceeds the <code>upload_max_filesize</code> directive in <code>php.ini</code>." ),		__( "The uploaded file exceeds the <em>MAX_FILE_SIZE</em> directive that was specified in the HTML form." ),		__( "The uploaded file was only partially uploaded." ),		__( "No file was uploaded." ),		'',		__( "Missing a temporary folder." ),		__( "Failed to write file to disk." ),		__( "File upload stopped by extension." ));	// All tests are on by default. Most can be turned off by $override[{test_name}] = false;	$test_form = true;	$test_size = true;	// If you override this, you must provide $ext and $type!!!!	$test_type = true;	$mimes = false;	// Install user overrides. Did we mention that this voids your warranty?	if ( is_array( $overrides ) )		extract( $overrides, EXTR_OVERWRITE );	// A correct form post will pass this test.	if ( $test_form && (!isset( $_POST['action'] ) || ($_POST['action'] != $action ) ) )		return $upload_error_handler( $file, __( 'Invalid form submission.' ));	// A successful upload will pass this test. It makes no sense to override this one.	if ( ! empty( $file['error'] ) )		return $upload_error_handler( $file, $upload_error_strings[$file['error']] );	// A non-empty file will pass this test.	if ( $test_size && !(filesize($file['tmp_name']) > 0 ) )		return $upload_error_handler( $file, __( 'File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini.' ));	// A properly uploaded file will pass this test. There should be no reason to override this one.	if (! @ is_file( $file['tmp_name'] ) )		return $upload_error_handler( $file, __( 'Specified file does not exist.' ));	// A correct MIME type will pass this test. Override $mimes or use the upload_mimes filter.	if ( $test_type ) {		$wp_filetype = wp_check_filetype_and_ext( $file['tmp_name'], $file['name'], $mimes );		extract( $wp_filetype );		// Check to see if wp_check_filetype_and_ext() determined the filename was incorrect		if ( $proper_filename )			$file['name'] = $proper_filename;		if ( ( !$type || !$ext ) && !current_user_can( 'unfiltered_upload' ) )			return $upload_error_handler( $file, __( 'File type does not meet security guidelines. Try another.' ));		if ( !$ext )			$ext = ltrim(strrchr($file['name'], '.'), '.');		if ( !$type )			$type = $file['type'];	}	// A writable uploads dir will pass this test. Again, there's no point overriding this one.	if ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )		return $upload_error_handler( $file, $uploads['error'] );	$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );	// Strip the query strings.	$filename = str_replace('?','-', $filename);	$filename = str_replace('&','-', $filename);	// Move the file to the uploads dir	$new_file = $uploads['path'] . "/$filename";	if ( false === @ rename( $file['tmp_name'], $new_file ) ) {		return $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $uploads['path'] ) );	}	// Set correct file permissions	$stat = stat( dirname( $new_file ));	$perms = $stat['mode'] & 0000666;	@ chmod( $new_file, $perms );	// Compute the URL	$url = $uploads['url'] . "/$filename";	$return = apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $type ), 'sideload' );	return $return;}/** * Downloads a url to a local temporary file using the WordPress HTTP Class. * Please note, That the calling function must unlink() the  file. * * @since 2.5.0 * * @param string $url the URL of the file to download * @return mixed WP_Error on failure, string Filename on success. */function download_url( $url ) {	//WARNING: The file is not automatically deleted, The script must unlink() the file.	if ( ! $url )		return new WP_Error('http_no_url', __('Invalid URL Provided.'));	$tmpfname = wp_tempnam($url);	if ( ! $tmpfname )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$handle = @fopen($tmpfname, 'wb');	if ( ! $handle )		return new WP_Error('http_no_file', __('Could not create Temporary file.'));	$response = wp_remote_get($url, array('timeout' => 300));	if ( is_wp_error($response) ) {		fclose($handle);		unlink($tmpfname);		return $response;	}	if ( $response['response']['code'] != '200' ){		fclose($handle);		unlink($tmpfname);		return new WP_Error('http_404', trim($response['response']['message']));	}	fwrite($handle, $response['body']);	fclose($handle);	return $tmpfname;}/** * Unzip's a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present. * * Attempts to increase the PHP Memory limit to 256M before uncompressing, * However, The most memory required shouldn't be much larger than the Archive itself. * * @since 2.5.0 * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @return mixed WP_Error on failure, True on success */function unzip_file($file, $to) {	global $wp_filesystem;	if ( ! $wp_filesystem || !is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	// Unzip can use a lot of memory, but not this much hopefully	@ini_set('memory_limit', '256M');	$needed_dirs = array();	$to = trailingslashit($to);	// Determine any parent dir's needed (of the upgrade directory)	if ( ! $wp_filesystem->is_dir($to) ) { //Only do parents if no children exist		$path = preg_split('![/\\\]!', untrailingslashit($to));		for ( $i = count($path); $i >= 0; $i-- ) {			if ( empty($path[$i]) )				continue;			$dir = implode('/', array_slice($path, 0, $i+1) );			if ( preg_match('!^[a-z]:$!i', $dir) ) // Skip it if it looks like a Windows Drive letter.				continue;			if ( ! $wp_filesystem->is_dir($dir) )				$needed_dirs[] = $dir;			else				break; // A folder exists, therefor, we dont need the check the levels below this		}	}	if ( class_exists('ZipArchive') && apply_filters('unzip_file_use_ziparchive', true ) ) {		$result = _unzip_file_ziparchive($file, $to, $needed_dirs);		if ( true === $result ) {			return $result;		} elseif ( is_wp_error($result) ) {			if ( 'incompatible_archive' != $result->get_error_code() )				return $result;		}	}	// Fall through to PclZip if ZipArchive is not available, or encountered an error opening the file.	return _unzip_file_pclzip($file, $to, $needed_dirs);}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {	global $wp_filesystem;	$z = new ZipArchive();	// PHP4-compat - php4 classes can't contain constants	$zopen = $z->open($file, /* ZIPARCHIVE::CHECKCONS */ 4);	if ( true !== $zopen )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'));	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		if ( '/' == substr($info['name'], -1) ) // directory			$needed_dirs[] = $to . untrailingslashit($info['name']);		else			$needed_dirs[] = $to . untrailingslashit(dirname($info['name']));	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the Dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	for ( $i = 0; $i < $z->numFiles; $i++ ) {		if ( ! $info = $z->statIndex($i) )			return new WP_Error('stat_failed', __('Could not retrieve file from archive.'));		if ( '/' == substr($info['name'], -1) ) // directory			continue;		if ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		$contents = $z->getFromIndex($i);		if ( false === $contents )			return new WP_Error('extract_failed', __('Could not extract file from archive.'), $info['name']);		if ( ! $wp_filesystem->put_contents( $to . $info['name'], $contents, FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $info['filename']);	}	$z->close();	return true;}/** * This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library. * Assumes that WP_Filesystem() has already been called and set up. * * @since 3.0.0 * @see unzip_file * @access private * * @param string $file Full path and filename of zip archive * @param string $to Full path on the filesystem to extract archive to * @param array $needed_dirs A partial list of required folders needed to be created. * @return mixed WP_Error on failure, True on success */function _unzip_file_pclzip($file, $to, $needed_dirs = array()) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-pclzip.php');	$archive = new PclZip($file);	// Is the archive valid?	if ( false == ($archive_files = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING)) )		return new WP_Error('incompatible_archive', __('Incompatible Archive.'), $archive->errorInfo(true));	if ( 0 == count($archive_files) )		return new WP_Error('empty_archive', __('Empty archive.'));	// Determine any children directories needed (From within the archive)	foreach ( $archive_files as $file ) {		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory			continue;		$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );	}	$needed_dirs = array_unique($needed_dirs);	foreach ( $needed_dirs as $dir ) {		// Check the parent folders of the folders all exist within the creation array.		if ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)			continue;		if ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it			continue;		$parent_folder = dirname($dir);		while ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {			$needed_dirs[] = $parent_folder;			$parent_folder = dirname($parent_folder);		}	}	asort($needed_dirs);	// Create those directories if need be:	foreach ( $needed_dirs as $_dir ) {		if ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the dir exists upon creation failure. Less I/O this way.			return new WP_Error('mkdir_failed', __('Could not create directory.'), $_dir);	}	unset($needed_dirs);	// Extract the files from the zip	foreach ( $archive_files as $file ) {		if ( $file['folder'] )			continue;		if ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files			continue;		if ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )			return new WP_Error('copy_failed', __('Could not copy file.'), $to . $file['filename']);	}	return true;}/** * Copies a directory from one location to another via the WordPress Filesystem Abstraction. * Assumes that WP_Filesystem() has already been called and setup. * * @since 2.5.0 * * @param string $from source directory * @param string $to destination directory * @return mixed WP_Error on failure, True on success. */function copy_dir($from, $to) {	global $wp_filesystem;	$dirlist = $wp_filesystem->dirlist($from);	$from = trailingslashit($from);	$to = trailingslashit($to);	foreach ( (array) $dirlist as $filename => $fileinfo ) {		if ( 'f' == $fileinfo['type'] ) {			if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) ) {				// If copy failed, chmod file to 0644 and try again.				$wp_filesystem->chmod($to . $filename, 0644);				if ( ! $wp_filesystem->copy($from . $filename, $to . $filename, true) )					return new WP_Error('copy_failed', __('Could not copy file.'), $to . $filename);			}			$wp_filesystem->chmod($to . $filename, FS_CHMOD_FILE);		} elseif ( 'd' == $fileinfo['type'] ) {			if ( !$wp_filesystem->is_dir($to . $filename) ) {				if ( !$wp_filesystem->mkdir($to . $filename, FS_CHMOD_DIR) )					return new WP_Error('mkdir_failed', __('Could not create directory.'), $to . $filename);			}			$result = copy_dir($from . $filename, $to . $filename);			if ( is_wp_error($result) )				return $result;		}	}	return true;}/** * Initialises and connects the WordPress Filesystem Abstraction classes. * This function will include the chosen transport and attempt connecting. * * Plugins may add extra transports, And force WordPress to use them by returning the filename via the 'filesystem_method_file' filter. * * @since 2.5.0 * * @param array $args (optional) Connection args, These are passed directly to the WP_Filesystem_*() classes. * @param string $context (optional) Context for get_filesystem_method(), See function declaration for more information. * @return boolean false on failure, true on success */function WP_Filesystem( $args = false, $context = false ) {	global $wp_filesystem;	require_once(ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php');	$method = get_filesystem_method($args, $context);	if ( ! $method )		return false;	if ( ! class_exists("WP_Filesystem_$method") ) {		$abstraction_file = apply_filters('filesystem_method_file', ABSPATH . 'wp-admin/includes/class-wp-filesystem-' . $method . '.php', $method);		if ( ! file_exists($abstraction_file) )			return;		require_once($abstraction_file);	}	$method = "WP_Filesystem_$method";	$wp_filesystem = new $method($args);	//Define the timeouts for the connections. Only available after the construct is called to allow for per-transport overriding of the default.	if ( ! defined('FS_CONNECT_TIMEOUT') )		define('FS_CONNECT_TIMEOUT', 30);	if ( ! defined('FS_TIMEOUT') )		define('FS_TIMEOUT', 30);	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return false;	if ( !$wp_filesystem->connect() )		return false; //There was an erorr connecting to the server.	// Set the permission constants if not already set.	if ( ! defined('FS_CHMOD_DIR') )		define('FS_CHMOD_DIR', 0755 );	if ( ! defined('FS_CHMOD_FILE') )		define('FS_CHMOD_FILE', 0644 );	return true;}/** * Determines which Filesystem Method to use. * The priority of the Transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets (Via Sockets class, or fsoxkopen()) * * Note that the return value of this function can be overridden in 2 ways *  - By defining FS_METHOD in your <code>wp-config.php</code> file *  - By using the filesystem_method filter * Valid values for these are: 'direct', 'ssh', 'ftpext' or 'ftpsockets' * Plugins may also define a custom transport handler, See the WP_Filesystem function for more information. * * @since 2.5.0 * * @param array $args Connection details. * @param string $context Full path to the directory that is tested for being writable. * @return string The transport to use, see description for valid return values. */function get_filesystem_method($args = array(), $context = false) {	$method = defined('FS_METHOD') ? FS_METHOD : false; //Please ensure that this is either 'direct', 'ssh', 'ftpext' or 'ftpsockets'	if ( ! $method && function_exists('getmyuid') && function_exists('fileowner') ){		if ( !$context )			$context = WP_CONTENT_DIR;		$context = trailingslashit($context);		$temp_file_name = $context . 'temp-write-test-' . time();		$temp_handle = @fopen($temp_file_name, 'w');		if ( $temp_handle ) {			if ( getmyuid() == @fileowner($temp_file_name) )				$method = 'direct';			@fclose($temp_handle);			@unlink($temp_file_name);		} 	}	if ( ! $method && isset($args['connection_type']) && 'ssh' == $args['connection_type'] && extension_loaded('ssh2') && function_exists('stream_get_contents') ) $method = 'ssh2';	if ( ! $method && extension_loaded('ftp') ) $method = 'ftpext';	if ( ! $method && ( extension_loaded('sockets') || function_exists('fsockopen') ) ) $method = 'ftpsockets'; //Sockets: Socket extension; PHP Mode: FSockopen / fwrite / fread	return apply_filters('filesystem_method', $method, $args);}/** * Displays a form to the user to request for their FTP/SSH details in order to  connect to the filesystem. * All chosen/entered details are saved, Excluding the Password. * * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467) to specify an alternate FTP/SSH port. * * Plugins may override this form by returning true|false via the <code>request_filesystem_credentials</code> filter. * * @since 2.5.0 * * @param string $form_post the URL to post the form to * @param string $type the chosen Filesystem method in use * @param boolean $error if the current request has failed to connect * @param string $context The directory which is needed access to, The write-test will be performed on  this directory by get_filesystem_method() * @param string $extra_fields Extra POST fields which should be checked for to be included in the post. * @return boolean False on failure. True on success. */function request_filesystem_credentials($form_post, $type = '', $error = false, $context = false, $extra_fields = null) {	$req_cred = apply_filters( 'request_filesystem_credentials', '', $form_post, $type, $error, $context, $extra_fields );	if ( '' !== $req_cred )		return $req_cred;	if ( empty($type) )		$type = get_filesystem_method(array(), $context);	if ( 'direct' == $type )		return true;	if ( is_null( $extra_fields ) )		$extra_fields = array( 'version', 'locale' );	$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));	// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)	$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($_POST['hostname']) ? stripslashes($_POST['hostname']) : $credentials['hostname']);	$credentials['username'] = defined('FTP_USER') ? FTP_USER : (!empty($_POST['username']) ? stripslashes($_POST['username']) : $credentials['username']);	$credentials['password'] = defined('FTP_PASS') ? FTP_PASS : (!empty($_POST['password']) ? stripslashes($_POST['password']) : '');	// Check to see if we are setting the public/private keys for ssh	$credentials['public_key'] = defined('FTP_PUBKEY') ? FTP_PUBKEY : (!empty($_POST['public_key']) ? stripslashes($_POST['public_key']) : '');	$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($_POST['private_key']) ? stripslashes($_POST['private_key']) : '');	//sanitize the hostname, Some people might pass in odd-data:	$credentials['hostname'] = preg_replace('|\w+://|', '', $credentials['hostname']); //Strip any schemes off	if ( strpos($credentials['hostname'], ':') ) {		list( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);		if ( ! is_numeric($credentials['port']) )			unset($credentials['port']);	} else {		unset($credentials['port']);	}	if ( (defined('FTP_SSH') && FTP_SSH) || (defined('FS_METHOD') && 'ssh' == FS_METHOD) )		$credentials['connection_type'] = 'ssh';	else if ( (defined('FTP_SSL') && FTP_SSL) && 'ftpext' == $type ) //Only the FTP Extension understands SSL		$credentials['connection_type'] = 'ftps';	else if ( !empty($_POST['connection_type']) )		$credentials['connection_type'] = stripslashes($_POST['connection_type']);	else if ( !isset($credentials['connection_type']) ) //All else fails (And its not defaulted to something else saved), Default to FTP		$credentials['connection_type'] = 'ftp';	if ( ! $error &&			(				( !empty($credentials['password']) && !empty($credentials['username']) && !empty($credentials['hostname']) ) ||				( 'ssh' == $credentials['connection_type'] && !empty($credentials['public_key']) && !empty($credentials['private_key']) )			) ) {		$stored_credentials = $credentials;		if ( !empty($stored_credentials['port']) ) //save port as part of hostname to simplify above code.			$stored_credentials['hostname'] .= ':' . $stored_credentials['port'];		unset($stored_credentials['password'], $stored_credentials['port'], $stored_credentials['private_key'], $stored_credentials['public_key']);		update_option('ftp_credentials', $stored_credentials);		return $credentials;	}	$hostname = '';	$username = '';	$password = '';	$connection_type = '';	if ( !empty($credentials) )		extract($credentials, EXTR_OVERWRITE);	if ( $error ) {		$error_string = __('<strong>Error:</strong> There was an error connecting to the server, Please verify the settings are correct.');		if ( is_wp_error($error) )			$error_string = $error->get_error_message();		echo '<div id="message" class="error"><p>' . $error_string . '</p></div>';	}	$types = array();	if ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )		$types[ 'ftp' ] = __('FTP');	if ( extension_loaded('ftp') ) //Only this supports FTPS		$types[ 'ftps' ] = __('FTPS (SSL)');	if ( extension_loaded('ssh2') && function_exists('stream_get_contents') )		$types[ 'ssh' ] = __('SSH2');	$types = apply_filters('fs_ftp_connection_types', $types, $credentials, $type, $error, $context);?><script type="text/javascript"><!--jQuery(function($){	jQuery("#ssh").click(function () {		jQuery("#ssh_keys").show();	});	jQuery("#ftp, #ftps").click(function () {		jQuery("#ssh_keys").hide();	});	jQuery('form input[value=""]:first').focus();});--></script><form action="<?php echo $form_post ?>" method="post"><div class="wrap"><?php screen_icon(); ?><h2><?php _e('Connection Information') ?></h2><p><?php	$label_user = __('Username');	$label_pass = __('Password');	_e('To perform the requested action, WordPress needs to access to your web server.');	echo ' ';	if ( ( isset( $types['ftp'] ) || isset( $types['ftps'] ) ) ) {		if ( isset( $types['ssh'] ) ) {			_e('Please enter your FTP or SSH credentials to proceed.');			$label_user = __('FTP/SSH Username');			$label_pass = __('FTP/SSH Password');		} else {			_e('Please enter your FTP credentials to proceed.');			$label_user = __('FTP Username');			$label_pass = __('FTP Password');		}		echo ' ';	}	_e('If you do not remember your credentials, you should contact your web host.');?></p><table class="form-table"><tr valign="top"><th scope="row"><label for="hostname"><?php _e('Hostname') ?></label></th><td><input name="hostname" type="text" id="hostname" value="<?php echo esc_attr($hostname); if ( !empty($port) ) echo ":$port"; ?>"<?php disabled( defined('FTP_HOST') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="username"><?php echo $label_user; ?></label></th><td><input name="username" type="text" id="username" value="<?php echo esc_attr($username) ?>"<?php disabled( defined('FTP_USER') ); ?> size="40" /></td></tr><tr valign="top"><th scope="row"><label for="password"><?php echo $label_pass; ?></label></th><td><input name="password" type="password" id="password" value="<?php if ( defined('FTP_PASS') ) echo '*****'; ?>"<?php disabled( defined('FTP_PASS') ); ?> size="40" /></td></tr><?php if ( isset($types['ssh']) ) : ?><tr id="ssh_keys" valign="top" style="<?php if ( 'ssh' != $connection_type ) echo 'display:none' ?>"><th scope="row"><?php _e('Authentication Keys') ?><div class="key-labels textright"><label for="public_key"><?php _e('Public Key:') ?></label ><br /><label for="private_key"><?php _e('Private Key:') ?></label></div></th><td><br /><input name="public_key" type="text" id="public_key" value="<?php echo esc_attr($public_key) ?>"<?php disabled( defined('FTP_PUBKEY') ); ?> size="40" /><br /><input name="private_key" type="text" id="private_key" value="<?php echo esc_attr($private_key) ?>"<?php disabled( defined('FTP_PRIKEY') ); ?> size="40" /><div><?php _e('Enter the location on the server where the keys are located. If a passphrase is needed, enter that in the password field above.') ?></div></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Connection Type') ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e('Connection Type') ?></span></legend><?php	$disabled = disabled( (defined('FTP_SSL') && FTP_SSL) || (defined('FTP_SSH') && FTP_SSH), true, false );	foreach ( $types as $name => $text ) : ?>	<label for="<?php echo esc_attr($name) ?>">		<input type="radio" name="connection_type" id="<?php echo esc_attr($name) ?>" value="<?php echo esc_attr($name) ?>"<?php checked($name, $connection_type); echo $disabled; ?> />		<?php echo $text ?>	</label>	<?php endforeach; ?></fieldset></td></tr></table><?phpforeach ( (array) $extra_fields as $field ) {	if ( isset( $_POST[ $field ] ) )		echo '<input type="hidden" name="' . esc_attr( $field ) . '" value="' . esc_attr( stripslashes( $_POST[ $field ] ) ) . '" />';}?><p class="submit"><input id="upgrade" name="upgrade" type="submit" class="button" value="<?php esc_attr_e('Proceed'); ?>" /></p></div></form><?php	return false;}?>
<?php/** * Multisite upgrade administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once('admin.php');if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );require_once( ABSPATH . WPINC . '/http.php' );$title = __( 'Update Network' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Only use this screen once you have updated to a new version of WordPress through Dashboard > Updates. Clicking the Update Network button will step through each site in the network, five at a time, and make sure any database upgrades are applied.') . '</p>' .	'<p>' . __('If a version update to core has not happened, clicking this button won&#8217;t affect anything.') . '</p>' .	'<p>' . __('If this process fails for any reason, users logging in to their sites will force the same update.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Update_SubPanel" target="_blank">Update Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('admin-header.php');if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );echo '<div class="wrap">';screen_icon();echo '<h2>' . __( 'Update Network' ) . '</h2>';$action = isset($_GET['action']) ? $_GET['action'] : 'show';switch ( $action ) {	case "upgrade":		$n = ( isset($_GET['n']) ) ? intval($_GET['n']) : 0;		if ( $n < 5 ) {			global $wp_db_version;			update_site_option( 'wpmu_upgrade_site', $wp_db_version );		}		$blogs = $wpdb->get_results( "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' AND spam = '0' AND deleted = '0' AND archived = '0' ORDER BY registered DESC LIMIT {$n}, 5", ARRAY_A );		if ( empty( $blogs ) ) {			echo '<p>' . __( 'All done!' ) . '</p>';			break;		}		echo "<ul>";		foreach ( (array) $blogs as $details ) {			$siteurl = get_blog_option( $details['blog_id'], 'siteurl' );			echo "<li>$siteurl</li>";			$response = wp_remote_get( trailingslashit( $siteurl ) . "wp-admin/upgrade.php?step=upgrade_db", array( 'timeout' => 120, 'httpversion' => '1.1' ) );			if ( is_wp_error( $response ) )				wp_die( sprintf( __( 'Warning! Problem updating %1$s. Your server may not be able to connect to sites running on it. Error message: <em>%2$s</em>' ), $siteurl, $response->get_error_message() ) );			do_action( 'after_mu_upgrade', $response );			do_action( 'wpmu_upgrade_site', $details[ 'blog_id' ] );		}		echo "</ul>";		?><p><?php _e( 'If your browser doesn&#8217;t start loading the next page automatically, click this link:' ); ?> <a class="button" href="ms-upgrade-network.php?action=upgrade&amp;n=<?php echo ($n + 5) ?>"><?php _e("Next Sites"); ?></a></p>		<script type='text/javascript'>		<!--		function nextpage() {			location.href = "ms-upgrade-network.php?action=upgrade&n=<?php echo ($n + 5) ?>";		}		setTimeout( "nextpage()", 250 );		//-->		</script><?php	break;	case 'show':	default:		?><p><?php _e( 'You can update all the sites on your network through this page. It works by calling the update script of each site automatically. Hit the link below to update.' ); ?></p>		<p><a class="button" href="ms-upgrade-network.php?action=upgrade"><?php _e("Update Network"); ?></a></p><?php		do_action( 'wpmu_upgrade_page' );	break;}?></div><?php include('./admin-footer.php'); ?>
<?php/** * API for fetching the HTML to embed remote content based on a provided URL. * Used internally by the {@link WP_Embed} class, but is designed to be generic. * * @link http://codex.wordpress.org/oEmbed oEmbed Codex Article * @link http://oembed.com/ oEmbed Homepage * * @package WordPress * @subpackage oEmbed *//** * oEmbed class. * * @package WordPress * @subpackage oEmbed * @since 2.9.0 */class WP_oEmbed {	var $providers = array();	/**	 * PHP4 constructor	 */	function WP_oEmbed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 *	 * @uses apply_filters() Filters a list of pre-defined oEmbed providers.	 */	function __construct() {		// List out some popular sites that support oEmbed.		// The WP_Embed class disables discovery for non-unfiltered_html users, so only providers in this array will be used for them.		// Add to this list using the wp_oembed_add_provider() function (see it's PHPDoc for details).		$this->providers = apply_filters( 'oembed_providers', array(			'#http://(www\.)?youtube.com/watch.*#i'         => array( 'http://www.youtube.com/oembed',            true  ),			'http://youtu.be/*'                             => array( 'http://www.youtube.com/oembed',            false ),			'http://blip.tv/file/*'                         => array( 'http://blip.tv/oembed/',                   false ),			'#http://(www\.)?vimeo\.com/.*#i'               => array( 'http://www.vimeo.com/api/oembed.{format}', true  ),			'#http://(www\.)?dailymotion\.com/.*#i'         => array( 'http://www.dailymotion.com/api/oembed',    true  ),			'#http://(www\.)?flickr\.com/.*#i'              => array( 'http://www.flickr.com/services/oembed/',   true  ),			'#http://(.+)?smugmug\.com/.*#i'                => array( 'http://api.smugmug.com/services/oembed/',  true  ),			'#http://(www\.)?hulu\.com/watch/.*#i'          => array( 'http://www.hulu.com/api/oembed.{format}',  true  ),			'#http://(www\.)?viddler\.com/.*#i'             => array( 'http://lab.viddler.com/services/oembed/',  true  ),			'http://qik.com/*'                              => array( 'http://qik.com/api/oembed.{format}',       false ),			'http://revision3.com/*'                        => array( 'http://revision3.com/api/oembed/',         false ),			'http://i*.photobucket.com/albums/*'            => array( 'http://photobucket.com/oembed',            false ),			'http://gi*.photobucket.com/groups/*'           => array( 'http://photobucket.com/oembed',            false ),			'#http://(www\.)?scribd\.com/.*#i'              => array( 'http://www.scribd.com/services/oembed',    true  ),			'http://wordpress.tv/*'                         => array( 'http://wordpress.tv/oembed/',              false ),			'#http://(answers|surveys)\.polldaddy.com/.*#i' => array( 'http://polldaddy.com/oembed/',             true  ),			'#http://(www\.)?funnyordie\.com/videos/.*#i'   => array( 'http://www.funnyordie.com/oembed',         true  ),		) );		// Fix any embeds that contain new lines in the middle of the HTML which breaks wpautop().		add_filter( 'oembed_dataparse', array(&$this, '_strip_newlines'), 10, 3 );	}	/**	 * The do-it-all function that takes a URL and attempts to return the HTML.	 *	 * @see WP_oEmbed::discover()	 * @see WP_oEmbed::fetch()	 * @see WP_oEmbed::data2html()	 *	 * @param string $url The URL to the content that should be attempted to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed.	 */	function get_html( $url, $args = '' ) {		$provider = false;		if ( !isset($args['discover']) )			$args['discover'] = true;		foreach ( $this->providers as $matchmask => $data ) {			list( $providerurl, $regex ) = $data;			// Turn the asterisk-type provider URLs into regex			if ( !$regex )				$matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote( str_replace( '*', '___wildcard___', $matchmask ), '#' ) ) . '#i';			if ( preg_match( $matchmask, $url ) ) {				$provider = str_replace( '{format}', 'json', $providerurl ); // JSON is easier to deal with than XML				break;			}		}		if ( !$provider && $args['discover'] )			$provider = $this->discover( $url );		if ( !$provider || false === $data = $this->fetch( $provider, $url, $args ) )			return false;		return apply_filters( 'oembed_result', $this->data2html( $data, $url ), $url, $args );	}	/**	 * Attempts to find oEmbed provider discovery <link> tags at the given URL.	 *	 * @param string $url The URL that should be inspected for discovery <link> tags.	 * @return bool|string False on failure, otherwise the oEmbed provider URL.	 */	function discover( $url ) {		$providers = array();		// Fetch URL content		if ( $html = wp_remote_retrieve_body( wp_remote_get( $url ) ) ) {			// <link> types that contain oEmbed provider URLs			$linktypes = apply_filters( 'oembed_linktypes', array(				'application/json+oembed' => 'json',				'text/xml+oembed' => 'xml',				'application/xml+oembed' => 'xml', // Incorrect, but used by at least Vimeo			) );			// Strip <body>			$html = substr( $html, 0, stripos( $html, '</head>' ) );			// Do a quick check			$tagfound = false;			foreach ( $linktypes as $linktype => $format ) {				if ( stripos($html, $linktype) ) {					$tagfound = true;					break;				}			}			if ( $tagfound && preg_match_all( '/<link([^<>]+)>/i', $html, $links ) ) {				foreach ( $links[1] as $link ) {					$atts = shortcode_parse_atts( $link );					if ( !empty($atts['type']) && !empty($linktypes[$atts['type']]) && !empty($atts['href']) ) {						$providers[$linktypes[$atts['type']]] = $atts['href'];						// Stop here if it's JSON (that's all we need)						if ( 'json' == $linktypes[$atts['type']] )							break;					}				}			}		}		// JSON is preferred to XML		if ( !empty($providers['json']) )			return $providers['json'];		elseif ( !empty($providers['xml']) )			return $providers['xml'];		else			return false;	}	/**	 * Connects to a oEmbed provider and returns the result.	 *	 * @param string $provider The URL to the oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @param array $args Optional arguments. Usually passed from a shortcode.	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function fetch( $provider, $url, $args = '' ) {		$args = wp_parse_args( $args, wp_embed_defaults() );		$provider = add_query_arg( 'maxwidth', $args['width'], $provider );		$provider = add_query_arg( 'maxheight', $args['height'], $provider );		$provider = add_query_arg( 'url', urlencode($url), $provider );		foreach( array( 'json', 'xml' ) as $format ) {			$result = $this->_fetch_with_format( $provider, $format );			if ( is_wp_error( $result ) && 'not-implemented' == $result->get_error_code() )				continue;			return ( $result && ! is_wp_error( $result ) ) ? $result : false;		}		return false;	}	/**	 * Fetches result from an oEmbed provider for a specific format and complete provider URL	 *	 * @since 3.0.0	 * @access private	 * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)	 * @param string $format Format to use	 * @return bool|object False on failure, otherwise the result in the form of an object.	 */	function _fetch_with_format( $provider_url_with_args, $format ) {		$provider_url_with_args = add_query_arg( 'format', $format, $provider_url_with_args );		$response = wp_remote_get( $provider_url_with_args );		if ( 501 == wp_remote_retrieve_response_code( $response ) )			return new WP_Error( 'not-implemented' );		if ( ! $body = wp_remote_retrieve_body( $response ) )			return false;		$parse_method = "_parse_$format";		return $this->$parse_method( $body );	}	/**	 * Parses a json response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_json( $response_body ) {		return ( ( $data = json_decode( trim( $response_body ) ) ) && is_object( $data ) ) ? $data : false;	}	/**	 * Parses an XML response body.	 *	 * @since 3.0.0	 * @access private	 */	function _parse_xml( $response_body ) {		if ( function_exists('simplexml_load_string') ) {			$errors = libxml_use_internal_errors( 'true' );			$data = simplexml_load_string( $response_body );			libxml_use_internal_errors( $errors );			if ( is_object( $data ) )				return $data;		}		return false;	}	/**	 * Converts a data object from {@link WP_oEmbed::fetch()} and returns the HTML.	 *	 * @param object $data A data object result from an oEmbed provider.	 * @param string $url The URL to the content that is desired to be embedded.	 * @return bool|string False on error, otherwise the HTML needed to embed.	 */	function data2html( $data, $url ) {		if ( !is_object($data) || empty($data->type) )			return false;		switch ( $data->type ) {			case 'photo':				if ( empty($data->url) || empty($data->width) || empty($data->height) )					return false;				$title = ( !empty($data->title) ) ? $data->title : '';				$return = '<img src="' . esc_url( $data->url ) . '" alt="' . esc_attr($title) . '" width="' . esc_attr($data->width) . '" height="' . esc_attr($data->height) . '" />';				break;			case 'video':			case 'rich':				$return = ( !empty($data->html) ) ? $data->html : false;				break;			case 'link':				$return = ( !empty($data->title) ) ? '<a href="' . esc_url($url) . '">' . esc_html($data->title) . '</a>' : false;				break;			default;				$return = false;		}		// You can use this filter to add support for custom data types or to filter the result		return apply_filters( 'oembed_dataparse', $return, $data, $url );	}	/**	 * Strip any new lines from the HTML.	 *	 * @access private	 * @param string $html Existing HTML.	 * @param object $data Data object from WP_oEmbed::data2html()	 * @param string $url The original URL passed to oEmbed.	 * @return string Possibly modified $html	 */	function _strip_newlines( $html, $data, $url ) {		if ( false !== strpos( $html, "\n" ) )			$html = str_replace( array( "\r\n", "\n" ), '', $html );		return $html;	}}/** * Returns the initialized {@link WP_oEmbed} object * * @since 2.9.0 * @access private * * @see WP_oEmbed * @uses WP_oEmbed * * @return WP_oEmbed object. */function &_wp_oembed_get_object() {	static $wp_oembed;	if ( is_null($wp_oembed) )		$wp_oembed = new WP_oEmbed();	return $wp_oembed;}?>
<?php/** * Used to set up and fix common variables and include * the WordPress procedural and class library. * * Allows for some configuration in wp-config.php (see default-constants.php) * * @package WordPress *//** * Stores the location of the WordPress directory of functions, classes, and core content. * * @since 1.0.0 */define( 'WPINC', 'wp-includes' );// Include files required for initialization.require( ABSPATH . WPINC . '/load.php' );require( ABSPATH . WPINC . '/default-constants.php' );require( ABSPATH . WPINC . '/version.php' );// Set initial default constants including WP_MEMORY_LIMIT, WP_DEBUG, WP_CONTENT_DIR and WP_CACHE.wp_initial_constants( );// Disable magic quotes at runtime. Magic quotes are added using wpdb later in wp-settings.php.set_magic_quotes_runtime( 0 );@ini_set( 'magic_quotes_sybase', 0 );// Set default timezone in PHP 5.if ( function_exists( 'date_default_timezone_set' ) )	date_default_timezone_set( 'UTC' );// Turn register_globals off.wp_unregister_GLOBALS();// Ensure these global variables do not exist so they do not interfere with WordPress.unset( $wp_filter, $cache_lastcommentmodified, $cache_lastpostdate );// Standardize $_SERVER variables across setups.wp_fix_server_vars();// Check for the required PHP version and for the MySQL extension or a database drop-in.wp_check_php_mysql_versions();// Check if we have recieved a request due to missing favicon.icowp_favicon_request();// Check if we're in maintenance mode.wp_maintenance();// Start loading timer.timer_start();// Check if we're in WP_DEBUG mode.wp_debug_mode();// For an advanced caching plugin to use. Uses a static drop-in because you would only want one.if ( WP_CACHE )	WP_DEBUG ? include( WP_CONTENT_DIR . '/advanced-cache.php' ) : @include( WP_CONTENT_DIR . '/advanced-cache.php' );// Define WP_LANG_DIR if not set.wp_set_lang_dir();// Load early WordPress files.require( ABSPATH . WPINC . '/compat.php' );require( ABSPATH . WPINC . '/functions.php' );require( ABSPATH . WPINC . '/classes.php' );// Include the wpdb class, or a db.php database drop-in if present.require_wp_db();// Set the database table prefix and the format specifiers for database table columns.wp_set_wpdb_vars();// Start the WordPress object cache, or an external object cache if the drop-in is present.wp_start_object_cache();// Load early WordPress files.require( ABSPATH . WPINC . '/plugin.php' );require( ABSPATH . WPINC . '/default-filters.php' );require( ABSPATH . WPINC . '/pomo/mo.php' );// Initialize multisite if enabled.if ( is_multisite() ) {	require( ABSPATH . WPINC . '/ms-blogs.php' );	require( ABSPATH . WPINC . '/ms-settings.php' );} elseif ( ! defined( 'MULTISITE' ) ) {	define( 'MULTISITE', false );}// Stop most of WordPress from being loaded if we just want the basics.if ( SHORTINIT )	return false;// Load the l18n library.require( ABSPATH . WPINC . '/l10n.php' );// Run the installer if WordPress is not installed.wp_not_installed();// Load most of WordPress.require( ABSPATH . WPINC . '/formatting.php' );require( ABSPATH . WPINC . '/capabilities.php' );require( ABSPATH . WPINC . '/query.php' );require( ABSPATH . WPINC . '/theme.php' );require( ABSPATH . WPINC . '/user.php' );require( ABSPATH . WPINC . '/meta.php' );require( ABSPATH . WPINC . '/general-template.php' );require( ABSPATH . WPINC . '/link-template.php' );require( ABSPATH . WPINC . '/author-template.php' );require( ABSPATH . WPINC . '/post.php' );require( ABSPATH . WPINC . '/post-template.php' );require( ABSPATH . WPINC . '/category.php' );require( ABSPATH . WPINC . '/category-template.php' );require( ABSPATH . WPINC . '/comment.php' );require( ABSPATH . WPINC . '/comment-template.php' );require( ABSPATH . WPINC . '/rewrite.php' );require( ABSPATH . WPINC . '/feed.php' );require( ABSPATH . WPINC . '/bookmark.php' );require( ABSPATH . WPINC . '/bookmark-template.php' );require( ABSPATH . WPINC . '/kses.php' );require( ABSPATH . WPINC . '/cron.php' );require( ABSPATH . WPINC . '/deprecated.php' );require( ABSPATH . WPINC . '/script-loader.php' );require( ABSPATH . WPINC . '/taxonomy.php' );require( ABSPATH . WPINC . '/update.php' );require( ABSPATH . WPINC . '/canonical.php' );require( ABSPATH . WPINC . '/shortcodes.php' );require( ABSPATH . WPINC . '/media.php' );require( ABSPATH . WPINC . '/http.php' );require( ABSPATH . WPINC . '/class-http.php' );require( ABSPATH . WPINC . '/widgets.php' );require( ABSPATH . WPINC . '/nav-menu.php' );require( ABSPATH . WPINC . '/nav-menu-template.php' );// Load multisite-specific files.if ( is_multisite() ) {	require( ABSPATH . WPINC . '/ms-functions.php' );	require( ABSPATH . WPINC . '/ms-default-filters.php' );	require( ABSPATH . WPINC . '/ms-deprecated.php' );}// Define constants that rely on the API to obtain the default value.// Define must-use plugin directory constants, which may be overridden in the sunrise.php drop-in.wp_plugin_directory_constants( );// Load must-use plugins.foreach ( wp_get_mu_plugins() as $mu_plugin ) {	include_once( $mu_plugin );}unset( $mu_plugin );do_action( 'muplugins_loaded' );if ( is_multisite() )	ms_cookie_constants(  );// Define constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies().wp_cookie_constants( );// Define and enforce our SSL constantswp_ssl_constants( );// Create common globals.require( ABSPATH . WPINC . '/vars.php' );// Make taxonomies and posts available to plugins and themes.// @plugin authors: warning: these get registered again on the init hook.create_initial_taxonomies();create_initial_post_types();// Load active plugins.foreach ( wp_get_active_and_valid_plugins() as $plugin )	include_once( $plugin );unset( $plugin );// Load pluggable functions.require( ABSPATH . WPINC . '/pluggable.php' );require( ABSPATH . WPINC . '/pluggable-deprecated.php' );// Set internal encoding.wp_set_internal_encoding();// Run wp_cache_postload() if object cache is enabled and the function exists.if ( WP_CACHE && function_exists( 'wp_cache_postload' ) )	wp_cache_postload();do_action( 'plugins_loaded' );// Define constants which affect functionality if not already defined.wp_functionality_constants( );// Add magic quotes and set up $_REQUEST ( $_GET + $_POST )wp_magic_quotes();do_action( 'sanitize_comment_cookies' );/** * WordPress Query object * @global object $wp_the_query * @since 2.0.0 */$wp_the_query =& new WP_Query();/** * Holds the reference to @see $wp_the_query * Use this global for WordPress queries * @global object $wp_query * @since 1.5.0 */$wp_query =& $wp_the_query;/** * Holds the WordPress Rewrite object for creating pretty URLs * @global object $wp_rewrite * @since 1.5.0 */$wp_rewrite =& new WP_Rewrite();/** * WordPress Object * @global object $wp * @since 2.0.0 */$wp =& new WP();/** * WordPress Widget Factory Object * @global object $wp_widget_factory * @since 2.8.0 */$wp_widget_factory =& new WP_Widget_Factory();do_action( 'setup_theme' );// Define the template related constants.wp_templating_constants(  );// Load the default text localization domain.load_default_textdomain();// Find the blog locale.$locale = get_locale();$locale_file = WP_LANG_DIR . "/$locale.php";if ( is_readable( $locale_file ) )	require( $locale_file );unset($locale_file);// Pull in locale data after loading text domain.require( ABSPATH . WPINC . '/locale.php' );/** * WordPress Locale object for loading locale domain date and various strings. * @global object $wp_locale * @since 2.1.0 */$wp_locale =& new WP_Locale();// Load the functions for the active theme, for both parent and child theme if applicable.if ( TEMPLATEPATH !== STYLESHEETPATH && file_exists( STYLESHEETPATH . '/functions.php' ) )	include( STYLESHEETPATH . '/functions.php' );if ( file_exists( TEMPLATEPATH . '/functions.php' ) )	include( TEMPLATEPATH . '/functions.php' );do_action( 'after_setup_theme' );// Load any template functions the theme supports.require_if_theme_supports( 'post-thumbnails', ABSPATH . WPINC . '/post-thumbnail-template.php' );register_shutdown_function( 'shutdown_action_hook' );// Set up current user.$wp->init();/** * Most of WP is loaded at this stage, and the user is authenticated. WP continues * to load on the init hook that follows (e.g. widgets), and many plugins instantiate * themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.). * * If you wish to plug an action once WP is loaded, use the wp_loaded hook below. */do_action( 'init' );// Check site statusif ( is_multisite() ) {	if ( true !== ( $file = ms_site_check() ) ) {		require( $file );		die();	}	unset($file);}/** * This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated. * * AJAX requests should use wp-admin/admin-ajax.php. admin-ajax.php can handle requests for * users not logged in. * * @link http://codex.wordpress.org/AJAX_in_Plugins * * @since 3.0.0 */do_action('wp_loaded');?>
<?php/** * Edit link category form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( !current_user_can('manage_categories') )	wp_die(__('You do not have sufficient permissions to edit link categories for this site.'));/** * @var object */if ( ! isset( $category ) )	$category = (object) array();if ( ! empty($cat_ID) ) {	/**	 * @var string	 */	$heading = '<h2>' . __('Edit Link Category') . '</h2>';	$submit_text = __('Update Category');	$form = '<form name="editcat" id="editcat" method="post" action="link-category.php" class="validate">';	$action = 'editedcat';	$nonce_action = 'update-link-category_' . $cat_ID;	do_action('edit_link_category_form_pre', $category);} else {	$heading = '<h2>' . __('Add Link Category') . '</h2>';	$submit_text = __('Add Category');	$form = '<form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php">';	$action = 'addcat';	$nonce_action = 'add-link-category';	do_action('add_link_category_form_pre', $category);}/** * @ignore * @since 2.7 * @internal Used to prevent errors in page when no category is being edited. * * @param object $category */function _fill_empty_link_category(&$category) {	if ( ! isset( $category->name ) )		$category->name = '';	if ( ! isset( $category->slug ) )		$category->slug = '';	if ( ! isset( $category->description ) )		$category->description = '';}_fill_empty_link_category($category);?><div class="wrap"><?php screen_icon(); ?><?php echo $heading ?><div id="ajax-response"></div><?php echo $form ?><input type="hidden" name="action" value="<?php echo esc_attr($action) ?>" /><input type="hidden" name="cat_ID" value="<?php echo esc_attr($category->term_id) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field($nonce_action); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _e('Link Category name') ?></label></th>			<td><input name="name" id="name" type="text" value="<?php echo esc_attr($category->name); ?>" size="40" aria-required="true" /></td>		</tr><?php if ( !is_multisite() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _e('Link Category slug') ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php echo esc_attr(apply_filters('editable_slug', $category->slug)); ?>" size="40" /><br />            <?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></td>		</tr><?php } ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _e('Description (optional)') ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo $category->description; ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></span></td>		</tr>		<?php do_action('edit_link_category_form_fields', $category); ?>	</table><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr($submit_text) ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div>
<?php/** * Edit posts rows table for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');?><table class="widefat <?php echo $post_type_object->hierarchical ? 'page' : 'post'; ?> fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers( $current_screen ); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody><?phpif ( $post_type_object->hierarchical )	page_rows($posts, $pagenum, $per_page);else	post_rows();?>	</tbody></table>
<?php/** * WordPress Installer * * @package WordPress * @subpackage Administration */// Sanity check.if ( false ) {?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title>Error: PHP is not running</title></head><body>	<h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1>	<h2>Error: PHP is not running</h2>	<p>WordPress requires that your web server is running PHP. Your server does not have PHP installed, or PHP is turned off.</p></body></html><?php}/** * We are installing WordPress. * * @since 1.5.1 * @var bool */define( 'WP_INSTALLING', true );/** Load WordPress Bootstrap */require_once( dirname( dirname( __FILE__ ) ) . '/wp-load.php' );/** Load WordPress Administration Upgrade API */require_once( dirname( __FILE__ ) . '/includes/upgrade.php' );/** Load wpdb */require_once(dirname(dirname(__FILE__)) . '/wp-includes/wp-db.php');$step = isset( $_GET['step'] ) ? $_GET['step'] : 0;/** * Display install header. * * @since 2.5.0 * @package WordPress * @subpackage Installer */function display_header() {	header( 'Content-Type: text/html; charset=utf-8' );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />	<title><?php _e( 'WordPress &rsaquo; Installation' ); ?></title>	<?php wp_admin_css( 'install', true ); ?></head><body><h1 id="logo"><img alt="WordPress" src="images/wordpress-logo.png" /></h1><?php} // end display_header()/** * Display installer setup form. * * @since 2.8.0 * @package WordPress * @subpackage Installer */function display_setup_form( $error = null ) {	global $wpdb;	$user_table = ( $wpdb->get_var("SHOW TABLES LIKE '$wpdb->users'") != null );	// Ensure that Blogs appear in search engines by default	$blog_public = 1;	if ( ! empty( $_POST ) )		$blog_public = isset( $_POST['blog_public'] );	$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';	$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';	$admin_password = isset($_POST['admin_password']) ? trim( stripslashes( $_POST['admin_password'] ) ) : '';	$admin_email  = isset( $_POST['admin_email']  ) ? trim( stripslashes( $_POST['admin_email'] ) ) : '';	if ( ! is_null( $error ) ) {?><p class="message"><?php printf( __( '<strong>ERROR</strong>: %s' ), $error ); ?></p><?php } ?><form id="setup" method="post" action="install.php?step=2">	<table class="form-table">		<tr>			<th scope="row"><label for="weblog_title"><?php _e( 'Site Title' ); ?></label></th>			<td><input name="weblog_title" type="text" id="weblog_title" size="25" value="<?php echo esc_attr( $weblog_title ); ?>" /></td>		</tr>		<tr>			<th scope="row"><label for="user_name"><?php _e('Username'); ?></label></th>			<td>			<?php			if ( $user_table ) {				_e('User(s) already exists.');			} else {				?><input name="user_name" type="text" id="user_login" size="25" value="<?php echo esc_attr( sanitize_user( $user_name, true ) ); ?>" />				<p><?php _e( 'Usernames can have only alphanumeric characters, spaces, underscores, hyphens, periods and the @ symbol.' ); ?></p>			<?php			} ?>			</td>		</tr>		<?php if ( ! $user_table ) : ?>		<tr>			<th scope="row">				<label for="admin_password"><?php _e('Password, twice'); ?></label>				<p><?php _e('A password will be automatically generated for you if you leave this blank.'); ?></p>			</th>			<td>				<input name="admin_password" type="password" id="pass1" size="25" value="" />				<p><input name="admin_password2" type="password" id="pass2" size="25" value="" /></p>				<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>				<p><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>			</td>		</tr>		<?php endif; ?>		<tr>			<th scope="row"><label for="admin_email"><?php _e( 'Your E-mail' ); ?></label></th>			<td><input name="admin_email" type="text" id="admin_email" size="25" value="<?php echo esc_attr( $admin_email ); ?>" />			<p><?php _e( 'Double-check your email address before continuing.' ); ?></p></td>		</tr>		<tr>			<td colspan="2"><label><input type="checkbox" name="blog_public" value="1" <?php checked( $blog_public ); ?> /> <?php _e( 'Allow my site to appear in search engines like Google and Technorati.' ); ?></label></td>		</tr>	</table>	<p class="step"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Install WordPress' ); ?>" class="button" /></p></form><?php} // end display_setup_form()// Let's check to make sure WP isn't already installed.if ( is_blog_installed() ) {	display_header();	die( '<h1>' . __( 'Already Installed' ) . '</h1><p>' . __( 'You appear to have already installed WordPress. To reinstall please clear your old database tables first.' ) . '</p><p class="step"><a href="../wp-login.php" class="button">' . __('Log In') . '</a></p></body></html>' );}$php_version    = phpversion();$mysql_version  = $wpdb->db_version();$php_compat     = version_compare( $php_version, $required_php_version, '>=' );$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );if ( !$mysql_compat && !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version );elseif ( !$php_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version );elseif ( !$mysql_compat )	$compat = sprintf( __('You cannot install because <a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version );if ( !$mysql_compat || !$php_compat ) {	display_header();	die('<h1>' . __('Insufficient Requirements') . '</h1><p>' . $compat . '</p></body></html>');}switch($step) {	case 0: // Step 1	case 1: // Step 1, direct link.	  display_header();?><h1><?php _e( 'Welcome' ); ?></h1><p><?php printf( __( 'Welcome to the famous five minute WordPress installation process! You may want to browse the <a href="%s">ReadMe documentation</a> at your leisure. Otherwise, just fill in the information below and you&#8217;ll be on your way to using the most extendable and powerful personal publishing platform in the world.' ), '../readme.html' ); ?></p><h1><?php _e( 'Information needed' ); ?></h1><p><?php _e( 'Please provide the following information. Don&#8217;t worry, you can always change these settings later.' ); ?></p><?php		display_setup_form();		break;	case 2:		if ( ! empty( $wpdb->error ) )			wp_die( $wpdb->error->get_error_message() );		display_header();		// Fill in the data we gathered		$weblog_title = isset( $_POST['weblog_title'] ) ? trim( stripslashes( $_POST['weblog_title'] ) ) : '';		$user_name = isset($_POST['user_name']) ? trim( stripslashes( $_POST['user_name'] ) ) : 'admin';		$admin_password = isset($_POST['admin_password']) ? $_POST['admin_password'] : '';		$admin_password_check = isset($_POST['admin_password2']) ? $_POST['admin_password2'] : '';		$admin_email  = isset( $_POST['admin_email']  ) ?trim( stripslashes( $_POST['admin_email'] ) ) : '';		$public       = isset( $_POST['blog_public']  ) ? (int) $_POST['blog_public'] : 0;		// check e-mail address		$error = false;		if ( empty( $user_name ) ) {			// TODO: poka-yoke			display_setup_form( __('you must provide a valid username.') );			$error = true;		} elseif ( $user_name != sanitize_user( $user_name, true ) ) {			display_setup_form( __('the username you provided has invalid characters.') );			$error = true;		} elseif ( $admin_password != $admin_password_check ) {			// TODO: poka-yoke			display_setup_form( __( 'your passwords do not match. Please try again' ) );			$error = true;		} else if ( empty( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'you must provide an e-mail address.' ) );			$error = true;		} elseif ( ! is_email( $admin_email ) ) {			// TODO: poka-yoke			display_setup_form( __( 'that isn&#8217;t a valid e-mail address.  E-mail addresses look like: <code>username@example.com</code>' ) );			$error = true;		}		if ( $error === false ) {			$wpdb->show_errors();			$result = wp_install($weblog_title, $user_name, $admin_email, $public, '', $admin_password);			extract( $result, EXTR_SKIP );?><h1><?php _e( 'Success!' ); ?></h1><p><?php _e( 'WordPress has been installed. Were you expecting more steps? Sorry to disappoint.' ); ?></p><table class="form-table">	<tr>		<th><?php _e( 'Username' ); ?></th>		<td><code><?php echo esc_html( sanitize_user( $user_name, true ) ); ?></code></td>	</tr>	<tr>		<th><?php _e( 'Password' ); ?></th>		<td><?php		if ( ! empty( $password ) && empty($admin_password_check) )			echo '<code>'. esc_html($password) .'</code><br />';		echo "<p>$password_message</p>"; ?>		</td>	</tr></table><p class="step"><a href="../wp-login.php" class="button"><?php _e( 'Log In' ); ?></a></p><?php		}		break;}?><script type="text/javascript">var t = document.getElementById('weblog_title'); if (t){ t.focus(); }</script><script type="text/javascript" src="../wp-includes/js/jquery/jquery.js"></script><script type="text/javascript" src="js/password-strength-meter.js"></script><script type="text/javascript" src="js/user-profile.js"></script><script type="text/javascript" src="js/utils.js"></script><script type='text/javascript'>/* <![CDATA[ */var pwsL10n = { empty: "<?php echo esc_js( __( 'Strength indicator' ) ); ?>", short: "<?php echo esc_js( __( 'Very weak' ) ); ?>", bad: "<?php echo esc_js( __( 'Weak' ) ); ?>", good: "<?php echo esc_js( __( 'Medium' ) ); ?>", strong: "<?php echo esc_js( __( 'Strong' ) ); ?>", mismatch: "<?php echo esc_js( __( 'Mismatch' ) ); ?>"};try{convertEntities(pwsL10n);}catch(e){};/* ]]> */</script></body></html>
<?php/** * Outputs the OPML XML format for getting the links defined in the link * administration. This can be used to export links from one blog over to * another. Links aren't exported by the WordPress export, so this file handles * that. * * This file is not added by default to WordPress theme pages when outputting * feed links. It will have to be added manually for browsers and users to pick * up that this file exists. * * @package WordPress */if ( empty($wp) ) {	require_once('./wp-load.php');	wp();}header('Content-Type: text/xml; charset=' . get_option('blog_charset'), true);$link_cat = '';if ( !empty($_GET['link_cat']) ) {	$link_cat = $_GET['link_cat'];	if ( !in_array($link_cat, array('all', '0')) )		$link_cat = absint( (string)urldecode($link_cat) );}echo '<?xml version="1.0"?'.">\n";?><opml version="1.0">	<head>		<title><?php printf( __('Links for %s'), esc_attr(get_bloginfo('name', 'display')) ); ?></title>		<dateCreated><?php echo gmdate("D, d M Y H:i:s"); ?> GMT</dateCreated>		<?php do_action('opml_head'); ?>	</head>	<body><?phpif ( empty($link_cat) )	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0));else	$cats = get_categories(array('type' => 'link', 'hierarchical' => 0, 'include' => $link_cat));foreach ( (array)$cats as $cat ) :	$catname = apply_filters('link_category', $cat->name);?><outline type="category" title="<?php echo esc_attr($catname); ?>"><?php	$bookmarks = get_bookmarks(array("category" => $cat->term_id));	foreach ( (array)$bookmarks as $bookmark ) :		$title = apply_filters('link_title', $bookmark->link_name);?>	<outline text="<?php echo esc_attr($title); ?>" type="link" xmlUrl="<?php echo esc_attr($bookmark->link_rss); ?>" htmlUrl="<?php echo esc_attr($bookmark->link_url); ?>" updated="<?php if ('0000-00-00 00:00:00' != $bookmark->link_updated) echo $bookmark->link_updated; ?>" /><?php	endforeach; // $bookmarks?></outline><?phpendforeach; // $cats?></body></opml>
<?php/** * Quick way to create a WordPress Post. * * @package WordPress * @subpackage Administration *//** * @var string * @name $mode */$mode = 'sidebar';/** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can('edit_posts') )	wp_die(__('Cheatin&#8217; uh?'));$post = get_default_post_to_edit();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></title><style type="text/css" media="screen">body {	font-size: 0.9em;	margin: 0;	padding: 0;}form {	padding: 1%;}.tags-wrap p {	font-size: 0.75em;	margin-top: 0.4em;}.button-highlighted, #wphead, label {	font-weight: bold;}#post-title, #tags-input, #content {	width: 99%;	padding: 2px;}#wphead {	font-size: 1.4em;	background-color: #E4F2FD;	color: #555555;	padding: 0.2em 1%;}#wphead p {	margin: 3px;}.button {	font-family: "Lucida Grande", "Lucida Sans Unicode", Tahoma, Verdana, sans-serif;	padding: 3px 5px;	margin-right: 5px;	font-size: 0.75em;	line-height: 1.5em;	border: 1px solid #80b5d0;	-moz-border-radius: 3px;	-khtml-border-radius: 3px;	-webkit-border-radius: 3px;	border-radius: 3px;	cursor: pointer;	background-color: #e5e5e5;	color: #246;}.button:hover {	border-color: #535353;}.updated {	background-color: #FFFBCC;	border: 1px solid #E6DB55;	margin-bottom: 1em;	padding: 0 0.6em;}.updated p {	margin: 0.6em;}</style></head><body id="sidebar"><div id="wphead"><p><?php bloginfo('name') ?> &rsaquo; <?php _e('Sidebar'); ?></p></div><form name="post" action="post.php" method="post"><div><input type="hidden" name="action" value="post" /><input type="hidden" name="user_ID" value="<?php echo esc_attr($user_ID) ?>" /><input type="hidden" name="mode" value="sidebar" /><input type="hidden" name="ping_status" value="<?php echo esc_attr($post->ping_status); ?>" /><input type="hidden" name="comment_status" value="<?php echo esc_attr($post->comment_status); ?>" /><?php wp_nonce_field('add-post');if ( 'b' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post published.') . '</p></div>';elseif ( 'c' == $_GET['a'] )	echo '<div class="updated"><p>' . __('Post saved.') . '</p></div>';?><p><label for="post-title"><?php _e('Title:'); ?></label><input type="text" name="post_title" id="post-title" size="20" tabindex="1" autocomplete="off" value="" /></p><p><label for="content"><?php _e('Post:'); ?></label><textarea rows="8" cols="12" name="content" id="content" style="height:10em;line-height:1.4em;" tabindex="2"></textarea></p><div class="tags-wrap"><label for="tags-input"><?php _e('Tags:') ?></label><input type="text" name="tags_input" id="tags-input" tabindex="3" value="" /><p><?php _e('Separate tags with commas'); ?></p></div><p><input name="saveasdraft" type="submit" id="saveasdraft" tabindex="9" accesskey="s" class="button" value="<?php esc_attr_e('Save as Draft'); ?>" /><?php if ( current_user_can('publish_posts') ) : ?><input name="publish" type="submit" id="publish" tabindex="6" accesskey="p" value="<?php esc_attr_e('Publish') ?>" class="button button-highlighted" /><?php endif; ?></p></div></form></body></html>
<?php/** * Widgets administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );/** WordPress Administration Widgets API */require_once(ABSPATH . 'wp-admin/includes/widgets.php');if ( ! current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ));wp_admin_css( 'widgets' );$widgets_access = get_user_setting( 'widgets_access' );if ( isset($_GET['widgets-access']) ) {	$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';	set_user_setting( 'widgets_access', $widgets_access );}if ( 'on' == $widgets_access )	add_filter( 'admin_body_class', create_function('', '{return " widgets_access ";}') );else	wp_enqueue_script('admin-widgets');do_action( 'sidebar_admin_setup' );$title = __( 'Widgets' );$parent_file = 'themes.php';$help = '	<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>	<p>' . __('Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>	<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>	<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>	<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>	<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Appearance_Widgets_SubPanel" target="_blank">Widgets Documentation</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);// register the inactive_widgets area as sidebarregister_sidebar(array(	'name' => __('Inactive Widgets'),	'id' => 'wp_inactive_widgets',	'description' => '',	'before_widget' => '',	'after_widget' => '',	'before_title' => '',	'after_title' => '',));// These are the widgets grouped by sidebar$sidebars_widgets = wp_get_sidebars_widgets();if ( empty( $sidebars_widgets ) )	$sidebars_widgets = wp_get_widget_defaults();// look for "lost" widgets, this has to run at least on each theme changefunction retrieve_widgets() {	global $wp_registered_widget_updates, $wp_registered_sidebars, $sidebars_widgets, $wp_registered_widgets;	$_sidebars_widgets = array();	$sidebars = array_keys($wp_registered_sidebars);	unset( $sidebars_widgets['array_version'] );	$old = array_keys($sidebars_widgets);	sort($old);	sort($sidebars);	if ( $old == $sidebars )		return;	// Move the known-good ones first	foreach ( $sidebars as $id ) {		if ( array_key_exists( $id, $sidebars_widgets ) ) {			$_sidebars_widgets[$id] = $sidebars_widgets[$id];			unset($sidebars_widgets[$id], $sidebars[$id]);		}	}	// if new theme has less sidebars than the old theme	if ( !empty($sidebars_widgets) ) {		foreach ( $sidebars_widgets as $lost => $val ) {			if ( is_array($val) )				$_sidebars_widgets['wp_inactive_widgets'] = array_merge( (array) $_sidebars_widgets['wp_inactive_widgets'], $val );		}	}	// discard invalid, theme-specific widgets from sidebars	$shown_widgets = array();	foreach ( $_sidebars_widgets as $sidebar => $widgets ) {		if ( !is_array($widgets) )			continue;		$_widgets = array();		foreach ( $widgets as $widget ) {			if ( isset($wp_registered_widgets[$widget]) )				$_widgets[] = $widget;		}		$_sidebars_widgets[$sidebar] = $_widgets;		$shown_widgets = array_merge($shown_widgets, $_widgets);	}	$sidebars_widgets = $_sidebars_widgets;	unset($_sidebars_widgets, $_widgets);	// find hidden/lost multi-widget instances	$lost_widgets = array();	foreach ( $wp_registered_widgets as $key => $val ) {		if ( in_array($key, $shown_widgets, true) )			continue;		$number = preg_replace('/.+?-([0-9]+)$/', '$1', $key);		if ( 2 > (int) $number )			continue;		$lost_widgets[] = $key;	}	$sidebars_widgets['wp_inactive_widgets'] = array_merge($lost_widgets, (array) $sidebars_widgets['wp_inactive_widgets']);	wp_set_sidebars_widgets($sidebars_widgets);}retrieve_widgets();if ( count($wp_registered_sidebars) == 1 ) {	// If only "wp_inactive_widgets" is defined the theme has no sidebars, die.	require_once( './admin-header.php' );?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>		<div class="error">			<p><?php _e( 'No Sidebars Defined' ); ?></p>		</div>		<p><?php _e( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href="http://codex.wordpress.org/Widgetizing_Themes">follow these instructions</a>.' ); ?></p>	</div><?php	require_once( './admin-footer.php' );	exit;}// We're saving a widget without jsif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {	$widget_id = $_POST['widget-id'];	check_admin_referer("save-delete-widget-$widget_id");	$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';	if ( $number ) {		foreach ( $_POST as $key => $val ) {			if ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {				$_POST[$key] = array( $number => array_shift($val) );				break;			}		}	}	$sidebar_id = $_POST['sidebar'];	$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;	$id_base = $_POST['id_base'];	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();	// delete	if ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {		if ( !in_array($widget_id, $sidebar, true) ) {			wp_redirect('widgets.php?error=0');			exit;		}		$sidebar = array_diff( $sidebar, array($widget_id) );		$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');	}	$_POST['widget-id'] = $sidebar;	foreach ( (array) $wp_registered_widget_updates as $name => $control ) {		if ( $name != $id_base || !is_callable($control['callback']) )			continue;		ob_start();			call_user_func_array( $control['callback'], $control['params'] );		ob_end_clean();		break;	}	$sidebars_widgets[$sidebar_id] = $sidebar;	// remove old position	if ( !isset($_POST['delete_widget']) ) {		foreach ( $sidebars_widgets as $key => $sb ) {			if ( is_array($sb) )				$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );		}		array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );	}	wp_set_sidebars_widgets($sidebars_widgets);	wp_redirect('widgets.php?message=0');	exit;}// Output the widget form without jsif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {	$widget_id = $_GET['editwidget'];	if ( isset($_GET['addnew']) ) {		// Default to the first sidebar		$sidebar = array_shift( $keys = array_keys($wp_registered_sidebars) );		if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget			// Copy minimal info from an existing instance of this widget to a new instance			foreach ( $wp_registered_widget_controls as $control ) {				if ( $_GET['base'] === $control['id_base'] ) {					$control_callback = $control['callback'];					$multi_number = (int) $_GET['num'];					$control['params'][0]['number'] = -1;					$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;					$wp_registered_widget_controls[$control['id']] = $control;					break;				}			}		}	}	if ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {		$control = $wp_registered_widget_controls[$widget_id];		$control_callback = $control['callback'];	} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {		$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );	}	if ( !isset($name) )		$name = esc_html( strip_tags($control['name']) );	if ( !isset($sidebar) )		$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';	if ( !isset($multi_number) )		$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';	$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];	// show the widget form	$width = ' style="width:' . max($control['width'], 350) . 'px"';	$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;	require_once( './admin-header.php' ); ?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php echo esc_html( $title ); ?></h2>	<div class="editwidget"<?php echo $width; ?>>	<h3><?php printf( __( 'Widget %s' ), $name ); ?></h3>	<form action="widgets.php" method="post">	<div class="widget-inside"><?php	if ( is_callable( $control_callback ) )		call_user_func_array( $control_callback, $control['params'] );	else		echo '<p>' . __('There are no options for this widget.') . "</p>\n"; ?>	</div>	<p class="describe"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>	<div class="widget-position">	<table class="widefat"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody><?php	foreach ( $wp_registered_sidebars as $sbname => $sbvalue ) {		echo "\t\t<tr><td><label><input type='radio' name='sidebar' value='" . esc_attr($sbname) . "'" . checked( $sbname, $sidebar, false ) . " /> $sbvalue[name]</label></td><td>";		if ( 'wp_inactive_widgets' == $sbname ) {			echo '&nbsp;';		} else {			if ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {				$j = 1;				$sidebars_widgets[$sbname] = array();			} else {				$j = count($sidebars_widgets[$sbname]);				if ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )					$j++;			}			$selected = '';			echo "\t\t<select name='{$sbname}_position'>\n";			echo "\t\t<option value=''>" . __('&mdash; Select &mdash;') . "</option>\n";			for ( $i = 1; $i <= $j; $i++ ) {				if ( in_array($widget_id, $sidebars_widgets[$sbname], true) )					$selected = selected( $i, $key + 1, false );				echo "\t\t<option value='$i'$selected> $i </option>\n";			}			echo "\t\t</select>\n";		}		echo "</td></tr>\n";	} ?>	</tbody></table>	</div>	<div class="widget-control-actions"><?php	if ( isset($_GET['addnew']) ) { ?>	<a href="widgets.php" class="button alignleft"><?php _e('Cancel'); ?></a><?php	} else { ?>	<input type="submit" name="removewidget" class="button alignleft" value="<?php esc_attr_e('Delete'); ?>" /><?php	} ?>	<input type="submit" name="savewidget" class="button-primary alignright" value="<?php esc_attr_e('Save Widget'); ?>" />	<input type="hidden" name="widget-id" class="widget-id" value="<?php echo esc_attr($widget_id); ?>" />	<input type="hidden" name="id_base" class="id_base" value="<?php echo esc_attr($id_base); ?>" />	<input type="hidden" name="multi_number" class="multi_number" value="<?php echo esc_attr($multi_number); ?>" /><?php	wp_nonce_field("save-delete-widget-$widget_id"); ?>	<br class="clear" />	</div>	</form>	</div>	</div><?php	require_once( './admin-footer.php' );	exit;}$messages = array(	__('Changes saved.'));$errors = array(	__('Error while saving.'),	__('Error in displaying the widget settings form.'));require_once( './admin-header.php' ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?><div id="message" class="updated"><p><?php echo $messages[$_GET['message']]; ?></p></div><?php } ?><?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?><div id="message" class="error"><p><?php echo $errors[$_GET['error']]; ?></p></div><?php } ?><?php do_action( 'widgets_admin_page' ); ?><div class="widget-liquid-left"><div id="widgets-left">	<div id="available-widgets" class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Available Widgets'); ?> <span id="removing-widget"><?php _e('Deactivate'); ?> <span></span></span></h3></div>		<div class="widget-holder">		<p class="description"><?php _e('Drag widgets from here to a sidebar on the right to activate them. Drag widgets back here to deactivate them and delete their settings.'); ?></p>		<div id="widget-list">		<?php wp_list_widgets(); ?>		</div>		<br class='clear' />		</div>		<br class="clear" />	</div>	<div class="widgets-holder-wrap">		<div class="sidebar-name">		<div class="sidebar-name-arrow"><br /></div>		<h3><?php _e('Inactive Widgets'); ?>		<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>		<div class="widget-holder inactive">		<p class="description"><?php _e('Drag widgets here to remove them from the sidebar but keep their settings.'); ?></p>		<?php wp_list_widget_controls('wp_inactive_widgets'); ?>		<br class="clear" />		</div>	</div></div></div><div class="widget-liquid-right"><div id="widgets-right"><?php$i = 0;foreach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {	if ( 'wp_inactive_widgets' == $sidebar )		continue;	$closed = $i ? ' closed' : ''; ?>	<div class="widgets-holder-wrap<?php echo $closed; ?>">	<div class="sidebar-name">	<div class="sidebar-name-arrow"><br /></div>	<h3><?php echo esc_html( $registered_sidebar['name'] ); ?>	<span><img src="<?php echo esc_url( admin_url( 'images/wpspin_dark.gif' ) ); ?>" class="ajax-feedback" title="" alt="" /></span></h3></div>	<?php wp_list_widget_controls( $sidebar ); // Show the control forms for each of the widgets in this sidebar ?>	</div><?php	$i++;} ?></div></div><form action="" method="post"><?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?></form><br class="clear" /></div><?phpdo_action( 'sidebar_admin_page' );require_once( './admin-footer.php' );
<?php// Silence is golden.?>
<?php/** * Multisite users administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_users' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Users' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This table shows all users across the network and the sites to which they are assigned.') . '</p>' .	'<p>' . __('Hover over any user on the list to make the edit links appear. The Edit link on the left will take you to his or her Edit User profile page; the Edit link on the right by any site name goes to an Edit Site screen for that site.') . '</p>' .	'<p>' . __('You can also go to the user&#8217;s profile page by clicking on the individual username.') . '</p>' .	'<p>' . __('You can sort the table by clicking on any of the bold headings and switch between list and excerpt views by using the icons in the upper right.') . '</p>' .	'<p>' . __('The bulk action will permanently delete selected users, or mark/unmark those selected as spam. Spam users will have posts removed and will be unable to sign up again with the same email addresses.') . '</p>' .	'<p>' . __('Add User will add that person to this table and send them an email.') . '</p>' .	'<p>' . __('Users who are signed up to the network without a site are added as subscribers to the main or primary dashboard site, giving them profile pages to manage their accounts. These users will only see Dashboard and My Sites in the main navigation until a site is created for them.') . '</p>' .	'<p>' . __('You can make an existing user an additional super admin by going to the Edit User profile page and checking the box to grant that privilege.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Users_SubPanel" target="_blank">Network Users Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'delete':				_e( 'User deleted.' );			break;			case 'all_spam':				_e( 'Users marked as spam.' );			break;			case 'all_notspam':				_e( 'Users removed from spam.' );			break;			case 'all_delete':				_e( 'Users deleted.' );			break;			case 'add':				_e( 'User added.' );			break;		}		?>	</p></div>	<?php}	$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;	if ( empty( $pagenum ) )		$pagenum = 1;	$per_page = (int) get_user_option( 'ms_users_per_page' );	if ( empty( $per_page ) || $per_page < 1 )		$per_page = 15;	$per_page = apply_filters( 'ms_users_per_page', $per_page );	$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';	$like_s = esc_sql( like_escape( $s ) );	$query = "SELECT * FROM {$wpdb->users}";	if ( !empty( $like_s ) ) {		$query .= " WHERE user_login LIKE '%$like_s%' OR user_email LIKE '%$like_s%'";	}	$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';	if ( $order_by == 'email' ) {		$query .= ' ORDER BY user_email ';	} elseif ( $order_by == 'login' ) {		$query .= ' ORDER BY user_login ';	} elseif ( $order_by == 'name' ) {		$query .= ' ORDER BY display_name ';	} elseif ( $order_by == 'registered' ) {		$query .= ' ORDER BY user_registered ';	} else {		$order_by = 'id';		$query .= ' ORDER BY ID ';	}	$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? 'DESC' : 'ASC';	$query .= $order;	$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(ID)', $query ) );	$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page) . ", " . intval( $per_page );	$user_list = $wpdb->get_results( $query, ARRAY_A );	$num_pages = ceil( $total / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg( 'paged', '%#%' ),		'format' => '',		'prev_text' => __( '&laquo;' ),		'next_text' => __( '&raquo;' ),		'total' => $num_pages,		'current' => $pagenum	));	if ( empty( $_GET['mode'] ) )		$mode = 'list';	else		$mode = esc_attr( $_GET['mode'] );	?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e( 'Users' ); ?>	<a href="#form-add-user" class="button add-new-h2"><?php echo esc_html_x( 'Add New' , 'users'); ?></a>	<?php	if ( isset( $_GET['s'] ) && $_GET['s'] )	printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );	?>	</h2>	<form action="ms-users.php" method="get" class="search-form">		<p class="search-box">		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" class="search-input" id="user-search-input" />		<input type="submit" id="post-query-submit" value="<?php esc_attr_e( 'Search Users' ) ?>" class="button" />		</p>	</form>	<form id="form-user-list" action='ms-edit.php?action=allusers' method='post'>		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">			<div class="alignleft actions">				<select name="action">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />				<?php wp_nonce_field( 'bulk-ms-users', '_wpnonce_bulk-ms-users' ); ?>			</div>			<?php if ( $page_links ) { ?>			<div class="tablenav-pages">			<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',			number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),			number_format_i18n( min( $pagenum * $per_page, $total ) ),			number_format_i18n( $total ),			$page_links			); echo $page_links_text; ?>			</div>			<?php } ?>			<div class="view-switch">				<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>				<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>			</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$users_columns = array(			'id'           => __( 'ID' ),			'login'      => __( 'Username' ),			'name'       => __( 'Name' ),			'email'      => __( 'E-mail' ),			'registered' => _x( 'Registered', 'user' ),			'blogs'      => __( 'Sites' )		);		$users_columns = apply_filters( 'wpmu_users_columns', $users_columns );		?>		<table class="widefat">			<thead>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($users_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array( 'action', 'updated' ), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( $column_id == 'blogs' ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url; ?>			</tr>			</thead>			<tfoot>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php echo $col_url; ?>			</tr>			</tfoot>			<tbody id="the-user-list" class="list:user">			<?php if ( $user_list ) {				$class = '';				$super_admins = get_super_admins();				foreach ( (array) $user_list as $user ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );					foreach ( $status_list as $status => $col ) {						if ( $user[$status] )							$class = $col;					}					?>					<tr class="<?php echo $class; ?>">					<?php					foreach( (array) $users_columns as $column_name=>$column_display_name ) :						switch( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $user['ID'] ?>" name="allusers[]" value="<?php echo esc_attr( $user['ID'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $user['ID'] ?>								</th>							<?php							break;							case 'login':								$avatar	= get_avatar( $user['user_email'], 32 );								$edit_link = ( $current_user->ID == $user['ID'] ) ? 'profile.php' : 'user-edit.php?user_id=' . $user['ID'];								?>								<td class="username column-username">									<?php echo $avatar; ?><strong><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>" class="edit"><?php echo stripslashes( $user['user_login'] ); ?></a><?php									if ( in_array( $user['user_login'], $super_admins ) )										echo ' - ' . __( 'Super admin' );									?></strong>									<br/>									<div class="row-actions">										<span class="edit"><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>"><?php _e( 'Edit' ); ?></a></span>										<?php if ( ! in_array( $user['user_login'], $super_admins ) ) { ?>										| <span class="delete"><a href="<?php echo $delete	= esc_url( admin_url( add_query_arg( '_wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'ms-edit.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user['ID'] ) ) ); ?>" class="delete"><?php _e( 'Delete' ); ?></a></span>										<?php } ?>									</div>								</td>							<?php							break;							case 'name': ?>								<td class="name column-name"><?php echo $user['display_name'] ?></td>							<?php							break;							case 'email': ?>								<td class="email column-email"><a href="mailto:<?php echo $user['user_email'] ?>"><?php echo $user['user_email'] ?></a></td>							<?php							break;							case 'registered':								if ( 'list' == $mode )									$date = 'Y/m/d';								else									$date = 'Y/m/d \<\b\r \/\> g:i:s a';							?>								<td><?php echo mysql2date( __( $date ), $user['user_registered'] ); ?></td>							<?php							break;							case 'blogs':								$blogs = get_blogs_of_user( $user['ID'], true );								?>								<td>									<?php									if ( is_array( $blogs ) ) {										foreach ( (array) $blogs as $key => $val ) {											$path	= ( $val->path == '/' ) ? '' : $val->path;											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . str_replace( '.' . $current_site->domain, '', $val->domain . $path ) . '</a>';											echo ' <small class="row-actions">';											// Edit											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . __( 'Edit' ) . '</a> | ';											// View											echo '<a ';											if ( get_blog_status( $val->userblog_id, 'spam' ) == 1 )												echo 'style="background-color: #faa" ';											echo 'href="' .  esc_url( get_home_url( $val->userblog_id ) )  . '">' . __( 'View' ) . '</a>';											echo '</small><br />';										}									}									?>								</td>							<?php							break;							default: ?>								<td><?php do_action( 'manage_users_custom_column', $column_name, $user['ID'] ); ?></td>							<?php							break;						}					endforeach					?>					</tr>					<?php				}			} else {			?>				<tr>					<td colspan="<?php echo (int) count($users_columns); ?>"><?php _e( 'No users found.' ) ?></td>				</tr>				<?php			} // end if ($users)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">				<select name="action2">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div><?phpif ( apply_filters( 'show_adduser_fields', true ) ) :?><div class="wrap" id="form-add-user">	<h3><?php _e( 'Add User' ) ?></h3>	<form action="ms-edit.php?action=adduser" method="post">	<table class="form-table">		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Username' ) ?></th>			<td><input type="text" class="regular-text" name="user[username]" /></td>		</tr>		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Email' ) ?></th>			<td><input type="text" class="regular-text" name="user[email]" /></td>		</tr>		<tr class="form-field">			<td colspan="2"><?php _e( 'Username and password will be mailed to the above email address.' ) ?></td>		</tr>	</table>	<p class="submit">		<?php wp_nonce_field( 'add-user', '_wpnonce_add-user' ) ?>		<input class="button" type="submit" value="<?php esc_attr_e( 'Add user' ) ?>" /></p>	</form></div><?php endif; ?><?php include( './admin-footer.php' ); ?>
<?php/** * Administration Functions * * This file is deprecated, use 'wp-admin/includes/admin.php' instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/admin.php' );/** WordPress Administration API: Includes all Administration functions. */require_once(ABSPATH . 'wp-admin/includes/admin.php');?>
<?php/** * Multisite network settings administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_options' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Network Options' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This screen sets and changes options for the network as a whole. The first site is the main site in the network and network options are pulled from that original site&#8217;s options.') . '</p>' .	'<p>' . __('Operational settings has fields for the network&#8217;s name and admin email.') . '</p>' .	'<p>' . __('Dashboard Site is an option to give a site to users who do not have a site on the system. Their default role is Subscriber, but that default can be changed. The Admin Notice Feed can provide a notice on all dashboards of the latest post via RSS or Atom, or provide no such notice if left blank.') . '</p>' .	'<p>' . __('Registration settings can disable/enable public signups. If you let others sign up for a site, install spam plugins. Spaces, not commas, should separate names banned as sites for this network.') . '</p>' .	'<p>' . __('New site settings are defaults applied when a new site is created in the network. These include welcome email for when a new site or user account is registered, and what&#8127;s put in the first post, page, comment, comment author, and comment URL.') . '</p>' .	'<p>' . __('Upload settings control the size of the uploaded files and the amount of available upload space for each site. You can change the default value for specific sites when you edit a particular site. Allowed file types are also listed (space separated only).') . '</p>' .	'<p>' . __('Checkboxes for media upload buttons set which are shown in the visual editor. If unchecked, a generic upload button is still visible; other media types can still be uploaded if on the allowed file types list.') . '</p>' .	'<p>' . __('Menu setting enables/disables the plugin menus from appearing for non super admins, so that only super admins, not site admins, have access to activate plugins.') . '</p>' .	'<p>' . __('Super admins can no longer be added on the Options screen. You must now go to the list of existing users on Super Admin > Users and click on Username or the Edit action link below that name. This goes to an Edit User page where you can check a box to grant super admin privileges.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Options_SubPanel" target="_blank">Network Options Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );if (isset($_GET['updated'])) {	?>	<div id="message" class="updated"><p><?php _e( 'Options saved.' ) ?></p></div>	<?php}?><div class="wrap">	<?php screen_icon(); ?>	<h2><?php _e( 'Network Options' ) ?></h2>	<form method="post" action="ms-edit.php?action=siteoptions">		<?php wp_nonce_field( 'siteoptions' ); ?>		<h3><?php _e( 'Operational Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="site_name"><?php _e( 'Network Name' ) ?></label></th>				<td>					<input name="site_name" type="text" id="site_name" class="regular-text" value="<?php echo esc_attr( $current_site->site_name ) ?>" />					<br />					<?php _e( 'What you would like to call this website.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_email"><?php _e( 'Network Admin Email' ) ?></label></th>				<td>					<input name="admin_email" type="text" id="admin_email" class="regular-text" value="<?php echo esc_attr( get_site_option('admin_email') ) ?>" />					<br />					<?php printf( __( 'Registration and support emails will come from this address. An address such as <code>support@%s</code> is recommended.' ), $current_site->domain ); ?>				</td>			</tr>		</table>		<h3><?php _e( 'Dashboard Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="dashboard_blog"><?php _e( 'Dashboard Site' ) ?></label></th>				<td>					<?php					if ( $dashboard_blog = get_site_option( 'dashboard_blog' ) ) {						$details = get_blog_details( $dashboard_blog );						$blogname = untrailingslashit( sanitize_user( str_replace( '.', '', str_replace( $current_site->domain . $current_site->path, '', $details->domain . $details->path ) ) ) );					} else {						$blogname = '';					}?>					<input name="dashboard_blog_orig" type="hidden" id="dashboard_blog_orig" value="<?php echo esc_attr( $blogname ); ?>" />					<input name="dashboard_blog" type="text" id="dashboard_blog" value="<?php echo esc_attr( $blogname ); ?>" class="regular-text" />					<br />					<?php _e( 'Site path (&#8220;dashboard&#8221;, &#8220;control&#8221;, &#8220;manager&#8221;, etc.) or blog ID.<br />New users are added to this site as the user role defined below if they don&#8217;t have a site. Leave blank for the main site. Users with the Subscriber role on the old site will be moved to the new site if changed. The new site will be created if it does not exist.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="default_user_role"><?php _e( 'Dashboard User Default Role' ) ?></label></th>				<td>					<select name="default_user_role" id="default_user_role"><?php					wp_dropdown_roles( get_site_option( 'default_user_role', 'subscriber' ) );					?>					</select>					<br />					<?php _e( 'The default role for new users on the Dashboard site. &#8220;Subscriber&#8221; or &#8220;Contributor&#8221; roles are recommended.' ); ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="admin_notice_feed"><?php _e( 'Admin Notice Feed' ) ?></label></th>				<td><input name="admin_notice_feed" class="large-text" type="text" id="admin_notice_feed" value="<?php echo esc_attr( get_site_option( 'admin_notice_feed' ) ) ?>" size="80" /><br />				<?php _e( 'Display the latest post from this RSS or Atom feed on all site dashboards. Leave blank to disable.' ); ?><br />				<?php if ( get_site_option( 'admin_notice_feed' ) != get_home_url( $current_site->id, 'feed/' ) )					echo __( 'A good one to use would be the feed from your main site: ' ) . esc_url( get_home_url( $current_site->id, 'feed/' ) ) ?></td>			</tr>		</table>		<h3><?php _e( 'Registration Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Allow new registrations' ) ?></th>				<?php				if ( !get_site_option( 'registration' ) )					update_site_option( 'registration', 'none' );				$reg = get_site_option( 'registration' );				?>				<td>					<label><input name="registration" type="radio" id="registration1" value="none"<?php checked( $reg, 'none') ?> /> <?php _e( 'Registration is disabled.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration2" value="user"<?php checked( $reg, 'user') ?> /> <?php _e( 'User accounts may be registered.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration3" value="blog"<?php checked( $reg, 'blog') ?> /> <?php _e( 'Logged in users may register new sites.' ); ?></label><br />					<label><input name="registration" type="radio" id="registration4" value="all"<?php checked( $reg, 'all') ?> /> <?php _e( 'Both sites and user accounts can be registered.' ); ?></label><br />					<p><?php _e( 'Disable or enable registration and who or what can be registered. (Default is disabled.)' ); ?></p>					<?php if ( is_subdomain_install() ) {						echo '<p>' . __( 'If registration is disabled, please set <code>NOBLOGREDIRECT</code> in <code>wp-config.php</code> to a URL you will redirect visitors to if they visit a non-existent site.' ) . '</p>';					} ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Registration notification' ) ?></th>				<?php				if ( !get_site_option( 'registrationnotification' ) )					update_site_option( 'registrationnotification', 'yes' );				?>				<td>					<label><input name="registrationnotification" type="checkbox" id="registrationnotification" value="yes"<?php checked( get_site_option( 'registrationnotification' ), 'yes' ) ?> /> <?php _e( 'Send the network admin an email notification every time someone registers a site or user account.' ) ?></label>				</td>			</tr>			<tr valign="top" id="addnewusers">				<th scope="row"><?php _e( 'Add New Users' ) ?></th>				<td>					<label><input name="add_new_users" type="checkbox" id="add_new_users" value="1"<?php checked( get_site_option( 'add_new_users' ) ) ?> /> <?php _e( 'Allow site administrators to add new users to their site via the "Users->Add New" page.' ); ?></label>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="illegal_names"><?php _e( 'Banned Names' ) ?></label></th>				<td>					<input name="illegal_names" type="text" id="illegal_names" class="large-text" value="<?php echo esc_attr( implode( " ", get_site_option( 'illegal_names' ) ) ); ?>" size="45" />					<br />					<?php _e( 'Users are not allowed to register these sites. Separate names by spaces.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="limited_email_domains"><?php _e( 'Limited Email Registrations' ) ?></label></th>				<td>					<?php $limited_email_domains = get_site_option( 'limited_email_domains' );					$limited_email_domains = str_replace( ' ', "\n", $limited_email_domains ); ?>					<textarea name="limited_email_domains" id="limited_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( $limited_email_domains == '' ? '' : implode( "\n", (array) $limited_email_domains ) ); ?></textarea>					<br />					<?php _e( 'If you want to limit site registrations to certain domains. One domain per line.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="banned_email_domains"><?php _e('Banned Email Domains') ?></label></th>				<td>					<textarea name="banned_email_domains" id="banned_email_domains" cols="45" rows="5"><?php echo wp_htmledit_pre( get_site_option( 'banned_email_domains' ) == '' ? '' : implode( "\n", (array) get_site_option( 'banned_email_domains' ) ) ); ?></textarea>					<br />					<?php _e( 'If you want to ban domains from site registrations. One domain per line.' ) ?>				</td>			</tr>		</table>		<h3><?php _e('New Site Settings'); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><label for="welcome_email"><?php _e( 'Welcome Email' ) ?></label></th>				<td>					<textarea name="welcome_email" id="welcome_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new site owners.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="welcome_user_email"><?php _e( 'Welcome User Email' ) ?></label></th>				<td>					<textarea name="welcome_user_email" id="welcome_user_email" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'welcome_user_email' ) ) ) ?></textarea>					<br />					<?php _e( 'The welcome email sent to new users.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_post"><?php _e( 'First Post' ) ?></label></th>				<td>					<textarea name="first_post" id="first_post" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option( 'first_post' ) ) ) ?></textarea>					<br />					<?php _e( 'The first post on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_page"><?php _e( 'First Page' ) ?></label></th>				<td>					<textarea name="first_page" id="first_page" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_page') ) ) ?></textarea>					<br />					<?php _e( 'The first page on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment"><?php _e( 'First Comment' ) ?></label></th>				<td>					<textarea name="first_comment" id="first_comment" rows="5" cols="45" class="large-text"><?php echo wp_htmledit_pre( stripslashes( get_site_option('first_comment') ) ) ?></textarea>					<br />					<?php _e( 'The first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_author"><?php _e( 'First Comment Author' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_author" id="first_comment_author" value="<?php echo get_site_option('first_comment_author') ?>" />					<br />					<?php _e( 'The author of the first comment on a new site.' ) ?>				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="first_comment_url"><?php _e( 'First Comment URL' ) ?></label></th>				<td>					<input type="text" size="40" name="first_comment_url" id="first_comment_url" value="<?php echo esc_attr( get_site_option( 'first_comment_url' ) ) ?>" />					<br />					<?php _e( 'The URL for the first comment on a new site.' ) ?>				</td>			</tr>		</table>		<h3><?php _e( 'Upload Settings' ); ?></h3>		<table class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Media upload buttons' ) ?></th>				<?php $mu_media_buttons = get_site_option( 'mu_media_buttons', array() ); ?>				<td><label><input type="checkbox" id="mu_media_buttons_image" name="mu_media_buttons[image]" value="1"<?php checked( ! empty( $mu_media_buttons['image'] ) ) ?>/> <?php _e( 'Images' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_video" name="mu_media_buttons[video]" value="1"<?php checked( ! empty( $mu_media_buttons['video'] ) ) ?>/> <?php _e( 'Videos' ); ?></label><br />				<label><input type="checkbox" id="mu_media_buttons_audio" name="mu_media_buttons[audio]" value="1"<?php checked( ! empty( $mu_media_buttons['audio'] ) ) ?>/> <?php _e( 'Music' ); ?></label><br />				<?php _e( 'The media upload buttons to display on the &#8220;Write Post&#8221; page. Make sure you update the allowed upload file types below as well.' ); ?></td>			</tr>			<tr valign="top">				<th scope="row"><?php _e( 'Site upload space' ) ?></th>				<td>				<label><input type="checkbox" id="upload_space_check_disabled" name="upload_space_check_disabled" value="0"<?php checked( get_site_option( 'upload_space_check_disabled' ), 0 ) ?>/> <?php printf( __( 'Limit total size of files uploaded to %s MB' ), '</label><label><input name="blog_upload_space" type="text" id="blog_upload_space" value="' . esc_attr( get_site_option('blog_upload_space', 10) ) . '" size="3" />' ); ?></label><br />				</td>			</tr>			<tr valign="top">				<th scope="row"><label for="upload_filetypes"><?php _e( 'Upload file types' ) ?></label></th>				<td><input name="upload_filetypes" type="text" id="upload_filetypes" class="large-text" value="<?php echo esc_attr( get_site_option('upload_filetypes', 'jpg jpeg png gif') ) ?>" size="45" /></td>			</tr>			<tr valign="top">				<th scope="row"><label for="fileupload_maxk"><?php _e( 'Max upload file size' ) ?></label></th>				<td><?php printf( _x( '%s KB', 'File size in kilobytes' ), '<input name="fileupload_maxk" type="text" id="fileupload_maxk" value="' . esc_attr( get_site_option( 'fileupload_maxk', 300 ) ) . '" size="5" />' ); ?></td>			</tr>		</table><?php		$languages = get_available_languages();		if ( ! empty( $languages ) ) {			$lang = get_site_option( 'WPLANG' );?>		<h3><?php _e( 'Network Wide Settings' ); ?></h3>		<div class="updated inline"><p><strong><?php _e( 'Notice:' ); ?></strong> <?php _e( 'These settings may be overridden by site owners.' ); ?></p></div>		<table class="form-table">			<?php				?>				<tr valign="top">					<th><label for="WPLANG"><?php _e( 'Default Language' ) ?></label></th>					<td>						<select name="WPLANG" id="WPLANG">							<?php mu_dropdown_languages( $languages, get_site_option( 'WPLANG' ) ); ?>						</select>					</td>				</tr>		</table><?php		} // languages?>		<h3><?php _e( 'Menu Settings' ); ?></h3>		<table id="menu" class="form-table">			<tr valign="top">				<th scope="row"><?php _e( 'Enable administration menus' ); ?></th>				<td>			<?php			$menu_perms = get_site_option( 'menu_items' );			$menu_items = apply_filters( 'mu_menu_items', array( 'plugins' => __( 'Plugins' ) ) );			foreach ( (array) $menu_items as $key => $val ) {				echo "<label><input type='checkbox' name='menu_items[" . $key . "]' value='1'" .  ( isset( $menu_perms[$key] ) ? checked( $menu_perms[$key], '1', false ) : '' ) . " /> " . esc_html( $val ) . "</label><br/>";			}			?>				</td>			</tr>		</table>		<?php do_action( 'wpmu_options' ); // Add more options here ?>		<p class="submit"><input type="submit" class="button-primary" name="Submit" value="<?php esc_attr_e( 'Save Changes' ) ?>" /></p>	</form></div><?php include( './admin-footer.php' ); ?>
