<?php/** * Themes administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('switch_themes') && !current_user_can('edit_theme_options') )	wp_die( __( 'Cheatin&#8217; uh?' ) );if ( current_user_can('switch_themes') && isset($_GET['action']) ) {	if ( 'activate' == $_GET['action'] ) {		check_admin_referer('switch-theme_' . $_GET['template']);		switch_theme($_GET['template'], $_GET['stylesheet']);		wp_redirect('themes.php?activated=true');		exit;	} else if ( 'delete' == $_GET['action'] ) {		check_admin_referer('delete-theme_' . $_GET['template']);		if ( !current_user_can('delete_themes') )			wp_die( __( 'Cheatin&#8217; uh?' ) );		delete_theme($_GET['template']);		wp_redirect('themes.php?deleted=true');		exit;	}}$title = __('Manage Themes');$parent_file = 'themes.php';if ( current_user_can( 'switch_themes' ) ) :$help = '<p>' . __('Aside from the default theme included with your WordPress installation, themes are designed and developed by third parties.') . '</p>';$help .= '<p>' . __('You can see your active theme at the top of the screen. Below are the other themes you have installed that are not currently in use. You can see what your site would look like with one of these themes by clicking the Preview link. To change themes, click the Activate link.') . '</p>';if ( current_user_can('install_themes') )	$help .= '<p>' . sprintf(__('If you would like to see more themes to choose from, click on the &#8220;Install Themes&#8221; tab and you will be able to browse or search for additional themes from the <a href="%s" target="_blank">WordPress.org Theme Directory</a>. Themes in the WordPress.org Theme Directory are designed and developed by third parties, and are licensed under the GNU General Public License, version 2, just like WordPress. Oh, and they&#8217;re free!'), 'http://wordpress.org/extend/themes/') . '</p>';$help .= '<p><strong>' . __('For more information:') . '</strong></p>';$help .= '<p>' . __('<a href="http://codex.wordpress.org/Using_Themes" target="_blank">Documentation on Using Themes</a>') . '</p>';$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';add_contextual_help($current_screen, $help);add_thickbox();wp_enqueue_script( 'theme-preview' );endif;require_once('./admin-header.php');if ( is_multisite() && current_user_can('edit_themes') ) {	?><div id="message0" class="updated"><p><?php printf( __('Administrator: new themes must be activated in the <a href="%s">Network Themes</a> screen before they appear here.'), admin_url( 'ms-themes.php') ); ?></p></div><?php}?><?php if ( ! validate_current_theme() ) : ?><div id="message1" class="updated"><p><?php _e('The active theme is broken.  Reverting to the default theme.'); ?></p></div><?php elseif ( isset($_GET['activated']) ) :		if ( isset($wp_registered_sidebars) && count( (array) $wp_registered_sidebars ) && current_user_can('edit_theme_options') ) { ?><div id="message2" class="updated"><p><?php printf( __('New theme activated. This theme supports widgets, please visit the <a href="%s">widgets settings</a> screen to configure them.'), admin_url( 'widgets.php' ) ); ?></p></div><?php		} else { ?><div id="message2" class="updated"><p><?php printf( __( 'New theme activated. <a href="%s">Visit site</a>' ), home_url( '/' ) ); ?></p></div><?php		}	elseif ( isset($_GET['deleted']) ) : ?><div id="message3" class="updated"><p><?php _e('Theme deleted.') ?></p></div><?php endif; ?><?php$themes = get_allowed_themes();$ct = current_theme_info();unset($themes[$ct->name]);uksort( $themes, "strnatcasecmp" );$theme_total = count( $themes );$per_page = 15;if ( isset( $_GET['pagenum'] ) )	$page = absint( $_GET['pagenum'] );if ( empty($page) )	$page = 1;$start = $offset = ( $page - 1 ) * $per_page;$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ) . '#themenav',	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($theme_total / $per_page),	'current' => $page));$themes = array_slice( $themes, $start, $per_page );?><div class="wrap"><?php screen_icon(); ?><h2><a href="themes.php" class="nav-tab nav-tab-active"><?php echo esc_html( $title ); ?></a><?php if ( current_user_can('install_themes') ) { ?><a href="theme-install.php" class="nav-tab"><?php echo esc_html_x('Install Themes', 'theme'); ?></a><?php } ?></h2><h3><?php _e('Current Theme'); ?></h3><div id="current-theme"><?php if ( $ct->screenshot ) : ?><img src="<?php echo $ct->theme_root_uri . '/' . $ct->stylesheet . '/' . $ct->screenshot; ?>" alt="<?php _e('Current theme preview'); ?>" /><?php endif; ?><h4><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $ct->title, $ct->version, $ct->author) ; ?></h4><p class="theme-description"><?php echo $ct->description; ?></p><?php if ( current_user_can('edit_themes') && $ct->parent_theme ) { ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ), $ct->title, $ct->parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $ct->title, str_replace( WP_CONTENT_DIR, '', $ct->template_dir ), str_replace( WP_CONTENT_DIR, '', $ct->stylesheet_dir ) ); ?></p><?php } ?><?php if ( $ct->tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $ct->tags); ?></p><?php endif; ?><?php theme_update_available($ct); ?></div><div class="clear"></div><?phpif ( ! current_user_can( 'switch_themes' ) ) {	echo '</div>';	require( './admin-footer.php' );	exit;}?><h3><?php _e('Available Themes'); ?></h3><div class="clear"></div><?php if ( $theme_total ) { ?><?php if ( $page_links ) : ?><div class="tablenav"><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $per_page, $theme_total ) ),	number_format_i18n( $theme_total ),	$page_links); echo $page_links_text; ?></div></div><?php endif; ?><table id="availablethemes" cellspacing="0" cellpadding="0"><?php$style = '';$theme_names = array_keys($themes);natcasesort($theme_names);$table = array();$rows = ceil(count($theme_names) / 3);for ( $row = 1; $row <= $rows; $row++ )	for ( $col = 1; $col <= 3; $col++ )		$table[$row][$col] = array_shift($theme_names);foreach ( $table as $row => $cols ) {?><tr><?phpforeach ( $cols as $col => $theme_name ) {	$class = array('available-theme');	if ( $row == 1 ) $class[] = 'top';	if ( $col == 1 ) $class[] = 'left';	if ( $row == $rows ) $class[] = 'bottom';	if ( $col == 3 ) $class[] = 'right';?>	<td class="<?php echo join(' ', $class); ?>"><?php if ( !empty($theme_name) ) :	$template = $themes[$theme_name]['Template'];	$stylesheet = $themes[$theme_name]['Stylesheet'];	$title = $themes[$theme_name]['Title'];	$version = $themes[$theme_name]['Version'];	$description = $themes[$theme_name]['Description'];	$author = $themes[$theme_name]['Author'];	$screenshot = $themes[$theme_name]['Screenshot'];	$stylesheet_dir = $themes[$theme_name]['Stylesheet Dir'];	$template_dir = $themes[$theme_name]['Template Dir'];	$parent_theme = $themes[$theme_name]['Parent Theme'];	$theme_root = $themes[$theme_name]['Theme Root'];	$theme_root_uri = $themes[$theme_name]['Theme Root URI'];	$preview_link = esc_url(get_option('home') . '/');	if ( is_ssl() )		$preview_link = str_replace( 'http://', 'https://', $preview_link );	$preview_link = htmlspecialchars( add_query_arg( array('preview' => 1, 'template' => $template, 'stylesheet' => $stylesheet, 'TB_iframe' => 'true' ), $preview_link ) );	$preview_text = esc_attr( sprintf( __('Preview of &#8220;%s&#8221;'), $title ) );	$tags = $themes[$theme_name]['Tags'];	$thickbox_class = 'thickbox thickbox-preview';	$activate_link = wp_nonce_url("themes.php?action=activate&amp;template=".urlencode($template)."&amp;stylesheet=".urlencode($stylesheet), 'switch-theme_' . $template);	$activate_text = esc_attr( sprintf( __('Activate &#8220;%s&#8221;'), $title ) );	$actions = array();	$actions[] = '<a href="' . $activate_link .  '" class="activatelink" title="' . $activate_text . '">' . __('Activate') . '</a>';	$actions[] = '<a href="' . $preview_link . '" class="thickbox thickbox-preview" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $theme_name)) . '">' . __('Preview') . '</a>';	if ( current_user_can('delete_themes') )		$actions[] = '<a class="submitdelete deletion" href="' . wp_nonce_url("themes.php?action=delete&amp;template=$stylesheet", 'delete-theme_' . $stylesheet) . '" onclick="' . "return confirm('" . esc_js(sprintf( __("You are about to delete this theme '%s'\n  'Cancel' to stop, 'OK' to delete."), $theme_name )) . "');" . '">' . __('Delete') . '</a>';	$actions = apply_filters('theme_action_links', $actions, $themes[$theme_name]);	$actions = implode ( ' | ', $actions );?>		<a href="<?php echo $preview_link; ?>" class="<?php echo $thickbox_class; ?> screenshot"><?php if ( $screenshot ) : ?>			<img src="<?php echo $theme_root_uri . '/' . $stylesheet . '/' . $screenshot; ?>" alt="" /><?php endif; ?>		</a><h3><?php	/* translators: 1: theme title, 2: theme version, 3: theme author */	printf(__('%1$s %2$s by %3$s'), $title, $version, $author) ; ?></h3><p class="description"><?php echo $description; ?></p><span class='action-links'><?php echo $actions ?></span>	<?php if ( current_user_can('edit_themes') && $parent_theme ) {	/* translators: 1: theme title, 2:  template dir, 3: stylesheet_dir, 4: theme title, 5: parent_theme */ ?>	<p><?php printf(__('The template files are located in <code>%2$s</code>. The stylesheet files are located in <code>%3$s</code>. <strong>%4$s</strong> uses templates from <strong>%5$s</strong>. Changes made to the templates will affect both themes.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ), $title, $parent_theme); ?></p><?php } else { ?>	<p><?php printf(__('All of this theme&#8217;s files are located in <code>%2$s</code>.'), $title, str_replace( WP_CONTENT_DIR, '', $template_dir ), str_replace( WP_CONTENT_DIR, '', $stylesheet_dir ) ); ?></p><?php } ?><?php if ( $tags ) : ?><p><?php _e('Tags:'); ?> <?php echo join(', ', $tags); ?></p><?php endif; ?>		<?php theme_update_available( $themes[$theme_name] ); ?><?php endif; // end if not empty theme_name ?>	</td><?php } // end foreach $cols ?></tr><?php } // end foreach $table ?></table><?php } else { ?><p><?php	if ( current_user_can('install_themes') )		printf(__('You only have one theme installed right now. Live a little! You can choose from over 1,000 free themes in the WordPress.org Theme Directory at any time: just click on the <em><a href="%s">Install Themes</a></em> tab above.'), 'theme-install.php');	else		printf(__('Only the current theme is available to you. Contact the %s administrator for information about accessing additional themes.'), get_site_option('site_name'));	?></p><?php } // end if $theme_total?><br class="clear" /><?php if ( $page_links ) : ?><div class="tablenav"><?php echo "<div class='tablenav-pages'>$page_links_text</div>"; ?><br class="clear" /></div><?php endif; ?><br class="clear" /><?php// List broken themes, if any.$broken_themes = get_broken_themes();if ( current_user_can('edit_themes') && count( $broken_themes ) ) {?><h2><?php _e('Broken Themes'); ?> <?php if ( is_multisite() ) _e( '(Site admin only)' ); ?></h2><p><?php _e('The following themes are installed but incomplete. Themes must have a stylesheet and a template.'); ?></p><table id="broken-themes">	<tr>		<th><?php _e('Name'); ?></th>		<th><?php _e('Description'); ?></th>	</tr><?php	$theme = '';	$theme_names = array_keys($broken_themes);	natcasesort($theme_names);	foreach ($theme_names as $theme_name) {		$title = $broken_themes[$theme_name]['Title'];		$description = $broken_themes[$theme_name]['Description'];		$theme = ('class="alternate"' == $theme) ? '' : 'class="alternate"';		echo "		<tr $theme>			 <td>$title</td>			 <td>$description</td>		</tr>";	}?></table><?php}?></div><?php require('./admin-footer.php'); ?>
<?php/** * Multisite administration functions. * * @package WordPress * @subpackage Multisite * @since 3.0.0 *//** * Determine if uploaded file exceeds space quota. * * @since 3.0.0 * * @param array $file $_FILES array for a given file. * @return array $_FILES array with 'error' key set if file exceeds quota. 'error' is empty otherwise. */function check_upload_size( $file ) {	if ( get_site_option( 'upload_space_check_disabled' ) )		return $file;	if ( $file['error'] != '0' ) // there's already an error		return $file;	if ( defined( 'WP_IMPORTING' ) )		return $file;	$space_allowed = 1048576 * get_space_allowed();	$space_used = get_dirsize( BLOGUPLOADDIR );	$space_left = $space_allowed - $space_used;	$file_size = filesize( $file['tmp_name'] );	if ( $space_left < $file_size )		$file['error'] = sprintf( __( 'Not enough space to upload. %1$s KB needed.' ), number_format( ($file_size - $space_left) /1024 ) );	if ( $file_size > ( 1024 * get_site_option( 'fileupload_maxk', 1500 ) ) )		$file['error'] = sprintf(__('This file is too big. Files must be less than %1$s KB in size.'), get_site_option( 'fileupload_maxk', 1500 ) );	if ( upload_is_user_over_quota( false ) ) {		$file['error'] = __( 'You have used your space quota. Please delete files before uploading.' );	}	if ( $file['error'] != '0' && !isset($_POST['html-upload']) )		wp_die( $file['error'] . ' <a href="javascript:history.go(-1)">' . __( 'Back' ) . '</a>' );	return $file;}add_filter( 'wp_handle_upload_prefilter', 'check_upload_size' );/** * Delete a blog * * @since 3.0.0 * * @param int $blog_id Blog ID * @param bool $drop True if blog's table should be dropped.  Default is false. * @return void */function wpmu_delete_blog( $blog_id, $drop = false ) {	global $wpdb;	$switch = false;	if ( $blog_id != $wpdb->blogid ) {		$switch = true;		switch_to_blog( $blog_id );	}	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	do_action( 'delete_blog', $blog_id, $drop );	$users = get_users_of_blog( $blog_id );	// Remove users from this blog.	if ( ! empty( $users ) ) {		foreach ( $users as $user ) {			remove_user_from_blog( $user->user_id, $blog_id) ;		}	}	update_blog_status( $blog_id, 'deleted', 1 );	if ( $drop ) {		if ( substr( $blog_prefix, -1 ) == '_' )			$blog_prefix =  substr( $blog_prefix, 0, -1 ) . '\_';		$drop_tables = $wpdb->get_results( "SHOW TABLES LIKE '{$blog_prefix}%'", ARRAY_A );		$drop_tables = apply_filters( 'wpmu_drop_tables', $drop_tables );		reset( $drop_tables );		foreach ( (array) $drop_tables as $drop_table) {			$wpdb->query( "DROP TABLE IF EXISTS ". current( $drop_table ) ."" );		}		$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->blogs WHERE blog_id = %d", $blog_id ) );		$dir = apply_filters( 'wpmu_delete_blog_upload_dir', WP_CONTENT_DIR . "/blogs.dir/{$blog_id}/files/", $blog_id );		$dir = rtrim( $dir, DIRECTORY_SEPARATOR );		$top_dir = $dir;		$stack = array($dir);		$index = 0;		while ( $index < count( $stack ) ) {			# Get indexed directory from stack			$dir = $stack[$index];			$dh = @opendir( $dir );			if ( $dh ) {				while ( ( $file = @readdir( $dh ) ) !== false ) {					if ( $file == '.' || $file == '..' )						continue;					if ( @is_dir( $dir . DIRECTORY_SEPARATOR . $file ) )						$stack[] = $dir . DIRECTORY_SEPARATOR . $file;					else if ( @is_file( $dir . DIRECTORY_SEPARATOR . $file ) )						@unlink( $dir . DIRECTORY_SEPARATOR . $file );				}			}			$index++;		}		$stack = array_reverse( $stack );  // Last added dirs are deepest		foreach( (array) $stack as $dir ) {			if ( $dir != $top_dir)			@rmdir( $dir );		}	}	$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE meta_key = '{$blog_prefix}autosave_draft_ids'" );	$blogs = get_site_option( 'blog_list' );	if ( is_array( $blogs ) ) {		foreach ( $blogs as $n => $blog ) {			if ( $blog['blog_id'] == $blog_id )				unset( $blogs[$n] );		}		update_site_option( 'blog_list', $blogs );	}	if ( $switch === true )		restore_current_blog();}// @todo Merge with wp_delete_user() ?function wpmu_delete_user( $id ) {	global $wpdb;	$id = (int) $id;	do_action( 'wpmu_delete_user', $id );	$blogs = get_blogs_of_user( $id );	if ( ! empty( $blogs ) ) {		foreach ( $blogs as $blog ) {			switch_to_blog( $blog->userblog_id );			remove_user_from_blog( $id, $blog->userblog_id );			$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );			foreach ( (array) $post_ids as $post_id ) {				wp_delete_post( $post_id );			}			// Clean links			$link_ids = $wpdb->get_col( $wpdb->prepare( "SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id ) );			if ( $link_ids ) {				foreach ( $link_ids as $link_id )					wp_delete_link( $link_id );			}			restore_current_blog();		}	}	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->users WHERE ID = %d", $id ) );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->usermeta WHERE user_id = %d", $id ) );	clean_user_cache( $id );	// allow for commit transaction	do_action( 'deleted_user', $id );	return true;}function confirm_delete_users( $users ) {	global $current_user;	if ( !is_array( $users ) )		return false;    screen_icon();    ?>	<h2><?php esc_html_e( 'Users' ); ?></h2>	<p><?php _e( 'Transfer or delete posts and links before deleting users.' ); ?></p>	<form action="ms-edit.php?action=dodelete" method="post">	<input type="hidden" name="dodelete" />    <?php	wp_nonce_field( 'ms-users-delete' );	$site_admins = get_super_admins();	$admin_out = "<option value='$current_user->ID'>$current_user->user_login</option>";	foreach ( ( $allusers = (array) $_POST['allusers'] ) as $key => $val ) {		if ( $val != '' && $val != '0' ) {			$delete_user = new WP_User( $val );			if ( in_array( $delete_user->user_login, $site_admins ) )				wp_die( sprintf( __( 'Warning! User cannot be deleted. The user %s is a network admnistrator.' ), $delete_user->user_login ) );			echo "<input type='hidden' name='user[]' value='{$val}'/>\n";			$blogs = get_blogs_of_user( $val, true );			if ( !empty( $blogs ) ) {				?>				<br /><fieldset><p><legend><?php printf( __( "What should be done with posts and links owned by <em>%s</em>?" ), $delete_user->user_login ); ?></legend></p>				<?php				foreach ( (array) $blogs as $key => $details ) {					$blog_users = get_users_of_blog( $details->userblog_id );					if ( is_array( $blog_users ) && !empty( $blog_users ) ) {						$user_site = "<a href='" . esc_url( get_home_url( $details->userblog_id ) ) . "'>{$details->blogname}</a>";						$user_dropdown = "<select name='blog[$val][{$key}]'>";						$user_list = '';						foreach ( $blog_users as $user ) {							if ( $user->user_id != $val && !in_array( $user->user_id, $allusers ) )								$user_list .= "<option value='{$user->user_id}'>{$user->user_login}</option>";						}						if ( '' == $user_list )							$user_list = $admin_out;						$user_dropdown .= $user_list;						$user_dropdown .= "</select>\n";						?>						<ul style="list-style:none;">							<li><?php printf( __( 'Site: %s' ), $user_site ); ?></li>							<li><label><input type="radio" id="delete_option0" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="delete" checked="checked" />							<?php _e( 'Delete all posts and links.' ); ?></label></li>							<li><label><input type="radio" id="delete_option1" name="delete[<?php echo $details->userblog_id . '][' . $delete_user->ID ?>]" value="reassign" />							<?php echo __( 'Attribute all posts and links to:' ) . '</label>' . $user_dropdown; ?></li>						</ul>						<?php					}				}				echo "</fieldset>";			}		}	}	?>	<p class="submit"><input type="submit" class="button-secondary delete" value="<?php esc_attr_e( 'Confirm Deletion' ); ?>" /></p>	</form>    <?php	return true;}function wpmu_get_blog_allowedthemes( $blog_id = 0 ) {	$themes = get_themes();	if ( $blog_id != 0 )		switch_to_blog( $blog_id );	$blog_allowed_themes = get_option( 'allowedthemes' );	if ( !is_array( $blog_allowed_themes ) || empty( $blog_allowed_themes ) ) { // convert old allowed_themes to new allowedthemes		$blog_allowed_themes = get_option( 'allowed_themes' );		if ( is_array( $blog_allowed_themes ) ) {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $blog_allowed_themes[$key] ) == true ) {					$blog_allowedthemes[$theme_key] = 1;				}			}			$blog_allowed_themes = $blog_allowedthemes;			add_option( 'allowedthemes', $blog_allowed_themes );			delete_option( 'allowed_themes' );		}	}	if ( $blog_id != 0 )		restore_current_blog();	return $blog_allowed_themes;}function update_option_new_admin_email( $old_value, $value ) {	$email = get_option( 'admin_email' );	if ( $value == get_option( 'admin_email' ) || !is_email( $value ) )		return;	$hash = md5( $value. time() .mt_rand() );	$new_admin_email = array(		'hash' => $hash,		'newemail' => $value	);	update_option( 'adminhash', $new_admin_email );	$content = apply_filters( 'new_admin_email_content', __( "Dear user,You recently requested to have the administration email address onyour site changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL### "), $new_admin_email );	$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'options.php?adminhash='.$hash ) ), $content );	$content = str_replace( '###EMAIL###', $value, $content );	$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );	$content = str_replace( '###SITEURL###', network_home_url(), $content );	wp_mail( $value, sprintf( __( '[%s] New Admin Email Address' ), get_option( 'blogname' ) ), $content );}add_action( 'update_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );add_action( 'add_option_new_admin_email', 'update_option_new_admin_email', 10, 2 );function send_confirmation_on_profile_email() {	global $errors, $wpdb, $current_user;	if ( ! is_object($errors) )		$errors = new WP_Error();	if ( $current_user->id != $_POST['user_id'] )		return false;	if ( $current_user->user_email != $_POST['email'] ) {		if ( !is_email( $_POST['email'] ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address isn't correct." ), array( 'form-field' => 'email' ) );			return;		}		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_email FROM {$wpdb->users} WHERE user_email=%s", $_POST['email'] ) ) ) {			$errors->add( 'user_email', __( "<strong>ERROR</strong>: The e-mail address is already used." ), array( 'form-field' => 'email' ) );			delete_option( $current_user->ID . '_new_email' );			return;		}		$hash = md5( $_POST['email'] . time() . mt_rand() );		$new_user_email = array(				'hash' => $hash,				'newemail' => $_POST['email']				);		update_option( $current_user->ID . '_new_email', $new_user_email );		$content = apply_filters( 'new_user_email_content', __( "Dear user,You recently requested to have the email address on your account changed.If this is correct, please click on the following link to change it:###ADMIN_URL###You can safely ignore and delete this email if you do not want totake this action.This email has been sent to ###EMAIL###Regards,All at ###SITENAME######SITEURL###" ), $new_user_email );		$content = str_replace( '###ADMIN_URL###', esc_url( admin_url( 'profile.php?newuseremail='.$hash ) ), $content );		$content = str_replace( '###EMAIL###', $_POST['email'], $content);		$content = str_replace( '###SITENAME###', get_site_option( 'site_name' ), $content );		$content = str_replace( '###SITEURL###', network_home_url(), $content );		wp_mail( $_POST['email'], sprintf( __( '[%s] New Email Address' ), get_option( 'blogname' ) ), $content );		$_POST['email'] = $current_user->user_email;	}}add_action( 'personal_options_update', 'send_confirmation_on_profile_email' );function new_user_email_admin_notice() {	global $current_user;	if ( strpos( $_SERVER['PHP_SELF'], 'profile.php' ) && isset( $_GET['updated'] ) && $email = get_option( $current_user->ID . '_new_email' ) )		echo "<div class='update-nag'>" . sprintf( __( "Your email address has not been updated yet. Please check your inbox at %s for a confirmation email." ), $email['newemail'] ) . "</div>";}add_action( 'admin_notices', 'new_user_email_admin_notice' );function get_site_allowed_themes() {	$themes = get_themes();	$allowed_themes = get_site_option( 'allowedthemes' );	if ( !is_array( $allowed_themes ) || empty( $allowed_themes ) ) {		$allowed_themes = get_site_option( 'allowed_themes' ); // convert old allowed_themes format		if ( !is_array( $allowed_themes ) ) {			$allowed_themes = array();		} else {			foreach( (array) $themes as $key => $theme ) {				$theme_key = esc_html( $theme['Stylesheet'] );				if ( isset( $allowed_themes[ $key ] ) == true ) {					$allowedthemes[ $theme_key ] = 1;				}			}			$allowed_themes = $allowedthemes;		}	}	return $allowed_themes;}/** * Determines if there is any upload space left in the current blog's quota. * * @since 3.0.0 * @return bool True if space is available, false otherwise. */function is_upload_space_available() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	if ( !( $space_allowed = get_upload_space_available() ) )		return false;	return true;}/* * @since 3.0.0 * * @return int of upload size limit in bytes */function upload_size_limit_filter( $size ) {	$fileupload_maxk = 1024 * get_site_option( 'fileupload_maxk', 1500 );	return min( $size, $fileupload_maxk, get_upload_space_available() );}/** * Determines if there is any upload space left in the current blog's quota. * * @return int of upload space available in bytes */function get_upload_space_available() {	$space_allowed = get_space_allowed() * 1024 * 1024;	if ( get_site_option( 'upload_space_check_disabled' ) )		return $space_allowed;	$dir_name = trailingslashit( BLOGUPLOADDIR );	if ( !( is_dir( $dir_name) && is_readable( $dir_name ) ) )		return $space_allowed;  	$dir = dir( $dir_name );   	$size = 0;	while ( $file = $dir->read() ) {		if ( $file != '.' && $file != '..' ) {			if ( is_dir( $dir_name . $file) ) {				$size += get_dirsize( $dir_name . $file );			} else {				$size += filesize( $dir_name . $file );			}		}	}	$dir->close();	if ( ( $space_allowed - $size ) <= 0 )		return 0;	return $space_allowed - $size;}/** * Returns the upload quota for the current blog. * * @return int Quota */function get_space_allowed() {	$space_allowed = get_option( 'blog_upload_space' );	if ( $space_allowed == false )		$space_allowed = get_site_option( 'blog_upload_space' );	if ( empty( $space_allowed ) || !is_numeric( $space_allowed ) )		$space_allowed = 50;	return $space_allowed;}function display_space_usage() {	$space = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	$percentused = ( $used / $space ) * 100;	if ( $space > 1000 ) {		$space = number_format( $space / 1024 );		/* translators: Gigabytes */		$space .= __( 'GB' );	} else {		/* translators: Megabytes */		$space .= __( 'MB' );	}	?>	<strong><?php printf( __( 'Used: %1s%% of %2s' ), number_format( $percentused ), $space ); ?></strong>	<?php}// Display File upload quota on dashboardfunction dashboard_quota() {	if ( get_site_option( 'upload_space_check_disabled' ) )		return true;	$quota = get_space_allowed();	$used = get_dirsize( BLOGUPLOADDIR ) / 1024 / 1024;	if ( $used > $quota )		$percentused = '100';	else		$percentused = ( $used / $quota ) * 100;	$used_color = ( $percentused < 70 ) ? ( ( $percentused >= 40 ) ? 'waiting' : 'approved' ) : 'spam';	$used = round( $used, 2 );	$percentused = number_format( $percentused );	?>	<p class="sub musub"><?php _e( 'Storage Space' ); ?></p>	<div class="table table_content musubtable">	<table>		<tr class="first">			<td class="first b b-posts"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB</a>' ), esc_url( admin_url( 'upload.php' ) ), $quota ); ?></td>			<td class="t posts"><?php _e( 'Space Allowed' ); ?></td>		</tr>	</table>	</div>	<div class="table table_discussion musubtable">	<table>		<tr class="first">			<td class="b b-comments"><?php printf( __( '<a href="%1$s" title="Manage Uploads" class="musublink">%2$sMB (%3$s%%)</a>' ), esc_url( admin_url( 'upload.php' ) ), $used, $percentused ); ?></td>			<td class="last t comments <?php echo $used_color;?>"><?php _e( 'Space Used' );?></td>		</tr>	</table>	</div>	<br class="clear" />	<?php}if ( current_user_can( 'edit_posts' ) )	add_action( 'activity_box_end', 'dashboard_quota' );// Edit blog upload space setting on Edit Blog pagefunction upload_space_setting( $id ) {	$quota = get_blog_option( $id, 'blog_upload_space' );	if ( !$quota )		$quota = '';	?>	<tr>		<th><?php _e( 'Site Upload Space Quota '); ?></th>		<td><input type="text" size="3" name="option[blog_upload_space]" value="<?php echo $quota; ?>" /> <?php _e( 'MB (Leave blank for network default)' ); ?></td>	</tr>	<?php}add_action( 'wpmueditblogaction', 'upload_space_setting' );function update_user_status( $id, $pref, $value, $refresh = 1 ) {	global $wpdb;	$wpdb->update( $wpdb->users, array( $pref => $value ), array( 'ID' => $id ) );	if ( $refresh == 1 )		refresh_user_details( $id );	if ( $pref == 'spam' ) {		if ( $value == 1 )			do_action( 'make_spam_user', $id );		else			do_action( 'make_ham_user', $id );	}	return $value;}function refresh_user_details( $id ) {	$id = (int) $id;	if ( !$user = get_userdata( $id ) )		return false;	clean_user_cache( $id );	return $id;}function format_code_lang( $code = '' ) {	$code = strtolower( substr( $code, 0, 2 ) );	$lang_codes = array(		'aa' => 'Afar', 'ab' => 'Abkhazian', 'af' => 'Afrikaans', 'ak' => 'Akan', 'sq' => 'Albanian', 'am' => 'Amharic', 'ar' => 'Arabic', 'an' => 'Aragonese', 'hy' => 'Armenian', 'as' => 'Assamese', 'av' => 'Avaric', 'ae' => 'Avestan', 'ay' => 'Aymara', 'az' => 'Azerbaijani', 'ba' => 'Bashkir', 'bm' => 'Bambara', 'eu' => 'Basque', 'be' => 'Belarusian', 'bn' => 'Bengali',		'bh' => 'Bihari', 'bi' => 'Bislama', 'bs' => 'Bosnian', 'br' => 'Breton', 'bg' => 'Bulgarian', 'my' => 'Burmese', 'ca' => 'Catalan; Valencian', 'ch' => 'Chamorro', 'ce' => 'Chechen', 'zh' => 'Chinese', 'cu' => 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic', 'cv' => 'Chuvash', 'kw' => 'Cornish', 'co' => 'Corsican', 'cr' => 'Cree',		'cs' => 'Czech', 'da' => 'Danish', 'dv' => 'Divehi; Dhivehi; Maldivian', 'nl' => 'Dutch; Flemish', 'dz' => 'Dzongkha', 'en' => 'English', 'eo' => 'Esperanto', 'et' => 'Estonian', 'ee' => 'Ewe', 'fo' => 'Faroese', 'fj' => 'Fijjian', 'fi' => 'Finnish', 'fr' => 'French', 'fy' => 'Western Frisian', 'ff' => 'Fulah', 'ka' => 'Georgian', 'de' => 'German', 'gd' => 'Gaelic; Scottish Gaelic',		'ga' => 'Irish', 'gl' => 'Galician', 'gv' => 'Manx', 'el' => 'Greek, Modern', 'gn' => 'Guarani', 'gu' => 'Gujarati', 'ht' => 'Haitian; Haitian Creole', 'ha' => 'Hausa', 'he' => 'Hebrew', 'hz' => 'Herero', 'hi' => 'Hindi', 'ho' => 'Hiri Motu', 'hu' => 'Hungarian', 'ig' => 'Igbo', 'is' => 'Icelandic', 'io' => 'Ido', 'ii' => 'Sichuan Yi', 'iu' => 'Inuktitut', 'ie' => 'Interlingue',		'ia' => 'Interlingua (International Auxiliary Language Association)', 'id' => 'Indonesian', 'ik' => 'Inupiaq', 'it' => 'Italian', 'jv' => 'Javanese', 'ja' => 'Japanese', 'kl' => 'Kalaallisut; Greenlandic', 'kn' => 'Kannada', 'ks' => 'Kashmiri', 'kr' => 'Kanuri', 'kk' => 'Kazakh', 'km' => 'Central Khmer', 'ki' => 'Kikuyu; Gikuyu', 'rw' => 'Kinyarwanda', 'ky' => 'Kirghiz; Kyrgyz',		'kv' => 'Komi', 'kg' => 'Kongo', 'ko' => 'Korean', 'kj' => 'Kuanyama; Kwanyama', 'ku' => 'Kurdish', 'lo' => 'Lao', 'la' => 'Latin', 'lv' => 'Latvian', 'li' => 'Limburgan; Limburger; Limburgish', 'ln' => 'Lingala', 'lt' => 'Lithuanian', 'lb' => 'Luxembourgish; Letzeburgesch', 'lu' => 'Luba-Katanga', 'lg' => 'Ganda', 'mk' => 'Macedonian', 'mh' => 'Marshallese', 'ml' => 'Malayalam',		'mi' => 'Maori', 'mr' => 'Marathi', 'ms' => 'Malay', 'mg' => 'Malagasy', 'mt' => 'Maltese', 'mo' => 'Moldavian', 'mn' => 'Mongolian', 'na' => 'Nauru', 'nv' => 'Navajo; Navaho', 'nr' => 'Ndebele, South; South Ndebele', 'nd' => 'Ndebele, North; North Ndebele', 'ng' => 'Ndonga', 'ne' => 'Nepali', 'nn' => 'Norwegian Nynorsk; Nynorsk, Norwegian', 'nb' => 'Bokml, Norwegian, Norwegian Bokml',		'no' => 'Norwegian', 'ny' => 'Chichewa; Chewa; Nyanja', 'oc' => 'Occitan, Provenal', 'oj' => 'Ojibwa', 'or' => 'Oriya', 'om' => 'Oromo', 'os' => 'Ossetian; Ossetic', 'pa' => 'Panjabi; Punjabi', 'fa' => 'Persian', 'pi' => 'Pali', 'pl' => 'Polish', 'pt' => 'Portuguese', 'ps' => 'Pushto', 'qu' => 'Quechua', 'rm' => 'Romansh', 'ro' => 'Romanian', 'rn' => 'Rundi', 'ru' => 'Russian',		'sg' => 'Sango', 'sa' => 'Sanskrit', 'sr' => 'Serbian', 'hr' => 'Croatian', 'si' => 'Sinhala; Sinhalese', 'sk' => 'Slovak', 'sl' => 'Slovenian', 'se' => 'Northern Sami', 'sm' => 'Samoan', 'sn' => 'Shona', 'sd' => 'Sindhi', 'so' => 'Somali', 'st' => 'Sotho, Southern', 'es' => 'Spanish; Castilian', 'sc' => 'Sardinian', 'ss' => 'Swati', 'su' => 'Sundanese', 'sw' => 'Swahili',		'sv' => 'Swedish', 'ty' => 'Tahitian', 'ta' => 'Tamil', 'tt' => 'Tatar', 'te' => 'Telugu', 'tg' => 'Tajik', 'tl' => 'Tagalog', 'th' => 'Thai', 'bo' => 'Tibetan', 'ti' => 'Tigrinya', 'to' => 'Tonga (Tonga Islands)', 'tn' => 'Tswana', 'ts' => 'Tsonga', 'tk' => 'Turkmen', 'tr' => 'Turkish', 'tw' => 'Twi', 'ug' => 'Uighur; Uyghur', 'uk' => 'Ukrainian', 'ur' => 'Urdu', 'uz' => 'Uzbek',		've' => 'Venda', 'vi' => 'Vietnamese', 'vo' => 'Volapk', 'cy' => 'Welsh','wa' => 'Walloon','wo' => 'Wolof', 'xh' => 'Xhosa', 'yi' => 'Yiddish', 'yo' => 'Yoruba', 'za' => 'Zhuang; Chuang', 'zu' => 'Zulu' );	$lang_codes = apply_filters( 'lang_codes', $lang_codes, $code );	return strtr( $code, $lang_codes );}function sync_category_tag_slugs( $term, $taxonomy ) {	if ( global_terms_enabled() && ( $taxonomy == 'category' || $taxonomy == 'post_tag' ) ) {		if ( is_object( $term ) ) {			$term->slug = sanitize_title( $term->name );		} else {			$term['slug'] = sanitize_title( $term['name'] );		}	}	return $term;}add_filter( 'get_term', 'sync_category_tag_slugs', 10, 2 );function redirect_user_to_blog() {	global $current_user;	$c = 0;	if ( isset( $_GET['c'] ) )		$c = (int) $_GET['c'];	if ( $c >= 5 ) {		wp_die( __( "You don&#8217;t have permission to view this site. Please contact the system administrator." ) );	}	$c ++;	$blog = get_active_blog_for_user( $current_user->ID );	$dashboard_blog = get_dashboard_blog();	if ( is_object( $blog ) ) {		wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) ); // redirect and count to 5, "just in case"		exit;	}	/*	   If the user is a member of only 1 blog and the user's primary_blog isn't set to that blog,	   then update the primary_blog record to match the user's blog	 */	$blogs = get_blogs_of_user( $current_user->ID );	if ( !empty( $blogs ) ) {		foreach( $blogs as $blogid => $blog ) {			if ( $blogid != $dashboard_blog->blog_id && get_user_meta( $current_user->ID , 'primary_blog', true ) == $dashboard_blog->blog_id ) {				update_user_meta( $current_user->ID, 'primary_blog', $blogid );				continue;			}		}		$blog = get_blog_details( get_user_meta( $current_user->ID, 'primary_blog', true ) );			wp_redirect( get_admin_url( $blog->blog_id, '?c=' . $c ) );		exit;	}	wp_die( __( 'You do not have sufficient permissions to access this page.' ) );}add_action( 'admin_page_access_denied', 'redirect_user_to_blog', 99 );function check_import_new_users( $permission ) {	if ( !is_super_admin() )		return false;	return true;}add_filter( 'import_allow_create_users', 'check_import_new_users' );// See "import_allow_fetch_attachments" and "import_attachment_size_limit" filters too.function mu_dropdown_languages( $lang_files = array(), $current = '' ) {	$flag = false;	$output = array();	foreach ( (array) $lang_files as $val ) {		$code_lang = basename( $val, '.mo' );		if ( $code_lang == 'en_US' ) { // American English			$flag = true;			$ae = __( 'American English' );			$output[$ae] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $ae . '</option>';		} elseif ( $code_lang == 'en_GB' ) { // British English			$flag = true;			$be = __( 'British English' );			$output[$be] = '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . $be . '</option>';		} else {			$translated = format_code_lang( $code_lang );			$output[$translated] =  '<option value="' . esc_attr( $code_lang ) . '"' . selected( $current, $code_lang ) . '> ' . esc_html ( $translated ) . '</option>';		}	}	if ( $flag === false ) // WordPress english		$output[] = '<option value=""' . selected( $current, '' ) . '>' . __( 'English' ) . "</option>";	// Order by name	uksort( $output, 'strnatcasecmp' );	$output = apply_filters( 'mu_dropdown_languages', $output, $lang_files, $current );	echo implode( "\n\t", $output );}/* Warn the admin if SECRET SALT information is missing from wp-config.php */function secret_salt_warning() {	if ( !is_super_admin() )		return;	$secret_keys = array( 'AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT' );	$out = '';	foreach( $secret_keys as $key ) {		if ( ! defined( $key ) )			$out .= "define( '$key', '" . esc_html( wp_generate_password( 64, true, true ) ) . "' );<br />";	}	if ( $out != '' ) {		$msg  = __( 'Warning! WordPress encrypts user cookies, but you must add the following lines to <strong>wp-config.php</strong> for it to be more secure.' );		$msg .= '<br/>' . __( "Before the line <code>/* That's all, stop editing! Happy blogging. */</code> please add this code:" );		$msg .= "<br/><br/><code>$out</code>";		echo "<div class='update-nag'>$msg</div>";	}}add_action( 'admin_notices', 'secret_salt_warning' );function admin_notice_feed() {	global $current_user, $current_screen;	if ( $current_screen->id != 'dashboard' )		return;	if ( !empty( $_GET['feed_dismiss'] ) ) {		update_user_option( $current_user->id, 'admin_feed_dismiss', $_GET['feed_dismiss'], true );		return;	}	$url = get_site_option( 'admin_notice_feed' );	if ( empty( $url ) )		return;	$rss = fetch_feed( $url );	if ( ! is_wp_error( $rss ) && $item = $rss->get_item() ) {		$title = $item->get_title();		if ( md5( $title ) == get_user_option( 'admin_feed_dismiss' ) )			return;		$msg = "<h3>" . esc_html( $title ) . "</h3>\n";		$content = $item->get_description();		$content = $content ? wp_html_excerpt( $content, 200 ) . ' &hellip; ' : '';		$link = esc_url( strip_tags( $item->get_link() ) );		$msg .= "<p>" . $content . "<a href='$link'>" . __( 'Read More' ) . "</a> <a href='index.php?feed_dismiss=" . md5( $title ) . "'>" . __( 'Dismiss' ) . "</a></p>";		echo "<div class='updated'>$msg</div>";	} elseif ( is_super_admin() ) {		printf( '<div class="update-nag">' . __( 'Your feed at %s is empty.' ) . '</div>', esc_html( $url ) );	}}add_action( 'admin_notices', 'admin_notice_feed' );function site_admin_notice() {	global $current_user, $wp_db_version;	if ( !is_super_admin() )		return false;	if ( get_site_option( 'wpmu_upgrade_site' ) != $wp_db_version )		echo "<div class='update-nag'>" . sprintf( __( 'Thank you for Updating! Please visit the <a href="%s">Update Network</a> page to update all your sites.' ), esc_url( admin_url( 'ms-upgrade-network.php' ) ) ) . "</div>";}add_action( 'admin_notices', 'site_admin_notice' );function avoid_blog_page_permalink_collision( $data, $postarr ) {	if ( is_subdomain_install() )		return $data;	if ( $data['post_type'] != 'page' )		return $data;	if ( !isset( $data['post_name'] ) || $data['post_name'] == '' )		return $data;	if ( !is_main_site() )		return $data;	$post_name = $data['post_name'];	$c = 0;	while( $c < 10 && get_id_from_blogname( $post_name ) ) {		$post_name .= mt_rand( 1, 10 );		$c ++;	}	if ( $post_name != $data['post_name'] ) {		$data['post_name'] = $post_name;	}	return $data;}add_filter( 'wp_insert_post_data', 'avoid_blog_page_permalink_collision', 10, 2 );function choose_primary_blog() {	global $current_user;	?>	<table class="form-table">	<tr>	<?php /* translators: My sites label */ ?>		<th scope="row"><?php _e( 'Primary Site' ); ?></th>		<td>		<?php		$all_blogs = get_blogs_of_user( $current_user->ID );		$primary_blog = get_user_meta( $current_user->ID, 'primary_blog', true );		if ( count( $all_blogs ) > 1 ) {			$found = false;			?>			<select name="primary_blog">				<?php foreach( (array) $all_blogs as $blog ) {					if ( $primary_blog == $blog->userblog_id )						$found = true;					?><option value="<?php echo $blog->userblog_id ?>"<?php selected( $primary_blog,  $blog->userblog_id ); ?>><?php echo esc_url( get_home_url( $blog->userblog_id ) ) ?></option><?php				} ?>			</select>			<?php			if ( !$found ) {				$blog = array_shift( $all_blogs );				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );			}		} elseif ( count( $all_blogs ) == 1 ) {			$blog = array_shift( $all_blogs );			echo $blog->domain;			if ( $primary_blog != $blog->userblog_id ) // Set the primary blog again if it's out of sync with blog list.				update_user_meta( $current_user->ID, 'primary_blog', $blog->userblog_id );		} else {			echo "N/A";		}		?>		</td>	</tr>	<?php if ( in_array( get_site_option( 'registration' ), array( 'all', 'blog' ) ) ) : ?>		<tr>			<th scope="row" colspan="2" class="th-full">				<a href="<?php echo apply_filters( 'wp_signup_location', network_home_url( 'wp-signup.php' ) ); ?>"><?php _e( 'Create a New Site' ); ?></a>			</th>		</tr>	<?php endif; ?>	</table>	<?php}function show_post_thumbnail_warning() {	if ( ! is_super_admin() )		return;	$mu_media_buttons = get_site_option( 'mu_media_buttons', array() );	if ( empty($mu_media_buttons['image']) && current_theme_supports( 'post-thumbnails' ) ) {		echo "<div class='update-nag'>" . sprintf( __( "Warning! The current theme supports Featured Images. You must enable image uploads on <a href='%s'>the options page</a> for it to work." ), esc_url( admin_url( 'ms-options.php' ) ) ) . "</div>";	}}add_action( 'admin_notices', 'show_post_thumbnail_warning' );function ms_deprecated_blogs_file() {	if ( ! is_super_admin() )		return;	if ( ! file_exists( WP_CONTENT_DIR . '/blogs.php' ) )		return;	echo '<div class="update-nag">' . sprintf( __( 'The <code>%1$s</code> file is deprecated. Please remove it and update your server rewrite rules to use <code>%2$s</code> instead.' ), 'wp-content/blogs.php', 'wp-includes/ms-files.php' ) . '</div>';}add_action( 'admin_notices', 'ms_deprecated_blogs_file' );/** * Outputs the notice message for multisite regarding activation of plugin page. * * @since 3.0.0 * @return none */function _admin_notice_multisite_activate_plugins_page() {	$message = sprintf( __( 'The plugins page is not visible to normal users. It must be activated first. %s' ), '<a href="' . esc_url( admin_url( 'ms-options.php#menu' ) ) . '">' . __( 'Activate' ) . '</a>' );	echo "<div class='error'><p>$message</p></div>";}/** * Grants super admin privileges. * * @since 3.0.0 * @param $user_id */function grant_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'grant_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( ! in_array( $user->user_login, $super_admins ) ) {		$super_admins[] = $user->user_login;		update_site_option( 'site_admins' , $super_admins );		do_action( 'granted_super_admin', $user_id );		return true;	}	return false;}/** * Revokes super admin privileges. * * @since 3.0.0 * @param $user_id */function revoke_super_admin( $user_id ) {	global $super_admins;	// If global super_admins override is defined, there is nothing to do here.	if ( isset($super_admins) )		return false;	do_action( 'revoke_super_admin', $user_id );	// Directly fetch site_admins instead of using get_super_admins()	$super_admins = get_site_option( 'site_admins', array( 'admin' ) );	$user = new WP_User( $user_id );	if ( $user->user_email != get_site_option( 'admin_email' ) ) {		if ( false !== ( $key = array_search( $user->user_login, $super_admins ) ) ) {			unset( $super_admins[$key] );			update_site_option( 'site_admins', $super_admins );			do_action( 'revoked_super_admin', $user_id );			return true;		}	}	return false;}?>
<?php/** * BackPress Scripts enqueue. * * These classes were refactored from the WordPress WP_Scripts and WordPress * script enqueue API. * * @package BackPress * @since r16 *//** * BackPress Scripts enqueue class. * * @package BackPress * @uses WP_Dependencies * @since r16 */class WP_Scripts extends WP_Dependencies {	var $base_url; // Full URL with trailing slash	var $content_url;	var $default_version;	var $in_footer = array();	var $concat = '';	var $concat_version = '';	var $do_concat = false;	var $print_html = '';	var $print_code = '';	var $ext_handles = '';	var $ext_version = '';	var $default_dirs;	function __construct() {		do_action_ref_array( 'wp_default_scripts', array(&$this) );	}	/**	 * Prints scripts	 *	 * Prints the scripts passed to it or the print queue.  Also prints all necessary dependencies.	 *	 * @param mixed handles (optional) Scripts to be printed.  (void) prints queue, (string) prints that script, (array of strings) prints those scripts.	 * @param int group (optional) If scripts were queued in groups prints this group number.	 * @return array Scripts that have been printed	 */	function print_scripts( $handles = false, $group = false ) {		return $this->do_items( $handles, $group );	}	function print_scripts_l10n( $handle, $echo = true ) {		if ( empty($this->registered[$handle]->extra['l10n']) || empty($this->registered[$handle]->extra['l10n'][0]) || !is_array($this->registered[$handle]->extra['l10n'][1]) )			return false;		$object_name = $this->registered[$handle]->extra['l10n'][0];		$data = "var $object_name = {\n";		$eol = '';		foreach ( $this->registered[$handle]->extra['l10n'][1] as $var => $val ) {			if ( 'l10n_print_after' == $var ) {				$after = $val;				continue;			}			$data .= "$eol\t$var: \"" . esc_js( $val ) . '"';			$eol = ",\n";		}		$data .= "\n};\n";		$data .= isset($after) ? "$after\n" : '';		if ( $echo ) {			echo "<script type='text/javascript'>\n";			echo "/* <![CDATA[ */\n";			echo $data;			echo "/* ]]> */\n";			echo "</script>\n";			return true;		} else {			return $data;		}	}	function do_item( $handle, $group = false ) {		if ( !parent::do_item($handle) )			return false;		if ( 0 === $group && $this->groups[$handle] > 0 ) {			$this->in_footer[] = $handle;			return false;		}		if ( false === $group && in_array($handle, $this->in_footer, true) )			$this->in_footer = array_diff( $this->in_footer, (array) $handle );		if ( null === $this->registered[$handle]->ver )			$ver = '';		else			$ver = $this->registered[$handle]->ver ? $this->registered[$handle]->ver : $this->default_version;		if ( isset($this->args[$handle]) )			$ver = $ver ? $ver . '&amp;' . $this->args[$handle] : $this->args[$handle];		$src = $this->registered[$handle]->src;		if ( $this->do_concat ) {			$srce = apply_filters( 'script_loader_src', $src, $handle );			if ( $this->in_default_dir($srce) ) {				$this->print_code .= $this->print_scripts_l10n( $handle, false );				$this->concat .= "$handle,";				$this->concat_version .= "$handle$ver";				return true;			} else {				$this->ext_handles .= "$handle,";				$this->ext_version .= "$handle$ver";			}		}		$this->print_scripts_l10n( $handle );		if ( !preg_match('|^https?://|', $src) && ! ( $this->content_url && 0 === strpos($src, $this->content_url) ) ) {			$src = $this->base_url . $src;		}		if ( !empty($ver) )			$src = add_query_arg('ver', $ver, $src);		$src = esc_url(apply_filters( 'script_loader_src', $src, $handle ));		if ( $this->do_concat )			$this->print_html .= "<script type='text/javascript' src='$src'></script>\n";		else			echo "<script type='text/javascript' src='$src'></script>\n";		return true;	}	/**	 * Localizes a script	 *	 * Localizes only if script has already been added	 *	 * @param string handle Script name	 * @param string object_name Name of JS object to hold l10n info	 * @param array l10n Array of JS var name => localized string	 * @return bool Successful localization	 */	function localize( $handle, $object_name, $l10n ) {		if ( !$object_name || !$l10n )			return false;		return $this->add_data( $handle, 'l10n', array( $object_name, $l10n ) );	}	function set_group( $handle, $recursion, $group = false ) {		$grp = isset($this->registered[$handle]->extra['group']) ? (int) $this->registered[$handle]->extra['group'] : 0;		if ( false !== $group && $grp > $group )			$grp = $group;		return parent::set_group( $handle, $recursion, $grp );	}	function all_deps( $handles, $recursion = false, $group = false ) {		$r = parent::all_deps( $handles, $recursion );		if ( !$recursion )			$this->to_do = apply_filters( 'print_scripts_array', $this->to_do );		return $r;	}	function do_head_items() {		$this->do_items(false, 0);		return $this->done;	}	function do_footer_items() {		if ( !empty($this->in_footer) ) {			foreach( $this->in_footer as $key => $handle ) {				if ( !in_array($handle, $this->done, true) && isset($this->registered[$handle]) ) {					$this->do_item($handle);					$this->done[] = $handle;					unset( $this->in_footer[$key] );				}			}		}		return $this->done;	}	function in_default_dir($src) {		if ( ! $this->default_dirs )			return true;		foreach ( (array) $this->default_dirs as $test ) {			if ( 0 === strpos($src, $test) )				return true;		}		return false;	}	function reset() {		$this->do_concat = false;		$this->print_code = '';		$this->concat = '';		$this->concat_version = '';		$this->print_html = '';		$this->ext_version = '';		$this->ext_handles = '';	}}
<?php/** * Template WordPress Administration API. * * A Big Mess. Also some neat functions that are nicely written. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since 2.7 * * Outputs the HTML for the hidden table rows used in Categories, Link Categories and Tags quick edit. * * @param string $type "edit-tags", "categoried" or "edit-link-categories" * @param string $taxonomy The taxonomy of the row. * @return */function inline_edit_term_row($type, $taxonomy) {	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can( $tax->cap->edit_terms ) )		return;	$columns = get_column_headers($type);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($type) ) );	$col_count = count($columns) - count($hidden);	?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<tr id="inline-edit" class="inline-edit-row" style="display: none"><td colspan="<?php echo $col_count; ?>">		<fieldset><div class="inline-edit-col">			<h4><?php _e( 'Quick Edit' ); ?></h4>			<label>				<span class="title"><?php _e( 'Name' ); ?></span>				<span class="input-text-wrap"><input type="text" name="name" class="ptitle" value="" /></span>			</label><?php if ( !is_multisite() ) { ?>			<label>				<span class="title"><?php _e( 'Slug' ); ?></span>				<span class="input-text-wrap"><input type="text" name="slug" class="ptitle" value="" /></span>			</label><?php } ?>		</div></fieldset><?php	$core_columns = array( 'cb' => true, 'description' => true, 'name' => true, 'slug' => true, 'posts' => true );	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( 'quick_edit_custom_box', $column_name, $type, $taxonomy );	}?>	<p class="inline-edit-save submit">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="cancel button-secondary alignleft"><?php _e('Cancel'); ?></a>		<?php $update_text = $tax->labels->update_item; ?>		<a accesskey="s" href="#inline-edit" title="<?php echo esc_attr( $update_text ); ?>" class="save button-primary alignright"><?php echo $update_text; ?></a>		<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<span class="error" style="display:none;"></span>		<?php wp_nonce_field( 'taxinlineeditnonce', '_inline_edit', false ); ?>		<input type="hidden" name="taxonomy" value="<?php echo esc_attr( $tax->name ); ?>" />		<br class="clear" />	</p>	</td></tr>	</tbody></table></form><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $category * @param unknown_type $name_override * @return unknown */function link_cat_row( $category, $name_override = false ) {	static $row_class = '';	if ( !$category = get_term( $category, 'link_category', OBJECT, 'display' ) )		return false;	if ( is_wp_error( $category ) )		return $category;	$default_cat_id = (int) get_option( 'default_link_category' );	$name = ( $name_override ? $name_override : $category->name );	$edit_link = "link-category.php?action=edit&amp;cat_ID=$category->term_id";	if ( current_user_can( 'manage_categories' ) ) {		$edit = "<a class='row-title' href='$edit_link' title='" . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $category->name)) . "'>$name</a><br />";		$actions = array();		$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		if ( $default_cat_id != $category->term_id )			$actions['delete'] = "<a class='delete:the-list:link-cat-$category->term_id submitdelete' href='" . wp_nonce_url("link-category.php?action=delete&amp;cat_ID=$category->term_id", 'delete-link-category_' . $category->term_id) . "'>" . __('Delete') . "</a>";		$actions = apply_filters('link_cat_row_actions', $actions, $category);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';	} else {		$edit = $name;	}	$row_class = 'alternate' == $row_class ? '' : 'alternate';	$qe_data = get_term_to_edit($category->term_id, 'link_category');	$category->count = number_format_i18n( $category->count );	$count = ( $category->count > 0 ) ? "<a href='link-manager.php?cat_id=$category->term_id'>$category->count</a>" : $category->count;	$output = "<tr id='link-cat-$category->term_id' class='iedit $row_class'>";	$columns = get_column_headers('edit-link-categories');	$hidden = get_hidden_columns('edit-link-categories');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$output .= "<th scope='row' class='check-column'>";				if ( absint( get_option( 'default_link_category' ) ) != $category->term_id ) {					$output .= "<input type='checkbox' name='delete[]' value='$category->term_id' />";				} else {					$output .= "&nbsp;";				}				$output .= "</th>";				break;			case 'name':				$output .= "<td $attributes>$edit";				$output .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';				$output .= '<div class="name">' . $qe_data->name . '</div>';				$output .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';				$output .= '<div class="cat_parent">' . $qe_data->parent . '</div></div></td>';				break;			case 'description':				$output .= "<td $attributes>$category->description</td>";				break;			case 'slug':				$output .= "<td $attributes>" . apply_filters('editable_slug', $category->slug) . "</td>";				break;			case 'links':				$attributes = 'class="links column-links num"' . $style;				$output .= "<td $attributes>$count</td>";				break;			default:				$output .= "<td $attributes>";				$output .= apply_filters('manage_link_categories_custom_column', '', $column_name, $category->term_id);				$output .= "</td>";		}	}	$output .= '</tr>';	return $output;}//// Category Checklists///** * {@internal Missing Short Description}} * * @since unknown */class Walker_Category_Checklist extends Walker {	var $tree_type = 'category';	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id'); //TODO: decouple this	function start_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	function end_lvl(&$output, $depth, $args) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	function start_el(&$output, $category, $depth, $args) {		extract($args);		if ( empty($taxonomy) )			$taxonomy = 'category';		if ( $taxonomy == 'category' )			$name = 'post_category';		else			$name = 'tax_input['.$taxonomy.']';		$class = in_array( $category->term_id, $popular_cats ) ? ' class="popular-category"' : '';		$output .= "\n<li id='{$taxonomy}-{$category->term_id}'$class>" . '<label class="selectit"><input value="' . $category->term_id . '" type="checkbox" name="'.$name.'[]" id="in-'.$taxonomy.'-' . $category->term_id . '"' . checked( in_array( $category->term_id, $selected_cats ), true, false ) . disabled( empty( $args['disabled'] ), false, false ) . ' /> ' . esc_html( apply_filters('the_category', $category->name )) . '</label>';	}	function end_el(&$output, $category, $depth, $args) {		$output .= "</li>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_id * @param unknown_type $descendants_and_self * @param unknown_type $selected_cats * @param unknown_type $popular_cats */function wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {	wp_terms_checklist($post_id,	 	array(			'taxonomy' => 'category',			'descendants_and_self' => $descendants_and_self,			'selected_cats' => $selected_cats,			'popular_cats' => $popular_cats,			'walker' => $walker,			'checked_ontop' => $checked_ontop  ));}/** * Taxonomy independent version of wp_category_checklist * * @param int $post_id * @param array $args */function wp_terms_checklist($post_id = 0, $args = array()) { 	$defaults = array(		'descendants_and_self' => 0,		'selected_cats' => false,		'popular_cats' => false,		'walker' => null,		'taxonomy' => 'category',		'checked_ontop' => true	);	extract( wp_parse_args($args, $defaults), EXTR_SKIP );	if ( empty($walker) || !is_a($walker, 'Walker') )		$walker = new Walker_Category_Checklist;	$descendants_and_self = (int) $descendants_and_self;	$args = array('taxonomy' => $taxonomy);	$tax = get_taxonomy($taxonomy);	$args['disabled'] = !current_user_can($tax->cap->assign_terms);	if ( is_array( $selected_cats ) )		$args['selected_cats'] = $selected_cats;	elseif ( $post_id )		$args['selected_cats'] = wp_get_object_terms($post_id, $taxonomy, array_merge($args, array('fields' => 'ids')));	else		$args['selected_cats'] = array();	if ( is_array( $popular_cats ) )		$args['popular_cats'] = $popular_cats;	else		$args['popular_cats'] = get_terms( $taxonomy, array( 'fields' => 'ids', 'orderby' => 'count', 'order' => 'DESC', 'number' => 10, 'hierarchical' => false ) );	if ( $descendants_and_self ) {		$categories = (array) get_terms($taxonomy, array( 'child_of' => $descendants_and_self, 'hierarchical' => 0, 'hide_empty' => 0 ) );		$self = get_term( $descendants_and_self, $taxonomy );		array_unshift( $categories, $self );	} else {		$categories = (array) get_terms($taxonomy, array('get' => 'all'));	}	if ( $checked_ontop ) {		// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)		$checked_categories = array();		$keys = array_keys( $categories );		foreach( $keys as $k ) {			if ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {				$checked_categories[] = $categories[$k];				unset( $categories[$k] );			}		}		// Put checked cats on top		echo call_user_func_array(array(&$walker, 'walk'), array($checked_categories, 0, $args));	}	// Then the rest of them	echo call_user_func_array(array(&$walker, 'walk'), array($categories, 0, $args));}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $taxonomy * @param unknown_type $default * @param unknown_type $number * @param unknown_type $echo * @return unknown */function wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {	global $post_ID;	if ( $post_ID )		$checked_terms = wp_get_object_terms($post_ID, $taxonomy, array('fields'=>'ids'));	else		$checked_terms = array();	$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );	$tax = get_taxonomy($taxonomy);	if ( ! current_user_can($tax->cap->assign_terms) )		$disabled = 'disabled="disabled"';	else		$disabled = '';	$popular_ids = array();	foreach ( (array) $terms as $term ) {		$popular_ids[] = $term->term_id;		if ( !$echo ) // hack for AJAX use			continue;		$id = "popular-$taxonomy-$term->term_id";		$checked = in_array( $term->term_id, $checked_terms ) ? 'checked="checked"' : '';		?>		<li id="<?php echo $id; ?>" class="popular-category">			<label class="selectit">			<input id="in-<?php echo $id; ?>" type="checkbox" <?php echo $checked; ?> value="<?php echo (int) $term->term_id; ?>" <?php echo $disabled ?>/>				<?php echo esc_html( apply_filters( 'the_category', $term->name ) ); ?>			</label>		</li>		<?php	}	return $popular_ids;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id */function wp_link_category_checklist( $link_id = 0 ) {	$default = 1;	if ( $link_id ) {		$checked_categories = wp_get_link_cats( $link_id );		// No selected categories, strange		if ( ! count( $checked_categories ) )			$checked_categories[] = $default;	} else {		$checked_categories[] = $default;	}	$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );	if ( empty( $categories ) )		return;	foreach ( $categories as $category ) {		$cat_id = $category->term_id;		$name = esc_html( apply_filters( 'the_category', $category->name ) );		$checked = in_array( $cat_id, $checked_categories ) ? ' checked="checked"' : '';		echo '<li id="link-category-', $cat_id, '"><label for="in-link-category-', $cat_id, '" class="selectit"><input value="', $cat_id, '" type="checkbox" name="link_category[]" id="in-link-category-', $cat_id, '"', $checked, '/> ', $name, "</label></li>";	}}// Tag stuff// Returns a single tag row (see tag_rows below)// Note: this is also used in admin-ajax.php!/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $tag * @param unknown_type $class * @return unknown */function _tag_row( $tag, $level, $taxonomy = 'post_tag' ) {		global $post_type, $current_screen;		static $row_class = '';		$row_class = ($row_class == '' ? ' class="alternate"' : '');		$count = number_format_i18n( $tag->count );		$tax = get_taxonomy($taxonomy);		if ( 'post_tag' == $taxonomy ) {			$tagsel = 'tag';		} elseif ( 'category' == $taxonomy ) {			$tagsel = 'category_name';		} elseif ( ! empty($tax->query_var) ) {			$tagsel = $tax->query_var;		} else {			$tagsel = $taxonomy;		}		$pad = str_repeat( '&#8212; ', max(0, $level) );		$name = apply_filters( 'term_name', $pad . ' ' . $tag->name, $tag );		$qe_data = get_term($tag->term_id, $taxonomy, object, 'edit');		$edit_link = "edit-tags.php?action=edit&amp;taxonomy=$taxonomy&amp;post_type=$post_type&amp;tag_ID=$tag->term_id";		$out = '';		$out .= '<tr id="tag-' . $tag->term_id . '"' . $row_class . '>';		$columns = get_column_headers($current_screen);		$hidden = get_hidden_columns($current_screen);		$default_term = get_option('default_' . $taxonomy);		foreach ( $columns as $column_name => $column_display_name ) {			$class = "class=\"$column_name column-$column_name\"";			$style = '';			if ( in_array($column_name, $hidden) )				$style = ' style="display:none;"';			$attributes = "$class$style";			switch ($column_name) {				case 'cb':					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$out .= '<th scope="row" class="check-column"> <input type="checkbox" name="delete_tags[]" value="' . $tag->term_id . '" /></th>';					else						$out .= '<th scope="row" class="check-column">&nbsp;</th>';					break;				case 'name':					$out .= '<td ' . $attributes . '><strong><a class="row-title" href="' . $edit_link . '" title="' . esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $name)) . '">' . $name . '</a></strong><br />';					$actions = array();					if ( current_user_can($tax->cap->edit_terms) ) {						$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';						$actions['inline hide-if-no-js'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';					}					if ( current_user_can($tax->cap->delete_terms) && $tag->term_id != $default_term )						$actions['delete'] = "<a class='delete-tag' href='" . wp_nonce_url("edit-tags.php?action=delete&amp;taxonomy=$taxonomy&amp;tag_ID=$tag->term_id", 'delete-tag_' . $tag->term_id) . "'>" . __('Delete') . "</a>";					$actions = apply_filters('tag_row_actions', $actions, $tag);					$actions = apply_filters("${taxonomy}_row_actions", $actions, $tag);					$action_count = count($actions);					$i = 0;					$out .= '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( $i == $action_count ) ? $sep = '' : $sep = ' | ';						$out .= "<span class='$action'>$link$sep</span>";					}					$out .= '</div>';					$out .= '<div class="hidden" id="inline_' . $qe_data->term_id . '">';					$out .= '<div class="name">' . $qe_data->name . '</div>';					$out .= '<div class="slug">' . apply_filters('editable_slug', $qe_data->slug) . '</div>';					$out .= '<div class="parent">' . $qe_data->parent . '</div></div></td>';					break;				case 'description':					$out .= "<td $attributes>$tag->description</td>";					break;				case 'slug':					$out .= "<td $attributes>" . apply_filters('editable_slug', $tag->slug) . "</td>";					break;				case 'posts':					$attributes = 'class="posts column-posts num"' . $style;					$out .= "<td $attributes><a href='edit.php?$tagsel=$tag->slug&amp;post_type=$post_type'>$count</a></td>";					break;				default:					$out .= "<td $attributes>";					$out .= apply_filters("manage_${taxonomy}_custom_column", '', $column_name, $tag->term_id);					$out .= "</td>";			}		}		$out .= "</tr>\n";		return $out;}// Outputs appropriate rows for the Nth page of the Tag Management screen,// assuming M tags displayed at a time on the page// Returns the number of tags displayed/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $pagesize * @param unknown_type $searchterms * @return unknown */function tag_rows( $page = 1, $pagesize = 20, $searchterms = '', $taxonomy = 'post_tag' ) {	// Get a page worth of tags	$start = ($page - 1) * $pagesize;	$args = array('offset' => $start, 'number' => $pagesize, 'hide_empty' => 0);	if ( !empty( $searchterms ) )		$args['search'] = $searchterms;	// convert it to table rows	$out = '';	$count = 0;	if ( is_taxonomy_hierarchical($taxonomy) ) {		// We'll need the full set of terms then.		$args['number'] = $args['offset'] = 0;		$terms = get_terms( $taxonomy, $args );		if ( !empty( $searchterms ) ) // Ignore children on searches.			$children = array();		else			$children = _get_term_hierarchy($taxonomy);		// Some funky recursion to get the job done(Paging & parents mainly) is contained within, Skip it for non-hierarchical taxonomies for performance sake		$out .= _term_rows($taxonomy, $terms, $children, $page, $pagesize, $count);	} else {		$terms = get_terms( $taxonomy, $args );		foreach( $terms as $term )			$out .= _tag_row( $term, 0, $taxonomy );		$count = $pagesize; // Only displaying a single page.	}	echo $out;	return $count;}function _term_rows( $taxonomy, $terms, &$children, $page = 1, $per_page = 20, &$count, $parent = 0, $level = 0 ) {	$start = ($page - 1) * $per_page;	$end = $start + $per_page;	$output = '';	foreach ( $terms as $key => $term ) {		if ( $count >= $end )			break;		if ( $term->parent != $parent && empty($_GET['s']) )			continue;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $term->parent > 0 && empty($_GET['s']) ) {			$my_parents = $parent_ids = array();			$p = $term->parent;			while ( $p ) {				$my_parent = get_term( $p, $taxonomy );				$my_parents[] = $my_parent;				$p = $my_parent->parent;				if ( in_array($p, $parent_ids) ) // Prevent parent loops.					break;				$parent_ids[] = $p;			}			unset($parent_ids);			$num_parents = count($my_parents);			while ( $my_parent = array_pop($my_parents) ) {				$output .=  "\t" . _tag_row( $my_parent, $level - $num_parents, $taxonomy );				$num_parents--;			}		}		if ( $count >= $start )			$output .= "\t" . _tag_row( $term, $level, $taxonomy );		++$count;		unset($terms[$key]);		if ( isset($children[$term->term_id]) && empty($_GET['s']) )			$output .= _term_rows( $taxonomy, $terms, $children, $page, $per_page, $count, $term->term_id, $level + 1 );	}	return $output;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_posts_columns( $screen = '') {	if ( empty($screen) )		$post_type = 'post';	else		$post_type = $screen->post_type;	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	/* translators: manage posts column name */	$posts_columns['title'] = _x('Title', 'column name');	$posts_columns['author'] = __('Author');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'category') )		$posts_columns['categories'] = __('Categories');	if ( empty($post_type) || is_object_in_taxonomy($post_type, 'post_tag') )		$posts_columns['tags'] = __('Tags');	$post_status = !empty($_REQUEST['post_status']) ? $_REQUEST['post_status'] : 'all';	if ( !in_array( $post_status, array('pending', 'draft', 'future') ) && ( empty($post_type) || post_type_supports($post_type, 'comments') ) )		$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	$posts_columns['date'] = __('Date');	if ( 'page' == $post_type )		$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );	else		$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );	$posts_columns = apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );	return $posts_columns;}// define the columns to display, the syntax is 'internal name' => 'display name'/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_media_columns() {	$posts_columns = array();	$posts_columns['cb'] = '<input type="checkbox" />';	$posts_columns['icon'] = '';	/* translators: column name */	$posts_columns['media'] = _x('File', 'column name');	$posts_columns['author'] = __('Author');	//$posts_columns['tags'] = _x('Tags', 'column name');	/* translators: column name */	$posts_columns['parent'] = _x('Attached to', 'column name');	$posts_columns['comments'] = '<div class="vers"><img alt="Comments" src="' . esc_url( admin_url( 'images/comment-grey-bubble.png' ) ) . '" /></div>';	//$posts_columns['comments'] = __('Comments');	/* translators: column name */	$posts_columns['date'] = _x('Date', 'column name');	$posts_columns = apply_filters('manage_media_columns', $posts_columns);	return $posts_columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_manage_pages_columns() {	return wp_manage_posts_columns();}/** * Get the column headers for a screen * * @since unknown * * @param string|object $screen The screen you want the headers for * @return array Containing the headers in the format id => UI String */function get_column_headers($screen) {	global $_wp_column_headers;	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	if ( is_string($screen) )		$screen = convert_to_screen($screen);	// Store in static to avoid running filters on each call	if ( isset($_wp_column_headers[$screen->id]) )		return $_wp_column_headers[$screen->id];	switch ($screen->base) {		case 'edit':			 $_wp_column_headers[$screen->id] = wp_manage_posts_columns( $screen );			 break;		case 'edit-comments':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'author' => __('Author'),				/* translators: column name */				'comment' => _x('Comment', 'column name'),				//'date' => __('Submitted'),				'response' => __('In Response To')			);			break;		case 'link-manager':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'url' => __('URL'),				'categories' => __('Categories'),				'rel' => __('Relationship'),				'visible' => __('Visible'),				'rating' => __('Rating')			);			break;		case 'upload':			$_wp_column_headers[$screen->id] = wp_manage_media_columns();			break;		case 'categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'edit-link-categories':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'links' => __('Links')			);			break;		case 'edit-tags':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'name' => __('Name'),				'description' => __('Description'),				'slug' => __('Slug'),				'posts' => __('Posts')			);			break;		case 'users':			$_wp_column_headers[$screen->id] = array(				'cb' => '<input type="checkbox" />',				'username' => __('Username'),				'name' => __('Name'),				'email' => __('E-mail'),				'role' => __('Role'),				'posts' => __('Posts')			);			break;		default :			$_wp_column_headers[$screen->id] = array();	}	$_wp_column_headers[$screen->id] = apply_filters('manage_' . $screen->id . '_columns', $_wp_column_headers[$screen->id]);	return $_wp_column_headers[$screen->id];}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen * @param unknown_type $id */function print_column_headers( $screen, $id = true ) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = get_column_headers( $screen );	$hidden = get_hidden_columns($screen);	$styles = array();	foreach ( $columns as $column_key => $column_display_name ) {		$class = ' class="manage-column';		$class .= " column-$column_key";		if ( 'cb' == $column_key )			$class .= ' check-column';		elseif ( in_array($column_key, array('posts', 'comments', 'links')) )			$class .= ' num';		$class .= '"';		$style = '';		if ( in_array($column_key, $hidden) )			$style = 'display:none;';		if ( isset($styles[$screen->id]) && isset($styles[$screen->id][$column_key]) )			$style .= ' ' . $styles[$screen>id][$column_key];		$style = ' style="' . $style . '"';?>	<th scope="col" <?php echo $id ? "id=\"$column_key\"" : ""; echo $class; echo $style; ?>><?php echo $column_display_name; ?></th><?php }}/** * Register column headers for a particular screen.  The header names will be listed in the Screen Options. * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param array $columns An array of columns with column IDs as the keys and translated column names as the values * @see get_column_headers(), print_column_headers(), get_hidden_columns() */function register_column_headers($screen, $columns) {	global $_wp_column_headers;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_column_headers) )		$_wp_column_headers = array();	$_wp_column_headers[$screen->id] = $columns;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function get_hidden_columns($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	return (array) get_user_option( 'manage' . $screen->id. 'columnshidden' );}/** * {@internal Missing Short Description}} * * Outputs the quick edit and bulk edit table rows for posts and pages * * @since 2.7 * * @param string $screen */function inline_edit_row( $screen ) {	global $current_user, $mode;	if ( is_string($screen) ) {		$screen = array('id' => 'edit-' . $screen, 'base' => 'edit', 'post_type' => $screen );		$screen = (object) $screen;	}	$post = get_default_post_to_edit( $screen->post_type );	$post_type_object = get_post_type_object( $screen->post_type );	$taxonomy_names = get_object_taxonomies( $screen->post_type );	$hierarchical_taxonomies = array();	$flat_taxonomies = array();	foreach ( $taxonomy_names as $taxonomy_name ) {		$taxonomy = get_taxonomy( $taxonomy_name);		if ( !$taxonomy->show_ui )			continue;		if ( $taxonomy->hierarchical )			$hierarchical_taxonomies[] = $taxonomy;		else			$flat_taxonomies[] = $taxonomy;	}	$columns = wp_manage_posts_columns($screen);	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns($screen) ) );	$col_count = count($columns) - count($hidden);	$m = ( isset($mode) && 'excerpt' == $mode ) ? 'excerpt' : 'list';	$can_publish = current_user_can($post_type_object->cap->publish_posts);	$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );?><form method="get" action=""><table style="display: none"><tbody id="inlineedit">	<?php	$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';	$bulk = 0;	while ( $bulk < 2 ) { ?>	<tr id="<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>" class="inline-edit-row inline-edit-row-<?php echo "$hclass inline-edit-$screen->post_type ";		echo $bulk ? "bulk-edit-row bulk-edit-row-$hclass bulk-edit-$screen->post_type" : "quick-edit-row quick-edit-row-$hclass inline-edit-$screen->post_type";	?>" style="display: none"><td colspan="<?php echo $col_count; ?>">	<fieldset class="inline-edit-col-left"><div class="inline-edit-col">		<h4><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></h4><?phpif ( post_type_supports( $screen->post_type, 'title' ) ) :	if ( $bulk ) : ?>		<div id="bulk-title-div">			<div id="bulk-titles"></div>		</div><?php else : // $bulk ?>		<label>			<span class="title"><?php _e( 'Title' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_title" class="ptitle" value="" /></span>		</label>		<label>			<span class="title"><?php _e( 'Slug' ); ?></span>			<span class="input-text-wrap"><input type="text" name="post_name" value="" /></span>		</label><?php endif; // $bulkendif; // post_type_supports title ?><?php if ( !$bulk ) : ?>		<label><span class="title"><?php _e( 'Date' ); ?></span></label>		<div class="inline-edit-date">			<?php touch_time(1, 1, 4, 1); ?>		</div>		<br class="clear" /><?php endif; // $bulk	if ( post_type_supports( $screen->post_type, 'author' ) ) :		$authors = get_editable_user_ids( $current_user->id, true, $screen->post_type ); // TODO: ROLE SYSTEM		$authors_dropdown = '';		if ( $authors && count( $authors ) > 1 ) :			$users_opt = array('include' => $authors, 'name' => 'post_author', 'class'=> 'authors', 'multi' => 1, 'echo' => 0);			if ( $bulk )				$users_opt['show_option_none'] = __('&mdash; No Change &mdash;');			$authors_dropdown  = '<label>';			$authors_dropdown .= '<span class="title">' . __( 'Author' ) . '</span>';			$authors_dropdown .= wp_dropdown_users( $users_opt );			$authors_dropdown .= '</label>';		endif; // authors?><?php if ( !$bulk ) echo $authors_dropdown;endif; // post_type_supports authorif ( !$bulk ) :?>		<div class="inline-edit-group">			<label class="alignleft">				<span class="title"><?php _e( 'Password' ); ?></span>				<span class="input-text-wrap"><input type="text" name="post_password" class="inline-edit-password-input" value="" /></span>			</label>			<em style="margin:5px 10px 0 0" class="alignleft">				<?php				/* translators: Between password field and private checkbox on post quick edit interface */				echo __( '&ndash;OR&ndash;' );				?>			</em>			<label class="alignleft inline-edit-private">				<input type="checkbox" name="keep_private" value="private" />				<span class="checkbox-title"><?php echo __('Private'); ?></span>			</label>		</div><?php endif; ?>	</div></fieldset><?php if ( count($hierarchical_taxonomies) && !$bulk ) : ?>	<fieldset class="inline-edit-col-center inline-edit-categories"><div class="inline-edit-col"><?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>		<span class="title inline-edit-categories-label"><?php echo esc_html($taxonomy->labels->name) ?>			<span class="catshow"><?php _e('[more]'); ?></span>			<span class="cathide" style="display:none;"><?php _e('[less]'); ?></span>		</span>		<input type="hidden" name="<?php echo ( $taxonomy->name == 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr($taxonomy->name) . '][]'; ?>" value="0" />		<ul class="cat-checklist <?php echo esc_attr($taxonomy->name)?>-checklist">			<?php wp_terms_checklist(null, array('taxonomy' => $taxonomy->name)) ?>		</ul><?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>	</div></fieldset><?php endif; // count($hierarchical_taxonomies) && !$bulk ?>	<fieldset class="inline-edit-col-right"><div class="inline-edit-col"><?php	if ( post_type_supports( $screen->post_type, 'author' ) && $bulk )		echo $authors_dropdown;?><?php if ( $post_type_object->hierarchical ) : ?>		<label>			<span class="title"><?php _e( 'Parent' ); ?></span><?php	$dropdown_args = array('post_type' => $post_type_object->name, 'selected' => $post->post_parent, 'name' => 'post_parent', 'show_option_none' => __('Main Page (no parent)'), 'option_none_value' => 0, 'sort_column'=> 'menu_order, post_title');	if ( $bulk )		$dropdown_args['show_option_no_change'] =  __('&mdash; No Change &mdash;');	$dropdown_args = apply_filters('quick_edit_dropdown_pages_args', $dropdown_args);	wp_dropdown_pages($dropdown_args);?>		</label><?php if ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :		if ( !$bulk ) : ?>		<label>			<span class="title"><?php _e( 'Order' ); ?></span>			<span class="input-text-wrap"><input type="text" name="menu_order" class="inline-edit-menu-order-input" value="<?php echo $post->menu_order ?>" /></span>		</label><?php	endif; // !$bulk ?>		<label>			<span class="title"><?php _e( 'Template' ); ?></span>			<select name="page_template"><?php	if ( $bulk ) : ?>				<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php	endif; // $bulk ?>				<option value="default"><?php _e( 'Default Template' ); ?></option>				<?php page_template_dropdown() ?>			</select>		</label><?php	endif; // post_type_supports page-attributesendif; // $post_type_object->hierarchical ?><?php if ( count($flat_taxonomies) && !$bulk ) : ?><?php foreach ( $flat_taxonomies as $taxonomy ) : ?>		<label class="inline-edit-tags">			<span class="title"><?php echo esc_html($taxonomy->labels->name) ?></span>			<textarea cols="22" rows="1" name="tax_input[<?php echo esc_attr($taxonomy->name)?>]" class="tax_input_<?php echo esc_attr($taxonomy->name)?>"></textarea>		</label><?php endforeach; //$flat_taxonomies as $taxonomy ?><?php endif; // count($flat_taxonomies) && !$bulk  ?><?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :	if ( $bulk ) : ?>		<div class="inline-edit-group">	<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>		<label class="alignleft">			<span class="title"><?php _e( 'Comments' ); ?></span>			<select name="comment_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>		<label class="alignright">			<span class="title"><?php _e( 'Pings' ); ?></span>			<select name="ping_status">				<option value=""><?php _e('&mdash; No Change &mdash;'); ?></option>				<option value="open"><?php _e('Allow'); ?></option>				<option value="closed"><?php _e('Do not allow'); ?></option>			</select>		</label>	<?php endif; ?>		</div><?php else : // $bulk ?>		<div class="inline-edit-group">		<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="comment_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Comments' ); ?></span>			</label>		<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>			<label class="alignleft">				<input type="checkbox" name="ping_status" value="open" />				<span class="checkbox-title"><?php _e( 'Allow Pings' ); ?></span>			</label>		<?php endif; ?>		</div><?php endif; // $bulkendif; // post_type_supports comments or pings ?>		<div class="inline-edit-group">			<label class="inline-edit-status alignleft">				<span class="title"><?php _e( 'Status' ); ?></span>				<select name="_status"><?php if ( $bulk ) : ?>					<option value="-1"><?php _e('&mdash; No Change &mdash;'); ?></option><?php endif; // $bulk ?>				<?php if ( $can_publish ) : // Contributors only get "Unpublished" and "Pending Review" ?>					<option value="publish"><?php _e( 'Published' ); ?></option>					<option value="future"><?php _e( 'Scheduled' ); ?></option><?php if ( $bulk ) : ?>					<option value="private"><?php _e('Private') ?></option><?php endif; // $bulk ?>				<?php endif; ?>					<option value="pending"><?php _e( 'Pending Review' ); ?></option>					<option value="draft"><?php _e( 'Draft' ); ?></option>				</select>			</label><?php if ( 'post' == $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?><?php	if ( $bulk ) : ?>			<label class="alignright">				<span class="title"><?php _e( 'Sticky' ); ?></span>				<select name="sticky">					<option value="-1"><?php _e( '&mdash; No Change &mdash;' ); ?></option>					<option value="sticky"><?php _e( 'Sticky' ); ?></option>					<option value="unsticky"><?php _e( 'Not Sticky' ); ?></option>				</select>			</label><?php	else : // $bulk ?>			<label class="alignleft">				<input type="checkbox" name="sticky" value="sticky" />				<span class="checkbox-title"><?php _e( 'Make this post sticky' ); ?></span>			</label><?php	endif; // $bulk ?><?php endif; // !$is_page && $can_publish && current_user_can( 'edit_others_cap' ) ?>		</div>	</div></fieldset><?php	foreach ( $columns as $column_name => $column_display_name ) {		if ( isset( $core_columns[$column_name] ) )			continue;		do_action( $bulk ? 'bulk_edit_custom_box' : 'quick_edit_custom_box', $column_name, $screen->post_type );	}?>	<p class="submit inline-edit-save">		<a accesskey="c" href="#inline-edit" title="<?php _e('Cancel'); ?>" class="button-secondary cancel alignleft"><?php _e('Cancel'); ?></a>		<?php if ( ! $bulk ) {			wp_nonce_field( 'inlineeditnonce', '_inline_edit', false );			$update_text = __( 'Update' );			?>			<a accesskey="s" href="#inline-edit" title="<?php _e('Update'); ?>" class="button-primary save alignright"><?php echo esc_attr( $update_text ); ?></a>			<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />		<?php } else {			$update_text = __( 'Update' );		?>			<input accesskey="s" class="button-primary alignright" type="submit" name="bulk_edit" value="<?php echo esc_attr( $update_text ); ?>" />		<?php } ?>		<input type="hidden" name="post_view" value="<?php echo esc_attr($m); ?>" />		<input type="hidden" name="screen" value="<?php echo esc_attr($screen->id); ?>" />		<br class="clear" />	</p>	</td></tr><?php	$bulk++;	} ?>	</tbody></table></form><?php}// adds hidden fields with the data for use in the inline editor for posts and pages/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post */function get_inline_data($post) {	$post_type_object = get_post_type_object($post->post_type);	if ( ! current_user_can($post_type_object->cap->edit_post, $post->ID) )		return;	$title = esc_attr( get_the_title( $post->ID ) );	echo '<div class="hidden" id="inline_' . $post->ID . '">	<div class="post_title">' . $title . '</div>	<div class="post_name">' . apply_filters('editable_slug', $post->post_name) . '</div>	<div class="post_author">' . $post->post_author . '</div>	<div class="comment_status">' . $post->comment_status . '</div>	<div class="ping_status">' . $post->ping_status . '</div>	<div class="_status">' . $post->post_status . '</div>	<div class="jj">' . mysql2date( 'd', $post->post_date, false ) . '</div>	<div class="mm">' . mysql2date( 'm', $post->post_date, false ) . '</div>	<div class="aa">' . mysql2date( 'Y', $post->post_date, false ) . '</div>	<div class="hh">' . mysql2date( 'H', $post->post_date, false ) . '</div>	<div class="mn">' . mysql2date( 'i', $post->post_date, false ) . '</div>	<div class="ss">' . mysql2date( 's', $post->post_date, false ) . '</div>	<div class="post_password">' . esc_html( $post->post_password ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="post_parent">' . $post->post_parent . '</div>';	if ( $post->post_type == 'page' )		echo '<div class="page_template">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';	if ( $post_type_object->hierarchical )		echo '<div class="menu_order">' . $post->menu_order . '</div>';	$taxonomy_names = get_object_taxonomies( $post->post_type );	foreach ( $taxonomy_names as $taxonomy_name) {		$taxonomy = get_taxonomy( $taxonomy_name );		if ( $taxonomy->hierarchical && $taxonomy->show_ui )				echo '<div class="post_category" id="'.$taxonomy_name.'_'.$post->ID.'">' . implode( ',', wp_get_object_terms( $post->ID, $taxonomy_name, array('fields'=>'ids')) ) . '</div>';		elseif ( $taxonomy->show_ui )			echo '<div class="tags_input" id="'.$taxonomy_name.'_'.$post->ID.'">' . esc_html( str_replace( ',', ', ', get_terms_to_edit($post->ID, $taxonomy_name) ) ) . '</div>';	}	if ( !$post_type_object->hierarchical )		echo '<div class="sticky">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';	echo '</div>';}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $posts */function post_rows( $posts = array() ) {	global $wp_query, $post, $mode;	add_filter('the_title','esc_html');	// Create array of post IDs.	$post_ids = array();	if ( empty($posts) )		$posts = &$wp_query->posts;	foreach ( $posts as $a_post )		$post_ids[] = $a_post->ID;	$comment_pending_count = get_pending_comments_num($post_ids);	foreach ( $posts as $post ) {		if ( empty($comment_pending_count[$post->ID]) )			$comment_pending_count[$post->ID] = 0;		_post_row($post, $comment_pending_count[$post->ID], $mode);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $a_post * @param unknown_type $pending_comments * @param unknown_type $mode */function _post_row($a_post, $pending_comments, $mode) {	global $post, $current_user, $current_screen;	static $rowclass;	$global_post = $post;	$post = $a_post;	setup_postdata($post);	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$post_owner = ( $current_user->ID == $post->post_author ? 'self' : 'other' );	$edit_link = get_edit_post_link( $post->ID );	$title = _draft_or_post_title();	$post_type_object = get_post_type_object($post->post_type);?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo trim( $rowclass . ' author-' . $post_owner . ' status-' . $post->post_status ); ?> iedit' valign="top"><?php	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns( $current_screen );	foreach ( $posts_columns as $column_name=>$column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {		case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $post->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;		case 'date':			if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {				$t_time = $h_time = __('Unpublished');				$time_diff = 0;			} else {				$t_time = get_the_time(__('Y/m/d g:i:s A'));				$m_time = $post->post_date;				$time = get_post_time('G', true, $post);				$time_diff = time() - $time;				if ( $time_diff > 0 && $time_diff < 24*60*60 )					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );				else					$h_time = mysql2date(__('Y/m/d'), $m_time);			}			echo '<td ' . $attributes . '>';			if ( 'excerpt' == $mode )				echo apply_filters('post_date_column_time', $t_time, $post, $column_name, $mode);			else				echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $post, $column_name, $mode) . '</abbr>';			echo '<br />';			if ( 'publish' == $post->post_status ) {				_e('Published');			} elseif ( 'future' == $post->post_status ) {				if ( $time_diff > 0 )					echo '<strong class="attention">' . __('Missed schedule') . '</strong>';				else					_e('Scheduled');			} else {				_e('Last Modified');			}			echo '</td>';		break;		case 'title':			$attributes = 'class="post-title column-title"' . $style;		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $title ?></a><?php } else { echo $title; }; _post_states($post); ?></strong>		<?php			if ( 'excerpt' == $mode )				the_excerpt();			$actions = array();			if ( current_user_can($post_type_object->cap->edit_post, $post->ID) && 'trash' != $post->post_status ) {				$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '" title="' . esc_attr(__('Edit this item')) . '">' . __('Edit') . '</a>';				$actions['inline hide-if-no-js'] = '<a href="#" class="editinline" title="' . esc_attr(__('Edit this item inline')) . '">' . __('Quick&nbsp;Edit') . '</a>';			}			if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) {				if ( 'trash' == $post->post_status )					$actions['untrash'] = "<a title='" . esc_attr(__('Restore this item from the Trash')) . "' href='" . wp_nonce_url( admin_url( sprintf($post_type_object->_edit_link . '&amp;action=untrash', $post->ID) ), 'untrash-' . $post->post_type . '_' . $post->ID ) . "'>" . __('Restore') . "</a>";				elseif ( EMPTY_TRASH_DAYS )					$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this item to the Trash')) . "' href='" . get_delete_post_link($post->ID) . "'>" . __('Trash') . "</a>";				if ( 'trash' == $post->post_status || !EMPTY_TRASH_DAYS )					$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this item permanently')) . "' href='" . get_delete_post_link($post->ID, '', true) . "'>" . __('Delete Permanently') . "</a>";			}			if ( in_array($post->post_status, array('pending', 'draft')) ) {				if ( current_user_can($post_type_object->cap->edit_post, $post->ID) )					$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($post->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';			} elseif ( 'trash' != $post->post_status ) {				$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';			}			$actions = apply_filters('post_row_actions', $actions, $post);			$action_count = count($actions);			$i = 0;			echo '<div class="row-actions">';			foreach ( $actions as $action => $link ) {				++$i;				( $i == $action_count ) ? $sep = '' : $sep = ' | ';				echo "<span class='$action'>$link$sep</span>";			}			echo '</div>';			get_inline_data($post);		?>		</td>		<?php		break;		case 'categories':		?>		<td <?php echo $attributes ?>><?php			$categories = get_the_category();			if ( !empty( $categories ) ) {				$out = array();				foreach ( $categories as $c )					$out[] = "<a href='edit.php?category_name=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'category', 'display')) . "</a>";					echo join( ', ', $out );			} else {				_e('Uncategorized');			}		?></td>		<?php		break;		case 'tags':		?>		<td <?php echo $attributes ?>><?php			$tags = get_the_tags($post->ID);			if ( !empty( $tags ) ) {				$out = array();				foreach ( $tags as $c )					$out[] = "<a href='edit.php?tag=$c->slug'> " . esc_html(sanitize_term_field('name', $c->name, $c->term_id, 'post_tag', 'display')) . "</a>";				echo join( ', ', $out );			} else {				_e('No Tags');			}		?></td>		<?php		break;		case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php			$pending_phrase = sprintf( __('%s pending'), number_format( $pending_comments ) );			if ( $pending_comments )				echo '<strong>';				comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');				if ( $pending_comments )				echo '</strong>';		?>		</div></td>		<?php		break;		case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post->post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;		case 'control_view':		?>		<td><a href="<?php the_permalink(); ?>" rel="permalink" class="view"><?php _e('View'); ?></a></td>		<?php		break;		case 'control_edit':		?>		<td><?php if ( current_user_can($post_type_object->cap->edit_post, $post->ID) ) { echo "<a href='$edit_link' class='edit'>" . __('Edit') . "</a>"; } ?></td>		<?php		break;		case 'control_delete':		?>		<td><?php if ( current_user_can($post_type_object->cap->delete_post, $post->ID) ) { echo "<a href='" . wp_nonce_url("post.php?action=delete&amp;post=$id", 'delete-post_' . $post->ID) . "' class='delete'>" . __('Delete') . "</a>"; } ?></td>		<?php		break;		default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_posts_custom_column', $column_name, $post->ID); ?></td>		<?php		break;	}}?>	</tr><?php	$post = $global_post;}/* * display one row if the page doesn't have any children * otherwise, display the row and its children in subsequent rows *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page * @param unknown_type $level */function display_page_row( $page, $level = 0 ) {	global $post, $current_screen;	static $rowclass;	$post = $page;	setup_postdata($page);	if ( 0 == $level && (int)$page->post_parent > 0 ) {		//sent level 0 by accident, by default, or because we don't know the actual level		$find_main_page = (int)$page->post_parent;		while ( $find_main_page > 0 ) {			$parent = get_page($find_main_page);			if ( is_null($parent) )				break;			$level++;			$find_main_page = (int)$parent->post_parent;			if ( !isset($parent_name) )				$parent_name = $parent->post_title;		}	}	$page->post_title = esc_html( $page->post_title );	$pad = str_repeat( '&#8212; ', $level );	$id = (int) $page->ID;	$rowclass = 'alternate' == $rowclass ? '' : 'alternate';	$posts_columns = get_column_headers( $current_screen );	$hidden = get_hidden_columns(  $current_screen );	$title = _draft_or_post_title();	$post_type = $page->post_type;	$post_type_object = get_post_type_object($post_type);?><tr id="page-<?php echo $id; ?>" class="<?php echo $rowclass; ?> iedit"><?phpforeach ( $posts_columns as $column_name => $column_display_name ) {	$class = "class=\"$column_name column-$column_name\"";	$style = '';	if ( in_array($column_name, $hidden) )		$style = ' style="display:none;"';	$attributes = "$class$style";	switch ($column_name) {	case 'cb':		?>		<th scope="row" class="check-column"><?php if ( current_user_can( $post_type_object->cap->edit_post, $page->ID ) ) { ?><input type="checkbox" name="post[]" value="<?php the_ID(); ?>" /><?php } ?></th>		<?php		break;	case 'date':		if ( '0000-00-00 00:00:00' == $page->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');			$time_diff = 0;		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $page->post_date;			$time = get_post_time('G', true);			$time_diff = time() - $time;			if ( $time_diff > 0 && $time_diff < 24*60*60 )				$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			else				$h_time = mysql2date(__('Y/m/d'), $m_time);		}		echo '<td ' . $attributes . '>';		echo '<abbr title="' . $t_time . '">' . apply_filters('post_date_column_time', $h_time, $page, $column_name, '') . '</abbr>';		echo '<br />';		if ( 'publish' == $page->post_status ) {			_e('Published');		} elseif ( 'future' == $page->post_status ) {			if ( $time_diff > 0 )				echo '<strong class="attention">' . __('Missed schedule') . '</strong>';			else				_e('Scheduled');		} else {			_e('Last Modified');		}		echo '</td>';		break;	case 'title':		$attributes = 'class="post-title page-title column-title"' . $style;		$edit_link = get_edit_post_link( $page->ID );		?>		<td <?php echo $attributes ?>><strong><?php if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) { ?><a class="row-title" href="<?php echo $edit_link; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $title)); ?>"><?php echo $pad; echo $title ?></a><?php } else { echo $pad; echo $title; }; _post_states($page); echo isset($parent_name) ? ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html($parent_name) : ''; ?></strong>		<?php		$actions = array();		if ( current_user_can($post_type_object->cap->edit_post, $page->ID) && $post->post_status != 'trash' ) {			$actions['edit'] = '<a href="' . $edit_link . '" title="' . esc_attr(__('Edit this page')) . '">' . __('Edit') . '</a>';			$actions['inline'] = '<a href="#" class="editinline">' . __('Quick&nbsp;Edit') . '</a>';		}		if ( current_user_can($post_type_object->cap->delete_post, $page->ID) ) {			if ( $post->post_status == 'trash' )				$actions['untrash'] = "<a title='" . esc_attr(__('Remove this page from the Trash')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=untrash&amp;post=$page->ID", 'untrash-' . $post->post_type . '_' . $page->ID) . "'>" . __('Restore') . "</a>";			elseif ( EMPTY_TRASH_DAYS )				$actions['trash'] = "<a class='submitdelete' title='" . esc_attr(__('Move this page to the Trash')) . "' href='" . get_delete_post_link($page->ID) . "'>" . __('Trash') . "</a>";			if ( $post->post_status == 'trash' || !EMPTY_TRASH_DAYS )				$actions['delete'] = "<a class='submitdelete' title='" . esc_attr(__('Delete this page permanently')) . "' href='" . wp_nonce_url("post.php?post_type=$post_type&amp;action=delete&amp;post=$page->ID", 'delete-' . $post->post_type . '_' . $page->ID) . "'>" . __('Delete Permanently') . "</a>";		}		if ( in_array($post->post_status, array('pending', 'draft')) ) {			if ( current_user_can($post_type_object->cap->edit_post, $page->ID) )				$actions['view'] = '<a href="' . esc_url( add_query_arg( 'preview', 'true', get_permalink($page->ID) ) ) . '" title="' . esc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('Preview') . '</a>';		} elseif ( $post->post_status != 'trash' ) {			$actions['view'] = '<a href="' . get_permalink($page->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		}		$actions = apply_filters('page_row_actions', $actions, $page);		$action_count = count($actions);		$i = 0;		echo '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		}		echo '</div>';		get_inline_data($post);		echo '</td>';		break;	case 'comments':		?>		<td <?php echo $attributes ?>><div class="post-com-count-wrapper">		<?php		$left = get_pending_comments_num( $page->ID );		$pending_phrase = sprintf( __('%s pending'), number_format( $left ) );		if ( $left )			echo '<strong>';		comments_number("<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$id' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');		if ( $left )			echo '</strong>';		?>		</div></td>		<?php		break;	case 'author':		?>		<td <?php echo $attributes ?>><a href="edit.php?post_type=<?php echo $post_type; ?>&amp;author=<?php the_author_meta('ID'); ?>"><?php the_author() ?></a></td>		<?php		break;	default:		?>		<td <?php echo $attributes ?>><?php do_action('manage_pages_custom_column', $column_name, $id); ?></td>		<?php		break;	}}?></tr><?php}/* * displays pages in hierarchical order with paging support *//** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $pages * @param unknown_type $pagenum * @param unknown_type $per_page * @return unknown */function page_rows($pages, $pagenum = 1, $per_page = 20) {	global $wpdb;	$level = 0;	if ( ! $pages ) {		$pages = get_pages( array('sort_column' => 'menu_order') );		if ( ! $pages )			return false;	}	/*	 * arrange pages into two parts: top level pages and children_pages	 * children_pages is two dimensional array, eg.	 * children_pages[10][] contains all sub-pages whose parent is 10.	 * It only takes O(N) to arrange this and it takes O(1) for subsequent lookup operations	 * If searching, ignore hierarchy and treat everything as top level	 */	if ( empty($_GET['s']) ) {		$top_level_pages = array();		$children_pages = array();		foreach ( $pages as $page ) {			// catch and repair bad pages			if ( $page->post_parent == $page->ID ) {				$page->post_parent = 0;				$wpdb->update($wpdb->posts, array('post_parent' => 0), array('ID' => $page->ID));				clean_page_cache( $page->ID );			}			if ( 0 == $page->post_parent )				$top_level_pages[] = $page;			else				$children_pages[ $page->post_parent ][] = $page;		}		$pages = &$top_level_pages;	}	$count = 0;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $pages as $page ) {		if ( $count >= $end )			break;		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		if ( isset($children_pages) )			_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	// if it is the last pagenum and there are orphaned pages, display them with paging as well	if ( isset($children_pages) && $count < $end ){		foreach( $children_pages as $orphans ){			foreach ( $orphans as $op ) {				if ( $count >= $end )					break;				if ( $count >= $start )					echo "\t" . display_page_row( $op, 0 );				$count++;			}		}	}}/** * Given a top level page ID, display the nested hierarchy of sub-pages * together with paging support * * @since unknown * * @param unknown_type $children_pages * @param unknown_type $count * @param unknown_type $parent * @param unknown_type $level * @param unknown_type $pagenum * @param unknown_type $per_page */function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page ) {	if ( ! isset( $children_pages[$parent] ) )		return;	$start = ($pagenum - 1) * $per_page;	$end = $start + $per_page;	foreach ( $children_pages[$parent] as $page ) {		if ( $count >= $end )			break;		// If the page starts in a subtree, print the parents.		if ( $count == $start && $page->post_parent > 0 ) {			$my_parents = array();			$my_parent = $page->post_parent;			while ( $my_parent) {				$my_parent = get_post($my_parent);				$my_parents[] = $my_parent;				if ( !$my_parent->post_parent )					break;				$my_parent = $my_parent->post_parent;			}			$num_parents = count($my_parents);			while( $my_parent = array_pop($my_parents) ) {				echo "\t" . display_page_row( $my_parent, $level - $num_parents );				$num_parents--;			}		}		if ( $count >= $start )			echo "\t" . display_page_row( $page, $level );		$count++;		_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page );	}	unset( $children_pages[$parent] ); //required in order to keep track of orphans}/** * Generate HTML for a single row on the users.php admin panel. * * @since 2.1.0 * * @param object $user_object * @param string $style Optional. Attributes added to the TR element.  Must be sanitized. * @param string $role Key for the $wp_roles array. * @param int $numposts Optional. Post count to display for this user.  Defaults to zero, as in, a new user has made zero posts. * @return string */function user_row( $user_object, $style = '', $role = '', $numposts = 0 ) {	global $wp_roles;	$current_user = wp_get_current_user();	if ( !( is_object( $user_object) && is_a( $user_object, 'WP_User' ) ) )		$user_object = new WP_User( (int) $user_object );	$user_object = sanitize_user_object($user_object, 'display');	$email = $user_object->user_email;	$url = $user_object->user_url;	$short_url = str_replace( 'http://', '', $url );	$short_url = str_replace( 'www.', '', $short_url );	if ('/' == substr( $short_url, -1 ))		$short_url = substr( $short_url, 0, -1 );	if ( strlen( $short_url ) > 35 )		$short_url = substr( $short_url, 0, 32 ).'...';	$checkbox = '';	// Check if the user for this row is editable	if ( current_user_can( 'list_users' ) ) {		// Set up the user editing link		// TODO: make profile/user-edit determination a separate function		if ($current_user->ID == $user_object->ID) {			$edit_link = 'profile.php';		} else {			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( esc_url( stripslashes( $_SERVER['REQUEST_URI'] ) ) ), "user-edit.php?user_id=$user_object->ID" ) );		}		$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";		// Set up the hover actions for this user		$actions = array();		if ( current_user_can('edit_user',  $user_object->ID) ) {			$edit = "<strong><a href=\"$edit_link\">$user_object->user_login</a></strong><br />";			$actions['edit'] = '<a href="' . $edit_link . '">' . __('Edit') . '</a>';		} else {			$edit = "<strong>$user_object->user_login</strong><br />";		}		if ( !is_multisite() && $current_user->ID != $user_object->ID && current_user_can('delete_user', $user_object->ID) )			$actions['delete'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=delete&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Delete') . "</a>";		if ( is_multisite() && $current_user->ID != $user_object->ID && current_user_can('remove_user', $user_object->ID) )			$actions['remove'] = "<a class='submitdelete' href='" . wp_nonce_url("users.php?action=remove&amp;user=$user_object->ID", 'bulk-users') . "'>" . __('Remove') . "</a>";		$actions = apply_filters('user_row_actions', $actions, $user_object);		$action_count = count($actions);		$i = 0;		$edit .= '<div class="row-actions">';		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			$edit .= "<span class='$action'>$link$sep</span>";		}		$edit .= '</div>';		// Set up the checkbox (because the user is editable, otherwise its empty)		$checkbox = "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />";	} else {		$edit = '<strong>' . $user_object->user_login . '</strong>';	}	$role_name = isset($wp_roles->role_names[$role]) ? translate_user_role($wp_roles->role_names[$role] ) : __('None');	$r = "<tr id='user-$user_object->ID'$style>";	$columns = get_column_headers('users');	$hidden = get_hidden_columns('users');	$avatar = get_avatar( $user_object->ID, 32 );	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				$r .= "<th scope='row' class='check-column'>$checkbox</th>";				break;			case 'username':				$r .= "<td $attributes>$avatar $edit</td>";				break;			case 'name':				$r .= "<td $attributes>$user_object->first_name $user_object->last_name</td>";				break;			case 'email':				$r .= "<td $attributes><a href='mailto:$email' title='" . sprintf( __('E-mail: %s' ), $email ) . "'>$email</a></td>";				break;			case 'role':				$r .= "<td $attributes>$role_name</td>";				break;			case 'posts':				$attributes = 'class="posts column-posts num"' . $style;				$r .= "<td $attributes>";				if ( $numposts > 0 ) {					$r .= "<a href='edit.php?author=$user_object->ID' title='" . __( 'View posts by this author' ) . "' class='edit'>";					$r .= $numposts;					$r .= '</a>';				} else {					$r .= 0;				}				$r .= "</td>";				break;			default:				$r .= "<td $attributes>";				$r .= apply_filters('manage_users_custom_column', '', $column_name, $user_object->ID);				$r .= "</td>";		}	}	$r .= '</tr>';	return $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param string $status Comment status (approved, spam, trash, etc) * @param string $s Term to search for * @param int $start Offset to start at for pagination * @param int $num Maximum number of comments to return * @param int $post Post ID or 0 to return all comments * @param string $type Comment type (comment, trackback, pingback, etc) * @return array [0] contains the comments and [1] contains the total number of comments that match (ignoring $start and $num) */function _wp_get_comment_list( $status = '', $s = false, $start, $num, $post = 0, $type = '' ) {	global $wpdb;	$start = abs( (int) $start );	$num = (int) $num;	$post = (int) $post;	$count = wp_count_comments();	$index = '';	if ( 'moderated' == $status ) {		$approved = "c.comment_approved = '0'";		$total = $count->moderated;	} elseif ( 'approved' == $status ) {		$approved = "c.comment_approved = '1'";		$total = $count->approved;	} elseif ( 'spam' == $status ) {		$approved = "c.comment_approved = 'spam'";		$total = $count->spam;	} elseif ( 'trash' == $status ) {		$approved = "c.comment_approved = 'trash'";		$total = $count->trash;	} else {		$approved = "( c.comment_approved = '0' OR c.comment_approved = '1' )";		$total = $count->moderated + $count->approved;		$index = 'USE INDEX (c.comment_date_gmt)';	}	if ( $post ) {		$total = '';		$post = " AND c.comment_post_ID = '$post'";	} else {		$post = '';	}	$orderby = "ORDER BY c.comment_date_gmt DESC LIMIT $start, $num";	if ( 'comment' == $type )		$typesql = "AND c.comment_type = ''";	elseif ( 'pings' == $type )		$typesql = "AND ( c.comment_type = 'pingback' OR c.comment_type = 'trackback' )";	elseif ( 'all' == $type )		$typesql = '';	elseif ( !empty($type) )		$typesql = $wpdb->prepare("AND c.comment_type = %s", $type);	else		$typesql = '';	if ( !empty($type) )		$total = '';	$query = "FROM $wpdb->comments c LEFT JOIN $wpdb->posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ";	if ( $s ) {		$total = '';		$s = $wpdb->escape($s);		$query .= "AND			(c.comment_author LIKE '%$s%' OR			c.comment_author_email LIKE '%$s%' OR			c.comment_author_url LIKE ('%$s%') OR			c.comment_author_IP LIKE ('%$s%') OR			c.comment_content LIKE ('%$s%') ) AND			$approved			$typesql";	} else {		$query .= "AND $approved $post $typesql";	}	$comments = $wpdb->get_results("SELECT * $query $orderby");	if ( '' === $total )		$total = $wpdb->get_var("SELECT COUNT(c.comment_ID) $query");	update_comment_cache($comments);	return array($comments, $total);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $comment_id * @param unknown_type $mode * @param unknown_type $comment_status * @param unknown_type $checkbox */function _wp_comment_row( $comment_id, $mode, $comment_status, $checkbox = true, $from_ajax = false ) {	global $comment, $post, $_comment_pending_count;	$comment = get_comment( $comment_id );	$post = get_post($comment->comment_post_ID);	$the_comment_status = wp_get_comment_status($comment->comment_ID);	$post_type_object = get_post_type_object($post->post_type);	$user_can = current_user_can($post_type_object->cap->edit_post, $post->ID);	$comment_url = esc_url(get_comment_link($comment->comment_ID));	$author_url = get_comment_author_url();	if ( 'http://' == $author_url )		$author_url = '';	$author_url_display = preg_replace('|http://(www\.)?|i', '', $author_url);	if ( strlen($author_url_display) > 50 )		$author_url_display = substr($author_url_display, 0, 49) . '...';	$ptime = date('G', strtotime( $comment->comment_date ) );	if ( ( abs(time() - $ptime) ) < 86400 )		$ptime = sprintf( __('%s ago'), human_time_diff( $ptime ) );	else		$ptime = mysql2date(__('Y/m/d \a\t g:i A'), $comment->comment_date );	if ( $user_can ) {		$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );		$approve_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "approve-comment_$comment->comment_ID" ) );		$approve_url = esc_url( "comment.php?action=approvecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$unapprove_url = esc_url( "comment.php?action=unapprovecomment&p=$post->ID&c=$comment->comment_ID&$approve_nonce" );		$spam_url = esc_url( "comment.php?action=spamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$unspam_url = esc_url( "comment.php?action=unspamcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$trash_url = esc_url( "comment.php?action=trashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$untrash_url = esc_url( "comment.php?action=untrashcomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );		$delete_url = esc_url( "comment.php?action=deletecomment&p=$post->ID&c=$comment->comment_ID&$del_nonce" );	}	echo "<tr id='comment-$comment->comment_ID' class='$the_comment_status'>";	$columns = get_column_headers('edit-comments');	$hidden = get_hidden_columns('edit-comments');	foreach ( $columns as $column_name => $column_display_name ) {		$class = "class=\"$column_name column-$column_name\"";		$style = '';		if ( in_array($column_name, $hidden) )			$style = ' style="display:none;"';		$attributes = "$class$style";		switch ($column_name) {			case 'cb':				if ( !$checkbox ) break;				echo '<th scope="row" class="check-column">';				if ( $user_can ) echo "<input type='checkbox' name='delete_comments[]' value='$comment->comment_ID' />";				echo '</th>';				break;			case 'comment':				echo "<td $attributes>";				echo '<div id="submitted-on">';				/* translators: 2: comment date, 3: comment time */				printf( __( '<a href="%1$s">%2$s at %3$s</a>' ), $comment_url,					/* translators: comment date format. See http://php.net/date */ get_comment_date( __('Y/m/d') ),					/* translators: comment time format. See http://php.net/date */ get_comment_date( get_option( 'time_format' ) ) );				if ( $comment->comment_parent ) {					$parent = get_comment( $comment->comment_parent );					$parent_link = esc_url( get_comment_link( $comment->comment_parent ) );					$name = apply_filters( 'get_comment_author', $parent->comment_author ); // there's no API function for this					printf( ' | '.__( 'In reply to <a href="%1$s">%2$s</a>.' ), $parent_link, $name );				}				echo '</div>';				comment_text();				if ( $user_can ) { ?>				<div id="inline-<?php echo $comment->comment_ID; ?>" class="hidden">				<textarea class="comment" rows="1" cols="1"><?php echo htmlspecialchars( apply_filters('comment_edit_pre', $comment->comment_content), ENT_QUOTES ); ?></textarea>				<div class="author-email"><?php echo esc_attr( $comment->comment_author_email ); ?></div>				<div class="author"><?php echo esc_attr( $comment->comment_author ); ?></div>				<div class="author-url"><?php echo esc_attr( $comment->comment_author_url ); ?></div>				<div class="comment_status"><?php echo $comment->comment_approved; ?></div>				</div>				<?php				}				if ( $user_can ) {					// preorder it: Approve | Reply | Quick Edit | Edit | Spam | Trash					$actions = array(						'approve' => '', 'unapprove' => '',						'reply' => '',						'quickedit' => '',						'edit' => '',						'spam' => '', 'unspam' => '',						'trash' => '', 'untrash' => '', 'delete' => ''					);					if ( $comment_status && 'all' != $comment_status ) { // not looking at all comments						if ( 'approved' == $the_comment_status )							$actions['unapprove'] = "<a href='$unapprove_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=unapproved vim-u vim-destructive' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';						else if ( 'unapproved' == $the_comment_status )							$actions['approve'] = "<a href='$approve_url' class='delete:the-comment-list:comment-$comment->comment_ID:e7e7d3:action=dim-comment&amp;new=approved vim-a vim-destructive' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';					} else {						$actions['approve'] = "<a href='$approve_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . esc_attr__( 'Approve this comment' ) . "'>" . __( 'Approve' ) . '</a>';						$actions['unapprove'] = "<a href='$unapprove_url' class='dim:the-comment-list:comment-$comment->comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . esc_attr__( 'Unapprove this comment' ) . "'>" . __( 'Unapprove' ) . '</a>';					}					if ( 'spam' != $the_comment_status && 'trash' != $the_comment_status ) {						$actions['spam'] = "<a href='$spam_url' class='delete:the-comment-list:comment-$comment->comment_ID::spam=1 vim-s vim-destructive' title='" . esc_attr__( 'Mark this comment as spam' ) . "'>" . /* translators: mark as spam link */ _x( 'Spam', 'verb' ) . '</a>';					} elseif ( 'spam' == $the_comment_status ) {						$actions['unspam'] = "<a href='$unspam_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:unspam=1 vim-z vim-destructive'>" . _x( 'Not Spam', 'comment' ) . '</a>';					} elseif ( 'trash' == $the_comment_status ) {						$actions['untrash'] = "<a href='$untrash_url' class='delete:the-comment-list:comment-$comment->comment_ID:66cc66:untrash=1 vim-z vim-destructive'>" . __( 'Restore' ) . '</a>';					}					if ( 'spam' == $the_comment_status || 'trash' == $the_comment_status || !EMPTY_TRASH_DAYS ) {						$actions['delete'] = "<a href='$delete_url' class='delete:the-comment-list:comment-$comment->comment_ID::delete=1 delete vim-d vim-destructive'>" . __('Delete Permanently') . '</a>';					} else {						$actions['trash'] = "<a href='$trash_url' class='delete:the-comment-list:comment-$comment->comment_ID::trash=1 delete vim-d vim-destructive' title='" . esc_attr__( 'Move this comment to the trash' ) . "'>" . _x('Trash', 'verb') . '</a>';					}					if ( 'trash' != $the_comment_status ) {						$actions['edit'] = "<a href='comment.php?action=editcomment&amp;c={$comment->comment_ID}' title='" . esc_attr__('Edit comment') . "'>". __('Edit') . '</a>';						$actions['quickedit'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\',\'edit\');return false;" class="vim-q" title="'.esc_attr__('Quick Edit').'" href="#">' . __('Quick&nbsp;Edit') . '</a>';						if ( 'spam' != $the_comment_status )							$actions['reply'] = '<a onclick="commentReply.open(\''.$comment->comment_ID.'\',\''.$post->ID.'\');return false;" class="vim-r" title="'.esc_attr__('Reply to this comment').'" href="#">' . __('Reply') . '</a>';					}					$actions = apply_filters( 'comment_row_actions', array_filter($actions), $comment );					$i = 0;					echo '<div class="row-actions">';					foreach ( $actions as $action => $link ) {						++$i;						( ( ('approve' == $action || 'unapprove' == $action) && 2 === $i ) || 1 === $i ) ? $sep = '' : $sep = ' | ';						// Reply and quickedit need a hide-if-no-js span when not added with ajax						if ( ('reply' == $action || 'quickedit' == $action) && ! $from_ajax )							$action .= ' hide-if-no-js';						elseif ( ($action == 'untrash' && $the_comment_status == 'trash') || ($action == 'unspam' && $the_comment_status == 'spam') ) {							if ('1' == get_comment_meta($comment_id, '_wp_trash_meta_status', true))								$action .= ' approve';							else								$action .= ' unapprove';						}						echo "<span class='$action'>$sep$link</span>";					}					echo '</div>';				}				echo '</td>';				break;			case 'author':				echo "<td $attributes><strong>"; comment_author(); echo '</strong><br />';				if ( !empty($author_url) )					echo "<a title='$author_url' href='$author_url'>$author_url_display</a><br />";				if ( $user_can ) {					if ( !empty($comment->comment_author_email) ) {						comment_author_email_link();						echo '<br />';					}					echo '<a href="edit-comments.php?s=';					comment_author_IP();					echo '&amp;mode=detail';					if ( 'spam' == $comment_status )						echo '&amp;comment_status=spam';					echo '">';					comment_author_IP();					echo '</a>';				} //current_user_can				echo '</td>';				break;			case 'date':				echo "<td $attributes>" . get_comment_date(__('Y/m/d \a\t g:ia')) . '</td>';				break;			case 'response':				if ( 'single' !== $mode ) {					if ( isset( $_comment_pending_count[$post->ID] ) ) {						$pending_comments = $_comment_pending_count[$post->ID];					} else {						$_comment_pending_count_temp = get_pending_comments_num( array( $post->ID ) );						$pending_comments = $_comment_pending_count[$post->ID] = $_comment_pending_count_temp[$post->ID];					}					if ( $user_can ) {						$post_link = "<a href='" . get_edit_post_link($post->ID) . "'>";						$post_link .= get_the_title($post->ID) . '</a>';					} else {						$post_link = get_the_title($post->ID);					}					echo "<td $attributes>\n";					echo '<div class="response-links"><span class="post-com-count-wrapper">';					echo $post_link . '<br />';					$pending_phrase = esc_attr(sprintf( __('%s pending'), number_format( $pending_comments ) ));					if ( $pending_comments )						echo '<strong>';					comments_number("<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('0', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link */ _x('1', 'comment count') . '</span></a>', "<a href='edit-comments.php?p=$post->ID' title='$pending_phrase' class='post-com-count'><span class='comment-count'>" . /* translators: comment count link: % will be substituted by comment count */ _x('%', 'comment count') . '</span></a>');					if ( $pending_comments )						echo '</strong>';					echo '</span> ';					echo "<a href='" . get_permalink( $post->ID ) . "'>#</a>";					echo '</div>';					if ( 'attachment' == $post->post_type && ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) )						echo $thumb;					echo '</td>';				}				break;			default:				echo "<td $attributes>\n";				do_action( 'manage_comments_custom_column', $column_name, $comment->comment_ID );				echo "</td>\n";				break;		}	}	echo "</tr>\n";}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $position * @param unknown_type $checkbox * @param unknown_type $mode */function wp_comment_reply($position = '1', $checkbox = false, $mode = 'single', $table_row = true) {	global $current_user;	// allow plugin to replace the popup content	$content = apply_filters( 'wp_comment_reply', '', array('position' => $position, 'checkbox' => $checkbox, 'mode' => $mode) );	if ( ! empty($content) ) {		echo $content;		return;	}	$columns = get_column_headers('edit-comments');	$hidden = array_intersect( array_keys( $columns ), array_filter( get_hidden_columns('edit-comments') ) );	$col_count = count($columns) - count($hidden);?><form method="get" action=""><?php if ( $table_row ) : ?><table style="display:none;"><tbody id="com-reply"><tr id="replyrow" style="display:none;"><td colspan="<?php echo $col_count; ?>"><?php else : ?><div id="com-reply" style="display:none;"><div id="replyrow" style="display:none;"><?php endif; ?>	<div id="replyhead" style="display:none;"><?php _e('Reply to Comment'); ?></div>	<div id="edithead" style="display:none;">		<div class="inside">		<label for="author"><?php _e('Name') ?></label>		<input type="text" name="newcomment_author" size="50" value="" tabindex="101" id="author" />		</div>		<div class="inside">		<label for="author-email"><?php _e('E-mail') ?></label>		<input type="text" name="newcomment_author_email" size="50" value="" tabindex="102" id="author-email" />		</div>		<div class="inside">		<label for="author-url"><?php _e('URL') ?></label>		<input type="text" id="author-url" name="newcomment_author_url" size="103" value="" tabindex="103" />		</div>		<div style="clear:both;"></div>	</div>	<div id="replycontainer"><textarea rows="8" cols="40" name="replycontent" tabindex="104" id="replycontent"></textarea></div>	<p id="replysubmit" class="submit">	<a href="#comments-form" class="cancel button-secondary alignleft" tabindex="106"><?php _e('Cancel'); ?></a>	<a href="#comments-form" class="save button-primary alignright" tabindex="104">	<span id="savebtn" style="display:none;"><?php _e('Update Comment'); ?></span>	<span id="replybtn" style="display:none;"><?php _e('Submit Reply'); ?></span></a>	<img class="waiting" style="display:none;" src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" />	<span class="error" style="display:none;"></span>	<br class="clear" />	</p>	<input type="hidden" name="user_ID" id="user_ID" value="<?php echo $current_user->ID; ?>" />	<input type="hidden" name="action" id="action" value="" />	<input type="hidden" name="comment_ID" id="comment_ID" value="" />	<input type="hidden" name="comment_post_ID" id="comment_post_ID" value="" />	<input type="hidden" name="status" id="status" value="" />	<input type="hidden" name="position" id="position" value="<?php echo $position; ?>" />	<input type="hidden" name="checkbox" id="checkbox" value="<?php echo $checkbox ? 1 : 0; ?>" />	<input type="hidden" name="mode" id="mode" value="<?php echo esc_attr($mode); ?>" />	<?php wp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false ); ?>	<?php wp_comment_form_unfiltered_html_nonce(); ?><?php if ( $table_row ) : ?></td></tr></tbody></table><?php else : ?></div></div><?php endif; ?></form><?php}/** * Output 'undo move to trash' text for comments * * @since 2.9.0 */function wp_comment_trashnotice() {?><div class="hidden" id="trash-undo-holder">	<div class="trash-undo-inside"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class="undo untrash"><a href="#"><?php _e('Undo'); ?></a></span></div></div><div class="hidden" id="spam-undo-holder">	<div class="spam-undo-inside"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class="undo unspam"><a href="#"><?php _e('Undo'); ?></a></span></div></div><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta */function list_meta( $meta ) {	// Exit if no meta	if ( ! $meta ) {		echo '<table id="list-table" style="display: none;">	<thead>	<tr>		<th class="left">' . __( 'Name' ) . '</th>		<th>' . __( 'Value' ) . '</th>	</tr>	</thead>	<tbody id="the-list" class="list:meta">	<tr><td></td></tr>	</tbody></table>'; //TBODY needed for list-manipulation JS		return;	}	$count = 0;?><table id="list-table">	<thead>	<tr>		<th class="left"><?php _e( 'Name' ) ?></th>		<th><?php _e( 'Value' ) ?></th>	</tr>	</thead>	<tbody id='the-list' class='list:meta'><?php	foreach ( $meta as $entry )		echo _list_meta_row( $entry, $count );?>	</tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $entry * @param unknown_type $count * @return unknown */function _list_meta_row( $entry, &$count ) {	static $update_nonce = false;	if ( !$update_nonce )		$update_nonce = wp_create_nonce( 'add-meta' );	$r = '';	++ $count;	if ( $count % 2 )		$style = 'alternate';	else		$style = '';	if ('_' == $entry['meta_key'] { 0 } )		$style .= ' hidden';	if ( is_serialized( $entry['meta_value'] ) ) {		if ( is_serialized_string( $entry['meta_value'] ) ) {			// this is a serialized string, so we should display it			$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );		} else {			// this is a serialized array/object so we should NOT display it			--$count;			return;		}	}	$entry['meta_key'] = esc_attr($entry['meta_key']);	$entry['meta_value'] = htmlspecialchars($entry['meta_value']); // using a <textarea />	$entry['meta_id'] = (int) $entry['meta_id'];	$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );	$r .= "\n\t<tr id='meta-{$entry['meta_id']}' class='$style'>";	$r .= "\n\t\t<td class='left'><label class='screen-reader-text' for='meta[{$entry['meta_id']}][key]'>" . __( 'Key' ) . "</label><input name='meta[{$entry['meta_id']}][key]' id='meta[{$entry['meta_id']}][key]' tabindex='6' type='text' size='20' value='{$entry['meta_key']}' />";	$r .= "\n\t\t<div class='submit'><input name='deletemeta[{$entry['meta_id']}]' type='submit' ";	$r .= "class='delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce deletemeta' tabindex='6' value='". esc_attr__( 'Delete' ) ."' />";	$r .= "\n\t\t<input name='updatemeta' type='submit' tabindex='6' value='". esc_attr__( 'Update' ) ."' class='add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce updatemeta' /></div>";	$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );	$r .= "</td>";	$r .= "\n\t\t<td><label class='screen-reader-text' for='meta[{$entry['meta_id']}][value]'>" . __( 'Value' ) . "</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta[{$entry['meta_id']}][value]' tabindex='6' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\n\t</tr>";	return $r;}/** * {@internal Missing Short Description}} * * @since unknown */function meta_form() {	global $wpdb;	$limit = (int) apply_filters( 'postmeta_form_limit', 30 );	$keys = $wpdb->get_col( "		SELECT meta_key		FROM $wpdb->postmeta		GROUP BY meta_key		HAVING meta_key NOT LIKE '\_%'		ORDER BY meta_key		LIMIT $limit" );	if ( $keys )		natcasesort($keys);?><p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p><table id="newmeta"><thead><tr><th class="left"><label for="metakeyselect"><?php _e( 'Name' ) ?></label></th><th><label for="metavalue"><?php _e( 'Value' ) ?></label></th></tr></thead><tbody><tr><td id="newmetaleft" class="left"><?php if ( $keys ) { ?><select id="metakeyselect" name="metakeyselect" tabindex="7"><option value="#NONE#"><?php _e( '&mdash; Select &mdash;' ); ?></option><?php	foreach ( $keys as $key ) {		echo "\n<option value='" . esc_attr($key) . "'>" . esc_html($key) . "</option>";	}?></select><input class="hide-if-js" type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><a href="#postcustomstuff" class="hide-if-no-js" onclick="jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;"><span id="enternew"><?php _e('Enter new'); ?></span><span id="cancelnew" class="hidden"><?php _e('Cancel'); ?></span></a><?php } else { ?><input type="text" id="metakeyinput" name="metakeyinput" tabindex="7" value="" /><?php } ?></td><td><textarea id="metavalue" name="metavalue" rows="2" cols="25" tabindex="8"></textarea></td></tr><tr><td colspan="2" class="submit"><input type="submit" id="addmetasub" name="addmeta" class="add:the-list:newmeta" tabindex="9" value="<?php esc_attr_e( 'Add Custom Field' ) ?>" /><?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?></td></tr></tbody></table><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $edit * @param unknown_type $for_post * @param unknown_type $tab_index * @param unknown_type $multi */function touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {	global $wp_locale, $post, $comment;	if ( $for_post )		$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );	$tab_index_attribute = '';	if ( (int) $tab_index > 0 )		$tab_index_attribute = " tabindex=\"$tab_index\"";	// echo '<label for="timestamp" style="display: block;"><input type="checkbox" class="checkbox" name="edit_date" value="1" id="timestamp"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';	$time_adj = current_time('timestamp');	$post_date = ($for_post) ? $post->post_date : $comment->comment_date;	$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );	$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );	$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );	$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );	$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );	$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );	$cur_jj = gmdate( 'd', $time_adj );	$cur_mm = gmdate( 'm', $time_adj );	$cur_aa = gmdate( 'Y', $time_adj );	$cur_hh = gmdate( 'H', $time_adj );	$cur_mn = gmdate( 'i', $time_adj );	$month = "<select " . ( $multi ? '' : 'id="mm" ' ) . "name=\"mm\"$tab_index_attribute>\n";	for ( $i = 1; $i < 13; $i = $i +1 ) {		$month .= "\t\t\t" . '<option value="' . zeroise($i, 2) . '"';		if ( $i == $mm )			$month .= ' selected="selected"';		$month .= '>' . $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) ) . "</option>\n";	}	$month .= '</select>';	$day = '<input type="text" ' . ( $multi ? '' : 'id="jj" ' ) . 'name="jj" value="' . $jj . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$year = '<input type="text" ' . ( $multi ? '' : 'id="aa" ' ) . 'name="aa" value="' . $aa . '" size="4" maxlength="4"' . $tab_index_attribute . ' autocomplete="off" />';	$hour = '<input type="text" ' . ( $multi ? '' : 'id="hh" ' ) . 'name="hh" value="' . $hh . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	$minute = '<input type="text" ' . ( $multi ? '' : 'id="mn" ' ) . 'name="mn" value="' . $mn . '" size="2" maxlength="2"' . $tab_index_attribute . ' autocomplete="off" />';	echo '<div class="timestamp-wrap">';	/* translators: 1: month input, 2: day input, 3: year input, 4: hour input, 5: minute input */	printf(__('%1$s%2$s, %3$s @ %4$s : %5$s'), $month, $day, $year, $hour, $minute);	echo '</div><input type="hidden" id="ss" name="ss" value="' . $ss . '" />';	if ( $multi ) return;	echo "\n\n";	foreach ( array('mm', 'jj', 'aa', 'hh', 'mn') as $timeunit ) {		echo '<input type="hidden" id="hidden_' . $timeunit . '" name="hidden_' . $timeunit . '" value="' . $$timeunit . '" />' . "\n";		$cur_timeunit = 'cur_' . $timeunit;		echo '<input type="hidden" id="'. $cur_timeunit . '" name="'. $cur_timeunit . '" value="' . $$cur_timeunit . '" />' . "\n";	}?><p><a href="#edit_timestamp" class="save-timestamp hide-if-no-js button"><?php _e('OK'); ?></a><a href="#edit_timestamp" class="cancel-timestamp hide-if-no-js"><?php _e('Cancel'); ?></a></p><?php}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default */function page_template_dropdown( $default = '' ) {	$templates = get_page_templates();	ksort( $templates );	foreach (array_keys( $templates ) as $template )		: if ( $default == $templates[$template] )			$selected = " selected='selected'";		else			$selected = '';	echo "\n\t<option value='".$templates[$template]."' $selected>$template</option>";	endforeach;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $default * @param unknown_type $parent * @param unknown_type $level * @return unknown */function parent_dropdown( $default = 0, $parent = 0, $level = 0 ) {	global $wpdb, $post_ID;	$items = $wpdb->get_results( $wpdb->prepare("SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order", $parent) );	if ( $items ) {		foreach ( $items as $item ) {			// A page cannot be its own parent.			if (!empty ( $post_ID ) ) {				if ( $item->ID == $post_ID ) {					continue;				}			}			$pad = str_repeat( '&nbsp;', $level * 3 );			if ( $item->ID == $default)				$current = ' selected="selected"';			else				$current = '';			echo "\n\t<option class='level-$level' value='$item->ID'$current>$pad " . esc_html($item->post_title) . "</option>";			parent_dropdown( $default, $item->ID, $level +1 );		}	} else {		return false;	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function the_attachment_links( $id = false ) {	$id = (int) $id;	$post = & get_post( $id );	if ( $post->post_type != 'attachment' )		return false;	$icon = wp_get_attachment_image( $post->ID, 'thumbnail', true );	$attachment_data = wp_get_attachment_metadata( $id );	$thumb = isset( $attachment_data['thumb'] );?><form id="the-attachment-links"><table>	<col />	<col class="widefat" />	<tr>		<th scope="row"><?php _e( 'URL' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><?php echo wp_get_attachment_url(); ?></textarea></td>	</tr><?php if ( $icon ) : ?>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to file' ) : _e( 'Image linked to file' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>"><?php echo $icon ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php $thumb ? _e( 'Thumbnail linked to page' ) : _e( 'Image linked to page' ); ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID; ?>"><?php echo $icon ?></a></textarea></td>	</tr><?php else : ?>	<tr>		<th scope="row"><?php _e( 'Link to file' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo wp_get_attachment_url(); ?>" class="attachmentlink"><?php echo basename( wp_get_attachment_url() ); ?></a></textarea></td>	</tr>	<tr>		<th scope="row"><?php _e( 'Link to page' ) ?></th>		<td><textarea rows="1" cols="40" type="text" class="attachmentlinks" readonly="readonly"><a href="<?php echo get_attachment_link( $post->ID ) ?>" rel="attachment wp-att-<?php echo $post->ID ?>"><?php the_title(); ?></a></textarea></td>	</tr><?php endif; ?></table></form><?php}/** * Print out <option> html elements for role selectors based on $wp_roles * * @package WordPress * @subpackage Administration * @since 2.1 * * @uses $wp_roles * @param string $default slug for the role that should be already selected */function wp_dropdown_roles( $selected = false ) {	$p = '';	$r = '';	$editable_roles = get_editable_roles();	foreach ( $editable_roles as $role => $details ) {		$name = translate_user_role($details['name'] );		if ( $selected == $role ) // Make default first in list			$p = "\n\t<option selected='selected' value='" . esc_attr($role) . "'>$name</option>";		else			$r .= "\n\t<option value='" . esc_attr($role) . "'>$name</option>";	}	echo $p . $r;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $size * @return unknown */function wp_convert_hr_to_bytes( $size ) {	$size = strtolower($size);	$bytes = (int) $size;	if ( strpos($size, 'k') !== false )		$bytes = intval($size) * 1024;	elseif ( strpos($size, 'm') !== false )		$bytes = intval($size) * 1024 * 1024;	elseif ( strpos($size, 'g') !== false )		$bytes = intval($size) * 1024 * 1024 * 1024;	return $bytes;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $bytes * @return unknown */function wp_convert_bytes_to_hr( $bytes ) {	$units = array( 0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB' );	$log = log( $bytes, 1024 );	$power = (int) $log;	$size = pow(1024, $log - $power);	return $size . $units[$power];}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function wp_max_upload_size() {	$u_bytes = wp_convert_hr_to_bytes( ini_get( 'upload_max_filesize' ) );	$p_bytes = wp_convert_hr_to_bytes( ini_get( 'post_max_size' ) );	$bytes = apply_filters( 'upload_size_limit', min($u_bytes, $p_bytes), $u_bytes, $p_bytes );	return $bytes;}/** * Outputs the form used by the importers to accept the data to be imported * * @since 2.0 * * @param string $action The action attribute for the form. */function wp_import_upload_form( $action ) {	$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );	$size = wp_convert_bytes_to_hr( $bytes );	$upload_dir = wp_upload_dir();	if ( ! empty( $upload_dir['error'] ) ) :		?><div class="error"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>		<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php	else :?><form enctype="multipart/form-data" id="import-upload-form" method="post" action="<?php echo esc_attr(wp_nonce_url($action, 'import-upload')); ?>"><p><label for="upload"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)<input type="file" id="upload" name="import" size="25" /><input type="hidden" name="action" value="save" /><input type="hidden" name="max_file_size" value="<?php echo $bytes; ?>" /></p><p class="submit"><input type="submit" class="button" value="<?php esc_attr_e( 'Upload file and import' ); ?>" /></p></form><?php	endif;}/** * Add a meta box to an edit form. * * @since 2.5.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $title Title of the meta box. * @param string $callback Function that fills the box with the desired content. The function should echo its output. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). * @param string $priority The priority within the context where the boxes should show ('high', 'low'). */function add_meta_box($id, $title, $callback, $page, $context = 'advanced', $priority = 'default', $callback_args=null) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {	foreach ( array('high', 'core', 'default', 'low') as $a_priority ) {		if ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )			continue;		// If a core box was previously added or removed by a plugin, don't add.		if ( 'core' == $priority ) {			// If core box previously deleted, don't add			if ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )				return;			// If box was added with default priority, give it core priority to maintain sort order			if ( 'default' == $a_priority ) {				$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];				unset($wp_meta_boxes[$page][$a_context]['default'][$id]);			}			return;		}		// If no priority given and id already present, use existing priority		if ( empty($priority) ) {			$priority = $a_priority;		// else if we're adding to the sorted priortiy, we don't know the title or callback. Glab them from the previously added context/priority.		} elseif ( 'sorted' == $priority ) {			$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];			$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];			$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];		}		// An id can be in only one priority and one context		if ( $priority != $a_priority || $context != $a_context )			unset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);	}	}	if ( empty($priority) )		$priority = 'low';	if ( !isset($wp_meta_boxes[$page][$context][$priority]) )		$wp_meta_boxes[$page][$context][$priority] = array();	$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);}/** * Meta-Box template function * * @since 2.5.0 * * @param string $page page identifier, also known as screen identifier * @param string $context box context * @param mixed $object gets passed to the box callback function as first parameter * @return int number of meta_boxes */function do_meta_boxes($page, $context, $object) {	global $wp_meta_boxes;	static $already_sorted = false;	$hidden = get_hidden_meta_boxes($page);	printf('<div id="%s-sortables" class="meta-box-sortables">', htmlspecialchars($context));	$i = 0;	do {		// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose		if ( !$already_sorted && $sorted = get_user_option( "meta-box-order_$page" ) ) {			foreach ( $sorted as $box_context => $ids )				foreach ( explode(',', $ids) as $id )					if ( $id )						add_meta_box( $id, null, null, $page, $box_context, 'sorted' );		}		$already_sorted = true;		if ( !isset($wp_meta_boxes) || !isset($wp_meta_boxes[$page]) || !isset($wp_meta_boxes[$page][$context]) )			break;		foreach ( array('high', 'sorted', 'core', 'default', 'low') as $priority ) {			if ( isset($wp_meta_boxes[$page][$context][$priority]) ) {				foreach ( (array) $wp_meta_boxes[$page][$context][$priority] as $box ) {					if ( false == $box || ! $box['title'] )						continue;					$i++;					$style = '';					$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';					echo '<div id="' . $box['id'] . '" class="postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '" ' . '>' . "\n";					echo '<div class="handlediv" title="' . __('Click to toggle') . '"><br /></div>';					echo "<h3 class='hndle'><span>{$box['title']}</span></h3>\n";					echo '<div class="inside">' . "\n";					call_user_func($box['callback'], $object, $box);					echo "</div>\n";					echo "</div>\n";				}			}		}	} while(0);	echo "</div>";	return $i;}/** * Remove a meta box from an edit form. * * @since 2.6.0 * * @param string $id String for use in the 'id' attribute of tags. * @param string $page The type of edit page on which to show the box (post, page, link). * @param string $context The context within the page where the boxes should show ('normal', 'advanced'). */function remove_meta_box($id, $page, $context) {	global $wp_meta_boxes;	if ( !isset($wp_meta_boxes) )		$wp_meta_boxes = array();	if ( !isset($wp_meta_boxes[$page]) )		$wp_meta_boxes[$page] = array();	if ( !isset($wp_meta_boxes[$page][$context]) )		$wp_meta_boxes[$page][$context] = array();	foreach ( array('high', 'core', 'default', 'low') as $priority )		$wp_meta_boxes[$page][$context][$priority][$id] = false;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $screen */function meta_box_prefs($screen) {	global $wp_meta_boxes;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( empty($wp_meta_boxes[$screen->id]) )		return;	$hidden = get_hidden_meta_boxes($screen);	foreach ( array_keys($wp_meta_boxes[$screen->id]) as $context ) {		foreach ( array_keys($wp_meta_boxes[$screen->id][$context]) as $priority ) {			foreach ( $wp_meta_boxes[$screen->id][$context][$priority] as $box ) {				if ( false == $box || ! $box['title'] )					continue;				// Submit box cannot be hidden				if ( 'submitdiv' == $box['id'] || 'linksubmitdiv' == $box['id'] )					continue;				$box_id = $box['id'];				echo '<label for="' . $box_id . '-hide">';				echo '<input class="hide-postbox-tog" name="' . $box_id . '-hide" type="checkbox" id="' . $box_id . '-hide" value="' . $box_id . '"' . (! in_array($box_id, $hidden) ? ' checked="checked"' : '') . ' />';				echo "{$box['title']}</label>\n";			}		}	}}/** * Get Hidden Meta Boxes * * @since 2.7 * * @param string|object $screen Screen identifier * @return array Hidden Meta Boxes */function get_hidden_meta_boxes( $screen ) {	if ( is_string( $screen ) )		$screen = convert_to_screen( $screen );	$hidden = get_user_option( "metaboxhidden_{$screen->id}" );	// Hide slug boxes by default	if ( !is_array( $hidden ) )		$hidden = array('slugdiv');	return $hidden;}/** * Add a new section to a settings page. * * Part of the Settings API. Use this to define new settings sections for an admin page. * Show settings sections in your admin page callback function with do_settings_sections(). * Add settings fields to your section with add_settings_field() * * The $callback argument should be the name of a function that echoes out any * content you want to show at the top of the settings section before the actual * fields. It can output nothing if you want. * * @since 2.7.0 * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * * @param string $id Slug-name to identify the section. Used in the 'id' attribute of tags. * @param string $title Formatted title of the section. Shown as the heading for the section. * @param string $callback Function that echos out any content at the top of the section (between heading and fields). * @param string $page The slug-name of the settings page on which to show the section. Built-in pages include 'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using add_options_page(); */function add_settings_section($id, $title, $callback, $page) {	global $wp_settings_sections;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_sections) )		$wp_settings_sections = array();	if ( !isset($wp_settings_sections[$page]) )		$wp_settings_sections[$page] = array();	if ( !isset($wp_settings_sections[$page][$id]) )		$wp_settings_sections[$page][$id] = array();	$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);}/** * Add a new field to a section of a settings page * * Part of the Settings API. Use this to define a settings field that will show * as part of a settings section inside a settings page. The fields are shown using * do_settings_fields() in do_settings-sections() * * The $callback argument should be the name of a function that echoes out the * html input tags for this setting field. Use get_option() to retrive existing * values to show. * * @since 2.7.0 * * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * * @param string $id Slug-name to identify the field. Used in the 'id' attribute of tags. * @param string $title Formatted title of the field. Shown as the label for the field during output. * @param string $callback Function that fills the field with the desired form inputs. The function should echo its output. * @param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...). * @param string $section The slug-name of the section of the settingss page in which to show the box (default, ...). * @param array $args Additional arguments */function add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {	global $wp_settings_fields;	if ( 'misc' == $page ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$page = 'general';	}	if ( !isset($wp_settings_fields) )		$wp_settings_fields = array();	if ( !isset($wp_settings_fields[$page]) )		$wp_settings_fields[$page] = array();	if ( !isset($wp_settings_fields[$page][$section]) )		$wp_settings_fields[$page][$section] = array();	$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);}/** * Prints out all settings sections added to a particular settings page * * Part of the Settings API. Use this in a settings page callback function * to output all the sections and fields that were added to that $page with * add_settings_section() and add_settings_field() * * @global $wp_settings_sections Storage array of all settings sections added to admin pages * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections * @since unknown * * @param string $page The slug name of the page whos settings sections you want to output */function do_settings_sections($page) {	global $wp_settings_sections, $wp_settings_fields;	if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )		return;	foreach ( (array) $wp_settings_sections[$page] as $section ) {		echo "<h3>{$section['title']}</h3>\n";		call_user_func($section['callback'], $section);		if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )			continue;		echo '<table class="form-table">';		do_settings_fields($page, $section['id']);		echo '</table>';	}}/** * Print out the settings fields for a particular settings section * * Part of the Settings API. Use this in a settings page to output * a specific section. Should normally be called by do_settings_sections() * rather than directly. * * @global $wp_settings_fields Storage array of settings fields and their pages/sections * * @since unknown * * @param string $page Slug title of the admin page who's settings fields you want to show. * @param section $section Slug title of the settings section who's fields you want to show. */function do_settings_fields($page, $section) {	global $wp_settings_fields;	if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section]) )		return;	foreach ( (array) $wp_settings_fields[$page][$section] as $field ) {		echo '<tr valign="top">';		if ( !empty($field['args']['label_for']) )			echo '<th scope="row"><label for="' . $field['args']['label_for'] . '">' . $field['title'] . '</label></th>';		else			echo '<th scope="row">' . $field['title'] . '</th>';		echo '<td>';		call_user_func($field['callback'], $field['args']);		echo '</td>';		echo '</tr>';	}}/** * Register a settings error to be displayed to the user * * Part of the Settings API. Use this to show messages to users about settings validation * problems, missing settings or anything else. * * Settings errors should be added inside the $sanitize_callback function defined in * register_setting() for a given setting to give feedback about the submission. * * By default messages will show immediately after the submission that generated the error. * Additional calls to settings_errors() can be used to show errors even when the settings * page is first accessed. * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Slug title of the setting to which this error applies * @param string $code Slug-name to identify the error. Used as part of 'id' attribute in HTML output. * @param string $message The formatted message text to display to the user (will be shown inside styled <div> and <p>) * @param string $type The type of message it is, controls HTML class. Use 'error' or 'updated'. */function add_settings_error( $setting, $code, $message, $type = 'error' ) {	global $wp_settings_errors;	if ( !isset($wp_settings_errors) )		$wp_settings_errors = array();	$new_error = array(		'setting' => $setting,		'code' => $code,		'message' => $message,		'type' => $type	);	$wp_settings_errors[] = $new_error;}/** * Fetch settings errors registered by add_settings_error() * * Checks the $wp_settings_errors array for any errors declared during the current * pageload and returns them. * * If changes were just submitted ($_GET['updated']) and settings errors were saved * to the 'settings_errors' transient then those errors will be returned instead. This * is used to pass errors back across pageloads. * * Use the $sanitize argument to manually re-sanitize the option before returning errors. * This is useful if you have errors or notices you want to show even when the user * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook) * * @global array $wp_settings_errors Storage array of errors registered during this pageload * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @return array Array of settings errors */function get_settings_errors( $setting = '', $sanitize = FALSE ) {	global $wp_settings_errors;	// If $sanitize is true, manually re-run the sanitizisation for this option	// This allows the $sanitize_callback from register_setting() to run, adding	// any settings errors you want to show by default.	if ( $sanitize )		sanitize_option( $setting, get_option($setting));	// If settings were passed back from options.php then use them	// Ignore transients if $sanitize is true, we dont' want the old values anyway	if ( isset($_GET['updated']) && $_GET['updated'] && get_transient('settings_errors') ) {		$settings_errors = get_transient('settings_errors');		delete_transient('settings_errors');	// Otherwise check global in case validation has been run on this pageload	} elseif ( count( $wp_settings_errors ) ) {		$settings_errors = $wp_settings_errors;	} else {		return;	}	// Filter the results to those of a specific setting if one was set	if ( $setting ) {		foreach ( (array) $settings_errors as $key => $details )			if ( $setting != $details['setting'] )				unset( $settings_errors[$key] );	}	return $settings_errors;}/** * Display settings errors registered by add_settings_error() * * Part of the Settings API. Outputs a <div> for each error retrieved by get_settings_errors(). * * This is called automatically after a settings page based on the Settings API is submitted. * Errors should be added during the validation callback function for a setting defined in register_setting() * * The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization * on its current value. * * The $hide_on_update option will cause errors to only show when the settings page is first loaded. * if the user has already saved new values it will be hidden to avoid repeating messages already * shown in the default error reporting after submission. This is useful to show general errors like missing * settings when the user arrives at the settings page. * * @param string $setting Optional slug title of a specific setting who's errors you want. * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors. * @param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted. * @return <type> */function settings_errors ( $setting = '', $sanitize = FALSE, $hide_on_update = FALSE ) {	if ($hide_on_update AND $_GET['updated']) return;	$settings_errors = get_settings_errors( $setting, $sanitize );	if ( !is_array($settings_errors) ) return;	$output = '';	foreach ( $settings_errors as $key => $details ) {		$css_id = 'setting-error-' . $details['code'];		$css_class = $details['type'] . ' settings-error';		$output .= "<div id='$css_id' class='$css_class'> \n";		$output .= "<p><strong>{$details['message']}</strong></p>";		$output .= "</div> \n";	}	echo $output;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $page */function manage_columns_prefs( $page ) {	$columns = get_column_headers( $page );	$hidden  = get_hidden_columns( $page );	$special = array('_title', 'cb', 'comment', 'media', 'name', 'title', 'username');	foreach ( $columns as $column => $title ) {		// Can't hide these or they are special		if ( in_array( $column, $special ) )			continue;		if ( empty( $title ) )			continue;		if ( 'comments' == $column )			$title = __( 'Comments' );		$id = "$column-hide";		echo '<label for="' . $id . '">';		echo '<input class="hide-column-tog" name="' . $id . '" type="checkbox" id="' . $id . '" value="' . $column . '"' . (! in_array($column, $hidden) ? ' checked="checked"' : '') . ' />';		echo "$title</label>\n";	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $found_action */function find_posts_div($found_action = '') {?>	<div id="find-posts" class="find-box" style="display:none;">		<div id="find-posts-head" class="find-box-head"><?php _e('Find Posts or Pages'); ?></div>		<div class="find-box-inside">			<div class="find-box-search">				<?php if ( $found_action ) { ?>					<input type="hidden" name="found_action" value="<?php echo esc_attr($found_action); ?>" />				<?php } ?>				<input type="hidden" name="affected" id="affected" value="" />				<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>				<label class="screen-reader-text" for="find-posts-input"><?php _e( 'Search' ); ?></label>				<input type="text" id="find-posts-input" name="ps" value="" />				<input type="button" onclick="findPosts.send();" value="<?php esc_attr_e( 'Search' ); ?>" class="button" /><br />				<?php				$post_types = get_post_types( array('public' => true), 'objects' );				foreach ( $post_types as $post ) {					if ( 'attachment' == $post->name )						continue;				?>				<input type="radio" name="find-posts-what" id="find-posts-<?php echo esc_attr($post->name); ?>" value="<?php echo esc_attr($post->name); ?>" <?php checked($post->name,  'post'); ?> />				<label for="find-posts-<?php echo esc_attr($post->name); ?>"><?php echo $post->label; ?></label>				<?php				} ?>			</div>			<div id="find-posts-response"></div>		</div>		<div class="find-box-buttons">			<input type="button" class="button alignleft" onclick="findPosts.close();" value="<?php esc_attr_e('Close'); ?>" />			<input id="find-posts-submit" type="submit" class="button-primary alignright" value="<?php esc_attr_e('Select'); ?>" />		</div>	</div><?php}/** * Display the post password. * * The password is passed through {@link esc_attr()} to ensure that it * is safe for placing in an html attribute. * * @uses attr * @since 2.7.0 */function the_post_password() {	global $post;	if ( isset( $post->post_password ) ) echo esc_attr( $post->post_password );}/** * {@internal Missing Short Description}} * * @since unknown */function favorite_actions( $screen = null ) {	$default_action = false;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( isset($screen->post_type) ) {		$post_type_object = get_post_type_object($screen->post_type);		if ( 'add' != $screen->action )			$default_action = array('post-new.php?post_type=' . $post_type_object->name => array($post_type_object->labels->new_item, $post_type_object->cap->edit_posts));		else			$default_action = array('edit.php?post_type=' . $post_type_object->name => array($post_type_object->labels->name, $post_type_object->cap->edit_posts));	}	if ( !$default_action ) {		switch ( $screen->id ) {			case 'upload':				$default_action = array('media-new.php' => array(__('New Media'), 'upload_files'));				break;			case 'media':				$default_action = array('upload.php' => array(__('Edit Media'), 'upload_files'));				break;			case 'link-manager':			case 'link':				if ( 'add' != $screen->action )					$default_action = array('link-add.php' => array(__('New Link'), 'manage_links'));				else					$default_action = array('link-manager.php' => array(__('Edit Links'), 'manage_links'));				break;			case 'users':				$default_action = array('user-new.php' => array(__('New User'), 'create_users'));				break;			case 'user':				$default_action = array('users.php' => array(__('Edit Users'), 'edit_users'));				break;			case 'plugins':				$default_action = array('plugin-install.php' => array(__('Install Plugins'), 'install_plugins'));				break;			case 'plugin-install':				$default_action = array('plugins.php' => array(__('Manage Plugins'), 'activate_plugins'));				break;			case 'themes':				$default_action = array('theme-install.php' => array(__('Install Themes'), 'install_themes'));				break;			case 'theme-install':				$default_action = array('themes.php' => array(__('Manage Themes'), 'switch_themes'));				break;			default:				$default_action = array('post-new.php' => array(__('New Post'), 'edit_posts'));				break;		}	}	$actions = array(		'post-new.php' => array(__('New Post'), 'edit_posts'),		'edit.php?post_status=draft' => array(__('Drafts'), 'edit_posts'),		'post-new.php?post_type=page' => array(__('New Page'), 'edit_pages'),		'media-new.php' => array(__('Upload'), 'upload_files'),		'edit-comments.php' => array(__('Comments'), 'moderate_comments')		);	$default_key = array_keys($default_action);	$default_key = $default_key[0];	if ( isset($actions[$default_key]) )		unset($actions[$default_key]);	$actions = array_merge($default_action, $actions);	$actions = apply_filters('favorite_actions', $actions);	$allowed_actions = array();	foreach ( $actions as $action => $data ) {		if ( current_user_can($data[1]) )			$allowed_actions[$action] = $data[0];	}	if ( empty($allowed_actions) )		return;	$first = array_keys($allowed_actions);	$first = $first[0];	echo '<div id="favorite-actions">';	echo '<div id="favorite-first"><a href="' . $first . '">' . $allowed_actions[$first] . '</a></div><div id="favorite-toggle"><br /></div>';	echo '<div id="favorite-inside">';	array_shift($allowed_actions);	foreach ( $allowed_actions as $action => $label) {		echo "<div class='favorite-action'><a href='$action'>";		echo $label;		echo "</a></div>\n";	}	echo "</div></div>\n";}/** * Get the post title. * * The post title is fetched and if it is blank then a default string is * returned. * * @since 2.7.0 * @param int $id The post id. If not supplied the global $post is used. * */function _draft_or_post_title($post_id = 0) {	$title = get_the_title($post_id);	if ( empty($title) )		$title = __('(no title)');	return $title;}/** * Display the search query. * * A simple wrapper to display the "s" parameter in a GET URI. This function * should only be used when {@link the_search_query()} cannot. * * @uses attr * @since 2.7.0 * */function _admin_search_query() {	echo isset($_GET['s']) ? esc_attr( stripslashes( $_GET['s'] ) ) : '';}/** * Generic Iframe header for use with Thickbox * * @since 2.7.0 * @param string $title Title of the Iframe page. * @param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued). * */function iframe_header( $title = '', $limit_styles = false ) {global $hook_suffix;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" /><title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title><?phpwp_enqueue_style( 'global' );if ( ! $limit_styles )	wp_enqueue_style( 'wp-admin' );wp_enqueue_style( 'colors' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};function tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}//]]></script><?phpdo_action('admin_print_styles');do_action('admin_print_scripts');do_action('admin_head');$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);?></head><body<?php if ( isset($GLOBALS['body_id']) ) echo ' id="' . $GLOBALS['body_id'] . '"'; ?>  class="no-js <?php echo $admin_body_class; ?>"><script type="text/javascript">//<![CDATA[(function(){var c = document.body.className;c = c.replace(/no-js/, 'js');document.body.className = c;})();//]]></script><?php}/** * Generic Iframe footer for use with Thickbox * * @since 2.7.0 * */function iframe_footer() {	//We're going to hide any footer output on iframe pages, but run the hooks anyway since they output Javascript or other needed content. ?>	<div class="hidden"><?php	do_action('admin_footer', '');	do_action('admin_print_footer_scripts'); ?>	</div><script type="text/javascript">if(typeof wpOnload=="function")wpOnload();</script></body></html><?php}function _post_states($post) {	$post_states = array();	if ( isset($_GET['post_status']) )		$post_status = $_GET['post_status'];	else		$post_status = '';	if ( !empty($post->post_password) )		$post_states[] = __('Password protected');	if ( 'private' == $post->post_status && 'private' != $post_status )		$post_states[] = __('Private');	if ( 'draft' == $post->post_status && 'draft' != $post_status )		$post_states[] = __('Draft');	if ( 'pending' == $post->post_status && 'pending' != $post_status )		/* translators: post state */		$post_states[] = _x('Pending', 'post state');	if ( is_sticky($post->ID) )		$post_states[] = __('Sticky');	$post_states = apply_filters( 'display_post_states', $post_states );	if ( ! empty($post_states) ) {		$state_count = count($post_states);		$i = 0;		echo ' - ';		foreach ( $post_states as $state ) {			++$i;			( $i == $state_count ) ? $sep = '' : $sep = ', ';			echo "<span class='post-state'>$state$sep</span>";		}	}}/** * Convert a screen string to a screen object * * @since 3.0.0 * * @param string $screen The name of the screen * @return object An object containing the safe screen name and id */function convert_to_screen( $screen ) {	$screen = str_replace( array('.php', '-new', '-add' ), '', $screen);	$screen = (string) apply_filters( 'screen_meta_screen', $screen );	$screen = (object) array('id' => $screen, 'base' => $screen);	return $screen;}function screen_meta($screen) {	global $wp_meta_boxes, $_wp_contextual_help, $title;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$column_screens = get_column_headers($screen);	$meta_screens = array('index' => 'dashboard');	if ( isset($meta_screens[$screen->id]) ) {		$screen->id = $meta_screens[$screen->id];		$screen->base = $screen->id;	}	$show_screen = false;	if ( !empty($wp_meta_boxes[$screen->id]) || !empty($column_screens) )		$show_screen = true;	$screen_options = screen_options($screen);	if ( $screen_options )		$show_screen = true;	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$settings = apply_filters('screen_settings', '', $screen);	switch ( $screen->id ) {		case 'widgets':			$settings = '<p><a id="access-on" href="widgets.php?widgets-access=on">' . __('Enable accessibility mode') . '</a><a id="access-off" href="widgets.php?widgets-access=off">' . __('Disable accessibility mode') . "</a></p>\n";			$show_screen = true;			break;	}	if( ! empty( $settings ) )		$show_screen = true;?><div id="screen-meta"><?php if ( $show_screen ) : ?><div id="screen-options-wrap" class="hidden">	<form id="adv-settings" action="" method="post">	<?php if ( isset($wp_meta_boxes[$screen->id]) ) : ?>		<h5><?php _ex('Show on screen', 'Metaboxes') ?></h5>		<div class="metabox-prefs">			<?php meta_box_prefs($screen); ?>			<br class="clear" />		</div>		<?php endif;		if ( ! empty($column_screens) ) : ?>		<h5><?php echo ( isset( $column_screens['_title'] ) ?  $column_screens['_title'] :  _x('Show on screen', 'Columns') ) ?></h5>		<div class="metabox-prefs">			<?php manage_columns_prefs($screen); ?>			<br class="clear" />		</div>	<?php endif;	echo screen_layout($screen);	if ( !empty( $screen_options ) ) {		?>		<h5><?php _ex('Show on screen', 'Screen Options') ?></h5>		<?php	}	echo $screen_options;	echo $settings; ?><div><?php wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false ); ?></div></form></div><?php endif; // $show_screen	$_wp_contextual_help = apply_filters('contextual_help_list', $_wp_contextual_help, $screen);	?>	<div id="contextual-help-wrap" class="hidden">	<?php	$contextual_help = '';	if ( isset($_wp_contextual_help[$screen->id]) ) {		$contextual_help .= '<div class="metabox-prefs">' . $_wp_contextual_help[$screen->id] . "</div>\n";	} else {		$contextual_help .= '<div class="metabox-prefs">';		$default_help = __('<a href="http://codex.wordpress.org/" target="_blank">Documentation</a>');		$default_help .= '<br />';		$default_help .= __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>');		$contextual_help .= apply_filters('default_contextual_help', $default_help);		$contextual_help .= "</div>\n";	}	echo apply_filters('contextual_help', $contextual_help, $screen->id, $screen);	?>	</div><div id="screen-meta-links"><div id="contextual-help-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#contextual-help" id="contextual-help-link" class="show-settings"><?php _e('Help') ?></a></div><?php if ( $show_screen ) { ?><div id="screen-options-link-wrap" class="hide-if-no-js screen-meta-toggle"><a href="#screen-options" id="show-settings-link" class="show-settings"><?php _e('Screen Options') ?></a></div><?php } ?></div></div><?php}/** * Add contextual help text for a page * * @since 2.7.0 * * @param string $screen The handle for the screen to add help to.  This is usually the hook name returned by the add_*_page() functions. * @param string $help Arbitrary help text */function add_contextual_help($screen, $help) {	global $_wp_contextual_help;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	if ( !isset($_wp_contextual_help) )		$_wp_contextual_help = array();	$_wp_contextual_help[$screen->id] = $help;}function drag_drop_help() {	return '	<p>' .	__('Most of the modules on this screen can be moved. If you hover your mouse over the title bar of a module you&rsquo;ll notice the 4 arrow cursor appears to let you know it is movable. Click on it, hold down the mouse button and start dragging the module to a new location. As you drag the module, notice the dotted gray box that also moves. This box indicates where the module will be placed when you release the mouse button.') . '</p>	<p>' . __('The same modules can be expanded and collapsed by clicking once on their title bar and also completely hidden from the Screen Options tab.') . '</p>';}function plugins_search_help() {	return '	<p><strong>' . __('Search help') . '</strong></p>' .	'<p>' . __('You may search based on 3 criteria:') . '<br />' .	__('<strong>Term:</strong> Searches theme names and descriptions for the specified term.') . '<br />' .	__('<strong>Tag:</strong> Searches for themes tagged as such.') . '<br />' .	__('<strong>Author:</strong> Searches for themes created by the Author, or which the Author contributed to.') . '</p>';}function screen_layout($screen) {	global $screen_layout_columns;	if ( is_string($screen) )		$screen = convert_to_screen($screen);	$columns = array('dashboard' => 4, 'link' => 2);	// Add custom post types	foreach ( get_post_types( array('show_ui' => true) ) as $post_type )		$columns[$post_type] = 2;	$columns = apply_filters('screen_layout_columns', $columns, $screen->id, $screen);	if ( !isset($columns[$screen->id]) ) {		$screen_layout_columns = 0;		return ''; 	}	$screen_layout_columns = get_user_option("screen_layout_$screen->id");	$num = $columns[$screen->id];	if ( ! $screen_layout_columns )			$screen_layout_columns = 2;	$i = 1;	$return = '<h5>' . __('Screen Layout') . "</h5>\n<div class='columns-prefs'>" . __('Number of Columns:') . "\n";	while ( $i <= $num ) {		$return .= "<label><input type='radio' name='screen_columns' value='$i'" . ( ($screen_layout_columns == $i) ? " checked='checked'" : "" ) . " /> $i</label>\n";		++$i;	}	$return .= "</div>\n";	return $return;}function screen_options($screen) {	if ( is_string($screen) )		$screen = convert_to_screen($screen);	switch ( $screen->base ) {		case 'edit':		case 'edit-pages':			$post_type = 'post';			if ( isset($_GET['post_type']) && in_array( $_GET['post_type'], get_post_types( array('public' => true ) ) ) )				$post_type = $_GET['post_type'];			$post_type_object = get_post_type_object($post_type);			$per_page_label = $post_type_object->labels->name;			break;		case 'ms-sites':			$per_page_label = _x( 'Sites', 'sites per page (screen options)' );			break;		case 'ms-users':			$per_page_label = _x( 'Users', 'users per page (screen options)' );			break;		case 'edit-comments':			$per_page_label = _x( 'Comments', 'comments per page (screen options)' );			break;		case 'upload':			$per_page_label = _x( 'Media items', 'items per page (screen options)' );			break;		case 'edit-tags':			global $tax;			$per_page_label = $tax->labels->name;			break;		case 'plugins':			$per_page_label = _x( 'Plugins', 'plugins per page (screen options)' );			break;		default:			return '';	}	$option = str_replace( '-', '_', "{$screen->id}_per_page" );	if ( 'edit_tags_per_page' == $option ) {		if ( 'category' == $tax->name )			$option = 'categories_per_page';		elseif ( 'post_tag' != $tax->name )			$option = 'edit_' . $tax->name . '_per_page';	}	$per_page = (int) get_user_option( $option );	if ( empty( $per_page ) || $per_page < 1 ) {		if ( 'plugins' == $screen->id )			$per_page = 999;		else			$per_page = 20;	}	if ( 'edit_comments_per_page' == $option )		$per_page = apply_filters( 'comments_per_page', $per_page, isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all' );	elseif ( 'categories_per_page' == $option )		$per_page = apply_filters( 'edit_categories_per_page', $per_page );	else		$per_page = apply_filters( $option, $per_page );	$return = "<div class='screen-options'>\n";	if ( !empty($per_page_label) )		$return .= "<input type='text' class='screen-per-page' name='wp_screen_options[value]' id='$option' maxlength='3' value='$per_page' /> <label for='$option'>$per_page_label</label>\n";	$return .= "<input type='submit' class='button' value='" . esc_attr__('Apply') . "' />";	$return .= "<input type='hidden' name='wp_screen_options[option]' value='" . esc_attr($option) . "' />";	$return .= "</div>\n";	return $return;}function screen_icon($screen = '') {	global $current_screen;	if ( empty($screen) )		$screen = $current_screen;	elseif ( is_string($screen) )		$name = $screen;	if ( empty($name) ) {		if ( !empty($screen->parent_base) )			$name = $screen->parent_base;		else			$name = $screen->base;		if ( 'edit' == $name && isset($screen->post_type) && 'page' == $screen->post_type )			$name = 'edit-pages';	}?>	<div id="icon-<?php echo $name; ?>" class="icon32"><br /></div><?php}/** * Test support for compressing JavaScript from PHP * * Outputs JavaScript that tests if compression from PHP works as expected * and sets an option with the result. Has no effect when the current user * is not an administrator. To run the test again the option 'can_compress_scripts' * has to be deleted. * * @since 2.8.0 */function compression_test() {?>	<script type="text/javascript">	/* <![CDATA[ */	var testCompression = {		get : function(test) {			var x;			if ( window.XMLHttpRequest ) {				x = new XMLHttpRequest();			} else {				try{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}			}			if (x) {				x.onreadystatechange = function() {					var r, h;					if ( x.readyState == 4 ) {						r = x.responseText.substr(0, 18);						h = x.getResponseHeader('Content-Encoding');						testCompression.check(r, h, test);					}				}				x.open('GET', 'admin-ajax.php?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);				x.send('');			}		},		check : function(r, h, test) {			if ( ! r && ! test )				this.get(1);			if ( 1 == test ) {				if ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )					this.get('no');				else					this.get(2);				return;			}			if ( 2 == test ) {				if ( '"wpCompressionTest' == r )					this.get('yes');				else					this.get('no');			}		}	};	testCompression.check();	/* ]]> */	</script><?php}/** * Set the current screen object * * @since 3.0.0 * * @uses $current_screen * * @param string $id Screen id, optional. */function set_current_screen( $id =  '' ) {	global $current_screen, $hook_suffix, $typenow, $taxnow;	$action = '';	if ( empty($id) ) {		$current_screen = $hook_suffix;		$current_screen = str_replace('.php', '', $current_screen);		if ( preg_match('/-add|-new$/', $current_screen) )			$action = 'add';		$current_screen = str_replace('-new', '', $current_screen);		$current_screen = str_replace('-add', '', $current_screen);		$current_screen = array('id' => $current_screen, 'base' => $current_screen);	} else {		$id = sanitize_key($id);		if ( false !== strpos($id, '-') ) {			list( $id, $typenow ) = explode('-', $id, 2);			if ( taxonomy_exists( $typenow ) ) {				$id = 'edit-tags';				$taxnow = $typenow;				$typenow = '';			}		}		$current_screen = array('id' => $id, 'base' => $id);	}	$current_screen = (object) $current_screen;	$current_screen->action = $action;	// Map index to dashboard	if ( 'index' == $current_screen->base )		$current_screen->base = 'dashboard';	if ( 'index' == $current_screen->id )		$current_screen->id = 'dashboard';	if ( 'edit' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id .= '-' . $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'post' == $current_screen->id ) {		if ( empty($typenow) )			$typenow = 'post';		$current_screen->id = $typenow;		$current_screen->post_type = $typenow;	} elseif ( 'edit-tags' == $current_screen->id ) {		if ( empty($taxnow) )			$taxnow = 'post_tag';		$current_screen->id = 'edit-' . $taxnow;		$current_screen->taxonomy = $taxnow;	}	$current_screen = apply_filters('current_screen', $current_screen);}?>
<?php/** * WordPress Feed API * * Many of the functions used in here belong in The Loop, or The Loop for the * Feeds. * * @package WordPress * @subpackage Feed *//** * RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.5.1 * @uses apply_filters() Calls 'get_bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. * @return string */function get_bloginfo_rss($show = '') {	$info = strip_tags(get_bloginfo($show));	return apply_filters('get_bloginfo_rss', convert_chars($info), $show);}/** * Display RSS container for the bloginfo function. * * You can retrieve anything that you can using the get_bloginfo() function. * Everything will be stripped of tags and characters converted, when the values * are retrieved for use in the feeds. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'bloginfo_rss' hook with two parameters. * @see get_bloginfo() For the list of possible values to display. * * @param string $show See get_bloginfo() for possible values. */function bloginfo_rss($show = '') {	echo apply_filters('bloginfo_rss', get_bloginfo_rss($show), $show);}/** * Retrieve the default feed. * * The default feed is 'rss2', unless a plugin changes it through the * 'default_feed' filter. * * @package WordPress * @subpackage Feed * @since 2.5 * @uses apply_filters() Calls 'default_feed' hook on the default feed string. * * @return string Default feed, or for example 'rss2', 'atom', etc. */function get_default_feed() {	return apply_filters('default_feed', 'rss2');}/** * Retrieve the blog title for the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'get_wp_title_rss' hook on title. * @uses wp_title() See function for $sep parameter usage. * * @param string $sep Optional.How to separate the title. See wp_title() for more info. * @return string Error message on failure or blog title on success. */function get_wp_title_rss($sep = '&#187;') {	$title = wp_title($sep, false);	if ( is_wp_error( $title ) )		return $title->get_error_message();	$title = apply_filters('get_wp_title_rss', $title);	return $title;}/** * Display the blog title for display of the feed title. * * @package WordPress * @subpackage Feed * @since 2.2.0 * @uses apply_filters() Calls 'wp_title_rss' on the blog title. * @see wp_title() $sep parameter usage. * * @param string $sep Optional. */function wp_title_rss($sep = '&#187;') {	echo apply_filters('wp_title_rss', get_wp_title_rss($sep));}/** * Retrieve the current post title for the feed. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'the_title_rss' on the post title. * * @return string Current post title. */function get_the_title_rss() {	$title = get_the_title();	$title = apply_filters('the_title_rss', $title);	return $title;}/** * Display the post title in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses get_the_title_rss() Used to retrieve current post title. */function the_title_rss() {	echo get_the_title_rss();}/** * Retrieve the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function get_the_content_feed($feed_type = null) {	if ( !$feed_type )		$feed_type = get_default_feed();	$content = apply_filters('the_content', get_the_content());	$content = str_replace(']]>', ']]&gt;', $content);	return apply_filters('the_content_feed', $content, $feed_type);}/** * Display the post content for feeds. * * @package WordPress * @subpackage Feed * @since 2.9.0 * @uses apply_filters() Calls 'the_content_feed' on the content before processing. * @see get_the_content() * * @param string $feed_type The type of feed. rss2 | atom | rss | rdf */function the_content_feed($feed_type = null) {	echo get_the_content_feed();}/** * Display the post excerpt for the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @uses apply_filters() Calls 'the_excerpt_rss' hook on the excerpt. */function the_excerpt_rss() {	$output = get_the_excerpt();	echo apply_filters('the_excerpt_rss', $output);}/** * Display the permalink to the post for use in feeds. * * @package WordPress * @subpackage Feed * @since 2.3.0 * @uses apply_filters() Call 'the_permalink_rss' on the post permalink */function the_permalink_rss() {	echo esc_url( apply_filters('the_permalink_rss', get_permalink() ));}/** * Outputs the link to the comments for the current post in an xml safe way * * @since 3.0.0 * @return none */function comments_link_feed() {	echo esc_url( get_comments_link() );}/** * Display the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. */function comment_guid($comment_id = null) {	echo esc_url( get_comment_guid($comment_id) );}/** * Retrieve the feed GUID for the current comment. * * @package WordPress * @subpackage Feed * @since unknown * * @param int|object $comment_id Optional comment object or id. Defaults to global comment object. * @return bool|string false on failure or guid for comment on success. */function get_comment_guid($comment_id = null) {	$comment = get_comment($comment_id);	if ( !is_object($comment) )		return false;	return get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;}/** * Display the link to the comments. * * @since 1.5.0 */function comment_link() {	echo esc_url( get_comment_link() );}/** * Retrieve the current comment author for use in the feeds. * * @package WordPress * @subpackage Feed * @since 2.0.0 * @uses apply_filters() Calls 'comment_author_rss' hook on comment author. * @uses get_comment_author() * * @return string Comment Author */function get_comment_author_rss() {	return apply_filters('comment_author_rss', get_comment_author() );}/** * Display the current comment author in the feed. * * @package WordPress * @subpackage Feed * @since 1.0.0 */function comment_author_rss() {	echo get_comment_author_rss();}/** * Display the current comment content for use in the feeds. * * @package WordPress * @subpackage Feed * @since 1.0.0 * @uses apply_filters() Calls 'comment_text_rss' filter on comment content. * @uses get_comment_text() */function comment_text_rss() {	$comment_text = get_comment_text();	$comment_text = apply_filters('comment_text_rss', $comment_text);	echo $comment_text;}/** * Retrieve all of the post categories, formatted for use in feeds. * * All of the categories for the current post in the feed loop, will be * retrieved and have feed markup added, so that they can easily be added to the * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds. * * @package WordPress * @subpackage Feed * @since 2.1.0 * @uses apply_filters() * * @param string $type Optional, default is the type returned by get_default_feed(). * @return string All of the post categories for displaying in the feed. */function get_the_category_rss($type = null) {	if ( empty($type) )		$type = get_default_feed();	$categories = get_the_category();	$tags = get_the_tags();	$the_list = '';	$cat_names = array();	$filter = 'rss';	if ( 'atom' == $type )		$filter = 'raw';	if ( !empty($categories) ) foreach ( (array) $categories as $category ) {		$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);	}	if ( !empty($tags) ) foreach ( (array) $tags as $tag ) {		$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);	}	$cat_names = array_unique($cat_names);	foreach ( $cat_names as $cat_name ) {		if ( 'rdf' == $type )			$the_list .= "\t\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\n";		elseif ( 'atom' == $type )			$the_list .= sprintf( '<category scheme="%1$s" term="%2$s" />', esc_attr( apply_filters( 'get_bloginfo_rss', get_bloginfo( 'url' ) ) ), esc_attr( $cat_name ) );		else			$the_list .= "\t\t<category><![CDATA[" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . "]]></category>\n";	}	return apply_filters('the_category_rss', $the_list, $type);}/** * Display the post categories in the feed. * * @package WordPress * @subpackage Feed * @since 0.71 * @see get_the_category_rss() For better explanation. * * @param string $type Optional, default is the type returned by get_default_feed(). */function the_category_rss($type = null) {	echo get_the_category_rss($type);}/** * Display the HTML type based on the blog setting. * * The two possible values are either 'xhtml' or 'html'. * * @package WordPress * @subpackage Feed * @since 2.2.0 */function html_type_rss() {	$type = get_bloginfo('html_type');	if (strpos($type, 'xhtml') !== false)		$type = 'xhtml';	else		$type = 'html';	echo $type;}/** * Display the rss enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of enclosure HTML tag(s) with a URI and other * attributes. * * @package WordPress * @subpackage Template * @since 1.5.0 * @uses apply_filters() Calls 'rss_enclosure' hook on rss enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function rss_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = explode("\n", $enc);				//only get the the first element eg, audio/mpeg from 'audio/mpeg mpga mp2 mp3'				$t = preg_split('/[ \t]/', trim($enclosure[2]) );				$type = $t[0];				echo apply_filters('rss_enclosure', '<enclosure url="' . trim(htmlspecialchars($enclosure[0])) . '" length="' . trim($enclosure[1]) . '" type="' . $type . '" />' . "\n");			}		}	}}/** * Display the atom enclosure for the current post. * * Uses the global $post to check whether the post requires a password and if * the user has the password for the post. If not then it will return before * displaying. * * Also uses the function get_post_custom() to get the post's 'enclosure' * metadata field and parses the value to display the enclosure(s). The * enclosure(s) consist of link HTML tag(s) with a URI and other attributes. * * @package WordPress * @subpackage Template * @since 2.2.0 * @uses apply_filters() Calls 'atom_enclosure' hook on atom enclosure. * @uses get_post_custom() To get the current post enclosure metadata. */function atom_enclosure() {	if ( post_password_required() )		return;	foreach ( (array) get_post_custom() as $key => $val ) {		if ($key == 'enclosure') {			foreach ( (array) $val as $enc ) {				$enclosure = split("\n", $enc);				echo apply_filters('atom_enclosure', '<link href="' . trim(htmlspecialchars($enclosure[0])) . '" rel="enclosure" length="' . trim($enclosure[1]) . '" type="' . trim($enclosure[2]) . '" />' . "\n");			}		}	}}/** * Determine the type of a string of data with the data formatted. * * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1. * * In the case of WordPress, text is defined as containing no markup, * xhtml is defined as "well formed", and html as tag soup (i.e., the rest). * * Container div tags are added to xhtml values, per section 3.1.1.3. * * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1 * * @package WordPress * @subpackage Feed * @since 2.5 * * @param string $data Input string * @return array array(type, value) */function prep_atom_text_construct($data) {	if (strpos($data, '<') === false && strpos($data, '&') === false) {		return array('text', $data);	}	$parser = xml_parser_create();	xml_parse($parser, '<div>' . $data . '</div>', true);	$code = xml_get_error_code($parser);	xml_parser_free($parser);	if (!$code) {		if (strpos($data, '<') === false) {			return array('text', $data);		} else {			$data = "<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>";			return array('xhtml', $data);		}	}	if (strpos($data, ']]>') == false) {		return array('html', "<![CDATA[$data]]>");	} else {		return array('html', htmlspecialchars($data));	}}/** * Display the link for the currently displayed feed in a XSS safe way. * * Generate a correct link for the atom:self element. * * @package WordPress * @subpackage Feed * @since 2.5 */function self_link() {	$host = @parse_url(home_url());	$host = $host['host'];	echo esc_url(		'http'		. ( (isset($_SERVER['https']) && $_SERVER['https'] == 'on') ? 's' : '' ) . '://'		. $host		. stripslashes($_SERVER['REQUEST_URI'])		);}/** * Return the content type for specified feed type. * * @package WordPress * @subpackage Feed * @since 2.8.0 */function feed_content_type( $type = '' ) {	if ( empty($type) )		$type = get_default_feed();	$types = array(		'rss'  => 'application/rss+xml',		'rss2' => 'application/rss+xml',		'rss-http'  => 'text/xml',		'atom' => 'application/atom+xml',		'rdf'  => 'application/rdf+xml'	);	$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';	return apply_filters( 'feed_content_type', $content_type, $type );}/** * Build SimplePie object based on RSS or Atom feed from URL. * * @since 2.8 * * @param string $url URL to retrieve feed * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success */function fetch_feed($url) {	require_once (ABSPATH . WPINC . '/class-feed.php');	$feed = new SimplePie();	$feed->set_feed_url($url);	$feed->set_cache_class('WP_Feed_Cache');	$feed->set_file_class('WP_SimplePie_File');	$feed->set_cache_duration(apply_filters('wp_feed_cache_transient_lifetime', 43200, $url));	do_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );	$feed->init();	$feed->handle_content_type();	if ( $feed->error() )		return new WP_Error('simplepie-error', $feed->error());	return $feed;}
<?php/** * Edit user administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars(array('action', 'redirect', 'profile', 'user_id', 'wp_http_referer'));$user_id = (int) $user_id;$current_user = wp_get_current_user();if ( ! defined( 'IS_PROFILE_PAGE' ) )	define( 'IS_PROFILE_PAGE', ( $user_id == $current_user->ID ) );if ( ! $user_id && IS_PROFILE_PAGE )	$user_id = $current_user->ID;elseif ( ! $user_id && ! IS_PROFILE_PAGE )	wp_die(__( 'Invalid user ID.' ) );elseif ( ! get_userdata( $user_id ) )	wp_die( __('Invalid user ID.') );wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');$title = IS_PROFILE_PAGE ? __('Profile') : __('Edit User');if ( current_user_can('edit_users') && !IS_PROFILE_PAGE )	$submenu_file = 'users.php';else	$submenu_file = 'profile.php';$parent_file = 'users.php';// contextual help - choose Help on the top right of admin panel to preview this.add_contextual_help($current_screen,    '<p>' . __('Your profile contains information about you (your &#8220;account&#8221;) as well as some personal options related to using WordPress.') . '</p>' .    '<p>' . __('You can change your password, turn on keyboard shortcuts, change the color scheme of your WordPress administration screens, and turn off the WYSIWYG (Visual) editor, among other things.') . '</p>' .    '<p>' . __('Your username cannot be changed, but you can use other fields to enter your real name or a nickname, and change which name to display on your posts.') . '</p>' .    '<p>' . __('Required fields are indicated; the rest are optional. Profile information will only be displayed if your theme is set up to do so.') . '</p>' .    '<p>' . __('Remember to click the Update Profile button when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Your_Profile_SubPanel" target="_blank">Documentation on User Profiles</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');$wp_http_referer = remove_query_arg(array('update', 'delete_count'), stripslashes($wp_http_referer));$all_post_caps = array('posts', 'pages');$user_can_edit = false;foreach ( $all_post_caps as $post_cap )	$user_can_edit |= current_user_can("edit_$post_cap");/** * Optional SSL preference that can be turned on by hooking to the 'personal_options' action. * * @since 2.7.0 * * @param object $user User data object */function use_ssl_preference($user) {?>	<tr>		<th scope="row"><?php _e('Use https')?></th>		<td><label for="use_ssl"><input name="use_ssl" type="checkbox" id="use_ssl" value="1" <?php checked('1', $user->use_ssl); ?> /> <?php _e('Always use https when visiting the admin'); ?></label></td>	</tr><?php}// Only allow super admins on multisite to edit every user.if ( is_multisite() && ! current_user_can( 'manage_network_users' ) && $user_id != $current_user->ID && ! apply_filters( 'enable_edit_any_user_configuration', true ) )	wp_die( __( 'You do not have permission to edit this user.' ) );// Execute confirmed email change. See send_confirmation_on_profile_email().if ( is_multisite() && IS_PROFILE_PAGE && isset( $_GET[ 'newuseremail' ] ) && $current_user->ID ) {	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email[ 'hash' ] == $_GET[ 'newuseremail' ] ) {		$user->ID = $current_user->ID;		$user->user_email = esc_html( trim( $new_email[ 'newemail' ] ) );		if ( $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $current_user->user_login ) ) )			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $user->user_email, $current_user->user_login ) );		wp_update_user( get_object_vars( $user ) );		delete_option( $current_user->ID . '_new_email' );		wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );		die();	}} elseif ( is_multisite() && IS_PROFILE_PAGE && !empty( $_GET['dismiss'] ) && $current_user->ID . '_new_email' == $_GET['dismiss'] ) {	delete_option( $current_user->ID . '_new_email' );	wp_redirect( add_query_arg( array('updated' => 'true'), admin_url( 'profile.php' ) ) );	die();}switch ($action) {case 'switchposts':check_admin_referer();/* TODO: Switch all posts from one user to another user */break;case 'update':check_admin_referer('update-user_' . $user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));if ( IS_PROFILE_PAGE )	do_action('personal_options_update', $user_id);else	do_action('edit_user_profile_update', $user_id);if ( !is_multisite() ) {	$errors = edit_user($user_id);} else {	$user = get_userdata( $user_id );	// Update the email address in signups, if present.	if ( $user->user_login && isset( $_POST[ 'email' ] ) && is_email( $_POST[ 'email' ] ) && $wpdb->get_var( $wpdb->prepare( "SELECT user_login FROM {$wpdb->signups} WHERE user_login = %s", $user->user_login ) ) )		$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->signups} SET user_email = %s WHERE user_login = %s", $_POST[ 'email' ], $user_login ) );	// WPMU must delete the user from the current blog if WP added him after editing.	$delete_role = false;	$blog_prefix = $wpdb->get_blog_prefix();	if ( $user_id != $current_user->ID ) {		$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$user_id}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );		if ( null == $cap && $_POST[ 'role' ] == '' ) {			$_POST[ 'role' ] = 'contributor';			$delete_role = true;		}	}	if ( !isset( $errors ) || ( isset( $errors ) && is_object( $errors ) && false == $errors->get_error_codes() ) )		$errors = edit_user($user_id);	if ( $delete_role ) // stops users being added to current blog when they are edited		delete_user_meta( $user_id, $blog_prefix . 'capabilities' );	if ( is_multisite() && !IS_PROFILE_PAGE && current_user_can( 'manage_network_options' ) && !isset($super_admins) && empty( $_POST['super_admin'] ) == is_super_admin( $user_id ) )		empty( $_POST['super_admin'] ) ? revoke_super_admin( $user_id ) : grant_super_admin( $user_id );}if ( !is_wp_error( $errors ) ) {	$redirect = (IS_PROFILE_PAGE ? "profile.php?" : "user-edit.php?user_id=$user_id&"). "updated=true";	$redirect = add_query_arg('wp_http_referer', urlencode($wp_http_referer), $redirect);	wp_redirect($redirect);	exit;}default:$profileuser = get_user_to_edit($user_id);if ( !current_user_can('edit_user', $user_id) )	wp_die(__('You do not have permission to edit this user.'));include ('admin-header.php');?><?php if ( !IS_PROFILE_PAGE && is_super_admin( $profileuser->ID ) && current_user_can( 'manage_network_options' ) ) { ?>	<div class="updated"><p><strong><?php _e('Important:'); ?></strong> <?php _e('This user has super admin privileges.'); ?></p></div><?php } ?><?php if ( isset($_GET['updated']) ) : ?><div id="message" class="updated">	<p><strong><?php _e('User updated.') ?></strong></p>	<?php if ( $wp_http_referer && !IS_PROFILE_PAGE ) : ?>	<p><a href="users.php"><?php _e('&larr; Back to Authors and Users'); ?></a></p>	<?php endif; ?></div><?php endif; ?><?php if ( isset( $errors ) && is_wp_error( $errors ) ) : ?><div class="error"><p><?php echo implode( "</p>\n<p>", $errors->get_error_messages() ); ?></p></div><?php endif; ?><div class="wrap" id="profile-page"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="your-profile" action="<?php echo esc_url( admin_url( IS_PROFILE_PAGE ? 'profile.php' : 'user-edit.php' ) ); ?>" method="post"<?php do_action('user_edit_form_tag'); ?>><?php wp_nonce_field('update-user_' . $user_id) ?><?php if ( $wp_http_referer ) : ?>	<input type="hidden" name="wp_http_referer" value="<?php echo esc_url($wp_http_referer); ?>" /><?php endif; ?><p><input type="hidden" name="from" value="profile" /><input type="hidden" name="checkuser_id" value="<?php echo $user_ID ?>" /></p><h3><?php _e('Personal Options'); ?></h3><table class="form-table"><?php if ( rich_edit_exists() && !( IS_PROFILE_PAGE && !$user_can_edit ) ) : // don't bother showing the option if the editor has been removed ?>	<tr>		<th scope="row"><?php _e('Visual Editor')?></th>		<td><label for="rich_editing"><input name="rich_editing" type="checkbox" id="rich_editing" value="false" <?php checked('false', $profileuser->rich_editing); ?> /> <?php _e('Disable the visual editor when writing'); ?></label></td>	</tr><?php endif; ?><?php if ( count($_wp_admin_css_colors) > 1 && has_action('admin_color_scheme_picker') ) : ?><tr><th scope="row"><?php _e('Admin Color Scheme')?></th><td><?php do_action( 'admin_color_scheme_picker' ); ?></td></tr><?phpendif; // $_wp_admin_css_colorsif ( !( IS_PROFILE_PAGE && !$user_can_edit ) ) : ?><tr><th scope="row"><?php _e( 'Keyboard Shortcuts' ); ?></th><td><label for="comment_shortcuts"><input type="checkbox" name="comment_shortcuts" id="comment_shortcuts" value="true" <?php if ( !empty($profileuser->comment_shortcuts) ) checked('true', $profileuser->comment_shortcuts); ?> /> <?php _e('Enable keyboard shortcuts for comment moderation.'); ?></label> <?php _e('<a href="http://codex.wordpress.org/Keyboard_Shortcuts">More information</a>'); ?></td></tr><?phpendif;do_action('personal_options', $profileuser);?></table><?php	if ( IS_PROFILE_PAGE )		do_action('profile_personal_options', $profileuser);?><h3><?php _e('Name') ?></h3><table class="form-table">	<tr>		<th><label for="user_login"><?php _e('Username'); ?></label></th>		<td><input type="text" name="user_login" id="user_login" value="<?php echo esc_attr($profileuser->user_login); ?>" disabled="disabled" class="regular-text" /> <span class="description"><?php _e('Usernames cannot be changed.'); ?></span></td>	</tr><?php if ( !IS_PROFILE_PAGE ): ?><tr><th><label for="role"><?php _e('Role:') ?></label></th><td><select name="role" id="role"><?php// Get the highest/primary role for this user// TODO: create a function that does this: wp_get_user_role()$user_roles = $profileuser->roles;$user_role = array_shift($user_roles);// print the full list of roles with the primary one selected.wp_dropdown_roles($user_role);// print the 'no role' option. Make it selected if the user has no role yet.if ( $user_role )	echo '<option value="">' . __('&mdash; No role for this site &mdash;') . '</option>';else	echo '<option value="" selected="selected">' . __('&mdash; No role for this site &mdash;') . '</option>';?></select><?php if ( is_multisite() && current_user_can( 'manage_network_options' ) && !isset($super_admins) ) { ?><p><label><input type="checkbox" id="super_admin" name="super_admin"<?php checked( is_super_admin( $profileuser->ID ) ); ?> /> <?php _e( 'Grant this user super admin privileges for the Network.'); ?></label></p><?php } ?></td></tr><?php endif; //!IS_PROFILE_PAGE ?><tr>	<th><label for="first_name"><?php _e('First Name') ?></label></th>	<td><input type="text" name="first_name" id="first_name" value="<?php echo esc_attr($profileuser->first_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="last_name"><?php _e('Last Name') ?></label></th>	<td><input type="text" name="last_name" id="last_name" value="<?php echo esc_attr($profileuser->last_name) ?>" class="regular-text" /></td></tr><tr>	<th><label for="nickname"><?php _e('Nickname'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="nickname" id="nickname" value="<?php echo esc_attr($profileuser->nickname) ?>" class="regular-text" /></td></tr><tr>	<th><label for="display_name"><?php _e('Display name publicly as') ?></label></th>	<td>		<select name="display_name" id="display_name">		<?php			$public_display = array();			$public_display['display_username']  = $profileuser->user_login;			$public_display['display_nickname']  = $profileuser->nickname;			if ( !empty($profileuser->first_name) )				$public_display['display_firstname'] = $profileuser->first_name;			if ( !empty($profileuser->last_name) )				$public_display['display_lastname'] = $profileuser->last_name;			if ( !empty($profileuser->first_name) && !empty($profileuser->last_name) ) {				$public_display['display_firstlast'] = $profileuser->first_name . ' ' . $profileuser->last_name;				$public_display['display_lastfirst'] = $profileuser->last_name . ' ' . $profileuser->first_name;			}			if ( !in_array( $profileuser->display_name, $public_display ) ) // Only add this if it isn't duplicated elsewhere				$public_display = array( 'display_displayname' => $profileuser->display_name ) + $public_display;			$public_display = array_map( 'trim', $public_display );			$public_display = array_unique( $public_display );			foreach ( $public_display as $id => $item ) {		?>			<option id="<?php echo $id; ?>" value="<?php echo esc_attr($item); ?>"<?php selected( $profileuser->display_name, $item ); ?>><?php echo $item; ?></option>		<?php			}		?>		</select>	</td></tr></table><h3><?php _e('Contact Info') ?></h3><table class="form-table"><tr>	<th><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>	<td><input type="text" name="email" id="email" value="<?php echo esc_attr($profileuser->user_email) ?>" class="regular-text" />	<?php	$new_email = get_option( $current_user->ID . '_new_email' );	if ( $new_email && $new_email != $current_user->user_email ) : ?>	<div class="updated inline">	<p><?php printf( __('There is a pending change of your e-mail to <code>%1$s</code>. <a href="%2$s">Cancel</a>'), $new_email['newemail'], esc_url( admin_url( 'profile.php?dismiss=' . $current_user->ID . '_new_email' ) ) ); ?></p>	</div>	<?php endif; ?>	</td></tr><tr>	<th><label for="url"><?php _e('Website') ?></label></th>	<td><input type="text" name="url" id="url" value="<?php echo esc_attr($profileuser->user_url) ?>" class="regular-text code" /></td></tr><?php	foreach (_wp_get_user_contactmethods() as $name => $desc) {?><tr>	<th><label for="<?php echo $name; ?>"><?php echo apply_filters('user_'.$name.'_label', $desc); ?></label></th>	<td><input type="text" name="<?php echo $name; ?>" id="<?php echo $name; ?>" value="<?php echo esc_attr($profileuser->$name) ?>" class="regular-text" /></td></tr><?php	}?></table><h3><?php IS_PROFILE_PAGE ? _e('About Yourself') : _e('About the user'); ?></h3><table class="form-table"><tr>	<th><label for="description"><?php _e('Biographical Info'); ?></label></th>	<td><textarea name="description" id="description" rows="5" cols="30"><?php echo esc_html($profileuser->description); ?></textarea><br />	<span class="description"><?php _e('Share a little biographical information to fill out your profile. This may be shown publicly.'); ?></span></td></tr><?php$show_password_fields = apply_filters('show_password_fields', true, $profileuser);if ( $show_password_fields ) :?><tr id="password">	<th><label for="pass1"><?php _e('New Password'); ?></label></th>	<td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("If you would like to change the password type a new one. Otherwise leave this blank."); ?></span><br />		<input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /> <span class="description"><?php _e("Type your new password again."); ?></span><br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>	</td></tr><?php endif; ?></table><?php	if ( IS_PROFILE_PAGE )		do_action( 'show_user_profile', $profileuser );	else		do_action( 'edit_user_profile', $profileuser );?><?php if ( count($profileuser->caps) > count($profileuser->roles) && apply_filters('additional_capabilities_display', true, $profileuser) ) { ?><br class="clear" />	<table width="99%" style="border: none;" cellspacing="2" cellpadding="3" class="editform">		<tr>			<th scope="row"><?php _e('Additional Capabilities') ?></th>			<td><?php			$output = '';			foreach ( $profileuser->caps as $cap => $value ) {				if ( !$wp_roles->is_role($cap) ) {					if ( $output != '' )						$output .= ', ';					$output .= $value ? $cap : "Denied: {$cap}";				}			}			echo $output;			?></td>		</tr>	</table><?php } ?><p class="submit">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="<?php echo esc_attr($user_id); ?>" />	<input type="submit" class="button-primary" value="<?php IS_PROFILE_PAGE ? esc_attr_e('Update Profile') : esc_attr_e('Update User') ?>" name="submit" /></p></form></div><?phpbreak;}?><script type="text/javascript" charset="utf-8">	if (window.location.hash == '#password') {		document.getElementById('pass1').focus();	}</script><?phpinclude('./admin-footer.php');?>
<?php/** * TwentyTen functions and definitions * * Sets up the theme and provides some helper functions. Some helper functions * are used in the theme as custom template tags. Others are attached to action and * filter hooks in WordPress to change core functionality. * * The first function, twentyten_setup(), sets up the theme by registering support * for various features in WordPress, such as post thumbnails, navigation menus, and the like. * * When using a child theme (see http://codex.wordpress.org/Theme_Development and * http://codex.wordpress.org/Child_Themes), you can override certain functions * (those wrapped in a function_exists() call) by defining them first in your child theme's * functions.php file. The child theme's functions.php file is included before the parent * theme's file, so the child theme functions would be used. * * Functions that are not pluggable (not wrapped in function_exists()) are instead attached * to a filter or action hook. The hook can be removed by using remove_action() or * remove_filter() and you can attach your own function to the hook. * * We can remove the parent theme's hook only after it is attached, which means we need to * wait until setting up the child theme: * * <code> * add_action( 'after_setup_theme', 'my_child_theme_setup' ); * function my_child_theme_setup() { *     // We are providing our own filter for excerpt_length (or using the unfiltered value) *     remove_filter( 'excerpt_length', 'twentyten_excerpt_length' ); *     ... * } * </code> * * For more information on hooks, actions, and filters, see http://codex.wordpress.org/Plugin_API. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 *//** * Set the content width based on the theme's design and stylesheet. * * Used to set the width of images and content. Should be equal to the width the theme * is designed for, generally via the style.css stylesheet. */if ( ! isset( $content_width ) )	$content_width = 640;/** Tell WordPress to run twentyten_setup() when the 'after_setup_theme' hook is run. */add_action( 'after_setup_theme', 'twentyten_setup' );if ( ! function_exists( 'twentyten_setup' ) ):/** * Sets up theme defaults and registers support for various WordPress features. * * Note that this function is hooked into the after_setup_theme hook, which runs * before the init hook. The init hook is too late for some features, such as indicating * support post thumbnails. * * To override twentyten_setup() in a child theme, add your own twentyten_setup to your child theme's * functions.php file. * * @uses add_theme_support() To add support for post thumbnails and automatic feed links. * @uses register_nav_menus() To add support for navigation menus. * @uses add_custom_background() To add support for a custom background. * @uses add_editor_style() To style the visual editor. * @uses load_theme_textdomain() For translation/localization support. * @uses add_custom_image_header() To add support for a custom header. * @uses register_default_headers() To register the default custom header images provided with the theme. * @uses set_post_thumbnail_size() To set a custom post thumbnail size. * * @since Twenty Ten 1.0 */function twentyten_setup() {	// This theme styles the visual editor with editor-style.css to match the theme style.	add_editor_style();	// This theme uses post thumbnails	add_theme_support( 'post-thumbnails' );	// Add default posts and comments RSS feed links to head	add_theme_support( 'automatic-feed-links' );	// Make theme available for translation	// Translations can be filed in the /languages/ directory	load_theme_textdomain( 'twentyten', TEMPLATEPATH . '/languages' );	$locale = get_locale();	$locale_file = TEMPLATEPATH . "/languages/$locale.php";	if ( is_readable( $locale_file ) )		require_once( $locale_file );	// This theme uses wp_nav_menu() in one location.	register_nav_menus( array(		'primary' => __( 'Primary Navigation', 'twentyten' ),	) );	// This theme allows users to set a custom background	add_custom_background();	// Your changeable header business starts here	define( 'HEADER_TEXTCOLOR', '' );	// No CSS, just IMG call. The %s is a placeholder for the theme template directory URI.	define( 'HEADER_IMAGE', '%s/images/headers/path.jpg' );	// The height and width of your custom header. You can hook into the theme's own filters to change these values.	// Add a filter to twentyten_header_image_width and twentyten_header_image_height to change these values.	define( 'HEADER_IMAGE_WIDTH', apply_filters( 'twentyten_header_image_width', 940 ) );	define( 'HEADER_IMAGE_HEIGHT', apply_filters( 'twentyten_header_image_height', 198 ) );	// We'll be using post thumbnails for custom header images on posts and pages.	// We want them to be 940 pixels wide by 198 pixels tall.	// Larger images will be auto-cropped to fit, smaller ones will be ignored. See header.php.	set_post_thumbnail_size( HEADER_IMAGE_WIDTH, HEADER_IMAGE_HEIGHT, true );	// Don't support text inside the header image.	define( 'NO_HEADER_TEXT', true );	// Add a way for the custom header to be styled in the admin panel that controls	// custom headers. See twentyten_admin_header_style(), below.	add_custom_image_header( '', 'twentyten_admin_header_style' );	// ... and thus ends the changeable header business.	// Default custom headers packaged with the theme. %s is a placeholder for the theme template directory URI.	register_default_headers( array(		'berries' => array(			'url' => '%s/images/headers/berries.jpg',			'thumbnail_url' => '%s/images/headers/berries-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Berries', 'twentyten' )		),		'cherryblossom' => array(			'url' => '%s/images/headers/cherryblossoms.jpg',			'thumbnail_url' => '%s/images/headers/cherryblossoms-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Cherry Blossoms', 'twentyten' )		),		'concave' => array(			'url' => '%s/images/headers/concave.jpg',			'thumbnail_url' => '%s/images/headers/concave-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Concave', 'twentyten' )		),		'fern' => array(			'url' => '%s/images/headers/fern.jpg',			'thumbnail_url' => '%s/images/headers/fern-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Fern', 'twentyten' )		),		'forestfloor' => array(			'url' => '%s/images/headers/forestfloor.jpg',			'thumbnail_url' => '%s/images/headers/forestfloor-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Forest Floor', 'twentyten' )		),		'inkwell' => array(			'url' => '%s/images/headers/inkwell.jpg',			'thumbnail_url' => '%s/images/headers/inkwell-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Inkwell', 'twentyten' )		),		'path' => array(			'url' => '%s/images/headers/path.jpg',			'thumbnail_url' => '%s/images/headers/path-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Path', 'twentyten' )		),		'sunset' => array(			'url' => '%s/images/headers/sunset.jpg',			'thumbnail_url' => '%s/images/headers/sunset-thumbnail.jpg',			/* translators: header image description */			'description' => __( 'Sunset', 'twentyten' )		)	) );}endif;if ( ! function_exists( 'twentyten_admin_header_style' ) ) :/** * Styles the header image displayed on the Appearance > Header admin panel. * * Referenced via add_custom_image_header() in twentyten_setup(). * * @since Twenty Ten 1.0 */function twentyten_admin_header_style() {?><style type="text/css">/* Shows the same border as on front end */#headimg {	border-bottom: 1px solid #000;	border-top: 4px solid #000;}/* If NO_HEADER_TEXT is false, you would style the text with these selectors:	#headimg #name { }	#headimg #desc { }*/</style><?php}endif;/** * Makes some changes to the <title> tag, by filtering the output of wp_title(). * * If we have a site description and we're viewing the home page or a blog posts * page (when using a static front page), then we will add the site description. * * If we're viewing a search result, then we're going to recreate the title entirely. * We're going to add page numbers to all titles as well, to the middle of a search * result title and the end of all other titles. * * The site title also gets added to all titles. * * @since Twenty Ten 1.0 * * @param string $title Title generated by wp_title() * @param string $separator The separator passed to wp_title(). Twenty Ten uses a * 	vertical bar, "|", as a separator in header.php. * @return string The new title, ready for the <title> tag. */function twentyten_filter_wp_title( $title, $separator ) {	// Don't affect wp_title() calls in feeds.	if ( is_feed() )		return $title;	// The $paged global variable contains the page number of a listing of posts.	// The $page global variable contains the page number of a single post that is paged.	// We'll display whichever one applies, if we're not looking at the first page.	global $paged, $page;	if ( is_search() ) {		// If we're a search, let's start over:		$title = sprintf( __( 'Search results for %s', 'twentyten' ), '"' . get_search_query() . '"' );		// Add a page number if we're on page 2 or more:		if ( $paged >= 2 )			$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), $paged );		// Add the site name to the end:		$title .= " $separator " . get_bloginfo( 'name', 'display' );		// We're done. Let's send the new title back to wp_title():		return $title;	}	// Otherwise, let's start by adding the site name to the end:	$title .= get_bloginfo( 'name', 'display' );	// If we have a site description and we're on the home/front page, add the description:	$site_description = get_bloginfo( 'description', 'display' );	if ( $site_description && ( is_home() || is_front_page() ) )		$title .= " $separator " . $site_description;	// Add a page number if necessary:	if ( $paged >= 2 || $page >= 2 )		$title .= " $separator " . sprintf( __( 'Page %s', 'twentyten' ), max( $paged, $page ) );	// Return the new title to wp_title():	return $title;}add_filter( 'wp_title', 'twentyten_filter_wp_title', 10, 2 );/** * Get our wp_nav_menu() fallback, wp_page_menu(), to show a home link. * * To override this in a child theme, remove the filter and optionally add * your own function tied to the wp_page_menu_args filter hook. * * @since Twenty Ten 1.0 */function twentyten_page_menu_args( $args ) {	$args['show_home'] = true;	return $args;}add_filter( 'wp_page_menu_args', 'twentyten_page_menu_args' );/** * Sets the post excerpt length to 40 characters. * * To override this length in a child theme, remove the filter and add your own * function tied to the excerpt_length filter hook. * * @since Twenty Ten 1.0 * @return int */function twentyten_excerpt_length( $length ) {	return 40;}add_filter( 'excerpt_length', 'twentyten_excerpt_length' );/** * Returns a "Continue Reading" link for excerpts * * @since Twenty Ten 1.0 * @return string "Continue Reading" link */function twentyten_continue_reading_link() {	return ' <a href="'. get_permalink() . '">' . __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) . '</a>';}/** * Replaces "[...]" (appended to automatically generated excerpts) with an ellipsis and twentyten_continue_reading_link(). * * To override this in a child theme, remove the filter and add your own * function tied to the excerpt_more filter hook. * * @since Twenty Ten 1.0 * @return string An ellipsis */function twentyten_auto_excerpt_more( $more ) {	return ' &hellip;' . twentyten_continue_reading_link();}add_filter( 'excerpt_more', 'twentyten_auto_excerpt_more' );/** * Adds a pretty "Continue Reading" link to custom post excerpts. * * To override this link in a child theme, remove the filter and add your own * function tied to the get_the_excerpt filter hook. * * @since Twenty Ten 1.0 * @return string Excerpt with a pretty "Continue Reading" link */function twentyten_custom_excerpt_more( $output ) {	if ( has_excerpt() && ! is_attachment() ) {		$output .= twentyten_continue_reading_link();	}	return $output;}add_filter( 'get_the_excerpt', 'twentyten_custom_excerpt_more' );/** * Remove inline styles printed when the gallery shortcode is used. * * Galleries are styled by the theme in Twenty Ten's style.css. * * @since Twenty Ten 1.0 * @return string The gallery style filter, with the styles themselves removed. */function twentyten_remove_gallery_css( $css ) {	return preg_replace( "#<style type='text/css'>(.*?)</style>#s", '', $css );}add_filter( 'gallery_style', 'twentyten_remove_gallery_css' );if ( ! function_exists( 'twentyten_comment' ) ) :/** * Template for comments and pingbacks. * * To override this walker in a child theme without modifying the comments template * simply create your own twentyten_comment(), and that function will be used instead. * * Used as a callback by wp_list_comments() for displaying the comments. * * @since Twenty Ten 1.0 */function twentyten_comment( $comment, $args, $depth ) {	$GLOBALS['comment'] = $comment;	switch ( $comment->comment_type ) :		case '' :	?>	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>">		<div id="comment-<?php comment_ID(); ?>">		<div class="comment-author vcard">			<?php echo get_avatar( $comment, 40 ); ?>			<?php printf( __( '%s <span class="says">says:</span>', 'twentyten' ), sprintf( '<cite class="fn">%s</cite>', get_comment_author_link() ) ); ?>		</div><!-- .comment-author .vcard -->		<?php if ( $comment->comment_approved == '0' ) : ?>			<em><?php _e( 'Your comment is awaiting moderation.', 'twentyten' ); ?></em>			<br />		<?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo esc_url( get_comment_link( $comment->comment_ID ) ); ?>">			<?php				/* translators: 1: date, 2: time */				printf( __( '%1$s at %2$s', 'twentyten' ), get_comment_date(),  get_comment_time() ); ?></a><?php edit_comment_link( __( '(Edit)', 'twentyten' ), ' ' );			?>		</div><!-- .comment-meta .commentmetadata -->		<div class="comment-body"><?php comment_text(); ?></div>		<div class="reply">			<?php comment_reply_link( array_merge( $args, array( 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>		</div><!-- .reply -->	</div><!-- #comment-##  -->	<?php			break;		case 'pingback'  :		case 'trackback' :	?>	<li class="post pingback">		<p><?php _e( 'Pingback:', 'twentyten' ); ?> <?php comment_author_link(); ?><?php edit_comment_link( __('(Edit)', 'twentyten'), ' ' ); ?></p>	<?php			break;	endswitch;}endif;/** * Register widgetized areas, including two sidebars and four widget-ready columns in the footer. * * To override twentyten_widgets_init() in a child theme, remove the action hook and add your own * function tied to the init hook. * * @since Twenty Ten 1.0 * @uses register_sidebar */function twentyten_widgets_init() {	// Area 1, located at the top of the sidebar.	register_sidebar( array(		'name' => __( 'Primary Widget Area', 'twentyten' ),		'id' => 'primary-widget-area',		'description' => __( 'The primary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 2, located below the Primary Widget Area in the sidebar. Empty by default.	register_sidebar( array(		'name' => __( 'Secondary Widget Area', 'twentyten' ),		'id' => 'secondary-widget-area',		'description' => __( 'The secondary widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 3, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'First Footer Widget Area', 'twentyten' ),		'id' => 'first-footer-widget-area',		'description' => __( 'The first footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 4, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Second Footer Widget Area', 'twentyten' ),		'id' => 'second-footer-widget-area',		'description' => __( 'The second footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 5, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Third Footer Widget Area', 'twentyten' ),		'id' => 'third-footer-widget-area',		'description' => __( 'The third footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );	// Area 6, located in the footer. Empty by default.	register_sidebar( array(		'name' => __( 'Fourth Footer Widget Area', 'twentyten' ),		'id' => 'fourth-footer-widget-area',		'description' => __( 'The fourth footer widget area', 'twentyten' ),		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => '</li>',		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',	) );}/** Register sidebars by running twentyten_widgets_init() on the widgets_init hook. */add_action( 'widgets_init', 'twentyten_widgets_init' );/** * Removes the default styles that are packaged with the Recent Comments widget. * * To override this in a child theme, remove the filter and optionally add your own * function tied to the widgets_init action hook. * * @since Twenty Ten 1.0 */function twentyten_remove_recent_comments_style() {	global $wp_widget_factory;	remove_action( 'wp_head', array( $wp_widget_factory->widgets['WP_Widget_Recent_Comments'], 'recent_comments_style' ) );}add_action( 'widgets_init', 'twentyten_remove_recent_comments_style' );if ( ! function_exists( 'twentyten_posted_on' ) ) :/** * Prints HTML with meta information for the current postdate/time and author. * * @since Twenty Ten 1.0 */function twentyten_posted_on() {	printf( __( '<span class="%1$s">Posted on</span> %2$s <span class="meta-sep">by</span> %3$s', 'twentyten' ),		'meta-prep meta-prep-author',		sprintf( '<a href="%1$s" title="%2$s" rel="bookmark"><span class="entry-date">%3$s</span></a>',			get_permalink(),			esc_attr( get_the_time() ),			get_the_date()		),		sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',			get_author_posts_url( get_the_author_meta( 'ID' ) ),			sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),			get_the_author()		)	);}endif;if ( ! function_exists( 'twentyten_posted_in' ) ) :/** * Prints HTML with meta information for the current post (category, tags and permalink). * * @since Twenty Ten 1.0 */function twentyten_posted_in() {	// Retrieves tag list of current post, separated by commas.	$tag_list = get_the_tag_list( '', ', ' );	if ( $tag_list ) {		$posted_in = __( 'This entry was posted in %1$s and tagged %2$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} elseif ( is_object_in_taxonomy( get_post_type(), 'category' ) ) {		$posted_in = __( 'This entry was posted in %1$s. Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	} else {		$posted_in = __( 'Bookmark the <a href="%3$s" title="Permalink to %4$s" rel="bookmark">permalink</a>.', 'twentyten' );	}	// Prints the string, replacing the placeholders.	printf(		$posted_in,		get_the_category_list( ', ' ),		$tag_list,		get_permalink(),		the_title_attribute( 'echo=0' )	);}endif;
<?php/** * Holds Most of the WordPress classes. * * Some of the other classes are contained in other files. For example, the * WordPress cache is in cache.php and the WordPress roles API is in * capabilities.php. The third party libraries are contained in their own * separate files. * * @package WordPress *//** * WordPress environment setup class. * * @package WordPress * @since 2.0.0 */class WP {	/**	 * Public query variables.	 *	 * Long list of public query variables.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'debug', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'static', 'pagename', 'page_id', 'error', 'comments_popup', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'taxonomy', 'term', 'cpage', 'post_type');	/**	 * Private query variables.	 *	 * Long list of private query variables.	 *	 * @since 2.0.0	 * @var array	 */	var $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page');	/**	 * Extra query variables set by the user.	 *	 * @since 2.1.0	 * @var array	 */	var $extra_query_vars = array();	/**	 * Query variables for setting up the WordPress Query Loop.	 *	 * @since 2.0.0	 * @var array	 */	var $query_vars;	/**	 * String parsed to set the query variables.	 *	 * @since 2.0.0	 * @var string	 */	var $query_string;	/**	 * Permalink or requested URI.	 *	 * @since 2.0.0	 * @var string	 */	var $request;	/**	 * Rewrite rule the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_rule;	/**	 * Rewrite query the request matched.	 *	 * @since 2.0.0	 * @var string	 */	var $matched_query;	/**	 * Whether already did the permalink.	 *	 * @since 2.0.0	 * @var bool	 */	var $did_permalink = false;	/**	 * Add name to list of public query variables.	 *	 * @since 2.1.0	 *	 * @param string $qv Query variable name.	 */	function add_query_var($qv) {		if ( !in_array($qv, $this->public_query_vars) )			$this->public_query_vars[] = $qv;	}	/**	 * Set the value of a query variable.	 *	 * @since 2.3.0	 *	 * @param string $key Query variable name.	 * @param mixed $value Query variable value.	 */	function set_query_var($key, $value) {		$this->query_vars[$key] = $value;	}	/**	 * Parse request to find correct WordPress query.	 *	 * Sets up the query variables based on the request. There are also many	 * filters and actions that can be used to further manipulate the result.	 *	 * @since 2.0.0	 *	 * @param array|string $extra_query_vars Set the extra query variables.	 */	function parse_request($extra_query_vars = '') {		global $wp_rewrite;		$this->query_vars = array();		$taxonomy_query_vars = array();		$post_type_query_vars = array();		if ( is_array($extra_query_vars) )			$this->extra_query_vars = & $extra_query_vars;		else if (! empty($extra_query_vars))			parse_str($extra_query_vars, $this->extra_query_vars);		// Process PATH_INFO, REQUEST_URI, and 404 for permalinks.		// Fetch the rewrite rules.		$rewrite = $wp_rewrite->wp_rewrite_rules();		if ( ! empty($rewrite) ) {			// If we match a rewrite rule, this will be cleared.			$error = '404';			$this->did_permalink = true;			if ( isset($_SERVER['PATH_INFO']) )				$pathinfo = $_SERVER['PATH_INFO'];			else				$pathinfo = '';			$pathinfo_array = explode('?', $pathinfo);			$pathinfo = str_replace("%", "%25", $pathinfo_array[0]);			$req_uri = $_SERVER['REQUEST_URI'];			$req_uri_array = explode('?', $req_uri);			$req_uri = $req_uri_array[0];			$self = $_SERVER['PHP_SELF'];			$home_path = parse_url(home_url());			if ( isset($home_path['path']) )				$home_path = $home_path['path'];			else				$home_path = '';			$home_path = trim($home_path, '/');			// Trim path info from the end and the leading home path from the			// front.  For path info requests, this leaves us with the requesting			// filename, if any.  For 404 requests, this leaves us with the			// requested permalink.			$req_uri = str_replace($pathinfo, '', rawurldecode($req_uri));			$req_uri = trim($req_uri, '/');			$req_uri = preg_replace("|^$home_path|", '', $req_uri);			$req_uri = trim($req_uri, '/');			$pathinfo = trim($pathinfo, '/');			$pathinfo = preg_replace("|^$home_path|", '', $pathinfo);			$pathinfo = trim($pathinfo, '/');			$self = trim($self, '/');			$self = preg_replace("|^$home_path|", '', $self);			$self = trim($self, '/');			// The requested permalink is in $pathinfo for path info requests and			//  $req_uri for other requests.			if ( ! empty($pathinfo) && !preg_match('|^.*' . $wp_rewrite->index . '$|', $pathinfo) ) {				$request = $pathinfo;			} else {				// If the request uri is the index, blank it out so that we don't try to match it against a rule.				if ( $req_uri == $wp_rewrite->index )					$req_uri = '';				$request = $req_uri;			}			$this->request = $request;			// Look for matches.			$request_match = $request;			foreach ( (array) $rewrite as $match => $query) {				// Don't try to match against AtomPub calls				if ( $req_uri == 'wp-app.php' )					break;				// If the requesting file is the anchor of the match, prepend it				// to the path info.				if ( (! empty($req_uri)) && (strpos($match, $req_uri) === 0) && ($req_uri != $request) )					$request_match = $req_uri . '/' . $request;				if ( preg_match("#^$match#", $request_match, $matches) ||					preg_match("#^$match#", urldecode($request_match), $matches) ) {					// Got a match.					$this->matched_rule = $match;					// Trim the query of everything up to the '?'.					$query = preg_replace("!^.+\?!", '', $query);					// Substitute the substring matches into the query.					$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));					$this->matched_query = $query;					// Parse the query.					parse_str($query, $perma_query_vars);					// If we're processing a 404 request, clear the error var					// since we found something.					if ( isset($_GET['error']) )						unset($_GET['error']);					if ( isset($error) )						unset($error);					break;				}			}			// If req_uri is empty or if it is a request for ourself, unset error.			if ( empty($request) || $req_uri == $self || strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false ) {				if ( isset($_GET['error']) )					unset($_GET['error']);				if ( isset($error) )					unset($error);				if ( isset($perma_query_vars) && strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )					unset($perma_query_vars);				$this->did_permalink = false;			}		}		$this->public_query_vars = apply_filters('query_vars', $this->public_query_vars);		foreach ( $GLOBALS['wp_taxonomies'] as $taxonomy => $t )			if ( $t->query_var )				$taxonomy_query_vars[$t->query_var] = $taxonomy;		foreach ( $GLOBALS['wp_post_types'] as $post_type => $t )			if ( $t->query_var )				$post_type_query_vars[$t->query_var] = $post_type;		for ( $i = 0; $i < count($this->public_query_vars); $i += 1 ) {			$wpvar = $this->public_query_vars[$i];			if ( isset($this->extra_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $this->extra_query_vars[$wpvar];			elseif ( isset($GLOBALS[$wpvar]) )				$this->query_vars[$wpvar] = $GLOBALS[$wpvar];			elseif ( !empty($_POST[$wpvar]) )				$this->query_vars[$wpvar] = $_POST[$wpvar];			elseif ( !empty($_GET[$wpvar]) )				$this->query_vars[$wpvar] = $_GET[$wpvar];			elseif ( !empty($perma_query_vars[$wpvar]) )				$this->query_vars[$wpvar] = $perma_query_vars[$wpvar];			if ( !empty( $this->query_vars[$wpvar] ) ) {				$this->query_vars[$wpvar] = (string) $this->query_vars[$wpvar];				if ( isset( $taxonomy_query_vars[$wpvar] ) ) {					$this->query_vars['taxonomy'] = $taxonomy_query_vars[$wpvar];					$this->query_vars['term'] = $this->query_vars[$wpvar];				} elseif ( isset($post_type_query_vars[$wpvar] ) ) {					$this->query_vars['post_type'] = $post_type_query_vars[$wpvar];					$this->query_vars['name'] = $this->query_vars[$wpvar];				}			}		}		// Limit publicly queried post_types to those that are publicly_queryable		if ( isset( $this->query_vars['post_type']) ) {			$queryable_post_types =  get_post_types( array('publicly_queryable' => true) );			if ( ! in_array( $this->query_vars['post_type'], $queryable_post_types ) )				unset( $this->query_vars['post_type'] );		}		foreach ( (array) $this->private_query_vars as $var) {			if ( isset($this->extra_query_vars[$var]) )				$this->query_vars[$var] = $this->extra_query_vars[$var];			elseif ( isset($GLOBALS[$var]) && '' != $GLOBALS[$var] )				$this->query_vars[$var] = $GLOBALS[$var];		}		if ( isset($error) )			$this->query_vars['error'] = $error;		$this->query_vars = apply_filters('request', $this->query_vars);		do_action_ref_array('parse_request', array(&$this));	}	/**	 * Send additional HTTP headers for caching, content type, etc.	 *	 * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing	 * a feed, it will also send last-modified, etag, and 304 status if needed.	 *	 * @since 2.0.0	 */	function send_headers() {		$headers = array('X-Pingback' => get_bloginfo('pingback_url'));		$status = null;		$exit_required = false;		if ( is_user_logged_in() )			$headers = array_merge($headers, wp_get_nocache_headers());		if ( !empty($this->query_vars['error']) && '404' == $this->query_vars['error'] ) {			$status = 404;			if ( !is_user_logged_in() )				$headers = array_merge($headers, wp_get_nocache_headers());			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else if ( empty($this->query_vars['feed']) ) {			$headers['Content-Type'] = get_option('html_type') . '; charset=' . get_option('blog_charset');		} else {			// We're showing a feed, so WP is indeed the only thing that last changed			if ( !empty($this->query_vars['withcomments'])				|| ( empty($this->query_vars['withoutcomments'])					&& ( !empty($this->query_vars['p'])						|| !empty($this->query_vars['name'])						|| !empty($this->query_vars['page_id'])						|| !empty($this->query_vars['pagename'])						|| !empty($this->query_vars['attachment'])						|| !empty($this->query_vars['attachment_id'])					)				)			)				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastcommentmodified('GMT'), 0).' GMT';			else				$wp_last_modified = mysql2date('D, d M Y H:i:s', get_lastpostmodified('GMT'), 0).' GMT';			$wp_etag = '"' . md5($wp_last_modified) . '"';			$headers['Last-Modified'] = $wp_last_modified;			$headers['ETag'] = $wp_etag;			// Support for Conditional GET			if (isset($_SERVER['HTTP_IF_NONE_MATCH']))				$client_etag = stripslashes(stripslashes($_SERVER['HTTP_IF_NONE_MATCH']));			else $client_etag = false;			$client_last_modified = empty($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? '' : trim($_SERVER['HTTP_IF_MODIFIED_SINCE']);			// If string is empty, return 0. If not, attempt to parse into a timestamp			$client_modified_timestamp = $client_last_modified ? strtotime($client_last_modified) : 0;			// Make a timestamp for our most recent modification...			$wp_modified_timestamp = strtotime($wp_last_modified);			if ( ($client_last_modified && $client_etag) ?					 (($client_modified_timestamp >= $wp_modified_timestamp) && ($client_etag == $wp_etag)) :					 (($client_modified_timestamp >= $wp_modified_timestamp) || ($client_etag == $wp_etag)) ) {				$status = 304;				$exit_required = true;			}		}		$headers = apply_filters('wp_headers', $headers, $this);		if ( ! empty( $status ) )			status_header( $status );		foreach( (array) $headers as $name => $field_value )			@header("{$name}: {$field_value}");		if ($exit_required)			exit();		do_action_ref_array('send_headers', array(&$this));	}	/**	 * Sets the query string property based off of the query variable property.	 *	 * The 'query_string' filter is deprecated, but still works. Plugins should	 * use the 'request' filter instead.	 *	 * @since 2.0.0	 */	function build_query_string() {		$this->query_string = '';		foreach ( (array) array_keys($this->query_vars) as $wpvar) {			if ( '' != $this->query_vars[$wpvar] ) {				$this->query_string .= (strlen($this->query_string) < 1) ? '' : '&';				if ( !is_scalar($this->query_vars[$wpvar]) ) // Discard non-scalars.					continue;				$this->query_string .= $wpvar . '=' . rawurlencode($this->query_vars[$wpvar]);			}		}		// query_string filter deprecated.  Use request filter instead.		if ( has_filter('query_string') ) {  // Don't bother filtering and parsing if no plugins are hooked in.			$this->query_string = apply_filters('query_string', $this->query_string);			parse_str($this->query_string, $this->query_vars);		}	}	/**	 * Set up the WordPress Globals.	 *	 * The query_vars property will be extracted to the GLOBALS. So care should	 * be taken when naming global variables that might interfere with the	 * WordPress environment.	 *	 * @global string $query_string Query string for the loop.	 * @global int $more Only set, if single page or post.	 * @global int $single If single page or post. Only set, if single page or post.	 *	 * @since 2.0.0	 */	function register_globals() {		global $wp_query;		// Extract updated query vars back into global namespace.		foreach ( (array) $wp_query->query_vars as $key => $value) {			$GLOBALS[$key] = $value;		}		$GLOBALS['query_string'] = $this->query_string;		$GLOBALS['posts'] = & $wp_query->posts;		$GLOBALS['post'] = $wp_query->post;		$GLOBALS['request'] = $wp_query->request;		if ( is_single() || is_page() ) {			$GLOBALS['more'] = 1;			$GLOBALS['single'] = 1;		}	}	/**	 * Set up the current user.	 *	 * @since 2.0.0	 */	function init() {		wp_get_current_user();	}	/**	 * Set up the Loop based on the query variables.	 *	 * @uses WP::$query_vars	 * @since 2.0.0	 */	function query_posts() {		global $wp_the_query;		$this->build_query_string();		$wp_the_query->query($this->query_vars); 	} 	/** 	 * Set the Headers for 404, if nothing is found for requested URL.	 *	 * Issue a 404 if a request doesn't match any posts and doesn't match	 * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already	 * issued, and if the request was not a search or the homepage.	 *	 * Otherwise, issue a 200.	 *	 * @since 2.0.0 	 */	function handle_404() {		global $wp_query;		if ( ( 0 == count( $wp_query->posts ) ) && !is_404() && !is_robots() && !is_search() && !is_home() ) {			// Don't 404 for these queries if they matched an object.			if ( ( is_tag() || is_category() || is_tax() || is_author() ) && $wp_query->get_queried_object() && !is_paged() ) {				if ( !is_404() )					status_header( 200 );				return;			}			$wp_query->set_404();			status_header( 404 );			nocache_headers();		} elseif ( !is_404() ) {			status_header( 200 );		}	}	/**	 * Sets up all of the variables required by the WordPress environment.	 *	 * The action 'wp' has one parameter that references the WP object. It	 * allows for accessing the properties and methods to further manipulate the	 * object.	 *	 * @since 2.0.0	 *	 * @param string|array $query_args Passed to {@link parse_request()}	 */	function main($query_args = '') {		$this->init();		$this->parse_request($query_args);		$this->send_headers();		$this->query_posts();		$this->handle_404();		$this->register_globals();		do_action_ref_array('wp', array(&$this));	}	/**	 * PHP4 Constructor - Does nothing.	 *	 * Call main() method when ready to run setup.	 *	 * @since 2.0.0	 *	 * @return WP	 */	function WP() {		// Empty.	}}/** * WordPress Error class. * * Container for checking for WordPress errors and error messages. Return * WP_Error and use {@link is_wp_error()} to check if this class is returned. * Many core WordPress functions pass this class in the event of an error and * if not handled properly will result in code errors. * * @package WordPress * @since 2.1.0 */class WP_Error {	/**	 * Stores the list of errors.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $errors = array();	/**	 * Stores the list of data for error codes.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $error_data = array();	/**	 * PHP4 Constructor - Sets up error message.	 *	 * If code parameter is empty then nothing will be done. It is possible to	 * add multiple messages to the same code, but with other methods in the	 * class.	 *	 * All parameters are optional, but if the code parameter is set, then the	 * data parameter is optional.	 *	 * @since 2.1.0	 *	 * @param string|int $code Error code	 * @param string $message Error message	 * @param mixed $data Optional. Error data.	 * @return WP_Error	 */	function WP_Error($code = '', $message = '', $data = '') {		if ( empty($code) )			return;		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Retrieve all error codes.	 *	 * @since 2.1.0	 * @access public	 *	 * @return array List of error codes, if avaiable.	 */	function get_error_codes() {		if ( empty($this->errors) )			return array();		return array_keys($this->errors);	}	/**	 * Retrieve first error code available.	 *	 * @since 2.1.0	 * @access public	 *	 * @return string|int Empty string, if no error codes.	 */	function get_error_code() {		$codes = $this->get_error_codes();		if ( empty($codes) )			return '';		return $codes[0];	}	/**	 * Retrieve all error messages or error messages matching code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Retrieve messages matching code, if exists.	 * @return array Error strings on success, or empty array on failure (if using codee parameter).	 */	function get_error_messages($code = '') {		// Return all messages if no code specified.		if ( empty($code) ) {			$all_messages = array();			foreach ( (array) $this->errors as $code => $messages )				$all_messages = array_merge($all_messages, $messages);			return $all_messages;		}		if ( isset($this->errors[$code]) )			return $this->errors[$code];		else			return array();	}	/**	 * Get single error message.	 *	 * This will get the first message available for the code. If no code is	 * given then the first code available will be used.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code to retrieve message.	 * @return string	 */	function get_error_message($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$messages = $this->get_error_messages($code);		if ( empty($messages) )			return '';		return $messages[0];	}	/**	 * Retrieve error data for error code.	 *	 * @since 2.1.0	 *	 * @param string|int $code Optional. Error code.	 * @return mixed Null, if no errors.	 */	function get_error_data($code = '') {		if ( empty($code) )			$code = $this->get_error_code();		if ( isset($this->error_data[$code]) )			return $this->error_data[$code];		return null;	}	/**	 * Append more error messages to list of error messages.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string|int $code Error code.	 * @param string $message Error message.	 * @param mixed $data Optional. Error data.	 */	function add($code, $message, $data = '') {		$this->errors[$code][] = $message;		if ( ! empty($data) )			$this->error_data[$code] = $data;	}	/**	 * Add data for error code.	 *	 * The error code can only contain one error data.	 *	 * @since 2.1.0	 *	 * @param mixed $data Error data.	 * @param string|int $code Error code.	 */	function add_data($data, $code = '') {		if ( empty($code) )			$code = $this->get_error_code();		$this->error_data[$code] = $data;	}}/** * Check whether variable is a WordPress Error. * * Looks at the object and if a WP_Error class. Does not check to see if the * parent is also WP_Error, so can't inherit WP_Error and still use this * function. * * @since 2.1.0 * * @param mixed $thing Check if unknown variable is WordPress Error object. * @return bool True, if WP_Error. False, if not WP_Error. */function is_wp_error($thing) {	if ( is_object($thing) && is_a($thing, 'WP_Error') )		return true;	return false;}/** * A class for displaying various tree-like structures. * * Extend the Walker class to use it, see examples at the below. Child classes * do not need to implement all of the abstract methods in the class. The child * only needs to implement the methods that are needed. Also, the methods are * not strictly abstract in that the parameter definition needs to be followed. * The child classes can have additional parameters. * * @package WordPress * @since 2.1.0 * @abstract */class Walker {	/**	 * What the class handles.	 *	 * @since 2.1.0	 * @var string	 * @access public	 */	var $tree_type;	/**	 * DB fields to use.	 *	 * @since 2.1.0	 * @var array	 * @access protected	 */	var $db_fields;	/**	 * Max number of pages walked by the paged walker	 *	 * @since 2.7.0	 * @var int	 * @access protected	 */	var $max_pages = 1;	/**	 * Starts the list before the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method is called at the start of the output list.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_lvl(&$output) {}	/**	 * Ends the list of after the elements are added.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. This	 * method finishes the list at the end of output of the elements.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_lvl(&$output)   {}	/**	 * Start the element output.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods. Includes	 * the element output also.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function start_el(&$output)  {}	/**	 * Ends the element output, if needed.	 *	 * Additional parameters are used in child classes. The args parameter holds	 * additional values that may be used with the child class methods.	 *	 * @since 2.1.0	 * @abstract	 *	 * @param string $output Passed by reference. Used to append additional content.	 */	function end_el(&$output)    {}	/**	 * Traverse elements to create list from elements.	 *	 * Display one element if the element doesn't have any children otherwise,	 * display the element and its children. Will only traverse up to the max	 * depth and no ignore elements under that depth. It is possible to set the	 * max depth to include all depths, see walk() method.	 *	 * This method shouldn't be called directly, use the walk() method instead.	 *	 * @since 2.5.0	 *	 * @param object $element Data object	 * @param array $children_elements List of elements to continue traversing.	 * @param int $max_depth Max depth to traverse.	 * @param int $depth Depth of current element.	 * @param array $args	 * @param string $output Passed by reference. Used to append additional content.	 * @return null Null on failure with no changes to parameters.	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		//display this element		if ( is_array( $args[0] ) )			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'start_el'), $cb_args);		$id = $element->$id_field;		// descend only when the depth is right and there are childrens for this element		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {			foreach( $children_elements[ $id ] as $child ){				if ( !isset($newlevel) ) {					$newlevel = true;					//start the child delimiter					$cb_args = array_merge( array(&$output, $depth), $args);					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);				}				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );			}			unset( $children_elements[ $id ] );		}		if ( isset($newlevel) && $newlevel ){			//end the child delimiter			$cb_args = array_merge( array(&$output, $depth), $args);			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);		}		//end this element		$cb_args = array_merge( array(&$output, $element, $depth), $args);		call_user_func_array(array(&$this, 'end_el'), $cb_args);	}	/**	 * Display array of elements hierarchically.	 *	 * It is a generic function which does not assume any existing order of	 * elements. max_depth = -1 means flatly display every element. max_depth =	 * 0 means display all levels. max_depth > 0  specifies the number of	 * display levels.	 *	 * @since 2.1.0	 *	 * @param array $elements	 * @param int $max_depth	 * @return string	 */	function walk( $elements, $max_depth) {		$args = array_slice(func_get_args(), 2);		$output = '';		if ($max_depth < -1) //invalid parameter			return $output;		if (empty($elements)) //nothing to walk			return $output;		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		// flat display		if ( -1 == $max_depth ) {			$empty_array = array();			foreach ( $elements as $e )				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			return $output;		}		/*		 * need to display in hierarchical order		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		/*		 * when none of the elements is top level		 * assume the first one must be root of the sub elements		 */		if ( empty($top_level_elements) ) {			$first = array_slice( $elements, 0, 1 );			$root = $first[0];			$top_level_elements = array();			$children_elements  = array();			foreach ( $elements as $e) {				if ( $root->$parent_field == $e->$parent_field )					$top_level_elements[] = $e;				else					$children_elements[ $e->$parent_field ][] = $e;			}		}		foreach ( $top_level_elements as $e )			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		/*		 * if we are displaying all levels, and remaining children_elements is not empty,		 * then we got orphans, which should be displayed regardless		 */		if ( ( $max_depth == 0 ) && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		 }		 return $output;	}	/** 	 * paged_walk() - produce a page of nested elements 	 * 	 * Given an array of hierarchical elements, the maximum depth, a specific page number, 	 * and number of elements per page, this function first determines all top level root elements 	 * belonging to that page, then lists them and all of their children in hierarchical order. 	 * 	 * @package WordPress 	 * @since 2.7 	 * @param $max_depth = 0  means display all levels; $max_depth > 0  specifies the number of display levels. 	 * @param $page_num the specific page number, beginning with 1. 	 * @return XHTML of the specified page of elements 	 */	function paged_walk( $elements, $max_depth, $page_num, $per_page ) {		/* sanity check */		if ( empty($elements) || $max_depth < -1 )			return '';		$args = array_slice( func_get_args(), 4 );		$output = '';		$id_field = $this->db_fields['id'];		$parent_field = $this->db_fields['parent'];		$count = -1;		if ( -1 == $max_depth )			$total_top = count( $elements );		if ( $page_num < 1 || $per_page < 0  ) {			// No paging			$paging = false;			$start = 0;			if ( -1 == $max_depth )				$end = $total_top;			$this->max_pages = 1;		} else {			$paging = true;			$start = ( (int)$page_num - 1 ) * (int)$per_page;			$end   = $start + $per_page;			if ( -1 == $max_depth )				$this->max_pages = ceil($total_top / $per_page);		}		// flat display		if ( -1 == $max_depth ) {			if ( !empty($args[0]['reverse_top_level']) ) {				$elements = array_reverse( $elements );				$oldstart = $start;				$start = $total_top - $end;				$end = $total_top - $oldstart;			}			$empty_array = array();			foreach ( $elements as $e ) {				$count++;				if ( $count < $start )					continue;				if ( $count >= $end )					break;				$this->display_element( $e, $empty_array, 1, 0, $args, $output );			}			return $output;		}		/*		 * separate elements into two buckets: top level and children elements		 * children_elements is two dimensional array, eg.		 * children_elements[10][] contains all sub-elements whose parent is 10.		 */		$top_level_elements = array();		$children_elements  = array();		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$top_level_elements[] = $e;			else				$children_elements[ $e->$parent_field ][] = $e;		}		$total_top = count( $top_level_elements );		if ( $paging )			$this->max_pages = ceil($total_top / $per_page);		else			$end = $total_top;		if ( !empty($args[0]['reverse_top_level']) ) {			$top_level_elements = array_reverse( $top_level_elements );			$oldstart = $start;			$start = $total_top - $end;			$end = $total_top - $oldstart;		}		if ( !empty($args[0]['reverse_children']) ) {			foreach ( $children_elements as $parent => $children )				$children_elements[$parent] = array_reverse( $children );		}		foreach ( $top_level_elements as $e ) {			$count++;			//for the last page, need to unset earlier children in order to keep track of orphans			if ( $end >= $total_top && $count < $start )					$this->unset_children( $e, $children_elements );			if ( $count < $start )				continue;			if ( $count >= $end )				break;			$this->display_element( $e, $children_elements, $max_depth, 0, $args, $output );		}		if ( $end >= $total_top && count( $children_elements ) > 0 ) {			$empty_array = array();			foreach ( $children_elements as $orphans )				foreach( $orphans as $op )					$this->display_element( $op, $empty_array, 1, 0, $args, $output );		}		return $output;	}	function get_number_of_root_elements( $elements ){		$num = 0;		$parent_field = $this->db_fields['parent'];		foreach ( $elements as $e) {			if ( 0 == $e->$parent_field )				$num++;		}		return $num;	}	// unset all the children for a given top level element	function unset_children( $e, &$children_elements ){		if ( !$e || !$children_elements )			return;		$id_field = $this->db_fields['id'];		$id = $e->$id_field;		if ( !empty($children_elements[$id]) && is_array($children_elements[$id]) )			foreach ( (array) $children_elements[$id] as $child )				$this->unset_children( $child, $children_elements );		if ( isset($children_elements[$id]) )			unset( $children_elements[$id] );	}}/** * Create HTML list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Page extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this.	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function start_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "\n$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of page. Used for padding.	 */	function end_lvl(&$output, $depth) {		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page. Used for padding.	 * @param int $current_page Page ID.	 * @param array $args	 */	function start_el(&$output, $page, $depth, $args, $current_page) {		if ( $depth )			$indent = str_repeat("\t", $depth);		else			$indent = '';		extract($args, EXTR_SKIP);		$css_class = array('page_item', 'page-item-'.$page->ID);		if ( !empty($current_page) ) {			$_current_page = get_page( $current_page );			if ( isset($_current_page->ancestors) && in_array($page->ID, (array) $_current_page->ancestors) )				$css_class[] = 'current_page_ancestor';			if ( $page->ID == $current_page )				$css_class[] = 'current_page_item';			elseif ( $_current_page && $page->ID == $_current_page->post_parent )				$css_class[] = 'current_page_parent';		} elseif ( $page->ID == get_option('page_for_posts') ) {			$css_class[] = 'current_page_parent';		}		$css_class = implode(' ', apply_filters('page_css_class', $css_class, $page));		$output .= $indent . '<li class="' . $css_class . '"><a href="' . get_page_link($page->ID) . '" title="' . esc_attr( wp_strip_all_tags( apply_filters( 'the_title', $page->post_title, $page->ID ) ) ) . '">' . $link_before . apply_filters( 'the_title', $page->post_title, $page->ID ) . $link_after . '</a>';		if ( !empty($show_date) ) {			if ( 'modified' == $show_date )				$time = $page->post_modified;			else				$time = $page->post_date;			$output .= " " . mysql2date($date_format, $time);		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object. Not used.	 * @param int $depth Depth of page. Not Used.	 */	function end_el(&$output, $page, $depth) {		$output .= "</li>\n";	}}/** * Create HTML dropdown list of pages. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_PageDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'page';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'post_parent', 'id' => 'ID');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Page data object.	 * @param int $depth Depth of page in reference to parent pages. Used for padding.	 * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.	 */	function start_el(&$output, $page, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$output .= "\t<option class=\"level-$depth\" value=\"$page->ID\"";		if ( $page->ID == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$title = esc_html($page->post_title);		$output .= "$pad$title";		$output .= "</option>\n";	}}/** * Create HTML list of categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_Category extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function start_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent<ul class='children'>\n";	}	/**	 * @see Walker::end_lvl()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of category. Used for tab indentation.	 * @param array $args Will only append content if style argument value is 'list'.	 */	function end_lvl(&$output, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$indent = str_repeat("\t", $depth);		$output .= "$indent</ul>\n";	}	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category in reference to parents.	 * @param array $args	 */	function start_el(&$output, $category, $depth, $args) {		extract($args);		$cat_name = esc_attr( $category->name);		$cat_name = apply_filters( 'list_cats', $cat_name, $category );		$link = '<a href="' . get_term_link( $category, $category->taxonomy ) . '" ';		if ( $use_desc_for_title == 0 || empty($category->description) )			$link .= 'title="' . sprintf(__( 'View all posts filed under %s' ), $cat_name) . '"';		else			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';		$link .= '>';		$link .= $cat_name . '</a>';		if ( (! empty($feed_image)) || (! empty($feed)) ) {			$link .= ' ';			if ( empty($feed_image) )				$link .= '(';			$link .= '<a href="' . get_term_feed_link( $category->term_id, $category->taxonomy, $feed_type ) . '"';			if ( empty($feed) )				$alt = ' alt="' . sprintf(__( 'Feed for all posts filed under %s' ), $cat_name ) . '"';			else {				$title = ' title="' . $feed . '"';				$alt = ' alt="' . $feed . '"';				$name = $feed;				$link .= $title;			}			$link .= '>';			if ( empty($feed_image) )				$link .= $name;			else				$link .= "<img src='$feed_image'$alt$title" . ' />';			$link .= '</a>';			if ( empty($feed_image) )				$link .= ')';		}		if ( isset($show_count) && $show_count )			$link .= ' (' . intval($category->count) . ')';		if ( isset($show_date) && $show_date ) {			$link .= ' ' . gmdate('Y-m-d', $category->last_update_timestamp);		}		if ( isset($current_category) && $current_category )			$_current_category = get_category( $current_category );		if ( 'list' == $args['style'] ) {			$output .= "\t<li";			$class = 'cat-item cat-item-'.$category->term_id;			if ( isset($current_category) && $current_category && ($category->term_id == $current_category) )				$class .=  ' current-cat';			elseif ( isset($_current_category) && $_current_category && ($category->term_id == $_current_category->parent) )				$class .=  ' current-cat-parent';			$output .=  ' class="'.$class.'"';			$output .= ">$link\n";		} else {			$output .= "\t$link<br />\n";		}	}	/**	 * @see Walker::end_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $page Not used.	 * @param int $depth Depth of category. Not used.	 * @param array $args Only uses 'list' for whether should append to output.	 */	function end_el(&$output, $page, $depth, $args) {		if ( 'list' != $args['style'] )			return;		$output .= "</li>\n";	}}/** * Create HTML dropdown list of Categories. * * @package WordPress * @since 2.1.0 * @uses Walker */class Walker_CategoryDropdown extends Walker {	/**	 * @see Walker::$tree_type	 * @since 2.1.0	 * @var string	 */	var $tree_type = 'category';	/**	 * @see Walker::$db_fields	 * @since 2.1.0	 * @todo Decouple this	 * @var array	 */	var $db_fields = array ('parent' => 'parent', 'id' => 'term_id');	/**	 * @see Walker::start_el()	 * @since 2.1.0	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $category Category data object.	 * @param int $depth Depth of category. Used for padding.	 * @param array $args Uses 'selected', 'show_count', and 'show_last_update' keys, if they exist.	 */	function start_el(&$output, $category, $depth, $args) {		$pad = str_repeat('&nbsp;', $depth * 3);		$cat_name = apply_filters('list_cats', $category->name, $category);		$output .= "\t<option class=\"level-$depth\" value=\"".$category->term_id."\"";		if ( $category->term_id == $args['selected'] )			$output .= ' selected="selected"';		$output .= '>';		$output .= $pad.$cat_name;		if ( $args['show_count'] )			$output .= '&nbsp;&nbsp;('. $category->count .')';		if ( $args['show_last_update'] ) {			$format = 'Y-m-d';			$output .= '&nbsp;&nbsp;' . gmdate($format, $category->last_update_timestamp);		}		$output .= "</option>\n";	}}/** * Send XML response back to AJAX request. * * @package WordPress * @since 2.1.0 */class WP_Ajax_Response {	/**	 * Store XML responses to send.	 *	 * @since 2.1.0	 * @var array	 * @access private	 */	var $responses = array();	/**	 * PHP4 Constructor - Passes args to {@link WP_Ajax_Response::add()}.	 *	 * @since 2.1.0	 * @see WP_Ajax_Response::add()	 *	 * @param string|array $args Optional. Will be passed to add() method.	 * @return WP_Ajax_Response	 */	function WP_Ajax_Response( $args = '' ) {		if ( !empty($args) )			$this->add($args);	}	/**	 * Append to XML response based on given arguments.	 *	 * The arguments that can be passed in the $args parameter are below. It is	 * also possible to pass a WP_Error object in either the 'id' or 'data'	 * argument. The parameter isn't actually optional, content should be given	 * in order to send the correct response.	 *	 * 'what' argument is a string that is the XMLRPC response type.	 * 'action' argument is a boolean or string that acts like a nonce.	 * 'id' argument can be WP_Error or an integer.	 * 'old_id' argument is false by default or an integer of the previous ID.	 * 'position' argument is an integer or a string with -1 = top, 1 = bottom,	 * html ID = after, -html ID = before.	 * 'data' argument is a string with the content or message.	 * 'supplemental' argument is an array of strings that will be children of	 * the supplemental element.	 *	 * @since 2.1.0	 *	 * @param string|array $args Override defaults.	 * @return string XML response.	 */	function add( $args = '' ) {		$defaults = array(			'what' => 'object', 'action' => false,			'id' => '0', 'old_id' => false,			'position' => 1,			'data' => '', 'supplemental' => array()		);		$r = wp_parse_args( $args, $defaults );		extract( $r, EXTR_SKIP );		$position = preg_replace( '/[^a-z0-9:_-]/i', '', $position );		if ( is_wp_error($id) ) {			$data = $id;			$id = 0;		}		$response = '';		if ( is_wp_error($data) ) {			foreach ( (array) $data->get_error_codes() as $code ) {				$response .= "<wp_error code='$code'><![CDATA[" . $data->get_error_message($code) . "]]></wp_error>";				if ( !$error_data = $data->get_error_data($code) )					continue;				$class = '';				if ( is_object($error_data) ) {					$class = ' class="' . get_class($error_data) . '"';					$error_data = get_object_vars($error_data);				}				$response .= "<wp_error_data code='$code'$class>";				if ( is_scalar($error_data) ) {					$response .= "<![CDATA[$error_data]]>";				} elseif ( is_array($error_data) ) {					foreach ( $error_data as $k => $v )						$response .= "<$k><![CDATA[$v]]></$k>";				}				$response .= "</wp_error_data>";			}		} else {			$response = "<response_data><![CDATA[$data]]></response_data>";		}		$s = '';		if ( is_array($supplemental) ) {			foreach ( $supplemental as $k => $v )				$s .= "<$k><![CDATA[$v]]></$k>";			$s = "<supplemental>$s</supplemental>";		}		if ( false === $action )			$action = $_POST['action'];		$x = '';		$x .= "<response action='{$action}_$id'>"; // The action attribute in the xml output is formatted like a nonce action		$x .=	"<$what id='$id' " . ( false === $old_id ? '' : "old_id='$old_id' " ) . "position='$position'>";		$x .=		$response;		$x .=		$s;		$x .=	"</$what>";		$x .= "</response>";		$this->responses[] = $x;		return $x;	}	/**	 * Display XML formatted responses.	 *	 * Sets the content type header to text/xml.	 *	 * @since 2.1.0	 */	function send() {		header('Content-Type: text/xml');		echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";		foreach ( (array) $this->responses as $response )			echo $response;		echo '</wp_ajax>';		die();	}}/** * Helper class to remove the need to use eval to replace $matches[] in query strings. * * @since 2.9.0 */class WP_MatchesMapRegex {	/**	 * store for matches	 *	 * @access private	 * @var array	 */	var $_matches;	/**	 * store for mapping result	 *	 * @access public	 * @var string	 */	var $output;	/**	 * subject to perform mapping on (query string containing $matches[] references	 *	 * @access private	 * @var string	 */	var $_subject;	/**	 * regexp pattern to match $matches[] references	 *	 * @var string	 */	var $_pattern = '(\$matches\[[1-9]+[0-9]*\])'; // magic number	/**	 * constructor	 *	 * @param string $subject subject if regex	 * @param array  $matches data to use in map	 * @return self	 */	function WP_MatchesMapRegex($subject, $matches) {		$this->_subject = $subject;		$this->_matches = $matches;		$this->output = $this->_map();	}	/**	 * Substitute substring matches in subject.	 *	 * static helper function to ease use	 *	 * @access public	 * @param string $subject subject	 * @param array  $matches data used for subsitution	 * @return string	 */	function apply($subject, $matches) {		$oSelf =& new WP_MatchesMapRegex($subject, $matches);		return $oSelf->output;	}	/**	 * do the actual mapping	 *	 * @access private	 * @return string	 */	function _map() {		$callback = array(&$this, 'callback');		return preg_replace_callback($this->_pattern, $callback, $this->_subject);	}	/**	 * preg_replace_callback hook	 *	 * @access public	 * @param  array $matches preg_replace regexp matches	 * @return string	 */	function callback($matches) {		$index = intval(substr($matches[0], 9, -1));		return ( isset( $this->_matches[$index] ) ? urlencode($this->_matches[$index]) : '' );	}}?>
<?php/** * Edit post administration panel. * * Manage Post actions: post, edit, delete, etc. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$parent_file = 'edit.php';$submenu_file = 'edit.php';wp_reset_vars(array('action', 'safe_mode', 'withcomments', 'posts', 'content', 'edited_post_title', 'comment_error', 'profile', 'trackback_url', 'excerpt', 'showcomments', 'commentstart', 'commentend', 'commentorder'));if ( isset($_GET['post']) )	$post_id = (int) $_GET['post'];elseif ( isset($_POST['post_ID']) )	$post_id = (int) $_POST['post_ID'];else	$post_id = 0;$post_ID = $post_id;$post = null;$post_type_object = null;$post_type = null;if ( $post_id ) {	$post = get_post($post_id);	if ( $post ) {		$post_type_object = get_post_type_object($post->post_type);		if ( $post_type_object ) {			$post_type = $post->post_type;			$current_screen->post_type = $post->post_type;			$current_screen->id = $current_screen->post_type;		}	}} elseif ( isset($_POST['post_type']) ) {	$post_type_object = get_post_type_object($_POST['post_type']);	if ( $post_type_object ) {		$post_type = $post_type_object->name;		$current_screen->post_type = $post_type;		$current_screen->id = $current_screen->post_type;	}}/** * Redirect to previous page. * * @param int $post_id Optional. Post ID. */function redirect_post($post_id = '') {	if ( !empty($_POST['mode']) && 'sidebar' == $_POST['mode'] ) {		if ( isset($_POST['saveasdraft']) )			$location = 'sidebar.php?a=c';		elseif ( isset($_POST['publish']) )			$location = 'sidebar.php?a=b';	} elseif ( isset($_POST['save']) || isset($_POST['publish']) ) {		$status = get_post_status( $post_id );		if ( isset( $_POST['publish'] ) ) {			switch ( $status ) {				case 'pending':					$message = 8;					break;				case 'future':					$message = 9;					break;				default:					$message = 6;			}		} else {				$message = 'draft' == $status ? 10 : 1;		}		$location = add_query_arg( 'message', $message, get_edit_post_link( $post_id, 'url' ) );	} elseif ( isset($_POST['addmeta']) && $_POST['addmeta'] ) {		$location = add_query_arg( 'message', 2, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( isset($_POST['deletemeta']) && $_POST['deletemeta'] ) {		$location = add_query_arg( 'message', 3, wp_get_referer() );		$location = explode('#', $location);		$location = $location[0] . '#postcustom';	} elseif ( 'post-quickpress-save-cont' == $_POST['action'] ) {		$location = "post.php?action=edit&post=$post_id&message=7";	} else {		$location = add_query_arg( 'message', 4, get_edit_post_link( $post_id, 'url' ) );	}	wp_redirect( apply_filters( 'redirect_post_location', $location, $post_id ) );}if ( isset( $_POST['deletepost'] ) )	$action = 'delete';elseif ( isset($_POST['wp-preview']) && 'dopreview' == $_POST['wp-preview'] )	$action = 'preview';$sendback = wp_get_referer();if ( strpos($sendback, 'post.php') !== false || strpos($sendback, 'post-new.php') !== false ) {	$sendback = admin_url('edit.php');	$sendback .= ( !empty( $post_type ) ) ? '?post_type=' . $post_type : '';} else {	$sendback = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'ids'), $sendback );}switch($action) {case 'postajaxpost':case 'post':case 'post-quickpress-publish':case 'post-quickpress-save':	check_admin_referer('add-' . $post_type);	if ( 'post-quickpress-publish' == $action )		$_POST['publish'] = 'publish'; // tell write_post() to publish	if ( 'post-quickpress-publish' == $action || 'post-quickpress-save' == $action ) {		$_POST['comment_status'] = get_option('default_comment_status');		$_POST['ping_status'] = get_option('default_ping_status');	}	if ( !empty( $_POST['quickpress_post_ID'] ) ) {		$_POST['post_ID'] = (int) $_POST['quickpress_post_ID'];		$post_id = edit_post();	} else {		$post_id = 'postajaxpost' == $action ? edit_post() : write_post();	}	if ( 0 === strpos( $action, 'post-quickpress' ) ) {		$_POST['post_ID'] = $post_id;		// output the quickpress dashboard widget		require_once(ABSPATH . 'wp-admin/includes/dashboard.php');		wp_dashboard_quick_press_output();		exit;	}	redirect_post($post_id);	exit();	break;case 'edit':	$editing = true;	if ( empty( $post_id ) ) {		wp_redirect("post.php");		exit();	}	$p = $post_id;	if ( empty($post->ID) )		wp_die( __('You attempted to edit an item that doesn&#8217;t exist. Perhaps it was deleted?') );	if ( !current_user_can($post_type_object->cap->edit_post, $post_id) )		wp_die( __('You are not allowed to edit this item.') );	if ( 'trash' == $post->post_status )		wp_die( __('You can&#8217;t edit this item because it is in the Trash. Please restore it and try again.') );	if ( null == $post_type_object )		wp_die( __('Unknown post type.') );	$post_type = $post->post_type;	if ( 'post' == $post_type ) {		$parent_file = "edit.php";		$submenu_file = "edit.php";	} else {		$parent_file = "edit.php?post_type=$post_type";		$submenu_file = "edit.php?post_type=$post_type";	}	if ( $last = wp_check_post_lock( $post->ID ) ) {		add_action('admin_notices', '_admin_notice_post_locked' );	} else {		wp_set_post_lock( $post->ID );		wp_enqueue_script('autosave');	}	$title = $post_type_object->labels->edit_item;	$post = get_post_to_edit($post_id);	if ( post_type_supports($post_type, 'comments') ) {		wp_enqueue_script('admin-comments');		enqueue_comment_hotkeys_js();	}	include('./edit-form-advanced.php');	break;case 'editattachment':	check_admin_referer('update-attachment_' . $post_id);	// Don't let these be changed	unset($_POST['guid']);	$_POST['post_type'] = 'attachment';	// Update the thumbnail filename	$newmeta = wp_get_attachment_metadata( $post_id, true );	$newmeta['thumb'] = $_POST['thumb'];	wp_update_attachment_metadata( $post_id, $newmeta );case 'editpost':	check_admin_referer('update-' . $post_type . '_' . $post_id);	$post_id = edit_post();	redirect_post($post_id); // Send user on their way while we keep working	exit();	break;case 'trash':	check_admin_referer('trash-' . $post_type . '_' . $post_id);	$post = & get_post($post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item to the Trash.') );	if ( ! wp_trash_post($post_id) )		wp_die( __('Error in moving to Trash.') );	wp_redirect( add_query_arg( array('trashed' => 1, 'ids' => $post_id), $sendback ) );	exit();	break;case 'untrash':	check_admin_referer('untrash-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to move this item out of the Trash.') );	if ( ! wp_untrash_post($post_id) )		wp_die( __('Error in restoring from Trash.') );	wp_redirect( add_query_arg('untrashed', 1, $sendback) );	exit();	break;case 'delete':	check_admin_referer('delete-' . $post_type . '_' . $post_id);	if ( !current_user_can($post_type_object->cap->delete_post, $post_id) )		wp_die( __('You are not allowed to delete this item.') );	$force = !EMPTY_TRASH_DAYS;	if ( $post->post_type == 'attachment' ) {		$force = ( $force || !MEDIA_TRASH );		if ( ! wp_delete_attachment($post_id, $force) )			wp_die( __('Error in deleting.') );	} else {		if ( !wp_delete_post($post_id, $force) )			wp_die( __('Error in deleting.') );	}	wp_redirect( add_query_arg('deleted', 1, $sendback) );	exit();	break;case 'preview':	check_admin_referer( 'autosave', 'autosavenonce' );	$url = post_preview();	wp_redirect($url);	exit();	break;default:		wp_redirect('edit.php');	exit();	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Post functions and post utility function. * * @package WordPress * @subpackage Post * @since 1.5.0 *///// Post Type Registration///** * Creates the initial post types when 'init' action is fired. */function create_initial_post_types() {	register_post_type( 'post', array(		'public'  => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'page', array(		'public' => true,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'page',		'hierarchical' => true,		'rewrite' => false,		'query_var' => false,		'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),	) );	register_post_type( 'attachment', array(		'labels' => array(			'name' => __( 'Media' ),		),		'public' => true,		'show_ui' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'media.php?attachment_id=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,		'can_export' => false,		'show_in_nav_menus' => false,	) );	register_post_type( 'revision', array(		'labels' => array(			'name' => __( 'Revisions' ),			'singular_name' => __( 'Revision' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_type( 'nav_menu_item', array(		'labels' => array(			'name' => __( 'Navigation Menu Items' ),			'singular_name' => __( 'Navigation Menu Item' ),		),		'public' => false,		'_builtin' => true, /* internal use only. don't use this when registering your own post type. */		'capability_type' => 'post',		'hierarchical' => false,		'rewrite' => false,		'query_var' => false,	) );	register_post_status( 'publish', array(		'label'       => _x( 'Published', 'post' ),		'public'      => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Published <span class="count">(%s)</span>', 'Published <span class="count">(%s)</span>' ),	) );	register_post_status( 'future', array(		'label'       => _x( 'Scheduled', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop('Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' ),	) );	register_post_status( 'draft', array(		'label'       => _x( 'Draft', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Draft <span class="count">(%s)</span>', 'Drafts <span class="count">(%s)</span>' ),	) );	register_post_status( 'pending', array(		'label'       => _x( 'Pending', 'post' ),		'protected'   => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Pending <span class="count">(%s)</span>', 'Pending <span class="count">(%s)</span>' ),	) );	register_post_status( 'private', array(		'label'       => _x( 'Private', 'post' ),		'private'     => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Private <span class="count">(%s)</span>', 'Private <span class="count">(%s)</span>' ),	) );	register_post_status( 'trash', array(		'label'       => _x( 'Trash', 'post' ),		'internal'    => true,		'_builtin'    => true, /* internal use only. */		'label_count' => _n_noop( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>' ),		'show_in_admin_status_list' => true,	) );	register_post_status( 'auto-draft', array(		'label'    => 'auto-draft',		'internal' => true,		'_builtin' => true, /* internal use only. */	) );	register_post_status( 'inherit', array(		'label'    => 'inherit',		'internal' => true,		'_builtin' => true, /* internal use only. */		'exclude_from_search' => false,	) );}add_action( 'init', 'create_initial_post_types', 0 ); // highest priority/** * Retrieve attached file path based on attachment ID. * * You can optionally send it through the 'get_attached_file' filter, but by * default it will just return the file path unfiltered. * * The function works by getting the single post meta name, named * '_wp_attached_file' and returning it. This is a convenience function to * prevent looking up the meta name and provide a mechanism for sending the * attached filename through a filter. * * @since 2.0.0 * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID. * @param bool $unfiltered Whether to apply filters. * @return string The file path to the attached file. */function get_attached_file( $attachment_id, $unfiltered = false ) {	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );	// If the file is relative, prepend upload dir	if ( 0 !== strpos($file, '/') && !preg_match('|^.:\\\|', $file) && ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) )		$file = $uploads['basedir'] . "/$file";	if ( $unfiltered )		return $file;	return apply_filters( 'get_attached_file', $file, $attachment_id );}/** * Update attachment file path based on attachment ID. * * Used to update the file path of the attachment, which uses post meta name * '_wp_attached_file' to store the path of the attachment. * * @since 2.1.0 * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID. * * @param int $attachment_id Attachment ID * @param string $file File path for the attachment * @return bool False on failure, true on success. */function update_attached_file( $attachment_id, $file ) {	if ( !get_post( $attachment_id ) )		return false;	$file = apply_filters( 'update_attached_file', $file, $attachment_id );	$file = _wp_relative_upload_path($file);	return update_post_meta( $attachment_id, '_wp_attached_file', $file );}/** * Return relative path to an uploaded file. * * The path is relative to the current upload dir. * * @since 2.9.0 * @uses apply_filters() Calls '_wp_relative_upload_path' on file path. * * @param string $path Full path to the file * @return string relative path on success, unchanged path on failure. */function _wp_relative_upload_path( $path ) {	$new_path = $path;	if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) {		if ( 0 === strpos($new_path, $uploads['basedir']) ) {				$new_path = str_replace($uploads['basedir'], '', $new_path);				$new_path = ltrim($new_path, '/');		}	}	return apply_filters( '_wp_relative_upload_path', $new_path, $path );}/** * Retrieve all children of the post parent ID. * * Normally, without any enhancements, the children would apply to pages. In the * context of the inner workings of WordPress, pages, posts, and attachments * share the same table, so therefore the functionality could apply to any one * of them. It is then noted that while this function does not work on posts, it * does not mean that it won't work on posts. It is recommended that you know * what context you wish to retrieve the children of. * * Attachments may also be made the child of a post, so if that is an accurate * statement (which needs to be verified), it would then be possible to get * all of the attachments for a post. Attachments have since changed since * version 2.5, so this is most likely unaccurate, but serves generally as an * example of what is possible. * * The arguments listed as defaults are for this function and also of the * {@link get_posts()} function. The arguments are combined with the * get_children defaults and are then passed to the {@link get_posts()} * function, which accepts additional arguments. You can replace the defaults in * this function, listed below and the additional arguments listed in the * {@link get_posts()} function. * * The 'post_parent' is the most important argument and important attention * needs to be paid to the $args parameter. If you pass either an object or an * integer (number), then just the 'post_parent' is grabbed and everything else * is lost. If you don't specify any arguments, then it is assumed that you are * in The Loop and the post parent will be grabbed for from the current post. * * The 'post_parent' argument is the ID to get the children. The 'numberposts' * is the amount of posts to retrieve that has a default of '-1', which is * used to get all of the posts. Giving a number higher than 0 will only * retrieve that amount of posts. * * The 'post_type' and 'post_status' arguments can be used to choose what * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress * post types are 'post', 'pages', and 'attachments'. The 'post_status' * argument will accept any post status within the write administration panels. * * @see get_posts() Has additional arguments that can be replaced. * @internal Claims made in the long description might be inaccurate. * * @since 2.0.0 * * @param mixed $args Optional. User defined arguments for replacing the defaults. * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N. * @return array|bool False on failure and the type will be determined by $output parameter. */function &get_children($args = '', $output = OBJECT) {	$kids = array();	if ( empty( $args ) ) {		if ( isset( $GLOBALS['post'] ) ) {			$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );		} else {			return $kids;		}	} elseif ( is_object( $args ) ) {		$args = array('post_parent' => (int) $args->post_parent );	} elseif ( is_numeric( $args ) ) {		$args = array('post_parent' => (int) $args);	}	$defaults = array(		'numberposts' => -1, 'post_type' => 'any',		'post_status' => 'any', 'post_parent' => 0,	);	$r = wp_parse_args( $args, $defaults );	$children = get_posts( $r );	if ( !$children )		return $kids;	update_post_cache($children);	foreach ( $children as $key => $child )		$kids[$child->ID] =& $children[$key];	if ( $output == OBJECT ) {		return $kids;	} elseif ( $output == ARRAY_A ) {		foreach ( (array) $kids as $kid )			$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);		return $weeuns;	} elseif ( $output == ARRAY_N ) {		foreach ( (array) $kids as $kid )			$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));		return $babes;	} else {		return $kids;	}}/** * Get extended entry info (<!--more-->). * * There should not be any space after the second dash and before the word * 'more'. There can be text or space(s) after the word 'more', but won't be * referenced. * * The returned array has 'main' and 'extended' keys. Main has the text before * the <code><!--more--></code>. The 'extended' key has the content after the * <code><!--more--></code> comment. * * @since 1.0.0 * * @param string $post Post content. * @return array Post before ('main') and after ('extended'). */function get_extended($post) {	//Match the new style more links	if ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {		list($main, $extended) = explode($matches[0], $post, 2);	} else {		$main = $post;		$extended = '';	}	// Strip leading and trailing whitespace	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);	return array('main' => $main, 'extended' => $extended);}/** * Retrieves post data given a post ID or post object. * * See {@link sanitize_post()} for optional $filter values. Also, the parameter * $post, must be given as a variable, since it is passed by reference. * * @since 1.5.1 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post * * @param int|object $post Post ID or post object. * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional, default is raw. * @return mixed Post data */function &get_post(&$post, $output = OBJECT, $filter = 'raw') {	global $wpdb;	$null = null;	if ( empty($post) ) {		if ( isset($GLOBALS['post']) )			$_post = & $GLOBALS['post'];		else			return $null;	} elseif ( is_object($post) && empty($post->filter) ) {		_get_post_ancestors($post);		$_post = sanitize_post($post, 'raw');		wp_cache_add($post->ID, $_post, 'posts');	} else {		if ( is_object($post) )			$post_id = $post->ID;		else			$post_id = $post;		$post_id = (int) $post_id;		if ( ! $_post = wp_cache_get($post_id, 'posts') ) {			$_post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $post_id));			if ( ! $_post )				return $null;			_get_post_ancestors($_post);			$_post = sanitize_post($_post, 'raw');			wp_cache_add($_post->ID, $_post, 'posts');		}	}	if ($filter != 'raw')		$_post = sanitize_post($_post, $filter);	if ( $output == OBJECT ) {		return $_post;	} elseif ( $output == ARRAY_A ) {		$__post = get_object_vars($_post);		return $__post;	} elseif ( $output == ARRAY_N ) {		$__post = array_values(get_object_vars($_post));		return $__post;	} else {		return $_post;	}}/** * Retrieve ancestors of a post. * * @since 2.5.0 * * @param int|object $post Post ID or post object * @return array Ancestor IDs or empty array if none are found. */function get_post_ancestors($post) {	$post = get_post($post);	if ( !empty($post->ancestors) )		return $post->ancestors;	return array();}/** * Retrieve data from a post field based on Post ID. * * Examples of the post field will be, 'post_type', 'post_status', 'content', * etc and based off of the post object property or key names. * * The context values are based off of the taxonomy filter functions and * supported values are found within those functions. * * @since 2.3.0 * @uses sanitize_post_field() See for possible $context values. * * @param string $field Post field name * @param id $post Post ID * @param string $context Optional. How to filter the field. Default is display. * @return WP_Error|string Value in post field or WP_Error on failure */function get_post_field( $field, $post, $context = 'display' ) {	$post = (int) $post;	$post = get_post( $post );	if ( is_wp_error($post) )		return $post;	if ( !is_object($post) )		return '';	if ( !isset($post->$field) )		return '';	return sanitize_post_field($field, $post->$field, $post->ID, $context);}/** * Retrieve the mime type of an attachment based on the ID. * * This function can be used with any post type, but it makes more sense with * attachments. * * @since 2.0.0 * * @param int $ID Optional. Post ID. * @return bool|string False on failure or returns the mime type */function get_post_mime_type($ID = '') {	$post = & get_post($ID);	if ( is_object($post) )		return $post->post_mime_type;	return false;}/** * Retrieve the post status based on the Post ID. * * If the post ID is of an attachment, then the parent post status will be given * instead. * * @since 2.0.0 * * @param int $ID Post ID * @return string|bool Post status or false on failure. */function get_post_status($ID = '') {	$post = get_post($ID);	if ( !is_object($post) )		return false;	// Unattached attachments are assumed to be published.	if ( ('attachment' == $post->post_type) && ('inherit' == $post->post_status) && ( 0 == $post->post_parent) )		return 'publish';	if ( ('attachment' == $post->post_type) && $post->post_parent && ($post->ID != $post->post_parent) )		return get_post_status($post->post_parent);	return $post->post_status;}/** * Retrieve all of the WordPress supported post statuses. * * Posts have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of post statuses. */function get_post_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'pending'		=> __('Pending Review'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Retrieve all of the WordPress support page statuses. * * Pages have a limited set of valid status values, this provides the * post_status values and descriptions. * * @since 2.5.0 * * @return array List of page statuses. */function get_page_statuses( ) {	$status = array(		'draft'			=> __('Draft'),		'private'		=> __('Private'),		'publish'		=> __('Published')	);	return $status;}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post status based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post status name. * * * Optional $args contents: * * label - A descriptive name for the post status marked for translation. Defaults to $post_status. * public - Whether posts of this status should be shown in the admin UI. Defaults to true. * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to true. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses Inserts new post status object into the list * * @param string $post_status Name of the post status. * @param array|string $args See above description. */function register_post_status($post_status, $args = array()) {	global $wp_post_statuses;	if (!is_array($wp_post_statuses))		$wp_post_statuses = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array('label' => false, 'label_count' => false, 'exclude_from_search' => null, '_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'hierarchical' => false, 'public' => null, 'internal' => null, 'protected' => null, 'private' => null, 'show_in_admin_all' => null, 'publicly_queryable' => null, 'show_in_admin_status_list' => null, 'show_in_admin_all_list' => null, 'single_view_cap' => null);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_status = sanitize_user($post_status, true);	$args->name = $post_status;	if ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )		$args->internal = true;	if ( null === $args->public  )		$args->public = false;	if ( null === $args->private  )		$args->private = false;	if ( null === $args->protected  )		$args->protected = false;	if ( null === $args->internal  )		$args->internal = false;	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	if ( null === $args->exclude_from_search )		$args->exclude_from_search = $args->internal;	if ( null === $args->show_in_admin_all_list )		$args->show_in_admin_all_list = !$args->internal;	if ( null === $args->show_in_admin_status_list )			$args->show_in_admin_status_list = !$args->internal;	if ( null === $args->single_view_cap )		$args->single_view_cap = $args->public ? '' : 'edit';	if ( false === $args->label )		$args->label = $post_status;	if ( false === $args->label_count )		$args->label_count = array( $args->label, $args->label );	$wp_post_statuses[$post_status] = $args;	return $args;}/** * Retrieve a post status object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_statuses * * @param string $post_type The name of a registered post status * @return object A post status object */function get_post_status_object( $post_status ) {	global $wp_post_statuses;	if ( empty($wp_post_statuses[$post_status]) )		return null;	return $wp_post_statuses[$post_status];}/** * Get a list of all registered post status objects. * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_statuses * @see register_post_status * @see get_post_status_object * * @param array|string $args An array of key => value arguments to match against the post status objects. * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_statuses;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);}/** * Whether the post type is hierarchical. * * A false return value might also mean that the post type does not exist. * * @since 3.0.0 * @see get_post_type_object * * @param string $post Post type name * @return bool Whether post type is hierarchical. */function is_post_type_hierarchical( $post_type ) {	if ( ! post_type_exists( $post_type ) )		return false;	$post_type = get_post_type_object( $post_type );	return $post_type->hierarchical;}/** * Checks if a post type is registered. * * @since 3.0.0 * @uses get_post_type_object() * * @param string Post type name * @return bool Whether post type is registered. */function post_type_exists( $post_type ) {	return (bool) get_post_type_object( $post_type );}/** * Retrieve the post type of the current post or of a given post. * * @since 2.1.0 * * @uses $post The Loop current post global * * @param mixed $the_post Optional. Post object or post ID. * @return bool|string post type or false on failure. */function get_post_type( $the_post = false ) {	global $post;	if ( false === $the_post )		$the_post = $post;	elseif ( is_numeric($the_post) )		$the_post = get_post($the_post);	if ( is_object($the_post) )		return $the_post->post_type;	return false;}/** * Retrieve a post type object by name * * @package WordPress * @subpackage Post * @since 3.0.0 * @uses $wp_post_types * @see register_post_type * @see get_post_types * * @param string $post_type The name of a registered post type * @return object A post type object */function get_post_type_object( $post_type ) {	global $wp_post_types;	if ( empty($wp_post_types[$post_type]) )		return null;	return $wp_post_types[$post_type];}/** * Get a list of all registered post type objects. * * @package WordPress * @subpackage Post * @since 2.9.0 * @uses $wp_post_types * @see register_post_type * * @param array|string $args An array of key => value arguments to match against the post type objects. * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default. * @param string $operator The logical operation to perform. 'or' means only one element *  from the array needs to match; 'and' means all elements must match. The default is 'and'. * @return array A list of post type names or objects */function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {	global $wp_post_types;	$field = ('names' == $output) ? 'name' : false;	return wp_filter_object_list($wp_post_types, $args, $operator, $field);}/** * Register a post type. Do not use before init. * * A simple function for creating or modifying a post type based on the * parameters given. The function will accept an array (second optional * parameter), along with a string for the post type name. * * * Optional $args contents: * * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used. * - description - A short descriptive summary of what the post type is. Defaults to blank. * - public - Whether posts of this type should be shown in the admin UI. Defaults to false. * - exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. * - publicly_queryable - Whether post_type queries can be performed from the front page.  Defaults to whatever public is set as. * - show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. * - menu_position - The position in the menu order the post type should appear. Defaults to the bottom. * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. * - capability_type - The post type to use for checking read, edit, and delete capabilities. Defaults to "post". * - capabilities - Array of capabilities for this post type. You can see accepted values in {@link get_post_type_capabilities()}. By default the capability_type is used to construct capabilities. * - hierarchical - Whether the post type is hierarchical. Defaults to false. * - supports - An alias for calling add_post_type_support() directly. See add_post_type_support() for Documentation. Defaults to none. * - register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form.  Do remove_meta_box() and add_meta_box() calls in the callback. * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.  Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). * - labels - An array of labels for this post type. You can see accepted values in {@link get_post_type_labels()}. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. * - permalink_epmask - The default rewrite endpoint bitmasks. * - rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize permastruct; default will use $post_type as slug. * - query_var - false to prevent queries, or string to value of the query var to use for this post type * - can_export - true allows this post type to be exported. * - show_in_nav_menus - true makes this post type available for selection in navigation menus. * - _builtin - true if this post type is a native or "built-in" post_type.  THIS IS FOR INTERNAL USE ONLY! * - _edit_link - URL segement to use for edit link of this post type.  Set to 'post.php?post=%d'.  THIS IS FOR INTERNAL USE ONLY! * * @since 2.9.0 * @uses $wp_post_types Inserts new post type object into the list * * @param string $post_type Name of the post type. * @param array|string $args See above description. * @return object the registered post type object */function register_post_type($post_type, $args = array()) {	global $wp_post_types, $wp_rewrite, $wp;	if ( !is_array($wp_post_types) )		$wp_post_types = array();	// Args prefixed with an underscore are reserved for internal use.	$defaults = array(		'labels' => array(), 'description' => '', 'publicly_queryable' => null, 'exclude_from_search' => null,		'_builtin' => false, '_edit_link' => 'post.php?post=%d', 'capability_type' => 'post', 'capabilities' => array(), 'hierarchical' => false,		'public' => false, 'rewrite' => true, 'query_var' => true, 'supports' => array(), 'register_meta_box_cb' => null,		'taxonomies' => array(), 'show_ui' => null, 'menu_position' => null, 'menu_icon' => null,		'permalink_epmask' => EP_PERMALINK, 'can_export' => true, 'show_in_nav_menus' => null	);	$args = wp_parse_args($args, $defaults);	$args = (object) $args;	$post_type = sanitize_user($post_type, true);	$args->name = $post_type;	// If not set, default to the setting for public.	if ( null === $args->publicly_queryable )		$args->publicly_queryable = $args->public;	// If not set, default to the setting for public.	if ( null === $args->show_ui )		$args->show_ui = $args->public;	// Whether to show this type in nav-menus.php.  Defaults to the setting for public.	if ( null === $args->show_in_nav_menus )		$args->show_in_nav_menus = $args->public;	// If not set, default to true if not public, false if public.	if ( null === $args->exclude_from_search )		$args->exclude_from_search = !$args->public;	if ( empty($args->capability_type) )		$args->capability_type = 'post';	$args->cap = get_post_type_capabilities( $args );	unset($args->capabilities);	if ( ! empty($args->supports) ) {		add_post_type_support($post_type, $args->supports);		unset($args->supports);	} else {		// Add default features		add_post_type_support($post_type, array('title', 'editor'));	}	if ( false !== $args->query_var && !empty($wp) ) {		if ( true === $args->query_var )			$args->query_var = $post_type;		$args->query_var = sanitize_title_with_dashes($args->query_var);		$wp->add_query_var($args->query_var);	}	if ( false !== $args->rewrite && '' != get_option('permalink_structure') ) {		if ( !is_array($args->rewrite) )			$args->rewrite = array();		if ( !isset($args->rewrite['slug']) )			$args->rewrite['slug'] = $post_type;		if ( !isset($args->rewrite['with_front']) )			$args->rewrite['with_front'] = true;		if ( $args->hierarchical )			$wp_rewrite->add_rewrite_tag("%$post_type%", '(.+?)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		else			$wp_rewrite->add_rewrite_tag("%$post_type%", '([^/]+)', $args->query_var ? "{$args->query_var}=" : "post_type=$post_type&name=");		$wp_rewrite->add_permastruct($post_type, "{$args->rewrite['slug']}/%$post_type%", $args->rewrite['with_front'], $args->permalink_epmask);	}	if ( $args->register_meta_box_cb )		add_action('add_meta_boxes_' . $post_type, $args->register_meta_box_cb, 10, 1);	$args->labels = get_post_type_labels( $args );	$args->label = $args->labels->name;	$wp_post_types[$post_type] = $args;	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );	foreach ( $args->taxonomies as $taxonomy ) {		register_taxonomy_for_object_type( $taxonomy, $post_type );	}	return $args;}/** * Builds an object with all post type capabilities out of a post type object * * Accepted keys of the capabilities array in the post type object: * - edit_post - The meta capability that controls editing a particular object of this post type. Defaults to "edit_ . $capability_type" (edit_post). * - edit_posts - The capability that controls editing objects of this post type as a class. Defaults to "edit_ . $capability_type . s" (edit_posts). * - edit_others_posts - The capability that controls editing objects of this post type that are owned by other users. Defaults to "edit_others_ . $capability_type . s" (edit_others_posts). * - publish_posts - The capability that controls publishing objects of this post type. Defaults to "publish_ . $capability_type . s" (publish_posts). * - read_post - The meta capability that controls reading a particular object of this post type. Defaults to "read_ . $capability_type" (read_post). * - read_private_posts - The capability that controls reading private posts. Defaults to "read_private . $capability_type . s" (read_private_posts). * - delete_post - The meta capability that controls deleting a particular object of this post type. Defaults to "delete_ . $capability_type" (delete_post). * * @since 3.0.0 * @param object $args * @return object object with all the capabilities as member variables */function get_post_type_capabilities( $args ) {	$defaults = array(		'edit_post'          => 'edit_'         . $args->capability_type,		'edit_posts'         => 'edit_'         . $args->capability_type . 's',		'edit_others_posts'  => 'edit_others_'  . $args->capability_type . 's',		'publish_posts'      => 'publish_'      . $args->capability_type . 's',		'read_post'          => 'read_'         . $args->capability_type,		'read_private_posts' => 'read_private_' . $args->capability_type . 's',		'delete_post'        => 'delete_'       . $args->capability_type,	);	$labels = array_merge( $defaults, $args->capabilities );	return (object) $labels;}/** * Builds an object with all post type labels out of a post type object * * Accepted keys of the label array in the post type object: * - name - general name for the post type, usually plural. The same and overriden by $post_type_object->label. Default is Posts/Pages * - singular_name - name for one object of this post type. Default is Post/Page * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');</code> * - add_new_item - Default is Add New Post/Add New Page * - edit_item - Default is Edit Post/Edit Page * - new_item - Default is New Post/New Page * - view_item - Default is View Post/View Page * - search_items - Default is Search Posts/Search Pages * - not_found - Default is No posts found/No pages found * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page: * * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages.) * * @since 3.0.0 * @param object $post_type_object * @return object object with all the labels as member variables */function get_post_type_labels( $post_type_object ) {	$nohier_vs_hier_defaults = array(		'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),		'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),		'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),		'add_new_item' => array( __('Add New Post'), __('Add New Page') ),		'edit_item' => array( __('Edit Post'), __('Edit Page') ),		'new_item' => array( __('New Post'), __('New Page') ),		'view_item' => array( __('View Post'), __('View Page') ),		'search_items' => array( __('Search Posts'), __('Search Pages') ),		'not_found' => array( __('No posts found'), __('No pages found') ),		'not_found_in_trash' => array( __('No posts found in Trash'), __('No pages found in Trash') ),		'parent_item_colon' => array( null, __('Parent Page:') )	);	return _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );}/** * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object * * @access private */function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {	if ( isset( $object->label ) && empty( $object->labels['name'] ) )		$object->labels['name'] = $object->label;	if ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )		$object->labels['singular_name'] = $object->labels['name'];	$defaults = array_map( create_function( '$x', $object->hierarchical? 'return $x[1];' : 'return $x[0];' ), $nohier_vs_hier_defaults );	$labels = array_merge( $defaults, $object->labels );	return (object)$labels;}/** * Register support of certain features for a post type. * * All features are directly associated with a functional area of the edit screen, such as the * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author', * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'. * * Additionally, the 'revisions' feature dictates whether the post type will store revisions, * and the 'comments' feature dicates whether the comments count will show on the edit screen. * * @since 3.0.0 * @param string $post_type The post type for which to add the feature * @param string|array $feature the feature being added, can be an array of feature strings or a single string */function add_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	$features = (array) $feature;	foreach ($features as $feature) {		if ( func_num_args() == 2 )			$_wp_post_type_features[$post_type][$feature] = true;		else			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );	}}/** * Remove support for a feature from a post type. * * @since 3.0.0 * @param string $post_type The post type for which to remove the feature * @param string $feature The feature being removed */function remove_post_type_support( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset($_wp_post_type_features[$post_type]) )		return;	if ( isset($_wp_post_type_features[$post_type][$feature]) )		unset($_wp_post_type_features[$post_type][$feature]);}/** * Checks a post type's support for a given feature * * @since 3.0.0 * @param string $post_type The post type being checked * @param string $feature the feature being checked * @return boolean */function post_type_supports( $post_type, $feature ) {	global $_wp_post_type_features;	if ( !isset( $_wp_post_type_features[$post_type][$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 2 )		return true;	// @todo Allow pluggable arg checking	//$args = array_slice( func_get_args(), 2 );	return true;}/** * Updates the post type for the post ID. * * The page or post cache will be cleaned for the post ID. * * @since 2.5.0 * * @uses $wpdb * * @param int $post_id Post ID to change post type. Not actually optional. * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to *  name a few. * @return int Amount of rows changed. Should be 1 for success and 0 for failure. */function set_post_type( $post_id = 0, $post_type = 'post' ) {	global $wpdb;	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');	$return = $wpdb->update($wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );	if ( 'page' == $post_type )		clean_page_cache($post_id);	else		clean_post_cache($post_id);	return $return;}/** * Retrieve list of latest posts or posts matching criteria. * * The defaults are as follows: *     'numberposts' - Default is 5. Total number of posts to retrieve. *     'offset' - Default is 0. See {@link WP_Query::query()} for more. *     'category' - What category to pull the posts from. *     'orderby' - Default is 'post_date'. How to order the posts. *     'order' - Default is 'DESC'. The order to retrieve the posts. *     'include' - See {@link WP_Query::query()} for more. *     'exclude' - See {@link WP_Query::query()} for more. *     'meta_key' - See {@link WP_Query::query()} for more. *     'meta_value' - See {@link WP_Query::query()} for more. *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few. *     'post_parent' - The parent of the post or post type. *     'post_status' - Default is 'published'. Post status to retrieve. * * @since 1.2.0 * @uses $wpdb * @uses WP_Query::query() See for more default arguments and information. * @link http://codex.wordpress.org/Template_Tags/get_posts * * @param array $args Optional. Overrides defaults. * @return array List of posts. */function get_posts($args = null) {	$defaults = array(		'numberposts' => 5, 'offset' => 0,		'category' => 0, 'orderby' => 'post_date',		'order' => 'DESC', 'include' => array(),		'exclude' => array(), 'meta_key' => '',		'meta_value' =>'', 'post_type' => 'post',		'suppress_filters' => true	);	$r = wp_parse_args( $args, $defaults );	if ( empty( $r['post_status'] ) )		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';	if ( ! empty($r['numberposts']) )		$r['posts_per_page'] = $r['numberposts'];	if ( ! empty($r['category']) )		$r['cat'] = $r['category'];	if ( ! empty($r['include']) ) {		$incposts = wp_parse_id_list( $r['include'] );		$r['posts_per_page'] = count($incposts);  // only the number of posts included		$r['post__in'] = $incposts;	} elseif ( ! empty($r['exclude']) )		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );	$r['caller_get_posts'] = true;	$get_posts = new WP_Query;	return $get_posts->query($r);}//// Post meta functions///** * Add meta data field to a post. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/add_post_meta * * @param int $post_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_post_meta($post_id, $meta_key, $meta_value, $unique = false) {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a post. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/delete_post_meta * * @param int $post_id post ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_post_meta($post_id, $meta_key, $meta_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return delete_metadata('post', $post_id, $meta_key, $meta_value);}/** * Retrieve post meta field for a post. * * @since 1.5.0 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/get_post_meta * * @param int $post_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_post_meta($post_id, $key, $single = false) {	return get_metadata('post', $post_id, $key, $single);}/** * Update post meta field based on post ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and post ID. * * If the meta field for the post does not exist, it will be added. * * @since 1.5 * @uses $wpdb * @link http://codex.wordpress.org/Function_Reference/update_post_meta * * @param int $post_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_post_meta($post_id, $meta_key, $meta_value, $prev_value = '') {	// make sure meta is added to the post, not a revision	if ( $the_post = wp_is_post_revision($post_id) )		$post_id = $the_post;	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);}/** * Delete everything from post meta matching meta key. * * @since 2.3.0 * @uses $wpdb * * @param string $post_meta_key Key to search for when deleting. * @return bool Whether the post meta key was deleted from the database */function delete_post_meta_by_key($post_meta_key) {	if ( !$post_meta_key )		return false;	global $wpdb;	$post_ids = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key));	if ( $post_ids ) {		$postmetaids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = %s", $post_meta_key ) );		$in = implode( ',', array_fill(1, count($postmetaids), '%d'));		do_action( 'delete_postmeta', $postmetaids );		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id IN($in)", $postmetaids ));		do_action( 'deleted_postmeta', $postmetaids );		foreach ( $post_ids as $post_id )			wp_cache_delete($post_id, 'post_meta');		return true;	}	return false;}/** * Retrieve post meta fields, based on post ID. * * The post meta fields are retrieved from the cache, so the function is * optimized to be called more than once. It also applies to the functions, that * use this function. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom * * @uses $id Current Loop Post ID * * @param int $post_id post ID * @return array */function get_post_custom($post_id = 0) {	global $id;	if ( !$post_id )		$post_id = (int) $id;	$post_id = (int) $post_id;	if ( ! wp_cache_get($post_id, 'post_meta') )		update_postmeta_cache($post_id);	return wp_cache_get($post_id, 'post_meta');}/** * Retrieve meta field names for a post. * * If there are no meta fields, then nothing (null) will be returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_keys * * @param int $post_id post ID * @return array|null Either array of the keys, or null if keys could not be retrieved. */function get_post_custom_keys( $post_id = 0 ) {	$custom = get_post_custom( $post_id );	if ( !is_array($custom) )		return;	if ( $keys = array_keys($custom) )		return $keys;}/** * Retrieve values for a custom post field. * * The parameters must not be considered optional. All of the post meta fields * will be retrieved and only the meta field key values returned. * * @since 1.2.0 * @link http://codex.wordpress.org/Function_Reference/get_post_custom_values * * @param string $key Meta field key. * @param int $post_id Post ID * @return array Meta field values. */function get_post_custom_values( $key = '', $post_id = 0 ) {	if ( !$key )		return null;	$custom = get_post_custom($post_id);	return isset($custom[$key]) ? $custom[$key] : null;}/** * Check if post is sticky. * * Sticky posts should remain at the top of The Loop. If the post ID is not * given, then The Loop ID for the current post will be used. * * @since 2.7.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post is sticky. */function is_sticky($post_id = null) {	global $id;	$post_id = absint($post_id);	if ( !$post_id )		$post_id = absint($id);	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return false;	if ( in_array($post_id, $stickies) )		return true;	return false;}/** * Sanitize every post field. * * If the context is 'raw', then the post object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_post_field() Used to sanitize the fields. * * @param object|array $post The Post Object or Array * @param string $context Optional, default is 'display'. How to sanitize post fields. * @return object|array The now sanitized Post Object or Array (will be the same type as $post) */function sanitize_post($post, $context = 'display') {	if ( is_object($post) ) {		// Check if post already filtered for this context		if ( isset($post->filter) && $context == $post->filter )			return $post;		if ( !isset($post->ID) )			$post->ID = 0;		foreach ( array_keys(get_object_vars($post)) as $field )			$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);		$post->filter = $context;	} else {		// Check if post already filtered for this context		if ( isset($post['filter']) && $context == $post['filter'] )			return $post;		if ( !isset($post['ID']) )			$post['ID'] = 0;		foreach ( array_keys($post) as $field )			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);		$post['filter'] = $context;	}	return $post;}/** * Sanitize post field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $post_id if $context == 'edit' and field name prefix == 'post_'. * * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'. * * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'. * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'post_'. * * @param string $field The Post Object field name. * @param mixed $value The Post Object value. * @param int $post_id Post ID. * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_post_field($field, $value, $post_id, $context) {	$int_fields = array('ID', 'post_parent', 'menu_order');	if ( in_array($field, $int_fields) )		$value = (int) $value;	// Fields which contain arrays of ints.	$array_int_fields = array( 'ancestors' );	if ( in_array($field, $array_int_fields) ) {		$value = array_map( 'absint', $value);		return $value;	}	if ( 'raw' == $context )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'post_') ) {		$prefixed = true;		$field_no_prefix = str_replace('post_', '', $field);	}	if ( 'edit' == $context ) {		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $post_id);			// Old school			$value = apply_filters("${field_no_prefix}_edit_pre", $value, $post_id);		} else {			$value = apply_filters("edit_post_$field", $value, $post_id);		}		if ( in_array($field, $format_to_edit) ) {			if ( 'post_content' == $field )				$value = format_to_edit($value, user_can_richedit());			else				$value = format_to_edit($value);		} else {			$value = esc_attr($value);		}	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);			$value = apply_filters("${field_no_prefix}_save_pre", $value);		} else {			$value = apply_filters("pre_post_$field", $value);			$value = apply_filters("${field}_pre", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $post_id, $context);		else			$value = apply_filters("post_$field", $value, $post_id, $context);	}	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Make a post sticky. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function stick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		$stickies = array($post_id);	if ( ! in_array($post_id, $stickies) )		$stickies[] = $post_id;	update_option('sticky_posts', $stickies);}/** * Unstick a post. * * Sticky posts should be displayed at the top of the front page. * * @since 2.7.0 * * @param int $post_id Post ID. */function unstick_post($post_id) {	$stickies = get_option('sticky_posts');	if ( !is_array($stickies) )		return;	if ( ! in_array($post_id, $stickies) )		return;	$offset = array_search($post_id, $stickies);	if ( false === $offset )		return;	array_splice($stickies, $offset, 1);	update_option('sticky_posts', $stickies);}/** * Count number of posts of a post type and is user has permissions to view. * * This function provides an efficient method of finding the amount of post's * type a blog has. Another method is to count the amount of items in * get_posts(), but that method has a lot of overhead with doing so. Therefore, * when developing for 2.5+, use this function instead. * * The $perm parameter checks for 'readable' value and if the user can read * private posts, it will display that for the user that is signed in. * * @since 2.5.0 * @link http://codex.wordpress.org/Template_Tags/wp_count_posts * * @param string $type Optional. Post type to retrieve count * @param string $perm Optional. 'readable' or empty. * @return object Number of posts for each status */function wp_count_posts( $type = 'post', $perm = '' ) {	global $wpdb;	$user = wp_get_current_user();	$cache_key = $type;	$query = "SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s";	if ( 'readable' == $perm && is_user_logged_in() ) {		$post_type_object = get_post_type_object($type);		if ( !current_user_can( $post_type_object->cap->read_private_posts ) ) {			$cache_key .= '_' . $perm . '_' . $user->ID;			$query .= " AND (post_status != 'private' OR ( post_author = '$user->ID' AND post_status = 'private' ))";		}	}	$query .= ' GROUP BY post_status';	$count = wp_cache_get($cache_key, 'counts');	if ( false !== $count )		return $count;	$count = $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );	$stats = array();	foreach ( get_post_stati() as $state )		$stats[$state] = 0;	foreach ( (array) $count as $row )		$stats[$row['post_status']] = $row['num_posts'];	$stats = (object) $stats;	wp_cache_set($cache_key, $stats, 'counts');	return $stats;}/** * Count number of attachments for the mime type(s). * * If you set the optional mime_type parameter, then an array will still be * returned, but will only have the item you are looking for. It does not give * you the number of attachments that are children of a post. You can get that * by counting the number of children that post has. * * @since 2.5.0 * * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns. * @return array Number of posts for each mime type. */function wp_count_attachments( $mime_type = '' ) {	global $wpdb;	$and = wp_post_mime_type_where( $mime_type );	$count = $wpdb->get_results( "SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type", ARRAY_A );	$stats = array( );	foreach( (array) $count as $row ) {		$stats[$row['post_mime_type']] = $row['num_posts'];	}	$stats['trash'] = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and");	return (object) $stats;}/** * Check a MIME-Type against a list. * * If the wildcard_mime_types parameter is a string, it must be comma separated * list. If the real_mime_types is a string, it is also comma separated to * create the list. * * @since 2.5.0 * * @param string|array $wildcard_mime_types e.g. audio/mpeg or image (same as image/*) or *  flash (same as *flash*). * @param string|array $real_mime_types post_mime_type values * @return array array(wildcard=>array(real types)) */function wp_match_mime_types($wildcard_mime_types, $real_mime_types) {	$matches = array();	if ( is_string($wildcard_mime_types) )		$wildcard_mime_types = array_map('trim', explode(',', $wildcard_mime_types));	if ( is_string($real_mime_types) )		$real_mime_types = array_map('trim', explode(',', $real_mime_types));	$wild = '[-._a-z0-9]*';	foreach ( (array) $wildcard_mime_types as $type ) {		$type = str_replace('*', $wild, $type);		$patternses[1][$type] = "^$type$";		if ( false === strpos($type, '/') ) {			$patternses[2][$type] = "^$type/";			$patternses[3][$type] = $type;		}	}	asort($patternses);	foreach ( $patternses as $patterns )		foreach ( $patterns as $type => $pattern )			foreach ( (array) $real_mime_types as $real )				if ( preg_match("#$pattern#", $real) && ( empty($matches[$type]) || false === array_search($real, $matches[$type]) ) )					$matches[$type][] = $real;	return $matches;}/** * Convert MIME types into SQL. * * @since 2.5.0 * * @param string|array $mime_types List of mime types or comma separated string of mime types. * @param string $table_alias Optional. Specify a table alias, if needed. * @return string The SQL AND clause for mime searching. */function wp_post_mime_type_where($post_mime_types, $table_alias = '') {	$where = '';	$wildcards = array('', '%', '%/%');	if ( is_string($post_mime_types) )		$post_mime_types = array_map('trim', explode(',', $post_mime_types));	foreach ( (array) $post_mime_types as $mime_type ) {		$mime_type = preg_replace('/\s/', '', $mime_type);		$slashpos = strpos($mime_type, '/');		if ( false !== $slashpos ) {			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));			if ( empty($mime_subgroup) )				$mime_subgroup = '*';			else				$mime_subgroup = str_replace('/', '', $mime_subgroup);			$mime_pattern = "$mime_group/$mime_subgroup";		} else {			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);			if ( false === strpos($mime_pattern, '*') )				$mime_pattern .= '/*';		}		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);		if ( in_array( $mime_type, $wildcards ) )			return '';		if ( false !== strpos($mime_pattern, '%') )			$wheres[] = empty($table_alias) ? "post_mime_type LIKE '$mime_pattern'" : "$table_alias.post_mime_type LIKE '$mime_pattern'";		else			$wheres[] = empty($table_alias) ? "post_mime_type = '$mime_pattern'" : "$table_alias.post_mime_type = '$mime_pattern'";	}	if ( !empty($wheres) )		$where = ' AND (' . join(' OR ', $wheres) . ') ';	return $where;}/** * Trashes or deletes a post or page. * * When the post and page is permanently deleted, everything that is tied to it is deleted also. * This includes comments, post meta fields, and terms associated with the post. * * The post or page is moved to trash instead of permanently deleted unless trash is * disabled, item is already in the trash, or $force_delete is true. * * @since 1.0.0 * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'. * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'. * @uses wp_delete_attachment() if post type is 'attachment'. * @uses wp_trash_post() if item should be trashed. * * @param int $postid Post ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure */function wp_delete_post( $postid = 0, $force_delete = false ) {	global $wpdb, $wp_rewrite;	if ( !$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $postid)) )		return $post;	if ( !$force_delete && ( $post->post_type == 'post' || $post->post_type == 'page') && get_post_status( $postid ) != 'trash' && EMPTY_TRASH_DAYS )			return wp_trash_post($postid);	if ( $post->post_type == 'attachment' )		return wp_delete_attachment( $postid, $force_delete );	do_action('delete_post', $postid);	delete_post_meta($postid,'_wp_trash_meta_status');	delete_post_meta($postid,'_wp_trash_meta_time');	wp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));	$parent_data = array( 'post_parent' => $post->post_parent );	$parent_where = array( 'post_parent' => $postid );	if ( 'page' == $post->post_type) {	 	// if the page is defined in option page_on_front or post_for_posts,		// adjust the corresponding options		if ( get_option('page_on_front') == $postid ) {			update_option('show_on_front', 'posts');			delete_option('page_on_front');		}		if ( get_option('page_for_posts') == $postid ) {			delete_option('page_for_posts');		}		// Point children of this page to its parent, also clean the cache of affected children		$children_query = $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type='page'", $postid);		$children = $wpdb->get_results($children_query);		$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'page' ) );	} else {		unstick_post($postid);	}	// Do raw query.  wp_get_post_revisions() is filtered	$revision_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'", $postid ) );	// Use wp_delete_post (via wp_delete_post_revision) again.  Ensures any meta/misplaced data gets cleaned up.	foreach ( $revision_ids as $revision_id )		wp_delete_post_revision( $revision_id );	// Point all attachments to this post up one level	$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $postid ));	if ( ! empty($comment_ids) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $postid ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $postid );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $postid ));	do_action( 'deleted_post', $postid );	if ( 'page' == $post->post_type ) {		clean_page_cache($postid);		foreach ( (array) $children as $child )			clean_page_cache($child->ID);		$wp_rewrite->flush_rules(false);	} else {		clean_post_cache($postid);	}	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );	do_action('deleted_post', $postid);	return $post;}/** * Moves a post or page to the Trash * * If trash is disabled, the post or page is permanently deleted. * * @since 2.9.0 * @uses do_action() on 'trash_post' before trashing * @uses do_action() on 'trashed_post' after trashing * @uses wp_delete_post() if trash is disabled * * @param int $postid Post ID. * @return mixed False on failure */function wp_trash_post($post_id = 0) {	if ( !EMPTY_TRASH_DAYS )		return wp_delete_post($post_id, true);	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] == 'trash' )		return false;	do_action('trash_post', $post_id);	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);	add_post_meta($post_id,'_wp_trash_meta_time', time());	$post['post_status'] = 'trash';	wp_insert_post($post);	wp_trash_post_comments($post_id);	do_action('trashed_post', $post_id);	return $post;}/** * Restores a post or page from the Trash * * @since 2.9.0 * @uses do_action() on 'untrash_post' before undeletion * @uses do_action() on 'untrashed_post' after undeletion * * @param int $postid Post ID. * @return mixed False on failure */function wp_untrash_post($post_id = 0) {	if ( !$post = wp_get_single_post($post_id, ARRAY_A) )		return $post;	if ( $post['post_status'] != 'trash' )		return false;	do_action('untrash_post', $post_id);	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);	$post['post_status'] = $post_status;	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	wp_insert_post($post);	wp_untrash_post_comments($post_id);	do_action('untrashed_post', $post_id);	return $post;}/** * Moves comments for a post to the trash * * @since 2.9.0 * @uses do_action() on 'trash_post_comments' before trashing * @uses do_action() on 'trashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_trash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	do_action('trash_post_comments', $post_id);	$comments = $wpdb->get_results( $wpdb->prepare("SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id) );	if ( empty($comments) )		return;	// Cache current status for each comment	$statuses = array();	foreach ( $comments as $comment )		$statuses[$comment->comment_ID] = $comment->comment_approved;	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);	// Set status for all comments to post-trashed	$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));	clean_comment_cache( array_keys($statuses) );	do_action('trashed_post_comments', $post_id, $statuses);	return $result;}/** * Restore comments for a post from the trash * * @since 2.9.0 * @uses do_action() on 'untrash_post_comments' before trashing * @uses do_action() on 'untrashed_post_comments' after trashing * * @param int $post Post ID or object. * @return mixed False on failure */function wp_untrash_post_comments($post = null) {	global $wpdb;	$post = get_post($post);	if ( empty($post) )		return;	$post_id = $post->ID;	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);	if ( empty($statuses) )		return true;	do_action('untrash_post_comments', $post_id);	// Restore each comment to its original status	$group_by_status = array();	foreach ( $statuses as $comment_id => $comment_status )		$group_by_status[$comment_status][] = $comment_id;	foreach ( $group_by_status as $status => $comments ) {		// Sanity check. This shouldn't happen.		if ( 'post-trashed' == $status )			$status = '0';		$comments_in = implode( "', '", $comments );		$wpdb->query( "UPDATE $wpdb->comments SET comment_approved = '$status' WHERE comment_ID IN ('" . $comments_in . "')" );	}	clean_comment_cache( array_keys($statuses) );	delete_post_meta($post_id, '_wp_trash_meta_comments_status');	do_action('untrashed_post_comments', $post_id);}/** * Retrieve the list of categories for a post. * * Compatibility layer for themes and plugins. Also an easy layer of abstraction * away from the complexity of the taxonomy layer. * * @since 2.1.0 * * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here. * * @param int $post_id Optional. The Post ID. * @param array $args Optional. Overwrite the defaults. * @return array */function wp_get_post_categories( $post_id = 0, $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'ids');	$args = wp_parse_args( $args, $defaults );	$cats = wp_get_object_terms($post_id, 'category', $args);	return $cats;}/** * Retrieve the tags for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_tags( $post_id = 0, $args = array() ) {	return wp_get_post_terms( $post_id, 'post_tag', $args);}/** * Retrieve the terms for a post. * * There is only one default for this function, called 'fields' and by default * is set to 'all'. There are other defaults that can be overridden in * {@link wp_get_object_terms()}. * * @package WordPress * @subpackage Post * @since 2.8.0 * * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here * * @param int $post_id Optional. The Post ID * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag. * @param array $args Optional. Overwrite the defaults * @return array List of post tags. */function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {	$post_id = (int) $post_id;	$defaults = array('fields' => 'all');	$args = wp_parse_args( $args, $defaults );	$tags = wp_get_object_terms($post_id, $taxonomy, $args);	return $tags;}/** * Retrieve number of recent posts. * * @since 1.0.0 * @uses $wpdb * * @param int $num Optional, default is 10. Number of posts to get. * @return array List of posts. */function wp_get_recent_posts($num = 10) {	global $wpdb;	// Set the limit clause, if we got a limit	$num = (int) $num;	if ( $num ) {		$limit = "LIMIT $num";	}	$sql = "SELECT * FROM $wpdb->posts WHERE post_type = 'post' AND post_status IN ( 'draft', 'publish', 'future', 'pending', 'private' ) ORDER BY post_date DESC $limit";	$result = $wpdb->get_results($sql, ARRAY_A);	return $result ? $result : array();}/** * Retrieve a single post, based on post ID. * * Has categories in 'post_category' property or key. Has tags in 'tags_input' * property or key. * * @since 1.0.0 * * @param int $postid Post ID. * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A. * @return object|array Post object or array holding post contents and information */function wp_get_single_post($postid = 0, $mode = OBJECT) {	$postid = (int) $postid;	$post = get_post($postid, $mode);	// Set categories and tags	if ( $mode == OBJECT ) {		$post->post_category = array();		if ( is_object_in_taxonomy($post->post_type, 'category') )			$post->post_category = wp_get_post_categories($postid);		$post->tags_input = array();		if ( is_object_in_taxonomy($post->post_type, 'post_tag') )			$post->tags_input = wp_get_post_tags($postid, array('fields' => 'names'));	} else {		$post['post_category'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'category') )			$post['post_category'] = wp_get_post_categories($postid);		$post['tags_input'] = array();		if ( is_object_in_taxonomy($post['post_type'], 'post_tag') )			$post['tags_input'] = wp_get_post_tags($postid, array('fields' => 'names'));	}	return $post;}/** * Insert a post. * * If the $postarr parameter has 'ID' set to a value, then post will be updated. * * You can set the post date manually, but setting the values for 'post_date' * and 'post_date_gmt' keys. You can close the comments or open the comments by * setting the value for 'comment_status' key. * * The defaults for the parameter $postarr are: *     'post_status'   - Default is 'draft'. *     'post_type'     - Default is 'post'. *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post. *     'ping_status'   - Default is the value in 'default_ping_status' option. *                       Whether the attachment can accept pings. *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Post content filtered. *     'post_excerpt'  - Post excerpt. * * @since 1.0.0 * @link http://core.trac.wordpress.org/ticket/9084 Bug report on 'wp_insert_post_data' filter. * @uses $wpdb * @uses $wp_rewrite * @uses $user_ID * * @uses do_action() Calls 'pre_post_update' on post ID if this is an update. * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update. * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before *                   returning. * * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database *                       update or insert. * @uses wp_transition_post_status() * * @param array $postarr Optional. Overrides defaults. * @param bool $wp_error Optional. Allow return of WP_Error on failure. * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success. */function wp_insert_post($postarr = array(), $wp_error = false) {	global $wpdb, $wp_rewrite, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0,		'post_content' => '', 'post_title' => '');	$postarr = wp_parse_args($postarr, $defaults);	$postarr = sanitize_post($postarr, 'db');	// export array as variables	extract($postarr, EXTR_SKIP);	// Are we updating or creating?	$update = false;	if ( !empty($ID) ) {		$update = true;		$previous_status = get_post_field('post_status', $ID);	} else {		$previous_status = 'new';	}	if ( ('' == $post_content) && ('' == $post_title) && ('' == $post_excerpt) && ('attachment' != $post_type) ) {		if ( $wp_error )			return new WP_Error('empty_content', __('Content, title, and excerpt are empty.'));		else			return 0;	}	if ( empty($post_type) )		$post_type = 'post';	if ( empty($post_status) )		$post_status = 'draft';	if ( !empty($post_category) )		$post_category = array_filter($post_category); // Filter out empty terms	// Make sure we set a valid category.	if ( empty($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	if ( empty($post_author) )		$post_author = $user_ID;	$post_ID = 0;	// Get the post ID and GUID	if ( $update ) {		$post_ID = (int) $ID;		$guid = get_post_field( 'guid', $post_ID );		$post_before = get_post($post_ID);	}	// Don't allow contributors to set to set the post slug for pending review posts	if ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) )		$post_name = '';	// Create a valid post name.  Drafts and pending posts are allowed to have an empty	// post name.	if ( empty($post_name) ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_name = sanitize_title($post_title);		else			$post_name = '';	} else {		$post_name = sanitize_title($post_name);	}	// If the post date is empty (due to having been new or a draft) and status is not 'draft' or 'pending', set date to now	if ( empty($post_date) || '0000-00-00 00:00:00' == $post_date )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) || '0000-00-00 00:00:00' == $post_date_gmt ) {		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )			$post_date_gmt = get_gmt_from_date($post_date);		else			$post_date_gmt = '0000-00-00 00:00:00';	}	if ( $update || '0000-00-00 00:00:00' == $post_date ) {		$post_modified     = current_time( 'mysql' );		$post_modified_gmt = current_time( 'mysql', 1 );	} else {		$post_modified     = $post_date;		$post_modified_gmt = $post_date_gmt;	}	if ( 'publish' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) )			$post_status = 'future';	} elseif( 'future' == $post_status ) {		$now = gmdate('Y-m-d H:i:59');		if ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) )			$post_status = 'publish';	}	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( ! isset($pinged) )		$pinged = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( !empty($post_ID) ) {		if ( $post_parent == $post_ID ) {			// Post can't be its own parent			$post_parent = 0;		} elseif ( !empty($post_parent) ) {			$parent_post = get_post($post_parent);			// Check for circular dependency			if ( isset( $parent_post->post_parent ) && $parent_post->post_parent == $post_ID )				$post_parent = 0;		}	}	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) || 'private' == $post_status )		$post_password = '';	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'guid' ) );	$data = apply_filters('wp_insert_post_data', $data, $postarr);	$data = stripslashes_deep( $data );	$where = array( 'ID' => $post_ID );	if ( $update ) {		do_action( 'pre_post_update', $post_ID );		if ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {			if ( $wp_error )				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);			else				return 0;		}	} else {		if ( isset($post_mime_type) )			$data['post_mime_type'] = stripslashes( $post_mime_type ); // This isn't in the update		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		if ( false === $wpdb->insert( $wpdb->posts, $data ) ) {			if ( $wp_error )				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);			else				return 0;		}		$post_ID = (int) $wpdb->insert_id;		// use the newly generated $post_ID		$where = array( 'ID' => $post_ID );	}	if ( empty($data['post_name']) && !in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {		$data['post_name'] = sanitize_title($data['post_title'], $post_ID);		$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );	}	if ( is_object_in_taxonomy($post_type, 'category') )		wp_set_post_categories( $post_ID, $post_category );	if ( isset( $tags_input ) && is_object_in_taxonomy($post_type, 'post_tag') )		wp_set_post_tags( $post_ID, $tags_input );	// new-style support for all custom taxonomies	if ( !empty($tax_input) ) {		foreach ( $tax_input as $taxonomy => $tags ) {			$taxonomy_obj = get_taxonomy($taxonomy);			if ( is_array($tags) ) // array = hierarchical, string = non-hierarchical.				$tags = array_filter($tags);			if ( current_user_can($taxonomy_obj->cap->assign_terms) )				wp_set_post_terms( $post_ID, $tags, $taxonomy );		}	}	$current_guid = get_post_field( 'guid', $post_ID );	if ( 'page' == $data['post_type'] )		clean_page_cache($post_ID);	else		clean_post_cache($post_ID);	// Set GUID	if ( !$update && '' == $current_guid )		$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );	$post = get_post($post_ID);	if ( !empty($page_template) && 'page' == $data['post_type'] ) {		$post->page_template = $page_template;		$page_templates = get_page_templates();		if ( 'default' != $page_template && !in_array($page_template, $page_templates) ) {			if ( $wp_error )				return new WP_Error('invalid_page_template', __('The page template is invalid.'));			else				return 0;		}		update_post_meta($post_ID, '_wp_page_template',  $page_template);	}	wp_transition_post_status($data['post_status'], $previous_status, $post);	if ( $update ) {		do_action('edit_post', $post_ID, $post);		$post_after = get_post($post_ID);		do_action( 'post_updated', $post_ID, $post_after, $post_before);	}	do_action('save_post', $post_ID, $post);	do_action('wp_insert_post', $post_ID, $post);	return $post_ID;}/** * Update a post with new post data. * * The date does not have to be set for drafts. You can set the date and it will * not be overridden. * * @since 1.0.0 * * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not. * @return int 0 on failure, Post ID on success. */function wp_update_post($postarr = array()) {	if ( is_object($postarr) ) {		// non-escaped post was passed		$postarr = get_object_vars($postarr);		$postarr = add_magic_quotes($postarr);	}	// First, get all of the original fields	$post = wp_get_single_post($postarr['ID'], ARRAY_A);	// Escape data pulled from DB.	$post = add_magic_quotes($post);	// Passed post category list overwrites existing category list if not empty.	if ( isset($postarr['post_category']) && is_array($postarr['post_category'])			 && 0 != count($postarr['post_category']) )		$post_cats = $postarr['post_category'];	else		$post_cats = $post['post_category'];	// Drafts shouldn't be assigned a date unless explicitly done so by the user	if ( in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )		$clear_date = true;	else		$clear_date = false;	// Merge old and new fields with new fields overwriting old ones.	$postarr = array_merge($post, $postarr);	$postarr['post_category'] = $post_cats;	if ( $clear_date ) {		$postarr['post_date'] = current_time('mysql');		$postarr['post_date_gmt'] = '';	}	if ($postarr['post_type'] == 'attachment')		return wp_insert_attachment($postarr);	return wp_insert_post($postarr);}/** * Publish a post by transitioning the post status. * * @since 2.1.0 * @uses $wpdb * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data. * * @param int $post_id Post ID. * @return null */function wp_publish_post($post_id) {	global $wpdb;	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'publish' == $post->post_status )		return;	$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post_id ) );	$old_status = $post->post_status;	$post->post_status = 'publish';	wp_transition_post_status('publish', $old_status, $post);	// Update counts for the post's terms.	foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {		$tt_ids = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'tt_ids'));		wp_update_term_count($tt_ids, $taxonomy);	}	do_action('edit_post', $post_id, $post);	do_action('save_post', $post_id, $post);	do_action('wp_insert_post', $post_id, $post);}/** * Publish future post and make sure post ID has future post status. * * Invoked by cron 'publish_future_post' event. This safeguard prevents cron * from publishing drafts, etc. * * @since 2.5.0 * * @param int $post_id Post ID. * @return null Nothing is returned. Which can mean that no action is required or post was published. */function check_and_publish_future_post($post_id) {	$post = get_post($post_id);	if ( empty($post) )		return;	if ( 'future' != $post->post_status )		return;	$time = strtotime( $post->post_date_gmt . ' GMT' );	if ( $time > time() ) { // Uh oh, someone jumped the gun!		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );		return;	}	return wp_publish_post($post_id);}/** * Computes a unique slug for the post, when given the desired slug and some post details. * * @global wpdb $wpdb * @global WP_Rewrite $wp_rewrite * @param string $slug the desired slug (post_name) * @param integer $post_ID * @param string $post_status no uniqueness checks are made if the post is still draft or pending * @param string $post_type * @param integer $post_parent * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) */function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) )		return $slug;	global $wpdb, $wp_rewrite;	$feeds = $wp_rewrite->feeds;	if ( ! is_array( $feeds ) )		$feeds = array();	$hierarchical_post_types = apply_filters( 'hierarchical_post_types', array( 'page' ) );	if ( 'attachment' == $post_type ) {		// Attachment slugs must be unique across all types.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {		// Page slugs must be unique within their own trees. Pages are in a separate		// namespace than posts so page slugs are allowed to overlap post slugs.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( '" . implode( "', '", esc_sql( $hierarchical_post_types ) ) . "' ) AND ID != %d AND post_parent = %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID, $post_parent ) );		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( '@^(page)?\d+$@', $slug ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	} else {		// Post slugs must be unique across all posts.		$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1";		$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );		if ( $post_name_check || in_array( $slug, $feeds ) ) {			$suffix = 2;			do {				$alt_post_name = substr( $slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";				$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );				$suffix++;			} while ( $post_name_check );			$slug = $alt_post_name;		}	}	return $slug;}/** * Adds tags to a post. * * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true. * * @package WordPress * @subpackage Post * @since 2.3.0 * * @param int $post_id Post ID * @param string $tags The tags to set for the post, separated by commas. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_add_post_tags($post_id = 0, $tags = '') {	return wp_set_post_tags($post_id, $tags, true);}/** * Set the tags for a post. * * @since 2.3.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);}/** * Set the terms for a post. * * @since 2.8.0 * @uses wp_set_object_terms() Sets the tags for the post. * * @param int $post_id Post ID. * @param string $tags The tags to set for the post, separated by commas. * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags. * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise */function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {	$post_id = (int) $post_id;	if ( !$post_id )		return false;	if ( empty($tags) )		$tags = array();	$tags = is_array($tags) ? $tags : explode( ',', trim($tags, " \n\t\r\0\x0B,") );	// Hierarchical taxonomies must always pass IDs rather than names so that children with the same	// names but different parents aren't confused.	if ( is_taxonomy_hierarchical( $taxonomy ) ) {		$tags = array_map( 'intval', $tags );		$tags = array_unique( $tags );	}	wp_set_object_terms($post_id, $tags, $taxonomy, $append);}/** * Set categories for a post. * * If the post categories parameter is not set, then the default category is * going used. * * @since 2.1.0 * * @param int $post_ID Post ID. * @param array $post_categories Optional. List of categories. * @return bool|mixed */function wp_set_post_categories($post_ID = 0, $post_categories = array()) {	$post_ID = (int) $post_ID;	$post_type = get_post_type( $post_ID );	$post_status = get_post_status( $post_ID );	// If $post_categories isn't already an array, make it one:	if ( !is_array($post_categories) || empty($post_categories) ) {		if ( 'post' == $post_type && 'auto-draft' != $post_status )			$post_categories = array( get_option('default_category') );		else			$post_categories = array();	} else if ( 1 == count($post_categories) && '' == reset($post_categories) ) {		return true;	}	if ( !empty($post_categories) ) {		$post_categories = array_map('intval', $post_categories);		$post_categories = array_unique($post_categories);	}	return wp_set_object_terms($post_ID, $post_categories, 'category');}/** * Transition the post status of a post. * * Calls hooks to transition post status. * * The first is 'transition_post_status' with new status, old status, and post data. * * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the * post data. * * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status * parameter and POSTTYPE is post_type post data. * * @since 2.3.0 * @link http://codex.wordpress.org/Post_Status_Transitions * * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and *  $post if there is a status change. * @uses do_action() Calls '${old_status}_to_$new_status' on $post if there is a status change. * @uses do_action() Calls '${new_status}_$post->post_type' on post ID and $post. * * @param string $new_status Transition to this post status. * @param string $old_status Previous post status. * @param object $post Post data. */function wp_transition_post_status($new_status, $old_status, $post) {	do_action('transition_post_status', $new_status, $old_status, $post);	do_action("${old_status}_to_$new_status", $post);	do_action("${new_status}_$post->post_type", $post->ID, $post);}//// Trackback and ping functions///** * Add a URL to those already pung. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @param string $uri Ping URI. * @return int How many rows were updated. */function add_ping($post_id, $uri) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung[] = $uri;	$new = implode("\n", $pung);	$new = apply_filters('add_ping', $new);	// expected_slashed ($new)	$new = stripslashes($new);	return $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post_id ) );}/** * Retrieve enclosures already enclosed for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array List of enclosures */function get_enclosed($post_id) {	$custom_fields = get_post_custom( $post_id );	$pung = array();	if ( !is_array( $custom_fields ) )		return $pung;	foreach ( $custom_fields as $key => $val ) {		if ( 'enclosure' != $key || !is_array( $val ) )			continue;		foreach( $val as $enc ) {			$enclosure = split( "\n", $enc );			$pung[] = trim( $enclosure[ 0 ] );		}	}	$pung = apply_filters('get_enclosed', $pung);	return $pung;}/** * Retrieve URLs already pinged for a post. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID. * @return array */function get_pung($post_id) {	global $wpdb;	$pung = $wpdb->get_var( $wpdb->prepare( "SELECT pinged FROM $wpdb->posts WHERE ID = %d", $post_id ));	$pung = trim($pung);	$pung = preg_split('/\s/', $pung);	$pung = apply_filters('get_pung', $pung);	return $pung;}/** * Retrieve URLs that need to be pinged. * * @since 1.5.0 * @uses $wpdb * * @param int $post_id Post ID * @return array */function get_to_ping($post_id) {	global $wpdb;	$to_ping = $wpdb->get_var( $wpdb->prepare( "SELECT to_ping FROM $wpdb->posts WHERE ID = %d", $post_id ));	$to_ping = trim($to_ping);	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);	$to_ping = apply_filters('get_to_ping',  $to_ping);	return $to_ping;}/** * Do trackbacks for a list of URLs. * * @since 1.0.0 * * @param string $tb_list Comma separated list of URLs * @param int $post_id Post ID */function trackback_url_list($tb_list, $post_id) {	if ( ! empty( $tb_list ) ) {		// get post data		$postdata = wp_get_single_post($post_id, ARRAY_A);		// import postdata as variables		extract($postdata, EXTR_SKIP);		// form an excerpt		$excerpt = strip_tags($post_excerpt ? $post_excerpt : $post_content);		if (strlen($excerpt) > 255) {			$excerpt = substr($excerpt,0,252) . '...';		}		$trackback_urls = explode(',', $tb_list);		foreach( (array) $trackback_urls as $tb_url) {			$tb_url = trim($tb_url);			trackback($tb_url, stripslashes($post_title), $excerpt, $post_id);		}	}}//// Page functions///** * Get a list of page IDs. * * @since 2.0.0 * @uses $wpdb * * @return array List of page IDs. */function get_all_page_ids() {	global $wpdb;	if ( ! $page_ids = wp_cache_get('all_page_ids', 'posts') ) {		$page_ids = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'page'");		wp_cache_add('all_page_ids', $page_ids, 'posts');	}	return $page_ids;}/** * Retrieves page data given a page ID or page object. * * @since 1.5.1 * * @param mixed $page Page object or page ID. Passed by reference. * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter How the return value should be filtered. * @return mixed Page data. */function &get_page(&$page, $output = OBJECT, $filter = 'raw') {	$p = get_post($page, $output, $filter);	return $p;}/** * Retrieves a page given its path. * * @since 2.1.0 * @uses $wpdb * * @param string $page_path Page path * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed Null when complete. */function get_page_by_path($page_path, $output = OBJECT, $post_type = 'page') {	global $wpdb;	$page_path = rawurlencode(urldecode($page_path));	$page_path = str_replace('%2F', '/', $page_path);	$page_path = str_replace('%20', ' ', $page_path);	$page_paths = '/' . trim($page_path, '/');	$leaf_path  = sanitize_title(basename($page_paths));	$page_paths = explode('/', $page_paths);	$full_path = '';	foreach ( (array) $page_paths as $pathdir )		$full_path .= ( $pathdir != '' ? '/' : '' ) . sanitize_title($pathdir);	$pages = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_name = %s AND (post_type = %s OR post_type = 'attachment')", $leaf_path, $post_type ));	if ( empty($pages) )		return null;	foreach ( $pages as $page ) {		$path = '/' . $leaf_path;		$curpage = $page;		while ( $curpage->post_parent != 0 ) {			$curpage = $wpdb->get_row( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE ID = %d and post_type = %s", $curpage->post_parent, $post_type ));			$path = '/' . $curpage->post_name . $path;		}		if ( $path == $full_path )			return get_page($page->ID, $output, $post_type);	}	return null;}/** * Retrieve a page given its title. * * @since 2.1.0 * @uses $wpdb * * @param string $page_title Page title * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT. * @param string $post_type Optional. Post type. Default page. * @return mixed */function get_page_by_title($page_title, $output = OBJECT, $post_type = 'page' ) {	global $wpdb;	$page = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type= %s", $page_title, $post_type ) );	if ( $page )		return get_page($page, $output);	return null;}/** * Retrieve child pages from list of pages matching page ID. * * Matches against the pages parameter against the page ID. Also matches all * children for the same to retrieve all children of a page. Does not make any * SQL queries to get the children. * * @since 1.5.1 * * @param int $page_id Page ID. * @param array $pages List of pages' objects. * @return array */function &get_page_children($page_id, $pages) {	$page_list = array();	foreach ( (array) $pages as $page ) {		if ( $page->post_parent == $page_id ) {			$page_list[] = $page;			if ( $children = get_page_children($page->ID, $pages) )				$page_list = array_merge($page_list, $children);		}	}	return $page_list;}/** * Order the pages with children under parents in a flat list. * * It uses auxiliary structure to hold parent-children relationships and * runs in O(N) complexity * * @since 2.0.0 * * @param array $posts Posts array. * @param int $parent Parent page ID. * @return array A list arranged by hierarchy. Children immediately follow their parents. */function &get_page_hierarchy( &$pages, $page_id = 0 ) {	if ( empty( $pages ) ) {		$result = array();		return $result;	}	$children = array();	foreach ( (array) $pages as $p ) {		$parent_id = intval( $p->post_parent );		$children[ $parent_id ][] = $p;	 }	 $result = array();	 _page_traverse_name( $page_id, $children, $result );	return $result;}/** * function to traverse and return all the nested children post names of a root page. * $children contains parent-chilren relations * */function _page_traverse_name( $page_id, &$children, &$result ){	if ( isset( $children[ $page_id ] ) ){		foreach( (array)$children[ $page_id ] as $child ) {			$result[ $child->ID ] = $child->post_name;			_page_traverse_name( $child->ID, $children, $result );		}	}}/** * Builds URI for a page. * * Sub pages will be in the "directory" under the parent page post name. * * @since 1.5.0 * * @param mixed $page Page object or page ID. * @return string Page URI. */function get_page_uri($page) {	if ( ! is_object($page) )		$page = get_page($page);	$uri = $page->post_name;	// A page cannot be it's own parent.	if ( $page->post_parent == $page->ID )		return $uri;	while ($page->post_parent != 0) {		$page = get_page($page->post_parent);		$uri = $page->post_name . "/" . $uri;	}	return $uri;}/** * Retrieve a list of pages. * * The defaults that can be overridden are the following: 'child_of', * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude', * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'. * * @since 1.5.0 * @uses $wpdb * * @param mixed $args Optional. Array or string of options that overrides defaults. * @return array List of pages matching defaults or $args */function &get_pages($args = '') {	global $wpdb;	$defaults = array(		'child_of' => 0, 'sort_order' => 'ASC',		'sort_column' => 'post_title', 'hierarchical' => 1,		'exclude' => array(), 'include' => array(),		'meta_key' => '', 'meta_value' => '',		'authors' => '', 'parent' => -1, 'exclude_tree' => '',		'number' => '', 'offset' => 0,		'post_type' => 'page', 'post_status' => 'publish',	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$number = (int) $number;	$offset = (int) $offset;	// Make sure the post type is hierarchical	$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );	if ( !in_array( $post_type, $hierarchical_post_types ) )		return false;	// Make sure we have a valid post status	if ( !in_array($post_status, get_post_stati()) )		return false;	$cache = array();	$key = md5( serialize( compact(array_keys($defaults)) ) );	if ( $cache = wp_cache_get( 'get_pages', 'posts' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			$pages = apply_filters('get_pages', $cache[ $key ], $r );			return $pages;		}	}	if ( !is_array($cache) )		$cache = array();	$inclusions = '';	if ( !empty($include) ) {		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include		$parent = -1;		$exclude = '';		$meta_key = '';		$meta_value = '';		$hierarchical = false;		$incpages = wp_parse_id_list( $include );		if ( ! empty( $incpages ) ) {			foreach ( $incpages as $incpage ) {				if (empty($inclusions))					$inclusions = $wpdb->prepare(' AND ( ID = %d ', $incpage);				else					$inclusions .= $wpdb->prepare(' OR ID = %d ', $incpage);			}		}	}	if (!empty($inclusions))		$inclusions .= ')';	$exclusions = '';	if ( !empty($exclude) ) {		$expages = wp_parse_id_list( $exclude );		if ( ! empty( $expages ) ) {			foreach ( $expages as $expage ) {				if (empty($exclusions))					$exclusions = $wpdb->prepare(' AND ( ID <> %d ', $expage);				else					$exclusions .= $wpdb->prepare(' AND ID <> %d ', $expage);			}		}	}	if (!empty($exclusions))		$exclusions .= ')';	$author_query = '';	if (!empty($authors)) {		$post_authors = preg_split('/[\s,]+/',$authors);		if ( ! empty( $post_authors ) ) {			foreach ( $post_authors as $post_author ) {				//Do we have an author id or an author login?				if ( 0 == intval($post_author) ) {					$post_author = get_userdatabylogin($post_author);					if ( empty($post_author) )						continue;					if ( empty($post_author->ID) )						continue;					$post_author = $post_author->ID;				}				if ( '' == $author_query )					$author_query = $wpdb->prepare(' post_author = %d ', $post_author);				else					$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);			}			if ( '' != $author_query )				$author_query = " AND ($author_query)";		}	}	$join = '';	$where = "$exclusions $inclusions ";	if ( ! empty( $meta_key ) || ! empty( $meta_value ) ) {		$join = " LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )";		// meta_key and meta_value might be slashed		$meta_key = stripslashes($meta_key);		$meta_value = stripslashes($meta_value);		if ( ! empty( $meta_key ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_key = %s", $meta_key);		if ( ! empty( $meta_value ) )			$where .= $wpdb->prepare(" AND $wpdb->postmeta.meta_value = %s", $meta_value);	}	if ( $parent >= 0 )		$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);	$where_post_type = $wpdb->prepare( "post_type = '%s' AND post_status = '%s'", $post_type, $post_status );	$query = "SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where ";	$query .= $author_query;	$query .= " ORDER BY " . $sort_column . " " . $sort_order ;	if ( !empty($number) )		$query .= ' LIMIT ' . $offset . ',' . $number;	$pages = $wpdb->get_results($query);	if ( empty($pages) ) {		$pages = apply_filters('get_pages', array(), $r);		return $pages;	}	// Sanitize before caching so it'll only get done once	$num_pages = count($pages);	for ($i = 0; $i < $num_pages; $i++) {		$pages[$i] = sanitize_post($pages[$i], 'raw');	}	// Update cache.	update_page_cache($pages);	if ( $child_of || $hierarchical )		$pages = & get_page_children($child_of, $pages);	if ( !empty($exclude_tree) ) {		$exclude = (int) $exclude_tree;		$children = get_page_children($exclude, $pages);		$excludes = array();		foreach ( $children as $child )			$excludes[] = $child->ID;		$excludes[] = $exclude;		$num_pages = count($pages);		for ( $i = 0; $i < $num_pages; $i++ ) {			if ( in_array($pages[$i]->ID, $excludes) )				unset($pages[$i]);		}	}	$cache[ $key ] = $pages;	wp_cache_set( 'get_pages', $cache, 'posts' );	$pages = apply_filters('get_pages', $pages, $r);	return $pages;}//// Attachment functions///** * Check if the attachment URI is local one and is really an attachment. * * @since 2.0.0 * * @param string $url URL to check * @return bool True on success, false on failure. */function is_local_attachment($url) {	if (strpos($url, home_url()) === false)		return false;	if (strpos($url, home_url('/?attachment_id=')) !== false)		return true;	if ( $id = url_to_postid($url) ) {		$post = & get_post($id);		if ( 'attachment' == $post->post_type )			return true;	}	return false;}/** * Insert an attachment. * * If you set the 'ID' in the $object parameter, it will mean that you are * updating and attempt to update the attachment. You can also set the * attachment name or title by setting the key 'post_name' or 'post_title'. * * You can set the dates for the attachment manually by setting the 'post_date' * and 'post_date_gmt' keys' values. * * By default, the comments will use the default settings for whether the * comments are allowed. You can close them manually or keep them open by * setting the value for the 'comment_status' key. * * The $object parameter can have the following: *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post. *     'post_type'     - Default is 'post', will be set to attachment. Can not override. *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment. *     'ping_status'   - Default is the value in default ping status option. Whether the attachment *                       can accept pings. *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs *                       to, if any. *     'menu_order'    - Default is 0. The order it is displayed. *     'to_ping'       - Whether to ping. *     'pinged'        - Default is empty string. *     'post_password' - Default is empty string. The password to access the attachment. *     'guid'          - Global Unique ID for referencing the attachment. *     'post_content_filtered' - Attachment post content filtered. *     'post_excerpt'  - Attachment excerpt. * * @since 2.0.0 * @uses $wpdb * @uses $user_ID * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update. * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update. * * @param string|array $object Arguments to override defaults. * @param string $file Optional filename. * @param int $post_parent Parent post ID. * @return int Attachment ID. */function wp_insert_attachment($object, $file = false, $parent = 0) {	global $wpdb, $user_ID;	$defaults = array('post_status' => 'draft', 'post_type' => 'post', 'post_author' => $user_ID,		'ping_status' => get_option('default_ping_status'), 'post_parent' => 0,		'menu_order' => 0, 'to_ping' =>  '', 'pinged' => '', 'post_password' => '',		'guid' => '', 'post_content_filtered' => '', 'post_excerpt' => '', 'import_id' => 0);	$object = wp_parse_args($object, $defaults);	if ( !empty($parent) )		$object['post_parent'] = $parent;	$object = sanitize_post($object, 'db');	// export array as variables	extract($object, EXTR_SKIP);	if ( empty($post_author) )		$post_author = $user_ID;	$post_type = 'attachment';	$post_status = 'inherit';	// Make sure we set a valid category.	if ( !isset($post_category) || 0 == count($post_category) || !is_array($post_category) ) {		// 'post' requires at least one category.		if ( 'post' == $post_type )			$post_category = array( get_option('default_category') );		else			$post_category = array();	}	// Are we updating or creating?	if ( !empty($ID) ) {		$update = true;		$post_ID = (int) $ID;	} else {		$update = false;		$post_ID = 0;	}	// Create a valid post name.	if ( empty($post_name) )		$post_name = sanitize_title($post_title);	else		$post_name = sanitize_title($post_name);	// expected_slashed ($post_name)	$post_name = wp_unique_post_slug($post_name, $post_ID, $post_status, $post_type, $post_parent);	if ( empty($post_date) )		$post_date = current_time('mysql');	if ( empty($post_date_gmt) )		$post_date_gmt = current_time('mysql', 1);	if ( empty($post_modified) )		$post_modified = $post_date;	if ( empty($post_modified_gmt) )		$post_modified_gmt = $post_date_gmt;	if ( empty($comment_status) ) {		if ( $update )			$comment_status = 'closed';		else			$comment_status = get_option('default_comment_status');	}	if ( empty($ping_status) )		$ping_status = get_option('default_ping_status');	if ( isset($to_ping) )		$to_ping = preg_replace('|\s+|', "\n", $to_ping);	else		$to_ping = '';	if ( isset($post_parent) )		$post_parent = (int) $post_parent;	else		$post_parent = 0;	if ( isset($menu_order) )		$menu_order = (int) $menu_order;	else		$menu_order = 0;	if ( !isset($post_password) )		$post_password = '';	if ( ! isset($pinged) )		$pinged = '';	// expected_slashed (everything!)	$data = compact( array( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' ) );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->posts, $data, array( 'ID' => $post_ID ) );	} else {		// If there is a suggested ID, use it if not already present		if ( !empty($import_id) ) {			$import_id = (int) $import_id;			if ( ! $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE ID = %d", $import_id) ) ) {				$data['ID'] = $import_id;			}		}		$wpdb->insert( $wpdb->posts, $data );		$post_ID = (int) $wpdb->insert_id;	}	if ( empty($post_name) ) {		$post_name = sanitize_title($post_title, $post_ID);		$wpdb->update( $wpdb->posts, compact("post_name"), array( 'ID' => $post_ID ) );	}	wp_set_post_categories($post_ID, $post_category);	if ( $file )		update_attached_file( $post_ID, $file );	clean_post_cache($post_ID);	if ( isset($post_parent) && $post_parent < 0 )		add_post_meta($post_ID, '_wp_attachment_temp_parent', $post_parent, true);	if ( $update) {		do_action('edit_attachment', $post_ID);	} else {		do_action('add_attachment', $post_ID);	}	return $post_ID;}/** * Trashes or deletes an attachment. * * When an attachment is permanently deleted, the file will also be removed. * Deletion removes all post meta fields, taxonomy, comments, etc. associated * with the attachment (except the main post). * * The attachment is moved to the trash instead of permanently deleted unless trash * for media is disabled, item is already in the trash, or $force_delete is true. * * @since 2.0.0 * @uses $wpdb * @uses do_action() Calls 'delete_attachment' hook on Attachment ID. * * @param int $postid Attachment ID. * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false. * @return mixed False on failure. Post data on success. */function wp_delete_attachment( $post_id, $force_delete = false ) {	global $wpdb;	if ( !$post = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID = %d", $post_id) ) )		return $post;	if ( 'attachment' != $post->post_type )		return false;	if ( !$force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' != $post->post_status )		return wp_trash_post( $post_id );	delete_post_meta($post_id, '_wp_trash_meta_status');	delete_post_meta($post_id, '_wp_trash_meta_time');	$meta = wp_get_attachment_metadata( $post_id );	$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );	$file = get_attached_file( $post_id );	if ( is_multisite() )		delete_transient( 'dirsize_cache' );	do_action('delete_attachment', $post_id);	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->postmeta WHERE meta_key = '_thumbnail_id' AND meta_value = %d", $post_id ));	$comment_ids = $wpdb->get_col( $wpdb->prepare( "SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d", $post_id ));	if ( ! empty( $comment_ids ) ) {		do_action( 'delete_comment', $comment_ids );		foreach ( $comment_ids as $comment_id )			wp_delete_comment( $comment_id, true );		do_action( 'deleted_comment', $comment_ids );	}	$post_meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d ", $post_id ));	if ( !empty($post_meta_ids) ) {		do_action( 'delete_postmeta', $post_meta_ids );		$in_post_meta_ids = "'" . implode("', '", $post_meta_ids) . "'";		$wpdb->query( "DELETE FROM $wpdb->postmeta WHERE meta_id IN($in_post_meta_ids)" );		do_action( 'deleted_postmeta', $post_meta_ids );	}	do_action( 'delete_post', $post_id );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->posts WHERE ID = %d", $post_id ));	do_action( 'deleted_post', $post_id );	$uploadpath = wp_upload_dir();	if ( ! empty($meta['thumb']) ) {		// Don't delete the thumb if another attachment uses it		if (! $wpdb->get_row( $wpdb->prepare( "SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d", '%' . $meta['thumb'] . '%', $post_id)) ) {			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);			$thumbfile = apply_filters('wp_delete_file', $thumbfile);			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );		}	}	// remove intermediate and backup images if there are any	foreach ( get_intermediate_image_sizes() as $size ) {		if ( $intermediate = image_get_intermediate_size($post_id, $size) ) {			$intermediate_file = apply_filters('wp_delete_file', $intermediate['path']);			@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );		}	}	if ( is_array($backup_sizes) ) {		foreach ( $backup_sizes as $size ) {			$del_file = path_join( dirname($meta['file']), $size['file'] );			$del_file = apply_filters('wp_delete_file', $del_file);            @ unlink( path_join($uploadpath['basedir'], $del_file) );		}	}	$file = apply_filters('wp_delete_file', $file);	if ( ! empty($file) )		@ unlink($file);	clean_post_cache($post_id);	return $post;}/** * Retrieve attachment meta field for attachment ID. * * @since 2.1.0 * * @param int $post_id Attachment ID * @param bool $unfiltered Optional, default is false. If true, filters are not run. * @return string|bool Attachment meta field. False on failure. */function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );	if ( $unfiltered )		return $data;	return apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );}/** * Update metadata for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @param array $data Attachment data. * @return int */function wp_update_attachment_metadata( $post_id, $data ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID );	return update_post_meta( $post->ID, '_wp_attachment_metadata', $data);}/** * Retrieve the URL for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return string */function wp_get_attachment_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	$url = '';	if ( $file = get_post_meta( $post->ID, '_wp_attached_file', true) ) { //Get attached file		if ( ($uploads = wp_upload_dir()) && false === $uploads['error'] ) { //Get upload directory			if ( 0 === strpos($file, $uploads['basedir']) ) //Check that the upload base exists in the file location				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file); //replace file location with url location            elseif ( false !== strpos($file, 'wp-content/uploads') )                $url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );            else                $url = $uploads['baseurl'] . "/$file"; //Its a newly uploaded file, therefor $file is relative to the basedir.		}	}	if ( empty($url) ) //If any of the above options failed, Fallback on the GUID as used pre-2.7, not recomended to rely upon this.		$url = get_the_guid( $post->ID );	if ( 'attachment' != $post->post_type || empty($url) )		return false;	return apply_filters( 'wp_get_attachment_url', $url, $post->ID );}/** * Retrieve thumbnail for an attachment. * * @since 2.1.0 * * @param int $post_id Attachment ID. * @return mixed False on failure. Thumbnail file path on success. */function wp_get_attachment_thumb_file( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )		return false;	$file = get_attached_file( $post->ID );	if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) )		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );	return false;}/** * Retrieve URL for an attachment thumbnail. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return string|bool False on failure. Thumbnail URL on success. */function wp_get_attachment_thumb_url( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$url = wp_get_attachment_url( $post->ID ) )		return false;	$sized = image_downsize( $post_id, 'thumbnail' );	if ( $sized )		return $sized[0];	if ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )		return false;	$url = str_replace(basename($url), basename($thumb), $url);	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );}/** * Check if the attachment is an image. * * @since 2.1.0 * * @param int $post_id Attachment ID * @return bool */function wp_attachment_is_image( $post_id = 0 ) {	$post_id = (int) $post_id;	if ( !$post =& get_post( $post_id ) )		return false;	if ( !$file = get_attached_file( $post->ID ) )		return false;	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;	$image_exts = array('jpg', 'jpeg', 'gif', 'png');	if ( 'image/' == substr($post->post_mime_type, 0, 6) || $ext && 'import' == $post->post_mime_type && in_array($ext, $image_exts) )		return true;	return false;}/** * Retrieve the icon for a MIME type. * * @since 2.1.0 * * @param string $mime MIME type * @return string|bool */function wp_mime_type_icon( $mime = 0 ) {	if ( !is_numeric($mime) )		$icon = wp_cache_get("mime_type_icon_$mime");	if ( empty($icon) ) {		$post_id = 0;		$post_mimes = array();		if ( is_numeric($mime) ) {			$mime = (int) $mime;			if ( $post =& get_post( $mime ) ) {				$post_id = (int) $post->ID;				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post->guid);				if ( !empty($ext) ) {					$post_mimes[] = $ext;					if ( $ext_type = wp_ext2type( $ext ) )						$post_mimes[] = $ext_type;				}				$mime = $post->post_mime_type;			} else {				$mime = 0;			}		} else {			$post_mimes[] = $mime;		}		$icon_files = wp_cache_get('icon_files');		if ( !is_array($icon_files) ) {			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url('images/crystal') );			$dirs = apply_filters( 'icon_dirs', array($icon_dir => $icon_dir_uri) );			$icon_files = array();			while ( $dirs ) {				$dir = array_shift($keys = array_keys($dirs));				$uri = array_shift($dirs);				if ( $dh = opendir($dir) ) {					while ( false !== $file = readdir($dh) ) {						$file = basename($file);						if ( substr($file, 0, 1) == '.' )							continue;						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {							if ( is_dir("$dir/$file") )								$dirs["$dir/$file"] = "$uri/$file";							continue;						}						$icon_files["$dir/$file"] = "$uri/$file";					}					closedir($dh);				}			}			wp_cache_set('icon_files', $icon_files, 600);		}		// Icon basename - extension = MIME wildcard		foreach ( $icon_files as $file => $uri )			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];		if ( ! empty($mime) ) {			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);			$post_mimes[] = str_replace('/', '_', $mime);		}		$matches = wp_match_mime_types(array_keys($types), $post_mimes);		$matches['default'] = array('default');		foreach ( $matches as $match => $wilds ) {			if ( isset($types[$wilds[0]])) {				$icon = $types[$wilds[0]];				if ( !is_numeric($mime) )					wp_cache_set("mime_type_icon_$mime", $icon);				break;			}		}	}	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id ); // Last arg is 0 if function pass mime type.}/** * Checked for changed slugs for published posts and save old slug. * * The function is used along with form POST data. It checks for the wp-old-slug * POST field. Will only be concerned with published posts and the slug actually * changing. * * If the slug was changed and not already part of the old slugs then it will be * added to the post meta field ('_wp_old_slug') for storing old slugs for that * post. * * The most logically usage of this function is redirecting changed posts, so * that those that linked to an changed post will be redirected to the new post. * * @since 2.1.0 * * @param int $post_id Post ID. * @return int Same as $post_id */function wp_check_for_changed_slugs($post_id, $post, $post_before) {	// dont bother if it hasnt changed	if ( $post->post_name == $post_before->post_name )		return;	// we're only concerned with published posts	if ( $post->post_status != 'publish' || $post->post_type != 'post' )		return;	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');	// if we haven't added this old slug before, add it now	if ( !in_array($post_before->post_name, $old_slugs) )		add_post_meta($post_id, '_wp_old_slug', $post_before->post_name);	// if the new slug was used previously, delete it from the list	if ( in_array($post->post_name, $old_slugs) )		delete_post_meta($post_id, '_wp_old_slug', $post->post_name);}/** * Retrieve the private post SQL based on capability. * * This function provides a standardized way to appropriately select on the * post_status of posts/pages. The function will return a piece of SQL code that * can be added to a WHERE clause; this SQL is constructed to allow all * published posts, and all private posts to which the user has access. * * It also allows plugins that define their own post type to control the cap by * using the hook 'pub_priv_sql_capability'. The plugin is expected to return * the capability the user must have to read the private post type. * * @since 2.2.0 * * @uses $user_ID * @uses apply_filters() Call 'pub_priv_sql_capability' filter for plugins with different post types. * * @param string $post_type currently only supports 'post' or 'page'. * @return string SQL code that can be added to a where clause. */function get_private_posts_cap_sql($post_type) {	return get_posts_by_author_sql($post_type, FALSE);}/** * Retrieve the post SQL based on capability, author, and type. * * See above for full description. * * @since 3.0.0 * @param string $post_type currently only supports 'post' or 'page'. * @param bool $full Optional.  Returns a full WHERE statement instead of just an 'andalso' term. * @param int $post_author Optional.  Query posts having a single author ID. * @return string SQL WHERE code that can be added to a query. */function get_posts_by_author_sql($post_type, $full = TRUE, $post_author = NULL) {	global $user_ID, $wpdb;	// Private posts	if ($post_type == 'post') {		$cap = 'read_private_posts';	// Private pages	} elseif ($post_type == 'page') {		$cap = 'read_private_pages';	// Dunno what it is, maybe plugins have their own post type?	} else {		$cap = '';		$cap = apply_filters('pub_priv_sql_capability', $cap);		if (empty($cap)) {			// We don't know what it is, filters don't change anything,			// so set the SQL up to return nothing.			return ' 1 = 0 ';		}	}	if ($full) {		if (is_null($post_author)) {			$sql = $wpdb->prepare('WHERE post_type = %s AND ', $post_type);		} else {			$sql = $wpdb->prepare('WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type);		}	} else {		$sql = '';	}	$sql .= "(post_status = 'publish'";	if (current_user_can($cap)) {		// Does the user have the capability to view private posts? Guess so.		$sql .= " OR post_status = 'private'";	} elseif (is_user_logged_in()) {		// Users can view their own private posts.		$id = (int) $user_ID;		if (is_null($post_author) || !$full) {			$sql .= " OR post_status = 'private' AND post_author = $id";		} elseif ($id == (int)$post_author) {			$sql .= " OR post_status = 'private'";		} // else none	} // else none	$sql .= ')';	return $sql;}/** * Retrieve the date that the last post was published. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is the date when the last post was posted. The * 'gmt' is when the last post was posted in GMT formatted date. * * @since 0.71 * * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostdate' filter * * @global mixed $cache_lastpostdate Stores the last post date * @global mixed $pagenow The current page being viewed * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date of the last post. */function get_lastpostdate($timezone = 'server') {	global $cache_lastpostdate, $wpdb, $blog_id;	$add_seconds_server = date('Z');	if ( !isset($cache_lastpostdate[$blog_id][$timezone]) ) {		switch(strtolower($timezone)) {			case 'gmt':				$lastpostdate = $wpdb->get_var("SELECT post_date_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'blog':				$lastpostdate = $wpdb->get_var("SELECT post_date FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;			case 'server':				$lastpostdate = $wpdb->get_var("SELECT DATE_ADD(post_date_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_date_gmt DESC LIMIT 1");				break;		}		$cache_lastpostdate[$blog_id][$timezone] = $lastpostdate;	} else {		$lastpostdate = $cache_lastpostdate[$blog_id][$timezone];	}	return apply_filters( 'get_lastpostdate', $lastpostdate, $timezone );}/** * Retrieve last post modified date depending on timezone. * * The server timezone is the default and is the difference between GMT and * server time. The 'blog' value is just when the last post was modified. The * 'gmt' is when the last post was modified in GMT time. * * @since 1.2.0 * @uses $wpdb * @uses $blog_id * @uses apply_filters() Calls 'get_lastpostmodified' filter * * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'. * @return string The date the post was last modified. */function get_lastpostmodified($timezone = 'server') {	global $wpdb;	$add_seconds_server = date('Z');	$timezone = strtolower( $timezone );	$lastpostmodified = wp_cache_get( "lastpostmodified:$timezone", 'timeinfo' );	if ( $lastpostmodified )		return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );	switch ( strtolower($timezone) ) {		case 'gmt':			$lastpostmodified = $wpdb->get_var("SELECT post_modified_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'blog':			$lastpostmodified = $wpdb->get_var("SELECT post_modified FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;		case 'server':			$lastpostmodified = $wpdb->get_var("SELECT DATE_ADD(post_modified_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type = 'post' ORDER BY post_modified_gmt DESC LIMIT 1");			break;	}	$lastpostdate = get_lastpostdate($timezone);	if ( $lastpostdate > $lastpostmodified )		$lastpostmodified = $lastpostdate;	if ( $lastpostmodified )		wp_cache_set( "lastpostmodified:$timezone", $lastpostmodified, 'timeinfo' );	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );}/** * Updates posts in cache. * * @usedby update_page_cache() Aliased by this function. * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $posts Array of post objects */function update_post_cache(&$posts) {	if ( !$posts )		return;	foreach ( $posts as $post )		wp_cache_add($post->ID, $post, 'posts');}/** * Will clean the post in the cache. * * Cleaning means delete from the cache of the post. Will call to clean the term * object cache associated with the post ID. * * clean_post_cache() will call itself recursively for each child post. * * This function not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any). * * @param int $id The Post ID in the cache to clean */function clean_post_cache($id) {	global $_wp_suspend_cache_invalidation, $wpdb;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	clean_object_term_cache($id, 'post');	wp_cache_delete( 'wp_get_archives', 'general' );	do_action('clean_post_cache', $id);	if ( $children = $wpdb->get_col( $wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE post_parent = %d", $id) ) ) {		foreach( $children as $cid )			clean_post_cache( $cid );	}	if ( is_multisite() )		wp_cache_delete( $wpdb->blogid . '-' . $id, 'global-posts' );}/** * Alias of update_post_cache(). * * @see update_post_cache() Posts and pages are the same, alias is intentional * * @package WordPress * @subpackage Cache * @since 1.5.1 * * @param array $pages list of page objects */function update_page_cache(&$pages) {	update_post_cache($pages);}/** * Will clean the page in the cache. * * Clean (read: delete) page from cache that matches $id. Will also clean cache * associated with 'all_page_ids' and 'get_pages'. * * @package WordPress * @subpackage Cache * @since 2.0.0 * * @uses do_action() Will call the 'clean_page_cache' hook action. * * @param int $id Page ID to clean */function clean_page_cache($id) {	clean_post_cache($id);	wp_cache_delete( 'all_page_ids', 'posts' );	wp_cache_delete( 'get_pages', 'posts' );	do_action('clean_page_cache', $id);}/** * Call major cache updating functions for list of Post objects. * * @package WordPress * @subpackage Cache * @since 1.5.0 * * @uses $wpdb * @uses update_post_cache() * @uses update_object_term_cache() * @uses update_postmeta_cache() * * @param array $posts Array of Post objects * @param string $post_type The post type of the posts in $posts. Default is 'post'. * @param bool $update_term_cache Whether to update the term cache. Default is true. * @param bool $update_meta_cache Whether to update the meta cache. Default is true. */function update_post_caches(&$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true) {	// No point in doing all this work if we didn't match any posts.	if ( !$posts )		return;	update_post_cache($posts);	$post_ids = array();	foreach ( $posts as $post )		$post_ids[] = $post->ID;	if ( empty($post_type) )		$post_type = 'post';	if ( !is_array($post_type) && 'any' != $post_type && $update_term_cache )		update_object_term_cache($post_ids, $post_type);	if ( $update_meta_cache )		update_postmeta_cache($post_ids);}/** * Updates metadata cache for list of post IDs. * * Performs SQL query to retrieve the metadata for the post IDs and updates the * metadata cache for the posts. Therefore, the functions, which call this * function, do not need to perform SQL queries on their own. * * @package WordPress * @subpackage Cache * @since 2.1.0 * * @uses $wpdb * * @param array $post_ids List of post IDs. * @return bool|array Returns false if there is nothing to update or an array of metadata. */function update_postmeta_cache($post_ids) {	return update_meta_cache('post', $post_ids);}/** * Will clean the attachment in the cache. * * Cleaning means delete from the cache. Optionaly will clean the term * object cache associated with the attachment ID. * * This function will not run if $_wp_suspend_cache_invalidation is not empty. See * wp_suspend_cache_invalidation(). * * @package WordPress * @subpackage Cache * @since 3.0.0 * * @uses do_action() Calls 'clean_attachment_cache' on $id. * * @param int $id The attachment ID in the cache to clean * @param bool $clean_terms optional. Whether to clean terms cache */function clean_attachment_cache($id, $clean_terms = false) {	global $_wp_suspend_cache_invalidation;	if ( !empty($_wp_suspend_cache_invalidation) )		return;	$id = (int) $id;	wp_cache_delete($id, 'posts');	wp_cache_delete($id, 'post_meta');	if ( $clean_terms )		clean_object_term_cache($id, 'attachment');	do_action('clean_attachment_cache', $id);}//// Hooks///** * Hook for managing future post transitions to published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call. * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID. * * @param string $new_status New post status * @param string $old_status Previous post status * @param object $post Object type containing the post information */function _transition_post_status($new_status, $old_status, $post) {	global $wpdb;	if ( $old_status != 'publish' && $new_status == 'publish' ) {		// Reset GUID if transitioning to publish and it is empty		if ( '' == get_the_guid($post->ID) )			$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );		do_action('private_to_published', $post->ID);  // Deprecated, use private_to_publish	}	// If published posts changed clear the lastpostmodified cache	if ( 'publish' == $new_status || 'publish' == $old_status) {		wp_cache_delete( 'lastpostmodified:server', 'timeinfo' );		wp_cache_delete( 'lastpostmodified:gmt',    'timeinfo' );		wp_cache_delete( 'lastpostmodified:blog',   'timeinfo' );	}	// Always clears the hook in case the post status bounced from future to draft.	wp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );}/** * Hook used to schedule publication for a post marked for the future. * * The $post properties used and must exist are 'ID' and 'post_date_gmt'. * * @since 2.3.0 * @access private * * @param int $deprecated Not used. Can be set to null. Never implemented. *   Not marked as deprecated with _deprecated_argument() as it conflicts with *   wp_transition_post_status() and the default filter for _future_post_hook(). * @param object $post Object type containing the post information */function _future_post_hook( $deprecated = '', $post ) {	wp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );	wp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );}/** * Hook to schedule pings and enclosures when a post is published. * * @since 2.3.0 * @access private * @uses $wpdb * @uses XMLRPC_REQUEST and APP_REQUEST constants. * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined. * @uses do_action() Calls 'app_publish_post' on post ID if APP_REQUEST is defined. * * @param int $post_id The ID in the database table of the post being published */function _publish_post_hook($post_id) {	global $wpdb;	if ( defined('XMLRPC_REQUEST') )		do_action('xmlrpc_publish_post', $post_id);	if ( defined('APP_REQUEST') )		do_action('app_publish_post', $post_id);	if ( defined('WP_IMPORTING') )		return;	$data = array( 'post_id' => $post_id, 'meta_value' => '1' );	if ( get_option('default_pingback_flag') ) {		$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_pingme' ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_pingme', 1 );	}	$wpdb->insert( $wpdb->postmeta, $data + array( 'meta_key' => '_encloseme' ) );	do_action( 'added_postmeta', $wpdb->insert_id, $post_id, '_encloseme', 1 );	wp_schedule_single_event(time(), 'do_pings');}/** * Hook used to prevent page/post cache and rewrite rules from staying dirty. * * Does two things. If the post is a page and has a template then it will * update/add that template to the meta. For both pages and posts, it will clean * the post cache to make sure that the cache updates to the changes done * recently. For pages, the rewrite rules of WordPress are flushed to allow for * any changes. * * The $post parameter, only uses 'post_type' property and 'page_template' * property. * * @since 2.3.0 * @access private * @uses $wp_rewrite Flushes Rewrite Rules. * * @param int $post_id The ID in the database table for the $post * @param object $post Object type containing the post information */function _save_post_hook($post_id, $post) {	if ( $post->post_type == 'page' ) {		clean_page_cache($post_id);		// Avoid flushing rules for every post during import.		if ( !defined('WP_IMPORTING') ) {			global $wp_rewrite;			$wp_rewrite->flush_rules(false);		}	} else {		clean_post_cache($post_id);	}}/** * Retrieve post ancestors and append to post ancestors property. * * Will only retrieve ancestors once, if property is already set, then nothing * will be done. If there is not a parent post, or post ID and post parent ID * are the same then nothing will be done. * * The parameter is passed by reference, so nothing needs to be returned. The * property will be updated and can be referenced after the function is * complete. The post parent will be an ancestor and the parent of the post * parent will be an ancestor. There will only be two ancestors at the most. * * @since unknown * @access private * @uses $wpdb * * @param object $_post Post data. * @return null When nothing needs to be done. */function _get_post_ancestors(&$_post) {	global $wpdb;	if ( isset($_post->ancestors) )		return;	$_post->ancestors = array();	if ( empty($_post->post_parent) || $_post->ID == $_post->post_parent )		return;	$id = $_post->ancestors[] = $_post->post_parent;	while ( $ancestor = $wpdb->get_var( $wpdb->prepare("SELECT `post_parent` FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id) ) ) {		if ( $id == $ancestor )			break;		$id = $_post->ancestors[] = $ancestor;	}}/** * Determines which fields of posts are to be saved in revisions. * * Does two things. If passed a post *array*, it will return a post array ready * to be insterted into the posts table as a post revision. Otherwise, returns * an array whose keys are the post fields to be saved for post revisions. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * @access private * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields. * * @param array $post Optional a post array to be processed for insertion as a post revision. * @param bool $autosave optional Is the revision an autosave? * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned. */function _wp_post_revision_fields( $post = null, $autosave = false ) {	static $fields = false;	if ( !$fields ) {		// Allow these to be versioned		$fields = array(			'post_title' => __( 'Title' ),			'post_content' => __( 'Content' ),			'post_excerpt' => __( 'Excerpt' ),		);		// Runs only once		$fields = apply_filters( '_wp_post_revision_fields', $fields );		// WP uses these internally either in versioning or elsewhere - they cannot be versioned		foreach ( array( 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', 'post_author' ) as $protect )			unset( $fields[$protect] );	}	if ( !is_array($post) )		return $fields;	$return = array();	foreach ( array_intersect( array_keys( $post ), array_keys( $fields ) ) as $field )		$return[$field] = $post[$field];	$return['post_parent']   = $post['ID'];	$return['post_status']   = 'inherit';	$return['post_type']     = 'revision';	$return['post_name']     = $autosave ? "$post[ID]-autosave" : "$post[ID]-revision";	$return['post_date']     = isset($post['post_modified']) ? $post['post_modified'] : '';	$return['post_date_gmt'] = isset($post['post_modified_gmt']) ? $post['post_modified_gmt'] : '';	return $return;}/** * Saves an already existing post as a post revision. * * Typically used immediately prior to post updates. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_put_post_revision() * * @param int $post_id The ID of the post to save as a revision. * @return mixed Null or 0 if error, new revision ID, if success. */function wp_save_post_revision( $post_id ) {	// We do autosaves manually with wp_create_post_autosave()	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )		return;	// WP_POST_REVISIONS = 0, false	if ( ! WP_POST_REVISIONS )		return;	if ( !$post = get_post( $post_id, ARRAY_A ) )		return;	if ( !post_type_supports($post['post_type'], 'revisions') )		return;	$return = _wp_put_post_revision( $post );	// WP_POST_REVISIONS = true (default), -1	if ( !is_numeric( WP_POST_REVISIONS ) || WP_POST_REVISIONS < 0 )		return $return;	// all revisions and (possibly) one autosave	$revisions = wp_get_post_revisions( $post_id, array( 'order' => 'ASC' ) );	// WP_POST_REVISIONS = (int) (# of autosaves to save)	$delete = count($revisions) - WP_POST_REVISIONS;	if ( $delete < 1 )		return $return;	$revisions = array_slice( $revisions, 0, $delete );	for ( $i = 0; isset($revisions[$i]); $i++ ) {		if ( false !== strpos( $revisions[$i]->post_name, 'autosave' ) )			continue;		wp_delete_post_revision( $revisions[$i]->ID );	}	return $return;}/** * Retrieve the autosaved data of the specified post. * * Returns a post object containing the information that was autosaved for the * specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int $post_id The post ID. * @return object|bool The autosaved data or false on failure or when no autosave exists. */function wp_get_post_autosave( $post_id ) {	if ( !$post = get_post( $post_id ) )		return false;	$q = array(		'name' => "{$post->ID}-autosave",		'post_parent' => $post->ID,		'post_type' => 'revision',		'post_status' => 'inherit'	);	// Use WP_Query so that the result gets cached	$autosave_query = new WP_Query;	add_action( 'parse_query', '_wp_get_post_autosave_hack' );	$autosave = $autosave_query->query( $q );	remove_action( 'parse_query', '_wp_get_post_autosave_hack' );	if ( $autosave && is_array($autosave) && is_object($autosave[0]) )		return $autosave[0];	return false;}/** * Internally used to hack WP_Query into submission. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param object $query WP_Query object */function _wp_get_post_autosave_hack( $query ) {	$query->is_single = false;}/** * Determines if the specified post is a revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of revision's parent otherwise. */function wp_is_post_revision( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	return (int) $post->post_parent;}/** * Determines if the specified post is an autosave. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @param int|object $post Post ID or post object. * @return bool|int False if not a revision, ID of autosave's parent otherwise */function wp_is_post_autosave( $post ) {	if ( !$post = wp_get_post_revision( $post ) )		return false;	if ( "{$post->post_parent}-autosave" !== $post->post_name )		return false;	return (int) $post->post_parent;}/** * Inserts post data into the posts table as a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_insert_post() * * @param int|object|array $post Post ID, post object OR post array. * @param bool $autosave Optional. Is the revision an autosave? * @return mixed Null or 0 if error, new revision ID if success. */function _wp_put_post_revision( $post = null, $autosave = false ) {	if ( is_object($post) )		$post = get_object_vars( $post );	elseif ( !is_array($post) )		$post = get_post($post, ARRAY_A);	if ( !$post || empty($post['ID']) )		return;	if ( isset($post['post_type']) && 'revision' == $post['post_type'] )		return new WP_Error( 'post_type', __( 'Cannot create a revision of a revision' ) );	$post = _wp_post_revision_fields( $post, $autosave );	$post = add_magic_quotes($post); //since data is from db	$revision_id = wp_insert_post( $post );	if ( is_wp_error($revision_id) )		return $revision_id;	if ( $revision_id )		do_action( '_wp_put_post_revision', $revision_id );	return $revision_id;}/** * Gets a post revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_post() * * @param int|object $post Post ID or post object * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N. * @param string $filter Optional sanitation filter.  @see sanitize_post() * @return mixed Null if error or post object if success */function &wp_get_post_revision(&$post, $output = OBJECT, $filter = 'raw') {	$null = null;	if ( !$revision = get_post( $post, OBJECT, $filter ) )		return $revision;	if ( 'revision' !== $revision->post_type )		return $null;	if ( $output == OBJECT ) {		return $revision;	} elseif ( $output == ARRAY_A ) {		$_revision = get_object_vars($revision);		return $_revision;	} elseif ( $output == ARRAY_N ) {		$_revision = array_values(get_object_vars($revision));		return $_revision;	}	return $revision;}/** * Restores a post to the specified revision. * * Can restore a past revision using all fields of the post revision, or only selected fields. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_update_post() * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post() *  is successful. * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from. Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_restore_post_revision( $revision_id, $fields = null ) {	if ( !$revision = wp_get_post_revision( $revision_id, ARRAY_A ) )		return $revision;	if ( !is_array( $fields ) )		$fields = array_keys( _wp_post_revision_fields() );	$update = array();	foreach( array_intersect( array_keys( $revision ), $fields ) as $field )		$update[$field] = $revision[$field];	if ( !$update )		return false;	$update['ID'] = $revision['post_parent'];	$update = add_magic_quotes( $update ); //since data is from db	$post_id = wp_update_post( $update );	if ( is_wp_error( $post_id ) )		return $post_id;	if ( $post_id )		do_action( 'wp_restore_post_revision', $post_id, $revision['ID'] );	return $post_id;}/** * Deletes a revision. * * Deletes the row from the posts table corresponding to the specified revision. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses wp_get_post_revision() * @uses wp_delete_post() * * @param int|object $revision_id Revision ID or revision object. * @param array $fields Optional. What fields to restore from.  Defaults to all. * @return mixed Null if error, false if no fields to restore, (int) post ID if success. */function wp_delete_post_revision( $revision_id ) {	if ( !$revision = wp_get_post_revision( $revision_id ) )		return $revision;	$delete = wp_delete_post( $revision->ID );	if ( is_wp_error( $delete ) )		return $delete;	if ( $delete )		do_action( 'wp_delete_post_revision', $revision->ID, $revision );	return $delete;}/** * Returns all revisions of specified post. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses get_children() * * @param int|object $post_id Post ID or post object * @return array empty if no revisions */function wp_get_post_revisions( $post_id = 0, $args = null ) {	if ( ! WP_POST_REVISIONS )		return array();	if ( ( !$post = get_post( $post_id ) ) || empty( $post->ID ) )		return array();	$defaults = array( 'order' => 'DESC', 'orderby' => 'date' );	$args = wp_parse_args( $args, $defaults );	$args = array_merge( $args, array( 'post_parent' => $post->ID, 'post_type' => 'revision', 'post_status' => 'inherit' ) );	if ( !$revisions = get_children( $args ) )		return array();	return $revisions;}function _set_preview($post) {	if ( ! is_object($post) )		return $post;	$preview = wp_get_post_autosave($post->ID);	if ( ! is_object($preview) )		return $post;	$preview = sanitize_post($preview);	$post->post_content = $preview->post_content;	$post->post_title = $preview->post_title;	$post->post_excerpt = $preview->post_excerpt;	return $post;}function _show_post_preview() {	if ( isset($_GET['preview_id']) && isset($_GET['preview_nonce']) ) {		$id = (int) $_GET['preview_id'];		if ( false == wp_verify_nonce( $_GET['preview_nonce'], 'post_preview_' . $id ) )			wp_die( __('You do not have permission to preview drafts.') );		add_filter('the_preview', '_set_preview');	}}
<?php/** * Edit Comments Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('edit_posts') )	wp_die(__('Cheatin&#8217; uh?'));wp_enqueue_script('admin-comments');enqueue_comment_hotkeys_js();$post_id = isset($_REQUEST['p']) ? (int) $_REQUEST['p'] : 0;if ( isset($_REQUEST['doaction']) ||  isset($_REQUEST['doaction2']) || isset($_REQUEST['delete_all']) || isset($_REQUEST['delete_all2']) ) {	check_admin_referer('bulk-comments');	if ( (isset($_REQUEST['delete_all']) || isset($_REQUEST['delete_all2'])) && !empty($_REQUEST['pagegen_timestamp']) ) {		$comment_status = $wpdb->escape($_REQUEST['comment_status']);		$delete_time = $wpdb->escape($_REQUEST['pagegen_timestamp']);		$comment_ids = $wpdb->get_col( "SELECT comment_ID FROM $wpdb->comments WHERE comment_approved = '$comment_status' AND '$delete_time' > comment_date_gmt" );		$doaction = 'delete';	} elseif ( ($_REQUEST['action'] != -1 || $_REQUEST['action2'] != -1) && isset($_REQUEST['delete_comments']) ) {		$comment_ids = $_REQUEST['delete_comments'];		$doaction = ($_REQUEST['action'] != -1) ? $_REQUEST['action'] : $_REQUEST['action2'];	} elseif ( $_REQUEST['doaction'] == 'undo' && isset($_REQUEST['ids']) ) {		$comment_ids = array_map( 'absint', explode(',', $_REQUEST['ids']) );		$doaction = $_REQUEST['action'];	} else {		wp_redirect( wp_get_referer() );	}	$approved = $unapproved = $spammed = $unspammed = $trashed = $untrashed = $deleted = 0;	$redirect_to = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'spammed', 'unspammed', 'approved', 'unapproved', 'ids'), wp_get_referer() );	foreach ($comment_ids as $comment_id) { // Check the permissions on each		$_post_id = (int) $wpdb->get_var( $wpdb->prepare( "SELECT comment_post_ID FROM $wpdb->comments WHERE comment_ID = %d", $comment_id) );		if ( !current_user_can('edit_post', $_post_id) )			continue;		switch( $doaction ) {			case 'approve' :				wp_set_comment_status($comment_id, 'approve');				$approved++;				break;			case 'unapprove' :				wp_set_comment_status($comment_id, 'hold');				$unapproved++;				break;			case 'spam' :				wp_spam_comment($comment_id);				$spammed++;				break;			case 'unspam' :				wp_unspam_comment($comment_id);				$unspammed++;				break;			case 'trash' :				wp_trash_comment($comment_id);				$trashed++;				break;			case 'untrash' :				wp_untrash_comment($comment_id);				$untrashed++;				break;			case 'delete' :				wp_delete_comment($comment_id);				$deleted++;				break;		}	}	if ( $approved )		$redirect_to = add_query_arg( 'approved', $approved, $redirect_to );	if ( $unapproved )		$redirect_to = add_query_arg( 'unapproved', $unapproved, $redirect_to );	if ( $spammed )		$redirect_to = add_query_arg( 'spammed', $spammed, $redirect_to );	if ( $unspammed )		$redirect_to = add_query_arg( 'unspammed', $unspammed, $redirect_to );	if ( $trashed )		$redirect_to = add_query_arg( 'trashed', $trashed, $redirect_to );	if ( $untrashed )		$redirect_to = add_query_arg( 'untrashed', $untrashed, $redirect_to );	if ( $deleted )		$redirect_to = add_query_arg( 'deleted', $deleted, $redirect_to );	if ( $trashed || $spammed )		$redirect_to = add_query_arg( 'ids', join(',', $comment_ids), $redirect_to );	wp_redirect( $redirect_to );	exit;} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}if ( $post_id )	$title = sprintf(__('Comments on &#8220;%s&#8221;'), wp_html_excerpt(_draft_or_post_title($post_id), 50));else	$title = __('Comments');add_contextual_help( $current_screen, '<p>' . __('You can manage comments made on your site similar to the way you manage Posts and other content. This screen is customizable in the same ways as other management screens, and you can act on comments using the on-hover action links or the Bulk Actions.') . '</p>' .	'<p>' . __('A yellow row means the comment is waiting for you to moderate it.') . '</p>' .	'<p>' . __('In the Author column, in addition to the author&#8217;s name, email address, and blog URL, the commenter&#8217;s IP address is shown. Clicking on this link will show you all the comments made from this IP address.') . '</p>' .	'<p>' . __('In the Comment column, above each comment it says &#8220;Submitted on,&#8221; followed by the date and time the comment was left on your site. Clicking on the date/time link will take you to that comment on your live site.') . '</p>' .	'<p>' . __('In the In Response To column, there are three elements. The text is the name of the post that inspired the comment, and links to the post editor for that entry. The &#8220;#&#8221; permalink symbol below leads to that post on your live site. The small bubble with the number in it shows how many comments that post has received. If the bubble is gray, you have moderated all comments for that post. If it is blue, there are pending comments. Clicking the bubble will filter the comments screen to show only comments on that post.') . '</p>' .	'<p>' . __('Many people take advantage of keyboard shortcuts to moderate their comments more quickly. Use the link below to learn more.') . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Comment_Spam" target="_blank">Comment Spam Documentation</a>') . '</p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Keyboard_Shortcuts" target="_blank">Keyboard Shortcuts Documentation</a>') . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');$mode = ( empty($_GET['mode']) ) ? 'detail' : esc_attr($_GET['mode']);$comment_status = isset($_REQUEST['comment_status']) ? $_REQUEST['comment_status'] : 'all';if ( !in_array($comment_status, array('all', 'moderated', 'approved', 'spam', 'trash')) )	$comment_status = 'all';$comment_type = !empty($_GET['comment_type']) ? esc_attr($_GET['comment_type']) : '';$search_dirty = ( isset($_GET['s']) ) ? $_GET['s'] : '';$search = esc_attr( $search_dirty ); ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . sprintf( __( 'Search results for &#8220;%s&#8221;' ), wp_html_excerpt( esc_html( stripslashes( $_GET['s'] ) ), 50 ) ) . '</span>' ); ?></h2><?phpif ( isset( $_GET['error'] ) ) {	$error = (int) $_GET['error'];	$error_msg = '';	switch ( $error ) {		case 1 :			$error_msg = __( 'Oops, no comment with this ID.' );			break;		case 2 :			$error_msg = __( 'You are not allowed to edit comments on this post.' );			break;	}	if ( $error_msg )		echo '<div id="moderated" class="error"><p>' . $error_msg . '</p></div>';}if ( isset($_GET['approved']) || isset($_GET['deleted']) || isset($_GET['trashed']) || isset($_GET['untrashed']) || isset($_GET['spammed']) || isset($_GET['unspammed']) || isset($_GET['same']) ) {	$approved  = isset( $_GET['approved']  ) ? (int) $_GET['approved']  : 0;	$deleted   = isset( $_GET['deleted']   ) ? (int) $_GET['deleted']   : 0;	$trashed   = isset( $_GET['trashed']   ) ? (int) $_GET['trashed']   : 0;	$untrashed = isset( $_GET['untrashed'] ) ? (int) $_GET['untrashed'] : 0;	$spammed   = isset( $_GET['spammed']   ) ? (int) $_GET['spammed']   : 0;	$unspammed = isset( $_GET['unspammed'] ) ? (int) $_GET['unspammed'] : 0;	$same      = isset( $_GET['same'] )      ? (int) $_GET['same']      : 0;	if ( $approved > 0 || $deleted > 0 || $trashed > 0 || $untrashed > 0 || $spammed > 0 || $unspammed > 0 || $same > 0 ) {		if ( $approved > 0 )			$messages[] = sprintf( _n( '%s comment approved', '%s comments approved', $approved ), $approved );		if ( $spammed > 0 ) {			$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;			$messages[] = sprintf( _n( '%s comment marked as spam.', '%s comments marked as spam.', $spammed ), $spammed ) . ' <a href="' . esc_url( wp_nonce_url( "edit-comments.php?doaction=undo&action=unspam&ids=$ids", "bulk-comments" ) ) . '">' . __('Undo') . '</a><br />';		}		if ( $unspammed > 0 )			$messages[] = sprintf( _n( '%s comment restored from the spam', '%s comments restored from the spam', $unspammed ), $unspammed );		if ( $trashed > 0 ) {			$ids = isset($_GET['ids']) ? $_GET['ids'] : 0;			$messages[] = sprintf( _n( '%s comment moved to the Trash.', '%s comments moved to the Trash.', $trashed ), $trashed ) . ' <a href="' . esc_url( wp_nonce_url( "edit-comments.php?doaction=undo&action=untrash&ids=$ids", "bulk-comments" ) ) . '">' . __('Undo') . '</a><br />';		}		if ( $untrashed > 0 )			$messages[] = sprintf( _n( '%s comment restored from the Trash', '%s comments restored from the Trash', $untrashed ), $untrashed );		if ( $deleted > 0 )			$messages[] = sprintf( _n( '%s comment permanently deleted', '%s comments permanently deleted', $deleted ), $deleted );		if ( $same > 0 && $comment = get_comment( $same ) ) {			switch ( $comment->comment_approved ) {				case '1' :					$messages[] = __('This comment is already approved.') . ' <a href="' . esc_url( admin_url( "comment.php?action=editcomment&c=$same" ) ) . '">' . __( 'Edit comment' ) . '</a>';					break;				case 'trash' :					$messages[] = __( 'This comment is already in the Trash.' ) . ' <a href="' . esc_url( admin_url( 'edit-comments.php?comment_status=trash' ) ) . '"> ' . __( 'View Trash' ) . '</a>';					break;				case 'spam' :					$messages[] = __( 'This comment is already marked as spam.' ) . ' <a href="' . esc_url( admin_url( "comment.php?action=editcomment&c=$same" ) ) . '">' . __( 'Edit comment' ) . '</a>';					break;			}		}		echo '<div id="moderated" class="updated"><p>' . implode( "<br/>\n", $messages ) . '</p></div>';	}}?><form id="comments-form" action="" method="get"><ul class="subsubsub"><?php$status_links = array();$num_comments = ( $post_id ) ? wp_count_comments( $post_id ) : wp_count_comments();//, number_format_i18n($num_comments->moderated) ), "<span class='comment-count'>" . number_format_i18n($num_comments->moderated) . "</span>"),//, number_format_i18n($num_comments->spam) ), "<span class='spam-comment-count'>" . number_format_i18n($num_comments->spam) . "</span>")$stati = array(		'all' => _nx_noop('All', 'All', 'comments'), // singular not used		'moderated' => _n_noop('Pending <span class="count">(<span class="pending-count">%s</span>)</span>', 'Pending <span class="count">(<span class="pending-count">%s</span>)</span>'),		'approved' => _n_noop('Approved', 'Approved'), // singular not used		'spam' => _n_noop('Spam <span class="count">(<span class="spam-count">%s</span>)</span>', 'Spam <span class="count">(<span class="spam-count">%s</span>)</span>'),		'trash' => _n_noop('Trash <span class="count">(<span class="trash-count">%s</span>)</span>', 'Trash <span class="count">(<span class="trash-count">%s</span>)</span>')	);if ( !EMPTY_TRASH_DAYS )	unset($stati['trash']);$link = 'edit-comments.php';if ( !empty($comment_type) && 'all' != $comment_type )	$link = add_query_arg( 'comment_type', $comment_type, $link );foreach ( $stati as $status => $label ) {	$class = ( $status == $comment_status ) ? ' class="current"' : '';	if ( !isset( $num_comments->$status ) )		$num_comments->$status = 10;	$link = add_query_arg( 'comment_status', $status, $link );	if ( $post_id )		$link = add_query_arg( 'p', absint( $post_id ), $link );	/*	// I toyed with this, but decided against it. Leaving it in here in case anyone thinks it is a good idea. ~ Mark	if ( !empty( $_GET['s'] ) )		$link = add_query_arg( 's', esc_attr( stripslashes( $_GET['s'] ) ), $link );	*/	$status_links[] = "<li class='$status'><a href='$link'$class>" . sprintf(		_n( $label[0], $label[1], $num_comments->$status ),		number_format_i18n( $num_comments->$status )	) . '</a>';}$status_links = apply_filters( 'comment_status_links', $status_links );echo implode( " |</li>\n", $status_links) . '</li>';unset($status_links);?></ul><p class="search-box">	<label class="screen-reader-text" for="comment-search-input"><?php _e( 'Search Comments' ); ?>:</label>	<input type="text" id="comment-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Comments' ); ?>" class="button" /></p><?php$comments_per_page = (int) get_user_option( 'edit_comments_per_page' );if ( empty( $comments_per_page ) || $comments_per_page < 1 )	$comments_per_page = 20;$comments_per_page = apply_filters( 'comments_per_page', $comments_per_page, $comment_status );if ( isset( $_GET['apage'] ) )	$page = abs( (int) $_GET['apage'] );else	$page = 1;$start = $offset = ( $page - 1 ) * $comments_per_page;list($_comments, $total) = _wp_get_comment_list( $comment_status, $search_dirty, $start, $comments_per_page + 8, $post_id, $comment_type ); // Grab a few extra$_comment_post_ids = array();foreach ( $_comments as $_c ) {	$_comment_post_ids[] = $_c->comment_post_ID;}$_comment_pending_count = get_pending_comments_num($_comment_post_ids);$comments = array_slice($_comments, 0, $comments_per_page);$extra_comments = array_slice($_comments, $comments_per_page);$page_links = paginate_links( array(	'base' => add_query_arg( 'apage', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil($total / $comments_per_page),	'current' => $page));?><input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" /><?php if ( $post_id ) : ?><input type="hidden" name="p" value="<?php echo esc_attr( intval( $post_id ) ); ?>" /><?php endif; ?><input type="hidden" name="comment_status" value="<?php echo esc_attr($comment_status); ?>" /><input type="hidden" name="pagegen_timestamp" value="<?php echo esc_attr(current_time('mysql', 1)); ?>" /><div class="tablenav"><?php if ( $page_links ) : ?><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( $start + 1 ),	number_format_i18n( min( $page * $comments_per_page, $total ) ),	'<span class="total-type-count">' . number_format_i18n( $total ) . '</span>',	$page_links); echo $page_links_text; ?></div><input type="hidden" name="_total" value="<?php echo esc_attr($total); ?>" /><input type="hidden" name="_per_page" value="<?php echo esc_attr($comments_per_page); ?>" /><input type="hidden" name="_page" value="<?php echo esc_attr($page); ?>" /><?php endif; ?><?php if ( $comments ) : ?><div class="alignleft actions"><select name="action"><option value="-1" selected="selected"><?php _e('Bulk Actions') ?></option><?php if ( 'all' == $comment_status || 'approved' == $comment_status ): ?><option value="unapprove"><?php _e('Unapprove'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'moderated' == $comment_status || 'spam' == $comment_status ): ?><option value="approve"><?php _e('Approve'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'approved' == $comment_status || 'moderated' == $comment_status ): ?><option value="spam"><?php _ex('Mark as Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status ): ?><option value="untrash"><?php _e('Restore'); ?></option><?php elseif ( 'spam' == $comment_status ): ?><option value="unspam"><?php _ex('Not Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status || 'spam' == $comment_status || !EMPTY_TRASH_DAYS ): ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php else: ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php endif; ?></select><input type="submit" name="doaction" id="doaction" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary apply" /><?php wp_nonce_field('bulk-comments'); ?><?php endif; ?><select name="comment_type">	<option value="all"><?php _e('Show all comment types'); ?></option><?php	$comment_types = apply_filters( 'admin_comment_types_dropdown', array(		'comment' => __('Comments'),		'pings' => __('Pings'),	) );	foreach ( $comment_types as $type => $label ) {		echo "	<option value='" . esc_attr($type) . "'";		selected( $comment_type, $type );		echo ">$label</option>\n";	}?></select><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php if ( isset($_GET['apage']) ) { ?>	<input type="hidden" name="apage" value="<?php echo esc_attr( absint( $_GET['apage'] ) ); ?>" /><?php }if ( ( 'spam' == $comment_status || 'trash' == $comment_status) && current_user_can ('moderate_comments') ) {	wp_nonce_field('bulk-destroy', '_destroy_nonce');    if ( 'spam' == $comment_status && current_user_can('moderate_comments') ) { ?>		<input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Spam'); ?>" class="button-secondary apply" /><?php } elseif ( 'trash' == $comment_status && current_user_can('moderate_comments') ) { ?>		<input type="submit" name="delete_all" id="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php }} ?><?php do_action('manage_comments_nav', $comment_status); ?></div><br class="clear" /></div><div class="clear"></div><?php if ( $comments ) { ?><table class="widefat comments fixed" cellspacing="0"><thead>	<tr><?php print_column_headers('edit-comments'); ?>	</tr></thead><tfoot>	<tr><?php print_column_headers('edit-comments', false); ?>	</tr></tfoot><tbody id="the-comment-list" class="list:comment"><?php	foreach ($comments as $comment)		_wp_comment_row( $comment->comment_ID, $mode, $comment_status );?></tbody><tbody id="the-extra-comment-list" class="list:comment" style="display: none;"><?php	foreach ($extra_comments as $comment)		_wp_comment_row( $comment->comment_ID, $mode, $comment_status );?></tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2"><option value="-1" selected="selected"><?php _e('Bulk Actions') ?></option><?php if ( 'all' == $comment_status || 'approved' == $comment_status ): ?><option value="unapprove"><?php _e('Unapprove'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'moderated' == $comment_status || 'spam' == $comment_status ): ?><option value="approve"><?php _e('Approve'); ?></option><?php endif; ?><?php if ( 'all' == $comment_status || 'approved' == $comment_status || 'moderated' == $comment_status ): ?><option value="spam"><?php _ex('Mark as Spam', 'comment'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status ): ?><option value="untrash"><?php _e('Restore'); ?></option><?php endif; ?><?php if ( 'trash' == $comment_status || 'spam' == $comment_status || !EMPTY_TRASH_DAYS ): ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php elseif ( 'spam' == $comment_status ): ?><option value="unspam"><?php _ex('Not Spam', 'comment'); ?></option><?php else: ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php endif; ?></select><input type="submit" name="doaction2" id="doaction2" value="<?php esc_attr_e('Apply'); ?>" class="button-secondary apply" /><?php if ( 'spam' == $comment_status && current_user_can('moderate_comments') ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Spam'); ?>" class="button-secondary apply" /><?php } elseif ( 'trash' == $comment_status && current_user_can('moderate_comments') ) { ?><input type="submit" name="delete_all2" id="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?><?php do_action('manage_comments_nav', $comment_status); ?></div><br class="clear" /></div></form><form id="get-extra-comments" method="post" action="" class="add:the-extra-comment-list:" style="display: none;">	<input type="hidden" name="s" value="<?php echo esc_attr($search); ?>" />	<input type="hidden" name="mode" value="<?php echo esc_attr($mode); ?>" />	<input type="hidden" name="comment_status" value="<?php echo esc_attr($comment_status); ?>" />	<input type="hidden" name="page" value="<?php echo esc_attr($page); ?>" />	<input type="hidden" name="per_page" value="<?php echo esc_attr($comments_per_page); ?>" />	<input type="hidden" name="p" value="<?php echo esc_attr( $post_id ); ?>" />	<input type="hidden" name="comment_type" value="<?php echo esc_attr( $comment_type ); ?>" />	<?php wp_nonce_field( 'add-comment', '_ajax_nonce', false ); ?></form><div id="ajax-response"></div><?php } elseif ( 'moderated' == $comment_status ) { ?><p><?php _e('No comments awaiting moderation&hellip; yet.') ?></p></div></form><?php } else { ?><p><?php _e('No comments found.') ?></p></div></form><?php } ?></div><?phpwp_comment_reply('-1', true, 'detail');wp_comment_trashnotice();include('./admin-footer.php'); ?>
<?php/** * WordPress Link Template Functions * * @package WordPress * @subpackage Template *//** * Display the permalink for the current post. * * @since 1.2.0 * @uses apply_filters() Calls 'the_permalink' filter on the permalink string. */function the_permalink() {	echo apply_filters('the_permalink', get_permalink());}/** * Retrieve trailing slash string, if blog set for adding trailing slashes. * * Conditionally adds a trailing slash if the permalink structure has a trailing * slash, strips the trailing slash if not. The string is passed through the * 'user_trailingslashit' filter. Will remove trailing slash from string, if * blog is not set to have them. * * @since 2.2.0 * @uses $wp_rewrite * * @param $string String a URL with or without a trailing slash. * @param $type_of_url String the type of URL being considered (e.g. single, category, etc) for use in the filter. * @return string */function user_trailingslashit($string, $type_of_url = '') {	global $wp_rewrite;	if ( $wp_rewrite->use_trailing_slashes )		$string = trailingslashit($string);	else		$string = untrailingslashit($string);	// Note that $type_of_url can be one of following:	// single, single_trackback, single_feed, single_paged, feed, category, page, year, month, day, paged	$string = apply_filters('user_trailingslashit', $string, $type_of_url);	return $string;}/** * Display permalink anchor for current post. * * The permalink mode title will use the post title for the 'a' element 'id' * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute. * * @since 0.71 * * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'. */function permalink_anchor($mode = 'id') {	global $post;	switch ( strtolower($mode) ) {		case 'title':			$title = sanitize_title($post->post_title) . '-' . $post->ID;			echo '<a id="'.$title.'"></a>';			break;		case 'id':		default:			echo '<a id="post-' . $post->ID . '"></a>';			break;	}}/** * Retrieve full permalink for current post or post ID. * * @since 1.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name. * @return string */function get_permalink($id = 0, $leavename = false) {	$rewritecode = array(		'%year%',		'%monthnum%',		'%day%',		'%hour%',		'%minute%',		'%second%',		$leavename? '' : '%postname%',		'%post_id%',		'%category%',		'%author%',		$leavename? '' : '%pagename%',	);	if ( is_object($id) && isset($id->filter) && 'sample' == $id->filter ) {		$post = $id;		$sample = true;	} else {		$post = &get_post($id);		$sample = false;	}	if ( empty($post->ID) )		return false;	if ( $post->post_type == 'page' )		return get_page_link($post->ID, $leavename, $sample);	elseif ( $post->post_type == 'attachment' )		return get_attachment_link($post->ID);	elseif ( in_array($post->post_type, get_post_types( array('_builtin' => false) ) ) )		return get_post_permalink($post, $leavename, $sample);	$permalink = get_option('permalink_structure');	$permalink = apply_filters('pre_post_link', $permalink, $post, $leavename);	if ( '' != $permalink && !in_array($post->post_status, array('draft', 'pending', 'auto-draft')) ) {		$unixtime = strtotime($post->post_date);		$category = '';		if ( strpos($permalink, '%category%') !== false ) {			$cats = get_the_category($post->ID);			if ( $cats ) {				usort($cats, '_usort_terms_by_ID'); // order by ID				$category = $cats[0]->slug;				if ( $parent = $cats[0]->parent )					$category = get_category_parents($parent, false, '/', true) . $category;			}			// show default category in permalinks, without			// having to assign it explicitly			if ( empty($category) ) {				$default_category = get_category( get_option( 'default_category' ) );				$category = is_wp_error( $default_category ) ? '' : $default_category->slug;			}		}		$author = '';		if ( strpos($permalink, '%author%') !== false ) {			$authordata = get_userdata($post->post_author);			$author = $authordata->user_nicename;		}		$date = explode(" ",date('Y m d H i s', $unixtime));		$rewritereplace =		array(			$date[0],			$date[1],			$date[2],			$date[3],			$date[4],			$date[5],			$post->post_name,			$post->ID,			$category,			$author,			$post->post_name,		);		$permalink = home_url( str_replace($rewritecode, $rewritereplace, $permalink) );		$permalink = user_trailingslashit($permalink, 'single');	} else { // if they're not using the fancy permalink option		$permalink = home_url('?p=' . $post->ID);	}	return apply_filters('post_link', $permalink, $post, $leavename);}/** * Retrieve the permalink for a post with a custom post type. * * @since 3.0.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep post name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_post_permalink( $id = 0, $leavename = false, $sample = false ) {	global $wp_rewrite;	$post = &get_post($id);	if ( is_wp_error( $post ) )		return $post;	$post_link = $wp_rewrite->get_extra_permastruct($post->post_type);	$slug = $post->post_name;	$draft_or_pending = in_array( $post->post_status, array( 'draft', 'pending', 'auto-draft' ) );	$post_type = get_post_type_object($post->post_type);	if ( !empty($post_link) && ( ( isset($post->post_status) && !$draft_or_pending ) || $sample ) ) {		if ( ! $leavename ) {			if ( $post_type->hierarchical )				$slug = get_page_uri($id);			$post_link = str_replace("%$post->post_type%", $slug, $post_link);		}		$post_link = home_url( user_trailingslashit($post_link) );	} else {		if ( $post_type->query_var && ( isset($post->post_status) && !$draft_or_pending ) )			$post_link = add_query_arg($post_type->query_var, $slug, '');		else			$post_link = add_query_arg(array('post_type' => $post->post_type, 'p' => $post->ID), '');		$post_link = home_url($post_link);	}	return apply_filters('post_type_link', $post_link, $id, $leavename, $sample);}/** * Retrieve permalink from post ID. * * @since 1.0.0 * * @param int $post_id Optional. Post ID. * @param mixed $deprecated Not used. * @return string */function post_permalink( $post_id = 0, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	return get_permalink($post_id);}/** * Retrieve the permalink for current page or page ID. * * Respects page_on_front. Use this one. * * @since 1.5.0 * * @param int $id Optional. Post ID. * @param bool $leavename Optional, defaults to false. Whether to keep page name. * @param bool $sample Optional, defaults to false. Is it a sample permalink. * @return string */function get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post;	$id = (int) $id;	if ( !$id )		$id = (int) $post->ID;	if ( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') )		$link = home_url('/');	else		$link = _get_page_link( $id , $leavename, $sample );	return apply_filters('page_link', $link, $id, $sample);}/** * Retrieve the page permalink. * * Ignores page_on_front. Internal use only. * * @since 2.1.0 * @access private * * @param int $id Optional. Post ID. * @param bool $leavename Optional. Leave name. * @param bool $sample Optional. Sample permalink. * @return string */function _get_page_link( $id = false, $leavename = false, $sample = false ) {	global $post, $wp_rewrite;	if ( !$id )		$id = (int) $post->ID;	else		$post = &get_post($id);	$link = $wp_rewrite->get_page_permastruct();	if ( '' != $link && ( ( isset($post->post_status) && 'draft' != $post->post_status && 'pending' != $post->post_status ) || $sample ) ) {		if ( ! $leavename )			$link = str_replace('%pagename%', get_page_uri($id), $link);		$link = home_url($link);		$link = user_trailingslashit($link, 'page');	} else {		$link = home_url("?page_id=$id");	}	return apply_filters( '_get_page_link', $link, $id );}/** * Retrieve permalink for attachment. * * This can be used in the WordPress Loop or outside of it. * * @since 2.0.0 * * @param int $id Optional. Post ID. * @return string */function get_attachment_link($id = false) {	global $post, $wp_rewrite;	$link = false;	if ( ! $id)		$id = (int) $post->ID;	$object = get_post($id);	if ( $wp_rewrite->using_permalinks() && ($object->post_parent > 0) && ($object->post_parent != $id) ) {		$parent = get_post($object->post_parent);		if ( 'page' == $parent->post_type )			$parentlink = _get_page_link( $object->post_parent ); // Ignores page_on_front		else			$parentlink = get_permalink( $object->post_parent );		if ( is_numeric($object->post_name) || false !== strpos(get_option('permalink_structure'), '%category%') )			$name = 'attachment/' . $object->post_name; // <permalink>/<int>/ is paged so we use the explicit attachment marker		else			$name = $object->post_name;		if ( strpos($parentlink, '?') === false )			$link = user_trailingslashit( trailingslashit($parentlink) . $name );	}	if ( ! $link )		$link = home_url( "/?attachment_id=$id" );	return apply_filters('attachment_link', $link, $id);}/** * Retrieve the permalink for the year archives. * * @since 1.5.0 * * @param int|bool $year False for current year or year for permalink. * @return string */function get_year_link($year) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	$yearlink = $wp_rewrite->get_year_permastruct();	if ( !empty($yearlink) ) {		$yearlink = str_replace('%year%', $year, $yearlink);		return apply_filters('year_link', home_url( user_trailingslashit($yearlink, 'year') ), $year);	} else {		return apply_filters('year_link', home_url('?m=' . $year), $year);	}}/** * Retrieve the permalink for the month archives with year. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @return string */function get_month_link($year, $month) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	$monthlink = $wp_rewrite->get_month_permastruct();	if ( !empty($monthlink) ) {		$monthlink = str_replace('%year%', $year, $monthlink);		$monthlink = str_replace('%monthnum%', zeroise(intval($month), 2), $monthlink);		return apply_filters('month_link', home_url( user_trailingslashit($monthlink, 'month') ), $year, $month);	} else {		return apply_filters('month_link', home_url( '?m=' . $year . zeroise($month, 2) ), $year, $month);	}}/** * Retrieve the permalink for the day archives with year and month. * * @since 1.0.0 * * @param bool|int $year False for current year. Integer of year. * @param bool|int $month False for current month. Integer of month. * @param bool|int $day False for current day. Integer of day. * @return string */function get_day_link($year, $month, $day) {	global $wp_rewrite;	if ( !$year )		$year = gmdate('Y', current_time('timestamp'));	if ( !$month )		$month = gmdate('m', current_time('timestamp'));	if ( !$day )		$day = gmdate('j', current_time('timestamp'));	$daylink = $wp_rewrite->get_day_permastruct();	if ( !empty($daylink) ) {		$daylink = str_replace('%year%', $year, $daylink);		$daylink = str_replace('%monthnum%', zeroise(intval($month), 2), $daylink);		$daylink = str_replace('%day%', zeroise(intval($day), 2), $daylink);		return apply_filters('day_link', home_url( user_trailingslashit($daylink, 'day') ), $year, $month, $day);	} else {		return apply_filters('day_link', home_url( '?m=' . $year . zeroise($month, 2) . zeroise($day, 2) ), $year, $month, $day);	}}/** * Display the permalink for the feed type. * * @since 3.0.0 * * @param string $anchor The link's anchor text. * @param string $feed Optional, defaults to default feed. Feed type. */function the_feed_link( $anchor, $feed = '' ) {	$link = '<a href="' . esc_url( get_feed_link( $feed ) ) . '">' . $anchor . '</a>';	echo apply_filters( 'the_feed_link', $link, $feed );}/** * Retrieve the permalink for the feed type. * * @since 1.5.0 * * @param string $feed Optional, defaults to default feed. Feed type. * @return string */function get_feed_link($feed = '') {	global $wp_rewrite;	$permalink = $wp_rewrite->get_feed_permastruct();	if ( '' != $permalink ) {		if ( false !== strpos($feed, 'comments_') ) {			$feed = str_replace('comments_', '', $feed);			$permalink = $wp_rewrite->get_comment_feed_permastruct();		}		if ( get_default_feed() == $feed )			$feed = '';		$permalink = str_replace('%feed%', $feed, $permalink);		$permalink = preg_replace('#/+#', '/', "/$permalink");		$output =  home_url( user_trailingslashit($permalink, 'feed') );	} else {		if ( empty($feed) )			$feed = get_default_feed();		if ( false !== strpos($feed, 'comments_') )			$feed = str_replace('comments_', 'comments-', $feed);		$output = home_url("?feed={$feed}");	}	return apply_filters('feed_link', $output, $feed);}/** * Retrieve the permalink for the post comments feed. * * @since 2.2.0 * * @param int $post_id Optional. Post ID. * @param string $feed Optional. Feed type. * @return string */function get_post_comments_feed_link($post_id = '', $feed = '') {	global $id;	if ( empty($post_id) )		$post_id = (int) $id;	if ( empty($feed) )		$feed = get_default_feed();	if ( '' != get_option('permalink_structure') ) {		if ( 'page' == get_option('show_on_front') && $post_id == get_option('page_on_front') )			$url = _get_page_link( $post_id );		else			$url = get_permalink($post_id);		$url = trailingslashit($url) . 'feed';		if ( $feed != get_default_feed() )			$url .= "/$feed";		$url = user_trailingslashit($url, 'single_feed');	} else {		$type = get_post_field('post_type', $post_id);		if ( 'page' == $type )			$url = home_url("?feed=$feed&amp;page_id=$post_id");		else			$url = home_url("?feed=$feed&amp;p=$post_id");	}	return apply_filters('post_comments_feed_link', $url);}/** * Display the comment feed link for a post. * * Prints out the comment feed link for a post. Link text is placed in the * anchor. If no link text is specified, default text is used. If no post ID is * specified, the current post is used. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param string $link_text Descriptive text. * @param int $post_id Optional post ID.  Default to current post. * @param string $feed Optional. Feed format. * @return string Link to the comment feed for the current post.*/function post_comments_feed_link( $link_text = '', $post_id = '', $feed = '' ) {	$url = get_post_comments_feed_link($post_id, $feed);	if ( empty($link_text) )		$link_text = __('Comments Feed');	echo apply_filters( 'post_comments_feed_link_html', "<a href='$url'>$link_text</a>", $post_id, $feed );}/** * Retrieve the feed link for a given author. * * Returns a link to the feed for all posts by a given author. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $author_id ID of an author. * @param string $feed Optional. Feed type. * @return string Link to the feed for the author specified by $author_id.*/function get_author_feed_link( $author_id, $feed = '' ) {	$author_id = (int) $author_id;	$permalink_structure = get_option('permalink_structure');	if ( empty($feed) )		$feed = get_default_feed();	if ( '' == $permalink_structure ) {		$link = home_url("?feed=$feed&amp;author=" . $author_id);	} else {		$link = get_author_posts_url($author_id);		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit($link) . user_trailingslashit($feed_link, 'feed');	}	$link = apply_filters('author_feed_link', $link, $feed);	return $link;}/** * Retrieve the feed link for a category. * * Returns a link to the feed for all post in a given category. A specific feed * can be requested or left blank to get the default feed. * * @package WordPress * @subpackage Feed * @since 2.5.0 * * @param int $cat_id ID of a category. * @param string $feed Optional. Feed type. * @return string Link to the feed for the category specified by $cat_id.*/function get_category_feed_link($cat_id, $feed = '') {	return get_term_feed_link($cat_id, 'category', $feed);}/** * Retrieve the feed link for a taxonomy. * * Returns a link to the feed for all post in a given term. A specific feed * can be requested or left blank to get the default feed. * * @since 3.0 * * @param int $term_id ID of a category. * @param string $taxonomy Optional. Taxonomy of $term_id * @param string $feed Optional. Feed type. * @return string Link to the feed for the taxonomy specified by $term_id and $taxonomy.*/function get_term_feed_link( $term_id, $taxonomy = 'category', $feed = '' ) {	global $wp_rewrite;	$term_id = ( int ) $term_id;	$term = get_term( $term_id, $taxonomy  );	if ( empty( $term ) || is_wp_error( $term ) )		return false;	if ( empty( $feed ) )		$feed = get_default_feed();	$permalink_structure = get_option( 'permalink_structure' );	if ( '' == $permalink_structure ) {		if ( 'category' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;cat=$term_id");		}		elseif ( 'post_tag' == $taxonomy ) {			$link = home_url("?feed=$feed&amp;tag=$term->slug");		} else {			$t = get_taxonomy( $taxonomy );			$link = home_url("?feed=$feed&amp;$t->query_var=$term->slug");		}	} else {		$link = get_term_link( $term_id, $term->taxonomy );		if ( $feed == get_default_feed() )			$feed_link = 'feed';		else			$feed_link = "feed/$feed";		$link = trailingslashit( $link ) . user_trailingslashit( $feed_link, 'feed' );	}	if ( 'category' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	elseif ( 'post_tag' == $taxonomy )		$link = apply_filters( 'category_feed_link', $link, $feed );	else		$link = apply_filters( 'taxonomy_feed_link', $link, $feed, $taxonomy );	return $link;}/** * Retrieve permalink for feed of tag. * * @since 2.3.0 * * @param int $tag_id Tag ID. * @param string $feed Optional. Feed type. * @return string */function get_tag_feed_link($tag_id, $feed = '') {	return get_term_feed_link($tag_id, 'post_tag', $feed);}/** * Retrieve edit tag link. * * @since 2.7.0 * * @param int $tag_id Tag ID * @return string */function get_edit_tag_link( $tag_id = 0, $taxonomy = 'post_tag' ) {	global $post_type;	$tax = get_taxonomy($taxonomy);	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag_id, $taxonomy);	$location = admin_url('edit-tags.php?action=edit&amp;taxonomy=' . $taxonomy . '&amp;' . (!empty($post_type) ? 'post_type=' . $post_type .'&amp;' : '') .'tag_ID=' . $tag->term_id);	return apply_filters( 'get_edit_tag_link', $location );}/** * Display or retrieve edit tag link with formatting. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int|object $tag Tag object or ID * @return string|null HTML content, if $echo is set to false. */function edit_tag_link( $link = '', $before = '', $after = '', $tag = null ) {	$tax = get_taxonomy('post_tag');	if ( !current_user_can($tax->cap->edit_terms) )		return;	$tag = get_term($tag, 'post_tag');	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_tag_link( $tag->term_id ) . '" title="' . __( 'Edit Tag' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_tag_link', $link, $tag->term_id ) . $after;}/*** Retrieve permalink for search.** @since  3.0.0* @param string $query Optional. The query string to use. If empty the current query is used.* @return string*/function get_search_link( $query = '' ) {	global $wp_rewrite;	if ( empty($query) )		$search = get_search_query( false );	else		$search = stripslashes($query);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty( $permastruct ) ) {		$link = home_url('?s=' . urlencode($search) );	} else {		$search = urlencode($search);		$search = str_replace('%2F', '/', $search); // %2F(/) is not valid within a URL, send it unencoded.		$link = str_replace( '%search%', $search, $permastruct );		$link = home_url( user_trailingslashit( $link, 'search' ) );	}	return apply_filters( 'search_link', $link, $search );}/** * Retrieve the permalink for the feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	$link = get_search_link($search_query);	if ( empty($feed) )		$feed = get_default_feed();	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) ) {		$link = add_query_arg('feed', $feed, $link);	} else {		$link = trailingslashit($link);		$link .= "feed/$feed/";	}	$link = apply_filters('search_feed_link', $link, $feed, 'posts');	return $link;}/** * Retrieve the permalink for the comments feed of the search results. * * @since 2.5.0 * * @param string $search_query Optional. Search query. * @param string $feed Optional. Feed type. * @return string */function get_search_comments_feed_link($search_query = '', $feed = '') {	global $wp_rewrite;	if ( empty($feed) )		$feed = get_default_feed();	$link = get_search_feed_link($search_query, $feed);	$permastruct = $wp_rewrite->get_search_permastruct();	if ( empty($permastruct) )		$link = add_query_arg('feed', 'comments-' . $feed, $link);	else		$link = add_query_arg('withcomments', 1, $link);	$link = apply_filters('search_feed_link', $link, $feed, 'comments');	return $link;}/** * Retrieve edit posts link for post. * * Can be used within the WordPress loop or outside of it. Can be used with * pages, posts, attachments, and revisions. * * @since 2.3.0 * * @param int $id Optional. Post ID. * @param string $context Optional, default to display. How to write the '&', defaults to '&amp;'. * @return string */function get_edit_post_link( $id = 0, $context = 'display' ) {	if ( !$post = &get_post( $id ) )		return;	if ( 'display' == $context )		$action = '&amp;action=edit';	else		$action = '&action=edit';	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->edit_post, $post->ID ) )		return;	return apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );}/** * Display edit post link for post. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $id Optional. Post ID. */function edit_post_link( $link = null, $before = '', $after = '', $id = 0 ) {	if ( !$post = &get_post( $id ) )		return;	if ( !$url = get_edit_post_link( $post->ID ) )		return;	if ( null === $link )		$link = __('Edit This');	$post_type_obj = get_post_type_object( $post->post_type );	$link = '<a class="post-edit-link" href="' . $url . '" title="' . esc_attr( $post_type_obj->labels->edit_item ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_post_link', $link, $post->ID ) . $after;}/** * Retrieve delete posts link for post. * * Can be used within the WordPress loop or outside of it, with any post type. * * @since 2.9.0 * * @param int $id Optional. Post ID. * @param string $deprecated Not used. * @param bool $force_delete Whether to bypass trash and force deletion. Default is false. * @return string */function get_delete_post_link( $id = 0, $deprecated = '', $force_delete = false ) {	if ( ! empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0.0' );	if ( !$post = &get_post( $id ) )		return;	$post_type_object = get_post_type_object( $post->post_type );	if ( !$post_type_object )		return;	if ( !current_user_can( $post_type_object->cap->delete_post, $post->ID ) )		return;	$action = ( $force_delete || !EMPTY_TRASH_DAYS ) ? 'delete' : 'trash';	$delete_link = add_query_arg( 'action', $action, admin_url( sprintf( $post_type_object->_edit_link, $post->ID ) ) );	return apply_filters( 'get_delete_post_link', wp_nonce_url( $delete_link, "$action-{$post->post_type}_{$post->ID}" ), $post->ID, $force_delete );}/** * Retrieve edit comment link. * * @since 2.3.0 * * @param int $comment_id Optional. Comment ID. * @return string */function get_edit_comment_link( $comment_id = 0 ) {	$comment = &get_comment( $comment_id );	$post = &get_post( $comment->comment_post_ID );	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	$location = admin_url('comment.php?action=editcomment&amp;c=') . $comment->comment_ID;	return apply_filters( 'get_edit_comment_link', $location );}/** * Display or retrieve edit comment link with formatting. * * @since 1.0.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @return string|null HTML content, if $echo is set to false. */function edit_comment_link( $link = null, $before = '', $after = '' ) {	global $comment, $post;	if ( $post->post_type == 'page' ) {		if ( !current_user_can( 'edit_page', $post->ID ) )			return;	} else {		if ( !current_user_can( 'edit_post', $post->ID ) )			return;	}	if ( null === $link )		$link = __('Edit This');	$link = '<a class="comment-edit-link" href="' . get_edit_comment_link( $comment->comment_ID ) . '" title="' . __( 'Edit comment' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_comment_link', $link, $comment->comment_ID ) . $after;}/** * Display edit bookmark (literally a URL external to blog) link. * * @since 2.7.0 * * @param int $link Optional. Bookmark ID. * @return string */function get_edit_bookmark_link( $link = 0 ) {	$link = get_bookmark( $link );	if ( !current_user_can('manage_links') )		return;	$location = admin_url('link.php?action=edit&amp;link_id=') . $link->link_id;	return apply_filters( 'get_edit_bookmark_link', $location, $link->link_id );}/** * Display edit bookmark (literally a URL external to blog) link anchor content. * * @since 2.7.0 * * @param string $link Optional. Anchor text. * @param string $before Optional. Display before edit link. * @param string $after Optional. Display after edit link. * @param int $bookmark Optional. Bookmark ID. */function edit_bookmark_link( $link = '', $before = '', $after = '', $bookmark = null ) {	$bookmark = get_bookmark($bookmark);	if ( !current_user_can('manage_links') )		return;	if ( empty($link) )		$link = __('Edit This');	$link = '<a href="' . get_edit_bookmark_link( $link ) . '" title="' . __( 'Edit Link' ) . '">' . $link . '</a>';	echo $before . apply_filters( 'edit_bookmark_link', $link, $bookmark->link_id ) . $after;}// Navigation links/** * Retrieve previous post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_previous_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories);}/** * Retrieve next post link that is adjacent to current post. * * @since 1.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @return string */function get_next_post($in_same_cat = false, $excluded_categories = '') {	return get_adjacent_post($in_same_cat, $excluded_categories, false);}/** * Retrieve adjacent post link. * * Can either be next or previous post link. * * @since 2.5.0 * * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve previous post. * @return string */function get_adjacent_post($in_same_cat = false, $excluded_categories = '', $previous = true) {	global $post, $wpdb;	if ( empty( $post ) )		return null;	$current_post_date = $post->post_date;	$join = '';	$posts_in_ex_cats_sql = '';	if ( $in_same_cat || !empty($excluded_categories) ) {		$join = " INNER JOIN $wpdb->term_relationships AS tr ON p.ID = tr.object_id INNER JOIN $wpdb->term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";		if ( $in_same_cat ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));			$join .= " AND tt.taxonomy = 'category' AND tt.term_id IN (" . implode(',', $cat_array) . ")";		}		$posts_in_ex_cats_sql = "AND tt.taxonomy = 'category'";		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(' and ', $excluded_categories));			if ( !empty($cat_array) ) {				$excluded_categories = array_diff($excluded_categories, $cat_array);				$posts_in_ex_cats_sql = '';			}			if ( !empty($excluded_categories) ) {				$posts_in_ex_cats_sql = " AND tt.taxonomy = 'category' AND tt.term_id NOT IN (" . implode($excluded_categories, ',') . ')';			}		}	}	$adjacent = $previous ? 'previous' : 'next';	$op = $previous ? '<' : '>';	$order = $previous ? 'DESC' : 'ASC';	$join  = apply_filters( "get_{$adjacent}_post_join", $join, $in_same_cat, $excluded_categories );	$where = apply_filters( "get_{$adjacent}_post_where", $wpdb->prepare("WHERE p.post_date $op %s AND p.post_type = %s AND p.post_status = 'publish' $posts_in_ex_cats_sql", $current_post_date, $post->post_type), $in_same_cat, $excluded_categories );	$sort  = apply_filters( "get_{$adjacent}_post_sort", "ORDER BY p.post_date $order LIMIT 1" );	$query = "SELECT p.* FROM $wpdb->posts AS p $join $where $sort";	$query_key = 'adjacent_post_' . md5($query);	$result = wp_cache_get($query_key, 'counts');	if ( false !== $result )		return $result;	$result = $wpdb->get_row("SELECT p.* FROM $wpdb->posts AS p $join $where $sort");	if ( null === $result )		$result = '';	wp_cache_set($query_key, $result, 'counts');	return $result;}/** * Get adjacent post relational link. * * Can either be next or previous post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. * @return string */function get_adjacent_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() && is_object( $GLOBALS['post'] ) )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat,$excluded_categories,$previous);	if ( empty($post) )		return;	if ( empty($post->post_title) )		$post->post_title = $previous ? __('Previous Post') : __('Next Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $previous ? "<link rel='prev' title='" : "<link rel='next' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	$adjacent = $previous ? 'previous' : 'next';	return apply_filters( "{$adjacent}_post_rel_link", $link );}/** * Display relational links for the posts adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function adjacent_posts_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational links for the posts adjacent to the current post for single post pages. * * This is meant to be attached to actions like 'wp_head'.  Do not call this directly in plugins or theme templates. * @since 3.0.0 * */function adjacent_posts_rel_link_wp_head() {	if ( !is_singular() || is_attachment() )		return;	adjacent_posts_rel_link();}/** * Display relational link for the next post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', false);}/** * Display relational link for the previous post adjacent to the current post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function prev_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_adjacent_post_rel_link($title, $in_same_cat, $excluded_categories = '', true);}/** * Retrieve boundary post. * * Boundary being either the first or last post by publish date within the contraitns specified * by in same category or excluded categories. * * @since 2.8.0 * * @param bool $in_same_cat Optional. Whether returned post should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional. Whether to retrieve first post. * @return object */function get_boundary_post($in_same_cat = false, $excluded_categories = '', $start = true) {	global $post;	if ( empty($post) || !is_single() || is_attachment() )		return null;	$cat_array = array();	$excluded_categories = array();	if ( !empty($in_same_cat) || !empty($excluded_categories) ) {		if ( !empty($in_same_cat) ) {			$cat_array = wp_get_object_terms($post->ID, 'category', array('fields' => 'ids'));		}		if ( !empty($excluded_categories) ) {			$excluded_categories = array_map('intval', explode(',', $excluded_categories));			if ( !empty($cat_array) )				$excluded_categories = array_diff($excluded_categories, $cat_array);			$inverse_cats = array();			foreach ( $excluded_categories as $excluded_category)				$inverse_cats[] = $excluded_category * -1;			$excluded_categories = $inverse_cats;		}	}	$categories = implode(',', array_merge($cat_array, $excluded_categories) );	$order = $start ? 'ASC' : 'DESC';	return get_posts( array('numberposts' => 1, 'no_found_rows' => true, 'order' => $order, 'orderby' => 'ID', 'category' => $categories) );}/** * Get boundary post relational link. * * Can either be start or end post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $start Optional, default is true. Whether display link to first post. * @return string */function get_boundary_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '', $start = true) {	$posts = get_boundary_post($in_same_cat,$excluded_categories,$start);	// If there is no post stop.	if ( empty($posts) )		return;	// Even though we limited get_posts to return only 1 item it still returns an array of objects.	$post = $posts[0];	if ( empty($post->post_title) )		$post->post_title = $start ? __('First Post') : __('Last Post');	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = $start ? "<link rel='start' title='" : "<link rel='end' title='";	$link .= esc_attr($title);	$link .= "' href='" . get_permalink($post) . "' />\n";	$boundary = $start ? 'start' : 'end';	return apply_filters( "{$boundary}_post_rel_link", $link );}/** * Display relational link for the first post. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function start_post_rel_link($title = '%title', $in_same_cat = false, $excluded_categories = '') {	echo get_boundary_post_rel_link($title, $in_same_cat, $excluded_categories, true);}/** * Get site index relational link. * * @since 2.8.0 * * @return string */function get_index_rel_link() {	$link = "<link rel='index' title='" . esc_attr( get_bloginfo( 'name', 'display' ) ) . "' href='" . esc_url( user_trailingslashit( get_bloginfo( 'url', 'display' ) ) ) . "' />\n";	return apply_filters( "index_rel_link", $link );}/** * Display relational link for the site index. * * @since 2.8.0 */function index_rel_link() {	echo get_index_rel_link();}/** * Get parent post relational link. * * @since 2.8.0 * * @param string $title Optional. Link title format. * @return string */function get_parent_post_rel_link($title = '%title') {	if ( ! empty( $GLOBALS['post'] ) && ! empty( $GLOBALS['post']->post_parent ) )		$post = & get_post($GLOBALS['post']->post_parent);	if ( empty($post) )		return;	$date = mysql2date(get_option('date_format'), $post->post_date);	$title = str_replace('%title', $post->post_title, $title);	$title = str_replace('%date', $date, $title);	$title = apply_filters('the_title', $title, $post->ID);	$link = "<link rel='up' title='";	$link .= esc_attr( $title );	$link .= "' href='" . get_permalink($post) . "' />\n";	return apply_filters( "parent_post_rel_link", $link );}/** * Display relational link for parent item * * @since 2.8.0 */function parent_post_rel_link($title = '%title') {	echo get_parent_post_rel_link($title);}/** * Display previous post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function previous_post_link($format='&laquo; %link', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, true);}/** * Display next post link that is adjacent to the current post. * * @since 1.5.0 * * @param string $format Optional. Link anchor format. * @param string $link Optional. Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. */function next_post_link($format='%link &raquo;', $link='%title', $in_same_cat = false, $excluded_categories = '') {	adjacent_post_link($format, $link, $in_same_cat, $excluded_categories, false);}/** * Display adjacent post link. * * Can be either next post link or previous. * * @since 2.5.0 * * @param string $format Link anchor format. * @param string $link Link permalink format. * @param bool $in_same_cat Optional. Whether link should be in same category. * @param string $excluded_categories Optional. Excluded categories IDs. * @param bool $previous Optional, default is true. Whether display link to previous post. */function adjacent_post_link($format, $link, $in_same_cat = false, $excluded_categories = '', $previous = true) {	if ( $previous && is_attachment() )		$post = & get_post($GLOBALS['post']->post_parent);	else		$post = get_adjacent_post($in_same_cat, $excluded_categories, $previous);	if ( !$post )		return;	$title = $post->post_title;	if ( empty($post->post_title) )		$title = $previous ? __('Previous Post') : __('Next Post');	$title = apply_filters('the_title', $title, $post->ID);	$date = mysql2date(get_option('date_format'), $post->post_date);	$rel = $previous ? 'prev' : 'next';	$string = '<a href="'.get_permalink($post).'" rel="'.$rel.'">';	$link = str_replace('%title', $title, $link);	$link = str_replace('%date', $date, $link);	$link = $string . $link . '</a>';	$format = str_replace('%link', $link, $format);	$adjacent = $previous ? 'previous' : 'next';	echo apply_filters( "{$adjacent}_post_link", $format, $link );}/** * Retrieve get links for page numbers. * * @since 1.5.0 * * @param int $pagenum Optional. Page ID. * @return string */function get_pagenum_link($pagenum = 1) {	global $wp_rewrite;	$pagenum = (int) $pagenum;	$request = remove_query_arg( 'paged' );	$home_root = parse_url(home_url());	$home_root = ( isset($home_root['path']) ) ? $home_root['path'] : '';	$home_root = preg_quote( trailingslashit( $home_root ), '|' );	$request = preg_replace('|^'. $home_root . '|', '', $request);	$request = preg_replace('|^/+|', '', $request);	if ( !$wp_rewrite->using_permalinks() || is_admin() ) {		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $pagenum > 1 ) {			$result = add_query_arg( 'paged', $pagenum, $base . $request );		} else {			$result = $base . $request;		}	} else {		$qs_regex = '|\?.*?$|';		preg_match( $qs_regex, $request, $qs_match );		if ( !empty( $qs_match[0] ) ) {			$query_string = $qs_match[0];			$request = preg_replace( $qs_regex, '', $request );		} else {			$query_string = '';		}		$request = preg_replace( '|page/\d+/?$|', '', $request);		$request = preg_replace( '|^index\.php|', '', $request);		$request = ltrim($request, '/');		$base = trailingslashit( get_bloginfo( 'url' ) );		if ( $wp_rewrite->using_index_permalinks() && ( $pagenum > 1 || '' != $request ) )			$base .= 'index.php/';		if ( $pagenum > 1 ) {			$request = ( ( !empty( $request ) ) ? trailingslashit( $request ) : $request ) . user_trailingslashit( 'page/' . $pagenum, 'paged' );		}		$result = $base . $request . $query_string;	}	$result = apply_filters('get_pagenum_link', $result);	return $result;}/** * Retrieve next posts pages link. * * Backported from 2.1.3 to 2.0.10. * * @since 2.0.10 * * @param int $max_page Optional. Max pages. * @return string */function get_next_posts_page_link($max_page = 0) {	global $paged;	if ( !is_single() ) {		if ( !$paged )			$paged = 1;		$nextpage = intval($paged) + 1;		if ( !$max_page || $max_page >= $nextpage )			return get_pagenum_link($nextpage);	}}/** * Display or return the next posts pages link. * * @since 0.71 * * @param int $max_page Optional. Max pages. * @param boolean $echo Optional. Echo or return; */function next_posts( $max_page = 0, $echo = true ) {	$output = esc_url( get_next_posts_page_link( $max_page ) );	if ( $echo )		echo $output;	else		return $output;}/** * Return the next posts pages link. * * @since 2.7.0 * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. * @return string|null */function get_next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	global $paged, $wp_query;	if ( !$max_page )		$max_page = $wp_query->max_num_pages;	if ( !$paged )		$paged = 1;	$nextpage = intval($paged) + 1;	if ( !is_single() && ( empty($paged) || $nextpage <= $max_page) ) {		$attr = apply_filters( 'next_posts_link_attributes', '' );		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';	}}/** * Display the next posts pages link. * * @since 0.71 * @uses get_next_posts_link() * * @param string $label Content for link text. * @param int $max_page Optional. Max pages. */function next_posts_link( $label = 'Next Page &raquo;', $max_page = 0 ) {	echo get_next_posts_link( $label, $max_page );}/** * Retrieve previous post pages link. * * Will only return string, if not on a single page or post. * * Backported to 2.0.10 from 2.1.3. * * @since 2.0.10 * * @return string|null */function get_previous_posts_page_link() {	global $paged;	if ( !is_single() ) {		$nextpage = intval($paged) - 1;		if ( $nextpage < 1 )			$nextpage = 1;		return get_pagenum_link($nextpage);	}}/** * Display or return the previous posts pages link. * * @since 0.71 * * @param boolean $echo Optional. Echo or return; */function previous_posts( $echo = true ) {	$output = esc_url( get_previous_posts_page_link() );	if ( $echo )		echo $output;	else		return $output;}/** * Return the previous posts pages link. * * @since 2.7.0 * * @param string $label Optional. Previous page link text. * @return string|null */function get_previous_posts_link( $label = '&laquo; Previous Page' ) {	global $paged;	if ( !is_single() && $paged > 1 ) {		$attr = apply_filters( 'previous_posts_link_attributes', '' );		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/', '&#038;$1', $label ) .'</a>';	}}/** * Display the previous posts page link. * * @since 0.71 * @uses get_previous_posts_link() * * @param string $label Optional. Previous page link text. */function previous_posts_link( $label = '&laquo; Previous Page' ) {	echo get_previous_posts_link( $label );}/** * Return post pages link navigation for previous and next pages. * * @since 2.8 * * @param string|array $args Optional args. * @return string The posts link navigation. */function get_posts_nav_link( $args = array() ) {	global $wp_query;	$return = '';	if ( !is_singular() ) {		$defaults = array(			'sep' => ' &#8212; ',			'prelabel' => __('&laquo; Previous Page'),			'nxtlabel' => __('Next Page &raquo;'),		);		$args = wp_parse_args( $args, $defaults );		$max_num_pages = $wp_query->max_num_pages;		$paged = get_query_var('paged');		//only have sep if there's both prev and next results		if ($paged < 2 || $paged >= $max_num_pages) {			$args['sep'] = '';		}		if ( $max_num_pages > 1 ) {			$return = get_previous_posts_link($args['prelabel']);			$return .= preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $args['sep']);			$return .= get_next_posts_link($args['nxtlabel']);		}	}	return $return;}/** * Display post pages link navigation for previous and next pages. * * @since 0.71 * * @param string $sep Optional. Separator for posts navigation links. * @param string $prelabel Optional. Label for previous pages. * @param string $nxtlabel Optional Label for next pages. */function posts_nav_link( $sep = '', $prelabel = '', $nxtlabel = '' ) {	$args = array_filter( compact('sep', 'prelabel', 'nxtlabel') );	echo get_posts_nav_link($args);}/** * Retrieve page numbers links. * * @since 2.7.0 * * @param int $pagenum Optional. Page number. * @return string */function get_comments_pagenum_link( $pagenum = 1, $max_page = 0 ) {	global $post, $wp_rewrite;	$pagenum = (int) $pagenum;	$result = get_permalink( $post->ID );	if ( 'newest' == get_option('default_comments_page') ) {		if ( $pagenum != $max_page ) {			if ( $wp_rewrite->using_permalinks() )				$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');			else				$result = add_query_arg( 'cpage', $pagenum, $result );		}	} elseif ( $pagenum > 1 ) {		if ( $wp_rewrite->using_permalinks() )			$result = user_trailingslashit( trailingslashit($result) . 'comment-page-' . $pagenum, 'commentpaged');		else			$result = add_query_arg( 'cpage', $pagenum, $result );	}	$result .= '#comments';	$result = apply_filters('get_comments_pagenum_link', $result);	return $result;}/** * Return the link to next comments pages. * * @since 2.7.1 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. * @return string|null */function get_next_comments_link( $label = '', $max_page = 0 ) {	global $wp_query;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	$nextpage = intval($page) + 1;	if ( empty($max_page) )		$max_page = $wp_query->max_num_comment_pages;	if ( empty($max_page) )		$max_page = get_comment_pages_count();	if ( $nextpage > $max_page )		return;	if ( empty($label) )		$label = __('Newer Comments &raquo;');	return '<a href="' . esc_url( get_comments_pagenum_link( $nextpage, $max_page ) ) . '" ' . apply_filters( 'next_comments_link_attributes', '' ) . '>'. preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the link to next comments pages. * * @since 2.7.0 * * @param string $label Optional. Label for link text. * @param int $max_page Optional. Max page. */function next_comments_link( $label = '', $max_page = 0 ) {	echo get_next_comments_link( $label, $max_page );}/** * Return the previous comments page link. * * @since 2.7.1 * * @param string $label Optional. Label for comments link text. * @return string|null */function get_previous_comments_link( $label = '' ) {	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( intval($page) <= 1 )		return;	$prevpage = intval($page) - 1;	if ( empty($label) )		$label = __('&laquo; Older Comments');	return '<a href="' . esc_url( get_comments_pagenum_link( $prevpage ) ) . '" ' . apply_filters( 'previous_comments_link_attributes', '' ) . '>' . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) .'</a>';}/** * Display the previous comments page link. * * @since 2.7.0 * * @param string $label Optional. Label for comments link text. */function previous_comments_link( $label = '' ) {	echo get_previous_comments_link( $label );}/** * Create pagination links for the comments on the current post. * * @see paginate_links() * @since 2.7.0 * * @param string|array $args Optional args. See paginate_links. * @return string Markup for pagination links.*/function paginate_comments_links($args = array()) {	global $wp_rewrite;	if ( !is_singular() || !get_option('page_comments') )		return;	$page = get_query_var('cpage');	if ( !$page )		$page = 1;	$max_page = get_comment_pages_count();	$defaults = array(		'base' => add_query_arg( 'cpage', '%#%' ),		'format' => '',		'total' => $max_page,		'current' => $page,		'echo' => true,		'add_fragment' => '#comments'	);	if ( $wp_rewrite->using_permalinks() )		$defaults['base'] = user_trailingslashit(trailingslashit(get_permalink()) . 'comment-page-%#%', 'commentpaged');	$args = wp_parse_args( $args, $defaults );	$page_links = paginate_links( $args );	if ( $args['echo'] )		echo $page_links;	else		return $page_links;}/** * Retrieve shortcut link. * * Use this in 'a' element 'href' attribute. * * @since 2.6.0 * * @return string */function get_shortcut_link() {	$link = "javascript:			var d=document,			w=window,			e=w.getSelection,			k=d.getSelection,			x=d.selection,			s=(e?e():(k)?k():(x?x.createRange().text:0)),			f='" . admin_url('press-this.php') . "',			l=d.location,			e=encodeURIComponent,			u=f+'?u='+e(l.href)+'&t='+e(d.title)+'&s='+e(s)+'&v=4';			a=function(){if(!w.open(u,'t','toolbar=0,resizable=1,scrollbars=1,status=1,width=720,height=570'))l.href=u;};			if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0); else a();			void(0)";	$link = str_replace(array("\r", "\n", "\t"),  '', $link);	return apply_filters('shortcut_link', $link);}/** * Retrieve the home url for the current site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @uses get_home_url() * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function home_url( $path = '', $scheme = null ) {	return get_home_url(null, $path, $scheme);}/** * Retrieve the home url for a given site. * * Returns the 'home' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  int $blog_id   (optional) Blog ID. Defaults to current blog. * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function get_home_url( $blog_id = null, $path = '', $scheme = null ) {	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	if ( empty( $blog_id ) || !is_multisite() )		$home = get_option( 'home' );	else		$home = get_blog_option( $blog_id, 'home' );	$url = str_replace( 'http://', "$scheme://", $home );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'home_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the site url for the current site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 2.6.0 * * @uses get_site_url() * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function site_url( $path = '', $scheme = null ) {	return get_site_url(null, $path, $scheme);}/** * Retrieve the site url for a given site. * * Returns the 'site_url' option with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function get_site_url( $blog_id = null, $path = '', $scheme = null ) {	// should the list of allowed schemes be maintained elsewhere?	$orig_scheme = $scheme;	if ( !in_array( $scheme, array( 'http', 'https' ) ) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ( 'login' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		elseif ( ( 'admin' == $scheme ) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	if ( empty( $blog_id ) || !is_multisite() )		$url = get_option( 'siteurl' );	else		$url = get_blog_option( $blog_id, 'siteurl' );	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= '/' . ltrim( $path, '/' );	return apply_filters( 'site_url', $url, $path, $orig_scheme, $blog_id );}/** * Retrieve the url to the admin area for the current site. * * @package WordPress * @since 2.6.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function admin_url( $path = '', $scheme = 'admin' ) {	return get_admin_url(null, $path, $scheme);}/** * Retrieve the url to the admin area for a given site. * * @package WordPress * @since 3.0.0 * * @param int $blog_id (optional) Blog ID. Defaults to current blog. * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function get_admin_url( $blog_id = null, $path = '', $scheme = 'admin' ) {	$url = get_site_url($blog_id, 'wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('admin_url', $url, $path, $blog_id);}/** * Retrieve the url to the includes directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the includes url. * @return string Includes url link with optional path appended.*/function includes_url($path = '') {	$url = site_url() . '/' . WPINC . '/';	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('includes_url', $url, $path);}/** * Retrieve the url to the content directory. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the content url. * @return string Content url link with optional path appended.*/function content_url($path = '') {	$url = WP_CONTENT_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('content_url', $url, $path);}/** * Retrieve the url to the plugins directory or to a specific file within that directory. * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name. * * @package WordPress * @since 2.6.0 * * @param string $path Optional. Path relative to the plugins url. * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__ * @return string Plugins url link with optional path appended.*/function plugins_url($path = '', $plugin = '') {	$mu_plugin_dir = WPMU_PLUGIN_DIR;	foreach ( array('path', 'plugin', 'mu_plugin_dir') as $var ) {		$$var = str_replace('\\' ,'/', $$var); // sanitize for Win32 installs		$$var = preg_replace('|/+|', '/', $$var);	}	if ( !empty($plugin) && 0 === strpos($plugin, $mu_plugin_dir) )		$url = WPMU_PLUGIN_URL;	else		$url = WP_PLUGIN_URL;	if ( 0 === strpos($url, 'http') && is_ssl() )		$url = str_replace( 'http://', 'https://', $url );	if ( !empty($plugin) && is_string($plugin) ) {		$folder = dirname(plugin_basename($plugin));		if ( '.' != $folder )			$url .= '/' . ltrim($folder, '/');	}	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= '/' . ltrim($path, '/');	return apply_filters('plugins_url', $url, $path, $plugin);}/** * Retrieve the site url for the current network. * * Returns the site url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param string $path Optional. Path relative to the site url. * @param string $scheme Optional. Scheme to give the site url context. Currently 'http','https', 'login', 'login_post', or 'admin'. * @return string Site url link with optional path appended.*/function network_site_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return site_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) ) {		if ( ( 'login_post' == $scheme || 'rpc' == $scheme ) && ( force_ssl_login() || force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('login' == $scheme) && ( force_ssl_admin() ) )			$scheme = 'https';		elseif ( ('admin' == $scheme) && force_ssl_admin() )			$scheme = 'https';		else			$scheme = ( is_ssl() ? 'https' : 'http' );	}	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "{$scheme}://", $url );	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_site_url', $url, $path, $orig_scheme);}/** * Retrieve the home url for the current network. * * Returns the home url with the appropriate protocol,  'https' if * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is * overridden. * * @package WordPress * @since 3.0.0 * * @param  string $path   (optional) Path relative to the home url. * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http','https' * @return string Home url link with optional path appended.*/function network_home_url( $path = '', $scheme = null ) {	global $current_site;	if ( !is_multisite() )		return home_url($path, $scheme);	$orig_scheme = $scheme;	if ( !in_array($scheme, array('http', 'https')) )		$scheme = is_ssl() && !is_admin() ? 'https' : 'http';	$url = 'http://' . $current_site->domain . $current_site->path;	$url = str_replace( 'http://', "$scheme://", $url );	if ( !empty( $path ) && is_string( $path ) && strpos( $path, '..' ) === false )		$url .= ltrim( $path, '/' );	return apply_filters( 'network_home_url', $url, $path, $orig_scheme);}/** * Retrieve the url to the admin area for the network. * * @package WordPress * @since 3.0.0 * * @param string $path Optional path relative to the admin url * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes. * @return string Admin url link with optional path appended*/function network_admin_url( $path = '', $scheme = 'admin' ) {	$url = network_site_url('wp-admin/', $scheme);	if ( !empty($path) && is_string($path) && strpos($path, '..') === false )		$url .= ltrim($path, '/');	return apply_filters('network_admin_url', $url, $path);}/** * Output rel=canonical for singular queries * * @package WordPress * @since 2.9.0*/function rel_canonical() {	if ( !is_singular() )		return;	global $wp_the_query;	if ( !$id = $wp_the_query->get_queried_object_id() )		return;	$link = get_permalink( $id );	echo "<link rel='canonical' href='$link' />\n";}/** * Return a shortlink for a post, page, attachment, or blog. * * This function exists to provide a shortlink tag that all themes and plugins can target.  A plugin must hook in to * provide the actual shortlinks.  Default shortlink support is limited to providing ?p= style links for posts. * Plugins can short circuit this function via the pre_get_shortlink filter or filter the output * via the get_shortlink filter. * * @since 3.0.0. * * @param int $id A post or blog id.  Default is 0, which means the current post or blog. * @param string $contex Whether the id is a 'blog' id, 'post' id, or 'media' id.  If 'post', the post_type of the post is consulted.  If 'query', the current query is consulted to determine the id and context. Default is 'post'. * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. */function wp_get_shortlink($id = 0, $context = 'post', $allow_slugs = true) {	// Allow plugins to short-circuit this function.	$shortlink = apply_filters('pre_get_shortlink', false, $id, $context, $allow_slugs);	if ( false !== $shortlink )		return $shortlink;	global $wp_query;	$post_id = 0;	if ( 'query' == $context && is_single() ) {		$post_id = $wp_query->get_queried_object_id();	} elseif ( 'post' == $context ) {		$post = get_post($id);		$post_id = $post->ID;	}	$shortlink = '';	// Return p= link for posts.	if ( !empty($post_id) && '' != get_option('permalink_structure') ) {		$post = get_post($post_id);		if ( isset($post->post_type) && 'post' == $post->post_type )			$shortlink = home_url('?p=' . $post->ID);	}	return apply_filters('get_shortlink', $shortlink, $id, $context, $allow_slugs);}/** *  Inject rel=sortlink into head if a shortlink is defined for the current page. * *  Attached to the wp_head action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_wp_head() {	$shortlink = wp_get_shortlink( 0, 'query' );	if ( empty( $shortlink ) )		return;	echo "<link rel='shortlink' href='" . esc_url_raw( $shortlink ) . "' />\n";}/** * Send a Link: rel=shortlink header if a shortlink is defined for the current page. * * Attached to the wp action. * * @since 3.0.0 * * @uses wp_get_shortlink() */function wp_shortlink_header() {    if ( headers_sent() )		return;	$shortlink = wp_get_shortlink(0, 'query');	if ( empty($shortlink) )		return;	header('Link: <' . $shortlink . '>; rel=shortlink', false);}/** * Display the Short Link for a Post * * Must be called from inside "The Loop" * * Call like the_shortlink(__('Shortlinkage FTW')) * * @since 3.0.0 * * @param string $text Optional The link text or HTML to be displayed.  Defaults to 'This is the short link.' * @param string $title Optional The tooltip for the link.  Must be sanitized.  Defaults to the sanitized post title. * @param string $before Optional HTML to display before the link. * @param string $before Optional HTML to display after the link. */function the_shortlink( $text = '', $title = '', $before = '', $after = '' ) {	global $post;	if ( empty( $text ) )		$text = __('This is the short link.');	if ( empty( $title ) )		$title = the_title_attribute( array( 'echo' => FALSE ) );	$shortlink = wp_get_shortlink( $post->ID );	if ( !empty( $shortlink ) ) {		$link = '<a rel="shortlink" href="' . esc_url( $shortlink ) . '" title="' . $title . '">' . $text . '</a>';		$link = apply_filters( 'the_shortlink', $link, $shortlink, $text, $title );		echo $before, $link, $after;	}}?>
<?php/** * General template tags that can go anywhere in a template. * * @package WordPress * @subpackage Template *//** * Load header template. * * Includes the header template for a theme or if a name is specified then a * specialised header will be included. * * For the parameter, if the file is called "header-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_header' action. * * @param string $name The name of the specialised header. */function get_header( $name = null ) {	do_action( 'get_header', $name );	$templates = array();	if ( isset($name) )		$templates[] = "header-{$name}.php";	$templates[] = "header.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/header.php');}/** * Load footer template. * * Includes the footer template for a theme or if a name is specified then a * specialised footer will be included. * * For the parameter, if the file is called "footer-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_footer' action. * * @param string $name The name of the specialised footer. */function get_footer( $name = null ) {	do_action( 'get_footer', $name );	$templates = array();	if ( isset($name) )		$templates[] = "footer-{$name}.php";	$templates[] = "footer.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/footer.php');}/** * Load sidebar template. * * Includes the sidebar template for a theme or if a name is specified then a * specialised sidebar will be included. * * For the parameter, if the file is called "sidebar-special.php" then specify * "special". * * @uses locate_template() * @since 1.5.0 * @uses do_action() Calls 'get_sidebar' action. * * @param string $name The name of the specialised sidebar. */function get_sidebar( $name = null ) {	do_action( 'get_sidebar', $name );	$templates = array();	if ( isset($name) )		$templates[] = "sidebar-{$name}.php";	$templates[] = "sidebar.php";	// Backward compat code will be removed in a future release	if ('' == locate_template($templates, true))		load_template( WPINC . '/theme-compat/sidebar.php');}/** * Load a template part into a template * * Makes it easy for a theme to reuse sections of code in a easy to overload way * for child themes. * * Includes the named template part for a theme or if a name is specified then a * specialised part will be included. If the theme contains no {slug}.php file * then no template will be included. * * The template is included using require, not require_once, so you may include the * same template part multiple times. * * For the parameter, if the file is called "{slug}-special.php" then specify * "special". * * @uses locate_template() * @since 3.0.0 * @uses do_action() Calls 'get_template_part{$slug}' action. * * @param string $slug The slug name for the generic template. * @param string $name The name of the specialised template. */function get_template_part( $slug, $name = null ) {	do_action( "get_template_part_{$slug}", $slug, $name );	$templates = array();	if ( isset($name) )		$templates[] = "{$slug}-{$name}.php";	$templates[] = "{$slug}.php";	locate_template($templates, true, false);}/** * Display search form. * * Will first attempt to locate the searchform.php file in either the child or * the parent, then load it. If it doesn't exist, then the default search form * will be displayed. The default search form is HTML, which will be displayed. * There is a filter applied to the search form HTML in order to edit or replace * it. The filter is 'get_search_form'. * * This function is primarily used by themes which want to hardcode the search * form into the sidebar and also by the search widget in WordPress. * * There is also an action that is called whenever the function is run called, * 'get_search_form'. This can be useful for outputting JavaScript that the * search relies on or various formatting that applies to the beginning of the * search. To give a few examples of what it can be used for. * * @since 2.7.0 * @param boolean $echo Default to echo and not return the form. */function get_search_form($echo = true) {	do_action( 'get_search_form' );	$search_form_template = locate_template(array('searchform.php'));	if ( '' != $search_form_template ) {		require($search_form_template);		return;	}	$form = '<form role="search" method="get" id="searchform" action="' . home_url( '/' ) . '" >	<div><label class="screen-reader-text" for="s">' . __('Search for:') . '</label>	<input type="text" value="' . get_search_query() . '" name="s" id="s" />	<input type="submit" id="searchsubmit" value="'. esc_attr__('Search') .'" />	</div>	</form>';	if ( $echo )		echo apply_filters('get_search_form', $form);	else		return apply_filters('get_search_form', $form);}/** * Display the Log In/Out link. * * Displays a link, which allows users to navigate to the Log In page to log in * or log out depending on whether they are currently logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'loginout' hook on HTML link content. * * @param string $redirect Optional path to redirect to on login/logout. * @param boolean $echo Default to echo and not return the link. */function wp_loginout($redirect = '', $echo = true) {	if ( ! is_user_logged_in() )		$link = '<a href="' . esc_url( wp_login_url($redirect) ) . '">' . __('Log in') . '</a>';	else		$link = '<a href="' . esc_url( wp_logout_url($redirect) ) . '">' . __('Log out') . '</a>';	if ( $echo )		echo apply_filters('loginout', $link);	else		return apply_filters('loginout', $link);}/** * Returns the Log Out URL. * * Returns the URL that allows the user to log out of the site * * @since 2.7 * @uses wp_nonce_url() To protect against CSRF * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'logout_url' hook on final logout url * * @param string $redirect Path to redirect to on logout. */function wp_logout_url($redirect = '') {	$args = array( 'action' => 'logout' );	if ( !empty($redirect) ) {		$args['redirect_to'] = urlencode( $redirect );	}	$logout_url = add_query_arg($args, site_url('wp-login.php', 'login'));	$logout_url = wp_nonce_url( $logout_url, 'log-out' );	return apply_filters('logout_url', $logout_url, $redirect);}/** * Returns the Log In URL. * * Returns the URL that allows the user to log in to the site * * @since 2.7 * @uses site_url() To generate the log in URL * @uses apply_filters() calls 'login_url' hook on final login url * * @param string $redirect Path to redirect to on login. * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false. * @return string A log in url */function wp_login_url($redirect = '', $force_reauth = false) {	$login_url = site_url('wp-login.php', 'login');	if ( !empty($redirect) )		$login_url = add_query_arg('redirect_to', urlencode($redirect), $login_url);	if ( $force_reauth )		$login_url = add_query_arg('reauth', '1', $login_url);	return apply_filters('login_url', $login_url, $redirect);}/** * Provides a simple login form for use anywhere within WordPress. By default, it echoes * the HTML immediately. Pass array('echo'=>false) to return the string instead. * * @since 3.0.0 * @param array $args Configuration options to modify the form output * @return Void, or string containing the form */function wp_login_form( $args = array() ) {	$defaults = array( 'echo' => true,						'redirect' => site_url( $_SERVER['REQUEST_URI'] ), // Default redirect is back to the current page	 					'form_id' => 'loginform',						'label_username' => __( 'Username' ),						'label_password' => __( 'Password' ),						'label_remember' => __( 'Remember Me' ),						'label_log_in' => __( 'Log In' ),						'id_username' => 'user_login',						'id_password' => 'user_pass',						'id_remember' => 'rememberme',						'id_submit' => 'wp-submit',						'remember' => true,						'value_username' => '',						'value_remember' => false, // Set this to true to default the "Remember me" checkbox to checked					);	$args = wp_parse_args( $args, apply_filters( 'login_form_defaults', $defaults ) );	$form = '		<form name="' . $args['form_id'] . '" id="' . $args['form_id'] . '" action="' . site_url( 'wp-login.php', 'login' ) . '" method="post">			' . apply_filters( 'login_form_top', '' ) . '			<p class="login-username">				<label for="' . esc_attr( $args['id_username'] ) . '">' . esc_html( $args['label_username'] ) . '</label>				<input type="text" name="log" id="' . esc_attr( $args['id_username'] ) . '" class="input" value="' . esc_attr( $args['value_username'] ) . '" size="20" tabindex="10" />			</p>			<p class="login-password">				<label for="' . esc_attr( $args['id_password'] ) . '">' . esc_html( $args['label_password'] ) . '</label>				<input type="password" name="pwd" id="' . esc_attr( $args['id_password'] ) . '" class="input" value="" size="20" tabindex="20" />			</p>			' . apply_filters( 'login_form_middle', '' ) . '			' . ( $args['remember'] ? '<p class="login-remember"><label><input name="rememberme" type="checkbox" id="' . esc_attr( $args['id_remember'] ) . '" value="forever" tabindex="90"' . ( $args['value_remember'] ? ' checked="checked"' : '' ) . ' /> ' . esc_html( $args['label_remember'] ) . '</label></p>' : '' ) . '			<p class="login-submit">				<input type="submit" name="wp-submit" id="' . esc_attr( $args['id_submit'] ) . '" class="button-primary" value="' . esc_attr( $args['label_log_in'] ) . '" tabindex="100" />				<input type="hidden" name="redirect_to" value="' . esc_attr( $args['redirect'] ) . '" />			</p>			' . apply_filters( 'login_form_bottom', '' ) . '		</form>';	if ( $args['echo'] )		echo $form;	else		return $form;}/** * Returns the Lost Password URL. * * Returns the URL that allows the user to retrieve the lost password * * @since 2.8.0 * @uses site_url() To generate the lost password URL * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url * * @param string $redirect Path to redirect to on login. */function wp_lostpassword_url($redirect = '') {	$args = array( 'action' => 'lostpassword' );	if ( !empty($redirect) ) {		$args['redirect_to'] = $redirect;	}	$lostpassword_url = add_query_arg($args, site_url('wp-login.php', 'login'));	return apply_filters('lostpassword_url', $lostpassword_url, $redirect);}/** * Display the Registration or Admin link. * * Display a link which allows the user to navigate to the registration page if * not logged in and registration is enabled or to the dashboard if logged in. * * @since 1.5.0 * @uses apply_filters() Calls 'register' hook on register / admin link content. * * @param string $before Text to output before the link (defaults to <li>). * @param string $after Text to output after the link (defaults to </li>). * @param boolean $echo Default to echo and not return the link. */function wp_register( $before = '<li>', $after = '</li>', $echo = true ) {	if ( ! is_user_logged_in() ) {		if ( get_option('users_can_register') )			$link = $before . '<a href="' . site_url('wp-login.php?action=register', 'login') . '">' . __('Register') . '</a>' . $after;		else			$link = '';	} else {		$link = $before . '<a href="' . admin_url() . '">' . __('Site Admin') . '</a>' . $after;	}	if ( $echo )		echo apply_filters('register', $link);	else		return apply_filters('register', $link);}/** * Theme container function for the 'wp_meta' action. * * The 'wp_meta' action can have several purposes, depending on how you use it, * but one purpose might have been to allow for theme switching. * * @since 1.5.0 * @link http://trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action. * @uses do_action() Calls 'wp_meta' hook. */function wp_meta() {	do_action('wp_meta');}/** * Display information about the blog. * * @see get_bloginfo() For possible values for the parameter. * @since 0.71 * * @param string $show What to display. */function bloginfo( $show='' ) {	echo get_bloginfo( $show, 'display' );}/** * Retrieve information about the blog. * * Some show parameter values are deprecated and will be removed in future * versions. These options will trigger the _deprecated_argument() function. * The deprecated blog info options are listed in the function contents. * * The possible values for the 'show' parameter are listed below. * <ol> * <li><strong>url<strong> - Blog URI to homepage.</li> * <li><strong>wpurl</strong> - Blog URI path to WordPress.</li> * <li><strong>description</strong> - Secondary title</li> * </ol> * * The feed URL options can be retrieved from 'rdf_url' (RSS 0.91), * 'rss_url' (RSS 1.0), 'rss2_url' (RSS 2.0), or 'atom_url' (Atom feed). The * comment feeds can be retrieved from the 'comments_atom_url' (Atom comment * feed) or 'comments_rss2_url' (RSS 2.0 comment feed). * * @since 0.71 * * @param string $show Blog info to retrieve. * @param string $filter How to filter what is retrieved. * @return string Mostly string values, might be empty. */function get_bloginfo( $show = '', $filter = 'raw' ) {	switch( $show ) {		case 'home' : // DEPRECATED		case 'siteurl' : // DEPRECATED			_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> option instead.' ), 'url'  ) );		case 'url' :			$output = home_url();			break;		case 'wpurl' :			$output = site_url();			break;		case 'description':			$output = get_option('blogdescription');			break;		case 'rdf_url':			$output = get_feed_link('rdf');			break;		case 'rss_url':			$output = get_feed_link('rss');			break;		case 'rss2_url':			$output = get_feed_link('rss2');			break;		case 'atom_url':			$output = get_feed_link('atom');			break;		case 'comments_atom_url':			$output = get_feed_link('comments_atom');			break;		case 'comments_rss2_url':			$output = get_feed_link('comments_rss2');			break;		case 'pingback_url':			$output = get_option('siteurl') .'/xmlrpc.php';			break;		case 'stylesheet_url':			$output = get_stylesheet_uri();			break;		case 'stylesheet_directory':			$output = get_stylesheet_directory_uri();			break;		case 'template_directory':		case 'template_url':			$output = get_template_directory_uri();			break;		case 'admin_email':			$output = get_option('admin_email');			break;		case 'charset':			$output = get_option('blog_charset');			if ('' == $output) $output = 'UTF-8';			break;		case 'html_type' :			$output = get_option('html_type');			break;		case 'version':			global $wp_version;			$output = $wp_version;			break;		case 'language':			$output = get_locale();			$output = str_replace('_', '-', $output);			break;		case 'text_direction':			//_deprecated_argument( __FUNCTION__, '2.2', sprintf( __('The <code>%s</code> option is deprecated for the family of <code>bloginfo()</code> functions.' ), $show ) . ' ' . sprintf( __( 'Use the <code>%s</code> function instead.' ), 'is_rtl()'  ) );			if ( function_exists( 'is_rtl' ) ) {				$output = is_rtl() ? 'rtl' : 'ltr';			} else {				$output = 'ltr';			}			break;		case 'name':		default:			$output = get_option('blogname');			break;	}	$url = true;	if (strpos($show, 'url') === false &&		strpos($show, 'directory') === false &&		strpos($show, 'home') === false)		$url = false;	if ( 'display' == $filter ) {		if ( $url )			$output = apply_filters('bloginfo_url', $output, $show);		else			$output = apply_filters('bloginfo', $output, $show);	}	return $output;}/** * Display or retrieve page title for all areas of blog. * * By default, the page title will display the separator before the page title, * so that the blog title will be before the page title. This is not good for * title display, since the blog title shows up on most tabs and not what is * important, which is the page that the user is looking at. * * There are also SEO benefits to having the blog title after or to the 'right' * or the page title. However, it is mostly common sense to have the blog title * to the right with most browsers supporting tabs. You can achieve this by * using the seplocation parameter and setting the value to 'right'. This change * was introduced around 2.5.0, in case backwards compatibility of themes is * important. * * @since 1.0.0 * * @param string $sep Optional, default is '&raquo;'. How to separate the various items within the page title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @param string $seplocation Optional. Direction to display title, 'right'. * @return string|null String on retrieve, null when displaying. */function wp_title($sep = '&raquo;', $display = true, $seplocation = '') {	global $wpdb, $wp_locale, $wp_query;	$cat = get_query_var('cat');	$tag = get_query_var('tag_id');	$category_name = get_query_var('category_name');	$author = get_query_var('author');	$author_name = get_query_var('author_name');	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	$day = get_query_var('day');	$search = get_query_var('s');	$title = '';	$t_sep = '%WP_TITILE_SEP%'; // Temporary separator, for accurate flipping, if necessary	// If there's a category	if ( !empty($cat) ) {			// category exclusion			if ( !stristr($cat,'-') )				$title = apply_filters('single_cat_title', get_the_category_by_ID($cat));	} elseif ( !empty($category_name) ) {		if ( stristr($category_name,'/') ) {				$category_name = explode('/',$category_name);				if ( $category_name[count($category_name)-1] )					$category_name = $category_name[count($category_name)-1]; // no trailing slash				else					$category_name = $category_name[count($category_name)-2]; // there was a trailling slash		}		$cat = get_term_by('slug', $category_name, 'category', OBJECT, 'display');		if ( $cat )			$title = apply_filters('single_cat_title', $cat->name);	}	if ( !empty($tag) ) {		$tag = get_term($tag, 'post_tag', OBJECT, 'display');		if ( is_wp_error( $tag ) )			return $tag;		if ( ! empty($tag->name) )			$title = apply_filters('single_tag_title', $tag->name);	}	// If there's an author	if ( !empty($author) ) {		$title = get_userdata($author);		$title = $title->display_name;	}	if ( !empty($author_name) ) {		// We do a direct query here because we don't cache by nicename.		$title = $wpdb->get_var($wpdb->prepare("SELECT display_name FROM $wpdb->users WHERE user_nicename = %s", $author_name));	}	// If there's a month	if ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));		$my_day = intval(substr($m, 6, 2));		$title = $my_year . ($my_month ? $t_sep . $my_month : "") . ($my_day ? $t_sep . $my_day : "");	}	if ( !empty($year) ) {		$title = $year;		if ( !empty($monthnum) )			$title .= $t_sep . $wp_locale->get_month($monthnum);		if ( !empty($day) )			$title .= $t_sep . zeroise($day, 2);	}	// If there is a post	if ( is_single() || ( is_home() && !is_front_page() ) || ( is_page() && !is_front_page() ) ) {		$post = $wp_query->get_queried_object();		$title = apply_filters( 'single_post_title', $post->post_title );	}	// If there's a taxonomy	if ( is_tax() ) {		$taxonomy = get_query_var( 'taxonomy' );		$tax = get_taxonomy( $taxonomy );		$term = $wp_query->get_queried_object();		$term = $term->name;		$title = $tax->labels->name . $t_sep . $term;	}	//If it's a search	if ( is_search() ) {		/* translators: 1: separator, 2: search phrase */		$title = sprintf(__('Search Results %1$s %2$s'), $t_sep, strip_tags($search));	}	if ( is_404() ) {		$title = __('Page not found');	}	$prefix = '';	if ( !empty($title) )		$prefix = " $sep "; 	// Determines position of the separator and direction of the breadcrumb	if ( 'right' == $seplocation ) { // sep on right, so reverse the order		$title_array = explode( $t_sep, $title );		$title_array = array_reverse( $title_array );		$title = implode( " $sep ", $title_array ) . $prefix;	} else {		$title_array = explode( $t_sep, $title );		$title = $prefix . implode( " $sep ", $title_array );	}	$title = apply_filters('wp_title', $title, $sep, $seplocation);	// Send it out	if ( $display )		echo $title;	else		return $title;}/** * Display or retrieve page title for post. * * This is optimized for single.php template file for displaying the post title. * Only useful for posts, does not support pages for example. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * @uses $wpdb * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_post_title($prefix = '', $display = true) {	global $wp_query, $post;	if ( ! $post )		$_post = $wp_query->get_queried_object();	else		$_post = $post;	if ( !isset($_post->post_title) )		return;	$title = apply_filters('single_post_title', $_post->post_title, $_post);	if ( $display )		echo $prefix . $title;	else		return $title;}/** * Display or retrieve page title for category archive. * * This is useful for category template file or files, because it is optimized * for category page title and with less overhead than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_cat_title($prefix = '', $display = true ) {	global $wp_query;	if ( is_tag() )		return single_tag_title($prefix, $display);	if ( !is_category() )		return;	$cat = $wp_query->get_queried_object();	$my_cat_name = apply_filters('single_cat_title', $cat->name);	if ( !empty($my_cat_name) ) {		if ( $display )			echo $prefix . $my_cat_name;		else			return $my_cat_name;	}}/** * Display or retrieve page title for tag post archive. * * Useful for tag template files for displaying the tag page title. It has less * overhead than {@link wp_title()}, because of its limited implementation. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 2.3.0 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_tag_title($prefix = '', $display = true ) {	global $wp_query;	if ( !is_tag() )		return;	$tag = $wp_query->get_queried_object();	if ( ! $tag )		return;	$my_tag_name = apply_filters('single_tag_title', $tag->name);	if ( !empty($my_tag_name) ) {		if ( $display )			echo $prefix . $my_tag_name;		else			return $my_tag_name;	}}/** * Display or retrieve page title for post archive based on date. * * Useful for when the template only needs to display the month and year, if * either are available. Optimized for just this purpose, so if it is all that * is needed, should be better than {@link wp_title()}. * * It does not support placing the separator after the title, but by leaving the * prefix parameter empty, you can set the title separator manually. The prefix * does not automatically place a space between the prefix, so if there should * be a space, the parameter value will need to have it at the end. * * @since 0.71 * * @param string $prefix Optional. What to display before the title. * @param bool $display Optional, default is true. Whether to display or retrieve title. * @return string|null Title when retrieving, null when displaying or failure. */function single_month_title($prefix = '', $display = true ) {	global $wp_locale;	$m = get_query_var('m');	$year = get_query_var('year');	$monthnum = get_query_var('monthnum');	if ( !empty($monthnum) && !empty($year) ) {		$my_year = $year;		$my_month = $wp_locale->get_month($monthnum);	} elseif ( !empty($m) ) {		$my_year = substr($m, 0, 4);		$my_month = $wp_locale->get_month(substr($m, 4, 2));	}	if ( empty($my_month) )		return false;	$result = $prefix . $my_month . $prefix . $my_year;	if ( !$display )		return $result;	echo $result;}/** * Retrieve archive link content based on predefined or custom code. * * The format can be one of four styles. The 'link' for head element, 'option' * for use in the select element, 'html' for use in list (either ol or ul HTML * elements). Custom content is also supported using the before and after * parameters. * * The 'link' format uses the link HTML element with the <em>archives</em> * relationship. The before and after parameters are not used. The text * parameter is used to describe the link. * * The 'option' format uses the option HTML element for use in select element. * The value is the url parameter and the before and after parameters are used * between the text description. * * The 'html' format, which is the default, uses the li HTML element for use in * the list HTML elements. The before parameter is before the link and the after * parameter is after the closing link. * * The custom format uses the before parameter before the link ('a' HTML * element) and the after parameter after the closing link tag. If the above * three values for the format are not used, then custom format is assumed. * * @since 1.0.0 * * @param string $url URL to archive. * @param string $text Archive text description. * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom. * @param string $before Optional. * @param string $after Optional. * @return string HTML link content for archive. */function get_archives_link($url, $text, $format = 'html', $before = '', $after = '') {	$text = wptexturize($text);	$title_text = esc_attr($text);	$url = esc_url($url);	if ('link' == $format)		$link_html = "\t<link rel='archives' title='$title_text' href='$url' />\n";	elseif ('option' == $format)		$link_html = "\t<option value='$url'>$before $text $after</option>\n";	elseif ('html' == $format)		$link_html = "\t<li>$before<a href='$url' title='$title_text'>$text</a>$after</li>\n";	else // custom		$link_html = "\t$before<a href='$url' title='$title_text'>$text</a>$after\n";	$link_html = apply_filters( "get_archives_link", $link_html );	return $link_html;}/** * Display archive links based on type and format. * * The 'type' argument offers a few choices and by default will display monthly * archive links. The other options for values are 'daily', 'weekly', 'monthly', * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the * same archive link list, the difference between the two is that 'alpha' * will order by post title and 'postbypost' will order by post date. * * The date archives will logically display dates with links to the archive post * page. The 'postbypost' and 'alpha' values for 'type' argument will display * the post titles. * * The 'limit' argument will only display a limited amount of links, specified * by the 'limit' integer value. By default, there is no limit. The * 'show_post_count' argument will show how many posts are within the archive. * By default, the 'show_post_count' argument is set to false. * * For the 'format', 'before', and 'after' arguments, see {@link * get_archives_link()}. The values of these arguments have to do with that * function. * * @since 1.2.0 * * @param string|array $args Optional. Override defaults. */function wp_get_archives($args = '') {	global $wpdb, $wp_locale;	$defaults = array(		'type' => 'monthly', 'limit' => '',		'format' => 'html', 'before' => '',		'after' => '', 'show_post_count' => false,		'echo' => 1	);	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	if ( '' == $type )		$type = 'monthly';	if ( '' != $limit ) {		$limit = absint($limit);		$limit = ' LIMIT '.$limit;	}	// this is what will separate dates on weekly archive links	$archive_week_separator = '&#8211;';	// over-ride general date format ? 0 = no: use the date format set in Options, 1 = yes: over-ride	$archive_date_format_over_ride = 0;	// options for daily archive (only if you over-ride the general date format)	$archive_day_date_format = 'Y/m/d';	// options for weekly archive (only if you over-ride the general date format)	$archive_week_start_date_format = 'Y/m/d';	$archive_week_end_date_format	= 'Y/m/d';	if ( !$archive_date_format_over_ride ) {		$archive_day_date_format = get_option('date_format');		$archive_week_start_date_format = get_option('date_format');		$archive_week_end_date_format = get_option('date_format');	}	//filters	$where = apply_filters('getarchives_where', "WHERE post_type = 'post' AND post_status = 'publish'", $r );	$join = apply_filters('getarchives_join', "", $r);	$output = '';	if ( 'monthly' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url = get_month_link( $arcresult->year, $arcresult->month );				/* translators: 1: month name, 2: 4-digit year */				$text = sprintf(__('%1$s %2$d'), $wp_locale->get_month($arcresult->month), $arcresult->year);				if ( $show_post_count )					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ('yearly' == $type) {		$query = "SELECT YEAR(post_date) AS `year`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ($arcresults) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult) {				$url = get_year_link($arcresult->year);				$text = sprintf('%d', $arcresult->year);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')' . $afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'daily' == $type ) {		$query = "SELECT YEAR(post_date) AS `year`, MONTH(post_date) AS `month`, DAYOFMONTH(post_date) AS `dayofmonth`, count(ID) as posts FROM $wpdb->posts $join $where GROUP BY YEAR(post_date), MONTH(post_date), DAYOFMONTH(post_date) ORDER BY post_date DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			$afterafter = $after;			foreach ( (array) $arcresults as $arcresult ) {				$url	= get_day_link($arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$date = sprintf('%1$d-%2$02d-%3$02d 00:00:00', $arcresult->year, $arcresult->month, $arcresult->dayofmonth);				$text = mysql2date($archive_day_date_format, $date);				if ($show_post_count)					$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;				$output .= get_archives_link($url, $text, $format, $before, $after);			}		}	} elseif ( 'weekly' == $type ) {		$week = _wp_mysql_week( '`post_date`' );		$query = "SELECT DISTINCT $week AS `week`, YEAR( `post_date` ) AS `yr`, DATE_FORMAT( `post_date`, '%Y-%m-%d' ) AS `yyyymmdd`, count( `ID` ) AS `posts` FROM `$wpdb->posts` $join $where GROUP BY $week, YEAR( `post_date` ) ORDER BY `post_date` DESC $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		$arc_w_last = '';		$afterafter = $after;		if ( $arcresults ) {				foreach ( (array) $arcresults as $arcresult ) {					if ( $arcresult->week != $arc_w_last ) {						$arc_year = $arcresult->yr;						$arc_w_last = $arcresult->week;						$arc_week = get_weekstartend($arcresult->yyyymmdd, get_option('start_of_week'));						$arc_week_start = date_i18n($archive_week_start_date_format, $arc_week['start']);						$arc_week_end = date_i18n($archive_week_end_date_format, $arc_week['end']);						$url  = sprintf('%1$s/%2$s%3$sm%4$s%5$s%6$sw%7$s%8$d', home_url(), '', '?', '=', $arc_year, '&amp;', '=', $arcresult->week);						$text = $arc_week_start . $archive_week_separator . $arc_week_end;						if ($show_post_count)							$after = '&nbsp;('.$arcresult->posts.')'.$afterafter;						$output .= get_archives_link($url, $text, $format, $before, $after);					}				}		}	} elseif ( ( 'postbypost' == $type ) || ('alpha' == $type) ) {		$orderby = ('alpha' == $type) ? "post_title ASC " : "post_date DESC ";		$query = "SELECT * FROM $wpdb->posts $join $where ORDER BY $orderby $limit";		$key = md5($query);		$cache = wp_cache_get( 'wp_get_archives' , 'general');		if ( !isset( $cache[ $key ] ) ) {			$arcresults = $wpdb->get_results($query);			$cache[ $key ] = $arcresults;			wp_cache_set( 'wp_get_archives', $cache, 'general' );		} else {			$arcresults = $cache[ $key ];		}		if ( $arcresults ) {			foreach ( (array) $arcresults as $arcresult ) {				if ( $arcresult->post_date != '0000-00-00 00:00:00' ) {					$url  = get_permalink($arcresult);					$arc_title = $arcresult->post_title;					if ( $arc_title )						$text = strip_tags(apply_filters('the_title', $arc_title));					else						$text = $arcresult->ID;					$output .= get_archives_link($url, $text, $format, $before, $after);				}			}		}	}	if ( $echo )		echo $output;	else		return $output;}/** * Get number of days since the start of the week. * * @since 1.5.0 * @usedby get_calendar() * * @param int $num Number of day. * @return int Days since the start of the week. */function calendar_week_mod($num) {	$base = 7;	return ($num - $base*floor($num/$base));}/** * Display calendar with days that have posts as links. * * The calendar is cached, which will be retrieved, if it exists. If there are * no posts for the month, then it will not be displayed. * * @since 1.0.0 * * @param bool $initial Optional, default is true. Use initial calendar names. * @param bool $echo Optional, default is true. Set to false for return. */function get_calendar($initial = true, $echo = true) {	global $wpdb, $m, $monthnum, $year, $wp_locale, $posts;	$cache = array();	$key = md5( $m . $monthnum . $year );	if ( $cache = wp_cache_get( 'get_calendar', 'calendar' ) ) {		if ( is_array($cache) && isset( $cache[ $key ] ) ) {			if ( $echo ) {				echo apply_filters( 'get_calendar',  $cache[$key] );				return;			} else {				return apply_filters( 'get_calendar',  $cache[$key] );			}		}	}	if ( !is_array($cache) )		$cache = array();	// Quick check. If we have no posts at all, abort!	if ( !$posts ) {		$gotsome = $wpdb->get_var("SELECT 1 as test FROM $wpdb->posts WHERE post_type = 'post' AND post_status = 'publish' LIMIT 1");		if ( !$gotsome ) {			$cache[ $key ] = '';			wp_cache_set( 'get_calendar', $cache, 'calendar' );			return;		}	}	if ( isset($_GET['w']) )		$w = ''.intval($_GET['w']);	// week_begins = 0 stands for Sunday	$week_begins = intval(get_option('start_of_week'));	// Let's figure out when we are	if ( !empty($monthnum) && !empty($year) ) {		$thismonth = ''.zeroise(intval($monthnum), 2);		$thisyear = ''.intval($year);	} elseif ( !empty($w) ) {		// We need to get the month from MySQL		$thisyear = ''.intval(substr($m, 0, 4));		$d = (($w - 1) * 7) + 6; //it seems MySQL's weeks disagree with PHP's		$thismonth = $wpdb->get_var("SELECT DATE_FORMAT((DATE_ADD('${thisyear}0101', INTERVAL $d DAY) ), '%m')");	} elseif ( !empty($m) ) {		$thisyear = ''.intval(substr($m, 0, 4));		if ( strlen($m) < 6 )				$thismonth = '01';		else				$thismonth = ''.zeroise(intval(substr($m, 4, 2)), 2);	} else {		$thisyear = gmdate('Y', current_time('timestamp'));		$thismonth = gmdate('m', current_time('timestamp'));	}	$unixmonth = mktime(0, 0 , 0, $thismonth, 1, $thisyear);	// Get the next and previous month and year with at least one post	$previous = $wpdb->get_row("SELECT DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date < '$thisyear-$thismonth-01'		AND post_type = 'post' AND post_status = 'publish'			ORDER BY post_date DESC			LIMIT 1");	$next = $wpdb->get_row("SELECT	DISTINCT MONTH(post_date) AS month, YEAR(post_date) AS year		FROM $wpdb->posts		WHERE post_date >	'$thisyear-$thismonth-01'		AND MONTH( post_date ) != MONTH( '$thisyear-$thismonth-01' )		AND post_type = 'post' AND post_status = 'publish'			ORDER	BY post_date ASC			LIMIT 1");	/* translators: Calendar caption: 1: month name, 2: 4-digit year */	$calendar_caption = _x('%1$s %2$s', 'calendar caption');	$calendar_output = '<table id="wp-calendar" summary="' . esc_attr__('Calendar') . '">	<caption>' . sprintf($calendar_caption, $wp_locale->get_month($thismonth), date('Y', $unixmonth)) . '</caption>	<thead>	<tr>';	$myweek = array();	for ( $wdcount=0; $wdcount<=6; $wdcount++ ) {		$myweek[] = $wp_locale->get_weekday(($wdcount+$week_begins)%7);	}	foreach ( $myweek as $wd ) {		$day_name = (true == $initial) ? $wp_locale->get_weekday_initial($wd) : $wp_locale->get_weekday_abbrev($wd);		$wd = esc_attr($wd);		$calendar_output .= "\n\t\t<th scope=\"col\" title=\"$wd\">$day_name</th>";	}	$calendar_output .= '	</tr>	</thead>	<tfoot>	<tr>';	if ( $previous ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev"><a href="' . get_month_link($previous->year, $previous->month) . '" title="' . sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($previous->month), date('Y', mktime(0, 0 , 0, $previous->month, 1, $previous->year))) . '">&laquo; ' . $wp_locale->get_month_abbrev($wp_locale->get_month($previous->month)) . '</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="prev" class="pad">&nbsp;</td>';	}	$calendar_output .= "\n\t\t".'<td class="pad">&nbsp;</td>';	if ( $next ) {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next"><a href="' . get_month_link($next->year, $next->month) . '" title="' . esc_attr( sprintf(__('View posts for %1$s %2$s'), $wp_locale->get_month($next->month), date('Y', mktime(0, 0 , 0, $next->month, 1, $next->year))) ) . '">' . $wp_locale->get_month_abbrev($wp_locale->get_month($next->month)) . ' &raquo;</a></td>';	} else {		$calendar_output .= "\n\t\t".'<td colspan="3" id="next" class="pad">&nbsp;</td>';	}	$calendar_output .= '	</tr>	</tfoot>	<tbody>	<tr>';	// Get days with posts	$dayswithposts = $wpdb->get_results("SELECT DISTINCT DAYOFMONTH(post_date)		FROM $wpdb->posts WHERE MONTH(post_date) = '$thismonth'		AND YEAR(post_date) = '$thisyear'		AND post_type = 'post' AND post_status = 'publish'		AND post_date < '" . current_time('mysql') . '\'', ARRAY_N);	if ( $dayswithposts ) {		foreach ( (array) $dayswithposts as $daywith ) {			$daywithpost[] = $daywith[0];		}	} else {		$daywithpost = array();	}	if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'camino') !== false || stripos($_SERVER['HTTP_USER_AGENT'], 'safari') !== false)		$ak_title_separator = "\n";	else		$ak_title_separator = ', ';	$ak_titles_for_day = array();	$ak_post_titles = $wpdb->get_results("SELECT ID, post_title, DAYOFMONTH(post_date) as dom "		."FROM $wpdb->posts "		."WHERE YEAR(post_date) = '$thisyear' "		."AND MONTH(post_date) = '$thismonth' "		."AND post_date < '".current_time('mysql')."' "		."AND post_type = 'post' AND post_status = 'publish'"	);	if ( $ak_post_titles ) {		foreach ( (array) $ak_post_titles as $ak_post_title ) {				$post_title = esc_attr( apply_filters( 'the_title', $ak_post_title->post_title, $ak_post_title->ID ) );				if ( empty($ak_titles_for_day['day_'.$ak_post_title->dom]) )					$ak_titles_for_day['day_'.$ak_post_title->dom] = '';				if ( empty($ak_titles_for_day["$ak_post_title->dom"]) ) // first one					$ak_titles_for_day["$ak_post_title->dom"] = $post_title;				else					$ak_titles_for_day["$ak_post_title->dom"] .= $ak_title_separator . $post_title;		}	}	// See how much we should pad in the beginning	$pad = calendar_week_mod(date('w', $unixmonth)-$week_begins);	if ( 0 != $pad )		$calendar_output .= "\n\t\t".'<td colspan="'. esc_attr($pad) .'" class="pad">&nbsp;</td>';	$daysinmonth = intval(date('t', $unixmonth));	for ( $day = 1; $day <= $daysinmonth; ++$day ) {		if ( isset($newrow) && $newrow )			$calendar_output .= "\n\t</tr>\n\t<tr>\n\t\t";		$newrow = false;		if ( $day == gmdate('j', current_time('timestamp')) && $thismonth == gmdate('m', current_time('timestamp')) && $thisyear == gmdate('Y', current_time('timestamp')) )			$calendar_output .= '<td id="today">';		else			$calendar_output .= '<td>';		if ( in_array($day, $daywithpost) ) // any posts today?				$calendar_output .= '<a href="' . get_day_link($thisyear, $thismonth, $day) . "\" title=\"" . esc_attr($ak_titles_for_day[$day]) . "\">$day</a>";		else			$calendar_output .= $day;		$calendar_output .= '</td>';		if ( 6 == calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins) )			$newrow = true;	}	$pad = 7 - calendar_week_mod(date('w', mktime(0, 0 , 0, $thismonth, $day, $thisyear))-$week_begins);	if ( $pad != 0 && $pad != 7 )		$calendar_output .= "\n\t\t".'<td class="pad" colspan="'. esc_attr($pad) .'">&nbsp;</td>';	$calendar_output .= "\n\t</tr>\n\t</tbody>\n\t</table>";	$cache[ $key ] = $calendar_output;	wp_cache_set( 'get_calendar', $cache, 'calendar' );	if ( $echo )		echo apply_filters( 'get_calendar',  $calendar_output );	else		return apply_filters( 'get_calendar',  $calendar_output );}/** * Purge the cached results of get_calendar. * * @see get_calendar * @since 2.1.0 */function delete_get_calendar_cache() {	wp_cache_delete( 'get_calendar', 'calendar' );}add_action( 'save_post', 'delete_get_calendar_cache' );add_action( 'delete_post', 'delete_get_calendar_cache' );add_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );add_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );/** * Display all of the allowed tags in HTML format with attributes. * * This is useful for displaying in the comment area, which elements and * attributes are supported. As well as any plugins which want to display it. * * @since 1.0.1 * @uses $allowedtags * * @return string HTML allowed tags entity encoded. */function allowed_tags() {	global $allowedtags;	$allowed = '';	foreach ( (array) $allowedtags as $tag => $attributes ) {		$allowed .= '<'.$tag;		if ( 0 < count($attributes) ) {			foreach ( $attributes as $attribute => $limits ) {				$allowed .= ' '.$attribute.'=""';			}		}		$allowed .= '> ';	}	return htmlentities($allowed);}/***** Date/Time tags *****//** * Outputs the date in iso8601 format for xml files. * * @since 1.0.0 */function the_date_xml() {	global $post;	echo mysql2date('Y-m-d', $post->post_date, false);}/** * Display or Retrieve the date the current $post was written (once per date) * * Will only output the date if the current post's date is different from the * previous one output. * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the * function is called several times for each post. * * HTML output can be filtered with 'the_date'. * Date string output can be filtered with 'get_the_date'. * * @since 0.71 * @uses get_the_date() * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_date( $d = '', $before = '', $after = '', $echo = true ) {	global $day, $previousday;	$the_date = '';	if ( $day != $previousday ) {		$the_date .= $before;		$the_date .= get_the_date( $d );		$the_date .= $after;		$previousday = $day;		$the_date = apply_filters('the_date', $the_date, $d, $before, $after);		if ( $echo )			echo $the_date;		else			return $the_date;	}	return null;}/** * Retrieve the date the current $post was written. * * Unlike the_date() this function will always return the date. * Modify output with 'get_the_date' filter. * * @since 3.0.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @return string|null Null if displaying, string if retrieving. */function get_the_date( $d = '' ) {	global $post;	$the_date = '';	if ( '' == $d )		$the_date .= mysql2date(get_option('date_format'), $post->post_date);	else		$the_date .= mysql2date($d, $post->post_date);	return apply_filters('get_the_date', $the_date, $d);}/** * Display the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format defaults to the date_format option if not specified. * @param string $before Optional. Output before the date. * @param string $after Optional. Output after the date. * @param bool $echo Optional, default is display. Whether to echo the date or return it. * @return string|null Null if displaying, string if retrieving. */function the_modified_date($d = '', $before='', $after='', $echo = true) {	$the_modified_date = $before . get_the_modified_date($d) . $after;	$the_modified_date = apply_filters('the_modified_date', $the_modified_date, $d, $before, $after);	if ( $echo )		echo $the_modified_date;	else		return $the_modified_date;}/** * Retrieve the date on which the post was last modified. * * @since 2.1.0 * * @param string $d Optional. PHP date format. Defaults to the "date_format" option * @return string */function get_the_modified_date($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('date_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_date', $the_time, $d);}/** * Display the time at which the post was written. * * @since 0.71 * * @param string $d Either 'G', 'U', or php date format. */function the_time( $d = '' ) {	echo apply_filters('the_time', get_the_time( $d ), $d);}/** * Retrieve the time at which the post was written. * * @since 1.5.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @param int|object $post Optional post ID or object. Default is global $post object. * @return string */function get_the_time( $d = '', $post = null ) {	$post = get_post($post);	if ( '' == $d )		$the_time = get_post_time(get_option('time_format'), false, $post, true);	else		$the_time = get_post_time($d, false, $post, true);	return apply_filters('get_the_time', $the_time, $d, $post);}/** * Retrieve the time at which the post was written. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional post ID or object. Default is global $post object. * @param bool $translate Whether to translate the time string * @return string */function get_post_time( $d = 'U', $gmt = false, $post = null, $translate = false ) { // returns timestamp	$post = get_post($post);	if ( $gmt )		$time = $post->post_date_gmt;	else		$time = $post->post_date;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_time', $time, $d, $gmt);}/** * Display the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. */function the_modified_time($d = '') {	echo apply_filters('the_modified_time', get_the_modified_time($d), $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option. * @return string */function get_the_modified_time($d = '') {	if ( '' == $d )		$the_time = get_post_modified_time(get_option('time_format'), null, null, true);	else		$the_time = get_post_modified_time($d, null, null, true);	return apply_filters('get_the_modified_time', $the_time, $d);}/** * Retrieve the time at which the post was last modified. * * @since 2.0.0 * * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format. * @param bool $gmt Optional, default is false. Whether to return the gmt time. * @param int|object $post Optional, default is global post object. A post_id or post object * @param bool $translate Optional, default is false. Whether to translate the result * @return string Returns timestamp */function get_post_modified_time( $d = 'U', $gmt = false, $post = null, $translate = false ) {	$post = get_post($post);	if ( $gmt )		$time = $post->post_modified_gmt;	else		$time = $post->post_modified;	$time = mysql2date($d, $time, $translate);	return apply_filters('get_post_modified_time', $time, $d, $gmt);}/** * Display the weekday on which the post was written. * * @since 0.71 * @uses $wp_locale * @uses $post */function the_weekday() {	global $wp_locale, $post;	$the_weekday = $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));	$the_weekday = apply_filters('the_weekday', $the_weekday);	echo $the_weekday;}/** * Display the weekday on which the post was written. * * Will only output the weekday if the current post's weekday is different from * the previous one output. * * @since 0.71 * * @param string $before Optional Output before the date. * @param string $after Optional Output after the date.  */function the_weekday_date($before='',$after='') {	global $wp_locale, $post, $day, $previousweekday;	$the_weekday_date = '';	if ( $day != $previousweekday ) {		$the_weekday_date .= $before;		$the_weekday_date .= $wp_locale->get_weekday(mysql2date('w', $post->post_date, false));		$the_weekday_date .= $after;		$previousweekday = $day;	}	$the_weekday_date = apply_filters('the_weekday_date', $the_weekday_date, $before, $after);	echo $the_weekday_date;}/** * Fire the wp_head action * * @since 1.2.0 * @uses do_action() Calls 'wp_head' hook. */function wp_head() {	do_action('wp_head');}/** * Fire the wp_footer action * * @since 1.5.1 * @uses do_action() Calls 'wp_footer' hook. */function wp_footer() {	do_action('wp_footer');}/** * Display the links to the general feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links( $args = array() ) {	if ( !current_theme_supports('automatic-feed-links') )		return;	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'	=> _x('&raquo;', 'feed link'),		/* translators: 1: blog title, 2: separator (raquo) */		'feedtitle'	=> __('%1$s %2$s Feed'),		/* translators: %s: blog title, 2: separator (raquo) */		'comstitle'	=> __('%1$s %2$s Comments Feed'),	);	$args = wp_parse_args( $args, $defaults );	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['feedtitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link() . "\" />\n";	echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . esc_attr(sprintf( $args['comstitle'], get_bloginfo('name'), $args['separator'] )) . '" href="' . get_feed_link( 'comments_' . get_default_feed() ) . "\" />\n";}/** * Display the links to the extra feeds such as category feeds. * * @since 2.8.0 * * @param array $args Optional arguments. */function feed_links_extra( $args = array() ) {	$defaults = array(		/* translators: Separator between blog name and feed type in feed links */		'separator'   => _x('&raquo;', 'feed link'),		/* translators: 1: blog name, 2: separator(raquo), 3: post title */		'singletitle' => __('%1$s %2$s %3$s Comments Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: category name */		'cattitle'    => __('%1$s %2$s %3$s Category Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: tag name */		'tagtitle'    => __('%1$s %2$s %3$s Tag Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: author name  */		'authortitle' => __('%1$s %2$s Posts by %3$s Feed'),		/* translators: 1: blog name, 2: separator(raquo), 3: search phrase */		'searchtitle' => __('%1$s %2$s Search Results for &#8220;%3$s&#8221; Feed'),	);	$args = wp_parse_args( $args, $defaults );	if ( is_single() || is_page() ) {		$post = &get_post( $id = 0 );		if ( comments_open() || pings_open() || $post->comment_count > 0 ) {			$title = esc_attr(sprintf( $args['singletitle'], get_bloginfo('name'), $args['separator'], esc_html( get_the_title() ) ));			$href = get_post_comments_feed_link( $post->ID );		}	} elseif ( is_category() ) {		$cat_id = intval( get_query_var('cat') );		$title = esc_attr(sprintf( $args['cattitle'], get_bloginfo('name'), $args['separator'], get_cat_name( $cat_id ) ));		$href = get_category_feed_link( $cat_id );	} elseif ( is_tag() ) {		$tag_id = intval( get_query_var('tag_id') );		$tag = get_tag( $tag_id );		$title = esc_attr(sprintf( $args['tagtitle'], get_bloginfo('name'), $args['separator'], $tag->name ));		$href = get_tag_feed_link( $tag_id );	} elseif ( is_author() ) {		$author_id = intval( get_query_var('author') );		$title = esc_attr(sprintf( $args['authortitle'], get_bloginfo('name'), $args['separator'], get_the_author_meta( 'display_name', $author_id ) ));		$href = get_author_feed_link( $author_id );	} elseif ( is_search() ) {		$title = esc_attr(sprintf( $args['searchtitle'], get_bloginfo('name'), $args['separator'], get_search_query( false ) ));		$href = get_search_feed_link();	}	if ( isset($title) && isset($href) )		echo '<link rel="alternate" type="' . feed_content_type() . '" title="' . $title . '" href="' . $href . '" />' . "\n";}/** * Display the link to the Really Simple Discovery service endpoint. * * @link http://archipelago.phrasewise.com/rsd * @since 2.0.0 */function rsd_link() {	echo '<link rel="EditURI" type="application/rsd+xml" title="RSD" href="' . get_bloginfo('wpurl') . "/xmlrpc.php?rsd\" />\n";}/** * Display the link to the Windows Live Writer manifest file. * * @link http://msdn.microsoft.com/en-us/library/bb463265.aspx * @since 2.3.1 */function wlwmanifest_link() {	echo '<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="'		. get_bloginfo('wpurl') . '/wp-includes/wlwmanifest.xml" /> ' . "\n";}/** * Display a noindex meta tag if required by the blog configuration. * * If a blog is marked as not being public then the noindex meta tag will be * output to tell web robots not to index the page content. * * @since 2.1.0 */function noindex() {	// If the blog is not public, tell robots to go away.	if ( '0' == get_option('blog_public') )		echo "<meta name='robots' content='noindex,nofollow' />\n";}/** * Determine if TinyMCE is available. * * Checks to see if the user has deleted the tinymce files to slim down there WordPress install. * * @since 2.1.0 * * @return bool Whether TinyMCE exists. */function rich_edit_exists() {	global $wp_rich_edit_exists;	if ( !isset($wp_rich_edit_exists) )		$wp_rich_edit_exists = file_exists(ABSPATH . WPINC . '/js/tinymce/tiny_mce.js');	return $wp_rich_edit_exists;}/** * Whether the user should have a WYSIWIG editor. * * Checks that the user requires a WYSIWIG editor and that the editor is * supported in the users browser. * * @since 2.0.0 * * @return bool */function user_can_richedit() {	global $wp_rich_edit, $pagenow;	if ( !isset( $wp_rich_edit) ) {		if ( get_user_option( 'rich_editing' ) == 'true' &&			( ( preg_match( '!AppleWebKit/(\d+)!', $_SERVER['HTTP_USER_AGENT'], $match ) && intval($match[1]) >= 420 ) ||				!preg_match( '!opera[ /][2-8]|konqueror|safari!i', $_SERVER['HTTP_USER_AGENT'] ) )				&& 'comment.php' != $pagenow ) {			$wp_rich_edit = true;		} else {			$wp_rich_edit = false;		}	}	return apply_filters('user_can_richedit', $wp_rich_edit);}/** * Find out which editor should be displayed by default. * * Works out which of the two editors to display as the current editor for a * user. * * @since 2.5.0 * * @return string Either 'tinymce', or 'html', or 'test' */function wp_default_editor() {	$r = user_can_richedit() ? 'tinymce' : 'html'; // defaults	if ( $user = wp_get_current_user() ) { // look for cookie		$ed = get_user_setting('editor', 'tinymce');		$r = ( in_array($ed, array('tinymce', 'html', 'test') ) ) ? $ed : $r;	}	return apply_filters( 'wp_default_editor', $r ); // filter}/** * Display visual editor forms: TinyMCE, or HTML, or both. * * The amount of rows the text area will have for the content has to be between * 3 and 100 or will default at 12. There is only one option used for all users, * named 'default_post_edit_rows'. * * If the user can not use the rich editor (TinyMCE), then the switch button * will not be displayed. * * @since 2.1.0 * * @param string $content Textarea content. * @param string $id Optional, default is 'content'. HTML ID attribute value. * @param string $prev_id Optional, default is 'title'. HTML ID name for switching back and forth between visual editors. * @param bool $media_buttons Optional, default is true. Whether to display media buttons. * @param int $tab_index Optional, default is 2. Tabindex for textarea element. */function the_editor($content, $id = 'content', $prev_id = 'title', $media_buttons = true, $tab_index = 2) {	$rows = get_option('default_post_edit_rows');	if (($rows < 3) || ($rows > 100))		$rows = 12;	if ( !current_user_can( 'upload_files' ) )		$media_buttons = false;	$richedit =  user_can_richedit();	$class = '';	if ( $richedit || $media_buttons ) { ?>	<div id="editor-toolbar"><?php	if ( $richedit ) {		$wp_default_editor = wp_default_editor(); ?>		<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('<?php echo $id; ?>')" /></div><?php	if ( 'html' == $wp_default_editor ) {			add_filter('the_editor_content', 'wp_htmledit_pre'); ?>			<a id="edButtonHTML" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	} else {			$class = " class='theEditor'";			add_filter('the_editor_content', 'wp_richedit_pre'); ?>			<a id="edButtonHTML" class="hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'html');"><?php _e('HTML'); ?></a>			<a id="edButtonPreview" class="active hide-if-no-js" onclick="switchEditors.go('<?php echo $id; ?>', 'tinymce');"><?php _e('Visual'); ?></a><?php	}	}	if ( $media_buttons ) { ?>		<div id="media-buttons" class="hide-if-no-js"><?php	do_action( 'media_buttons' ); ?>		</div><?php	} ?>	</div><?php	}?>	<div id="quicktags"><?php	wp_print_scripts( 'quicktags' ); ?>	<script type="text/javascript">edToolbar()</script>	</div><?php	$the_editor = apply_filters('the_editor', "<div id='editorcontainer'><textarea rows='$rows'$class cols='40' name='$id' tabindex='$tab_index' id='$id'>%s</textarea></div>\n");	$the_editor_content = apply_filters('the_editor_content', $content);	printf($the_editor, $the_editor_content);?>	<script type="text/javascript">	edCanvas = document.getElementById('<?php echo $id; ?>');	</script><?php}/** * Retrieve the contents of the search WordPress query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @since 2.3.0 * @uses esc_attr() * * @param bool $escaped Whether the result is escaped. Default true. * 	Only use when you are later escaping it. Do not use unescaped. * @return string */function get_search_query( $escaped = true ) {	$query = apply_filters( 'get_search_query', get_query_var( 's' ) );	if ( $escaped )		$query = esc_attr( $query );	return $query;}/** * Display the contents of the search query variable. * * The search query string is passed through {@link esc_attr()} * to ensure that it is safe for placing in an html attribute. * * @uses esc_attr() * @since 2.1.0 */function the_search_query() {	echo esc_attr( apply_filters( 'the_search_query', get_search_query( false ) ) );}/** * Display the language attributes for the html tag. * * Builds up a set of html attributes containing the text direction and language * information for the page. * * @since 2.1.0 * * @param string $doctype The type of html document (xhtml|html). */function language_attributes($doctype = 'html') {	$attributes = array();	$output = '';	if ( function_exists( 'is_rtl' ) )		$attributes[] = 'dir="' . ( is_rtl() ? 'rtl' : 'ltr' ) . '"';	if ( $lang = get_bloginfo('language') ) {		if ( get_option('html_type') == 'text/html' || $doctype == 'html' )			$attributes[] = "lang=\"$lang\"";		if ( get_option('html_type') != 'text/html' || $doctype == 'xhtml' )			$attributes[] = "xml:lang=\"$lang\"";	}	$output = implode(' ', $attributes);	$output = apply_filters('language_attributes', $output);	echo $output;}/** * Retrieve paginated link for archive post pages. * * Technically, the function can be used to create paginated link list for any * area. The 'base' argument is used to reference the url, which will be used to * create the paginated links. The 'format' argument is then used for replacing * the page number. It is however, most likely and by default, to be used on the * archive post pages. * * The 'type' argument controls format of the returned value. The default is * 'plain', which is just a string with the links separated by a newline * character. The other possible values are either 'array' or 'list'. The * 'array' value will return an array of the paginated link list to offer full * control of display. The 'list' value will place all of the paginated links in * an unordered HTML list. * * The 'total' argument is the total amount of pages and is an integer. The * 'current' argument is the current page number and is also an integer. * * An example of the 'base' argument is "http://example.com/all_posts.php%_%" * and the '%_%' is required. The '%_%' will be replaced by the contents of in * the 'format' argument. An example for the 'format' argument is "?page=%#%" * and the '%#%' is also required. The '%#%' will be replaced with the page * number. * * You can include the previous and next links in the list by setting the * 'prev_next' argument to true, which it is by default. You can set the * previous text, by using the 'prev_text' argument. You can set the next text * by setting the 'next_text' argument. * * If the 'show_all' argument is set to true, then it will show all of the pages * instead of a short list of the pages near the current page. By default, the * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size' * arguments. The 'end_size' argument is how many numbers on either the start * and the end list edges, by default is 1. The 'mid_size' argument is how many * numbers to either side of current page, but not including current page. * * It is possible to add query vars to the link by using the 'add_args' argument * and see {@link add_query_arg()} for more information. * * @since 2.1.0 * * @param string|array $args Optional. Override defaults. * @return array|string String of page links or array of page links. */function paginate_links( $args = '' ) {	$defaults = array(		'base' => '%_%', // http://example.com/all_posts.php%_% : %_% is replaced by format (below)		'format' => '?page=%#%', // ?page=%#% : %#% is replaced by the page number		'total' => 1,		'current' => 0,		'show_all' => false,		'prev_next' => true,		'prev_text' => __('&laquo; Previous'),		'next_text' => __('Next &raquo;'),		'end_size' => 1,		'mid_size' => 2,		'type' => 'plain',		'add_args' => false, // array of query args to add		'add_fragment' => ''	);	$args = wp_parse_args( $args, $defaults );	extract($args, EXTR_SKIP);	// Who knows what else people pass in $args	$total = (int) $total;	if ( $total < 2 )		return;	$current  = (int) $current;	$end_size = 0  < (int) $end_size ? (int) $end_size : 1; // Out of bounds?  Make it the default.	$mid_size = 0 <= (int) $mid_size ? (int) $mid_size : 2;	$add_args = is_array($add_args) ? $add_args : false;	$r = '';	$page_links = array();	$n = 0;	$dots = false;	if ( $prev_next && $current && 1 < $current ) :		$link = str_replace('%_%', 2 == $current ? '' : $format, $base);		$link = str_replace('%#%', $current - 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='prev page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$prev_text</a>";	endif;	for ( $n = 1; $n <= $total; $n++ ) :		$n_display = number_format_i18n($n);		if ( $n == $current ) :			$page_links[] = "<span class='page-numbers current'>$n_display</span>";			$dots = true;		else :			if ( $show_all || ( $n <= $end_size || ( $current && $n >= $current - $mid_size && $n <= $current + $mid_size ) || $n > $total - $end_size ) ) :				$link = str_replace('%_%', 1 == $n ? '' : $format, $base);				$link = str_replace('%#%', $n, $link);				if ( $add_args )					$link = add_query_arg( $add_args, $link );				$link .= $add_fragment;				$page_links[] = "<a class='page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$n_display</a>";				$dots = true;			elseif ( $dots && !$show_all ) :				$page_links[] = "<span class='page-numbers dots'>...</span>";				$dots = false;			endif;		endif;	endfor;	if ( $prev_next && $current && ( $current < $total || -1 == $total ) ) :		$link = str_replace('%_%', $format, $base);		$link = str_replace('%#%', $current + 1, $link);		if ( $add_args )			$link = add_query_arg( $add_args, $link );		$link .= $add_fragment;		$page_links[] = "<a class='next page-numbers' href='" . esc_url( apply_filters( 'paginate_links', $link ) ) . "'>$next_text</a>";	endif;	switch ( $type ) :		case 'array' :			return $page_links;			break;		case 'list' :			$r .= "<ul class='page-numbers'>\n\t<li>";			$r .= join("</li>\n\t<li>", $page_links);			$r .= "</li>\n</ul>\n";			break;		default :			$r = join("\n", $page_links);			break;	endswitch;	return $r;}/** * Registers an admin colour scheme css file. * * Allows a plugin to register a new admin colour scheme. For example: * <code> * wp_admin_css_color('classic', __('Classic'), admin_url("css/colors-classic.css"), * array('#07273E', '#14568A', '#D54E21', '#2683AE')); * </code> * * @since 2.5.0 * * @param string $key The unique key for this theme. * @param string $name The name of the theme. * @param string $url The url of the css file containing the colour scheme. * @param array @colors Optional An array of CSS color definitions which are used to give the user a feel for the theme. */function wp_admin_css_color($key, $name, $url, $colors = array()) {	global $_wp_admin_css_colors;	if ( !isset($_wp_admin_css_colors) )		$_wp_admin_css_colors = array();	$_wp_admin_css_colors[$key] = (object) array('name' => $name, 'url' => $url, 'colors' => $colors);}/** * Registers the default Admin color schemes * * @since 3.0.0 */function register_admin_color_schemes() {	wp_admin_css_color('classic', __('Blue'), admin_url("css/colors-classic.css"), array('#073447', '#21759B', '#EAF3FA', '#BBD8E7'));	wp_admin_css_color('fresh', __('Gray'), admin_url("css/colors-fresh.css"), array('#464646', '#6D6D6D', '#F1F1F1', '#DFDFDF'));}/** * Display the URL of a WordPress admin CSS file. * * @see WP_Styles::_css_href and its style_loader_src filter. * * @since 2.3.0 * * @param string $file file relative to wp-admin/ without its ".css" extension. */function wp_admin_css_uri( $file = 'wp-admin' ) {	if ( defined('WP_INSTALLING') ) {		$_file = "./$file.css";	} else {		$_file = admin_url("$file.css");	}	$_file = add_query_arg( 'version', get_bloginfo( 'version' ),  $_file );	return apply_filters( 'wp_admin_css_uri', $_file, $file );}/** * Enqueues or directly prints a stylesheet link to the specified CSS file. * * "Intelligently" decides to enqueue or to print the CSS file. If the * 'wp_print_styles' action has *not* yet been called, the CSS file will be * enqueued. If the wp_print_styles action *has* been called, the CSS link will * be printed. Printing may be forced by passing TRUE as the $force_echo * (second) parameter. * * For backward compatibility with WordPress 2.3 calling method: If the $file * (first) parameter does not correspond to a registered CSS file, we assume * $file is a file relative to wp-admin/ without its ".css" extension. A * stylesheet link to that generated URL is printed. * * @package WordPress * @since 2.3.0 * @uses $wp_styles WordPress Styles Object * * @param string $file Style handle name or file name (without ".css" extension) relative to wp-admin/ * @param bool $force_echo Optional.  Force the stylesheet link to be printed rather than enqueued. */function wp_admin_css( $file = 'wp-admin', $force_echo = false ) {	global $wp_styles;	if ( !is_a($wp_styles, 'WP_Styles') )		$wp_styles = new WP_Styles();	// For backward compatibility	$handle = 0 === strpos( $file, 'css/' ) ? substr( $file, 4 ) : $file;	if ( $wp_styles->query( $handle ) ) {		if ( $force_echo || did_action( 'wp_print_styles' ) ) // we already printed the style queue.  Print this one immediately			wp_print_styles( $handle );		else // Add to style queue			wp_enqueue_style( $handle );		return;	}	echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( $file ) ) . "' type='text/css' />\n", $file );	if ( is_rtl() )		echo apply_filters( 'wp_admin_css', "<link rel='stylesheet' href='" . esc_url( wp_admin_css_uri( "$file-rtl" ) ) . "' type='text/css' />\n", "$file-rtl" );}/** * Enqueues the default ThickBox js and css. * * If any of the settings need to be changed, this can be done with another js * file similar to media-upload.js and theme-preview.js. That file should * require array('thickbox') to ensure it is loaded after. * * @since 2.5.0 */function add_thickbox() {	wp_enqueue_script( 'thickbox' );	wp_enqueue_style( 'thickbox' );}/** * Display the XHTML generator that is generated on the wp_head hook. * * @since 2.5.0 */function wp_generator() {	the_generator( apply_filters( 'wp_generator_type', 'xhtml' ) );}/** * Display the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators overall the the_generator filter. * * @since 2.5.0 * @uses apply_filters() Calls 'the_generator' hook. * * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export). */function the_generator( $type ) {	echo apply_filters('the_generator', get_the_generator($type), $type) . "\n";}/** * Creates the generator XML or Comment for RSS, ATOM, etc. * * Returns the correct generator type for the requested output format. Allows * for a plugin to filter generators on an individual basis using the * 'get_the_generator_{$type}' filter. * * @since 2.5.0 * @uses apply_filters() Calls 'get_the_generator_$type' hook. * * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export). * @return string The HTML content for the generator. */function get_the_generator( $type = '' ) {	if ( empty( $type ) ) {		$current_filter = current_filter();		if ( empty( $current_filter ) )			return;		switch ( $current_filter ) {			case 'rss2_head' :			case 'commentsrss2_head' :				$type = 'rss2';				break;			case 'rss_head' :			case 'opml_head' :				$type = 'comment';				break;			case 'rdf_header' :				$type = 'rdf';				break;			case 'atom_head' :			case 'comments_atom_head' :			case 'app_head' :				$type = 'atom';				break;		}	}	switch ( $type ) {		case 'html':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '">';			break;		case 'xhtml':			$gen = '<meta name="generator" content="WordPress ' . get_bloginfo( 'version' ) . '" />';			break;		case 'atom':			$gen = '<generator uri="http://wordpress.org/" version="' . get_bloginfo_rss( 'version' ) . '">WordPress</generator>';			break;		case 'rss2':			$gen = '<generator>http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '</generator>';			break;		case 'rdf':			$gen = '<admin:generatorAgent rdf:resource="http://wordpress.org/?v=' . get_bloginfo_rss( 'version' ) . '" />';			break;		case 'comment':			$gen = '<!-- generator="WordPress/' . get_bloginfo( 'version' ) . '" -->';			break;		case 'export':			$gen = '<!-- generator="WordPress/' . get_bloginfo_rss('version') . '" created="'. date('Y-m-d H:i') . '"-->';			break;	}	return apply_filters( "get_the_generator_{$type}", $gen, $type );}/** * Outputs the html checked attribute. * * Compares the first two arguments and if identical marks as checked * * @since 1.0 * * @param mixed $checked One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function checked( $checked, $current = true, $echo = true ) {	return __checked_selected_helper( $checked, $current, $echo, 'checked' );}/** * Outputs the html selected attribute. * * Compares the first two arguments and if identical marks as selected * * @since 1.0 * * @param mixed selected One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function selected( $selected, $current = true, $echo = true ) {	return __checked_selected_helper( $selected, $current, $echo, 'selected' );}/** * Outputs the html disabled attribute. * * Compares the first two arguments and if identical marks as disabled * * @since 3.0.0 * * @param mixed $disabled One of the values to compare * @param mixed $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @return string html attribute or empty string */function disabled( $disabled, $current = true, $echo = true ) {	return __checked_selected_helper( $disabled, $current, $echo, 'disabled' );}/** * Private helper function for checked, selected, and disabled. * * Compares the first two arguments and if identical marks as $type * * @since 2.8 * @access private * * @param any $helper One of the values to compare * @param any $current (true) The other value to compare if not just true * @param bool $echo Whether to echo or just return the string * @param string $type The type of checked|selected|disabled we are doing * @return string html attribute or empty string */function __checked_selected_helper( $helper, $current, $echo, $type ) {	if ( (string) $helper === (string) $current )		$result = " $type='$type'";	else		$result = '';	if ( $echo )		echo $result;	return $result;}?>
<?php/** * Build Administration Menu. * * @package WordPress * @subpackage Administration *//** * Constructs the admin menu bar. * * The elements in the array are : *     0: Menu item name *     1: Minimum level or capability required. *     2: The URL of the item's file *     3: Class *     4: ID *     5: Icon for top level menu * * @global array $menu * @name $menu * @var array */$awaiting_mod = wp_count_comments();$awaiting_mod = $awaiting_mod->moderated;if ( is_multisite() && is_super_admin() ) {	/* translators: Network menu item */	$menu[0] = array(__('Super Admin'), 'manage_network', 'ms-admin.php', '', 'menu-top menu-top-first menu-icon-site', 'menu-site', 'div');	$submenu[ 'ms-admin.php' ][1] = array( __('Admin'), 'manage_network', 'ms-admin.php' );	/* translators: Sites menu item */	$submenu[ 'ms-admin.php' ][5] = array( __('Sites'), 'manage_sites', 'ms-sites.php' );	$submenu[ 'ms-admin.php' ][10] = array( __('Users'), 'manage_network_users', 'ms-users.php' );	$submenu[ 'ms-admin.php' ][20] = array( __('Themes'), 'manage_network_themes', 'ms-themes.php' );	$submenu[ 'ms-admin.php' ][25] = array( __('Options'), 'manage_network_options', 'ms-options.php' );	$submenu[ 'ms-admin.php' ][30] = array( __('Update'), 'manage_network', 'ms-upgrade-network.php' );	$menu[1] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-icon-dashboard', 'menu-dashboard', 'div' );} else {	$menu[2] = array( __('Dashboard'), 'read', 'index.php', '', 'menu-top menu-top-first menu-icon-dashboard', 'menu-dashboard', 'div' );}if ( is_multisite() || is_super_admin() ) {	$submenu[ 'index.php' ][0] = array( __('Dashboard'), 'read', 'index.php' );	if ( is_multisite() )		$submenu[ 'index.php' ][5] = array( __('My Sites'), 'read', 'my-sites.php' );	if ( is_super_admin() ) {		$plugin_update_count = $theme_update_count = $wordpress_update_count = 0;		$update_plugins = get_site_transient( 'update_plugins' );		if ( !empty($update_plugins->response) )			$plugin_update_count = count( $update_plugins->response );		$update_themes = get_site_transient( 'update_themes' );		if ( !empty($update_themes->response) )			$theme_update_count = count( $update_themes->response );		$update_wordpress = get_core_updates( array('dismissed' => false) );		if ( !empty($update_wordpress) && !in_array( $update_wordpress[0]->response, array('development', 'latest') ) )			$wordpress_update_count = 1;		$update_count = $plugin_update_count + $theme_update_count + $wordpress_update_count;		$update_title = array();		if ( $wordpress_update_count )			$update_title[] = sprintf(__('%d WordPress Update'), $wordpress_update_count);		if ( $plugin_update_count )			$update_title[] = sprintf(_n('%d Plugin Update', '%d Plugin Updates', $plugin_update_count), $plugin_update_count);		if ( $theme_update_count )			$update_title[] = sprintf(_n('%d Theme Update', '%d Themes Updates', $theme_update_count), $theme_update_count);		$update_title = !empty($update_title) ? esc_attr(implode(', ', $update_title)) : '';		$submenu[ 'index.php' ][10] = array( sprintf( __('Updates %s'), "<span class='update-plugins count-$update_count' title='$update_title'><span class='update-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'install_plugins',  'update-core.php');		unset($plugin_update_count, $theme_update_count, $wordpress_update_count, $update_count, $update_title);	}}$menu[4] = array( '', 'read', 'separator1', '', 'wp-menu-separator' );$menu[5] = array( __('Posts'), 'edit_posts', 'edit.php', '', 'open-if-no-js menu-top menu-icon-post', 'menu-posts', 'div' );	$submenu['edit.php'][5]  = array( __('Posts'), 'edit_posts', 'edit.php' );	/* translators: add new post */	$submenu['edit.php'][10]  = array( _x('Add New', 'post'), 'edit_posts', 'post-new.php' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('post', (array) $tax->object_type, true) )			continue;		$submenu['edit.php'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[10] = array( __('Media'), 'upload_files', 'upload.php', '', 'menu-top menu-icon-media', 'menu-media', 'div' );	$submenu['upload.php'][5] = array( __('Library'), 'upload_files', 'upload.php');	/* translators: add new file */	$submenu['upload.php'][10] = array( _x('Add New', 'file'), 'upload_files', 'media-new.php');$menu[15] = array( __('Links'), 'manage_links', 'link-manager.php', '', 'menu-top menu-icon-links', 'menu-links', 'div' );	$submenu['link-manager.php'][5] = array( __('Links'), 'manage_links', 'link-manager.php' );	/* translators: add new links */	$submenu['link-manager.php'][10] = array( _x('Add New', 'link'), 'manage_links', 'link-add.php' );	$submenu['link-manager.php'][15] = array( __('Link Categories'), 'manage_categories', 'edit-link-categories.php' );$menu[20] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page', '', 'menu-top menu-icon-page', 'menu-pages', 'div' );	$submenu['edit.php?post_type=page'][5] = array( __('Pages'), 'edit_pages', 'edit.php?post_type=page' );	/* translators: add new page */	$submenu['edit.php?post_type=page'][10] = array( _x('Add New', 'page'), 'edit_pages', 'post-new.php?post_type=page' );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array('page', (array) $tax->object_type, true) )			continue;		$submenu['edit.php?post_type=page'][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, 'edit-tags.php?taxonomy=' . $tax->name );	}	unset($tax);$menu[25] = array( sprintf( __('Comments %s'), "<span id='awaiting-mod' class='count-$awaiting_mod'><span class='pending-count'>" . number_format_i18n($awaiting_mod) . "</span></span>" ), 'edit_posts', 'edit-comments.php', '', 'menu-top menu-icon-comments', 'menu-comments', 'div' );$_wp_last_object_menu = 25; // The index of the last top-level menu in the object menu groupforeach ( (array) get_post_types( array('show_ui' => true, '_builtin' => false) ) as $ptype ) {	$ptype_obj = get_post_type_object( $ptype );	$ptype_menu_position = is_int( $ptype_obj->menu_position ) ? $ptype_obj->menu_position : $_wp_last_object_menu++; // If we're to use $_wp_last_object_menu, increment it first.	$ptype_for_id = sanitize_html_class( $ptype );	if ( is_string( $ptype_obj->menu_icon ) ) {		$menu_icon   = esc_url( $ptype_obj->menu_icon );		$ptype_class = $ptype_for_id;	} else {		$menu_icon   = 'div';		$ptype_class = 'post';	}	// if $ptype_menu_position is already populated or will be populated by a hard-coded value below, increment the position.	$core_menu_positions = array(59, 60, 65, 70, 75, 80, 85, 99);	while ( isset($menu[$ptype_menu_position]) || in_array($ptype_menu_position, $core_menu_positions) )		$ptype_menu_position++;	$menu[$ptype_menu_position] = array( esc_attr( $ptype_obj->labels->name ), $ptype_obj->cap->edit_posts, "edit.php?post_type=$ptype", '', 'menu-top menu-icon-' . $ptype_class, 'menu-posts-' . $ptype_for_id, $menu_icon );	$submenu["edit.php?post_type=$ptype"][5]  = array( $ptype_obj->labels->name, $ptype_obj->cap->edit_posts,  "edit.php?post_type=$ptype");	$submenu["edit.php?post_type=$ptype"][10]  = array( $ptype_obj->labels->add_new, $ptype_obj->cap->edit_posts, "post-new.php?post_type=$ptype" );	$i = 15;	foreach ( $wp_taxonomies as $tax ) {		if ( ! $tax->show_ui || ! in_array($ptype, (array) $tax->object_type, true) )			continue;		$submenu["edit.php?post_type=$ptype"][$i++] = array( esc_attr( $tax->labels->name ), $tax->cap->manage_terms, "edit-tags.php?taxonomy=$tax->name&amp;post_type=$ptype" );	}}unset($ptype, $ptype_obj);$menu[59] = array( '', 'read', 'separator2', '', 'wp-menu-separator' );if ( current_user_can( 'switch_themes') ) {	$menu[60] = array( __('Appearance'), 'switch_themes', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'switch_themes', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php');} else {	$menu[60] = array( __('Appearance'), 'edit_theme_options', 'themes.php', '', 'menu-top menu-icon-appearance', 'menu-appearance', 'div' );		$submenu['themes.php'][5]  = array(__('Themes'), 'edit_theme_options', 'themes.php');		if ( current_theme_supports( 'menus' ) || current_theme_supports( 'widgets' ) )			$submenu['themes.php'][10] = array(__('Menus'), 'edit_theme_options', 'nav-menus.php' );}// Add 'Editor' to the bottom of the Appearence menu.add_action('admin_menu', '_add_themes_utility_last', 101);function _add_themes_utility_last() {	// Must use API on the admin_menu hook, direct modification is only possible on/before the _admin_menu hook	add_submenu_page('themes.php', _x('Editor', 'theme editor'), _x('Editor', 'theme editor'), 'edit_themes', 'theme-editor.php');}$update_plugins = get_site_transient( 'update_plugins' );$update_count = 0;if ( !empty($update_plugins->response) )	$update_count = count( $update_plugins->response );$menu_perms = get_site_option('menu_items', array());if ( is_super_admin() || ( is_multisite() && isset($menu_perms['plugins']) && $menu_perms['plugins'] ) ) {	$menu[65] = array( sprintf( __('Plugins %s'), "<span class='update-plugins count-$update_count'><span class='plugin-count'>" . number_format_i18n($update_count) . "</span></span>" ), 'activate_plugins', 'plugins.php', '', 'menu-top menu-icon-plugins', 'menu-plugins', 'div' );		$submenu['plugins.php'][5]  = array( __('Plugins'), 'activate_plugins', 'plugins.php' );		/* translators: add new plugin */		$submenu['plugins.php'][10] = array(_x('Add New', 'plugin'), 'install_plugins', 'plugin-install.php');		$submenu['plugins.php'][15] = array( _x('Editor', 'plugin editor'), 'edit_plugins', 'plugin-editor.php' );}unset($menu_perms, $update_plugins, $update_count);if ( current_user_can('list_users') )	$menu[70] = array( __('Users'), 'list_users', 'users.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );else	$menu[70] = array( __('Profile'), 'read', 'profile.php', '', 'menu-top menu-icon-users', 'menu-users', 'div' );if ( current_user_can('list_users') ) {	$_wp_real_parent_file['profile.php'] = 'users.php'; // Back-compat for plugins adding submenus to profile.php.	$submenu['users.php'][5] = array(__('Users'), 'list_users', 'users.php');	$submenu['users.php'][10] = array(_x('Add New', 'user'), 'create_users', 'user-new.php');	$submenu['users.php'][15] = array(__('Your Profile'), 'read', 'profile.php');} else {	$_wp_real_parent_file['users.php'] = 'profile.php';	$submenu['profile.php'][5] = array(__('Your Profile'), 'read', 'profile.php');	$submenu['profile.php'][10] = array(__('Add New User'), 'create_users', 'user-new.php');}$menu[75] = array( __('Tools'), 'edit_posts', 'tools.php', '', 'menu-top menu-icon-tools', 'menu-tools', 'div' );	$submenu['tools.php'][5] = array( __('Tools'), 'edit_posts', 'tools.php' );	$submenu['tools.php'][10] = array( __('Import'), 'import', 'import.php' );	$submenu['tools.php'][15] = array( __('Export'), 'import', 'export.php' );	if ( is_multisite() && !is_main_site() )		$submenu['tools.php'][25] = array( __('Delete Site'), 'manage_options', 'ms-delete-site.php' );	if ( ( ! is_multisite() || defined( 'MULTISITE' ) ) && defined('WP_ALLOW_MULTISITE') && WP_ALLOW_MULTISITE && is_super_admin() )		$submenu['tools.php'][50] = array(__('Network'), 'manage_options', 'network.php');$menu[80] = array( __('Settings'), 'manage_options', 'options-general.php', '', 'menu-top menu-icon-settings', 'menu-settings', 'div' );	$submenu['options-general.php'][10] = array(_x('General', 'settings screen'), 'manage_options', 'options-general.php');	$submenu['options-general.php'][15] = array(__('Writing'), 'manage_options', 'options-writing.php');	$submenu['options-general.php'][20] = array(__('Reading'), 'manage_options', 'options-reading.php');	$submenu['options-general.php'][25] = array(__('Discussion'), 'manage_options', 'options-discussion.php');	$submenu['options-general.php'][30] = array(__('Media'), 'manage_options', 'options-media.php');	$submenu['options-general.php'][35] = array(__('Privacy'), 'manage_options', 'options-privacy.php');	$submenu['options-general.php'][40] = array(__('Permalinks'), 'manage_options', 'options-permalink.php');$_wp_last_utility_menu = 80; // The index of the last top-level menu in the utility menu group$menu[99] = array( '', 'read', 'separator-last', '', 'wp-menu-separator-last' );// Back-compat for old top-levels$_wp_real_parent_file['post.php'] = 'edit.php';$_wp_real_parent_file['post-new.php'] = 'edit.php';$_wp_real_parent_file['edit-pages.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['page-new.php'] = 'edit.php?post_type=page';$_wp_real_parent_file['wpmu-admin.php'] = 'ms-admin.php';do_action('_admin_menu');// Create list of page plugin hook names.foreach ($menu as $menu_page) {	if ( false !== $pos = strpos($menu_page[2], '?') ) {		// Handle post_type=post|page|foo pages.		$hook_name = substr($menu_page[2], 0, $pos);		$hook_args = substr($menu_page[2], $pos + 1);		wp_parse_str($hook_args, $hook_args);		// Set the hook name to be the post type.		if ( isset($hook_args['post_type']) )			$hook_name = $hook_args['post_type'];		else			$hook_name = basename($hook_name, '.php');		unset($hook_args);	} else {		$hook_name = basename($menu_page[2], '.php');	}	$hook_name = sanitize_title($hook_name);	// ensure we're backwards compatible	$compat = array(		'index' => 'dashboard',		'edit' => 'posts',		'post' => 'posts',		'upload' => 'media',		'link-manager' => 'links',		'edit-pages' => 'pages',		'page' => 'pages',		'edit-comments' => 'comments',		'options-general' => 'settings',		'themes' => 'appearance',		);	if ( isset($compat[$hook_name]) )		$hook_name = $compat[$hook_name];	elseif ( !$hook_name )		continue;	$admin_page_hooks[$menu_page[2]] = $hook_name;}unset($menu_page);$_wp_submenu_nopriv = array();$_wp_menu_nopriv = array();// Loop over submenus and remove pages for which the user does not have privs.foreach ( array( 'submenu' ) as $sub_loop ) {	foreach ($$sub_loop as $parent => $sub) {		foreach ($sub as $index => $data) {			if ( ! current_user_can($data[1]) ) {				unset(${$sub_loop}[$parent][$index]);				$_wp_submenu_nopriv[$parent][$data[2]] = true;			}		}		unset($index, $data);		if ( empty(${$sub_loop}[$parent]) )			unset(${$sub_loop}[$parent]);	}	unset($sub, $parent);}unset($sub_loop);// Loop over the top-level menu.// Menus for which the original parent is not accessible due to lack of privs will have the next// submenu in line be assigned as the new menu parent.foreach ( $menu as $id => $data ) {	if ( empty($submenu[$data[2]]) )		continue;	$subs = $submenu[$data[2]];	$first_sub = array_shift($subs);	$old_parent = $data[2];	$new_parent = $first_sub[2];	// If the first submenu is not the same as the assigned parent,	// make the first submenu the new parent.	if ( $new_parent != $old_parent ) {		$_wp_real_parent_file[$old_parent] = $new_parent;		$menu[$id][2] = $new_parent;		foreach ($submenu[$old_parent] as $index => $data) {			$submenu[$new_parent][$index] = $submenu[$old_parent][$index];			unset($submenu[$old_parent][$index]);		}		unset($submenu[$old_parent], $index);		if ( isset($_wp_submenu_nopriv[$old_parent]) )			$_wp_submenu_nopriv[$new_parent] = $_wp_submenu_nopriv[$old_parent];	}}unset($id, $data, $subs, $first_sub, $old_parent, $new_parent);do_action('admin_menu', '');// Remove menus that have no accessible submenus and require privs that the user does not have.// Run re-parent loop again.foreach ( $menu as $id => $data ) {	if ( ! current_user_can($data[1]) )		$_wp_menu_nopriv[$data[2]] = true;	// If submenu is empty...	if ( empty($submenu[$data[2]]) ) {		// And user doesn't have privs, remove menu.		if ( isset( $_wp_menu_nopriv[$data[2]] ) ) {			unset($menu[$id]);		}	}}unset($id, $data);// Remove any duplicated seperators$seperator_found = false;foreach ( $menu as $id => $data ) {	if ( 0 == strcmp('wp-menu-separator', $data[4] ) ) {		if (false == $seperator_found) {			$seperator_found = true;		} else {			unset($menu[$id]);			$seperator_found = false;		}	} else {		$seperator_found = false;	}}unset($id, $data);function add_cssclass($add, $class) {	$class = empty($class) ? $add : $class .= ' ' . $add;	return $class;}function add_menu_classes($menu) {	$first = $lastorder = false;	$i = 0;	$mc = count($menu);	foreach ( $menu as $order => $top ) {		$i++;		if ( 0 == $order ) { // dashboard is always shown/single			$menu[0][4] = add_cssclass('menu-top-first', $top[4]);			$lastorder = 0;			continue;		}		if ( 0 === strpos($top[2], 'separator') ) { // if separator			$first = true;			$c = $menu[$lastorder][4];			$menu[$lastorder][4] = add_cssclass('menu-top-last', $c);			continue;		}		if ( $first ) {			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-first', $c);			$first = false;		}		if ( $mc == $i ) { // last item			$c = $menu[$order][4];			$menu[$order][4] = add_cssclass('menu-top-last', $c);		}		$lastorder = $order;	}	return apply_filters( 'add_menu_classes', $menu );}uksort($menu, "strnatcasecmp"); // make it all prettyif ( apply_filters('custom_menu_order', false) ) {	$menu_order = array();	foreach ( $menu as $menu_item ) {		$menu_order[] = $menu_item[2];	}	unset($menu_item);	$default_menu_order = $menu_order;	$menu_order = apply_filters('menu_order', $menu_order);	$menu_order = array_flip($menu_order);	$default_menu_order = array_flip($default_menu_order);	function sort_menu($a, $b) {		global $menu_order, $default_menu_order;		$a = $a[2];		$b = $b[2];		if ( isset($menu_order[$a]) && !isset($menu_order[$b]) ) {			return -1;		} elseif ( !isset($menu_order[$a]) && isset($menu_order[$b]) ) {			return 1;		} elseif ( isset($menu_order[$a]) && isset($menu_order[$b]) ) {			if ( $menu_order[$a] == $menu_order[$b] )				return 0;			return ($menu_order[$a] < $menu_order[$b]) ? -1 : 1;		} else {			return ($default_menu_order[$a] <= $default_menu_order[$b]) ? -1 : 1;		}	}	usort($menu, 'sort_menu');	unset($menu_order, $default_menu_order);}$menu = add_menu_classes($menu);if ( !user_can_access_admin_page() ) {	do_action('admin_page_access_denied');	wp_die( __('You do not have sufficient permissions to access this page.') );}?>
<?php/** * WordPress Plugin Administration API * * @package WordPress * @subpackage Administration *//** * Parse the plugin contents to retrieve plugin's metadata. * * The metadata of the plugin's data searches for the following in the plugin's * header. All plugin data must be on its own line. For plugin description, it * must not have any newlines or only parts of the description will be displayed * and the same goes for the plugin data. The below is formatted for printing. * * <code> * /* * Plugin Name: Name of Plugin * Plugin URI: Link to plugin information * Description: Plugin Description * Author: Plugin author's name * Author URI: Link to the author's web site * Version: Must be set in the plugin for WordPress 2.3+ * Text Domain: Optional. Unique identifier, should be same as the one used in *		plugin_text_domain() * Domain Path: Optional. Only useful if the translations are located in a *		folder above the plugin's base path. For example, if .mo files are *		located in the locale folder then Domain Path will be "/locale/" and *		must have the first slash. Defaults to the base folder the plugin is *		located in. * Network: Optional. Specify "Network: true" to require that a plugin is activated *		across all sites in an installation. This will prevent a plugin from being *		activated on a single site when Multisite is enabled. *  * / # Remove the space to close comment * </code> * * Plugin data returned array contains the following: *		'Name' - Name of the plugin, must be unique. *		'Title' - Title of the plugin and the link to the plugin's web site. *		'Description' - Description of what the plugin does and/or notes *		from the author. *		'Author' - The author's name *		'AuthorURI' - The authors web site address. *		'Version' - The plugin version number. *		'PluginURI' - Plugin web site address. *		'TextDomain' - Plugin's text domain for localization. *		'DomainPath' - Plugin's relative directory path to .mo files. *		'Network' - Boolean. Whether the plugin can only be activated network wide. * * Some users have issues with opening large files and manipulating the contents * for want is usually the first 1kiB or 2kiB. This function stops pulling in * the plugin contents when it has all of the required plugin data. * * The first 8kiB of the file will be pulled in and if the plugin data is not * within that first 8kiB, then the plugin author should correct their plugin * and move the plugin data headers to the top. * * The plugin file is assumed to have permissions to allow for scripts to read * the file. This is not checked however and the file is only opened for * reading. * * @link http://trac.wordpress.org/ticket/5651 Previous Optimizations. * @link http://trac.wordpress.org/ticket/7372 Further and better Optimizations. * @since 1.5.0 * * @param string $plugin_file Path to the plugin file * @param bool $markup If the returned data should have HTML markup applied * @param bool $translate If the returned data should be translated * @return array See above for description. */function get_plugin_data( $plugin_file, $markup = true, $translate = true ) {	$default_headers = array(		'Name' => 'Plugin Name',		'PluginURI' => 'Plugin URI',		'Version' => 'Version',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'TextDomain' => 'Text Domain',		'DomainPath' => 'Domain Path',		'Network' => 'Network',		// Site Wide Only is deprecated in favor of Network.		'_sitewide' => 'Site Wide Only',	);	$plugin_data = get_file_data( $plugin_file, $default_headers, 'plugin' );	// Site Wide Only is the old header for Network	if ( empty( $plugin_data['Network'] ) && ! empty( $plugin_data['_sitewide'] ) ) {		_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The <code>%1$s</code> plugin header is deprecated. Use <code>%2$s</code> instead.' ), 'Site Wide Only: true', 'Network: true' ) );		$plugin_data['Network'] = $plugin_data['_sitewide'];	}	$plugin_data['Network'] = ( 'true' == strtolower( $plugin_data['Network'] ) );	unset( $plugin_data['_sitewide'] );	//For backward compatibility by default Title is the same as Name.	$plugin_data['Title'] = $plugin_data['Name'];	if ( $markup || $translate )		$plugin_data = _get_plugin_data_markup_translate( $plugin_file, $plugin_data, $markup, $translate );	return $plugin_data;}function _get_plugin_data_markup_translate($plugin_file, $plugin_data, $markup = true, $translate = true) {	//Translate fields30	if ( $translate && ! empty($plugin_data['TextDomain']) ) {		if ( ! empty( $plugin_data['DomainPath'] ) )			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file). $plugin_data['DomainPath']);		else			load_plugin_textdomain($plugin_data['TextDomain'], false, dirname($plugin_file));		foreach ( array('Name', 'PluginURI', 'Description', 'Author', 'AuthorURI', 'Version') as $field )			$plugin_data[ $field ] = translate($plugin_data[ $field ], $plugin_data['TextDomain']);	}	//Apply Markup	if ( $markup ) {		if ( ! empty($plugin_data['PluginURI']) && ! empty($plugin_data['Name']) )			$plugin_data['Title'] = '<a href="' . $plugin_data['PluginURI'] . '" title="' . __( 'Visit plugin homepage' ) . '">' . $plugin_data['Name'] . '</a>';		else			$plugin_data['Title'] = $plugin_data['Name'];		if ( ! empty($plugin_data['AuthorURI']) && ! empty($plugin_data['Author']) )			$plugin_data['Author'] = '<a href="' . $plugin_data['AuthorURI'] . '" title="' . __( 'Visit author homepage' ) . '">' . $plugin_data['Author'] . '</a>';		$plugin_data['Description'] = wptexturize( $plugin_data['Description'] );		if ( ! empty($plugin_data['Author']) )			$plugin_data['Description'] .= ' <cite>' . sprintf( __('By %s'), $plugin_data['Author'] ) . '.</cite>';	}	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	// Sanitize all displayed data	$plugin_data['Title']       = wp_kses($plugin_data['Title'], $plugins_allowedtags);	$plugin_data['Version']     = wp_kses($plugin_data['Version'], $plugins_allowedtags);	$plugin_data['Description'] = wp_kses($plugin_data['Description'], $plugins_allowedtags);	$plugin_data['Author']      = wp_kses($plugin_data['Author'], $plugins_allowedtags);	return $plugin_data;}/** * Get a list of a plugin's files. * * @since 2.8.0 * * @param string $plugin Plugin ID * @return array List of files relative to the plugin root. */function get_plugin_files($plugin) {	$plugin_file = WP_PLUGIN_DIR . '/' . $plugin;	$dir = dirname($plugin_file);	$plugin_files = array($plugin);	if ( is_dir($dir) && $dir != WP_PLUGIN_DIR ) {		$plugins_dir = @ opendir( $dir );		if ( $plugins_dir ) {			while (($file = readdir( $plugins_dir ) ) !== false ) {				if ( substr($file, 0, 1) == '.' )					continue;				if ( is_dir( $dir . '/' . $file ) ) {					$plugins_subdir = @ opendir( $dir . '/' . $file );					if ( $plugins_subdir ) {						while (($subfile = readdir( $plugins_subdir ) ) !== false ) {							if ( substr($subfile, 0, 1) == '.' )								continue;							$plugin_files[] = plugin_basename("$dir/$file/$subfile");						}						@closedir( $plugins_subdir );					}				} else {					if ( plugin_basename("$dir/$file") != $plugin )						$plugin_files[] = plugin_basename("$dir/$file");				}			}			@closedir( $plugins_dir );		}	}	return $plugin_files;}/** * Check the plugins directory and retrieve all plugin files with plugin data. * * WordPress only supports plugin files in the base plugins directory * (wp-content/plugins) and in one directory above the plugins directory * (wp-content/plugins/my-plugin). The file it looks for has the plugin data and * must be found in those two locations. It is recommended that do keep your * plugin files in directories. * * The file with the plugin data is the file that will be included and therefore * needs to have the main execution for the plugin. This does not mean * everything must be contained in the file and it is recommended that the file * be split for maintainability. Keep everything in one file for extreme * optimization purposes. * * @since unknown * * @param string $plugin_folder Optional. Relative path to single plugin folder. * @return array Key is the plugin file path and the value is an array of the plugin data. */function get_plugins($plugin_folder = '') {	if ( ! $cache_plugins = wp_cache_get('plugins', 'plugins') )		$cache_plugins = array();	if ( isset($cache_plugins[ $plugin_folder ]) )		return $cache_plugins[ $plugin_folder ];	$wp_plugins = array ();	$plugin_root = WP_PLUGIN_DIR;	if ( !empty($plugin_folder) )		$plugin_root .= $plugin_folder;	// Files in wp-content/plugins directory	$plugins_dir = @ opendir( $plugin_root);	$plugin_files = array();	if ( $plugins_dir ) {		while (($file = readdir( $plugins_dir ) ) !== false ) {			if ( substr($file, 0, 1) == '.' )				continue;			if ( is_dir( $plugin_root.'/'.$file ) ) {				$plugins_subdir = @ opendir( $plugin_root.'/'.$file );				if ( $plugins_subdir ) {					while (($subfile = readdir( $plugins_subdir ) ) !== false ) {						if ( substr($subfile, 0, 1) == '.' )							continue;						if ( substr($subfile, -4) == '.php' )							$plugin_files[] = "$file/$subfile";					}				}			} else {				if ( substr($file, -4) == '.php' )					$plugin_files[] = $file;			}		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	@closedir( $plugins_subdir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( "$plugin_root/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( "$plugin_root/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			continue;		$wp_plugins[plugin_basename( $plugin_file )] = $plugin_data;	}	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	$cache_plugins[ $plugin_folder ] = $wp_plugins;	wp_cache_set('plugins', $cache_plugins, 'plugins');	return $wp_plugins;}/** * Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data. * * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins). * * @since 3.0.0 * @return array Key is the mu-plugin file path and the value is an array of the mu-plugin data. */function get_mu_plugins() {	$wp_plugins = array();	// Files in wp-content/mu-plugins directory	$plugin_files = array();	if ( ! is_dir( WPMU_PLUGIN_DIR ) )		return $wp_plugins;	if ( $plugins_dir = @ opendir( WPMU_PLUGIN_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( substr( $file, -4 ) == '.php' )				$plugin_files[] = $file;		}	} else {		return $wp_plugins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $wp_plugins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WPMU_PLUGIN_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WPMU_PLUGIN_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty ( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$wp_plugins[ $plugin_file ] = $plugin_data;	}	if ( isset( $wp_plugins['index.php'] ) && filesize( WPMU_PLUGIN_DIR . '/index.php') <= 30 ) // silence is golden		unset( $wp_plugins['index.php'] );	uasort( $wp_plugins, create_function( '$a, $b', 'return strnatcasecmp( $a["Name"], $b["Name"] );' ));	return $wp_plugins;}/** * Check the wp-content directory and retrieve all drop-ins with any plugin data. * * @since 3.0.0 * @return array Key is the file path and the value is an array of the plugin data. */function get_dropins() {	$dropins = array();	$plugin_files = array();	$_dropins = _get_dropins();	// These exist in the wp-content directory	if ( $plugins_dir = @ opendir( WP_CONTENT_DIR ) ) {		while ( ( $file = readdir( $plugins_dir ) ) !== false ) {			if ( isset( $_dropins[ $file ] ) )				$plugin_files[] = $file;		}	} else {		return $dropins;	}	@closedir( $plugins_dir );	if ( empty($plugin_files) )		return $dropins;	foreach ( $plugin_files as $plugin_file ) {		if ( !is_readable( WP_CONTENT_DIR . "/$plugin_file" ) )			continue;		$plugin_data = get_plugin_data( WP_CONTENT_DIR . "/$plugin_file", false, false ); //Do not apply markup/translate as it'll be cached.		if ( empty( $plugin_data['Name'] ) )			$plugin_data['Name'] = $plugin_file;		$dropins[ $plugin_file ] = $plugin_data;	}	uksort( $dropins, create_function( '$a, $b', 'return strnatcasecmp( $a, $b );' ));	return $dropins;}/** * Returns drop-ins that WordPress uses. * * Includes Multisite drop-ins only when is_multisite() * * @since 3.0.0 * @return array Key is file name. The value is an array, with the first value the *	purpose of the drop-in and the second value the name of the constant that must be *	true for the drop-in to be used, or true if no constant is required. */function _get_dropins() {	$dropins = array(		'advanced-cache.php' => array( __( 'Advanced caching plugin.'       ), 'WP_CACHE' ), // WP_CACHE		'db.php'             => array( __( 'Custom database class.'         ), true ), // auto on load		'db-error.php'       => array( __( 'Custom database error message.' ), true ), // auto on error		'install.php'        => array( __( 'Custom install script.'         ), true ), // auto on install		'maintenance.php'    => array( __( 'Custom maintenance message.'    ), true ), // auto on maintenance		'object-cache.php'   => array( __( 'External object cache.'         ), true ), // auto on load	);	if ( is_multisite() ) {		$dropins['sunrise.php'       ] = array( __( 'Executed before Multisite is loaded.' ), 'SUNRISE' ); // SUNRISE		$dropins['blog-deleted.php'  ] = array( __( 'Custom site deleted message.'   ), true ); // auto on deleted blog		$dropins['blog-inactive.php' ] = array( __( 'Custom site inactive message.'  ), true ); // auto on inactive blog		$dropins['blog-suspended.php'] = array( __( 'Custom site suspended message.' ), true ); // auto on archived or spammed blog	}	return $dropins;}/** * Check whether the plugin is active by checking the active_plugins list. * * @since 2.5.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if in the active plugins list. False, not in the list. */function is_plugin_active( $plugin ) {	return in_array( $plugin, (array) get_option( 'active_plugins', array() ) ) || is_plugin_active_for_network( $plugin );}/** * Check whether the plugin is active for the entire network. * * @since 3.0.0 * * @param string $plugin Base plugin path from plugins directory. * @return bool True, if active for the network, otherwise false. */function is_plugin_active_for_network( $plugin ) {	if ( !is_multisite() )		return false;	$plugins = get_site_option( 'active_sitewide_plugins');	if ( isset($plugins[$plugin]) )		return true;	return false;}/** * Checks for "Network: true" in the plugin header to see if this should * be activated only as a network wide plugin. The plugin would also work * when Multisite is not enabled. * * Checks for "Site Wide Only: true" for backwards compatibility. * * @since 3.0.0 * * @param $file Plugin to check * $return bool True if plugin is network only, false otherwise. */function is_network_only_plugin( $plugin ) {	$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );	if ( $plugin_data )		return $plugin_data['Network'];	return false;}/** * Attempts activation of plugin in a "sandbox" and redirects on success. * * A plugin that is already activated will not attempt to be activated again. * * The way it works is by setting the redirection to the error before trying to * include the plugin file. If the plugin fails, then the redirection will not * be overwritten with the success message. Also, the options will not be * updated and the activation hook will not be called on plugin error. * * It should be noted that in no way the below code will actually prevent errors * within the file. The code should not be used elsewhere to replicate the * "sandbox", which uses redirection to work. * {@source 13 1} * * If any errors are found or text is outputted, then it will be captured to * ensure that the success redirection will update the error redirection. * * @since unknown * * @param string $plugin Plugin path to main plugin file with plugin data. * @param string $redirect Optional. URL to redirect to. * @param bool $network_wide Whether to enable the plugin for all sites in the network or just the current site.  Multisite only. Default is false. * @return WP_Error|null WP_Error on invalid file or null on success. */function activate_plugin( $plugin, $redirect = '', $network_wide = false) {	$plugin  = plugin_basename( trim( $plugin ) );	if ( is_multisite() && ( $network_wide || is_network_only_plugin($plugin) ) ) {		$network_wide = true;		$current = get_site_option( 'active_sitewide_plugins', array() );	} else {		$current = get_option( 'active_plugins', array() );	}	$valid = validate_plugin($plugin);	if ( is_wp_error($valid) )		return $valid;	if ( !in_array($plugin, $current) ) {		if ( !empty($redirect) )			wp_redirect(add_query_arg('_error_nonce', wp_create_nonce('plugin-activation-error_' . $plugin), $redirect)); // we'll override this later if the plugin can be included without fatal error		ob_start();		include(WP_PLUGIN_DIR . '/' . $plugin);		do_action( 'activate_plugin', trim( $plugin) );		if ( $network_wide ) {			$current[$plugin] = time();			update_site_option( 'active_sitewide_plugins', $current );		} else {			$current[] = $plugin;			sort($current);			update_option('active_plugins', $current);		}		do_action( 'activate_' . trim( $plugin ) );		do_action( 'activated_plugin', trim( $plugin) );		if ( ob_get_length() > 0 ) {			$output = ob_get_clean();			return new WP_Error('unexpected_output', __('The plugin generated unexpected output.'), $output);		}		ob_end_clean();	}	return null;}/** * Deactivate a single plugin or multiple plugins. * * The deactivation hook is disabled by the plugin upgrader by using the $silent * parameter. * * @since unknown * * @param string|array $plugins Single plugin or list of plugins to deactivate. * @param bool $silent Optional, default is false. Prevent calling deactivate hook. */function deactivate_plugins( $plugins, $silent = false ) {	$network_current = get_site_option( 'active_sitewide_plugins', array() );	$current = get_option( 'active_plugins', array() );	$do_blog = $do_network = false;	foreach ( (array) $plugins as $plugin ) {		$plugin = plugin_basename($plugin);		if ( ! is_plugin_active($plugin) )			continue;		if ( ! $silent )			do_action( 'deactivate_plugin', trim( $plugin ) );		if ( is_plugin_active_for_network($plugin) ) {			// Deactivate network wide			$do_network = true;			unset( $network_current[ $plugin ] );		} else {			// Deactivate for this blog only			$key = array_search( $plugin, (array) $current );			if ( false !== $key ) {				$do_blog = true;				array_splice( $current, $key, 1 );			}		}		//Used by Plugin updater to internally deactivate plugin, however, not to notify plugins of the fact to prevent plugin output.		if ( ! $silent ) {			do_action( 'deactivate_' . trim( $plugin ) );			do_action( 'deactivated_plugin', trim( $plugin ) );		}	}	if ( $do_blog )		update_option('active_plugins', $current);	if ( $do_network )		update_site_option( 'active_sitewide_plugins', $network_current );}/** * Activate multiple plugins. * * When WP_Error is returned, it does not mean that one of the plugins had * errors. It means that one or more of the plugins file path was invalid. * * The execution will be halted as soon as one of the plugins has an error. * * @since unknown * * @param string|array $plugins * @param string $redirect Redirect to page after successful activation. * @param bool $network_wide Whether to enable the plugin for all sites in the network. * @return bool|WP_Error True when finished or WP_Error if there were errors during a plugin activation. */function activate_plugins($plugins, $redirect = '', $network_wide) {	if ( !is_array($plugins) )		$plugins = array($plugins);	$errors = array();	foreach ( (array) $plugins as $plugin ) {		if ( !empty($redirect) )			$redirect = add_query_arg('plugin', $plugin, $redirect);		$result = activate_plugin($plugin, $redirect, $network_wide);		if ( is_wp_error($result) )			$errors[$plugin] = $result;	}	if ( !empty($errors) )		return new WP_Error('plugins_invalid', __('One of the plugins is invalid.'), $errors);	return true;}/** * Remove directory and files of a plugin for a single or list of plugin(s). * * If the plugins parameter list is empty, false will be returned. True when * completed. * * @since unknown * * @param array $plugins List of plugin * @param string $redirect Redirect to page when complete. * @return mixed */function delete_plugins($plugins, $redirect = '' ) {	global $wp_filesystem;	if ( empty($plugins) )		return false;	$checked = array();	foreach( $plugins as $plugin )		$checked[] = 'checked[]=' . $plugin;	ob_start();	$url = wp_nonce_url('plugins.php?action=delete-selected&verify-delete=1&' . implode('&', $checked), 'bulk-manage-plugins');	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); //Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$plugins_dir = $wp_filesystem->wp_plugins_dir();	if ( empty($plugins_dir) )		return new WP_Error('fs_no_plugins_dir', __('Unable to locate WordPress Plugin directory.'));	$plugins_dir = trailingslashit( $plugins_dir );	$errors = array();	foreach( $plugins as $plugin_file ) {		// Run Uninstall hook		if ( is_uninstallable_plugin( $plugin_file ) )			uninstall_plugin($plugin_file);		$this_plugin_dir = trailingslashit( dirname($plugins_dir . $plugin_file) );		// If plugin is in its own directory, recursively delete the directory.		if ( strpos($plugin_file, '/') && $this_plugin_dir != $plugins_dir ) //base check on if plugin includes directory seperator AND that its not the root plugin folder			$deleted = $wp_filesystem->delete($this_plugin_dir, true);		else			$deleted = $wp_filesystem->delete($plugins_dir . $plugin_file);		if ( ! $deleted )			$errors[] = $plugin_file;	}	if ( ! empty($errors) )		return new WP_Error('could_not_remove_plugin', sprintf(__('Could not fully remove the plugin(s) %s.'), implode(', ', $errors)) );	// Force refresh of plugin update information	if ( $current = get_site_transient('update_plugins') ) {		unset( $current->response[ $plugin_file ] );		set_site_transient('update_plugins', $current);	}	return true;}/** * Validate active plugins * * Validate all active plugins, deactivates invalid and * returns an array of deactivated ones. * * @since unknown * @return array invalid plugins, plugin as key, error as value */function validate_active_plugins() {	$plugins = get_option( 'active_plugins', array() );	// validate vartype: array	if ( ! is_array( $plugins ) ) {		update_option( 'active_plugins', array() );		$plugins = array();	}	if ( is_multisite() && is_super_admin() ) {		$network_plugins = (array) get_site_option( 'active_sitewide_plugins', array() );		$plugins = array_merge( $plugins, array_keys( $network_plugins ) );	}	if ( empty( $plugins ) )		return;	$invalid = array();	// invalid plugins get deactivated	foreach ( $plugins as $plugin ) {		$result = validate_plugin( $plugin );		if ( is_wp_error( $result ) ) {			$invalid[$plugin] = $result;			deactivate_plugins( $plugin, true );		}	}	return $invalid;}/** * Validate the plugin path. * * Checks that the file exists and {@link validate_file() is valid file}. * * @since unknown * * @param string $plugin Plugin Path * @return WP_Error|int 0 on success, WP_Error on failure. */function validate_plugin($plugin) {	if ( validate_file($plugin) )		return new WP_Error('plugin_invalid', __('Invalid plugin path.'));	if ( ! file_exists(WP_PLUGIN_DIR . '/' . $plugin) )		return new WP_Error('plugin_not_found', __('Plugin file does not exist.'));	$installed_plugins = get_plugins();	if ( ! isset($installed_plugins[$plugin]) )		return new WP_Error('no_plugin_header', __('The plugin does not have a valid header.'));	return 0;}/** * Whether the plugin can be uninstalled. * * @since 2.7.0 * * @param string $plugin Plugin path to check. * @return bool Whether plugin can be uninstalled. */function is_uninstallable_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( isset( $uninstallable_plugins[$file] ) || file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) )		return true;	return false;}/** * Uninstall a single plugin. * * Calls the uninstall hook, if it is available. * * @since 2.7.0 * * @param string $plugin Relative plugin path from Plugin Directory. */function uninstall_plugin($plugin) {	$file = plugin_basename($plugin);	$uninstallable_plugins = (array) get_option('uninstall_plugins');	if ( file_exists( WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php' ) ) {		if ( isset( $uninstallable_plugins[$file] ) ) {			unset($uninstallable_plugins[$file]);			update_option('uninstall_plugins', $uninstallable_plugins);		}		unset($uninstallable_plugins);		define('WP_UNINSTALL_PLUGIN', $file);		include WP_PLUGIN_DIR . '/' . dirname($file) . '/uninstall.php';		return true;	}	if ( isset( $uninstallable_plugins[$file] ) ) {		$callable = $uninstallable_plugins[$file];		unset($uninstallable_plugins[$file]);		update_option('uninstall_plugins', $uninstallable_plugins);		unset($uninstallable_plugins);		include WP_PLUGIN_DIR . '/' . $file;		add_action( 'uninstall_' . $file, $callable );		do_action( 'uninstall_' . $file );	}}//// Menu///** * Add a top level menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu * @param int $position The position in the menu order this one should appear */function add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = NULL ) {	global $menu, $admin_page_hooks, $_registered_pages, $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$admin_page_hooks[$menu_slug] = sanitize_title( $menu_title );	$hookname = get_plugin_page_hookname( $menu_slug, '' );	if ( !empty( $function ) && !empty( $hookname ) && current_user_can( $capability ) )		add_action( $hookname, $function );	if ( empty($icon_url) )		$icon_url = esc_url( admin_url( 'images/generic.png' ) );	elseif ( is_ssl() && 0 === strpos($icon_url, 'http://') )		$icon_url = 'https://' . substr($icon_url, 7);	$new_menu = array( $menu_title, $capability, $menu_slug, $page_title, 'menu-top ' . $hookname, $hookname, $icon_url );	if ( null === $position  )		$menu[] = $new_menu;	else		$menu[$position] = $new_menu;	$_registered_pages[$hookname] = true;	// No parent as top level	$_parent_pages[$menu_slug] = false;	return $hookname;}/** * Add a top level menu page in the 'objects' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_object_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_object_menu;	$_wp_last_object_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_object_menu);}/** * Add a top level menu page in the 'utility' section * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. * @param string $icon_url The url to the icon to be used for this menu */function add_utility_page( $page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '') {	global $_wp_last_utility_menu;	$_wp_last_utility_menu++;	return add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $_wp_last_utility_menu);}/** * Add a sub menu page * * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page) * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_submenu_page( $parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	global $submenu;	global $menu;	global $_wp_real_parent_file;	global $_wp_submenu_nopriv;	global $_registered_pages;	global $_parent_pages;	$menu_slug = plugin_basename( $menu_slug );	$parent_slug = plugin_basename( $parent_slug);	if ( isset( $_wp_real_parent_file[$parent_slug] ) )		$parent_slug = $_wp_real_parent_file[$parent_slug];	if ( !current_user_can( $capability ) ) {		$_wp_submenu_nopriv[$parent_slug][$menu_slug] = true;		return false;	}	// If the parent doesn't already have a submenu, add a link to the parent	// as the first item in the submenu.  If the submenu file is the same as the	// parent file someone is trying to link back to the parent manually.  In	// this case, don't automatically add a link back to avoid duplication.	if (!isset( $submenu[$parent_slug] ) && $menu_slug != $parent_slug  ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $parent_slug && current_user_can( $parent_menu[1] ) )				$submenu[$parent_slug][] = $parent_menu;		}	}	$submenu[$parent_slug][] = array ( $menu_title, $capability, $menu_slug, $page_title );	$hookname = get_plugin_page_hookname( $menu_slug, $parent_slug);	if (!empty ( $function ) && !empty ( $hookname ))		add_action( $hookname, $function );	$_registered_pages[$hookname] = true;	// backwards-compatibility for plugins using add_management page.  See wp-admin/admin.php for redirect from edit.php to tools.php	if ( 'tools.php' == $parent_slug )		$_registered_pages[get_plugin_page_hookname( $menu_slug, 'edit.php')] = true;	// No parent as top level	$_parent_pages[$menu_slug] = $parent_slug;	return $hookname;}/** * Add sub menu page to the tools main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_management_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'tools.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the options main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_options_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'options-general.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the themes main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_theme_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'themes.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the plugins main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_plugins_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'plugins.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Users/Profile main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_users_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	if ( current_user_can('edit_users') )		$parent = 'users.php';	else		$parent = 'profile.php';	return add_submenu_page( $parent, $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the Dashboard main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_dashboard_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'index.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the posts main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_posts_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the media main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_media_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'upload.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the links main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_links_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'link-manager.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the pages main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_pages_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit.php?post_type=page', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Add sub menu page to the comments main menu.* * This function takes a capability which will be used to determine whether * or not a page is included in the menu. * * The function which is hooked in to handle the output of the page must check * that the user has the required capability as well. * * @param string $page_title The text to be displayed in the title tags of the page when the menu is selected * @param string $menu_title The text to be used for the menu * @param string $capability The capability required for this menu to be displayed to the user. * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param callback $function The function to be called to output the content for this page. */function add_comments_page( $page_title, $menu_title, $capability, $menu_slug, $function = '' ) {	return add_submenu_page( 'edit-comments.php', $page_title, $menu_title, $capability, $menu_slug, $function );}/** * Get the url to access a particular menu page based on the slug it was registered with. * * If the slug hasn't been registered properly no url will be returned * * @since 3.0 * * @param string $menu_slug The slug name to refer to this menu by (should be unique for this menu) * @param bool $echo Whether or not to echo the url - default is true * @return string the url */function menu_page_url($menu_slug, $echo = true) {	global $_parent_pages;	if ( isset( $_parent_pages[$menu_slug] ) ) {		if ( $_parent_pages[$menu_slug] ) {			$url = admin_url( add_query_arg( 'page', $menu_slug, $_parent_pages[$menu_slug] ) );		} else {			$url = admin_url('admin.php?page=' . $menu_slug);		}	} else {		$url = '';	}	$url = esc_url($url);	if ( $echo )		echo $url;	return $url;}//// Pluggable Menu Support -- Private//function get_admin_page_parent( $parent = '' ) {	global $parent_file;	global $menu;	global $submenu;	global $pagenow;	global $typenow;	global $plugin_page;	global $_wp_real_parent_file;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	if ( !empty ( $parent ) && 'admin.php' != $parent ) {		if ( isset( $_wp_real_parent_file[$parent] ) )			$parent = $_wp_real_parent_file[$parent];		return $parent;	}	/*	if ( !empty ( $parent_file ) ) {		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	*/	if ( $pagenow == 'admin.php' && isset( $plugin_page ) ) {		foreach ( (array)$menu as $parent_menu ) {			if ( $parent_menu[2] == $plugin_page ) {				$parent_file = $plugin_page;				if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];				return $parent_file;			}		}		if ( isset( $_wp_menu_nopriv[$plugin_page] ) ) {			$parent_file = $plugin_page;			if ( isset( $_wp_real_parent_file[$parent_file] ) )					$parent_file = $_wp_real_parent_file[$parent_file];			return $parent_file;		}	}	if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) ) {		$parent_file = $pagenow;		if ( isset( $_wp_real_parent_file[$parent_file] ) )			$parent_file = $_wp_real_parent_file[$parent_file];		return $parent_file;	}	foreach (array_keys( (array)$submenu ) as $parent) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $_wp_real_parent_file[$parent] ) )				$parent = $_wp_real_parent_file[$parent];			if ( !empty($typenow) && ($submenu_array[2] == "$pagenow?post_type=$typenow") ) {				$parent_file = $parent;				return $parent;			} elseif ( $submenu_array[2] == $pagenow && empty($typenow) && ( empty($parent_file) || false === strpos($parent_file, '?') ) ) {				$parent_file = $parent;				return $parent;			} else				if ( isset( $plugin_page ) && ($plugin_page == $submenu_array[2] ) ) {					$parent_file = $parent;					return $parent;				}		}	}	if ( empty($parent_file) )		$parent_file = '';	return '';}function get_admin_page_title() {	global $title;	global $menu;	global $submenu;	global $pagenow;	global $plugin_page;	global $typenow;	if ( ! empty ( $title ) )		return $title;	$hook = get_plugin_page_hook( $plugin_page, $pagenow );	$parent = $parent1 = get_admin_page_parent();	if ( empty ( $parent) ) {		foreach ( (array)$menu as $menu_array ) {			if ( isset( $menu_array[3] ) ) {				if ( $menu_array[2] == $pagenow ) {					$title = $menu_array[3];					return $menu_array[3];				} else					if ( isset( $plugin_page ) && ($plugin_page == $menu_array[2] ) && ($hook == $menu_array[3] ) ) {						$title = $menu_array[3];						return $menu_array[3];					}			} else {				$title = $menu_array[0];				return $title;			}		}	} else {		foreach ( array_keys( $submenu ) as $parent ) {			foreach ( $submenu[$parent] as $submenu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $submenu_array[2] ) &&					(						( $parent == $pagenow ) ||						( $parent == $plugin_page ) ||						( $plugin_page == $hook ) ||						( $pagenow == 'admin.php' && $parent1 != $submenu_array[2] ) ||						( !empty($typenow) && $parent == $pagenow . '?post_type=' . $typenow)					)					) {						$title = $submenu_array[3];						return $submenu_array[3];					}				if ( $submenu_array[2] != $pagenow || isset( $_GET['page'] ) ) // not the current page					continue;				if ( isset( $submenu_array[3] ) ) {					$title = $submenu_array[3];					return $submenu_array[3];				} else {					$title = $submenu_array[0];					return $title;				}			}		}		if ( empty ( $title ) ) {			foreach ( $menu as $menu_array ) {				if ( isset( $plugin_page ) &&					( $plugin_page == $menu_array[2] ) &&					( $pagenow == 'admin.php' ) &&					( $parent1 == $menu_array[2] ) )					{						$title = $menu_array[3];						return $menu_array[3];					}			}		}	}	return $title;}function get_plugin_page_hook( $plugin_page, $parent_page ) {	$hook = get_plugin_page_hookname( $plugin_page, $parent_page );	if ( has_action($hook) )		return $hook;	else		return null;}function get_plugin_page_hookname( $plugin_page, $parent_page ) {	global $admin_page_hooks;	$parent = get_admin_page_parent( $parent_page );	$page_type = 'admin';	if ( empty ( $parent_page ) || 'admin.php' == $parent_page || isset( $admin_page_hooks[$plugin_page] ) ) {		if ( isset( $admin_page_hooks[$plugin_page] ) )			$page_type = 'toplevel';		else			if ( isset( $admin_page_hooks[$parent] ))				$page_type = $admin_page_hooks[$parent];	} else if ( isset( $admin_page_hooks[$parent] ) ) {		$page_type = $admin_page_hooks[$parent];	}	$plugin_name = preg_replace( '!\.php!', '', $plugin_page );	return $page_type . '_page_' . $plugin_name;}function user_can_access_admin_page() {	global $pagenow;	global $menu;	global $submenu;	global $_wp_menu_nopriv;	global $_wp_submenu_nopriv;	global $plugin_page;	global $_registered_pages;	$parent = get_admin_page_parent();	if ( !isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$parent][$pagenow] ) )		return false;	if ( isset( $plugin_page ) ) {		if ( isset( $_wp_submenu_nopriv[$parent][$plugin_page] ) )			return false;		$hookname = get_plugin_page_hookname($plugin_page, $parent);		if ( !isset($_registered_pages[$hookname]) )			return false;	}	if ( empty( $parent) ) {		if ( isset( $_wp_menu_nopriv[$pagenow] ) )			return false;		if ( isset( $_wp_submenu_nopriv[$pagenow][$pagenow] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$pagenow][$plugin_page] ) )			return false;		if ( isset( $plugin_page ) && isset( $_wp_menu_nopriv[$plugin_page] ) )			return false;		foreach (array_keys( $_wp_submenu_nopriv ) as $key ) {			if ( isset( $_wp_submenu_nopriv[$key][$pagenow] ) )				return false;			if ( isset( $plugin_page ) && isset( $_wp_submenu_nopriv[$key][$plugin_page] ) )			return false;		}		return true;	}	if ( isset( $plugin_page ) && ( $plugin_page == $parent ) && isset( $_wp_menu_nopriv[$plugin_page] ) )		return false;	if ( isset( $submenu[$parent] ) ) {		foreach ( $submenu[$parent] as $submenu_array ) {			if ( isset( $plugin_page ) && ( $submenu_array[2] == $plugin_page ) ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			} else if ( $submenu_array[2] == $pagenow ) {				if ( current_user_can( $submenu_array[1] ))					return true;				else					return false;			}		}	}	foreach ( $menu as $menu_array ) {		if ( $menu_array[2] == $parent) {			if ( current_user_can( $menu_array[1] ))				return true;			else				return false;		}	}	return true;}/* Whitelist functions *//** * Register a setting and its sanitization callback * * @since 2.7.0 * * @param string $option_group A settings group name.  Should correspond to a whitelisted option key name. * 	Default whitelisted option key names include "general," "discussion," and "reading," among others. * @param string $option_name The name of an option to sanitize and save. * @param unknown_type $sanitize_callback A callback function that sanitizes the option's value. * @return unknown */function register_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$new_whitelist_options[ $option_group ][] = $option_name;	if ( $sanitize_callback != '' )		add_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * Unregister a setting * * @since 2.7.0 * * @param unknown_type $option_group * @param unknown_type $option_name * @param unknown_type $sanitize_callback * @return unknown */function unregister_setting( $option_group, $option_name, $sanitize_callback = '' ) {	global $new_whitelist_options;	if ( 'misc' == $option_group ) {		_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );		$option_group = 'general';	}	$pos = array_search( $option_name, (array) $new_whitelist_options );	if ( $pos !== false )		unset( $new_whitelist_options[ $option_group ][ $pos ] );	if ( $sanitize_callback != '' )		remove_filter( "sanitize_option_{$option_name}", $sanitize_callback );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $options * @return unknown */function option_update_filter( $options ) {	global $new_whitelist_options;	if ( is_array( $new_whitelist_options ) )		$options = add_option_whitelist( $new_whitelist_options, $options );	return $options;}add_filter( 'whitelist_options', 'option_update_filter' );/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $new_options * @param unknown_type $options * @return unknown */function add_option_whitelist( $new_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $new_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( !isset($whitelist_options[ $page ]) || !is_array($whitelist_options[ $page ]) ) {				$whitelist_options[ $page ] = array();				$whitelist_options[ $page ][] = $key;			} else {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos === false )					$whitelist_options[ $page ][] = $key;			}		}	}	return $whitelist_options;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $del_options * @param unknown_type $options * @return unknown */function remove_option_whitelist( $del_options, $options = '' ) {	if ( $options == '' )		global $whitelist_options;	else		$whitelist_options = $options;	foreach ( $del_options as $page => $keys ) {		foreach ( $keys as $key ) {			if ( isset($whitelist_options[ $page ]) && is_array($whitelist_options[ $page ]) ) {				$pos = array_search( $key, $whitelist_options[ $page ] );				if ( $pos !== false )					unset( $whitelist_options[ $page ][ $pos ] );			}		}	}	return $whitelist_options;}/** * Output nonce, action, and option_page fields for a settings page. * * @since 2.7.0 * * @param string $option_group A settings group name.  This should match the group name used in register_setting(). */function settings_fields($option_group) {	echo "<input type='hidden' name='option_page' value='" . esc_attr($option_group) . "' />";	echo '<input type="hidden" name="action" value="update" />';	wp_nonce_field("$option_group-options");}?>
<?php/** * WordPress Rewrite API * * @package WordPress * @subpackage Rewrite *//** * Add a straight rewrite rule. * * @see WP_Rewrite::add_rule() for long description. * @since 2.1.0 * * @param string $regex Regular Expression to match request against. * @param string $redirect Page to redirect to. * @param string $after Optional, default is 'bottom'. Where to add rule, can also be 'top'. */function add_rewrite_rule($regex, $redirect, $after = 'bottom') {	global $wp_rewrite;	$wp_rewrite->add_rule($regex, $redirect, $after);}/** * Add a new tag (like %postname%). * * Warning: you must call this on init or earlier, otherwise the query var * addition stuff won't work. * * @since 2.1.0 * * @param string $tagname * @param string $regex */function add_rewrite_tag($tagname, $regex) {	//validation	if ( strlen($tagname) < 3 || $tagname{0} != '%' || $tagname{strlen($tagname)-1} != '%' )		return;	$qv = trim($tagname, '%');	global $wp_rewrite, $wp;	$wp->add_query_var($qv);	$wp_rewrite->add_rewrite_tag($tagname, $regex, $qv . '=');}/** * Add permalink structure. * * @see WP_Rewrite::add_permastruct() * @since 3.0.0 * * @param string $name Name for permalink structure. * @param string $struct Permalink structure. * @param bool $with_front Prepend front base to permalink structure. */function add_permastruct( $name, $struct, $with_front = true, $ep_mask = EP_NONE ) {	global $wp_rewrite;	return $wp_rewrite->add_permastruct( $name, $struct, $with_front, $ep_mask );}/** * Add a new feed type like /atom1/. * * @since 2.1.0 * * @param string $feedname * @param callback $function Callback to run on feed display. * @return string Feed action name. */function add_feed($feedname, $function) {	global $wp_rewrite;	if ( ! in_array($feedname, $wp_rewrite->feeds) ) //override the file if it is		$wp_rewrite->feeds[] = $feedname;	$hook = 'do_feed_' . $feedname;	// Remove default function hook	remove_action($hook, $hook, 10, 1);	add_action($hook, $function, 10, 1);	return $hook;}/** * Remove rewrite rules and then recreate rewrite rules. * * @see WP_Rewrite::flush_rules() * @since 3.0.0 * * @param bool $hard Whether to update .htaccess (hard flush) or just update * 	rewrite_rules transient (soft flush). Default is true (hard). */function flush_rewrite_rules( $hard = true ) {	global $wp_rewrite;	$wp_rewrite->flush_rules( $hard );}//pseudo-places/** * Endpoint Mask for default, which is nothing. * * @since 2.1.0 */define('EP_NONE', 0);/** * Endpoint Mask for Permalink. * * @since 2.1.0 */define('EP_PERMALINK', 1);/** * Endpoint Mask for Attachment. * * @since 2.1.0 */define('EP_ATTACHMENT', 2);/** * Endpoint Mask for date. * * @since 2.1.0 */define('EP_DATE', 4);/** * Endpoint Mask for year * * @since 2.1.0 */define('EP_YEAR', 8);/** * Endpoint Mask for month. * * @since 2.1.0 */define('EP_MONTH', 16);/** * Endpoint Mask for day. * * @since 2.1.0 */define('EP_DAY', 32);/** * Endpoint Mask for root. * * @since 2.1.0 */define('EP_ROOT', 64);/** * Endpoint Mask for comments. * * @since 2.1.0 */define('EP_COMMENTS', 128);/** * Endpoint Mask for searches. * * @since 2.1.0 */define('EP_SEARCH', 256);/** * Endpoint Mask for categories. * * @since 2.1.0 */define('EP_CATEGORIES', 512);/** * Endpoint Mask for tags. * * @since 2.3.0 */define('EP_TAGS', 1024);/** * Endpoint Mask for authors. * * @since 2.1.0 */define('EP_AUTHORS', 2048);/** * Endpoint Mask for pages. * * @since 2.1.0 */define('EP_PAGES', 4096);/** * Endpoint Mask for everything. * * @since 2.1.0 */define('EP_ALL', 8191);/** * Add an endpoint, like /trackback/. * * The endpoints are added to the end of the request. So a request matching * "/2008/10/14/my_post/myep/", the endpoint will be "/myep/". * * Be sure to flush the rewrite rules (wp_rewrite->flush()) when your plugin gets * activated (register_activation_hook()) and deactivated (register_deactivation_hook()) * * @since 2.1.0 * @see WP_Rewrite::add_endpoint() Parameters and more description. * @uses $wp_rewrite * * @param unknown_type $name * @param unknown_type $places */function add_rewrite_endpoint($name, $places) {	global $wp_rewrite;	$wp_rewrite->add_endpoint($name, $places);}/** * Filter the URL base for taxonomies. * * To remove any manually prepended /index.php/. * * @access private * @since 2.6.0 * * @param string $base The taxonomy base that we're going to filter * @return string */function _wp_filter_taxonomy_base( $base ) {	if ( !empty( $base ) ) {		$base = preg_replace( '|^/index\.php/|', '', $base );		$base = trim( $base, '/' );	}	return $base;}/** * Examine a url and try to determine the post ID it represents. * * Checks are supposedly from the hosted site blog. * * @since 1.0.0 * * @param string $url Permalink to check. * @return int Post ID, or 0 on failure. */function url_to_postid($url) {	global $wp_rewrite;	$url = apply_filters('url_to_postid', $url);	// First, check to see if there is a 'p=N' or 'page_id=N' to match against	if ( preg_match('#[?&](p|page_id|attachment_id)=(\d+)#', $url, $values) )	{		$id = absint($values[2]);		if ( $id )			return $id;	}	// Check to see if we are using rewrite rules	$rewrite = $wp_rewrite->wp_rewrite_rules();	// Not using rewrite rules, and 'p=N' and 'page_id=N' methods failed, so we're out of options	if ( empty($rewrite) )		return 0;	// $url cleanup by Mark Jaquith	// This fixes things like #anchors, ?query=strings, missing 'www.',	// added 'www.', or added 'index.php/' that will mess up our WP_Query	// and return a false negative	// Get rid of the #anchor	$url_split = explode('#', $url);	$url = $url_split[0];	// Get rid of URL ?query=string	$url_split = explode('?', $url);	$url = $url_split[0];	// Add 'www.' if it is absent and should be there	if ( false !== strpos(home_url(), '://www.') && false === strpos($url, '://www.') )		$url = str_replace('://', '://www.', $url);	// Strip 'www.' if it is present and shouldn't be	if ( false === strpos(home_url(), '://www.') )		$url = str_replace('://www.', '://', $url);	// Strip 'index.php/' if we're not using path info permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$url = str_replace('index.php/', '', $url);	if ( false !== strpos($url, home_url()) ) {		// Chop off http://domain.com		$url = str_replace(home_url(), '', $url);	} else {		// Chop off /path/to/blog		$home_path = parse_url(home_url());		$home_path = $home_path['path'];		$url = str_replace($home_path, '', $url);	}	// Trim leading and lagging slashes	$url = trim($url, '/');	$request = $url;	// Done with cleanup	// Look for matches.	$request_match = $request;	foreach ( (array)$rewrite as $match => $query) {		// If the requesting file is the anchor of the match, prepend it		// to the path info.		if ( !empty($url) && ($url != $request) && (strpos($match, $url) === 0) )			$request_match = $url . '/' . $request;		if ( preg_match("!^$match!", $request_match, $matches) ) {			// Got a match.			// Trim the query of everything up to the '?'.			$query = preg_replace("!^.+\?!", '', $query);			// Substitute the substring matches into the query.			$query = addslashes(WP_MatchesMapRegex::apply($query, $matches));			// Filter out non-public query vars			global $wp;			parse_str($query, $query_vars);			$query = array();			foreach ( (array) $query_vars as $key => $value ) {				if ( in_array($key, $wp->public_query_vars) )					$query[$key] = $value;			}			// Do the query			$query = new WP_Query($query);			if ( $query->is_single || $query->is_page )				return $query->post->ID;			else				return 0;		}	}	return 0;}/** * WordPress Rewrite Component. * * The WordPress Rewrite class writes the rewrite module rules to the .htaccess * file. It also handles parsing the request to get the correct setup for the * WordPress Query class. * * The Rewrite along with WP class function as a front controller for WordPress. * You can add rules to trigger your page view and processing using this * component. The full functionality of a front controller does not exist, * meaning you can't define how the template files load based on the rewrite * rules. * * @since 1.5.0 */class WP_Rewrite {	/**	 * Default permalink structure for WordPress.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $permalink_structure;	/**	 * Whether to add trailing slashes.	 *	 * @since 2.2.0	 * @access private	 * @var bool	 */	var $use_trailing_slashes;	/**	 * Customized or default category permalink base ( example.com/xx/tagname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_base;	/**	 * Customized or default tag permalink base ( example.com/xx/tagname ).	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_base;	/**	 * Permalink request structure for categories.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $category_structure;	/**	 * Permalink request structure for tags.	 *	 * @since 2.3.0	 * @access private	 * @var string	 */	var $tag_structure;	/**	 * Permalink author request base ( example.com/author/authorname ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_base = 'author';	/**	 * Permalink request structure for author pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $author_structure;	/**	 * Permalink request structure for dates.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $date_structure;	/**	 * Permalink request structure for pages.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $page_structure;	/**	 * Search permalink base ( example.com/search/query ).	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_base = 'search';	/**	 * Permalink request structure for searches.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $search_structure;	/**	 * Comments permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_base = 'comments';	/**	 * Feed permalink base.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_base = 'feed';	/**	 * Comments feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $comments_feed_structure;	/**	 * Feed request structure permalink.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $feed_structure;	/**	 * Front URL path.	 *	 * The difference between the root property is that WordPress might be	 * located at example/WordPress/index.php, if permalinks are turned off. The	 * WordPress/index.php will be the front portion. If permalinks are turned	 * on, this will most likely be empty or not set.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $front;	/**	 * Root URL path to WordPress (without domain).	 *	 * The difference between front property is that WordPress might be located	 * at example.com/WordPress/. The root is the 'WordPress/' portion.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $root = '';	/**	 * Permalink to the home page.	 *	 * @since 1.5.0	 * @access public	 * @var string	 */	var $index = 'index.php';	/**	 * Request match string.	 *	 * @since 1.5.0	 * @access private	 * @var string	 */	var $matches = '';	/**	 * Rewrite rules to match against the request to find the redirect or query.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rules;	/**	 * Additional rules added external to the rewrite class.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_rules = array(); //	/**	 * Additional rules that belong at the beginning to match first.	 *	 * Those not generated by the class, see add_rewrite_rule().	 *	 * @since 2.3.0	 * @access private	 * @var array	 */	var $extra_rules_top = array(); //	/**	 * Rules that don't redirect to WP's index.php.	 *	 * These rules are written to the mod_rewrite portion of the .htaccess.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $non_wp_rules = array(); //	/**	 * Extra permalink structures.	 *	 * @since 2.1.0	 * @access private	 * @var array	 */	var $extra_permastructs = array();	/**	 * Endpoints permalinks	 *	 * @since unknown	 * @access private	 * @var array	 */	var $endpoints;	/**	 * Whether to write every mod_rewrite rule for WordPress.	 *	 * This is off by default, turning it on might print a lot of rewrite rules	 * to the .htaccess file.	 *	 * @since 2.0.0	 * @access public	 * @var bool	 */	var $use_verbose_rules = false;	/**	 * Whether to write every mod_rewrite rule for WordPress pages.	 *	 * @since 2.5.0	 * @access public	 * @var bool	 */	var $use_verbose_page_rules = true;	/**	 * Permalink structure search for preg_replace.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritecode =		array(					'%year%',					'%monthnum%',					'%day%',					'%hour%',					'%minute%',					'%second%',					'%postname%',					'%post_id%',					'%category%',					'%tag%',					'%author%',					'%pagename%',					'%search%'					);	/**	 * Preg_replace values for the search, see {@link WP_Rewrite::$rewritecode}.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $rewritereplace =		array(					'([0-9]{4})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([0-9]{1,2})',					'([^/]+)',					'([0-9]+)',					'(.+?)',					'(.+?)',					'([^/]+)',					'([^/]+?)',					'(.+)'					);	/**	 * Search for the query to look for replacing.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $queryreplace =		array (					'year=',					'monthnum=',					'day=',					'hour=',					'minute=',					'second=',					'name=',					'p=',					'category_name=',					'tag=',					'author_name=',					'pagename=',					's='					);	/**	 * Supported default feeds.	 *	 * @since 1.5.0	 * @access private	 * @var array	 */	var $feeds = array ( 'feed', 'rdf', 'rss', 'rss2', 'atom' );	/**	 * Whether permalinks are being used.	 *	 * This can be either rewrite module or permalink in the HTTP query string.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool True, if permalinks are enabled.	 */	function using_permalinks() {		return ! empty($this->permalink_structure);	}	/**	 * Whether permalinks are being used and rewrite module is not enabled.	 *	 * Means that permalink links are enabled and index.php is in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_index_permalinks() {		if ( empty($this->permalink_structure) )			return false;		// If the index is not in the permalink, we're using mod_rewrite.		if ( preg_match('#^/*' . $this->index . '#', $this->permalink_structure) )			return true;		return false;	}	/**	 * Whether permalinks are being used and rewrite module is enabled.	 *	 * Using permalinks and index.php is not in the URL.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool	 */	function using_mod_rewrite_permalinks() {		if ( $this->using_permalinks() && ! $this->using_index_permalinks() )			return true;		else			return false;	}	/**	 * Index for matches for usage in preg_*() functions.	 *	 * The format of the string is, with empty matches property value, '$NUM'.	 * The 'NUM' will be replaced with the value in the $number parameter. With	 * the matches property not empty, the value of the returned string will	 * contain that value of the matches property. The format then will be	 * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the	 * value of the $number parameter.	 *	 * @since 1.5.0	 * @access public	 *	 * @param int $number Index number.	 * @return string	 */	function preg_index($number) {		$match_prefix = '$';		$match_suffix = '';		if ( ! empty($this->matches) ) {			$match_prefix = '$' . $this->matches . '[';			$match_suffix = ']';		}		return "$match_prefix$number$match_suffix";	}	/**	 * Retrieve all page and attachments for pages URIs.	 *	 * The attachments are for those that have pages as parents and will be	 * retrieved.	 *	 * @since 2.5.0	 * @access public	 *	 * @return array Array of page URIs as first element and attachment URIs as second element.	 */	function page_uri_index() {		global $wpdb;		//get pages in order of hierarchy, i.e. children after parents		$posts = get_page_hierarchy($wpdb->get_results("SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'page'"));		// If we have no pages get out quick		if ( !$posts )			return array( array(), array() );		//now reverse it, because we need parents after children for rewrite rules to work properly		$posts = array_reverse($posts, true);		$page_uris = array();		$page_attachment_uris = array();		foreach ( $posts as $id => $post ) {			// URL => page name			$uri = get_page_uri($id);			$attachments = $wpdb->get_results( $wpdb->prepare( "SELECT ID, post_name, post_parent FROM $wpdb->posts WHERE post_type = 'attachment' AND post_parent = %d", $id ));			if ( !empty($attachments) ) {				foreach ( $attachments as $attachment ) {					$attach_uri = get_page_uri($attachment->ID);					$page_attachment_uris[$attach_uri] = $attachment->ID;				}			}			$page_uris[$uri] = $id;		}		return array( $page_uris, $page_attachment_uris );	}	/**	 * Retrieve all of the rewrite rules for pages.	 *	 * If the 'use_verbose_page_rules' property is false, then there will only	 * be a single rewrite rule for pages for those matching '%pagename%'. With	 * the property set to true, the attachments and the pages will be added for	 * each individual attachment URI and page URI, respectively.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array	 */	function page_rewrite_rules() {		$rewrite_rules = array();		$page_structure = $this->get_page_permastruct();		if ( ! $this->use_verbose_page_rules ) {			$this->add_rewrite_tag('%pagename%', "(.+?)", 'pagename=');			$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			return $rewrite_rules;		}		$page_uris = $this->page_uri_index();		$uris = $page_uris[0];		$attachment_uris = $page_uris[1];		if ( is_array( $attachment_uris ) ) {			foreach ( $attachment_uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'attachment=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		if ( is_array( $uris ) ) {			foreach ( $uris as $uri => $pagename ) {				$this->add_rewrite_tag('%pagename%', "($uri)", 'pagename=');				$rewrite_rules = array_merge($rewrite_rules, $this->generate_rewrite_rules($page_structure, EP_PAGES));			}		}		return $rewrite_rules;	}	/**	 * Retrieve date permalink structure, with year, month, and day.	 *	 * The permalink structure for the date, if not set already depends on the	 * permalink structure. It can be one of three formats. The first is year,	 * month, day; the second is day, month, year; and the last format is month,	 * day, year. These are matched against the permalink structure for which	 * one is used. If none matches, then the default will be used, which is	 * year, month, day.	 *	 * Prevents post ID and date permalinks from overlapping. In the case of	 * post_id, the date permalink will be prepended with front permalink with	 * 'date/' before the actual permalink to form the complete date permalink	 * structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on no permalink structure. Date permalink structure.	 */	function get_date_permastruct() {		if ( isset($this->date_structure) )			return $this->date_structure;		if ( empty($this->permalink_structure) ) {			$this->date_structure = '';			return false;		}		// The date permalink must have year, month, and day separated by slashes.		$endians = array('%year%/%monthnum%/%day%', '%day%/%monthnum%/%year%', '%monthnum%/%day%/%year%');		$this->date_structure = '';		$date_endian = '';		foreach ( $endians as $endian ) {			if ( false !== strpos($this->permalink_structure, $endian) ) {				$date_endian= $endian;				break;			}		}		if ( empty($date_endian) )			$date_endian = '%year%/%monthnum%/%day%';		// Do not allow the date tags and %post_id% to overlap in the permalink		// structure. If they do, move the date tags to $front/date/.		$front = $this->front;		preg_match_all('/%.+?%/', $this->permalink_structure, $tokens);		$tok_index = 1;		foreach ( (array) $tokens[0] as $token) {			if ( '%post_id%' == $token && ($tok_index <= 3) ) {				$front = $front . 'date/';				break;			}			$tok_index++;		}		$this->date_structure = $front . $date_endian;		return $this->date_structure;	}	/**	 * Retrieve the year permalink structure without month and day.	 *	 * Gets the date permalink structure and strips out the month and day	 * permalink structures.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year structure on success.	 */	function get_year_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%monthnum%', '', $structure);		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the month permalink structure without day and with year.	 *	 * Gets the date permalink structure and strips out the day permalink	 * structures. Keeps the year permalink structure.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month structure on success.	 */	function get_month_permastruct() {		$structure = $this->get_date_permastruct($this->permalink_structure);		if ( empty($structure) )			return false;		$structure = str_replace('%day%', '', $structure);		$structure = preg_replace('#/+#', '/', $structure);		return $structure;	}	/**	 * Retrieve the day permalink structure with month and year.	 *	 * Keeps date permalink structure with all year, month, and day.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Year/Month/Day structure on success.	 */	function get_day_permastruct() {		return $this->get_date_permastruct($this->permalink_structure);	}	/**	 * Retrieve the permalink structure for categories.	 *	 * If the category_base property has no value, then the category structure	 * will have the front property value, followed by 'category', and finally	 * '%category%'. If it does, then the root property will be used, along with	 * the category_base property value.	 *	 * @since 1.5.0	 * @access public	 *	 * @return bool|string False on failure. Category permalink structure.	 */	function get_category_permastruct() {		if ( isset($this->category_structure) )			return $this->category_structure;		if ( empty($this->permalink_structure) ) {			$this->category_structure = '';			return false;		}		if ( empty($this->category_base) )			$this->category_structure = trailingslashit( $this->front . 'category' );		else			$this->category_structure = trailingslashit( '/' . $this->root . $this->category_base );		$this->category_structure .= '%category%';		return $this->category_structure;	}	/**	 * Retrieve the permalink structure for tags.	 *	 * If the tag_base property has no value, then the tag structure will have	 * the front property value, followed by 'tag', and finally '%tag%'. If it	 * does, then the root property will be used, along with the tag_base	 * property value.	 *	 * @since 2.3.0	 * @access public	 *	 * @return bool|string False on failure. Tag permalink structure.	 */	function get_tag_permastruct() {		if ( isset($this->tag_structure) )			return $this->tag_structure;		if ( empty($this->permalink_structure) ) {			$this->tag_structure = '';			return false;		}		if ( empty($this->tag_base) )			$this->tag_structure = trailingslashit( $this->front . 'tag' );		else			$this->tag_structure = trailingslashit( '/' . $this->root . $this->tag_base );		$this->tag_structure .= '%tag%';		return $this->tag_structure;	}	/**	 * Retrieve extra permalink structure by name.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Permalink structure name.	 * @return string|bool False if not found. Permalink structure string.	 */	function get_extra_permastruct($name) {		if ( empty($this->permalink_structure) )			return false;		if ( isset($this->extra_permastructs[$name]) )			return $this->extra_permastructs[$name][0];		return false;	}	/**	 * Retrieve the author permalink structure.	 *	 * The permalink structure is front property, author base, and finally	 * '/%author%'. Will set the author_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_author_permastruct() {		if ( isset($this->author_structure) )			return $this->author_structure;		if ( empty($this->permalink_structure) ) {			$this->author_structure = '';			return false;		}		$this->author_structure = $this->front . $this->author_base . '/%author%';		return $this->author_structure;	}	/**	 * Retrieve the search permalink structure.	 *	 * The permalink structure is root property, search base, and finally	 * '/%search%'. Will set the search_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_search_permastruct() {		if ( isset($this->search_structure) )			return $this->search_structure;		if ( empty($this->permalink_structure) ) {			$this->search_structure = '';			return false;		}		$this->search_structure = $this->root . $this->search_base . '/%search%';		return $this->search_structure;	}	/**	 * Retrieve the page permalink structure.	 *	 * The permalink structure is root property, and '%pagename%'. Will set the	 * page_structure property and then return it without attempting to set the	 * value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_page_permastruct() {		if ( isset($this->page_structure) )			return $this->page_structure;		if (empty($this->permalink_structure)) {			$this->page_structure = '';			return false;		}		$this->page_structure = $this->root . '%pagename%';		return $this->page_structure;	}	/**	 * Retrieve the feed permalink structure.	 *	 * The permalink structure is root property, feed base, and finally	 * '/%feed%'. Will set the feed_structure property and then return it	 * without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_feed_permastruct() {		if ( isset($this->feed_structure) )			return $this->feed_structure;		if ( empty($this->permalink_structure) ) {			$this->feed_structure = '';			return false;		}		$this->feed_structure = $this->root . $this->feed_base . '/%feed%';		return $this->feed_structure;	}	/**	 * Retrieve the comment feed permalink structure.	 *	 * The permalink structure is root property, comment base property, feed	 * base and finally '/%feed%'. Will set the comment_feed_structure property	 * and then return it without attempting to set the value again.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string|bool False if not found. Permalink structure string.	 */	function get_comment_feed_permastruct() {		if ( isset($this->comment_feed_structure) )			return $this->comment_feed_structure;		if (empty($this->permalink_structure)) {			$this->comment_feed_structure = '';			return false;		}		$this->comment_feed_structure = $this->root . $this->comments_base . '/' . $this->feed_base . '/%feed%';		return $this->comment_feed_structure;	}	/**	 * Append or update tag, pattern, and query for replacement.	 *	 * If the tag already exists, replace the existing pattern and query for	 * that tag, otherwise add the new tag, pattern, and query to the end of the	 * arrays.	 *	 * @internal What is the purpose of this function again? Need to finish long	 *           description.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $tag Append tag to rewritecode property array.	 * @param string $pattern Append pattern to rewritereplace property array.	 * @param string $query Append query to queryreplace property array.	 */	function add_rewrite_tag($tag, $pattern, $query) {		$position = array_search($tag, $this->rewritecode);		if ( false !== $position && null !== $position ) {			$this->rewritereplace[$position] = $pattern;			$this->queryreplace[$position] = $query;		} else {			$this->rewritecode[] = $tag;			$this->rewritereplace[] = $pattern;			$this->queryreplace[] = $query;		}	}	/**	 * Generate the rules from permalink structure.	 *	 * The main WP_Rewrite function for building the rewrite rule list. The	 * contents of the function is a mix of black magic and regular expressions,	 * so best just ignore the contents and move to the parameters.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure.	 * @param int $ep_mask Optional, default is EP_NONE. Endpoint constant, see EP_* constants.	 * @param bool $paged Optional, default is true. Whether permalink request is paged.	 * @param bool $feed Optional, default is true. Whether for feed.	 * @param bool $forcomments Optional, default is false. Whether for comments.	 * @param bool $walk_dirs Optional, default is true. Whether to create list of directories to walk over.	 * @param bool $endpoints Optional, default is true. Whether endpoints are enabled.	 * @return array Rewrite rule list.	 */	function generate_rewrite_rules($permalink_structure, $ep_mask = EP_NONE, $paged = true, $feed = true, $forcomments = false, $walk_dirs = true, $endpoints = true) {		//build a regex to match the feed section of URLs, something like (feed|atom|rss|rss2)/?		$feedregex2 = '';		foreach ( (array) $this->feeds as $feed_name)			$feedregex2 .= $feed_name . '|';		$feedregex2 = '(' . trim($feedregex2, '|') .  ')/?$';		//$feedregex is identical but with /feed/ added on as well, so URLs like <permalink>/feed/atom		//and <permalink>/atom are both possible		$feedregex = $this->feed_base  . '/' . $feedregex2;		//build a regex to match the trackback and page/xx parts of URLs		$trackbackregex = 'trackback/?$';		$pageregex = 'page/?([0-9]{1,})/?$';		$commentregex = 'comment-page-([0-9]{1,})/?$';		//build up an array of endpoint regexes to append => queries to append		if ( $endpoints ) {			$ep_query_append = array ();			foreach ( (array) $this->endpoints as $endpoint) {				//match everything after the endpoint name, but allow for nothing to appear there				$epmatch = $endpoint[1] . '(/(.*))?/?$';				//this will be appended on to the rest of the query for each dir				$epquery = '&' . $endpoint[1] . '=';				$ep_query_append[$epmatch] = array ( $endpoint[0], $epquery );			}		}		//get everything up to the first rewrite tag		$front = substr($permalink_structure, 0, strpos($permalink_structure, '%'));		//build an array of the tags (note that said array ends up being in $tokens[0])		preg_match_all('/%.+?%/', $permalink_structure, $tokens);		$num_tokens = count($tokens[0]);		$index = $this->index; //probably 'index.php'		$feedindex = $index;		$trackbackindex = $index;		//build a list from the rewritecode and queryreplace arrays, that will look something like		//tagname=$matches[i] where i is the current $i		for ( $i = 0; $i < $num_tokens; ++$i ) {			if ( 0 < $i )				$queries[$i] = $queries[$i - 1] . '&';			else				$queries[$i] = '';			$query_token = str_replace($this->rewritecode, $this->queryreplace, $tokens[0][$i]) . $this->preg_index($i+1);			$queries[$i] .= $query_token;		}		//get the structure, minus any cruft (stuff that isn't tags) at the front		$structure = $permalink_structure;		if ( $front != '/' )			$structure = str_replace($front, '', $structure);		//create a list of dirs to walk over, making rewrite rules for each level		//so for example, a $structure of /%year%/%month%/%postname% would create		//rewrite rules for /%year%/, /%year%/%month%/ and /%year%/%month%/%postname%		$structure = trim($structure, '/');		$dirs = $walk_dirs ? explode('/', $structure) : array( $structure );		$num_dirs = count($dirs);		//strip slashes from the front of $front		$front = preg_replace('|^/+|', '', $front);		//the main workhorse loop		$post_rewrite = array();		$struct = $front;		for ( $j = 0; $j < $num_dirs; ++$j ) {			//get the struct for this dir, and trim slashes off the front			$struct .= $dirs[$j] . '/'; //accumulate. see comment near explode('/', $structure) above			$struct = ltrim($struct, '/');			//replace tags with regexes			$match = str_replace($this->rewritecode, $this->rewritereplace, $struct);			//make a list of tags, and store how many there are in $num_toks			$num_toks = preg_match_all('/%.+?%/', $struct, $toks);			//get the 'tagname=$matches[i]'			$query = ( isset($queries) && is_array($queries) ) ? $queries[$num_toks - 1] : '';			//set up $ep_mask_specific which is used to match more specific URL types			switch ( $dirs[$j] ) {				case '%year%':					$ep_mask_specific = EP_YEAR;					break;				case '%monthnum%':					$ep_mask_specific = EP_MONTH;					break;				case '%day%':					$ep_mask_specific = EP_DAY;					break;				default:					$ep_mask_specific = EP_NONE;			}			//create query for /page/xx			$pagematch = $match . $pageregex;			$pagequery = $index . '?' . $query . '&paged=' . $this->preg_index($num_toks + 1);			//create query for /comment-page-xx			$commentmatch = $match . $commentregex;			$commentquery = $index . '?' . $query . '&cpage=' . $this->preg_index($num_toks + 1);			if ( get_option('page_on_front') ) {				//create query for Root /comment-page-xx				$rootcommentmatch = $match . $commentregex;				$rootcommentquery = $index . '?' . $query . '&page_id=' . get_option('page_on_front') . '&cpage=' . $this->preg_index($num_toks + 1);			}			//create query for /feed/(feed|atom|rss|rss2|rdf)			$feedmatch = $match . $feedregex;			$feedquery = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//create query for /(feed|atom|rss|rss2|rdf) (see comment near creation of $feedregex)			$feedmatch2 = $match . $feedregex2;			$feedquery2 = $feedindex . '?' . $query . '&feed=' . $this->preg_index($num_toks + 1);			//if asked to, turn the feed queries into comment feed ones			if ( $forcomments ) {				$feedquery .= '&withcomments=1';				$feedquery2 .= '&withcomments=1';			}			//start creating the array of rewrites for this dir			$rewrite = array();			if ( $feed ) //...adding on /feed/ regexes => queries				$rewrite = array($feedmatch => $feedquery, $feedmatch2 => $feedquery2);			if ( $paged ) //...and /page/xx ones				$rewrite = array_merge($rewrite, array($pagematch => $pagequery));			//only on pages with comments add ../comment-page-xx/			if ( EP_PAGES & $ep_mask || EP_PERMALINK & $ep_mask )				$rewrite = array_merge($rewrite, array($commentmatch => $commentquery));			else if ( EP_ROOT & $ep_mask && get_option('page_on_front') )				$rewrite = array_merge($rewrite, array($rootcommentmatch => $rootcommentquery));			//do endpoints			if ( $endpoints ) {				foreach ( (array) $ep_query_append as $regex => $ep) {					//add the endpoints on if the mask fits					if ( $ep[0] & $ep_mask || $ep[0] & $ep_mask_specific )						$rewrite[$match . $regex] = $index . '?' . $query . $ep[1] . $this->preg_index($num_toks + 2);				}			}			//if we've got some tags in this dir			if ( $num_toks ) {				$post = false;				$page = false;				//check to see if this dir is permalink-level: i.e. the structure specifies an				//individual post. Do this by checking it contains at least one of 1) post name,				//2) post ID, 3) page name, 4) timestamp (year, month, day, hour, second and				//minute all present). Set these flags now as we need them for the endpoints.				if ( strpos($struct, '%postname%') !== false						|| strpos($struct, '%post_id%') !== false						|| strpos($struct, '%pagename%') !== false						|| (strpos($struct, '%year%') !== false && strpos($struct, '%monthnum%') !== false && strpos($struct, '%day%') !== false && strpos($struct, '%hour%') !== false && strpos($struct, '%minute%') !== false && strpos($struct, '%second%') !== false)						) {					$post = true;					if ( strpos($struct, '%pagename%') !== false )						$page = true;				}				if ( ! $post ) {					// For custom post types, we need to add on endpoints as well.					foreach ( get_post_types( array('_builtin' => false ) ) as $ptype ) {						if ( strpos($struct, "%$ptype%") !== false ) {							$post = true;							$page = is_post_type_hierarchical( $ptype ); // This is for page style attachment url's							break;						}					}				}				//if we're creating rules for a permalink, do all the endpoints like attachments etc				if ( $post ) {					//create query and regex for trackback					$trackbackmatch = $match . $trackbackregex;					$trackbackquery = $trackbackindex . '?' . $query . '&tb=1';					//trim slashes from the end of the regex for this dir					$match = rtrim($match, '/');					//get rid of brackets					$submatchbase = str_replace( array('(', ')'), '', $match);					//add a rule for at attachments, which take the form of <permalink>/some-text					$sub1 = $submatchbase . '/([^/]+)/';					$sub1tb = $sub1 . $trackbackregex; //add trackback regex <permalink>/trackback/...					$sub1feed = $sub1 . $feedregex; //and <permalink>/feed/(atom|...)					$sub1feed2 = $sub1 . $feedregex2; //and <permalink>/(feed|atom...)					$sub1comment = $sub1 . $commentregex; //and <permalink>/comment-page-xx					//add an ? as we don't have to match that last slash, and finally a $ so we					//match to the end of the URL					//add another rule to match attachments in the explicit form:					//<permalink>/attachment/some-text					$sub2 = $submatchbase . '/attachment/([^/]+)/';					$sub2tb = $sub2 . $trackbackregex; //and add trackbacks <permalink>/attachment/trackback					$sub2feed = $sub2 . $feedregex;    //feeds, <permalink>/attachment/feed/(atom|...)					$sub2feed2 = $sub2 . $feedregex2;  //and feeds again on to this <permalink>/attachment/(feed|atom...)					$sub2comment = $sub2 . $commentregex; //and <permalink>/comment-page-xx					//create queries for these extra tag-ons we've just dealt with					$subquery = $index . '?attachment=' . $this->preg_index(1);					$subtbquery = $subquery . '&tb=1';					$subfeedquery = $subquery . '&feed=' . $this->preg_index(2);					$subcommentquery = $subquery . '&cpage=' . $this->preg_index(2);					//do endpoints for attachments					if ( !empty($endpoints) ) {						foreach ( (array) $ep_query_append as $regex => $ep ) {							if ( $ep[0] & EP_ATTACHMENT ) {								$rewrite[$sub1 . $regex] = $subquery . $ep[1] . $this->preg_index(2);								$rewrite[$sub2 . $regex] = $subquery . $ep[1] . $this->preg_index(2);							}						}					}					//now we've finished with endpoints, finish off the $sub1 and $sub2 matches					$sub1 .= '?$';					$sub2 .= '?$';					//allow URLs like <permalink>/2 for <permalink>/page/2					$match = $match . '(/[0-9]+)?/?$';					$query = $index . '?' . $query . '&page=' . $this->preg_index($num_toks + 1);				} else { //not matching a permalink so this is a lot simpler					//close the match and finalise the query					$match .= '?$';					$query = $index . '?' . $query;				}				//create the final array for this dir by joining the $rewrite array (which currently				//only contains rules/queries for trackback, pages etc) to the main regex/query for				//this dir				$rewrite = array_merge($rewrite, array($match => $query));				//if we're matching a permalink, add those extras (attachments etc) on				if ( $post ) {					//add trackback					$rewrite = array_merge(array($trackbackmatch => $trackbackquery), $rewrite);					//add regexes/queries for attachments, attachment trackbacks and so on					if ( ! $page ) //require <permalink>/attachment/stuff form for pages because of confusion with subpages						$rewrite = array_merge($rewrite, array($sub1 => $subquery, $sub1tb => $subtbquery, $sub1feed => $subfeedquery, $sub1feed2 => $subfeedquery, $sub1comment => $subcommentquery));					$rewrite = array_merge(array($sub2 => $subquery, $sub2tb => $subtbquery, $sub2feed => $subfeedquery, $sub2feed2 => $subfeedquery, $sub2comment => $subcommentquery), $rewrite);				}			} //if($num_toks)			//add the rules for this dir to the accumulating $post_rewrite			$post_rewrite = array_merge($rewrite, $post_rewrite);		} //foreach ($dir)		return $post_rewrite; //the finished rules. phew!	}	/**	 * Generate Rewrite rules with permalink structure and walking directory only.	 *	 * Shorten version of {@link WP_Rewrite::generate_rewrite_rules()} that	 * allows for shorter list of parameters. See the method for longer	 * description of what generating rewrite rules does.	 *	 * @uses WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure The permalink structure to generate rules.	 * @param bool $walk_dirs Optional, default is false. Whether to create list of directories to walk over.	 * @return array	 */	function generate_rewrite_rule($permalink_structure, $walk_dirs = false) {		return $this->generate_rewrite_rules($permalink_structure, EP_NONE, false, false, false, $walk_dirs);	}	/**	 * Construct rewrite matches and queries from permalink structure.	 *	 * Runs the action 'generate_rewrite_rules' with the parameter that is an	 * reference to the current WP_Rewrite instance to further manipulate the	 * permalink structures and rewrite rules. Runs the 'rewrite_rules_array'	 * filter on the full rewrite rule array.	 *	 * There are two ways to manipulate the rewrite rules, one by hooking into	 * the 'generate_rewrite_rules' action and gaining full control of the	 * object or just manipulating the rewrite rule array before it is passed	 * from the function.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array An associate array of matches and queries.	 */	function rewrite_rules() {		$rewrite = array();		if ( empty($this->permalink_structure) )			return $rewrite;		// robots.txt -only if installed at the root		$home_path = parse_url( home_url() );		$robots_rewrite = ( empty( $home_path['path'] ) || '/' == $home_path['path'] ) ? array( 'robots\.txt$' => $this->index . '?robots=1' ) : array();		// Default Feed rules - These are require to allow for the direct access files to work with permalink structure starting with %category%		$default_feeds = array(	'.*wp-atom.php$'	=>	$this->index . '?feed=atom',								'.*wp-rdf.php$'		=>	$this->index . '?feed=rdf',								'.*wp-rss.php$'		=>	$this->index . '?feed=rss',								'.*wp-rss2.php$'	=>	$this->index . '?feed=rss2',								'.*wp-feed.php$'	=>	$this->index . '?feed=feed',								'.*wp-commentsrss2.php$'	=>	$this->index . '?feed=rss2&withcomments=1');		// Registration rules		$registration_pages = array();		if ( is_multisite() && is_main_site() ) {			$registration_pages['.*wp-signup.php$'] = $this->index . '?signup=true';			$registration_pages['.*wp-activate.php$'] = $this->index . '?activate=true';		}		// Post		$post_rewrite = $this->generate_rewrite_rules($this->permalink_structure, EP_PERMALINK);		$post_rewrite = apply_filters('post_rewrite_rules', $post_rewrite);		// Date		$date_rewrite = $this->generate_rewrite_rules($this->get_date_permastruct(), EP_DATE);		$date_rewrite = apply_filters('date_rewrite_rules', $date_rewrite);		// Root		$root_rewrite = $this->generate_rewrite_rules($this->root . '/', EP_ROOT);		$root_rewrite = apply_filters('root_rewrite_rules', $root_rewrite);		// Comments		$comments_rewrite = $this->generate_rewrite_rules($this->root . $this->comments_base, EP_COMMENTS, true, true, true, false);		$comments_rewrite = apply_filters('comments_rewrite_rules', $comments_rewrite);		// Search		$search_structure = $this->get_search_permastruct();		$search_rewrite = $this->generate_rewrite_rules($search_structure, EP_SEARCH);		$search_rewrite = apply_filters('search_rewrite_rules', $search_rewrite);		// Categories		$category_rewrite = $this->generate_rewrite_rules($this->get_category_permastruct(), EP_CATEGORIES);		$category_rewrite = apply_filters('category_rewrite_rules', $category_rewrite);		// Tags		$tag_rewrite = $this->generate_rewrite_rules($this->get_tag_permastruct(), EP_TAGS);		$tag_rewrite = apply_filters('tag_rewrite_rules', $tag_rewrite);		// Authors		$author_rewrite = $this->generate_rewrite_rules($this->get_author_permastruct(), EP_AUTHORS);		$author_rewrite = apply_filters('author_rewrite_rules', $author_rewrite);		// Pages		$page_rewrite = $this->page_rewrite_rules();		$page_rewrite = apply_filters('page_rewrite_rules', $page_rewrite);		// Extra permastructs		foreach ( $this->extra_permastructs as $permastruct ) {			if ( is_array($permastruct) )				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct[0], $permastruct[1]));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, $this->generate_rewrite_rules($permastruct, EP_NONE));		}		// Put them together.		if ( $this->use_verbose_page_rules )			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $page_rewrite, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $this->extra_rules);		else			$this->rules = array_merge($this->extra_rules_top, $robots_rewrite, $default_feeds, $registration_pages, $root_rewrite, $comments_rewrite, $search_rewrite, $category_rewrite, $tag_rewrite, $author_rewrite, $date_rewrite, $post_rewrite, $page_rewrite, $this->extra_rules);		do_action_ref_array('generate_rewrite_rules', array(&$this));		$this->rules = apply_filters('rewrite_rules_array', $this->rules);		return $this->rules;	}	/**	 * Retrieve the rewrite rules.	 *	 * The difference between this method and {@link	 * WP_Rewrite::rewrite_rules()} is that this method stores the rewrite rules	 * in the 'rewrite_rules' option and retrieves it. This prevents having to	 * process all of the permalinks to get the rewrite rules in the form of	 * caching.	 *	 * @since 1.5.0	 * @access public	 *	 * @return array Rewrite rules.	 */	function wp_rewrite_rules() {		$this->rules = get_option('rewrite_rules');		if ( empty($this->rules) ) {			$this->matches = 'matches';			$this->rewrite_rules();			update_option('rewrite_rules', $this->rules);		}		return $this->rules;	}	/**	 * Retrieve mod_rewrite formatted rewrite rules to write to .htaccess.	 *	 * Does not actually write to the .htaccess file, but creates the rules for	 * the process that will.	 *	 * Will add  the non_wp_rules property rules to the .htaccess file before	 * the WordPress rewrite rules one.	 *	 * @since 1.5.0	 * @access public	 *	 * @return string	 */	function mod_rewrite_rules() {		if ( ! $this->using_permalinks() )			return '';		$site_root = parse_url(get_option('siteurl'));		if ( isset( $site_root['path'] ) )			$site_root = trailingslashit($site_root['path']);		$home_root = parse_url(home_url());		if ( isset( $home_root['path'] ) )			$home_root = trailingslashit($home_root['path']);		else			$home_root = '/';		$rules = "<IfModule mod_rewrite.c>\n";		$rules .= "RewriteEngine On\n";		$rules .= "RewriteBase $home_root\n";		$rules .= "RewriteRule ^index\.php$ - [L]\n"; // Prevent -f checks on index.php.		//add in the rules that don't redirect to WP's index.php (and thus shouldn't be handled by WP at all)		foreach ( (array) $this->non_wp_rules as $match => $query) {			// Apache 1.3 does not support the reluctant (non-greedy) modifier.			$match = str_replace('.+?', '.+', $match);			// If the match is unanchored and greedy, prepend rewrite conditions			// to avoid infinite redirects and eclipsing of real files.			//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {				//nada.			//}			$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";		}		if ( $this->use_verbose_rules ) {			$this->matches = '';			$rewrite = $this->rewrite_rules();			$num_rules = count($rewrite);			$rules .= "RewriteCond %{REQUEST_FILENAME} -f [OR]\n" .				"RewriteCond %{REQUEST_FILENAME} -d\n" .				"RewriteRule ^.*$ - [S=$num_rules]\n";			foreach ( (array) $rewrite as $match => $query) {				// Apache 1.3 does not support the reluctant (non-greedy) modifier.				$match = str_replace('.+?', '.+', $match);				// If the match is unanchored and greedy, prepend rewrite conditions				// to avoid infinite redirects and eclipsing of real files.				//if ($match == '(.+)/?$' || $match == '([^/]+)/?$' ) {					//nada.				//}				if ( strpos($query, $this->index) !== false )					$rules .= 'RewriteRule ^' . $match . ' ' . $home_root . $query . " [QSA,L]\n";				else					$rules .= 'RewriteRule ^' . $match . ' ' . $site_root . $query . " [QSA,L]\n";			}		} else {			$rules .= "RewriteCond %{REQUEST_FILENAME} !-f\n" .				"RewriteCond %{REQUEST_FILENAME} !-d\n" .				"RewriteRule . {$home_root}{$this->index} [L]\n";		}		$rules .= "</IfModule>\n";		$rules = apply_filters('mod_rewrite_rules', $rules);		$rules = apply_filters('rewrite_rules', $rules);  // Deprecated		return $rules;	}	/**	 * Retrieve IIS7 URL Rewrite formatted rewrite rules to write to web.config file.	 *	 * Does not actually write to the web.config file, but creates the rules for	 * the process that will.	 *	 * @since 2.8.0	 * @access public	 *	 * @return string	 */	function iis7_url_rewrite_rules( $add_parent_tags = false ) {		if ( ! $this->using_permalinks() )			return '';		$rules = '';		if ( $add_parent_tags ) {			$rules .= '<configuration>	<system.webServer>		<rewrite>			<rules>';		}		if ( !is_multisite() ) {			$rules .= '				<rule name="wordpress" patternSyntax="Wildcard">					<match url="*" />						<conditions>							<add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />							<add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />						</conditions>					<action type="Rewrite" url="index.php" />				</rule>';		} else {			if (is_subdomain_install()) {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			} else {				$rules .= '				<rule name="wordpress - Rule 1" stopProcessing="true">					<match url="^index\.php$" ignoreCase="false" />					<action type="None" />				</rule>				<rule name="wordpress - Rule 2" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />					<action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />				</rule>				<rule name="wordpress - Rule 3" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />					<action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />				</rule>				<rule name="wordpress - Rule 4" stopProcessing="true">					<match url="^" ignoreCase="false" />					<conditions logicalGrouping="MatchAny">						<add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />						<add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />					</conditions>					<action type="None" />				</rule>				<rule name="wordpress - Rule 5" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 6" stopProcessing="true">					<match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />					<action type="Rewrite" url="{R:2}" />				</rule>				<rule name="wordpress - Rule 7" stopProcessing="true">					<match url="." ignoreCase="false" />					<action type="Rewrite" url="index.php" />				</rule>';			}		}		if ( $add_parent_tags ) {			$rules .= '			</rules>		</rewrite>	</system.webServer></configuration>';		}		$rules = apply_filters('iis7_url_rewrite_rules', $rules);		return $rules;	}	/**	 * Add a straight rewrite rule.	 *	 * Any value in the $after parameter that isn't 'bottom' will be placed at	 * the top of the rules.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 * @param string $after Optional, default is bottom. Location to place rule.	 */	function add_rule($regex, $redirect, $after = 'bottom') {		//get everything up to the first ?		$index = (strpos($redirect, '?') == false ? strlen($redirect) : strpos($redirect, '?'));		$front = substr($redirect, 0, $index);		if ( $front != $this->index ) { //it doesn't redirect to WP's index.php			$this->add_external_rule($regex, $redirect);		} else {			if ( 'bottom' == $after)				$this->extra_rules = array_merge($this->extra_rules, array($regex => $redirect));			else				$this->extra_rules_top = array_merge($this->extra_rules_top, array($regex => $redirect));			//$this->extra_rules[$regex] = $redirect;		}	}	/**	 * Add a rule that doesn't redirect to index.php.	 *	 * Can redirect to any place.	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $regex Regular expression to match against request.	 * @param string $redirect URL regex redirects to when regex matches request.	 */	function add_external_rule($regex, $redirect) {		$this->non_wp_rules[$regex] = $redirect;	}	/**	 * Add an endpoint, like /trackback/.	 *	 * To be inserted after certain URL types (specified in $places).	 *	 * @since 2.1.0	 * @access public	 *	 * @param string $name Name of endpoint.	 * @param array $places URL types that endpoint can be used.	 */	function add_endpoint($name, $places) {		global $wp;		$this->endpoints[] = array ( $places, $name );		$wp->add_query_var($name);	}	/**	 * Add permalink structure.	 *	 * These are added along with the extra rewrite rules that are merged to the	 * top.	 *	 * @since unknown	 * @access public	 *	 * @param string $name Name for permalink structure.	 * @param string $struct Permalink structure.	 * @param bool $with_front Prepend front base to permalink structure.	 */	function add_permastruct($name, $struct, $with_front = true, $ep_mask = EP_NONE) {		if ( $with_front )			$struct = $this->front . $struct;		$this->extra_permastructs[$name] = array($struct, $ep_mask);	}	/**	 * Remove rewrite rules and then recreate rewrite rules.	 *	 * Calls {@link WP_Rewrite::wp_rewrite_rules()} after removing the	 * 'rewrite_rules' option. If the function named 'save_mod_rewrite_rules'	 * exists, it will be called.	 *	 * @since 2.0.1	 * @access public	 * @param $hard bool Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).	 */	function flush_rules($hard = true) {		delete_option('rewrite_rules');		$this->wp_rewrite_rules();		if ( $hard && function_exists('save_mod_rewrite_rules') )			save_mod_rewrite_rules();		if ( $hard && function_exists('iis7_save_url_rewrite_rules') )			iis7_save_url_rewrite_rules();	}	/**	 * Sets up the object's properties.	 *	 * The 'use_verbose_page_rules' object property will be set to true if the	 * permalink structure begins with one of the following: '%postname%', '%category%',	 * '%tag%', or '%author%'.	 *	 * @since 1.5.0	 * @access public	 */	function init() {		$this->extra_rules = $this->non_wp_rules = $this->endpoints = array();		$this->permalink_structure = get_option('permalink_structure');		$this->front = substr($this->permalink_structure, 0, strpos($this->permalink_structure, '%'));		$this->root = '';		if ( $this->using_index_permalinks() )			$this->root = $this->index . '/';		$this->category_base = get_option( 'category_base' );		$this->tag_base = get_option( 'tag_base' );		unset($this->category_structure);		unset($this->author_structure);		unset($this->date_structure);		unset($this->page_structure);		unset($this->search_structure);		unset($this->feed_structure);		unset($this->comment_feed_structure);		$this->use_trailing_slashes = ( '/' == substr($this->permalink_structure, -1, 1) );		// Enable generic rules for pages if permalink structure doesn't begin with a wildcard.		if ( preg_match("/^[^%]*%(?:postname|category|tag|author)%/", $this->permalink_structure) )			 $this->use_verbose_page_rules = true;		else			$this->use_verbose_page_rules = false;	}	/**	 * Set the main permalink structure for the blog.	 *	 * Will update the 'permalink_structure' option, if there is a difference	 * between the current permalink structure and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * Fires the 'permalink_structure_changed' action once the init call has	 * processed passing the old and new values	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $permalink_structure Permalink structure.	 */	function set_permalink_structure($permalink_structure) {		if ( $permalink_structure != $this->permalink_structure ) {			update_option('permalink_structure', $permalink_structure);			$this->init();			do_action('permalink_structure_changed', $this->permalink_structure, $permalink_structure);		}	}	/**	 * Set the category base for the category permalink.	 *	 * Will update the 'category_base' option, if there is a difference between	 * the current category base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 1.5.0	 * @access public	 *	 * @param string $category_base Category permalink structure base.	 */	function set_category_base($category_base) {		if ( $category_base != $this->category_base ) {			update_option('category_base', $category_base);			$this->init();		}	}	/**	 * Set the tag base for the tag permalink.	 *	 * Will update the 'tag_base' option, if there is a difference between the	 * current tag base and the parameter value. Calls	 * {@link WP_Rewrite::init()} after the option is updated.	 *	 * @since 2.3.0	 * @access public	 *	 * @param string $tag_base Tag permalink structure base.	 */	function set_tag_base( $tag_base ) {		if ( $tag_base != $this->tag_base ) {			update_option( 'tag_base', $tag_base );			$this->init();		}	}	/**	 * PHP4 Constructor - Calls init(), which runs setup.	 *	 * @since 1.5.0	 * @access public	 *	 * @return WP_Rewrite	 */	function WP_Rewrite() {		$this->init();	}}?>
<?php/** * Comment template functions * * These functions are meant to live inside of the WordPress loop. * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current comment. * * If the comment has an empty comment_author field, then 'Anonymous' person is * assumed. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author' hook on the comment author * * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional. * @return string The comment author */function get_comment_author( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( empty($comment->comment_author) ) {		if (!empty($comment->user_id)){			$user=get_userdata($comment->user_id);			$author=$user->user_login;		} else {			$author = __('Anonymous');		}	} else {		$author = $comment->comment_author;	}	return apply_filters('get_comment_author', $author);}/** * Displays the author of the current comment. * * @since 0.71 * @uses apply_filters() Calls 'comment_author' on comment author before displaying * * @param int $comment_ID The ID of the comment for which to print the author. Optional. */function comment_author( $comment_ID = 0 ) {	$author = apply_filters('comment_author', get_comment_author( $comment_ID ) );	echo $author;}/** * Retrieve the email of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the author's email.  Optional. * @return string The current comment author's email */function get_comment_author_email( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_email', $comment->comment_author_email);}/** * Display the email of the author of the current global $comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'author_email' hook on the author email * * @param int $comment_ID The ID of the comment for which to print the author's email. Optional. */function comment_author_email( $comment_ID = 0 ) {	echo apply_filters('author_email', get_comment_author_email( $comment_ID ) );}/** * Display the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 0.71 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @uses get_comment_author_email_link() For generating the link * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_email_link($linktext='', $before='', $after='') {	if ( $link = get_comment_author_email_link( $linktext, $before, $after ) )		echo $link;}/** * Return the html email link to the author of the current comment. * * Care should be taken to protect the email address and assure that email * harvesters do not capture your commentors' email address. Most assume that * their email address will not appear in raw form on the blog. Doing so will * enable anyone, including those that people don't want to get the email * address and use it for their own means good and bad. * * @since 2.7 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email * @global object $comment The current Comment row object * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function get_comment_author_email_link($linktext='', $before='', $after='') {	global $comment;	$email = apply_filters('comment_email', $comment->comment_author_email);	if ((!empty($email)) && ($email != '@')) {	$display = ($linktext != '') ? $linktext : $email;		$return  = $before;		$return .= "<a href='mailto:$email'>$display</a>";	 	$return .= $after;		return $return;	} else {		return '';	}}/** * Retrieve the html link to the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author * * @param int $comment_ID The ID of the comment for which to get the author's link.  Optional. * @return string Comment Author name or HTML link for author's URL */function get_comment_author_link( $comment_ID = 0 ) {	/** @todo Only call these functions when they are needed. Include in if... else blocks */	$url    = get_comment_author_url( $comment_ID );	$author = get_comment_author( $comment_ID );	if ( empty( $url ) || 'http://' == $url )		$return = $author;	else		$return = "<a href='$url' rel='external nofollow' class='url'>$author</a>";	return apply_filters('get_comment_author_link', $return);}/** * Display the html link to the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_link() Echoes result * * @param int The ID of the comment for which to print the author's link. Optional. */function comment_author_link( $comment_ID = 0 ) {	echo get_comment_author_link( $comment_ID );}/** * Retrieve the IP address of the author of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() * * @param int $comment_ID The ID of the comment for which to get the author's IP address. Optional. * @return string The comment author's IP address. */function get_comment_author_IP( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_author_IP', $comment->comment_author_IP);}/** * Display the IP address of the author of the current comment. * * @since 0.71 * @see get_comment_author_IP() Echoes Result * * @param int $comment_ID The ID of the comment for which to print the author's IP address.  Optional. */function comment_author_IP( $comment_ID = 0 ) {	echo get_comment_author_IP( $comment_ID );}/** * Retrieve the url of the author of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_author_url' hook on the comment author's URL * * @param int $comment_ID The ID of the comment for which to get the author's URL.  Optional. * @return string */function get_comment_author_url( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$url = ('http://' == $comment->comment_author_url) ? '' : $comment->comment_author_url;	$url = esc_url( $url, array('http', 'https') );	return apply_filters('get_comment_author_url', $url);}/** * Display the url of the author of the current comment. * * @since 0.71 * @uses apply_filters() * @uses get_comment_author_url() Retrieves the comment author's URL * * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional. */function comment_author_url( $comment_ID = 0 ) {	echo apply_filters('comment_url', get_comment_author_url( $comment_ID ));}/** * Retrieves the HTML link of the url of the author of the current comment. * * $linktext parameter is only used if the URL does not exist for the comment * author. If the URL does exist then the URL will be used and the $linktext * will be ignored. * * Encapsulate the HTML link between the $before and $after. So it will appear * in the order of $before, link, and finally $after. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comment_author_url_link' on the complete HTML before returning. * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. * @return string The HTML link between the $before and $after parameters */function get_comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	$url = get_comment_author_url();	$display = ($linktext != '') ? $linktext : $url;	$display = str_replace( 'http://www.', '', $display );	$display = str_replace( 'http://', '', $display );	if ( '/' == substr($display, -1) )		$display = substr($display, 0, -1);	$return = "$before<a href='$url' rel='external'>$display</a>$after";	return apply_filters('get_comment_author_url_link', $return);}/** * Displays the HTML link of the url of the author of the current comment. * * @since 0.71 * @see get_comment_author_url_link() Echoes result * * @param string $linktext The text to display instead of the comment author's email address * @param string $before The text or HTML to display before the email link. * @param string $after The text or HTML to display after the email link. */function comment_author_url_link( $linktext = '', $before = '', $after = '' ) {	echo get_comment_author_url_link( $linktext, $before, $after );}/** * Generates semantic classes for each comment element * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @param bool $echo Whether comment_class should echo or return */function comment_class( $class = '', $comment_id = null, $post_id = null, $echo = true ) {	// Separates classes with a single space, collates classes for comment DIV	$class = 'class="' . join( ' ', get_comment_class( $class, $comment_id, $post_id ) ) . '"';	if ( $echo)		echo $class;	else		return $class;}/** * Returns the classes for the comment div as an array * * @since 2.7.0 * * @param string|array $class One or more classes to add to the class list * @param int $comment_id An optional comment ID * @param int $post_id An optional post ID * @return array Array of classes */function get_comment_class( $class = '', $comment_id = null, $post_id = null ) {	global $comment_alt, $comment_depth, $comment_thread_alt;	$comment = get_comment($comment_id);	$classes = array();	// Get the comment type (comment, trackback),	$classes[] = ( empty( $comment->comment_type ) ) ? 'comment' : $comment->comment_type;	// If the comment author has an id (registered), then print the log in name	if ( $comment->user_id > 0 && $user = get_userdata($comment->user_id) ) {		// For all registered users, 'byuser'		$classes[] = 'byuser';		$classes[] = 'comment-author-' . sanitize_html_class($user->user_nicename, $comment->user_id);		// For comment authors who are the author of the post		if ( $post = get_post($post_id) ) {			if ( $comment->user_id === $post->post_author )				$classes[] = 'bypostauthor';		}	}	if ( empty($comment_alt) )		$comment_alt = 0;	if ( empty($comment_depth) )		$comment_depth = 1;	if ( empty($comment_thread_alt) )		$comment_thread_alt = 0;	if ( $comment_alt % 2 ) {		$classes[] = 'odd';		$classes[] = 'alt';	} else {		$classes[] = 'even';	}	$comment_alt++;	// Alt for top-level comments	if ( 1 == $comment_depth ) {		if ( $comment_thread_alt % 2 ) {			$classes[] = 'thread-odd';			$classes[] = 'thread-alt';		} else {			$classes[] = 'thread-even';		}		$comment_thread_alt++;	}	$classes[] = "depth-$comment_depth";	if ( !empty($class) ) {		if ( !is_array( $class ) )			$class = preg_split('#\s+#', $class);		$classes = array_merge($classes, $class);	}	$classes = array_map('esc_attr', $classes);	return apply_filters('comment_class', $classes, $class, $comment_id, $post_id);}/** * Retrieve the comment date of the current comment. * * @since 1.5.0 * @uses apply_filters() Calls 'get_comment_date' hook with the formated date and the $d parameter respectively * @uses $comment * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to get the date. Optional. * @return string The comment's date */function get_comment_date( $d = '', $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $d )		$date = mysql2date(get_option('date_format'), $comment->comment_date);	else		$date = mysql2date($d, $comment->comment_date);	return apply_filters('get_comment_date', $date, $d);}/** * Display the comment date of the current comment. * * @since 0.71 * * @param string $d The format of the date (defaults to user's config) * @param int $comment_ID The ID of the comment for which to print the date.  Optional. */function comment_date( $d = '', $comment_ID = 0 ) {	echo get_comment_date( $d, $comment_ID );}/** * Retrieve the excerpt of the current comment. * * Will cut each word and only output the first 20 words with '...' at the end. * If the word count is less than 20, then no truncating is done and no '...' * will appear. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls 'get_comment_excerpt' on truncated comment * * @param int $comment_ID The ID of the comment for which to get the excerpt. Optional. * @return string The maybe truncated comment with 20 words or less */function get_comment_excerpt( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	$comment_text = strip_tags($comment->comment_content);	$blah = explode(' ', $comment_text);	if (count($blah) > 20) {		$k = 20;		$use_dotdotdot = 1;	} else {		$k = count($blah);		$use_dotdotdot = 0;	}	$excerpt = '';	for ($i=0; $i<$k; $i++) {		$excerpt .= $blah[$i] . ' ';	}	$excerpt .= ($use_dotdotdot) ? '...' : '';	return apply_filters('get_comment_excerpt', $excerpt);}/** * Display the excerpt of the current comment. * * @since 1.2.0 * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt * * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional. */function comment_excerpt( $comment_ID = 0 ) {	echo apply_filters('comment_excerpt', get_comment_excerpt($comment_ID) );}/** * Retrieve the comment id of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_ID' hook for the comment ID * * @return int The comment ID */function get_comment_ID() {	global $comment;	return apply_filters('get_comment_ID', $comment->comment_ID);}/** * Displays the comment id of the current comment. * * @since 0.71 * @see get_comment_ID() Echoes Result */function comment_ID() {	echo get_comment_ID();}/** * Retrieve the link to a given comment. * * @since 1.5.0 * @uses $comment * * @param object|string|int $comment Comment to retrieve. * @param array $args Optional args. * @return string The permalink to the given comment. */function get_comment_link( $comment = null, $args = array() ) {	global $wp_rewrite, $in_comment_loop;	$comment = get_comment($comment);	// Backwards compat	if ( !is_array($args) ) {		$page = $args;		$args = array();		$args['page'] = $page;	}	$defaults = array( 'type' => 'all', 'page' => '', 'per_page' => '', 'max_depth' => '' );	$args = wp_parse_args( $args, $defaults );	if ( '' === $args['per_page'] && get_option('page_comments') )		$args['per_page'] = get_option('comments_per_page');	if ( empty($args['per_page']) ) {		$args['per_page'] = 0;		$args['page'] = 0;	}	if ( $args['per_page'] ) {		if ( '' == $args['page'] )			$args['page'] = ( !empty($in_comment_loop) ) ? get_query_var('cpage') : get_page_of_comment( $comment->comment_ID, $args );		if ( $wp_rewrite->using_permalinks() )			$link = user_trailingslashit( trailingslashit( get_permalink( $comment->comment_post_ID ) ) . 'comment-page-' . $args['page'], 'comment' );		else			$link = add_query_arg( 'cpage', $args['page'], get_permalink( $comment->comment_post_ID ) );	} else {		$link = get_permalink( $comment->comment_post_ID );	}	return apply_filters( 'get_comment_link', $link . '#comment-' . $comment->comment_ID, $comment, $args );}/** * Retrieves the link to the current post comments. * * @since 1.5.0 * * @param int $post_id Optional post id * @return string The link to the comments */function get_comments_link($post_id = 0) {	return get_permalink($post_id) . '#comments';}/** * Displays the link to the current post comments. * * @since 0.71 * * @param string $deprecated Not Used * @param bool $deprecated_2 Not Used */function comments_link( $deprecated = '', $deprecated_2 = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '0.72' );	if ( !empty( $deprecated_2 ) )		_deprecated_argument( __FUNCTION__, '1.3' );	echo get_comments_link();}/** * Retrieve the amount of comments a post has. * * @since 1.5.0 * @uses apply_filters() Calls the 'get_comments_number' hook on the number of comments * * @param int $post_id The Post ID * @return int The number of comments a post has */function get_comments_number( $post_id = 0 ) {	global $id;	$post_id = (int) $post_id;	if ( !$post_id )		$post_id = (int) $id;	$post = get_post($post_id);	if ( ! isset($post->comment_count) )		$count = 0;	else		$count = $post->comment_count;	return apply_filters('get_comments_number', $count, $post_id);}/** * Display the language string for the number of comments the current post has. * * @since 0.71 * @uses $id * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively. * * @param string $zero Text for no comments * @param string $one Text for one comment * @param string $more Text for more than one comment * @param string $deprecated Not used. */function comments_number( $zero = false, $one = false, $more = false, $deprecated = '' ) {	global $id;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '1.3' );	$number = get_comments_number($id);	if ( $number > 1 )		$output = str_replace('%', number_format_i18n($number), ( false === $more ) ? __('% Comments') : $more);	elseif ( $number == 0 )		$output = ( false === $zero ) ? __('No Comments') : $zero;	else // must be one		$output = ( false === $one ) ? __('1 Comment') : $one;	echo apply_filters('comments_number', $output, $number);}/** * Retrieve the text of the current comment. * * @since 1.5.0 * @uses $comment * * @param int $comment_ID The ID of the comment for which to get the text. Optional. * @return string The comment content */function get_comment_text( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	return apply_filters('get_comment_text', $comment->comment_content);}/** * Displays the text of the current comment. * * @since 0.71 * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display * @uses get_comment_text() Gets the comment content * * @param int $comment_ID The ID of the comment for which to print the text. Optional. */function comment_text( $comment_ID = 0 ) {	echo apply_filters('comment_text', get_comment_text() );}/** * Retrieve the comment time of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filter() Calls 'get_comment_time' hook with the formatted time, the $d parameter, and $gmt parameter passed. * * @param string $d Optional. The format of the time (defaults to user's config) * @param bool $gmt Whether to use the GMT date * @param bool $translate Whether to translate the time (for use in feeds) * @return string The formatted time */function get_comment_time( $d = '', $gmt = false, $translate = true ) {	global $comment;	$comment_date = $gmt ? $comment->comment_date_gmt : $comment->comment_date;	if ( '' == $d )		$date = mysql2date(get_option('time_format'), $comment_date, $translate);	else		$date = mysql2date($d, $comment_date, $translate);	return apply_filters('get_comment_time', $date, $d, $gmt, $translate);}/** * Display the comment time of the current comment. * * @since 0.71 * * @param string $d Optional. The format of the time (defaults to user's config) */function comment_time( $d = '' ) {	echo get_comment_time($d);}/** * Retrieve the comment type of the current comment. * * @since 1.5.0 * @uses $comment * @uses apply_filters() Calls the 'get_comment_type' hook on the comment type * * @param int $comment_ID The ID of the comment for which to get the type. Optional. * @return string The comment type */function get_comment_type( $comment_ID = 0 ) {	$comment = get_comment( $comment_ID );	if ( '' == $comment->comment_type )		$comment->comment_type = 'comment';	return apply_filters('get_comment_type', $comment->comment_type);}/** * Display the comment type of the current comment. * * @since 0.71 * * @param string $commenttxt The string to display for comment type * @param string $trackbacktxt The string to display for trackback type * @param string $pingbacktxt The string to display for pingback type */function comment_type($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false) {    if ( false === $commenttxt ) $commenttxt = _x( 'Comment', 'noun' );    if ( false === $trackbacktxt ) $trackbacktxt = __( 'Trackback' );    if ( false === $pingbacktxt ) $pingbacktxt = __( 'Pingback' );	$type = get_comment_type();	switch( $type ) {		case 'trackback' :			echo $trackbacktxt;			break;		case 'pingback' :			echo $pingbacktxt;			break;		default :			echo $commenttxt;	}}/** * Retrieve The current post's trackback URL. * * There is a check to see if permalink's have been enabled and if so, will * retrieve the pretty path. If permalinks weren't enabled, the ID of the * current post is used and appended to the correct page to go to. * * @since 1.5.0 * @uses apply_filters() Calls 'trackback_url' on the resulting trackback URL * @uses $id * * @return string The trackback URL after being filtered */function get_trackback_url() {	global $id;	if ( '' != get_option('permalink_structure') ) {		$tb_url = trailingslashit(get_permalink()) . user_trailingslashit('trackback', 'single_trackback');	} else {		$tb_url = get_option('siteurl') . '/wp-trackback.php?p=' . $id;	}	return apply_filters('trackback_url', $tb_url);}/** * Displays the current post's trackback URL. * * @since 0.71 * @uses get_trackback_url() Gets the trackback url for the current post * * @param bool $deprecated_echo Remove backwards compat in 2.5 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead. */function trackback_url( $deprecated_echo = true ) {	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '2.5', __('Use <code>get_trackback_url()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_trackback_url();	else		return get_trackback_url();}/** * Whether the current post is open for comments. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if the comments are open */function comments_open( $post_id=NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->comment_status );	return apply_filters( 'comments_open', $open, $post_id );}/** * Whether the current post is open for pings. * * @since 1.5.0 * @uses $post * * @param int $post_id An optional post ID to check instead of the current post. * @return bool True if pings are accepted */function pings_open( $post_id = NULL ) {	$_post = get_post($post_id);	$open = ( 'open' == $_post->ping_status );	return apply_filters( 'pings_open', $open, $post_id );}/** * Displays form token for unfiltered comments. * * Will only display nonce token if the current user has permissions for * unfiltered html. Won't display the token for other users. * * The function was backported to 2.0.10 and was added to versions 2.1.3 and * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0. * * Backported to 2.0.10. * * @since 2.1.3 * @uses $post Gets the ID of the current post for the token */function wp_comment_form_unfiltered_html_nonce() {	global $post;	$post_id = 0;	if ( !empty($post) )		$post_id = $post->ID;	if ( current_user_can('unfiltered_html') )		wp_nonce_field('unfiltered-html-comment_' . $post_id, '_wp_unfiltered_html_comment', false);}/** * Loads the comment template specified in $file. * * Will not display the comments template if not on single post or page, or if * the post does not have comments. * * Uses the WordPress database object to query for the comments. The comments * are passed through the 'comments_array' filter hook with the list of comments * and the post ID respectively. * * The $file path is passed through a filter hook called, 'comments_template' * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path * first and if it fails it will require the default comment themplate from the * default theme. If either does not exist, then the WordPress process will be * halted. It is advised for that reason, that the default theme is not deleted. * * @since 1.5.0 * @global array $comment List of comment objects for the current post * @uses $wpdb * @uses $id * @uses $post * @uses $withcomments Will not try to get the comments if the post has none. * * @param string $file Optional, default '/comments.php'. The file to load * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false. * @return null Returns null if no comments appear */function comments_template( $file = '/comments.php', $separate_comments = false ) {	global $wp_query, $withcomments, $post, $wpdb, $id, $comment, $user_login, $user_ID, $user_identity, $overridden_cpage;	if ( !(is_single() || is_page() || $withcomments) || empty($post) )		return;	if ( empty($file) )		$file = '/comments.php';	$req = get_option('require_name_email');	/**	 * Comment author information fetched from the comment cookies.	 *	 * @uses wp_get_current_commenter()	 */	$commenter = wp_get_current_commenter();	/**	 * The name of the current comment author escaped for use in attributes.	 */	$comment_author = $commenter['comment_author']; // Escaped by sanitize_comment_cookies()	/**	 * The email address of the current comment author escaped for use in attributes.	 */	$comment_author_email = $commenter['comment_author_email'];  // Escaped by sanitize_comment_cookies()	/**	 * The url of the current comment author escaped for use in attributes.	 */	$comment_author_url = esc_url($commenter['comment_author_url']);	/** @todo Use API instead of SELECTs. */	if ( $user_ID) {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND (comment_approved = '1' OR ( user_id = %d AND comment_approved = '0' ) )  ORDER BY comment_date_gmt", $post->ID, $user_ID));	} else if ( empty($comment_author) ) {		$comments = get_comments( array('post_id' => $post->ID, 'status' => 'approve', 'order' => 'ASC') );	} else {		$comments = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND ( comment_approved = '1' OR ( comment_author = %s AND comment_author_email = %s AND comment_approved = '0' ) ) ORDER BY comment_date_gmt", $post->ID, wp_specialchars_decode($comment_author,ENT_QUOTES), $comment_author_email));	}	// keep $comments for legacy's sake	$wp_query->comments = apply_filters( 'comments_array', $comments, $post->ID );	$comments = &$wp_query->comments;	$wp_query->comment_count = count($wp_query->comments);	update_comment_cache($wp_query->comments);	if ( $separate_comments ) {		$wp_query->comments_by_type = &separate_comments($comments);		$comments_by_type = &$wp_query->comments_by_type;	}	$overridden_cpage = FALSE;	if ( '' == get_query_var('cpage') && get_option('page_comments') ) {		set_query_var( 'cpage', 'newest' == get_option('default_comments_page') ? get_comment_pages_count() : 1 );		$overridden_cpage = TRUE;	}	if ( !defined('COMMENTS_TEMPLATE') || !COMMENTS_TEMPLATE)		define('COMMENTS_TEMPLATE', true);	$include = apply_filters('comments_template', STYLESHEETPATH . $file );	if ( file_exists( $include ) )		require( $include );	elseif ( file_exists( TEMPLATEPATH . $file ) )		require( TEMPLATEPATH .  $file );	else // Backward compat code will be removed in a future release		require( WPINC . '/theme-compat/comments.php');}/** * Displays the JS popup script to show a comment. * * If the $file parameter is empty, then the home page is assumed. The defaults * for the window are 400px by 400px. * * For the comment link popup to work, this function has to be called or the * normal comment link will be assumed. * * @since 0.71 * @global string $wpcommentspopupfile The URL to use for the popup window * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called * * @param int $width Optional. The width of the popup window * @param int $height Optional. The height of the popup window * @param string $file Optional. Sets the location of the popup window */function comments_popup_script($width=400, $height=400, $file='') {	global $wpcommentspopupfile, $wpcommentsjavascript;	if (empty ($file)) {		$wpcommentspopupfile = '';  // Use the index.	} else {		$wpcommentspopupfile = $file;	}	$wpcommentsjavascript = 1;	$javascript = "<script type='text/javascript'>\nfunction wpopen (macagna) {\n    window.open(macagna, '_blank', 'width=$width,height=$height,scrollbars=yes,status=yes');\n}\n</script>\n";	echo $javascript;}/** * Displays the link to the comments popup window for the current post ID. * * Is not meant to be displayed on single posts and pages. Should be used on the * lists of posts * * @since 0.71 * @uses $id * @uses $wpcommentspopupfile * @uses $wpcommentsjavascript * @uses $post * * @param string $zero The string to display when no comments * @param string $one The string to display when only one comment is available * @param string $more The string to display when there are more than one comment * @param string $css_class The CSS class to use for comments * @param string $none The string to display when comments have been turned off * @return null Returns null on single posts and pages. */function comments_popup_link( $zero = false, $one = false, $more = false, $css_class = '', $none = false ) {	global $id, $wpcommentspopupfile, $wpcommentsjavascript;    if ( false === $zero ) $zero = __( 'No Comments' );    if ( false === $one ) $one = __( '1 Comment' );    if ( false === $more ) $more = __( '% Comments' );    if ( false === $none ) $none = __( 'Comments Off' );	$number = get_comments_number( $id );	if ( 0 == $number && !comments_open() && !pings_open() ) {		echo '<span' . ((!empty($css_class)) ? ' class="' . esc_attr( $css_class ) . '"' : '') . '>' . $none . '</span>';		return;	}	if ( post_password_required() ) {		echo __('Enter your password to view comments.');		return;	}	echo '<a href="';	if ( $wpcommentsjavascript ) {		if ( empty( $wpcommentspopupfile ) )			$home = home_url();		else			$home = get_option('siteurl');		echo $home . '/' . $wpcommentspopupfile . '?comments_popup=' . $id;		echo '" onclick="wpopen(this.href); return false"';	} else { // if comments_popup_script() is not in the template, display simple comment link		if ( 0 == $number )			echo get_permalink() . '#respond';		else			comments_link();		echo '"';	}	if ( !empty( $css_class ) ) {		echo ' class="'.$css_class.'" ';	}	$title = the_title_attribute( array('echo' => 0 ) );	echo apply_filters( 'comments_popup_link_attributes', '' );	echo ' title="' . esc_attr( sprintf( __('Comment on %s'), $title ) ) . '">';	comments_number( $zero, $one, $more );	echo '</a>';}/** * Retrieve HTML content for reply to comment link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_comment_reply_link($args = array(), $comment = null, $post = null) {	global $user_ID;	$defaults = array('add_below' => 'comment', 'respond_id' => 'respond', 'reply_text' => __('Reply'),		'login_text' => __('Log in to Reply'), 'depth' => 0, 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	if ( 0 == $args['depth'] || $args['max_depth'] <= $args['depth'] )		return;	extract($args, EXTR_SKIP);	$comment = get_comment($comment);	if ( empty($post) )		$post = $comment->comment_post_ID;	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	$link = '';	if ( get_option('comment_registration') && !$user_ID )		$link = '<a rel="nofollow" class="comment-reply-login" href="' . esc_url( wp_login_url( get_permalink() ) ) . '">' . $login_text . '</a>';	else		$link = "<a rel='nofollow' class='comment-reply-link' href='" . esc_url( add_query_arg( 'replytocom', $comment->comment_ID ) ) . "#" . $respond_id . "' onclick='return addComment.moveForm(\"$add_below-$comment->comment_ID\", \"$comment->comment_ID\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	return apply_filters('comment_reply_link', $before . $link . $after, $args, $comment, $post);}/** * Displays the HTML content for reply to comment link. * * @since 2.7.0 * @see get_comment_reply_link() Echoes result * * @param array $args Optional. Override default options. * @param int $comment Optional. Comment being replied to. * @param int $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function comment_reply_link($args = array(), $comment = null, $post = null) {	echo get_comment_reply_link($args, $comment, $post);}/** * Retrieve HTML content for reply to post link. * * The default arguments that can be override are 'add_below', 'respond_id', * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be * used, if the user must log in or register first before posting a comment. The * 'reply_text' will be used, if they can post a reply. The 'add_below' and * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function * parameters. * * @since 2.7.0 * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on.  Defaults to current post. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function get_post_reply_link($args = array(), $post = null) {	global $user_ID;	$defaults = array('add_below' => 'post', 'respond_id' => 'respond', 'reply_text' => __('Leave a Comment'),		'login_text' => __('Log in to leave a Comment'), 'before' => '', 'after' => '');	$args = wp_parse_args($args, $defaults);	extract($args, EXTR_SKIP);	$post = get_post($post);	if ( !comments_open($post->ID) )		return false;	if ( get_option('comment_registration') && !$user_ID ) {		$link = '<a rel="nofollow" href="' . wp_login_url( get_permalink() ) . '">' . $login_text . '</a>';	} else {		$link = "<a rel='nofollow' class='comment-reply-link' href='" . get_permalink($post->ID) . "#$respond_id' onclick='return addComment.moveForm(\"$add_below-$post->ID\", \"0\", \"$respond_id\", \"$post->ID\")'>$reply_text</a>";	}	return apply_filters('post_comments_link', $before . $link . $after, $post);}/** * Displays the HTML content for reply to post link. * @since 2.7.0 * @see get_post_reply_link() * * @param array $args Optional. Override default options. * @param int|object $post Optional. Post that the comment is going to be displayed on. * @return string|bool|null Link to show comment form, if successful. False, if comments are closed. */function post_reply_link($args = array(), $post = null) {	echo get_post_reply_link($args, $post);}/** * Retrieve HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function get_cancel_comment_reply_link($text = '') {	if ( empty($text) )		$text = __('Click here to cancel reply.');	$style = isset($_GET['replytocom']) ? '' : ' style="display:none;"';	$link = esc_html( remove_query_arg('replytocom') ) . '#respond';	return apply_filters('cancel_comment_reply_link', '<a rel="nofollow" id="cancel-comment-reply-link" href="' . $link . '"' . $style . '>' . $text . '</a>', $link, $text);}/** * Display HTML content for cancel comment reply link. * * @since 2.7.0 * * @param string $text Optional. Text to display for cancel reply link. */function cancel_comment_reply_link($text = '') {	echo get_cancel_comment_reply_link($text);}/** * Retrieve hidden input HTML for replying to comments. * * @since 3.0.0 * * @return string Hidden input HTML for replying to comments */function get_comment_id_fields() {	global $id;	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	$result  = "<input type='hidden' name='comment_post_ID' value='$id' id='comment_post_ID' />\n";	$result .= "<input type='hidden' name='comment_parent' id='comment_parent' value='$replytoid' />\n";	return apply_filters('comment_id_fields', $result, $id, $replytoid);}/** * Output hidden input HTML for replying to comments. * * @since 2.7.0 * @see get_comment_id_fields() Echoes result */function comment_id_fields() {	echo get_comment_id_fields();}/** * Display text based on comment reply status. Only affects users with Javascript disabled. * * @since 2.7.0 * * @param string $noreplytext Optional. Text to display when not replying to a comment. * @param string $replytext Optional. Text to display when replying to a comment. Accepts "%s" for the author of the comment being replied to. * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment. */function comment_form_title( $noreplytext = false, $replytext = false, $linktoparent = TRUE ) {	global $comment;	if ( false === $noreplytext ) $noreplytext = __( 'Leave a Reply' );	if ( false === $replytext ) $replytext = __( 'Leave a Reply to %s' );	$replytoid = isset($_GET['replytocom']) ? (int) $_GET['replytocom'] : 0;	if ( 0 == $replytoid )		echo $noreplytext;	else {		$comment = get_comment($replytoid);		$author = ( $linktoparent ) ? '<a href="#comment-' . get_comment_ID() . '">' . get_comment_author() . '</a>' : get_comment_author();		printf( $replytext, $author );	}}/** * HTML comment list class. * * @package WordPress * @uses Walker * @since unknown */class Walker_Comment extends Walker {	/**	 * @see Walker::$tree_type	 * @since unknown	 * @var string	 */	var $tree_type = 'comment';	/**	 * @see Walker::$db_fields	 * @since unknown	 * @var array	 */	var $db_fields = array ('parent' => 'comment_parent', 'id' => 'comment_ID');	/**	 * @see Walker::start_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Uses 'style' argument for type of HTML list.	 */	function start_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "<ol class='children'>\n";				break;			default:			case 'ul':				echo "<ul class='children'>\n";				break;		}	}	/**	 * @see Walker::end_lvl()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param int $depth Depth of comment.	 * @param array $args Will only append content if style argument value is 'ol' or 'ul'.	 */	function end_lvl(&$output, $depth, $args) {		$GLOBALS['comment_depth'] = $depth + 1;		switch ( $args['style'] ) {			case 'div':				break;			case 'ol':				echo "</ol>\n";				break;			default:			case 'ul':				echo "</ul>\n";				break;		}	}	/**	 * This function is designed to enhance Walker::display_element() to	 * display children of higher nesting levels than selected inline on	 * the highest depth level displayed. This prevents them being orphaned	 * at the end of the comment list.	 *	 * Example: max_depth = 2, with 5 levels of nested content.	 * 1	 *  1.1	 *    1.1.1	 *    1.1.1.1	 *    1.1.1.1.1	 *    1.1.2	 *    1.1.2.1	 * 2	 *  2.2	 *	 */	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {		if ( !$element )			return;		$id_field = $this->db_fields['id'];		$id = $element->$id_field;		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );		// If we're at the max depth, and the current element still has children, loop over those and display them at this level		// This is to prevent them being orphaned to the end of the list.		if ( $max_depth <= $depth + 1 && isset( $children_elements[$id]) ) {			foreach ( $children_elements[ $id ] as $child )				$this->display_element( $child, $children_elements, $max_depth, $depth, $args, $output );			unset( $children_elements[ $id ] );		}	}	/**	 * @see Walker::start_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment Comment data object.	 * @param int $depth Depth of comment in reference to parents.	 * @param array $args	 */	function start_el(&$output, $comment, $depth, $args) {		$depth++;		$GLOBALS['comment_depth'] = $depth;		if ( !empty($args['callback']) ) {			call_user_func($args['callback'], $comment, $args, $depth);			return;		}		$GLOBALS['comment'] = $comment;		extract($args, EXTR_SKIP);		if ( 'div' == $args['style'] ) {			$tag = 'div';			$add_below = 'comment';		} else {			$tag = 'li';			$add_below = 'div-comment';		}?>		<<?php echo $tag ?> <?php comment_class(empty( $args['has_children'] ) ? '' : 'parent') ?> id="comment-<?php comment_ID() ?>">		<?php if ( 'div' != $args['style'] ) : ?>		<div id="div-comment-<?php comment_ID() ?>" class="comment-body">		<?php endif; ?>		<div class="comment-author vcard">		<?php if ($args['avatar_size'] != 0) echo get_avatar( $comment, $args['avatar_size'] ); ?>		<?php printf(__('<cite class="fn">%s</cite> <span class="says">says:</span>'), get_comment_author_link()) ?>		</div><?php if ($comment->comment_approved == '0') : ?>		<em><?php _e('Your comment is awaiting moderation.') ?></em>		<br /><?php endif; ?>		<div class="comment-meta commentmetadata"><a href="<?php echo htmlspecialchars( get_comment_link( $comment->comment_ID ) ) ?>">			<?php				/* translators: 1: date, 2: time */				printf( __('%1$s at %2$s'), get_comment_date(),  get_comment_time()) ?></a><?php edit_comment_link(__('(Edit)'),'&nbsp;&nbsp;','' );			?>		</div>		<?php comment_text() ?>		<div class="reply">		<?php comment_reply_link(array_merge( $args, array('add_below' => $add_below, 'depth' => $depth, 'max_depth' => $args['max_depth']))) ?>		</div>		<?php if ( 'div' != $args['style'] ) : ?>		</div>		<?php endif; ?><?php	}	/**	 * @see Walker::end_el()	 * @since unknown	 *	 * @param string $output Passed by reference. Used to append additional content.	 * @param object $comment	 * @param int $depth Depth of comment.	 * @param array $args	 */	function end_el(&$output, $comment, $depth, $args) {		if ( !empty($args['end-callback']) ) {			call_user_func($args['end-callback'], $comment, $args, $depth);			return;		}		if ( 'div' == $args['style'] )			echo "</div>\n";		else			echo "</li>\n";	}}/** * List comments * * Used in the comments.php template to list comments for a particular post * * @since 2.7.0 * @uses Walker_Comment * * @param string|array $args Formatting options * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments */function wp_list_comments($args = array(), $comments = null ) {	global $wp_query, $comment_alt, $comment_depth, $comment_thread_alt, $overridden_cpage, $in_comment_loop;	$in_comment_loop = true;	$comment_alt = $comment_thread_alt = 0;	$comment_depth = 1;	$defaults = array('walker' => null, 'max_depth' => '', 'style' => 'ul', 'callback' => null, 'end-callback' => null, 'type' => 'all',		'page' => '', 'per_page' => '', 'avatar_size' => 32, 'reverse_top_level' => null, 'reverse_children' => '');	$r = wp_parse_args( $args, $defaults );	// Figure out what comments we'll be looping through ($_comments)	if ( null !== $comments ) {		$comments = (array) $comments;		if ( empty($comments) )			return;		if ( 'all' != $r['type'] ) {			$comments_by_type = &separate_comments($comments);			if ( empty($comments_by_type[$r['type']]) )				return;			$_comments = $comments_by_type[$r['type']];		} else {			$_comments = $comments;		}	} else {		if ( empty($wp_query->comments) )			return;		if ( 'all' != $r['type'] ) {			if ( empty($wp_query->comments_by_type) )				$wp_query->comments_by_type = &separate_comments($wp_query->comments);			if ( empty($wp_query->comments_by_type[$r['type']]) )				return;			$_comments = $wp_query->comments_by_type[$r['type']];		} else {			$_comments = $wp_query->comments;		}	}	if ( '' === $r['per_page'] && get_option('page_comments') )		$r['per_page'] = get_query_var('comments_per_page');	if ( empty($r['per_page']) ) {		$r['per_page'] = 0;		$r['page'] = 0;	}	if ( '' === $r['max_depth'] ) {		if ( get_option('thread_comments') )			$r['max_depth'] = get_option('thread_comments_depth');		else			$r['max_depth'] = -1;	}	if ( '' === $r['page'] ) {		if ( empty($overridden_cpage) ) {			$r['page'] = get_query_var('cpage');		} else {			$threaded = ( -1 != $r['max_depth'] );			$r['page'] = ( 'newest' == get_option('default_comments_page') ) ? get_comment_pages_count($_comments, $r['per_page'], $threaded) : 1;			set_query_var( 'cpage', $r['page'] );		}	}	// Validation check	$r['page'] = intval($r['page']);	if ( 0 == $r['page'] && 0 != $r['per_page'] )		$r['page'] = 1;	if ( null === $r['reverse_top_level'] )		$r['reverse_top_level'] = ( 'desc' == get_option('comment_order') );	extract( $r, EXTR_SKIP );	if ( empty($walker) )		$walker = new Walker_Comment;	$walker->paged_walk($_comments, $max_depth, $page, $per_page, $r);	$wp_query->max_num_comment_pages = $walker->max_pages;	$in_comment_loop = false;}/** * Outputs a complete commenting form for use within a template. * Most strings and form fields may be controlled through the $args array passed * into the function, while you may also choose to use the comment_form_default_fields * filter to modify the array of default fields if you'd just like to add a new * one or remove a single field. All fields are also individually passed through * a filter of the form comment_form_field_$name where $name is the key used * in the array of fields. * * @since 3.0.0 * @param array $args Options for strings, fields etc in the form * @param mixed $post_id Post ID to generate the form for, uses the current post if null * @return void */function comment_form( $args = array(), $post_id = null ) {	global $user_identity, $id;	if ( null === $post_id )		$post_id = $id;	else		$id = $post_id;	$commenter = wp_get_current_commenter();	$req = get_option( 'require_name_email' );	$aria_req = ( $req ? " aria-required='true'" : '' );	$fields =  array(		'author' => '<p class="comment-form-author">' . '<label for="author">' . __( 'Name' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30"' . $aria_req . ' /></p>',		'email'  => '<p class="comment-form-email"><label for="email">' . __( 'Email' ) . '</label> ' . ( $req ? '<span class="required">*</span>' : '' ) .		            '<input id="email" name="email" type="text" value="' . esc_attr(  $commenter['comment_author_email'] ) . '" size="30"' . $aria_req . ' /></p>',		'url'    => '<p class="comment-form-url"><label for="url">' . __( 'Website' ) . '</label>' .		            '<input id="url" name="url" type="text" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" /></p>',	);	$required_text = sprintf( ' ' . __('Required fields are marked %s'), '<span class="required">*</span>' );	$defaults = array(		'fields'               => apply_filters( 'comment_form_default_fields', $fields ),		'comment_field'        => '<p class="comment-form-comment"><label for="comment">' . _x( 'Comment', 'noun' ) . '</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>',		'must_log_in'          => '<p class="must-log-in">' .  sprintf( __( 'You must be <a href="%s">logged in</a> to post a comment.' ), wp_login_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'logged_in_as'         => '<p class="logged-in-as">' . sprintf( __( 'Logged in as <a href="%1$s">%2$s</a>. <a href="%3$s" title="Log out of this account">Log out?</a>' ), admin_url( 'profile.php' ), $user_identity, wp_logout_url( apply_filters( 'the_permalink', get_permalink( $post_id ) ) ) ) . '</p>',		'comment_notes_before' => '<p class="comment-notes">' . __( 'Your email address will not be published.' ) . ( $req ? $required_text : '' ) . '</p>',		'comment_notes_after'  => '<p class="form-allowed-tags">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s' ), ' <code>' . allowed_tags() . '</code>' ) . '</p>',		'id_form'              => 'commentform',		'id_submit'            => 'submit',		'title_reply'          => __( 'Leave a Reply' ),		'title_reply_to'       => __( 'Leave a Reply to %s' ),		'cancel_reply_link'    => __( 'Cancel reply' ),		'label_submit'         => __( 'Post Comment' ),	);	$args = wp_parse_args( $args, apply_filters( 'comment_form_defaults', $defaults ) );	?>		<?php if ( comments_open() ) : ?>			<?php do_action( 'comment_form_before' ); ?>			<div id="respond">				<h3 id="reply-title"><?php comment_form_title( $args['title_reply'], $args['title_reply_to'] ); ?> <small><?php cancel_comment_reply_link( $args['cancel_reply_link'] ); ?></small></h3>				<?php if ( get_option( 'comment_registration' ) && !is_user_logged_in() ) : ?>					<?php echo $args['must_log_in']; ?>					<?php do_action( 'comment_form_must_log_in_after' ); ?>				<?php else : ?>					<form action="<?php echo site_url( '/wp-comments-post.php' ); ?>" method="post" id="<?php echo esc_attr( $args['id_form'] ); ?>">						<?php do_action( 'comment_form_top' ); ?>						<?php if ( is_user_logged_in() ) : ?>							<?php echo apply_filters( 'comment_form_logged_in', $args['logged_in_as'], $commenter, $user_identity ); ?>							<?php do_action( 'comment_form_logged_in_after', $commenter, $user_identity ); ?>						<?php else : ?>							<?php echo $args['comment_notes_before']; ?>							<?php							do_action( 'comment_form_before_fields' );							foreach ( (array) $args['fields'] as $name => $field ) {								echo apply_filters( "comment_form_field_{$name}", $field ) . "\n";							}							do_action( 'comment_form_after_fields' );							?>						<?php endif; ?>						<?php echo apply_filters( 'comment_form_field_comment', $args['comment_field'] ); ?>						<?php echo $args['comment_notes_after']; ?>						<p class="form-submit">							<input name="submit" type="submit" id="<?php echo esc_attr( $args['id_submit'] ); ?>" value="<?php echo esc_attr( $args['label_submit'] ); ?>" />							<?php comment_id_fields(); ?>						</p>						<?php do_action( 'comment_form', $post_id ); ?>					</form>				<?php endif; ?>			</div><!-- #respond -->			<?php do_action( 'comment_form_after' ); ?>		<?php else : ?>			<?php do_action( 'comment_form_comments_closed' ); ?>		<?php endif; ?>	<?php}?>
<?php/** * WordPress Administration Update API * * @package WordPress * @subpackage Administration */// The admin side of our 1.1 update system/** * Selects the first update version from the update_core option * * @return object the response from the API */function get_preferred_from_update_core() {	$updates = get_core_updates();	if ( !is_array( $updates ) )		return false;	if ( empty( $updates ) )		return (object)array('response' => 'latest');	return $updates[0];}/** * Get available core updates * * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too, * 	set $options['available'] to false to skip not-dimissed updates. * @return array Array of the update objects */function get_core_updates( $options = array() ) {	$options = array_merge( array('available' => true, 'dismissed' => false ), $options );	$dismissed = get_site_option( 'dismissed_update_core' );	if ( !is_array( $dismissed ) ) $dismissed = array();	$from_api = get_site_transient( 'update_core' );	if ( empty($from_api) )		return false;	if ( !isset( $from_api->updates ) || !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	if ( !is_array( $updates ) ) return false;	$result = array();	foreach($updates as $update) {		if ( array_key_exists( $update->current.'|'.$update->locale, $dismissed ) ) {			if ( $options['dismissed'] ) {				$update->dismissed = true;				$result[]= $update;			}		} else {			if ( $options['available'] ) {				$update->dismissed = false;				$result[]= $update;			}		}	}	return $result;}function dismiss_core_update( $update ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$dismissed[ $update->current.'|'.$update->locale ] = true;	return update_site_option( 'dismissed_update_core', $dismissed );}function undismiss_core_update( $version, $locale ) {	$dismissed = get_site_option( 'dismissed_update_core' );	$key = $version.'|'.$locale;	if ( !isset( $dismissed[$key] ) ) return false;	unset( $dismissed[$key] );	return update_site_option( 'dismissed_update_core', $dismissed );}function find_core_update( $version, $locale ) {	$from_api = get_site_transient( 'update_core' );	if ( !is_array( $from_api->updates ) ) return false;	$updates = $from_api->updates;	foreach($updates as $update) {		if ( $update->current == $version && $update->locale == $locale )			return $update;	}	return false;}function core_update_footer( $msg = '' ) {	if ( is_multisite() && !current_user_can('update_core') )		return false;	if ( !current_user_can('update_core') )		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->current ) )		$cur->current = '';	if ( ! isset( $cur->url ) )		$cur->url = '';	if ( ! isset( $cur->response ) )		$cur->response = '';	switch ( $cur->response ) {	case 'development' :		return sprintf( __( 'You are using a development version (%1$s). Cool! Please <a href="%2$s">stay updated</a>.' ), $GLOBALS['wp_version'], 'update-core.php');	break;	case 'upgrade' :		return sprintf( '<strong>'.__( '<a href="%1$s">Get Version %2$s</a>' ).'</strong>', 'update-core.php', $cur->current);	break;	case 'latest' :	default :		return sprintf( __( 'Version %s' ), $GLOBALS['wp_version'] );	break;	}}add_filter( 'update_footer', 'core_update_footer' );function update_nag() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	global $pagenow;	if ( 'update-core.php' == $pagenow )		return;	$cur = get_preferred_from_update_core();	if ( ! isset( $cur->response ) || $cur->response != 'upgrade' )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! <a href="%2$s">Please update now</a>.'), $cur->current, 'update-core.php' );	else		$msg = sprintf( __('<a href="http://codex.wordpress.org/Version_%1$s">WordPress %1$s</a> is available! Please notify the site administrator.'), $cur->current );	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'update_nag', 3 );// Called directly from dashboardfunction update_right_now_message() {	if ( is_multisite() && !current_user_can('update_core') )		return false;	$cur = get_preferred_from_update_core();	$msg = sprintf( __('You are using <span class="b">WordPress %s</span>.'), $GLOBALS['wp_version'] );	if ( isset( $cur->response ) && $cur->response == 'upgrade' && current_user_can('update_core') )		$msg .= " <a href='update-core.php' class='button'>" . sprintf( __('Update to %s'), $cur->current ? $cur->current : __( 'Latest' ) ) . '</a>';	echo "<span id='wp-version-message'>$msg</span>";}function get_plugin_updates() {	$all_plugins = get_plugins();	$upgrade_plugins = array();	$current = get_site_transient( 'update_plugins' );	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {		if ( isset( $current->response[ $plugin_file ] ) ) {			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];		}	}	return $upgrade_plugins;}function wp_plugin_update_rows() {	if ( !current_user_can('update_plugins' ) )		return;	$plugins = get_site_transient( 'update_plugins' );	if ( isset($plugins->response) && is_array($plugins->response) ) {		$plugins = array_keys( $plugins->response );		foreach( $plugins as $plugin_file ) {			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );		}	}}add_action( 'admin_init', 'wp_plugin_update_rows' );function wp_plugin_update_row( $file, $plugin_data ) {	$current = get_site_transient( 'update_plugins' );	if ( !isset( $current->response[ $file ] ) )		return false;	$r = $current->response[ $file ];	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );	$details_url = admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&TB_iframe=true&width=600&height=800');	echo '<tr class="plugin-update-tr"><td colspan="3" class="plugin-update"><div class="update-message">';	if ( ! current_user_can('update_plugins') )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else if ( empty($r->package) )		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> <em>automatic upgrade unavailable for this plugin</em>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );	else		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s Details</a> or <a href="%5$s">upgrade automatically</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version, wp_nonce_url('update.php?action=upgrade-plugin&plugin=' . $file, 'upgrade-plugin_' . $file) );	do_action( "in_plugin_update_message-$file", $plugin_data, $r );	echo '</div></td></tr>';}function wp_update_plugin($plugin, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Plugin_Upgrader();	return $upgrader->upgrade($plugin);}function get_theme_updates() {	$themes = get_themes();	$current = get_site_transient('update_themes');	$update_themes = array();	foreach ( $themes as $theme ) {		$theme = (object) $theme;		if ( isset($current->response[ $theme->Stylesheet ]) ) {			$update_themes[$theme->Stylesheet] = $theme;			$update_themes[$theme->Stylesheet]->update = $current->response[ $theme->Stylesheet ];		}	}	return $update_themes;}function wp_update_theme($theme, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Theme_Upgrader();	return $upgrader->upgrade($theme);}function wp_update_core($current, $feedback = '') {	if ( !empty($feedback) )		add_filter('update_feedback', $feedback);	include ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';	$upgrader = new Core_Upgrader();	return $upgrader->upgrade($current);}function maintenance_nag() {	global $upgrading;	if ( ! isset( $upgrading ) )		return false;	if ( current_user_can('update_core') )		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );	else		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');	echo "<div class='update-nag'>$msg</div>";}add_action( 'admin_notices', 'maintenance_nag' );?>
<?php/** * Network installation administration panel. * * A multi-step process allowing the user to enable a network of WordPress sites. * * @since 3.0.0 * * @package WordPress * @subpackage Administration */define( 'WP_NETWORK_ADMIN_PAGE', true );/** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! is_super_admin() )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );if ( is_multisite() && ! defined( 'MULTISITE' ) )	wp_die( __( 'The Network creation panel is not for WordPress MU networks.' ) );// We need to create references to ms global tables to enable Network.foreach ( $wpdb->tables( 'ms_global' ) as $table => $prefixed_table )	$wpdb->$table = $prefixed_table;/** * Check for an existing network. * * @since 3.0.0 * @return Whether a network exists. */function network_domain_check() {	global $wpdb;	if ( $wpdb->get_var( "SHOW TABLES LIKE '$wpdb->site'" ) )		return $wpdb->get_var( "SELECT domain FROM $wpdb->site ORDER BY id ASC LIMIT 1" );	return false;}/** * Allow subdomain install * * @since 3.0.0 * @return bool Whether subdomain install is allowed */function allow_subdomain_install() {	$domain = preg_replace( '|https?://([^/]+)|', '$1', get_option( 'siteurl' ) );	if( false !== strpos( $domain, '/' ) || 'localhost' == $domain || preg_match( '|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|', $domain ) )		return false;	return true;}/** * Allow subdirectory install * * @since 3.0.0 * @return bool Whether subdirectory install is allowed */function allow_subdirectory_install() {	global $wpdb;	if ( apply_filters( 'allow_subdirectory_install', false ) )		return true;	if ( defined( 'ALLOW_SUBDIRECTORY_INSTALL' ) && ALLOW_SUBDIRECTORY_INSTALL )		return true;	$post = $wpdb->get_row( "SELECT ID FROM $wpdb->posts WHERE post_date < DATE_SUB(NOW(), INTERVAL 1 MONTH) AND post_status = 'publish'" );	if ( empty( $post ) )		return true;	return false;}/** * Get base domain of network. * * @since 3.0.0 * @return string Base domain. */function get_clean_basedomain() {	if ( $existing_domain = network_domain_check() )		return $existing_domain;	$domain = preg_replace( '|https?://|', '', get_option( 'siteurl' ) );	if ( $slash = strpos( $domain, '/' ) )		$domain = substr( $domain, 0, $slash );	return $domain;}if ( ! network_domain_check() && ( ! defined( 'WP_ALLOW_MULTISITE' ) || ! WP_ALLOW_MULTISITE ) )	wp_die( __( 'You must define the <code>WP_ALLOW_MULTISITE</code> constant as true in your wp-config.php file to allow creation of a Network.' ) );$title = __( 'Create a Network of WordPress Sites' );$parent_file = 'tools.php';add_contextual_help($current_screen,	'<p>' . __('This screen allows you to configure a network as having subdomains (<code>site1.example.com</code>) or subdirectories (<code>example.com/site1</code>). Subdomains require wildcard subdomains to be enabled in Apache and DNS records, if your host allows it.') . '</p>' .	'<p>' . __('Choose subdomains or subdirectories; this can only be switched afterwards by reconfiguring your install. Fill out the network details, and click install. If this does not work, you may have to add a wildcard DNS record (for subdomains) or change to another setting in Permalinks (for subdirectories).') . '</p>' .	'<p>' . __('The next screen for Network will give you individually-generated lines of code to add to your wp-config.php and .htaccess files. Make sure the settings of your FTP client make files starting with a dot visible, so that you can find .htaccess; you may have to create this file if it really is not there. Make backup copies of those two files.') . '</p>' .	'<p>' . __('Add a <code>blogs.dir</code> directory under <code>/wp-content</code> and add the designated lines of code to wp-config.php (just before <code>/*...stop editing...*/</code>) and <code>.htaccess</code> (replacing the existing WordPress rules).') . '</p>' .	'<p>' . __('Refreshing your browser will take you to a screen with an archive of those added lines of code. A set of six links under Super Admin will appear at the top of the main left navigation menu. The multisite network is now enabled.') . '</p>' .	'<p>' . __('The choice of subdirectory sites is disabled if this setup is more than a month old because of permalink problems with &#8220;/blog/&#8221; from the main site. This disabling will be addressed soon in a future version.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Create_A_Network" target="_blank">General Network Creation Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Network_SubPanel" target="_blank">Tools > Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php/** * Prints step 1 for Network installation process. * * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such. Navigating to Tools > Network * 	should not be a sudden "Welcome to a new install process! Fill this out and click here." See also contextual help todo. * * @since 3.0.0 */function network_step1( $errors = false ) {	global $is_apache;	if ( get_option( 'siteurl' ) != get_option( 'home' ) ) {		echo '<div class="error"><p><strong>' . __('Error:') . '</strong> ' . sprintf( __( 'Your <strong>WordPress address</strong> must match your <strong>Site address</strong> before creating a Network. See <a href="%s">General Settings</a>.' ), esc_url( admin_url( 'options-general.php' ) ) ) . '</p></div>';		echo '</div>';		include ('./admin-footer.php' );		die();	}	$active_plugins = get_option( 'active_plugins' );	if ( ! empty( $active_plugins ) ) {		echo '<div class="updated"><p><strong>' . __('Warning:') . '</strong> ' . sprintf( __( 'Please <a href="%s">deactivate your plugins</a> before enabling the Network feature.' ), admin_url( 'plugins.php?plugin_status=active' ) ) . '</p></div><p>' . __( 'Once the network is created, you may reactivate your plugins.' ) . '</p>';		echo '</div>';		include( './admin-footer.php' );		die();	}	$hostname = get_clean_basedomain();	$has_ports = strstr( $hostname, ':' );	if ( ( false !== $has_ports && ! in_array( $has_ports, array( ':80', ':443' ) ) ) ) {		echo '<div class="error"><p><strong>' . __( 'Error:') . '</strong> ' . __( 'You cannot install a network of sites with your server address.' ) . '</p></div>';		echo '<p>' . sprintf( __( 'You cannot use port numbers such as <code>%s</code>.' ), $has_ports ) . '</p>';		echo '<a href="' . esc_url( admin_url() ) . '">' . __( 'Return to Dashboard' ) . '</a>';		echo '</div>';		include( './admin-footer.php' );		die();	}	echo '<form method="post" action="">';	wp_nonce_field( 'install-network-1' );	$error_codes = array();	if ( is_wp_error( $errors ) ) {		echo '<div class="error"><p><strong>' . __( 'ERROR: The network could not be created.' ) . '</strong></p>';		foreach ( $errors->get_error_messages() as $error )			echo "<p>$error</p>";		echo '</div>';		$error_codes = $errors->get_error_codes();	}	if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )		echo '<div class="error"><p><strong>' . __('Warning!') . '</strong> ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</p></div>';	$site_name = ( ! empty( $_POST['sitename'] ) && ! in_array( 'empty_sitename', $error_codes ) ) ? $_POST['sitename'] : sprintf( _x('%s Sites', 'Default network name' ), get_option( 'blogname' ) );	$admin_email = ( ! empty( $_POST['email'] ) && ! in_array( 'invalid_email', $error_codes ) ) ? $_POST['email'] : get_option( 'admin_email' );	?>	<p><?php _e( 'Welcome to the Network installation process!' ); ?></p>	<p><?php _e( 'Fill in the information below and you&#8217;ll be on your way to creating a network of WordPress sites. We will create configuration files in the next step.' ); ?></p>	<?php	if ( isset( $_POST['subdomain_install'] ) ) {		$subdomain_install = (bool) $_POST['subdomain_install'];	} elseif ( apache_mod_loaded('mod_rewrite') ) { // assume nothing		$subdomain_install = true;	} elseif ( !allow_subdirectory_install() ) {		$subdomain_install = true;	} else {		$subdomain_install = false;		if ( $got_mod_rewrite = got_mod_rewrite() ) // dangerous assumptions			echo '<div class="updated inline"><p><strong>' . __( 'Note:' ) . '</strong> ' . __( 'Please make sure the Apache <code>mod_rewrite</code> module is installed as it will be used at the end of this installation.' ) . '</p>';		elseif ( $is_apache )			echo '<div class="error inline"><p><strong>' . __( 'Warning!' ) . '</strong> ' . __( 'It looks like the Apache <code>mod_rewrite</code> module is not installed.' ) . '</p>';		if ( $got_mod_rewrite || $is_apache ) // Protect against mod_rewrite mimicry (but ! Apache)			echo '<p>' . __( 'If <code>mod_rewrite</code> is disabled, ask your administrator to enable that module, or look at the <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html">Apache documentation</a> or <a href="http://www.google.com/search?q=apache+mod_rewrite">elsewhere</a> for help setting it up.' ) . '</p></div>';	}	if ( allow_subdomain_install() && allow_subdirectory_install() ) : ?>		<h3><?php esc_html_e( 'Addresses of Sites in your Network' ); ?></h3>		<p><?php _e( 'Please choose whether you would like sites in your WordPress network to use sub-domains or sub-directories. <strong>You cannot change this later.</strong>' ); ?></p>		<p><?php _e( 'You will need a wildcard DNS record if you are going to use the virtual host (sub-domain) functionality.' ); ?></p>		<?php // @todo: Link to an MS readme? ?>		<table class="form-table">			<tr>				<th><label><input type='radio' name='subdomain_install' value='1'<?php checked( $subdomain_install ); ?> /> <?php _e( 'Sub-domains' ); ?></label></th>				<td><?php printf( _x( 'like <code>site1.%1$s</code> and <code>site2.%1$s</code>', 'subdomain examples' ), $hostname ); ?></td>			</tr>			<tr>				<th><label><input type='radio' name='subdomain_install' value='0'<?php checked( ! $subdomain_install ); ?> /> <?php _e( 'Sub-directories' ); ?></label></th>				<td><?php printf( _x( 'like <code>%1$s/site1</code> and <code>%1$s/site2</code>', 'subdirectory examples' ), $hostname ); ?></td>			</tr>		</table><?php	endif;		$is_www = ( 0 === strpos( $hostname, 'www.' ) );		if ( $is_www ) :		?>		<h3><?php esc_html_e( 'Server Address' ); ?></h3>		<p><?php printf( __( 'We recommend you change your siteurl to <code>%1$s</code> before enabling the network feature. It will still be possible to visit your site using the <code>www</code> prefix with an address like <code>%2$s</code> but any links will not have the <code>www</code> prefix.' ), substr( $hostname, 4 ), $hostname ); ?></h3>		<table class="form-table">			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		</table>		<?php endif; ?>		<h3><?php esc_html_e( 'Network Details' ); ?></h3>		<table class="form-table">		<?php if ( 'localhost' == $hostname ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because you are using <code>localhost</code>, the sites in your WordPress network must use sub-directories. Consider using <code>localhost.localdomain</code> if you wish to use sub-domains.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdomain_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-directory Install' ); ?></th>				<td><?php					_e( 'Because your install is in a directory, the sites in your WordPress network must use sub-directories.' );					// Uh oh:					if ( !allow_subdirectory_install() )						echo ' <strong>' . __( 'Warning!' ) . ' ' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php elseif ( !allow_subdirectory_install() ) : ?>			<tr>				<th scope="row"><?php esc_html_e( 'Sub-domain Install' ); ?></th>				<td><?php _e( 'Because your install is not new, the sites in your WordPress network must use sub-domains.' );					echo ' <strong>' . __( 'The main site in a sub-directory install will need to use a modified permalink structure, potentially breaking existing links.' ) . '</strong>';				?></td>			</tr>		<?php endif; ?>		<?php if ( ! $is_www ) : ?>			<tr>				<th scope='row'><?php esc_html_e( 'Server Address' ); ?></th>				<td>					<?php printf( __( 'The internet address of your network will be <code>%s</code>.' ), $hostname ); ?>				</td>			</tr>		<?php endif; ?>			<tr>				<th scope='row'><?php esc_html_e( 'Network Title' ); ?></th>				<td>					<input name='sitename' type='text' size='45' value='<?php echo esc_attr( $site_name ); ?>' />					<br /><?php _e( 'What would you like to call your network?' ); ?>				</td>			</tr>			<tr>				<th scope='row'><?php esc_html_e( 'Admin E-mail Address' ); ?></th>				<td>					<input name='email' type='text' size='45' value='<?php echo esc_attr( $admin_email ); ?>' />					<br /><?php _e( 'Your email address.' ); ?>				</td>			</tr>		</table>		<p class='submit'><input class="button-primary" name='submit' type='submit' value='<?php esc_attr_e( 'Install' ); ?>' /></p>	</form>		<?php}/** * Prints step 2 for Network installation process. * * @since 3.0.0 */function network_step2( $errors = false ) {	global $base, $wpdb;	$hostname = get_clean_basedomain();	// Wildcard DNS message.	if ( is_wp_error( $errors ) )		echo '<div class="error">' . $errors->get_error_message() . '</div>';	if ( $_POST ) {		$subdomain_install = allow_subdomain_install() ? ( allow_subdirectory_install() ? ! empty( $_POST['subdomain_install'] ) : true ) : false;	} else {		if ( is_multisite() ) {			$subdomain_install = is_subdomain_install();?>	<div class="updated"><p><strong><?php _e( 'Notice: The Network feature is already enabled.' ); ?></strong> <?php _e( 'The original configuration steps are shown here for reference.' ); ?></p></div><?php	} else {			$subdomain_install = (bool) $wpdb->get_var( "SELECT meta_value FROM $wpdb->sitemeta WHERE site_id = 1 AND meta_key = 'subdomain_install'" );?>	<div class="error"><p><strong><?php _e('Warning:'); ?></strong> <?php _e( 'An existing WordPress network was detected.' ); ?></p></div>	<p><?php _e( 'Please complete the configuration steps. To create a new network, you will need to empty or remove the network database tables.' ); ?></p><?php		}	}	if ( $_POST || ! is_multisite() ) {?>		<h3><?php esc_html_e( 'Enabling the Network' ); ?></h3>		<p><?php _e( 'Complete the following steps to enable the features for creating a network of sites.' ); ?></p>		<div class="updated inline"><p><?php			if ( iis7_supports_permalinks() )				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> file.' );			else				_e( '<strong>Caution:</strong> We recommend you back up your existing <code>wp-config.php</code> and <code>.htaccess</code> files.' );		?></p></div><?php	}?>		<ol>			<li><p><?php				printf( __( 'Create a <code>blogs.dir</code> directory in <code>%s</code>. This directory is used to stored uploaded media for your additional sites and must be writeable by the web server.' ), WP_CONTENT_DIR );				if ( WP_CONTENT_DIR != ABSPATH . 'wp-content' )					echo ' <strong>' . __('Warning:') . ' ' . __( 'Networks may not be fully compatible with custom wp-content directories.' ) . '</strong';			?></p></li>			<li><p><?php printf( __( 'Add the following to your <code>wp-config.php</code> file in <code>%s</code> <strong>above</strong> the line reading <code>/* That&#8217;s all, stop editing! Happy blogging. */</code>:' ), ABSPATH ); ?></p>				<textarea class="code" readonly="readonly" cols="100" rows="7">define( 'MULTISITE', true );define( 'SUBDOMAIN_INSTALL', <?php echo $subdomain_install ? 'true' : 'false'; ?> );$base = '<?php echo $base; ?>';define( 'DOMAIN_CURRENT_SITE', '<?php echo $hostname; ?>' );define( 'PATH_CURRENT_SITE', '<?php echo $base; ?>' );define( 'SITE_ID_CURRENT_SITE', 1 );define( 'BLOG_ID_CURRENT_SITE', 1 );</textarea><?php	$keys_salts = array( 'AUTH_KEY' => '', 'SECURE_AUTH_KEY' => '', 'LOGGED_IN_KEY' => '', 'NONCE_KEY' => '', 'AUTH_SALT' => '', 'SECURE_AUTH_SALT' => '', 'LOGGED_IN_SALT' => '', 'NONCE_SALT' => '' );	foreach ( $keys_salts as $c => $v ) {		if ( defined( $c ) )			unset( $keys_salts[ $c ] );	}	if ( ! empty( $keys_salts ) ) {		$from_api = wp_remote_get( 'https://api.wordpress.org/secret-key/1.1/salt/' );		if ( is_wp_error( $from_api ) ) {			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = wp_generate_password( 64, true, true );			}		} else {			$from_api = explode( "\n", wp_remote_retrieve_body( $from_api ) );			foreach ( $keys_salts as $c => $v ) {				$keys_salts[ $c ] = substr( array_shift( $from_api ), 28, 64 );			}		}		$num_keys_salts = count( $keys_salts );?>	<p><?php		echo _n( 'This unique authentication key is also missing from your <code>wp-config.php</code> file.', 'These unique authentication keys are also missing from your <code>wp-config.php</code> file.', $num_keys_salts ); ?> <?php _e( 'To make your installation more secure, you should also add:' ) ?></p>	<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $num_keys_salts; ?>"><?php	foreach ( $keys_salts as $c => $v ) {		echo "\ndefine( '$c', '$v' );";	}?></textarea><?php	}?></li><?php	if ( iis7_supports_permalinks() ) :			if ( $subdomain_install ) {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:1}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			} else {				$web_config_file ='<?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>        <rewrite>            <rules>                <rule name="WordPress Rule 1" stopProcessing="true">                    <match url="^index\.php$" ignoreCase="false" />                    <action type="None" />                </rule>                <rule name="WordPress Rule 2" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?files/(.+)" ignoreCase="false" />                    <action type="Rewrite" url="wp-includes/ms-files.php?file={R:2}" appendQueryString="false" />                </rule>                <rule name="WordPress Rule 3" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?wp-admin$" ignoreCase="false" />                    <action type="Redirect" url="{R:1}wp-admin/" redirectType="Permanent" />                </rule>                <rule name="WordPress Rule 4" stopProcessing="true">                    <match url="^" ignoreCase="false" />                    <conditions logicalGrouping="MatchAny">                        <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" />                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" />                    </conditions>                    <action type="None" />                </rule>                <rule name="WordPress Rule 5" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*)" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 6" stopProcessing="true">                    <match url="^([_0-9a-zA-Z-]+/)?(.*\.php)$" ignoreCase="false" />                    <action type="Rewrite" url="{R:2}" />                </rule>                <rule name="WordPress Rule 7" stopProcessing="true">                    <match url="." ignoreCase="false" />                    <action type="Rewrite" url="index.php" />                </rule>            </rules>        </rewrite>    </system.webServer></configuration>';			}	?>		<li><p><?php printf( __( 'Add the following to your <code>web.config</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="20">		<?php echo wp_htmledit_pre( $web_config_file ); ?>		</textarea></li>		</ol>	<?php else : // end iis7_supports_permalinks(). construct an htaccess file instead:		$htaccess_file = 'RewriteEngine OnRewriteBase ' . $base . 'RewriteRule ^index\.php$ - [L]# uploaded filesRewriteRule ^' . ( $subdomain_install ? '' : '([_0-9a-zA-Z-]+/)?' ) . 'files/(.+) wp-includes/ms-files.php?file=$' . ( $subdomain_install ? 1 : 2 ) . ' [L]' . "\n";		if ( ! $subdomain_install )			$htaccess_file .= "\n# add a trailing slash to /wp-admin\n" . 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' . "\n";		$htaccess_file .= "\n" . 'RewriteCond %{REQUEST_FILENAME} -f [OR]RewriteCond %{REQUEST_FILENAME} -dRewriteRule ^ - [L]';		// @todo custom content dir.		if ( ! $subdomain_install )			$htaccess_file .= "\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]\nRewriteRule  ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]";		$htaccess_file .= "\nRewriteRule . index.php [L]";		?>		<li><p><?php printf( __( 'Add the following to your <code>.htaccess</code> file in <code>%s</code>, replacing other WordPress rules:' ), ABSPATH ); ?></p>		<textarea class="code" readonly="readonly" cols="100" rows="<?php echo $subdomain_install ? 11 : 16; ?>"><?php echo wp_htmledit_pre( $htaccess_file ); ?></textarea></li>		</ol>	<?php endif; // end IIS/Apache code branches.	if ( !is_multisite() ) { ?>		<p><?php printf( __( 'Once you complete these steps, your network is enabled and configured. You will have to log in again.') ); ?> <a href="<?php echo esc_url( site_url( 'wp-login.php' ) ); ?>"><?php _e( 'Log In' ); ?></a></p><?php	}}$base = trailingslashit( stripslashes( dirname( dirname( $_SERVER['SCRIPT_NAME'] ) ) ) );if ( $_POST ) {	check_admin_referer( 'install-network-1' );	require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );	// create network tables	install_network();	$hostname = get_clean_basedomain();	$subdomain_install = !allow_subdomain_install() ? false : (bool) $_POST['subdomain_install'];	if ( ! network_domain_check() ) {		$result = populate_network( 1, get_clean_basedomain(), sanitize_email( $_POST['email'] ), stripslashes( $_POST['sitename'] ), $base, $subdomain_install );		if ( is_wp_error( $result ) ) {			if ( 1 == count( $result->get_error_codes() ) && 'no_wildcard_dns' == $result->get_error_code() )				network_step2( $result );			else				network_step1( $result );		} else {			network_step2();		}	} else {		network_step2();	}} elseif ( is_multisite() || network_domain_check() ) {	network_step2();} else {	network_step1();}?></div><?php include( './admin-footer.php' ); ?>
<?php/** * Edit Tags Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_reset_vars( array('action', 'tag', 'taxonomy', 'post_type') );if ( empty($taxonomy) )	$taxonomy = 'post_tag';if ( !taxonomy_exists($taxonomy) )	wp_die(__('Invalid taxonomy'));$tax = get_taxonomy($taxonomy);$title = $tax->labels->name;if ( empty($post_type) || !in_array( $post_type, get_post_types( array('public' => true) ) ) )	$post_type = 'post';if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "edit-tags.php?taxonomy=$taxonomy&amp;post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = "edit-tags.php?taxonomy=$taxonomy";}if ( isset( $_GET['action'] ) && isset($_GET['delete_tags']) && ( 'delete' == $_GET['action'] || 'delete' == $_GET['action2'] ) )	$action = 'bulk-delete';switch($action) {case 'add-tag':	check_admin_referer('add-tag');	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 1, $location);	else		$location = add_query_arg('message', 4, $location);	wp_redirect($location);	exit;break;case 'delete':	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( !isset( $_GET['tag_ID'] ) ) {		wp_redirect($location);		exit;	}	$tag_ID = (int) $_GET['tag_ID'];	check_admin_referer('delete-tag_' .  $tag_ID);	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	wp_delete_term( $tag_ID, $taxonomy);	$location = add_query_arg('message', 2, $location);	wp_redirect($location);	exit;break;case 'bulk-delete':	check_admin_referer('bulk-tags');	if ( !current_user_can($tax->cap->delete_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$tags = (array) $_GET['delete_tags'];	foreach( $tags as $tag_ID ) {		wp_delete_term( $tag_ID, $taxonomy);	}	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	$location = add_query_arg('message', 6, $location);	wp_redirect($location);	exit;break;case 'edit':	$title = $tax->labels->edit_item;	require_once ('admin-header.php');	$tag_ID = (int) $_GET['tag_ID'];	$tag = get_term($tag_ID, $taxonomy, OBJECT, 'edit');	include('./edit-tag-form.php');break;case 'editedtag':	$tag_ID = (int) $_POST['tag_ID'];	check_admin_referer('update-tag_' . $tag_ID);	if ( !current_user_can($tax->cap->edit_terms) )		wp_die(__('Cheatin&#8217; uh?'));	$ret = wp_update_term($tag_ID, $taxonomy, $_POST);	$location = 'edit-tags.php?taxonomy=' . $taxonomy;	if ( 'post' != $post_type )		$location .= '&post_type=' . $post_type;	if ( $referer = wp_get_original_referer() ) {		if ( false !== strpos($referer, 'edit-tags.php') )			$location = $referer;	}	if ( $ret && !is_wp_error( $ret ) )		$location = add_query_arg('message', 3, $location);	else		$location = add_query_arg('message', 5, $location);	wp_redirect($location);	exit;break;default:if ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}wp_enqueue_script('admin-tags');if ( current_user_can($tax->cap->edit_terms) )	wp_enqueue_script('inline-edit-tax');if ( 'category' == $taxonomy || 'post_tag' == $taxonomy ) {	if ( 'category' == $taxonomy )		$help = '<p>' . sprintf(__('You can use categories to define sections of your site and group related posts. The default category is &#8220;Uncategorized&#8221; until you change it in your <a href="%s">writing settings</a>.'), 'options-writing.php') . '</p>';	else		$help = '<p>' . __('You can assign keywords to your posts using Post Tags. Unlike categories, tags have no hierarchy, meaning there&#8217;s no relationship from one tag to another.') . '</p>';	$help .='<p>' . __('What&#8217;s the difference between categories and tags? Normally, tags are ad-hoc keywords that identify important information in your post (names, subjects, etc) that may or may not recur in other posts, while categories are pre-determined sections. If you think of your site like a book, the categories are like the Table of Contents and the tags are like the terms in the index.') . '</p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('When adding a new category on this screen, you&#8217;ll fill in the following fields:') . '</p>';	else		$help .= '<p>' . __('When adding a new tag on this screen, you&#8217;ll fill in the following fields:') . '</p>';	$help .= '<ul>' .		'<li>' . __('<strong>Name</strong> - The name is how it appears on your site.') . '</li>';	if ( ! global_terms_enabled() )		$help .= '<li>' . __('<strong>Slug</strong> - The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.') . '</li>';	if ( 'category' == $taxonomy )		$help .= '<li>' . __('<strong>Parent</strong> - Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional. To create a subcategory, just choose another category from the Parent dropdown.') . '</li>';	$help .= '<li>' . __('<strong>Description</strong> - The description is not prominent by default; however, some themes may display it.') . '</li>' .		'</ul>' .		'<p>' . __('You can change the display of this screen using the Screen Options tab to set how many items are displayed per screen and to display/hide columns in the table.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>';	if ( 'category' == $taxonomy )		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Manage_Categories_SubPanel" target="_blank">Categories Documentation</a>') . '</p>';	else		$help .= '<p>' . __('<a href="http://codex.wordpress.org/Post_Tags_SubPanel" target="_blank">Tags Documentation</a>') . '</p>';	$help .= '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>';	add_contextual_help($current_screen, $help);	unset($help);}require_once ('admin-header.php');$messages[1] = __('Item added.');$messages[2] = __('Item deleted.');$messages[3] = __('Item updated.');$messages[4] = __('Item not added.');$messages[5] = __('Item not updated.');$messages[6] = __('Items deleted.');?><div class="wrap nosubsub"><?php screen_icon(); ?><h2><?php echo esc_html( $title );if ( !empty($_GET['s']) )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', esc_html( stripslashes($_GET['s']) ) ); ?></h2><?php if ( isset($_GET['message']) && ( $msg = (int) $_GET['message'] ) ) : ?><div id="message" class="updated"><p><?php echo $messages[$msg]; ?></p></div><?php $_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);endif; ?><div id="ajax-response"></div><form class="search-form" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><p class="search-box">	<label class="screen-reader-text" for="tag-search-input"><?php echo $tax->labels->search_items; ?>:</label>	<input type="text" id="tag-search-input" name="s" value="<?php _admin_search_query(); ?>" />	<input type="submit" value="<?php echo esc_attr( $tax->labels->search_items );  ?>" class="button" /></p></form><br class="clear" /><div id="col-container"><div id="col-right"><div class="col-wrap"><form id="posts-filter" action="" method="get"><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><input type="hidden" name="post_type" value="<?php echo esc_attr($post_type); ?>" /><div class="tablenav"><?php$pagenum = isset( $_GET['pagenum'] ) ? absint( $_GET['pagenum'] ) : 0;if ( empty($pagenum) )	$pagenum = 1;$tags_per_page = (int) get_user_option( 'edit_' .  $taxonomy . '_per_page' );if ( empty($tags_per_page) || $tags_per_page < 1 )	$tags_per_page = 20;if ( 'post_tag' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_tags_per_page', $tags_per_page );	$tags_per_page = apply_filters( 'tagsperpage', $tags_per_page ); // Old filter} elseif ( 'category' == $taxonomy ) {	$tags_per_page = apply_filters( 'edit_categories_per_page', $tags_per_page ); // Old filter} else {	$tags_per_page = apply_filters( 'edit_' . $taxonomy . '_per_page', $tags_per_page );}$searchterms = !empty($_GET['s']) ? trim(stripslashes($_GET['s'])) : '';$page_links = paginate_links( array(	'base' => add_query_arg( 'pagenum', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => ceil(wp_count_terms($taxonomy, array('search' => $searchterms)) / $tags_per_page),	'current' => $pagenum));if ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?php wp_nonce_field('bulk-tags'); ?></div><br class="clear" /></div><div class="clear"></div><table class="widefat tag fixed" cellspacing="0">	<thead>	<tr><?php print_column_headers($current_screen); ?>	</tr>	</thead>	<tfoot>	<tr><?php print_column_headers($current_screen, false); ?>	</tr>	</tfoot>	<tbody id="the-list" class="list:tag"><?php tag_rows( $pagenum, $tags_per_page, $searchterms, $taxonomy ); ?>	</tbody></table><div class="tablenav"><?phpif ( $page_links )	echo "<div class='tablenav-pages'>$page_links</div>";?><div class="alignleft actions"><select name="action2"><option value="" selected="selected"><?php _e('Bulk Actions'); ?></option><option value="delete"><?php _e('Delete'); ?></option></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /></div><br class="clear" /></div><br class="clear" /></form><?php if ( 'category' == $taxonomy ) : ?><div class="form-wrap"><p><?php printf(__('<strong>Note:</strong><br />Deleting a category does not delete the posts in that category. Instead, posts that were only assigned to the deleted category are set to the category <strong>%s</strong>.'), apply_filters('the_category', get_cat_name(get_option('default_category')))) ?></p><?php if ( current_user_can( 'import' ) ) : ?><p><?php printf(__('Categories can be selectively converted to tags using the <a href="%s">category to tag converter</a>.'), 'import.php') ?></p><?php endif; ?></div><?php elseif ( 'post_tag' == $taxonomy && current_user_can( 'import' ) ) : ?><div class="form-wrap"><p><?php printf(__('Tags can be selectively converted to categories using the <a href="%s">tag to category converter</a>'), 'import.php') ;?>.</p></div><?php endif;do_action('after-' . $taxonomy . '-table', $taxonomy);?></div></div><!-- /col-right --><div id="col-left"><div class="col-wrap"><?phpif ( !is_taxonomy_hierarchical($taxonomy) ) {	if ( current_user_can( $tax->cap->edit_terms ) )		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false, 'link' => 'edit' ) );	else		$tag_cloud = wp_tag_cloud( array( 'taxonomy' => $taxonomy, 'echo' => false ) );	if ( $tag_cloud ) :	?><div class="tagcloud"><h3><?php echo $tax->labels->popular_items; ?></h3><?php echo $tag_cloud; unset( $tag_cloud ); ?></div><?phpendif;}if ( current_user_can($tax->cap->edit_terms) ) {	if ( 'category' == $taxonomy )		do_action('add_category_form_pre', (object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_pre_add_form	else		do_action('add_tag_form_pre', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categories	do_action($taxonomy . '_pre_add_form', $taxonomy);?><div class="form-wrap"><h3><?php echo $tax->labels->add_new_item; ?></h3><form id="addtag" method="post" action="edit-tags.php" class="validate"><input type="hidden" name="action" value="add-tag" /><input type="hidden" name="screen" value="<?php echo esc_attr($current_screen->id); ?>" /><input type="hidden" name="taxonomy" value="<?php echo esc_attr($taxonomy); ?>" /><?php wp_nonce_field('add-tag'); ?><div class="form-field form-required">	<label for="tag-name"><?php _ex('Name', 'Taxonomy Name'); ?></label>	<input name="tag-name" id="tag-name" type="text" value="" size="40" aria-required="true" />	<p><?php _e('The name is how it appears on your site.'); ?></p></div><?php if ( ! global_terms_enabled() ) : ?><div class="form-field">	<label for="tag-slug"><?php _ex('Slug', 'Taxonomy Slug'); ?></label>	<input name="slug" id="tag-slug" type="text" value="" size="40" />	<p><?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></p></div><?php endif; // is_multisite() ?><?php if ( is_taxonomy_hierarchical($taxonomy) ) : ?><div class="form-field">	<label for="parent"><?php _ex('Parent', 'Taxonomy Parent'); ?></label>	<?php wp_dropdown_categories(array('hide_empty' => 0, 'hide_if_empty' => false, 'taxonomy' => $taxonomy, 'name' => 'parent', 'orderby' => 'name', 'hierarchical' => true, 'show_option_none' => __('None'))); ?>	<?php if ( 'category' == $taxonomy ) : // @todo: Generic text for hierarchical taxonomies ?>		<p><?php _e('Categories, unlike tags, can have a hierarchy. You might have a Jazz category, and under that have children categories for Bebop and Big Band. Totally optional.'); ?></p>	<?php endif; ?></div><?php endif; // is_taxonomy_hierarchical() ?><div class="form-field">	<label for="tag-description"><?php _ex('Description', 'Taxonomy Description'); ?></label>	<textarea name="description" id="tag-description" rows="5" cols="40"></textarea>	<p><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></p></div><?phpif ( ! is_taxonomy_hierarchical($taxonomy) )	do_action('add_tag_form_fields', $taxonomy);do_action($taxonomy . '_add_form_fields', $taxonomy);?><p class="submit"><input type="submit" class="button" name="submit" id="submit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" /></p><?phpif ( 'category' == $taxonomy )	do_action('edit_category_form',	(object)array('parent' => 0) );  // Back compat hook. Deprecated in preference to $taxonomy_add_formelse	do_action('add_tag_form', $taxonomy); // Back compat hook. Applies to all Taxonomies -not- categoriesdo_action($taxonomy . '_add_form', $taxonomy);?></form></div><?php } ?></div></div><!-- /col-left --></div><!-- /col-container --></div><!-- /wrap --><?php inline_edit_term_row('edit-tags', $taxonomy); ?><?phpbreak;}include('./admin-footer.php');?>
<?php/** * WordPress Plugin Install Administration API * * @package WordPress * @subpackage Administration *//** * Retrieve plugin installer pages from WordPress Plugins API. * * It is possible for a plugin to override the Plugin API result with three * filters. Assume this is for plugins, which can extend on the Plugin Info to * offer more choices. This is very powerful and must be used with care, when * overridding the filters. * * The first filter, 'plugins_api_args', is for the args and gives the action as * the second parameter. The hook for 'plugins_api_args' must ensure that an * object is returned. * * The second filter, 'plugins_api', is the result that would be returned. * * @since 2.7.0 * * @param string $action * @param array|object $args Optional. Arguments to serialize for the Plugin Info API. * @return object plugins_api response object on success, WP_Error on failure. */function plugins_api($action, $args = null) {	if ( is_array($args) )		$args = (object)$args;	if ( !isset($args->per_page) )		$args->per_page = 24;	// Allows a plugin to override the WordPress.org API entirely.	// Use the filter 'plugins_api_result' to mearly add results.	// Please ensure that a object is returned from the following filters.	$args = apply_filters('plugins_api_args', $args, $action);	$res = apply_filters('plugins_api', false, $action, $args);	if ( false === $res ) {		$request = wp_remote_post('http://api.wordpress.org/plugins/info/1.0/', array( 'timeout' => 15, 'body' => array('action' => $action, 'request' => serialize($args))) );		if ( is_wp_error($request) ) {			$res = new WP_Error('plugins_api_failed', __('An Unexpected HTTP Error occurred during the API request.'), $request->get_error_message() );		} else {			$res = unserialize($request['body']);			if ( false === $res )				$res = new WP_Error('plugins_api_failed', __('An unknown error occurred.'), $request['body']);		}	} elseif ( !is_wp_error($res) ) {		$res->external = true;	}	return apply_filters('plugins_api_result', $res, $action, $args);}/** * Retrieve popular WordPress plugin tags. * * @since 2.7.0 * * @param array $args * @return array */function install_popular_tags( $args = array() ) {	if ( ! ($cache = wp_cache_get('popular_tags', 'api')) && ! ($cache = get_option('wporg_popular_tags')) )		add_option('wporg_popular_tags', array(), '', 'no'); ///No autoload.	if ( $cache && $cache->timeout + 3 * 60 * 60 > time() )		return $cache->cached;	$tags = plugins_api('hot_tags', $args);	if ( is_wp_error($tags) )		return $tags;	$cache = (object) array('timeout' => time(), 'cached' => $tags);	update_option('wporg_popular_tags', $cache);	wp_cache_set('popular_tags', $cache, 'api');	return $tags;}add_action('install_plugins_search', 'install_search', 10, 1);/** * Display search results and display as tag cloud. * * @since 2.7.0 * * @param string $page */function install_search($page) {	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$args = array();	switch( $type ){		case 'tag':			$args['tag'] = sanitize_title_with_dashes($term);			break;		case 'term':			$args['search'] = $term;			break;		case 'author':			$args['author'] = $term;			break;	}	$args['page'] = $page;	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api);	add_action('install_plugins_table_header', 'install_search_form');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);	return;}add_action('install_plugins_dashboard', 'install_dashboard');function install_dashboard() {	?>	<p><?php _e('Plugins extend and expand the functionality of WordPress. You may automatically install plugins from the <a href="http://wordpress.org/extend/plugins/">WordPress Plugin Directory</a> or upload a plugin in .zip format via this page.') ?></p>	<h4><?php _e('Search') ?></h4>	<p class="install-help"><?php _e('Search for plugins by keyword, author, or tag.') ?></p>	<?php install_search_form(); ?>	<h4><?php _e('Popular tags') ?></h4>	<p class="install-help"><?php _e('You may also browse based on the most popular tags in the Plugin Directory:') ?></p>	<?php	$api_tags = install_popular_tags();	echo '<p class="popular-tags">';	if ( is_wp_error($api_tags) ) {		echo $api_tags->get_error_message();	} else {		//Set up the tags in a way which can be interprated by wp_generate_tag_cloud()		$tags = array();		foreach ( (array)$api_tags as $tag )			$tags[ $tag['name'] ] = (object) array(									'link' => esc_url( admin_url('plugin-install.php?tab=search&type=tag&s=' . urlencode($tag['name'])) ),									'name' => $tag['name'],									'id' => sanitize_title_with_dashes($tag['name']),									'count' => $tag['count'] );		echo wp_generate_tag_cloud($tags, array( 'single_text' => __('%d plugin'), 'multiple_text' => __('%d plugins') ) );	}	echo '</p><br class="clear" />';}/** * Display search form for searching plugins. * * @since 2.7.0 */function install_search_form(){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	?><form id="search-plugins" method="post" action="<?php echo admin_url('plugin-install.php?tab=search'); ?>">		<select name="type" id="typeselector">			<option value="term"<?php selected('term', $type) ?>><?php _e('Term'); ?></option>			<option value="author"<?php selected('author', $type) ?>><?php _e('Author'); ?></option>			<option value="tag"<?php selected('tag', $type) ?>><?php _ex('Tag', 'Plugin Installer'); ?></option>		</select>		<input type="text" name="s" value="<?php echo esc_attr($term) ?>" />		<label class="screen-reader-text" for="plugin-search-input"><?php _e('Search Plugins'); ?></label>		<input type="submit" id="plugin-search-input" name="search" value="<?php esc_attr_e('Search Plugins'); ?>" class="button" />	</form><?php}add_action('install_plugins_featured', 'install_featured', 10, 1);/** * Display featured plugins. * * @since 2.7.0 * * @param string $page */function install_featured($page = 1) {	$args = array('browse' => 'featured', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_popular', 'install_popular', 10, 1);/** * Display popular plugins. * * @since 2.7.0 * * @param string $page */function install_popular($page = 1) {	$args = array('browse' => 'popular', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_upload', 'install_plugins_upload', 10, 1);/** * Upload from zip * @since 2.8.0 * * @param string $page */function install_plugins_upload( $page = 1 ) {?>	<h4><?php _e('Install a plugin in .zip format') ?></h4>	<p class="install-help"><?php _e('If you have a plugin in a .zip format, you may install it by uploading it here.') ?></p>	<form method="post" enctype="multipart/form-data" action="<?php echo admin_url('update.php?action=upload-plugin') ?>">		<?php wp_nonce_field( 'plugin-upload') ?>		<label class="screen-reader-text" for="pluginzip"><?php _e('Plugin zip file'); ?></label>		<input type="file" id="pluginzip" name="pluginzip" />		<input type="submit" class="button" value="<?php esc_attr_e('Install Now') ?>" />	</form><?php}add_action('install_plugins_new', 'install_new', 10, 1);/** * Display new plugins. * * @since 2.7.0 * * @param string $page */function install_new($page = 1) {	$args = array('browse' => 'new', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}add_action('install_plugins_updated', 'install_updated', 10, 1);/** * Display recently updated plugins. * * @since 2.7.0 * * @param string $page */function install_updated($page = 1) {	$args = array('browse' => 'updated', 'page' => $page);	$api = plugins_api('query_plugins', $args);	if ( is_wp_error($api) )		wp_die($api->get_error_message() . '</p> <p class="hide-if-no-js"><a href="#" onclick="document.location.reload(); return false;">' . __('Try again') . '</a>');	display_plugins_table($api->plugins, $api->info['page'], $api->info['pages']);}/** * Display plugin content based on plugin list. * * @since 2.7.0 * * @param array $plugins List of plugins. * @param string $page * @param int $totalpages Number of pages. */function display_plugins_table($plugins, $page = 1, $totalpages = 1){	$type = isset($_REQUEST['type']) ? stripslashes( $_REQUEST['type'] ) : '';	$term = isset($_REQUEST['s']) ? stripslashes( $_REQUEST['s'] ) : '';	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array(), 'target' => array()),								'abbr' => array('title' => array()),'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(),'strong' => array(),								'ul' => array(), 'ol' => array(), 'li' => array(), 'p' => array(), 'br' => array());?>	<div class="tablenav">		<div class="alignleft actions">		<?php do_action('install_plugins_table_header'); ?>		</div>		<?php			$url = esc_url($_SERVER['REQUEST_URI']);			if ( ! empty($term) )				$url = add_query_arg('s', $term, $url);			if ( ! empty($type) )				$url = add_query_arg('type', $type, $url);			$page_links = paginate_links( array(				'base' => add_query_arg('paged', '%#%', $url),				'format' => '',				'prev_text' => __('&laquo;'),				'next_text' => __('&raquo;'),				'total' => $totalpages,				'current' => $page			));			if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>";?>		<br class="clear" />	</div>	<table class="widefat" id="install-plugins" cellspacing="0">		<thead>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</thead>		<tfoot>			<tr>				<th scope="col" class="name"><?php _e('Name'); ?></th>				<th scope="col" class="num"><?php _e('Version'); ?></th>				<th scope="col" class="num"><?php _e('Rating'); ?></th>				<th scope="col" class="desc"><?php _e('Description'); ?></th>			</tr>		</tfoot>		<tbody class="plugins">		<?php			if ( empty($plugins) )				echo '<tr><td colspan="5">', __('No plugins match your request.'), '</td></tr>';			foreach ( (array) $plugins as $plugin ){				if ( is_object($plugin) )					$plugin = (array) $plugin;				$title = wp_kses($plugin['name'], $plugins_allowedtags);				//Limit description to 400char, and remove any HTML.				$description = strip_tags($plugin['description']);				if ( strlen($description) > 400 )					$description = mb_substr($description, 0, 400) . '&#8230;';				//remove any trailing entities				$description = preg_replace('/&[^;\s]{0,6}$/', '', $description);				//strip leading/trailing & multiple consecutive lines				$description = trim($description);				$description = preg_replace("|(\r?\n)+|", "\n", $description);				//\n => <br>				$description = nl2br($description);				$version = wp_kses($plugin['version'], $plugins_allowedtags);				$name = strip_tags($title . ' ' . $version);				$author = $plugin['author'];				if ( ! empty($plugin['author']) )					$author = ' <cite>' . sprintf( __('By %s'), $author ) . '.</cite>';				$author = wp_kses($author, $plugins_allowedtags);				$action_links = array();				$action_links[] = '<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $plugin['slug'] .									'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox" title="' .									esc_attr( sprintf( __( 'More information about %s' ), $name ) ) . '">' . __('Details') . '</a>';				if ( current_user_can('install_plugins') || current_user_can('update_plugins') ) {					$status = install_plugin_install_status($plugin);					switch ( $status['status'] ) {						case 'install':							if ( $status['url'] )								$action_links[] = '<a class="install-now" href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Install %s' ), $name ) ) . '">' . __('Install Now') . '</a>';							break;						case 'update_available':							if ( $status['url'] )								$action_links[] = '<a href="' . $status['url'] . '" title="' . esc_attr( sprintf( __( 'Update to version %s' ), $status['version'] ) ) . '">' . sprintf( __('Update Now'), $status['version'] ) . '</a>';							break;						case 'latest_installed':						case 'newer_installed':							$action_links[] = '<span title="' . esc_attr__( 'This plugin is already installed and is up to date' ) . ' ">' . __('Installed') . '</span>';							break;					}				}				$action_links = apply_filters( 'plugin_install_action_links', $action_links, $plugin );			?>			<tr>				<td class="name"><strong><?php echo $title; ?></strong>					<div class="action-links"><?php if ( !empty($action_links) ) echo implode(' | ', $action_links); ?></div>				</td>				<td class="vers"><?php echo $version; ?></td>				<td class="vers">					<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $plugin['num_ratings']), number_format_i18n($plugin['num_ratings'])) ?>">						<div class="star star-rating" style="width: <?php echo esc_attr($plugin['rating']) ?>px"></div>						<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>						<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>						<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>						<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>						<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>					</div>				</td>				<td class="desc"><?php echo $description, $author; ?></td>			</tr>			<?php			}			?>		</tbody>	</table>	<div class="tablenav">		<?php if ( $page_links )				echo "\t\t<div class='tablenav-pages'>$page_links</div>"; ?>		<br class="clear" />	</div><?php}add_action('install_plugins_pre_plugin-information', 'install_plugin_information');/** * Determine the status we can perform on a plugin. * * @since 3.0.0 */function install_plugin_install_status($api, $loop = false) {	// this function is called recursivly, $loop prevents futhur loops.	if ( is_array($api) )		$api = (object) $api;	//Default to a "new" plugin	$status = 'install';	$url = false;	//Check to see if this plugin is known to be installed, and has an update awaiting it.	$update_plugins = get_site_transient('update_plugins');	if ( is_object( $update_plugins ) ) {		foreach ( (array)$update_plugins->response as $file => $plugin ) {			if ( $plugin->slug === $api->slug ) {				$status = 'update_available';				$update_file = $file;				$version = $plugin->new_version;				if ( current_user_can('update_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=upgrade-plugin&plugin=' . $update_file), 'upgrade-plugin_' . $update_file);				break;			}		}	}	if ( 'install' == $status ) {		if ( is_dir( WP_PLUGIN_DIR  . '/' . $api->slug ) ) {			$installed_plugin = get_plugins('/' . $api->slug);			if ( empty($installed_plugin) ) {				if ( current_user_can('install_plugins') )					$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);			} else {				$key = array_shift( $key = array_keys($installed_plugin) ); //Use the first plugin regardless of the name, Could have issues for multiple-plugins in one directory if they share different version numbers				if ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '=') ){					$status = 'latest_installed';				} elseif ( version_compare($api->version, $installed_plugin[ $key ]['Version'], '<') ) {					$status = 'newer_installed';					$version = $installed_plugin[ $key ]['Version'];				} else {					//If the above update check failed, Then that probably means that the update checker has out-of-date information, force a refresh					if ( ! $loop ) {						delete_site_transient('update_plugins');						wp_update_plugins();						return install_plugin_install_status($api, true);					}				}			}		} else {			// "install" & no directory with that slug			if ( current_user_can('install_plugins') )				$url = wp_nonce_url(admin_url('update.php?action=install-plugin&plugin=' . $api->slug), 'install-plugin_' . $api->slug);		}	}	if ( isset($_GET['from']) )		$url .= '&amp;from=' . urlencode(stripslashes($_GET['from']));	return compact('status', 'url', 'version');}/** * Display plugin information in dialog box form. * * @since 2.7.0 */function install_plugin_information() {	global $tab;	$api = plugins_api('plugin_information', array('slug' => stripslashes( $_REQUEST['plugin'] ) ));	if ( is_wp_error($api) )		wp_die($api);	$plugins_allowedtags = array('a' => array('href' => array(), 'title' => array(), 'target' => array()),								'abbr' => array('title' => array()), 'acronym' => array('title' => array()),								'code' => array(), 'pre' => array(), 'em' => array(), 'strong' => array(),								'div' => array(), 'p' => array(), 'ul' => array(), 'ol' => array(), 'li' => array(),								'h1' => array(), 'h2' => array(), 'h3' => array(), 'h4' => array(), 'h5' => array(), 'h6' => array(),								'img' => array('src' => array(), 'class' => array(), 'alt' => array()));	//Sanitize HTML	foreach ( (array)$api->sections as $section_name => $content )		$api->sections[$section_name] = wp_kses($content, $plugins_allowedtags);	foreach ( array('version', 'author', 'requires', 'tested', 'homepage', 'downloaded', 'slug') as $key )		$api->$key = wp_kses($api->$key, $plugins_allowedtags);	$section = isset($_REQUEST['section']) ? stripslashes( $_REQUEST['section'] ) : 'description'; //Default to the Description tab, Do not translate, API returns English.	if ( empty($section) || ! isset($api->sections[ $section ]) )		$section = array_shift( $section_titles = array_keys((array)$api->sections) );	iframe_header( __('Plugin Install') );	echo "<div id='$tab-header'>\n";	echo "<ul id='sidemenu'>\n";	foreach ( (array)$api->sections as $section_name => $content ) {		$title = $section_name;		$title = ucwords(str_replace('_', ' ', $title));		$class = ( $section_name == $section ) ? ' class="current"' : '';		$href = add_query_arg( array('tab' => $tab, 'section' => $section_name) );		$href = esc_url($href);		$san_title = esc_attr(sanitize_title_with_dashes($title));		echo "\t<li><a name='$san_title' target='' href='$href'$class>$title</a></li>\n";	}	echo "</ul>\n";	echo "</div>\n";	?>	<div class="alignright fyi">		<?php if ( ! empty($api->download_link) && ( current_user_can('install_plugins') || current_user_can('update_plugins') ) ) : ?>		<p class="action-button">		<?php		$status = install_plugin_install_status($api);		switch ( $status['status'] ) {			case 'install':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Now') . '</a>';				break;			case 'update_available':				if ( $status['url'] )					echo '<a href="' . $status['url'] . '" target="_parent">' . __('Install Update Now') .'</a>';				break;			case 'newer_installed':				echo '<a>' . sprintf(__('Newer Version (%s) Installed'), $status['version']) . '</a>';				break;			case 'latest_installed':				echo '<a>' . __('Latest Version Installed') . '</a>';				break;		}		?>		</p>		<?php endif; ?>		<h2 class="mainheader"><?php /* translators: For Your Information */ _e('FYI') ?></h2>		<ul><?php if ( ! empty($api->version) ) : ?>			<li><strong><?php _e('Version:') ?></strong> <?php echo $api->version ?></li><?php endif; if ( ! empty($api->author) ) : ?>			<li><strong><?php _e('Author:') ?></strong> <?php echo links_add_target($api->author, '_blank') ?></li><?php endif; if ( ! empty($api->last_updated) ) : ?>			<li><strong><?php _e('Last Updated:') ?></strong> <span title="<?php echo $api->last_updated ?>"><?php							printf( __('%s ago'), human_time_diff(strtotime($api->last_updated)) ) ?></span></li><?php endif; if ( ! empty($api->requires) ) : ?>			<li><strong><?php _e('Requires WordPress Version:') ?></strong> <?php printf(__('%s or higher'), $api->requires) ?></li><?php endif; if ( ! empty($api->tested) ) : ?>			<li><strong><?php _e('Compatible up to:') ?></strong> <?php echo $api->tested ?></li><?php endif; if ( ! empty($api->downloaded) ) : ?>			<li><strong><?php _e('Downloaded:') ?></strong> <?php printf(_n('%s time', '%s times', $api->downloaded), number_format_i18n($api->downloaded)) ?></li><?php endif; if ( ! empty($api->slug) && empty($api->external) ) : ?>			<li><a target="_blank" href="http://wordpress.org/extend/plugins/<?php echo $api->slug ?>/"><?php _e('WordPress.org Plugin Page &#187;') ?></a></li><?php endif; if ( ! empty($api->homepage) ) : ?>			<li><a target="_blank" href="<?php echo $api->homepage ?>"><?php _e('Plugin Homepage  &#187;') ?></a></li><?php endif; ?>		</ul>		<?php if ( ! empty($api->rating) ) : ?>		<h2><?php _e('Average Rating') ?></h2>		<div class="star-holder" title="<?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?>">			<div class="star star-rating" style="width: <?php echo esc_attr($api->rating) ?>px"></div>			<div class="star star5"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('5 stars') ?>" /></div>			<div class="star star4"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('4 stars') ?>" /></div>			<div class="star star3"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('3 stars') ?>" /></div>			<div class="star star2"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('2 stars') ?>" /></div>			<div class="star star1"><img src="<?php echo admin_url('images/star.gif'); ?>" alt="<?php _e('1 star') ?>" /></div>		</div>		<small><?php printf(_n('(based on %s rating)', '(based on %s ratings)', $api->num_ratings), number_format_i18n($api->num_ratings)); ?></small>		<?php endif; ?>	</div>	<div id="section-holder" class="wrap">	<?php		if ( !empty($api->tested) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->tested)), $api->tested, '>') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been tested</strong> with your current version of WordPress.') . '</p></div>';		else if ( !empty($api->requires) && version_compare( substr($GLOBALS['wp_version'], 0, strlen($api->requires)), $api->requires, '<') )			echo '<div class="updated"><p>' . __('<strong>Warning:</strong> This plugin has <strong>not been marked as compatible</strong> with your version of WordPress.') . '</p></div>';		foreach ( (array)$api->sections as $section_name => $content ) {			$title = $section_name;			$title[0] = strtoupper($title[0]);			$title = str_replace('_', ' ', $title);			$content = links_add_base_url($content, 'http://wordpress.org/extend/plugins/' . $api->slug . '/');			$content = links_add_target($content, '_blank');			$san_title = esc_attr(sanitize_title_with_dashes($title));			$display = ( $section_name == $section ) ? 'block' : 'none';			echo "\t<div id='section-{$san_title}' class='section' style='display: {$display};'>\n";			echo "\t\t<h2 class='long-header'>$title</h2>";			echo $content;			echo "\t</div>\n";		}	echo "</div>\n";	iframe_footer();	exit;}
<?php/** * Action handler for Multisite administration panels. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( empty( $_GET['action'] ) )	wp_redirect( admin_url( 'ms-admin.php' ) );do_action( 'wpmuadminedit' , '');if ( isset( $_GET['id' ]) )	$id = intval( $_GET['id'] );elseif ( isset( $_POST['id'] ) )	$id = intval( $_POST['id'] );switch ( $_GET['action'] ) {	case 'siteoptions':		check_admin_referer( 'siteoptions' );		if ( ! current_user_can( 'manage_network_options' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">options page</a>.', esc_url( admin_url( 'ms-options.php' ) ) ) ) );		if ( isset($_POST['WPLANG']) && ( '' === $_POST['WPLANG'] || in_array( $_POST['WPLANG'], get_available_languages() ) ) )			update_site_option( 'WPLANG', $_POST['WPLANG'] );		if ( is_email( $_POST['admin_email'] ) )			update_site_option( 'admin_email', $_POST['admin_email'] );		$illegal_names = split( ' ', $_POST['illegal_names'] );		foreach ( (array) $illegal_names as $name ) {			$name = trim( $name );			if ( $name != '' )				$names[] = trim( $name );		}		update_site_option( 'illegal_names', $names );		if ( $_POST['limited_email_domains'] != '' ) {			$limited_email_domains = str_replace( ' ', "\n", $_POST['limited_email_domains'] );			$limited_email_domains = split( "\n", stripslashes( $limited_email_domains ) );			$limited_email = array();			foreach ( (array) $limited_email_domains as $domain ) {					$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$limited_email[] = trim( $domain );			}			update_site_option( 'limited_email_domains', $limited_email );		} else {			update_site_option( 'limited_email_domains', '' );		}		if ( $_POST['banned_email_domains'] != '' ) {			$banned_email_domains = split( "\n", stripslashes( $_POST['banned_email_domains'] ) );			$banned = array();			foreach ( (array) $banned_email_domains as $domain ) {				$domain = trim( $domain );				if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) )					$banned[] = trim( $domain );			}			update_site_option( 'banned_email_domains', $banned );		} else {			update_site_option( 'banned_email_domains', '' );		}		update_site_option( 'default_user_role', $_POST['default_user_role'] );		if ( trim( $_POST['dashboard_blog_orig'] ) == '' )			$_POST['dashboard_blog_orig'] = $current_site->blog_id;		if ( trim( $_POST['dashboard_blog'] ) == '' ) {			$_POST['dashboard_blog'] = $current_site->blog_id;			$dashboard_blog_id = $current_site->blog_id;		} elseif ( ! preg_match( '/(--|\.)/', $_POST['dashboard_blog'] ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $_POST['dashboard_blog'] ) ) {			$dashboard_blog = $_POST['dashboard_blog'];			$blog_details = get_blog_details( $dashboard_blog );			if ( false === $blog_details ) {				if ( is_numeric( $dashboard_blog ) )					wp_die( __( 'A dashboard site referenced by ID must already exist' ) );				if ( is_subdomain_install() ) {					$domain = $dashboard_blog . '.' . $current_site->domain;					$path = $current_site->path;				} else {					$domain = $current_site->domain;					$path = trailingslashit( $current_site->path . $dashboard_blog );				}				$wpdb->hide_errors();				$dashboard_blog_id = wpmu_create_blog( $domain, $path, __( 'My Dashboard' ), $current_user->id , array( 'public' => 0 ), $current_site->id );				$wpdb->show_errors();			} else {				$dashboard_blog_id = $blog_details->blog_id;			}		}		if ( is_wp_error( $dashboard_blog_id ) )			wp_die( __( 'Problem creating dashboard site: ' ) . $dashboard_blog_id->get_error_message() );		if ( $_POST['dashboard_blog_orig'] != $_POST['dashboard_blog'] ) {			$users = get_users_of_blog( get_site_option( 'dashboard_blog' ) );			$move_users = array();			foreach ( (array)$users as $user ) {				$user_meta_value = unserialize( $user->meta_value );				if ( is_array( $user_meta_value ) && array_pop( array_keys( $user_meta_value ) ) == 'subscriber' )					$move_users[] = $user->user_id;			}			if ( false == empty( $move_users ) ) {				foreach ( (array)$move_users as $user_id ) {					remove_user_from_blog($user_id, get_site_option( 'dashboard_blog' ) );					add_user_to_blog( $dashboard_blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );					update_user_meta( $user_id, 'primary_blog', $dashboard_blog_id );				}			}		}		update_site_option( 'dashboard_blog', $dashboard_blog_id );		$options = array( 'registrationnotification', 'registration', 'add_new_users', 'menu_items', 'mu_media_buttons', 'upload_space_check_disabled', 'blog_upload_space', 'upload_filetypes', 'site_name', 'first_post', 'first_page', 'first_comment', 'first_comment_url', 'first_comment_author', 'welcome_email', 'welcome_user_email', 'fileupload_maxk', 'admin_notice_feed', 'global_terms_enabled' );		$checked_options = array( 'mu_media_buttons' => array(), 'menu_items' => array(), 'registrationnotification' => 'no', 'upload_space_check_disabled' => 1 );		foreach ( $checked_options as $option_name => $option_unchecked_value ) {			if ( ! isset( $_POST[$option_name] ) )				$_POST[$option_name] = $option_unchecked_value;		}		foreach ( $options as $option_name ) {			if ( ! isset($_POST[$option_name]) )				continue;			$value = stripslashes_deep( $_POST[$option_name] );			update_site_option( $option_name, $value );		}		// Update more options here		do_action( 'update_wpmu_options' );		wp_redirect( add_query_arg( 'updated', 'true', admin_url( 'ms-options.php' ) ) );		exit();	break;	case 'addblog':		check_admin_referer( 'add-blog', '_wpnonce_add-blog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['blog'] ) == false )			wp_die(  __( 'Can&#8217;t create an empty site.' ) );		$blog = $_POST['blog'];		$domain = '';		if ( ! preg_match( '/(--)/', $blog['domain'] ) && preg_match( '|^([a-zA-Z0-9-])+$|', $blog['domain'] ) )			$domain = strtolower( $blog['domain'] );		// If not a subdomain install, make sure the domain isn't a reserved word		if ( ! is_subdomain_install() ) {			$subdirectory_reserved_names = apply_filters( 'subdirectory_reserved_names', array( 'page', 'comments', 'blog', 'files', 'feed' ) );			if ( in_array( $domain, $subdirectory_reserved_names ) )				wp_die( sprintf( __('The following words are reserved for use by WordPress functions and cannot be used as blog names: <code>%s</code>' ), implode( '</code>, <code>', $subdirectory_reserved_names ) ) );		}		$email = sanitize_email( $blog['email'] );		$title = $blog['title'];		if ( empty( $domain ) )			wp_die( __( 'Missing or invalid site address.' ) );		if ( empty( $email ) )			wp_die( __( 'Missing email address.' ) );		if ( !is_email( $email ) )			wp_die( __( 'Invalid email address.' ) );		if ( is_subdomain_install() ) {			$newdomain = $domain . '.' . preg_replace( '|^www\.|', '', $current_site->domain );			$path = $base;		} else {			$newdomain = $current_site->domain;			$path = $base . $domain . '/';		}		$password = 'N/A';		$user_id = email_exists($email);		if ( !$user_id ) { // Create a new user with a random password			$password = wp_generate_password();			$user_id = wpmu_create_user( $domain, $password, $email );			if ( false == $user_id )				wp_die( __( 'There was an error creating the user.' ) );			else				wp_new_user_notification( $user_id, $password );		}		$wpdb->hide_errors();		$id = wpmu_create_blog( $newdomain, $path, $title, $user_id , array( 'public' => 1 ), $current_site->id );		$wpdb->show_errors();		if ( !is_wp_error( $id ) ) {			$dashboard_blog = get_dashboard_blog();			if ( !is_super_admin( $user_id ) && get_user_option( 'primary_blog', $user_id ) == $dashboard_blog->blog_id )				update_user_option( $user_id, 'primary_blog', $id, true );			$content_mail = sprintf( __( "New site created by %1s\n\nAddress: http://%2s\nName: %3s"), $current_user->user_login , $newdomain . $path, stripslashes( $title ) );			wp_mail( get_site_option('admin_email'),  sprintf( __( '[%s] New Site Created' ), $current_site->site_name ), $content_mail, 'From: "Site Admin" <' . get_site_option( 'admin_email' ) . '>' );			wpmu_welcome_notification( $id, $user_id, $password, $title, array( 'public' => 1 ) );			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add-blog' ), wp_get_referer() ) );			exit();		} else {			wp_die( $id->get_error_message() );		}	break;	case 'updateblog':		check_admin_referer( 'editblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( empty( $_POST ) )			wp_die( sprintf( __( 'You probably need to go back to the <a href="%s">sites page</a>', esc_url( admin_url( 'ms-sites.php' ) ) ) ) );		switch_to_blog( $id );		// themes		$allowedthemes = array();		if ( isset($_POST['theme']) && is_array( $_POST['theme'] ) ) {			foreach ( $_POST['theme'] as $theme => $val ) {				if ( 'on' == $val )					$allowedthemes[$theme] = true;			}		}		update_option( 'allowedthemes',  $allowedthemes );		// options		if ( is_array( $_POST['option'] ) ) {			$c = 1;			$count = count( $_POST['option'] );			foreach ( (array) $_POST['option'] as $key => $val ) {				if ( $key === 0 || is_array( $val ) )					continue; // Avoids "0 is a protected WP option and may not be modified" error when edit blog options				if ( $c == $count )					update_option( $key, stripslashes( $val ) );				else					update_option( $key, stripslashes( $val ), false ); // no need to refresh blog details yet				$c++;			}		}		// home and siteurl		if ( isset( $_POST['update_home_url'] ) && $_POST['update_home_url'] == 'update' ) {			$blog_address = get_blogaddress_by_domain( $_POST['blog']['domain'], $_POST['blog']['path'] );			if ( get_option( 'siteurl' ) !=  $blog_address )				update_option( 'siteurl', $blog_address );			if ( get_option( 'home' ) != $blog_address )				update_option( 'home', $blog_address );		}		// rewrite rules can't be flushed during switch to blog		delete_option( 'rewrite_rules' );		// update blogs table		$blog_data = stripslashes_deep( $_POST['blog'] );		update_blog_details( $id, $blog_data );		// get blog prefix		$blog_prefix = $wpdb->get_blog_prefix( $id );		// user roles		if ( isset( $_POST['role'] ) && is_array( $_POST['role'] ) == true ) {			$newroles = $_POST['role'];			reset( $newroles );			foreach ( (array) $newroles as $userid => $role ) {				$user = new WP_User( $userid );				if ( ! $user )					continue;				$user->for_blog( $id );				$user->set_role( $role );			}		}		// remove user		if ( isset( $_POST['blogusers'] ) && is_array( $_POST['blogusers'] ) ) {			reset( $_POST['blogusers'] );			foreach ( (array) $_POST['blogusers'] as $key => $val )				remove_user_from_blog( $key, $id );		}		// change password		if ( isset( $_POST['user_password'] ) && is_array( $_POST['user_password'] ) ) {			reset( $_POST['user_password'] );			$newroles = $_POST['role'];			foreach ( (array) $_POST['user_password'] as $userid => $pass ) {				unset( $_POST['role'] );				$_POST['role'] = $newroles[ $userid ];				if ( $pass != '' ) {					$cap = $wpdb->get_var( "SELECT meta_value FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );					$userdata = get_userdata($userid);					$_POST['pass1'] = $_POST['pass2'] = $pass;					$_POST['email'] = $userdata->user_email;					$_POST['rich_editing'] = $userdata->rich_editing;					edit_user( $userid );					if ( $cap == null )						$wpdb->query( "DELETE FROM {$wpdb->usermeta} WHERE user_id = '{$userid}' AND meta_key = '{$blog_prefix}capabilities' AND meta_value = 'a:0:{}'" );				}			}			unset( $_POST['role'] );			$_POST['role'] = $newroles;		}		// add user		if ( !empty( $_POST['newuser'] ) ) {			$newuser = $_POST['newuser'];			$userid = $wpdb->get_var( $wpdb->prepare( "SELECT ID FROM " . $wpdb->users . " WHERE user_login = %s", $newuser ) );			if ( $userid ) {				$user = $wpdb->get_var( "SELECT user_id FROM " . $wpdb->usermeta . " WHERE user_id='$userid' AND meta_key='{$blog_prefix}capabilities'" );				if ( $user == false )					add_user_to_blog( $id, $userid, $_POST['new_role'] );			}		}		do_action( 'wpmu_update_blog_options' );		restore_current_blog();		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'editblog', 'id' => $id ), wp_get_referer() ) );	break;	case 'deleteblog':		check_admin_referer('deleteblog');		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( $id != '0' && $id != $current_site->blog_id )			wpmu_delete_blog( $id, true );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'delete' ), wp_get_referer() ) );		exit();	break;	case 'allblogs':		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' );			if ( ! current_user_can( 'manage_sites' ) )				wp_die( __( 'You do not have permission to access this page.' ) );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allblogs'] as $key => $val ) {				if ( $val != '0' && $val != $current_site->blog_id ) {					switch ( $doaction ) {						case 'delete':							$blogfunction = 'all_delete';							wpmu_delete_blog( $val, true );						break;						case 'spam':							$blogfunction = 'all_spam';							update_blog_status( $val, 'spam', '1', 0 );							set_time_limit( 60 );						break;						case 'notspam':							$blogfunction = 'all_notspam';							update_blog_status( $val, 'spam', '0', 0 );							set_time_limit( 60 );						break;					}				} else {					wp_die( __( 'You are not allowed to change the current site.' ) );				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $blogfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-sites.php' ) );		}	break;	case 'archiveblog':		check_admin_referer( 'archiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'archived', '1' );		do_action( 'archive_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'archive' ), wp_get_referer() ) );		exit();	break;	case 'unarchiveblog':		check_admin_referer( 'unarchiveblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'unarchive_blog', $id );		update_blog_status( $id, 'archived', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unarchive' ), wp_get_referer() ) );		exit();	break;	case 'activateblog':		check_admin_referer( 'activateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'deleted', '0' );		do_action( 'activate_blog', $id );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'activate' ), wp_get_referer() ) );		exit();	break;	case 'deactivateblog':		check_admin_referer( 'deactivateblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		do_action( 'deactivate_blog', $id );		update_blog_status( $id, 'deleted', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'deactivate' ), wp_get_referer() ) );		exit();	break;	case 'unspamblog':		check_admin_referer( 'unspamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '0' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'unspam' ), wp_get_referer() ) );		exit();	break;	case 'spamblog':		check_admin_referer( 'spamblog' );		if ( ! current_user_can( 'manage_sites' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		update_blog_status( $id, 'spam', '1' );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'spam' ), wp_get_referer() ) );		exit();	break;	// Themes    case 'updatethemes':	if ( ! current_user_can( 'manage_network_themes' ) )		wp_die( __( 'You do not have permission to access this page.' ) );    	if ( is_array( $_POST['theme'] ) ) {			$themes = get_themes();			reset( $themes );			$allowed_themes = array();			foreach ( (array) $themes as $key => $theme ) {				if ( $_POST['theme'][ esc_html( $theme['Stylesheet'] ) ] == 'enabled' )					$allowed_themes[ esc_html( $theme['Stylesheet'] ) ] = true;			}			update_site_option( 'allowedthemes', $allowed_themes );		}		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'themes' ),  wp_get_referer() ) );		exit();	break;	// Common	case 'confirm':		if ( !headers_sent() ) {			nocache_headers();			header( 'Content-Type: text/html; charset=utf-8' );		}		if ( $current_site->blog_id == $id )			wp_die( __( 'You are not allowed to change the current site.' ) );		?>		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">		<html xmlns="http://www.w3.org/1999/xhtml" <?php if ( function_exists( 'language_attributes' ) ) language_attributes(); ?>>			<head>				<title><?php _e( 'WordPress &rsaquo; Confirm your action' ); ?></title>				<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />				<?php				wp_admin_css( 'install', true );				wp_admin_css( 'ie', true );				?>			</head>			<body>				<h1 id="logo"><img alt="WordPress" src="<?php echo esc_attr( admin_url( 'images/wordpress-logo.png' ) ); ?>" /></h1>				<form action="ms-edit.php?action=<?php echo esc_attr( $_GET['action2'] ) ?>" method="post">					<input type="hidden" name="action" value="<?php echo esc_attr( $_GET['action2'] ) ?>" />					<input type="hidden" name="id" value="<?php echo esc_attr( $id ); ?>" />					<input type="hidden" name="_wp_http_referer" value="<?php echo esc_attr( wp_get_referer() ); ?>" />					<?php wp_nonce_field( $_GET['action2'], '_wpnonce', false ); ?>					<p><?php echo esc_html( stripslashes( $_GET['msg'] ) ); ?></p>					<p class="submit"><input class="button" type="submit" value="<?php _e( 'Confirm' ); ?>" /></p>				</form>			</body>		</html>		<?php	break;	// Users	case 'deleteuser':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		check_admin_referer( 'deleteuser' );		if ( $id != '0' && $id != '1' ) {			$_POST['allusers'] = array( $id ); // confirm_delete_users() can only handle with arrays			$title = __( 'Users' );			$parent_file = 'ms-admin.php';			require_once( 'admin-header.php' );			echo '<div class="wrap">';			confirm_delete_users( $_POST['allusers'] );			echo '</div>';            require_once( 'admin-footer.php' );            exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'allusers':		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( isset( $_POST['doaction']) || isset($_POST['doaction2'] ) ) {			check_admin_referer( 'bulk-ms-users', '_wpnonce_bulk-ms-users' );			if ( $_GET['action'] != -1 || $_POST['action2'] != -1 )				$doaction = $_POST['action'] != -1 ? $_POST['action'] : $_POST['action2'];			foreach ( (array) $_POST['allusers'] as $key => $val ) {				if ( !empty( $val ) ) {					switch ( $doaction ) {						case 'delete':							$title = __( 'Users' );							$parent_file = 'ms-admin.php';							require_once( 'admin-header.php' );							echo '<div class="wrap">';							confirm_delete_users( $_POST['allusers'] );							echo '</div>';				            require_once( 'admin-footer.php' );				            exit();       					break;						case 'spam':							$user = new WP_User( $val );							if ( in_array( $user->user_login, get_super_admins() ) )								wp_die( sprintf( __( 'Warning! User cannot be modified. The user %s is a network administrator.' ), esc_html( $user->user_login ) ) );							$userfunction = 'all_spam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details ) {								if ( $details->userblog_id != $current_site->blog_id ) // main blog not a spam !									update_blog_status( $details->userblog_id, 'spam', '1' );							}							update_user_status( $val, 'spam', '1', 1 );						break;						case 'notspam':							$userfunction = 'all_notspam';							$blogs = get_blogs_of_user( $val, true );							foreach ( (array) $blogs as $key => $details )								update_blog_status( $details->userblog_id, 'spam', '0' );							update_user_status( $val, 'spam', '0', 1 );						break;					}				}			}			wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $userfunction ), wp_get_referer() ) );			exit();		} else {			wp_redirect( admin_url( 'ms-users.php' ) );		}	break;	case 'dodelete':		check_admin_referer( 'ms-users-delete' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( ! empty( $_POST['blog'] ) && is_array( $_POST['blog'] ) ) {			foreach ( $_POST['blog'] as $id => $users ) {				foreach ( $users as $blogid => $user_id ) {					if ( ! empty( $_POST['delete'] ) && 'reassign' == $_POST['delete'][$blogid][$id] )						remove_user_from_blog( $id, $blogid, $user_id );					else						remove_user_from_blog( $id, $blogid );				}			}		}		$i = 0;		if ( is_array( $_POST['user'] ) && ! empty( $_POST['user'] ) )			foreach( $_POST['user'] as $id ) {				wpmu_delete_user( $id );				$i++;			}		if ( $i == 1 )			$deletefunction = 'delete';		else			$deletefunction = 'all_delete';		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => $deletefunction ), admin_url( 'ms-users.php' ) ) );	break;	case 'adduser':		check_admin_referer( 'add-user', '_wpnonce_add-user' );		if ( ! current_user_can( 'manage_network_users' ) )			wp_die( __( 'You do not have permission to access this page.' ) );		if ( is_array( $_POST['user'] ) == false )			wp_die( __( 'Cannot create an empty user.' ) );		$user = $_POST['user'];		if ( empty($user['username']) && empty($user['email']) )			wp_die( __( 'Missing username and email.' ) );		elseif ( empty($user['username']) )			wp_die( __( 'Missing username.' ) );		elseif ( empty($user['email']) )			wp_die( __( 'Missing email.' ) );		$password = wp_generate_password();		$user_id = wpmu_create_user( esc_html( strtolower( $user['username'] ) ), $password, esc_html( $user['email'] ) );		if ( false == $user_id ) 			wp_die( __( 'Duplicated username or email address.' ) );		else			wp_new_user_notification( $user_id, $password );		if ( get_site_option( 'dashboard_blog' ) == false )			add_user_to_blog( $current_site->blog_id, $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		else			add_user_to_blog( get_site_option( 'dashboard_blog' ), $user_id, get_site_option( 'default_user_role', 'subscriber' ) );		wp_redirect( add_query_arg( array( 'updated' => 'true', 'action' => 'add' ), wp_get_referer() ) );		exit();	break;	default:		wp_redirect( admin_url( 'ms-admin.php' ) );	break;}?>
<?php/** * Media Library administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script( 'wp-ajax-response' );wp_enqueue_script( 'jquery-ui-draggable' );if ( !current_user_can('upload_files') )	wp_die(__('You do not have permission to upload files.'));if ( isset($_GET['find_detached']) ) {	check_admin_referer('bulk-media');	if ( !current_user_can('edit_posts') )		wp_die( __('You are not allowed to scan for lost attachments.') );	$lost = $wpdb->get_col("SELECT ID FROM $wpdb->posts WHERE post_type = 'attachment' AND post_parent > '0' and post_parent NOT IN ( SELECT ID FROM $wpdb->posts WHERE post_type NOT IN ('attachment', '" . join("', '", get_post_types( array( 'public' => false ) ) ) . "') )");	$_GET['detached'] = 1;} elseif ( isset($_GET['found_post_id']) && isset($_GET['media']) ) {	check_admin_referer('bulk-media');	if ( ! ( $parent_id = (int) $_GET['found_post_id'] ) )		return;	$parent = &get_post($parent_id);	if ( !current_user_can('edit_post', $parent_id) )		wp_die( __('You are not allowed to edit this post.') );	$attach = array();	foreach( (array) $_GET['media'] as $att_id ) {		$att_id = (int) $att_id;		if ( !current_user_can('edit_post', $att_id) )			continue;		$attach[] = $att_id;		clean_attachment_cache($att_id);	}	if ( ! empty($attach) ) {		$attach = implode(',', $attach);		$attached = $wpdb->query( $wpdb->prepare("UPDATE $wpdb->posts SET post_parent = %d WHERE post_type = 'attachment' AND ID IN ($attach)", $parent_id) );	}	if ( isset($attached) ) {		$location = 'upload.php';		if ( $referer = wp_get_referer() ) {			if ( false !== strpos($referer, 'upload.php') )				$location = $referer;		}		$location = add_query_arg( array( 'attached' => $attached ) , $location );		wp_redirect($location);		exit;	}} elseif ( isset($_GET['doaction']) || isset($_GET['doaction2']) || isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {	check_admin_referer('bulk-media');	if ( isset($_GET['delete_all']) || isset($_GET['delete_all2']) ) {		$post_ids = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_type='attachment' AND post_status = 'trash'" );		$doaction = 'delete';	} elseif ( ( $_GET['action'] != -1 || $_GET['action2'] != -1 ) && ( isset($_GET['media']) || isset($_GET['ids']) ) ) {		$post_ids = isset($_GET['media']) ? $_GET['media'] : explode(',', $_GET['ids']);		$doaction = ($_GET['action'] != -1) ? $_GET['action'] : $_GET['action2'];	} else {		wp_redirect($_SERVER['HTTP_REFERER']);	}	$location = 'upload.php';	if ( $referer = wp_get_referer() ) {		if ( false !== strpos($referer, 'upload.php') )			$location = remove_query_arg( array('trashed', 'untrashed', 'deleted', 'message', 'ids', 'posted'), $referer );	}	switch ( $doaction ) {		case 'trash':			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can('delete_post', $post_id) )					wp_die( __('You are not allowed to move this post to the trash.') );				if ( !wp_trash_post($post_id) )					wp_die( __('Error in moving to trash...') );			}			$location = add_query_arg( array( 'trashed' => count($post_ids), 'ids' => join(',', $post_ids) ), $location );			break;		case 'untrash':			foreach( (array) $post_ids as $post_id ) {				if ( !current_user_can('delete_post', $post_id) )					wp_die( __('You are not allowed to move this post out of the trash.') );				if ( !wp_untrash_post($post_id) )					wp_die( __('Error in restoring from trash...') );			}			$location = add_query_arg('untrashed', count($post_ids), $location);			break;		case 'delete':			foreach( (array) $post_ids as $post_id_del ) {				if ( !current_user_can('delete_post', $post_id_del) )					wp_die( __('You are not allowed to delete this post.') );				if ( !wp_delete_attachment($post_id_del) )					wp_die( __('Error in deleting...') );			}			$location = add_query_arg('deleted', count($post_ids), $location);			break;	}	wp_redirect($location);	exit;} elseif ( ! empty($_GET['_wp_http_referer']) ) {	 wp_redirect( remove_query_arg( array('_wp_http_referer', '_wpnonce'), stripslashes($_SERVER['REQUEST_URI']) ) );	 exit;}$title = __('Media Library');$parent_file = 'upload.php';if ( ! isset( $_GET['paged'] ) || $_GET['paged'] < 1 )	$_GET['paged'] = 1;if ( isset($_GET['detached']) ) {	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty($media_per_page) || $media_per_page < 1 )		$media_per_page = 20;	$media_per_page = apply_filters( 'upload_per_page', $media_per_page );	if ( !empty($lost) ) {		$start = ( (int) $_GET['paged'] - 1 ) * $media_per_page;		$page_links_total = ceil(count($lost) / $media_per_page);		$lost = implode(',', $lost);		$orphans = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->posts WHERE post_type = 'attachment' AND ID IN (%s) LIMIT %d, %d", $lost, $start, $media_per_page ) );	} else {		$start = ( (int) $_GET['paged'] - 1 ) * $media_per_page;		$orphans = $wpdb->get_results( $wpdb->prepare( "SELECT SQL_CALC_FOUND_ROWS * FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent < 1 LIMIT %d, %d", $start, $media_per_page ) );		$total_orphans = $wpdb->get_var( "SELECT FOUND_ROWS()" );		$page_links_total = ceil( $total_orphans / $media_per_page );		$wp_query->found_posts = $total_orphans;		$wp_query->query_vars['posts_per_page'] = $media_per_page;	}	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($_GET['post_mime_type']) && !array_intersect( (array) $_GET['post_mime_type'], array_keys($post_mime_types) ) )		unset($_GET['post_mime_type']);} else {	list($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();}$is_trash = ( isset($_GET['status']) && $_GET['status'] == 'trash' );wp_enqueue_script('media');add_contextual_help( $current_screen,	'<p>' . __('All the files you&#8217;ve uploaded are listed in the Media Library, with the most recent uploads listed first. You can use the <em>Screen Options</em> tab to customize the display of this screen.') . '</p>' .	'<p>' . __('You can narrow the list by file type/status using the text link filters at the top of the screen. You also can refine the list by date using the dropdown menu above the media table.') . '</p>' .	'<p>' . __('Hovering over a row reveals action links: <em>Edit</em>, <em>Delete Permanently</em>, and <em>View</em>. Clicking <em>Edit</em> or on the media file&#8217;s name displays a simple screen to edit that individual file&#8217;s metadata. Clicking <em>Delete Permanently</em> will delete the file from the media library (as well as from any posts to which it is currently attached). <em>View</em> will take you to the display page for that file.') . '</p>' .	'<p>' . __('If a media file has not been attached to any post, you will see that in the <em>Attached To</em> column, and can click on <em>Attach File</em> to launch a small popup that will allow you to search for a post and attach the file.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Media_Library_SubPanel" target="_blank">Media Library Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?> <a href="media-new.php" class="button add-new-h2"><?php echo esc_html_x('Add New', 'file'); ?></a> <?phpif ( isset($_GET['s']) && $_GET['s'] )	printf( '<span class="subtitle">' . __('Search results for &#8220;%s&#8221;') . '</span>', get_search_query() ); ?></h2><?php$message = '';if ( isset($_GET['posted']) && (int) $_GET['posted'] ) {	$message = __('Media attachment updated.');	$_SERVER['REQUEST_URI'] = remove_query_arg(array('posted'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['attached']) && (int) $_GET['attached'] ) {	$attached = (int) $_GET['attached'];	$message = sprintf( _n('Reattached %d attachment.', 'Reattached %d attachments.', $attached), $attached );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('attached'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['deleted']) && (int) $_GET['deleted'] ) {	$message = sprintf( _n( 'Media attachment permanently deleted.', '%d media attachments permanently deleted.', $_GET['deleted'] ), number_format_i18n( $_GET['deleted'] ) );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('deleted'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['trashed']) && (int) $_GET['trashed'] ) {	$message = sprintf( _n( 'Media attachment moved to the trash.', '%d media attachments moved to the trash.', $_GET['trashed'] ), number_format_i18n( $_GET['trashed'] ) );	$message .= ' <a href="' . esc_url( wp_nonce_url( 'upload.php?doaction=undo&action=untrash&ids='.(isset($_GET['ids']) ? $_GET['ids'] : ''), "bulk-media" ) ) . '">' . __('Undo') . '</a>';	$_SERVER['REQUEST_URI'] = remove_query_arg(array('trashed'), $_SERVER['REQUEST_URI']);}if ( isset($_GET['untrashed']) && (int) $_GET['untrashed'] ) {	$message = sprintf( _n( 'Media attachment restored from the trash.', '%d media attachments restored from the trash.', $_GET['untrashed'] ), number_format_i18n( $_GET['untrashed'] ) );	$_SERVER['REQUEST_URI'] = remove_query_arg(array('untrashed'), $_SERVER['REQUEST_URI']);}$messages[1] = __('Media attachment updated.');$messages[2] = __('Media permanently deleted.');$messages[3] = __('Error saving media attachment.');$messages[4] = __('Media moved to the trash.') . ' <a href="' . esc_url( wp_nonce_url( 'upload.php?doaction=undo&action=untrash&ids='.(isset($_GET['ids']) ? $_GET['ids'] : ''), "bulk-media" ) ) . '">' . __('Undo') . '</a>';$messages[5] = __('Media restored from the trash.');if ( isset($_GET['message']) && (int) $_GET['message'] ) {	$message = $messages[$_GET['message']];	$_SERVER['REQUEST_URI'] = remove_query_arg(array('message'), $_SERVER['REQUEST_URI']);}if ( !empty($message) ) { ?><div id="message" class="updated"><p><?php echo $message; ?></p></div><?php } ?><ul class="subsubsub"><?php$type_links = array();$_num_posts = (array) wp_count_attachments();$_total_posts = array_sum($_num_posts) - $_num_posts['trash'];if ( !isset( $total_orphans ) )		$total_orphans = $wpdb->get_var( "SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent < 1" );$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));foreach ( $matches as $type => $reals )	foreach ( $reals as $real )		$num_posts[$type] = ( isset( $num_posts[$type] ) ) ? $num_posts[$type] + $_num_posts[$real] : $_num_posts[$real];$class = ( empty($_GET['post_mime_type']) && !isset($_GET['detached']) && !isset($_GET['status']) ) ? ' class="current"' : '';$type_links[] = "<li><a href='upload.php'$class>" . sprintf( _nx( 'All <span class="count">(%s)</span>', 'All <span class="count">(%s)</span>', $_total_posts, 'uploaded files' ), number_format_i18n( $_total_posts ) ) . '</a>';foreach ( $post_mime_types as $mime_type => $label ) {	$class = '';	if ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )		continue;	if ( !empty($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )		$class = ' class="current"';	if ( !empty( $num_posts[$mime_type] ) )		$type_links[] = "<li><a href='upload.php?post_mime_type=$mime_type'$class>" . sprintf( _n( $label[2][0], $label[2][1], $num_posts[$mime_type] ), number_format_i18n( $num_posts[$mime_type] )) . '</a>';}$type_links[] = '<li><a href="upload.php?detached=1"' . ( isset($_GET['detached']) ? ' class="current"' : '' ) . '>' . sprintf( _nx( 'Unattached <span class="count">(%s)</span>', 'Unattached <span class="count">(%s)</span>', $total_orphans, 'detached files' ), number_format_i18n( $total_orphans ) ) . '</a>';if ( !empty($_num_posts['trash']) )	$type_links[] = '<li><a href="upload.php?status=trash"' . ( (isset($_GET['status']) && $_GET['status'] == 'trash' ) ? ' class="current"' : '') . '>' . sprintf( _nx( 'Trash <span class="count">(%s)</span>', 'Trash <span class="count">(%s)</span>', $_num_posts['trash'], 'uploaded files' ), number_format_i18n( $_num_posts['trash'] ) ) . '</a>';echo implode( " |</li>\n", $type_links) . '</li>';unset($type_links);?></ul><form class="search-form" action="" method="get"><p class="search-box">	<label class="screen-reader-text" for="media-search-input"><?php _e( 'Search Media' ); ?>:</label>	<input type="text" id="media-search-input" name="s" value="<?php the_search_query(); ?>" />	<input type="submit" value="<?php esc_attr_e( 'Search Media' ); ?>" class="button" /></p></form><form id="posts-filter" action="" method="get"><?php wp_nonce_field('bulk-media'); ?><?php if ( have_posts() || isset( $orphans ) ) { ?><div class="tablenav"><?phpif ( ! isset($page_links_total) )	$page_links_total =  $wp_query->max_num_pages;$page_links = paginate_links( array(	'base' => add_query_arg( 'paged', '%#%' ),	'format' => '',	'prev_text' => __('&laquo;'),	'next_text' => __('&raquo;'),	'total' => $page_links_total,	'current' => $_GET['paged']));if ( $page_links ) : ?><div class="tablenav-pages"><?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',	number_format_i18n( ( $_GET['paged'] - 1 ) * $wp_query->query_vars['posts_per_page'] + 1 ),	number_format_i18n( min( $_GET['paged'] * $wp_query->query_vars['posts_per_page'], $wp_query->found_posts ) ),	number_format_i18n( $wp_query->found_posts ),	$page_links); echo $page_links_text; ?></div><?php endif; ?><div class="alignleft actions"><?php if ( ! isset( $orphans ) || ! empty( $orphans ) ) { ?><select name="action" class="select-action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ( $is_trash ) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } if ( isset($orphans) ) { ?><option value="attach"><?php _e('Attach to a post'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction" id="doaction" class="button-secondary action" /><?phpif ( !is_singular() && !isset($_GET['detached']) && !$is_trash ) {	$arc_query = "SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC";	$arc_result = $wpdb->get_results( $arc_query );	$month_count = count($arc_result);	if ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) : ?><select name='m'><option value='0'><?php _e('Show all dates'); ?></option><?phpforeach ($arc_result as $arc_row) {	if ( $arc_row->yyear == 0 )		continue;	$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );	if ( isset($_GET['m']) && ( $arc_row->yyear . $arc_row->mmonth == $_GET['m'] ) )		$default = ' selected="selected"';	else		$default = '';	echo "<option$default value='" . esc_attr("$arc_row->yyear$arc_row->mmonth") . "'>";	echo $wp_locale->get_month($arc_row->mmonth) . " $arc_row->yyear";	echo "</option>\n";}?></select><?php endif; // month_count ?><?php do_action('restrict_manage_posts'); ?><input type="submit" id="post-query-submit" value="<?php esc_attr_e('Filter'); ?>" class="button-secondary" /><?php } // ! is_singular ?><?php} // ! empty( $orphans )if ( isset($_GET['detached']) ) { ?>	<input type="submit" id="find_detached" name="find_detached" value="<?php esc_attr_e('Scan for lost attachments'); ?>" class="button-secondary" /><?php } elseif ( isset($_GET['status']) && $_GET['status'] == 'trash' && current_user_can('edit_others_posts') ) { ?>	<input type="submit" id="delete_all" name="delete_all" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><br class="clear" /></div><?php } // have_posts() || !empty( $orphans ) ?><div class="clear"></div><?php if ( ! empty( $orphans ) ) { ?><table class="widefat" cellspacing="0"><thead><tr>	<th scope="col" class="check-column"><input type="checkbox" /></th>	<th scope="col"></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Media', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Author', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Date Added', 'media column name'); ?></th></tr></thead><tfoot><tr>	<th scope="col" class="check-column"><input type="checkbox" /></th>	<th scope="col"></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Media', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Author', 'media column name'); ?></th>	<th scope="col"><?php /* translators: column name in media */ _ex('Date Added', 'media column name'); ?></th></tr></tfoot><tbody id="the-list" class="list:post"><?php		foreach ( $orphans as $post ) {			$class = 'alternate' == $class ? '' : 'alternate';			$att_title = esc_html( _draft_or_post_title($post->ID) );?>	<tr id='post-<?php echo $post->ID; ?>' class='<?php echo $class; ?>' valign="top">		<th scope="row" class="check-column"><?php if ( current_user_can('edit_post', $post->ID) ) { ?><input type="checkbox" name="media[]" value="<?php echo esc_attr($post->ID); ?>" /><?php } ?></th>		<td class="media-icon"><?php		if ( $thumb = wp_get_attachment_image( $post->ID, array(80, 60), true ) ) { ?>			<a href="media.php?action=edit&amp;attachment_id=<?php echo $post->ID; ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $thumb; ?></a><?php	} ?></td>		<td class="media column-media"><strong><a href="<?php echo get_edit_post_link( $post->ID ); ?>" title="<?php echo esc_attr(sprintf(__('Edit &#8220;%s&#8221;'), $att_title)); ?>"><?php echo $att_title; ?></a></strong><br />		<?php		if ( preg_match( '/^.*?\.(\w+)$/', get_attached_file( $post->ID ), $matches ) )			echo esc_html( strtoupper( $matches[1] ) );		else			echo strtoupper( str_replace( 'image/', '', get_post_mime_type() ) );		?>		<div class="row-actions">		<?php		$actions = array();		if ( current_user_can('edit_post', $post->ID) )			$actions['edit'] = '<a href="' . get_edit_post_link($post->ID, true) . '">' . __('Edit') . '</a>';		if ( current_user_can('delete_post', $post->ID) )			if ( EMPTY_TRASH_DAYS && MEDIA_TRASH ) {				$actions['trash'] = "<a class='submitdelete' href='" . wp_nonce_url("post.php?action=trash&amp;post=$post->ID", 'trash-attachment_' . $post->ID) . "'>" . __('Trash') . "</a>";			} else {				$delete_ays = !MEDIA_TRASH ? " onclick='return showNotice.warn();'" : '';				$actions['delete'] = "<a class='submitdelete'$delete_ays href='" . wp_nonce_url("post.php?action=delete&amp;post=$post->ID", 'delete-attachment_' . $post->ID) . "'>" . __('Delete Permanently') . "</a>";			}		$actions['view'] = '<a href="' . get_permalink($post->ID) . '" title="' . esc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)) . '" rel="permalink">' . __('View') . '</a>';		if ( current_user_can('edit_post', $post->ID) )			$actions['attach'] = '<a href="#the-list" onclick="findPosts.open(\'media[]\',\''.$post->ID.'\');return false;" class="hide-if-no-js">'.__('Attach').'</a>';		$actions = apply_filters( 'media_row_actions', $actions, $post );		$action_count = count($actions);		$i = 0;		foreach ( $actions as $action => $link ) {			++$i;			( $i == $action_count ) ? $sep = '' : $sep = ' | ';			echo "<span class='$action'>$link$sep</span>";		} ?>		</div></td>		<td class="author column-author"><?php $author = get_userdata($post->post_author); echo $author->display_name; ?></td><?php	if ( '0000-00-00 00:00:00' == $post->post_date && 'date' == $column_name ) {			$t_time = $h_time = __('Unpublished');		} else {			$t_time = get_the_time(__('Y/m/d g:i:s A'));			$m_time = $post->post_date;			$time = get_post_time( 'G', true );			if ( ( abs($t_diff = time() - $time) ) < 86400 ) {				if ( $t_diff < 0 )					$h_time = sprintf( __('%s from now'), human_time_diff( $time ) );				else					$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );			} else {				$h_time = mysql2date(__('Y/m/d'), $m_time);			}		} ?>		<td class="date column-date"><?php echo $h_time ?></td>	</tr><?php	} ?></tbody></table><?php} else {	include( './edit-attachment-rows.php' );} ?><div id="ajax-response"></div><div class="tablenav"><?phpif ( have_posts() || ! empty( $orphans ) ) {if ( $page_links )	echo "<div class='tablenav-pages'>$page_links_text</div>";?><div class="alignleft actions"><select name="action2" class="select-action"><option value="-1" selected="selected"><?php _e('Bulk Actions'); ?></option><?php if ($is_trash) { ?><option value="untrash"><?php _e('Restore'); ?></option><?php } if ( $is_trash || !EMPTY_TRASH_DAYS || !MEDIA_TRASH ) { ?><option value="delete"><?php _e('Delete Permanently'); ?></option><?php } else { ?><option value="trash"><?php _e('Move to Trash'); ?></option><?php } if (isset($orphans)) { ?><option value="attach"><?php _e('Attach to a post'); ?></option><?php } ?></select><input type="submit" value="<?php esc_attr_e('Apply'); ?>" name="doaction2" id="doaction2" class="button-secondary action" /><?php if ( isset($_GET['status']) && $_GET['status'] == 'trash' && current_user_can('edit_others_posts') ) { ?>	<input type="submit" id="delete_all2" name="delete_all2" value="<?php esc_attr_e('Empty Trash'); ?>" class="button-secondary apply" /><?php } ?></div><?php } ?><br class="clear" /></div><?php find_posts_div(); ?></form><br class="clear" /></div><?phpinclude('./admin-footer.php');
<?php/** * WordPress User API * * @package WordPress *//** * Authenticate user with remember capability. * * The credentials is an array that has 'user_login', 'user_password', and * 'remember' indices. If the credentials is not given, then the log in form * will be assumed and used if set. * * The various authentication cookies will be set by this function and will be * set for a longer period depending on if the 'remember' credential is set to * true. * * @since 2.5.0 * * @param array $credentials Optional. User info in order to sign on. * @param bool $secure_cookie Optional. Whether to use secure cookie. * @return object Either WP_Error on failure, or WP_User on success. */function wp_signon( $credentials = '', $secure_cookie = '' ) {	if ( empty($credentials) ) {		if ( ! empty($_POST['log']) )			$credentials['user_login'] = $_POST['log'];		if ( ! empty($_POST['pwd']) )			$credentials['user_password'] = $_POST['pwd'];		if ( ! empty($_POST['rememberme']) )			$credentials['remember'] = $_POST['rememberme'];	}	if ( !empty($credentials['remember']) )		$credentials['remember'] = true;	else		$credentials['remember'] = false;	// TODO do we deprecate the wp_authentication action?	do_action_ref_array('wp_authenticate', array(&$credentials['user_login'], &$credentials['user_password']));	if ( '' === $secure_cookie )		$secure_cookie = is_ssl();	global $auth_secure_cookie; // XXX ugly hack to pass this to wp_authenticate_cookie	$auth_secure_cookie = $secure_cookie;	add_filter('authenticate', 'wp_authenticate_cookie', 30, 3);	$user = wp_authenticate($credentials['user_login'], $credentials['user_password']);	if ( is_wp_error($user) ) {		if ( $user->get_error_codes() == array('empty_username', 'empty_password') ) {			$user = new WP_Error('', '');		}		return $user;	}	wp_set_auth_cookie($user->ID, $credentials['remember'], $secure_cookie);	do_action('wp_login', $credentials['user_login']);	return $user;}/** * Authenticate the user using the username and password. */add_filter('authenticate', 'wp_authenticate_username_password', 20, 3);function wp_authenticate_username_password($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) || empty($password) ) {		$error = new WP_Error();		if ( empty($username) )			$error->add('empty_username', __('<strong>ERROR</strong>: The username field is empty.'));		if ( empty($password) )			$error->add('empty_password', __('<strong>ERROR</strong>: The password field is empty.'));		return $error;	}	$userdata = get_user_by('login', $username);	if ( !$userdata )		return new WP_Error('invalid_username', sprintf(__('<strong>ERROR</strong>: Invalid username. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	if ( is_multisite() ) {		// Is user marked as spam?		if ( 1 == $userdata->spam)			return new WP_Error('invalid_username', __('<strong>ERROR</strong>: Your account has been marked as a spammer.'));		// Is a user's blog marked as spam?		if ( !is_super_admin( $userdata->ID ) && isset($userdata->primary_blog) ) {			$details = get_blog_details( $userdata->primary_blog );			if ( is_object( $details ) && $details->spam == 1 )				return new WP_Error('blog_suspended', __('Site Suspended.'));		}	}	$userdata = apply_filters('wp_authenticate_user', $userdata, $password);	if ( is_wp_error($userdata) )		return $userdata;	if ( !wp_check_password($password, $userdata->user_pass, $userdata->ID) )		return new WP_Error('incorrect_password', sprintf(__('<strong>ERROR</strong>: Incorrect password. <a href="%s" title="Password Lost and Found">Lost your password</a>?'), site_url('wp-login.php?action=lostpassword', 'login')));	$user =  new WP_User($userdata->ID);	return $user;}/** * Authenticate the user using the WordPress auth cookie. */function wp_authenticate_cookie($user, $username, $password) {	if ( is_a($user, 'WP_User') ) { return $user; }	if ( empty($username) && empty($password) ) {		$user_id = wp_validate_auth_cookie();		if ( $user_id )			return new WP_User($user_id);		global $auth_secure_cookie;		if ( $auth_secure_cookie )			$auth_cookie = SECURE_AUTH_COOKIE;		else			$auth_cookie = AUTH_COOKIE;		if ( !empty($_COOKIE[$auth_cookie]) )			return new WP_Error('expired_session', __('Please log in again.'));		// If the cookie is not set, be silent.	}	return $user;}/** * Number of posts user has written. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries. * * @param int $userid User ID. * @return int Amount of posts user has written. */function count_user_posts($userid) {	global $wpdb;	$where = get_posts_by_author_sql('post', TRUE, $userid);	$count = $wpdb->get_var( "SELECT COUNT(*) FROM $wpdb->posts $where" );	return apply_filters('get_usernumposts', $count, $userid);}/** * Number of posts written by a list of users. * * @since 3.0.0 * @param array $userid User ID number list. * @return array Amount of posts each user has written. */function count_many_users_posts($users) {	global $wpdb;	$count = array();	if ( ! is_array($users) || empty( $users ) )		return $count;	$userlist = implode( ',', $users );	$where = get_posts_by_author_sql( 'post' );	$result = $wpdb->get_results( "SELECT post_author, COUNT(*) FROM $wpdb->posts $where AND post_author IN ($userlist) GROUP BY post_author", ARRAY_N );	foreach ( $result as $row ) {		$count[ $row[0] ] = $row[1];	}	foreach ( $users as $id ) {		if ( ! isset( $count[ $id ] ) )			$count[ $id ] = 0;	}	return $count;}/** * Check that the user login name and password is correct. * * @since 0.71 * @todo xmlrpc only. Maybe move to xmlrpc.php. * * @param string $user_login User name. * @param string $user_pass User password. * @return bool False if does not authenticate, true if username and password authenticates. */function user_pass_ok($user_login, $user_pass) {	$user = wp_authenticate($user_login, $user_pass);	if ( is_wp_error($user) )		return false;	return true;}//// User option functions///** * Get the current user's ID * * @since MU * * @uses wp_get_current_user * * @return int The current user's ID */function get_current_user_id() {	$user = wp_get_current_user();	return ( isset( $user->ID ) ? (int) $user->ID : 0 );}/** * Retrieve user option that can be either per Site or per Network. * * If the user ID is not given, then the current user will be used instead. If * the user ID is given, then the user data will be retrieved. The filter for * the result, will also pass the original option name and finally the user data * object as the third parameter. * * The option will first check for the per site name and then the per Network name. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries. * @uses apply_filters() Calls 'get_user_option_$option' hook with result, *		option parameter, and user data object. * * @param string $option User option name. * @param int $user Optional. User ID. * @param bool $deprecated Use get_option() to check for an option in the options table. * @return mixed */function get_user_option( $option, $user = 0, $deprecated = '' ) {	global $wpdb;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '3.0' );	if ( empty($user) ) {		$user = wp_get_current_user();		$user = $user->ID;	}	$user = get_userdata($user);	// Keys used as object vars cannot have dashes.	$key = str_replace('-', '', $option);	if ( isset( $user->{$wpdb->prefix . $key} ) ) // Blog specific		$result = $user->{$wpdb->prefix . $key};	elseif ( isset( $user->{$key} ) ) // User specific and cross-blog		$result = $user->{$key};	else		$result = false;	return apply_filters("get_user_option_{$option}", $result, $option, $user);}/** * Update user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * Deletes the user option if $newvalue is empty. * * @since 2.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param mixed $newvalue User option value. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function update_user_option( $user_id, $option_name, $newvalue, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	// For backward compatibility. See differences between update_user_meta() and deprecated update_usermeta().	// http://core.trac.wordpress.org/ticket/13088	if ( is_null( $newvalue ) || is_scalar( $newvalue ) && empty( $newvalue ) )		return delete_user_meta( $user_id, $option_name );	return update_user_meta( $user_id, $option_name, $newvalue );}/** * Delete user option with global blog capability. * * User options are just like user metadata except that they have support for * global blog options. If the 'global' parameter is false, which it is by default * it will prepend the WordPress table prefix to the option name. * * @since 3.0.0 * @uses $wpdb WordPress database object for queries * * @param int $user_id User ID * @param string $option_name User option name. * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific). * @return unknown */function delete_user_option( $user_id, $option_name, $global = false ) {	global $wpdb;	if ( !$global )		$option_name = $wpdb->prefix . $option_name;	return delete_user_meta( $user_id, $option_name );}/** * Get users for the blog. * * For setups that use the multi-blog feature. Can be used outside of the * multi-blog feature. * * @since 2.2.0 * @uses $wpdb WordPress database object for queries * @uses $blog_id The Blog id of the blog for those that use more than one blog * * @param int $id Blog ID. * @return array List of users that are part of that Blog ID */function get_users_of_blog( $id = '' ) {	global $wpdb, $blog_id;	if ( empty($id) )		$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$users = $wpdb->get_results( "SELECT user_id, user_id AS ID, user_login, display_name, user_email, meta_value FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities' ORDER BY {$wpdb->usermeta}.user_id" );	return $users;}/** * Add meta data field to a user. * * Post meta data is called "Custom Fields" on the Administration Panels. * * @since 3.0.0 * @uses add_metadata() * @link http://codex.wordpress.org/Function_Reference/add_user_meta * * @param int $user_id Post ID. * @param string $key Metadata name. * @param mixed $value Metadata value. * @param bool $unique Optional, default is false. Whether the same key should not be added. * @return bool False for failure. True for success. */function add_user_meta($user_id, $meta_key, $meta_value, $unique = false) {	return add_metadata('user', $user_id, $meta_key, $meta_value, $unique);}/** * Remove metadata matching criteria from a user. * * You can match based on the key, or key and value. Removing based on key and * value, will keep from removing duplicate metadata with the same key. It also * allows removing all metadata matching key, if needed. * * @since 3.0.0 * @uses delete_metadata() * @link http://codex.wordpress.org/Function_Reference/delete_user_meta * * @param int $user_id user ID * @param string $meta_key Metadata name. * @param mixed $meta_value Optional. Metadata value. * @return bool False for failure. True for success. */function delete_user_meta($user_id, $meta_key, $meta_value = '') {	return delete_metadata('user', $user_id, $meta_key, $meta_value);}/** * Retrieve user meta field for a user. * * @since 3.0.0 * @uses get_metadata() * @link http://codex.wordpress.org/Function_Reference/get_user_meta * * @param int $user_id Post ID. * @param string $key The meta key to retrieve. * @param bool $single Whether to return a single value. * @return mixed Will be an array if $single is false. Will be value of meta data field if $single *  is true. */function get_user_meta($user_id, $key, $single = false) {	return get_metadata('user', $user_id, $key, $single);}/** * Update user meta field based on user ID. * * Use the $prev_value parameter to differentiate between meta fields with the * same key and user ID. * * If the meta field for the user does not exist, it will be added. * * @since 3.0.0 * @uses update_metadata * @link http://codex.wordpress.org/Function_Reference/update_user_meta * * @param int $user_id Post ID. * @param string $key Metadata key. * @param mixed $value Metadata value. * @param mixed $prev_value Optional. Previous value to check before removing. * @return bool False on failure, true if success. */function update_user_meta($user_id, $meta_key, $meta_value, $prev_value = '') {	return update_metadata('user', $user_id, $meta_key, $meta_value, $prev_value);}/** * Count number of users who have each of the user roles. * * Assumes there are neither duplicated nor orphaned capabilities meta_values. * Assumes role names are unique phrases.  Same assumption made by WP_User_Search::prepare_query() * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users. * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257. * * @since 3.0.0 * @param string $strategy 'time' or 'memory' * @return array Includes a grand total and an array of counts indexed by role strings. */function count_users($strategy = 'time') {	global $wpdb, $blog_id, $wp_roles;	// Initialize	$id = (int) $blog_id;	$blog_prefix = $wpdb->get_blog_prefix($id);	$result = array();	if ( 'time' == $strategy ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$avail_roles = $wp_roles->get_names();		// Build a CPU-intensive query that will return concise information.		$select_count = array();		foreach ( $avail_roles as $this_role => $name ) {			$select_count[] = "COUNT(NULLIF(`meta_value` LIKE '%" . like_escape($this_role) . "%', FALSE))";		}		$select_count = implode(', ', $select_count);		// Add the meta_value index to the selection list, then run the query.		$row = $wpdb->get_row( "SELECT $select_count, COUNT(*) FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'", ARRAY_N );		// Run the previous loop again to associate results with role names.		$col = 0;		$role_counts = array();		foreach ( $avail_roles as $this_role => $name ) {			$count = (int) $row[$col++];			if ($count > 0) {				$role_counts[$this_role] = $count;			}		}		// Get the meta_value index from the end of the result set.		$total_users = (int) $row[$col];		$result['total_users'] = $total_users;		$result['avail_roles'] =& $role_counts;	} else {		$avail_roles = array();		$users_of_blog = $wpdb->get_col( "SELECT meta_value FROM $wpdb->usermeta WHERE meta_key = '{$blog_prefix}capabilities'" );		foreach ( $users_of_blog as $caps_meta ) {			$b_roles = unserialize($caps_meta);			if ( is_array($b_roles) ) {				foreach ( $b_roles as $b_role => $val ) {					if ( isset($avail_roles[$b_role]) ) {						$avail_roles[$b_role]++;					} else {						$avail_roles[$b_role] = 1;					}				}			}		}		$result['total_users'] = count( $users_of_blog );		$result['avail_roles'] =& $avail_roles;	}	return $result;}//// Private helper functions///** * Set up global user vars. * * Used by wp_set_current_user() for back compat. Might be deprecated in the future. * * @since 2.0.4 * @global string $userdata User description. * @global string $user_login The user username for logging in * @global int $user_level The level of the user * @global int $user_ID The ID of the user * @global string $user_email The email address of the user * @global string $user_url The url in the user's profile * @global string $user_pass_md5 MD5 of the user's password * @global string $user_identity The display name of the user * * @param int $for_user_id Optional. User ID to set up global data. */function setup_userdata($for_user_id = '') {	global $user_login, $userdata, $user_level, $user_ID, $user_email, $user_url, $user_pass_md5, $user_identity;	if ( '' == $for_user_id )		$user = wp_get_current_user();	else		$user = new WP_User($for_user_id);	$userdata   = $user->data;	$user_ID    = (int) $user->ID;	$user_level = (int) isset($user->user_level) ? $user->user_level : 0;	if ( 0 == $user->ID ) {		$user_login = $user_email = $user_url = $user_pass_md5 = $user_identity = '';		return;	}	$user_login	= $user->user_login;	$user_email	= $user->user_email;	$user_url	= $user->user_url;	$user_pass_md5	= md5($user->user_pass);	$user_identity	= $user->display_name;}/** * Create dropdown HTML content of users. * * The content can either be displayed, which it is by default or retrieved by * setting the 'echo' argument. The 'include' and 'exclude' arguments do not * need to be used; all users will be displayed in that case. Only one can be * used, either 'include' or 'exclude', but not both. * * The available arguments are as follows: * <ol> * <li>show_option_all - Text to show all and whether HTML option exists.</li> * <li>show_option_none - Text for show none and whether HTML option exists. *     </li> * <li>orderby - SQL order by clause for what order the users appear. Default is * 'display_name'.</li> * <li>order - Default is 'ASC'. Can also be 'DESC'.</li> * <li>include - User IDs to include.</li> * <li>exclude - User IDs to exclude.</li> * <li>multi - Default is 'false'. Whether to skip the ID attribute on the 'select' element. A 'true' value is overridden when id argument is set.</li> * <li>show - Default is 'display_name'. User table column to display. If the selected item is empty then the user_login will be displayed in parentesis</li> * <li>echo - Default is '1'. Whether to display or retrieve content.</li> * <li>selected - Which User ID is selected.</li> * <li>name - Default is 'user'. Name attribute of select element.</li> * <li>id - Default is the value of the 'name' parameter. ID attribute of select element.</li> * <li>class - Class attribute of select element.</li> * <li>blog_id - ID of blog (Multisite only). Defaults to ID of current blog.</li> * </ol> * * @since 2.3.0 * @uses $wpdb WordPress database object for queries * * @param string|array $args Optional. Override defaults. * @return string|null Null on display. String of HTML content on retrieve. */function wp_dropdown_users( $args = '' ) {	global $wpdb;	$defaults = array(		'show_option_all' => '', 'show_option_none' => '',		'orderby' => 'display_name', 'order' => 'ASC',		'include' => '', 'exclude' => '', 'multi' => 0,		'show' => 'display_name', 'echo' => 1,		'selected' => 0, 'name' => 'user', 'class' => '', 'blog_id' => $GLOBALS['blog_id'],		'id' => '',	);	$defaults['selected'] = is_author() ? get_query_var( 'author' ) : 0;	$r = wp_parse_args( $args, $defaults );	extract( $r, EXTR_SKIP );	$blog_prefix = $wpdb->get_blog_prefix( $blog_id );	$query = "SELECT {$wpdb->users}.* FROM $wpdb->users, $wpdb->usermeta WHERE {$wpdb->users}.ID = {$wpdb->usermeta}.user_id AND meta_key = '{$blog_prefix}capabilities'";	$query_where = array();	if ( is_array($include) )		$include = join(',', $include);	$include = preg_replace('/[^0-9,]/', '', $include); // (int)	if ( $include )		$query_where[] = "ID IN ($include)";	if ( is_array($exclude) )		$exclude = join(',', $exclude);	$exclude = preg_replace('/[^0-9,]/', '', $exclude); // (int)	if ( $exclude )		$query_where[] = "ID NOT IN ($exclude)";	if ( $query_where )		$query .= " AND " . join(' AND', $query_where);	$query .= " ORDER BY $orderby $order";	$users = $wpdb->get_results( $query );	$output = '';	if ( !empty($users) ) {		$name = esc_attr( $name );		if ( $multi && ! $id )			$id = '';		else			$id = $id ? " id='" . esc_attr( $id ) . "'" : " id='$name'";		$output = "<select name='{$name}'{$id} class='$class'>\n";		if ( $show_option_all )			$output .= "\t<option value='0'>$show_option_all</option>\n";		if ( $show_option_none ) {			$_selected = selected( -1, $selected, false );			$output .= "\t<option value='-1'$_selected>$show_option_none</option>\n";		}		foreach ( (array) $users as $user ) {			$user->ID = (int) $user->ID;			$_selected = selected( $user->ID, $selected, false );			$display = !empty($user->$show) ? $user->$show : '('. $user->user_login . ')';			$output .= "\t<option value='$user->ID'$_selected>" . esc_html($display) . "</option>\n";		}		$output .= "</select>";	}	$output = apply_filters('wp_dropdown_users', $output);	if ( $echo )		echo $output;	return $output;}/** * Add user meta data as properties to given user object. * * The finished user data is cached, but the cache is not used to fill in the * user data for the given object. Once the function has been used, the cache * should be used to retrieve user data. The intention is if the current data * had been cached already, there would be no need to call this function. * * @access private * @since 2.5.0 * @uses $wpdb WordPress database object for queries * * @param object $user The user data object. */function _fill_user( &$user ) {	$metavalues = get_user_metavalues(array($user->ID));	_fill_single_user($user, $metavalues[$user->ID]);}/** * Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users * * @since 3.0.0 * @param array $ids User ID numbers list. * @return array of arrays. The array is indexed by user_id, containing $metavalues object arrays. */function get_user_metavalues($ids) {	global $wpdb;	$clean = array_map('intval', $ids);	if ( 0 == count($clean) )		return $objects;	$list = implode(',', $clean);	$show = $wpdb->hide_errors();	$metavalues = $wpdb->get_results("SELECT user_id, meta_key, meta_value FROM $wpdb->usermeta WHERE user_id IN ($list)");	$wpdb->show_errors($show);	$objects = array();	foreach($clean as $id) {		$objects[$id] = array();	}	foreach($metavalues as $meta_object) {		$objects[$meta_object->user_id][] = $meta_object;	}	return $objects;}/** * Unserialize user metadata, fill $user object, then cache everything. * * @since 3.0.0 * @param object $user The User object. * @param array $metavalues An array of objects provided by get_user_metavalues() */function _fill_single_user( &$user, &$metavalues ) {	global $wpdb;	foreach ( $metavalues as $meta ) {		$value = maybe_unserialize($meta->meta_value);		// Keys used as object vars cannot have dashes.		$key = str_replace('-', '', $meta->meta_key);		$user->{$key} = $value;	}	$level = $wpdb->prefix . 'user_level';	if ( isset( $user->{$level} ) )		$user->user_level = $user->{$level};	// For backwards compat.	if ( isset($user->first_name) )		$user->user_firstname = $user->first_name;	if ( isset($user->last_name) )		$user->user_lastname = $user->last_name;	if ( isset($user->description) )		$user->user_description = $user->description;	update_user_caches($user);}/** * Take an array of user objects, fill them with metas, and cache them. * * @since 3.0.0 * @param array $users User objects */function _fill_many_users( &$users ) {	$ids = array();	foreach($users as $user_object) {		$ids[] = $user_object->ID;	}    $metas = get_user_metavalues($ids);	foreach($users as $user_object) {		if (isset($metas[$user_object->ID])) {	        _fill_single_user($user_object, $metas[$user_object->ID]);		}	}}/** * Sanitize every user field. * * If the context is 'raw', then the user object or array will get minimal santization of the int fields. * * @since 2.3.0 * @uses sanitize_user_field() Used to sanitize the fields. * * @param object|array $user The User Object or Array * @param string $context Optional, default is 'display'. How to sanitize user fields. * @return object|array The now sanitized User Object or Array (will be the same type as $user) */function sanitize_user_object($user, $context = 'display') {	if ( is_object($user) ) {		if ( !isset($user->ID) )			$user->ID = 0;		if ( isset($user->data) )			$vars = get_object_vars( $user->data );		else			$vars = get_object_vars($user);		foreach ( array_keys($vars) as $field ) {			if ( is_string($user->$field) || is_numeric($user->$field) )				$user->$field = sanitize_user_field($field, $user->$field, $user->ID, $context);		}		$user->filter = $context;	} else {		if ( !isset($user['ID']) )			$user['ID'] = 0;		foreach ( array_keys($user) as $field )			$user[$field] = sanitize_user_field($field, $user[$field], $user['ID'], $context);		$user['filter'] = $context;	}	return $user;}/** * Sanitize user field based on context. * * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display' * when calling filters. * * @since 2.3.0 * @uses apply_filters() Calls 'edit_$field' and '${field_no_prefix}_edit_pre' passing $value and *  $user_id if $context == 'edit' and field name prefix == 'user_'. * * @uses apply_filters() Calls 'edit_user_$field' passing $value and $user_id if $context == 'db'. * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls '${field}_pre' passing $value if $context == 'db' and field name prefix != 'user_'. * * @uses apply_filters() Calls '$field' passing $value, $user_id and $context if $context == anything *  other than 'raw', 'edit' and 'db' and field name prefix == 'user_'. * @uses apply_filters() Calls 'user_$field' passing $value if $context == anything other than 'raw', *  'edit' and 'db' and field name prefix != 'user_'. * * @param string $field The user Object field name. * @param mixed $value The user Object value. * @param int $user_id user ID. * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display', *               'attribute' and 'js'. * @return mixed Sanitized value. */function sanitize_user_field($field, $value, $user_id, $context) {	$int_fields = array('ID');	if ( in_array($field, $int_fields) )		$value = (int) $value;	if ( 'raw' == $context )		return $value;	if ( !is_string($value) && !is_numeric($value) )		return $value;	$prefixed = false;	if ( false !== strpos($field, 'user_') ) {		$prefixed = true;		$field_no_prefix = str_replace('user_', '', $field);	}	if ( 'edit' == $context ) {		if ( $prefixed ) {			$value = apply_filters("edit_$field", $value, $user_id);		} else {			$value = apply_filters("edit_user_$field", $value, $user_id);		}		if ( 'description' == $field )			$value = esc_html($value);		else			$value = esc_attr($value);	} else if ( 'db' == $context ) {		if ( $prefixed ) {			$value = apply_filters("pre_$field", $value);		} else {			$value = apply_filters("pre_user_$field", $value);		}	} else {		// Use display filters by default.		if ( $prefixed )			$value = apply_filters($field, $value, $user_id, $context);		else			$value = apply_filters("user_$field", $value, $user_id, $context);	}	if ( 'user_url' == $field )		$value = esc_url($value);	if ( 'attribute' == $context )		$value = esc_attr($value);	else if ( 'js' == $context )		$value = esc_js($value);	return $value;}/** * Update all user caches * * @since 3.0.0 * * @param object $user User object to be cached */function update_user_caches(&$user) {	wp_cache_add($user->ID, $user, 'users');	wp_cache_add($user->user_login, $user->ID, 'userlogins');	wp_cache_add($user->user_email, $user->ID, 'useremail');	wp_cache_add($user->user_nicename, $user->ID, 'userslugs');}/** * Clean all user caches * * @since 3.0.0 * * @param int $id User ID */function clean_user_cache($id) {	$user = new WP_User($id);	wp_cache_delete($id, 'users');	wp_cache_delete($user->user_login, 'userlogins');	wp_cache_delete($user->user_email, 'useremail');	wp_cache_delete($user->user_nicename, 'userslugs');}?>
<?php/** * Canonical API to handle WordPress Redirecting * * Based on "Permalink Redirect" from Scott Yang and "Enforce www. Preference" * by Mark Jaquith * * @package WordPress * @since 2.3.0 *//** * Redirects incoming links to the proper URL based on the site url. * * Search engines consider www.somedomain.com and somedomain.com to be two * different URLs when they both go to the same location. This SEO enhancement * prevents penality for duplicate content by redirecting all incoming links to * one or the other. * * Prevents redirection for feeds, trackbacks, searches, comment popup, and * admin URLs. Does not redirect on IIS, page/post previews, and on form data. * * Will also attempt to find the correct link when a user enters a URL that does * not exist based on exact WordPress query. Will instead try to parse the URL * or query in an attempt to figure the correct page to go to. * * @since 2.3.0 * @uses $wp_rewrite * @uses $is_IIS * * @param string $requested_url Optional. The URL that was requested, used to *		figure if redirect is needed. * @param bool $do_redirect Optional. Redirect to the new URL. * @return null|false|string Null, if redirect not needed. False, if redirect *		not needed or the string of the URL */function redirect_canonical($requested_url=null, $do_redirect=true) {	global $wp_rewrite, $is_IIS, $wp_query, $wpdb;	if ( is_trackback() || is_search() || is_comments_popup() || is_admin() || $is_IIS || ( isset($_POST) && count($_POST) ) || is_preview() || is_robots() )		return;	if ( !$requested_url ) {		// build the URL in the address bar		$requested_url  = is_ssl() ? 'https://' : 'http://';		$requested_url .= $_SERVER['HTTP_HOST'];		$requested_url .= $_SERVER['REQUEST_URI'];	}	$original = @parse_url($requested_url);	if ( false === $original )		return;	// Some PHP setups turn requests for / into /index.php in REQUEST_URI	// See: http://trac.wordpress.org/ticket/5017	// See: http://trac.wordpress.org/ticket/7173	// Disabled, for now:	// $original['path'] = preg_replace('|/index\.php$|', '/', $original['path']);	$redirect = $original;	$redirect_url = false;	// Notice fixing	if ( !isset($redirect['path']) )		$redirect['path'] = '';	if ( !isset($redirect['query']) )		$redirect['query'] = '';	if ( is_singular() && 1 > $wp_query->post_count && ($id = get_query_var('p')) ) {		$vars = $wpdb->get_results( $wpdb->prepare("SELECT post_type, post_parent FROM $wpdb->posts WHERE ID = %d", $id) );		if ( isset($vars[0]) && $vars = $vars[0] ) {			if ( 'revision' == $vars->post_type && $vars->post_parent > 0 )				$id = $vars->post_parent;			if ( $redirect_url = get_permalink($id) )				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);		}	}	// These tests give us a WP-generated permalink	if ( is_404() ) {		// Redirect ?page_id, ?p=, ?attachment_id= to their respective url's		$id = max( get_query_var('p'), get_query_var('page_id'), get_query_var('attachment_id') );		if ( $id && $redirect_post = get_post($id) ) {			$post_type_obj = get_post_type_object($redirect_post->post_type);			if ( $post_type_obj->public ) {				$redirect_url = get_permalink($redirect_post);				$redirect['query'] = remove_query_arg(array('p', 'page_id', 'attachment_id', 'post_type'), $redirect['query']);			}		}		if ( ! $redirect_url )			$redirect_url = redirect_guess_404_permalink();	} elseif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() ) {		// rewriting of old ?p=X, ?m=2004, ?m=200401, ?m=20040101		if ( is_attachment() && !empty($_GET['attachment_id']) && ! $redirect_url ) {			if ( $redirect_url = get_attachment_link(get_query_var('attachment_id')) )				$redirect['query'] = remove_query_arg('attachment_id', $redirect['query']);		} elseif ( is_single() && !empty($_GET['p']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('p')) )				$redirect['query'] = remove_query_arg(array('p', 'post_type'), $redirect['query']);			if ( get_query_var( 'page' ) ) {				$redirect_url = trailingslashit( $redirect_url ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );				$redirect['query'] = remove_query_arg( 'page', $redirect['query'] );			}		} elseif ( is_single() && !empty($_GET['name'])  && ! $redirect_url ) {			if ( $redirect_url = get_permalink( $wp_query->get_queried_object_id() ) )				$redirect['query'] = remove_query_arg('name', $redirect['query']);		} elseif ( is_page() && !empty($_GET['page_id']) && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_query_var('page_id')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( is_page() && !is_feed() && isset($wp_query->queried_object) && 'page' == get_option('show_on_front') && $wp_query->queried_object->ID == get_option('page_on_front')  && ! $redirect_url ) {			$redirect_url = home_url('/');		} elseif ( is_home() && !empty($_GET['page_id']) && 'page' == get_option('show_on_front') && get_query_var('page_id') == get_option('page_for_posts')  && ! $redirect_url ) {			if ( $redirect_url = get_permalink(get_option('page_for_posts')) )				$redirect['query'] = remove_query_arg('page_id', $redirect['query']);		} elseif ( !empty($_GET['m']) && ( is_year() || is_month() || is_day() ) ) {			$m = get_query_var('m');			switch ( strlen($m) ) {				case 4: // Yearly					$redirect_url = get_year_link($m);					break;				case 6: // Monthly					$redirect_url = get_month_link( substr($m, 0, 4), substr($m, 4, 2) );					break;				case 8: // Daily					$redirect_url = get_day_link(substr($m, 0, 4), substr($m, 4, 2), substr($m, 6, 2));					break;			}			if ( $redirect_url )				$redirect['query'] = remove_query_arg('m', $redirect['query']);		// now moving on to non ?m=X year/month/day links		} elseif ( is_day() && get_query_var('year') && get_query_var('monthnum') && !empty($_GET['day']) ) {			if ( $redirect_url = get_day_link(get_query_var('year'), get_query_var('monthnum'), get_query_var('day')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum', 'day'), $redirect['query']);		} elseif ( is_month() && get_query_var('year') && !empty($_GET['monthnum']) ) {			if ( $redirect_url = get_month_link(get_query_var('year'), get_query_var('monthnum')) )				$redirect['query'] = remove_query_arg(array('year', 'monthnum'), $redirect['query']);		} elseif ( is_year() && !empty($_GET['year']) ) {			if ( $redirect_url = get_year_link(get_query_var('year')) )				$redirect['query'] = remove_query_arg('year', $redirect['query']);		} elseif ( is_author() && !empty($_GET['author']) && preg_match( '|^[0-9]+$|', $_GET['author'] ) ) {			$author = get_userdata(get_query_var('author'));			if ( false !== $author && $redirect_url = get_author_posts_url($author->ID, $author->user_nicename) )				$redirect['query'] = remove_query_arg('author', $redirect['query']);		} elseif ( is_category() || is_tag() || is_tax() ) { // Terms (Tags/categories)			$term_count = 0;			foreach ( array('category__in', 'category__not_in', 'category__and', 'post__in', 'post__not_in',			'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and') as $key )				$term_count += count($wp_query->query_vars[$key]);			$obj = $wp_query->get_queried_object();			if ( $term_count <= 1 && !empty($obj->term_id) && ( $tax_url = get_term_link((int)$obj->term_id, $obj->taxonomy) ) && !is_wp_error($tax_url) ) {				if ( is_category() ) {					$redirect['query'] = remove_query_arg( array( 'category_name', 'category', 'cat'), $redirect['query']);				} elseif ( is_tag() ) {					$redirect['query'] = remove_query_arg( array( 'tag', 'tag_id'), $redirect['query']);				} elseif ( is_tax() ) { // Custom taxonomies will have a custom query var, remove those too:					$tax = get_taxonomy( $obj->taxonomy );					if ( false !== $tax->query_var)						$redirect['query'] = remove_query_arg($tax->query_var, $redirect['query']);					else						$redirect['query'] = remove_query_arg( array( 'term', 'taxonomy'), $redirect['query']);				}				$tax_url = parse_url($tax_url);				if ( ! empty($tax_url['query']) ) { // Custom taxonomies may only be accessable via ?taxonomy=..&term=..					parse_str($tax_url['query'], $query_vars);					$redirect['query'] = add_query_arg($query_vars, $redirect['query']);				} else { // Taxonomy is accessable via a "pretty-URL"					$redirect['path'] = $tax_url['path'];				}			}		} elseif ( is_single() && strpos($wp_rewrite->permalink_structure, '%category%') !== false ) {			$category = get_term_by('slug', get_query_var('category_name'), 'category');			$post_terms = wp_get_object_terms($wp_query->get_queried_object_id(), 'category', array('fields' => 'tt_ids'));			if ( (!$category || is_wp_error($category)) || ( !is_wp_error($post_terms) && !empty($post_terms) && !in_array($category->term_taxonomy_id, $post_terms) ) )				$redirect_url = get_permalink($wp_query->get_queried_object_id());		}		// paging and feeds		if ( get_query_var('paged') || is_feed() || get_query_var('cpage') ) {			if ( !$redirect_url )				$redirect_url = $requested_url;			$paged_redirect = @parse_url($redirect_url);			while ( preg_match( '#/page/?[0-9]+?(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/(comments/?)?(feed|rss|rdf|atom|rss2)(/+)?$#', $paged_redirect['path'] ) || preg_match( '#/comment-page-[0-9]+(/+)?$#', $paged_redirect['path'] ) ) {				// Strip off paging and feed				$paged_redirect['path'] = preg_replace('#/page/?[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing paging				$paged_redirect['path'] = preg_replace('#/(comments/?)?(feed|rss2?|rdf|atom)(/+|$)#', '/', $paged_redirect['path']); // strip off feed endings				$paged_redirect['path'] = preg_replace('#/comment-page-[0-9]+?(/+)?$#', '/', $paged_redirect['path']); // strip off any existing comment paging			}			$addl_path = '';			if ( is_feed() ) {				$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';				if ( get_query_var( 'withcomments' ) )					$addl_path .= 'comments/';				$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() ==  get_query_var('feed') || 'feed' == get_query_var('feed') ) ? '' : get_query_var('feed') ), 'feed' );				$redirect['query'] = remove_query_arg( 'feed', $redirect['query'] );			}			if ( get_query_var('paged') > 0 ) {				$paged = get_query_var('paged');				$redirect['query'] = remove_query_arg( 'paged', $redirect['query'] );				if ( !is_feed() ) {					if ( $paged > 1 && !is_single() ) {						$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit("page/$paged", 'paged');					} elseif ( !is_single() ) {						$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';					}				} elseif ( $paged > 1 ) {					$redirect['query'] = add_query_arg( 'paged', $paged, $redirect['query'] );				}			}			if ( get_option('page_comments') && ( ( 'newest' == get_option('default_comments_page') && get_query_var('cpage') > 0 ) || ( 'newest' != get_option('default_comments_page') && get_query_var('cpage') > 1 ) ) ) {				$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit( 'comment-page-' . get_query_var('cpage'), 'commentpaged' );				$redirect['query'] = remove_query_arg( 'cpage', $redirect['query'] );			}			$paged_redirect['path'] = user_trailingslashit( preg_replace('|/index.php/?$|', '/', $paged_redirect['path']) ); // strip off trailing /index.php/			if ( !empty( $addl_path ) && $wp_rewrite->using_index_permalinks() && strpos($paged_redirect['path'], '/index.php/') === false )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . 'index.php/';			if ( !empty( $addl_path ) )				$paged_redirect['path'] = trailingslashit($paged_redirect['path']) . $addl_path;			$redirect_url = $paged_redirect['scheme'] . '://' . $paged_redirect['host'] . $paged_redirect['path'];			$redirect['path'] = $paged_redirect['path'];		}	}	// tack on any additional query vars	$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	if ( $redirect_url && !empty($redirect['query']) ) {		if ( strpos($redirect_url, '?') !== false )			$redirect_url .= '&';		else			$redirect_url .= '?';		$redirect_url .= $redirect['query'];	}	if ( $redirect_url )		$redirect = @parse_url($redirect_url);	// www.example.com vs example.com	$user_home = @parse_url(home_url());	if ( !empty($user_home['host']) )		$redirect['host'] = $user_home['host'];	if ( empty($user_home['path']) )		$user_home['path'] = '/';	// Handle ports	if ( !empty($user_home['port']) )		$redirect['port'] = $user_home['port'];	else		unset($redirect['port']);	// trailing /index.php	$redirect['path'] = preg_replace('|/index.php/*?$|', '/', $redirect['path']);	// Remove trailing spaces from the path	$redirect['path'] = preg_replace( '#(%20| )+$#', '', $redirect['path'] );	if ( !empty( $redirect['query'] ) ) {		// Remove trailing spaces from certain terminating query string args		$redirect['query'] = preg_replace( '#((p|page_id|cat|tag)=[^&]*?)(%20| )+$#', '$1', $redirect['query'] );		// Clean up empty query strings		$redirect['query'] = trim(preg_replace( '#(^|&)(p|page_id|cat|tag)=?(&|$)#', '&', $redirect['query']), '&');		// Remove redundant leading ampersands		$redirect['query'] = preg_replace( '#^\??&*?#', '', $redirect['query'] );	}	// strip /index.php/ when we're not using PATHINFO permalinks	if ( !$wp_rewrite->using_index_permalinks() )		$redirect['path'] = str_replace('/index.php/', '/', $redirect['path']);	// trailing slashes	if ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() && !is_404() && (!is_front_page() || ( is_front_page() && (get_query_var('paged') > 1) ) ) ) {		$user_ts_type = '';		if ( get_query_var('paged') > 0 ) {			$user_ts_type = 'paged';		} else {			foreach ( array('single', 'category', 'page', 'day', 'month', 'year', 'home') as $type ) {				$func = 'is_' . $type;				if ( call_user_func($func) ) {					$user_ts_type = $type;					break;				}			}		}		$redirect['path'] = user_trailingslashit($redirect['path'], $user_ts_type);	} elseif ( is_front_page() ) {		$redirect['path'] = trailingslashit($redirect['path']);	}	// Strip multiple slashes out of the URL	if ( strpos($redirect['path'], '//') > -1 )		$redirect['path'] = preg_replace('|/+|', '/', $redirect['path']);	// Always trailing slash the Front Page URL	if ( trailingslashit( $redirect['path'] ) == trailingslashit( $user_home['path'] ) )		$redirect['path'] = trailingslashit($redirect['path']);	// Ignore differences in host capitalization, as this can lead to infinite redirects	// Only redirect no-www <=> yes-www	if ( strtolower($original['host']) == strtolower($redirect['host']) ||		( strtolower($original['host']) != 'www.' . strtolower($redirect['host']) && 'www.' . strtolower($original['host']) != strtolower($redirect['host']) ) )		$redirect['host'] = $original['host'];	$compare_original = array($original['host'], $original['path']);	if ( !empty( $original['port'] ) )		$compare_original[] = $original['port'];	if ( !empty( $original['query'] ) )		$compare_original[] = $original['query'];	$compare_redirect = array($redirect['host'], $redirect['path']);	if ( !empty( $redirect['port'] ) )		$compare_redirect[] = $redirect['port'];	if ( !empty( $redirect['query'] ) )		$compare_redirect[] = $redirect['query'];	if ( $compare_original !== $compare_redirect ) {		$redirect_url = $redirect['scheme'] . '://' . $redirect['host'];		if ( !empty($redirect['port']) )			$redirect_url .= ':' . $redirect['port'];		$redirect_url .= $redirect['path'];		if ( !empty($redirect['query']) )			$redirect_url .= '?' . $redirect['query'];	}	if ( !$redirect_url || $redirect_url == $requested_url )		return false;	// Note that you can use the "redirect_canonical" filter to cancel a canonical redirect for whatever reason by returning FALSE	$redirect_url = apply_filters('redirect_canonical', $redirect_url, $requested_url);	if ( !$redirect_url || $redirect_url == $requested_url ) // yes, again -- in case the filter aborted the request		return false;	if ( $do_redirect ) {		// protect against chained redirects		if ( !redirect_canonical($redirect_url, false) ) {			wp_redirect($redirect_url, 301);			exit();		} else {			// Debug			// die("1: $redirect_url<br />2: " . redirect_canonical( $redirect_url, false ) );			return false;		}	} else {		return $redirect_url;	}}/** * Attempts to guess correct post based on query vars. * * @since 2.3.0 * @uses $wpdb * * @return bool|string Returns False, if it can't find post, returns correct *		location on success. */function redirect_guess_404_permalink() {	global $wpdb;	if ( !get_query_var('name') )		return false;	$where = $wpdb->prepare("post_name LIKE %s", get_query_var('name') . '%');	// if any of post_type, year, monthnum, or day are set, use them to refine the query	if ( get_query_var('post_type') )		$where .= $wpdb->prepare(" AND post_type = %s", get_query_var('post_type'));	if ( get_query_var('year') )		$where .= $wpdb->prepare(" AND YEAR(post_date) = %d", get_query_var('year'));	if ( get_query_var('monthnum') )		$where .= $wpdb->prepare(" AND MONTH(post_date) = %d", get_query_var('monthnum'));	if ( get_query_var('day') )		$where .= $wpdb->prepare(" AND DAYOFMONTH(post_date) = %d", get_query_var('day'));	$post_id = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE $where AND post_status = 'publish'");	if ( !$post_id )		return false;	return get_permalink($post_id);}add_action('template_redirect', 'redirect_canonical');?>
<?php/** * New User Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( !current_user_can('create_users') )	wp_die(__('Cheatin&#8217; uh?'));if ( is_multisite() && !get_site_option( 'add_new_users' ) )	wp_die( __('Page disabled by the administrator') );/** WordPress Registration API */require_once( ABSPATH . WPINC . '/registration.php');if ( is_multisite() ) {	function admin_created_user_email( $text ) {		return sprintf( __( "Hi,You've been invited to join '%s' at%s as a %s.If you do not want to join this site please ignorethis email. This invitation will expire in a few days.Please click the following link to activate your user account:%%s" ), get_bloginfo('name'), site_url(), esc_html( $_REQUEST[ 'role' ] ) );	}	add_filter( 'wpmu_signup_user_notification_email', 'admin_created_user_email' );	function admin_created_user_subject( $text ) {		return "[" . get_bloginfo('name') . "] Your site invite";	}}if ( isset($_REQUEST['action']) && 'adduser' == $_REQUEST['action'] ) {	check_admin_referer('add-user');	if ( !is_multisite() ) {		$user_id = add_user();		if ( is_wp_error( $user_id ) ) {			$add_user_errors = $user_id;		} else {			if ( current_user_can('edit_users') ) {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				$redirect = 'users.php?usersearch='. urlencode($new_user_login) . '&update=add' . '#user-' . $user_id;			} else {				$redirect = add_query_arg( 'update', 'add', 'user-new.php' );			}			wp_redirect( $redirect );			die();		}	} else {		$user_login = preg_replace( "/\s+/", '', sanitize_user( $_REQUEST[ 'user_login' ], true ) );		$user_details = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM {$wpdb->users} WHERE user_login = %s AND user_email = %s", $user_login, $_REQUEST[ 'email' ] ) );		if ( $user_details ) {			// Adding an existing user to this blog			$new_user_email = esc_html(trim($_REQUEST['email']));			$redirect = 'user-new.php';			$username = $user_details->user_login;			$user_id = $user_details->ID;			if ( ( $username != null && !is_super_admin( $user_id ) ) && ( array_key_exists($blog_id, get_blogs_of_user($user_id)) ) ) {				$redirect = add_query_arg( array('update' => 'addexisting'), 'user-new.php' );			} else {				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_existing_user_to_blog( array( 'user_id' => $user_id, 'role' => $_REQUEST[ 'role' ] ) );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$newuser_key = substr( md5( $user_id ), 0, 5 );					add_option( 'new_user_' . $newuser_key, array( 'user_id' => $user_id, 'email' => $user_details->user_email, 'role' => $_REQUEST[ 'role' ] ) );					$message = __("Hi,\n\nYou have been invited to join '%s' at\n%s as a %s.\nPlease click the following link to confirm the invite:\n%s\n");					wp_mail( $new_user_email, sprintf( __( '[%s] Joining confirmation' ), get_option( 'blogname' ) ),  sprintf($message, get_option('blogname'), site_url(), $_REQUEST[ 'role' ], site_url("/newbloguser/$newuser_key/")));					$redirect = add_query_arg( array('update' => 'add'), 'user-new.php' );				}			}			wp_redirect( $redirect );			die();		} else {			// Adding a new user to this blog			$user_details = wpmu_validate_user_signup( $_REQUEST[ 'user_login' ], $_REQUEST[ 'email' ] );			unset( $user_details[ 'errors' ]->errors[ 'user_email_used' ] );			if ( is_wp_error( $user_details[ 'errors' ] ) && !empty( $user_details[ 'errors' ]->errors ) ) {				$add_user_errors = $user_details[ 'errors' ];			} else {				$new_user_login = apply_filters('pre_user_login', sanitize_user(stripslashes($_REQUEST['user_login']), true));				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					add_filter( 'wpmu_signup_user_notification', '__return_false' ); // Disable confirmation email				}				wpmu_signup_user( $new_user_login, $_REQUEST[ 'email' ], array( 'add_to_blog' => $wpdb->blogid, 'new_role' => $_REQUEST[ 'role' ] ) );				if ( isset( $_POST[ 'noconfirmation' ] ) && is_super_admin() ) {					$key = $wpdb->get_var( $wpdb->prepare( "SELECT activation_key FROM {$wpdb->signups} WHERE user_login = %s AND user_email = %s", $new_user_login, $_REQUEST[ 'email' ] ) );					wpmu_activate_signup( $key );					$redirect = add_query_arg( array('update' => 'addnoconfirmation'), 'user-new.php' );				} else {					$redirect = add_query_arg( array('update' => 'newuserconfimation'), 'user-new.php' );				}				wp_redirect( $redirect );				die();			}		}	}}$title = __('Add New User');$parent_file = 'users.php';add_contextual_help($current_screen,    '<p>' . __('To add a new user to your site, fill in the form on this screen. If you&#8217;re not sure which role to assign, you can use the link below to review the different roles and their capabilities. Here is a basic overview of roles:') . '</p>' .    '<ul>' .        '<li>' . __('Administrators have access to all the administration features.') . '</li>' .        '<li>' . __('Editors can publish posts, manage posts as well as manage other people&#8217;s posts, etc.')  . '</li>' .        '<li>' . __('Authors can publish and manage their own posts.') . '</li>' .        '<li>' . __('Contributors can write and manage their posts but not publish posts or upload media files.') . '</li>' .        '<li>' . __('Subscribers can read comments/comment/receive newsletters, etc.') . '</li>' .    '</ul>' .    '<p>' . __('You must assign a password to the new user, but don&#8217;t worry; when they log in for the first time they will be prompted to change it. The username, however, cannot be changed.') . '</p>' .    '<p>' . __('New users will receive an email letting them know they&#8217;ve been added as a user for your site. By default, this email will also contain their password. Uncheck the box if you do not the password to be included in the welcome email.') . '</p>' .    '<p>' . __('Remember to click the Add User button at the bottom of this screen when you are finished.') . '</p>' .    '<p><strong>' . __('For more information:') . '</strong></p>' .    '<p>' . __('<a href="http://codex.wordpress.org/Users_Add_New_SubPanel" target="_blank">Documentation on Adding New Users</a>') . '</p>' .    '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script('wp-ajax-response');wp_enqueue_script('user-profile');wp_enqueue_script('password-strength-meter');require_once ('admin-header.php');if ( isset($_GET['update']) ) {	$messages = array();	if ( is_multisite() ) {		switch ( $_GET['update'] ) {			case "newuserconfimation":				$messages[] = __('Invitation email sent to new user. A confirmation link must be clicked before their account is created.');				break;			case "add":				$messages[] = __('Invitation email sent to user. A confirmation link must be clicked for them to be added to your site.');				break;			case "addnoconfirmation":				$messages[] = __('User has been added to your site.');				break;			case "addexisting":				$messages[] = __('That user is already a member of this site.');				break;		}	} else {		if ( 'add' == $_GET['update'] )			$messages[] = __('User added.');	}}?><div class="wrap"><?php screen_icon(); ?><h2 id="add-new-user"><?php _e('Add New User') ?></h2><?php if ( isset($errors) && is_wp_error( $errors ) ) : ?>	<div class="error">		<ul>		<?php			foreach ( $errors->get_error_messages() as $err )				echo "<li>$err</li>\n";		?>		</ul>	</div><?php endif;if ( ! empty( $messages ) ) {	foreach ( $messages as $msg )		echo '<div id="message" class="updated"><p>' . $msg . '</p></div>';} ?><?php if ( isset($add_user_errors) && is_wp_error( $add_user_errors ) ) : ?>	<div class="error">		<?php			foreach ( $add_user_errors->get_error_messages() as $message )				echo "<p>$message</p>";		?>	</div><?php endif; ?><div id="ajax-response"></div><?phpif ( !is_multisite() ) {	if ( get_option('users_can_register') )		echo '<p>' . sprintf(__('Users can <a href="%1$s">register themselves</a> or you can manually create users here.'), site_url('wp-register.php')) . '</p>';	else		echo '<p>' . sprintf(__('Users cannot currently <a href="%1$s">register themselves</a>, but you can manually create users here.'), admin_url('options-general.php#users_can_register')) . '</p>';} else {	echo '<p>' . __( 'You can add new users to your site in two ways:' ) . '<ol><li> ' . __( 'Enter the username and email address of an existing user on this site.' ) . '</li><li> ' . __( 'Enter the username and the email address of a person who is not already a member of this site. Choose the username carefully, it cannot be changed.' ) . '</li></ol></p>';	echo '<p>' . __( 'That person will be sent an email asking them to click a link confirming the invite. New users will then be sent an email with a randomly generated password and a login link.' ) . '</p>';}?><form action="#add-new-user" method="post" name="adduser" id="adduser" class="add:users: validate"<?php do_action('user_new_form_tag');?>><?php wp_nonce_field('add-user') ?><?php//Load up the passed data, else set to a default.foreach ( array('user_login' => 'login', 'first_name' => 'firstname', 'last_name' => 'lastname',				'email' => 'email', 'url' => 'uri', 'role' => 'role') as $post_field => $var ) {	$var = "new_user_$var";	if ( ! isset($$var) )		$$var = isset($_POST[$post_field]) ? stripslashes($_POST[$post_field]) : '';}$new_user_send_password = !$_POST || isset($_POST['send_password']);?><table class="form-table">	<tr class="form-field form-required">		<th scope="row"><label for="user_login"><?php _e('Username'); ?> <span class="description"><?php _e('(required)'); ?></span></label>		<input name="action" type="hidden" id="action" value="adduser" /></th>		<td><input name="user_login" type="text" id="user_login" value="<?php echo esc_attr($new_user_login); ?>" aria-required="true" /></td>	</tr>	<tr class="form-field form-required">		<th scope="row"><label for="email"><?php _e('E-mail'); ?> <span class="description"><?php _e('(required)'); ?></span></label></th>		<td><input name="email" type="text" id="email" value="<?php echo esc_attr($new_user_email); ?>" /></td>	</tr><?php if ( !is_multisite() ) { ?>	<tr class="form-field">		<th scope="row"><label for="first_name"><?php _e('First Name') ?> </label></th>		<td><input name="first_name" type="text" id="first_name" value="<?php echo esc_attr($new_user_firstname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="last_name"><?php _e('Last Name') ?> </label></th>		<td><input name="last_name" type="text" id="last_name" value="<?php echo esc_attr($new_user_lastname); ?>" /></td>	</tr>	<tr class="form-field">		<th scope="row"><label for="url"><?php _e('Website') ?></label></th>		<td><input name="url" type="text" id="url" class="code" value="<?php echo esc_attr($new_user_uri); ?>" /></td>	</tr><?php if ( apply_filters('show_password_fields', true) ) : ?>	<tr class="form-field form-required">		<th scope="row"><label for="pass1"><?php _e('Password'); ?> <span class="description"><?php /* translators: password input field */_e('(twice, required)'); ?></span></label></th>		<td><input name="pass1" type="password" id="pass1" autocomplete="off" />		<br />		<input name="pass2" type="password" id="pass2" autocomplete="off" />		<br />		<div id="pass-strength-result"><?php _e('Strength indicator'); ?></div>		<p class="description indicator-hint"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! " ? $ % ^ &amp; ).'); ?></p>		</td>	</tr>	<tr>		<th scope="row"><label for="send_password"><?php _e('Send Password?') ?></label></th>		<td><label for="send_password"><input type="checkbox" name="send_password" id="send_password" <?php checked($new_user_send_password, true); ?> /> <?php _e('Send this password to the new user by email.'); ?></label></td>	</tr><?php endif; ?><?php } // !is_multisite ?>	<tr class="form-field">		<th scope="row"><label for="role"><?php _e('Role'); ?></label></th>		<td><select name="role" id="role">			<?php			if ( !$new_user_role )				$new_user_role = !empty($current_role) ? $current_role : get_option('default_role');			wp_dropdown_roles($new_user_role);			?>			</select>		</td>	</tr>	<?php if ( is_multisite() && is_super_admin() ) { ?>	<tr>		<th scope="row"><label for="noconfirmation"><?php _e('Skip Confirmation Email') ?></label></th>		<td><label for="noconfirmation"><input type="checkbox" name="noconfirmation" id="noconfirmation" value="1" /> <?php _e( 'Site administrators can add a user without sending the confirmation email.' ); ?></label></td>	</tr>	<?php } ?></table><p class="submit">	<input name="adduser" type="submit" id="addusersub" class="button-primary" value="<?php esc_attr_e('Add User') ?>" /></p></form></div><?phpinclude('./admin-footer.php');?>
<?php/** * Permalink settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __('Permalink Settings');$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen provides some common options for your default permalinks URL structure.') . '</p>' .	'<p>' . __('If you pick an option other than Default, your general URL path with structure tags, terms surrounded by <code>%</code>, will also appear in the custom structure field and your path can be further modified there.') . '</p>' .	'<p>' . __('When you assign multiple categories or tags to a post, only one can show up in the permalink: the lowest numbered category. This applies if your custom structure includes <code>%category%</code> or <code>%tag%</code>.') . '</p>' .	'<p>' . __('Note that permalinks beginning with the category, tag, author or postname structure tags require more advanced server resources. Double-check your hosting details to make sure those are in place or start your permalinks with other structure tags.') . '</p>' .	'<p>' . __('The Optional fields let you customize the &#8220;category&#8221; and &#8220;tag&#8221; base names that will appear in archive URLs. For example, the page listing all posts in the &#8220;Uncategorized&#8221; category could be <code>/topics/uncategorized</code> instead of <code>/category/uncategorized</code>.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Permalinks_SubPanel" target="_blank">Permalinks Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Using_Permalinks" target="_blank">Using Permalinks Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');/** * Display JavaScript on the page. * * @package WordPress * @subpackage Permalink_Settings_Panel */function add_js() {?><script type="text/javascript">//<![CDATA[function GetElementsWithClassName(elementName, className) {var allElements = document.getElementsByTagName(elementName);var elemColl = new Array();for (i = 0; i < allElements.length; i++) {if (allElements[i].className == className) {elemColl[elemColl.length] = allElements[i];}}return elemColl;}function upit() {var inputColl = GetElementsWithClassName('input', 'tog');var structure = document.getElementById('permalink_structure');var inputs = '';for (i = 0; i < inputColl.length; i++) {if ( inputColl[i].checked && inputColl[i].value != '') {inputs += inputColl[i].value + ' ';}}inputs = inputs.substr(0,inputs.length - 1);if ( 'custom' != inputs )structure.value = inputs;}function blurry() {if (!document.getElementById) return;var structure = document.getElementById('permalink_structure');structure.onfocus = function () { document.getElementById('custom_selection').checked = 'checked'; }var aInputs = document.getElementsByTagName('input');for (var i = 0; i < aInputs.length; i++) {aInputs[i].onclick = aInputs[i].onkeyup = upit;}}window.onload = blurry;//]]></script><?php}add_filter('admin_head', 'add_js');include('./admin-header.php');$home_path = get_home_path();$iis7_permalinks = iis7_supports_permalinks();$prefix = $blog_prefix = '';if ( ! got_mod_rewrite() && ! $iis7_permalinks )	$prefix = '/index.php';if ( is_multisite() && !is_subdomain_install() && is_main_site() )	$blog_prefix = '/blog';if ( isset($_POST['permalink_structure']) || isset($_POST['category_base']) ) {	check_admin_referer('update-permalink');	if ( isset( $_POST['permalink_structure'] ) ) {		if ( isset( $_POST['selection'] ) && 'custom' != $_POST['selection'] )			$permalink_structure = $_POST['selection'];		else			$permalink_structure = $_POST['permalink_structure'];		if ( ! empty( $permalink_structure ) ) {			$permalink_structure = preg_replace( '#/+#', '/', '/' . str_replace( '#', '', $permalink_structure ) );			if ( $prefix && $blog_prefix )				$permalink_structure = $prefix . preg_replace( '#^/?index\.php#', '', $permalink_structure );			else				$permalink_structure = $blog_prefix . $permalink_structure;		}		$wp_rewrite->set_permalink_structure( $permalink_structure );	}	if ( isset( $_POST['category_base'] ) ) {		$category_base = $_POST['category_base'];		if ( ! empty( $category_base ) )			$category_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $category_base ) );		$wp_rewrite->set_category_base( $category_base );	}	if ( isset( $_POST['tag_base'] ) ) {		$tag_base = $_POST['tag_base'];		if ( ! empty( $tag_base ) )			$tag_base = $blog_prefix . preg_replace('#/+#', '/', '/' . str_replace( '#', '', $tag_base ) );		$wp_rewrite->set_tag_base( $tag_base );	}}$permalink_structure = get_option('permalink_structure');$category_base = get_option('category_base');$tag_base = get_option( 'tag_base' );if ( $iis7_permalinks ) {	if ( ( ! file_exists($home_path . 'web.config') && win_is_writable($home_path) ) || win_is_writable($home_path . 'web.config') )		$writable = true;	else		$writable = false;} else {	if ( ( ! file_exists($home_path . '.htaccess') && is_writable($home_path) ) || is_writable($home_path . '.htaccess') )		$writable = true;	else		$writable = false;}if ( $wp_rewrite->using_index_permalinks() )	$usingpi = true;else	$usingpi = false;$wp_rewrite->flush_rules();if (isset($_POST['submit'])) : ?><div id="message" class="updated"><p><?phpif ( ! is_multisite() ) {	if ( $iis7_permalinks ) {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your web.config now');		else if ( $permalink_structure && ! $usingpi && $writable )			_e('Permalink structure updated. Remove write access on web.config file now!');		else			_e('Permalink structure updated');	} else {		if ( $permalink_structure && ! $usingpi && ! $writable )			_e('You should update your .htaccess now.');		else			_e('Permalink structure updated.');	}} else {	_e('Permalink structure updated.');}?></p></div><?php endif; ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form" action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>  <p><?php _e('By default WordPress uses web <abbr title="Universal Resource Locator">URL</abbr>s which have question marks and lots of numbers in them, however WordPress offers you the ability to create a custom URL structure for your permalinks and archives. This can improve the aesthetics, usability, and forward-compatibility of your links. A <a href="http://codex.wordpress.org/Using_Permalinks">number of tags are available</a>, and here are some examples to get you started.'); ?></p><?phpif ( is_multisite() && !is_subdomain_install() && is_main_site() ) {	$permalink_structure = preg_replace( '|^/?blog|', '', $permalink_structure );	$category_base = preg_replace( '|^/?blog|', '', $category_base );	$tag_base = preg_replace( '|^/?blog|', '', $tag_base );}$structures = array(	'',	$prefix . '/%year%/%monthnum%/%day%/%postname%/',	$prefix . '/%year%/%monthnum%/%postname%/',	$prefix . '/archives/%post_id%'	);?><h3><?php _e('Common settings'); ?></h3><table class="form-table">	<tr>		<th><label><input name="selection" type="radio" value="" class="tog" <?php checked('', $permalink_structure); ?> /> <?php _e('Default'); ?></label></th>		<td><code><?php echo get_option('home'); ?>/?p=123</code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[1]); ?>" class="tog" <?php checked($structures[1], $permalink_structure); ?> /> <?php _e('Day and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/' . date('d') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[2]); ?>" class="tog" <?php checked($structures[2], $permalink_structure); ?> /> <?php _e('Month and name'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix . '/' . date('Y') . '/' . date('m') . '/sample-post/'; ?></code></td>	</tr>	<tr>		<th><label><input name="selection" type="radio" value="<?php echo esc_attr($structures[3]); ?>" class="tog" <?php checked($structures[3], $permalink_structure); ?> /> <?php _e('Numeric'); ?></label></th>		<td><code><?php echo get_option('home') . $blog_prefix . $prefix; ?>/archives/123</code></td>	</tr>	<tr>		<th>			<label><input name="selection" id="custom_selection" type="radio" value="custom" class="tog" <?php checked( !in_array($permalink_structure, $structures) ); ?> />			<?php _e('Custom Structure'); ?>			</label>		</th>		<td>			<?php echo $blog_prefix; ?>			<input name="permalink_structure" id="permalink_structure" type="text" value="<?php echo esc_attr($permalink_structure); ?>" class="regular-text code" />		</td>	</tr></table><h3><?php _e('Optional'); ?></h3><?php if ( $is_apache || $iis7_permalinks ) : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <kbd>topics</kbd> as your category base would make your category links like <code>http://example.org/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php else : ?>	<p><?php _e('If you like, you may enter custom structures for your category and tag <abbr title="Universal Resource Locator">URL</abbr>s here. For example, using <code>topics</code> as your category base would make your category links like <code>http://example.org/index.php/topics/uncategorized/</code>. If you leave these blank the defaults will be used.') ?></p><?php endif; ?><table class="form-table">	<tr>		<th><label for="category_base"><?php /* translators: prefix for category permalinks */ _e('Category base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="category_base" id="category_base" type="text" value="<?php echo esc_attr( $category_base ); ?>" class="regular-text code" /></td>	</tr>	<tr>		<th><label for="tag_base"><?php _e('Tag base'); ?></label></th>		<td><?php echo $blog_prefix; ?> <input name="tag_base" id="tag_base" type="text" value="<?php echo esc_attr($tag_base); ?>" class="regular-text code" /></td>	</tr>	<?php do_settings_fields('permalink', 'optional'); ?></table><?php do_settings_sections('permalink'); ?><p class="submit">	<input type="submit" name="submit" class="button-primary" value="<?php esc_attr_e('Save Changes') ?>" /></p>  </form><?php if ( !is_multisite() ) { ?><?php if ( $iis7_permalinks ) :	if ( isset($_POST['submit']) && $permalink_structure && ! $usingpi && ! $writable ) :		if ( file_exists($home_path . 'web.config') ) : ?><p><?php _e('If your <code>web.config</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this rule inside of the <code>/&lt;configuration&gt;/&lt;system.webServer&gt;/&lt;rewrite&gt;/&lt;rules&gt;</code> element in <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="9" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules()); ?></textarea></p></form><p><?php _e('If you temporarily make your <code>web.config</code> file writable for us to generate rewrite rules automatically, do not forget to revert the permissions after rule has been saved.')  ?></p>		<?php else : ?><p><?php _e('If the root directory of your site were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so this is the url rewrite rule you should have in your <code>web.config</code> file. Create a new file, called <code>web.config</code> in the root directory of your site. Click in the field and press <kbd>CTRL + a</kbd> to select all. Then insert this code into the <code>web.config</code> file.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="18" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->iis7_url_rewrite_rules(true)); ?></textarea></p></form><p><?php _e('If you temporarily make your site&#8217;s root directory writable for us to generate the <code>web.config</code> file automatically, do not forget to revert the permissions after the file has been created.')  ?></p>		<?php endif; ?>	<?php endif; ?><?php else :	if ( $permalink_structure && ! $usingpi && ! $writable ) : ?><p><?php _e('If your <code>.htaccess</code> file were <a href="http://codex.wordpress.org/Changing_File_Permissions">writable</a>, we could do this automatically, but it isn&#8217;t so these are the mod_rewrite rules you should have in your <code>.htaccess</code> file. Click in the field and press <kbd>CTRL + a</kbd> to select all.') ?></p><form action="options-permalink.php" method="post"><?php wp_nonce_field('update-permalink') ?>	<p><textarea rows="6" class="large-text readonly" name="rules" id="rules" readonly="readonly"><?php echo esc_html($wp_rewrite->mod_rewrite_rules()); ?></textarea></p></form>	<?php endif; ?><?php endif; ?><?php } // multisite ?></div><?php require('./admin-footer.php'); ?>
<?php/** * WordPress Roles and Capabilities. * * @package WordPress * @subpackage User *//** * WordPress User Roles. * * The role option is simple, the structure is organized by role name that store * the name in value of the 'name' key. The capabilities are stored as an array * in the value of the 'capability' key. * * <code> * array ( *		'rolename' => array ( *			'name' => 'rolename', *			'capabilities' => array() *		) * ) * </code> * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Roles {	/**	 * List of roles and capabilities.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles;	/**	 * List of the role objects.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_objects = array();	/**	 * List of role names.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $role_names = array();	/**	 * Option name for storing role list.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $role_key;	/**	 * Whether to use the database for retrieval and storage.	 *	 * @since 2.1.0	 * @access public	 * @var bool	 */	var $use_db = true;	/**	 * PHP4 Constructor - Call {@link WP_Roles::_init()} method.	 *	 * @since 2.0.0	 * @access public	 *	 * @return WP_Roles	 */	function WP_Roles() {		$this->_init();	}	/**	 * Set up the object properties.	 *	 * The role key is set to the current prefix for the $wpdb object with	 * 'user_roles' appended. If the $wp_user_roles global is set, then it will	 * be used and the role option will not be updated or used.	 *	 * @since 2.1.0	 * @access protected	 * @uses $wpdb Used to get the database prefix.	 * @global array $wp_user_roles Used to set the 'roles' property value.	 */	function _init () {		global $wpdb, $wp_user_roles;		$this->role_key = $wpdb->prefix . 'user_roles';		if ( ! empty( $wp_user_roles ) ) {			$this->roles = $wp_user_roles;			$this->use_db = false;		} else {			$this->roles = get_option( $this->role_key );		}		if ( empty( $this->roles ) )			return;		$this->role_objects = array();		$this->role_names =  array();		foreach ( (array) $this->roles as $role => $data ) {			$this->role_objects[$role] = new WP_Role( $role, $this->roles[$role]['capabilities'] );			$this->role_names[$role] = $this->roles[$role]['name'];		}	}	/**	 * Add role name with capabilities to list.	 *	 * Updates the list of roles, if the role doesn't already exist.	 *	 * The capabilities are defined in the following format `array( 'read' => true );`	 * To explicitly deny a role a capability you set the value for that capability to false.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $display_name Role display name.	 * @param array $capabilities List of role capabilities in the above format.	 * @return null|WP_Role WP_Role object if role is added, null if already exists.	 */	function add_role( $role, $display_name, $capabilities = array() ) {		if ( isset( $this->roles[$role] ) )			return;		$this->roles[$role] = array(			'name' => $display_name,			'capabilities' => $capabilities			);		if ( $this->use_db )			update_option( $this->role_key, $this->roles );		$this->role_objects[$role] = new WP_Role( $role, $capabilities );		$this->role_names[$role] = $display_name;		return $this->role_objects[$role];	}	/**	 * Remove role by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( ! isset( $this->role_objects[$role] ) )			return;		unset( $this->role_objects[$role] );		unset( $this->role_names[$role] );		unset( $this->roles[$role] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Add capability to role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 * @param bool $grant Optional, default is true. Whether role is capable of performing capability.	 */	function add_cap( $role, $cap, $grant = true ) {		$this->roles[$role]['capabilities'][$cap] = $grant;		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Remove capability from role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param string $cap Capability name.	 */	function remove_cap( $role, $cap ) {		unset( $this->roles[$role]['capabilities'][$cap] );		if ( $this->use_db )			update_option( $this->role_key, $this->roles );	}	/**	 * Retrieve role object by name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @return object|null Null, if role does not exist. WP_Role object, if found.	 */	function &get_role( $role ) {		if ( isset( $this->role_objects[$role] ) )			return $this->role_objects[$role];		else			return null;	}	/**	 * Retrieve list of role names.	 *	 * @since 2.0.0	 * @access public	 *	 * @return array List of role names.	 */	function get_names() {		return $this->role_names;	}	/**	 * Whether role name is currently in the list of available roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name to look up.	 * @return bool	 */	function is_role( $role )	{		return isset( $this->role_names[$role] );	}}/** * WordPress Role class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_Role {	/**	 * Role name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $name;	/**	 * List of capabilities the role contains.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $capabilities;	/**	 * PHP4 Constructor - Set up object properties.	 *	 * The list of capabilities, must have the key as the name of the capability	 * and the value a boolean of whether it is granted to the role.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 * @param array $capabilities List of capabilities.	 * @return WP_Role	 */	function WP_Role( $role, $capabilities ) {		$this->name = $role;		$this->capabilities = $capabilities;	}	/**	 * Assign role a capability.	 *	 * @see WP_Roles::add_cap() Method uses implementation for role.	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether role has capability privilege.	 */	function add_cap( $cap, $grant = true ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		$this->capabilities[$cap] = $grant;		$wp_roles->add_cap( $this->name, $cap, $grant );	}	/**	 * Remove capability from role.	 *	 * This is a container for {@link WP_Roles::remove_cap()} to remove the	 * capability from the role. That is to say, that {@link	 * WP_Roles::remove_cap()} implements the functionality, but it also makes	 * sense to use this class, because you don't need to enter the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		unset( $this->capabilities[$cap] );		$wp_roles->remove_cap( $this->name, $cap );	}	/**	 * Whether role has capability.	 *	 * The capabilities is passed through the 'role_has_cap' filter. The first	 * parameter for the hook is the list of capabilities the class has	 * assigned. The second parameter is the capability name to look for. The	 * third and final parameter for the hook is the role name.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @return bool True, if user has capability. False, if doesn't have capability.	 */	function has_cap( $cap ) {		$capabilities = apply_filters( 'role_has_cap', $this->capabilities, $cap, $this->name );		if ( !empty( $capabilities[$cap] ) )			return $capabilities[$cap];		else			return false;	}}/** * WordPress User class. * * @since 2.0.0 * @package WordPress * @subpackage User */class WP_User {	/**	 * User data container.	 *	 * This will be set as properties of the object.	 *	 * @since 2.0.0	 * @access private	 * @var array	 */	var $data;	/**	 * The user's ID.	 *	 * @since 2.1.0	 * @access public	 * @var int	 */	var $ID = 0;	/**	 * The deprecated user's ID.	 *	 * @since 2.0.0	 * @access public	 * @deprecated Use WP_User::$ID	 * @see WP_User::$ID	 * @var int	 */	var $id = 0;	/**	 * The individual capabilities the user has been given.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $caps = array();	/**	 * User metadata option name.	 *	 * @since 2.0.0	 * @access public	 * @var string	 */	var $cap_key;	/**	 * The roles the user is part of.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $roles = array();	/**	 * All capabilities the user has, including individual and role based.	 *	 * @since 2.0.0	 * @access public	 * @var array	 */	var $allcaps = array();	/**	 * First name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $first_name = '';	/**	 * Last name of the user.	 *	 * Created to prevent notices.	 *	 * @since 2.7.0	 * @access public	 * @var string	 */	var $last_name = '';	/**	 * The filter context applied to user data fields.	 *	 * @since 2.9.0	 * @access private	 * @var string	 */	var $filter = null;	/**	 * PHP4 Constructor - Sets up the object properties.	 *	 * Retrieves the userdata and then assigns all of the data keys to direct	 * properties of the object. Calls {@link WP_User::_init_caps()} after	 * setting up the object's user data properties.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int|string $id User's ID or username	 * @param int $name Optional. User's username	 * @return WP_User	 */	function WP_User( $id, $name = '' ) {		if ( empty( $id ) && empty( $name ) )			return;		if ( ! is_numeric( $id ) ) {			$name = $id;			$id = 0;		}		if ( ! empty( $id ) )			$this->data = get_userdata( $id );		else			$this->data = get_userdatabylogin( $name );		if ( empty( $this->data->ID ) )			return;		foreach ( get_object_vars( $this->data ) as $key => $value ) {			$this->{$key} = $value;		}		$this->id = $this->ID;		$this->_init_caps();	}	/**	 * Set up capability object properties.	 *	 * Will set the value for the 'cap_key' property to current database table	 * prefix, followed by 'capabilities'. Will then check to see if the	 * property matching the 'cap_key' exists and is an array. If so, it will be	 * used.	 *	 * @since 2.1.0	 *	 * @param string $cap_key Optional capability key	 * @access protected	 */	function _init_caps( $cap_key = '' ) {		global $wpdb;		if ( empty($cap_key) )			$this->cap_key = $wpdb->prefix . 'capabilities';		else			$this->cap_key = $cap_key;		$this->caps = &$this->{$this->cap_key};		if ( ! is_array( $this->caps ) )			$this->caps = array();		$this->get_role_caps();	}	/**	 * Retrieve all of the role capabilities and merge with individual capabilities.	 *	 * All of the capabilities of the roles the user belongs to are merged with	 * the users individual roles. This also means that the user can be denied	 * specific roles that their role might have, but the specific user isn't	 * granted permission to.	 *	 * @since 2.0.0	 * @uses $wp_roles	 * @access public	 */	function get_role_caps() {		global $wp_roles;		if ( ! isset( $wp_roles ) )			$wp_roles = new WP_Roles();		//Filter out caps that are not role names and assign to $this->roles		if ( is_array( $this->caps ) )			$this->roles = array_filter( array_keys( $this->caps ), array( &$wp_roles, 'is_role' ) );		//Build $allcaps from role caps, overlay user's $caps		$this->allcaps = array();		foreach ( (array) $this->roles as $role ) {			$the_role =& $wp_roles->get_role( $role );			$this->allcaps = array_merge( (array) $this->allcaps, (array) $the_role->capabilities );		}		$this->allcaps = array_merge( (array) $this->allcaps, (array) $this->caps );	}	/**	 * Add role to user.	 *	 * Updates the user's meta data option with capabilities and roles.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function add_role( $role ) {		$this->caps[$role] = true;		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Remove role from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function remove_role( $role ) {		if ( !in_array($role, $this->roles) )			return;		unset( $this->caps[$role] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();	}	/**	 * Set the role of the user.	 *	 * This will remove the previous roles of the user and assign the user the	 * new one. You can set the role to an empty string and it will remove all	 * of the roles from the user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $role Role name.	 */	function set_role( $role ) {		foreach ( (array) $this->roles as $oldrole )			unset( $this->caps[$oldrole] );		if ( !empty( $role ) ) {			$this->caps[$role] = true;			$this->roles = array( $role => true );		} else {			$this->roles = false;		}		update_user_meta( $this->ID, $this->cap_key, $this->caps );		$this->get_role_caps();		$this->update_user_level_from_caps();		do_action( 'set_user_role', $this->ID, $role );	}	/**	 * Choose the maximum level the user has.	 *	 * Will compare the level from the $item parameter against the $max	 * parameter. If the item is incorrect, then just the $max parameter value	 * will be returned.	 *	 * Used to get the max level based on the capabilities the user has. This	 * is also based on roles, so if the user is assigned the Administrator role	 * then the capability 'level_10' will exist and the user will get that	 * value.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $max Max level of user.	 * @param string $item Level capability name.	 * @return int Max Level.	 */	function level_reduction( $max, $item ) {		if ( preg_match( '/^level_(10|[0-9])$/i', $item, $matches ) ) {			$level = intval( $matches[1] );			return max( $max, $level );		} else {			return $max;		}	}	/**	 * Update the maximum user level for the user.	 *	 * Updates the 'user_level' user metadata (includes prefix that is the	 * database table prefix) with the maximum user level. Gets the value from	 * the all of the capabilities that the user has.	 *	 * @since 2.0.0	 * @access public	 */	function update_user_level_from_caps() {		global $wpdb;		$this->user_level = array_reduce( array_keys( $this->allcaps ), array( &$this, 'level_reduction' ), 0 );		update_user_meta( $this->ID, $wpdb->prefix . 'user_level', $this->user_level );	}	/**	 * Add capability and grant or deny access to capability.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 * @param bool $grant Whether to grant capability to user.	 */	function add_cap( $cap, $grant = true ) {		$this->caps[$cap] = $grant;		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove capability from user.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string $cap Capability name.	 */	function remove_cap( $cap ) {		if ( empty( $this->caps[$cap] ) )			return;		unset( $this->caps[$cap] );		update_user_meta( $this->ID, $this->cap_key, $this->caps );	}	/**	 * Remove all of the capabilities of the user.	 *	 * @since 2.1.0	 * @access public	 */	function remove_all_caps() {		global $wpdb;		$this->caps = array();		delete_user_meta( $this->ID, $this->cap_key );		delete_user_meta( $this->ID, $wpdb->prefix . 'user_level' );		$this->get_role_caps();	}	/**	 * Whether user has capability or role name.	 *	 * This is useful for looking up whether the user has a specific role	 * assigned to the user. The second optional parameter can also be used to	 * check for capabilities against a specfic post.	 *	 * @since 2.0.0	 * @access public	 *	 * @param string|int $cap Capability or role name to search.	 * @param int $post_id Optional. Post ID to check capability against specific post.	 * @return bool True, if user has capability; false, if user does not have capability.	 */	function has_cap( $cap ) {		if ( is_numeric( $cap ) ) {			_deprecated_argument( __FUNCTION__, '2.0', __('Usage of user levels by plugins and themes is deprecated. Use roles and capabilities instead.') );			$cap = $this->translate_level_to_cap( $cap );		}		$args = array_slice( func_get_args(), 1 );		$args = array_merge( array( $cap, $this->ID ), $args );		$caps = call_user_func_array( 'map_meta_cap', $args );		// Multisite super admin has all caps by definition, Unless specifically denied.		if ( is_multisite() && is_super_admin() ) {			if ( in_array('do_not_allow', $caps) )				return false;			return true;		}		// Must have ALL requested caps		$capabilities = apply_filters( 'user_has_cap', $this->allcaps, $caps, $args );		foreach ( (array) $caps as $cap ) {			//echo "Checking cap $cap<br />";			if ( empty( $capabilities[$cap] ) || !$capabilities[$cap] )				return false;		}		return true;	}	/**	 * Convert numeric level to level capability name.	 *	 * Prepends 'level_' to level number.	 *	 * @since 2.0.0	 * @access public	 *	 * @param int $level Level number, 1 to 10.	 * @return string	 */	function translate_level_to_cap( $level ) {		return 'level_' . $level;	}	/**	 * Set the blog to operate on. Defaults to the current blog.	 *	 * @since 3.0.0	 *	 * @param int $blog_id Optional Blog ID, defaults to current blog.	 */	function for_blog( $blog_id = '' ) {		global $wpdb;		if ( ! empty( $blog_id ) )			$cap_key = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';		else			$cap_key = '';		$this->_init_caps( $cap_key );	}}/** * Map meta capabilities to primitive capabilities. * * This does not actually compare whether the user ID has the actual capability, * just what the capability or capabilities are. Meta capability list value can * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post', * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'. * * @since 2.0.0 * * @param string $cap Capability name. * @param int $user_id User ID. * @return array Actual capabilities for meta capability. */function map_meta_cap( $cap, $user_id ) {	$args = array_slice( func_get_args(), 2 );	$caps = array();	switch ( $cap ) {	case 'remove_user':		$caps[] = 'remove_users';		break;	case 'delete_user':		$caps[] = 'delete_users';		break;	case 'promote_user':		$caps[] = 'promote_users';		break;	case 'edit_user':		// Allow user to edit itself		if ( isset( $args[0] ) && $user_id == $args[0] )			break;		// Fall through	case 'edit_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = 'edit_users'; // Explicit due to primitive fall through		break;	case 'delete_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->delete_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( '' != $post->post_author ) {			$post_author_data = get_userdata( $post->post_author );		} else {			//No author set yet so default to current user for cap checks			$post_author_data = $author_data;		}		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'delete_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_posts';			} else {				// If the post is draft...				$caps[] = 'delete_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'delete_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'delete_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'delete_private_posts';		}		break;	case 'delete_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ('' != $page->post_author) {			$page_author_data = get_userdata( $page->post_author );		} else {			//No author set yet so default to current user for cap checks			$page_author_data = $author_data;		}		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( $page->post_status == 'publish' ) {				$caps[] = 'delete_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'delete_published_pages';			} else {				// If the page is draft...				$caps[] = 'delete_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'delete_others_pages';			// The page is published, extra cap required.			if ( $page->post_status == 'publish' )				$caps[] = 'delete_published_pages';			elseif ( $page->post_status == 'private' )				$caps[] = 'delete_private_pages';		}		break;		// edit_post breaks down to edit_posts, edit_published_posts, or		// edit_others_posts	case 'edit_post':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->edit_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		$post_author_data = get_userdata( $post->post_author );		//echo "current user id : $user_id, post author id: " . $post_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID ) {			// If the post is published...			if ( 'publish' == $post->post_status ) {				$caps[] = 'edit_published_posts';			} elseif ( 'trash' == $post->post_status ) {				if ('publish' == get_post_meta($post->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_posts';			} else {				// If the post is draft...				$caps[] = 'edit_posts';			}		} else {			// The user is trying to edit someone else's post.			$caps[] = 'edit_others_posts';			// The post is published, extra cap required.			if ( 'publish' == $post->post_status )				$caps[] = 'edit_published_posts';			elseif ( 'private' == $post->post_status )				$caps[] = 'edit_private_posts';		}		break;	case 'edit_page':		$author_data = get_userdata( $user_id );		//echo "post ID: {$args[0]}<br />";		$page = get_page( $args[0] );		$page_author_data = get_userdata( $page->post_author );		//echo "current user id : $user_id, page author id: " . $page_author_data->ID . "<br />";		// If the user is the author...		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID ) {			// If the page is published...			if ( 'publish' == $page->post_status ) {				$caps[] = 'edit_published_pages';			} elseif ( 'trash' == $page->post_status ) {				if ('publish' == get_post_meta($page->ID, '_wp_trash_meta_status', true) )					$caps[] = 'edit_published_pages';			} else {				// If the page is draft...				$caps[] = 'edit_pages';			}		} else {			// The user is trying to edit someone else's page.			$caps[] = 'edit_others_pages';			// The page is published, extra cap required.			if ( 'publish' == $page->post_status )				$caps[] = 'edit_published_pages';			elseif ( 'private' == $page->post_status )				$caps[] = 'edit_private_pages';		}		break;	case 'read_post':		$post = get_post( $args[0] );		$post_type = get_post_type_object( $post->post_type );		if ( $post_type && 'post' != $post_type->capability_type ) {			$args = array_merge( array( $post_type->cap->read_post, $user_id ), $args );			return call_user_func_array( 'map_meta_cap', $args );		}		if ( 'private' != $post->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$post_author_data = get_userdata( $post->post_author );		if ( is_object( $post_author_data ) && $user_id == $post_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_posts';		break;	case 'read_page':		$page = get_page( $args[0] );		if ( 'private' != $page->post_status ) {			$caps[] = 'read';			break;		}		$author_data = get_userdata( $user_id );		$page_author_data = get_userdata( $page->post_author );		if ( is_object( $page_author_data ) && $user_id == $page_author_data->ID )			$caps[] = 'read';		else			$caps[] = 'read_private_pages';		break;	case 'unfiltered_upload':		if ( defined('ALLOW_UNFILTERED_UPLOADS') && ALLOW_UNFILTERED_UPLOADS && ( !is_multisite() || is_super_admin() )  )			$caps[] = $cap;		else			$caps[] = 'do_not_allow';		break;	case 'edit_files':	case 'edit_plugins':	case 'edit_themes':		if ( defined('DISALLOW_FILE_EDIT') && DISALLOW_FILE_EDIT ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_EDIT.	case 'update_plugins':	case 'delete_plugins':	case 'install_plugins':	case 'update_themes':	case 'delete_themes':	case 'install_themes':	case 'update_core':		// Disallow anything that creates, deletes, or edits core, plugin, or theme files.		// Files in uploads are excepted.		if ( defined('DISALLOW_FILE_MODS') && DISALLOW_FILE_MODS ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_FILE_MODS.	case 'unfiltered_html':		// Disallow unfiltered_html for all users, even admins and super admins.		if ( defined('DISALLOW_UNFILTERED_HTML') && DISALLOW_UNFILTERED_HTML ) {			$caps[] = 'do_not_allow';			break;		}		// Fall through if not DISALLOW_UNFILTERED_HTML	case 'delete_user':	case 'delete_users':		// If multisite these caps are allowed only for super admins.		if ( is_multisite() && !is_super_admin() )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	case 'create_users':		if ( is_multisite() && !get_site_option( 'add_new_users' ) )			$caps[] = 'do_not_allow';		else			$caps[] = $cap;		break;	default:		// If no meta caps match, return the original cap.		$caps[] = $cap;	}	return apply_filters('map_meta_cap', $caps, $cap, $user_id, $args);}/** * Whether current user has capability or role. * * @since 2.0.0 * * @param string $capability Capability or role name. * @return bool */function current_user_can( $capability ) {	$current_user = wp_get_current_user();	if ( empty( $current_user ) )		return false;	$args = array_slice( func_get_args(), 1 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$current_user, 'has_cap' ), $args );}/** * Whether current user has a capability or role for a given blog. * * @since 3.0.0 * * @param int $blog_id Blog ID * @param string $capability Capability or role name. * @return bool */function current_user_can_for_blog( $blog_id, $capability ) {	$current_user = wp_get_current_user();    if ( is_multisite() && is_super_admin() )		return true;	if ( empty( $current_user ) )		return false;	// Create new object to avoid stomping the global current_user.	$user = new WP_User( $current_user->id) ;	// Set the blog id.  @todo add blog id arg to WP_User constructor?	$user->for_blog( $blog_id );	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$user, 'has_cap' ), $args );}/** * Whether author of supplied post has capability or role. * * @since 2.9.0 * * @param int|object $post Post ID or post object. * @param string $capability Capability or role name. * @return bool */function author_can( $post, $capability ) {	if ( !$post = get_post($post) )		return false;	$author = new WP_User( $post->post_author );	if ( empty( $author ) )		return false;	$args = array_slice( func_get_args(), 2 );	$args = array_merge( array( $capability ), $args );	return call_user_func_array( array( &$author, 'has_cap' ), $args );}/** * Retrieve role object. * * @see WP_Roles::get_role() Uses method to retrieve role object. * @since 2.0.0 * * @param string $role Role name. * @return object */function get_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->get_role( $role );}/** * Add role, if it does not exist. * * @see WP_Roles::add_role() Uses method to add role. * @since 2.0.0 * * @param string $role Role name. * @param string $display_name Display name for role. * @param array $capabilities List of capabilities. * @return null|WP_Role WP_Role object if role is added, null if already exists. */function add_role( $role, $display_name, $capabilities = array() ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->add_role( $role, $display_name, $capabilities );}/** * Remove role, if it exists. * * @see WP_Roles::remove_role() Uses method to remove role. * @since 2.0.0 * * @param string $role Role name. * @return null */function remove_role( $role ) {	global $wp_roles;	if ( ! isset( $wp_roles ) )		$wp_roles = new WP_Roles();	return $wp_roles->remove_role( $role );}/** * Retrieve a list of super admins. * * @since 3.0.0 * * @uses $super_admins Super admins global variable, if set. * * @return array List of super admin logins */function get_super_admins() {	global $super_admins;	if ( isset($super_admins) )		return $super_admins;	else		return get_site_option( 'site_admins', array('admin') );}/** * Determine if user is a site admin. * * @since 3.0.0 * * @param int $user_id (Optional) The ID of a user. Defaults to the current user. * @return bool True if the user is a site admin. */function is_super_admin( $user_id = false ) {	if ( ! $user_id ) {		$current_user = wp_get_current_user();		$user_id = ! empty($current_user) ? $current_user->id : 0;	}	if ( ! $user_id )		return false;	$user = new WP_User($user_id);	if ( is_multisite() ) {		$super_admins = get_super_admins();		if ( is_array( $super_admins ) && in_array( $user->user_login, $super_admins ) )			return true;	} else {		if ( $user->has_cap('delete_users') )			return true;	}	return false;}?>
<?php/** * WordPress Post Administration API. * * @package WordPress * @subpackage Administration *//** * Rename $_POST data from form names to DB post columns. * * Manipulates $_POST directly. * * @package WordPress * @since 2.6.0 * * @param bool $update Are we updating a pre-existing post? * @param post_data array Array of post data. Defaults to the contents of $_POST. * @return object|bool WP_Error on failure, true on success. */function _wp_translate_postdata( $update = false, $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	if ( $update )		$post_data['ID'] = (int) $post_data['post_ID'];	$post_data['post_content'] = isset($post_data['content']) ? $post_data['content'] : '';	$post_data['post_excerpt'] = isset($post_data['excerpt']) ? $post_data['excerpt'] : '';	$post_data['post_parent'] = isset($post_data['parent_id'])? $post_data['parent_id'] : '';	if ( isset($post_data['trackback_url']) )		$post_data['to_ping'] = $post_data['trackback_url'];	if ( !isset($post_data['user_ID']) )		$post_data['user_ID'] = $GLOBALS['user_ID'];	if (!empty ( $post_data['post_author_override'] ) ) {		$post_data['post_author'] = (int) $post_data['post_author_override'];	} else {		if (!empty ( $post_data['post_author'] ) ) {			$post_data['post_author'] = (int) $post_data['post_author'];		} else {			$post_data['post_author'] = (int) $post_data['user_ID'];		}	}	$ptype = get_post_type_object( $post_data['post_type'] );	if ( isset($post_data['user_ID']) && ($post_data['post_author'] != $post_data['user_ID']) ) {		if ( !current_user_can( $ptype->cap->edit_others_posts ) ) {			if ( 'page' == $post_data['post_type'] ) {				return new WP_Error( 'edit_others_pages', $update ?					__( 'You are not allowed to edit pages as this user.' ) :					__( 'You are not allowed to create pages as this user.' )				);			} else {				return new WP_Error( 'edit_others_posts', $update ?					__( 'You are not allowed to edit posts as this user.' ) :					__( 'You are not allowed to post as this user.' )				);			}		}	}	// What to do based on which button they pressed	if ( isset($post_data['saveasdraft']) && '' != $post_data['saveasdraft'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['saveasprivate']) && '' != $post_data['saveasprivate'] )		$post_data['post_status'] = 'private';	if ( isset($post_data['publish']) && ( '' != $post_data['publish'] ) && ( !isset($post_data['post_status']) || $post_data['post_status'] != 'private' ) )		$post_data['post_status'] = 'publish';	if ( isset($post_data['advanced']) && '' != $post_data['advanced'] )		$post_data['post_status'] = 'draft';	if ( isset($post_data['pending']) && '' != $post_data['pending'] )		$post_data['post_status'] = 'pending';	if ( isset( $post_data['ID'] ) )		$post_id = $post_data['ID'];	else		$post_id = false;	$previous_status = $post_id ? get_post_field( 'post_status', $post_id ) : false;	// Posts 'submitted for approval' present are submitted to $_POST the same as if they were being published.	// Change status from 'publish' to 'pending' if user lacks permissions to publish or to resave published posts.	if ( isset($post_data['post_status']) && ('publish' == $post_data['post_status'] && !current_user_can( $ptype->cap->publish_posts )) )		if ( $previous_status != 'publish' || !current_user_can( 'edit_post', $post_id ) )			$post_data['post_status'] = 'pending';	if ( ! isset($post_data['post_status']) )		$post_data['post_status'] = $previous_status;	if (!isset( $post_data['comment_status'] ))		$post_data['comment_status'] = 'closed';	if (!isset( $post_data['ping_status'] ))		$post_data['ping_status'] = 'closed';	foreach ( array('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $post_data['hidden_' . $timeunit] ) && $post_data['hidden_' . $timeunit] != $post_data[$timeunit] ) {			$post_data['edit_date'] = '1';			break;		}	}	if ( !empty( $post_data['edit_date'] ) ) {		$aa = $post_data['aa'];		$mm = $post_data['mm'];		$jj = $post_data['jj'];		$hh = $post_data['hh'];		$mn = $post_data['mn'];		$ss = $post_data['ss'];		$aa = ($aa <= 0 ) ? date('Y') : $aa;		$mm = ($mm <= 0 ) ? date('n') : $mm;		$jj = ($jj > 31 ) ? 31 : $jj;		$jj = ($jj <= 0 ) ? date('j') : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$post_data['post_date'] = sprintf( "%04d-%02d-%02d %02d:%02d:%02d", $aa, $mm, $jj, $hh, $mn, $ss );		$post_data['post_date_gmt'] = get_gmt_from_date( $post_data['post_date'] );	}	return $post_data;}/** * Update an existing post with values provided in $_POST. * * @since unknown * * @param array $post_data Optional. * @return int Post ID. */function edit_post( $post_data = null ) {	if ( empty($post_data) )		$post_data = &$_POST;	$post_ID = (int) $post_data['post_ID'];	$ptype = get_post_type_object($post_data['post_type']);	if ( !current_user_can( $ptype->cap->edit_post, $post_ID ) ) {		if ( 'page' == $post_data['post_type'] )			wp_die( __('You are not allowed to edit this page.' ));		else			wp_die( __('You are not allowed to edit this post.' ));	}	// Autosave shouldn't save too soon after a real save	if ( 'autosave' == $post_data['action'] ) {		$post =& get_post( $post_ID );		$now = time();		$then = strtotime($post->post_date_gmt . ' +0000');		$delta = AUTOSAVE_INTERVAL / 2;		if ( ($now - $then) < $delta )			return $post_ID;	}	$post_data = _wp_translate_postdata( true, $post_data );	if ( 'autosave' != $post_data['action']  && 'auto-draft' == $post_data['post_status'] )		$post_data['post_status'] = 'draft';	if ( is_wp_error($post_data) )		wp_die( $post_data->get_error_message() );	if ( isset($post_data['visibility']) ) {		switch ( $post_data['visibility'] ) {			case 'public' :				$post_data['post_password'] = '';				break;			case 'password' :				unset( $post_data['sticky'] );				break;			case 'private' :				$post_data['post_status'] = 'private';				$post_data['post_password'] = '';				unset( $post_data['sticky'] );				break;		}	}	// Meta Stuff	if ( isset($post_data['meta']) && $post_data['meta'] ) {		foreach ( $post_data['meta'] as $key => $value )			update_meta( $key, $value['key'], $value['value'] );	}	if ( isset($post_data['deletemeta']) && $post_data['deletemeta'] ) {		foreach ( $post_data['deletemeta'] as $key => $value )			delete_meta( $key );	}	add_meta( $post_ID );	update_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	wp_update_post( $post_data );	// Reunite any orphaned attachments with their parent	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	if ( current_user_can( 'edit_others_posts' ) ) {		if ( !empty($post_data['sticky']) )			stick_post($post_ID);		else			unstick_post($post_ID);	}	return $post_ID;}/** * Process the post data for the bulk editing of posts. * * Updates all bulk edited posts/pages, adding (but not removing) tags and * categories. Skips pages when they would be their own parent or child. * * @since 2.7.0 * * @param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal. * @return array */function bulk_edit_posts( $post_data = null ) {	global $wpdb;	if ( empty($post_data) )		$post_data = &$_POST;	if ( isset($post_data['post_type']) )		$ptype = get_post_type_object($post_data['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			wp_die( __('You are not allowed to edit pages.'));		else			wp_die( __('You are not allowed to edit posts.'));	}	if ( -1 == $post_data['_status'] ) {		$post_data['post_status'] = null;		unset($post_data['post_status']);	} else {		$post_data['post_status'] = $post_data['_status'];	}	unset($post_data['_status']);	$post_IDs = array_map( 'intval', (array) $post_data['post'] );	$reset = array( 'post_author', 'post_status', 'post_password', 'post_parent', 'page_template', 'comment_status', 'ping_status', 'keep_private', 'tax_input', 'post_category', 'sticky' );	foreach ( $reset as $field ) {		if ( isset($post_data[$field]) && ( '' == $post_data[$field] || -1 == $post_data[$field] ) )			unset($post_data[$field]);	}	if ( isset($post_data['post_category']) ) {		if ( is_array($post_data['post_category']) && ! empty($post_data['post_category']) )			$new_cats = array_map( 'absint', $post_data['post_category'] );		else			unset($post_data['post_category']);	}	$tax_input = array();	if ( isset($post_data['tax_input'])) {		foreach ( $post_data['tax_input'] as $tax_name => $terms ) {			if ( empty($terms) )				continue;			if ( is_taxonomy_hierarchical( $tax_name ) )				$tax_input[$tax_name] = array_map( 'absint', $terms );			else {				$tax_input[$tax_name] = preg_replace( '/\s*,\s*/', ',', rtrim( trim($terms), ' ,' ) );				$tax_input[$tax_name] = explode(',', $tax_input[$tax_name]);			}		}	}	if ( isset($post_data['post_parent']) && ($parent = (int) $post_data['post_parent']) ) {		$pages = $wpdb->get_results("SELECT ID, post_parent FROM $wpdb->posts WHERE post_type = 'page'");		$children = array();		for ( $i = 0; $i < 50 && $parent > 0; $i++ ) {			$children[] = $parent;			foreach ( $pages as $page ) {				if ( $page->ID == $parent ) {					$parent = $page->post_parent;					break;				}			}		}	}	$updated = $skipped = $locked = array();	foreach ( $post_IDs as $post_ID ) {		$post_type_object = get_post_type_object( get_post_type( $post_ID ) );		if ( !isset( $post_type_object ) || ( isset($children) && in_array($post_ID, $children) ) || !current_user_can( $post_type_object->cap->edit_post, $post_ID ) ) {			$skipped[] = $post_ID;			continue;		}		if ( wp_check_post_lock( $post_ID ) ) {			$locked[] = $post_ID;			continue;		}		$tax_names = get_object_taxonomies( get_post($post_ID) );		foreach ( $tax_names as $tax_name ) {			$taxonomy_obj = get_taxonomy($tax_name);			if (  isset( $tax_input[$tax_name]) && current_user_can( $taxonomy_obj->cap->assign_terms ) )				$new_terms = $tax_input[$tax_name];			else				$new_terms = array();			if ( $taxonomy_obj->hierarchical )				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'ids') );			else				$current_terms = (array) wp_get_object_terms( $post_ID, $tax_name, array('fields' => 'names') );			$post_data['tax_input'][$tax_name] = array_merge( $current_terms, $new_terms );		}		if ( isset($new_cats) && in_array( 'category', $tax_names ) ) {			$cats = (array) wp_get_post_categories($post_ID);			$post_data['post_category'] = array_unique( array_merge($cats, $new_cats) );			unset( $post_data['tax_input']['category'] );		}		$post_data['ID'] = $post_ID;		$updated[] = wp_update_post( $post_data );		if ( isset( $post_data['sticky'] ) && current_user_can( 'edit_others_posts' ) ) {			if ( 'sticky' == $post_data['sticky'] )				stick_post( $post_ID );			else				unstick_post( $post_ID );		}	}	return array( 'updated' => $updated, 'skipped' => $skipped, 'locked' => $locked );}/** * Default post information to use when populating the "Write Post" form. * * @since unknown * *@param string A post type string, defaults to 'post'. * @return object stdClass object containing all the default post data as attributes */function get_default_post_to_edit( $post_type = 'post', $create_in_db = false ) {	global $wpdb;	$post_title = '';	if ( !empty( $_REQUEST['post_title'] ) )		$post_title = esc_html( stripslashes( $_REQUEST['post_title'] ));	$post_content = '';	if ( !empty( $_REQUEST['content'] ) )		$post_content = esc_html( stripslashes( $_REQUEST['content'] ));	$post_excerpt = '';	if ( !empty( $_REQUEST['excerpt'] ) )		$post_excerpt = esc_html( stripslashes( $_REQUEST['excerpt'] ));	if ( $create_in_db ) {		// Cleanup old auto-drafts more than 7 days old		$old_posts = $wpdb->get_col( "SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date" );		foreach ( (array) $old_posts as $delete )			wp_delete_post( $delete, true ); // Force delete		$post = get_post( wp_insert_post( array( 'post_title' => __( 'Auto Draft' ), 'post_type' => $post_type, 'post_status' => 'auto-draft' ) ) );	} else {		$post->ID = 0;		$post->post_author = '';		$post->post_date = '';		$post->post_date_gmt = '';		$post->post_password = '';		$post->post_type = $post_type;		$post->post_status = 'draft';		$post->to_ping = '';		$post->pinged = '';		$post->comment_status = get_option( 'default_comment_status' );		$post->ping_status = get_option( 'default_ping_status' );		$post->post_pingback = get_option( 'default_pingback_flag' );		$post->post_category = get_option( 'default_category' );		$post->page_template = 'default';		$post->post_parent = 0;		$post->menu_order = 0;	}	$post->post_content = apply_filters( 'default_content', $post_content, $post );	$post->post_title   = apply_filters( 'default_title',   $post_title, $post   );	$post->post_excerpt = apply_filters( 'default_excerpt', $post_excerpt, $post );	$post->post_name = '';	return $post;}/** * Get the default page information to use. * * @since 2.5.0 * * @return object stdClass object containing all the default post data as attributes */function get_default_page_to_edit() {	$page = get_default_post_to_edit();	$page->post_type = 'page';	return $page;}/** * Get an existing post and format it for editing. * * @since unknown * * @param unknown_type $id * @return unknown */function get_post_to_edit( $id ) {	$post = get_post( $id, OBJECT, 'edit' );	if ( $post->post_type == 'page' )		$post->page_template = get_post_meta( $id, '_wp_page_template', true );	return $post;}/** * Determine if a post exists based on title, content, and date * * @since unknown * * @param string $title Post title * @param string $content Optional post content * @param string $date Optional post date * @return int Post ID if post exists, 0 otherwise. */function post_exists($title, $content = '', $date = '') {	global $wpdb;	$post_title = stripslashes( sanitize_post_field( 'post_title', $title, 0, 'db' ) );	$post_content = stripslashes( sanitize_post_field( 'post_content', $content, 0, 'db' ) );	$post_date = stripslashes( sanitize_post_field( 'post_date', $date, 0, 'db' ) );	$query = "SELECT ID FROM $wpdb->posts WHERE 1=1";	$args = array();	if ( !empty ( $date ) ) {		$query .= ' AND post_date = %s';		$args[] = $post_date;	}	if ( !empty ( $title ) ) {		$query .= ' AND post_title = %s';		$args[] = $post_title;	}	if ( !empty ( $content ) ) {		$query .= 'AND post_content = %s';		$args[] = $post_content;	}	if ( !empty ( $args ) )		return $wpdb->get_var( $wpdb->prepare($query, $args) );	return 0;}/** * Creates a new post from the "Write Post" form using $_POST information. * * @since unknown * * @return unknown */function wp_write_post() {	global $user_ID;	if ( isset($_POST['post_type']) )		$ptype = get_post_type_object($_POST['post_type']);	else		$ptype = get_post_type_object('post');	if ( !current_user_can( $ptype->cap->edit_posts ) ) {		if ( 'page' == $ptype->name )			return new WP_Error( 'edit_pages', __( 'You are not allowed to create pages on this site.' ) );		else			return new WP_Error( 'edit_posts', __( 'You are not allowed to create posts or drafts on this site.' ) );	}	// Check for autosave collisions	// Does this need to be updated? ~ Mark	$temp_id = false;	if ( isset($_POST['temp_ID']) ) {		$temp_id = (int) $_POST['temp_ID'];		if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )			$draft_ids = array();		foreach ( $draft_ids as $temp => $real )			if ( time() + $temp > 86400 ) // 1 day: $temp is equal to -1 * time( then )				unset($draft_ids[$temp]);		if ( isset($draft_ids[$temp_id]) ) { // Edit, don't write			$_POST['post_ID'] = $draft_ids[$temp_id];			unset($_POST['temp_ID']);			update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );			return edit_post();		}	}	$translated = _wp_translate_postdata( false );	if ( is_wp_error($translated) )		return $translated;	if ( isset($_POST['visibility']) ) {		switch ( $_POST['visibility'] ) {			case 'public' :				$_POST['post_password'] = '';				break;			case 'password' :				unset( $_POST['sticky'] );				break;			case 'private' :				$_POST['post_status'] = 'private';				$_POST['post_password'] = '';				unset( $_POST['sticky'] );				break;		}	}	// Create the post.	$post_ID = wp_insert_post( $_POST );	if ( is_wp_error( $post_ID ) )		return $post_ID;	if ( empty($post_ID) )		return 0;	add_meta( $post_ID );	add_post_meta( $post_ID, '_edit_last', $GLOBALS['current_user']->ID );	// Reunite any orphaned attachments with their parent	// Does this need to be udpated? ~ Mark	if ( !$draft_ids = get_user_option( 'autosave_draft_ids' ) )		$draft_ids = array();	if ( $draft_temp_id = (int) array_search( $post_ID, $draft_ids ) )		_relocate_children( $draft_temp_id, $post_ID );	if ( $temp_id && $temp_id != $draft_temp_id )		_relocate_children( $temp_id, $post_ID );	// Update autosave collision detection	if ( $temp_id ) {		$draft_ids[$temp_id] = $post_ID;		update_user_option( $user_ID, 'autosave_draft_ids', $draft_ids );	}	// Now that we have an ID we can fix any attachment anchor hrefs	_fix_attachment_links( $post_ID );	wp_set_post_lock( $post_ID, $GLOBALS['current_user']->ID );	return $post_ID;}/** * Calls wp_write_post() and handles the errors. * * @since unknown * * @return unknown */function write_post() {	$result = wp_write_post();	if ( is_wp_error( $result ) )		wp_die( $result->get_error_message() );	else		return $result;}//// Post Meta///** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $post_ID * @return unknown */function add_meta( $post_ID ) {	global $wpdb;	$post_ID = (int) $post_ID;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$metakeyselect = isset($_POST['metakeyselect']) ? stripslashes( trim( $_POST['metakeyselect'] ) ) : '';	$metakeyinput = isset($_POST['metakeyinput']) ? stripslashes( trim( $_POST['metakeyinput'] ) ) : '';	$metavalue = isset($_POST['metavalue']) ? maybe_serialize( stripslashes_deep( $_POST['metavalue'] ) ) : '';	if ( is_string($metavalue) )		$metavalue = trim( $metavalue );	if ( ('0' === $metavalue || !empty ( $metavalue ) ) && ((('#NONE#' != $metakeyselect) && !empty ( $metakeyselect) ) || !empty ( $metakeyinput) ) ) {		// We have a key/value pair. If both the select and the		// input for the key have data, the input takes precedence: 		if ('#NONE#' != $metakeyselect)			$metakey = $metakeyselect;		if ( $metakeyinput)			$metakey = $metakeyinput; // default		if ( in_array($metakey, $protected) )			return false;		wp_cache_delete($post_ID, 'post_meta');		$wpdb->insert( $wpdb->postmeta, array( 'post_id' => $post_ID, 'meta_key' => $metakey, 'meta_value' => $metavalue ) );		do_action( 'added_postmeta', $wpdb->insert_id, $post_ID, $metakey, $metavalue );		return $wpdb->insert_id;	}	return false;} // add_meta/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function delete_meta( $mid ) {	global $wpdb;	$mid = (int) $mid;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'delete_postmeta', $mid );	wp_cache_delete($post_id, 'post_meta');	$rval = $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	do_action( 'deleted_postmeta', $mid );	return $rval;}/** * Get a list of previously defined keys. * * @since unknown * * @return unknown */function get_meta_keys() {	global $wpdb;	$keys = $wpdb->get_col( "			SELECT meta_key			FROM $wpdb->postmeta			GROUP BY meta_key			ORDER BY meta_key" );	return $keys;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $mid * @return unknown */function get_post_meta_by_id( $mid ) {	global $wpdb;	$mid = (int) $mid;	$meta = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE meta_id = %d", $mid) );	if ( is_serialized_string( $meta->meta_value ) )		$meta->meta_value = maybe_unserialize( $meta->meta_value );	return $meta;}/** * {@internal Missing Short Description}} * * Some postmeta stuff. * * @since unknown * * @param unknown_type $postid * @return unknown */function has_meta( $postid ) {	global $wpdb;	return $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value, meta_id, post_id			FROM $wpdb->postmeta WHERE post_id = %d			ORDER BY meta_key,meta_id", $postid), ARRAY_A );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $meta_id * @param unknown_type $meta_key Expect Slashed * @param unknown_type $meta_value Expect Slashed * @return unknown */function update_meta( $meta_id, $meta_key, $meta_value ) {	global $wpdb;	$protected = array( '_wp_attached_file', '_wp_attachment_metadata', '_wp_old_slug', '_wp_page_template' );	$meta_key = stripslashes($meta_key);	if ( in_array($meta_key, $protected) )		return false;	if ( '' === trim( $meta_value ) )		return false;	$post_id = $wpdb->get_var( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_id = %d", $meta_id) );	$meta_value = maybe_serialize( stripslashes_deep( $meta_value ) );	$meta_id = (int) $meta_id;	$data  = compact( 'meta_key', 'meta_value' );	$where = compact( 'meta_id' );	do_action( 'update_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	$rval = $wpdb->update( $wpdb->postmeta, $data, $where );	wp_cache_delete($post_id, 'post_meta');	do_action( 'updated_postmeta', $meta_id, $post_id, $meta_key, $meta_value );	return $rval;}//// Private///** * Replace hrefs of attachment anchors with up-to-date permalinks. * * @since unknown * @access private * * @param unknown_type $post_ID * @return unknown */function _fix_attachment_links( $post_ID ) {	global $_fix_attachment_link_id;	$post = & get_post( $post_ID, ARRAY_A );	$search = "#<a[^>]+rel=('|\")[^'\"]*attachment[^>]*>#ie";	// See if we have any rel="attachment" links	if ( 0 == preg_match_all( $search, $post['post_content'], $anchor_matches, PREG_PATTERN_ORDER ) )		return;	$i = 0;	$search = "#[\s]+rel=(\"|')(.*?)wp-att-(\d+)\\1#i";	foreach ( $anchor_matches[0] as $anchor ) {		if ( 0 == preg_match( $search, $anchor, $id_matches ) )			continue;		$id = (int) $id_matches[3];		// While we have the attachment ID, let's adopt any orphans.		$attachment = & get_post( $id, ARRAY_A );		if ( ! empty( $attachment) && ! is_object( get_post( $attachment['post_parent'] ) ) ) {			$attachment['post_parent'] = $post_ID;			// Escape data pulled from DB.			$attachment = add_magic_quotes( $attachment );			wp_update_post( $attachment );		}		$post_search[$i] = $anchor;		 $_fix_attachment_link_id = $id;		$post_replace[$i] = preg_replace_callback( "#href=(\"|')[^'\"]*\\1#", '_fix_attachment_links_replace_cb', $anchor );		++$i;	}	$post['post_content'] = str_replace( $post_search, $post_replace, $post['post_content'] );	// Escape data pulled from DB.	$post = add_magic_quotes( $post);	return wp_update_post( $post);}function _fix_attachment_links_replace_cb($match) {        global $_fix_attachment_link_id;        return stripslashes( 'href='.$match[1] ).get_attachment_link( $_fix_attachment_link_id ).stripslashes( $match[1] );}/** * Move child posts to a new parent. * * @since unknown * @access private * * @param unknown_type $old_ID * @param unknown_type $new_ID * @return unknown */function _relocate_children( $old_ID, $new_ID ) {	global $wpdb;	$old_ID = (int) $old_ID;	$new_ID = (int) $new_ID;	$children = $wpdb->get_col( $wpdb->prepare("		SELECT post_id		FROM $wpdb->postmeta		WHERE meta_key = '_wp_attachment_temp_parent'		AND meta_value = %d", $old_ID) );	foreach ( $children as $child_id ) {		$wpdb->update($wpdb->posts, array('post_parent' => $new_ID), array('ID' => $child_id) );		delete_post_meta($child_id, '_wp_attachment_temp_parent');	}}/** * Get all the possible statuses for a post_type * * @since 2.5.0 * * @param string $type The post_type you want the statuses for * @return array As array of all the statuses for the supplied post type */function get_available_post_statuses($type = 'post') {	$stati = wp_count_posts($type);	return array_keys(get_object_vars($stati));}/** * Run the wp query to fetch the posts for listing on the edit posts page * * @since 2.5.0 * * @param array|bool $q Array of query variables to use to build the query or false to use $_GET superglobal. * @return array */function wp_edit_posts_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m'] = isset($q['m']) ? (int) $q['m'] : 0;	$q['cat'] = isset($q['cat']) ? (int) $q['cat'] : 0;	$post_stati  = get_post_stati();	if ( isset($q['post_type']) && in_array( $q['post_type'], get_post_types() ) )		$post_type = $q['post_type'];	else		$post_type = 'post';	$avail_post_stati = get_available_post_statuses($post_type);	if ( isset($q['post_status']) && in_array( $q['post_status'], $post_stati ) ) {		$post_status = $q['post_status'];		$perm = 'readable';	}	if ( isset($q['post_status']) && 'pending' === $q['post_status'] ) {		$order = 'ASC';		$orderby = 'modified';	} elseif ( isset($q['post_status']) && 'draft' === $q['post_status'] ) {		$order = 'DESC';		$orderby = 'modified';	} else {		$order = 'DESC';		$orderby = 'date';	}	$per_page = 'edit_' . $post_type . '_per_page';	$posts_per_page = (int) get_user_option( $per_page );	if ( empty( $posts_per_page ) || $posts_per_page < 1 )		$posts_per_page = 15;	$posts_per_page = apply_filters( $per_page, $posts_per_page );	$query = compact('post_type', 'post_status', 'perm', 'order', 'orderby', 'posts_per_page');	// Hierarchical types require special args.	if ( is_post_type_hierarchical( $post_type ) ) {		$query['orderby'] = 'menu_order title';		$query['order'] = 'asc';		$query['posts_per_page'] = -1;		$query['posts_per_archive_page'] = -1;	}	wp( $query );	return $avail_post_stati;}/** * Get default post mime types * * @since 2.9.0 * * @return array */function get_post_mime_types() {	$post_mime_types = array(	//	array( adj, noun )		'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class="count">(%s)</span>', 'Images <span class="count">(%s)</span>')),		'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class="count">(%s)</span>', 'Audio <span class="count">(%s)</span>')),		'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class="count">(%s)</span>', 'Video <span class="count">(%s)</span>')),	);	return apply_filters('post_mime_types', $post_mime_types);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $type * @return unknown */function get_available_post_mime_types($type = 'attachment') {	global $wpdb;	$types = $wpdb->get_col($wpdb->prepare("SELECT DISTINCT post_mime_type FROM $wpdb->posts WHERE post_type = %s", $type));	return $types;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $q * @return unknown */function wp_edit_attachments_query( $q = false ) {	if ( false === $q )		$q = $_GET;	$q['m']   = isset( $q['m'] ) ? (int) $q['m'] : 0;	$q['cat'] = isset( $q['cat'] ) ? (int) $q['cat'] : 0;	$q['post_type'] = 'attachment';	$q['post_status'] = isset( $q['status'] ) && 'trash' == $q['status'] ? 'trash' : 'inherit';	$media_per_page = (int) get_user_option( 'upload_per_page' );	if ( empty( $media_per_page ) || $media_per_page < 1 )		$media_per_page = 20;	$q['posts_per_page'] = apply_filters( 'upload_per_page', $media_per_page );	$post_mime_types = get_post_mime_types();	$avail_post_mime_types = get_available_post_mime_types('attachment');	if ( isset($q['post_mime_type']) && !array_intersect( (array) $q['post_mime_type'], array_keys($post_mime_types) ) )		unset($q['post_mime_type']);	wp($q);	return array($post_mime_types, $avail_post_mime_types);}/** * {@internal Missing Short Description}} * * @uses get_user_option() * @since unknown * * @param unknown_type $id * @param unknown_type $page * @return unknown */function postbox_classes( $id, $page ) {	if ( isset( $_GET['edit'] ) && $_GET['edit'] == $id )		return '';	if ( $closed = get_user_option('closedpostboxes_'.$page ) ) {		if ( !is_array( $closed ) ) {			return '';		}		return in_array( $id, $closed )? 'closed' : '';	} else {		return '';	}}/** * {@internal Missing Short Description}} * * @since unknown * * @param int|object $id    Post ID or post object. * @param string $title (optional) Title * @param string $name (optional) Name * @return array With two entries of type string */function get_sample_permalink($id, $title = null, $name = null) {	$post = &get_post($id);	if ( !$post->ID )		return array('', '');	$ptype = get_post_type_object($post->post_type);	$original_status = $post->post_status;	$original_date = $post->post_date;	$original_name = $post->post_name;	// Hack: get_permalink would return ugly permalink for	// drafts, so we will fake, that our post is published	if ( in_array($post->post_status, array('draft', 'pending')) ) {		$post->post_status = 'publish';		$post->post_name = sanitize_title($post->post_name ? $post->post_name : $post->post_title, $post->ID);	}	// If the user wants to set a new name -- override the current one	// Note: if empty name is supplied -- use the title instead, see #6072	if ( !is_null($name) )		$post->post_name = sanitize_title($name ? $name : $title, $post->ID);	$post->post_name = wp_unique_post_slug($post->post_name, $post->ID, $post->post_status, $post->post_type, $post->post_parent);	$post->filter = 'sample';	$permalink = get_permalink($post, true);	// Replace custom post_type Token with generic pagename token for ease of use.	$permalink = str_replace("%$post->post_type%", '%pagename%', $permalink);	// Handle page hierarchy	if ( $ptype->hierarchical ) {		$uri = get_page_uri($post);		$uri = untrailingslashit($uri);		$uri = strrev( stristr( strrev( $uri ), '/' ) );		$uri = untrailingslashit($uri);		if ( !empty($uri) )			$uri .= '/';		$permalink = str_replace('%pagename%', "${uri}%pagename%", $permalink);	}	$permalink = array($permalink, apply_filters('editable_slug', $post->post_name));	$post->post_status = $original_status;	$post->post_date = $original_date;	$post->post_name = $original_name;	unset($post->filter);	return $permalink;}/** * sample permalink html * * intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. * * @since unknown * * @param int|object $id Post ID or post object. * @param string $new_title (optional) New title * @param string $new_slug (optional) New slug * @return string intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. */function get_sample_permalink_html( $id, $new_title = null, $new_slug = null ) {	global $wpdb;	$post = &get_post($id);	list($permalink, $post_name) = get_sample_permalink($post->ID, $new_title, $new_slug);	if ( 'publish' == $post->post_status ) {		$ptype = get_post_type_object($post->post_type);		$view_post = $ptype->labels->view_item;		$title = __('Click to edit this part of the permalink');	} else {		$title = __('Temporary permalink. Click to edit this part.');	}	if ( false === strpos($permalink, '%postname%') && false === strpos($permalink, '%pagename%') ) {		$return = '<strong>' . __('Permalink:') . "</strong>\n" . '<span id="sample-permalink">' . $permalink . "</span>\n";		if ( current_user_can( 'manage_options' ) && !( 'page' == get_option('show_on_front') && $id == get_option('page_on_front') ) )			$return .= '<span id="change-permalinks"><a href="options-permalink.php" class="button" target="_blank">' . __('Change Permalinks') . "</a></span>\n";		if ( isset($view_post) )			$return .= "<span id='view-post-btn'><a href='$permalink' class='button' target='_blank'>$view_post</a></span>\n";		$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);		return $return;	}	if ( function_exists('mb_strlen') ) {		if ( mb_strlen($post_name) > 30 ) {			$post_name_abridged = mb_substr($post_name, 0, 14). '&hellip;' . mb_substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	} else {		if ( strlen($post_name) > 30 ) {			$post_name_abridged = substr($post_name, 0, 14). '&hellip;' . substr($post_name, -14);		} else {			$post_name_abridged = $post_name;		}	}	$post_name_html = '<span id="editable-post-name" title="' . $title . '">' . $post_name_abridged . '</span>';	$display_link = str_replace(array('%pagename%','%postname%'), $post_name_html, $permalink);	$view_link = str_replace(array('%pagename%','%postname%'), $post_name, $permalink);	$return =  '<strong>' . __('Permalink:') . "</strong>\n";	$return .= '<span id="sample-permalink">' . $display_link . "</span>\n";	$return .= '&lrm;'; // Fix bi-directional text display defect in RTL languages.	$return .= '<span id="edit-slug-buttons"><a href="#post_name" class="edit-slug button hide-if-no-js" onclick="editPermalink(' . $id . '); return false;">' . __('Edit') . "</a></span>\n";	$return .= '<span id="editable-post-name-full">' . $post_name . "</span>\n";	if ( isset($view_post) )		$return .= "<span id='view-post-btn'><a href='$view_link' class='button' target='_blank'>$view_post</a></span>\n";	$return = apply_filters('get_sample_permalink_html', $return, $id, $new_title, $new_slug);	return $return;}/** * Output HTML for the post thumbnail meta-box. * * @since 2.9.0 * * @param int $thumbnail_id ID of the attachment used for thumbnail * @return string html */function _wp_post_thumbnail_html( $thumbnail_id = NULL ) {	global $content_width, $_wp_additional_image_sizes, $post_ID;	$set_thumbnail_link = '<p class="hide-if-no-js"><a title="' . esc_attr__( 'Set featured image' ) . '" href="' . esc_url( get_upload_iframe_src('image') ) . '" id="set-post-thumbnail" class="thickbox">%s</a></p>';	$content = sprintf($set_thumbnail_link, esc_html__( 'Set featured image' ));	if ( $thumbnail_id && get_post( $thumbnail_id ) ) {		$old_content_width = $content_width;		$content_width = 266;		if ( !isset( $_wp_additional_image_sizes['post-thumbnail'] ) )			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, array( $content_width, $content_width ) );		else			$thumbnail_html = wp_get_attachment_image( $thumbnail_id, 'post-thumbnail' );		if ( !empty( $thumbnail_html ) ) {			$ajax_nonce = wp_create_nonce( "set_post_thumbnail-$post_ID" );			$content = sprintf($set_thumbnail_link, $thumbnail_html);			$content .= '<p class="hide-if-no-js"><a href="#" id="remove-post-thumbnail" onclick="WPRemoveThumbnail(\'' . $ajax_nonce . '\');return false;">' . esc_html__( 'Remove featured image' ) . '</a></p>';		}		$content_width = $old_content_width;	}	return apply_filters( 'admin_post_thumbnail_html', $content );}/** * Check to see if the post is currently being edited by another user. * * @since 2.5.0 * * @param int $post_id ID of the post to check for editing * @return bool|int False: not locked or locked by current user. Int: user ID of user with lock. */function wp_check_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	$lock = get_post_meta( $post->ID, '_edit_lock', true );	$last = get_post_meta( $post->ID, '_edit_last', true );	$time_window = apply_filters( 'wp_check_post_lock_window', AUTOSAVE_INTERVAL * 2 );	if ( $lock && $lock > time() - $time_window && $last != $current_user->ID )		return $last;	return false;}/** * Mark the post as currently being edited by the current user * * @since 2.5.0 * * @param int $post_id ID of the post to being edited * @return bool Returns false if the post doesn't exist of there is no current user */function wp_set_post_lock( $post_id ) {	global $current_user;	if ( !$post = get_post( $post_id ) )		return false;	if ( !$current_user || !$current_user->ID )		return false;	$now = time();	update_post_meta( $post->ID, '_edit_lock', $now );}/** * Outputs the notice message to say that someone else is editing this post at the moment. * * @since 2.8.5 * @return none */function _admin_notice_post_locked() {	global $post;	$last_user = get_userdata( get_post_meta( $post->ID, '_edit_last', true ) );	$last_user_name = $last_user ? $last_user->display_name : __('Somebody');	switch ($post->post_type) {		case 'post':			$message = __( 'Warning: %s is currently editing this post' );			break;		case 'page':			$message = __( 'Warning: %s is currently editing this page' );			break;		default:			$message = __( 'Warning: %s is currently editing this.' );	}	$message = sprintf( $message, esc_html( $last_user_name ) );	echo "<div class='error'><p>$message</p></div>";}/** * Creates autosave data for the specified post from $_POST data. * * @package WordPress * @subpackage Post_Revisions * @since 2.6.0 * * @uses _wp_translate_postdata() * @uses _wp_post_revision_fields() * * @return unknown */function wp_create_post_autosave( $post_id ) {	$translated = _wp_translate_postdata( true );	if ( is_wp_error( $translated ) )		return $translated;	// Only store one autosave.  If there is already an autosave, overwrite it.	if ( $old_autosave = wp_get_post_autosave( $post_id ) ) {		$new_autosave = _wp_post_revision_fields( $_POST, true );		$new_autosave['ID'] = $old_autosave->ID;		$current_user = wp_get_current_user();		$new_autosave['post_author'] = $current_user->ID;		return wp_update_post( $new_autosave );	}	// _wp_put_post_revision() expects unescaped.	$_POST = stripslashes_deep($_POST);	// Otherwise create the new autosave as a special post revision	return _wp_put_post_revision( $_POST, true );}/** * Save draft or manually autosave for showing preview. * * @package WordPress * @since 2.7.0 * * @uses wp_write_post() * @uses edit_post() * @uses get_post() * @uses current_user_can() * @uses wp_create_post_autosave() * * @return str URL to redirect to show the preview */function post_preview() {	$post_ID = (int) $_POST['post_ID'];	$status = get_post_status( $post_ID );	if ( 'auto-draft' == $status )		wp_die( __('Preview not available. Please save as a draft first.') );	if ( isset($_POST['catslist']) )		$_POST['post_category'] = explode(",", $_POST['catslist']);	if ( isset($_POST['tags_input']) )		$_POST['tags_input'] = explode(",", $_POST['tags_input']);	if ( $_POST['post_type'] == 'page' || empty($_POST['post_category']) )		unset($_POST['post_category']);	$_POST['ID'] = $post_ID;	$post = get_post($post_ID);	if ( 'page' == $post->post_type ) {		if ( !current_user_can('edit_page', $post_ID) )			wp_die(__('You are not allowed to edit this page.'));	} else {		if ( !current_user_can('edit_post', $post_ID) )			wp_die(__('You are not allowed to edit this post.'));	}	if ( 'draft' == $post->post_status ) {		$id = edit_post();	} else { // Non drafts are not overwritten.  The autosave is stored in a special post revision.		$id = wp_create_post_autosave( $post->ID );		if ( ! is_wp_error($id) )			$id = $post->ID;	}	if ( is_wp_error($id) )		wp_die( $id->get_error_message() );	if ( $_POST['post_status'] == 'draft'  ) {		$url = add_query_arg( 'preview', 'true', get_permalink($id) );	} else {		$nonce = wp_create_nonce('post_preview_' . $id);		$url = add_query_arg( array( 'preview' => 'true', 'preview_id' => $id, 'preview_nonce' => $nonce ), get_permalink($id) );	}	return $url;}/** * Adds the TinyMCE editor used on the Write and Edit screens. * * @package WordPress * @since 2.7.0 * * TinyMCE is loaded separately from other Javascript by using wp-tinymce.php. It outputs concatenated * and optionaly pre-compressed version of the core and all default plugins. Additional plugins are loaded * directly by TinyMCE using non-blocking method. Custom plugins can be refreshed by adding a query string * to the URL when queueing them with the mce_external_plugins filter. * * @param bool $teeny optional Output a trimmed down version used in Press This. * @param mixed $settings optional An array that can add to or overwrite the default TinyMCE settings. */function wp_tiny_mce( $teeny = false, $settings = false ) {	global $concatenate_scripts, $compress_scripts, $tinymce_version, $editor_styles;	if ( ! user_can_richedit() )		return;	$baseurl = includes_url('js/tinymce');	$mce_locale = ( '' == get_locale() ) ? 'en' : strtolower( substr(get_locale(), 0, 2) ); // only ISO 639-1	/*	The following filter allows localization scripts to change the languages displayed in the spellchecker's drop-down menu.	By default it uses Google's spellchecker API, but can be configured to use PSpell/ASpell if installed on the server.	The + sign marks the default language. More information:	http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker	*/	$mce_spellchecker_languages = apply_filters('mce_spellchecker_languages', '+English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr,German=de,Italian=it,Polish=pl,Portuguese=pt,Spanish=es,Swedish=sv');	if ( $teeny ) {		$plugins = apply_filters( 'teeny_mce_plugins', array('safari', 'inlinepopups', 'media', 'fullscreen', 'wordpress') );		$ext_plugins = '';	} else {		$plugins = array( 'safari', 'inlinepopups', 'spellchecker', 'paste', 'wordpress', 'media', 'fullscreen', 'wpeditimage', 'wpgallery', 'tabfocus' );		/*		The following filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' => 'url'.		It adds the plugin's name to TinyMCE's plugins init and the call to PluginManager to load the plugin.		The url should be absolute and should include the js file name to be loaded. Example:		array( 'myplugin' => 'http://my-site.com/wp-content/plugins/myfolder/mce_plugin.js' )		If the plugin uses a button, it should be added with one of the "$mce_buttons" filters.		*/		$mce_external_plugins = apply_filters('mce_external_plugins', array());		$ext_plugins = '';		if ( ! empty($mce_external_plugins) ) {			/*			The following filter loads external language files for TinyMCE plugins.			It takes an associative array 'plugin_name' => 'path', where path is the			include path to the file. The language file should follow the same format as			/tinymce/langs/wp-langs.php and should define a variable $strings that			holds all translated strings.			When this filter is not used, the function will try to load {mce_locale}.js.			If that is not found, en.js will be tried next.			*/			$mce_external_languages = apply_filters('mce_external_languages', array());			$loaded_langs = array();			$strings = '';			if ( ! empty($mce_external_languages) ) {				foreach ( $mce_external_languages as $name => $path ) {					if ( @is_file($path) && @is_readable($path) ) {						include_once($path);						$ext_plugins .= $strings . "\n";						$loaded_langs[] = $name;					}				}			}			foreach ( $mce_external_plugins as $name => $url ) {				if ( is_ssl() ) $url = str_replace('http://', 'https://', $url);				$plugins[] = '-' . $name;				$plugurl = dirname($url);				$strings = $str1 = $str2 = '';				if ( ! in_array($name, $loaded_langs) ) {					$path = str_replace( WP_PLUGIN_URL, '', $plugurl );					$path = WP_PLUGIN_DIR . $path . '/langs/';					if ( function_exists('realpath') )						$path = trailingslashit( realpath($path) );					if ( @is_file($path . $mce_locale . '.js') )						$strings .= @file_get_contents($path . $mce_locale . '.js') . "\n";					if ( @is_file($path . $mce_locale . '_dlg.js') )						$strings .= @file_get_contents($path . $mce_locale . '_dlg.js') . "\n";					if ( 'en' != $mce_locale && empty($strings) ) {						if ( @is_file($path . 'en.js') ) {							$str1 = @file_get_contents($path . 'en.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str1, 1 ) . "\n";						}						if ( @is_file($path . 'en_dlg.js') ) {							$str2 = @file_get_contents($path . 'en_dlg.js');							$strings .= preg_replace( '/([\'"])en\./', '$1' . $mce_locale . '.', $str2, 1 ) . "\n";						}					}					if ( ! empty($strings) )						$ext_plugins .= "\n" . $strings . "\n";				}				$ext_plugins .= 'tinyMCEPreInit.load_ext("' . $plugurl . '", "' . $mce_locale . '");' . "\n";				$ext_plugins .= 'tinymce.PluginManager.load("' . $name . '", "' . $url . '");' . "\n";			}		}	}	$plugins = implode($plugins, ',');	if ( $teeny ) {		$mce_buttons = apply_filters( 'teeny_mce_buttons', array('bold, italic, underline, blockquote, separator, strikethrough, bullist, numlist,justifyleft, justifycenter, justifyright, undo, redo, link, unlink, fullscreen') );		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = $mce_buttons_3 = $mce_buttons_4 = '';	} else {		$mce_buttons = apply_filters('mce_buttons', array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'link', 'unlink', 'wp_more', '|', 'spellchecker', 'fullscreen', 'wp_adv' ));		$mce_buttons = implode($mce_buttons, ',');		$mce_buttons_2 = array('formatselect', 'underline', 'justifyfull', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'media', 'charmap', '|', 'outdent', 'indent', '|', 'undo', 'redo', 'wp_help' );		if ( is_multisite() )			unset( $mce_buttons_2[ array_search( 'media', $mce_buttons_2 ) ] );		$mce_buttons_2 = apply_filters('mce_buttons_2', $mce_buttons_2);		$mce_buttons_2 = implode($mce_buttons_2, ',');		$mce_buttons_3 = apply_filters('mce_buttons_3', array());		$mce_buttons_3 = implode($mce_buttons_3, ',');		$mce_buttons_4 = apply_filters('mce_buttons_4', array());		$mce_buttons_4 = implode($mce_buttons_4, ',');	}	$no_captions = (bool) apply_filters( 'disable_captions', '' );	// TinyMCE init settings	$initArray = array (		'mode' => 'specific_textareas',		'editor_selector' => 'theEditor',		'width' => '100%',		'theme' => 'advanced',		'skin' => 'wp_theme',		'theme_advanced_buttons1' => $mce_buttons,		'theme_advanced_buttons2' => $mce_buttons_2,		'theme_advanced_buttons3' => $mce_buttons_3,		'theme_advanced_buttons4' => $mce_buttons_4,		'language' => $mce_locale,		'spellchecker_languages' => $mce_spellchecker_languages,		'theme_advanced_toolbar_location' => 'top',		'theme_advanced_toolbar_align' => 'left',		'theme_advanced_statusbar_location' => 'bottom',		'theme_advanced_resizing' => true,		'theme_advanced_resize_horizontal' => false,		'dialog_type' => 'modal',		'relative_urls' => false,		'remove_script_host' => false,		'convert_urls' => false,		'apply_source_formatting' => false,		'remove_linebreaks' => true,		'gecko_spellcheck' => true,		'entities' => '38,amp,60,lt,62,gt',		'accessibility_focus' => true,		'tabfocus_elements' => 'major-publishing-actions',		'media_strict' => false,		'paste_remove_styles' => true,		'paste_remove_spans' => true,		'paste_strip_class_attributes' => 'all',		'wpeditimage_disable_captions' => $no_captions,		'plugins' => $plugins	);	if ( ! empty( $editor_styles ) && is_array( $editor_styles ) ) {		$mce_css = array();		$style_uri = get_stylesheet_directory_uri();		if ( TEMPLATEPATH == STYLESHEETPATH ) {			foreach ( $editor_styles as $file )				$mce_css[] = "$style_uri/$file";		} else {			$style_dir    = get_stylesheet_directory();			$template_uri = get_template_directory_uri();			$template_dir = get_template_directory();			foreach ( $editor_styles as $file ) {				if ( file_exists( "$style_dir/$file" ) )					$mce_css[] = "$style_uri/$file";				if ( file_exists( "$template_dir/$file" ) )					$mce_css[] = "$template_uri/$file";			}		}		$mce_css = implode( ',', $mce_css );	} else {		$mce_css = '';	}	$mce_css = trim( apply_filters( 'mce_css', $mce_css ), ' ,' );	if ( ! empty($mce_css) )		$initArray['content_css'] = $mce_css;	if ( is_array($settings) )		$initArray = array_merge($initArray, $settings);	// For people who really REALLY know what they're doing with TinyMCE	// You can modify initArray to add, remove, change elements of the config before tinyMCE.init	// Setting "valid_elements", "invalid_elements" and "extended_valid_elements" can be done through "tiny_mce_before_init".	// Best is to use the default cleanup by not specifying valid_elements, as TinyMCE contains full set of XHTML 1.0.	if ( $teeny ) {		$initArray = apply_filters('teeny_mce_before_init', $initArray);	} else {		$initArray = apply_filters('tiny_mce_before_init', $initArray);	}	if ( empty($initArray['theme_advanced_buttons3']) && !empty($initArray['theme_advanced_buttons4']) ) {		$initArray['theme_advanced_buttons3'] = $initArray['theme_advanced_buttons4'];		$initArray['theme_advanced_buttons4'] = '';	}	if ( ! isset($concatenate_scripts) )		script_concat_settings();	$language = $initArray['language'];	$compressed = $compress_scripts && $concatenate_scripts && isset($_SERVER['HTTP_ACCEPT_ENCODING'])		&& false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip');	/**	 * Deprecated	 *	 * The tiny_mce_version filter is not needed since external plugins are loaded directly by TinyMCE.	 * These plugins can be refreshed by appending query string to the URL passed to mce_external_plugins filter.	 * If the plugin has a popup dialog, a query string can be added to the button action that opens it (in the plugin's code).	 */	$version = apply_filters('tiny_mce_version', '');	$version = 'ver=' . $tinymce_version . $version;	if ( 'en' != $language )		include_once(ABSPATH . WPINC . '/js/tinymce/langs/wp-langs.php');	$mce_options = '';	foreach ( $initArray as $k => $v )	    $mce_options .= $k . ':"' . $v . '", ';	$mce_options = rtrim( trim($mce_options), '\n\r,' ); ?><script type="text/javascript">/* <![CDATA[ */tinyMCEPreInit = {	base : "<?php echo $baseurl; ?>",	suffix : "",	query : "<?php echo $version; ?>",	mceInit : {<?php echo $mce_options; ?>},	load_ext : function(url,lang){var sl=tinymce.ScriptLoader;sl.markDone(url+'/langs/'+lang+'.js');sl.markDone(url+'/langs/'+lang+'_dlg.js');}};/* ]]> */</script><?php	if ( $compressed )		echo "<script type='text/javascript' src='$baseurl/wp-tinymce.php?c=1&amp;$version'></script>\n";	else		echo "<script type='text/javascript' src='$baseurl/tiny_mce.js?$version'></script>\n";	if ( 'en' != $language && isset($lang) )		echo "<script type='text/javascript'>\n$lang\n</script>\n";	else		echo "<script type='text/javascript' src='$baseurl/langs/wp-langs-en.js?$version'></script>\n";?><script type="text/javascript">/* <![CDATA[ */<?php if ( $ext_plugins ) echo "$ext_plugins\n"; ?><?php if ( $compressed ) { ?>tinyMCEPreInit.go();<?php } else { ?>(function(){var t=tinyMCEPreInit,sl=tinymce.ScriptLoader,ln=t.mceInit.language,th=t.mceInit.theme,pl=t.mceInit.plugins;sl.markDone(t.base+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'.js');sl.markDone(t.base+'/themes/'+th+'/langs/'+ln+'_dlg.js');tinymce.each(pl.split(','),function(n){if(n&&n.charAt(0)!='-'){sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'.js');sl.markDone(t.base+'/plugins/'+n+'/langs/'+ln+'_dlg.js');}});})();<?php } ?>tinyMCE.init(tinyMCEPreInit.mceInit);/* ]]> */</script><?php}
<?php/** * WordPress Theme Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function current_theme_info() {	$themes = get_themes();	$current_theme = get_current_theme();	if ( ! isset( $themes[$current_theme] ) ) {		delete_option( 'current_theme' );		$current_theme = get_current_theme();	}	$ct->name = $current_theme;	$ct->title = $themes[$current_theme]['Title'];	$ct->version = $themes[$current_theme]['Version'];	$ct->parent_theme = $themes[$current_theme]['Parent Theme'];	$ct->template_dir = $themes[$current_theme]['Template Dir'];	$ct->stylesheet_dir = $themes[$current_theme]['Stylesheet Dir'];	$ct->template = $themes[$current_theme]['Template'];	$ct->stylesheet = $themes[$current_theme]['Stylesheet'];	$ct->screenshot = $themes[$current_theme]['Screenshot'];	$ct->description = $themes[$current_theme]['Description'];	$ct->author = $themes[$current_theme]['Author'];	$ct->tags = $themes[$current_theme]['Tags'];	$ct->theme_root = $themes[$current_theme]['Theme Root'];	$ct->theme_root_uri = $themes[$current_theme]['Theme Root URI'];	return $ct;}/** * Remove a theme * * @since 2.8.0 * * @param string $template Template directory of the theme to delete * @return mixed */function delete_theme($template) {	global $wp_filesystem;	if ( empty($template) )		return false;	ob_start();	$url = wp_nonce_url('themes.php?action=delete&template=' . $template, 'delete-theme_' . $template);	if ( false === ($credentials = request_filesystem_credentials($url)) ) {		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ){			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! WP_Filesystem($credentials) ) {		request_filesystem_credentials($url, '', true); // Failed to connect, Error and request again		$data = ob_get_contents();		ob_end_clean();		if ( ! empty($data) ) {			include_once( ABSPATH . 'wp-admin/admin-header.php');			echo $data;			include( ABSPATH . 'wp-admin/admin-footer.php');			exit;		}		return;	}	if ( ! is_object($wp_filesystem) )		return new WP_Error('fs_unavailable', __('Could not access filesystem.'));	if ( is_wp_error($wp_filesystem->errors) && $wp_filesystem->errors->get_error_code() )		return new WP_Error('fs_error', __('Filesystem error.'), $wp_filesystem->errors);	//Get the base plugin folder	$themes_dir = $wp_filesystem->wp_themes_dir();	if ( empty($themes_dir) )		return new WP_Error('fs_no_themes_dir', __('Unable to locate WordPress theme directory.'));	$themes_dir = trailingslashit( $themes_dir );	$theme_dir = trailingslashit($themes_dir . $template);	$deleted = $wp_filesystem->delete($theme_dir, true);	if ( ! $deleted )		return new WP_Error('could_not_remove_theme', sprintf(__('Could not fully remove the theme %s.'), $template) );	// Force refresh of theme update information	delete_site_transient('update_themes');	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_broken_themes() {	global $wp_broken_themes;	get_themes();	return $wp_broken_themes;}/** * Get the allowed themes for the current blog. * * @since 3.0.0 * * @uses get_themes() * @uses current_theme_info() * @uses get_site_allowed_themes() * @uses wpmu_get_blog_allowedthemes * * @return array $themes Array of allowed themes. */function get_allowed_themes() {	if ( !is_multisite() )		return get_themes();	$themes = get_themes();	$ct = current_theme_info();	$allowed_themes = apply_filters("allowed_themes", get_site_allowed_themes() );	if ( $allowed_themes == false )		$allowed_themes = array();	$blog_allowed_themes = wpmu_get_blog_allowedthemes();	if ( is_array( $blog_allowed_themes ) )		$allowed_themes = array_merge( $allowed_themes, $blog_allowed_themes );	if ( isset( $allowed_themes[ esc_html( $ct->stylesheet ) ] ) == false )		$allowed_themes[ esc_html( $ct->stylesheet ) ] = true;	reset( $themes );	foreach ( $themes as $key => $theme ) {		if ( isset( $allowed_themes[ esc_html( $theme[ 'Stylesheet' ] ) ] ) == false )			unset( $themes[ $key ] );	}	reset( $themes );	return $themes;}/** * Get the Page Templates available in this theme * * @since unknown * * @return array Key is template name, Value is template name */function get_page_templates() {	$themes = get_themes();	$theme = get_current_theme();	$templates = $themes[$theme]['Template Files'];	$page_templates = array();	if ( is_array( $templates ) ) {		$base = array( trailingslashit(get_template_directory()), trailingslashit(get_stylesheet_directory()) );		foreach ( $templates as $template ) {			$basename = str_replace($base, '', $template);			// don't allow template files in subdirectories			if ( false !== strpos($basename, '/') )				continue;			$template_data = implode( '', file( $template ));			$name = '';			if ( preg_match( '|Template Name:(.*)$|mi', $template_data, $name ) )				$name = _cleanup_header_comment($name[1]);			if ( !empty( $name ) ) {				$page_templates[trim( $name )] = $basename;			}		}	}	return $page_templates;}/** * Tidies a filename for url display by the theme editor. * * @since 2.9.0 * @access private * * @param string $fullpath Full path to the theme file * @param string $containingfolder Path of the theme parent folder * @return string */function _get_template_edit_filename($fullpath, $containingfolder) {	return str_replace(dirname(dirname( $containingfolder )) , '', $fullpath);}/** * Check if there is an update for a theme available. * * Will display link, if there is an update available. * * @since 2.7.0 * * @param object $theme Theme data object. * @return bool False if no valid info was passed. */function theme_update_available( $theme ) {	static $themes_update;	if ( !current_user_can('update_themes' ) )		return;	if ( !isset($themes_update) )		$themes_update = get_site_transient('update_themes');	if ( is_object($theme) && isset($theme->stylesheet) )		$stylesheet = $theme->stylesheet;	elseif ( is_array($theme) && isset($theme['Stylesheet']) )		$stylesheet = $theme['Stylesheet'];	else		return false; //No valid info passed.	if ( isset($themes_update->response[ $stylesheet ]) ) {		$update = $themes_update->response[ $stylesheet ];		$theme_name = is_object($theme) ? $theme->name : (is_array($theme) ? $theme['Name'] : '');		$details_url = add_query_arg(array('TB_iframe' => 'true', 'width' => 1024, 'height' => 800), $update['url']); //Theme browser inside WP? replace this, Also, theme preview JS will override this on the available list.		$update_url = wp_nonce_url('update.php?action=upgrade-theme&amp;theme=' . urlencode($stylesheet), 'upgrade-theme_' . $stylesheet);		$update_onclick = 'onclick="if ( confirm(\'' . esc_js( __("Upgrading this theme will lose any customizations you have made.  'Cancel' to stop, 'OK' to upgrade.") ) . '\') ) {return true;}return false;"';		if ( ! current_user_can('update_themes') )			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a>.') . '</strong></p>', $theme_name, $details_url, $update['new_version']);		else if ( empty($update['package']) )			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a> <em>automatic upgrade unavailable for this theme</em>.') . '</strong></p>', $theme_name, $details_url, $update['new_version']);		else			printf( '<p><strong>' . __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%1$s">View version %3$s Details</a> or <a href="%4$s" %5$s>upgrade automatically</a>.') . '</strong></p>', $theme_name, $details_url, $update['new_version'], $update_url, $update_onclick );	}}?>
<?php/** * Options Management Administration Panel. * * If accessed directly in a browser this page shows a list of all saved options * along with editable fields for their values. Serialized data is not supported * and there is no way to remove options via this page. It is not linked to from * anywhere else in the admin. * * This file is also the target of the forms in core and custom options pages * that use the Settings API. In this case it saves the new option values * and returns the user to their page of origin. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Settings');$this_file = 'options.php';$parent_file = 'options-general.php';wp_reset_vars(array('action', 'option_page'));if ( empty($option_page) ) // This is for back compat and will eventually be removed.	$option_page = 'options';if ( !current_user_can('manage_options') )	wp_die(__('Cheatin&#8217; uh?'));// Handle admin email change requestsif ( is_multisite() ) {	if ( ! empty($_GET[ 'adminhash' ] ) ) {		$new_admin_details = get_option( 'adminhash' );		$redirect = 'options-general.php?updated=false';		if ( is_array( $new_admin_details ) && $new_admin_details[ 'hash' ] == $_GET[ 'adminhash' ] && !empty($new_admin_details[ 'newemail' ]) ) {			update_option( 'admin_email', $new_admin_details[ 'newemail' ] );			delete_option( 'adminhash' );			delete_option( 'new_admin_email' );			$redirect = 'options-general.php?updated=true';		}		wp_redirect( admin_url( $redirect ) );		exit;	} elseif ( ! empty( $_GET['dismiss'] ) && 'new_admin_email' == $_GET['dismiss'] ) {		delete_option( 'adminhash' );		delete_option( 'new_admin_email' );		wp_redirect( admin_url( 'options-general.php?updated=true' ) );		exit;	}}if ( is_multisite() && !is_super_admin() && 'update' != $action )	wp_die(__('Cheatin&#8217; uh?'));$whitelist_options = array(	'general' => array( 'blogname', 'blogdescription', 'gmt_offset', 'date_format', 'time_format', 'start_of_week', 'timezone_string' ),	'discussion' => array( 'default_pingback_flag', 'default_ping_status', 'default_comment_status', 'comments_notify', 'moderation_notify', 'comment_moderation', 'require_name_email', 'comment_whitelist', 'comment_max_links', 'moderation_keys', 'blacklist_keys', 'show_avatars', 'avatar_rating', 'avatar_default', 'close_comments_for_old_posts', 'close_comments_days_old', 'thread_comments', 'thread_comments_depth', 'page_comments', 'comments_per_page', 'default_comments_page', 'comment_order', 'comment_registration' ),	'media' => array( 'thumbnail_size_w', 'thumbnail_size_h', 'thumbnail_crop', 'medium_size_w', 'medium_size_h', 'large_size_w', 'large_size_h', 'image_default_size', 'image_default_align', 'image_default_link_type', 'embed_autourls', 'embed_size_w', 'embed_size_h' ),	'privacy' => array( 'blog_public' ),	'reading' => array( 'posts_per_page', 'posts_per_rss', 'rss_use_excerpt', 'blog_charset', 'show_on_front', 'page_on_front', 'page_for_posts' ),	'writing' => array( 'default_post_edit_rows', 'use_smilies', 'default_category', 'default_email_category', 'use_balanceTags', 'default_link_category', 'enable_app', 'enable_xmlrpc' ),	'options' => array( '' ) );$mail_options = array('mailserver_url', 'mailserver_port', 'mailserver_login', 'mailserver_pass');$uploads_options = array('uploads_use_yearmonth_folders', 'upload_path', 'upload_url_path');if ( !is_multisite() ) {	if ( !defined( 'WP_SITEURL' ) )		$whitelist_options['general'][] = 'siteurl';	if ( !defined( 'WP_HOME' ) )		$whitelist_options['general'][] = 'home';	$whitelist_options['general'][] = 'admin_email';	$whitelist_options['general'][] = 'users_can_register';	$whitelist_options['general'][] = 'default_role';	$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options['writing'][] = 'ping_sites';	$whitelist_options['media'] = array_merge($whitelist_options['media'], $uploads_options);} else {	$whitelist_options['general'][] = 'new_admin_email';	$whitelist_options['general'][] = 'WPLANG';	$whitelist_options['general'][] = 'language';	if ( apply_filters( 'enable_post_by_email_configuration', true ) )		$whitelist_options['writing'] = array_merge($whitelist_options['writing'], $mail_options);	$whitelist_options[ 'misc' ] = array();}$whitelist_options = apply_filters( 'whitelist_options', $whitelist_options );/* * If $_GET['action'] == 'update' we are saving settings sent from a settings page */if ( 'update' == $action ) {	if ( 'options' == $option_page && !isset( $_POST['option_page'] ) ) { // This is for back compat and will eventually be removed.		$unregistered = true;		check_admin_referer( 'update-options' );	} else {		$unregistered = false;		check_admin_referer( $option_page . '-options' );	}	if ( !isset( $whitelist_options[ $option_page ] ) )		wp_die( __( 'Error: options page not found.' ) );	if ( 'options' == $option_page ) {		if ( is_multisite() && ! is_super_admin() )			wp_die( __( 'You do not have sufficient permissions to modify unregistered settings for this site.' ) );		$options = explode( ',', stripslashes( $_POST[ 'page_options' ] ) );	} else {		$options = $whitelist_options[ $option_page ];	}	// Handle custom date/time formats	if ( 'general' == $option_page ) {		if ( !empty($_POST['date_format']) && isset($_POST['date_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['date_format'] ) )			$_POST['date_format'] = $_POST['date_format_custom'];		if ( !empty($_POST['time_format']) && isset($_POST['time_format_custom']) && '\c\u\s\t\o\m' == stripslashes( $_POST['time_format'] ) )			$_POST['time_format'] = $_POST['time_format_custom'];		// Map UTC+- timezones to gmt_offsets and set timezone_string to empty.		if ( !empty($_POST['timezone_string']) && preg_match('/^UTC[+-]/', $_POST['timezone_string']) ) {			$_POST['gmt_offset'] = $_POST['timezone_string'];			$_POST['gmt_offset'] = preg_replace('/UTC\+?/', '', $_POST['gmt_offset']);			$_POST['timezone_string'] = '';		}	}	if ( $options ) {		foreach ( $options as $option ) {			if ( $unregistered )				_deprecated_argument( 'options.php', '2.7', sprintf( __( 'The <code>%1$s</code> setting is unregistered. Unregistered settings are deprecated. See http://codex.wordpress.org/Settings_API' ), $option, $option_page ) );			$option = trim($option);			$value = null;			if ( isset($_POST[$option]) )				$value = $_POST[$option];			if ( !is_array($value) )				$value = trim($value);			$value = stripslashes_deep($value);			update_option($option, $value);		}	}	/**	 *  Handle settings errors and return to options page	 */	// If no settings errors were registered add a general 'updated' message.	if ( !count( get_settings_errors() ) )		add_settings_error('general', 'settings_updated', __('Settings saved.'), 'updated');	set_transient('settings_errors', get_settings_errors(), 30);	/**	 * Redirect back to the settings page that was submitted	 */	$goback = add_query_arg( 'updated', 'true',  wp_get_referer() );	wp_redirect( $goback );	exit;}include('./admin-header.php'); ?><div class="wrap"><?php screen_icon(); ?>  <h2><?php esc_html_e('All Settings'); ?></h2>  <form name="form" action="options.php" method="post" id="all-options">  <?php wp_nonce_field('options-options') ?>  <input type="hidden" name="action" value="update" />  <input type='hidden' name='option_page' value='options' />  <table class="form-table"><?php$options = $wpdb->get_results( "SELECT * FROM $wpdb->options ORDER BY option_name" );foreach ( (array) $options as $option ) :	$disabled = false;	if ( $option->option_name == '' )		continue;	if ( is_serialized( $option->option_value ) ) {		if ( is_serialized_string( $option->option_value ) ) {			// this is a serialized string, so we should display it			$value = maybe_unserialize( $option->option_value );			$options_to_update[] = $option->option_name;			$class = 'all-options';		} else {			$value = 'SERIALIZED DATA';			$disabled = true;			$class = 'all-options disabled';		}	} else {		$value = $option->option_value;		$options_to_update[] = $option->option_name;		$class = 'all-options';	}	$name = esc_attr( $option->option_name );	echo "<tr>	<th scope='row'><label for='$name'>" . esc_html( $option->option_name ) . "</label></th><td>";	if ( strpos( $value, "\n" ) !== false )		echo "<textarea class='$class' name='$name' id='$name' cols='30' rows='5'>" . wp_htmledit_pre( $value ) . "</textarea>";	else		echo "<input class='regular-text $class' type='text' name='$name' id='$name' value='" . esc_attr( $value ) . "'" . disabled( $disabled, true, false ) . " />";	echo "</td></tr>";endforeach;?>  </table><p class="submit"><input type="hidden" name="page_options" value="<?php echo esc_attr( implode( ',', $options_to_update ) ); ?>" /><input type="submit" name="Update" value="<?php esc_attr_e( 'Save Changes' ); ?>" class="button-primary" /></p>  </form></div><?phpinclude('./admin-footer.php');?>
<?php/** * Theme, template, and stylesheet functions. * * @package WordPress * @subpackage Template *//** * Whether a child theme is in use. * * @since 3.0.0 * * @return bool true if a child theme is in use, false otherwise. **/function is_child_theme() {	return ( TEMPLATEPATH !== STYLESHEETPATH );}/** * Retrieve name of the current stylesheet. * * The theme name that the administrator has currently set the front end theme * as. * * For all extensive purposes, the template name and the stylesheet name are * going to be the same for most cases. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet' filter on stylesheet name. * * @return string Stylesheet name. */function get_stylesheet() {	return apply_filters('stylesheet', get_option('stylesheet'));}/** * Retrieve stylesheet directory path for current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_directory' filter on stylesheet directory and theme name. * * @return string Path to current theme directory. */function get_stylesheet_directory() {	$stylesheet = get_stylesheet();	$theme_root = get_theme_root( $stylesheet );	$stylesheet_dir = "$theme_root/$stylesheet";	return apply_filters( 'stylesheet_directory', $stylesheet_dir, $stylesheet, $theme_root );}/** * Retrieve stylesheet directory URI. * * @since 1.5.0 * * @return string */function get_stylesheet_directory_uri() {	$stylesheet = get_stylesheet();	$theme_root_uri = get_theme_root_uri( $stylesheet );	$stylesheet_dir_uri = "$theme_root_uri/$stylesheet";	return apply_filters( 'stylesheet_directory_uri', $stylesheet_dir_uri, $stylesheet, $theme_root_uri );}/** * Retrieve URI of current theme stylesheet. * * The stylesheet file name is 'style.css' which is appended to {@link * get_stylesheet_directory_uri() stylesheet directory URI} path. * * @since 1.5.0 * @uses apply_filters() Calls 'stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_stylesheet_uri() {	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$stylesheet_uri = $stylesheet_dir_uri . "/style.css";	return apply_filters('stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve localized stylesheet URI. * * The stylesheet directory for the localized stylesheet files are located, by * default, in the base theme directory. The name of the locale file will be the * locale followed by '.css'. If that does not exist, then the text direction * stylesheet will be checked for existence, for example 'ltr.css'. * * The theme may change the location of the stylesheet directory by either using * the 'stylesheet_directory_uri' filter or the 'locale_stylesheet_uri' filter. * If you want to change the location of the stylesheet files for the entire * WordPress workflow, then change the former. If you just have the locale in a * separate folder, then change the latter. * * @since 2.1.0 * @uses apply_filters() Calls 'locale_stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI. * * @return string */function get_locale_stylesheet_uri() {	global $wp_locale;	$stylesheet_dir_uri = get_stylesheet_directory_uri();	$dir = get_stylesheet_directory();	$locale = get_locale();	if ( file_exists("$dir/$locale.css") )		$stylesheet_uri = "$stylesheet_dir_uri/$locale.css";	elseif ( !empty($wp_locale->text_direction) && file_exists("$dir/{$wp_locale->text_direction}.css") )		$stylesheet_uri = "$stylesheet_dir_uri/{$wp_locale->text_direction}.css";	else		$stylesheet_uri = '';	return apply_filters('locale_stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri);}/** * Retrieve name of the current theme. * * @since 1.5.0 * @uses apply_filters() Calls 'template' filter on template option. * * @return string Template name. */function get_template() {	return apply_filters('template', get_option('template'));}/** * Retrieve current theme directory. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory' filter on template directory path and template name. * * @return string Template directory path. */function get_template_directory() {	$template = get_template();	$theme_root = get_theme_root( $template );	$template_dir = "$theme_root/$template";	return apply_filters( 'template_directory', $template_dir, $template, $theme_root );}/** * Retrieve theme directory URI. * * @since 1.5.0 * @uses apply_filters() Calls 'template_directory_uri' filter on template directory URI path and template name. * * @return string Template directory URI. */function get_template_directory_uri() {	$template = get_template();	$theme_root_uri = get_theme_root_uri( $template );	$template_dir_uri = "$theme_root_uri/$template";	return apply_filters( 'template_directory_uri', $template_dir_uri, $template, $theme_root_uri );}/** * Retrieve theme data from parsed theme file. * * The description will have the tags filtered with the following HTML elements * whitelisted. The <b>'a'</b> element with the <em>href</em> and <em>title</em> * attributes. The <b>abbr</b> element with the <em>title</em> attribute. The * <b>acronym<b> element with the <em>title</em> attribute allowed. The * <b>code</b>, <b>em</b>, and <b>strong</b> elements also allowed. * * The style.css file must contain theme name, theme URI, and description. The * data can also contain author URI, author, template (parent template), * version, status, and finally tags. Some of these are not used by WordPress * administration panels, but are used by theme directory web sites which list * the theme. * * @since 1.5.0 * * @param string $theme_file Theme file path. * @return array Theme data. */function get_theme_data( $theme_file ) {	$default_headers = array(		'Name' => 'Theme Name',		'URI' => 'Theme URI',		'Description' => 'Description',		'Author' => 'Author',		'AuthorURI' => 'Author URI',		'Version' => 'Version',		'Template' => 'Template',		'Status' => 'Status',		'Tags' => 'Tags'		);	$themes_allowed_tags = array(		'a' => array(			'href' => array(),'title' => array()			),		'abbr' => array(			'title' => array()			),		'acronym' => array(			'title' => array()			),		'code' => array(),		'em' => array(),		'strong' => array()	);	$theme_data = get_file_data( $theme_file, $default_headers, 'theme' );	$theme_data['Name'] = $theme_data['Title'] = wp_kses( $theme_data['Name'], $themes_allowed_tags );	$theme_data['URI'] = esc_url( $theme_data['URI'] );	$theme_data['Description'] = wptexturize( wp_kses( $theme_data['Description'], $themes_allowed_tags ) );	$theme_data['AuthorURI'] = esc_url( $theme_data['AuthorURI'] );	$theme_data['Template'] = wp_kses( $theme_data['Template'], $themes_allowed_tags );	$theme_data['Version'] = wp_kses( $theme_data['Version'], $themes_allowed_tags );	if ( $theme_data['Status'] == '' )		$theme_data['Status'] = 'publish';	else		$theme_data['Status'] = wp_kses( $theme_data['Status'], $themes_allowed_tags );	if ( $theme_data['Tags'] == '' )		$theme_data['Tags'] = array();	else		$theme_data['Tags'] = array_map( 'trim', explode( ',', wp_kses( $theme_data['Tags'], array() ) ) );	if ( $theme_data['Author'] == '' ) {		$theme_data['Author'] = $theme_data['AuthorName'] = __('Anonymous');	} else {		$theme_data['AuthorName'] = wp_kses( $theme_data['Author'], $themes_allowed_tags );		if ( empty( $theme_data['AuthorURI'] ) ) {			$theme_data['Author'] = $theme_data['AuthorName'];		} else {			$theme_data['Author'] = sprintf( '<a href="%1$s" title="%2$s">%3$s</a>', $theme_data['AuthorURI'], __( 'Visit author homepage' ), $theme_data['AuthorName'] );		}	}	return $theme_data;}/** * Retrieve list of themes with theme data in theme directory. * * The theme is broken, if it doesn't have a parent theme and is missing either * style.css and, or index.php. If the theme has a parent theme then it is * broken, if it is missing style.css; index.php is optional. The broken theme * list is saved in the {@link $wp_broken_themes} global, which is displayed on * the theme list in the administration panels. * * @since 1.5.0 * @global array $wp_broken_themes Stores the broken themes. * @global array $wp_themes Stores the working themes. * * @return array Theme list with theme data. */function get_themes() {	global $wp_themes, $wp_broken_themes;	if ( isset($wp_themes) )		return $wp_themes;	/* Register the default root as a theme directory */	register_theme_directory( get_theme_root() );	if ( !$theme_files = search_theme_directories() )		return false;	asort( $theme_files );	$wp_themes = array();	foreach ( (array) $theme_files as $theme_file ) {		$theme_root = $theme_file['theme_root'];		$theme_file = $theme_file['theme_file'];		if ( !is_readable("$theme_root/$theme_file") ) {			$wp_broken_themes[$theme_file] = array('Name' => $theme_file, 'Title' => $theme_file, 'Description' => __('File not readable.'));			continue;		}		$theme_data = get_theme_data("$theme_root/$theme_file");		$name        = $theme_data['Name'];		$title       = $theme_data['Title'];		$description = wptexturize($theme_data['Description']);		$version     = $theme_data['Version'];		$author      = $theme_data['Author'];		$template    = $theme_data['Template'];		$stylesheet  = dirname($theme_file);		$screenshot = false;		foreach ( array('png', 'gif', 'jpg', 'jpeg') as $ext ) {			if (file_exists("$theme_root/$stylesheet/screenshot.$ext")) {				$screenshot = "screenshot.$ext";				break;			}		}		if ( empty($name) ) {			$name = dirname($theme_file);			$title = $name;		}		$parent_template = $template;		if ( empty($template) ) {			if ( file_exists("$theme_root/$stylesheet/index.php") )				$template = $stylesheet;			else				continue;		}		$template = trim( $template );		if ( !file_exists("$theme_root/$template/index.php") ) {			$parent_dir = dirname(dirname($theme_file));			if ( file_exists("$theme_root/$parent_dir/$template/index.php") ) {				$template = "$parent_dir/$template";				$template_directory = "$theme_root/$template";			} else {				/**				 * The parent theme doesn't exist in the current theme's folder or sub folder				 * so lets use the theme root for the parent template.				 */				if ( isset($theme_files[$template]) && file_exists( $theme_files[$template]['theme_root'] . "/$template/index.php" ) ) {					$template_directory = $theme_files[$template]['theme_root'] . "/$template";				} else {					if ( empty( $parent_template) )						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => __('Template is missing.'), 'error' => 'no_template');					else						$wp_broken_themes[$name] = array('Name' => $name, 'Title' => $title, 'Description' => sprintf( __('The parent theme is missing. Please install the "%s" parent theme.'),  $parent_template ), 'error' => 'no_parent', 'parent' => $parent_template );					continue;				}			}		} else {			$template_directory = trim( $theme_root . '/' . $template );		}		$stylesheet_files = array();		$template_files = array();		$stylesheet_dir = @ dir("$theme_root/$stylesheet");		if ( $stylesheet_dir ) {			while ( ($file = $stylesheet_dir->read()) !== false ) {				if ( !preg_match('|^\.+$|', $file) ) {					if ( preg_match('|\.css$|', $file) )						$stylesheet_files[] = "$theme_root/$stylesheet/$file";					elseif ( preg_match('|\.php$|', $file) )						$template_files[] = "$theme_root/$stylesheet/$file";				}			}			@ $stylesheet_dir->close();		}		$template_dir = @ dir("$template_directory");		if ( $template_dir ) {			while ( ($file = $template_dir->read()) !== false ) {				if ( preg_match('|^\.+$|', $file) )					continue;				if ( preg_match('|\.php$|', $file) ) {					$template_files[] = "$template_directory/$file";				} elseif ( is_dir("$template_directory/$file") ) {					$template_subdir = @ dir("$template_directory/$file");					if ( !$template_subdir )						continue;					while ( ($subfile = $template_subdir->read()) !== false ) {						if ( preg_match('|^\.+$|', $subfile) )							continue;						if ( preg_match('|\.php$|', $subfile) )							$template_files[] = "$template_directory/$file/$subfile";					}					@ $template_subdir->close();				}			}			@ $template_dir->close();		}		//Make unique and remove duplicates when stylesheet and template are the same i.e. most themes		$template_files = array_unique($template_files);		$stylesheet_files = array_unique($stylesheet_files);		$template_dir = dirname($template_files[0]);		$stylesheet_dir = dirname($stylesheet_files[0]);		if ( empty($template_dir) )			$template_dir = '/';		if ( empty($stylesheet_dir) )			$stylesheet_dir = '/';		// Check for theme name collision.  This occurs if a theme is copied to		// a new theme directory and the theme header is not updated.  Whichever		// theme is first keeps the name.  Subsequent themes get a suffix applied.		// The Default and Classic themes always trump their pretenders.		if ( isset($wp_themes[$name]) ) {			if ( ('WordPress Default' == $name || 'WordPress Classic' == $name) &&					 ('default' == $stylesheet || 'classic' == $stylesheet) ) {				// If another theme has claimed to be one of our default themes, move				// them aside.				$suffix = $wp_themes[$name]['Stylesheet'];				$new_name = "$name/$suffix";				$wp_themes[$new_name] = $wp_themes[$name];				$wp_themes[$new_name]['Name'] = $new_name;			} else {				$name = "$name/$stylesheet";			}		}		$theme_roots[$stylesheet] = str_replace( WP_CONTENT_DIR, '', $theme_root );		$wp_themes[$name] = array(			'Name' => $name,			'Title' => $title,			'Description' => $description,			'Author' => $author,			'Author Name' => $theme_data['AuthorName'],			'Author URI' => $theme_data['AuthorURI'],			'Version' => $version,			'Template' => $template,			'Stylesheet' => $stylesheet,			'Template Files' => $template_files,			'Stylesheet Files' => $stylesheet_files,			'Template Dir' => $template_dir,			'Stylesheet Dir' => $stylesheet_dir,			'Status' => $theme_data['Status'],			'Screenshot' => $screenshot,			'Tags' => $theme_data['Tags'],			'Theme Root' => $theme_root,			'Theme Root URI' => str_replace( WP_CONTENT_DIR, content_url(), $theme_root ),		);	}	unset($theme_files);	/* Store theme roots in the DB */	if ( get_site_transient( 'theme_roots' ) != $theme_roots )		set_site_transient( 'theme_roots', $theme_roots, 7200 ); // cache for two hours	unset($theme_roots);	/* Resolve theme dependencies. */	$theme_names = array_keys( $wp_themes );	foreach ( (array) $theme_names as $theme_name ) {		$wp_themes[$theme_name]['Parent Theme'] = '';		if ( $wp_themes[$theme_name]['Stylesheet'] != $wp_themes[$theme_name]['Template'] ) {			foreach ( (array) $theme_names as $parent_theme_name ) {				if ( ($wp_themes[$parent_theme_name]['Stylesheet'] == $wp_themes[$parent_theme_name]['Template']) && ($wp_themes[$parent_theme_name]['Template'] == $wp_themes[$theme_name]['Template']) ) {					$wp_themes[$theme_name]['Parent Theme'] = $wp_themes[$parent_theme_name]['Name'];					break;				}			}		}	}	return $wp_themes;}/** * Retrieve theme roots. * * @since 2.9.0 * * @return array Theme roots */function get_theme_roots() {	$theme_roots = get_site_transient( 'theme_roots' );	if ( false === $theme_roots ) {		get_themes();		$theme_roots = get_site_transient( 'theme_roots' ); // this is set in get_theme()	}	return $theme_roots;}/** * Retrieve theme data. * * @since 1.5.0 * * @param string $theme Theme name. * @return array|null Null, if theme name does not exist. Theme data, if exists. */function get_theme($theme) {	$themes = get_themes();	if ( array_key_exists($theme, $themes) )		return $themes[$theme];	return null;}/** * Retrieve current theme display name. * * If the 'current_theme' option has already been set, then it will be returned * instead. If it is not set, then each theme will be iterated over until both * the current stylesheet and current template name. * * @since 1.5.0 * * @return string */function get_current_theme() {	if ( $theme = get_option('current_theme') )		return $theme;	$themes = get_themes();	$theme_names = array_keys($themes);	$current_template = get_option('template');	$current_stylesheet = get_option('stylesheet');	$current_theme = 'WordPress Default';	if ( $themes ) {		foreach ( (array) $theme_names as $theme_name ) {			if ( $themes[$theme_name]['Stylesheet'] == $current_stylesheet &&					$themes[$theme_name]['Template'] == $current_template ) {				$current_theme = $themes[$theme_name]['Name'];				break;			}		}	}	update_option('current_theme', $current_theme);	return $current_theme;}/** * Register a directory that contains themes. * * @since 2.9.0 * * @param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR * @return bool */function register_theme_directory( $directory) {	global $wp_theme_directories;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $directory ) )			/* Try prepending as the theme directory could be relative to the content directory */		$registered_directory = WP_CONTENT_DIR . '/' . $directory;	else		$registered_directory = $directory;	/* If this folder does not exist, return and do not register */	if ( !file_exists( $registered_directory ) )		return false;	$wp_theme_directories[] = $registered_directory;	return true;}/** * Search all registered theme directories for complete and valid themes. * * @since 2.9.0 * * @return array Valid themes found */function search_theme_directories() {	global $wp_theme_directories, $wp_broken_themes;	if ( empty( $wp_theme_directories ) )		return false;	$theme_files = array();	$wp_broken_themes = array();	/* Loop the registered theme directories and extract all themes */	foreach ( (array) $wp_theme_directories as $theme_root ) {		$theme_loc = $theme_root;		/* We don't want to replace all forward slashes, see Trac #4541 */		if ( '/' != WP_CONTENT_DIR )			$theme_loc = str_replace(WP_CONTENT_DIR, '', $theme_root);		/* Files in the root of the current theme directory and one subdir down */		$themes_dir = @ opendir($theme_root);		if ( !$themes_dir )			return false;		while ( ($theme_dir = readdir($themes_dir)) !== false ) {			if ( is_dir($theme_root . '/' . $theme_dir) && is_readable($theme_root . '/' . $theme_dir) ) {				if ( $theme_dir{0} == '.' || $theme_dir == 'CVS' )					continue;				$stylish_dir = @opendir($theme_root . '/' . $theme_dir);				$found_stylesheet = false;				while ( ($theme_file = readdir($stylish_dir)) !== false ) {					if ( $theme_file == 'style.css' ) {						$theme_files[$theme_dir] = array( 'theme_file' => $theme_dir . '/' . $theme_file, 'theme_root' => $theme_root );						$found_stylesheet = true;						break;					}				}				@closedir($stylish_dir);				if ( !$found_stylesheet ) { // look for themes in that dir					$subdir = "$theme_root/$theme_dir";					$subdir_name = $theme_dir;					$theme_subdirs = @opendir( $subdir );					$found_subdir_themes = false;					while ( ($theme_subdir = readdir($theme_subdirs)) !== false ) {						if ( is_dir( $subdir . '/' . $theme_subdir) && is_readable($subdir . '/' . $theme_subdir) ) {							if ( $theme_subdir{0} == '.' || $theme_subdir == 'CVS' )								continue;							$stylish_dir = @opendir($subdir . '/' . $theme_subdir);							$found_stylesheet = false;							while ( ($theme_file = readdir($stylish_dir)) !== false ) {								if ( $theme_file == 'style.css' ) {									$theme_files["$theme_dir/$theme_subdir"] = array( 'theme_file' => $subdir_name . '/' . $theme_subdir . '/' . $theme_file, 'theme_root' => $theme_root );									$found_stylesheet = true;									$found_subdir_themes = true;									break;								}							}							@closedir($stylish_dir);						}					}					@closedir($theme_subdirs);					if ( !$found_subdir_themes )						$wp_broken_themes[$theme_dir] = array('Name' => $theme_dir, 'Title' => $theme_dir, 'Description' => __('Stylesheet is missing.'));				}			}		}		@closedir( $themes_dir );	}	return $theme_files;}/** * Retrieve path to themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * @uses apply_filters() Calls 'theme_root' filter on path. * * @return string Theme path. */function get_theme_root( $stylesheet_or_template = false ) {	if ($stylesheet_or_template) {		$theme_roots = get_theme_roots();		if ( ! empty( $theme_roots[$stylesheet_or_template] ) )			$theme_root = WP_CONTENT_DIR . $theme_roots[$stylesheet_or_template];		else			$theme_root = WP_CONTENT_DIR . '/themes';	} else {		$theme_root = WP_CONTENT_DIR . '/themes';	}	return apply_filters( 'theme_root', $theme_root );}/** * Retrieve URI for themes directory. * * Does not have trailing slash. * * @since 1.5.0 * @param $stylesheet_or_template The stylesheet or template name of the theme * * @return string Themes URI. */function get_theme_root_uri( $stylesheet_or_template = false ) {	$theme_roots = get_theme_roots();	if ( isset( $theme_roots[$stylesheet_or_template] ) && $theme_roots[$stylesheet_or_template] )		$theme_root_uri = content_url( $theme_roots[$stylesheet_or_template] );	else		$theme_root_uri = content_url( 'themes' );	return apply_filters( 'theme_root_uri', $theme_root_uri, get_option('siteurl'), $stylesheet_or_template );}/** * Retrieve path to file without the use of extension. * * Used to quickly retrieve the path of file without including the file * extension. It will also check the parent template, if the file exists, with * the use of {@link locate_template()}. Allows for more generic file location * without the use of the other get_*_template() functions. * * Can be used with include() or require() to retrieve path. * <code> * if( '' != get_query_template( '404' ) ) *     include( get_query_template( '404' ) ); * </code> * or the same can be accomplished with * <code> * if( '' != get_404_template() ) *     include( get_404_template() ); * </code> * * @since 1.5.0 * * @param string $type Filename without extension. * @return string Full path to file. */function get_query_template($type) {	$type = preg_replace( '|[^a-z0-9-]+|', '', $type );	return apply_filters("{$type}_template", locate_template(array("{$type}.php")));}/** * Retrieve path of index template in current or parent template. * * @since 3.0.0 * * @return string */function get_index_template() {	return get_query_template('index');}/** * Retrieve path of 404 template in current or parent template. * * @since 1.5.0 * * @return string */function get_404_template() {	return get_query_template('404');}/** * Retrieve path of archive template in current or parent template. * * @since 1.5.0 * * @return string */function get_archive_template() {	return get_query_template('archive');}/** * Retrieve path of author template in current or parent template. * * @since 1.5.0 * * @return string */function get_author_template() {	$author_id = absint( get_query_var( 'author' ) );	$author = get_user_by( 'id', $author_id );	$author = $author->user_nicename;	$templates = array();	if ( $author )		$templates[] = "author-{$author}.php";	if ( $author_id )		$templates[] = "author-{$author_id}.php";	$templates[] = 'author.php';	$template = locate_template( $templates );	return apply_filters( 'author_template', $template );}/** * Retrieve path of category template in current or parent template. * * Works by first retrieving the current slug for example 'category-default.php' and then * trying category ID, for example 'category-1.php' and will finally fallback to category.php * template, if those files don't exist. * * @since 1.5.0 * @uses apply_filters() Calls 'category_template' on file path of category template. * * @return string */function get_category_template() {	$cat_ID = absint( get_query_var('cat') );	$category = get_category( $cat_ID );	$templates = array();	if ( !is_wp_error($category) )		$templates[] = "category-{$category->slug}.php";	$templates[] = "category-$cat_ID.php";	$templates[] = "category.php";	$template = locate_template($templates);	return apply_filters('category_template', $template);}/** * Retrieve path of tag template in current or parent template. * * Works by first retrieving the current tag name, for example 'tag-wordpress.php' and then * trying tag ID, for example 'tag-1.php' and will finally fallback to tag.php * template, if those files don't exist. * * @since 2.3.0 * @uses apply_filters() Calls 'tag_template' on file path of tag template. * * @return string */function get_tag_template() {	$tag_id = absint( get_query_var('tag_id') );	$tag_name = get_query_var('tag');	$templates = array();	if ( $tag_name )		$templates[] = "tag-$tag_name.php";	if ( $tag_id )		$templates[] = "tag-$tag_id.php";	$templates[] = "tag.php";	$template = locate_template($templates);	return apply_filters('tag_template', $template);}/** * Retrieve path of taxonomy template in current or parent template. * * Retrieves the taxonomy and term, if term is available. The template is * prepended with 'taxonomy-' and followed by both the taxonomy string and * the taxonomy string followed by a dash and then followed by the term. * * The taxonomy and term template is checked and used first, if it exists. * Second, just the taxonomy template is checked, and then finally, taxonomy.php * template is used. If none of the files exist, then it will fall back on to * index.php. * * @since unknown (2.6.0 most likely) * @uses apply_filters() Calls 'taxonomy_template' filter on found path. * * @return string */function get_taxonomy_template() {	$taxonomy = get_query_var('taxonomy');	$term = get_query_var('term');	$templates = array();	if ( $taxonomy && $term )		$templates[] = "taxonomy-$taxonomy-$term.php";	if ( $taxonomy )		$templates[] = "taxonomy-$taxonomy.php";	$templates[] = "taxonomy.php";	$template = locate_template($templates);	return apply_filters('taxonomy_template', $template);}/** * Retrieve path of date template in current or parent template. * * @since 1.5.0 * * @return string */function get_date_template() {	return get_query_template('date');}/** * Retrieve path of home template in current or parent template. * * This is the template used for the page containing the blog posts * * Attempts to locate 'home.php' first before falling back to 'index.php'. * * @since 1.5.0 * @uses apply_filters() Calls 'home_template' on file path of home template. * * @return string */function get_home_template() {	$template = locate_template(array('home.php', 'index.php'));	return apply_filters('home_template', $template);}/** * Retrieve path of front-page template in current or parent template. * * Looks for 'front-page.php'. * * @since 3.0.0 * @uses apply_filters() Calls 'front_page_template' on file path of template. * * @return string */function get_front_page_template() {	return apply_filters( 'front_page_template', locate_template( array('front-page.php') ) );}/** * Retrieve path of page template in current or parent template. * * Will first look for the specifically assigned page template * The will search for 'page-{slug}.php' followed by 'page-id.php' * and finally 'page.php' * * @since 1.5.0 * * @return string */function get_page_template() {	global $wp_query;	$id = (int) $wp_query->get_queried_object_id();	$template = get_post_meta($id, '_wp_page_template', true);	$pagename = get_query_var('pagename');	if ( !$pagename && $id > 0 ) {		// If a static page is set as the front page, $pagename will not be set. Retrieve it from the queried object		$post = $wp_query->get_queried_object();		$pagename = $post->post_name;	}	if ( 'default' == $template )		$template = '';	$templates = array();	if ( !empty($template) && !validate_file($template) )		$templates[] = $template;	if ( $pagename )		$templates[] = "page-$pagename.php";	if ( $id )		$templates[] = "page-$id.php";	$templates[] = "page.php";	return apply_filters('page_template', locate_template($templates));}/** * Retrieve path of paged template in current or parent template. * * @since 1.5.0 * * @return string */function get_paged_template() {	return get_query_template('paged');}/** * Retrieve path of search template in current or parent template. * * @since 1.5.0 * * @return string */function get_search_template() {	return get_query_template('search');}/** * Retrieve path of single template in current or parent template. * * @since 1.5.0 * * @return string */function get_single_template() {	global $wp_query;	$object = $wp_query->get_queried_object();	$templates = array('single-' . $object->post_type . '.php', 'single.php');	return apply_filters('single_template', locate_template($templates));}/** * Retrieve path of attachment template in current or parent template. * * The attachment path first checks if the first part of the mime type exists. * The second check is for the second part of the mime type. The last check is * for both types separated by an underscore. If neither are found then the file * 'attachment.php' is checked and returned. * * Some examples for the 'text/plain' mime type are 'text.php', 'plain.php', and * finally 'text_plain.php'. * * @since 2.0.0 * * @return string */function get_attachment_template() {	global $posts;	$type = explode('/', $posts[0]->post_mime_type);	if ( $template = get_query_template($type[0]) )		return $template;	elseif ( $template = get_query_template($type[1]) )		return $template;	elseif ( $template = get_query_template("$type[0]_$type[1]") )		return $template;	else		return get_query_template('attachment');}/** * Retrieve path of comment popup template in current or parent template. * * Checks for comment popup template in current template, if it exists or in the * parent template. * * @since 1.5.0 * @uses apply_filters() Calls 'comments_popup_template' filter on path. * * @return string */function get_comments_popup_template() {	$template = locate_template(array("comments-popup.php"));	// Backward compat code will be removed in a future release	if ('' == $template)		$template = WPINC . '/theme-compat/comments-popup.php';	return apply_filters('comments_popup_template', $template);}/** * Retrieve the name of the highest priority template file that exists. * * Searches in the STYLESHEETPATH before TEMPLATEPATH so that themes which * inherit from a parent theme can just overload one file. * * @since 2.7.0 * * @param array $template_names Array of template files to search for in priority order. * @param bool $load If true the template file will be loaded if it is found. * @param bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false. * @return string The template filename if one is located. */function locate_template($template_names, $load = false, $require_once = true ) {	if ( !is_array($template_names) )		return '';	$located = '';	foreach ( $template_names as $template_name ) {		if ( !$template_name )			continue;		if ( file_exists(STYLESHEETPATH . '/' . $template_name)) {			$located = STYLESHEETPATH . '/' . $template_name;			break;		} else if ( file_exists(TEMPLATEPATH . '/' . $template_name) ) {			$located = TEMPLATEPATH . '/' . $template_name;			break;		}	}	if ( $load && '' != $located )		load_template( $located, $require_once );	return $located;}/** * Require the template file with WordPress environment. * * The globals are set up for the template file to ensure that the WordPress * environment is available from within the function. The query variables are * also available. * * @since 1.5.0 * * @param string $_template_file Path to template file. * @param bool $require_once Whether to require_once or require. Default true. */function load_template( $_template_file, $require_once = true ) {	global $posts, $post, $wp_did_header, $wp_did_template_redirect, $wp_query, $wp_rewrite, $wpdb, $wp_version, $wp, $id, $comment, $user_ID;	if ( is_array( $wp_query->query_vars ) )		extract( $wp_query->query_vars, EXTR_SKIP );	if ( $require_once )		require_once( $_template_file );	else		require( $_template_file );}/** * Display localized stylesheet link element. * * @since 2.1.0 */function locale_stylesheet() {	$stylesheet = get_locale_stylesheet_uri();	if ( empty($stylesheet) )		return;	echo '<link rel="stylesheet" href="' . $stylesheet . '" type="text/css" media="screen" />';}/** * Start preview theme output buffer. * * Will only preform task if the user has permissions and template and preview * query variables exist. * * @since 2.6.0 */function preview_theme() {	if ( ! (isset($_GET['template']) && isset($_GET['preview'])) )		return;	if ( !current_user_can( 'switch_themes' ) )		return;	$_GET['template'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['template']);	if ( validate_file($_GET['template']) )		return;	add_filter( 'template', '_preview_theme_template_filter' );	if ( isset($_GET['stylesheet']) ) {		$_GET['stylesheet'] = preg_replace('|[^a-z0-9_./-]|i', '', $_GET['stylesheet']);		if ( validate_file($_GET['stylesheet']) )			return;		add_filter( 'stylesheet', '_preview_theme_stylesheet_filter' );	}	// Prevent theme mods to current theme being used on theme being previewed	add_filter( 'pre_option_mods_' . get_current_theme(), '__return_empty_array' );	ob_start( 'preview_theme_ob_filter' );}add_action('setup_theme', 'preview_theme');/** * Private function to modify the current template when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_template_filter() {	return isset($_GET['template']) ? $_GET['template'] : '';}/** * Private function to modify the current stylesheet when previewing a theme * * @since 2.9.0 * @access private * * @return string */function _preview_theme_stylesheet_filter() {	return isset($_GET['stylesheet']) ? $_GET['stylesheet'] : '';}/** * Callback function for ob_start() to capture all links in the theme. * * @since 2.6.0 * @access private * * @param string $content * @return string */function preview_theme_ob_filter( $content ) {	return preg_replace_callback( "|(<a.*?href=([\"']))(.*?)([\"'].*?>)|", 'preview_theme_ob_filter_callback', $content );}/** * Manipulates preview theme links in order to control and maintain location. * * Callback function for preg_replace_callback() to accept and filter matches. * * @since 2.6.0 * @access private * * @param array $matches * @return string */function preview_theme_ob_filter_callback( $matches ) {	if ( strpos($matches[4], 'onclick') !== false )		$matches[4] = preg_replace('#onclick=([\'"]).*?(?<!\\\)\\1#i', '', $matches[4]); //Strip out any onclicks from rest of <a>. (?<!\\\) means to ignore the '" if its escaped by \  to prevent breaking mid-attribute.	if (		( false !== strpos($matches[3], '/wp-admin/') )	||		( false !== strpos( $matches[3], '://' ) && 0 !== strpos( $matches[3], home_url() ) )	||		( false !== strpos($matches[3], '/feed/') )	||		( false !== strpos($matches[3], '/trackback/') )	)		return $matches[1] . "#$matches[2] onclick=$matches[2]return false;" . $matches[4];	$link = add_query_arg( array('preview' => 1, 'template' => $_GET['template'], 'stylesheet' => @$_GET['stylesheet'] ), $matches[3] );	if ( 0 === strpos($link, 'preview=1') )		$link = "?$link";	return $matches[1] . esc_attr( $link ) . $matches[4];}/** * Switches current theme to new template and stylesheet names. * * @since unknown * @uses do_action() Calls 'switch_theme' action on updated theme display name. * * @param string $template Template name * @param string $stylesheet Stylesheet name. */function switch_theme($template, $stylesheet) {	update_option('template', $template);	update_option('stylesheet', $stylesheet);	delete_option('current_theme');	$theme = get_current_theme();	do_action('switch_theme', $theme);}/** * Checks that current theme files 'index.php' and 'style.css' exists. * * Does not check the default theme, which is the fallback and should always exist. * Will switch theme to the fallback theme if current theme does not validate. * You can use the 'validate_current_theme' filter to return FALSE to * disable this functionality. * * @since 1.5.0 * @see WP_DEFAULT_THEME * * @return bool */function validate_current_theme() {	// Don't validate during an install/upgrade.	if ( defined('WP_INSTALLING') || !apply_filters( 'validate_current_theme', true ) )		return true;	if ( get_template() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/index.php') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	if ( get_stylesheet() != WP_DEFAULT_THEME && !file_exists(get_template_directory() . '/style.css') ) {		switch_theme( WP_DEFAULT_THEME, WP_DEFAULT_THEME );		return false;	}	return true;}/** * Retrieve theme modification value for the current theme. * * If the modification name does not exist, then the $default will be passed * through {@link http://php.net/sprintf sprintf()} PHP function with the first * string the template directory URI and the second string the stylesheet * directory URI. * * @since 2.1.0 * @uses apply_filters() Calls 'theme_mod_$name' filter on the value. * * @param string $name Theme modification name. * @param bool|string $default * @return string */function get_theme_mod($name, $default = false) {	$theme = get_current_theme();	$mods = get_option( "mods_$theme" );	if ( isset($mods[$name]) )		return apply_filters( "theme_mod_$name", $mods[$name] );	return apply_filters( "theme_mod_$name", sprintf($default, get_template_directory_uri(), get_stylesheet_directory_uri()) );}/** * Update theme modification value for the current theme. * * @since 2.1.0 * * @param string $name Theme modification name. * @param string $value theme modification value. */function set_theme_mod($name, $value) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	$mods[$name] = $value;	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modification name from current theme list. * * If removing the name also removes all elements, then the entire option will * be removed. * * @since 2.1.0 * * @param string $name Theme modification name. * @return null */function remove_theme_mod( $name ) {	$theme = get_current_theme();	$mods = get_option("mods_$theme");	if ( !isset($mods[$name]) )		return;	unset($mods[$name]);	if ( empty($mods) )		return remove_theme_mods();	update_option("mods_$theme", $mods);	wp_cache_delete("mods_$theme", 'options');}/** * Remove theme modifications option for current theme. * * @since 2.1.0 */function remove_theme_mods() {	$theme = get_current_theme();	delete_option("mods_$theme");}/** * Retrieve text color for custom header. * * @since 2.1.0 * @uses HEADER_TEXTCOLOR * * @return string */function get_header_textcolor() {	$default = defined('HEADER_TEXTCOLOR') ? HEADER_TEXTCOLOR : '';	return get_theme_mod('header_textcolor', $default);}/** * Display text color for custom header. * * @since 2.1.0 */function header_textcolor() {	echo get_header_textcolor();}/** * Retrieve header image for custom header. * * @since 2.1.0 * @uses HEADER_IMAGE * * @return string */function get_header_image() {	$default = defined('HEADER_IMAGE') ? HEADER_IMAGE : '';	return get_theme_mod('header_image', $default);}/** * Display header image path. * * @since 2.1.0 */function header_image() {	echo get_header_image();}/** * Add callbacks for image header display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Image_Header class and that will be added * to the 'admin_menu' action. * * @since 2.1.0 * @uses Custom_Image_Header Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom header administration screen. * @param callback $admin_image_div_callback Output a custom header image div on the custom header administration screen. Optional. */function add_custom_image_header($header_callback, $admin_header_callback, $admin_image_div_callback = '') {	if ( ! empty($header_callback) )		add_action('wp_head', $header_callback);	add_theme_support( 'custom-header' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-header.php');	$GLOBALS['custom_image_header'] =& new Custom_Image_Header($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_image_header'], 'init'));}/** * Register a selection of default headers to be displayed by the custom header admin UI. * * @since 3.0.0 * * @param array $headers Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys. */function register_default_headers( $headers ) {	global $_wp_default_headers;	$_wp_default_headers = array_merge( (array) $_wp_default_headers, (array) $headers );}/** * Unregister default headers. * * This function must be called after register_default_headers() has already added the * header you want to remove. * * @see register_default_headers() * @since 3.0.0 * * @param string|array The header string id (key of array) to remove, or an array thereof. * @return True on success, false on failure. */function unregister_default_headers( $header ) {	global $_wp_default_headers;	if ( is_array( $header ) ) {		array_map( 'unregister_default_headers', $header );	} elseif ( isset( $_wp_default_headers[ $header ] ) ) {		unset( $_wp_default_headers[ $header ] );		return true;	} else {		return false;	}}/** * Retrieve background image for custom background. * * @since 3.0.0 * * @return string */function get_background_image() {	$default = defined('BACKGROUND_IMAGE') ? BACKGROUND_IMAGE : '';	return get_theme_mod('background_image', $default);}/** * Display background image path. * * @since 3.0.0 */function background_image() {	echo get_background_image();}/** * Retrieve value for custom background color. * * @since 3.0.0 * @uses BACKGROUND_COLOR * * @return string */function get_background_color() {	$default = defined('BACKGROUND_COLOR') ? BACKGROUND_COLOR : '';	return get_theme_mod('background_color', $default);}/** * Display background color value. * * @since 3.0.0 */function background_color() {	echo get_background_color();}/** * Add callbacks for background image display. * * The parameter $header_callback callback will be required to display the * content for the 'wp_head' action. The parameter $admin_header_callback * callback will be added to Custom_Background class and that will be added * to the 'admin_menu' action. * * @since 3.0.0 * @uses Custom_Background Sets up for $admin_header_callback for administration panel display. * * @param callback $header_callback Call on 'wp_head' action. * @param callback $admin_header_callback Call on custom background administration screen. * @param callback $admin_image_div_callback Output a custom background image div on the custom background administration screen. Optional. */function add_custom_background($header_callback = '', $admin_header_callback = '', $admin_image_div_callback = '') {	if ( isset($GLOBALS['custom_background']) )		return;	if ( empty($header_callback) )		$header_callback = '_custom_background_cb';	add_action('wp_head', $header_callback);	add_theme_support( 'custom-background' );	if ( ! is_admin() )		return;	require_once(ABSPATH . 'wp-admin/custom-background.php');	$GLOBALS['custom_background'] =& new Custom_Background($admin_header_callback, $admin_image_div_callback);	add_action('admin_menu', array(&$GLOBALS['custom_background'], 'init'));}/** * Default custom background callback. * * @since 3.0.0 * @see add_custom_background() * @access protected */function _custom_background_cb() {	$background = get_background_image();	$color = get_background_color();	if ( ! $background && ! $color )		return;	$style = $color ? "background-color: #$color;" : '';	if ( $background ) {		$image = " background-image: url('$background');";		$repeat = get_theme_mod( 'background_repeat', 'repeat' );		if ( ! in_array( $repeat, array( 'no-repeat', 'repeat-x', 'repeat-y', 'repeat' ) ) )			$repeat = 'repeat';		$repeat = " background-repeat: $repeat;";		$position = get_theme_mod( 'background_position_x', 'left' );		if ( ! in_array( $position, array( 'center', 'right', 'left' ) ) )			$position = 'left';		$position = " background-position: top $position;";		$attachment = get_theme_mod( 'background_attachment', 'scroll' );		if ( ! in_array( $attachment, array( 'fixed', 'scroll' ) ) )			$attachment = 'scroll';		$attachment = " background-attachment: $attachment;";		$style .= $image . $repeat . $position . $attachment;	}?><style type="text/css">body { <?php echo trim( $style ); ?> }</style><?php}/** * Add callback for custom TinyMCE editor stylesheets. * * The parameter $stylesheet is the name of the stylesheet, relative to * the theme root. It also accepts an array of stylesheets. * It is optional and defaults to 'editor-style.css'. * * @since 3.0.0 * * @param mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root. * 	Defaults to 'editor-style.css' */function add_editor_style( $stylesheet = 'editor-style.css' ) {	add_theme_support( 'editor-style' );	if ( ! is_admin() )		return;	global $editor_styles;	$editor_styles = (array) $editor_styles;	$stylesheet    = (array) $stylesheet;	if ( is_rtl() ) {		$rtl_stylesheet = str_replace('.css', '-rtl.css', $stylesheet[0]);		$stylesheet[] = $rtl_stylesheet;	}	$editor_styles = array_merge( $editor_styles, $stylesheet );}/** * Allows a theme to register its support of a certain feature * * Must be called in the theme's functions.php file to work. * If attached to a hook, it must be after_setup_theme. * The init hook may be too late for some features. * * @since 2.9.0 * @param string $feature the feature being added */function add_theme_support( $feature ) {	global $_wp_theme_features;	if ( func_num_args() == 1 )		$_wp_theme_features[$feature] = true;	else		$_wp_theme_features[$feature] = array_slice( func_get_args(), 1 );}/** * Allows a theme to de-register its support of a certain feature * * Should be called in the theme's functions.php file. Generally would * be used for child themes to override support from the parent theme. * * @since 3.0.0 * @see add_theme_support() * @param string $feature the feature being added * @return bool Whether feature was removed. */function remove_theme_support( $feature ) {	// Blacklist: for internal registrations not used directly by themes.	if ( in_array( $feature, array( 'custom-background', 'custom-header', 'editor-style', 'widgets' ) ) )		return false;	global $_wp_theme_features;	if ( ! isset( $_wp_theme_features[$feature] ) )		return false;	unset( $_wp_theme_features[$feature] );	return true;}/** * Checks a theme's support for a given feature * * @since 2.9.0 * @param string $feature the feature being checked * @return boolean */function current_theme_supports( $feature ) {	global $_wp_theme_features;	if ( !isset( $_wp_theme_features[$feature] ) )		return false;	// If no args passed then no extra checks need be performed	if ( func_num_args() <= 1 )		return true;	$args = array_slice( func_get_args(), 1 );	// @todo Allow pluggable arg checking	switch ( $feature ) {		case 'post-thumbnails':			// post-thumbnails can be registered for only certain content/post types by passing			// an array of types to add_theme_support().  If no array was passed, then			// any type is accepted			if ( true === $_wp_theme_features[$feature] )  // Registered for all types				return true;			$content_type = $args[0];			if ( in_array($content_type, $_wp_theme_features[$feature][0]) )				return true;			else				return false;			break;	}	return true;}/** * Checks a theme's support for a given feature before loading the functions which implement it. * * @since 2.9.0 * @param string $feature the feature being checked * @param string $include the file containing the functions that implement the feature */function require_if_theme_supports( $feature, $include) {	if ( current_theme_supports( $feature ) )		require ( $include );}/** * Checks an attachment being deleted to see if it's a header or background image. * * If true it removes the theme modification which would be pointing at the deleted * attachment * * @access private * @since 3.0.0 * @param int $id the attachment id */function _delete_attachment_theme_mod( $id ) {	$attachment_image = wp_get_attachment_url( $id );	$header_image = get_header_image();	$background_image = get_background_image();	if ( $header_image && $header_image == $attachment_image )		remove_theme_mod( 'header_image' );	if ( $background_image && $background_image == $attachment_image )		remove_theme_mod( 'background_image' );}add_action( 'delete_attachment', '_delete_attachment_theme_mod' );?>
