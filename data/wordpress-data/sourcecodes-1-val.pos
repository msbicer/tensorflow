<?php/** * WordPress Bookmark Administration API * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function add_link() {	return edit_link();}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function edit_link( $link_id = '' ) {	if (!current_user_can( 'manage_links' ))		wp_die( __( 'Cheatin&#8217; uh?' ));	$_POST['link_url'] = esc_html( $_POST['link_url'] );	$_POST['link_url'] = esc_url($_POST['link_url']);	$_POST['link_name'] = esc_html( $_POST['link_name'] );	$_POST['link_image'] = esc_html( $_POST['link_image'] );	$_POST['link_rss'] = esc_url($_POST['link_rss']);	if ( !isset($_POST['link_visible']) || 'N' != $_POST['link_visible'] )		$_POST['link_visible'] = 'Y';	if ( !empty( $link_id ) ) {		$_POST['link_id'] = $link_id;		return wp_update_link( $_POST);	} else {		return wp_insert_link( $_POST);	}}/** * {@internal Missing Short Description}} * * @since unknown * * @return unknown */function get_default_link_to_edit() {	if ( isset( $_GET['linkurl'] ) )		$link->link_url = esc_url( $_GET['linkurl']);	else		$link->link_url = '';	if ( isset( $_GET['name'] ) )		$link->link_name = esc_attr( $_GET['name']);	else		$link->link_name = '';	$link->link_visible = 'Y';	return $link;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_delete_link( $link_id ) {	global $wpdb;	do_action( 'delete_link', $link_id );	wp_delete_object_term_relationships( $link_id, 'link_category' );	$wpdb->query( $wpdb->prepare( "DELETE FROM $wpdb->links WHERE link_id = %d", $link_id ) );	do_action( 'deleted_link', $link_id );	clean_bookmark_cache( $link_id );	return true;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function wp_get_link_cats( $link_id = 0 ) {	$cats = wp_get_object_terms( $link_id, 'link_category', array('fields' => 'ids') );	return array_unique( $cats );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @return unknown */function get_link_to_edit( $link_id ) {	return get_bookmark( $link_id, OBJECT, 'edit' );}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_insert_link( $linkdata, $wp_error = false ) {	global $wpdb, $current_user;	$defaults = array( 'link_id' => 0, 'link_name' => '', 'link_url' => '', 'link_rating' => 0 );	$linkdata = wp_parse_args( $linkdata, $defaults );	$linkdata = sanitize_bookmark( $linkdata, 'db' );	extract( stripslashes_deep( $linkdata ), EXTR_SKIP );	$update = false;	if ( !empty( $link_id ) )		$update = true;	if ( trim( $link_name ) == '' ) {		if ( trim( $link_url ) != '' ) {			$link_name = $link_url;		} else {			return 0;		}	}	if ( trim( $link_url ) == '' )		return 0;	if ( empty( $link_rating ) )		$link_rating = 0;	if ( empty( $link_image ) )		$link_image = '';	if ( empty( $link_target ) )		$link_target = '';	if ( empty( $link_visible ) )		$link_visible = 'Y';	if ( empty( $link_owner ) )		$link_owner = $current_user->id;	if ( empty( $link_notes ) )		$link_notes = '';	if ( empty( $link_description ) )		$link_description = '';	if ( empty( $link_rss ) )		$link_rss = '';	if ( empty( $link_rel ) )		$link_rel = '';	// Make sure we set a valid category	if ( ! isset( $link_category ) ||0 == count( $link_category ) || !is_array( $link_category ) ) {		$link_category = array( get_option( 'default_link_category' ) );	}	if ( $update ) {		if ( false === $wpdb->update( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_rating', 'link_rel', 'link_notes', 'link_rss'), compact('link_id') ) ) {			if ( $wp_error )				return new WP_Error( 'db_update_error', __( 'Could not update link in the database' ), $wpdb->last_error );			else				return 0;		}	} else {		if ( false === $wpdb->insert( $wpdb->links, compact('link_url', 'link_name', 'link_image', 'link_target', 'link_description', 'link_visible', 'link_owner', 'link_rating', 'link_rel', 'link_notes', 'link_rss') ) ) {			if ( $wp_error )				return new WP_Error( 'db_insert_error', __( 'Could not insert link into the database' ), $wpdb->last_error );			else				return 0;		}		$link_id = (int) $wpdb->insert_id;	}	wp_set_link_cats( $link_id, $link_category );	if ( $update )		do_action( 'edit_link', $link_id );	else		do_action( 'add_link', $link_id );	clean_bookmark_cache( $link_id );	return $link_id;}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $link_id * @param unknown_type $link_categories */function wp_set_link_cats( $link_id = 0, $link_categories = array() ) {	// If $link_categories isn't already an array, make it one:	if ( !is_array( $link_categories ) || 0 == count( $link_categories ) )		$link_categories = array( get_option( 'default_link_category' ) );	$link_categories = array_map( 'intval', $link_categories );	$link_categories = array_unique( $link_categories );	wp_set_object_terms( $link_id, $link_categories, 'link_category' );	clean_bookmark_cache( $link_id );}	// wp_set_link_cats()/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $linkdata * @return unknown */function wp_update_link( $linkdata ) {	$link_id = (int) $linkdata['link_id'];	$link = get_bookmark( $link_id, ARRAY_A );	// Escape data pulled from DB.	$link = add_magic_quotes( $link );	// Passed link category list overwrites existing category list if not empty.	if ( isset( $linkdata['link_category'] ) && is_array( $linkdata['link_category'] )			 && 0 != count( $linkdata['link_category'] ) )		$link_cats = $linkdata['link_category'];	else		$link_cats = $link['link_category'];	// Merge old and new fields with new fields overwriting old ones.	$linkdata = array_merge( $link, $linkdata );	$linkdata['link_category'] = $link_cats;	return wp_insert_link( $linkdata );}?>
<?php/** * Tools Administration Panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');$title = __('Tools');add_contextual_help($current_screen,	'<p>' . __('Press This is a bookmarklet that makes it easy to blog about something you come across on the web. You can use it to just grab a link, or to post an excerpt. Press This will even allow you to choose from images included on the page and use them in your post. Just drag the Press This link on this screen to your bookmarks bar in your browser, and you&#8217;ll be on your way to easier content creation.') . '</p>' .	'<p>' . __('Note: Turbo/Gears is no longer promoted on this screen as it was in previous versions due to the fact that Google has discontinued support for it.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Tools_Tools_SubPanel" target="_blank">Tools Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('./admin-header.php');?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><?php if ( current_user_can('edit_posts') ) : ?><div class="tool-box">	<h3 class="title"><?php _e('Press This') ?></h3>	<p><?php _e('Press This is a bookmarklet: a little app that runs in your browser and lets you grab bits of the web.');?></p>	<p><?php _e('Use Press This to clip text, images and videos from any web page. Then edit and add more straight from Press This before you save or publish it in a post on your site.'); ?></p>	<p><?php _e('Drag-and-drop the following link to your bookmarks bar or right click it and add it to your favorites for a posting shortcut.') ?></p>	<p class="pressthis"><a href="<?php echo htmlspecialchars( get_shortcut_link() ); ?>" title="<?php echo esc_attr(__('Press This')) ?>"><?php _e('Press This') ?></a></p></div><?phpendif;if ( current_user_can( 'import' ) ) :$cats = get_taxonomy('category');$tags = get_taxonomy('post_tag');if ( current_user_can($cats->cap->manage_terms) || current_user_can($tags->cap->manage_terms) ) : ?><div class="tool-box">    <h3 class="title"><?php _e( 'Categories and Tags Converter' ) ?></h3>    <p><?php printf( __('<a href="%s">Use this</a> to convert categories to tags or tags to categories.'), 'import.php' ); ?></p></div><?phpendif;endif;do_action( 'tool_box' );?></div><?phpinclude('./admin-footer.php');?>
<?php/** * Portable PHP password hashing framework. * @package phpass * @since 2.5 * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ */## Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in# the public domain.## There's absolutely no warranty.## Please be sure to update the Version line if you edit this file in any way.# It is suggested that you leave the main version number intact, but indicate# your project name (after the slash) and add your own revision information.## Please do not change the "private" password hashing method implemented in# here, thereby making your hashes incompatible.  However, if you must, please# change the hash type identifier (the "$P$") to something different.## Obviously, since this code is in the public domain, the above are not# requirements (there can be none), but merely suggestions.#/** * Portable PHP password hashing framework. * * @package phpass * @version 0.2 / genuine. * @link http://www.openwall.com/phpass/ * @since 2.5 */class PasswordHash {	var $itoa64;	var $iteration_count_log2;	var $portable_hashes;	var $random_state;	function PasswordHash($iteration_count_log2, $portable_hashes)	{		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)			$iteration_count_log2 = 8;		$this->iteration_count_log2 = $iteration_count_log2;		$this->portable_hashes = $portable_hashes;		$this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons	}	function get_random_bytes($count)	{		$output = '';		if ( @is_readable('/dev/urandom') &&		    ($fh = @fopen('/dev/urandom', 'rb'))) {			$output = fread($fh, $count);			fclose($fh);		}		if (strlen($output) < $count) {			$output = '';			for ($i = 0; $i < $count; $i += 16) {				$this->random_state =				    md5(microtime() . $this->random_state);				$output .=				    pack('H*', md5($this->random_state));			}			$output = substr($output, 0, $count);		}		return $output;	}	function encode64($input, $count)	{		$output = '';		$i = 0;		do {			$value = ord($input[$i++]);			$output .= $this->itoa64[$value & 0x3f];			if ($i < $count)				$value |= ord($input[$i]) << 8;			$output .= $this->itoa64[($value >> 6) & 0x3f];			if ($i++ >= $count)				break;			if ($i < $count)				$value |= ord($input[$i]) << 16;			$output .= $this->itoa64[($value >> 12) & 0x3f];			if ($i++ >= $count)				break;			$output .= $this->itoa64[($value >> 18) & 0x3f];		} while ($i < $count);		return $output;	}	function gensalt_private($input)	{		$output = '$P$';		$output .= $this->itoa64[min($this->iteration_count_log2 +			((PHP_VERSION >= '5') ? 5 : 3), 30)];		$output .= $this->encode64($input, 6);		return $output;	}	function crypt_private($password, $setting)	{		$output = '*0';		if (substr($setting, 0, 2) == $output)			$output = '*1';		if (substr($setting, 0, 3) != '$P$')			return $output;		$count_log2 = strpos($this->itoa64, $setting[3]);		if ($count_log2 < 7 || $count_log2 > 30)			return $output;		$count = 1 << $count_log2;		$salt = substr($setting, 4, 8);		if (strlen($salt) != 8)			return $output;		# We're kind of forced to use MD5 here since it's the only		# cryptographic primitive available in all versions of PHP		# currently in use.  To implement our own low-level crypto		# in PHP would result in much worse performance and		# consequently in lower iteration counts and hashes that are		# quicker to crack (by non-PHP code).		if (PHP_VERSION >= '5') {			$hash = md5($salt . $password, TRUE);			do {				$hash = md5($hash . $password, TRUE);			} while (--$count);		} else {			$hash = pack('H*', md5($salt . $password));			do {				$hash = pack('H*', md5($hash . $password));			} while (--$count);		}		$output = substr($setting, 0, 12);		$output .= $this->encode64($hash, 16);		return $output;	}	function gensalt_extended($input)	{		$count_log2 = min($this->iteration_count_log2 + 8, 24);		# This should be odd to not reveal weak DES keys, and the		# maximum valid value is (2**24 - 1) which is odd anyway.		$count = (1 << $count_log2) - 1;		$output = '_';		$output .= $this->itoa64[$count & 0x3f];		$output .= $this->itoa64[($count >> 6) & 0x3f];		$output .= $this->itoa64[($count >> 12) & 0x3f];		$output .= $this->itoa64[($count >> 18) & 0x3f];		$output .= $this->encode64($input, 3);		return $output;	}	function gensalt_blowfish($input)	{		# This one needs to use a different order of characters and a		# different encoding scheme from the one in encode64() above.		# We care because the last character in our encoded string will		# only represent 2 bits.  While two known implementations of		# bcrypt will happily accept and correct a salt string which		# has the 4 unused bits set to non-zero, we do not want to take		# chances and we also do not want to waste an additional byte		# of entropy.		$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';		$output = '$2a$';		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);		$output .= '$';		$i = 0;		do {			$c1 = ord($input[$i++]);			$output .= $itoa64[$c1 >> 2];			$c1 = ($c1 & 0x03) << 4;			if ($i >= 16) {				$output .= $itoa64[$c1];				break;			}			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 4;			$output .= $itoa64[$c1];			$c1 = ($c2 & 0x0f) << 2;			$c2 = ord($input[$i++]);			$c1 |= $c2 >> 6;			$output .= $itoa64[$c1];			$output .= $itoa64[$c2 & 0x3f];		} while (1);		return $output;	}	function HashPassword($password)	{		$random = '';		if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {			$random = $this->get_random_bytes(16);			$hash =			    crypt($password, $this->gensalt_blowfish($random));			if (strlen($hash) == 60)				return $hash;		}		if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {			if (strlen($random) < 3)				$random = $this->get_random_bytes(3);			$hash =			    crypt($password, $this->gensalt_extended($random));			if (strlen($hash) == 20)				return $hash;		}		if (strlen($random) < 6)			$random = $this->get_random_bytes(6);		$hash =		    $this->crypt_private($password,		    $this->gensalt_private($random));		if (strlen($hash) == 34)			return $hash;		# Returning '*' on error is safe here, but would _not_ be safe		# in a crypt(3)-like function used _both_ for generating new		# hashes and for validating passwords against existing hashes.		return '*';	}	function CheckPassword($password, $stored_hash)	{		$hash = $this->crypt_private($password, $stored_hash);		if ($hash[0] == '*')			$hash = crypt($password, $stored_hash);		return $hash == $stored_hash;	}}?>
<?php/** * Multisite upgrade administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once('admin.php');if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );require_once( ABSPATH . WPINC . '/http.php' );$title = __( 'Update Network' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('Only use this screen once you have updated to a new version of WordPress through Dashboard > Updates. Clicking the Update Network button will step through each site in the network, five at a time, and make sure any database upgrades are applied.') . '</p>' .	'<p>' . __('If a version update to core has not happened, clicking this button won&#8217;t affect anything.') . '</p>' .	'<p>' . __('If this process fails for any reason, users logging in to their sites will force the same update.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Update_SubPanel" target="_blank">Update Network Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once('admin-header.php');if ( ! current_user_can( 'manage_network' ) )	wp_die( __( 'You do not have permission to access this page.' ) );echo '<div class="wrap">';screen_icon();echo '<h2>' . __( 'Update Network' ) . '</h2>';$action = isset($_GET['action']) ? $_GET['action'] : 'show';switch ( $action ) {	case "upgrade":		$n = ( isset($_GET['n']) ) ? intval($_GET['n']) : 0;		if ( $n < 5 ) {			global $wp_db_version;			update_site_option( 'wpmu_upgrade_site', $wp_db_version );		}		$blogs = $wpdb->get_results( "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' AND spam = '0' AND deleted = '0' AND archived = '0' ORDER BY registered DESC LIMIT {$n}, 5", ARRAY_A );		if ( empty( $blogs ) ) {			echo '<p>' . __( 'All done!' ) . '</p>';			break;		}		echo "<ul>";		foreach ( (array) $blogs as $details ) {			$siteurl = get_blog_option( $details['blog_id'], 'siteurl' );			echo "<li>$siteurl</li>";			$response = wp_remote_get( trailingslashit( $siteurl ) . "wp-admin/upgrade.php?step=upgrade_db", array( 'timeout' => 120, 'httpversion' => '1.1' ) );			if ( is_wp_error( $response ) )				wp_die( sprintf( __( 'Warning! Problem updating %1$s. Your server may not be able to connect to sites running on it. Error message: <em>%2$s</em>' ), $siteurl, $response->get_error_message() ) );			do_action( 'after_mu_upgrade', $response );			do_action( 'wpmu_upgrade_site', $details[ 'blog_id' ] );		}		echo "</ul>";		?><p><?php _e( 'If your browser doesn&#8217;t start loading the next page automatically, click this link:' ); ?> <a class="button" href="ms-upgrade-network.php?action=upgrade&amp;n=<?php echo ($n + 5) ?>"><?php _e("Next Sites"); ?></a></p>		<script type='text/javascript'>		<!--		function nextpage() {			location.href = "ms-upgrade-network.php?action=upgrade&n=<?php echo ($n + 5) ?>";		}		setTimeout( "nextpage()", 250 );		//-->		</script><?php	break;	case 'show':	default:		?><p><?php _e( 'You can update all the sites on your network through this page. It works by calling the update script of each site automatically. Hit the link below to update.' ); ?></p>		<p><a class="button" href="ms-upgrade-network.php?action=upgrade"><?php _e("Update Network"); ?></a></p><?php		do_action( 'wpmu_upgrade_page' );	break;}?></div><?php include('./admin-footer.php'); ?>
<?php/** * The template for displaying attachments. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<p class="page-title"><a href="<?php echo get_permalink( $post->post_parent ); ?>" title="<?php esc_attr( printf( __( 'Return to %s', 'twentyten' ), get_the_title( $post->post_parent ) ) ); ?>" rel="gallery"><?php					/* translators: %s - title of parent post */					printf( __( '<span class="meta-nav">&larr;</span> %s', 'twentyten' ), get_the_title( $post->post_parent ) );				?></a></p>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h2 class="entry-title"><?php the_title(); ?></h2>					<div class="entry-meta">						<?php							printf(__('<span class="%1$s">By</span> %2$s', 'twentyten'),								'meta-prep meta-prep-author',								sprintf( '<span class="author vcard"><a class="url fn n" href="%1$s" title="%2$s">%3$s</a></span>',									get_author_posts_url( get_the_author_meta( 'ID' ) ),									sprintf( esc_attr__( 'View all posts by %s', 'twentyten' ), get_the_author() ),									get_the_author()								)							);						?>						<span class="meta-sep">|</span>						<?php							printf( __('<span class="%1$s">Published</span> %2$s', 'twentyten'),								'meta-prep meta-prep-entry-date',								sprintf( '<span class="entry-date"><abbr class="published" title="%1$s">%2$s</abbr></span>',									esc_attr( get_the_time() ),									get_the_date()								)							);							if ( wp_attachment_is_image() ) {								echo ' <span class="meta-sep">|</span> ';								$metadata = wp_get_attachment_metadata();								printf( __( 'Full size is %s pixels', 'twentyten'),									sprintf( '<a href="%1$s" title="%2$s">%3$s &times; %4$s</a>',										wp_get_attachment_url(),										esc_attr( __('Link to full-size image', 'twentyten') ),										$metadata['width'],										$metadata['height']									)								);							}						?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="meta-sep">|</span> <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-meta -->					<div class="entry-content">						<div class="entry-attachment"><?php if ( wp_attachment_is_image() ) :	$attachments = array_values( get_children( array( 'post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID' ) ) );	foreach ( $attachments as $k => $attachment ) {		if ( $attachment->ID == $post->ID )			break;	}	$k++;	// If there is more than 1 image attachment in a gallery	if ( count( $attachments ) > 1 ) {		if ( isset( $attachments[ $k ] ) )			// get the URL of the next image attachment			$next_attachment_url = get_attachment_link( $attachments[ $k ]->ID );		else			// or get the URL of the first image attachment			$next_attachment_url = get_attachment_link( $attachments[ 0 ]->ID );	} else {		// or, if there's only 1 image attachment, get the URL of the image		$next_attachment_url = wp_get_attachment_url();	}?>						<p class="attachment"><a href="<?php echo $next_attachment_url; ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php							$attachment_size = apply_filters( 'twentyten_attachment_size', 900 );							echo wp_get_attachment_image( $post->ID, array( $attachment_size, 9999 ) ); // filterable image width with, essentially, no limit for image height.						?></a></p>						<div id="nav-below" class="navigation">							<div class="nav-previous"><?php previous_image_link( false ); ?></div>							<div class="nav-next"><?php next_image_link( false ); ?></div>						</div><!-- #nav-below --><?php else : ?>						<a href="<?php echo wp_get_attachment_url(); ?>" title="<?php echo esc_attr( get_the_title() ); ?>" rel="attachment"><?php echo basename( get_permalink() ); ?></a><?php endif; ?>						</div><!-- .entry-attachment -->						<div class="entry-caption"><?php if ( !empty( $post->post_excerpt ) ) the_excerpt(); ?></div><?php the_content( __( 'Continue reading <span class="meta-nav">&rarr;</span>', 'twentyten' ) ); ?><?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>					</div><!-- .entry-content -->					<div class="entry-utility">						<?php twentyten_posted_in(); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), ' <span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-utility -->				</div><!-- #post-## --><?php comments_template(); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" /><title><?php wp_title('&laquo;', true, 'right'); ?> <?php bloginfo('name'); ?></title><link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" type="text/css" media="screen" /><link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" /><style type="text/css" media="screen"><?php// Checks to see whether it needs a sidebarif ( empty($withcomments) && !is_single() ) {?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbg-<?php bloginfo('text_direction'); ?>.jpg") repeat-y top; border: none; }<?php } else { // No sidebar ?>	#page { background: url("<?php bloginfo('stylesheet_directory'); ?>/images/kubrickbgwide.jpg") repeat-y top; border: none; }<?php } ?></style><?php if ( is_singular() ) wp_enqueue_script( 'comment-reply' ); ?><?php wp_head(); ?></head><body <?php body_class(); ?>><div id="page"><div id="header" role="banner">	<div id="headerimg">		<h1><a href="<?php echo home_url(); ?>/"><?php bloginfo('name'); ?></a></h1>		<div class="description"><?php bloginfo('description'); ?></div>	</div></div><hr />
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * WordPress Upgrade Functions. Old file, must not be used. Include * wp-admin/includes/upgrade.php instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/upgrade.php' );require_once(ABSPATH . 'wp-admin/includes/upgrade.php');?>
<?php/** * Simple and uniform HTTP request API. * * Standardizes the HTTP requests for WordPress. Handles cookies, gzip encoding and decoding, chunk * decoding, if HTTP 1.1 and various other difficult HTTP protocol implementations. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * WordPress HTTP Class for managing HTTP Transports and making HTTP requests. * * This class is called for the functionality of making HTTP requests and replaces Snoopy * functionality. There is no available functionality to add HTTP transport implementations, since * most of the HTTP transports are added and available for use. * * There are no properties, because none are needed and for performance reasons. Some of the * functions are static and while they do have some overhead over functions in PHP4, the purpose is * maintainability. When PHP5 is finally the requirement, it will be easy to add the static keyword * to the code. It is not as easy to convert a function to a method after enough code uses the old * way. * * Debugging includes several actions, which pass different variables for debugging the HTTP API. * * <strong>http_transport_get_debug</strong> - gives working, nonblocking, and blocking transports. * * <strong>http_transport_post_debug</strong> - gives working, nonblocking, and blocking transports. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http {	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor	 *	 * @since 2.7.0	 * @return WP_Http	 */	function WP_Http() {		$this->__construct();	}	/**	 * PHP5 style Constructor - Set up available transport if not available.	 *	 * PHP4 does not have the 'self' keyword and since WordPress supports PHP4, the class needs to	 * be used for the static call. The transport are set up to save time and will only be created	 * once. This class can be created many times without having to go through the step of finding	 * which transports are available.	 *	 * @since 2.7.0	 * @return WP_Http	 */	function __construct() {		WP_Http::_getTransport();		WP_Http::_postTransport();	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches that object to be	 * used later.	 *	 * The order for the GET/HEAD requests are HTTP Extension, cURL, Streams, Fopen, and finally	 * Fsockopen. fsockopen() is used last, because it has the most overhead in its implementation.	 * There isn't any real way around it, since redirects have to be supported, much the same way	 * the other transports also handle redirects.	 *	 * There are currently issues with "localhost" not resolving correctly with DNS. This may cause	 * an error "failed to open stream: A connection attempt failed because the connected party did	 * not properly respond after a period of time, or established connection failed because [the]	 * connected host has failed to respond."	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_getTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fopen::test($args) ) {				$working_transport['fopen'] = new WP_Http_Fopen();				$blocking_transport[] = &$working_transport['fopen'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fopen', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_get_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Tests the WordPress HTTP objects for an object to use and returns it.	 *	 * Tests all of the objects and returns the object that passes. Also caches	 * that object to be used later. This is for posting content to a URL and	 * is used when there is a body. The plain Fopen Transport can not be used	 * to send content, but the streams transport can. This is a limitation that	 * is addressed here, by just not including that transport.	 *	 * @since 2.7.0	 * @access private	 *	 * @param array $args Request args, default us an empty array	 * @return object|null Null if no transports are available, HTTP transport object.	 */	function &_postTransport( $args = array() ) {		static $working_transport, $blocking_transport, $nonblocking_transport;		if ( is_null($working_transport) ) {			if ( true === WP_Http_ExtHttp::test($args) ) {				$working_transport['exthttp'] = new WP_Http_ExtHttp();				$blocking_transport[] = &$working_transport['exthttp'];			} else if ( true === WP_Http_Curl::test($args) ) {				$working_transport['curl'] = new WP_Http_Curl();				$blocking_transport[] = &$working_transport['curl'];			} else if ( true === WP_Http_Streams::test($args) ) {				$working_transport['streams'] = new WP_Http_Streams();				$blocking_transport[] = &$working_transport['streams'];			} else if ( true === WP_Http_Fsockopen::test($args) ) {				$working_transport['fsockopen'] = new WP_Http_Fsockopen();				$blocking_transport[] = &$working_transport['fsockopen'];			}			foreach ( array('curl', 'streams', 'fsockopen', 'exthttp') as $transport ) {				if ( isset($working_transport[$transport]) )					$nonblocking_transport[] = &$working_transport[$transport];			}		}		do_action( 'http_transport_post_debug', $working_transport, $blocking_transport, $nonblocking_transport );		if ( isset($args['blocking']) && !$args['blocking'] )			return $nonblocking_transport;		else			return $blocking_transport;	}	/**	 * Send a HTTP request to a URI.	 *	 * The body and headers are part of the arguments. The 'body' argument is for the body and will	 * accept either a string or an array. The 'headers' argument should be an array, but a string	 * is acceptable. If the 'body' argument is an array, then it will automatically be escaped	 * using http_build_query().	 *	 * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS	 * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send	 * headers. Other protocols are unsupported and most likely will fail.	 *	 * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and	 * 'user-agent'.	 *	 * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow	 * others, but should not be assumed. The 'timeout' is used to sent how long the connection	 * should stay open before failing when no response. 'redirection' is used to track how many	 * redirects were taken and used to sent the amount for other transports, but not all transports	 * accept setting that value.	 *	 * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and	 * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The	 * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is	 * 'WordPress/WP_Version', where WP_Version is the value from $wp_version.	 *	 * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP	 * while it performs the request or continue regardless. Actually, that isn't entirely correct.	 * Blocking mode really just means whether the fread should just pull what it can whenever it	 * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading	 * the entire content. It doesn't actually always mean that PHP will continue going after making	 * the request.	 *	 * @access public	 * @since 2.7.0	 * @todo Refactor this code. The code in this method extends the scope of its original purpose	 *		and should be refactored to allow for cleaner abstraction and reduce duplication of the	 *		code. One suggestion is to create a class specifically for the arguments, however	 *		preliminary refactoring to this affect has affect more than just the scope of the	 *		arguments. Something to ponder at least.	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array containing 'headers', 'body', 'response', 'cookies'	 */	function request( $url, $args = array() ) {		global $wp_version;		$defaults = array(			'method' => 'GET',			'timeout' => apply_filters( 'http_request_timeout', 5),			'redirection' => apply_filters( 'http_request_redirection_count', 5),			'httpversion' => apply_filters( 'http_request_version', '1.0'),			'user-agent' => apply_filters( 'http_headers_useragent', 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )  ),			'blocking' => true,			'headers' => array(),			'cookies' => array(),			'body' => null,			'compress' => false,			'decompress' => true,			'sslverify' => true		);		$r = wp_parse_args( $args, $defaults );		$r = apply_filters( 'http_request_args', $r, $url );		// Allow plugins to short-circuit the request		$pre = apply_filters( 'pre_http_request', false, $r, $url );		if ( false !== $pre )			return $pre;		$arrURL = parse_url($url);		if ( empty( $url ) || empty($url['scheme'] ) )			return new WP_Error('http_request_failed', __('A valid URL was not provided.'));		if ( $this->block_request( $url ) )			return new WP_Error('http_request_failed', __('User has blocked requests through HTTP.'));		// Determine if this is a https call and pass that on to the transport functions		// so that we can blacklist the transports that do not support ssl verification		$r['ssl'] = $arrURL['scheme'] == 'https' || $arrURL['scheme'] == 'ssl';		// Determine if this request is to OUR install of WordPress		$homeURL = parse_url( get_bloginfo('url') );		$r['local'] = $homeURL['host'] == $arrURL['host'] || 'localhost' == $arrURL['host'];		unset($homeURL);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( ! is_array($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		}		if ( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		if ( WP_Http_Encoding::is_available() )			$r['headers']['Accept-Encoding'] = WP_Http_Encoding::accept_encoding();		if ( empty($r['body']) ) {			// Some servers fail when sending content without the content-length header being set.			// Also, to fix another bug, we only send when doing POST and PUT and the content-length			// header isn't already set.			if( ($r['method'] == 'POST' || $r['method'] == 'PUT') && ! isset($r['headers']['Content-Length']) )				$r['headers']['Content-Length'] = 0;			// The method is ambiguous, because we aren't talking about HTTP methods, the "get" in			// this case is simply that we aren't sending any bodies and to get the transports that			// don't support sending bodies along with those which do.			$transports = WP_Http::_getTransport($r);		} else {			if ( is_array( $r['body'] ) || is_object( $r['body'] ) ) {				if ( ! version_compare(phpversion(), '5.1.2', '>=') )					$r['body'] = _http_build_query($r['body'], null, '&');				else					$r['body'] = http_build_query($r['body'], null, '&');				$r['headers']['Content-Type'] = 'application/x-www-form-urlencoded; charset=' . get_option('blog_charset');				$r['headers']['Content-Length'] = strlen($r['body']);			}			if ( ! isset( $r['headers']['Content-Length'] ) && ! isset( $r['headers']['content-length'] ) )				$r['headers']['Content-Length'] = strlen($r['body']);			// The method is ambiguous, because we aren't talking about HTTP methods, the "post" in			// this case is simply that we are sending HTTP body and to get the transports that do			// support sending the body. Not all do, depending on the limitations of the PHP core			// limitations.			$transports = WP_Http::_postTransport($r);		}		do_action( 'http_api_debug', $transports, 'transports_list' );		$response = array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		foreach ( (array) $transports as $transport ) {			$response = $transport->request($url, $r);			do_action( 'http_api_debug', $response, 'response', get_class($transport) );			if ( ! is_wp_error($response) )				return apply_filters( 'http_response', $response, $r, $url );		}		return $response;	}	/**	 * Uses the POST HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function post($url, $args = array()) {		$defaults = array('method' => 'POST');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the GET HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function get($url, $args = array()) {		$defaults = array('method' => 'GET');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Uses the HEAD HTTP method.	 *	 * Used for sending data that is expected to be in the body.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return boolean	 */	function head($url, $args = array()) {		$defaults = array('method' => 'HEAD');		$r = wp_parse_args( $args, $defaults );		return $this->request($url, $r);	}	/**	 * Parses the responses and splits the parts into headers and body.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string $strResponse The full response string	 * @return array Array with 'headers' and 'body' keys.	 */	function processResponse($strResponse) {		$res = explode("\r\n\r\n", $strResponse, 2);		return array('headers' => isset($res[0]) ? $res[0] : array(), 'body' => isset($res[1]) ? $res[1] : '');	}	/**	 * Transform header string into an array.	 *	 * If an array is given then it is assumed to be raw header data with numeric keys with the	 * headers as the values. No headers must be passed that were already processed.	 *	 * @access public	 * @static	 * @since 2.7.0	 *	 * @param string|array $headers	 * @return array Processed string headers. If duplicate headers are encountered,	 * 					Then a numbered array is returned as the value of that header-key.	 */	function processHeaders($headers) {		// split headers, one per array element		if ( is_string($headers) ) {			// tolerate line terminator: CRLF = LF (RFC 2616 19.3)			$headers = str_replace("\r\n", "\n", $headers);			// unfold folded header fields. LWS = [CRLF] 1*( SP | HT ) <US-ASCII SP, space (32)>, <US-ASCII HT, horizontal-tab (9)> (RFC 2616 2.2)			$headers = preg_replace('/\n[ \t]/', ' ', $headers);			// create the headers array			$headers = explode("\n", $headers);		}		$response = array('code' => 0, 'message' => '');		// If a redirection has taken place, The headers for each page request may have been passed.		// In this case, determine the final HTTP header and parse from there.		for ( $i = count($headers)-1; $i >= 0; $i-- ) {			if ( !empty($headers[$i]) && false === strpos($headers[$i], ':') ) {				$headers = array_splice($headers, $i);				break;			}		}		$cookies = array();		$newheaders = array();		foreach ( $headers as $tempheader ) {			if ( empty($tempheader) )				continue;			if ( false === strpos($tempheader, ':') ) {				list( , $response['code'], $response['message']) = explode(' ', $tempheader, 3);				continue;			}			list($key, $value) = explode(':', $tempheader, 2);			if ( !empty( $value ) ) {				$key = strtolower( $key );				if ( isset( $newheaders[$key] ) ) {					if ( !is_array($newheaders[$key]) )						$newheaders[$key] = array($newheaders[$key]);					$newheaders[$key][] = trim( $value );				} else {					$newheaders[$key] = trim( $value );				}				if ( 'set-cookie' == strtolower( $key ) )					$cookies[] = new WP_Http_Cookie( $value );			}		}		return array('response' => $response, 'headers' => $newheaders, 'cookies' => $cookies);	}	/**	 * Takes the arguments for a ::request() and checks for the cookie array.	 *	 * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed	 * into strings and added to the Cookie: header (within the arguments array). Edits the array by	 * reference.	 *	 * @access public	 * @version 2.8.0	 * @static	 *	 * @param array $r Full array of args passed into ::request()	 */	function buildCookieHeader( &$r ) {		if ( ! empty($r['cookies']) ) {			$cookies_header = '';			foreach ( (array) $r['cookies'] as $cookie ) {				$cookies_header .= $cookie->getHeaderValue() . '; ';			}			$cookies_header = substr( $cookies_header, 0, -2 );			$r['headers']['cookie'] = $cookies_header;		}	}	/**	 * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.	 *	 * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support	 * returning footer headers. Shouldn't be too difficult to support it though.	 *	 * @todo Add support for footer chunked headers.	 * @access public	 * @since 2.7.0	 * @static	 *	 * @param string $body Body content	 * @return string Chunked decoded body on success or raw body on failure.	 */	function chunkTransferDecode($body) {		$body = str_replace(array("\r\n", "\r"), "\n", $body);		// The body is not chunked encoding or is malformed.		if ( ! preg_match( '/^[0-9a-f]+(\s|\n)+/mi', trim($body) ) )			return $body;		$parsedBody = '';		//$parsedHeaders = array(); Unsupported		while ( true ) {			$hasChunk = (bool) preg_match( '/^([0-9a-f]+)(\s|\n)+/mi', $body, $match );			if ( $hasChunk ) {				if ( empty( $match[1] ) )					return $body;				$length = hexdec( $match[1] );				$chunkLength = strlen( $match[0] );				$strBody = substr($body, $chunkLength, $length);				$parsedBody .= $strBody;				$body = ltrim(str_replace(array($match[0], $strBody), '', $body), "\n");				if ( "0" == trim($body) )					return $parsedBody; // Ignore footer headers.			} else {				return $body;			}		}	}	/**	 * Block requests through the proxy.	 *	 * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will	 * prevent plugins from working and core functionality, if you don't include api.wordpress.org.	 *	 * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php	 * file and this will only allow localhost and your blog to make requests. The constant	 * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the	 * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow.	 *	 * @since 2.8.0	 * @link http://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.	 *	 * @param string $uri URI of url.	 * @return bool True to block, false to allow.	 */	function block_request($uri) {		// We don't need to block requests, because nothing is blocked.		if ( ! defined( 'WP_HTTP_BLOCK_EXTERNAL' ) || ! WP_HTTP_BLOCK_EXTERNAL )			return false;		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		/* Malformed URL, can not process, but this could mean ssl, so let through anyway.		 *		 * This isn't very security sound. There are instances where a hacker might attempt		 * to bypass the proxy and this check. However, the reason for this behavior is that		 * WordPress does not do any checking currently for non-proxy requests, so it is keeps with		 * the default unsecure nature of the HTTP request.		 */		if ( $check === false )			return false;		$home = parse_url( get_option('siteurl') );		// Don't block requests back to ourselves by default		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return apply_filters('block_local_requests', false);		if ( !defined('WP_ACCESSIBLE_HOSTS') )			return true;		static $accessible_hosts;		if ( null == $accessible_hosts )			$accessible_hosts = preg_split('|,\s*|', WP_ACCESSIBLE_HOSTS);		return !in_array( $check['host'], $accessible_hosts ); //Inverse logic, If its in the array, then we can't access it.	}}/** * HTTP request method uses fsockopen function to retrieve the url. * * This would be the preferred method, but the fsockopen implementation has the most overhead of all * the HTTP transport implementations. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fsockopen {	/**	 * Send a HTTP request to a URI using fsockopen().	 *	 * Does not support non-blocking mode.	 *	 * @see WP_Http::request For default options descriptions.	 *	 * @since 2.7	 * @access public	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$iError = null; // Store error number		$strError = null; // Store error string		$arrURL = parse_url($url);		$fsockopen_host = $arrURL['host'];		$secure_transport = false;		if ( ! isset( $arrURL['port'] ) ) {			if ( ( $arrURL['scheme'] == 'ssl' || $arrURL['scheme'] == 'https' ) && extension_loaded('openssl') ) {				$fsockopen_host = "ssl://$fsockopen_host";				$arrURL['port'] = 443;				$secure_transport = true;			} else {				$arrURL['port'] = 80;			}		}		//fsockopen has issues with 'localhost' with IPv6 with certain versions of PHP, It attempts to connect to ::1,		// which fails when the server is not set up for it. For compatibility, always connect to the IPv4 address.		if ( 'localhost' == strtolower($fsockopen_host) )			$fsockopen_host = '127.0.0.1';		// There are issues with the HTTPS and SSL protocols that cause errors that can be safely		// ignored and should be ignored.		if ( true === $secure_transport )			$error_reporting = error_reporting(0);		$startDelay = time();		$proxy = new WP_HTTP_Proxy();		if ( !WP_DEBUG ) {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = @fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = @fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		} else {			if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )				$handle = fsockopen( $proxy->host(), $proxy->port(), $iError, $strError, $r['timeout'] );			else				$handle = fsockopen( $fsockopen_host, $arrURL['port'], $iError, $strError, $r['timeout'] );		}		$endDelay = time();		// If the delay is greater than the timeout then fsockopen should't be used, because it will		// cause a long delay.		$elapseDelay = ($endDelay-$startDelay) > $r['timeout'];		if ( true === $elapseDelay )			add_option( 'disable_fsockopen', $endDelay, null, true );		if ( false === $handle )			return new WP_Error('http_request_failed', $iError . ': ' . $strError);		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) //Some proxies require full URL in this field.			$requestPath = $url;		else			$requestPath = $arrURL['path'] . ( isset($arrURL['query']) ? '?' . $arrURL['query'] : '' );		if ( empty($requestPath) )			$requestPath .= '/';		$strHeaders = strtoupper($r['method']) . ' ' . $requestPath . ' HTTP/' . $r['httpversion'] . "\r\n";		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) )			$strHeaders .= 'Host: ' . $arrURL['host'] . ':' . $arrURL['port'] . "\r\n";		else			$strHeaders .= 'Host: ' . $arrURL['host'] . "\r\n";		if ( isset($r['user-agent']) )			$strHeaders .= 'User-agent: ' . $r['user-agent'] . "\r\n";		if ( is_array($r['headers']) ) {			foreach ( (array) $r['headers'] as $header => $headerValue )				$strHeaders .= $header . ': ' . $headerValue . "\r\n";		} else {			$strHeaders .= $r['headers'];		}		if ( $proxy->use_authentication() )			$strHeaders .= $proxy->authentication_header() . "\r\n";		$strHeaders .= "\r\n";		if ( ! is_null($r['body']) )			$strHeaders .= $r['body'];		fwrite($handle, $strHeaders);		if ( ! $r['blocking'] ) {			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		fclose($handle);		if ( true === $secure_transport )			error_reporting($error_reporting);		$process = WP_Http::processResponse($strResponse);		$arrHeaders = WP_Http::processHeaders($process['headers']);		// Is the response code within the 400 range?		if ( (int) $arrHeaders['response']['code'] >= 400 && (int) $arrHeaders['response']['code'] < 500 )			return new WP_Error('http_request_failed', $arrHeaders['response']['code'] . ': ' . $arrHeaders['response']['message']);		// If location is found, then assume redirect and redirect to location.		if ( 'HEAD' != $r['method'] && isset($arrHeaders['headers']['location']) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($arrHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		// If the body was chunk encoded, then decode it.		if ( ! empty( $process['body'] ) && isset( $arrHeaders['headers']['transfer-encoding'] ) && 'chunked' == $arrHeaders['headers']['transfer-encoding'] )			$process['body'] = WP_Http::chunkTransferDecode($process['body']);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($arrHeaders['headers']) )			$process['body'] = WP_Http_Encoding::decompress( $process['body'] );		return array('headers' => $arrHeaders['headers'], 'body' => $process['body'], 'response' => $arrHeaders['response'], 'cookies' => $arrHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test( $args = array() ) {		if ( false !== ($option = get_option( 'disable_fsockopen' )) && time()-$option < 43200 ) // 12 hours			return false;		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( ! $is_ssl && function_exists( 'fsockopen' ) )			$use = true;		elseif ( $is_ssl && extension_loaded('openssl') && function_exists( 'fsockopen' ) )			$use = true;		else			$use = false;		return apply_filters('use_fsockopen_transport', $use, $args);	}}/** * HTTP request method uses fopen function to retrieve the url. * * Requires PHP version greater than 4.3.0 for stream support. Does not allow for $context support, * but should still be okay, to write the headers, before getting the response. Also requires that * 'allow_url_fopen' to be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Fopen {	/**	 * Send a HTTP request to a URI using fopen().	 *	 * This transport does not support sending of headers and body, therefore should not be used in	 * the instances, where there is a body and headers.	 *	 * Notes: Does not support non-blocking mode. Ignores 'redirection' option.	 *	 * @see WP_Http::retrieve For default options descriptions.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url URI resource.	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = str_replace($arrURL['scheme'], 'http', $url);		if ( is_null( $r['headers'] ) )			$r['headers'] = array();		if ( is_string($r['headers']) ) {			$processedHeaders = WP_Http::processHeaders($r['headers']);			$r['headers'] = $processedHeaders['headers'];		}		$initial_user_agent = ini_get('user_agent');		if ( !empty($r['headers']) && is_array($r['headers']) ) {			$user_agent_extra_headers = '';			foreach ( $r['headers'] as $header => $value )				$user_agent_extra_headers .= "\r\n$header: $value";			@ini_set('user_agent', $r['user-agent'] . $user_agent_extra_headers);		} else {			@ini_set('user_agent', $r['user-agent']);		}		if ( !WP_DEBUG )			$handle = @fopen($url, 'r');		else			$handle = fopen($url, 'r');		if (! $handle)			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			fclose($handle);			@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = '';		while ( ! feof($handle) )			$strResponse .= fread($handle, 4096);		if ( function_exists('stream_get_meta_data') ) {			$meta = stream_get_meta_data($handle);			$theHeaders = $meta['wrapper_data'];			if ( isset( $meta['wrapper_data']['headers'] ) )				$theHeaders = $meta['wrapper_data']['headers'];		} else {			//$http_response_header is a PHP reserved variable which is set in the current-scope when using the HTTP Wrapper			//see http://php.oregonstate.edu/manual/en/reserved.variables.httpresponseheader.php			$theHeaders = $http_response_header;		}		fclose($handle);		@ini_set('user_agent', $initial_user_agent); //Clean up any extra headers added		$processedHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @since 2.7.0	 * @static	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( isset($args['method']) && 'HEAD' == $args['method'] ) //This transport cannot make a HEAD request			return false;		$use = true;		//PHP does not verify SSL certs, We can only make a request via this transports if SSL Verification is turned off.		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl ) {			$is_local = isset($args['local']) && $args['local'];			$ssl_verify = isset($args['sslverify']) && $args['sslverify'];			if ( $is_local && true != apply_filters('https_local_ssl_verify', true) )				$use = true;			elseif ( !$is_local && true != apply_filters('https_ssl_verify', true) )				$use = true;			elseif ( !$ssl_verify )				$use = true;			else				$use = false;		}		return apply_filters('use_fopen_transport', $use, $args);	}}/** * HTTP request method uses Streams to retrieve the url. * * Requires PHP 5.0+ and uses fopen with stream context. Requires that 'allow_url_fopen' PHP setting * to be enabled. * * Second preferred method for getting the URL, for PHP 5. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_Streams {	/**	 * Send a HTTP request to a URI using streams with fopen().	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		$arrURL = parse_url($url);		if ( false === $arrURL )			return new WP_Error('http_request_failed', sprintf(__('Malformed URL: %s'), $url));		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		// Convert Header array to string.		$strHeaders = '';		if ( is_array( $r['headers'] ) )			foreach ( $r['headers'] as $name => $value )				$strHeaders .= "{$name}: $value\r\n";		else if ( is_string( $r['headers'] ) )			$strHeaders = $r['headers'];		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$arrContext = array('http' =>			array(				'method' => strtoupper($r['method']),				'user_agent' => $r['user-agent'],				'max_redirects' => $r['redirection'] + 1, // See #11557				'protocol_version' => (float) $r['httpversion'],				'header' => $strHeaders,				'ignore_errors' => true, // Return non-200 requests.				'timeout' => $r['timeout'],				'ssl' => array(						'verify_peer' => $ssl_verify,						'verify_host' => $ssl_verify				)			)		);		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$arrContext['http']['proxy'] = 'tcp://' . $proxy->host() . ':' . $proxy->port();			$arrContext['http']['request_fulluri'] = true;			// We only support Basic authentication so this will only work if that is what your proxy supports.			if ( $proxy->use_authentication() )				$arrContext['http']['header'] .= $proxy->authentication_header() . "\r\n";		}		if ( 'HEAD' == $r['method'] ) // Disable redirects for HEAD requests			$arrContext['http']['max_redirects'] = 1;		if ( ! empty($r['body'] ) )			$arrContext['http']['content'] = $r['body'];		$context = stream_context_create($arrContext);		if ( !WP_DEBUG )			$handle = @fopen($url, 'r', false, $context);		else			$handle = fopen($url, 'r', false, $context);		if ( ! $handle )			return new WP_Error('http_request_failed', sprintf(__('Could not open handle for fopen() to %s'), $url));		$timeout = (int) floor( $r['timeout'] );		$utimeout = $timeout == $r['timeout'] ? 0 : 1000000 * $r['timeout'] % 1000000;		stream_set_timeout( $handle, $timeout, $utimeout );		if ( ! $r['blocking'] ) {			stream_set_blocking($handle, 0);			fclose($handle);			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$strResponse = stream_get_contents($handle);		$meta = stream_get_meta_data($handle);		fclose($handle);		$processedHeaders = array();		if ( isset( $meta['wrapper_data']['headers'] ) )			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']['headers']);		else			$processedHeaders = WP_Http::processHeaders($meta['wrapper_data']);		if ( ! empty( $strResponse ) && isset( $processedHeaders['headers']['transfer-encoding'] ) && 'chunked' == $processedHeaders['headers']['transfer-encoding'] )			$strResponse = WP_Http::chunkTransferDecode($strResponse);		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($processedHeaders['headers']) )			$strResponse = WP_Http_Encoding::decompress( $strResponse );		return array('headers' => $processedHeaders['headers'], 'body' => $strResponse, 'response' => $processedHeaders['response'], 'cookies' => $processedHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @access public	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( ! function_exists('fopen') || (function_exists('ini_get') && true != ini_get('allow_url_fopen')) )			return false;		if ( version_compare(PHP_VERSION, '5.0', '<') )			return false;		//HTTPS via Proxy was added in 5.1.0		$is_ssl = isset($args['ssl']) && $args['ssl'];		if ( $is_ssl && version_compare(PHP_VERSION, '5.1.0', '<') ) {			$proxy = new WP_HTTP_Proxy();			/**			 * No URL check, as its not currently passed to the ::test() function			 * In the case where a Proxy is in use, Just bypass this transport for HTTPS.			 */			if ( $proxy->is_enabled() )				return false;		}		return apply_filters('use_streams_transport', true, $args);	}}/** * HTTP request method uses HTTP extension to retrieve the url. * * Requires the HTTP extension to be installed. This would be the preferred transport since it can * handle a lot of the problems that forces the others to use the HTTP version 1.0. Even if PHP 5.2+ * is being used, it doesn't mean that the HTTP extension will be enabled. * * @package WordPress * @subpackage HTTP * @since 2.7.0 */class WP_Http_ExtHTTP {	/**	 * Send a HTTP request to a URI using HTTP extension.	 *	 * Does not support non-blocking.	 *	 * @access public	 * @since 2.7	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set		WP_Http::buildCookieHeader( $r );		switch ( $r['method'] ) {			case 'POST':				$r['method'] = HTTP_METH_POST;				break;			case 'HEAD':				$r['method'] = HTTP_METH_HEAD;				break;			case 'PUT':				$r['method'] =  HTTP_METH_PUT;				break;			case 'GET':			default:				$r['method'] = HTTP_METH_GET;		}		$arrURL = parse_url($url);		if ( 'http' != $arrURL['scheme'] && 'https' != $arrURL['scheme'] )			$url = preg_replace('|^' . preg_quote($arrURL['scheme'], '|') . '|', 'http', $url);		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		$r['timeout'] = (int) ceil( $r['timeout'] );		$options = array(			'timeout' => $r['timeout'],			'connecttimeout' => $r['timeout'],			'redirect' => $r['redirection'],			'useragent' => $r['user-agent'],			'headers' => $r['headers'],			'ssl' => array(				'verifypeer' => $ssl_verify,				'verifyhost' => $ssl_verify			)		);		if ( HTTP_METH_HEAD == $r['method'] )			$options['redirect'] = 0; // Assumption: Docs seem to suggest that this means do not follow. Untested.		// The HTTP extensions offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$options['proxyhost'] = $proxy->host();			$options['proxyport'] = $proxy->port();			$options['proxytype'] = HTTP_PROXY_HTTP;			if ( $proxy->use_authentication() ) {				$options['proxyauth'] = $proxy->authentication();				$options['proxyauthtype'] = HTTP_AUTH_ANY;			}		}		if ( !WP_DEBUG ) //Emits warning level notices for max redirects and timeouts			$strResponse = @http_request($r['method'], $url, $r['body'], $options, $info);		else			$strResponse = http_request($r['method'], $url, $r['body'], $options, $info); //Emits warning level notices for max redirects and timeouts		// Error may still be set, Response may return headers or partial document, and error		// contains a reason the request was aborted, eg, timeout expired or max-redirects reached.		if ( false === $strResponse || ! empty($info['error']) )			return new WP_Error('http_request_failed', $info['response_code'] . ': ' . $info['error']);		if ( ! $r['blocking'] )			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		$headers_body = WP_HTTP::processResponse($strResponse);		$theHeaders = $headers_body['headers'];		$theBody = $headers_body['body'];		unset($headers_body);		$theHeaders = WP_Http::processHeaders($theHeaders);		if ( ! empty( $theBody ) && isset( $theHeaders['headers']['transfer-encoding'] ) && 'chunked' == $theHeaders['headers']['transfer-encoding'] ) {			if ( !WP_DEBUG )				$theBody = @http_chunked_decode($theBody);			else				$theBody = http_chunked_decode($theBody);		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = http_inflate( $theBody );		$theResponse = array();		$theResponse['code'] = $info['response_code'];		$theResponse['message'] = get_status_header_desc($info['response_code']);		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $theResponse, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		return apply_filters('use_http_extension_transport', function_exists('http_request'), $args );	}}/** * HTTP request method uses Curl extension to retrieve the url. * * Requires the Curl extension to be installed. * * @package WordPress * @subpackage HTTP * @since 2.7 */class WP_Http_Curl {	/**	 * Send a HTTP request to a URI using cURL extension.	 *	 * @access public	 * @since 2.7.0	 *	 * @param string $url	 * @param str|array $args Optional. Override the defaults.	 * @return array 'headers', 'body', 'cookies' and 'response' keys.	 */	function request($url, $args = array()) {		$defaults = array(			'method' => 'GET', 'timeout' => 5,			'redirection' => 5, 'httpversion' => '1.0',			'blocking' => true,			'headers' => array(), 'body' => null, 'cookies' => array()		);		$r = wp_parse_args( $args, $defaults );		if ( isset($r['headers']['User-Agent']) ) {			$r['user-agent'] = $r['headers']['User-Agent'];			unset($r['headers']['User-Agent']);		} else if( isset($r['headers']['user-agent']) ) {			$r['user-agent'] = $r['headers']['user-agent'];			unset($r['headers']['user-agent']);		}		// Construct Cookie: header if any cookies are set.		WP_Http::buildCookieHeader( $r );		$handle = curl_init();		// cURL offers really easy proxy support.		$proxy = new WP_HTTP_Proxy();		if ( $proxy->is_enabled() && $proxy->send_through_proxy( $url ) ) {			$isPHP5 = version_compare(PHP_VERSION, '5.0.0', '>=');			if ( $isPHP5 ) {				curl_setopt( $handle, CURLOPT_PROXYTYPE, CURLPROXY_HTTP );				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() );				curl_setopt( $handle, CURLOPT_PROXYPORT, $proxy->port() );			} else {				curl_setopt( $handle, CURLOPT_PROXY, $proxy->host() .':'. $proxy->port() );			}			if ( $proxy->use_authentication() ) {				if ( $isPHP5 )					curl_setopt( $handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY );				curl_setopt( $handle, CURLOPT_PROXYUSERPWD, $proxy->authentication() );			}		}		$is_local = isset($args['local']) && $args['local'];		$ssl_verify = isset($args['sslverify']) && $args['sslverify'];		if ( $is_local )			$ssl_verify = apply_filters('https_local_ssl_verify', $ssl_verify);		elseif ( ! $is_local )			$ssl_verify = apply_filters('https_ssl_verify', $ssl_verify);		// CURLOPT_TIMEOUT and CURLOPT_CONNECTTIMEOUT expect integers.  Have to use ceil since		// a value of 0 will allow an ulimited timeout.		$timeout = (int) ceil( $r['timeout'] );		curl_setopt( $handle, CURLOPT_CONNECTTIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_TIMEOUT, $timeout );		curl_setopt( $handle, CURLOPT_URL, $url);		curl_setopt( $handle, CURLOPT_RETURNTRANSFER, true );		curl_setopt( $handle, CURLOPT_SSL_VERIFYHOST, $ssl_verify );		curl_setopt( $handle, CURLOPT_SSL_VERIFYPEER, $ssl_verify );		curl_setopt( $handle, CURLOPT_USERAGENT, $r['user-agent'] );		curl_setopt( $handle, CURLOPT_MAXREDIRS, $r['redirection'] );		switch ( $r['method'] ) {			case 'HEAD':				curl_setopt( $handle, CURLOPT_NOBODY, true );				break;			case 'POST':				curl_setopt( $handle, CURLOPT_POST, true );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;			case 'PUT':				curl_setopt( $handle, CURLOPT_CUSTOMREQUEST, 'PUT' );				curl_setopt( $handle, CURLOPT_POSTFIELDS, $r['body'] );				break;		}		if ( true === $r['blocking'] )			curl_setopt( $handle, CURLOPT_HEADER, true );		else			curl_setopt( $handle, CURLOPT_HEADER, false );		// The option doesn't work with safe mode or when open_basedir is set.		// Disable HEAD when making HEAD requests.		if ( !ini_get('safe_mode') && !ini_get('open_basedir') && 'HEAD' != $r['method'] )			curl_setopt( $handle, CURLOPT_FOLLOWLOCATION, true );		if ( !empty( $r['headers'] ) ) {			// cURL expects full header strings in each element			$headers = array();			foreach ( $r['headers'] as $name => $value ) {				$headers[] = "{$name}: $value";			}			curl_setopt( $handle, CURLOPT_HTTPHEADER, $headers );		}		if ( $r['httpversion'] == '1.0' )			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0 );		else			curl_setopt( $handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1 );		// Cookies are not handled by the HTTP API currently. Allow for plugin authors to handle it		// themselves... Although, it is somewhat pointless without some reference.		do_action_ref_array( 'http_api_curl', array(&$handle) );		// We don't need to return the body, so don't. Just execute request and return.		if ( ! $r['blocking'] ) {			curl_exec( $handle );			curl_close( $handle );			return array( 'headers' => array(), 'body' => '', 'response' => array('code' => false, 'message' => false), 'cookies' => array() );		}		$theResponse = curl_exec( $handle );		if ( !empty($theResponse) ) {			$headerLength = curl_getinfo($handle, CURLINFO_HEADER_SIZE);			$theHeaders = trim( substr($theResponse, 0, $headerLength) );			if ( strlen($theResponse) > $headerLength )				$theBody = substr( $theResponse, $headerLength );			else				$theBody = '';			if ( false !== strrpos($theHeaders, "\r\n\r\n") ) {				$headerParts = explode("\r\n\r\n", $theHeaders);				$theHeaders = $headerParts[ count($headerParts) -1 ];			}			$theHeaders = WP_Http::processHeaders($theHeaders);		} else {			if ( $curl_error = curl_error($handle) )				return new WP_Error('http_request_failed', $curl_error);			if ( in_array( curl_getinfo( $handle, CURLINFO_HTTP_CODE ), array(301, 302) ) )				return new WP_Error('http_request_failed', __('Too many redirects.'));			$theHeaders = array( 'headers' => array(), 'cookies' => array() );			$theBody = '';		}		$response = array();		$response['code'] = curl_getinfo( $handle, CURLINFO_HTTP_CODE );		$response['message'] = get_status_header_desc($response['code']);		curl_close( $handle );		// See #11305 - When running under safe mode, redirection is disabled above. Handle it manually.		if ( !empty($theHeaders['headers']['location']) && (ini_get('safe_mode') || ini_get('open_basedir')) ) {			if ( $r['redirection']-- > 0 ) {				return $this->request($theHeaders['headers']['location'], $r);			} else {				return new WP_Error('http_request_failed', __('Too many redirects.'));			}		}		if ( true === $r['decompress'] && true === WP_Http_Encoding::should_decode($theHeaders['headers']) )			$theBody = WP_Http_Encoding::decompress( $theBody );		return array('headers' => $theHeaders['headers'], 'body' => $theBody, 'response' => $response, 'cookies' => $theHeaders['cookies']);	}	/**	 * Whether this class can be used for retrieving an URL.	 *	 * @static	 * @since 2.7.0	 *	 * @return boolean False means this class can not be used, true means it can.	 */	function test($args = array()) {		if ( function_exists('curl_init') && function_exists('curl_exec') )			return apply_filters('use_curl_transport', true, $args);		return false;	}}/** * Adds Proxy support to the WordPress HTTP API. * * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to * enable proxy support. There are also a few filters that plugins can hook into for some of the * constants. * * Please note that only BASIC authentication is supported by most transports. * cURL and the PHP HTTP Extension MAY support more methods (such as NTLM authentication) depending on your environment. * * The constants are as follows: * <ol> * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li> * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li> * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li> * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li> * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy. * You do not need to have localhost and the blog host in this list, because they will not be passed * through the proxy. The list should be presented in a comma separated list</li> * </ol> * * An example can be as seen below. * <code> * define('WP_PROXY_HOST', '192.168.84.101'); * define('WP_PROXY_PORT', '8080'); * define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com'); * </code> * * @link http://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress. * @since 2.8 */class WP_HTTP_Proxy {	/**	 * Whether proxy connection should be used.	 *	 * @since 2.8	 * @use WP_PROXY_HOST	 * @use WP_PROXY_PORT	 *	 * @return bool	 */	function is_enabled() {		return defined('WP_PROXY_HOST') && defined('WP_PROXY_PORT');	}	/**	 * Whether authentication should be used.	 *	 * @since 2.8	 * @use WP_PROXY_USERNAME	 * @use WP_PROXY_PASSWORD	 *	 * @return bool	 */	function use_authentication() {		return defined('WP_PROXY_USERNAME') && defined('WP_PROXY_PASSWORD');	}	/**	 * Retrieve the host for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function host() {		if ( defined('WP_PROXY_HOST') )			return WP_PROXY_HOST;		return '';	}	/**	 * Retrieve the port for the proxy server.	 *	 * @since 2.8	 *	 * @return string	 */	function port() {		if ( defined('WP_PROXY_PORT') )			return WP_PROXY_PORT;		return '';	}	/**	 * Retrieve the username for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function username() {		if ( defined('WP_PROXY_USERNAME') )			return WP_PROXY_USERNAME;		return '';	}	/**	 * Retrieve the password for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function password() {		if ( defined('WP_PROXY_PASSWORD') )			return WP_PROXY_PASSWORD;		return '';	}	/**	 * Retrieve authentication string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication() {		return $this->username() . ':' . $this->password();	}	/**	 * Retrieve header string for proxy authentication.	 *	 * @since 2.8	 *	 * @return string	 */	function authentication_header() {		return 'Proxy-Authorization: Basic ' . base64_encode( $this->authentication() );	}	/**	 * Whether URL should be sent through the proxy server.	 *	 * We want to keep localhost and the blog URL from being sent through the proxy server, because	 * some proxies can not handle this. We also have the constant available for defining other	 * hosts that won't be sent through the proxy.	 *	 * @uses WP_PROXY_BYPASS_HOSTS	 * @since unknown	 *	 * @param string $uri URI to check.	 * @return bool True, to send through the proxy and false if, the proxy should not be used.	 */	function send_through_proxy( $uri ) {		// parse_url() only handles http, https type URLs, and will emit E_WARNING on failure.		// This will be displayed on blogs, which is not reasonable.		$check = @parse_url($uri);		// Malformed URL, can not process, but this could mean ssl, so let through anyway.		if ( $check === false )			return true;		$home = parse_url( get_option('siteurl') );		if ( $check['host'] == 'localhost' || $check['host'] == $home['host'] )			return false;		if ( !defined('WP_PROXY_BYPASS_HOSTS') )			return true;		static $bypass_hosts;		if ( null == $bypass_hosts )			$bypass_hosts = preg_split('|,\s*|', WP_PROXY_BYPASS_HOSTS);		return !in_array( $check['host'], $bypass_hosts );	}}/** * Internal representation of a single cookie. * * Returned cookies are represented using this class, and when cookies are set, if they are not * already a WP_Http_Cookie() object, then they are turned into one. * * @todo The WordPress convention is to use underscores instead of camelCase for function and method * names. Need to switch to use underscores instead for the methods. * * @package WordPress * @subpackage HTTP * @since 2.8.0 */class WP_Http_Cookie {	/**	 * Cookie name.	 *	 * @since 2.8.0	 * @var string	 */	var $name;	/**	 * Cookie value.	 *	 * @since 2.8.0	 * @var string	 */	var $value;	/**	 * When the cookie expires.	 *	 * @since 2.8.0	 * @var string	 */	var $expires;	/**	 * Cookie URL path.	 *	 * @since 2.8.0	 * @var string	 */	var $path;	/**	 * Cookie Domain.	 *	 * @since 2.8.0	 * @var string	 */	var $domain;	/**	 * PHP4 style Constructor - Calls PHP5 Style Constructor.	 *	 * @access public	 * @since 2.8.0	 * @param string|array $data Raw cookie data.	 */	function WP_Http_Cookie( $data ) {		$this->__construct( $data );	}	/**	 * Sets up this cookie object.	 *	 * The parameter $data should be either an associative array containing the indices names below	 * or a header string detailing it.	 *	 * If it's an array, it should include the following elements:	 * <ol>	 * <li>Name</li>	 * <li>Value - should NOT be urlencoded already.</li>	 * <li>Expires - (optional) String or int (UNIX timestamp).</li>	 * <li>Path (optional)</li>	 * <li>Domain (optional)</li>	 * </ol>	 *	 * @access public	 * @since 2.8.0	 *	 * @param string|array $data Raw cookie data.	 */	function __construct( $data ) {		if ( is_string( $data ) ) {			// Assume it's a header string direct from a previous request			$pairs = explode( ';', $data );			// Special handling for first pair; name=value. Also be careful of "=" in value			$name  = trim( substr( $pairs[0], 0, strpos( $pairs[0], '=' ) ) );			$value = substr( $pairs[0], strpos( $pairs[0], '=' ) + 1 );			$this->name  = $name;			$this->value = urldecode( $value );			array_shift( $pairs ); //Removes name=value from items.			// Set everything else as a property			foreach ( $pairs as $pair ) {				$pair = rtrim($pair);				if ( empty($pair) ) //Handles the cookie ending in ; which results in a empty final pair					continue;				list( $key, $val ) = strpos( $pair, '=' ) ? explode( '=', $pair ) : array( $pair, '' );				$key = strtolower( trim( $key ) );				if ( 'expires' == $key )					$val = strtotime( $val );				$this->$key = $val;			}		} else {			if ( !isset( $data['name'] ) )				return false;			// Set properties based directly on parameters			$this->name   = $data['name'];			$this->value  = isset( $data['value'] ) ? $data['value'] : '';			$this->path   = isset( $data['path'] ) ? $data['path'] : '';			$this->domain = isset( $data['domain'] ) ? $data['domain'] : '';			if ( isset( $data['expires'] ) )				$this->expires = is_int( $data['expires'] ) ? $data['expires'] : strtotime( $data['expires'] );			else				$this->expires = null;		}	}	/**	 * Confirms that it's OK to send this cookie to the URL checked against.	 *	 * Decision is based on RFC 2109/2965, so look there for details on validity.	 *	 * @access public	 * @since 2.8.0	 *	 * @param string $url URL you intend to send this cookie to	 * @return boolean TRUE if allowed, FALSE otherwise.	 */	function test( $url ) {		// Expires - if expired then nothing else matters		if ( time() > $this->expires )			return false;		// Get details on the URL we're thinking about sending to		$url = parse_url( $url );		$url['port'] = isset( $url['port'] ) ? $url['port'] : 80;		$url['path'] = isset( $url['path'] ) ? $url['path'] : '/';		// Values to use for comparison against the URL		$path   = isset( $this->path )   ? $this->path   : '/';		$port   = isset( $this->port )   ? $this->port   : 80;		$domain = isset( $this->domain ) ? strtolower( $this->domain ) : strtolower( $url['host'] );		if ( false === stripos( $domain, '.' ) )			$domain .= '.local';		// Host - very basic check that the request URL ends with the domain restriction (minus leading dot)		$domain = substr( $domain, 0, 1 ) == '.' ? substr( $domain, 1 ) : $domain;		if ( substr( $url['host'], -strlen( $domain ) ) != $domain )			return false;		// Port - supports "port-lists" in the format: "80,8000,8080"		if ( !in_array( $url['port'], explode( ',', $port) ) )			return false;		// Path - request path must start with path restriction		if ( substr( $url['path'], 0, strlen( $path ) ) != $path )			return false;		return true;	}	/**	 * Convert cookie name and value back to header string.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string Header encoded cookie name and value.	 */	function getHeaderValue() {		if ( empty( $this->name ) || empty( $this->value ) )			return '';		return $this->name . '=' . urlencode( $this->value );	}	/**	 * Retrieve cookie header for usage in the rest of the WordPress HTTP API.	 *	 * @access public	 * @since 2.8.0	 *	 * @return string	 */	function getFullHeader() {		return 'Cookie: ' . $this->getHeaderValue();	}}/** * Implementation for deflate and gzip transfer encodings. * * Includes RFC 1950, RFC 1951, and RFC 1952. * * @since 2.8 * @package WordPress * @subpackage HTTP */class WP_Http_Encoding {	/**	 * Compress raw string using the deflate format.	 *	 * Supports the RFC 1951 standard.	 *	 * @since 2.8	 *	 * @param string $raw String to compress.	 * @param int $level Optional, default is 9. Compression level, 9 is highest.	 * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.	 * @return string|bool False on failure.	 */	function compress( $raw, $level = 9, $supports = null ) {		return gzdeflate( $raw, $level );	}	/**	 * Decompression of deflated string.	 *	 * Will attempt to decompress using the RFC 1950 standard, and if that fails	 * then the RFC 1951 standard deflate will be attempted. Finally, the RFC	 * 1952 standard gzip decode will be attempted. If all fail, then the	 * original compressed string will be returned.	 *	 * @since 2.8	 *	 * @param string $compressed String to decompress.	 * @param int $length The optional length of the compressed data.	 * @return string|bool False on failure.	 */	function decompress( $compressed, $length = null ) {		if ( empty($compressed) )			return $compressed;		if ( false !== ( $decompressed = @gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = WP_Http_Encoding::compatible_gzinflate( $compressed ) ) )			return $decompressed;		if ( false !== ( $decompressed = @gzuncompress( $compressed ) ) )			return $decompressed;		if ( function_exists('gzdecode') ) {			$decompressed = @gzdecode( $compressed );			if ( false !== $decompressed )				return $decompressed;		}		return $compressed;	}	/**	 * Decompression of deflated string while staying compatible with the majority of servers.	 *	 * Certain Servers will return deflated data with headers which PHP's gziniflate()	 * function cannot handle out of the box. The following function lifted from	 * http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate	 * the various return forms used.	 *	 * @since 2.8.1	 * @link http://au2.php.net/manual/en/function.gzinflate.php#77336	 *	 * @param string $gzData String to decompress.	 * @return string|bool False on failure.	 */	function compatible_gzinflate($gzData) {		if ( substr($gzData, 0, 3) == "\x1f\x8b\x08" ) {			$i = 10;			$flg = ord( substr($gzData, 3, 1) );			if ( $flg > 0 ) {				if ( $flg & 4 ) {					list($xlen) = unpack('v', substr($gzData, $i, 2) );					$i = $i + 2 + $xlen;				}				if ( $flg & 8 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 16 )					$i = strpos($gzData, "\0", $i) + 1;				if ( $flg & 2 )					$i = $i + 2;			}			return gzinflate( substr($gzData, $i, -8) );		} else {			return false;		}	}	/**	 * What encoding types to accept and their priority values.	 *	 * @since 2.8	 *	 * @return string Types of encoding to accept.	 */	function accept_encoding() {		$type = array();		if ( function_exists( 'gzinflate' ) )			$type[] = 'deflate;q=1.0';		if ( function_exists( 'gzuncompress' ) )			$type[] = 'compress;q=0.5';		if ( function_exists( 'gzdecode' ) )			$type[] = 'gzip;q=0.5';		return implode(', ', $type);	}	/**	 * What enconding the content used when it was compressed to send in the headers.	 *	 * @since 2.8	 *	 * @return string Content-Encoding string to send in the header.	 */	function content_encoding() {		return 'deflate';	}	/**	 * Whether the content be decoded based on the headers.	 *	 * @since 2.8	 *	 * @param array|string $headers All of the available headers.	 * @return bool	 */	function should_decode($headers) {		if ( is_array( $headers ) ) {			if ( array_key_exists('content-encoding', $headers) && ! empty( $headers['content-encoding'] ) )				return true;		} else if ( is_string( $headers ) ) {			return ( stripos($headers, 'content-encoding:') !== false );		}		return false;	}	/**	 * Whether decompression and compression are supported by the PHP version.	 *	 * Each function is tested instead of checking for the zlib extension, to	 * ensure that the functions all exist in the PHP version and aren't	 * disabled.	 *	 * @since 2.8	 *	 * @return bool	 */	function is_available() {		return ( function_exists('gzuncompress') || function_exists('gzdeflate') || function_exists('gzinflate') );	}}
<?php/** * Comment Management Panel * * @package WordPress * @subpackage Administration *//** Load WordPress Bootstrap */require_once('./admin.php');$parent_file = 'edit-comments.php';$submenu_file = 'edit-comments.php';wp_reset_vars( array('action') );if ( isset( $_POST['deletecomment'] ) )	$action = 'deletecomment';if ( 'cdc' == $action )	$action = 'delete';elseif ( 'mac' == $action )	$action = 'approve';if ( isset( $_GET['dt'] ) ) {	if ( 'spam' == $_GET['dt'] )		$action = 'spam';	elseif ( 'trash' == $_GET['dt'] )		$action = 'trash';}/** * Display error message at bottom of comments. * * @param string $msg Error Message. Assumed to contain HTML and be sanitized. */function comment_footer_die( $msg ) {	echo "<div class='wrap'><p>$msg</p></div>";	include('./admin-footer.php');	die;}switch( $action ) {case 'editcomment' :	$title = __('Edit Comment');	add_contextual_help( $current_screen, '<p>' . __( 'You can edit the information left in a comment if needed. This is often useful when you notice that a commenter has made a typographical error.' ) . '</p>' .	'<p>' . __( 'You can also moderate the comment from this screen using the Status box, where you can also change the timestamp of the comment.' ) . '</p>' .	'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .	'<p>' . __( '<a href="http://codex.wordpress.org/Administration_Panels#Comments" target="_blank">Comments Documentation</a>' ) . '</p>' .	'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank" >Support Forums</a>' ) . '</p>'	);	wp_enqueue_script('comment');	require_once('./admin-header.php');	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment( $comment_id ) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'javascript:history.go(-1)') );	if ( !current_user_can('edit_post', $comment->comment_post_ID) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( 'trash' == $comment->comment_approved )		comment_footer_die( __('This comment is in the Trash. Please move it out of the Trash if you want to edit it.') );	$comment = get_comment_to_edit( $comment_id );	include('./edit-form-comment.php');	break;case 'delete'  :case 'approve' :case 'trash'   :case 'spam'    :	$comment_id = absint( $_GET['c'] );	if ( !$comment = get_comment_to_edit( $comment_id ) ) {		wp_redirect( admin_url('edit-comments.php?error=1') );		die();	}	if ( !current_user_can( 'edit_post', $comment->comment_post_ID ) ) {		wp_redirect( admin_url('edit-comments.php?error=2') );		die();	}	// No need to re-approve/re-trash/re-spam a comment.	if ( $action == str_replace( '1', 'approve', $comment->comment_approved ) ) {		wp_redirect( admin_url( 'edit-comments.php?same=' . $comment_id ) );		die(); 	}	require_once('./admin-header.php');	$formaction    = $action . 'comment';	$nonce_action  = 'approve' == $action ? 'approve-comment_' : 'delete-comment_';	$nonce_action .= $comment_id;?><div class='wrap'><div class="narrow"><?php screen_icon(); ?><h2><?php esc_html_e( 'Moderate Comment' ); ?></h2><?phpswitch ( $action ) {	case 'spam' :		$caution_msg = __('You are about to mark the following comment as spam:');		$button      = __('Spam Comment');		break;	case 'trash' :		$caution_msg = __('You are about to move the following comment to the Trash:');		$button      = __('Trash Comment');		break;	case 'delete' :		$caution_msg = __('You are about to delete the following comment:');		$button      = __('Permanently Delete Comment');		break;	default :		$caution_msg = __('You are about to approve the following comment:');		$button      = __('Approve Comment');		break;}if ( $comment->comment_approved != '0' ) { // if not unapproved	$message = '';	switch ( $comment->comment_approved ) {		case '1' :			$message = __('This comment is currently approved.');			break;		case 'spam' :			$message  = __('This comment is currently marked as spam.');			break;		case 'trash' :			$message  = __('This comment is currently in the Trash.');			break;	}	if ( $message )		echo '<div class="updated"><p>' . $message . '</p></div>';}?><p><strong><?php _e('Caution:'); ?></strong> <?php echo $caution_msg; ?></p><table class="form-table comment-ays"><tr class="alt"><th scope="row"><?php _e('Author'); ?></th><td><?php echo $comment->comment_author; ?></td></tr><?php if ( $comment->comment_author_email ) { ?><tr><th scope="row"><?php _e('E-mail'); ?></th><td><?php echo $comment->comment_author_email; ?></td></tr><?php } ?><?php if ( $comment->comment_author_url ) { ?><tr><th scope="row"><?php _e('URL'); ?></th><td><a href="<?php echo $comment->comment_author_url; ?>"><?php echo $comment->comment_author_url; ?></a></td></tr><?php } ?><tr><th scope="row" valign="top"><?php /* translators: field name in comment form */ _ex('Comment', 'noun'); ?></th><td><?php echo $comment->comment_content; ?></td></tr></table><p><?php _e('Are you sure you want to do this?'); ?></p><form action='comment.php' method='get'><table width="100%"><tr><td><a class="button" href="<?php echo admin_url('edit-comments.php'); ?>"><?php esc_attr_e('No'); ?></a></td><td class="textright"><input type='submit' class="button" value='<?php echo esc_attr($button); ?>' /></td></tr></table><?php wp_nonce_field( $nonce_action ); ?><input type='hidden' name='action' value='<?php echo esc_attr($formaction); ?>' /><input type='hidden' name='p' value='<?php echo esc_attr($comment->comment_post_ID); ?>' /><input type='hidden' name='c' value='<?php echo esc_attr($comment->comment_ID); ?>' /><input type='hidden' name='noredir' value='1' /></form></div></div><?php	break;case 'deletecomment'    :case 'trashcomment'     :case 'untrashcomment'   :case 'spamcomment'      :case 'unspamcomment'    :case 'approvecomment'   :case 'unapprovecomment' :	$comment_id = absint( $_REQUEST['c'] );	if ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		check_admin_referer( 'approve-comment_' . $comment_id );	else		check_admin_referer( 'delete-comment_' . $comment_id );	$noredir = isset($_REQUEST['noredir']);	if ( !$comment = get_comment($comment_id) )		comment_footer_die( __('Oops, no comment with this ID.') . sprintf(' <a href="%s">'.__('Go back').'</a>!', 'edit-comments.php') );	if ( !current_user_can('edit_post', $comment->comment_post_ID ) )		comment_footer_die( __('You are not allowed to edit comments on this post.') );	if ( '' != wp_get_referer() && ! $noredir && false === strpos(wp_get_referer(), 'comment.php') )		$redir = wp_get_referer();	elseif ( '' != wp_get_original_referer() && ! $noredir )		$redir = wp_get_original_referer();	elseif ( in_array( $action, array( 'approvecomment', 'unapprovecomment' ) ) )		$redir = admin_url('edit-comments.php?p=' . absint( $comment->comment_post_ID ) );	else		$redir = admin_url('edit-comments.php');	$redir = remove_query_arg( array('spammed', 'unspammed', 'trashed', 'untrashed', 'deleted', 'ids', 'approved', 'unapproved'), $redir );	switch ( $action ) {		case 'deletecomment' :			wp_delete_comment( $comment_id );			$redir = add_query_arg( array('deleted' => '1'), $redir );			break;		case 'trashcomment' :			wp_trash_comment($comment_id);			$redir = add_query_arg( array('trashed' => '1', 'ids' => $comment_id), $redir );			break;		case 'untrashcomment' :			wp_untrash_comment($comment_id);			$redir = add_query_arg( array('untrashed' => '1'), $redir );			break;		case 'spamcomment' :			wp_spam_comment($comment_id);			$redir = add_query_arg( array('spammed' => '1', 'ids' => $comment_id), $redir );			break;		case 'unspamcomment' :			wp_unspam_comment($comment_id);			$redir = add_query_arg( array('unspammed' => '1'), $redir );			break;		case 'approvecomment' :			wp_set_comment_status( $comment_id, 'approve' );			$redir = add_query_arg( array( 'approved' => 1 ), $redir );			break;		case 'unapprovecomment' :			wp_set_comment_status( $comment_id, 'hold' );			$redir = add_query_arg( array( 'unapproved' => 1 ), $redir );			break;	}	wp_redirect( $redir );	die;	break;case 'editedcomment' :	$comment_id = absint( $_POST['comment_ID'] );	$comment_post_id = absint( $_POST['comment_post_ID'] );	check_admin_referer( 'update-comment_' . $comment_id );	edit_comment();	$location = ( empty( $_POST['referredby'] ) ? "edit-comments.php?p=$comment_post_id" : $_POST['referredby'] ) . '#comment-' . $comment_id;	$location = apply_filters( 'comment_edit_redirect', $location, $comment_id );	wp_redirect( $location );	exit();	break;default:	wp_die( __('Unknown action.') );	break;} // end switchinclude('./admin-footer.php');?>
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * @package WordPress * @subpackage Theme_Compat * @deprecated 3.0 *  * This file is here for Backwards compatibility with old themes and will be removed in a future version *  */_deprecated_file( sprintf( __( 'Theme without %1$s' ), basename(__FILE__) ), '3.0', null, sprintf( __('Please include a %1$s template in your theme.'), basename(__FILE__) ) );?><hr /><div id="footer" role="contentinfo"><!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->	<p>		<?php printf(__('%1$s is proudly powered by %2$s'), get_bloginfo('name'),		'<a href="http://wordpress.org/">WordPress</a>'); ?>		<br /><?php printf(__('%1$s and %2$s.'), '<a href="' . get_bloginfo('rss2_url') . '">' . __('Entries (RSS)') . '</a>', '<a href="' . get_bloginfo('comments_rss2_url') . '">' . __('Comments (RSS)') . '</a>'); ?>		<!-- <?php printf(__('%d queries. %s seconds.'), get_num_queries(), timer_stop(0, 3)); ?> -->	</p></div></div><!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ --><?php /* "Just what do you think you're doing Dave?" */ ?>		<?php wp_footer(); ?></body></html>
<?php/** * Parse OPML XML files and store in globals. * * @package WordPress * @subpackage Administration */if ( ! defined('ABSPATH') )	die();global $opml, $map;// columns we wish to find are:  link_url, link_name, link_target, link_description// we need to map XML attribute names to our columns$opml_map = array('URL'         => 'link_url',	'HTMLURL'     => 'link_url',	'TEXT'        => 'link_name',	'TITLE'       => 'link_name',	'TARGET'      => 'link_target',	'DESCRIPTION' => 'link_description',	'XMLURL'      => 'link_rss');$map = $opml_map;/** * XML callback function for the start of a new XML tag. * * @since unknown * @access private * * @uses $updated_timestamp Not used inside function. * @uses $all_links Not used inside function. * @uses $map Stores names of attributes to use. * @global array $names * @global array $urls * @global array $targets * @global array $descriptions * @global array $feeds * * @param mixed $parser XML Parser resource. * @param string $tagName XML element name. * @param array $attrs XML element attributes. */function startElement($parser, $tagName, $attrs) {	global $updated_timestamp, $all_links, $map;	global $names, $urls, $targets, $descriptions, $feeds;	if ($tagName == 'OUTLINE') {		foreach (array_keys($map) as $key) {			if (isset($attrs[$key])) {				$$map[$key] = $attrs[$key];			}		}		//echo("got data: link_url = [$link_url], link_name = [$link_name], link_target = [$link_target], link_description = [$link_description]<br />\n");		// save the data away.		$names[] = $link_name;		$urls[] = $link_url;		$targets[] = $link_target;		$feeds[] = $link_rss;		$descriptions[] = $link_description;	} // end if outline}/** * XML callback function that is called at the end of a XML tag. * * @since unknown * @access private * @package WordPress * @subpackage Dummy * * @param mixed $parser XML Parser resource. * @param string $tagName XML tag name. */function endElement($parser, $tagName) {	// nothing to do.}// Create an XML parser$xml_parser = xml_parser_create();// Set the functions to handle opening and closing tagsxml_set_element_handler($xml_parser, "startElement", "endElement");if (!xml_parse($xml_parser, $opml, true)) {	echo(sprintf(__('XML error: %1$s at line %2$s'),	xml_error_string(xml_get_error_code($xml_parser)),	xml_get_current_line_number($xml_parser)));}// Free up memory used by the XML parserxml_parser_free($xml_parser);?>
<?php/** * My Sites dashboard. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can('read') )	wp_die( __( 'You do not have sufficient permissions to view this page.' ) );$action = isset( $_POST['action'] ) ? $_POST['action'] : 'splash';$blogs = get_blogs_of_user( $current_user->id );if ( empty( $blogs ) )	wp_die( __( 'You must be a member of at least one site to use this page.' ) );$updated = false;if ( 'updateblogsettings' == $action && isset( $_POST['primary_blog'] ) ) {	check_admin_referer( 'update-my-sites' );	$blog = get_blog_details( (int) $_POST['primary_blog'] );	if ( $blog && isset( $blog->domain ) ) {		update_user_option( $current_user->id, 'primary_blog', (int) $_POST['primary_blog'], true );		$updated = true;	} else {		wp_die( __( 'The primary site you chose does not exist.' ) );	}}$title = __( 'My Sites' );$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('This screen shows an individual user all of their sites in this network, and also allows that user to set a primary site. He or she can use the links under each site to visit either the frontend or the dashboard for that site.') . '</p>' .	'<p>' . __('Up until WordPress version 3.0, what is now called a Multi-site Network had to be installed separately as WordPress MU (multi-user).') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_My_Sites_SubPanel" target="_blank">My Sites Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( $updated ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'Settings saved.' ); ?></strong></p></div><?php } ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="myblogs" action="" method="post">	<?php	choose_primary_blog();	do_action( 'myblogs_allblogs_options' );	?>	<br clear="all" />	<table class="widefat fixed">	<?php	$settings_html = apply_filters( 'myblogs_options', '', 'global' );	if ( $settings_html != '' ) {		echo '<tr><td valign="top"><h3>' . __( 'Global Settings' ) . '</h3></td><td>';		echo $settings_html;		echo '</td></tr>';	}	reset( $blogs );	$num = count( $blogs );	$cols = 1;	if ( $num >= 20 )		$cols = 4;	elseif ( $num >= 10 )		$cols = 2;	$num_rows = ceil( $num / $cols );	$split = 0;	for ( $i = 1; $i <= $num_rows; $i++ ) {		$rows[] = array_slice( $blogs, $split, $cols );		$split = $split + $cols;	}	$c = '';	foreach ( $rows as $row ) {		$c = $c == 'alternate' ? '' : 'alternate';		echo "<tr class='$c'>";		$i = 0;		foreach ( $row as $user_blog ) {			$s = $i == 3 ? '' : 'border-right: 1px solid #ccc;';			echo "<td valign='top' style='$s'>";			echo "<h3>{$user_blog->blogname}</h3>";			echo "<p>" . apply_filters( 'myblogs_blog_actions', "<a href='" . esc_url( get_home_url( $user_blog->userblog_id ) ). "'>" . __( 'Visit' ) . "</a> | <a href='" . esc_url( get_admin_url( $user_blog->userblog_id ) ) . "'>" . __( 'Dashboard' ) . "</a>", $user_blog ) . "</p>";			echo apply_filters( 'myblogs_options', '', $user_blog );			echo "</td>";			$i++;		}		echo "</tr>";	}?>	</table>	<input type="hidden" name="action" value="updateblogsettings" />	<?php wp_nonce_field( 'update-my-sites' ); ?>	<p>	 <input type="submit" class="button-primary" value="<?php _e( 'Save Changes' ) ?>" />	</p>	</form>	</div><?phpinclude( './admin-footer.php' );?>
<?php/** * Redirects to the Comments RSS2 feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( 'comments_rss2_url' ), 301 );?>
<?php/** * WordPress API for media display. * * @package WordPress *//** * Scale down the default size of an image. * * This is so that the image is a better fit for the editor and theme. * * The $size parameter accepts either an array or a string. The supported string * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at * 128 width and 96 height in pixels. Also supported for the string value is * 'medium' and 'full'. The 'full' isn't actually supported, but any value other * than the supported will result in the content_width size or 500 if that is * not set. * * Finally, there is a filter named, 'editor_max_image_size' that will be called * on the calculated array for width and height, respectively. The second * parameter will be the value that was in the $size parameter. The returned * type for the hook is an array with the width as the first element and the * height as the second element. * * @since 2.5.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $width Width of the image * @param int $height Height of the image * @param string|array $size Size of what the result image should be. * @return array Width and height of what the result image should resize to. */function image_constrain_size_for_editor($width, $height, $size = 'medium') {	global $content_width, $_wp_additional_image_sizes;	if ( is_array($size) ) {		$max_width = $size[0];		$max_height = $size[1];	}	elseif ( $size == 'thumb' || $size == 'thumbnail' ) {		$max_width = intval(get_option('thumbnail_size_w'));		$max_height = intval(get_option('thumbnail_size_h'));		// last chance thumbnail size defaults		if ( !$max_width && !$max_height ) {			$max_width = 128;			$max_height = 96;		}	}	elseif ( $size == 'medium' ) {		$max_width = intval(get_option('medium_size_w'));		$max_height = intval(get_option('medium_size_h'));		// if no width is set, default to the theme content width if available	}	elseif ( $size == 'large' ) {		// we're inserting a large size image into the editor.  if it's a really		// big image we'll scale it down to fit reasonably within the editor		// itself, and within the theme's content width if it's known.  the user		// can resize it in the editor if they wish.		$max_width = intval(get_option('large_size_w'));		$max_height = intval(get_option('large_size_h'));		if ( intval($content_width) > 0 )			$max_width = min( intval($content_width), $max_width );	} elseif ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) && in_array( $size, array_keys( $_wp_additional_image_sizes ) ) ) {		$max_width = intval( $_wp_additional_image_sizes[$size]['width'] );		$max_height = intval( $_wp_additional_image_sizes[$size]['height'] );		if ( intval($content_width) > 0 && is_admin() ) // Only in admin. Assume that theme authors know what they're doing.			$max_width = min( intval($content_width), $max_width );	}	// $size == 'full' has no constraint	else {		$max_width = $width;		$max_height = $height;	}	list( $max_width, $max_height ) = apply_filters( 'editor_max_image_size', array( $max_width, $max_height ), $size );	return wp_constrain_dimensions( $width, $height, $max_width, $max_height );}/** * Retrieve width and height attributes using given width and height values. * * Both attributes are required in the sense that both parameters must have a * value, but are optional in that if you set them to false or null, then they * will not be added to the returned string. * * You can set the value using a string, but it will only take numeric values. * If you wish to put 'px' after the numbers, then it will be stripped out of * the return. * * @since 2.5.0 * * @param int|string $width Optional. Width attribute value. * @param int|string $height Optional. Height attribute value. * @return string HTML attributes for width and, or height. */function image_hwstring($width, $height) {	$out = '';	if ($width)		$out .= 'width="'.intval($width).'" ';	if ($height)		$out .= 'height="'.intval($height).'" ';	return $out;}/** * Scale an image to fit a particular size (such as 'thumb' or 'medium'). * * Array with image url, width, height, and whether is intermediate size, in * that order is returned on success is returned. $is_intermediate is true if * $url is a resized image, false if it is the original. * * The URL might be the original image, or it might be a resized version. This * function won't create a new resized copy, it will just return an already * resized one if it exists. * * A plugin may use the 'image_downsize' filter to hook into and offer image * resizing services for images. The hook must return an array with the same * elements that are returned in the function. The first element being the URL * to the new image that was resized. * * @since 2.5.0 * @uses apply_filters() Calls 'image_downsize' on $id and $size to provide *		resize services. * * @param int $id Attachment ID for image. * @param string $size Optional, default is 'medium'. Size of image, can be 'thumbnail'. * @return bool|array False on failure, array on success. */function image_downsize($id, $size = 'medium') {	if ( !wp_attachment_is_image($id) )		return false;	$img_url = wp_get_attachment_url($id);	$meta = wp_get_attachment_metadata($id);	$width = $height = 0;	$is_intermediate = false;	// plugins can use this to provide resize services	if ( $out = apply_filters('image_downsize', false, $id, $size) )		return $out;	// try for a new style intermediate size	if ( $intermediate = image_get_intermediate_size($id, $size) ) {		$img_url = str_replace(basename($img_url), $intermediate['file'], $img_url);		$width = $intermediate['width'];		$height = $intermediate['height'];		$is_intermediate = true;	}	elseif ( $size == 'thumbnail' ) {		// fall back to the old thumbnail		if ( ($thumb_file = wp_get_attachment_thumb_file($id)) && $info = getimagesize($thumb_file) ) {			$img_url = str_replace(basename($img_url), basename($thumb_file), $img_url);			$width = $info[0];			$height = $info[1];			$is_intermediate = true;		}	}	if ( !$width && !$height && isset($meta['width'], $meta['height']) ) {		// any other type: use the real image		$width = $meta['width'];		$height = $meta['height'];	}	if ( $img_url) {		// we have the actual image size, but might need to further constrain it if content_width is narrower		list( $width, $height ) = image_constrain_size_for_editor( $width, $height, $size );		return array( $img_url, $width, $height, $is_intermediate );	}	return false;}/** * Registers a new image size */function add_image_size( $name, $width = 0, $height = 0, $crop = FALSE ) {	global $_wp_additional_image_sizes;	$_wp_additional_image_sizes[$name] = array( 'width' => absint( $width ), 'height' => absint( $height ), 'crop' => !!$crop );}/** * Registers an image size for the post thumbnail */function set_post_thumbnail_size( $width = 0, $height = 0, $crop = FALSE ) {	add_image_size( 'post-thumbnail', $width, $height, $crop );}/** * An <img src /> tag for an image attachment, scaling it down if requested. * * The filter 'get_image_tag_class' allows for changing the class name for the * image without having to use regular expressions on the HTML content. The * parameters are: what WordPress will use for the class, the Attachment ID, * image align value, and the size the image should be. * * The second filter 'get_image_tag' has the HTML content, which can then be * further manipulated by a plugin to change all attribute values and even HTML * content. * * @since 2.5.0 * * @uses apply_filters() The 'get_image_tag_class' filter is the IMG element *		class attribute. * @uses apply_filters() The 'get_image_tag' filter is the full IMG element with *		all attributes. * * @param int $id Attachment ID. * @param string $alt Image Description for the alt attribute. * @param string $title Image Description for the title attribute. * @param string $align Part of the class name for aligning the image. * @param string $size Optional. Default is 'medium'. * @return string HTML IMG element for given image attachment */function get_image_tag($id, $alt, $title, $align, $size='medium') {	list( $img_src, $width, $height ) = image_downsize($id, $size);	$hwstring = image_hwstring($width, $height);	$class = 'align' . esc_attr($align) .' size-' . esc_attr($size) . ' wp-image-' . $id;	$class = apply_filters('get_image_tag_class', $class, $id, $align, $size);	$html = '<img src="' . esc_attr($img_src) . '" alt="' . esc_attr($alt) . '" title="' . esc_attr($title).'" '.$hwstring.'class="'.$class.'" />';	$html = apply_filters( 'get_image_tag', $html, $id, $alt, $title, $align, $size );	return $html;}/** * Load an image from a string, if PHP supports it. * * @since 2.1.0 * * @param string $file Filename of the image to load. * @return resource The resulting image resource on success, Error string on failure. */function wp_load_image( $file ) {	if ( is_numeric( $file ) )		$file = get_attached_file( $file );	if ( ! file_exists( $file ) )		return sprintf(__('File &#8220;%s&#8221; doesn&#8217;t exist?'), $file);	if ( ! function_exists('imagecreatefromstring') )		return __('The GD image library is not installed.');	// Set artificially high because GD uses uncompressed images in memory	@ini_set('memory_limit', '256M');	$image = imagecreatefromstring( file_get_contents( $file ) );	if ( !is_resource( $image ) )		return sprintf(__('File &#8220;%s&#8221; is not an image.'), $file);	return $image;}/** * Calculates the new dimentions for a downsampled image. * * If either width or height are empty, no constraint is applied on * that dimension. * * @since 2.5.0 * * @param int $current_width Current width of the image. * @param int $current_height Current height of the image. * @param int $max_width Optional. Maximum wanted width. * @param int $max_height Optional. Maximum wanted height. * @return array First item is the width, the second item is the height. */function wp_constrain_dimensions( $current_width, $current_height, $max_width=0, $max_height=0 ) {	if ( !$max_width and !$max_height )		return array( $current_width, $current_height );	$width_ratio = $height_ratio = 1.0;	$did_width = $did_height = false;	if ( $max_width > 0 && $current_width > 0 && $current_width > $max_width ) {		$width_ratio = $max_width / $current_width;		$did_width = true;	}	if ( $max_height > 0 && $current_height > 0 && $current_height > $max_height ) {		$height_ratio = $max_height / $current_height;		$did_height = true;	}	// Calculate the larger/smaller ratios	$smaller_ratio = min( $width_ratio, $height_ratio );	$larger_ratio  = max( $width_ratio, $height_ratio );	if ( intval( $current_width * $larger_ratio ) > $max_width || intval( $current_height * $larger_ratio ) > $max_height ) 		// The larger ratio is too big. It would result in an overflow.		$ratio = $smaller_ratio;	else		// The larger ratio fits, and is likely to be a more "snug" fit.		$ratio = $larger_ratio;	$w = intval( $current_width  * $ratio );	$h = intval( $current_height * $ratio );	// Sometimes, due to rounding, we'll end up with a result like this: 465x700 in a 177x177 box is 117x176... a pixel short	// We also have issues with recursive calls resulting in an ever-changing result. Contraining to the result of a constraint should yield the original result.	// Thus we look for dimensions that are one pixel shy of the max value and bump them up	if ( $did_width && $w == $max_width - 1 )		$w = $max_width; // Round it up	if ( $did_height && $h == $max_height - 1 )		$h = $max_height; // Round it up	return array( $w, $h );}/** * Retrieve calculated resized dimensions for use in imagecopyresampled(). * * Calculate dimensions and coordinates for a resized image that fits within a * specified width and height. If $crop is true, the largest matching central * portion of the image will be cropped out and resized to the required size. * * @since 2.5.0 * * @param int $orig_w Original width. * @param int $orig_h Original height. * @param int $dest_w New width. * @param int $dest_h New height. * @param bool $crop Optional, default is false. Whether to crop image or resize. * @return bool|array False, on failure. Returned array matches parameters for imagecopyresampled() PHP function. */function image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {	if ($orig_w <= 0 || $orig_h <= 0)		return false;	// at least one of dest_w or dest_h must be specific	if ($dest_w <= 0 && $dest_h <= 0)		return false;	if ( $crop ) {		// crop the largest possible portion of the original image that we can size to $dest_w x $dest_h		$aspect_ratio = $orig_w / $orig_h;		$new_w = min($dest_w, $orig_w);		$new_h = min($dest_h, $orig_h);		if ( !$new_w ) {			$new_w = intval($new_h * $aspect_ratio);		}		if ( !$new_h ) {			$new_h = intval($new_w / $aspect_ratio);		}		$size_ratio = max($new_w / $orig_w, $new_h / $orig_h);		$crop_w = round($new_w / $size_ratio);		$crop_h = round($new_h / $size_ratio);		$s_x = floor( ($orig_w - $crop_w) / 2 );		$s_y = floor( ($orig_h - $crop_h) / 2 );	} else {		// don't crop, just resize using $dest_w x $dest_h as a maximum bounding box		$crop_w = $orig_w;		$crop_h = $orig_h;		$s_x = 0;		$s_y = 0;		list( $new_w, $new_h ) = wp_constrain_dimensions( $orig_w, $orig_h, $dest_w, $dest_h );	}	// if the resulting image would be the same size or larger we don't want to resize it	if ( $new_w >= $orig_w && $new_h >= $orig_h )		return false;	// the return array matches the parameters to imagecopyresampled()	// int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h	return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );}/** * Scale down an image to fit a particular size and save a new copy of the image. * * The PNG transparency will be preserved using the function, as well as the * image type. If the file going in is PNG, then the resized image is going to * be PNG. The only supported image types are PNG, GIF, and JPEG. * * Some functionality requires API to exist, so some PHP version may lose out * support. This is not the fault of WordPress (where functionality is * downgraded, not actual defects), but of your PHP version. * * @since 2.5.0 * * @param string $file Image file path. * @param int $max_w Maximum width to resize to. * @param int $max_h Maximum height to resize to. * @param bool $crop Optional. Whether to crop image or resize. * @param string $suffix Optional. File Suffix. * @param string $dest_path Optional. New image file path. * @param int $jpeg_quality Optional, default is 90. Image quality percentage. * @return mixed WP_Error on failure. String with new destination path. */function image_resize( $file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90 ) {	$image = wp_load_image( $file );	if ( !is_resource( $image ) )		return new WP_Error( 'error_loading_image', $image, $file );	$size = @getimagesize( $file );	if ( !$size )		return new WP_Error('invalid_image', __('Could not read image size'), $file);	list($orig_w, $orig_h, $orig_type) = $size;	$dims = image_resize_dimensions($orig_w, $orig_h, $max_w, $max_h, $crop);	if ( !$dims )		return new WP_Error( 'error_getting_dimensions', __('Could not calculate resized image dimensions') );	list($dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) = $dims;	$newimage = wp_imagecreatetruecolor( $dst_w, $dst_h );	imagecopyresampled( $newimage, $image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);	// convert from full colors to index colors, like original PNG.	if ( IMAGETYPE_PNG == $orig_type && function_exists('imageistruecolor') && !imageistruecolor( $image ) )		imagetruecolortopalette( $newimage, false, imagecolorstotal( $image ) );	// we don't need the original in memory anymore	imagedestroy( $image );	// $suffix will be appended to the destination filename, just before the extension	if ( !$suffix )		$suffix = "{$dst_w}x{$dst_h}";	$info = pathinfo($file);	$dir = $info['dirname'];	$ext = $info['extension'];	$name = basename($file, ".{$ext}");	if ( !is_null($dest_path) and $_dest_path = realpath($dest_path) )		$dir = $_dest_path;	$destfilename = "{$dir}/{$name}-{$suffix}.{$ext}";	if ( IMAGETYPE_GIF == $orig_type ) {		if ( !imagegif( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} elseif ( IMAGETYPE_PNG == $orig_type ) {		if ( !imagepng( $newimage, $destfilename ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	} else {		// all other formats are converted to jpg		$destfilename = "{$dir}/{$name}-{$suffix}.jpg";		if ( !imagejpeg( $newimage, $destfilename, apply_filters( 'jpeg_quality', $jpeg_quality, 'image_resize' ) ) )			return new WP_Error('resize_path_invalid', __( 'Resize path invalid' ));	}	imagedestroy( $newimage );	// Set correct file permissions	$stat = stat( dirname( $destfilename ));	$perms = $stat['mode'] & 0000666; //same permissions as parent folder, strip off the executable bits	@ chmod( $destfilename, $perms );	return $destfilename;}/** * Resize an image to make a thumbnail or intermediate size. * * The returned array has the file size, the image width, and image height. The * filter 'image_make_intermediate_size' can be used to hook in and change the * values of the returned array. The only parameter is the resized file path. * * @since 2.5.0 * * @param string $file File path. * @param int $width Image width. * @param int $height Image height. * @param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize. * @return bool|array False, if no image was created. Metadata array on success. */function image_make_intermediate_size($file, $width, $height, $crop=false) {	if ( $width || $height ) {		$resized_file = image_resize($file, $width, $height, $crop);		if ( !is_wp_error($resized_file) && $resized_file && $info = getimagesize($resized_file) ) {			$resized_file = apply_filters('image_make_intermediate_size', $resized_file);			return array(				'file' => basename( $resized_file ),				'width' => $info[0],				'height' => $info[1],			);		}	}	return false;}/** * Retrieve the image's intermediate size (resized) path, width, and height. * * The $size parameter can be an array with the width and height respectively. * If the size matches the 'sizes' metadata array for width and height, then it * will be used. If there is no direct match, then the nearest image size larger * than the specified size will be used. If nothing is found, then the function * will break out and return false. * * The metadata 'sizes' is used for compatible sizes that can be used for the * parameter $size value. * * The url path will be given, when the $size parameter is a string. * * If you are passing an array for the $size, you should consider using * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @since 2.5.0 * @see add_image_size() * * @param int $post_id Attachment ID for image. * @param array|string $size Optional, default is 'thumbnail'. Size of image, either array or string. * @return bool|array False on failure or array of file path, width, and height on success. */function image_get_intermediate_size($post_id, $size='thumbnail') {	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post_id ) ) )		return false;	// get the best one for a specified set of dimensions	if ( is_array($size) && !empty($imagedata['sizes']) ) {		foreach ( $imagedata['sizes'] as $_size => $data ) {			// already cropped to width or height; so use this size			if ( ( $data['width'] == $size[0] && $data['height'] <= $size[1] ) || ( $data['height'] == $size[1] && $data['width'] <= $size[0] ) ) {				$file = $data['file'];				list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );				return compact( 'file', 'width', 'height' );			}			// add to lookup table: area => size			$areas[$data['width'] * $data['height']] = $_size;		}		if ( !$size || !empty($areas) ) {			// find for the smallest image not smaller than the desired size			ksort($areas);			foreach ( $areas as $_size ) {				$data = $imagedata['sizes'][$_size];				if ( $data['width'] >= $size[0] || $data['height'] >= $size[1] ) {					// Skip images with unexpectedly divergent aspect ratios (crops)					// First, we calculate what size the original image would be if constrained to a box the size of the current image in the loop					$maybe_cropped = image_resize_dimensions($imagedata['width'], $imagedata['height'], $data['width'], $data['height'], false );					// If the size doesn't match within one pixel, then it is of a different aspect ratio, so we skip it, unless it's the thumbnail size					if ( 'thumbnail' != $_size && ( !$maybe_cropped || ( $maybe_cropped[4] != $data['width'] && $maybe_cropped[4] + 1 != $data['width'] ) || ( $maybe_cropped[5] != $data['height'] && $maybe_cropped[5] + 1 != $data['height'] ) ) )						continue;					// If we're still here, then we're going to use this size					$file = $data['file'];					list($width, $height) = image_constrain_size_for_editor( $data['width'], $data['height'], $size );					return compact( 'file', 'width', 'height' );				}			}		}	}	if ( is_array($size) || empty($size) || empty($imagedata['sizes'][$size]) )		return false;	$data = $imagedata['sizes'][$size];	// include the full filesystem path of the intermediate file	if ( empty($data['path']) && !empty($data['file']) ) {		$file_url = wp_get_attachment_url($post_id);		$data['path'] = path_join( dirname($imagedata['file']), $data['file'] );		$data['url'] = path_join( dirname($file_url), $data['file'] );	}	return $data;}/** * Get the available image sizes * @since 3.0.0 * @return array Returns a filtered array of image size strings */function get_intermediate_image_sizes() {	global $_wp_additional_image_sizes;	$image_sizes = array('thumbnail', 'medium', 'large'); // Standard sizes	if ( isset( $_wp_additional_image_sizes ) && count( $_wp_additional_image_sizes ) )		$image_sizes = array_merge( $image_sizes, array_keys( $_wp_additional_image_sizes ) );	return apply_filters( 'intermediate_image_sizes', $image_sizes );}/** * Retrieve an image to represent an attachment. * * A mime icon for files, thumbnail or intermediate size for images. * * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return bool|array Returns an array (url, width, height), or false, if no image is available. */function wp_get_attachment_image_src($attachment_id, $size='thumbnail', $icon = false) {	// get a thumbnail or intermediate image if there is one	if ( $image = image_downsize($attachment_id, $size) )		return $image;	$src = false;	if ( $icon && $src = wp_mime_type_icon($attachment_id) ) {		$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/crystal' );		$src_file = $icon_dir . '/' . basename($src);		@list($width, $height) = getimagesize($src_file);	}	if ( $src && $width && $height )		return array( $src, $width, $height );	return false;}/** * Get an HTML img element representing an image attachment * * While $size will accept an array, it is better to register a size with * add_image_size() so that a cropped version is generated. It's much more * efficient than having to find the closest-sized image and then having the * browser scale down the image. * * @see add_image_size() * @uses apply_filters() Calls 'wp_get_attachment_image_attributes' hook on attributes array * @uses wp_get_attachment_image_src() Gets attachment file URL and dimensions * @since 2.5.0 * * @param int $attachment_id Image attachment ID. * @param string $size Optional, default is 'thumbnail'. * @param bool $icon Optional, default is false. Whether it is an icon. * @return string HTML img element or empty string on failure. */function wp_get_attachment_image($attachment_id, $size = 'thumbnail', $icon = false, $attr = '') {	$html = '';	$image = wp_get_attachment_image_src($attachment_id, $size, $icon);	if ( $image ) {		list($src, $width, $height) = $image;		$hwstring = image_hwstring($width, $height);		if ( is_array($size) )			$size = join('x', $size);		$attachment =& get_post($attachment_id);		$default_attr = array(			'src'	=> $src,			'class'	=> "attachment-$size",			'alt'	=> trim(strip_tags( get_post_meta($attachment_id, '_wp_attachment_image_alt', true) )), // Use Alt field first			'title'	=> trim(strip_tags( $attachment->post_title )),		);		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_excerpt )); // If not, Use the Caption		if ( empty($default_attr['alt']) )			$default_attr['alt'] = trim(strip_tags( $attachment->post_title )); // Finally, use the title		$attr = wp_parse_args($attr, $default_attr);		$attr = apply_filters( 'wp_get_attachment_image_attributes', $attr, $attachment );		$attr = array_map( 'esc_attr', $attr );		$html = rtrim("<img $hwstring");		foreach ( $attr as $name => $value ) {			$html .= " $name=" . '"' . $value . '"';		}		$html .= ' />';	}	return $html;}/** * Adds a 'wp-post-image' class to post thumbnail thumbnails * Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to * dynamically add/remove itself so as to only filter post thumbnail thumbnails * * @since 2.9.0 * @param array $attr Attributes including src, class, alt, title * @return array */function _wp_post_thumbnail_class_filter( $attr ) {	$attr['class'] .= ' wp-post-image';	return $attr;}/** * Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_add( $attr ) {	add_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}/** * Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter * * @since 2.9.0 */function _wp_post_thumbnail_class_filter_remove( $attr ) {	remove_filter( 'wp_get_attachment_image_attributes', '_wp_post_thumbnail_class_filter' );}add_shortcode('wp_caption', 'img_caption_shortcode');add_shortcode('caption', 'img_caption_shortcode');/** * The Caption shortcode. * * Allows a plugin to replace the content that would otherwise be returned. The * filter is 'img_caption_shortcode' and passes an empty string, the attr * parameter and the content parameter values. * * The supported attributes for the shortcode are 'id', 'align', 'width', and * 'caption'. * * @since 2.6.0 * * @param array $attr Attributes attributed to the shortcode. * @param string $content Optional. Shortcode content. * @return string */function img_caption_shortcode($attr, $content = null) {	// Allow plugins/themes to override the default caption template.	$output = apply_filters('img_caption_shortcode', '', $attr, $content);	if ( $output != '' )		return $output;	extract(shortcode_atts(array(		'id'	=> '',		'align'	=> 'alignnone',		'width'	=> '',		'caption' => ''	), $attr));	if ( 1 > (int) $width || empty($caption) )		return $content;	if ( $id ) $id = 'id="' . esc_attr($id) . '" ';	return '<div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'	. do_shortcode( $content ) . '<p class="wp-caption-text">' . $caption . '</p></div>';}add_shortcode('gallery', 'gallery_shortcode');/** * The Gallery shortcode. * * This implements the functionality of the Gallery Shortcode for displaying * WordPress images on a post. * * @since 2.5.0 * * @param array $attr Attributes attributed to the shortcode. * @return string HTML content to display gallery. */function gallery_shortcode($attr) {	global $post, $wp_locale;	static $instance = 0;	$instance++;	// Allow plugins/themes to override the default gallery template.	$output = apply_filters('post_gallery', '', $attr);	if ( $output != '' )		return $output;	// We're trusting author input, so let's at least make sure it looks like a valid orderby statement	if ( isset( $attr['orderby'] ) ) {		$attr['orderby'] = sanitize_sql_orderby( $attr['orderby'] );		if ( !$attr['orderby'] )			unset( $attr['orderby'] );	}	extract(shortcode_atts(array(		'order'      => 'ASC',		'orderby'    => 'menu_order ID',		'id'         => $post->ID,		'itemtag'    => 'dl',		'icontag'    => 'dt',		'captiontag' => 'dd',		'columns'    => 3,		'size'       => 'thumbnail',		'include'    => '',		'exclude'    => ''	), $attr));	$id = intval($id);	if ( 'RAND' == $order )		$orderby = 'none';	if ( !empty($include) ) {		$include = preg_replace( '/[^0-9,]+/', '', $include );		$_attachments = get_posts( array('include' => $include, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );		$attachments = array();		foreach ( $_attachments as $key => $val ) {			$attachments[$val->ID] = $_attachments[$key];		}	} elseif ( !empty($exclude) ) {		$exclude = preg_replace( '/[^0-9,]+/', '', $exclude );		$attachments = get_children( array('post_parent' => $id, 'exclude' => $exclude, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	} else {		$attachments = get_children( array('post_parent' => $id, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );	}	if ( empty($attachments) )		return '';	if ( is_feed() ) {		$output = "\n";		foreach ( $attachments as $att_id => $attachment )			$output .= wp_get_attachment_link($att_id, $size, true) . "\n";		return $output;	}	$itemtag = tag_escape($itemtag);	$captiontag = tag_escape($captiontag);	$columns = intval($columns);	$itemwidth = $columns > 0 ? floor(100/$columns) : 100;	$float = is_rtl() ? 'right' : 'left';	$selector = "gallery-{$instance}";	$output = apply_filters('gallery_style', "		<style type='text/css'>			#{$selector} {				margin: auto;			}			#{$selector} .gallery-item {				float: {$float};				margin-top: 10px;				text-align: center;				width: {$itemwidth}%;			}			#{$selector} img {				border: 2px solid #cfcfcf;			}			#{$selector} .gallery-caption {				margin-left: 0;			}		</style>		<!-- see gallery_shortcode() in wp-includes/media.php -->		<div id='$selector' class='gallery galleryid-{$id}'>");	$i = 0;	foreach ( $attachments as $id => $attachment ) {		$link = isset($attr['link']) && 'file' == $attr['link'] ? wp_get_attachment_link($id, $size, false, false) : wp_get_attachment_link($id, $size, true, false);		$output .= "<{$itemtag} class='gallery-item'>";		$output .= "			<{$icontag} class='gallery-icon'>				$link			</{$icontag}>";		if ( $captiontag && trim($attachment->post_excerpt) ) {			$output .= "				<{$captiontag} class='gallery-caption'>				" . wptexturize($attachment->post_excerpt) . "				</{$captiontag}>";		}		$output .= "</{$itemtag}>";		if ( $columns > 0 && ++$i % $columns == 0 )			$output .= '<br style="clear: both" />';	}	$output .= "			<br style='clear: both;' />		</div>\n";	return $output;}/** * Display previous image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function previous_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(true, $size, $text);}/** * Display next image link that has the same post parent. * * @since 2.5.0 * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text; * @param string $text Optional, default is false. If included, link will reflect $text variable. * @return string HTML content. */function next_image_link($size = 'thumbnail', $text = false) {	adjacent_image_link(false, $size, $text);}/** * Display next or previous image link that has the same post parent. * * Retrieves the current attachment object from the $post global. * * @since 2.5.0 * * @param bool $prev Optional. Default is true to display previous link, true for next. */function adjacent_image_link($prev = true, $size = 'thumbnail', $text = false) {	global $post;	$post = get_post($post);	$attachments = array_values(get_children( array('post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID') ));	foreach ( $attachments as $k => $attachment )		if ( $attachment->ID == $post->ID )			break;	$k = $prev ? $k - 1 : $k + 1;	if ( isset($attachments[$k]) )		echo wp_get_attachment_link($attachments[$k]->ID, $size, true, false, $text);}/** * Retrieve taxonomies attached to the attachment. * * @since 2.5.0 * * @param int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object. * @return array Empty array on failure. List of taxonomies on success. */function get_attachment_taxonomies($attachment) {	if ( is_int( $attachment ) )		$attachment = get_post($attachment);	else if ( is_array($attachment) )		$attachment = (object) $attachment;	if ( ! is_object($attachment) )		return array();	$filename = basename($attachment->guid);	$objects = array('attachment');	if ( false !== strpos($filename, '.') )		$objects[] = 'attachment:' . substr($filename, strrpos($filename, '.') + 1);	if ( !empty($attachment->post_mime_type) ) {		$objects[] = 'attachment:' . $attachment->post_mime_type;		if ( false !== strpos($attachment->post_mime_type, '/') )			foreach ( explode('/', $attachment->post_mime_type) as $token )				if ( !empty($token) )					$objects[] = "attachment:$token";	}	$taxonomies = array();	foreach ( $objects as $object )		if ( $taxes = get_object_taxonomies($object) )			$taxonomies = array_merge($taxonomies, $taxes);	return array_unique($taxonomies);}/** * Check if the installed version of GD supports particular image type * * @since 2.9.0 * * @param $mime_type string * @return bool */function gd_edit_image_support($mime_type) {	if ( function_exists('imagetypes') ) {		switch( $mime_type ) {			case 'image/jpeg':				return (imagetypes() & IMG_JPG) != 0;			case 'image/png':				return (imagetypes() & IMG_PNG) != 0;			case 'image/gif':				return (imagetypes() & IMG_GIF) != 0;		}	} else {		switch( $mime_type ) {			case 'image/jpeg':				return function_exists('imagecreatefromjpeg');			case 'image/png':				return function_exists('imagecreatefrompng');			case 'image/gif':				return function_exists('imagecreatefromgif');		}	}	return false;}/** * Create new GD image resource with transparency support * * @since 2.9.0 * * @param $width * @param $height * @return image resource */function wp_imagecreatetruecolor($width, $height) {	$img = imagecreatetruecolor($width, $height);	if ( is_resource($img) && function_exists('imagealphablending') && function_exists('imagesavealpha') ) {		imagealphablending($img, false);		imagesavealpha($img, true);	}	return $img;}/** * API for easily embedding rich media such as videos and images into content. * * @package WordPress * @subpackage Embed * @since 2.9.0 */class WP_Embed {	var $handlers = array();	var $post_ID;	var $usecache = true;	var $linkifunknown = true;	/**	 * PHP4 constructor	 */	function WP_Embed() {		return $this->__construct();	}	/**	 * PHP5 constructor	 */	function __construct() {		// Hack to get the [embed] shortcode to run before wpautop()		add_filter( 'the_content', array(&$this, 'run_shortcode'), 8 );		// Shortcode placeholder for strip_shortcodes()		add_shortcode( 'embed', '__return_false' );		// Attempts to embed all URLs in a post		if ( get_option('embed_autourls') )			add_filter( 'the_content', array(&$this, 'autoembed'), 8 );		// After a post is saved, invalidate the oEmbed cache		add_action( 'save_post', array(&$this, 'delete_oembed_caches') );		// After a post is saved, cache oEmbed items via AJAX		add_action( 'edit_form_advanced', array(&$this, 'maybe_run_ajax_cache') );	}	/**	 * Process the [embed] shortcode.	 *	 * Since the [embed] shortcode needs to be run earlier than other shortcodes,	 * this function removes all existing shortcodes, registers the [embed] shortcode,	 * calls {@link do_shortcode()}, and then re-registers the old shortcodes.	 *	 * @uses $shortcode_tags	 * @uses remove_all_shortcodes()	 * @uses add_shortcode()	 * @uses do_shortcode()	 *	 * @param string $content Content to parse	 * @return string Content with shortcode parsed	 */	function run_shortcode( $content ) {		global $shortcode_tags;		// Backup current registered shortcodes and clear them all out		$orig_shortcode_tags = $shortcode_tags;		remove_all_shortcodes();		add_shortcode( 'embed', array(&$this, 'shortcode') );		// Do the shortcode (only the [embed] one is registered)		$content = do_shortcode( $content );		// Put the original shortcodes back		$shortcode_tags = $orig_shortcode_tags;		return $content;	}	/**	 * If a post/page was saved, then output Javascript to make	 * an AJAX request that will call WP_Embed::cache_oembed().	 */	function maybe_run_ajax_cache() {		global $post_ID;		if ( empty($post_ID) || empty($_GET['message']) || 1 != $_GET['message'] )			return;?><script type="text/javascript">/* <![CDATA[ */	jQuery(document).ready(function($){		$.get("<?php echo admin_url( 'admin-ajax.php?action=oembed-cache&post=' . $post_ID ); ?>");	});/* ]]> */</script><?php	}	/**	 * Register an embed handler. Do not use this function directly, use {@link wp_embed_register_handler()} instead.	 * This function should probably also only be used for sites that do not support oEmbed.	 *	 * @param string $id An internal ID/name for the handler. Needs to be unique.	 * @param string $regex The regex that will be used to see if this handler should be used for a URL.	 * @param callback $callback The callback function that will be called if the regex is matched.	 * @param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.	 */	function register_handler( $id, $regex, $callback, $priority = 10 ) {		$this->handlers[$priority][$id] = array(			'regex'    => $regex,			'callback' => $callback,		);	}	/**	 * Unregister a previously registered embed handler. Do not use this function directly, use {@link wp_embed_unregister_handler()} instead.	 *	 * @param string $id The handler ID that should be removed.	 * @param int $priority Optional. The priority of the handler to be removed (default: 10).	 */	function unregister_handler( $id, $priority = 10 ) {		if ( isset($this->handlers[$priority][$id]) )			unset($this->handlers[$priority][$id]);	}	/**	 * The {@link do_shortcode()} callback function.	 *	 * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers.	 * If none of the regex matches and it's enabled, then the URL will be given to the {@link WP_oEmbed} class.	 *	 * @uses wp_oembed_get()	 * @uses wp_parse_args()	 * @uses wp_embed_defaults()	 * @uses WP_Embed::maybe_make_link()	 * @uses get_option()	 * @uses current_user_can()	 * @uses wp_cache_get()	 * @uses wp_cache_set()	 * @uses get_post_meta()	 * @uses update_post_meta()	 *	 * @param array $attr Shortcode attributes.	 * @param string $url The URL attempting to be embeded.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function shortcode( $attr, $url = '' ) {		global $post;		if ( empty($url) )			return '';		$rawattr = $attr;		$attr = wp_parse_args( $attr, wp_embed_defaults() );		// Look for known internal handlers		ksort( $this->handlers );		foreach ( $this->handlers as $priority => $handlers ) {			foreach ( $handlers as $id => $handler ) {				if ( preg_match( $handler['regex'], $url, $matches ) && is_callable( $handler['callback'] ) ) {					if ( false !== $return = call_user_func( $handler['callback'], $matches, $attr, $url, $rawattr ) )						return apply_filters( 'embed_handler_html', $return, $url, $attr );				}			}		}		$post_ID = ( !empty($post->ID) ) ? $post->ID : null;		if ( !empty($this->post_ID) ) // Potentially set by WP_Embed::cache_oembed()			$post_ID = $this->post_ID;		// Unknown URL format. Let oEmbed have a go.		if ( $post_ID ) {			// Check for a cached result (stored in the post meta)			$cachekey = '_oembed_' . md5( $url . serialize( $attr ) );			if ( $this->usecache ) {				$cache = get_post_meta( $post_ID, $cachekey, true );				// Failures are cached				if ( '{{unknown}}' === $cache )					return $this->maybe_make_link( $url );				if ( !empty($cache) )					return apply_filters( 'embed_oembed_html', $cache, $url, $attr );			}			// Use oEmbed to get the HTML			$attr['discover'] = ( apply_filters('embed_oembed_discover', false) && author_can( $post_ID, 'unfiltered_html' ) );			$html = wp_oembed_get( $url, $attr );			// Cache the result			$cache = ( $html ) ? $html : '{{unknown}}';			update_post_meta( $post_ID, $cachekey, $cache );			// If there was a result, return it			if ( $html )				return apply_filters( 'embed_oembed_html', $html, $url, $attr );		}		// Still unknown		return $this->maybe_make_link( $url );	}	/**	 * Delete all oEmbed caches.	 *	 * @param int $post_ID Post ID to delete the caches for.	 */	function delete_oembed_caches( $post_ID ) {		$post_metas = get_post_custom_keys( $post_ID );		if ( empty($post_metas) )			return;		foreach( $post_metas as $post_meta_key ) {			if ( '_oembed_' == substr( $post_meta_key, 0, 8 ) )				delete_post_meta( $post_ID, $post_meta_key );		}	}	/**	 * Triggers a caching of all oEmbed results.	 *	 * @param int $post_ID Post ID to do the caching for.	 */	function cache_oembed( $post_ID ) {		$post = get_post( $post_ID );		if ( empty($post->ID) || !in_array( $post->post_type, apply_filters( 'embed_cache_oembed_types', array( 'post', 'page' ) ) ) )			return;		// Trigger a caching		if ( !empty($post->post_content) ) {			$this->post_ID = $post->ID;			$this->usecache = false;			$content = $this->run_shortcode( $post->post_content );			if ( get_option('embed_autourls') )				$this->autoembed( $content );			$this->usecache = true;		}	}	/**	 * Passes any unlinked URLs that are on their own line to {@link WP_Embed::shortcode()} for potential embedding.	 *	 * @uses WP_Embed::autoembed_callback()	 *	 * @param string $content The content to be searched.	 * @return string Potentially modified $content.	 */	function autoembed( $content ) {		return preg_replace_callback( '|^\s*(https?://[^\s"]+)\s*$|im', array(&$this, 'autoembed_callback'), $content );	}	/**	 * Callback function for {@link WP_Embed::autoembed()}.	 *	 * @uses WP_Embed::shortcode()	 *	 * @param array $match A regex match array.	 * @return string The embed HTML on success, otherwise the original URL.	 */	function autoembed_callback( $match ) {		$oldval = $this->linkifunknown;		$this->linkifunknown = false;		$return = $this->shortcode( array(), $match[1] );		$this->linkifunknown = $oldval;		return "\n$return\n";	}	/**	 * Conditionally makes a hyperlink based on an internal class variable.	 *	 * @param string $url URL to potentially be linked.	 * @return string Linked URL or the original URL.	 */	function maybe_make_link( $url ) {		$output = ( $this->linkifunknown ) ? '<a href="' . esc_attr($url) . '">' . esc_html($url) . '</a>' : $url;		return apply_filters( 'embed_maybe_make_link', $output, $url );	}}$wp_embed = new WP_Embed();/** * Register an embed handler. This function should probably only be used for sites that do not support oEmbed. * * @since 2.9.0 * @see WP_Embed::register_handler() */function wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {	global $wp_embed;	$wp_embed->register_handler( $id, $regex, $callback, $priority );}/** * Unregister a previously registered embed handler. * * @since 2.9.0 * @see WP_Embed::unregister_handler() */function wp_embed_unregister_handler( $id, $priority = 10 ) {	global $wp_embed;	$wp_embed->unregister_handler( $id, $priority );}/** * Create default array of embed parameters. * * @since 2.9.0 * * @return array Default embed parameters. */function wp_embed_defaults() {	if ( !empty($GLOBALS['content_width']) )		$theme_width = (int) $GLOBALS['content_width'];	$width = get_option('embed_size_w');	if ( empty($width) && !empty($theme_width) )		$width = $theme_width;	if ( empty($width) )		$width = 500;	$height = get_option('embed_size_h');	if ( empty($height) )		$height = 700;	return apply_filters( 'embed_defaults', array(		'width'  => $width,		'height' => $height,	) );}/** * Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height. * * @since 2.9.0 * @uses wp_constrain_dimensions() This function passes the widths and the heights. * * @param int $example_width The width of an example embed. * @param int $example_height The height of an example embed. * @param int $max_width The maximum allowed width. * @param int $max_height The maximum allowed height. * @return array The maximum possible width and height based on the example ratio. */function wp_expand_dimensions( $example_width, $example_height, $max_width, $max_height ) {	$example_width  = (int) $example_width;	$example_height = (int) $example_height;	$max_width      = (int) $max_width;	$max_height     = (int) $max_height;	return wp_constrain_dimensions( $example_width * 1000000, $example_height * 1000000, $max_width, $max_height );}/** * Attempts to fetch the embed HTML for a provided URL using oEmbed. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * @uses WP_oEmbed::get_html() * * @param string $url The URL that should be embeded. * @param array $args Addtional arguments and parameters. * @return string The original URL on failure or the embed HTML on success. */function wp_oembed_get( $url, $args = '' ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	return $oembed->get_html( $url, $args );}/** * Adds a URL format and oEmbed provider URL pair. * * @since 2.9.0 * @see WP_oEmbed * * @uses _wp_oembed_get_object() * * @param string $format The format of URL that this provider can handle. You can use asterisks as wildcards. * @param string $provider The URL to the oEmbed provider. * @param boolean $regex Whether the $format parameter is in a regex format. */function wp_oembed_add_provider( $format, $provider, $regex = false ) {	require_once( ABSPATH . WPINC . '/class-oembed.php' );	$oembed = _wp_oembed_get_object();	$oembed->providers[$format] = array( $provider, $regex );}
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/** * Navigation Menu functions * * @package WordPress * @subpackage Nav_Menus * @since 3.0.0 *//** * Returns a navigation menu object. * * @since 3.0.0 * * @uses get_term * @uses get_term_by * * @param string $menu Menu id, slug or name * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful. */function wp_get_nav_menu_object( $menu ) {	if ( ! $menu )		return false;	$menu_obj = get_term( $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'slug', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = get_term_by( 'name', $menu, 'nav_menu' );	if ( ! $menu_obj )		$menu_obj = false;	return $menu_obj;}/** * Check if the given ID is a navigation menu. * * Returns true if it is; false otherwise. * * @since 3.0.0 * * @param int|string $menu The menu to check (id, slug, or name) * @return bool Whether the menu exists. */function is_nav_menu( $menu ) {	if ( ! $menu )		return false;	$menu_obj = wp_get_nav_menu_object( $menu );	if (		$menu_obj &&		! is_wp_error( $menu_obj ) &&		! empty( $menu_obj->taxonomy ) &&		'nav_menu' == $menu_obj->taxonomy	)		return true;	return false;}/** * Register navigation menus for a theme. * * @since 3.0.0 * * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text. */function register_nav_menus( $locations = array() ) {	global $_wp_registered_nav_menus;	add_theme_support( 'menus' );	$_wp_registered_nav_menus = array_merge( (array) $_wp_registered_nav_menus, $locations );}/** * Register a navigation menu for a theme. * * @since 3.0.0 * * @param string $location Menu location identifier, like a slug. * @param string $description Menu location descriptive text. */function register_nav_menu( $location, $description ) {	register_nav_menus( array( $location => $description ) );}/** * Returns an array of all registered navigation menus in a theme * * @since 3.0.0 * @return array */function get_registered_nav_menus() {	global $_wp_registered_nav_menus;	if ( isset( $_wp_registered_nav_menus ) )		return $_wp_registered_nav_menus;	return array();}/** * Returns an array with the registered navigation menu locations and the menu assigned to it * * @since 3.0.0 * @return array */function get_nav_menu_locations() {	return get_theme_mod( 'nav_menu_locations' );}/** * Whether a registered nav menu location has a menu assigned to it. * * @since 3.0.0 * @param string $location Menu location identifier. * @return bool Whether location has a menu. */function has_nav_menu( $location ) {	$locations = get_nav_menu_locations();	return ( ! empty( $locations[ $location ] ) );}/** * Determine whether the given ID is a nav menu item. * * @since 3.0.0 * * @param int $menu_item_id The ID of the potential nav menu item. * @return bool Whether the given ID is that of a nav menu item. */function is_nav_menu_item( $menu_item_id = 0 ) {	return ( ! is_wp_error( $menu_item_id ) && ( 'nav_menu_item' == get_post_type( $menu_item_id ) ) );}/** * Create a Navigation Menu. * * @since 3.0.0 * * @param string $menu_name Menu Name * @return mixed Menu object on success|WP_Error on failure */function wp_create_nav_menu( $menu_name ) {	return wp_update_nav_menu_object( 0, array( 'menu-name' => $menu_name ) );}/** * Delete a Navigation Menu. * * @since 3.0.0 * * @param string $menu name|id|slug * @return mixed Menu object on success|WP_Error on failure */function wp_delete_nav_menu( $menu ) {	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	$menu_objects = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( ! empty( $menu_objects ) ) {		foreach ( $menu_objects as $item ) {			wp_delete_post( $item );		}	}	$result = wp_delete_term( $menu->term_id, 'nav_menu' );	if ( $result && !is_wp_error($result) )		do_action( 'wp_delete_nav_menu', $menu->term_id );	return $result;}/** * Save the properties of a menu or create a new menu with those properties. * * @since 3.0.0 * * @param int $menu_id The ID of the menu or "0" to create a new menu. * @param array $menu_data The array of menu data. * @return int|error object The menu's ID or WP_Error object. */function wp_update_nav_menu_object( $menu_id = 0, $menu_data = array() ) {	$menu_id = (int) $menu_id;	$_menu = wp_get_nav_menu_object( $menu_id );	$args = array(		'description' => ( isset( $menu_data['description'] ) ? $menu_data['description']  : '' ),		'name'        => ( isset( $menu_data['menu-name']   ) ? $menu_data['menu-name']    : '' ),		'parent'      => ( isset( $menu_data['parent']      ) ? (int) $menu_data['parent'] : 0  ),		'slug'        => null,	);	// double-check that we're not going to have one menu take the name of another	$_possible_existing = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );	if (		$_possible_existing &&		! is_wp_error( $_possible_existing ) &&		isset( $_possible_existing->term_id ) &&		$_possible_existing->term_id != $menu_id	)		return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );	// menu doesn't already exist, so create a new menu	if ( ! $_menu || is_wp_error( $_menu ) ) {		$menu_exists = get_term_by( 'name', $menu_data['menu-name'], 'nav_menu' );		if ( $menu_exists )			return new WP_Error( 'menu_exists', sprintf( __('The menu name <strong>%s</strong> conflicts with another menu name. Please try another.'), esc_html( $menu_data['menu-name'] ) ) );		$_menu = wp_insert_term( $menu_data['menu-name'], 'nav_menu', $args );		if ( is_wp_error( $_menu ) )			return $_menu;		do_action( 'wp_create_nav_menu', $_menu['term_id'], $menu_data );		return (int) $_menu['term_id'];	}	if ( ! $_menu || ! isset( $_menu->term_id ) )		return 0;	$menu_id = (int) $_menu->term_id;	$update_response = wp_update_term( $menu_id, 'nav_menu', $args );	if ( is_wp_error( $update_response ) )		return $update_response;	do_action( 'wp_update_nav_menu', $menu_id, $menu_data );	return $menu_id;}/** * Save the properties of a menu item or create a new one. * * @since 3.0.0 * * @param int $menu_id The ID of the menu. Required. If "0", makes the menu item a draft orphan. * @param int $menu_item_db_id The ID of the menu item. If "0", creates a new menu item. * @param array $menu_item_data The menu item's data. * @return int The menu item's database ID or WP_Error object on failure. */function wp_update_nav_menu_item( $menu_id = 0, $menu_item_db_id = 0, $menu_item_data = array() ) {	$menu_id = (int) $menu_id;	$menu_item_db_id = (int) $menu_item_db_id;	// make sure that we don't convert non-nav_menu_item objects into nav_menu_item objects	if ( ! empty( $menu_item_db_id ) && ! is_nav_menu_item( $menu_item_db_id ) )		return new WP_Error('update_nav_menu_item_failed', __('The given object ID is not that of a menu item.'));	$menu = wp_get_nav_menu_object( $menu_id );	if ( ( ! $menu && 0 !== $menu_id ) || is_wp_error( $menu ) )		return $menu;	$menu_items = 0 == $menu_id ? array() : (array) wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );	$count = count( $menu_items );	$defaults = array(		'menu-item-db-id' => $menu_item_db_id,		'menu-item-object-id' => 0,		'menu-item-object' => '',		'menu-item-parent-id' => 0,		'menu-item-position' => 0,		'menu-item-type' => 'custom',		'menu-item-title' => '',		'menu-item-url' => '',		'menu-item-description' => '',		'menu-item-attr-title' => '',		'menu-item-target' => '',		'menu-item-classes' => '',		'menu-item-xfn' => '',		'menu-item-status' => '',	);	$args = wp_parse_args( $menu_item_data, $defaults );	if ( 0 == $menu_id ) {		$args['menu-item-position'] = 1;	} elseif ( 0 == (int) $args['menu-item-position'] ) {		$last_item = array_pop( $menu_items );		$args['menu-item-position'] = ( $last_item && isset( $last_item->menu_order ) ) ? 1 + $last_item->menu_order : $count;	}	$original_parent = 0 < $menu_item_db_id ? get_post_field( 'post_parent', $menu_item_db_id ) : 0;	if ( 'custom' != $args['menu-item-type'] ) {		/* if non-custom menu item, then:			* use original object's URL			* blank default title to sync with original object's		*/		$args['menu-item-url'] = '';		$original_title = '';		if ( 'taxonomy' == $args['menu-item-type'] ) {			$original_parent = get_term_field( 'parent', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );			$original_title = get_term_field( 'name', $args['menu-item-object-id'], $args['menu-item-object'], 'raw' );		} elseif ( 'post_type' == $args['menu-item-type'] ) {			$original_object = get_post( $args['menu-item-object-id'] );			$original_parent = (int) $original_object->post_parent;			$original_title = $original_object->post_title;		}		if ( empty( $args['menu-item-title'] ) || $args['menu-item-title'] == $original_title ) {			$args['menu-item-title'] = '';			// hack to get wp to create a post object when too many properties are empty			if ( empty( $args['menu-item-description'] ) )				$args['menu-item-description'] = ' ';		}	}	// Populate the menu item object	$post = array(		'menu_order' => $args['menu-item-position'],		'ping_status' => 0,		'post_content' => $args['menu-item-description'],		'post_excerpt' => $args['menu-item-attr-title'],		'post_parent' => $original_parent,		'post_title' => $args['menu-item-title'],		'post_type' => 'nav_menu_item',	);	if ( 0 != $menu_id )		$post['tax_input'] = array( 'nav_menu' => array( intval( $menu->term_id ) ) );	// New menu item. Default is draft status	if ( 0 == $menu_item_db_id ) {		$post['ID'] = 0;		$post['post_status'] = 'publish' == $args['menu-item-status'] ? 'publish' : 'draft';		$menu_item_db_id = wp_insert_post( $post );	// Update existing menu item. Default is publish status	} else {		$post['ID'] = $menu_item_db_id;		$post['post_status'] = 'draft' == $args['menu-item-status'] ? 'draft' : 'publish';		wp_update_post( $post );	}	if ( 'custom' == $args['menu-item-type'] ) {		$args['menu-item-object-id'] = $menu_item_db_id;		$args['menu-item-object'] = 'custom';	}	if ( ! $menu_item_db_id || is_wp_error( $menu_item_db_id ) )		return $menu_item_db_id;	$menu_item_db_id = (int) $menu_item_db_id;	update_post_meta( $menu_item_db_id, '_menu_item_type', sanitize_key($args['menu-item-type']) );	update_post_meta( $menu_item_db_id, '_menu_item_menu_item_parent', (int) $args['menu-item-parent-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object_id', (int) $args['menu-item-object-id'] );	update_post_meta( $menu_item_db_id, '_menu_item_object', sanitize_key($args['menu-item-object']) );	update_post_meta( $menu_item_db_id, '_menu_item_target', sanitize_key($args['menu-item-target']) );	$args['menu-item-classes'] = array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-classes'] ) );	$args['menu-item-xfn'] = implode( ' ', array_map( 'sanitize_html_class', explode( ' ', $args['menu-item-xfn'] ) ) );	update_post_meta( $menu_item_db_id, '_menu_item_classes', $args['menu-item-classes'] );	update_post_meta( $menu_item_db_id, '_menu_item_xfn', $args['menu-item-xfn'] );	update_post_meta( $menu_item_db_id, '_menu_item_url', esc_url_raw($args['menu-item-url']) );	if ( 0 == $menu_id )		update_post_meta( $menu_item_db_id, '_menu_item_orphaned', time() );	else		delete_post_meta( $menu_item_db_id, '_menu_item_orphaned' );	do_action('wp_update_nav_menu_item', $menu_id, $menu_item_db_id, $args );	return $menu_item_db_id;}/** * Returns all navigation menu objects. * * @since 3.0.0 * * @param $args array Array of arguments passed on to get_terms(). * @return array menu objects */function wp_get_nav_menus( $args = array() ) {	$defaults = array( 'hide_empty' => false, 'orderby' => 'none' );	$args = wp_parse_args( $args, $defaults );	return apply_filters( 'wp_get_nav_menus', get_terms( 'nav_menu',  $args), $args );}/** * Sort menu items by the desired key. * * @since 3.0.0 * @access private * * @param object $a The first object to compare * @param object $b The second object to compare * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b. */function _sort_nav_menu_items( $a, $b ) {	global $_menu_item_sort_prop;	if ( empty( $_menu_item_sort_prop ) )		return 0;	if ( ! isset( $a->$_menu_item_sort_prop ) || ! isset( $b->$_menu_item_sort_prop ) )		return 0;	$_a = (int) $a->$_menu_item_sort_prop;	$_b = (int) $b->$_menu_item_sort_prop;	if ( $a->$_menu_item_sort_prop == $b->$_menu_item_sort_prop )		return 0;	elseif ( $_a == $a->$_menu_item_sort_prop && $_b == $b->$_menu_item_sort_prop )		return $_a < $_b ? -1 : 1;	else		return strcmp( $a->$_menu_item_sort_prop, $b->$_menu_item_sort_prop );}/** * Returns all menu items of a navigation menu. * * @since 3.0.0 * * @param string $menu menu name, id, or slug * @param string $args * @return mixed $items array of menu items, else false. */function wp_get_nav_menu_items( $menu, $args = array() ) {	global $_wp_using_ext_object_cache;	$menu = wp_get_nav_menu_object( $menu );	if ( ! $menu )		return false;	static $fetched = array();	$items = get_objects_in_term( $menu->term_id, 'nav_menu' );	if ( empty( $items ) )		return $items;	$defaults = array( 'order' => 'ASC', 'orderby' => 'menu_order', 'post_type' => 'nav_menu_item',		'post_status' => 'publish', 'output' => ARRAY_A, 'output_key' => 'menu_order', 'nopaging' => true,		'update_post_term_cache' => false );	$args = wp_parse_args( $args, $defaults );	if ( count( $items ) > 1 )		$args['include'] = implode( ',', $items );	else		$args['include'] = $items[0];	$items = get_posts( $args );	if ( is_wp_error( $items ) || ! is_array( $items ) )		return false;	// Get all posts and terms at once to prime the caches	if ( empty( $fetched[$menu->term_id] ) || $_wp_using_ext_object_cache ) {		$fetched[$menu->term_id] = true;		$posts = array();		$terms = array();		foreach ( $items as $item ) {			$object_id = get_post_meta( $item->ID, '_menu_item_object_id', true );			$object    = get_post_meta( $item->ID, '_menu_item_object',    true );			$type      = get_post_meta( $item->ID, '_menu_item_type',      true );			if ( 'post_type' == $type )				$posts[$object][] = $object_id;			elseif ( 'taxonomy' == $type)				$terms[$object][] = $object_id;		}		if ( ! empty( $posts ) ) {			foreach ( array_keys($posts) as $post_type ) {				get_posts( array('post__in' => $posts[$post_type], 'post_type' => $post_type, 'nopaging' => true, 'update_post_term_cache' => false) );			}		}		unset($posts);		if ( ! empty( $terms ) ) {			foreach ( array_keys($terms) as $taxonomy ) {				get_terms($taxonomy, array('include' => $terms[$taxonomy]) );			}		}		unset($terms);	}	$items = array_map( 'wp_setup_nav_menu_item', $items );	if ( ARRAY_A == $args['output'] ) {		$GLOBALS['_menu_item_sort_prop'] = $args['output_key'];		usort($items, '_sort_nav_menu_items');		$i = 1;		foreach( $items as $k => $item ) {			$items[$k]->$args['output_key'] = $i++;		}	}	return apply_filters( 'wp_get_nav_menu_items',  $items, $menu, $args );}/** * Decorates a menu item object with the shared navigation menu item properties. * * Properties: * - db_id: 		The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist). * - object_id:		The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. * - type:		The family of objects originally represented, such as "post_type" or "taxonomy." * - object:		The type of object originally represented, such as "category," "post", or "attachment." * - type_label:	The singular label used to describe this type of menu item. * - post_parent:	The DB ID of the original object's parent object, if any (0 otherwise). * - menu_item_parent: 	The DB ID of the nav_menu_item that is this item's menu parent, if any.  0 otherwise. * - url:		The URL to which this menu item points. * - title:		The title of this menu item. * - target: 		The target attribute of the link element for this menu item. * - attr_title:	The title attribute of the link element for this menu item. * - classes:		The array of class attribute values for the link element of this menu item. * - xfn:		The XFN relationship expressed in the link of this menu item. * - description:	The description of this menu item. * * @since 3.0.0 * * @param object $menu_item The menu item to modify. * @return object $menu_item The menu item with standard menu item properties. */function wp_setup_nav_menu_item( $menu_item ) {	if ( isset( $menu_item->post_type ) ) {		if ( 'nav_menu_item' == $menu_item->post_type ) {			$menu_item->db_id = (int) $menu_item->ID;			$menu_item->menu_item_parent = empty( $menu_item->menu_item_parent ) ? get_post_meta( $menu_item->ID, '_menu_item_menu_item_parent', true ) : $menu_item->menu_item_parent;			$menu_item->object_id = empty( $menu_item->object_id ) ? get_post_meta( $menu_item->ID, '_menu_item_object_id', true ) : $menu_item->object_id;			$menu_item->object = empty( $menu_item->object ) ? get_post_meta( $menu_item->ID, '_menu_item_object', true ) : $menu_item->object;			$menu_item->type = empty( $menu_item->type ) ? get_post_meta( $menu_item->ID, '_menu_item_type', true ) : $menu_item->type;			if ( 'post_type' == $menu_item->type ) {				$object = get_post_type_object( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$menu_item->url = get_permalink( $menu_item->object_id );				$original_object = get_post( $menu_item->object_id );				$original_title = $original_object->post_title;				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} elseif ( 'taxonomy' == $menu_item->type ) {				$object = get_taxonomy( $menu_item->object );				$menu_item->type_label = $object->labels->singular_name;				$term_url = get_term_link( (int) $menu_item->object_id, $menu_item->object );				$menu_item->url = !is_wp_error( $term_url ) ? $term_url : '';				$original_title = get_term_field( 'name', $menu_item->object_id, $menu_item->object, 'raw' );				$menu_item->title = '' == $menu_item->post_title ? $original_title : $menu_item->post_title;			} else {				$menu_item->type_label = __('Custom');				$menu_item->title = $menu_item->post_title;				$menu_item->url = empty( $menu_item->url ) ? get_post_meta( $menu_item->ID, '_menu_item_url', true ) : $menu_item->url;			}			$menu_item->target = empty( $menu_item->target ) ? get_post_meta( $menu_item->ID, '_menu_item_target', true ) : $menu_item->target;			$menu_item->attr_title = empty( $menu_item->attr_title ) ? apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt ) : $menu_item->attr_title;			$menu_item->description = empty( $menu_item->description ) ? apply_filters( 'nav_menu_description', $menu_item->post_content ) : $menu_item->description;			$menu_item->classes = empty( $menu_item->classes ) ? (array) get_post_meta( $menu_item->ID, '_menu_item_classes', true ) : $menu_item->classes;			$menu_item->xfn = empty( $menu_item->xfn ) ? get_post_meta( $menu_item->ID, '_menu_item_xfn', true ) : $menu_item->xfn;		} else {			$menu_item->db_id = 0;			$menu_item->menu_item_parent = 0;			$menu_item->object_id = (int) $menu_item->ID;			$menu_item->type = 'post_type';			$object = get_post_type_object( $menu_item->post_type );			$menu_item->object = $object->name;			$menu_item->type_label = $object->labels->singular_name;			$menu_item->title = $menu_item->post_title;			$menu_item->url = get_permalink( $menu_item->ID );			$menu_item->target = '';			$menu_item->attr_title = apply_filters( 'nav_menu_attr_title', $menu_item->post_excerpt );			$menu_item->description = apply_filters( 'nav_menu_description', $menu_item->post_content );			$menu_item->classes = array();			$menu_item->xfn = '';		}	} elseif ( isset( $menu_item->taxonomy ) ) {		$menu_item->ID = $menu_item->term_id;		$menu_item->db_id = 0;		$menu_item->menu_item_parent = 0;		$menu_item->object_id = (int) $menu_item->term_id;		$menu_item->post_parent = (int) $menu_item->parent;		$menu_item->type = 'taxonomy';		$object = get_taxonomy( $menu_item->taxonomy );		$menu_item->object = $object->name;		$menu_item->type_label = $object->labels->singular_name;		$menu_item->title = $menu_item->name;		$menu_item->url = get_term_link( $menu_item, $menu_item->taxonomy );		$menu_item->target = '';		$menu_item->attr_title = '';		$menu_item->description = get_term_field( 'description', $menu_item->term_id, $menu_item->taxonomy );		$menu_item->classes = array();		$menu_item->xfn = '';	}	return apply_filters( 'wp_setup_nav_menu_item', $menu_item );}/** * Get the menu items associated with a particular object. * * @since 3.0.0 * * @param int $object_id The ID of the original object. * @param string $object_type The type of object, such as "taxonomy" or "post_type." * @return array The array of menu item IDs; empty array if none; */function wp_get_associated_nav_menu_items( $object_id = 0, $object_type = 'post_type' ) {	$object_id = (int) $object_id;	$menu_item_ids = array();	$query = new WP_Query;	$menu_items = $query->query(		array(			'meta_key' => '_menu_item_object_id',			'meta_value' => $object_id,			'post_status' => 'any',			'post_type' => 'nav_menu_item',			'showposts' => -1,		)	);	foreach( (array) $menu_items as $menu_item ) {		if ( isset( $menu_item->ID ) && is_nav_menu_item( $menu_item->ID ) ) {			if ( get_post_meta( $menu_item->ID, '_menu_item_type', true ) != $object_type )				continue;			$menu_item_ids[] = (int) $menu_item->ID;		}	}	return array_unique( $menu_item_ids );}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_post_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'post_type' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Callback for handling a menu item when its original object is deleted. * * @since 3.0.0 * @access private * * @param int $object_id The ID of the original object being trashed. * */function _wp_delete_tax_menu_item( $object_id = 0 ) {	$object_id = (int) $object_id;	$menu_item_ids = wp_get_associated_nav_menu_items( $object_id, 'taxonomy' );	foreach( (array) $menu_item_ids as $menu_item_id ) {		wp_delete_post( $menu_item_id, true );	}}/** * Automatically add newly published page objects to menus with that as an option. * * @since 3.0.0 * @access private * * @param string $new_status The new status of the post object. * @param string $old_status The old status of the post object. * @param object $post The post object being transitioned from one status to another. * @return void */function _wp_auto_add_pages_to_menu( $new_status, $old_status, $post ) {	if ( 'publish' != $new_status || 'publish' == $old_status || 'page' != $post->post_type )		return;	if ( ! empty( $post->post_parent ) )		return;	$auto_add = get_option( 'nav_menu_options' );	if ( empty( $auto_add ) || ! is_array( $auto_add ) || ! isset( $auto_add['auto_add'] ) )		return;	$auto_add = $auto_add['auto_add'];	if ( empty( $auto_add ) || ! is_array( $auto_add ) )		return;	$args = array(		'menu-item-object-id' => $post->ID,		'menu-item-object' => $post->post_type,		'menu-item-type' => 'post_type',		'menu-item-status' => 'publish',	);	foreach ( $auto_add as $menu_id ) {		$items = wp_get_nav_menu_items( $menu_id, array( 'post_status' => 'publish,draft' ) );		if ( ! is_array( $items ) )			continue;		foreach ( $items as $item ) {			if ( $post->ID == $item->object_id )				continue 2;		}		wp_update_nav_menu_item( $menu_id, 0, $args );	}}?>
<?php/** * Simple and uniform HTTP request API. * * Will eventually replace and standardize the WordPress HTTP requests made. * * @link http://trac.wordpress.org/ticket/4779 HTTP API Proposal * * @package WordPress * @subpackage HTTP * @since 2.7.0 *//** * Returns the initialized WP_Http Object * * @since 2.7.0 * @access private * * @return WP_Http HTTP Transport object. */function &_wp_http_get_object() {	static $http;	if ( is_null($http) )		$http = new WP_Http();	return $http;}/** * Retrieve the raw response from the HTTP request. * * The array structure is a little complex. * * <code> * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) ); * </code> * * All of the headers in $res['headers'] are with the name as the key and the * value as the value. So to get the User-Agent, you would do the following. * * <code> * $user_agent = $res['headers']['user-agent']; * </code> * * The body is the raw response content and can be retrieved from $res['body']. * * This function is called first to make the request and there are other API * functions to abstract out the above convoluted setup. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_request($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->request($url, $args);}/** * Retrieve the raw response from the HTTP request using the GET method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_get($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->get($url, $args);}/** * Retrieve the raw response from the HTTP request using the POST method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_post($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->post($url, $args);}/** * Retrieve the raw response from the HTTP request using the HEAD method. * * @see wp_remote_request() For more information on the response array format. * * @since 2.7.0 * * @param string $url Site URL to retrieve. * @param array $args Optional. Override the defaults. * @return WP_Error|array The response or WP_Error on failure. */function wp_remote_head($url, $args = array()) {	$objFetchSite = _wp_http_get_object();	return $objFetchSite->head($url, $args);}/** * Retrieve only the headers from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return array The headers of the response. Empty array if incorrect parameter given. */function wp_remote_retrieve_headers(&$response) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return array();	return $response['headers'];}/** * Retrieve a single header by name from the raw response. * * @since 2.7.0 * * @param array $response * @param string $header Header name to retrieve value from. * @return string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. */function wp_remote_retrieve_header(&$response, $header) {	if ( is_wp_error($response) || ! isset($response['headers']) || ! is_array($response['headers']))		return '';	if ( array_key_exists($header, $response['headers']) )		return $response['headers'][$header];	return '';}/** * Retrieve only the response code from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string the response code. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_code(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['code'];}/** * Retrieve only the response message from the raw response. * * Will return an empty array if incorrect parameter value is given. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The response message. Empty string on incorrect parameter given. */function wp_remote_retrieve_response_message(&$response) {	if ( is_wp_error($response) || ! isset($response['response']) || ! is_array($response['response']))		return '';	return $response['response']['message'];}/** * Retrieve only the body from the raw response. * * @since 2.7.0 * * @param array $response HTTP response. * @return string The body of the response. Empty string if no body or incorrect parameter given. */function wp_remote_retrieve_body(&$response) {	if ( is_wp_error($response) || ! isset($response['body']) )		return '';	return $response['body'];}?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * RSS2 Feed Template for displaying RSS2 Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('rss-http') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><rss version="2.0"	xmlns:content="http://purl.org/rss/1.0/modules/content/"	xmlns:wfw="http://wellformedweb.org/CommentAPI/"	xmlns:dc="http://purl.org/dc/elements/1.1/"	xmlns:atom="http://www.w3.org/2005/Atom"	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"	<?php do_action('rss2_ns'); ?>><channel>	<title><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<atom:link href="<?php self_link(); ?>" rel="self" type="application/rss+xml" />	<link><?php bloginfo_rss('url') ?></link>	<description><?php bloginfo_rss("description") ?></description>	<lastBuildDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false); ?></lastBuildDate>	<language><?php echo get_option('rss_language'); ?></language>	<sy:updatePeriod><?php echo apply_filters( 'rss_update_period', 'hourly' ); ?></sy:updatePeriod>	<sy:updateFrequency><?php echo apply_filters( 'rss_update_frequency', '1' ); ?></sy:updateFrequency>	<?php do_action('rss2_head'); ?>	<?php while( have_posts()) : the_post(); ?>	<item>		<title><?php the_title_rss() ?></title>		<link><?php the_permalink_rss() ?></link>		<comments><?php comments_link_feed(); ?></comments>		<pubDate><?php echo mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false); ?></pubDate>		<dc:creator><?php the_author() ?></dc:creator>		<?php the_category_rss() ?>		<guid isPermaLink="false"><?php the_guid(); ?></guid><?php if (get_option('rss_use_excerpt')) : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description><?php else : ?>		<description><![CDATA[<?php the_excerpt_rss() ?>]]></description>	<?php if ( strlen( $post->post_content ) > 0 ) : ?>		<content:encoded><![CDATA[<?php the_content_feed('rss2') ?>]]></content:encoded>	<?php else : ?>		<content:encoded><![CDATA[<?php the_excerpt_rss() ?>]]></content:encoded>	<?php endif; ?><?php endif; ?>		<wfw:commentRss><?php echo esc_url( get_post_comments_feed_link(null, 'rss2') ); ?></wfw:commentRss>		<slash:comments><?php echo get_comments_number(); ?></slash:comments><?php rss_enclosure(); ?>	<?php do_action('rss2_item'); ?>	</item>	<?php endwhile; ?></channel></rss>
<?php/** * Atom Syndication Format PHP Library * * @package AtomLib * @link http://code.google.com/p/phpatomlib/ * * @author Elias Torres <elias@torrez.us> * @version 0.4 * @since 2.3 *//** * Structure that store common Atom Feed Properties * * @package AtomLib */class AtomFeed {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array     * @access public     */    var $categories = array();	/**	 * Stores Entries	 *	 * @var array	 * @access public	 */    var $entries = array();}/** * Structure that store Atom Entry Properties * * @package AtomLib */class AtomEntry {	/**	 * Stores Links	 * @var array	 * @access public	 */    var $links = array();    /**     * Stores Categories     * @var array	 * @access public     */    var $categories = array();}/** * AtomLib Atom Parser API * * @package AtomLib */class AtomParser {    var $NS = 'http://www.w3.org/2005/Atom';    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');    var $debug = false;    var $depth = 0;    var $indent = 2;    var $in_content;    var $ns_contexts = array();    var $ns_decls = array();    var $content_ns_decls = array();    var $content_ns_contexts = array();    var $is_xhtml = false;    var $is_html = false;    var $is_text = true;    var $skipped_div = false;    var $FILE = "php://input";    var $feed;    var $current;    function AtomParser() {        $this->feed = new AtomFeed();        $this->current = null;        $this->map_attrs_func = create_function('$k,$v', 'return "$k=\"$v\"";');        $this->map_xmlns_func = create_function('$p,$n', '$xd = "xmlns"; if(strlen($n[0])>0) $xd .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');    }    function _p($msg) {        if($this->debug) {            print str_repeat(" ", $this->depth * $this->indent) . $msg ."\n";        }    }    function error_handler($log_level, $log_text, $error_file, $error_line) {        $this->error = $log_text;    }    function parse() {        set_error_handler(array(&$this, 'error_handler'));        array_unshift($this->ns_contexts, array());        $parser = xml_parser_create_ns();        xml_set_object($parser, $this);        xml_set_element_handler($parser, "start_element", "end_element");        xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);        xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,0);        xml_set_character_data_handler($parser, "cdata");        xml_set_default_handler($parser, "_default");        xml_set_start_namespace_decl_handler($parser, "start_ns");        xml_set_end_namespace_decl_handler($parser, "end_ns");        $this->content = '';        $ret = true;        $fp = fopen($this->FILE, "r");        while ($data = fread($fp, 4096)) {            if($this->debug) $this->content .= $data;            if(!xml_parse($parser, $data, feof($fp))) {                trigger_error(sprintf(__('XML error: %s at line %d')."\n",                    xml_error_string(xml_get_error_code($xml_parser)),                    xml_get_current_line_number($xml_parser)));                $ret = false;                break;            }        }        fclose($fp);        xml_parser_free($parser);        restore_error_handler();        return $ret;    }    function start_element($parser, $name, $attrs) {        $tag = array_pop(split(":", $name));        switch($name) {            case $this->NS . ':feed':                $this->current = $this->feed;                break;            case $this->NS . ':entry':                $this->current = new AtomEntry();                break;        };        $this->_p("start_element('$name')");        #$this->_p(print_r($this->ns_contexts,true));        #$this->_p('current(' . $this->current . ')');        array_unshift($this->ns_contexts, $this->ns_decls);        $this->depth++;        if(!empty($this->in_content)) {            $this->content_ns_decls = array();            if($this->is_html || $this->is_text)                trigger_error("Invalid content in element found. Content must not be of type text or html if it contains markup.");            $attrs_prefix = array();            // resolve prefixes for attributes            foreach($attrs as $key => $value) {                $with_prefix = $this->ns_to_prefix($key, true);                $attrs_prefix[$with_prefix[1]] = $this->xml_escape($value);            }            $attrs_str = join(' ', array_map($this->map_attrs_func, array_keys($attrs_prefix), array_values($attrs_prefix)));            if(strlen($attrs_str) > 0) {                $attrs_str = " " . $attrs_str;            }            $with_prefix = $this->ns_to_prefix($name);            if(!$this->is_declared_content_ns($with_prefix[0])) {                array_push($this->content_ns_decls, $with_prefix[0]);            }            $xmlns_str = '';            if(count($this->content_ns_decls) > 0) {                array_unshift($this->content_ns_contexts, $this->content_ns_decls);                $xmlns_str .= join(' ', array_map($this->map_xmlns_func, array_keys($this->content_ns_contexts[0]), array_values($this->content_ns_contexts[0])));                if(strlen($xmlns_str) > 0) {                    $xmlns_str = " " . $xmlns_str;                }            }            array_push($this->in_content, array($tag, $this->depth, "<". $with_prefix[1] ."{$xmlns_str}{$attrs_str}" . ">"));        } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {            $this->in_content = array();            $this->is_xhtml = $attrs['type'] == 'xhtml';            $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';            $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';            $type = $this->is_xhtml ? 'XHTML' : ($this->is_html ? 'HTML' : ($this->is_text ? 'TEXT' : $attrs['type']));            if(in_array('src',array_keys($attrs))) {                $this->current->$tag = $attrs;            } else {                array_push($this->in_content, array($tag,$this->depth, $type));            }        } else if($tag == 'link') {            array_push($this->current->links, $attrs);        } else if($tag == 'category') {            array_push($this->current->categories, $attrs);        }        $this->ns_decls = array();    }    function end_element($parser, $name) {        $tag = array_pop(split(":", $name));        $ccount = count($this->in_content);        # if we are *in* content, then let's proceed to serialize it        if(!empty($this->in_content)) {            # if we are ending the original content element            # then let's finalize the content            if($this->in_content[0][0] == $tag &&                $this->in_content[0][1] == $this->depth) {                $origtype = $this->in_content[0][2];                array_shift($this->in_content);                $newcontent = array();                foreach($this->in_content as $c) {                    if(count($c) == 3) {                        array_push($newcontent, $c[2]);                    } else {                        if($this->is_xhtml || $this->is_text) {                            array_push($newcontent, $this->xml_escape($c));                        } else {                            array_push($newcontent, $c);                        }                    }                }                if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {                    $this->current->$tag = array($origtype, join('',$newcontent));                } else {                    $this->current->$tag = join('',$newcontent);                }                $this->in_content = array();            } else if($this->in_content[$ccount-1][0] == $tag &&                $this->in_content[$ccount-1][1] == $this->depth) {                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . "/>";            } else {                # else, just finalize the current element's content                $endtag = $this->ns_to_prefix($name);                array_push($this->in_content, array($tag, $this->depth, "</$endtag[1]>"));            }        }        array_shift($this->ns_contexts);        $this->depth--;        if($name == ($this->NS . ':entry')) {            array_push($this->feed->entries, $this->current);            $this->current = null;        }        $this->_p("end_element('$name')");    }    function start_ns($parser, $prefix, $uri) {        $this->_p("starting: " . $prefix . ":" . $uri);        array_push($this->ns_decls, array($prefix,$uri));    }    function end_ns($parser, $prefix) {        $this->_p("ending: #" . $prefix . "#");    }    function cdata($parser, $data) {        $this->_p("data: #" . str_replace(array("\n"), array("\\n"), trim($data)) . "#");        if(!empty($this->in_content)) {            array_push($this->in_content, $data);        }    }    function _default($parser, $data) {        # when does this gets called?    }    function ns_to_prefix($qname, $attr=false) {        # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')        $components = split(":", $qname);        # grab the last one (e.g 'div')        $name = array_pop($components);        if(!empty($components)) {            # re-join back the namespace component            $ns = join(":",$components);            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {                        return array($mapping, "$mapping[0]:$name");                    }                }            }        }        if($attr) {            return array(null, $name);        } else {            foreach($this->ns_contexts as $context) {                foreach($context as $mapping) {                    if(strlen($mapping[0]) == 0) {                        return array($mapping, $name);                    }                }            }        }    }    function is_declared_content_ns($new_mapping) {        foreach($this->content_ns_contexts as $context) {            foreach($context as $mapping) {                if($new_mapping == $mapping) {                    return true;                }            }        }        return false;    }    function xml_escape($string)    {             return str_replace(array('&','"',"'",'<','>'),                array('&amp;','&quot;','&apos;','&lt;','&gt;'),                $string );    }}?>
<?php/** * HTML/XHTML filter that only allows some elements and attributes * * Added wp_ prefix to avoid conflicts with existing kses users * * @version 0.2.2 * @copyright (C) 2002, 2003, 2005 * @author Ulf Harnhammar <metaur@users.sourceforge.net> * * @package External * @subpackage KSES * * @internal * *** CONTACT INFORMATION *** * E-mail:      metaur at users dot sourceforge dot net * Web page:    http://sourceforge.net/projects/kses * Paper mail:  Ulf Harnhammar *              Ymergatan 17 C *              753 25  Uppsala *              SWEDEN * * [kses strips evil scripts!] *//** * You can override this in a plugin. * * @since 1.2.0 */if ( ! defined( 'CUSTOM_TAGS' ) )	define( 'CUSTOM_TAGS', false );if ( ! CUSTOM_TAGS ) {	/**	 * Kses global for default allowable HTML tags.	 *	 * Can be override by using CUSTOM_TAGS constant.	 *	 * @global array $allowedposttags	 * @since 2.0.0	 */	$allowedposttags = array(		'address' => array(),		'a' => array(			'class' => array (),			'href' => array (),			'id' => array (),			'title' => array (),			'rel' => array (),			'rev' => array (),			'name' => array (),			'target' => array()),		'abbr' => array(			'class' => array (),			'title' => array ()),		'acronym' => array(			'title' => array ()),		'article' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'aside' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'b' => array(),		'big' => array(),		'blockquote' => array(			'id' => array (),			'cite' => array (),			'class' => array(),			'lang' => array(),			'xml:lang' => array()),		'br' => array (			'class' => array ()),		'button' => array(			'disabled' => array (),			'name' => array (),			'type' => array (),			'value' => array ()),		'caption' => array(			'align' => array (),			'class' => array ()),		'cite' => array (			'class' => array(),			'dir' => array(),			'lang' => array(),			'title' => array ()),		'code' => array (			'style' => array()),		'col' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'span' => array (),			'dir' => array(),			'style' => array (),			'valign' => array (),			'width' => array ()),		'del' => array(			'datetime' => array ()),		'dd' => array(),		'details' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'open' => array (),			'style' => array (),			'xml:lang' => array(),		),		'div' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'dl' => array(),		'dt' => array(),		'em' => array(),		'fieldset' => array(),		'figure' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'figcaption' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'font' => array(			'color' => array (),			'face' => array (),			'size' => array ()),		'footer' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'form' => array(			'action' => array (),			'accept' => array (),			'accept-charset' => array (),			'enctype' => array (),			'method' => array (),			'name' => array (),			'target' => array ()),		'h1' => array(			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h2' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h3' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h4' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h5' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h6' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'header' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hgroup' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hr' => array (			'align' => array (),			'class' => array (),			'noshade' => array (),			'size' => array (),			'width' => array ()),		'i' => array(),		'img' => array(			'alt' => array (),			'align' => array (),			'border' => array (),			'class' => array (),			'height' => array (),			'hspace' => array (),			'longdesc' => array (),			'vspace' => array (),			'src' => array (),			'style' => array (),			'width' => array ()),		'ins' => array(			'datetime' => array (),			'cite' => array ()),		'kbd' => array(),		'label' => array(			'for' => array ()),		'legend' => array(			'align' => array ()),		'li' => array (			'align' => array (),			'class' => array ()),		'menu' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'nav' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'p' => array(			'class' => array (),			'align' => array (),			'dir' => array(),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'pre' => array(			'style' => array(),			'width' => array ()),		'q' => array(			'cite' => array ()),		's' => array(),		'span' => array (			'class' => array (),			'dir' => array (),			'align' => array (),			'lang' => array (),			'style' => array (),			'title' => array (),			'xml:lang' => array()),		'section' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'strike' => array(),		'strong' => array(),		'sub' => array(),		'summary' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'sup' => array(),		'table' => array(			'align' => array (),			'bgcolor' => array (),			'border' => array (),			'cellpadding' => array (),			'cellspacing' => array (),			'class' => array (),			'dir' => array(),			'id' => array(),			'rules' => array (),			'style' => array (),			'summary' => array (),			'width' => array ()),		'tbody' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'valign' => array ()),		'td' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'dir' => array(),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'style' => array (),			'valign' => array (),			'width' => array ()),		'textarea' => array(			'cols' => array (),			'rows' => array (),			'disabled' => array (),			'name' => array (),			'readonly' => array ()),		'tfoot' => array(			'align' => array (),			'char' => array (),			'class' => array (),			'charoff' => array (),			'valign' => array ()),		'th' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'valign' => array (),			'width' => array ()),		'thead' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'valign' => array ()),		'title' => array(),		'tr' => array(			'align' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'style' => array (),			'valign' => array ()),		'tt' => array(),		'u' => array(),		'ul' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'ol' => array (			'class' => array (),			'start' => array (),			'style' => array (),			'type' => array ()),		'var' => array ());	/**	 * Kses allowed HTML elements.	 *	 * @global array $allowedtags	 * @since 1.0.0	 */	$allowedtags = array(		'a' => array(			'href' => array (),			'title' => array ()),		'abbr' => array(			'title' => array ()),		'acronym' => array(			'title' => array ()),		'b' => array(),		'blockquote' => array(			'cite' => array ()),		//	'br' => array(),		'cite' => array (),		'code' => array(),		'del' => array(			'datetime' => array ()),		//	'dd' => array(),		//	'dl' => array(),		//	'dt' => array(),		'em' => array (), 'i' => array (),		//	'ins' => array('datetime' => array(), 'cite' => array()),		//	'li' => array(),		//	'ol' => array(),		//	'p' => array(),		'q' => array(			'cite' => array ()),		'strike' => array(),		'strong' => array(),		//	'sub' => array(),		//	'sup' => array(),		//	'u' => array(),		//	'ul' => array(),	);	$allowedentitynames = array(		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',		'alefsym', 'larr',   'uarr',    'rarr',   'darr',   'harr',		'crarr',   'lArr',   'uArr',    'rArr',   'dArr',   'hArr',		'forall',  'part',   'exist',   'empty',  'nabla',  'isin',		'notin',   'ni',     'prod',    'sum',    'minus',  'lowast',		'radic',   'prop',   'infin',   'ang',    'and',    'or',		'cap',     'cup',    'int',     'sim',    'cong',   'asymp',		'ne',      'equiv',  'le',      'ge',     'sub',    'sup',		'nsub',    'sube',   'supe',    'oplus',  'otimes', 'perp',		'sdot',    'lceil',  'rceil',   'lfloor', 'rfloor', 'lang',		'rang',    'loz',    'spades',  'clubs',  'hearts', 'diams',	);}/** * Filters content and keeps only allowable HTML elements. * * This function makes sure that only the allowed HTML element names, attribute * names and attribute values plus only sane HTML entities will occur in * $string. You have to remove any slashes from PHP's magic quotes before you * call this function. * * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news', * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This * covers all common link protocols, except for 'javascript' which should not * be allowed for untrusted users. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Optional. Allowed protocol in links. * @return string Filtered content with only allowed HTML elements */function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {	$allowed_protocols = wp_parse_args( $allowed_protocols, apply_filters('kses_allowed_protocols', array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn') ));	$string = wp_kses_no_null($string);	$string = wp_kses_js_entities($string);	$string = wp_kses_normalize_entities($string);	$allowed_html_fixed = wp_kses_array_lc($allowed_html);	$string = wp_kses_hook($string, $allowed_html_fixed, $allowed_protocols); // WP changed the order of these funcs and added args to wp_kses_hook	return wp_kses_split($string, $allowed_html_fixed, $allowed_protocols);}/** * You add any kses hooks here. * * There is currently only one kses WordPress hook and it is called here. All * parameters are passed to the hooks and expected to recieve a string. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Allowed protocol in links * @return string Filtered content through 'pre_kses' hook */function wp_kses_hook($string, $allowed_html, $allowed_protocols) {	$string = apply_filters('pre_kses', $string, $allowed_html, $allowed_protocols);	return $string;}/** * This function returns kses' version number. * * @since 1.0.0 * * @return string KSES Version Number */function wp_kses_version() {	return '0.2.2';}/** * Searches for HTML tags, no matter how malformed. * * It also matches stray ">" characters. * * @since 1.0.0 * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Content with fixed HTML tags */function wp_kses_split($string, $allowed_html, $allowed_protocols) {	global $pass_allowed_html, $pass_allowed_protocols;	$pass_allowed_html = $allowed_html;	$pass_allowed_protocols = $allowed_protocols;	return preg_replace_callback('%((<!--.*?(-->|$))|(<[^>]*(>|$)|>))%',		create_function('$match', 'global $pass_allowed_html, $pass_allowed_protocols; return wp_kses_split2($match[1], $pass_allowed_html, $pass_allowed_protocols);'), $string);}/** * Callback for wp_kses_split for fixing malformed HTML tags. * * This function does a lot of work. It rejects some very malformed things like * <:::>. It returns an empty string, if the element isn't allowed (look ma, no * strip_tags()!). Otherwise it splits the tag into an element and an attribute * list. * * After the tag is split into an element and an attribute list, it is run * through another filter which will remove illegal attributes and once that is * completed, will be returned. * * @access private * @since 1.0.0 * @uses wp_kses_attr() * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Fixed HTML element */function wp_kses_split2($string, $allowed_html, $allowed_protocols) {	$string = wp_kses_stripslashes($string);	if (substr($string, 0, 1) != '<')		return '&gt;';	# It matched a ">" character	if (preg_match('%^<!--(.*?)(-->)?$%', $string, $matches)) {		$string = str_replace(array('<!--', '-->'), '', $matches[1]);		while ( $string != $newstring = wp_kses($string, $allowed_html, $allowed_protocols) )			$string = $newstring;		if ( $string == '' )			return '';		// prevent multiple dashes in comments		$string = preg_replace('/--+/', '-', $string);		// prevent three dashes closing a comment		$string = preg_replace('/-$/', '', $string);		return "<!--{$string}-->";	}	# Allow HTML comments	if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))		return '';	# It's seriously malformed	$slash = trim($matches[1]);	$elem = $matches[2];	$attrlist = $matches[3];	if (!@isset($allowed_html[strtolower($elem)]))		return '';	# They are using a not allowed HTML element	if ($slash != '')		return "<$slash$elem>";	# No attributes are allowed for closing elements	return wp_kses_attr("$slash$elem", $attrlist, $allowed_html, $allowed_protocols);}/** * Removes all attributes, if none are allowed for this element. * * If some are allowed it calls wp_kses_hair() to split them further, and then * it builds up new HTML code from the data that kses_hair() returns. It also * removes "<" and ">" characters, if there are any left. One more thing it does * is to check if the tag has a closing XHTML slash, and if it does, it puts one * in the returned code as well. * * @since 1.0.0 * * @param string $element HTML element/tag * @param string $attr HTML attributes from HTML element to closing HTML element tag * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Sanitized HTML element */function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {	# Is there a closing XHTML slash at the end of the attributes?	$xhtml_slash = '';	if (preg_match('%\s*/\s*$%', $attr))		$xhtml_slash = ' /';	# Are any attributes allowed at all for this element?	if (@ count($allowed_html[strtolower($element)]) == 0)		return "<$element$xhtml_slash>";	# Split it	$attrarr = wp_kses_hair($attr, $allowed_protocols);	# Go through $attrarr, and save the allowed attributes for this element	# in $attr2	$attr2 = '';	foreach ($attrarr as $arreach) {		if (!@ isset ($allowed_html[strtolower($element)][strtolower($arreach['name'])]))			continue; # the attribute is not allowed		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];		if ($current == '')			continue; # the attribute is not allowed		if (!is_array($current))			$attr2 .= ' '.$arreach['whole'];		# there are no checks		else {			# there are some checks			$ok = true;			foreach ($current as $currkey => $currval)				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {					$ok = false;					break;				}			if ( $arreach['name'] == 'style' ) {				$orig_value = $arreach['value'];				$value = safecss_filter_attr($orig_value);				if ( empty($value) )					continue;				$arreach['value'] = $value;				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);			}			if ($ok)				$attr2 .= ' '.$arreach['whole']; # it passed them		} # if !is_array($current)	} # foreach	# Remove any "<" or ">" characters	$attr2 = preg_replace('/[<>]/', '', $attr2);	return "<$element$attr2$xhtml_slash>";}/** * Builds an attribute list from string containing attributes. * * This function does a lot of work. It parses an attribute list into an array * with attribute data, and tries to do the right thing even if it gets weird * input. It will add quotes around attribute values that don't have any quotes * or apostrophes around them, to make it easier to produce HTML code that will * conform to W3C's HTML specification. It will also remove bad URL protocols * from attribute values.  It also reduces duplicate attributes by using the * attribute defined first (foo='bar' foo='baz' will result in foo='bar'). * * @since 1.0.0 * * @param string $attr Attribute list from HTML element to closing HTML element tag * @param array $allowed_protocols Allowed protocols to keep * @return array List of attributes after parsing */function wp_kses_hair($attr, $allowed_protocols) {	$attrarr = array ();	$mode = 0;	$attrname = '';	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');	# Loop through the whole attribute list	while (strlen($attr) != 0) {		$working = 0; # Was the last operation successful?		switch ($mode) {			case 0 : # attribute name, href for instance				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {					$attrname = $match[1];					$working = $mode = 1;					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);				}				break;			case 1 : # equals sign or valueless ("selected")				if (preg_match('/^\s*=\s*/', $attr)) # equals sign					{					$working = 1;					$mode = 2;					$attr = preg_replace('/^\s*=\s*/', '', $attr);					break;				}				if (preg_match('/^\s+/', $attr)) # valueless					{					$working = 1;					$mode = 0;					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');					}					$attr = preg_replace('/^\s+/', '', $attr);				}				break;			case 2 : # attribute value, a URL after href= for instance				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))					# "value"					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);					break;				}				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))					# 'value'					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname='$thisval'", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);					break;				}				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))					# value					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					# We add quotes to conform to W3C's HTML spec.					$working = 1;					$mode = 0;					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);				}				break;		} # switch		if ($working == 0) # not well formed, remove and try again		{			$attr = wp_kses_html_error($attr);			$mode = 0;		}	} # while	if ($mode == 1 && FALSE === array_key_exists($attrname, $attrarr))		# special case, for when the attribute list ends with a valueless		# attribute like "selected"		$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');	return $attrarr;}/** * Performs different checks for attribute values. * * The currently implemented checks are "maxlen", "minlen", "maxval", "minval" * and "valueless" with even more checks to come soon. * * @since 1.0.0 * * @param string $value Attribute value * @param string $vless Whether the value is valueless. Use 'y' or 'n' * @param string $checkname What $checkvalue is checking for. * @param mixed $checkvalue What constraint the value should pass * @return bool Whether check passes */function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {	$ok = true;	switch (strtolower($checkname)) {		case 'maxlen' :			# The maxlen check makes sure that the attribute value has a length not			# greater than the given value. This can be used to avoid Buffer Overflows			# in WWW clients and various Internet servers.			if (strlen($value) > $checkvalue)				$ok = false;			break;		case 'minlen' :			# The minlen check makes sure that the attribute value has a length not			# smaller than the given value.			if (strlen($value) < $checkvalue)				$ok = false;			break;		case 'maxval' :			# The maxval check does two things: it checks that the attribute value is			# an integer from 0 and up, without an excessive amount of zeroes or			# whitespace (to avoid Buffer Overflows). It also checks that the attribute			# value is not greater than the given value.			# This check can be used to avoid Denial of Service attacks.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value > $checkvalue)				$ok = false;			break;		case 'minval' :			# The minval check checks that the attribute value is a positive integer,			# and that it is not smaller than the given value.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value < $checkvalue)				$ok = false;			break;		case 'valueless' :			# The valueless check checks if the attribute has a value			# (like <a href="blah">) or not (<option selected>). If the given value			# is a "y" or a "Y", the attribute must not have a value.			# If the given value is an "n" or an "N", the attribute must have one.			if (strtolower($checkvalue) != $vless)				$ok = false;			break;	} # switch	return $ok;}/** * Sanitize string from bad protocols. * * This function removes all non-allowed protocols from the beginning of * $string. It ignores whitespace and the case of the letters, and it does * understand HTML entities. It does its work in a while loop, so it won't be * fooled by a string like "javascript:javascript:alert(57)". * * @since 1.0.0 * * @param string $string Content to filter bad protocols from * @param array $allowed_protocols Allowed protocols to keep * @return string Filtered content */function wp_kses_bad_protocol($string, $allowed_protocols) {	$string = wp_kses_no_null($string);	$string2 = $string.'a';	while ($string != $string2) {		$string2 = $string;		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);	} # while	return $string;}/** * Removes any NULL characters in $string. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_no_null($string) {	$string = preg_replace('/\0+/', '', $string);	$string = preg_replace('/(\\\\0)+/', '', $string);	return $string;}/** * Strips slashes from in front of quotes. * * This function changes the character sequence  \"  to just  ". It leaves all * other slashes alone. It's really weird, but the quoting from * preg_replace(//e) seems to require this. * * @since 1.0.0 * * @param string $string String to strip slashes * @return string Fixed strings with quoted slashes */function wp_kses_stripslashes($string) {	return preg_replace('%\\\\"%', '"', $string);}/** * Goes through an array and changes the keys to all lower case. * * @since 1.0.0 * * @param array $inarray Unfiltered array * @return array Fixed array with all lowercase keys */function wp_kses_array_lc($inarray) {	$outarray = array ();	foreach ( (array) $inarray as $inkey => $inval) {		$outkey = strtolower($inkey);		$outarray[$outkey] = array ();		foreach ( (array) $inval as $inkey2 => $inval2) {			$outkey2 = strtolower($inkey2);			$outarray[$outkey][$outkey2] = $inval2;		} # foreach $inval	} # foreach $inarray	return $outarray;}/** * Removes the HTML JavaScript entities found in early versions of Netscape 4. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_js_entities($string) {	return preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);}/** * Handles parsing errors in wp_kses_hair(). * * The general plan is to remove everything to and including some whitespace, * but it deals with quotes and apostrophes as well. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_html_error($string) {	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);}/** * Sanitizes content from bad protocols and other characters. * * This function searches for URL protocols at the beginning of $string, while * handling whitespace and HTML entities. * * @since 1.0.0 * * @param string $string Content to check for bad protocols * @param string $allowed_protocols Allowed protocols * @return string Sanitized content */function wp_kses_bad_protocol_once($string, $allowed_protocols) {	global $_kses_allowed_protocols;	$_kses_allowed_protocols = $allowed_protocols;	$string2 = preg_split('/:|&#58;|&#x3a;/i', $string, 2);	if ( isset($string2[1]) && !preg_match('%/\?%', $string2[0]) )		$string = wp_kses_bad_protocol_once2($string2[0]) . trim($string2[1]);	else		$string = preg_replace_callback('/^((&[^;]*;|[\sA-Za-z0-9])*)'.'(:|&#58;|&#[Xx]3[Aa];)\s*/', 'wp_kses_bad_protocol_once2', $string);	return $string;}/** * Callback for wp_kses_bad_protocol_once() regular expression. * * This function processes URL protocols, checks to see if they're in the * white-list or not, and returns different data depending on the answer. * * @access private * @since 1.0.0 * * @param mixed $matches string or preg_replace_callback() matches array to check for bad protocols * @return string Sanitized content */function wp_kses_bad_protocol_once2($matches) {	global $_kses_allowed_protocols;	if ( is_array($matches) ) {		if ( empty($matches[1]) )			return '';		$string = $matches[1];	} else {		$string = $matches;	}	$string2 = wp_kses_decode_entities($string);	$string2 = preg_replace('/\s/', '', $string2);	$string2 = wp_kses_no_null($string2);	$string2 = strtolower($string2);	$allowed = false;	foreach ( (array) $_kses_allowed_protocols as $one_protocol)		if (strtolower($one_protocol) == $string2) {			$allowed = true;			break;		}	if ($allowed)		return "$string2:";	else		return '';}/** * Converts and fixes HTML entities. * * This function normalizes HTML entities. It will convert "AT&T" to the correct * "AT&amp;T", "&#00058;" to "&#58;", "&#XYZZY;" to "&amp;#XYZZY;" and so on. * * @since 1.0.0 * * @param string $string Content to normalize entities * @return string Content with normalized entities */function wp_kses_normalize_entities($string) {	# Disarm all entities by converting & to &amp;	$string = str_replace('&', '&amp;', $string);	# Change back the allowed entities in our entity whitelist	$string = preg_replace_callback('/&amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);	$string = preg_replace_callback('/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);	$string = preg_replace_callback('/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);	return $string;}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function only accepts valid named entity references, which are finite, * case-sensitive, and highly scrutinized by HTML and XML validators. * * @since 3.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_named_entities($matches) {	global $allowedentitynames;	if ( empty($matches[1]) )		return '';	$i = $matches[1];	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;$i;" : "&$i;" );}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function helps wp_kses_normalize_entities() to only accept 16 bit values * and nothing more for &#number; entities. * * @access private * @since 1.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities2($matches) {	if ( empty($matches[1]) )		return '';	$i = $matches[1];	if (valid_unicode($i)) {		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);		$i = "&#$i;";	} else {		$i = "&amp;#$i;";	}	return $i;}/** * Callback for wp_kses_normalize_entities() for regular expression. * * This function helps wp_kses_normalize_entities() to only accept valid Unicode * numeric entities in hex form. * * @access private * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities3($matches) {	if ( empty($matches[1]) )		return '';	$hexchars = $matches[1];	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;#x$hexchars;" : '&#x'.ltrim($hexchars,'0').';' );}/** * Helper function to determine if a Unicode value is valid. * * @param int $i Unicode value * @return bool true if the value was a valid Unicode number */function valid_unicode($i) {	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||			($i >= 0x20 && $i <= 0xd7ff) ||			($i >= 0xe000 && $i <= 0xfffd) ||			($i >= 0x10000 && $i <= 0x10ffff) );}/** * Convert all entities to their character counterparts. * * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do * anything with other entities like &auml;, but we don't need them in the URL * protocol whitelisting system anyway. * * @since 1.0.0 * * @param string $string Content to change entities * @return string Content after decoded entities */function wp_kses_decode_entities($string) {	$string = preg_replace_callback('/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string);	$string = preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string);	return $string;}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr( $match ) {	return chr( $match[1] );}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr_hexdec( $match ) {	return chr( hexdec( $match[1] ) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 1.0.0 * @uses $allowedtags * * @param string $data Content to filter, expected to be escaped with slashes * @return string Filtered content */function wp_filter_kses($data) {	global $allowedtags;	return addslashes( wp_kses(stripslashes( $data ), $allowedtags) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 2.9.0 * @uses $allowedtags * * @param string $data Content to filter, expected to not be escaped * @return string Filtered content */function wp_kses_data($data) {	global $allowedtags;	return wp_kses( $data , $allowedtags );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.0.0 * @uses $allowedposttags * * @param string $data Post content to filter, expected to be escaped with slashes * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_filter_post_kses($data) {	global $allowedposttags;	return addslashes ( wp_kses(stripslashes( $data ), $allowedposttags) );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.9.0 * @uses $allowedposttags * * @param string $data Post content to filter * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_kses_post($data) {	global $allowedposttags;	return wp_kses( $data , $allowedposttags );}/** * Strips all of the HTML in the content. * * @since 2.1.0 * * @param string $data Content to strip all HTML from * @return string Filtered content without any HTML */function wp_filter_nohtml_kses($data) {	return addslashes ( wp_kses(stripslashes( $data ), array()) );}/** * Adds all Kses input form content filters. * * All hooks have default priority. The wp_filter_kses() function is added to * the 'pre_comment_content' and 'title_save_pre' hooks. * * The wp_filter_post_kses() function is added to the 'content_save_pre', * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks. * * @since 2.0.0 * @uses add_filter() See description for what functions are added to what hooks. */function kses_init_filters() {	// Normal filtering.	add_filter('pre_comment_content', 'wp_filter_kses');	add_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	add_filter('content_save_pre', 'wp_filter_post_kses');	add_filter('excerpt_save_pre', 'wp_filter_post_kses');	add_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Removes all Kses input form content filters. * * A quick procedural method to removing all of the filters that kses uses for * content in WordPress Loop. * * Does not remove the kses_init() function from 'init' hook (priority is * default). Also does not remove kses_init() function from 'set_current_user' * hook (priority is also default). * * @since 2.0.6 */function kses_remove_filters() {	// Normal filtering.	remove_filter('pre_comment_content', 'wp_filter_kses');	remove_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	remove_filter('content_save_pre', 'wp_filter_post_kses');	remove_filter('excerpt_save_pre', 'wp_filter_post_kses');	remove_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Sets up most of the Kses filters for input form content. * * If you remove the kses_init() function from 'init' hook and * 'set_current_user' (priority is default), then none of the Kses filter hooks * will be added. * * First removes all of the Kses filters in case the current user does not need * to have Kses filter the content. If the user does not have unfiltered html * capability, then Kses filters are added. * * @uses kses_remove_filters() Removes the Kses filters * @uses kses_init_filters() Adds the Kses filters back if the user *		does not have unfiltered HTML capability. * @since 2.0.0 */function kses_init() {	kses_remove_filters();	if (current_user_can('unfiltered_html') == false)		kses_init_filters();}add_action('init', 'kses_init');add_action('set_current_user', 'kses_init');/** * Inline CSS filter * * @since 2.8.1 */function safecss_filter_attr( $css, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented	$css = wp_kses_no_null($css);	$css = str_replace(array("\n","\r","\t"), '', $css);	if ( preg_match( '%[\\(&]|/\*%', $css ) ) // remove any inline css containing \ ( & or comments		return '';	$css_array = split( ';', trim( $css ) );	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',	'padding-left', 'padding-right', 'padding-top', 'text-decoration', 'text-indent', 'vertical-align',	'width' ) );	if ( empty($allowed_attr) )		return $css;	$css = '';	foreach ( $css_array as $css_item ) {		if ( $css_item == '' )			continue;		$css_item = trim( $css_item );		$found = false;		if ( strpos( $css_item, ':' ) === false ) {			$found = true;		} else {			$parts = split( ':', $css_item );			if ( in_array( trim( $parts[0] ), $allowed_attr ) )				$found = true;		}		if ( $found ) {			if( $css != '' )				$css .= ';';			$css .= $css_item;		}	}	return $css;}
<?php/** * WordPress core upgrade functionality. * * @package WordPress * @subpackage Administration * @since 2.7.0 *//** * Stores files to be deleted. * * @since 2.7.0 * @global array $_old_files * @var array * @name $_old_files */global $_old_files;$_old_files = array('wp-admin/bookmarklet.php','wp-admin/css/upload.css','wp-admin/css/upload-rtl.css','wp-admin/css/press-this-ie.css','wp-admin/css/press-this-ie-rtl.css','wp-admin/edit-form.php','wp-admin/link-import.php','wp-admin/images/box-bg-left.gif','wp-admin/images/box-bg-right.gif','wp-admin/images/box-bg.gif','wp-admin/images/box-butt-left.gif','wp-admin/images/box-butt-right.gif','wp-admin/images/box-butt.gif','wp-admin/images/box-head-left.gif','wp-admin/images/box-head-right.gif','wp-admin/images/box-head.gif','wp-admin/images/heading-bg.gif','wp-admin/images/login-bkg-bottom.gif','wp-admin/images/login-bkg-tile.gif','wp-admin/images/notice.gif','wp-admin/images/toggle.gif','wp-admin/images/comment-stalk-classic.gif','wp-admin/images/comment-stalk-fresh.gif','wp-admin/images/comment-stalk-rtl.gif','wp-admin/images/comment-pill.gif','wp-admin/images/del.png','wp-admin/images/media-button-gallery.gif','wp-admin/images/media-buttons.gif','wp-admin/images/tail.gif','wp-admin/images/gear.png','wp-admin/images/tab.png','wp-admin/images/postbox-bg.gif','wp-admin/includes/upload.php','wp-admin/js/dbx-admin-key.js','wp-admin/js/link-cat.js','wp-admin/js/forms.js','wp-admin/js/upload.js','wp-admin/js/set-post-thumbnail-handler.js','wp-admin/js/set-post-thumbnail-handler.dev.js','wp-admin/js/page.js','wp-admin/js/page.dev.js','wp-admin/js/slug.js','wp-admin/js/slug.dev.js','wp-admin/profile-update.php','wp-admin/templates.php','wp-includes/images/audio.png','wp-includes/images/css.png','wp-includes/images/default.png','wp-includes/images/doc.png','wp-includes/images/exe.png','wp-includes/images/html.png','wp-includes/images/js.png','wp-includes/images/pdf.png','wp-includes/images/swf.png','wp-includes/images/tar.png','wp-includes/images/text.png','wp-includes/images/video.png','wp-includes/images/zip.png','wp-includes/js/dbx.js','wp-includes/js/fat.js','wp-includes/js/list-manipulation.js','wp-includes/js/jquery/jquery.dimensions.min.js','wp-includes/js/tinymce/langs/en.js','wp-includes/js/tinymce/plugins/autosave/editor_plugin_src.js','wp-includes/js/tinymce/plugins/autosave/langs','wp-includes/js/tinymce/plugins/directionality/images','wp-includes/js/tinymce/plugins/directionality/langs','wp-includes/js/tinymce/plugins/inlinepopups/css','wp-includes/js/tinymce/plugins/inlinepopups/images','wp-includes/js/tinymce/plugins/inlinepopups/jscripts','wp-includes/js/tinymce/plugins/paste/images','wp-includes/js/tinymce/plugins/paste/jscripts','wp-includes/js/tinymce/plugins/paste/langs','wp-includes/js/tinymce/plugins/spellchecker/classes/HttpClient.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyGoogleSpell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspell.class.php','wp-includes/js/tinymce/plugins/spellchecker/classes/TinyPspellShell.class.php','wp-includes/js/tinymce/plugins/spellchecker/css/spellchecker.css','wp-includes/js/tinymce/plugins/spellchecker/images','wp-includes/js/tinymce/plugins/spellchecker/langs','wp-includes/js/tinymce/plugins/spellchecker/tinyspell.php','wp-includes/js/tinymce/plugins/wordpress/images','wp-includes/js/tinymce/plugins/wordpress/langs','wp-includes/js/tinymce/plugins/wordpress/popups.css','wp-includes/js/tinymce/plugins/wordpress/wordpress.css','wp-includes/js/tinymce/plugins/wphelp','wp-includes/js/tinymce/themes/advanced/css','wp-includes/js/tinymce/themes/advanced/images','wp-includes/js/tinymce/themes/advanced/jscripts','wp-includes/js/tinymce/themes/advanced/langs','wp-includes/js/tinymce/tiny_mce_gzip.php','wp-includes/js/wp-ajax.js','wp-admin/admin-db.php','wp-admin/cat.js','wp-admin/categories.js','wp-admin/custom-fields.js','wp-admin/dbx-admin-key.js','wp-admin/edit-comments.js','wp-admin/install-rtl.css','wp-admin/install.css','wp-admin/upgrade-schema.php','wp-admin/upload-functions.php','wp-admin/upload-rtl.css','wp-admin/upload.css','wp-admin/upload.js','wp-admin/users.js','wp-admin/widgets-rtl.css','wp-admin/widgets.css','wp-admin/xfn.js','wp-includes/js/tinymce/license.html','wp-admin/cat-js.php','wp-admin/edit-form-ajax-cat.php','wp-admin/execute-pings.php','wp-admin/import/b2.php','wp-admin/import/btt.php','wp-admin/import/jkw.php','wp-admin/inline-uploading.php','wp-admin/link-categories.php','wp-admin/list-manipulation.js','wp-admin/list-manipulation.php','wp-includes/comment-functions.php','wp-includes/feed-functions.php','wp-includes/functions-compat.php','wp-includes/functions-formatting.php','wp-includes/functions-post.php','wp-includes/js/dbx-key.js','wp-includes/js/tinymce/plugins/autosave/langs/cs.js','wp-includes/js/tinymce/plugins/autosave/langs/sv.js','wp-includes/js/tinymce/themes/advanced/editor_template_src.js','wp-includes/links.php','wp-includes/pluggable-functions.php','wp-includes/template-functions-author.php','wp-includes/template-functions-category.php','wp-includes/template-functions-general.php','wp-includes/template-functions-links.php','wp-includes/template-functions-post.php','wp-includes/wp-l10n.php','wp-admin/import-b2.php','wp-admin/import-blogger.php','wp-admin/import-greymatter.php','wp-admin/import-livejournal.php','wp-admin/import-mt.php','wp-admin/import-rss.php','wp-admin/import-textpattern.php','wp-admin/quicktags.js','wp-images/fade-butt.png','wp-images/get-firefox.png','wp-images/header-shadow.png','wp-images/smilies','wp-images/wp-small.png','wp-images/wpminilogo.png','wp.php','wp-includes/gettext.php','wp-includes/streams.php',// MU'wp-admin/wpmu-admin.php','wp-admin/wpmu-blogs.php','wp-admin/wpmu-edit.php','wp-admin/wpmu-options.php','wp-admin/wpmu-themes.php','wp-admin/wpmu-upgrade-site.php','wp-admin/wpmu-users.php','wp-includes/wpmu-default-filters.php','wp-includes/wpmu-functions.php','wpmu-settings.php','index-install.php','README.txt','htaccess.dist','wp-admin/css/mu-rtl.css','wp-admin/css/mu.css','wp-admin/images/site-admin.png','wp-admin/includes/mu.php','wp-includes/images/wordpress-mu.png',// 3.0'wp-admin/categories.php','wp-admin/edit-category-form.php','wp-admin/edit-page-form.php','wp-admin/edit-pages.php','wp-admin/images/wp-logo.gif','wp-admin/js/wp-gears.dev.js','wp-admin/js/wp-gears.js','wp-admin/options-misc.php','wp-admin/page-new.php','wp-admin/page.php','wp-admin/rtl.css','wp-admin/rtl.dev.css','wp-admin/update-links.php','wp-admin/wp-admin.css','wp-admin/wp-admin.dev.css','wp-includes/js/codepress','wp-includes/js/jquery/autocomplete.dev.js','wp-includes/js/jquery/interface.js','wp-includes/js/jquery/autocomplete.js','wp-includes/js/scriptaculous/prototype.js','wp-includes/js/tinymce/wp-tinymce.js','wp-content/themes/twentyten/searchform.php','wp-admin/import','wp-admin/images/ico-edit.png','wp-admin/images/fav-top.png','wp-admin/images/ico-close.png','wp-admin/images/admin-header-footer.png','wp-admin/images/screen-options-left.gif','wp-admin/images/ico-add.png','wp-admin/images/browse-happy.gif','wp-admin/images/ico-viewpage.png',);/** * Upgrade the core of WordPress. * * This will create a .maintenance file at the base of the WordPress directory * to ensure that people can not access the web site, when the files are being * copied to their locations. * * The files in the {@link $_old_files} list will be removed and the new files * copied from the zip file after the database is upgraded. * * The steps for the upgrader for after the new release is downloaded and * unzipped is: *   1. Test unzipped location for select files to ensure that unzipped worked. *   2. Create the .maintenance file in current WordPress base. *   3. Copy new WordPress directory over old WordPress files. *   4. Upgrade WordPress to new version. *   5. Delete new WordPress directory path. *   6. Delete .maintenance file. *   7. Remove old files. *   8. Delete 'update_core' option. * * There are several areas of failure. For instance if PHP times out before step * 6, then you will not be able to access any portion of your site. Also, since * the upgrade will not continue where it left off, you will not be able to * automatically remove old files and remove the 'update_core' option. This * isn't that bad. * * If the copy of the new WordPress over the old fails, then the worse is that * the new WordPress directory will remain. * * If it is assumed that every file will be copied over, including plugins and * themes, then if you edit the default theme, you should rename it, so that * your changes remain. * * @since 2.7.0 * * @param string $from New release unzipped path. * @param string $to Path to old WordPress installation. * @return WP_Error|null WP_Error on failure, null on success. */function update_core($from, $to) {	global $wp_filesystem, $_old_files, $wpdb;	@set_time_limit( 300 );	$php_version    = phpversion();	$mysql_version  = $wpdb->db_version();	$required_php_version = '4.3';	$required_mysql_version = '4.1.2';	$wp_version = '3.0';	$php_compat     = version_compare( $php_version, $required_php_version, '>=' );	$mysql_compat   = version_compare( $mysql_version, $required_mysql_version, '>=' ) || file_exists( WP_CONTENT_DIR . '/db.php' );	if ( !$mysql_compat || !$php_compat )		$wp_filesystem->delete($from, true);	if ( !$mysql_compat && !$php_compat )		return new WP_Error( 'php_mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher and MySQL version %3$s or higher. You are running PHP version %4$s and MySQL version %5$s.'), $wp_version, $required_php_version, $required_mysql_version, $php_version, $mysql_version ) );	elseif ( !$php_compat )		return new WP_Error( 'php_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires PHP version %2$s or higher. You are running version %3$s.'), $wp_version, $required_php_version, $php_version ) );	elseif ( !$mysql_compat )		return new WP_Error( 'mysql_not_compatible', sprintf( __('The update cannot be installed because WordPress %1$s requires MySQL version %2$s or higher. You are running version %3$s.'), $wp_version, $required_mysql_version, $mysql_version ) );	// Sanity check the unzipped distribution	apply_filters('update_feedback', __('Verifying the unpacked files&#8230;'));	$distro = '';	$roots = array( '/wordpress', '/wordpress-mu' );	foreach( $roots as $root ) {		if ( $wp_filesystem->exists($from . $root . '/wp-settings.php') && $wp_filesystem->exists($from . $root . '/wp-admin/admin.php') &&			$wp_filesystem->exists($from . $root . '/wp-includes/functions.php') ) {			$distro = $root;			break;		}	}	if ( !$distro ) {		$wp_filesystem->delete($from, true);		return new WP_Error('insane_distro', __('The update could not be unpacked') );	}	apply_filters('update_feedback', __('Installing the latest version&#8230;'));	// Create maintenance file to signal that we are upgrading	$maintenance_string = '<?php $upgrading = ' . time() . '; ?>';	$maintenance_file = $to . '.maintenance';	$wp_filesystem->delete($maintenance_file);	$wp_filesystem->put_contents($maintenance_file, $maintenance_string, FS_CHMOD_FILE);	// Copy new versions of WP files into place.	$result = copy_dir($from . $distro, $to);	if ( is_wp_error($result) ) {		$wp_filesystem->delete($maintenance_file);		$wp_filesystem->delete($from, true);		return $result;	}	// Remove old files	foreach ( $_old_files as $old_file ) {		$old_file = $to . $old_file;		if ( !$wp_filesystem->exists($old_file) )			continue;		$wp_filesystem->delete($old_file, true);	}	// Upgrade DB with separate request	apply_filters('update_feedback', __('Upgrading database&#8230;'));	$db_upgrade_url = admin_url('upgrade.php?step=upgrade_db');	wp_remote_post($db_upgrade_url, array('timeout' => 60));	// Remove working directory	$wp_filesystem->delete($from, true);	// Force refresh of update information	if ( function_exists('delete_site_transient') )		delete_site_transient('update_core');	else		delete_option('update_core');	// Remove maintenance file, we're done.	$wp_filesystem->delete($maintenance_file);}?>
<?php/** * Author Template functions for use in themes. * * These functions must be used within the WordPress Loop. * * @link http://codex.wordpress.org/Author_Templates * * @package WordPress * @subpackage Template *//** * Retrieve the author of the current post. * * @since 1.5 * @uses $authordata The current author's DB object. * @uses apply_filters() Calls 'the_author' hook on the author display name. * * @param string $deprecated Deprecated. * @return string The author's display name. */function get_the_author($deprecated = '') {	global $authordata;	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	return apply_filters('the_author', is_object($authordata) ? $authordata->display_name : null);}/** * Display the name of the author of the current post. * * The behavior of this function is based off of old functionality predating * get_the_author(). This function is not deprecated, but is designed to echo * the value from get_the_author() and as an result of any old theme that might * still use the old behavior will also pass the value from get_the_author(). * * The normal, expected behavior of this function is to echo the author and not * return it. However, backwards compatiability has to be maintained. * * @since 0.71 * @see get_the_author() * @link http://codex.wordpress.org/Template_Tags/the_author * * @param string $deprecated Deprecated. * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. * @return string The author's display name, from get_the_author(). */function the_author( $deprecated = '', $deprecated_echo = true ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	if ( $deprecated_echo !== true )		_deprecated_argument( __FUNCTION__, '1.5', __('Use <code>get_the_author()</code> instead if you do not want the value echoed.') );	if ( $deprecated_echo )		echo get_the_author();	return get_the_author();}/** * Retrieve the author who last edited the current post. * * @since 2.8 * @uses $post The current post's DB object. * @uses get_post_meta() Retrieves the ID of the author who last edited the current post. * @uses get_userdata() Retrieves the author's DB object. * @uses apply_filters() Calls 'the_modified_author' hook on the author display name. * @return string The author's display name. */function get_the_modified_author() {	global $post;	if ( $last_id = get_post_meta($post->ID, '_edit_last', true) ) {		$last_user = get_userdata($last_id);		return apply_filters('the_modified_author', $last_user->display_name);	}}/** * Display the name of the author who last edited the current post. * * @since 2.8 * @see get_the_author() * @return string The author's display name, from get_the_modified_author(). */function the_modified_author() {	echo get_the_modified_author();}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @uses $authordata The current author's DB object (if $user_id not specified). * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @return string The author's field from the current author's DB object. */function get_the_author_meta($field = '', $user_id = false) {	if ( ! $user_id )		global $authordata;	else		$authordata = get_userdata( $user_id );	$field = strtolower($field);	$user_field = "user_$field";	if ( 'id' == $field )		$value = isset($authordata->ID) ? (int)$authordata->ID : 0;	elseif ( isset($authordata->$user_field) )		$value = $authordata->$user_field;	else		$value = isset($authordata->$field) ? $authordata->$field : '';	return apply_filters('get_the_author_' . $field, $value, $user_id);}/** * Retrieve the requested data of the author of the current post. * @link http://codex.wordpress.org/Template_Tags/the_author_meta * @since 2.8.0 * @param string $field selects the field of the users record. * @param int $user_id Optional. User ID. * @echo string The author's field from the current author's DB object. */function the_author_meta($field = '', $user_id = false) {	echo apply_filters('the_author_' . $field, get_the_author_meta($field, $user_id), $user_id);}/** * Retrieve either author's link or author's name. * * If the author has a home page set, return an HTML link, otherwise just return the * author's name. * * @uses get_the_author_meta() * @uses get_the_author() */function get_the_author_link() {	if ( get_the_author_meta('url') ) {		return '<a href="' . get_the_author_meta('url') . '" title="' . esc_attr( sprintf(__("Visit %s&#8217;s website"), get_the_author()) ) . '" rel="external">' . get_the_author() . '</a>';	} else {		return get_the_author();	}}/** * Display either author's link or author's name. * * If the author has a home page set, echo an HTML link, otherwise just echo the * author's name. * * @link http://codex.wordpress.org/Template_Tags/the_author_link * @since 2.1 * @uses get_the_author_link() */function the_author_link() {	echo get_the_author_link();}/** * Retrieve the number of posts by the author of the current post. * * @since 1.5 * @uses $post The current post in the Loop's DB object. * @uses count_user_posts() * @return int The number of posts by the author. */function get_the_author_posts() {	global $post;	return count_user_posts($post->post_author);}/** * Display the number of posts by the author of the current post. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts * @since 0.71 * @uses get_the_author_posts() Echoes returned value from function. */function the_author_posts() {	echo get_the_author_posts();}/** * Display an HTML link to the author page of the author of the current post. * * Does just echo get_author_posts_url() function, like the others do. The * reason for this, is that another function is used to help in printing the * link to the author's posts. * * @link http://codex.wordpress.org/Template_Tags/the_author_posts_link * @since 1.2.0 * @uses $authordata The current author's DB object. * @uses get_author_posts_url() * @uses get_the_author() * @param string $deprecated Deprecated. */function the_author_posts_link($deprecated = '') {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.1' );	global $authordata;	$link = sprintf(		'<a href="%1$s" title="%2$s">%3$s</a>',		get_author_posts_url( $authordata->ID, $authordata->user_nicename ),		esc_attr( sprintf( __( 'Posts by %s' ), get_the_author() ) ),		get_the_author()	);	echo apply_filters( 'the_author_posts_link', $link );}/** * Retrieve the URL to the author page of the author of the current post. * * @since 2.1.0 * @uses $wp_rewrite WP_Rewrite * @return string The URL to the author's page. */function get_author_posts_url($author_id, $author_nicename = '') {	global $wp_rewrite;	$auth_ID = (int) $author_id;	$link = $wp_rewrite->get_author_permastruct();	if ( empty($link) ) {		$file = home_url() . '/';		$link = $file . '?author=' . $auth_ID;	} else {		if ( '' == $author_nicename ) {			$user = get_userdata($author_id);			if ( !empty($user->user_nicename) )				$author_nicename = $user->user_nicename;		}		$link = str_replace('%author%', $author_nicename, $link);		$link = home_url() . trailingslashit($link);	}	$link = apply_filters('author_link', $link, $author_id, $author_nicename);	return $link;}/** * List all the authors of the blog, with several options available. * * <ul> * <li>optioncount (boolean) (false): Show the count in parenthesis next to the * author's name.</li> * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is * installed bydefault.</li> * <li>show_fullname (boolean) (false): Show their full names.</li> * <li>hide_empty (boolean) (true): Don't show authors without any posts.</li> * <li>feed (string) (''): If isn't empty, show links to author's feeds.</li> * <li>feed_image (string) (''): If isn't empty, use this image to link to * feeds.</li> * <li>echo (boolean) (true): Set to false to return the output, instead of * echoing.</li> * <li>style (string) ('list'): Whether to display list of authors in list form * or as a string.</li> * <li>html (bool) (true): Whether to list the items in html for or plaintext. * </li> * </ul> * * @link http://codex.wordpress.org/Template_Tags/wp_list_authors * @since 1.2.0 * @param array $args The argument array. * @return null|string The output, if echo is set to false. */function wp_list_authors($args = '') {	global $wpdb;	$defaults = array(		'optioncount' => false, 'exclude_admin' => true,		'show_fullname' => false, 'hide_empty' => true,		'feed' => '', 'feed_image' => '', 'feed_type' => '', 'echo' => true,		'style' => 'list', 'html' => true	);	$r = wp_parse_args( $args, $defaults );	extract($r, EXTR_SKIP);	$return = '';	/** @todo Move select to get_authors(). */	$users = get_users_of_blog();	$author_ids = array();	foreach ( (array) $users as $user )		$author_ids[] = $user->user_id;	if ( count($author_ids) > 0  ) {		$author_ids = implode(',', $author_ids );		$authors = $wpdb->get_results( "SELECT ID, user_nicename from $wpdb->users WHERE ID IN($author_ids) " . ($exclude_admin ? "AND user_login <> 'admin' " : '') . "ORDER BY display_name" );	} else {		$authors = array();	}	$author_count = array();	foreach ( (array) $wpdb->get_results("SELECT DISTINCT post_author, COUNT(ID) AS count FROM $wpdb->posts WHERE post_type = 'post' AND " . get_private_posts_cap_sql( 'post' ) . " GROUP BY post_author") as $row )		$author_count[$row->post_author] = $row->count;	foreach ( (array) $authors as $author ) {		$link = '';		$author = get_userdata( $author->ID );		$posts = (isset($author_count[$author->ID])) ? $author_count[$author->ID] : 0;		$name = $author->display_name;		if ( $show_fullname && ($author->first_name != '' && $author->last_name != '') )			$name = "$author->first_name $author->last_name";		if( !$html ) {			if ( $posts == 0 ) {				if ( ! $hide_empty )					$return .= $name . ', ';			} else				$return .= $name . ', ';			// No need to go further to process HTML.			continue;		}		if ( !($posts == 0 && $hide_empty) && 'list' == $style )			$return .= '<li>';		if ( $posts == 0 ) {			if ( ! $hide_empty )				$link = $name;		} else {			$link = '<a href="' . get_author_posts_url($author->ID, $author->user_nicename) . '" title="' . esc_attr( sprintf(__("Posts by %s"), $author->display_name) ) . '">' . $name . '</a>';			if ( (! empty($feed_image)) || (! empty($feed)) ) {				$link .= ' ';				if (empty($feed_image))					$link .= '(';				$link .= '<a href="' . get_author_feed_link($author->ID) . '"';				if ( !empty($feed) ) {					$title = ' title="' . esc_attr($feed) . '"';					$alt = ' alt="' . esc_attr($feed) . '"';					$name = $feed;					$link .= $title;				}				$link .= '>';				if ( !empty($feed_image) )					$link .= "<img src=\"" . esc_url($feed_image) . "\" style=\"border: none;\"$alt$title" . ' />';				else					$link .= $name;				$link .= '</a>';				if ( empty($feed_image) )					$link .= ')';			}			if ( $optioncount )				$link .= ' ('. $posts . ')';		}		if ( $posts || ! $hide_empty )			$return .= $link . ( ( 'list' == $style ) ? '</li>' : ', ' );	}	$return = trim($return, ', ');	if ( ! $echo )		return $return;	echo $return;}?>
<?php/** * WordPress Comment Administration API. * * @package WordPress * @subpackage Administration *//** * {@internal Missing Short Description}} * * @since unknown * @uses $wpdb * * @param string $comment_author * @param string $comment_date * @return mixed Comment ID on success. */function comment_exists($comment_author, $comment_date) {	global $wpdb;	$comment_author = stripslashes($comment_author);	$comment_date = stripslashes($comment_date);	return $wpdb->get_var( $wpdb->prepare("SELECT comment_post_ID FROM $wpdb->comments			WHERE comment_author = %s AND comment_date = %s", $comment_author, $comment_date) );}/** * {@internal Missing Short Description}} * * @since unknown */function edit_comment() {	$comment_post_ID = (int) $_POST['comment_post_ID'];	if (!current_user_can( 'edit_post', $comment_post_ID ))		wp_die( __('You are not allowed to edit comments on this post, so you cannot edit this comment.' ));	$_POST['comment_author'] = $_POST['newcomment_author'];	$_POST['comment_author_email'] = $_POST['newcomment_author_email'];	$_POST['comment_author_url'] = $_POST['newcomment_author_url'];	$_POST['comment_approved'] = $_POST['comment_status'];	$_POST['comment_content'] = $_POST['content'];	$_POST['comment_ID'] = (int) $_POST['comment_ID'];	foreach ( array ('aa', 'mm', 'jj', 'hh', 'mn') as $timeunit ) {		if ( !empty( $_POST['hidden_' . $timeunit] ) && $_POST['hidden_' . $timeunit] != $_POST[$timeunit] ) {			$_POST['edit_date'] = '1';			break;		}	}	if (!empty ( $_POST['edit_date'] ) ) {		$aa = $_POST['aa'];		$mm = $_POST['mm'];		$jj = $_POST['jj'];		$hh = $_POST['hh'];		$mn = $_POST['mn'];		$ss = $_POST['ss'];		$jj = ($jj > 31 ) ? 31 : $jj;		$hh = ($hh > 23 ) ? $hh -24 : $hh;		$mn = ($mn > 59 ) ? $mn -60 : $mn;		$ss = ($ss > 59 ) ? $ss -60 : $ss;		$_POST['comment_date'] = "$aa-$mm-$jj $hh:$mn:$ss";	}	wp_update_comment( $_POST);}/** * {@internal Missing Short Description}} * * @since unknown * * @param unknown_type $id * @return unknown */function get_comment_to_edit( $id ) {	if ( !$comment = get_comment($id) )		return false;	$comment->comment_ID = (int) $comment->comment_ID;	$comment->comment_post_ID = (int) $comment->comment_post_ID;	$comment->comment_content = format_to_edit( $comment->comment_content );	$comment->comment_content = apply_filters( 'comment_edit_pre', $comment->comment_content);	$comment->comment_author = format_to_edit( $comment->comment_author );	$comment->comment_author_email = format_to_edit( $comment->comment_author_email );	$comment->comment_author_url = format_to_edit( $comment->comment_author_url );	$comment->comment_author_url = esc_url($comment->comment_author_url);	return $comment;}/** * Get the number of pending comments on a post or posts * * @since unknown * @uses $wpdb * * @param int|array $post_id Either a single Post ID or an array of Post IDs * @return int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs */function get_pending_comments_num( $post_id ) {	global $wpdb;	$single = false;	if ( !is_array($post_id) ) {		$post_id_array = (array) $post_id;		$single = true;	} else {		$post_id_array = $post_id;	}	$post_id_array = array_map('intval', $post_id_array);	$post_id_in = "'" . implode("', '", $post_id_array) . "'";	$pending = $wpdb->get_results( "SELECT comment_post_ID, COUNT(comment_ID) as num_comments FROM $wpdb->comments WHERE comment_post_ID IN ( $post_id_in ) AND comment_approved = '0' GROUP BY comment_post_ID", ARRAY_A );	if ( $single ) {		if ( empty($pending) )			return 0;		else			return absint($pending[0]['num_comments']);	}	$pending_keyed = array();	// Default to zero pending for all posts in request	foreach ( $post_id_array as $id )		$pending_keyed[$id] = 0;	if ( !empty($pending) )		foreach ( $pending as $pend )			$pending_keyed[$pend['comment_post_ID']] = absint($pend['num_comments']);	return $pending_keyed;}/** * Add avatars to relevant places in admin, or try to. * * @since 2.5.0 * @uses $comment * * @param string $name User name. * @return string Avatar with Admin name. */function floated_admin_avatar( $name ) {	global $comment;	$avatar = get_avatar( $comment, 32 );	return "$avatar $name";}function enqueue_comment_hotkeys_js() {	if ( 'true' == get_user_option( 'comment_shortcuts' ) )		wp_enqueue_script( 'jquery-table-hotkeys' );}if ( is_admin() && isset($pagenow) && ('edit-comments.php' == $pagenow || 'edit.php' == $pagenow) ) {	if ( get_option('show_avatars') )		add_filter( 'comment_author', 'floated_admin_avatar' );}?>
<?php/** * The template for displaying all pages. * * This is the template that displays all pages by default. * Please note that this is the wordpress construct of pages * and that other 'pages' on your wordpress site will use a * different template. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<?php if ( is_front_page() ) { ?>						<h2 class="entry-title"><?php the_title(); ?></h2>					<?php } else { ?>							<h1 class="entry-title"><?php the_title(); ?></h1>					<?php } ?>									<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * User Registration API * * @package WordPress *//** * Checks whether the given username exists. * * @since 2.0.0 * * @param string $username Username. * @return null|int The user's ID on success, and null on failure. */function username_exists( $username ) {	if ( $user = get_userdatabylogin( $username ) ) {		return $user->ID;	} else {		return null;	}}/** * Checks whether the given email exists. * * @since 2.1.0 * @uses $wpdb * * @param string $email Email. * @return bool|int The user's ID on success, and false on failure. */function email_exists( $email ) {	if ( $user = get_user_by_email($email) )		return $user->ID;	return false;}/** * Checks whether an username is valid. * * @since 2.0.1 * @uses apply_filters() Calls 'validate_username' hook on $valid check and $username as parameters * * @param string $username Username. * @return bool Whether username given is valid */function validate_username( $username ) {	$sanitized = sanitize_user( $username, true );	$valid = ( $sanitized == $username );	return apply_filters( 'validate_username', $valid, $username );}/** * Insert an user into the database. * * Can update a current user or insert a new user based on whether the user's ID * is present. * * Can be used to update the user's info (see below), set the user's role, and * set the user's preference on whether they want the rich editor on. * * Most of the $userdata array fields have filters associated with the values. * The exceptions are 'rich_editing', 'role', 'jabber', 'aim', 'yim', * 'user_registered', and 'ID'. The filters have the prefix 'pre_user_' followed * by the field name. An example using 'description' would have the filter * called, 'pre_user_description' that can be hooked into. * * The $userdata array can contain the following fields: * 'ID' - An integer that will be used for updating an existing user. * 'user_pass' - A string that contains the plain text password for the user. * 'user_login' - A string that contains the user's username for logging in. * 'user_nicename' - A string that contains a nicer looking name for the user. *		The default is the user's username. * 'user_url' - A string containing the user's URL for the user's web site. * 'user_email' - A string containing the user's email address. * 'display_name' - A string that will be shown on the site. Defaults to user's *		username. It is likely that you will want to change this, for both *		appearance and security through obscurity (that is if you don't use and *		delete the default 'admin' user). * 'nickname' - The user's nickname, defaults to the user's username. * 'first_name' - The user's first name. * 'last_name' - The user's last name. * 'description' - A string containing content about the user. * 'rich_editing' - A string for whether to enable the rich editor. False *		if not empty. * 'user_registered' - The date the user registered. Format is 'Y-m-d H:i:s'. * 'role' - A string used to set the user's role. * 'jabber' - User's Jabber account. * 'aim' - User's AOL IM account. * 'yim' - User's Yahoo IM account. * * @since 2.0.0 * @uses $wpdb WordPress database layer. * @uses apply_filters() Calls filters for most of the $userdata fields with the prefix 'pre_user'. See note above. * @uses do_action() Calls 'profile_update' hook when updating giving the user's ID * @uses do_action() Calls 'user_register' hook when creating a new user giving the user's ID * * @param array $userdata An array of user data. * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not be created. */function wp_insert_user($userdata) {	global $wpdb;	extract($userdata, EXTR_SKIP);	// Are we updating or creating?	if ( !empty($ID) ) {		$ID = (int) $ID;		$update = true;		$old_user_data = get_userdata($ID);	} else {		$update = false;		// Hash the password		$user_pass = wp_hash_password($user_pass);	}	$user_login = sanitize_user($user_login, true);	$user_login = apply_filters('pre_user_login', $user_login);	//Remove any non-printable chars from the login string to see if we have ended up with an empty username	$user_login = trim($user_login);	if ( empty($user_login) )		return new WP_Error('empty_user_login', __('Cannot create a user with an empty login name.') );	if ( !$update && username_exists( $user_login ) )		return new WP_Error('existing_user_login', __('This username is already registered.') );	if ( empty($user_nicename) )		$user_nicename = sanitize_title( $user_login );	$user_nicename = apply_filters('pre_user_nicename', $user_nicename);	if ( empty($user_url) )		$user_url = '';	$user_url = apply_filters('pre_user_url', $user_url);	if ( empty($user_email) )		$user_email = '';	$user_email = apply_filters('pre_user_email', $user_email);	if ( !$update && ! defined( 'WP_IMPORTING' ) && email_exists($user_email) )		return new WP_Error('existing_user_email', __('This email address is already registered.') );	if ( empty($display_name) )		$display_name = $user_login;	$display_name = apply_filters('pre_user_display_name', $display_name);	if ( empty($nickname) )		$nickname = $user_login;	$nickname = apply_filters('pre_user_nickname', $nickname);	if ( empty($first_name) )		$first_name = '';	$first_name = apply_filters('pre_user_first_name', $first_name);	if ( empty($last_name) )		$last_name = '';	$last_name = apply_filters('pre_user_last_name', $last_name);	if ( empty($description) )		$description = '';	$description = apply_filters('pre_user_description', $description);	if ( empty($rich_editing) )		$rich_editing = 'true';	if ( empty($comment_shortcuts) )		$comment_shortcuts = 'false';	if ( empty($admin_color) )		$admin_color = 'fresh';	$admin_color = preg_replace('|[^a-z0-9 _.\-@]|i', '', $admin_color);	if ( empty($use_ssl) )		$use_ssl = 0;	if ( empty($user_registered) )		$user_registered = gmdate('Y-m-d H:i:s');	$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $user_nicename, $user_login));	if ( $user_nicename_check ) {		$suffix = 2;		while ($user_nicename_check) {			$alt_user_nicename = $user_nicename . "-$suffix";			$user_nicename_check = $wpdb->get_var( $wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_nicename = %s AND user_login != %s LIMIT 1" , $alt_user_nicename, $user_login));			$suffix++;		}		$user_nicename = $alt_user_nicename;	}	$data = compact( 'user_pass', 'user_email', 'user_url', 'user_nicename', 'display_name', 'user_registered' );	$data = stripslashes_deep( $data );	if ( $update ) {		$wpdb->update( $wpdb->users, $data, compact( 'ID' ) );		$user_id = (int) $ID;	} else {		$wpdb->insert( $wpdb->users, $data + compact( 'user_login' ) );		$user_id = (int) $wpdb->insert_id;	}	update_user_meta( $user_id, 'first_name', $first_name);	update_user_meta( $user_id, 'last_name', $last_name);	update_user_meta( $user_id, 'nickname', $nickname );	update_user_meta( $user_id, 'description', $description );	update_user_meta( $user_id, 'rich_editing', $rich_editing);	update_user_meta( $user_id, 'comment_shortcuts', $comment_shortcuts);	update_user_meta( $user_id, 'admin_color', $admin_color);	update_user_meta( $user_id, 'use_ssl', $use_ssl);	foreach ( _wp_get_user_contactmethods() as $method => $name ) {		if ( empty($$method) )			$$method = '';		update_user_meta( $user_id, $method, $$method );	}	if ( isset($role) ) {		$user = new WP_User($user_id);		$user->set_role($role);	} elseif ( !$update ) {		$user = new WP_User($user_id);		$user->set_role(get_option('default_role'));	}	wp_cache_delete($user_id, 'users');	wp_cache_delete($user_login, 'userlogins');	if ( $update )		do_action('profile_update', $user_id, $old_user_data);	else		do_action('user_register', $user_id);	return $user_id;}/** * Update an user in the database. * * It is possible to update a user's password by specifying the 'user_pass' * value in the $userdata parameter array. * * If $userdata does not contain an 'ID' key, then a new user will be created * and the new user's ID will be returned. * * If current user's password is being updated, then the cookies will be * cleared. * * @since 2.0.0 * @see wp_insert_user() For what fields can be set in $userdata * @uses wp_insert_user() Used to update existing user or add new one if user doesn't exist already * * @param array $userdata An array of user data. * @return int The updated user's ID. */function wp_update_user($userdata) {	$ID = (int) $userdata['ID'];	// First, get all of the original fields	$user = get_userdata($ID);	// Escape data pulled from DB.	$user = add_magic_quotes(get_object_vars($user));	// If password is changing, hash it now.	if ( ! empty($userdata['user_pass']) ) {		$plaintext_pass = $userdata['user_pass'];		$userdata['user_pass'] = wp_hash_password($userdata['user_pass']);	}	wp_cache_delete($user[ 'user_email' ], 'useremail');	// Merge old and new fields with new fields overwriting old ones.	$userdata = array_merge($user, $userdata);	$user_id = wp_insert_user($userdata);	// Update the cookies if the password changed.	$current_user = wp_get_current_user();	if ( $current_user->id == $ID ) {		if ( isset($plaintext_pass) ) {			wp_clear_auth_cookie();			wp_set_auth_cookie($ID);		}	}	return $user_id;}/** * A simpler way of inserting an user into the database. * * Creates a new user with just the username, password, and email. For a more * detail creation of a user, use wp_insert_user() to specify more infomation. * * @since 2.0.0 * @see wp_insert_user() More complete way to create a new user * * @param string $username The user's username. * @param string $password The user's password. * @param string $email The user's email (optional). * @return int The new user's ID. */function wp_create_user($username, $password, $email = '') {	$user_login = esc_sql( $username );	$user_email = esc_sql( $email    );	$user_pass = $password;	$userdata = compact('user_login', 'user_email', 'user_pass');	return wp_insert_user($userdata);}/** * Set up the default contact methods * * @access private * @since * * @return array $user_contactmethods Array of contact methods and their labels. */function _wp_get_user_contactmethods() {	$user_contactmethods = array(		'aim' => __('AIM'),		'yim' => __('Yahoo IM'),		'jabber' => __('Jabber / Google Talk')	);	return apply_filters('user_contactmethods',$user_contactmethods);}?>
<?php/** * Defines the Gears manifest file for Google Gears offline storage. * * @package WordPress * @subpackage Administration *//** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );require(ABSPATH . '/wp-admin/includes/manifest.php');$files = get_manifest();header( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );header( 'Cache-Control: no-cache, must-revalidate, max-age=0' );header( 'Pragma: no-cache' );header( 'Content-Type: application/x-javascript; charset=UTF-8' );?>{"betaManifestVersion" : 1,"version" : "<?php echo $man_version; ?>","entries" : [<?php$entries = '';foreach ( $files as $file ) {	// Set ignoreQuery, defaulting to true	$ignore_query = ( isset($file[2]) && !$file[2] ) ? '' : ', "ignoreQuery" : true ';	// If version is not set, just output the file	if ( !isset($file[1]) )		$entries .= '{ "url" : "' . $file[0] . '"' . $ignore_query . ' }' . "\n";	// Output url and src	else		$entries .= '{ "url" : "' . $file[0] . '", "src" : "' . $file[0] . '?' . $file[1] . '"' . $ignore_query . ' },' . "\n";}echo trim( trim($entries), ',' );?>]}
