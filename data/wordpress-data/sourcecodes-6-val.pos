<?php/** * Template Name: One column, no sidebar * * A custom page template without sidebar. * * The "Template Name:" bit above allows this to be selectable * from a dropdown menu on the edit page screen. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container" class="one-column">			<div id="content" role="main"><?php if ( have_posts() ) while ( have_posts() ) : the_post(); ?>				<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>					<h1 class="entry-title"><?php the_title(); ?></h1>					<div class="entry-content">						<?php the_content(); ?>						<?php wp_link_pages( array( 'before' => '<div class="page-link">' . __( 'Pages:', 'twentyten' ), 'after' => '</div>' ) ); ?>						<?php edit_post_link( __( 'Edit', 'twentyten' ), '<span class="edit-link">', '</span>' ); ?>					</div><!-- .entry-content -->				</div><!-- #post-## -->				<?php comments_template( '', true ); ?><?php endwhile; ?>			</div><!-- #content -->		</div><!-- #container --><?php get_footer(); ?>
<?php/** * Redirects to the default feed * This file is deprecated and only exists for backwards compatibility * * @package WordPress */require( './wp-load.php' );wp_redirect( get_bloginfo( get_default_feed() . '_url' ), 301 );?>
<?php/** * The Footer widget areas. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */?><?php	/* The footer widget area is triggered if any of the areas	 * have widgets. So let's check that first.	 *	 * If none of the sidebars have widgets, then let's bail early.	 */	if (   ! is_active_sidebar( 'first-footer-widget-area'  )		&& ! is_active_sidebar( 'second-footer-widget-area' )		&& ! is_active_sidebar( 'third-footer-widget-area'  )		&& ! is_active_sidebar( 'fourth-footer-widget-area' )	)		return;	// If we get this far, we have widgets. Let do this.?>			<div id="footer-widget-area" role="complementary"><?php if ( is_active_sidebar( 'first-footer-widget-area' ) ) : ?>				<div id="first" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'first-footer-widget-area' ); ?>					</ul>				</div><!-- #first .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'second-footer-widget-area' ) ) : ?>				<div id="second" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'second-footer-widget-area' ); ?>					</ul>				</div><!-- #second .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'third-footer-widget-area' ) ) : ?>				<div id="third" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'third-footer-widget-area' ); ?>					</ul>				</div><!-- #third .widget-area --><?php endif; ?><?php if ( is_active_sidebar( 'fourth-footer-widget-area' ) ) : ?>				<div id="fourth" class="widget-area">					<ul class="xoxo">						<?php dynamic_sidebar( 'fourth-footer-widget-area' ); ?>					</ul>				</div><!-- #fourth .widget-area --><?php endif; ?>			</div><!-- #footer-widget-area -->
<?php/** * My Sites dashboard. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can('read') )	wp_die( __( 'You do not have sufficient permissions to view this page.' ) );$action = isset( $_POST['action'] ) ? $_POST['action'] : 'splash';$blogs = get_blogs_of_user( $current_user->id );if ( empty( $blogs ) )	wp_die( __( 'You must be a member of at least one site to use this page.' ) );$updated = false;if ( 'updateblogsettings' == $action && isset( $_POST['primary_blog'] ) ) {	check_admin_referer( 'update-my-sites' );	$blog = get_blog_details( (int) $_POST['primary_blog'] );	if ( $blog && isset( $blog->domain ) ) {		update_user_option( $current_user->id, 'primary_blog', (int) $_POST['primary_blog'], true );		$updated = true;	} else {		wp_die( __( 'The primary site you chose does not exist.' ) );	}}$title = __( 'My Sites' );$parent_file = 'index.php';add_contextual_help($current_screen,	'<p>' . __('This screen shows an individual user all of their sites in this network, and also allows that user to set a primary site. He or she can use the links under each site to visit either the frontend or the dashboard for that site.') . '</p>' .	'<p>' . __('Up until WordPress version 3.0, what is now called a Multi-site Network had to be installed separately as WordPress MU (multi-user).') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Dashboard_My_Sites_SubPanel" target="_blank">My Sites Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');require_once( './admin-header.php' );if ( $updated ) { ?>	<div id="message" class="updated"><p><strong><?php _e( 'Settings saved.' ); ?></strong></p></div><?php } ?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form id="myblogs" action="" method="post">	<?php	choose_primary_blog();	do_action( 'myblogs_allblogs_options' );	?>	<br clear="all" />	<table class="widefat fixed">	<?php	$settings_html = apply_filters( 'myblogs_options', '', 'global' );	if ( $settings_html != '' ) {		echo '<tr><td valign="top"><h3>' . __( 'Global Settings' ) . '</h3></td><td>';		echo $settings_html;		echo '</td></tr>';	}	reset( $blogs );	$num = count( $blogs );	$cols = 1;	if ( $num >= 20 )		$cols = 4;	elseif ( $num >= 10 )		$cols = 2;	$num_rows = ceil( $num / $cols );	$split = 0;	for ( $i = 1; $i <= $num_rows; $i++ ) {		$rows[] = array_slice( $blogs, $split, $cols );		$split = $split + $cols;	}	$c = '';	foreach ( $rows as $row ) {		$c = $c == 'alternate' ? '' : 'alternate';		echo "<tr class='$c'>";		$i = 0;		foreach ( $row as $user_blog ) {			$s = $i == 3 ? '' : 'border-right: 1px solid #ccc;';			echo "<td valign='top' style='$s'>";			echo "<h3>{$user_blog->blogname}</h3>";			echo "<p>" . apply_filters( 'myblogs_blog_actions', "<a href='" . esc_url( get_home_url( $user_blog->userblog_id ) ). "'>" . __( 'Visit' ) . "</a> | <a href='" . esc_url( get_admin_url( $user_blog->userblog_id ) ) . "'>" . __( 'Dashboard' ) . "</a>", $user_blog ) . "</p>";			echo apply_filters( 'myblogs_options', '', $user_blog );			echo "</td>";			$i++;		}		echo "</tr>";	}?>	</table>	<input type="hidden" name="action" value="updateblogsettings" />	<?php wp_nonce_field( 'update-my-sites' ); ?>	<p>	 <input type="submit" class="button-primary" value="<?php _e( 'Save Changes' ) ?>" />	</p>	</form>	</div><?phpinclude( './admin-footer.php' );?>
<?php/** * These functions can be replaced via plugins. If plugins do not redefine these * functions, then these will be used instead. * * @package WordPress */if ( !function_exists('wp_set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * Some WordPress functionality is based on the current user and not based on * the signed in user. Therefore, it opens the ability to edit and perform * actions on users who aren't signed in. * * @since 2.0.3 * @global object $current_user The current user object which holds the user data. * @uses do_action() Calls 'set_current_user' hook after setting the current user. * * @param int $id User ID * @param string $name User's username * @return WP_User Current user User object */function wp_set_current_user($id, $name = '') {	global $current_user;	if ( isset($current_user) && ($id == $current_user->ID) )		return $current_user;	$current_user = new WP_User($id, $name);	setup_userdata($current_user->ID);	do_action('set_current_user');	return $current_user;}endif;if ( !function_exists('wp_get_current_user') ) :/** * Retrieve the current user object. * * @since 2.0.3 * * @return WP_User Current user WP_User object */function wp_get_current_user() {	global $current_user;	get_currentuserinfo();	return $current_user;}endif;if ( !function_exists('get_currentuserinfo') ) :/** * Populate global variables with information about the currently logged in user. * * Will set the current user, if the current user is not set. The current user * will be set to the logged in person. If no user is logged in, then it will * set the current user to 0, which is invalid and won't have any permissions. * * @since 0.71 * @uses $current_user Checks if the current user is set * @uses wp_validate_auth_cookie() Retrieves current logged in user. * * @return bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set */function get_currentuserinfo() {	global $current_user;	if ( defined('XMLRPC_REQUEST') && XMLRPC_REQUEST )		return false;	if ( ! empty($current_user) )		return;	if ( ! $user = wp_validate_auth_cookie() ) {		 if ( is_admin() || empty($_COOKIE[LOGGED_IN_COOKIE]) || !$user = wp_validate_auth_cookie($_COOKIE[LOGGED_IN_COOKIE], 'logged_in') ) {		 	wp_set_current_user(0);		 	return false;		 }	}	wp_set_current_user($user);}endif;if ( !function_exists('get_userdata') ) :/** * Retrieve user info by user ID. * * @since 0.71 * * @param int $user_id User ID * @return bool|object False on failure, User DB row object */function get_userdata( $user_id ) {	global $wpdb;	if ( ! is_numeric( $user_id ) )		return false;	$user_id = absint( $user_id );	if ( ! $user_id )		return false;	$user = wp_cache_get( $user_id, 'users' );	if ( $user )		return $user;	if ( ! $user = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d LIMIT 1", $user_id ) ) )		return false;	_fill_user( $user );	return $user;}endif;if ( !function_exists('cache_users') ) :/** * Retrieve info for user lists to prevent multiple queries by get_userdata() * * @since 3.0.0 * * @param array $users User ID numbers list */function cache_users( $users ) {	global $wpdb;	$clean = array();	foreach($users as $id) {		$id = (int) $id;		if (wp_cache_get($id, 'users')) {			// seems to be cached already		} else {			$clean[] = $id;		}	}	if ( 0 == count($clean) )		return;	$list = implode(',', $clean);	$results = $wpdb->get_results("SELECT * FROM $wpdb->users WHERE ID IN ($list)");	_fill_many_users($results);}endif;if ( !function_exists('get_user_by') ) :/** * Retrieve user info by a given field * * @since 2.8.0 * * @param string $field The field to retrieve the user with.  id | slug | email | login * @param int|string $value A value for $field.  A user ID, slug, email address, or login name. * @return bool|object False on failure, User DB row object */function get_user_by($field, $value) {	global $wpdb;	switch ($field) {		case 'id':			return get_userdata($value);			break;		case 'slug':			$user_id = wp_cache_get($value, 'userslugs');			$field = 'user_nicename';			break;		case 'email':			$user_id = wp_cache_get($value, 'useremail');			$field = 'user_email';			break;		case 'login':			$value = sanitize_user( $value );			$user_id = wp_cache_get($value, 'userlogins');			$field = 'user_login';			break;		default:			return false;	}	 if ( false !== $user_id )		return get_userdata($user_id);	if ( !$user = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->users WHERE $field = %s", $value) ) )		return false;	_fill_user($user);	return $user;}endif;if ( !function_exists('get_userdatabylogin') ) :/** * Retrieve user info by login name. * * @since 0.71 * * @param string $user_login User's username * @return bool|object False on failure, User DB row object */function get_userdatabylogin($user_login) {	return get_user_by('login', $user_login);}endif;if ( !function_exists('get_user_by_email') ) :/** * Retrieve user info by email. * * @since 2.5 * * @param string $email User's email address * @return bool|object False on failure, User DB row object */function get_user_by_email($email) {	return get_user_by('email', $email);}endif;if ( !function_exists( 'wp_mail' ) ) :/** * Send mail, similar to PHP's mail * * A true return value does not automatically mean that the user received the * email successfully. It just only means that the method used was able to * process the request without any errors. * * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from * creating a from address like 'Name <email@address.com>' when both are set. If * just 'wp_mail_from' is set, then just the email address will be used with no * name. * * The default content type is 'text/plain' which does not allow using HTML. * However, you can set the content type of the email by using the * 'wp_mail_content_type' filter. * * The default charset is based on the charset used on the blog. The charset can * be set using the 'wp_mail_charset' filter. * * @since 1.2.1 * @uses apply_filters() Calls 'wp_mail' hook on an array of all of the parameters. * @uses apply_filters() Calls 'wp_mail_from' hook to get the from email address. * @uses apply_filters() Calls 'wp_mail_from_name' hook to get the from address name. * @uses apply_filters() Calls 'wp_mail_content_type' hook to get the email content type. * @uses apply_filters() Calls 'wp_mail_charset' hook to get the email charset * @uses do_action_ref_array() Calls 'phpmailer_init' hook on the reference to *		phpmailer object. * @uses PHPMailer * @ * * @param string|array $to Array or comma-separated list of email addresses to send message. * @param string $subject Email subject * @param string $message Message contents * @param string|array $headers Optional. Additional headers. * @param string|array $attachments Optional. Files to attach. * @return bool Whether the email contents were sent successfully. */function wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {	// Compact the input, apply the filters, and extract them back out	extract( apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) ) );	if ( !is_array($attachments) )		$attachments = explode( "\n", str_replace( "\r\n", "\n", $attachments ) );	global $phpmailer;	// (Re)create it, if it's gone missing	if ( !is_object( $phpmailer ) || !is_a( $phpmailer, 'PHPMailer' ) ) {		require_once ABSPATH . WPINC . '/class-phpmailer.php';		require_once ABSPATH . WPINC . '/class-smtp.php';		$phpmailer = new PHPMailer();	}	// Headers	if ( empty( $headers ) ) {		$headers = array();	} else {		if ( !is_array( $headers ) ) {			// Explode the headers out, so this function can take both			// string headers and an array of headers.			$tempheaders = explode( "\n", str_replace( "\r\n", "\n", $headers ) );		} else {			$tempheaders = $headers;		}		$headers = array();		// If it's actually got contents		if ( !empty( $tempheaders ) ) {			// Iterate through the raw headers			foreach ( (array) $tempheaders as $header ) {				if ( strpos($header, ':') === false ) {					if ( false !== stripos( $header, 'boundary=' ) ) {						$parts = preg_split('/boundary=/i', trim( $header ) );						$boundary = trim( str_replace( array( "'", '"' ), '', $parts[1] ) );					}					continue;				}				// Explode them out				list( $name, $content ) = explode( ':', trim( $header ), 2 );				// Cleanup crew				$name    = trim( $name    );				$content = trim( $content );				switch ( strtolower( $name ) ) {					// Mainly for legacy -- process a From: header if it's there					case 'from':						if ( strpos($content, '<' ) !== false ) {							// So... making my life hard again?							$from_name = substr( $content, 0, strpos( $content, '<' ) - 1 );							$from_name = str_replace( '"', '', $from_name );							$from_name = trim( $from_name );							$from_email = substr( $content, strpos( $content, '<' ) + 1 );							$from_email = str_replace( '>', '', $from_email );							$from_email = trim( $from_email );						} else {							$from_email = trim( $content );						}						break;					case 'content-type':						if ( strpos( $content, ';' ) !== false ) {							list( $type, $charset ) = explode( ';', $content );							$content_type = trim( $type );							if ( false !== stripos( $charset, 'charset=' ) ) {								$charset = trim( str_replace( array( 'charset=', '"' ), '', $charset ) );							} elseif ( false !== stripos( $charset, 'boundary=' ) ) {								$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '"' ), '', $charset ) );								$charset = '';							}						} else {							$content_type = trim( $content );						}						break;					case 'cc':						$cc = array_merge( (array) $cc, explode( ',', $content ) );						break;					case 'bcc':						$bcc = array_merge( (array) $bcc, explode( ',', $content ) );						break;					default:						// Add it to our grand headers array						$headers[trim( $name )] = trim( $content );						break;				}			}		}	}	// Empty out the values that may be set	$phpmailer->ClearAddresses();	$phpmailer->ClearAllRecipients();	$phpmailer->ClearAttachments();	$phpmailer->ClearBCCs();	$phpmailer->ClearCCs();	$phpmailer->ClearCustomHeaders();	$phpmailer->ClearReplyTos();	// From email and name	// If we don't have a name from the input headers	if ( !isset( $from_name ) )		$from_name = 'WordPress';	/* If we don't have an email from the input headers default to wordpress@$sitename	 * Some hosts will block outgoing mail from this address if it doesn't exist but	 * there's no easy alternative. Defaulting to admin_email might appear to be another	 * option but some hosts may refuse to relay mail from an unknown domain. See	 * http://trac.wordpress.org/ticket/5007.	 */	if ( !isset( $from_email ) ) {		// Get the site domain and get rid of www.		$sitename = strtolower( $_SERVER['SERVER_NAME'] );		if ( substr( $sitename, 0, 4 ) == 'www.' ) {			$sitename = substr( $sitename, 4 );		}		$from_email = 'wordpress@' . $sitename;	}	// Plugin authors can override the potentially troublesome default	$phpmailer->From     = apply_filters( 'wp_mail_from'     , $from_email );	$phpmailer->FromName = apply_filters( 'wp_mail_from_name', $from_name  );	// Set destination addresses	if ( !is_array( $to ) )		$to = explode( ',', $to );	foreach ( (array) $to as $recipient ) {		$phpmailer->AddAddress( trim( $recipient ) );	}	// Set mail's subject and body	$phpmailer->Subject = $subject;	$phpmailer->Body    = $message;	// Add any CC and BCC recipients	if ( !empty( $cc ) ) {		foreach ( (array) $cc as $recipient ) {			$phpmailer->AddCc( trim($recipient) );		}	}	if ( !empty( $bcc ) ) {		foreach ( (array) $bcc as $recipient) {			$phpmailer->AddBcc( trim($recipient) );		}	}	// Set to use PHP's mail()	$phpmailer->IsMail();	// Set Content-Type and charset	// If we don't have a content-type from the input headers	if ( !isset( $content_type ) )		$content_type = 'text/plain';	$content_type = apply_filters( 'wp_mail_content_type', $content_type );	$phpmailer->ContentType = $content_type;	// Set whether it's plaintext, depending on $content_type	if ( 'text/html' == $content_type )		$phpmailer->IsHTML( true );	// If we don't have a charset from the input headers	if ( !isset( $charset ) )		$charset = get_bloginfo( 'charset' );	// Set the content-type and charset	$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );	// Set custom headers	if ( !empty( $headers ) ) {		foreach( (array) $headers as $name => $content ) {			$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );		}		if ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )			$phpmailer->AddCustomHeader( sprintf( "Content-Type: %s;\n\t boundary=\"%s\"", $content_type, $boundary ) );	}	if ( !empty( $attachments ) ) {		foreach ( $attachments as $attachment ) {			$phpmailer->AddAttachment($attachment);		}	}	do_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );	// Send!	$result = @$phpmailer->Send();	return $result;}endif;if ( !function_exists('wp_authenticate') ) :/** * Checks a user's login information and logs them in if it checks out. * * @since 2.5.0 * * @param string $username User's username * @param string $password User's password * @return WP_Error|WP_User WP_User object if login successful, otherwise WP_Error object. */function wp_authenticate($username, $password) {	$username = sanitize_user($username);	$password = trim($password);	$user = apply_filters('authenticate', null, $username, $password);	if ( $user == null ) {		// TODO what should the error message be? (Or would these even happen?)		// Only needed if all authentication handlers fail to return anything.		$user = new WP_Error('authentication_failed', __('<strong>ERROR</strong>: Invalid username or incorrect password.'));	}	$ignore_codes = array('empty_username', 'empty_password');	if (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {		do_action('wp_login_failed', $username);	}	return $user;}endif;if ( !function_exists('wp_logout') ) :/** * Log the current user out. * * @since 2.5.0 */function wp_logout() {	wp_clear_auth_cookie();	do_action('wp_logout');}endif;if ( !function_exists('wp_validate_auth_cookie') ) :/** * Validates authentication cookie. * * The checks include making sure that the authentication cookie is set and * pulling in the contents (if $cookie is not used). * * Makes sure the cookie is not expired. Verifies the hash in cookie is what is * should be and compares the two. * * @since 2.5 * * @param string $cookie Optional. If used, will validate contents instead of cookie's * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return bool|int False if invalid cookie, User ID if valid. */function wp_validate_auth_cookie($cookie = '', $scheme = '') {	if ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {		do_action('auth_cookie_malformed', $cookie, $scheme);		return false;	}	extract($cookie_elements, EXTR_OVERWRITE);	$expired = $expiration;	// Allow a grace period for POST and AJAX requests	if ( defined('DOING_AJAX') || 'POST' == $_SERVER['REQUEST_METHOD'] )		$expired += 3600;	// Quick check to see if an honest cookie has expired	if ( $expired < time() ) {		do_action('auth_cookie_expired', $cookie_elements);		return false;	}	$user = get_userdatabylogin($username);	if ( ! $user ) {		do_action('auth_cookie_bad_username', $cookie_elements);		return false;	}	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($username . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $username . '|' . $expiration, $key);	if ( $hmac != $hash ) {		do_action('auth_cookie_bad_hash', $cookie_elements);		return false;	}	if ( $expiration < time() ) // AJAX/POST grace period set above		$GLOBALS['login_grace_period'] = 1;	do_action('auth_cookie_valid', $cookie_elements, $user);	return $user->ID;}endif;if ( !function_exists('wp_generate_auth_cookie') ) :/** * Generate authentication cookie contents. * * @since 2.5 * @uses apply_filters() Calls 'auth_cookie' hook on $cookie contents, User ID *		and expiration of cookie. * * @param int $user_id User ID * @param int $expiration Cookie expiration in seconds * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return string Authentication cookie contents */function wp_generate_auth_cookie($user_id, $expiration, $scheme = 'auth') {	$user = get_userdata($user_id);	$pass_frag = substr($user->user_pass, 8, 4);	$key = wp_hash($user->user_login . $pass_frag . '|' . $expiration, $scheme);	$hash = hash_hmac('md5', $user->user_login . '|' . $expiration, $key);	$cookie = $user->user_login . '|' . $expiration . '|' . $hash;	return apply_filters('auth_cookie', $cookie, $user_id, $expiration, $scheme);}endif;if ( !function_exists('wp_parse_auth_cookie') ) :/** * Parse a cookie into its components * * @since 2.7 * * @param string $cookie * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in * @return array Authentication cookie components */function wp_parse_auth_cookie($cookie = '', $scheme = '') {	if ( empty($cookie) ) {		switch ($scheme){			case 'auth':				$cookie_name = AUTH_COOKIE;				break;			case 'secure_auth':				$cookie_name = SECURE_AUTH_COOKIE;				break;			case "logged_in":				$cookie_name = LOGGED_IN_COOKIE;				break;			default:				if ( is_ssl() ) {					$cookie_name = SECURE_AUTH_COOKIE;					$scheme = 'secure_auth';				} else {					$cookie_name = AUTH_COOKIE;					$scheme = 'auth';				}	    }		if ( empty($_COOKIE[$cookie_name]) )			return false;		$cookie = $_COOKIE[$cookie_name];	}	$cookie_elements = explode('|', $cookie);	if ( count($cookie_elements) != 3 )		return false;	list($username, $expiration, $hmac) = $cookie_elements;	return compact('username', 'expiration', 'hmac', 'scheme');}endif;if ( !function_exists('wp_set_auth_cookie') ) :/** * Sets the authentication cookies based User ID. * * The $remember parameter increases the time that the cookie will be kept. The * default the cookie is kept without remembering is two days. When $remember is * set, the cookies will be kept for 14 days or two weeks. * * @since 2.5 * * @param int $user_id User ID * @param bool $remember Whether to remember the user */function wp_set_auth_cookie($user_id, $remember = false, $secure = '') {	if ( $remember ) {		$expiration = $expire = time() + apply_filters('auth_cookie_expiration', 1209600, $user_id, $remember);	} else {		$expiration = time() + apply_filters('auth_cookie_expiration', 172800, $user_id, $remember);		$expire = 0;	}	if ( '' === $secure )		$secure = is_ssl();	if ( $secure ) {		$auth_cookie_name = SECURE_AUTH_COOKIE;		$scheme = 'secure_auth';	} else {		$auth_cookie_name = AUTH_COOKIE;		$scheme = 'auth';	}	$auth_cookie = wp_generate_auth_cookie($user_id, $expiration, $scheme);	$logged_in_cookie = wp_generate_auth_cookie($user_id, $expiration, 'logged_in');	do_action('set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme);	do_action('set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in');	// Set httponly if the php version is >= 5.2.0	if ( version_compare(phpversion(), '5.2.0', 'ge') ) {		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, false, true);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, false, true);	} else {		$cookie_domain = COOKIE_DOMAIN;		if ( !empty($cookie_domain) )			$cookie_domain .= '; HttpOnly';		setcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, $cookie_domain, $secure);		setcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, $cookie_domain, $secure);		setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, $cookie_domain);		if ( COOKIEPATH != SITECOOKIEPATH )			setcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, $cookie_domain);	}}endif;if ( !function_exists('wp_clear_auth_cookie') ) :/** * Removes all of the cookies associated with authentication. * * @since 2.5 */function wp_clear_auth_cookie() {	do_action('clear_auth_cookie');	setcookie(AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, ADMIN_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(LOGGED_IN_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Old cookies	setcookie(AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(SECURE_AUTH_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	// Even older cookies	setcookie(USER_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, COOKIEPATH, COOKIE_DOMAIN);	setcookie(USER_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);	setcookie(PASS_COOKIE, ' ', time() - 31536000, SITECOOKIEPATH, COOKIE_DOMAIN);}endif;if ( !function_exists('is_user_logged_in') ) :/** * Checks if the current visitor is a logged in user. * * @since 2.0.0 * * @return bool True if user is logged in, false if not logged in. */function is_user_logged_in() {	$user = wp_get_current_user();	if ( $user->id == 0 )		return false;	return true;}endif;if ( !function_exists('auth_redirect') ) :/** * Checks if a user is logged in, if not it redirects them to the login page. * * @since 1.5 */function auth_redirect() {	// Checks if a user is logged in, if not redirects them to the login page	$secure = ( is_ssl() || force_ssl_admin() );	// If https is required and request is http, redirect	if ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {		if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {			wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));			exit();		} else {			wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);			exit();		}	}	if ( $user_id = wp_validate_auth_cookie( '', apply_filters( 'auth_redirect_scheme', '' ) ) ) {		do_action('auth_redirect', $user_id);		// If the user wants ssl but the session is not ssl, redirect.		if ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {			if ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {				wp_redirect(preg_replace('|^http://|', 'https://', $_SERVER['REQUEST_URI']));				exit();			} else {				wp_redirect('https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);				exit();			}		}		return;  // The cookie is good so we're done	}	// The cookie is no good so force login	nocache_headers();	if ( is_ssl() )		$proto = 'https://';	else		$proto = 'http://';	$redirect = ( strpos($_SERVER['REQUEST_URI'], '/options.php') && wp_get_referer() ) ? wp_get_referer() : $proto . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];	$login_url = wp_login_url($redirect, true);	wp_redirect($login_url);	exit();}endif;if ( !function_exists('check_admin_referer') ) :/** * Makes sure that a user was referred from another admin page. * * To avoid security exploits. * * @since 1.2.0 * @uses do_action() Calls 'check_admin_referer' on $action. * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_admin_referer($action = -1, $query_arg = '_wpnonce') {	$adminurl = strtolower(admin_url());	$referer = strtolower(wp_get_referer());	$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;	if ( !$result && !(-1 == $action && strpos($referer, $adminurl) !== false) ) {		wp_nonce_ays($action);		die();	}	do_action('check_admin_referer', $action, $result);	return $result;}endif;if ( !function_exists('check_ajax_referer') ) :/** * Verifies the AJAX request to prevent processing requests external of the blog. * * @since 2.0.3 * * @param string $action Action nonce * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5) */function check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {	if ( $query_arg )		$nonce = $_REQUEST[$query_arg];	else		$nonce = isset($_REQUEST['_ajax_nonce']) ? $_REQUEST['_ajax_nonce'] : $_REQUEST['_wpnonce'];	$result = wp_verify_nonce( $nonce, $action );	if ( $die && false == $result )		die('-1');	do_action('check_ajax_referer', $action, $result);	return $result;}endif;if ( !function_exists('wp_redirect') ) :/** * Redirects to another page, with a workaround for the IIS Set-Cookie bug. * * @link http://support.microsoft.com/kb/q176113/ * @since 1.5.1 * @uses apply_filters() Calls 'wp_redirect' hook on $location and $status. * * @param string $location The path to redirect to * @param int $status Status code to use * @return bool False if $location is not set */function wp_redirect($location, $status = 302) {	global $is_IIS;	$location = apply_filters('wp_redirect', $location, $status);	$status = apply_filters('wp_redirect_status', $status, $location);	if ( !$location ) // allows the wp_redirect filter to cancel a redirect		return false;	$location = wp_sanitize_redirect($location);	if ( $is_IIS ) {		header("Refresh: 0;url=$location");	} else {		if ( php_sapi_name() != 'cgi-fcgi' )			status_header($status); // This causes problems on IIS and some FastCGI setups		header("Location: $location", true, $status);	}}endif;if ( !function_exists('wp_sanitize_redirect') ) :/** * Sanitizes a URL for use in a redirect. * * @since 2.3 * * @return string redirect-sanitized URL **/function wp_sanitize_redirect($location) {	$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!]|i', '', $location);	$location = wp_kses_no_null($location);	// remove %0d and %0a from location	$strip = array('%0d', '%0a', '%0D', '%0A');	$location = _deep_replace($strip, $location);	return $location;}endif;if ( !function_exists('wp_safe_redirect') ) :/** * Performs a safe (local) redirect, using wp_redirect(). * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to wp-admin on the siteurl * instead. This prevents malicious redirects which redirect to another host, * but only used in a few places. * * @since 2.3 * @uses wp_validate_redirect() To validate the redirect is to an allowed host. * * @return void Does not return anything **/function wp_safe_redirect($location, $status = 302) {	// Need to look at the URL the way it will end up in wp_redirect()	$location = wp_sanitize_redirect($location);	$location = wp_validate_redirect($location, admin_url());	wp_redirect($location, $status);}endif;if ( !function_exists('wp_validate_redirect') ) :/** * Validates a URL for use in a redirect. * * Checks whether the $location is using an allowed host, if it has an absolute * path. A plugin can therefore set or remove allowed host(s) to or from the * list. * * If the host is not allowed, then the redirect is to $default supplied * * @since 2.8.1 * @uses apply_filters() Calls 'allowed_redirect_hosts' on an array containing *		WordPress host string and $location host string. * * @param string $location The redirect to validate * @param string $default The value to return is $location is not allowed * @return string redirect-sanitized URL **/function wp_validate_redirect($location, $default = '') {	// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'	if ( substr($location, 0, 2) == '//' )		$location = 'http:' . $location;	// In php 5 parse_url may fail if the URL query part contains http://, bug #38143	$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;	$lp  = parse_url($test);	// Give up if malformed URL	if ( false === $lp )		return $default;	// Allow only http and https schemes. No data:, etc.	if ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )		return $default;	// Reject if scheme is set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.	if ( isset($lp['scheme'])  && !isset($lp['host']) )		return $default;	$wpp = parse_url(home_url());	$allowed_hosts = (array) apply_filters('allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '');	if ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )		$location = $default;	return $location;}endif;if ( ! function_exists('wp_notify_postauthor') ) :/** * Notify an author of a comment/trackback/pingback to one of their posts. * * @since 1.0.0 * * @param int $comment_id Comment ID * @param string $comment_type Optional. The comment type either 'comment' (default), 'trackback', or 'pingback' * @return bool False if user email does not exist. True on completion. */function wp_notify_postauthor($comment_id, $comment_type='') {	$comment = get_comment($comment_id);	$post    = get_post($comment->comment_post_ID);	$user    = get_userdata( $post->post_author );	if ( $comment->user_id == $post->post_author ) return false; // The author moderated a comment on his own post	if ('' == $user->user_email) return false; // If there's no email to send the comment to	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	if ( empty( $comment_type ) ) $comment_type = 'comment';	if ('comment' == $comment_type) {		$notify_message  = sprintf( __( 'New comment on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";		$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all comments on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Comment: "%2$s"'), $blogname, $post->post_title );	} elseif ('trackback' == $comment_type) {		$notify_message  = sprintf( __( 'New trackback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: website name, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";		$notify_message .= __('You can see all trackbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Trackback: "%2$s"'), $blogname, $post->post_title );	} elseif ('pingback' == $comment_type) {		$notify_message  = sprintf( __( 'New pingback on your post "%s"' ), $post->post_title ) . "\r\n";		/* translators: 1: comment author, 2: author IP, 3: author domain */		$notify_message .= sprintf( __('Website: %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";		$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";		$notify_message .= __('Excerpt: ') . "\r\n" . sprintf('[...] %s [...]', $comment->comment_content ) . "\r\n\r\n";		$notify_message .= __('You can see all pingbacks on this post here: ') . "\r\n";		/* translators: 1: blog name, 2: post title */		$subject = sprintf( __('[%1$s] Pingback: "%2$s"'), $blogname, $post->post_title );	}	$notify_message .= get_permalink($comment->comment_post_ID) . "#comments\r\n\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$wp_email = 'wordpress@' . preg_replace('#^www\.#', '', strtolower($_SERVER['SERVER_NAME']));	if ( '' == $comment->comment_author ) {		$from = "From: \"$blogname\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: $comment->comment_author_email";	} else {		$from = "From: \"$comment->comment_author\" <$wp_email>";		if ( '' != $comment->comment_author_email )			$reply_to = "Reply-To: \"$comment->comment_author_email\" <$comment->comment_author_email>";	}	$message_headers = "$from\n"		. "Content-Type: text/plain; charset=\"" . get_option('blog_charset') . "\"\n";	if ( isset($reply_to) )		$message_headers .= $reply_to . "\n";	$notify_message = apply_filters('comment_notification_text', $notify_message, $comment_id);	$subject = apply_filters('comment_notification_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_notification_headers', $message_headers, $comment_id);	@wp_mail($user->user_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_notify_moderator') ) :/** * Notifies the moderator of the blog about a new comment that is awaiting approval. * * @since 1.0 * @uses $wpdb * * @param int $comment_id Comment ID * @return bool Always returns true */function wp_notify_moderator($comment_id) {	global $wpdb;	if( get_option( "moderation_notify" ) == 0 )		return true;	$comment = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_ID=%d LIMIT 1", $comment_id));	$post = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->posts WHERE ID=%d LIMIT 1", $comment->comment_post_ID));	$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);	$comments_waiting = $wpdb->get_var("SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'");	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	switch ($comment->comment_type)	{		case 'trackback':			$notify_message  = sprintf( __('A new trackback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Trackback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		case 'pingback':			$notify_message  = sprintf( __('A new pingback on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Website : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= __('Pingback excerpt: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;		default: //Comments			$notify_message  = sprintf( __('A new comment on the post "%s" is waiting for your approval'), $post->post_title ) . "\r\n";			$notify_message .= get_permalink($comment->comment_post_ID) . "\r\n\r\n";			$notify_message .= sprintf( __('Author : %1$s (IP: %2$s , %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . "\r\n";			$notify_message .= sprintf( __('E-mail : %s'), $comment->comment_author_email ) . "\r\n";			$notify_message .= sprintf( __('URL    : %s'), $comment->comment_author_url ) . "\r\n";			$notify_message .= sprintf( __('Whois  : http://ws.arin.net/cgi-bin/whois.pl?queryinput=%s'), $comment->comment_author_IP ) . "\r\n";			$notify_message .= __('Comment: ') . "\r\n" . $comment->comment_content . "\r\n\r\n";			break;	}	$notify_message .= sprintf( __('Approve it: %s'),  admin_url("comment.php?action=approve&c=$comment_id") ) . "\r\n";	if ( EMPTY_TRASH_DAYS )		$notify_message .= sprintf( __('Trash it: %s'), admin_url("comment.php?action=trash&c=$comment_id") ) . "\r\n";	else		$notify_message .= sprintf( __('Delete it: %s'), admin_url("comment.php?action=delete&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( __('Spam it: %s'), admin_url("comment.php?action=spam&c=$comment_id") ) . "\r\n";	$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:', 		'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . "\r\n";	$notify_message .= admin_url("edit-comments.php?comment_status=moderated") . "\r\n";	$subject = sprintf( __('[%1$s] Please moderate: "%2$s"'), $blogname, $post->post_title );	$admin_email = get_option('admin_email');	$message_headers = '';	$notify_message = apply_filters('comment_moderation_text', $notify_message, $comment_id);	$subject = apply_filters('comment_moderation_subject', $subject, $comment_id);	$message_headers = apply_filters('comment_moderation_headers', $message_headers);	@wp_mail($admin_email, $subject, $notify_message, $message_headers);	return true;}endif;if ( !function_exists('wp_password_change_notification') ) :/** * Notify the blog admin of a user changing password, normally via email. * * @since 2.7 * * @param object $user User Object */function wp_password_change_notification(&$user) {	// send a copy of password change notification to the admin	// but check to see if it's the admin whose password we're changing, and skip this	if ( $user->user_email != get_option('admin_email') ) {		$message = sprintf(__('Password Lost and Changed for user: %s'), $user->user_login) . "\r\n";		// The blogname option is escaped with esc_html on the way into the database in sanitize_option		// we want to reverse this for the plain text arena of emails.		$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);		wp_mail(get_option('admin_email'), sprintf(__('[%s] Password Lost/Changed'), $blogname), $message);	}}endif;if ( !function_exists('wp_new_user_notification') ) :/** * Notify the blog admin of a new user, normally via email. * * @since 2.0 * * @param int $user_id User ID * @param string $plaintext_pass Optional. The user's plaintext password */function wp_new_user_notification($user_id, $plaintext_pass = '') {	$user = new WP_User($user_id);	$user_login = stripslashes($user->user_login);	$user_email = stripslashes($user->user_email);	// The blogname option is escaped with esc_html on the way into the database in sanitize_option	// we want to reverse this for the plain text arena of emails.	$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);	$message  = sprintf(__('New user registration on your site %s:'), $blogname) . "\r\n\r\n";	$message .= sprintf(__('Username: %s'), $user_login) . "\r\n\r\n";	$message .= sprintf(__('E-mail: %s'), $user_email) . "\r\n";	@wp_mail(get_option('admin_email'), sprintf(__('[%s] New User Registration'), $blogname), $message);	if ( empty($plaintext_pass) )		return;	$message  = sprintf(__('Username: %s'), $user_login) . "\r\n";	$message .= sprintf(__('Password: %s'), $plaintext_pass) . "\r\n";	$message .= wp_login_url() . "\r\n";	wp_mail($user_email, sprintf(__('[%s] Your username and password'), $blogname), $message);}endif;if ( !function_exists('wp_nonce_tick') ) :/** * Get the time-dependent variable for nonce creation. * * A nonce has a lifespan of two ticks. Nonces in their second tick may be * updated, e.g. by autosave. * * @since 2.5 * * @return int */function wp_nonce_tick() {	$nonce_life = apply_filters('nonce_life', 86400);	return ceil(time() / ( $nonce_life / 2 ));}endif;if ( !function_exists('wp_verify_nonce') ) :/** * Verify that correct nonce was used with time limit. * * The user is given an amount of time to use the token, so therefore, since the * UID and $action remain the same, the independent variable is the time. * * @since 2.0.3 * * @param string $nonce Nonce that was used in the form to verify * @param string|int $action Should give context to what is taking place and be the same when nonce was created. * @return bool Whether the nonce check passed or failed. */function wp_verify_nonce($nonce, $action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	// Nonce generated 0-12 hours ago	if ( substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 1;	// Nonce generated 12-24 hours ago	if ( substr(wp_hash(($i - 1) . $action . $uid, 'nonce'), -12, 10) == $nonce )		return 2;	// Invalid nonce	return false;}endif;if ( !function_exists('wp_create_nonce') ) :/** * Creates a random, one time use token. * * @since 2.0.3 * * @param string|int $action Scalar value to add context to the nonce. * @return string The one use form token */function wp_create_nonce($action = -1) {	$user = wp_get_current_user();	$uid = (int) $user->id;	$i = wp_nonce_tick();	return substr(wp_hash($i . $action . $uid, 'nonce'), -12, 10);}endif;if ( !function_exists('wp_salt') ) :/** * Get salt to add to hashes to help prevent attacks. * * The secret key is located in two places: the database in case the secret key * isn't defined in the second place, which is in the wp-config.php file. If you * are going to set the secret key, then you must do so in the wp-config.php * file. * * The secret key in the database is randomly generated and will be appended to * the secret key that is in wp-config.php file in some instances. It is * important to have the secret key defined or changed in wp-config.php. * * If you have installed WordPress 2.5 or later, then you will have the * SECRET_KEY defined in the wp-config.php already. You will want to change the * value in it because hackers will know what it is. If you have upgraded to * WordPress 2.5 or later version from a version before WordPress 2.5, then you * should add the constant to your wp-config.php file. * * Below is an example of how the SECRET_KEY constant is defined with a value. * You must not copy the below example and paste into your wp-config.php. If you * need an example, then you can have a * {@link https://api.wordpress.org/secret-key/1.1/ secret key created} for you. * * <code> * define('SECRET_KEY', 'mAry1HadA15|\/|b17w55w1t3asSn09w'); * </code> * * Salting passwords helps against tools which has stored hashed values of * common dictionary strings. The added values makes it harder to crack if given * salt string is not weak. * * @since 2.5 * @link https://api.wordpress.org/secret-key/1.1/ Create a Secret Key for wp-config.php * * @param string $scheme Authentication scheme * @return string Salt value */function wp_salt($scheme = 'auth') {	global $wp_default_secret_key;	$secret_key = '';	if ( defined('SECRET_KEY') && ('' != SECRET_KEY) && ( $wp_default_secret_key != SECRET_KEY) )		$secret_key = SECRET_KEY;	if ( 'auth' == $scheme ) {		if ( defined('AUTH_KEY') && ('' != AUTH_KEY) && ( $wp_default_secret_key != AUTH_KEY) )			$secret_key = AUTH_KEY;		if ( defined('AUTH_SALT') && ('' != AUTH_SALT) && ( $wp_default_secret_key != AUTH_SALT) ) {			$salt = AUTH_SALT;		} elseif ( defined('SECRET_SALT') && ('' != SECRET_SALT) && ( $wp_default_secret_key != SECRET_SALT) ) {			$salt = SECRET_SALT;		} else {			$salt = get_site_option('auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('auth_salt', $salt);			}		}	} elseif ( 'secure_auth' == $scheme ) {		if ( defined('SECURE_AUTH_KEY') && ('' != SECURE_AUTH_KEY) && ( $wp_default_secret_key != SECURE_AUTH_KEY) )			$secret_key = SECURE_AUTH_KEY;		if ( defined('SECURE_AUTH_SALT') && ('' != SECURE_AUTH_SALT) && ( $wp_default_secret_key != SECURE_AUTH_SALT) ) {			$salt = SECURE_AUTH_SALT;		} else {			$salt = get_site_option('secure_auth_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('secure_auth_salt', $salt);			}		}	} elseif ( 'logged_in' == $scheme ) {		if ( defined('LOGGED_IN_KEY') && ('' != LOGGED_IN_KEY) && ( $wp_default_secret_key != LOGGED_IN_KEY) )			$secret_key = LOGGED_IN_KEY;		if ( defined('LOGGED_IN_SALT') && ('' != LOGGED_IN_SALT) && ( $wp_default_secret_key != LOGGED_IN_SALT) ) {			$salt = LOGGED_IN_SALT;		} else {			$salt = get_site_option('logged_in_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('logged_in_salt', $salt);			}		}	} elseif ( 'nonce' == $scheme ) {		if ( defined('NONCE_KEY') && ('' != NONCE_KEY) && ( $wp_default_secret_key != NONCE_KEY) )			$secret_key = NONCE_KEY;		if ( defined('NONCE_SALT') && ('' != NONCE_SALT) && ( $wp_default_secret_key != NONCE_SALT) ) {			$salt = NONCE_SALT;		} else {			$salt = get_site_option('nonce_salt');			if ( empty($salt) ) {				$salt = wp_generate_password( 64, true, true );				update_site_option('nonce_salt', $salt);			}		}	} else {		// ensure each auth scheme has its own unique salt		$salt = hash_hmac('md5', $scheme, $secret_key);	}	return apply_filters('salt', $secret_key . $salt, $scheme);}endif;if ( !function_exists('wp_hash') ) :/** * Get hash of given string. * * @since 2.0.3 * @uses wp_salt() Get WordPress salt * * @param string $data Plain text to hash * @return string Hash of $data */function wp_hash($data, $scheme = 'auth') {	$salt = wp_salt($scheme);	return hash_hmac('md5', $data, $salt);}endif;if ( !function_exists('wp_hash_password') ) :/** * Create a hash (encrypt) of a plain text password. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object * @uses PasswordHash::HashPassword * * @param string $password Plain text user password to hash * @return string The hash string of the password */function wp_hash_password($password) {	global $wp_hasher;	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	return $wp_hasher->HashPassword($password);}endif;if ( !function_exists('wp_check_password') ) :/** * Checks the plaintext password against the encrypted Password. * * Maintains compatibility between old version and the new cookie authentication * protocol using PHPass library. The $hash parameter is the encrypted password * and the function compares the plain text password when encypted similarly * against the already encrypted password to see if they match. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @global object $wp_hasher PHPass object used for checking the password *	against the $hash + $password * @uses PasswordHash::CheckPassword * * @param string $password Plaintext user's password * @param string $hash Hash of the user's password to check against. * @return bool False, if the $password does not match the hashed password */function wp_check_password($password, $hash, $user_id = '') {	global $wp_hasher;	// If the hash is still md5...	if ( strlen($hash) <= 32 ) {		$check = ( $hash == md5($password) );		if ( $check && $user_id ) {			// Rehash using new hash.			wp_set_password($password, $user_id);			$hash = wp_hash_password($password);		}		return apply_filters('check_password', $check, $password, $hash, $user_id);	}	// If the stored hash is longer than an MD5, presume the	// new style phpass portable hash.	if ( empty($wp_hasher) ) {		require_once( ABSPATH . 'wp-includes/class-phpass.php');		// By default, use the portable hash from phpass		$wp_hasher = new PasswordHash(8, TRUE);	}	$check = $wp_hasher->CheckPassword($password, $hash);	return apply_filters('check_password', $check, $password, $hash, $user_id);}endif;if ( !function_exists('wp_generate_password') ) :/** * Generates a random password drawn from the defined set of characters. * * @since 2.5 * * @param int $length The length of password to generate * @param bool $special_chars Whether to include standard special characters. Default true. * @param bool $extra_special_chars Whether to include other special characters. Used when *   generating secret keys and salts. Default false. * @return string The random password **/function wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';	if ( $special_chars )		$chars .= '!@#$%^&*()';	if ( $extra_special_chars )		$chars .= '-_ []{}<>~`+=,.;:/?|';	$password = '';	for ( $i = 0; $i < $length; $i++ ) {		$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);	}	// random_password filter was previously in random_password function which was deprecated	return apply_filters('random_password', $password);}endif;if ( !function_exists('wp_rand') ) : /** * Generates a random number * * @since 2.6.2 * * @param int $min Lower limit for the generated number (optional, default is 0) * @param int $max Upper limit for the generated number (optional, default is 4294967295) * @return int A random number between min and max */function wp_rand( $min = 0, $max = 0 ) {	global $rnd_value;	// Reset $rnd_value after 14 uses	// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value	if ( strlen($rnd_value) < 8 ) {		if ( defined( 'WP_SETUP_CONFIG' ) )			static $seed = '';		else			$seed = get_transient('random_seed');		$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );		$rnd_value .= sha1($rnd_value);		$rnd_value .= sha1($rnd_value . $seed);		$seed = md5($seed . $rnd_value);		if ( ! defined( 'WP_SETUP_CONFIG' ) )			set_transient('random_seed', $seed);	}	// Take the first 8 digits for our value	$value = substr($rnd_value, 0, 8);	// Strip the first eight, leaving the remainder for the next call to wp_rand().	$rnd_value = substr($rnd_value, 8);	$value = abs(hexdec($value));	// Reduce the value to be within the min - max range	// 4294967295 = 0xffffffff = max random number	if ( $max != 0 )		$value = $min + (($max - $min + 1) * ($value / (4294967295 + 1)));	return abs(intval($value));}endif;if ( !function_exists('wp_set_password') ) :/** * Updates the user's password with a new encrypted one. * * For integration with other applications, this function can be overwritten to * instead use the other package password checking algorithm. * * @since 2.5 * @uses $wpdb WordPress database object for queries * @uses wp_hash_password() Used to encrypt the user's password before passing to the database * * @param string $password The plaintext new user password * @param int $user_id User ID */function wp_set_password( $password, $user_id ) {	global $wpdb;	$hash = wp_hash_password($password);	$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );	wp_cache_delete($user_id, 'users');}endif;if ( !function_exists( 'get_avatar' ) ) :/** * Retrieve the avatar for a user who provided a user ID or email address. * * @since 2.5 * @param int|string|object $id_or_email A user ID,  email address, or comment object * @param int $size Size of the avatar image * @param string $default URL to a default image to use if no avatar is available * @param string $alt Alternate text to use in image tag. Defaults to blank * @return string <img> tag for the user's avatar*/function get_avatar( $id_or_email, $size = '96', $default = '', $alt = false ) {	if ( ! get_option('show_avatars') )		return false;	if ( false === $alt)		$safe_alt = '';	else		$safe_alt = esc_attr( $alt );	if ( !is_numeric($size) )		$size = '96';	$email = '';	if ( is_numeric($id_or_email) ) {		$id = (int) $id_or_email;		$user = get_userdata($id);		if ( $user )			$email = $user->user_email;	} elseif ( is_object($id_or_email) ) {		// No avatar for pingbacks or trackbacks		$allowed_comment_types = apply_filters( 'get_avatar_comment_types', array( 'comment' ) );		if ( ! empty( $id_or_email->comment_type ) && ! in_array( $id_or_email->comment_type, (array) $allowed_comment_types ) )			return false;		if ( !empty($id_or_email->user_id) ) {			$id = (int) $id_or_email->user_id;			$user = get_userdata($id);			if ( $user)				$email = $user->user_email;		} elseif ( !empty($id_or_email->comment_author_email) ) {			$email = $id_or_email->comment_author_email;		}	} else {		$email = $id_or_email;	}	if ( empty($default) ) {		$avatar_default = get_option('avatar_default');		if ( empty($avatar_default) )			$default = 'mystery';		else			$default = $avatar_default;	}	if ( !empty($email) )		$email_hash = md5( strtolower( $email ) );	if ( is_ssl() ) {		$host = 'https://secure.gravatar.com';	} else {		if ( !empty($email) )			$host = sprintf( "http://%d.gravatar.com", ( hexdec( $email_hash{0} ) % 2 ) );		else			$host = 'http://0.gravatar.com';	}	if ( 'mystery' == $default )		$default = "$host/avatar/ad516503a11cd5ca435acc9bb6523536?s={$size}"; // ad516503a11cd5ca435acc9bb6523536 == md5('unknown@gravatar.com')	elseif ( 'blank' == $default )		$default = includes_url('images/blank.gif');	elseif ( !empty($email) && 'gravatar_default' == $default )		$default = '';	elseif ( 'gravatar_default' == $default )		$default = "$host/avatar/s={$size}";	elseif ( empty($email) )		$default = "$host/avatar/?d=$default&amp;s={$size}";	elseif ( strpos($default, 'http://') === 0 )		$default = add_query_arg( 's', $size, $default );	if ( !empty($email) ) {		$out = "$host/avatar/";		$out .= $email_hash;		$out .= '?s='.$size;		$out .= '&amp;d=' . urlencode( $default );		$rating = get_option('avatar_rating');		if ( !empty( $rating ) )			$out .= "&amp;r={$rating}";		$avatar = "<img alt='{$safe_alt}' src='{$out}' class='avatar avatar-{$size} photo' height='{$size}' width='{$size}' />";	} else {		$avatar = "<img alt='{$safe_alt}' src='{$default}' class='avatar avatar-{$size} photo avatar-default' height='{$size}' width='{$size}' />";	}	return apply_filters('get_avatar', $avatar, $id_or_email, $size, $default, $alt);}endif;if ( !function_exists( 'wp_text_diff' ) ) :/** * Displays a human readable HTML representation of the difference between two strings. * * The Diff is available for getting the changes between versions. The output is * HTML, so the primary use is for displaying the changes. If the two strings * are equivalent, then an empty string will be returned. * * The arguments supported and can be changed are listed below. * * 'title' : Default is an empty string. Titles the diff in a manner compatible *		with the output. * 'title_left' : Default is an empty string. Change the HTML to the left of the *		title. * 'title_right' : Default is an empty string. Change the HTML to the right of *		the title. * * @since 2.6 * @see wp_parse_args() Used to change defaults to user defined settings. * @uses Text_Diff * @uses WP_Text_Diff_Renderer_Table * * @param string $left_string "old" (left) version of string * @param string $right_string "new" (right) version of string * @param string|array $args Optional. Change 'title', 'title_left', and 'title_right' defaults. * @return string Empty string if strings are equivalent or HTML with differences. */function wp_text_diff( $left_string, $right_string, $args = null ) {	$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );	$args = wp_parse_args( $args, $defaults );	if ( !class_exists( 'WP_Text_Diff_Renderer_Table' ) )		require( ABSPATH . WPINC . '/wp-diff.php' );	$left_string  = normalize_whitespace($left_string);	$right_string = normalize_whitespace($right_string);	$left_lines  = split("\n", $left_string);	$right_lines = split("\n", $right_string);	$text_diff = new Text_Diff($left_lines, $right_lines);	$renderer  = new WP_Text_Diff_Renderer_Table();	$diff = $renderer->render($text_diff);	if ( !$diff )		return '';	$r  = "<table class='diff'>\n";	$r .= "<col class='ltype' /><col class='content' /><col class='ltype' /><col class='content' />";	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "<thead>";	if ( $args['title'] )		$r .= "<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\n";	if ( $args['title_left'] || $args['title_right'] ) {		$r .= "<tr class='diff-sub-title'>\n";		$r .= "\t<td></td><th>$args[title_left]</th>\n";		$r .= "\t<td></td><th>$args[title_right]</th>\n";		$r .= "</tr>\n";	}	if ( $args['title'] || $args['title_left'] || $args['title_right'] )		$r .= "</thead>\n";	$r .= "<tbody>\n$diff\n</tbody>\n";	$r .= "</table>";	return $r;}endif;
<?php/** * Press This Display and Handler. * * @package WordPress * @subpackage Press_This *//** WordPress Administration Bootstrap */require_once('./admin.php');header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));if ( ! current_user_can('edit_posts') )	wp_die( __( 'Cheatin&#8217; uh?' ) );/** * Press It form handler. * * @package WordPress * @subpackage Press_This * @since 2.6.0 * * @return int Post ID */function press_it() {	// define some basic variables	$quick['post_status'] = 'draft'; // set as draft first	$quick['post_category'] = isset($_POST['post_category']) ? $_POST['post_category'] : null;	$quick['tax_input'] = isset($_POST['tax_input']) ? $_POST['tax_input'] : null;	$quick['post_title'] = ( trim($_POST['title']) != '' ) ? $_POST['title'] : '  ';	$quick['post_content'] = isset($_POST['post_content']) ? $_POST['post_content'] : '';	// insert the post with nothing in it, to get an ID	$post_ID = wp_insert_post($quick, true);	if ( is_wp_error($post_ID) )		wp_die($post_ID);	$content = isset($_POST['content']) ? $_POST['content'] : '';	$upload = false;	if ( !empty($_POST['photo_src']) && current_user_can('upload_files') ) {		foreach( (array) $_POST['photo_src'] as $key => $image) {			// see if files exist in content - we don't want to upload non-used selected files.			if ( strpos($_POST['content'], htmlspecialchars($image)) !== false ) {				$desc = isset($_POST['photo_description'][$key]) ? $_POST['photo_description'][$key] : '';				$upload = media_sideload_image($image, $post_ID, $desc);				// Replace the POSTED content <img> with correct uploaded ones. Regex contains fix for Magic Quotes				if ( !is_wp_error($upload) )					$content = preg_replace('/<img ([^>]*)src=\\\?(\"|\')'.preg_quote(htmlspecialchars($image), '/').'\\\?(\2)([^>\/]*)\/*>/is', $upload, $content);			}		}	}	// set the post_content and status	$quick['post_status'] = isset($_POST['publish']) ? 'publish' : 'draft';	$quick['post_content'] = $content;	// error handling for media_sideload	if ( is_wp_error($upload) ) {		wp_delete_post($post_ID);		wp_die($upload);	} else {		$quick['ID'] = $post_ID;		wp_update_post($quick);	}	return $post_ID;}// For submitted posts.if ( isset($_REQUEST['action']) && 'post' == $_REQUEST['action'] ) {	check_admin_referer('press-this');	$post_ID = press_it();	$posted =  $post_ID;} else {	$post_ID = 0;}// Set Variables$title = isset( $_GET['t'] ) ? trim( strip_tags( html_entity_decode( stripslashes( $_GET['t'] ) , ENT_QUOTES) ) ) : '';$selection = '';if ( !empty($_GET['s']) ) {	$selection = str_replace('&apos;', "'", stripslashes($_GET['s']));	$selection = trim( htmlspecialchars( html_entity_decode($selection, ENT_QUOTES) ) );}if ( ! empty($selection) ) {	$selection = preg_replace('/(\r?\n|\r)/', '</p><p>', $selection);	$selection = '<p>' . str_replace('<p></p>', '', $selection) . '</p>';}$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';$image = isset($_GET['i']) ? $_GET['i'] : '';if ( !empty($_REQUEST['ajax']) ) {	switch ($_REQUEST['ajax']) {		case 'video': ?>			<script type="text/javascript" charset="utf-8">			/* <![CDATA[ */				jQuery('.select').click(function() {					append_editor(jQuery('#embed-code').val());					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});				jQuery('.close').click(function() {					jQuery('#extra-fields').hide();					jQuery('#extra-fields').html('');				});			/* ]]> */			</script>			<div class="postbox">				<h2><label for="embed-code"><?php _e('Embed Code') ?></label></h2>				<div class="inside">					<textarea name="embed-code" id="embed-code" rows="8" cols="40"><?php echo wp_htmledit_pre( $selection ); ?></textarea>					<p id="options"><a href="#" class="select button"><?php _e('Insert Video'); ?></a> <a href="#" class="close button"><?php _e('Cancel'); ?></a></p>				</div>			</div>			<?php break;		case 'photo_thickbox': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo_description"><?php _e('Description') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p class="centered">				<input type="hidden" name="this_photo" value="<?php echo esc_attr($image); ?>" id="this_photo" />				<a href="#" class="select">					<img src="<?php echo esc_url($image); ?>" alt="<?php echo esc_attr(__('Click to insert.')); ?>" title="<?php echo esc_attr(__('Click to insert.')); ?>" />				</a>			</p>			<p id="options"><a href="#" class="select button"><?php _e('Insert Image'); ?></a> <a href="#" class="cancel button"><?php _e('Cancel'); ?></a></p>			<?php break;		case 'photo_thickbox_url': ?>			<script type="text/javascript" charset="utf-8">				/* <![CDATA[ */				jQuery('.cancel').click(function() {					tb_remove();				});				jQuery('.select').click(function() {					image_selector();				});				/* ]]> */			</script>			<h3 class="tb"><label for="this_photo"><?php _e('URL') ?></label></h3>			<div class="titlediv">				<div class="titlewrap">					<input id="this_photo" name="this_photo" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" />				</div>			</div>			<h3 class="tb"><label for="photo_description"><?php _e('Description') ?></label></h3>			<div id="titlediv">				<div class="titlewrap">					<input id="this_photo_description" name="photo_description" class="tbtitle text" onkeypress="if(event.keyCode==13) image_selector();" value="<?php echo esc_attr($title);?>"/>				</div>			</div>			<p id="options"><a href="#" class="select"><?php _e('Insert Image'); ?></a> | <a href="#" class="cancel"><?php _e('Cancel'); ?></a></p>			<?php break;	case 'photo_images':		/**		 * Retrieve all image URLs from given URI.		 *		 * @package WordPress		 * @subpackage Press_This		 * @since 2.6.0		 *		 * @param string $uri		 * @return string		 */		function get_images_from_uri($uri) {			$uri = preg_replace('/\/#.+?$/','', $uri);			if ( preg_match('/\.(jpg|jpe|jpeg|png|gif)$/', $uri) && !strpos($uri,'blogger.com') )				return "'" . esc_attr( html_entity_decode($uri) ) . "'";			$content = wp_remote_fopen($uri);			if ( false === $content )				return '';			$host = parse_url($uri);			$pattern = '/<img ([^>]*)src=(\"|\')([^<>\'\"]+)(\2)([^>]*)\/*>/i';			$content = str_replace(array("\n","\t","\r"), '', $content);			preg_match_all($pattern, $content, $matches);			if ( empty($matches[0]) )				return '';			$sources = array();			foreach ($matches[3] as $src) {				// if no http in url				if (strpos($src, 'http') === false)					// if it doesn't have a relative uri					if ( strpos($src, '../') === false && strpos($src, './') === false && strpos($src, '/') === 0)						$src = 'http://'.str_replace('//','/', $host['host'].'/'.$src);					else						$src = 'http://'.str_replace('//','/', $host['host'].'/'.dirname($host['path']).'/'.$src);				$sources[] = esc_attr($src);			}			return "'" . implode("','", $sources) . "'";		}		$url = wp_kses(urldecode($url), null);		echo 'new Array('.get_images_from_uri($url).')';		break;	case 'photo_js': ?>		// gather images and load some default JS		var last = null		var img, img_tag, aspect, w, h, skip, i, strtoappend = "";		if(photostorage == false) {		var my_src = eval(			jQuery.ajax({		   		type: "GET",		   		url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",				cache : false,				async : false,		   		data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",				dataType : "script"			}).responseText		);		if(my_src.length == 0) {			var my_src = eval(				jQuery.ajax({		   			type: "GET",		   			url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",					cache : false,					async : false,		   			data: "ajax=photo_images&u=<?php echo urlencode($url); ?>",					dataType : "script"				}).responseText			);			if(my_src.length == 0) {				strtoappend = '<?php _e('Unable to retrieve images or no images on page.'); ?>';			}		}		}		for (i = 0; i < my_src.length; i++) {			img = new Image();			img.src = my_src[i];			img_attr = 'id="img' + i + '"';			skip = false;			maybeappend = '<a href="?ajax=photo_thickbox&amp;i=' + encodeURIComponent(img.src) + '&amp;u=<?php echo urlencode($url); ?>&amp;height=400&amp;width=500" title="" class="thickbox"><img src="' + img.src + '" ' + img_attr + '/></a>';			if (img.width && img.height) {				if (img.width >= 30 && img.height >= 30) {					aspect = img.width / img.height;					scale = (aspect > 1) ? (71 / img.width) : (71 / img.height);					w = img.width;					h = img.height;					if (scale < 1) {						w = parseInt(img.width * scale);						h = parseInt(img.height * scale);					}					img_attr += ' style="width: ' + w + 'px; height: ' + h + 'px;"';					strtoappend += maybeappend;				}			} else {				strtoappend += maybeappend;			}		}		function pick(img, desc) {			if (img) {				if('object' == typeof jQuery('.photolist input') && jQuery('.photolist input').length != 0) length = jQuery('.photolist input').length;				if(length == 0) length = 1;				jQuery('.photolist').append('<input name="photo_src[' + length + ']" value="' + img +'" type="hidden"/>');				jQuery('.photolist').append('<input name="photo_description[' + length + ']" value="' + desc +'" type="hidden"/>');				insert_editor( "\n\n" + encodeURI('<p style="text-align: center;"><a href="<?php echo $url; ?>"><img src="' + img +'" alt="' + desc + '" /></a></p>'));			}			return false;		}		function image_selector() {			tb_remove();			desc = jQuery('#this_photo_description').val();			src = jQuery('#this_photo').val();			pick(src, desc);			jQuery('#extra-fields').hide();			jQuery('#extra-fields').html('');			return false;		}			jQuery('#extra-fields').html('<div class="postbox"><h2>Add Photos <small id="photo_directions">(<?php _e("click images to select") ?>)</small></h2><ul class="actions"><li><a href="#" id="photo-add-url" class="thickbox button"><?php _e("Add from URL") ?> +</a></li></ul><div class="inside"><div class="titlewrap"><div id="img_container"></div></div><p id="options"><a href="#" class="close button"><?php _e('Cancel'); ?></a><a href="#" class="refresh button"><?php _e('Refresh'); ?></a></p></div>');			jQuery('#img_container').html(strtoappend);		<?php break;}die;}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>><head>	<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />	<title><?php _e('Press This') ?></title><?php	add_thickbox();	wp_enqueue_style( 'press-this' );	wp_enqueue_style( 'press-this-ie');	wp_enqueue_style( 'colors' );	wp_enqueue_script( 'post' );	wp_enqueue_script( 'editor' );?><script type="text/javascript">//<![CDATA[addLoadEvent = function(func){if(typeof jQuery!="undefined")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};var userSettings = {'url':'<?php echo SITECOOKIEPATH; ?>','uid':'<?php if ( ! isset($current_user) ) $current_user = wp_get_current_user(); echo $current_user->ID; ?>','time':'<?php echo time() ?>'};var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>', pagenow = 'press-this';var photostorage = false;//]]></script><?php	do_action('admin_print_styles');	do_action('admin_print_scripts');	do_action('admin_head');	if ( user_can_richedit() )		wp_tiny_mce( true, array( 'height' => '370' ) );?>	<script type="text/javascript">	function insert_plain_editor(text) {		edCanvas = document.getElementById('content');		edInsertContent(edCanvas, text);	}	function set_editor(text) {		if ( '' == text || '<p></p>' == text ) text = '<p><br /></p>';		if ( tinyMCE.activeEditor ) tinyMCE.execCommand('mceSetContent', false, text);	}	function insert_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceInsertContent', false, '<p>' + decodeURI(tinymce.DOM.decode(text)) + '</p>', {format : 'raw'});		} else {			insert_plain_editor(decodeURI(text));		}	}	function append_editor(text) {		if ( '' != text && tinyMCE.activeEditor && ! tinyMCE.activeEditor.isHidden()) {			tinyMCE.execCommand('mceSetContent', false, tinyMCE.activeEditor.getContent({format : 'raw'}) + '<p>' + text + '</p>');			tinyMCE.execCommand('mceCleanup');		} else {			insert_plain_editor(text);		}	}	function show(tab_name) {		jQuery('#extra-fields').html('');		switch(tab_name) {			case 'video' :				jQuery('#extra-fields').load('<?php echo esc_url($_SERVER['PHP_SELF']); ?>', { ajax: 'video', s: '<?php echo esc_attr($selection); ?>'}, function() {					<?php					$content = '';					if ( preg_match("/youtube\.com\/watch/i", $url) ) {						list($domain, $video_id) = split("v=", $url);						$video_id = esc_attr($video_id);						$content = '<object width="425" height="350"><param name="movie" value="http://www.youtube.com/v/' . $video_id . '"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/' . $video_id . '" type="application/x-shockwave-flash" wmode="transparent" width="425" height="350"></embed></object>';					} elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) {						list($domain, $video_id) = split(".com/", $url);						$video_id = esc_attr($video_id);						$content = '<object width="400" height="225"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />	<embed src="http://www.vimeo.com/moogaloop.swf?clip_id=' . $video_id . '&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="225"></embed></object>';						if ( trim($selection) == '' )							$selection = '<p><a href="http://www.vimeo.com/' . $video_id . '?pg=embed&sec=' . $video_id . '">' . $title . '</a> on <a href="http://vimeo.com?pg=embed&sec=' . $video_id . '">Vimeo</a></p>';					} elseif ( strpos( $selection, '<object' ) !== false ) {						$content = $selection;					}					?>					jQuery('#embed-code').prepend('<?php echo htmlentities($content); ?>');				});				jQuery('#extra-fields').show();				return false;				break;			case 'photo' :				function setup_photo_actions() {					jQuery('.close').click(function() {						jQuery('#extra-fields').hide();						jQuery('#extra-fields').html('');					});					jQuery('.refresh').click(function() {						photostorage = false;						show('photo');					});					jQuery('#photo-add-url').attr('href', '?ajax=photo_thickbox_url&height=200&width=500');					tb_init('#extra-fields .thickbox');					jQuery('#waiting').hide();					jQuery('#extra-fields').show();				}				jQuery('#extra-fields').before('<div id="waiting"><img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" /> <?php echo esc_js( __( 'Loading...' ) ); ?></div>');				if(photostorage == false) {					jQuery.ajax({						type: "GET",						cache : false,						url: "<?php echo esc_url($_SERVER['PHP_SELF']); ?>",						data: "ajax=photo_js&u=<?php echo urlencode($url)?>",						dataType : "script",						success : function(data) {							eval(data);							photostorage = jQuery('#extra-fields').html();							setup_photo_actions();						}					});				} else {					jQuery('#extra-fields').html(photostorage);					setup_photo_actions();				}				return false;				break;		}	}	jQuery(document).ready(function($) {		//resize screen		window.resizeTo(720,540);		// set button actions    	jQuery('#photo_button').click(function() { show('photo'); return false; });		jQuery('#video_button').click(function() { show('video'); return false; });		// auto select		<?php if ( preg_match("/youtube\.com\/watch/i", $url) ) { ?>			show('video');		<?php } elseif ( preg_match("/vimeo\.com\/[0-9]+/i", $url) ) { ?>			show('video');		<?php  } elseif ( preg_match("/flickr\.com/i", $url) ) { ?>			show('photo');		<?php } ?>		jQuery('#title').unbind();		jQuery('#publish, #save').click(function() { jQuery('#saving').css('display', 'inline'); });		$('#tagsdiv-post_tag, #categorydiv').children('h3, .handlediv').click(function(){			$(this).siblings('.inside').toggle();		});	});</script></head><body class="press-this wp-admin"><div id="wphead"></div><form action="press-this.php?action=post" method="post"><div id="poststuff" class="metabox-holder">	<div id="side-info-column">		<div class="sleeve">			<h1 id="viewsite"><a href="<?php echo get_option('home'); ?>/" target="_blank"><?php bloginfo('name'); ?> &rsaquo; <?php _e('Press This') ?></a></span></h1>			<?php wp_nonce_field('press-this') ?>			<input type="hidden" name="post_type" id="post_type" value="text"/>			<input type="hidden" name="autosave" id="autosave" />			<input type="hidden" id="original_post_status" name="original_post_status" value="draft" />			<input type="hidden" id="prev_status" name="prev_status" value="draft" />			<!-- This div holds the photo metadata -->			<div class="photolist"></div>			<div id="submitdiv" class="stuffbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><?php _e('Publish') ?></h3>				<div class="inside">					<p>						<input class="button" type="submit" name="draft" value="<?php esc_attr_e('Save Draft') ?>" id="save" />						<?php if ( current_user_can('publish_posts') ) { ?>							<input class="button-primary" type="submit" name="publish" value="<?php esc_attr_e('Publish') ?>" id="publish" />						<?php } else { ?>							<br /><br /><input class="button-primary" type="submit" name="review" value="<?php esc_attr_e('Submit for Review') ?>" id="review" />						<?php } ?>						<img src="<?php echo esc_url( admin_url( 'images/wpspin_light.gif' ) ); ?>" alt="" id="saving" style="display:none;" />					</p>				</div>			</div>			<?php $tax = get_taxonomy( 'category' ); ?>			<div id="categorydiv" class="postbox">				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>"><br /></div>				<h3 class="hndle"><?php _e('Categories') ?></h3>				<div class="inside">				<div id="taxonomy-category" class="categorydiv">					<ul id="category-tabs" class="category-tabs">						<li class="tabs"><a href="#category-all" tabindex="3"><?php echo $tax->labels->all_items; ?></a></li>						<li class="hide-if-no-js"><a href="#category-pop" tabindex="3"><?php _e( 'Most Used' ); ?></a></li>					</ul>					<div id="category-pop" class="tabs-panel" style="display: none;">						<ul id="categorychecklist-pop" class="categorychecklist form-no-clear" >							<?php $popular_ids = wp_popular_terms_checklist( 'category' ); ?>						</ul>					</div>					<div id="category-all" class="tabs-panel">						<ul id="categorychecklist" class="list:category categorychecklist form-no-clear">							<?php wp_terms_checklist($post_ID, array( 'taxonomy' => 'category', 'popular_cats' => $popular_ids ) ) ?>						</ul>					</div>					<?php if ( !current_user_can($tax->cap->assign_terms) ) : ?>					<p><em><?php _e('You cannot modify this Taxonomy.'); ?></em></p>					<?php endif; ?>					<?php if ( current_user_can($tax->cap->edit_terms) ) : ?>						<div id="category-adder" class="wp-hidden-children">							<h4>								<a id="category-add-toggle" href="#category-add" class="hide-if-no-js" tabindex="3">									<?php printf( __( '+ %s' ), $tax->labels->add_new_item ); ?>								</a>							</h4>							<p id="category-add" class="category-add wp-hidden-child">								<label class="screen-reader-text" for="newcategory"><?php echo $tax->labels->add_new_item; ?></label>								<input type="text" name="newcategory" id="newcategory" class="form-required form-input-tip" value="<?php echo esc_attr( $tax->labels->new_item_name ); ?>" tabindex="3" aria-required="true"/>								<label class="screen-reader-text" for="newcategory_parent">									<?php echo $tax->labels->parent_item_colon; ?>								</label>								<?php wp_dropdown_categories( array( 'taxonomy' => 'category', 'hide_empty' => 0, 'name' => 'newcategory_parent', 'orderby' => 'name', 'hierarchical' => 1, 'show_option_none' => '&mdash; ' . $tax->labels->parent_item . ' &mdash;', 'tab_index' => 3 ) ); ?>								<input type="button" id="category-add-submit" class="add:categorychecklist:category-add button category-add-sumbit" value="<?php echo esc_attr( $tax->labels->add_new_item ); ?>" tabindex="3" />								<?php wp_nonce_field( 'add-category', '_ajax_nonce', false ); ?>								<span id="category-ajax-response"></span>							</p>						</div>					<?php endif; ?>				</div>				</div>			</div>			<div id="tagsdiv-post_tag" class="stuffbox" >				<div class="handlediv" title="<?php _e( 'Click to toggle' ); ?>">					<br/>				</div>				<h3><span><?php _e('Post Tags'); ?></span></h3>				<div class="inside">					<div class="tagsdiv" id="post_tag">						<p class="jaxtag">							<label class="screen-reader-text" for="newtag"><?php _e('Post Tags'); ?></label>							<input type="hidden" name="tax_input[post_tag]" class="the-tags" id="tax-input[post_tag]" value="" />							<div class="ajaxtag">								<input type="text" name="newtag[post_tag]" class="newtag form-input-tip" size="16" autocomplete="off" value="" />								<input type="button" class="button tagadd" value="<?php esc_attr_e('Add'); ?>" tabindex="3" />							</div>						</p>						<div class="tagchecklist"></div>					</div>					<p class="tagcloud-link"><a href="#titlediv" class="tagcloud-link" id="link-post_tag"><?php _e('Choose from the most used tags in Post Tags'); ?></a></p>				</div>			</div>		</div>	</div>	<div class="posting">		<?php if ( isset($posted) && intval($posted) ) { $post_ID = intval($posted); ?>		<div id="message" class="updated"><p><strong><?php _e('Your post has been saved.'); ?></strong> <a onclick="window.opener.location.replace(this.href); window.close();" href="<?php echo get_permalink( $post_ID); ?>"><?php _e('View post'); ?></a> | <a href="<?php echo get_edit_post_link( $post_ID ); ?>" onclick="window.opener.location.replace(this.href); window.close();"><?php _e('Edit Post'); ?></a> | <a href="#" onclick="window.close();"><?php _e('Close Window'); ?></a></p></div>		<?php } ?>		<div id="titlediv">			<div class="titlewrap">				<input name="title" id="title" class="text" value="<?php echo esc_attr($title);?>"/>			</div>		</div>		<div id="extra-fields" style="display: none"></div>		<div class="postdivrich">			<ul id="actions" class="actions">				<li id="photo_button">					Add: <?php if ( current_user_can('upload_files') ) { ?><a title="<?php _e('Insert an Image'); ?>" href="#"><img alt="<?php _e('Insert an Image'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-image.gif?ver=20100531' ) ); ?>"/></a>					<?php } ?>				</li>				<li id="video_button">					<a title="<?php _e('Embed a Video'); ?>" href="#"><img alt="<?php _e('Embed a Video'); ?>" src="<?php echo esc_url( admin_url( 'images/media-button-video.gif?ver=20100531' ) ); ?>"/></a>				</li>				<?php if ( user_can_richedit() ) { ?>				<li id="switcher">					<?php wp_print_scripts( 'quicktags' ); ?>					<?php add_filter('the_editor_content', 'wp_richedit_pre'); ?>					<a id="edButtonHTML" onclick="switchEditors.go('content', 'html');"><?php _e('HTML'); ?></a>					<a id="edButtonPreview" class="active" onclick="switchEditors.go('content', 'tinymce');"><?php _e('Visual'); ?></a>					<div class="zerosize"><input accesskey="e" type="button" onclick="switchEditors.go('content')" /></div>				</li>				<?php } ?>			</ul>			<div id="quicktags"></div>			<div class="editor-container">				<textarea name="content" id="content" style="width:100%;" class="theEditor" rows="15"><?php					if ( $selection )						echo wp_richedit_pre($selection);					if ( $url ) {						echo '<p>';						if ( $selection )							_e('via ');						printf( "<a href='%s'>%s</a>.</p>", esc_url( $url ), esc_html( $title ) );					}				?></textarea>			</div>		</div>	</div></div></form><?php do_action('admin_print_footer_scripts'); ?><script type="text/javascript">if(typeof wpOnload=='function')wpOnload();</script></body></html>
<?php/** * Creates the password cookie and redirects back to where the * visitor was before. * * @package WordPress *//** Make sure that the WordPress bootstrap has run before continuing. */require( dirname(__FILE__) . '/wp-load.php');if ( get_magic_quotes_gpc() )	$_POST['post_password'] = stripslashes($_POST['post_password']);// 10 dayssetcookie('wp-postpass_' . COOKIEHASH, $_POST['post_password'], time() + 864000, COOKIEPATH);wp_safe_redirect(wp_get_referer());?>
<?php/** * Class used internally by Diff to actually compute the diffs. * * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff) * to compute the differences between the two input arrays. * * Copyright 2004-2010 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you did * not receive this file, see http://opensource.org/licenses/lgpl-license.php. * * @author  Jon Parise <jon@horde.org> * @package Text_Diff */class Text_Diff_Engine_xdiff {    /**     */    function diff($from_lines, $to_lines)    {        array_walk($from_lines, array('Text_Diff', 'trimNewlines'));        array_walk($to_lines, array('Text_Diff', 'trimNewlines'));        /* Convert the two input arrays into strings for xdiff processing. */        $from_string = implode("\n", $from_lines);        $to_string = implode("\n", $to_lines);        /* Diff the two strings and convert the result to an array. */        $diff = xdiff_string_diff($from_string, $to_string, count($to_lines));        $diff = explode("\n", $diff);        /* Walk through the diff one line at a time.  We build the $edits         * array of diff operations by reading the first character of the         * xdiff output (which is in the "unified diff" format).         *         * Note that we don't have enough information to detect "changed"         * lines using this approach, so we can't add Text_Diff_Op_changed         * instances to the $edits array.  The result is still perfectly         * valid, albeit a little less descriptive and efficient. */        $edits = array();        foreach ($diff as $line) {            if (!strlen($line)) {                continue;            }            switch ($line[0]) {            case ' ':                $edits[] = &new Text_Diff_Op_copy(array(substr($line, 1)));                break;            case '+':                $edits[] = &new Text_Diff_Op_add(array(substr($line, 1)));                break;            case '-':                $edits[] = &new Text_Diff_Op_delete(array(substr($line, 1)));                break;            }        }        return $edits;    }}
<?phpif ( !class_exists( 'SimplePie' ) ) :/** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize =& new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize =& new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file =& new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file =& new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate =& new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer =& new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser =& new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file =& new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer =& new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] =& new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] =& new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] =& new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent =& new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						$seconds = (int) array_pop($temp);					}					if (sizeof($temp) > 0)					{						$minutes = (int) array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						$hours = (int) array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] =& new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] =& new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] =& new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights =& new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] =& new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] =& new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] =& new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] =& new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] =& new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] =& new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] =& new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] =& new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn =& new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser =& new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser =& new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder =& new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri =& new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri =& new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri =& new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri =& new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder =& new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser =& new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '') {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative =& new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target =& new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object =& new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer =& new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed =& new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else {			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed =& new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration =& new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml =& new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file =& new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}endif;?>
<?php/** * Revisions administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once('./admin.php');wp_enqueue_script('list-revisions');wp_reset_vars(array('revision', 'left', 'right', 'action'));$revision_id = absint($revision);$left        = absint($left);$right       = absint($right);$redirect = 'edit.php';switch ( $action ) :case 'restore' :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !current_user_can( 'edit_post', $revision->post_parent ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	check_admin_referer( "restore-post_$post->ID|$revision->ID" );	wp_restore_post_revision( $revision->ID );	$redirect = add_query_arg( array( 'message' => 5, 'revision' => $revision->ID ), get_edit_post_link( $post->ID, 'url' ) );	break;case 'diff' :	if ( !$left_revision  = get_post( $left ) )		break;	if ( !$right_revision = get_post( $right ) )		break;	if ( !current_user_can( 'read_post', $left_revision->ID ) || !current_user_can( 'read_post', $right_revision->ID ) )		break;	// If we're comparing a revision to itself, redirect to the 'view' page for that revision or the edit page for that post	if ( $left_revision->ID == $right_revision->ID ) {		$redirect = get_edit_post_link( $left_revision->ID );		include( './js/revisions-js.php' );		break;	}	// Don't allow reverse diffs?	if ( strtotime($right_revision->post_modified_gmt) < strtotime($left_revision->post_modified_gmt) ) {		$redirect = add_query_arg( array( 'left' => $right, 'right' => $left ) );		break;	}	if ( $left_revision->ID == $right_revision->post_parent ) // right is a revision of left		$post =& $left_revision;	elseif ( $left_revision->post_parent == $right_revision->ID ) // left is a revision of right		$post =& $right_revision;	elseif ( $left_revision->post_parent == $right_revision->post_parent ) // both are revisions of common parent		$post = get_post( $left_revision->post_parent );	else		break; // Don't diff two unrelated revisions	if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) { // Revisions disabled		if (			// we're not looking at an autosave			( !wp_is_post_autosave( $left_revision ) && !wp_is_post_autosave( $right_revision ) )		||			// we're not comparing an autosave to the current post			( $post->ID !== $left_revision->ID && $post->ID !== $right_revision->ID )		) {			$redirect = 'edit.php?post_type=' . $post->post_type;			break;		}	}	if (		// They're the same		$left_revision->ID == $right_revision->ID	||		// Neither is a revision		( !wp_get_post_revision( $left_revision->ID ) && !wp_get_post_revision( $right_revision->ID ) )	)		break;	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$h2 = sprintf( __( 'Compare Revisions of &#8220;%1$s&#8221;' ), $post_title );	$title = __( 'Revisions' );	$left  = $left_revision->ID;	$right = $right_revision->ID;	$redirect = false;	break;case 'view' :default :	if ( !$revision = wp_get_post_revision( $revision_id ) )		break;	if ( !$post = get_post( $revision->post_parent ) )		break;	if ( !current_user_can( 'read_post', $revision->ID ) || !current_user_can( 'read_post', $post->ID ) )		break;	// Revisions disabled and we're not looking at an autosave	if ( ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') ) && !wp_is_post_autosave( $revision ) ) {		$redirect = 'edit.php?post_type=' . $post->post_type;		break;	}	$post_title = '<a href="' . get_edit_post_link() . '">' . get_the_title() . '</a>';	$revision_title = wp_post_revision_title( $revision, false );	$h2 = sprintf( __( 'Revision for &#8220;%1$s&#8221; created on %2$s' ), $post_title, $revision_title );	$title = __( 'Revisions' );	// Sets up the diff radio buttons	$left  = $revision->ID;	$right = $post->ID;	$redirect = false;	break;endswitch;// Empty post_type means either malformed object found, or no valid parent was found.if ( !$redirect && empty($post->post_type) )	$redirect = 'edit.php';if ( !empty($redirect) ) {	wp_redirect( $redirect );	exit;}// This is so that the correct "Edit" menu item is selected.if ( !empty($post->post_type) && 'post' != $post->post_type )	$parent_file = $submenu_file = 'edit.php?post_type=' . $post->post_type;else	$parent_file = $submenu_file = 'edit.php';require_once( './admin-header.php' );?><div class="wrap"><h2 class="long-header"><?php echo $h2; ?></h2><table class="form-table ie-fixed">	<col class="th" /><?php if ( 'diff' == $action ) : ?><tr id="revision">	<th scope="row"></th>	<th scope="col" class="th-full">		<span class="alignleft"><?php printf( __('Older: %s'), wp_post_revision_title( $left_revision ) ); ?></span>		<span class="alignright"><?php printf( __('Newer: %s'), wp_post_revision_title( $right_revision ) ); ?></span>	</th></tr><?php endif;// use get_post_to_edit filters?$identical = true;foreach ( _wp_post_revision_fields() as $field => $field_title ) :	if ( 'diff' == $action ) {		$left_content = apply_filters( "_wp_post_revision_field_$field", $left_revision->$field, $field );		$right_content = apply_filters( "_wp_post_revision_field_$field", $right_revision->$field, $field );		if ( !$content = wp_text_diff( $left_content, $right_content ) )			continue; // There is no difference between left and right		$identical = false;	} else {		add_filter( "_wp_post_revision_field_$field", 'htmlspecialchars' );		$content = apply_filters( "_wp_post_revision_field_$field", $revision->$field, $field );	}	?>	<tr id="revision-field-<?php echo $field; ?>">		<th scope="row"><?php echo esc_html( $field_title ); ?></th>		<td><div class="pre"><?php echo $content; ?></div></td>	</tr>	<?phpendforeach;if ( 'diff' == $action && $identical ) :	?>	<tr><td colspan="2"><div class="updated"><p><?php _e( 'These revisions are identical.' ); ?></p></div></td></tr>	<?phpendif;?></table><br class="clear" /><h2><?php echo $title; ?></h2><?php$args = array( 'format' => 'form-table', 'parent' => true, 'right' => $right, 'left' => $left );if ( ! WP_POST_REVISIONS || !post_type_supports($post->post_type, 'revisions') )	$args['type'] = 'autosave';wp_list_post_revisions( $post, $args );?></div><?phprequire_once( './admin-footer.php' );
<?php// --------------------------------------------------------------------------------// PhpConcept Library - Zip Module 2.8.2// --------------------------------------------------------------------------------// License GNU/LGPL - Vincent Blavet - August 2009// http://www.phpconcept.net// --------------------------------------------------------------------------------//// Presentation ://   PclZip is a PHP library that manage ZIP archives.//   So far tests show that archives generated by PclZip are readable by//   WinZip application and other tools.//// Description ://   See readme.txt and http://www.phpconcept.net//// Warning ://   This library and the associated files are non commercial, non professional//   work.//   It should not have unexpected results. However if any damage is caused by//   this software the author can not be responsible.//   The use of this software is at the risk of the user.//// --------------------------------------------------------------------------------// $Id: pclzip.lib.php,v 1.60 2009/09/30 21:01:04 vblavet Exp $// --------------------------------------------------------------------------------  // ----- Constants  if (!defined('PCLZIP_READ_BLOCK_SIZE')) {    define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );  }  // ----- File list separator  // In version 1.x of PclZip, the separator for file list is a space  // (which is not a very smart choice, specifically for windows paths !).  // A better separator should be a comma (,). This constant gives you the  // abilty to change that.  // However notice that changing this value, may have impact on existing  // scripts, using space separated filenames.  // Recommanded values for compatibility with older versions :  //define( 'PCLZIP_SEPARATOR', ' ' );  // Recommanded values for smart separation of filenames.  if (!defined('PCLZIP_SEPARATOR')) {    define( 'PCLZIP_SEPARATOR', ',' );  }  // ----- Error configuration  // 0 : PclZip Class integrated error handling  // 1 : PclError external library error handling. By enabling this  //     you must ensure that you have included PclError library.  // [2,...] : reserved for futur use  if (!defined('PCLZIP_ERROR_EXTERNAL')) {    define( 'PCLZIP_ERROR_EXTERNAL', 0 );  }  // ----- Optional static temporary directory  //       By default temporary files are generated in the script current  //       path.  //       If defined :  //       - MUST BE terminated by a '/'.  //       - MUST be a valid, already created directory  //       Samples :  // define( 'PCLZIP_TEMPORARY_DIR', '/temp/' );  // define( 'PCLZIP_TEMPORARY_DIR', 'C:/Temp/' );  if (!defined('PCLZIP_TEMPORARY_DIR')) {    define( 'PCLZIP_TEMPORARY_DIR', '' );  }  // ----- Optional threshold ratio for use of temporary files  //       Pclzip sense the size of the file to add/extract and decide to  //       use or not temporary file. The algorythm is looking for  //       memory_limit of PHP and apply a ratio.  //       threshold = memory_limit * ratio.  //       Recommended values are under 0.5. Default 0.47.  //       Samples :  // define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.5 );  if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {    define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );  }// --------------------------------------------------------------------------------// ***** UNDER THIS LINE NOTHING NEEDS TO BE MODIFIED *****// --------------------------------------------------------------------------------  // ----- Global variables  $g_pclzip_version = "2.8.2";  // ----- Error codes  //   -1 : Unable to open file in binary write mode  //   -2 : Unable to open file in binary read mode  //   -3 : Invalid parameters  //   -4 : File does not exist  //   -5 : Filename is too long (max. 255)  //   -6 : Not a valid zip file  //   -7 : Invalid extracted file size  //   -8 : Unable to create directory  //   -9 : Invalid archive extension  //  -10 : Invalid archive format  //  -11 : Unable to delete file (unlink)  //  -12 : Unable to rename file (rename)  //  -13 : Invalid header checksum  //  -14 : Invalid archive size  define( 'PCLZIP_ERR_USER_ABORTED', 2 );  define( 'PCLZIP_ERR_NO_ERROR', 0 );  define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );  define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );  define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );  define( 'PCLZIP_ERR_MISSING_FILE', -4 );  define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );  define( 'PCLZIP_ERR_INVALID_ZIP', -6 );  define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );  define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );  define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );  define( 'PCLZIP_ERR_BAD_FORMAT', -10 );  define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );  define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );  define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );  define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );  define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );  define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );  define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );  define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );  define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );  define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );  define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );  // ----- Options values  define( 'PCLZIP_OPT_PATH', 77001 );  define( 'PCLZIP_OPT_ADD_PATH', 77002 );  define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );  define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );  define( 'PCLZIP_OPT_SET_CHMOD', 77005 );  define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );  define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );  define( 'PCLZIP_OPT_BY_NAME', 77008 );  define( 'PCLZIP_OPT_BY_INDEX', 77009 );  define( 'PCLZIP_OPT_BY_EREG', 77010 );  define( 'PCLZIP_OPT_BY_PREG', 77011 );  define( 'PCLZIP_OPT_COMMENT', 77012 );  define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );  define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );  define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );  define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );  define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );  // Having big trouble with crypt. Need to multiply 2 long int  // which is not correctly supported by PHP ...  //define( 'PCLZIP_OPT_CRYPT', 77018 );  define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );  define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_THRESHOLD', 77020 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_ON', 77021 ); // alias  define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );  define( 'PCLZIP_OPT_ADD_TEMP_FILE_OFF', 77022 ); // alias  // ----- File description attributes  define( 'PCLZIP_ATT_FILE_NAME', 79001 );  define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );  define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );  define( 'PCLZIP_ATT_FILE_MTIME', 79004 );  define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );  define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );  // ----- Call backs values  define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );  define( 'PCLZIP_CB_POST_EXTRACT', 78002 );  define( 'PCLZIP_CB_PRE_ADD', 78003 );  define( 'PCLZIP_CB_POST_ADD', 78004 );  /* For futur use  define( 'PCLZIP_CB_PRE_LIST', 78005 );  define( 'PCLZIP_CB_POST_LIST', 78006 );  define( 'PCLZIP_CB_PRE_DELETE', 78007 );  define( 'PCLZIP_CB_POST_DELETE', 78008 );  */  // --------------------------------------------------------------------------------  // Class : PclZip  // Description :  //   PclZip is the class that represent a Zip archive.  //   The public methods allow the manipulation of the archive.  // Attributes :  //   Attributes must not be accessed directly.  // Methods :  //   PclZip() : Object creator  //   create() : Creates the Zip archive  //   listContent() : List the content of the Zip archive  //   extract() : Extract the content of the archive  //   properties() : List the properties of the archive  // --------------------------------------------------------------------------------  class PclZip  {    // ----- Filename of the zip file    var $zipname = '';    // ----- File descriptor of the zip file    var $zip_fd = 0;    // ----- Internal error handling    var $error_code = 1;    var $error_string = '';    // ----- Current status of the magic_quotes_runtime    // This value store the php configuration for magic_quotes    // The class can then disable the magic_quotes and reset it after    var $magic_quotes_status;  // --------------------------------------------------------------------------------  // Function : PclZip()  // Description :  //   Creates a PclZip object and set the name of the associated Zip archive  //   filename.  //   Note that no real action is taken, if the archive does not exist it is not  //   created. Use create() for that.  // --------------------------------------------------------------------------------  function PclZip($p_zipname)  {    // ----- Tests the zlib    if (!function_exists('gzopen'))    {      die('Abort '.basename(__FILE__).' : Missing zlib extensions');    }    // ----- Set the attributes    $this->zipname = $p_zipname;    $this->zip_fd = 0;    $this->magic_quotes_status = -1;    // ----- Return    return;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   create($p_filelist, $p_add_dir="", $p_remove_dir="")  //   create($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two different synopsis. The first one is historical.  //   This method creates a Zip Archive. The Zip file is created in the  //   filesystem. The files and directories indicated in $p_filelist  //   are added in the archive. See the parameters description for the  //   supported format of $p_filelist.  //   When a directory is in the list, the directory and its content is added  //   in the archive.  //   In this synopsis, the function takes an optional variable list of  //   options. See bellow the supported options.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function create($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove from the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'                                             ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Invalid number / type of arguments");          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        if ($v_string != '') {          $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;        }        else {        }      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   add($p_filelist, $p_add_dir="", $p_remove_dir="")  //   add($p_filelist, $p_option, $p_option_value, ...)  // Description :  //   This method supports two synopsis. The first one is historical.  //   This methods add the list of files in an existing archive.  //   If a file with the same name already exists, it is added at the end of the  //   archive, the first one is still present.  //   If the archive does not exist, it is created.  // Parameters :  //   $p_filelist : An array containing file or directory names, or  //                 a string containing one filename or one directory name, or  //                 a string containing a list of filenames and/or directory  //                 names separated by spaces.  //   $p_add_dir : A path to add before the real path of the archived file,  //                in order to have it memorized in the archive.  //   $p_remove_dir : A path to remove from the real path of the file to archive,  //                   in order to have a shorter path memorized in the archive.  //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir  //                   is removed first, before $p_add_dir is added.  // Options :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_COMMENT :  //   PCLZIP_OPT_ADD_COMMENT :  //   PCLZIP_OPT_PREPEND_COMMENT :  //   PCLZIP_CB_PRE_ADD :  //   PCLZIP_CB_POST_ADD :  // Return Values :  //   0 on failure,  //   The list of the added files, with a status of the add action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function add($p_filelist)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Set default values    $v_options = array();    $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_ADD => 'optional',                                                   PCLZIP_CB_POST_ADD => 'optional',                                                   PCLZIP_OPT_NO_COMPRESSION => 'optional',                                                   PCLZIP_OPT_COMMENT => 'optional',                                                   PCLZIP_OPT_ADD_COMMENT => 'optional',                                                   PCLZIP_OPT_PREPEND_COMMENT => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'                                                   //, PCLZIP_OPT_CRYPT => 'optional'												   ));        if ($v_result != 1) {          return 0;        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Init    $v_string_list = array();    $v_att_list = array();    $v_filedescr_list = array();    $p_result_list = array();    // ----- Look if the $p_filelist is really an array    if (is_array($p_filelist)) {      // ----- Look if the first element is also an array      //       This will mean that this is a file description entry      if (isset($p_filelist[0]) && is_array($p_filelist[0])) {        $v_att_list = $p_filelist;      }      // ----- The list is a list of string names      else {        $v_string_list = $p_filelist;      }    }    // ----- Look if the $p_filelist is a string    else if (is_string($p_filelist)) {      // ----- Create a list from the string      $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);    }    // ----- Invalid variable type for $p_filelist    else {      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");      return 0;    }    // ----- Reformat the string list    if (sizeof($v_string_list) != 0) {      foreach ($v_string_list as $v_string) {        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;      }    }    // ----- For each file in the list check the attributes    $v_supported_attributes    = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'             ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'             ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'             ,PCLZIP_ATT_FILE_MTIME => 'optional'             ,PCLZIP_ATT_FILE_CONTENT => 'optional'             ,PCLZIP_ATT_FILE_COMMENT => 'optional'						);    foreach ($v_att_list as $v_entry) {      $v_result = $this->privFileDescrParseAtt($v_entry,                                               $v_filedescr_list[],                                               $v_options,                                               $v_supported_attributes);      if ($v_result != 1) {        return 0;      }    }    // ----- Expand the filelist (expand directories)    $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Call the create fct    $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);    if ($v_result != 1) {      return 0;    }    // ----- Return    return $p_result_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : listContent()  // Description :  //   This public method, gives the list of the files and directories, with their  //   properties.  //   The properties of each entries in the list are (used also in other functions) :  //     filename : Name of the file. For a create or add action it is the filename  //                given by the user. For an extract function it is the filename  //                of the extracted file.  //     stored_filename : Name of the file / directory stored in the archive.  //     size : Size of the stored file.  //     compressed_size : Size of the file's data compressed in the archive  //                       (without the headers overhead)  //     mtime : Last known modification date of the file (UNIX timestamp)  //     comment : Comment associated with the file  //     folder : true | false  //     index : index of the file in the archive  //     status : status of the action (depending of the action) :  //              Values are :  //                ok : OK !  //                filtered : the file / dir is not extracted (filtered by user)  //                already_a_directory : the file can not be extracted because a  //                                      directory with the same name already exists  //                write_protected : the file can not be extracted because a file  //                                  with the same name already exists and is  //                                  write protected  //                newer_exist : the file was not extracted because a newer file exists  //                path_creation_fail : the file is not extracted because the folder  //                                     does not exist and can not be created  //                write_error : the file was not extracted because there was a  //                              error while writing the file  //                read_error : the file was not extracted because there was a error  //                             while reading the file  //                invalid_header : the file was not extracted because of an archive  //                                 format error (bad file header)  //   Note that each time a method can continue operating when there  //   is an action error on a file, the error is only logged in the file status.  // Return Values :  //   0 on an unrecoverable failure,  //   The list of the files in the archive.  // --------------------------------------------------------------------------------  function listContent()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Call the extracting fct    $p_list = array();    if (($v_result = $this->privList($p_list)) != 1)    {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extract($p_path="./", $p_remove_path="")  //   extract([$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method extract all the files / directories from the archive to the  //   folder indicated in $p_path.  //   If you want to ignore the 'root' part of path of the memorized files  //   you can indicate this in the optional $p_remove_path parameter.  //   By default, if a newer file with the same name already exists, the  //   file is not extracted.  //  //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH aoptions  //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append  //   at the end of the path value of PCLZIP_OPT_PATH.  // Parameters :  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 or a negative value on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function extract()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_BY_NAME => 'optional',                                                   PCLZIP_OPT_BY_EREG => 'optional',                                                   PCLZIP_OPT_BY_PREG => 'optional',                                                   PCLZIP_OPT_BY_INDEX => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												    ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Trace    // ----- Call the extracting fct    $p_list = array();    $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,	                                     $v_remove_all_path, $v_options);    if ($v_result < 1) {      unset($p_list);      return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   extractByIndex($p_index, $p_path="./", $p_remove_path="")  //   extractByIndex($p_index, [$p_option, $p_option_value, ...])  // Description :  //   This method supports two synopsis. The first one is historical.  //   This method is doing a partial extract of the archive.  //   The extracted files or folders are identified by their index in the  //   archive (from 0 to n).  //   Note that if the index identify a folder, only the folder entry is  //   extracted, not all the files included in the archive.  // Parameters :  //   $p_index : A single index (integer) or a string of indexes of files to  //              extract. The form of the string is "0,4-6,8-12" with only numbers  //              and '-' for range or ',' to separate ranges. No spaces or ';'  //              are allowed.  //   $p_path : Path where the files and directories are to be extracted  //   $p_remove_path : First part ('root' part) of the memorized path  //                    (if any similar) to remove while extracting.  // Options :  //   PCLZIP_OPT_PATH :  //   PCLZIP_OPT_ADD_PATH :  //   PCLZIP_OPT_REMOVE_PATH :  //   PCLZIP_OPT_REMOVE_ALL_PATH :  //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and  //     not as files.  //     The resulting content is in a new field 'content' in the file  //     structure.  //     This option must be used alone (any other options are ignored).  //   PCLZIP_CB_PRE_EXTRACT :  //   PCLZIP_CB_POST_EXTRACT :  // Return Values :  //   0 on failure,  //   The list of the extracted files, with a status of the action.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  //function extractByIndex($p_index, options...)  function extractByIndex($p_index)  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();//    $v_path = "./";    $v_path = '';    $v_remove_path = "";    $v_remove_all_path = false;    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Default values for option    $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;    // ----- Look for arguments    if ($v_size > 1) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Remove form the options list the first argument      array_shift($v_arg_list);      $v_size--;      // ----- Look for first arg      if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {        // ----- Parse the options        $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                            array (PCLZIP_OPT_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_PATH => 'optional',                                                   PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',                                                   PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',                                                   PCLZIP_OPT_ADD_PATH => 'optional',                                                   PCLZIP_CB_PRE_EXTRACT => 'optional',                                                   PCLZIP_CB_POST_EXTRACT => 'optional',                                                   PCLZIP_OPT_SET_CHMOD => 'optional',                                                   PCLZIP_OPT_REPLACE_NEWER => 'optional'                                                   ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'                                                   ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_ON => 'optional',                                                   PCLZIP_OPT_TEMP_FILE_OFF => 'optional'												   ));        if ($v_result != 1) {          return 0;        }        // ----- Set the arguments        if (isset($v_options[PCLZIP_OPT_PATH])) {          $v_path = $v_options[PCLZIP_OPT_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {          $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];        }        if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {          $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];        }        if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {          // ----- Check for '/' in last path char          if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {            $v_path .= '/';          }          $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];        }        if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {          $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;        }        else {        }      }      // ----- Look for 2 args      // Here we need to support the first historic synopsis of the      // method.      else {        // ----- Get the first argument        $v_path = $v_arg_list[0];        // ----- Look for the optional second argument        if ($v_size == 2) {          $v_remove_path = $v_arg_list[1];        }        else if ($v_size > 2) {          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");          // ----- Return          return 0;        }      }    }    // ----- Trace    // ----- Trick    // Here I want to reuse extractByRule(), so I need to parse the $p_index    // with privParseOptions()    $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);    $v_options_trick = array();    $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,                                        array (PCLZIP_OPT_BY_INDEX => 'optional' ));    if ($v_result != 1) {        return 0;    }    $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];    // ----- Look for default option values    $this->privOptionDefaultThreshold($v_options);    // ----- Call the extracting fct    if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {        return(0);    }    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function :  //   delete([$p_option, $p_option_value, ...])  // Description :  //   This method removes files from the archive.  //   If no parameters are given, then all the archive is emptied.  // Parameters :  //   None or optional arguments.  // Options :  //   PCLZIP_OPT_BY_INDEX :  //   PCLZIP_OPT_BY_NAME :  //   PCLZIP_OPT_BY_EREG :  //   PCLZIP_OPT_BY_PREG :  // Return Values :  //   0 on failure,  //   The list of the files which are still present in the archive.  //   (see PclZip::listContent() for list entry format)  // --------------------------------------------------------------------------------  function delete()  {    $v_result=1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Set default values    $v_options = array();    // ----- Look for variable options arguments    $v_size = func_num_args();    // ----- Look for arguments    if ($v_size > 0) {      // ----- Get the arguments      $v_arg_list = func_get_args();      // ----- Parse the options      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,                                        array (PCLZIP_OPT_BY_NAME => 'optional',                                               PCLZIP_OPT_BY_EREG => 'optional',                                               PCLZIP_OPT_BY_PREG => 'optional',                                               PCLZIP_OPT_BY_INDEX => 'optional' ));      if ($v_result != 1) {          return 0;      }    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Call the delete fct    $v_list = array();    if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {      $this->privSwapBackMagicQuotes();      unset($v_list);      return(0);    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : deleteByIndex()  // Description :  //   ***** Deprecated *****  //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be prefered.  // --------------------------------------------------------------------------------  function deleteByIndex($p_index)  {    $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);    // ----- Return    return $p_list;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : properties()  // Description :  //   This method gives the properties of the archive.  //   The properties are :  //     nb : Number of files in the archive  //     comment : Comment associated with the archive file  //     status : not_exist, ok  // Parameters :  //   None  // Return Values :  //   0 on failure,  //   An array with the archive properties.  // --------------------------------------------------------------------------------  function properties()  {    // ----- Reset the error handler    $this->privErrorReset();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check archive    if (!$this->privCheckFormat()) {      $this->privSwapBackMagicQuotes();      return(0);    }    // ----- Default properties    $v_prop = array();    $v_prop['comment'] = '';    $v_prop['nb'] = 0;    $v_prop['status'] = 'not_exist';    // ----- Look if file exists    if (@is_file($this->zipname))    {      // ----- Open the zip file      if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)      {        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');        // ----- Return        return 0;      }      // ----- Read the central directory informations      $v_central_dir = array();      if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)      {        $this->privSwapBackMagicQuotes();        return 0;      }      // ----- Close the zip file      $this->privCloseFd();      // ----- Set the user attributes      $v_prop['comment'] = $v_central_dir['comment'];      $v_prop['nb'] = $v_central_dir['entries'];      $v_prop['status'] = 'ok';    }    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_prop;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : duplicate()  // Description :  //   This method creates an archive by copying the content of an other one. If  //   the archive already exist, it is replaced by the new one without any warning.  // Parameters :  //   $p_archive : The filename of a valid archive, or  //                a valid PclZip object.  // Return Values :  //   1 on success.  //   0 or a negative value on error (error code).  // --------------------------------------------------------------------------------  function duplicate($p_archive)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the $p_archive is a PclZip object    if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))    {      // ----- Duplicate the archive      $v_result = $this->privDuplicate($p_archive->zipname);    }    // ----- Look if the $p_archive is a string (so a filename)    else if (is_string($p_archive))    {      // ----- Check that $p_archive is a valid zip file      // TBC : Should also check the archive format      if (!is_file($p_archive)) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");        $v_result = PCLZIP_ERR_MISSING_FILE;      }      else {        // ----- Duplicate the archive        $v_result = $this->privDuplicate($p_archive);      }    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : merge()  // Description :  //   This method merge the $p_archive_to_add archive at the end of the current  //   one ($this).  //   If the archive ($this) does not exist, the merge becomes a duplicate.  //   If the $p_archive_to_add archive does not exist, the merge is a success.  // Parameters :  //   $p_archive_to_add : It can be directly the filename of a valid zip archive,  //                       or a PclZip object archive.  // Return Values :  //   1 on success,  //   0 or negative values on error (see below).  // --------------------------------------------------------------------------------  function merge($p_archive_to_add)  {    $v_result = 1;    // ----- Reset the error handler    $this->privErrorReset();    // ----- Check archive    if (!$this->privCheckFormat()) {      return(0);    }    // ----- Look if the $p_archive_to_add is a PclZip object    if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))    {      // ----- Merge the archive      $v_result = $this->privMerge($p_archive_to_add);    }    // ----- Look if the $p_archive_to_add is a string (so a filename)    else if (is_string($p_archive_to_add))    {      // ----- Create a temporary archive      $v_object_archive = new PclZip($p_archive_to_add);      // ----- Merge the archive      $v_result = $this->privMerge($v_object_archive);    }    // ----- Invalid variable    else    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");      $v_result = PCLZIP_ERR_INVALID_PARAMETER;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorCode()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorCode()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorCode());    }    else {      return($this->error_code);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorName()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorName($p_with_code=false)  {    $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',                      PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',                      PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',                      PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',                      PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',                      PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',                      PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',                      PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',                      PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',                      PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',                      PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',                      PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',                      PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',                      PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',                      PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',                      PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',                      PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',                      PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',                      PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'                      ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'                      ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'                    );    if (isset($v_name[$this->error_code])) {      $v_value = $v_name[$this->error_code];    }    else {      $v_value = 'NoName';    }    if ($p_with_code) {      return($v_value.' ('.$this->error_code.')');    }    else {      return($v_value);    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : errorInfo()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function errorInfo($p_full=false)  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      return(PclErrorString());    }    else {      if ($p_full) {        return($this->errorName(true)." : ".$this->error_string);      }      else {        return($this->error_string." [code ".$this->error_code."]");      }    }  }unction : privCheckFormat()  // Description :  //   This method check that the archive exists and is a valid zip archive.  //   Several level of check exists. (futur)  // Parameters :  //   $p_level : Level of check. Default 0.  //              0 : Check the first bytes (magic codes) (default value))  //              1 : 0 + Check the central directory (futur)  //              2 : 1 + Check each file header (futur)  // Return Values :  //   true on success,  //   false on error, the error code is set.  // --------------------------------------------------------------------------------  function privCheckFormat($p_level=0)  {    $v_result = true;	// ----- Reset the file system cache    clearstatcache();    // ----- Reset the error handler    $this->privErrorReset();    // ----- Look if the file exits    if (!is_file($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");      return(false);    }    // ----- Check that the file is readeable    if (!is_readable($this->zipname)) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");      return(false);    }    // ----- Check the magic code    // TBC    // ----- Check the central header    // TBC    // ----- Check each file header    // TBC    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privParseOptions()  // Description :  //   This internal methods reads the variable list of arguments ($p_options_list,  //   $p_size) and generate an array with the options and values ($v_result_list).  //   $v_requested_options contains the options that can be present and those that  //   must be present.  //   $v_requested_options is an array, with the option value as key, and 'optional',  //   or 'mandatory' as value.  // Parameters :  //   See above.  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)  {    $v_result=1;    // ----- Read the options    $i=0;    while ($i<$p_size) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$p_options_list[$i]])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for next option      switch ($p_options_list[$i]) {        // ----- Look for options that request a path value        case PCLZIP_OPT_PATH :        case PCLZIP_OPT_REMOVE_PATH :        case PCLZIP_OPT_ADD_PATH :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_THRESHOLD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          // ----- Check the value          $v_value = $p_options_list[$i+1];          if ((!is_integer($v_value)) || ($v_value<0)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");            return PclZip::errorCode();          }          // ----- Get the value (and convert it in bytes)          $v_result_list[$p_options_list[$i]] = $v_value*1048576;          $i++;        break;        case PCLZIP_OPT_TEMP_FILE_ON :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_TEMP_FILE_OFF :          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");            return PclZip::errorCode();          }          // ----- Check for incompatible options          if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");            return PclZip::errorCode();          }          $v_result_list[$p_options_list[$i]] = true;        break;        case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (   is_string($p_options_list[$i+1])              && ($p_options_list[$i+1] != '')) {            $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);            $i++;          }          else {          }        break;        // ----- Look for options that request an array of string for value        case PCLZIP_OPT_BY_NAME :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an EREG or PREG expression        case PCLZIP_OPT_BY_EREG :          // ereg() is deprecated starting with PHP 5.3. Move PCLZIP_OPT_BY_EREG          // to PCLZIP_OPT_BY_PREG          $p_options_list[$i] = PCLZIP_OPT_BY_PREG;        case PCLZIP_OPT_BY_PREG :        //case PCLZIP_OPT_CRYPT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that takes a string        case PCLZIP_OPT_COMMENT :        case PCLZIP_OPT_ADD_COMMENT :        case PCLZIP_OPT_PREPEND_COMMENT :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,			                     "Missing parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          if (is_string($p_options_list[$i+1])) {              $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,			                     "Wrong parameter value for option '"								 .PclZipUtilOptionText($p_options_list[$i])								 ."'");            // ----- Return            return PclZip::errorCode();          }          $i++;        break;        // ----- Look for options that request an array of index        case PCLZIP_OPT_BY_INDEX :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_work_list = array();          if (is_string($p_options_list[$i+1])) {              // ----- Remove spaces              $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');              // ----- Parse items              $v_work_list = explode(",", $p_options_list[$i+1]);          }          else if (is_integer($p_options_list[$i+1])) {              $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];          }          else if (is_array($p_options_list[$i+1])) {              $v_work_list = $p_options_list[$i+1];          }          else {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Reduce the index list          // each index item in the list must be a couple with a start and          // an end value : [0,3], [5-5], [8-10], ...          // ----- Check the format of each item          $v_sort_flag=false;          $v_sort_value=0;          for ($j=0; $j<sizeof($v_work_list); $j++) {              // ----- Explode the item              $v_item_list = explode("-", $v_work_list[$j]);              $v_size_item_list = sizeof($v_item_list);              // ----- TBC : Here we might check that each item is a              // real integer ...              // ----- Look for single value              if ($v_size_item_list == 1) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];              }              elseif ($v_size_item_list == 2) {                  // ----- Set the option value                  $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];                  $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];              }              else {                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              // ----- Look for list sort              if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {                  $v_sort_flag=true;                  // ----- TBC : An automatic sort should be writen ...                  // ----- Error log                  PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");                  // ----- Return                  return PclZip::errorCode();              }              $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];          }          // ----- Sort the items          if ($v_sort_flag) {              // TBC : To Be Completed          }          // ----- Next option          $i++;        break;        // ----- Look for options that request no value        case PCLZIP_OPT_REMOVE_ALL_PATH :        case PCLZIP_OPT_EXTRACT_AS_STRING :        case PCLZIP_OPT_NO_COMPRESSION :        case PCLZIP_OPT_EXTRACT_IN_OUTPUT :        case PCLZIP_OPT_REPLACE_NEWER :        case PCLZIP_OPT_STOP_ON_ERROR :          $v_result_list[$p_options_list[$i]] = true;        break;        // ----- Look for options that request an octal value        case PCLZIP_OPT_SET_CHMOD :          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];          $i++;        break;        // ----- Look for options that request a call-back        case PCLZIP_CB_PRE_EXTRACT :        case PCLZIP_CB_POST_EXTRACT :        case PCLZIP_CB_PRE_ADD :        case PCLZIP_CB_POST_ADD :        /* for futur use        case PCLZIP_CB_PRE_DELETE :        case PCLZIP_CB_POST_DELETE :        case PCLZIP_CB_PRE_LIST :        case PCLZIP_CB_POST_LIST :        */          // ----- Check the number of parameters          if (($i+1) >= $p_size) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Get the value          $v_function_name = $p_options_list[$i+1];          // ----- Check that the value is a valid existing function          if (!function_exists($v_function_name)) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");            // ----- Return            return PclZip::errorCode();          }          // ----- Set the attribute          $v_result_list[$p_options_list[$i]] = $v_function_name;          $i++;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                       "Unknown parameter '"							   .$p_options_list[$i]."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Next options      $i++;    }    // ----- Look for mandatory options    if ($v_requested_options !== false) {      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {        // ----- Look for mandatory option        if ($v_requested_options[$key] == 'mandatory') {          // ----- Look if present          if (!isset($v_result_list[$key])) {            // ----- Error log            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");            // ----- Return            return PclZip::errorCode();          }        }      }    }    // ----- Look for default values    if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOptionDefaultThreshold()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privOptionDefaultThreshold(&$p_options)  {    $v_result=1;    if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])        || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {      return $v_result;    }    // ----- Get 'memory_limit' configuration value    $v_memory_limit = ini_get('memory_limit');    $v_memory_limit = trim($v_memory_limit);    $last = strtolower(substr($v_memory_limit, -1));    if($last == 'g')        //$v_memory_limit = $v_memory_limit*1024*1024*1024;        $v_memory_limit = $v_memory_limit*1073741824;    if($last == 'm')        //$v_memory_limit = $v_memory_limit*1024*1024;        $v_memory_limit = $v_memory_limit*1048576;    if($last == 'k')        $v_memory_limit = $v_memory_limit*1024;    $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);    // ----- Sanity check : No threshold if value lower than 1M    if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {      unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrParseAtt()  // Description :  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)  {    $v_result=1;    // ----- For each file in the list check the attributes    foreach ($p_file_list as $v_key => $v_value) {      // ----- Check if the option is supported      if (!isset($v_requested_options[$v_key])) {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");        // ----- Return        return PclZip::errorCode();      }      // ----- Look for attribute      switch ($v_key) {        case PCLZIP_ATT_FILE_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['filename'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_SHORT_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_short_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        case PCLZIP_ATT_FILE_NEW_FULL_NAME :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);          if ($p_filedescr['new_full_name'] == '') {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }        break;        // ----- Look for options that takes a string        case PCLZIP_ATT_FILE_COMMENT :          if (!is_string($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['comment'] = $v_value;        break;        case PCLZIP_ATT_FILE_MTIME :          if (!is_integer($v_value)) {            PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");            return PclZip::errorCode();          }          $p_filedescr['mtime'] = $v_value;        break;        case PCLZIP_ATT_FILE_CONTENT :          $p_filedescr['content'] = $v_value;        break;        default :          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,		                           "Unknown parameter '".$v_key."'");          // ----- Return          return PclZip::errorCode();      }      // ----- Look for mandatory options      if ($v_requested_options !== false) {        for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {          // ----- Look for mandatory option          if ($v_requested_options[$key] == 'mandatory') {            // ----- Look if present            if (!isset($p_file_list[$key])) {              PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");              return PclZip::errorCode();            }          }        }      }    // end foreach    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privFileDescrExpand()  // Description :  //   This method look for each item of the list to see if its a file, a folder  //   or a string to be added as file. For any other type of files (link, other)  //   just ignore the item.  //   Then prepare the information that will be stored for that file.  //   When its a folder, expand the folder with all the files that are in that  //   folder (recursively).  // Parameters :  // Return Values :  //   1 on success.  //   0 on failure.  // --------------------------------------------------------------------------------  function privFileDescrExpand(&$p_filedescr_list, &$p_options)  {    $v_result=1;    // ----- Create a result list    $v_result_list = array();    // ----- Look each entry    for ($i=0; $i<sizeof($p_filedescr_list); $i++) {      // ----- Get filedescr      $v_descr = $p_filedescr_list[$i];      // ----- Reduce the filename      $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);      $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);      // ----- Look for real file or folder      if (file_exists($v_descr['filename'])) {        if (@is_file($v_descr['filename'])) {          $v_descr['type'] = 'file';        }        else if (@is_dir($v_descr['filename'])) {          $v_descr['type'] = 'folder';        }        else if (@is_link($v_descr['filename'])) {          // skip          continue;        }        else {          // skip          continue;        }      }      // ----- Look for string added as file      else if (isset($v_descr['content'])) {        $v_descr['type'] = 'virtual_file';      }      // ----- Missing file      else {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");        // ----- Return        return PclZip::errorCode();      }      // ----- Calculate the stored filename      $this->privCalculateStoredFilename($v_descr, $p_options);      // ----- Add the descriptor in result list      $v_result_list[sizeof($v_result_list)] = $v_descr;      // ----- Look for folder      if ($v_descr['type'] == 'folder') {        // ----- List of items in folder        $v_dirlist_descr = array();        $v_dirlist_nb = 0;        if ($v_folder_handler = @opendir($v_descr['filename'])) {          while (($v_item_handler = @readdir($v_folder_handler)) !== false) {            // ----- Skip '.' and '..'            if (($v_item_handler == '.') || ($v_item_handler == '..')) {                continue;            }            // ----- Compose the full filename            $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;            // ----- Look for different stored filename            // Because the name of the folder was changed, the name of the            // files/sub-folders also change            if (($v_descr['stored_filename'] != $v_descr['filename'])                 && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {              if ($v_descr['stored_filename'] != '') {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;              }              else {                $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;              }            }            $v_dirlist_nb++;          }          @closedir($v_folder_handler);        }        else {          // TBC : unable to open folder in read mode        }        // ----- Expand each element of the list        if ($v_dirlist_nb != 0) {          // ----- Expand          if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {            return $v_result;          }          // ----- Concat the resulting list          $v_result_list = array_merge($v_result_list, $v_dirlist_descr);        }        else {        }        // ----- Free local array        unset($v_dirlist_descr);      }    }    // ----- Get the result list    $p_filedescr_list = $v_result_list;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCreate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCreate($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the file in write mode    if (($v_result = $this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Add the list of files    $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);    // ----- Close    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAdd()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAdd($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Look if the archive exists or is empty    if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))    {      // ----- Do a create      $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);      // ----- Return      return $v_result;    }    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      fclose($v_zip_temp_fd);      $this->privCloseFd();      @unlink($v_zip_temp_name);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Create the Central Dir files header    for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          fclose($v_zip_temp_fd);          $this->privCloseFd();          @unlink($v_zip_temp_name);          $this->privSwapBackMagicQuotes();          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = $v_central_dir['comment'];    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {      $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];    }    if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      $this->privSwapBackMagicQuotes();      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privOpenFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privOpenFd($p_mode)  {    $v_result=1;    // ----- Look if already open    if ($this->zip_fd != 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');      // ----- Return      return PclZip::errorCode();    }    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCloseFd()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privCloseFd()  {    $v_result=1;    if ($this->zip_fd != 0)      @fclose($this->zip_fd);    $this->zip_fd = 0;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddList()  // Description :  //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is  //   different from the real path of the file. This is usefull if you want to have PclTar  //   running in any directory, and memorize relative path from an other directory.  // Parameters :  //   $p_list : An array containing the file or directory names to add in the tar  //   $p_result_list : list of added files with their properties (specially the status field)  //   $p_add_dir : Path to add in the filename path archived  //   $p_remove_dir : Path to remove in the filename path archived  // Return Values :  // --------------------------------------------------------------------------------//  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)  function privAddList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    // ----- Add the files    $v_header_list = array();    if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($this->zip_fd);    // ----- Create the Central Dir files header    for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)    {      // ----- Create the file header      if ($v_header_list[$i]['status'] == 'ok') {        if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {          // ----- Return          return $v_result;        }        $v_count++;      }      // ----- Transform the header to a 'usable' info      $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);    }    // ----- Zip file comment    $v_comment = '';    if (isset($p_options[PCLZIP_OPT_COMMENT])) {      $v_comment = $p_options[PCLZIP_OPT_COMMENT];    }    // ----- Calculate the size of the central header    $v_size = @ftell($this->zip_fd)-$v_offset;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)    {      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileList()  // Description :  // Parameters :  //   $p_filedescr_list : An array containing the file description  //                      or directory names to add in the zip  //   $p_result_list : list of added files with their properties (specially the status field)  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)  {    $v_result=1;    $v_header = array();    // ----- Recuperate the current number of elt in list    $v_nb = sizeof($p_result_list);    // ----- Loop on the files    for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {      // ----- Format the filename      $p_filedescr_list[$j]['filename']      = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);      // ----- Skip empty file names      // TBC : Can this be possible ? not checked in DescrParseAtt ?      if ($p_filedescr_list[$j]['filename'] == "") {        continue;      }      // ----- Check the filename      if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')          && (!file_exists($p_filedescr_list[$j]['filename']))) {        PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");        return PclZip::errorCode();      }      // ----- Look if it is a file or a dir with no all path remove option      // or a dir with all its path removed//      if (   (is_file($p_filedescr_list[$j]['filename']))//          || (   is_dir($p_filedescr_list[$j]['filename'])      if (   ($p_filedescr_list[$j]['type'] == 'file')          || ($p_filedescr_list[$j]['type'] == 'virtual_file')          || (   ($p_filedescr_list[$j]['type'] == 'folder')              && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])                  || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))          ) {        // ----- Add the file        $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,                                       $p_options);        if ($v_result != 1) {          return $v_result;        }        // ----- Store the file infos        $p_result_list[$v_nb++] = $v_header;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=1;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // TBC : Already done in the fileAtt check ... ?    if ($p_filename == "") {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");      // ----- Return      return PclZip::errorCode();    }    // ----- Look for a stored different filename    /* TBC : Removed    if (isset($p_filedescr['stored_filename'])) {      $v_stored_filename = $p_filedescr['stored_filename'];    }    else {      $v_stored_filename = $p_filedescr['stored_filename'];    }    */    // ----- Set the file properties    clearstatcache();    $p_header['version'] = 20;    $p_header['version_extracted'] = 10;    $p_header['flag'] = 0;    $p_header['compression'] = 0;    $p_header['crc'] = 0;    $p_header['compressed_size'] = 0;    $p_header['filename_len'] = strlen($p_filename);    $p_header['extra_len'] = 0;    $p_header['disk'] = 0;    $p_header['internal'] = 0;    $p_header['offset'] = 0;    $p_header['filename'] = $p_filename;// TBC : Removed    $p_header['stored_filename'] = $v_stored_filename;    $p_header['stored_filename'] = $p_filedescr['stored_filename'];    $p_header['extra'] = '';    $p_header['status'] = 'ok';    $p_header['index'] = -1;    // ----- Look for regular file    if ($p_filedescr['type']=='file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = filesize($p_filename);    }    // ----- Look for regular folder    else if ($p_filedescr['type']=='folder') {      $p_header['external'] = 0x00000010;      $p_header['mtime'] = filemtime($p_filename);      $p_header['size'] = filesize($p_filename);    }    // ----- Look for virtual file    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['external'] = 0x00000000;      $p_header['size'] = strlen($p_filedescr['content']);    }    // ----- Look for filetime    if (isset($p_filedescr['mtime'])) {      $p_header['mtime'] = $p_filedescr['mtime'];    }    else if ($p_filedescr['type'] == 'virtual_file') {      $p_header['mtime'] = time();    }    else {      $p_header['mtime'] = filemtime($p_filename);    }    // ------ Look for file comment    if (isset($p_filedescr['comment'])) {      $p_header['comment_len'] = strlen($p_filedescr['comment']);      $p_header['comment'] = $p_filedescr['comment'];    }    else {      $p_header['comment_len'] = 0;      $p_header['comment'] = '';    }    // ----- Look for pre-add callback    if (isset($p_options[PCLZIP_CB_PRE_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_header['status'] = "skipped";        $v_result = 1;      }      // ----- Update the informations      // Only some fields can be modified      if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {        $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);      }    }    // ----- Look for empty stored filename    if ($p_header['stored_filename'] == "") {      $p_header['status'] = "filtered";    }    // ----- Check the path length    if (strlen($p_header['stored_filename']) > 0xFF) {      $p_header['status'] = 'filename_too_long';    }    // ----- Look if no error, or file not skipped    if ($p_header['status'] == 'ok') {      // ----- Look for a file      if ($p_filedescr['type'] == 'file') {        // ----- Look for using temporary file to zip        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {          $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);          if ($v_result < PCLZIP_ERR_NO_ERROR) {            return $v_result;          }        }        // ----- Use "in memory" zip algo        else {        // ----- Open the source file        if (($v_file = @fopen($p_filename, "rb")) == 0) {          PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");          return PclZip::errorCode();        }        // ----- Read the file content        $v_content = @fread($v_file, $p_header['size']);        // ----- Close the file        @fclose($v_file);        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);        }      }      // ----- Look for a virtual file (a file from string)      else if ($p_filedescr['type'] == 'virtual_file') {        $v_content = $p_filedescr['content'];        // ----- Calculate the CRC        $p_header['crc'] = @crc32($v_content);        // ----- Look for no compression        if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {          // ----- Set header parameters          $p_header['compressed_size'] = $p_header['size'];          $p_header['compression'] = 0;        }        // ----- Look for normal compression        else {          // ----- Compress the content          $v_content = @gzdeflate($v_content);          // ----- Set header parameters          $p_header['compressed_size'] = strlen($v_content);          $p_header['compression'] = 8;        }        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {          @fclose($v_file);          return $v_result;        }        // ----- Write the compressed (or not) content        @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);      }      // ----- Look for a directory      else if ($p_filedescr['type'] == 'folder') {        // ----- Look for directory last '/'        if (@substr($p_header['stored_filename'], -1) != '/') {          $p_header['stored_filename'] .= '/';        }        // ----- Set the file properties        $p_header['size'] = 0;        //$p_header['external'] = 0x41FF0010;   // Value for a folder : to be checked        $p_header['external'] = 0x00000010;   // Value for a folder : to be checked        // ----- Call the header generation        if (($v_result = $this->privWriteFileHeader($p_header)) != 1)        {          return $v_result;        }      }    }    // ----- Look for post-add callback    if (isset($p_options[PCLZIP_CB_POST_ADD])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_header, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);      if ($v_result == 0) {        // ----- Ignored        $v_result = 1;      }      // ----- Update the informations      // Nothing can be modified    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privAddFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)  {    $v_result=PCLZIP_ERR_NO_ERROR;    // ----- Working variable    $p_filename = $p_filedescr['filename'];    // ----- Open the source file    if (($v_file = @fopen($p_filename, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");      return PclZip::errorCode();    }    // ----- Creates a compressed temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = filesize($p_filename);    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @gzputs($v_file_compressed, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file);    @gzclose($v_file_compressed);    // ----- Check the minimum file size    if (filesize($v_gzip_temp_name) < 18) {      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');      return PclZip::errorCode();    }    // ----- Extract the compressed attributes    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the gzip file header    $v_binary_data = @fread($v_file_compressed, 10);    $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);    // ----- Check some parameters    $v_data_header['os'] = bin2hex($v_data_header['os']);    // ----- Read the gzip file footer    @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);    $v_binary_data = @fread($v_file_compressed, 8);    $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);    // ----- Set the attributes    $p_header['compression'] = ord($v_data_header['cm']);    //$p_header['mtime'] = $v_data_header['mtime'];    $p_header['crc'] = $v_data_footer['crc'];    $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;    // ----- Close the file    @fclose($v_file_compressed);    // ----- Call the header generation    if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {      return $v_result;    }    // ----- Add the compressed data    if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)    {      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    fseek($v_file_compressed, 10);    $v_size = $p_header['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($v_file_compressed, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close the file    @fclose($v_file_compressed);    // ----- Unlink the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCalculateStoredFilename()  // Description :  //   Based on file descriptor properties and global options, this method  //   calculate the filename that will be stored in the archive.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privCalculateStoredFilename(&$p_filedescr, &$p_options)  {    $v_result=1;    // ----- Working variables    $p_filename = $p_filedescr['filename'];    if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {      $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];    }    else {      $p_add_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {      $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];    }    else {      $p_remove_dir = '';    }    if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {      $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];    }    else {      $p_remove_all_dir = 0;    }    // ----- Look for full name change    if (isset($p_filedescr['new_full_name'])) {      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);    }    // ----- Look for path and/or short name change    else {      // ----- Look for short name change      // Its when we cahnge just the filename but not the path      if (isset($p_filedescr['new_short_name'])) {        $v_path_info = pathinfo($p_filename);        $v_dir = '';        if ($v_path_info['dirname'] != '') {          $v_dir = $v_path_info['dirname'].'/';        }        $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];      }      else {        // ----- Calculate the stored filename        $v_stored_filename = $p_filename;      }      // ----- Look for all path to remove      if ($p_remove_all_dir) {        $v_stored_filename = basename($p_filename);      }      // ----- Look for partial path remove      else if ($p_remove_dir != "") {        if (substr($p_remove_dir, -1) != '/')          $p_remove_dir .= "/";        if (   (substr($p_filename, 0, 2) == "./")            || (substr($p_remove_dir, 0, 2) == "./")) {          if (   (substr($p_filename, 0, 2) == "./")              && (substr($p_remove_dir, 0, 2) != "./")) {            $p_remove_dir = "./".$p_remove_dir;          }          if (   (substr($p_filename, 0, 2) != "./")              && (substr($p_remove_dir, 0, 2) == "./")) {            $p_remove_dir = substr($p_remove_dir, 2);          }        }        $v_compare = PclZipUtilPathInclusion($p_remove_dir,                                             $v_stored_filename);        if ($v_compare > 0) {          if ($v_compare == 2) {            $v_stored_filename = "";          }          else {            $v_stored_filename = substr($v_stored_filename,                                        strlen($p_remove_dir));          }        }      }      // ----- Remove drive letter if any      $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);      // ----- Look for path to add      if ($p_add_dir != "") {        if (substr($p_add_dir, -1) == "/")          $v_stored_filename = $p_add_dir.$v_stored_filename;        else          $v_stored_filename = $p_add_dir."/".$v_stored_filename;      }    }    // ----- Filename (reduce the path of stored name)    $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);    $p_filedescr['stored_filename'] = $v_stored_filename;    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteFileHeader(&$p_header)  {    $v_result=1;    // ----- Store the offset position of the file    $p_header['offset'] = ftell($this->zip_fd);    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,	                      $p_header['version_extracted'], $p_header['flag'],                          $p_header['compression'], $v_mtime, $v_mdate,                          $p_header['crc'], $p_header['compressed_size'],						  $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len']);    // ----- Write the first 148 bytes of the header in the archive    fputs($this->zip_fd, $v_binary_data, 30);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralFileHeader(&$p_header)  {    $v_result=1;    // TBC    //for(reset($p_header); $key = key($p_header); next($p_header)) {    //}    // ----- Transform UNIX mtime to DOS format mdate/mtime    $v_date = getdate($p_header['mtime']);    $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;    $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];    // ----- Packed data    $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,	                      $p_header['version'], $p_header['version_extracted'],                          $p_header['flag'], $p_header['compression'],						  $v_mtime, $v_mdate, $p_header['crc'],                          $p_header['compressed_size'], $p_header['size'],                          strlen($p_header['stored_filename']),						  $p_header['extra_len'], $p_header['comment_len'],                          $p_header['disk'], $p_header['internal'],						  $p_header['external'], $p_header['offset']);    // ----- Write the 42 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 46);    // ----- Write the variable fields    if (strlen($p_header['stored_filename']) != 0)    {      fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));    }    if ($p_header['extra_len'] != 0)    {      fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);    }    if ($p_header['comment_len'] != 0)    {      fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privWriteCentralHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)  {    $v_result=1;    // ----- Packed data    $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,	                      $p_nb_entries, $p_size,						  $p_offset, strlen($p_comment));    // ----- Write the 22 bytes of the header in the zip file    fputs($this->zip_fd, $v_binary_data, 22);    // ----- Write the variable fields    if (strlen($p_comment) != 0)    {      fputs($this->zip_fd, $p_comment, strlen($p_comment));    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privList()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privList(&$p_list)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Open the zip file    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)    {      // ----- Magic quotes trick      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Go to beginning of Central Dir    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_central_dir['offset']))    {      $this->privSwapBackMagicQuotes();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    for ($i=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        $this->privSwapBackMagicQuotes();        return $v_result;      }      $v_header['index'] = $i;      // ----- Get the only interesting attributes      $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);      unset($v_header);    }    // ----- Close the zip file    $this->privCloseFd();    // ----- Magic quotes trick    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privConvertHeader2FileInfo()  // Description :  //   This function takes the file informations from the central directory  //   entries and extract the interesting parameters that will be given back.  //   The resulting file infos are set in the array $p_info  //     $p_info['filename'] : Filename with full path. Given by user (add),  //                           extracted in the filesystem (extract).  //     $p_info['stored_filename'] : Stored filename in the archive.  //     $p_info['size'] = Size of the file.  //     $p_info['compressed_size'] = Compressed size of the file.  //     $p_info['mtime'] = Last modification date of the file.  //     $p_info['comment'] = Comment associated with the file.  //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.  //     $p_info['status'] = status of the action on the file.  //     $p_info['crc'] = CRC of the file content.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privConvertHeader2FileInfo($p_header, &$p_info)  {    $v_result=1;    // ----- Get the interesting attributes    $v_temp_path = PclZipUtilPathReduction($p_header['filename']);    $p_info['filename'] = $v_temp_path;    $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);    $p_info['stored_filename'] = $v_temp_path;    $p_info['size'] = $p_header['size'];    $p_info['compressed_size'] = $p_header['compressed_size'];    $p_info['mtime'] = $p_header['mtime'];    $p_info['comment'] = $p_header['comment'];    $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);    $p_info['index'] = $p_header['index'];    $p_info['status'] = $p_header['status'];    $p_info['crc'] = $p_header['crc'];    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractByRule()  // Description :  //   Extract a file or directory depending of rules (by index, by name, ...)  // Parameters :  //   $p_file_list : An array where will be placed the properties of each  //                  extracted file  //   $p_path : Path to add while writing the extracted files  //   $p_remove_path : Path to remove (from the file memorized path) while writing the  //                    extracted files. If the path does not match the file path,  //                    the file is extracted with its memorized path.  //                    $p_remove_path does not apply to 'list' mode.  //                    $p_path and $p_remove_path are commulative.  // Return Values :  //   1 on success,0 or less on error (see error code list)  // --------------------------------------------------------------------------------  function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Magic quotes trick    $this->privDisableMagicQuotes();    // ----- Check the path    if (   ($p_path == "")	    || (   (substr($p_path, 0, 1) != "/")		    && (substr($p_path, 0, 3) != "../")			&& (substr($p_path,1,2)!=":/")))      $p_path = "./".$p_path;    // ----- Reduce the path last (and duplicated) '/'    if (($p_path != "./") && ($p_path != "/"))    {      // ----- Look for the path end '/'      while (substr($p_path, -1) == "/")      {        $p_path = substr($p_path, 0, strlen($p_path)-1);      }    }    // ----- Look for path to remove format (should end by /)    if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))    {      $p_remove_path .= '/';    }    $p_remove_path_size = strlen($p_remove_path);    // ----- Open the zip file    if (($v_result = $this->privOpenFd('rb')) != 1)    {      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      // ----- Close the zip file      $this->privCloseFd();      $this->privSwapBackMagicQuotes();      return $v_result;    }    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    // ----- Read each entry    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read next Central dir entry      @rewind($this->zip_fd);      if (@fseek($this->zip_fd, $v_pos_entry))      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');        // ----- Return        return PclZip::errorCode();      }      // ----- Read the file header      $v_header = array();      if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        $this->privSwapBackMagicQuotes();        return $v_result;      }      // ----- Store the index      $v_header['index'] = $i;      // ----- Store the file position      $v_pos_entry = ftell($this->zip_fd);      // ----- Look for the specific extract rules      $v_extract = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_extract = true;                  }              }              // ----- Look for a filename              elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_extract = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {              $v_extract = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_extract = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      // ----- Look for no rule, which means extract all the archive      else {          $v_extract = true;      }	  // ----- Check compression method	  if (   ($v_extract)	      && (   ($v_header['compression'] != 8)		      && ($v_header['compression'] != 0))) {          $v_header['status'] = 'unsupported_compression';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,			                       "Filename '".$v_header['stored_filename']."' is "				  	    	  	   ."compressed by an unsupported compression "				  	    	  	   ."method (".$v_header['compression'].") ");              return PclZip::errorCode();		  }	  }	  // ----- Check encrypted files	  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {          $v_header['status'] = 'unsupported_encryption';          // ----- Look for PCLZIP_OPT_STOP_ON_ERROR          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {              $this->privSwapBackMagicQuotes();              PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,			                       "Unsupported encryption for "				  	    	  	   ." filename '".$v_header['stored_filename']								   ."'");              return PclZip::errorCode();		  }    }      // ----- Look for real extraction      if (($v_extract) && ($v_header['status'] != 'ok')) {          $v_result = $this->privConvertHeader2FileInfo($v_header,		                                        $p_file_list[$v_nb_extracted++]);          if ($v_result != 1) {              $this->privCloseFd();              $this->privSwapBackMagicQuotes();              return $v_result;          }          $v_extract = false;      }      // ----- Look for real extraction      if ($v_extract)      {        // ----- Go to the file position        @rewind($this->zip_fd);        if (@fseek($this->zip_fd, $v_header['offset']))        {          // ----- Close the zip file          $this->privCloseFd();          $this->privSwapBackMagicQuotes();          // ----- Error log          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');          // ----- Return          return PclZip::errorCode();        }        // ----- Look for extraction as string        if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {          $v_string = '';          // ----- Extracting the file          $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Set the file content          $p_file_list[$v_nb_extracted]['content'] = $v_string;          // ----- Next extracted file          $v_nb_extracted++;          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for extraction in standard output        elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))		        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {          // ----- Extracting the file in standard output          $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }        // ----- Look for normal extraction        else {          // ----- Extracting the file          $v_result1 = $this->privExtractFile($v_header,		                                      $p_path, $p_remove_path,											  $p_remove_all_path,											  $p_options);          if ($v_result1 < 1) {            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result1;          }          // ----- Get the only interesting attributes          if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)          {            // ----- Close the zip file            $this->privCloseFd();            $this->privSwapBackMagicQuotes();            return $v_result;          }          // ----- Look for user callback abort          if ($v_result1 == 2) {          	break;          }        }      }    }    // ----- Close the zip file    $this->privCloseFd();    $this->privSwapBackMagicQuotes();    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFile()  // Description :  // Parameters :  // Return Values :  //  // 1 : ... ?  // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback  // --------------------------------------------------------------------------------  function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for all path to remove    if ($p_remove_all_path == true) {        // ----- Look for folder entry that not need to be extracted        if (($p_entry['external']&0x00000010)==0x00000010) {            $p_entry['status'] = "filtered";            return $v_result;        }        // ----- Get the basename of the path        $p_entry['filename'] = basename($p_entry['filename']);    }    // ----- Look for path to remove    else if ($p_remove_path != "")    {      if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)      {        // ----- Change the file status        $p_entry['status'] = "filtered";        // ----- Return        return $v_result;      }      $p_remove_path_size = strlen($p_remove_path);      if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)      {        // ----- Remove the path        $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);      }    }    // ----- Add the path    if ($p_path != '') {      $p_entry['filename'] = $p_path."/".$p_entry['filename'];    }    // ----- Check a base_dir_restriction    if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {      $v_inclusion      = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],                                $p_entry['filename']);      if ($v_inclusion == 0) {        PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,			                     "Filename '".$p_entry['filename']."' is "								 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");        return PclZip::errorCode();      }    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {    // ----- Look for specific actions while the file exist    if (file_exists($p_entry['filename']))    {      // ----- Look if file is a directory      if (is_dir($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "already_a_directory";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,			                     "Filename '".$p_entry['filename']."' is "								 ."already used by an existing directory");            return PclZip::errorCode();		    }      }      // ----- Look if file is write protected      else if (!is_writeable($p_entry['filename']))      {        // ----- Change the file status        $p_entry['status'] = "write_protected";        // ----- Look for PCLZIP_OPT_STOP_ON_ERROR        // For historical reason first PclZip implementation does not stop        // when this kind of error occurs.        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {            PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			                     "Filename '".$p_entry['filename']."' exists "								 ."and is write protected");            return PclZip::errorCode();		    }      }      // ----- Look if the extracted file is older      else if (filemtime($p_entry['filename']) > $p_entry['mtime'])      {        // ----- Change the file status        if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))		    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {	  	  }		    else {            $p_entry['status'] = "newer_exist";            // ----- Look for PCLZIP_OPT_STOP_ON_ERROR            // For historical reason first PclZip implementation does not stop            // when this kind of error occurs.            if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))		        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {                PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,			             "Newer version of '".$p_entry['filename']."' exists "					    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");                return PclZip::errorCode();		      }		    }      }      else {      }    }    // ----- Check the directory availability and create it if necessary    else {      if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))        $v_dir_to_check = $p_entry['filename'];      else if (!strstr($p_entry['filename'], "/"))        $v_dir_to_check = "";      else        $v_dir_to_check = dirname($p_entry['filename']);        if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {          // ----- Change the file status          $p_entry['status'] = "path_creation_fail";          // ----- Return          //return $v_result;          $v_result = 1;        }      }    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010))      {        // ----- Look for not compressed file        if ($p_entry['compression'] == 0) {    		  // ----- Opening destination file          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)          {            // ----- Change the file status            $p_entry['status'] = "write_error";            // ----- Return            return $v_result;          }          // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks          $v_size = $p_entry['compressed_size'];          while ($v_size != 0)          {            $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);            $v_buffer = @fread($this->zip_fd, $v_read_size);            /* Try to speed up the code            $v_binary_data = pack('a'.$v_read_size, $v_buffer);            @fwrite($v_dest_file, $v_binary_data, $v_read_size);            */            @fwrite($v_dest_file, $v_buffer, $v_read_size);            $v_size -= $v_read_size;          }          // ----- Closing the destination file          fclose($v_dest_file);          // ----- Change the file mtime          touch($p_entry['filename'], $p_entry['mtime']);        }        else {          // ----- TBC          // Need to be finished          if (($p_entry['flag'] & 1) == 1) {            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');            return PclZip::errorCode();          }          // ----- Look for using temporary file to unzip          if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF]))              && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])                  || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])                      && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {            $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);            if ($v_result < PCLZIP_ERR_NO_ERROR) {              return $v_result;            }          }          // ----- Look for extract in memory          else {            // ----- Read the compressed file in a buffer (one shot)            $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);            // ----- Decompress the file            $v_file_content = @gzinflate($v_buffer);            unset($v_buffer);            if ($v_file_content === FALSE) {              // ----- Change the file status              // TBC              $p_entry['status'] = "error";              return $v_result;            }            // ----- Opening destination file            if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {              // ----- Change the file status              $p_entry['status'] = "write_error";              return $v_result;            }            // ----- Write the uncompressed data            @fwrite($v_dest_file, $v_file_content, $p_entry['size']);            unset($v_file_content);            // ----- Closing the destination file            @fclose($v_dest_file);          }          // ----- Change the file mtime          @touch($p_entry['filename'], $p_entry['mtime']);        }        // ----- Look for chmod option        if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {          // ----- Change the mode of the file          @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);        }      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileUsingTempFile()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileUsingTempFile(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Creates a temporary file    $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';    if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {      fclose($v_file);      PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');      return PclZip::errorCode();    }    // ----- Write gz file format header    $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));    @fwrite($v_dest_file, $v_binary_data, 10);    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['compressed_size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Write gz file format footer    $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);    @fwrite($v_dest_file, $v_binary_data, 8);    // ----- Close the temporary file    @fclose($v_dest_file);    // ----- Opening destination file    if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {      $p_entry['status'] = "write_error";      return $v_result;    }    // ----- Open the temporary gz file    if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {      @fclose($v_dest_file);      $p_entry['status'] = "read_error";      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');      return PclZip::errorCode();    }    // ----- Read the file by PCLZIP_READ_BLOCK_SIZE octets blocks    $v_size = $p_entry['size'];    while ($v_size != 0) {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @gzread($v_src_file, $v_read_size);      //$v_binary_data = pack('a'.$v_read_size, $v_buffer);      @fwrite($v_dest_file, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    @fclose($v_dest_file);    @gzclose($v_src_file);    // ----- Delete the temporary file    @unlink($v_gzip_temp_name);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileInOutput()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileInOutput(&$p_entry, &$p_options)  {    $v_result=1;    // ----- Read the file header    if (($v_result = $this->privReadFileHeader($v_header)) != 1) {      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.//      eval('$v_result = '.$p_options[PCLZIP_CB_PRE_EXTRACT].'(PCLZIP_CB_PRE_EXTRACT, $v_local_header);');      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Trace    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file        if ($p_entry['compressed_size'] == $p_entry['size']) {          // ----- Read the file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Send the file to the output          echo $v_buffer;          unset($v_buffer);        }        else {          // ----- Read the compressed file in a buffer (one shot)          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          $v_file_content = gzinflate($v_buffer);          unset($v_buffer);          // ----- Send the file to the output          echo $v_file_content;          unset($v_file_content);        }      }    }	// ----- Change abort status	if ($p_entry['status'] == "aborted") {      $p_entry['status'] = "skipped";	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privExtractFileAsString()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)  {    $v_result=1;    // ----- Read the file header    $v_header = array();    if (($v_result = $this->privReadFileHeader($v_header)) != 1)    {      // ----- Return      return $v_result;    }    // ----- Check that the file header is coherent with $p_entry info    if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {        // TBC    }    // ----- Look for pre-extract callback    if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);      if ($v_result == 0) {        // ----- Change the file status        $p_entry['status'] = "skipped";        $v_result = 1;      }      // ----- Look for abort result      if ($v_result == 2) {        // ----- This status is internal and will be changed in 'skipped'        $p_entry['status'] = "aborted";      	$v_result = PCLZIP_ERR_USER_ABORTED;      }      // ----- Update the informations      // Only some fields can be modified      $p_entry['filename'] = $v_local_header['filename'];    }    // ----- Look if extraction should be done    if ($p_entry['status'] == 'ok') {      // ----- Do the extraction (if not a folder)      if (!(($p_entry['external']&0x00000010)==0x00000010)) {        // ----- Look for not compressed file  //      if ($p_entry['compressed_size'] == $p_entry['size'])        if ($p_entry['compression'] == 0) {          // ----- Reading the file          $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);        }        else {          // ----- Reading the file          $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);          // ----- Decompress the file          if (($p_string = @gzinflate($v_data)) === FALSE) {              // TBC          }        }        // ----- Trace      }      else {          // TBC : error : can not extract a folder in a string      }    }  	// ----- Change abort status  	if ($p_entry['status'] == "aborted") {        $p_entry['status'] = "skipped";  	}    // ----- Look for post-extract callback    elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {      // ----- Generate a local information      $v_local_header = array();      $this->privConvertHeader2FileInfo($p_entry, $v_local_header);      // ----- Swap the content to header      $v_local_header['content'] = $p_string;      $p_string = '';      // ----- Call the callback      // Here I do not use call_user_func() because I need to send a reference to the      // header.      $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);      // ----- Swap back the content to header      $p_string = $v_local_header['content'];      unset($v_local_header['content']);      // ----- Look for abort result      if ($v_result == 2) {      	$v_result = PCLZIP_ERR_USER_ABORTED;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x04034b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 26);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 26)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);    // ----- Get filename    $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);    // ----- Get extra_fields    if ($v_data['extra_len'] != 0) {      $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);    }    else {      $p_header['extra'] = '';    }    // ----- Extract properties    $p_header['version_extracted'] = $v_data['version'];    $p_header['compression'] = $v_data['compression'];    $p_header['size'] = $v_data['size'];    $p_header['compressed_size'] = $v_data['compressed_size'];    $p_header['crc'] = $v_data['crc'];    $p_header['flag'] = $v_data['flag'];    $p_header['filename_len'] = $v_data['filename_len'];    // ----- Recuperate date in UNIX format    $p_header['mdate'] = $v_data['mdate'];    $p_header['mtime'] = $v_data['mtime'];    if ($p_header['mdate'] && $p_header['mtime'])    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // TBC    //for(reset($v_data); $key = key($v_data); next($v_data)) {    //}    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set the status field    $p_header['status'] = "ok";    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadCentralFileHeader()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadCentralFileHeader(&$p_header)  {    $v_result=1;    // ----- Read the 4 bytes signature    $v_binary_data = @fread($this->zip_fd, 4);    $v_data = unpack('Vid', $v_binary_data);    // ----- Check signature    if ($v_data['id'] != 0x02014b50)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');      // ----- Return      return PclZip::errorCode();    }    // ----- Read the first 42 bytes of the header    $v_binary_data = fread($this->zip_fd, 42);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 42)    {      $p_header['filename'] = "";      $p_header['status'] = "invalid_header";      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);    // ----- Get filename    if ($p_header['filename_len'] != 0)      $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);    else      $p_header['filename'] = '';    // ----- Get extra    if ($p_header['extra_len'] != 0)      $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);    else      $p_header['extra'] = '';    // ----- Get comment    if ($p_header['comment_len'] != 0)      $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);    else      $p_header['comment'] = '';    // ----- Extract properties    // ----- Recuperate date in UNIX format    //if ($p_header['mdate'] && $p_header['mtime'])    // TBC : bug : this was ignoring time with 0/0/0    if (1)    {      // ----- Extract time      $v_hour = ($p_header['mtime'] & 0xF800) >> 11;      $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;      $v_seconde = ($p_header['mtime'] & 0x001F)*2;      // ----- Extract date      $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;      $v_month = ($p_header['mdate'] & 0x01E0) >> 5;      $v_day = $p_header['mdate'] & 0x001F;      // ----- Get UNIX date format      $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);    }    else    {      $p_header['mtime'] = time();    }    // ----- Set the stored filename    $p_header['stored_filename'] = $p_header['filename'];    // ----- Set default status to ok    $p_header['status'] = 'ok';    // ----- Look if it is a directory    if (substr($p_header['filename'], -1) == '/') {      //$p_header['external'] = 0x41FF0010;      $p_header['external'] = 0x00000010;    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privCheckFileHeaders()  // Description :  // Parameters :  // Return Values :  //   1 on success,  //   0 on error;  // --------------------------------------------------------------------------------  function privCheckFileHeaders(&$p_local_header, &$p_central_header)  {    $v_result=1;  	// ----- Check the static values  	// TBC  	if ($p_local_header['filename'] != $p_central_header['filename']) {  	}  	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {  	}  	if ($p_local_header['flag'] != $p_central_header['flag']) {  	}  	if ($p_local_header['compression'] != $p_central_header['compression']) {  	}  	if ($p_local_header['mtime'] != $p_central_header['mtime']) {  	}  	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {  	}  	// ----- Look for flag bit 3  	if (($p_local_header['flag'] & 8) == 8) {          $p_local_header['size'] = $p_central_header['size'];          $p_local_header['compressed_size'] = $p_central_header['compressed_size'];          $p_local_header['crc'] = $p_central_header['crc'];  	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privReadEndCentralDir()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privReadEndCentralDir(&$p_central_dir)  {    $v_result=1;    // ----- Go to the end of the zip file    $v_size = filesize($this->zipname);    @fseek($this->zip_fd, $v_size);    if (@ftell($this->zip_fd) != $v_size)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');      // ----- Return      return PclZip::errorCode();    }    // ----- First try : look if this is an archive with no commentaries (most of the time)    // in this case the end of central dir is at 22 bytes of the file end    $v_found = 0;    if ($v_size > 26) {      @fseek($this->zip_fd, $v_size-22);      if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read for bytes      $v_binary_data = @fread($this->zip_fd, 4);      $v_data = @unpack('Vid', $v_binary_data);      // ----- Check signature      if ($v_data['id'] == 0x06054b50) {        $v_found = 1;      }      $v_pos = ftell($this->zip_fd);    }    // ----- Go back to the maximum possible size of the Central Dir End Record    if (!$v_found) {      $v_maximum_size = 65557; // 0xFFFF + 22;      if ($v_maximum_size > $v_size)        $v_maximum_size = $v_size;      @fseek($this->zip_fd, $v_size-$v_maximum_size);      if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');        // ----- Return        return PclZip::errorCode();      }      // ----- Read byte per byte in order to find the signature      $v_pos = ftell($this->zip_fd);      $v_bytes = 0x00000000;      while ($v_pos < $v_size)      {        // ----- Read a byte        $v_byte = @fread($this->zip_fd, 1);        // -----  Add the byte        //$v_bytes = ($v_bytes << 8) | Ord($v_byte);        // Note we mask the old value down such that once shifted we can never end up with more than a 32bit number        // Otherwise on systems where we have 64bit integers the check below for the magic number will fail.        $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte);        // ----- Compare the bytes        if ($v_bytes == 0x504b0506)        {          $v_pos++;          break;        }        $v_pos++;      }      // ----- Look if not found end of central dir      if ($v_pos == $v_size)      {        // ----- Error log        PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");        // ----- Return        return PclZip::errorCode();      }    }    // ----- Read the first 18 bytes of the header    $v_binary_data = fread($this->zip_fd, 18);    // ----- Look for invalid block size    if (strlen($v_binary_data) != 18)    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));      // ----- Return      return PclZip::errorCode();    }    // ----- Extract the values    $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);    // ----- Check the global size    if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {	  // ----- Removed in release 2.2 see readme file	  // The check of the file size is a little too strict.	  // Some bugs where found when a zip is encrypted/decrypted with 'crypt'.	  // While decrypted, zip has training 0 bytes	  if (0) {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,	                       'The central dir is not at the end of the archive.'						   .' Some trailing bytes exists after the archive.');      // ----- Return      return PclZip::errorCode();	  }    }    // ----- Get comment    if ($v_data['comment_size'] != 0) {      $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);    }    else      $p_central_dir['comment'] = '';    $p_central_dir['entries'] = $v_data['entries'];    $p_central_dir['disk_entries'] = $v_data['disk_entries'];    $p_central_dir['offset'] = $v_data['offset'];    $p_central_dir['size'] = $v_data['size'];    $p_central_dir['disk'] = $v_data['disk'];    $p_central_dir['disk_start'] = $v_data['disk_start'];    // TBC    //for(reset($p_central_dir); $key = key($p_central_dir); next($p_central_dir)) {    //}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDeleteByRule()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDeleteByRule(&$p_result_list, &$p_options)  {    $v_result=1;    $v_list_detail = array();    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Scan all the files    // ----- Start at beginning of Central Dir    $v_pos_entry = $v_central_dir['offset'];    @rewind($this->zip_fd);    if (@fseek($this->zip_fd, $v_pos_entry))    {      // ----- Close the zip file      $this->privCloseFd();      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');      // ----- Return      return PclZip::errorCode();    }    // ----- Read each entry    $v_header_list = array();    $j_start = 0;    for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)    {      // ----- Read the file header      $v_header_list[$v_nb_extracted] = array();      if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)      {        // ----- Close the zip file        $this->privCloseFd();        return $v_result;      }      // ----- Store the index      $v_header_list[$v_nb_extracted]['index'] = $i;      // ----- Look for the specific extract rules      $v_found = false;      // ----- Look for extract by name rule      if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))          && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {          // ----- Look if the filename is in the list          for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {              // ----- Look for a directory              if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {                  // ----- Look if the directory is in the filename path                  if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))                      && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }                  elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) /* Indicates a folder */                          && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {                      $v_found = true;                  }              }              // ----- Look for a filename              elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {                  $v_found = true;              }          }      }      // ----- Look for extract by ereg rule      // ereg() is deprecated with PHP 5.3      /*      else if (   (isset($p_options[PCLZIP_OPT_BY_EREG]))               && ($p_options[PCLZIP_OPT_BY_EREG] != "")) {          if (ereg($p_options[PCLZIP_OPT_BY_EREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      */      // ----- Look for extract by preg rule      else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))               && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {          if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {              $v_found = true;          }      }      // ----- Look for extract by index rule      else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))               && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {          // ----- Look if the index is in the list          for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {              if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {                  $v_found = true;              }              if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {                  $j_start = $j+1;              }              if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {                  break;              }          }      }      else {      	$v_found = true;      }      // ----- Look for deletion      if ($v_found)      {        unset($v_header_list[$v_nb_extracted]);      }      else      {        $v_nb_extracted++;      }    }    // ----- Look if something need to be deleted    if ($v_nb_extracted > 0) {        // ----- Creates a temporay file        $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';        // ----- Creates a temporary zip archive        $v_temp_zip = new PclZip($v_zip_temp_name);        // ----- Open the temporary zip file in write mode        if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {            $this->privCloseFd();            // ----- Return            return $v_result;        }        // ----- Look which file need to be kept        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Calculate the position of the header            @rewind($this->zip_fd);            if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Error log                PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');                // ----- Return                return PclZip::errorCode();            }            // ----- Read the file header            $v_local_header = array();            if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Check that local file header is same as central file header            if ($this->privCheckFileHeaders($v_local_header,			                                $v_header_list[$i]) != 1) {                // TBC            }            unset($v_local_header);            // ----- Write the file header            if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Read/write the data block            if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {                // ----- Close the zip file                $this->privCloseFd();                $v_temp_zip->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }        }        // ----- Store the offset of the central dir        $v_offset = @ftell($v_temp_zip->zip_fd);        // ----- Re-Create the Central Dir files header        for ($i=0; $i<sizeof($v_header_list); $i++) {            // ----- Create the file header            if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {                $v_temp_zip->privCloseFd();                $this->privCloseFd();                @unlink($v_zip_temp_name);                // ----- Return                return $v_result;            }            // ----- Transform the header to a 'usable' info            $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);        }        // ----- Zip file comment        $v_comment = '';        if (isset($p_options[PCLZIP_OPT_COMMENT])) {          $v_comment = $p_options[PCLZIP_OPT_COMMENT];        }        // ----- Calculate the size of the central header        $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;        // ----- Create the central dir footer        if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {            // ----- Reset the file list            unset($v_header_list);            $v_temp_zip->privCloseFd();            $this->privCloseFd();            @unlink($v_zip_temp_name);            // ----- Return            return $v_result;        }        // ----- Close        $v_temp_zip->privCloseFd();        $this->privCloseFd();        // ----- Delete the zip file        // TBC : I should test the result ...        @unlink($this->zipname);        // ----- Rename the temporary file        // TBC : I should test the result ...        //@rename($v_zip_temp_name, $this->zipname);        PclZipUtilRename($v_zip_temp_name, $this->zipname);        // ----- Destroy the temporary archive        unset($v_temp_zip);    }    // ----- Remove every files : reset the file    else if ($v_central_dir['entries'] != 0) {        $this->privCloseFd();        if (($v_result = $this->privOpenFd('wb')) != 1) {          return $v_result;        }        if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {          return $v_result;        }        $this->privCloseFd();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDirCheck()  // Description :  //   Check if a directory exists, if not it creates it and all the parents directory  //   which may be useful.  // Parameters :  //   $p_dir : Directory path to check.  // Return Values :  //    1 : OK  //   -1 : Unable to create directory  // --------------------------------------------------------------------------------  function privDirCheck($p_dir, $p_is_dir=false)  {    $v_result = 1;    // ----- Remove the final '/'    if (($p_is_dir) && (substr($p_dir, -1)=='/'))    {      $p_dir = substr($p_dir, 0, strlen($p_dir)-1);    }    // ----- Check the directory availability    if ((is_dir($p_dir)) || ($p_dir == ""))    {      return 1;    }    // ----- Extract parent directory    $p_parent_dir = dirname($p_dir);    // ----- Just a check    if ($p_parent_dir != $p_dir)    {      // ----- Look for parent directory      if ($p_parent_dir != "")      {        if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)        {          return $v_result;        }      }    }    // ----- Create the directory    if (!@mkdir($p_dir, 0777))    {      // ----- Error log      PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");      // ----- Return      return PclZip::errorCode();    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privMerge()  // Description :  //   If $p_archive_to_add does not exist, the function exit with a success result.  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privMerge(&$p_archive_to_add)  {    $v_result=1;    // ----- Look if the archive_to_add exists    if (!is_file($p_archive_to_add->zipname))    {      // ----- Nothing to merge, so merge is a success      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Look if the archive exists    if (!is_file($this->zipname))    {      // ----- Do a duplicate      $v_result = $this->privDuplicate($p_archive_to_add->zipname);      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('rb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir = array();    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)    {      $this->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($this->zip_fd);    // ----- Open the archive_to_add file    if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)    {      $this->privCloseFd();      // ----- Return      return $v_result;    }    // ----- Read the central directory informations    $v_central_dir_to_add = array();    if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      return $v_result;    }    // ----- Go to beginning of File    @rewind($p_archive_to_add->zip_fd);    // ----- Creates a temporay file    $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = $v_central_dir['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the files from the archive_to_add into the temporary file    $v_size = $v_central_dir_to_add['offset'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Store the offset of the central dir    $v_offset = @ftell($v_zip_temp_fd);    // ----- Copy the block of file headers from the old archive    $v_size = $v_central_dir['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($this->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Copy the block of file headers from the archive_to_add    $v_size = $v_central_dir_to_add['size'];    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);      @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Merge the file comments    $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];    // ----- Calculate the size of the (new) central header    $v_size = @ftell($v_zip_temp_fd)-$v_offset;    // ----- Swap the file descriptor    // Here is a trick : I swap the temporary fd with the zip fd, in order to use    // the following methods on the temporary fil and not the real archive fd    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Create the central dir footer    if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)    {      $this->privCloseFd();      $p_archive_to_add->privCloseFd();      @fclose($v_zip_temp_fd);      $this->zip_fd = null;      // ----- Reset the file list      unset($v_header_list);      // ----- Return      return $v_result;    }    // ----- Swap back the file descriptor    $v_swap = $this->zip_fd;    $this->zip_fd = $v_zip_temp_fd;    $v_zip_temp_fd = $v_swap;    // ----- Close    $this->privCloseFd();    $p_archive_to_add->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Delete the zip file    // TBC : I should test the result ...    @unlink($this->zipname);    // ----- Rename the temporary file    // TBC : I should test the result ...    //@rename($v_zip_temp_name, $this->zipname);    PclZipUtilRename($v_zip_temp_name, $this->zipname);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDuplicate()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDuplicate($p_archive_filename)  {    $v_result=1;    // ----- Look if the $p_archive_filename exists    if (!is_file($p_archive_filename))    {      // ----- Nothing to duplicate, so duplicate is a success.      $v_result = 1;      // ----- Return      return $v_result;    }    // ----- Open the zip file    if (($v_result=$this->privOpenFd('wb')) != 1)    {      // ----- Return      return $v_result;    }    // ----- Open the temporary file in write mode    if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)    {      $this->privCloseFd();      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');      // ----- Return      return PclZip::errorCode();    }    // ----- Copy the files from the archive to the temporary file    // TBC : Here I should better append the file and go back to erase the central dir    $v_size = filesize($p_archive_filename);    while ($v_size != 0)    {      $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);      $v_buffer = fread($v_zip_temp_fd, $v_read_size);      @fwrite($this->zip_fd, $v_buffer, $v_read_size);      $v_size -= $v_read_size;    }    // ----- Close    $this->privCloseFd();    // ----- Close the temporary file    @fclose($v_zip_temp_fd);    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorLog()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorLog($p_error_code=0, $p_error_string='')  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclError($p_error_code, $p_error_string);    }    else {      $this->error_code = $p_error_code;      $this->error_string = $p_error_string;    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privErrorReset()  // Description :  // Parameters :  // --------------------------------------------------------------------------------  function privErrorReset()  {    if (PCLZIP_ERROR_EXTERNAL == 1) {      PclErrorReset();    }    else {      $this->error_code = 0;      $this->error_string = '';    }  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privDisableMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privDisableMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if already done    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Get and memorize the magic_quote value	$this->magic_quotes_status = @get_magic_quotes_runtime();	// ----- Disable magic_quotes	if ($this->magic_quotes_status == 1) {	  @set_magic_quotes_runtime(0);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : privSwapBackMagicQuotes()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function privSwapBackMagicQuotes()  {    $v_result=1;    // ----- Look if function exists    if (   (!function_exists("get_magic_quotes_runtime"))	    || (!function_exists("set_magic_quotes_runtime"))) {      return $v_result;	}    // ----- Look if something to do    if ($this->magic_quotes_status != -1) {      return $v_result;	}	// ----- Swap back magic_quotes	if ($this->magic_quotes_status == 1) {  	  @set_magic_quotes_runtime($this->magic_quotes_status);	}    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  }  // End of class  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathReduction()  // Description :  // Parameters :  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilPathReduction($p_dir)  {    $v_result = "";    // ----- Look for not empty path    if ($p_dir != "") {      // ----- Explode path by directory names      $v_list = explode("/", $p_dir);      // ----- Study directories from last to first      $v_skip = 0;      for ($i=sizeof($v_list)-1; $i>=0; $i--) {        // ----- Look for current path        if ($v_list[$i] == ".") {          // ----- Ignore this directory          // Should be the first $i=0, but no check is done        }        else if ($v_list[$i] == "..") {		  $v_skip++;        }        else if ($v_list[$i] == "") {		  // ----- First '/' i.e. root slash		  if ($i == 0) {            $v_result = "/".$v_result;		    if ($v_skip > 0) {		        // ----- It is an invalid path, so the path is not modified		        // TBC		        $v_result = $p_dir;                $v_skip = 0;		    }		  }		  // ----- Last '/' i.e. indicates a directory		  else if ($i == (sizeof($v_list)-1)) {            $v_result = $v_list[$i];		  }		  // ----- Double '/' inside the path		  else {            // ----- Ignore only the double '//' in path,            // but not the first and last '/'		  }        }        else {		  // ----- Look for item to skip		  if ($v_skip > 0) {		    $v_skip--;		  }		  else {            $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");		  }        }      }      // ----- Look for skip      if ($v_skip > 0) {        while ($v_skip > 0) {            $v_result = '../'.$v_result;            $v_skip--;        }      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilPathInclusion()  // Description :  //   This function indicates if the path $p_path is under the $p_dir tree. Or,  //   said in an other way, if the file or sub-dir $p_path is inside the dir  //   $p_dir.  //   The function indicates also if the path is exactly the same as the dir.  //   This function supports path with duplicated '/' like '//', but does not  //   support '.' or '..' statements.  // Parameters :  // Return Values :  //   0 if $p_path is not inside directory $p_dir  //   1 if $p_path is inside directory $p_dir  //   2 if $p_path is exactly the same as $p_dir  // --------------------------------------------------------------------------------  function PclZipUtilPathInclusion($p_dir, $p_path)  {    $v_result = 1;    // ----- Look for path beginning by ./    if (   ($p_dir == '.')        || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {      $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);    }    if (   ($p_path == '.')        || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {      $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);    }    // ----- Explode dir and path by directory separator    $v_list_dir = explode("/", $p_dir);    $v_list_dir_size = sizeof($v_list_dir);    $v_list_path = explode("/", $p_path);    $v_list_path_size = sizeof($v_list_path);    // ----- Study directories paths    $i = 0;    $j = 0;    while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {      // ----- Look for empty dir (path reduction)      if ($v_list_dir[$i] == '') {        $i++;        continue;      }      if ($v_list_path[$j] == '') {        $j++;        continue;      }      // ----- Compare the items      if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {        $v_result = 0;      }      // ----- Next items      $i++;      $j++;    }    // ----- Look if everything seems to be the same    if ($v_result) {      // ----- Skip all the empty items      while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;      while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;      if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {        // ----- There are exactly the same        $v_result = 2;      }      else if ($i < $v_list_dir_size) {        // ----- The path is shorter than the dir        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilCopyBlock()  // Description :  // Parameters :  //   $p_mode : read/write compression mode  //             0 : src & dest normal  //             1 : src gzip, dest normal  //             2 : src normal, dest gzip  //             3 : src & dest gzip  // Return Values :  // --------------------------------------------------------------------------------  function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)  {    $v_result = 1;    if ($p_mode==0)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==1)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @fwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==2)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @fread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    else if ($p_mode==3)    {      while ($p_size != 0)      {        $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);        $v_buffer = @gzread($p_src, $v_read_size);        @gzwrite($p_dest, $v_buffer, $v_read_size);        $p_size -= $v_read_size;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilRename()  // Description :  //   This function tries to do a simple rename() function. If it fails, it  //   tries to copy the $p_src file in a new $p_dest file and then unlink the  //   first one.  // Parameters :  //   $p_src : Old filename  //   $p_dest : New filename  // Return Values :  //   1 on success, 0 on failure.  // --------------------------------------------------------------------------------  function PclZipUtilRename($p_src, $p_dest)  {    $v_result = 1;    // ----- Try to rename the files    if (!@rename($p_src, $p_dest)) {      // ----- Try to copy & unlink the src      if (!@copy($p_src, $p_dest)) {        $v_result = 0;      }      else if (!@unlink($p_src)) {        $v_result = 0;      }    }    // ----- Return    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilOptionText()  // Description :  //   Translate option value in text. Mainly for debug purpose.  // Parameters :  //   $p_option : the option value.  // Return Values :  //   The option text value.  // --------------------------------------------------------------------------------  function PclZipUtilOptionText($p_option)  {    $v_list = get_defined_constants();    for (reset($v_list); $v_key = key($v_list); next($v_list)) {	    $v_prefix = substr($v_key, 0, 10);	    if ((   ($v_prefix == 'PCLZIP_OPT')           || ($v_prefix == 'PCLZIP_CB_')           || ($v_prefix == 'PCLZIP_ATT'))	        && ($v_list[$v_key] == $p_option)) {        return $v_key;	    }    }    $v_result = 'Unknown';    return $v_result;  }  // --------------------------------------------------------------------------------  // --------------------------------------------------------------------------------  // Function : PclZipUtilTranslateWinPath()  // Description :  //   Translate windows path by replacing '\' by '/' and optionally removing  //   drive letter.  // Parameters :  //   $p_path : path to translate.  //   $p_remove_disk_letter : true | false  // Return Values :  //   The path translated.  // --------------------------------------------------------------------------------  function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)  {    if (stristr(php_uname(), 'windows')) {      // ----- Look for potential disk letter      if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {          $p_path = substr($p_path, $v_position+1);      }      // ----- Change potential windows directory separator      if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {          $p_path = strtr($p_path, '\\', '/');      }    }    return $p_path;  }  // --------------------------------------------------------------------------------?>
<?php/** * Displays Administration Menu. * * @package WordPress * @subpackage Administration *//** * The current page. * * @global string $self * @name $self * @var string */$self = preg_replace('|^.*/wp-admin/|i', '', $_SERVER['PHP_SELF']);$self = preg_replace('|^.*/plugins/|i', '', $self);$self = preg_replace('|^.*/mu-plugins/|i', '', $self);global $menu, $submenu, $parent_file; //For when admin-header is included from within a function.$parent_file = apply_filters("parent_file", $parent_file); // For plugins to move submenu tabs around.get_admin_page_parent();/** * Display menu. * * @access private * @since 2.7.0 * * @param array $menu * @param array $submenu * @param bool $submenu_as_parent */function _wp_menu_output( $menu, $submenu, $submenu_as_parent = true ) {	global $self, $parent_file, $submenu_file, $plugin_page, $pagenow, $typenow;	$first = true;	// 0 = name, 1 = capability, 2 = file, 3 = class, 4 = id, 5 = icon src	foreach ( $menu as $key => $item ) {		$admin_is_parent = false;		$class = array();		if ( $first ) {			$class[] = 'wp-first-item';			$first = false;		}		if ( !empty($submenu[$item[2]]) )			$class[] = 'wp-has-submenu';		if ( ( $parent_file && $item[2] == $parent_file ) || ( false === strpos($parent_file, '?') && $self == $item[2] ) ) {			if ( !empty($submenu[$item[2]]) )				$class[] = 'wp-has-current-submenu wp-menu-open';			else				$class[] = 'current';		}		if ( ! empty($item[4]) )			$class[] = $item[4];		$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';		$tabindex = ' tabindex="1"';		$id = ! empty($item[5]) ? ' id="' . preg_replace( '|[^a-zA-Z0-9_:.]|', '-', $item[5] ) . '"' : '';		$img = '';		if ( ! empty($item[6]) ) {			if ( 'div' === $item[6] )				$img = '<br />';			else				$img = '<img src="' . $item[6] . '" alt="" />';		}		$toggle = '<div class="wp-menu-toggle"><br /></div>';		$title = wptexturize($item[0]);		echo "\n\t<li$class$id>";		if ( false !== strpos($class, 'wp-menu-separator') ) {			echo '<a class="separator" href="?unfoldmenu=1"><br /></a>';		} elseif ( $submenu_as_parent && !empty($submenu[$item[2]]) ) {			$submenu[$item[2]] = array_values($submenu[$item[2]]);  // Re-index.			$menu_hook = get_plugin_page_hook($submenu[$item[2]][0][2], $item[2]);			$menu_file = $submenu[$item[2]][0][2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ( ('index.php' != $submenu[$item[2]][0][2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") ) || !empty($menu_hook)) {				$admin_is_parent = true;				echo "<div class='wp-menu-image'><a href='admin.php?page={$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='admin.php?page={$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$submenu[$item[2]][0][2]}'>$img</a></div>$toggle<a href='{$submenu[$item[2]][0][2]}'$class$tabindex>$title</a>";			}		} else if ( current_user_can($item[1]) ) {			$menu_hook = get_plugin_page_hook($item[2], 'admin.php');			$menu_file = $item[2];			if ( false !== $pos = strpos($menu_file, '?') )				$menu_file = substr($menu_file, 0, $pos);			if ( ('index.php' != $item[2]) && file_exists(WP_PLUGIN_DIR . "/$menu_file") || !empty($menu_hook) ) {				$admin_is_parent = true;				echo "\n\t<div class='wp-menu-image'><a href='admin.php?page={$item[2]}'>$img</a></div>$toggle<a href='admin.php?page={$item[2]}'$class$tabindex>{$item[0]}</a>";			} else {				echo "\n\t<div class='wp-menu-image'><a href='{$item[2]}'>$img</a></div>$toggle<a href='{$item[2]}'$class$tabindex>{$item[0]}</a>";			}		}		if ( !empty($submenu[$item[2]]) ) {			echo "\n\t<div class='wp-submenu'><div class='wp-submenu-head'>{$item[0]}</div><ul>";			$first = true;			foreach ( $submenu[$item[2]] as $sub_key => $sub_item ) {				if ( !current_user_can($sub_item[1]) )					continue;				$class = array();				if ( $first ) {					$class[] = 'wp-first-item';					$first = false;				}				$menu_file = $item[2];				if ( false !== $pos = strpos($menu_file, '?') )					$menu_file = substr($menu_file, 0, $pos);				// Handle current for post_type=post|page|foo pages, which won't match $self.				if ( !empty($typenow) )					$self_type = $self . '?post_type=' . $typenow;				else					$self_type = 'nothing';				if ( isset($submenu_file) ) {					if ( $submenu_file == $sub_item[2] )						$class[] = 'current';				// If plugin_page is set the parent must either match the current page or not physically exist.				// This allows plugin pages with the same hook to exist under different parents.				} else if ( (isset($plugin_page) && $plugin_page == $sub_item[2] && (!file_exists($menu_file) || ($item[2] == $self) || ($item[2] == $self_type))) || (!isset($plugin_page) && $self == $sub_item[2]) ) {					$class[] = 'current';				}				$class = $class ? ' class="' . join( ' ', $class ) . '"' : '';				$menu_hook = get_plugin_page_hook($sub_item[2], $item[2]);				$sub_file = $sub_item[2];				if ( false !== $pos = strpos($sub_file, '?') )					$sub_file = substr($sub_file, 0, $pos);				$title = wptexturize($sub_item[0]);				if ( ( ('index.php' != $sub_item[2]) && file_exists(WP_PLUGIN_DIR . "/$sub_file") ) || ! empty($menu_hook) ) {					// If admin.php is the current page or if the parent exists as a file in the plugins or admin dir					if ( (!$admin_is_parent && file_exists(WP_PLUGIN_DIR . "/$menu_file") && !is_dir(WP_PLUGIN_DIR . "/{$item[2]}")) || file_exists($menu_file) )						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), $item[2] );					else						$sub_item_url = add_query_arg( array('page' => $sub_item[2]), 'admin.php' );					$sub_item_url = esc_url($sub_item_url);					echo "<li$class><a href='$sub_item_url'$class$tabindex>$title</a></li>";				} else {					echo "<li$class><a href='{$sub_item[2]}'$class$tabindex>$title</a></li>";				}			}			echo "</ul></div>";		}		echo "</li>";	}}?><ul id="adminmenu"><?php_wp_menu_output( $menu, $submenu );do_action( 'adminmenu' );?></ul>
<?php/** * Loads the WordPress environment and template. * * @package WordPress */if ( !isset($wp_did_header) ) {	$wp_did_header = true;	require_once( dirname(__FILE__) . '/wp-load.php' );	wp();	require_once( ABSPATH . WPINC . '/template-loader.php' );}?>
<?php/** * WordPress Post Thumbnail Template Functions. * * Support for post thumbnails * Themes function.php must call add_theme_support( 'post-thumbnails' ) to use these. * * @package WordPress * @subpackage Template *//** * Check if post has an image attached. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return bool Whether post has an image attached. */function has_post_thumbnail( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return !! get_post_thumbnail_id( $post_id );}/** * Retrieve Post Thumbnail ID. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @return int */function get_post_thumbnail_id( $post_id = NULL ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	return get_post_meta( $post_id, '_thumbnail_id', true );}/** * Display Post Thumbnail. * * @since 2.9.0 * * @param int $size Optional. Image size.  Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );. * @param string|array $attr Optional. Query string or array of attributes. */function the_post_thumbnail( $size = 'post-thumbnail', $attr = '' ) {	echo get_the_post_thumbnail( NULL, $size, $attr );}/** * Retrieve Post Thumbnail. * * @since 2.9.0 * * @param int $post_id Optional. Post ID. * @param string $size Optional. Image size.  Defaults to 'thumbnail'. * @param string|array $attr Optional. Query string or array of attributes.  */function get_the_post_thumbnail( $post_id = NULL, $size = 'post-thumbnail', $attr = '' ) {	global $id;	$post_id = ( NULL === $post_id ) ? $id : $post_id;	$post_thumbnail_id = get_post_thumbnail_id( $post_id );	$size = apply_filters( 'post_thumbnail_size', $size );	if ( $post_thumbnail_id ) {		do_action( 'begin_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size ); // for "Just In Time" filtering of all of wp_get_attachment_image()'s filters		$html = wp_get_attachment_image( $post_thumbnail_id, $size, false, $attr );		do_action( 'end_fetch_post_thumbnail_html', $post_id, $post_thumbnail_id, $size );	} else {		$html = '';	}	return apply_filters( 'post_thumbnail_html', $html, $post_id, $post_thumbnail_id, $size, $attr );}?>
<?php/** * The template for displaying Category Archive pages. * * @package WordPress * @subpackage Twenty_Ten * @since Twenty Ten 1.0 */get_header(); ?>		<div id="container">			<div id="content" role="main">				<h1 class="page-title"><?php					printf( __( 'Category Archives: %s', 'twentyten' ), '<span>' . single_cat_title( '', false ) . '</span>' );				?></h1>				<?php					$category_description = category_description();					if ( ! empty( $category_description ) )						echo '<div class="archive-meta">' . $category_description . '</div>';				/* Run the loop for the category page to output the posts.				 * If you want to overload this in a child theme then include a file				 * called loop-category.php and that will be used instead.				 */				get_template_part( 'loop', 'category' );				?>			</div><!-- #content -->		</div><!-- #container --><?php get_sidebar(); ?><?php get_footer(); ?>
<?php/** * Disable error reporting * * Set this to error_reporting( E_ALL ) or error_reporting( E_ALL | E_STRICT ) for debugging */error_reporting(0);/** Set ABSPATH for execution */define( 'ABSPATH', dirname(dirname(__FILE__)) . '/' );define( 'WPINC', 'wp-includes' );/** * @ignore */function __() {}/** * @ignore */function _x() {}/** * @ignore */function add_filter() {}/** * @ignore */function esc_attr() {}/** * @ignore */function apply_filters() {}/** * @ignore */function get_option() {}/** * @ignore */function is_lighttpd_before_150() {}/** * @ignore */function add_action() {}/** * @ignore */function do_action_ref_array() {}/** * @ignore */function get_bloginfo() {}/** * @ignore */function is_admin() {return true;}/** * @ignore */function site_url() {}/** * @ignore */function admin_url() {}/** * @ignore */function wp_guess_url() {}function get_file($path) {	if ( function_exists('realpath') )		$path = realpath($path);	if ( ! $path || ! @is_file($path) )		return '';	return @file_get_contents($path);}require(ABSPATH . '/wp-includes/script-loader.php');require(ABSPATH . '/wp-includes/version.php');$load = preg_replace( '/[^a-z0-9,_-]+/i', '', $_GET['load'] );$load = explode(',', $load);if ( empty($load) )	exit;$compress = ( isset($_GET['c']) && $_GET['c'] );$force_gzip = ( $compress && 'gzip' == $_GET['c'] );$rtl = ( isset($_GET['dir']) && 'rtl' == $_GET['dir'] );$expires_offset = 31536000;$out = '';$wp_styles = new WP_Styles();wp_default_styles($wp_styles);foreach( $load as $handle ) {	if ( !array_key_exists($handle, $wp_styles->registered) )		continue;	$style = $wp_styles->registered[$handle];	$path = ABSPATH . $style->src;	$content = get_file($path) . "\n";	if ( $rtl && isset($style->extra['rtl']) && $style->extra['rtl'] ) {		$rtl_path = is_bool($style->extra['rtl']) ? str_replace( '.css', '-rtl.css', $path ) : ABSPATH . $style->extra['rtl'];		$content .= get_file($rtl_path) . "\n";	}	$out .= str_replace( '../images/', 'images/', $content );}header('Content-Type: text/css');header('Expires: ' . gmdate( "D, d M Y H:i:s", time() + $expires_offset ) . ' GMT');header("Cache-Control: public, max-age=$expires_offset");if ( $compress && ! ini_get('zlib.output_compression') && 'ob_gzhandler' != ini_get('output_handler') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) ) {	header('Vary: Accept-Encoding'); // Handle proxies	if ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {		header('Content-Encoding: deflate');		$out = gzdeflate( $out, 3 );	} elseif ( false !== strpos( strtolower($_SERVER['HTTP_ACCEPT_ENCODING']), 'gzip') && function_exists('gzencode') ) {		header('Content-Encoding: gzip');		$out = gzencode( $out, 3 );	}}echo $out;exit;
<?php/** * The custom background script. * * @package WordPress * @subpackage Administration *//** * The custom background class. * * @since 3.0.0 * @package WordPress * @subpackage Administration */class Custom_Background {	/**	 * Callback for administration header.	 *	 * @var callback	 * @since unknown	 * @access private	 */	var $admin_header_callback;	/**	 * Callback for header div.	 *	 * @var callback	 * @since 3.0.0	 * @access private	 */	var $admin_image_div_callback;	/**	 * Holds the page menu hook.	 *	 * @var string	 * @since 3.0.0	 * @access private	 */	var $page = '';	/**	 * PHP4 Constructor - Register administration header callback.	 *	 * @since 3.0.0	 * @param callback $admin_header_callback	 * @param callback $admin_image_div_callback Optional custom image div output callback.	 * @return Custom_Background	 */	function Custom_Background($admin_header_callback = '', $admin_image_div_callback = '') {		$this->admin_header_callback = $admin_header_callback;		$this->admin_image_div_callback = $admin_image_div_callback;	}	/**	 * Set up the hooks for the Custom Background admin page.	 *	 * @since 3.0.0	 */	function init() {		if ( ! current_user_can('edit_theme_options') )			return;		$this->page = $page = add_theme_page(__('Background'), __('Background'), 'edit_theme_options', 'custom-background', array(&$this, 'admin_page'));		add_action("load-$page", array(&$this, 'admin_load'));		add_action("load-$page", array(&$this, 'take_action'), 49);		add_action("load-$page", array(&$this, 'handle_upload'), 49);		if ( $this->admin_header_callback )			add_action("admin_head-$page", $this->admin_header_callback, 51);	}	/**	 * Set up the enqueue for the CSS & JavaScript files.	 *	 * @since 3.0.0	 */	function admin_load() {		add_contextual_help( $this->page, '<p>' . __( 'You can customize the look of your site without touching any of your theme&#8217;s code by using a custom background. Your background can be an image or a color.' ) . '</p>' .		'<p>' . __( 'To use a background image, simply upload it, then choose your display options below. You can display a single instance of your image, or tile it to fill the screen. You can have your background fixed in place, so your site content moves on top of it, or you can have it scroll with your site.' ) . '</p>' .		'<p>' . __( 'You can also choose a background color. If you know the hexadecimal code for the color you want, enter it in the Color field. If not, click on the Select a Color link, and a color picker will allow you to choose the exact shade you want.' ) . '</p>' .		'<p>' . __( 'Don&#8217;t forget to click on the Save Changes button when you are finished.' ) . '</p>' .		'<p><strong>' . __( 'For more information:' ) . '</strong></p>' .		'<p>' . __( '<a href="http://codex.wordpress.org/Appearance_Background_SubPanel" target="_blank">Documentation on Custom Background</a>' ) . '</p>' .		'<p>' . __( '<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>' ) . '</p>' );		wp_enqueue_script('custom-background');		wp_enqueue_style('farbtastic');	}	/**	 * Execute custom background modification.	 *	 * @since 3.0.0	 */	function take_action() {		if ( empty($_POST) )			return;		if ( isset($_POST['reset-background']) ) {			check_admin_referer('custom-background-reset', '_wpnonce-custom-background-reset');			remove_theme_mod('background_image');			remove_theme_mod('background_image_thumb');			$this->updated = true;			return;		}		if ( isset($_POST['remove-background']) ) {			// @TODO: Uploaded files are not removed here.			check_admin_referer('custom-background-remove', '_wpnonce-custom-background-remove');			set_theme_mod('background_image', '');			set_theme_mod('background_image_thumb', '');			$this->updated = true;			return;		}		if ( isset($_POST['background-repeat']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-repeat'], array('repeat', 'no-repeat', 'repeat-x', 'repeat-y')) )				$repeat = $_POST['background-repeat'];			else				$repeat = 'repeat';			set_theme_mod('background_repeat', $repeat);		}		if ( isset($_POST['background-position-x']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-position-x'], array('center', 'right', 'left')) )				$position = $_POST['background-position-x'];			else				$position = 'left';			set_theme_mod('background_position_x', $position);		}		if ( isset($_POST['background-attachment']) ) {			check_admin_referer('custom-background');			if ( in_array($_POST['background-attachment'], array('fixed', 'scroll')) )				$attachment = $_POST['background-attachment'];			else				$attachment = 'fixed';			set_theme_mod('background_attachment', $attachment);		}		if ( isset($_POST['background-color']) ) {			check_admin_referer('custom-background');			$color = preg_replace('/[^0-9a-fA-F]/', '', $_POST['background-color']);			if ( strlen($color) == 6 || strlen($color) == 3 )				set_theme_mod('background_color', $color);			else				set_theme_mod('background_color', '');		}		$this->updated = true;	}	/**	 * Display the custom background page.	 *	 * @since 3.0.0	 */	function admin_page() {?><div class="wrap" id="custom-background"><?php screen_icon(); ?><h2><?php _e('Custom Background'); ?></h2><?php if ( !empty($this->updated) ) { ?><div id="message" class="updated"><p><?php printf( __( 'Background updated. <a href="%s">Visit your site</a> to see how it looks.' ), home_url( '/' ) ); ?></p></div><?php }	if ( $this->admin_image_div_callback ) {		call_user_func($this->admin_image_div_callback);	} else {?><h3><?php _e('Background Image'); ?></h3><table class="form-table"><tbody><tr valign="top"><th scope="row"><?php _e('Preview'); ?></th><td><?php$background_styles = '';if ( $bgcolor = get_background_color() )	$background_styles .= 'background-color: #' . $bgcolor . ';';if ( get_background_image() ) {	// background-image URL must be single quote, see below	$background_styles .= ' background-image: url(\'' . get_theme_mod('background_image_thumb', '') . '\');'		. ' background-repeat: ' . get_theme_mod('background_repeat', 'repeat') . ';'		. ' background-position: top ' . get_theme_mod('background_position_x', 'left');}?><div id="custom-background-image" style="<?php echo $background_styles; ?>"><?php // must be double quote, see above ?><?php if ( get_background_image() ) { ?><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><br /><img class="custom-background-image" src="<?php echo get_theme_mod('background_image_thumb', ''); ?>" style="visibility:hidden;" alt="" /><?php } ?></div><?php } ?></td></tr><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e('Remove Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-remove', '_wpnonce-custom-background-remove'); ?><input type="submit" class="button" name="remove-background" value="<?php esc_attr_e('Remove Background Image'); ?>" /><br/><?php _e('This will remove the background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><?php if ( defined( 'BACKGROUND_IMAGE' ) ) : // Show only if a default background image exists ?><tr valign="top"><th scope="row"><?php _e('Restore Original Image'); ?></th><td><form method="post" action=""><?php wp_nonce_field('custom-background-reset', '_wpnonce-custom-background-reset'); ?><input type="submit" class="button" name="reset-background" value="<?php esc_attr_e('Restore Original Image'); ?>" /><br/><?php _e('This will restore the original background image. You will not be able to restore any customizations.') ?></form></td></tr><?php endif; ?><tr valign="top"><th scope="row"><?php _e('Upload Image'); ?></th><td><form enctype="multipart/form-data" id="upload-form" method="post" action=""><label for="upload"><?php _e('Choose an image from your computer:'); ?></label><br /><input type="file" id="upload" name="import" /><input type="hidden" name="action" value="save" /><?php wp_nonce_field('custom-background-upload', '_wpnonce-custom-background-upload') ?><input type="submit" class="button" value="<?php esc_attr_e('Upload'); ?>" /></p></form></td></tr></tbody></table><h3><?php _e('Display Options') ?></h3><form method="post" action=""><table class="form-table"><tbody><?php if ( get_background_image() ) : ?><tr valign="top"><th scope="row"><?php _e( 'Position' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Position' ); ?></span></legend><label><input name="background-position-x" type="radio" value="left"<?php checked('left', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Left') ?></label><label><input name="background-position-x" type="radio" value="center"<?php checked('center', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Center') ?></label><label><input name="background-position-x" type="radio" value="right"<?php checked('right', get_theme_mod('background_position_x', 'left')); ?> /><?php _e('Right') ?></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Repeat' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Repeat' ); ?></span></legend><label><input type="radio" name="background-repeat" value="no-repeat"<?php checked('no-repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('No Repeat'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat"<?php checked('repeat', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-x"<?php checked('repeat-x', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Horizontally'); ?></option></label>	<label><input type="radio" name="background-repeat" value="repeat-y"<?php checked('repeat-y', get_theme_mod('background_repeat', 'repeat')); ?>> <?php _e('Tile Vertically'); ?></option></label></fieldset></td></tr><tr valign="top"><th scope="row"><?php _e( 'Attachment' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Attachment' ); ?></span></legend><label><input name="background-attachment" type="radio" value="scroll" <?php checked('scroll', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Scroll') ?></label><label><input name="background-attachment" type="radio" value="fixed" <?php checked('fixed', get_theme_mod('background_attachment', 'scroll')); ?> /><?php _e('Fixed') ?></label></fieldset></td></tr><?php endif; // get_background_image() ?><tr valign="top"><th scope="row"><?php _e( 'Color' ); ?></th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'Background Color' ); ?></span></legend><input type="text" name="background-color" id="background-color" value="#<?php echo esc_attr(get_background_color()) ?>" /><a class="hide-if-no-js" href="#" id="pickcolor"><?php _e('Select a Color'); ?></a><div id="colorPickerDiv" style="z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;"></div></fieldset></td></tr></tbody></table><?php wp_nonce_field('custom-background'); ?><p class="submit"><input type="submit" class="button-primary" name="save-background-options" value="<?php esc_attr_e('Save Changes'); ?>" /></p></form></div><?php	}	/**	 * Handle a Image upload for the background image.	 *	 * @since 3.0.0	 */	function handle_upload() {		if ( empty($_FILES) )			return;		check_admin_referer('custom-background-upload', '_wpnonce-custom-background-upload');		$overrides = array('test_form' => false);		$file = wp_handle_upload($_FILES['import'], $overrides);		if ( isset($file['error']) )			wp_die( $file['error'] );		$url = $file['url'];		$type = $file['type'];		$file = $file['file'];		$filename = basename($file);		// Construct the object array		$object = array(			'post_title' => $filename,			'post_content' => $url,			'post_mime_type' => $type,			'guid' => $url		);		// Save the data		$id = wp_insert_attachment($object, $file);		// Add the meta-data		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );		set_theme_mod('background_image', esc_url($url));		$thumbnail = wp_get_attachment_image_src( $id, 'thumbnail' );		set_theme_mod('background_image_thumb', esc_url( $thumbnail[0] ) );		do_action('wp_create_file_in_uploads', $file, $id); // For replication		$this->updated = true;	}}?>
<?php/** * Administration Functions * * This file is deprecated, use 'wp-admin/includes/admin.php' instead. * * @deprecated 2.5 * @package WordPress * @subpackage Administration */_deprecated_file( basename(__FILE__), '2.5', 'wp-admin/includes/admin.php' );/** WordPress Administration API: Includes all Administration functions. */require_once(ABSPATH . 'wp-admin/includes/admin.php');?>
<?php/** * Upload new media Administration Panel. * * @package WordPress * @subpackage Administration */$_GET['inline'] = 'true';/** Administration bootstrap */require_once('./admin.php');require_once('./media-upload.php');?>
<?php/** * New Post Administration Panel. * * @package WordPress * @subpackage Administration *//** Load WordPress Administration Bootstrap */require_once('./admin.php');if ( !isset($_GET['post_type']) )	$post_type = 'post';elseif ( in_array( $_GET['post_type'], get_post_types( array('show_ui' => true ) ) ) )	$post_type = $_GET['post_type'];else	wp_die( __('Invalid post type') );if ( 'post' != $post_type ) {	$parent_file = "edit.php?post_type=$post_type";	$submenu_file = "post-new.php?post_type=$post_type";} else {	$parent_file = 'edit.php';	$submenu_file = 'post-new.php';}$post_type_object = get_post_type_object($post_type);$title = $post_type_object->labels->add_new_item;$editing = true;if ( 'post' == $post_type && !current_user_can('edit_posts') ) {	include('./admin-header.php'); ?><div class="wrap"><p><?php printf(__('Since you&#8217;re a newcomer, you&#8217;ll have to wait for an admin to add the <code>edit_posts</code> capability to your user, in order to be authorized to post.<br />You can also <a href="mailto:%s?subject=Promotion?">e-mail the admin</a> to ask for a promotion.<br />When you&#8217;re promoted, just reload this page and you&#8217;ll be able to blog. :)'), get_option('admin_email')); ?></p></div><?php	include('./admin-footer.php');	exit();}wp_enqueue_script('autosave');// Show post form.if ( current_user_can($post_type_object->cap->edit_posts) ) {	$post = get_default_post_to_edit( $post_type, true );	$post_ID = $post->ID;	include('edit-form-advanced.php');}include('./admin-footer.php');?>
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 2.0.4                                                          ||   Contact: via sourceforge.net support pages (also www.codeworxtech.com)  ||      Info: http://phpmailer.sourceforge.net                               ||   Support: http://sourceforge.net/projects/phpmailer/                     || ------------------------------------------------------------------------- ||    Author: Andy Prevost (project admininistrator)                         ||    Author: Brent R. Matzelle (original founder)                           || Copyright (c) 2004-2007, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         || ------------------------------------------------------------------------- || We offer a number of paid services (www.codeworxtech.com):                || - Web Hosting on highly optimized fast and secure servers                 || - Technology Consulting                                                   || - Oursourcing (highly qualified programmers and graphic designers)        |'---------------------------------------------------------------------------' *//** * SMTP is rfc 821 compliant and implements all the rfc 821 SMTP * commands except TURN which will always return a not implemented * error. SMTP also provides some utility methods for sending mail * to an SMTP server. * @package PHPMailer * @author Chris Ryan */class SMTP{  /**   *  SMTP server port   *  @var int   */  var $SMTP_PORT = 25;  /**   *  SMTP reply line ending   *  @var string   */  var $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  var $do_debug;       # the level of debug to perform  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  var $do_verp = false;  /**#@+   * @access private   */  var $smtp_conn;      # the socket to the server  var $error;          # error if any on the last call  var $helo_rply;      # the reply the server sent to us for HELO  /**#@-*/  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return void   */  function SMTP() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /*************************************************************   *                    CONNECTION FUNCTIONS                  *   ***********************************************************/  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @return bool   */  function Connect($host,$port=0,$tval=30) {    # set the error val to null so there is no confusion    $this->error = null;    # make sure we are __not__ connected    if($this->connected()) {      # ok we are connected! what should we do?      # for now we will just give an error saying we      # are already connected      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    #connect to the smtp server    $this->smtp_conn = fsockopen($host,    # the host of the server                                 $port,    # the port to use                                 $errno,   # error number if any                                 $errstr,  # error message if any                                 $tval);   # give up after ? secs    # verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": $errstr ($errno)" . $this->CRLF;      }      return false;    }    # sometimes the SMTP server takes a little longer to respond    # so we will give it a longer timeout for the first read    // Windows still does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN")     socket_set_timeout($this->smtp_conn, $tval, 0);    # get any announcement stuff    $announce = $this->get_lines();    # set the timeout  of any socket functions at 1/10 of a second    //if(function_exists("socket_set_timeout"))    //   socket_set_timeout($this->smtp_conn, 0, 100000);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $announce;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @return bool   */  function Authenticate($username, $password) {    // Start authentication    fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "AUTH not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded username    fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 334) {      $this->error =        array("error" => "Username not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    // Send encoded password    fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($code != 235) {      $this->error =        array("error" => "Password not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access private   * @return bool   */  function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        # hmm this is an odd situation... the socket is        # valid but we are not connected anymore        if($this->do_debug >= 1) {            echo "SMTP -> NOTICE:" . $this->CRLF .                 "EOF caught while checking if connected";        }        $this->Close();        return false;      }      return true; # everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  function Close() {    $this->error = null; # so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      # close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /***************************************************************   *                        SMTP COMMANDS                       *   *************************************************************/  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being separated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Data($msg_data) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # the server is ready to accept data!    # according to rfc 821 we should not send more than 1000    # including the CRLF    # characters on a single line so we will break the data up    # into lines by \r and/or \n then if needed we will break    # each of those into smaller lines to fit within the limit.    # in addition we will be looking for lines that start with    # a period '.' and append and additional period '.' to that    # line. NOTE: this does not count towards are limit.    # normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    # we need to find a good way to determine is headers are    # in the msg_data or if it is a straight msg body    # currently I am assuming rfc 822 definitions of msg headers    # and if the first field of the first line (':' sperated)    # does not contain a space then it _should_ be a header    # and we can process all lines before a blank "" line as    # headers.    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; # used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      # ok we need to break this line up into several      # smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        # Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;        }        $lines_out[] = substr($line,0,$pos);        $line = substr($line,$pos + 1);        # if we are processing headers we need to        # add a LWSP-char to the front of the new line        # rfc 822 on long msg headers        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      # now send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    # ok all the message data has been sent so lets get this    # over with aleady    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Expand takes the name and asks the server to list all the   * people who are members of the _list_. Expand will return   * back and array of the result or false if an error occurs.   * Each value in the array returned has the format of:   *     [ <full-name> <sp> ] <path>   * The definition of <path> is defined in rfc 821   *   * Implements rfc 821: EXPN <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 550   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string array   */  function Expand($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Expand() without being connected");      return false;    }    fputs($this->smtp_conn,"EXPN " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "EXPN not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    # parse the reply and place in our array to return to user    $entries = explode($this->CRLF,$rply);    while(list(,$l) = @each($entries)) {      $list[] = substr($l,4);    }    return $list;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @return bool   */  function Hello($host="") {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    # if a hostname for the HELO was not specified determine    # a suitable one to send    if(empty($host)) {      # we need to determine some sort of appopiate default      # to send to the server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host))    {      if(!$this->SendHello("HELO", $host))          return false;    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @return bool   */  function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER: " . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Gets help information on the keyword specified. If the keyword   * is not specified then returns generic help, ussually contianing   * A list of keywords that help is available on. This function   * returns the results back to the user. It is up to the user to   * handle the returned data. If an error occurs then false is   * returned with $this->error set appropiately.   *   * Implements rfc 821: HELP [ <SP> <string> ] <CRLF>   *   * SMTP CODE SUCCESS: 211,214   * SMTP CODE ERROR  : 500,501,502,504,421   * @access public   * @return string   */  function Help($keyword="") {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Help() without being connected");      return false;    }    $extra = "";    if(!empty($keyword)) {      $extra = " " . $keyword;    }    fputs($this->smtp_conn,"HELP" . $extra . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 211 && $code != 214) {      $this->error =        array("error" => "HELP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @return bool   */  function Mail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? "XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the command NOOP to the SMTP server.   *   * Implements from rfc 821: NOOP <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 421   * @access public   * @return bool   */  function Noop() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Noop() without being connected");      return false;    }    fputs($this->smtp_conn,"NOOP" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "NOOP not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @return bool   */  function Quit($close_on_error=true) {    $this->error = null; # so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    # send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    # get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $byemsg;    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      # use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $e["error"] . ": " .                 $byemsg . $this->CRLF;      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @return bool   */  function Recipient($to) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  function Reset() {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in.   *   * Implements rfc 821: SEND <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function Send($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Send() without being connected");      return false;    }    fputs($this->smtp_conn,"SEND FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SEND not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendAndMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in or mail it to them if they are not.   *   * Implements rfc 821: SOML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @return bool   */  function SendOrMail($from) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendOrMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SOML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250) {      $this->error =        array("error" => "SOML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF;    }    return false;  }  /**   * Verifies that the name is recognized by the server.   * Returns false if the name could not be verified otherwise   * the response from the server is returned.   *   * Implements rfc 821: VRFY <SP> <string> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,553   * SMTP CODE ERROR  : 500,501,502,421   * @access public   * @return int   */  function Verify($name) {    $this->error = null; # so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Verify() without being connected");      return false;    }    fputs($this->smtp_conn,"VRFY " . $name . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "VRFY failed on name '$name'",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        echo "SMTP -> ERROR: " . $this->error["error"] .                 ": " . $rply . $this->CRLF;      }      return false;    }    return $rply;  }  /*******************************************************************   *                       INTERNAL FUNCTIONS                       *   ******************************************************************/  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  function get_lines() {    $data = "";    while($str = @fgets($this->smtp_conn,515)) {      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data was \"$data\"" .                 $this->CRLF;        echo "SMTP -> get_lines(): \$str is \"$str\"" .                 $this->CRLF;      }      $data .= $str;      if($this->do_debug >= 4) {        echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;      }      # if the 4th character is a space then we are done reading      # so just break the loop      if(substr($str,3,1) == " ") { break; }    }    return $data;  }} ?>
<?phpif ( !defined( 'ABSPATH' ) )	exit;/** @ignore */function dvortr( $str ) {	return strtr(		$str,		'\',.pyfgcrl/=\\aoeuidhtns-;qjkxbmwvz"<>PYFGCRL?+|AOEUIDHTNS_:QJKXBMWVZ[]',		'qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?-='	);}$j = esc_url( site_url( '/wp-includes/js/jquery/jquery.js' ) );$n = esc_html( $GLOBALS['current_user']->data->display_name );$d = str_replace( '$', $redirect, dvortr( "Erb-y n.y ydco dall.b aiacbv Wa ce]-irxajt- dp.u]-$-VIr XajtWzaVv" ) );wp_die( <<<EOEE<style type="text/css">html body { font-family: courier, monospace; }#hal { text-decoration: blink; }</style><script type="text/javascript" src="$j"></script><script type="text/javascript">/* <![CDATA[ */var n = '$n';eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}('6(4(){2 e=6(\\'#Q\\').v();2 i=\\'\\\\\\',.R/=\\\\\\\\S-;T"<>U?+|V:W[]X{}\\'.u(\\'\\');2 o=\\'Y[]\\\\\\\\Z;\\\\\\'10,./11{}|12:"13<>?-=14+\\'.u(\\'\\');2 5=4(s){r=\\'\\';6.15(s.u(\\'\\'),4(){2 t=16.D();2 c=6.17(t,i);r+=\\'\$\\'==t?n:(-1==c?t:o[c])});j r};2 a=[\\'O.E[18 e.y.19.1a\\',\\'1b 1c. 1d .1e.,1f 1g\\',\\'O.E e.1h 1i 8\\',\\'9\\',\\'0\\'];2 b=[\\'<1j. 1k \$1l\\',\\'1m. 1n 1o 1p\\',\\'1q, 1r. ,1s. 1t\\'];2 w=[];2 h=6(5(\\'#1u\\'));6(5(\\'1v\\')).1w(4(e){7(1x!==e.1y){j}7(x&&x.F){x.F();j G}1z.1A=6(5(\\'#1B\\')).1C(\\'1D\\');j G});2 k=4(){2 l=a.H();7(\\'I\\'==J l){7(m){2 c={};c[5(\\'1E\\')]=5(\\'1F\\');c[5(\\'1G\\')]=5(\\'1H..b\\');6(5(\\'1I 1J\\')).1K(c);p();h.v().1L({1M:1},z,\\'1N\\',4(){h.K()});d(m,L)}j}w=5(l).u(\\'\\');A()};2 A=4(){B=w.H();7(\\'I\\'==J B){7(m){h.M(5(\\'1O 1P\\'));d(k,C)}N{7(a.P){d(p,C);d(k,z)}N{d(4(){p();h.v()},C);d(4(){e.K()},L)}}j}h.M(B.D());d(A,1Q)};2 m=4(){a=b;m=1R;k()};p=4(){2 f=6(\\'p\\').1S(0);2 g=6.1T(f.q).1U();1V(2 g=f.q.P;g>0;g--){7(3==f.q[g-1].1W||\\'1X\\'==f.q[g-1].1Y.1Z()){f.20(f.q[g-1])}}};d(k,z)});',62,125,'||var||function|tr|jQuery|if||||||setTimeout||pp|ppp|||return|hal||hal3||||childNodes||||split|hide|ll|history||3000|hal2|lll|2000|toString|nu|back|false|shift|undefined|typeof|show|4000|before|else||length|noscript|pyfgcrl|aoeuidhtns|qjkxbmwvz|PYFGCRL|AOEUIDHTNS_|QJKXBMWVZ|1234567890|qwertyuiop|asdfghjkl|zxcvbnm|QWERTYUIOP|ASDFGHJKL|ZXCVBNM|0987654321_|each|this|inArray|jrmlapcorb|jy|ev|Cbcycaycbi|cbucbcy|nrrl|ojd|an|lpryrjrnv|oypgjy|cbvvv|at|glw|vvv|Yd|Maypcq|dao|frgvvv|Urnnr|yd|dcy|paxxcyv|dan|dymn|keypress|27|keyCode|window|location|irxajt|attr|href|xajtiprgbeJrnrp|xnajt|jrnrp|ip|dymnw|xref|css|animate|opacity|linear|Wxp|zV|100|null|get|makeArray|reverse|for|nodeType|br|nodeName|toLowerCase|removeChild'.split('|'),0,{}))/* ]]> */</script><span id="noscript">$d</span><blink id="hal">&#x258c;</blink>EOEE,dvortr( 'Eabi.p!' ));
<?php/** * Atom Feed Template for displaying Atom Posts feed. * * @package WordPress */header('Content-Type: ' . feed_content_type('atom') . '; charset=' . get_option('blog_charset'), true);$more = 1;echo '<?xml version="1.0" encoding="'.get_option('blog_charset').'"?'.'>'; ?><feed  xmlns="http://www.w3.org/2005/Atom"  xmlns:thr="http://purl.org/syndication/thread/1.0"  xml:lang="<?php echo get_option('rss_language'); ?>"  xml:base="<?php bloginfo_rss('url') ?>/wp-atom.php"  <?php do_action('atom_ns'); ?> >	<title type="text"><?php bloginfo_rss('name'); wp_title_rss(); ?></title>	<subtitle type="text"><?php bloginfo_rss("description") ?></subtitle>	<updated><?php echo mysql2date('Y-m-d\TH:i:s\Z', get_lastpostmodified('GMT'), false); ?></updated>	<link rel="alternate" type="text/html" href="<?php bloginfo_rss('url') ?>" />	<id><?php bloginfo('atom_url'); ?></id>	<link rel="self" type="application/atom+xml" href="<?php self_link(); ?>" />	<?php do_action('atom_head'); ?>	<?php while (have_posts()) : the_post(); ?>	<entry>		<author>			<name><?php the_author() ?></name>			<?php $author_url = get_the_author_meta('url'); if ( !empty($author_url) ) : ?>			<uri><?php the_author_meta('url')?></uri>			<?php endif; ?>		</author>		<title type="<?php html_type_rss(); ?>"><![CDATA[<?php the_title_rss() ?>]]></title>		<link rel="alternate" type="text/html" href="<?php the_permalink_rss() ?>" />		<id><?php the_guid() ; ?></id>		<updated><?php echo get_post_modified_time('Y-m-d\TH:i:s\Z', true); ?></updated>		<published><?php echo get_post_time('Y-m-d\TH:i:s\Z', true); ?></published>		<?php the_category_rss('atom') ?>		<summary type="<?php html_type_rss(); ?>"><![CDATA[<?php the_excerpt_rss(); ?>]]></summary><?php if ( !get_option('rss_use_excerpt') ) : ?>		<content type="<?php html_type_rss(); ?>" xml:base="<?php the_permalink_rss() ?>"><![CDATA[<?php the_content_feed('atom') ?>]]></content><?php endif; ?><?php atom_enclosure(); ?><?php do_action('atom_entry'); ?>		<link rel="replies" type="text/html" href="<?php the_permalink_rss() ?>#comments" thr:count="<?php echo get_comments_number()?>"/>		<link rel="replies" type="application/atom+xml" href="<?php echo get_post_comments_feed_link(0,'atom') ?>" thr:count="<?php echo get_comments_number()?>"/>		<thr:total><?php echo get_comments_number()?></thr:total>	</entry>	<?php endwhile ; ?></feed>
<?php/** * Multisite sites administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( ! is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_sites' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Sites' );$parent_file = 'ms-admin.php';if ( isset( $_GET['action'] ) && 'editblog' == $_GET['action'] ) {	add_contextual_help($current_screen,		'<p>' . __('This extensive list of options has five modules: Site Info, Site Options, allowing Site Themes for this given site, changing user roles and passwords for that site, adding a new user, and Miscellaneous Site Actions (upload size limits).') . '</p>' .		'<p>' . __('Note that some fields in Site Options are grayed out and say Serialized Data. These are stored values in the database which you cannot change from here.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_Edit_Site" target="_blank">Documentation on Editing Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);} else {	add_contextual_help($current_screen,		'<p>' . __('Add New takes you farther down on this same page. You can search for a site by Name, ID number, or IP address. Screen Options allows you to choose how many sites to display on one page.') . '</p>' .		'<p>' . __('This is the main table of all sites on this network. Switch between list and excerpt views by using the icons above the right side of the table.') . '</p>' .		'<p>' . __('Hovering over each site reveals seven options (three for the primary site):') . '</p>' .		'<ul><li>' . __('an Edit link to a separate Edit Site screen.') . '</li>' .		'<li>' . __('Backend means the Dashboard for that site.') . '</li>' .		'<li>' . __('Deactivate, Archive, and Spam which lead to confirmation screens. These actions can be reversed later.') . '</li>' .		'<li>' . __('Delete which is a permanent action after the confirmations screen.') . '</li>' .		'<li>' . __('Visit to go to the frontend site live.') . '</li></ul>' .		'<p>' . __('The site ID is used internally, and is not shown on the front end of the site or to users/viewers.') . '</p>' .		'<p>' . __('Clicking on bold settings can re-sort this table. The upper right icons switch between list and excerpt views.') . '</p>' .		'<p>' . __("Clicking on Add Site, after filling out the address, title, and admin's email address, adds the site instantly to the network and this table. You may want to then click on the action link to edit options for that site.") . '</p>' .		'<p>' . __('If the admin email for the new site does not exist in the database, a new user will also be created.') . '</p>' .		'<p><strong>' . __('For more information:') . '</strong></p>' .		'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Sites_SubPanel" target="_blank">Documentation on Sites</a>') . '</p>' .		'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>'	);}wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );$id = isset( $_GET['id'] ) ? intval( $_GET['id'] ) : 0;if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'all_notspam':				_e( 'Sites removed from spam.' );			break;			case 'all_spam':				_e( 'Sites marked as spam.' );			break;			case 'all_delete':				_e( 'Sites deleted.' );			break;			case 'delete':				_e( 'Site deleted.' );			break;			case 'add-blog':				_e( 'Site added.' );			break;			case 'archive':				_e( 'Site archived.' );			break;			case 'unarchive':				_e( 'Site unarchived.' );			break;			case 'activate':				_e( 'Site activated.' );			break;			case 'deactivate':				_e( 'Site deactivated.' );			break;			case 'unspam':				_e( 'Site removed from spam.' );			break;			case 'spam':				_e( 'Site marked as spam.' );			break;			default:				_e( 'Settings saved.' );			break;		}		?>	</p></div>	<?php}$action = isset( $_GET['action'] ) ? $_GET['action'] : 'list';switch ( $action ) {	// Edit site	case 'editblog':		$blog_prefix = $wpdb->get_blog_prefix( $id );		$options = $wpdb->get_results( "SELECT * FROM {$blog_prefix}options WHERE option_name NOT LIKE '\_%' AND option_name NOT LIKE '%user_roles'" );		$details = get_blog_details( $id );		$editblog_roles = get_blog_option( $id, "{$blog_prefix}user_roles" );		$is_main_site = is_main_site( $id );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e( 'Edit Site' ); ?> - <a href="<?php echo esc_url( get_home_url( $id ) ); ?>"><?php echo esc_url( get_home_url( $id ) ); ?></a></h2>		<form method="post" action="ms-edit.php?action=updateblog">			<?php wp_nonce_field( 'editblog' ); ?>			<input type="hidden" name="id" value="<?php echo esc_attr( $id ) ?>" />			<div class="metabox-holder" style="width:49%;float:left;">				<div id="blogedit_bloginfo" class="postbox">				<h3 class="hndle"><span><?php _e( 'Site info (wp_blogs)' ); ?></span></h3>				<div class="inside">					<table class="form-table">						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Domain' ) ?></th>							<?php							$protocol = is_ssl() ? 'https://' : 'http://';							if ( $is_main_site ) { ?>							<td><code><?php echo $protocol; echo esc_attr( $details->domain ) ?></code></td>							<?php } else { ?>							<td><?php echo $protocol; ?><input name="blog[domain]" type="text" id="domain" value="<?php echo esc_attr( $details->domain ) ?>" size="33" /></td>							<?php } ?>						</tr>						<tr class="form-field form-required">							<th scope="row"><?php _e( 'Path' ) ?></th>							<?php if ( $is_main_site ) { ?>							<td><code><?php echo esc_attr( $details->path ) ?></code></td>							<?php } else { ?>							<td><input name="blog[path]" type="text" id="path" value="<?php echo esc_attr( $details->path ) ?>" size="40" style='margin-bottom:5px;' />							<br /><input type="checkbox" style="width:20px;" name="update_home_url" value="update" <?php if ( get_blog_option( $id, 'siteurl' ) == untrailingslashit( get_blogaddress_by_id ($id ) ) || get_blog_option( $id, 'home' ) == untrailingslashit( get_blogaddress_by_id( $id ) ) ) echo 'checked="checked"'; ?> /> <?php _e( 'Update <code>siteurl</code> and <code>home</code> as well.' ); ?></td>							<?php } ?>						</tr>						<tr class="form-field">							<th scope="row"><?php _ex( 'Registered', 'site' ) ?></th>							<td><input name="blog[registered]" type="text" id="blog_registered" value="<?php echo esc_attr( $details->registered ) ?>" size="40" /></td>						</tr>						<tr class="form-field">							<th scope="row"><?php _e('Last Updated') ?></th>							<td><input name="blog[last_updated]" type="text" id="blog_last_updated" value="<?php echo esc_attr( $details->last_updated ) ?>" size="40" /></td>						</tr>						<?php						$radio_fields = array( 'public' => __( 'Public' ) );						if ( ! $is_main_site ) {							$radio_fields['archived'] = __( 'Archived' );							$radio_fields['spam']     = _x( 'Spam', 'site' );							$radio_fields['deleted']  = __( 'Deleted' );						}						$radio_fields['mature'] = __( 'Mature' );						foreach ( $radio_fields as $field_key => $field_label ) {						?>						<tr>							<th scope="row"><?php echo $field_label; ?></th>							<td>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_1" value="1"<?php checked( $details->$field_key, 1 ); ?> />								<label for="blog_<?php echo $field_key; ?>_1"><?php _e('Yes'); ?></label>								<input type="radio" name="blog[<?php echo $field_key; ?>]" id="blog_<?php echo $field_key; ?>_0" value="0"<?php checked( $details->$field_key, 0 ); ?> />								<label for="blog_<?php echo $field_key; ?>_0"><?php _e('No'); ?></label>							</td>						</tr>						<?php } ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_blogoptions" class="postbox" >				<h3 class="hndle"><span><?php printf( __( 'Site options (%soptions)' ), $blog_prefix ); ?></span></h3>				<div class="inside">					<table class="form-table">						<?php						$editblog_default_role = 'subscriber';						foreach ( $options as $option ) {							if ( $option->option_name == 'default_role' )								$editblog_default_role = $option->option_value;							$disabled = false;							$class = 'all-options';							if ( is_serialized( $option->option_value ) ) {								if ( is_serialized_string( $option->option_value ) ) {									$option->option_value = esc_html( maybe_unserialize( $option->option_value ), 'single' );								} else {									$option->option_value = 'SERIALIZED DATA';									$disabled = true;									$class = 'all-options disabled';								}							}							if ( strpos( $option->option_value, "\n" ) !== false ) {							?>								<tr class="form-field">									<th scope="row"><?php echo ucwords( str_replace( "_", " ", $option->option_name ) ) ?></th>									<td><textarea class="<?php echo $class; ?>" rows="5" cols="40" name="option[<?php echo esc_attr( $option->option_name ) ?>]" id="<?php echo esc_attr( $option->option_name ) ?>"<?php disabled( $disabled ) ?>><?php wp_htmledit_pre( $option->option_value ) ?></textarea></td>								</tr>							<?php							} else {							?>								<tr class="form-field">									<th scope="row"><?php echo esc_html( ucwords( str_replace( "_", " ", $option->option_name ) ) ); ?></th>									<?php if ( $is_main_site && in_array( $option->option_name, array( 'siteurl', 'home' ) ) ) { ?>									<td><code><?php echo esc_html( $option->option_value ) ?></code></td>									<?php } else { ?>									<td><input class="<?php echo $class; ?>" name="option[<?php echo esc_attr( $option->option_name ) ?>]" type="text" id="<?php echo esc_attr( $option->option_name ) ?>" value="<?php echo esc_attr( $option->option_value ) ?>" size="40" <?php disabled( $disabled ) ?> /></td>									<?php } ?>								</tr>							<?php							}						} // End foreach						?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div class="metabox-holder" style="width:49%;float:right;">				<?php				// Site Themes				$themes = get_themes();				$blog_allowed_themes = wpmu_get_blog_allowedthemes( $id );				$allowed_themes = get_site_option( 'allowedthemes' );				if ( ! $allowed_themes )					$allowed_themes = array_keys( $themes );				$out = '';				foreach ( $themes as $key => $theme ) {					$theme_key = esc_html( $theme['Stylesheet'] );					if ( ! isset( $allowed_themes[$theme_key] ) ) {						$checked = isset( $blog_allowed_themes[ $theme_key ] ) ? 'checked="checked"' : '';						$out .= '<tr class="form-field form-required">								<th title="' . esc_attr( $theme["Description"] ).'" scope="row">' . esc_html( $key ) . '</th>								<td><label><input name="theme[' . esc_attr( $theme_key ) . ']" type="checkbox" style="width:20px;" value="on" '.$checked.'/> ' . __( 'Active' ) . '</label></td>							</tr>';					}				}				if ( $out != '' ) {				?>				<div id="blogedit_blogthemes" class="postbox">				<h3 class="hndle"><span><?php esc_html_e( 'Site Themes' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Activate the themename of an existing theme and hit "Update Options" to allow the theme for this site.' ) ?></p>					<table class="form-table">						<?php echo $out; ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div></div>				<?php }				// Site users				$blogusers = get_users_of_blog( $id );				if ( is_array( $blogusers ) ) {					echo '<div id="blogedit_blogusers" class="postbox"><h3 class="hndle"><span>' . __( 'Site Users' ) . '</span></h3><div class="inside">';					echo '<table class="form-table">';					echo "<tr><th>" . __( 'User' ) . "</th><th>" . __( 'Role' ) . "</th><th>" . __( 'Password' ) . "</th><th>" . __( 'Remove' ) . "</th></tr>";					reset( $blogusers );					foreach ( (array) $blogusers as $key => $val ) {						if ( isset( $val->meta_value ) && ! $val->meta_value )							continue;						$t = @unserialize( $val->meta_value );						if ( is_array( $t ) ) {							reset( $t );							$existing_role = key( $t );						}						echo '<tr><td><a href="user-edit.php?user_id=' . $val->user_id . '">' . $val->user_login . '</a></td>';						if ( $val->user_id != $current_user->data->ID ) {							?>							<td>								<select name="role[<?php echo $val->user_id ?>]" id="new_role_1"><?php									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										echo '<option ' . selected( $role, $existing_role, false ) . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>								</select>							</td>							<td>								<input type="text" name="user_password[<?php echo esc_attr( $val->user_id ) ?>]" />							</td>							<?php							echo '<td><input title="' . __( 'Click to remove user' ) . '" type="checkbox" name="blogusers[' . esc_attr( $val->user_id ) . ']" /></td>';						} else {							echo "<td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __ ( 'N/A' ) . "</strong></td><td><strong>" . __( 'N/A' ) . "</strong></td>";						}						echo '</tr>';					}					echo "</table>";					echo '<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="' . esc_attr__( 'Update Options' ) . '" /></p>';					echo "</div></div>";				}				?>				<div id="blogedit_blogadduser" class="postbox">				<h3 class="hndle"><span><?php _e( 'Add a new user' ); ?></span></h3>				<div class="inside">					<p class="description"><?php _e( 'Enter the username of an existing user and hit &#8220;Update Options&#8221; to add the user.' ) ?></p>					<table class="form-table">							<tr>								<th scope="row"><?php _e( 'User&nbsp;Login:' ) ?></th>								<td><input type="text" name="newuser" id="newuser" /></td>							</tr>							<tr>								<th scope="row"><?php _e( 'Role:' ) ?></th>								<td>									<select name="new_role" id="new_role_0">									<?php									reset( $editblog_roles );									foreach ( $editblog_roles as $role => $role_assoc ){										$name = translate_user_role( $role_assoc['name'] );										$selected = ( $role == $editblog_default_role ) ? 'selected="selected"' : '';										echo '<option ' . $selected . ' value="' . esc_attr( $role ) . '">' . esc_html( $name ) . '</option>';									}									?>									</select>								</td>							</tr>						</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>				<div id="blogedit_miscoptions" class="postbox">				<h3 class="hndle"><span><?php _e( 'Misc Site Actions' ) ?></span></h3>				<div class="inside">					<table class="form-table">							<?php do_action( 'wpmueditblogaction', $id ); ?>					</table>					<p class="submit" style="text-align:center;"><input type="submit" name="Submit" value="<?php esc_attr_e( 'Update Options' ) ?>" /></p>				</div>				</div>			</div>			<div style="clear:both;"></div>		</form>		</div>		<?php	break;	// List sites	case 'list':	default:		$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;		if ( empty($pagenum) )			$pagenum = 1;		$per_page = (int) get_user_option( 'ms_sites_per_page' );		if ( empty( $per_page ) || $per_page < 1 )			$per_page = 15;		$per_page = apply_filters( 'ms_sites_per_page', $per_page );		$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';		$like_s = esc_sql( like_escape( $s ) );		$query = "SELECT * FROM {$wpdb->blogs} WHERE site_id = '{$wpdb->siteid}' ";		if ( isset( $_GET['searchaction'] ) ) {			if ( 'name' == $_GET['searchaction'] ) {				$query .= " AND ( {$wpdb->blogs}.domain LIKE '%{$like_s}%' OR {$wpdb->blogs}.path LIKE '%{$like_s}%' ) ";			} elseif ( 'id' == $_GET['searchaction'] ) {				$query .= " AND {$wpdb->blogs}.blog_id = '{$like_s}' ";			} elseif ( 'ip' == $_GET['searchaction'] ) {				$query = "SELECT *					FROM {$wpdb->blogs}, {$wpdb->registration_log}					WHERE site_id = '{$wpdb->siteid}'					AND {$wpdb->blogs}.blog_id = {$wpdb->registration_log}.blog_id					AND {$wpdb->registration_log}.IP LIKE ('%{$like_s}%')";			}		}		$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';		if ( $order_by == 'registered' ) {			$query .= ' ORDER BY registered ';		} elseif ( $order_by == 'lastupdated' ) {			$query .= ' ORDER BY last_updated ';		} elseif ( $order_by == 'blogname' ) {			$query .= ' ORDER BY domain ';		} else {			$order_by = 'id';			$query .= " ORDER BY {$wpdb->blogs}.blog_id ";		}		$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? "DESC" : "ASC";		$query .= $order;		$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(blog_id)', $query ) );		$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page ) . ", " . intval( $per_page );		$blog_list = $wpdb->get_results( $query, ARRAY_A );		$num_pages = ceil($total / $per_page);		$page_links = paginate_links( array(			'base' => add_query_arg( 'paged', '%#%' ),			'format' => '',			'prev_text' => __( '&laquo;' ),			'next_text' => __( '&raquo;' ),			'total' => $num_pages,			'current' => $pagenum		));		if ( empty( $_GET['mode'] ) )			$mode = 'list';		else			$mode = esc_attr( $_GET['mode'] );		?>		<div class="wrap">		<?php screen_icon(); ?>		<h2><?php _e('Sites') ?>		<a href="#form-add-site" class="button add-new-h2"><?php echo esc_html_x( 'Add New', 'sites' ); ?></a>		<?php		if ( isset( $_GET['s'] ) && $_GET['s'] )		printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );		?>		</h2>		<form action="ms-sites.php" method="get" id="ms-search">		<p class="search-box">		<input type="hidden" name="action" value="blogs" />		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" />		<input type="submit" class="button" value="<?php esc_attr_e( 'Search Site by' ) ?>" />		<select name="searchaction">			<option value="name" selected="selected"><?php _e( 'Name' ); ?></option>			<option value="id"><?php _e( 'ID' ); ?></option>			<option value="ip"><?php _e( 'IP address' ); ?></option>		</select>		</p>		</form>		<form id="form-site-list" action="ms-edit.php?action=allblogs" method="post">		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">		<div class="alignleft actions">			<select name="action">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />			<?php wp_nonce_field( 'bulk-ms-sites', '_wpnonce_bulk-ms-sites' ); ?>		</div>		<?php if ( $page_links ) { ?>		<div class="tablenav-pages">		<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',		number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),		number_format_i18n( min( $pagenum * $per_page, $total ) ),		number_format_i18n( $total ),		$page_links		); echo $page_links_text; ?>		</div>		<?php } ?>		<div class="view-switch">			<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>			<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>		</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$blogname_columns = ( is_subdomain_install() ) ? __( 'Domain' ) : __( 'Path' );		$sites_columns = array(			'id'           => __( 'ID' ),			'blogname'     => $blogname_columns,			'lastupdated'  => __( 'Last Updated'),			'registered'   => _x( 'Registered', 'site' ),			'users'        => __( 'Users' )		);		if ( has_filter( 'wpmublogsaction' ) )			$sites_columns['plugins'] = __( 'Actions' );		$sites_columns = apply_filters( 'wpmu_blogs_columns', $sites_columns );		?>		<table class="widefat">			<thead>				<tr>				<th class="manage-column column-cb check-column" id="cb" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($sites_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array('action', 'updated'), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( ( $column_id == 'users' || $column_id == 'plugins' ) ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url ?>				</tr>			</thead>			<tfoot>				<tr>				<th class="manage-column column-cb check-column" id="cb1" scope="col">					<input type="checkbox" />				</th>					<?php echo $col_url ?>				</tr>			</tfoot>			<tbody id="the-site-list" class="list:site">			<?php			$status_list = array( 'archived' => array( 'site-archived', __( 'Archived' ) ), 'spam' => array( 'site-spammed', _x( 'Spam', 'site' ) ), 'deleted' => array( 'site-deleted', __( 'Deleted' ) ), 'mature' => array( 'site-mature', __( 'Mature' ) ) );			if ( $blog_list ) {				$class = '';				foreach ( $blog_list as $blog ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					reset( $status_list );					$blog_states = array();					foreach ( $status_list as $status => $col ) {						if ( get_blog_status( $blog['blog_id'], $status ) == 1 ) {							$class = $col[0];							$blog_states[] = $col[1];						}					}					$blog_state = '';					if ( ! empty( $blog_states ) ) {						$state_count = count( $blog_states );						$i = 0;						$blog_state .= ' - ';						foreach ( $blog_states as $state ) {							++$i;							( $i == $state_count ) ? $sep = '' : $sep = ', ';							$blog_state .= "<span class='post-state'>$state$sep</span>";						}					}					echo "<tr class='$class'>";					$blogname = ( is_subdomain_install() ) ? str_replace( '.'.$current_site->domain, '', $blog['domain'] ) : $blog['path'];					foreach ( $sites_columns as $column_name=>$column_display_name ) {						switch ( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $blog['blog_id'] ?>" name="allblogs[]" value="<?php echo esc_attr( $blog['blog_id'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $blog['blog_id'] ?>								</th>							<?php							break;							case 'blogname': ?>								<td class="column-title">									<a href="<?php echo esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ); ?>" class="edit"><?php echo $blogname . $blog_state; ?></a>									<?php									if ( 'list' != $mode )										echo '<p>' . sprintf( _x( '%1$s &#8211; <em>%2$s</em>', '%1$s: site name. %2$s: site tagline.' ), get_blog_option( $blog['blog_id'], 'blogname' ), get_blog_option( $blog['blog_id'], 'blogdescription ' ) ) . '</p>';									// Preordered.									$actions = array(										'edit' => '', 'backend' => '',										'activate' => '', 'deactivate' => '',										'archive' => '', 'unarchive' => '',										'spam' => '', 'unspam' => '',										'delete' => '',										'visit' => '',									);									$actions['edit']	= '<span class="edit"><a href="' . esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $blog['blog_id'] ) ) . '">' . __( 'Edit' ) . '</a></span>';									$actions['backend']	= "<span class='backend'><a href='" . esc_url( get_admin_url($blog['blog_id']) ) . "' class='edit'>" . __( 'Backend' ) . '</a></span>';									if ( $current_site->blog_id != $blog['blog_id'] ) {										if ( get_blog_status( $blog['blog_id'], 'deleted' ) == '1' )											$actions['activate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=activateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to activate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Activate' ) . '</a></span>';										else											$actions['deactivate']	= '<span class="activate"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deactivateblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to deactivate the site %s' ), $blogname ) ) ) ) . '">' . __( 'Deactivate' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'archived' ) == '1' )											$actions['unarchive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unarchiveblog&amp;id=' .  $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unarchive the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Unarchive' ) . '</a></span>';										else											$actions['archive']	= '<span class="archive"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=archiveblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to archive the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Archive', 'verb; site' ) . '</a></span>';										if ( get_blog_status( $blog['blog_id'], 'spam' ) == '1' )											$actions['unspam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=unspamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to unspam the site %s.' ), $blogname ) ) ) ) . '">' . _x( 'Not Spam', 'site' ) . '</a></span>';										else											$actions['spam']	= '<span class="spam"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=spamblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to mark the site %s as spam.' ), $blogname ) ) ) ) . '">' . _x( 'Spam', 'site' ) . '</a></span>';										$actions['delete']	= '<span class="delete"><a href="' . esc_url( admin_url( 'ms-edit.php?action=confirm&amp;action2=deleteblog&amp;id=' . $blog['blog_id'] . '&amp;msg=' . urlencode( sprintf( __( 'You are about to delete the site %s.' ), $blogname ) ) ) ) . '">' . __( 'Delete' ) . '</a></span>';									}									$actions['visit']	= "<span class='view'><a href='" . esc_url( get_home_url( $blog['blog_id'] ) ) . "' rel='permalink'>" . __( 'Visit' ) . '</a></span>';									$actions = array_filter( $actions );									if ( count( $actions ) ) : ?>									<div class="row-actions">										<?php echo implode( ' | ', $actions ); ?>									</div>									<?php endif; ?>								</td>							<?php							break;							case 'lastupdated': ?>								<td valign="top">									<?php									if ( 'list' == $mode )										$date = 'Y/m/d';									else										$date = 'Y/m/d \<\b\r \/\> g:i:s a';									echo ( $blog['last_updated'] == '0000-00-00 00:00:00' ) ? __( 'Never' ) : mysql2date( __( $date ), $blog['last_updated'] ); ?>								</td>							<?php							break;						case 'registered': ?>								<td valign="top">								<?php								if ( $blog['registered'] == '0000-00-00 00:00:00' )									echo '&#x2014;';								else									echo mysql2date( __( $date ), $blog['registered'] );								?>								</td>						<?php						break;							case 'users': ?>								<td valign="top">									<?php									$blogusers = get_users_of_blog( $blog['blog_id'] );									if ( is_array( $blogusers ) ) {										$blogusers_warning = '';										if ( count( $blogusers ) > 5 ) {											$blogusers = array_slice( $blogusers, 0, 5 );											$blogusers_warning = __( 'Only showing first 5 users.' ) . ' <a href="' . esc_url( get_admin_url( $blog['blog_id'], 'users.php' ) ) . '">' . __( 'More' ) . '</a>';										}										foreach ( $blogusers as $key => $val ) {											echo '<a href="' . esc_url( admin_url( 'user-edit.php?user_id=' . $val->user_id ) ) . '">' . esc_html( $val->user_login ) . '</a> ';											if ( 'list' != $mode )												echo '(' . $val->user_email . ')';											echo '<br />';										}										if ( $blogusers_warning != '' )											echo '<strong>' . $blogusers_warning . '</strong><br />';									}									?>								</td>							<?php							break;							case 'plugins': ?>								<?php if ( has_filter( 'wpmublogsaction' ) ) { ?>								<td valign="top">									<?php do_action( 'wpmublogsaction', $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;							default: ?>								<?php if ( has_filter( 'manage_blogs_custom_column' ) ) { ?>								<td valign="top">									<?php do_action( 'manage_blogs_custom_column', $column_name, $blog['blog_id'] ); ?>								</td>								<?php } ?>							<?php break;						}					}					?>					</tr>					<?php				}			} else { ?>				<tr>					<td colspan="<?php echo (int) count( $sites_columns ); ?>"><?php _e( 'No sites found.' ) ?></td>				</tr>			<?php			} // end if ($blogs)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">			<select name="action2">				<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>				<option value="delete"><?php _e( 'Delete' ); ?></option>				<option value="spam"><?php _ex( 'Mark as Spam', 'site' ); ?></option>				<option value="notspam"><?php _ex( 'Not Spam', 'site' ); ?></option>			</select>			<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div>		<div id="form-add-site" class="wrap">			<h3><?php _e( 'Add Site' ) ?></h3>			<form method="post" action="ms-edit.php?action=addblog">				<?php wp_nonce_field( 'add-blog', '_wpnonce_add-blog' ) ?>				<table class="form-table">					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Address' ) ?></th>						<td>						<?php if ( is_subdomain_install() ) { ?>							<input name="blog[domain]" type="text" class="regular-text" title="<?php _e( 'Domain' ) ?>"/>.<?php echo preg_replace( '|^www\.|', '', $current_site->domain );?>						<?php } else {							echo $current_site->domain . $current_site->path ?><input name="blog[domain]" class="regular-text" type="text" title="<?php _e( 'Domain' ) ?>"/>						<?php }						echo '<p>' . __( 'Only the characters a-z and 0-9 recommended.' ) . '</p>';						?>						</td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Site Title' ) ?></th>						<td><input name="blog[title]" type="text" class="regular-text" title="<?php _e( 'Title' ) ?>"/></td>					</tr>					<tr class="form-field form-required">						<th scope="row"><?php _e( 'Admin Email' ) ?></th>						<td><input name="blog[email]" type="text" class="regular-text" title="<?php _e( 'Email' ) ?>"/></td>					</tr>					<tr class="form-field">						<td colspan="2"><?php _e( 'A new user will be created if the above email address is not in the database.' ) ?><br /><?php _e( 'The username and password will be mailed to this email address.' ) ?></td>					</tr>				</table>				<p class="submit">					<input class="button" type="submit" name="go" value="<?php esc_attr_e( 'Add Site' ) ?>" /></p>			</form>		</div>		<?php	break;} // end switch( $action )include( './admin-footer.php' ); ?>
<?php/** * Reading settings administration panel. * * @package WordPress * @subpackage Administration *//** WordPress Administration Bootstrap */require_once( './admin.php' );if ( ! current_user_can( 'manage_options' ) )	wp_die( __( 'You do not have sufficient permissions to manage options for this site.' ) );$title = __( 'Reading Settings' );$parent_file = 'options-general.php';add_contextual_help($current_screen,	'<p>' . __('This screen contains the settings that affect the display of your content.') . '</p>' .	'<p>' . sprintf(__('You can choose what&#8217;s displayed on the front page of your site. It can be posts in reverse chronological order (classic blog), or a fixed/static page. To set a static home page, you first need to create two <a href="%s">Pages</a>. One will become the front page, and the other will be where your posts are displayed.'), 'post-new.php?post_type=page') . '</p>' .	'<p>' . __('You can also control the display of your content in RSS feeds, including the maximum numbers of posts to display, whether to show full text or a summary, and the character set encoding.') . '</p>' .	'<p>' . __('You must click the Save Changes button at the bottom of the screen for new settings to take effect.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Settings_Reading_SubPanel" target="_blank">Reading Settings Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');include( './admin-header.php' );?><div class="wrap"><?php screen_icon(); ?><h2><?php echo esc_html( $title ); ?></h2><form name="form1" method="post" action="options.php"><?php settings_fields( 'reading' ); ?><?php if ( ! get_pages() ) : ?><input name="show_on_front" type="hidden" value="posts" /><table class="form-table"><?php else :	if ( 'page' == get_option( 'show_on_front' ) && ! get_option( 'page_on_front' ) && ! get_option( 'page_for_posts' ) )		update_option( 'show_on_front', 'posts' );?><table class="form-table"><tr valign="top"><th scope="row"><?php _e( 'Front page displays' ); ?></th><td id="front-static-pages"><fieldset><legend class="screen-reader-text"><span><?php _e( 'Front page displays' ); ?></span></legend>	<p><label>		<input name="show_on_front" type="radio" value="posts" class="tog" <?php checked( 'posts', get_option( 'show_on_front' ) ); ?> />		<?php _e( 'Your latest posts' ); ?>	</label>	</p>	<p><label>		<input name="show_on_front" type="radio" value="page" class="tog" <?php checked( 'page', get_option( 'show_on_front' ) ); ?> />		<?php printf( __( 'A <a href="%s">static page</a> (select below)' ), 'edit.php?post_type=page' ); ?>	</label>	</p><ul>	<li><label for="page_on_front"><?php printf( __( 'Front page: %s' ), wp_dropdown_pages( array( 'name' => 'page_on_front', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_on_front' ) ) ) ); ?></label></li>	<li><label for="page_for_posts"><?php printf( __( 'Posts page: %s' ), wp_dropdown_pages( array( 'name' => 'page_for_posts', 'echo' => 0, 'show_option_none' => __( '&mdash; Select &mdash;' ), 'option_none_value' => '0', 'selected' => get_option( 'page_for_posts' ) ) ) ); ?></label></li></ul><?php if ( 'page' == get_option( 'show_on_front' ) && get_option( 'page_for_posts' ) == get_option( 'page_on_front' ) ) : ?><div id="front-page-warning" class="error inline"><p><?php _e( '<strong>Warning:</strong> these pages should not be the same!' ); ?></p></div><?php endif; ?></fieldset></td></tr><?php endif; ?><tr valign="top"><th scope="row"><label for="posts_per_page"><?php _e( 'Blog pages show at most' ); ?></label></th><td><input name="posts_per_page" type="text" id="posts_per_page" value="<?php form_option( 'posts_per_page' ); ?>" class="small-text" /> <?php _e( 'posts' ); ?></td></tr><tr valign="top"><th scope="row"><label for="posts_per_rss"><?php _e( 'Syndication feeds show the most recent' ); ?></label></th><td><input name="posts_per_rss" type="text" id="posts_per_rss" value="<?php form_option( 'posts_per_rss' ); ?>" class="small-text" /> <?php _e( 'items' ); ?></td></tr><tr valign="top"><th scope="row"><?php _e( 'For each article in a feed, show' ); ?> </th><td><fieldset><legend class="screen-reader-text"><span><?php _e( 'For each article in a feed, show' ); ?> </span></legend><p><label><input name="rss_use_excerpt"  type="radio" value="0" <?php checked( 0, get_option( 'rss_use_excerpt' ) ); ?>	/> <?php _e( 'Full text' ); ?></label><br /><label><input name="rss_use_excerpt" type="radio" value="1" <?php checked( 1, get_option( 'rss_use_excerpt' ) ); ?> /> <?php _e( 'Summary' ); ?></label></p></fieldset></td></tr><tr valign="top"><th scope="row"><label for="blog_charset"><?php _e( 'Encoding for pages and feeds' ); ?></label></th><td><input name="blog_charset" type="text" id="blog_charset" value="<?php form_option( 'blog_charset' ); ?>" class="regular-text" /><span class="description"><?php _e( 'The <a href="http://codex.wordpress.org/Glossary#Character_set">character encoding</a> of your site (UTF-8 is recommended, if you are adventurous there are some <a href="http://en.wikipedia.org/wiki/Character_set">other encodings</a>)' ); ?></span></td></tr><?php do_settings_fields( 'reading', 'default' ); ?></table><?php do_settings_sections( 'reading' ); ?><p class="submit">	<input type="submit" name="Submit" class="button-primary" value="<?php esc_attr_e( 'Save Changes' ); ?>" /></p></form></div><?php include( './admin-footer.php' ); ?>
<?php/** * Multisite users administration panel. * * @package WordPress * @subpackage Multisite * @since 3.0.0 */require_once( './admin.php' );if ( !is_multisite() )	wp_die( __( 'Multisite support is not enabled.' ) );if ( ! current_user_can( 'manage_network_users' ) )	wp_die( __( 'You do not have permission to access this page.' ) );$title = __( 'Users' );$parent_file = 'ms-admin.php';add_contextual_help($current_screen,	'<p>' . __('This table shows all users across the network and the sites to which they are assigned.') . '</p>' .	'<p>' . __('Hover over any user on the list to make the edit links appear. The Edit link on the left will take you to his or her Edit User profile page; the Edit link on the right by any site name goes to an Edit Site screen for that site.') . '</p>' .	'<p>' . __('You can also go to the user&#8217;s profile page by clicking on the individual username.') . '</p>' .	'<p>' . __('You can sort the table by clicking on any of the bold headings and switch between list and excerpt views by using the icons in the upper right.') . '</p>' .	'<p>' . __('The bulk action will permanently delete selected users, or mark/unmark those selected as spam. Spam users will have posts removed and will be unable to sign up again with the same email addresses.') . '</p>' .	'<p>' . __('Add User will add that person to this table and send them an email.') . '</p>' .	'<p>' . __('Users who are signed up to the network without a site are added as subscribers to the main or primary dashboard site, giving them profile pages to manage their accounts. These users will only see Dashboard and My Sites in the main navigation until a site is created for them.') . '</p>' .	'<p>' . __('You can make an existing user an additional super admin by going to the Edit User profile page and checking the box to grant that privilege.') . '</p>' .	'<p><strong>' . __('For more information:') . '</strong></p>' .	'<p>' . __('<a href="http://codex.wordpress.org/Super_Admin_Users_SubPanel" target="_blank">Network Users Documentation</a>') . '</p>' .	'<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>');wp_enqueue_script( 'admin-forms' );require_once( './admin-header.php' );if ( isset( $_GET['updated'] ) && $_GET['updated'] == 'true' && ! empty( $_GET['action'] ) ) {	?>	<div id="message" class="updated"><p>		<?php		switch ( $_GET['action'] ) {			case 'delete':				_e( 'User deleted.' );			break;			case 'all_spam':				_e( 'Users marked as spam.' );			break;			case 'all_notspam':				_e( 'Users removed from spam.' );			break;			case 'all_delete':				_e( 'Users deleted.' );			break;			case 'add':				_e( 'User added.' );			break;		}		?>	</p></div>	<?php}	$pagenum = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 0;	if ( empty( $pagenum ) )		$pagenum = 1;	$per_page = (int) get_user_option( 'ms_users_per_page' );	if ( empty( $per_page ) || $per_page < 1 )		$per_page = 15;	$per_page = apply_filters( 'ms_users_per_page', $per_page );	$s = isset( $_GET['s'] ) ? stripslashes( trim( $_GET[ 's' ] ) ) : '';	$like_s = esc_sql( like_escape( $s ) );	$query = "SELECT * FROM {$wpdb->users}";	if ( !empty( $like_s ) ) {		$query .= " WHERE user_login LIKE '%$like_s%' OR user_email LIKE '%$like_s%'";	}	$order_by = isset( $_GET['sortby'] ) ? $_GET['sortby'] : 'id';	if ( $order_by == 'email' ) {		$query .= ' ORDER BY user_email ';	} elseif ( $order_by == 'login' ) {		$query .= ' ORDER BY user_login ';	} elseif ( $order_by == 'name' ) {		$query .= ' ORDER BY display_name ';	} elseif ( $order_by == 'registered' ) {		$query .= ' ORDER BY user_registered ';	} else {		$order_by = 'id';		$query .= ' ORDER BY ID ';	}	$order = ( isset( $_GET['order'] ) && 'DESC' == $_GET['order'] ) ? 'DESC' : 'ASC';	$query .= $order;	$total = $wpdb->get_var( str_replace( 'SELECT *', 'SELECT COUNT(ID)', $query ) );	$query .= " LIMIT " . intval( ( $pagenum - 1 ) * $per_page) . ", " . intval( $per_page );	$user_list = $wpdb->get_results( $query, ARRAY_A );	$num_pages = ceil( $total / $per_page );	$page_links = paginate_links( array(		'base' => add_query_arg( 'paged', '%#%' ),		'format' => '',		'prev_text' => __( '&laquo;' ),		'next_text' => __( '&raquo;' ),		'total' => $num_pages,		'current' => $pagenum	));	if ( empty( $_GET['mode'] ) )		$mode = 'list';	else		$mode = esc_attr( $_GET['mode'] );	?>	<div class="wrap">	<?php screen_icon(); ?>	<h2><?php esc_html_e( 'Users' ); ?>	<a href="#form-add-user" class="button add-new-h2"><?php echo esc_html_x( 'Add New' , 'users'); ?></a>	<?php	if ( isset( $_GET['s'] ) && $_GET['s'] )	printf( '<span class="subtitle">' . __( 'Search results for &#8220;%s&#8221;' ) . '</span>', esc_html( $s ) );	?>	</h2>	<form action="ms-users.php" method="get" class="search-form">		<p class="search-box">		<input type="text" name="s" value="<?php echo esc_attr( $s ); ?>" class="search-input" id="user-search-input" />		<input type="submit" id="post-query-submit" value="<?php esc_attr_e( 'Search Users' ) ?>" class="button" />		</p>	</form>	<form id="form-user-list" action='ms-edit.php?action=allusers' method='post'>		<input type="hidden" name="mode" value="<?php echo esc_attr( $mode ); ?>" />		<div class="tablenav">			<div class="alignleft actions">				<select name="action">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction" id="doaction" class="button-secondary action" />				<?php wp_nonce_field( 'bulk-ms-users', '_wpnonce_bulk-ms-users' ); ?>			</div>			<?php if ( $page_links ) { ?>			<div class="tablenav-pages">			<?php $page_links_text = sprintf( '<span class="displaying-num">' . __( 'Displaying %s&#8211;%s of %s' ) . '</span>%s',			number_format_i18n( ( $pagenum - 1 ) * $per_page + 1 ),			number_format_i18n( min( $pagenum * $per_page, $total ) ),			number_format_i18n( $total ),			$page_links			); echo $page_links_text; ?>			</div>			<?php } ?>			<div class="view-switch">				<a href="<?php echo esc_url( add_query_arg( 'mode', 'list', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'list' == $mode ) echo 'class="current"'; ?> id="view-switch-list" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'List View' ) ?>" alt="<?php _e( 'List View' ) ?>" /></a>				<a href="<?php echo esc_url( add_query_arg( 'mode', 'excerpt', $_SERVER['REQUEST_URI'] ) ) ?>"><img <?php if ( 'excerpt' == $mode ) echo 'class="current"'; ?> id="view-switch-excerpt" src="<?php echo esc_url( includes_url( 'images/blank.gif' ) ); ?>" width="20" height="20" title="<?php _e( 'Excerpt View' ) ?>" alt="<?php _e( 'Excerpt View' ) ?>" /></a>			</div>		</div>		<div class="clear"></div>		<?php		// define the columns to display, the syntax is 'internal name' => 'display name'		$users_columns = array(			'id'           => __( 'ID' ),			'login'      => __( 'Username' ),			'name'       => __( 'Name' ),			'email'      => __( 'E-mail' ),			'registered' => _x( 'Registered', 'user' ),			'blogs'      => __( 'Sites' )		);		$users_columns = apply_filters( 'wpmu_users_columns', $users_columns );		?>		<table class="widefat">			<thead>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php				$col_url = '';				foreach($users_columns as $column_id => $column_display_name) {					$column_link = "<a href='";					$order2 = '';					if ( $order_by == $column_id )						$order2 = ( $order == 'DESC' ) ? 'ASC' : 'DESC';					$column_link .= esc_url( add_query_arg( array( 'order' => $order2, 'paged' => $pagenum, 'sortby' => $column_id ), remove_query_arg( array( 'action', 'updated' ), $_SERVER['REQUEST_URI'] ) ) );					$column_link .= "'>{$column_display_name}</a>";					$col_url .= '<th scope="col">' . ( $column_id == 'blogs' ? $column_display_name : $column_link ) . '</th>';				}				echo $col_url; ?>			</tr>			</thead>			<tfoot>			<tr>				<th class="manage-column column-cb check-column" scope="col">					<input type="checkbox" />				</th>				<?php echo $col_url; ?>			</tr>			</tfoot>			<tbody id="the-user-list" class="list:user">			<?php if ( $user_list ) {				$class = '';				$super_admins = get_super_admins();				foreach ( (array) $user_list as $user ) {					$class = ( 'alternate' == $class ) ? '' : 'alternate';					$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );					foreach ( $status_list as $status => $col ) {						if ( $user[$status] )							$class = $col;					}					?>					<tr class="<?php echo $class; ?>">					<?php					foreach( (array) $users_columns as $column_name=>$column_display_name ) :						switch( $column_name ) {							case 'id': ?>								<th scope="row" class="check-column">									<input type="checkbox" id="blog_<?php echo $user['ID'] ?>" name="allusers[]" value="<?php echo esc_attr( $user['ID'] ) ?>" />								</th>								<th valign="top" scope="row">									<?php echo $user['ID'] ?>								</th>							<?php							break;							case 'login':								$avatar	= get_avatar( $user['user_email'], 32 );								$edit_link = ( $current_user->ID == $user['ID'] ) ? 'profile.php' : 'user-edit.php?user_id=' . $user['ID'];								?>								<td class="username column-username">									<?php echo $avatar; ?><strong><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>" class="edit"><?php echo stripslashes( $user['user_login'] ); ?></a><?php									if ( in_array( $user['user_login'], $super_admins ) )										echo ' - ' . __( 'Super admin' );									?></strong>									<br/>									<div class="row-actions">										<span class="edit"><a href="<?php echo esc_url( admin_url( $edit_link ) ); ?>"><?php _e( 'Edit' ); ?></a></span>										<?php if ( ! in_array( $user['user_login'], $super_admins ) ) { ?>										| <span class="delete"><a href="<?php echo $delete	= esc_url( admin_url( add_query_arg( '_wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'ms-edit.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user['ID'] ) ) ); ?>" class="delete"><?php _e( 'Delete' ); ?></a></span>										<?php } ?>									</div>								</td>							<?php							break;							case 'name': ?>								<td class="name column-name"><?php echo $user['display_name'] ?></td>							<?php							break;							case 'email': ?>								<td class="email column-email"><a href="mailto:<?php echo $user['user_email'] ?>"><?php echo $user['user_email'] ?></a></td>							<?php							break;							case 'registered':								if ( 'list' == $mode )									$date = 'Y/m/d';								else									$date = 'Y/m/d \<\b\r \/\> g:i:s a';							?>								<td><?php echo mysql2date( __( $date ), $user['user_registered'] ); ?></td>							<?php							break;							case 'blogs':								$blogs = get_blogs_of_user( $user['ID'], true );								?>								<td>									<?php									if ( is_array( $blogs ) ) {										foreach ( (array) $blogs as $key => $val ) {											$path	= ( $val->path == '/' ) ? '' : $val->path;											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . str_replace( '.' . $current_site->domain, '', $val->domain . $path ) . '</a>';											echo ' <small class="row-actions">';											// Edit											echo '<a href="'. esc_url( admin_url( 'ms-sites.php?action=editblog&amp;id=' . $val->userblog_id  ) ) .'">' . __( 'Edit' ) . '</a> | ';											// View											echo '<a ';											if ( get_blog_status( $val->userblog_id, 'spam' ) == 1 )												echo 'style="background-color: #faa" ';											echo 'href="' .  esc_url( get_home_url( $val->userblog_id ) )  . '">' . __( 'View' ) . '</a>';											echo '</small><br />';										}									}									?>								</td>							<?php							break;							default: ?>								<td><?php do_action( 'manage_users_custom_column', $column_name, $user['ID'] ); ?></td>							<?php							break;						}					endforeach					?>					</tr>					<?php				}			} else {			?>				<tr>					<td colspan="<?php echo (int) count($users_columns); ?>"><?php _e( 'No users found.' ) ?></td>				</tr>				<?php			} // end if ($users)			?>			</tbody>		</table>		<div class="tablenav">			<?php			if ( $page_links )				echo "<div class='tablenav-pages'>$page_links_text</div>";			?>			<div class="alignleft actions">				<select name="action2">					<option value="-1" selected="selected"><?php _e( 'Bulk Actions' ); ?></option>					<option value="delete"><?php _e( 'Delete' ); ?></option>					<option value="spam"><?php _ex( 'Mark as Spam', 'user' ); ?></option>					<option value="notspam"><?php _ex( 'Not Spam', 'user' ); ?></option>				</select>				<input type="submit" value="<?php esc_attr_e( 'Apply' ); ?>" name="doaction2" id="doaction2" class="button-secondary action" />			</div>			<br class="clear" />		</div>		</form>		</div><?phpif ( apply_filters( 'show_adduser_fields', true ) ) :?><div class="wrap" id="form-add-user">	<h3><?php _e( 'Add User' ) ?></h3>	<form action="ms-edit.php?action=adduser" method="post">	<table class="form-table">		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Username' ) ?></th>			<td><input type="text" class="regular-text" name="user[username]" /></td>		</tr>		<tr class="form-field form-required">			<th scope="row"><?php _e( 'Email' ) ?></th>			<td><input type="text" class="regular-text" name="user[email]" /></td>		</tr>		<tr class="form-field">			<td colspan="2"><?php _e( 'Username and password will be mailed to the above email address.' ) ?></td>		</tr>	</table>	<p class="submit">		<?php wp_nonce_field( 'add-user', '_wpnonce_add-user' ) ?>		<input class="button" type="submit" value="<?php esc_attr_e( 'Add user' ) ?>" /></p>	</form></div><?php endif; ?><?php include( './admin-footer.php' ); ?>
<?php/** * Edit link category form for inclusion in administration panels. * * @package WordPress * @subpackage Administration */// don't load directlyif ( !defined('ABSPATH') )	die('-1');if ( !current_user_can('manage_categories') )	wp_die(__('You do not have sufficient permissions to edit link categories for this site.'));/** * @var object */if ( ! isset( $category ) )	$category = (object) array();if ( ! empty($cat_ID) ) {	/**	 * @var string	 */	$heading = '<h2>' . __('Edit Link Category') . '</h2>';	$submit_text = __('Update Category');	$form = '<form name="editcat" id="editcat" method="post" action="link-category.php" class="validate">';	$action = 'editedcat';	$nonce_action = 'update-link-category_' . $cat_ID;	do_action('edit_link_category_form_pre', $category);} else {	$heading = '<h2>' . __('Add Link Category') . '</h2>';	$submit_text = __('Add Category');	$form = '<form name="addcat" id="addcat" class="add:the-list: validate" method="post" action="link-category.php">';	$action = 'addcat';	$nonce_action = 'add-link-category';	do_action('add_link_category_form_pre', $category);}/** * @ignore * @since 2.7 * @internal Used to prevent errors in page when no category is being edited. * * @param object $category */function _fill_empty_link_category(&$category) {	if ( ! isset( $category->name ) )		$category->name = '';	if ( ! isset( $category->slug ) )		$category->slug = '';	if ( ! isset( $category->description ) )		$category->description = '';}_fill_empty_link_category($category);?><div class="wrap"><?php screen_icon(); ?><?php echo $heading ?><div id="ajax-response"></div><?php echo $form ?><input type="hidden" name="action" value="<?php echo esc_attr($action) ?>" /><input type="hidden" name="cat_ID" value="<?php echo esc_attr($category->term_id) ?>" /><?php wp_original_referer_field(true, 'previous'); wp_nonce_field($nonce_action); ?>	<table class="form-table">		<tr class="form-field form-required">			<th scope="row" valign="top"><label for="name"><?php _e('Link Category name') ?></label></th>			<td><input name="name" id="name" type="text" value="<?php echo esc_attr($category->name); ?>" size="40" aria-required="true" /></td>		</tr><?php if ( !is_multisite() ) { ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="slug"><?php _e('Link Category slug') ?></label></th>			<td><input name="slug" id="slug" type="text" value="<?php echo esc_attr(apply_filters('editable_slug', $category->slug)); ?>" size="40" /><br />            <?php _e('The &#8220;slug&#8221; is the URL-friendly version of the name. It is usually all lowercase and contains only letters, numbers, and hyphens.'); ?></td>		</tr><?php } ?>		<tr class="form-field">			<th scope="row" valign="top"><label for="description"><?php _e('Description (optional)') ?></label></th>			<td><textarea name="description" id="description" rows="5" cols="50" style="width: 97%;"><?php echo $category->description; ?></textarea><br />			<span class="description"><?php _e('The description is not prominent by default; however, some themes may show it.'); ?></span></td>		</tr>		<?php do_action('edit_link_category_form_fields', $category); ?>	</table><p class="submit"><input type="submit" class="button-primary" name="submit" value="<?php echo esc_attr($submit_text) ?>" /></p><?php do_action('edit_link_category_form', $category); ?></form></div>
<?php/** * HTML/XHTML filter that only allows some elements and attributes * * Added wp_ prefix to avoid conflicts with existing kses users * * @version 0.2.2 * @copyright (C) 2002, 2003, 2005 * @author Ulf Harnhammar <metaur@users.sourceforge.net> * * @package External * @subpackage KSES * * @internal * *** CONTACT INFORMATION *** * E-mail:      metaur at users dot sourceforge dot net * Web page:    http://sourceforge.net/projects/kses * Paper mail:  Ulf Harnhammar *              Ymergatan 17 C *              753 25  Uppsala *              SWEDEN * * [kses strips evil scripts!] *//** * You can override this in a plugin. * * @since 1.2.0 */if ( ! defined( 'CUSTOM_TAGS' ) )	define( 'CUSTOM_TAGS', false );if ( ! CUSTOM_TAGS ) {	/**	 * Kses global for default allowable HTML tags.	 *	 * Can be override by using CUSTOM_TAGS constant.	 *	 * @global array $allowedposttags	 * @since 2.0.0	 */	$allowedposttags = array(		'address' => array(),		'a' => array(			'class' => array (),			'href' => array (),			'id' => array (),			'title' => array (),			'rel' => array (),			'rev' => array (),			'name' => array (),			'target' => array()),		'abbr' => array(			'class' => array (),			'title' => array ()),		'acronym' => array(			'title' => array ()),		'article' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'aside' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'b' => array(),		'big' => array(),		'blockquote' => array(			'id' => array (),			'cite' => array (),			'class' => array(),			'lang' => array(),			'xml:lang' => array()),		'br' => array (			'class' => array ()),		'button' => array(			'disabled' => array (),			'name' => array (),			'type' => array (),			'value' => array ()),		'caption' => array(			'align' => array (),			'class' => array ()),		'cite' => array (			'class' => array(),			'dir' => array(),			'lang' => array(),			'title' => array ()),		'code' => array (			'style' => array()),		'col' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'span' => array (),			'dir' => array(),			'style' => array (),			'valign' => array (),			'width' => array ()),		'del' => array(			'datetime' => array ()),		'dd' => array(),		'details' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'open' => array (),			'style' => array (),			'xml:lang' => array(),		),		'div' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'dl' => array(),		'dt' => array(),		'em' => array(),		'fieldset' => array(),		'figure' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'figcaption' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'font' => array(			'color' => array (),			'face' => array (),			'size' => array ()),		'footer' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'form' => array(			'action' => array (),			'accept' => array (),			'accept-charset' => array (),			'enctype' => array (),			'method' => array (),			'name' => array (),			'target' => array ()),		'h1' => array(			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h2' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h3' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h4' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h5' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'h6' => array (			'align' => array (),			'class' => array (),			'id'    => array (),			'style' => array ()),		'header' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hgroup' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'hr' => array (			'align' => array (),			'class' => array (),			'noshade' => array (),			'size' => array (),			'width' => array ()),		'i' => array(),		'img' => array(			'alt' => array (),			'align' => array (),			'border' => array (),			'class' => array (),			'height' => array (),			'hspace' => array (),			'longdesc' => array (),			'vspace' => array (),			'src' => array (),			'style' => array (),			'width' => array ()),		'ins' => array(			'datetime' => array (),			'cite' => array ()),		'kbd' => array(),		'label' => array(			'for' => array ()),		'legend' => array(			'align' => array ()),		'li' => array (			'align' => array (),			'class' => array ()),		'menu' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'nav' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'p' => array(			'class' => array (),			'align' => array (),			'dir' => array(),			'lang' => array(),			'style' => array (),			'xml:lang' => array()),		'pre' => array(			'style' => array(),			'width' => array ()),		'q' => array(			'cite' => array ()),		's' => array(),		'span' => array (			'class' => array (),			'dir' => array (),			'align' => array (),			'lang' => array (),			'style' => array (),			'title' => array (),			'xml:lang' => array()),		'section' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'strike' => array(),		'strong' => array(),		'sub' => array(),		'summary' => array(			'align' => array (),			'class' => array (),			'dir' => array (),			'lang' => array(),			'style' => array (),			'xml:lang' => array(),		),		'sup' => array(),		'table' => array(			'align' => array (),			'bgcolor' => array (),			'border' => array (),			'cellpadding' => array (),			'cellspacing' => array (),			'class' => array (),			'dir' => array(),			'id' => array(),			'rules' => array (),			'style' => array (),			'summary' => array (),			'width' => array ()),		'tbody' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'valign' => array ()),		'td' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'dir' => array(),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'style' => array (),			'valign' => array (),			'width' => array ()),		'textarea' => array(			'cols' => array (),			'rows' => array (),			'disabled' => array (),			'name' => array (),			'readonly' => array ()),		'tfoot' => array(			'align' => array (),			'char' => array (),			'class' => array (),			'charoff' => array (),			'valign' => array ()),		'th' => array(			'abbr' => array (),			'align' => array (),			'axis' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'colspan' => array (),			'headers' => array (),			'height' => array (),			'nowrap' => array (),			'rowspan' => array (),			'scope' => array (),			'valign' => array (),			'width' => array ()),		'thead' => array(			'align' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'valign' => array ()),		'title' => array(),		'tr' => array(			'align' => array (),			'bgcolor' => array (),			'char' => array (),			'charoff' => array (),			'class' => array (),			'style' => array (),			'valign' => array ()),		'tt' => array(),		'u' => array(),		'ul' => array (			'class' => array (),			'style' => array (),			'type' => array ()),		'ol' => array (			'class' => array (),			'start' => array (),			'style' => array (),			'type' => array ()),		'var' => array ());	/**	 * Kses allowed HTML elements.	 *	 * @global array $allowedtags	 * @since 1.0.0	 */	$allowedtags = array(		'a' => array(			'href' => array (),			'title' => array ()),		'abbr' => array(			'title' => array ()),		'acronym' => array(			'title' => array ()),		'b' => array(),		'blockquote' => array(			'cite' => array ()),		//	'br' => array(),		'cite' => array (),		'code' => array(),		'del' => array(			'datetime' => array ()),		//	'dd' => array(),		//	'dl' => array(),		//	'dt' => array(),		'em' => array (), 'i' => array (),		//	'ins' => array('datetime' => array(), 'cite' => array()),		//	'li' => array(),		//	'ol' => array(),		//	'p' => array(),		'q' => array(			'cite' => array ()),		'strike' => array(),		'strong' => array(),		//	'sub' => array(),		//	'sup' => array(),		//	'u' => array(),		//	'ul' => array(),	);	$allowedentitynames = array(		'nbsp',    'iexcl',  'cent',    'pound',  'curren', 'yen',		'brvbar',  'sect',   'uml',     'copy',   'ordf',   'laquo',		'not',     'shy',    'reg',     'macr',   'deg',    'plusmn',		'acute',   'micro',  'para',    'middot', 'cedil',  'ordm',		'raquo',   'iquest', 'Agrave',  'Aacute', 'Acirc',  'Atilde',		'Auml',    'Aring',  'AElig',   'Ccedil', 'Egrave', 'Eacute',		'Ecirc',   'Euml',   'Igrave',  'Iacute', 'Icirc',  'Iuml',		'ETH',     'Ntilde', 'Ograve',  'Oacute', 'Ocirc',  'Otilde',		'Ouml',    'times',  'Oslash',  'Ugrave', 'Uacute', 'Ucirc',		'Uuml',    'Yacute', 'THORN',   'szlig',  'agrave', 'aacute',		'acirc',   'atilde', 'auml',    'aring',  'aelig',  'ccedil',		'egrave',  'eacute', 'ecirc',   'euml',   'igrave', 'iacute',		'icirc',   'iuml',   'eth',     'ntilde', 'ograve', 'oacute',		'ocirc',   'otilde', 'ouml',    'divide', 'oslash', 'ugrave',		'uacute',  'ucirc',  'uuml',    'yacute', 'thorn',  'yuml',		'quot',    'amp',    'lt',      'gt',     'apos',   'OElig',		'oelig',   'Scaron', 'scaron',  'Yuml',   'circ',   'tilde',		'ensp',    'emsp',   'thinsp',  'zwnj',   'zwj',    'lrm',		'rlm',     'ndash',  'mdash',   'lsquo',  'rsquo',  'sbquo',		'ldquo',   'rdquo',  'bdquo',   'dagger', 'Dagger', 'permil',		'lsaquo',  'rsaquo', 'euro',    'fnof',   'Alpha',  'Beta',		'Gamma',   'Delta',  'Epsilon', 'Zeta',   'Eta',    'Theta',		'Iota',    'Kappa',  'Lambda',  'Mu',     'Nu',     'Xi',		'Omicron', 'Pi',     'Rho',     'Sigma',  'Tau',    'Upsilon',		'Phi',     'Chi',    'Psi',     'Omega',  'alpha',  'beta',		'gamma',   'delta',  'epsilon', 'zeta',   'eta',    'theta',		'iota',    'kappa',  'lambda',  'mu',     'nu',     'xi',		'omicron', 'pi',     'rho',     'sigmaf', 'sigma',  'tau',		'upsilon', 'phi',    'chi',     'psi',    'omega',  'thetasym',		'upsih',   'piv',    'bull',    'hellip', 'prime',  'Prime',		'oline',   'frasl',  'weierp',  'image',  'real',   'trade',		'alefsym', 'larr',   'uarr',    'rarr',   'darr',   'harr',		'crarr',   'lArr',   'uArr',    'rArr',   'dArr',   'hArr',		'forall',  'part',   'exist',   'empty',  'nabla',  'isin',		'notin',   'ni',     'prod',    'sum',    'minus',  'lowast',		'radic',   'prop',   'infin',   'ang',    'and',    'or',		'cap',     'cup',    'int',     'sim',    'cong',   'asymp',		'ne',      'equiv',  'le',      'ge',     'sub',    'sup',		'nsub',    'sube',   'supe',    'oplus',  'otimes', 'perp',		'sdot',    'lceil',  'rceil',   'lfloor', 'rfloor', 'lang',		'rang',    'loz',    'spades',  'clubs',  'hearts', 'diams',	);}/** * Filters content and keeps only allowable HTML elements. * * This function makes sure that only the allowed HTML element names, attribute * names and attribute values plus only sane HTML entities will occur in * $string. You have to remove any slashes from PHP's magic quotes before you * call this function. * * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news', * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This * covers all common link protocols, except for 'javascript' which should not * be allowed for untrusted users. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Optional. Allowed protocol in links. * @return string Filtered content with only allowed HTML elements */function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {	$allowed_protocols = wp_parse_args( $allowed_protocols, apply_filters('kses_allowed_protocols', array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn') ));	$string = wp_kses_no_null($string);	$string = wp_kses_js_entities($string);	$string = wp_kses_normalize_entities($string);	$allowed_html_fixed = wp_kses_array_lc($allowed_html);	$string = wp_kses_hook($string, $allowed_html_fixed, $allowed_protocols); // WP changed the order of these funcs and added args to wp_kses_hook	return wp_kses_split($string, $allowed_html_fixed, $allowed_protocols);}/** * You add any kses hooks here. * * There is currently only one kses WordPress hook and it is called here. All * parameters are passed to the hooks and expected to recieve a string. * * @since 1.0.0 * * @param string $string Content to filter through kses * @param array $allowed_html List of allowed HTML elements * @param array $allowed_protocols Allowed protocol in links * @return string Filtered content through 'pre_kses' hook */function wp_kses_hook($string, $allowed_html, $allowed_protocols) {	$string = apply_filters('pre_kses', $string, $allowed_html, $allowed_protocols);	return $string;}/** * This function returns kses' version number. * * @since 1.0.0 * * @return string KSES Version Number */function wp_kses_version() {	return '0.2.2';}/** * Searches for HTML tags, no matter how malformed. * * It also matches stray ">" characters. * * @since 1.0.0 * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Content with fixed HTML tags */function wp_kses_split($string, $allowed_html, $allowed_protocols) {	global $pass_allowed_html, $pass_allowed_protocols;	$pass_allowed_html = $allowed_html;	$pass_allowed_protocols = $allowed_protocols;	return preg_replace_callback('%((<!--.*?(-->|$))|(<[^>]*(>|$)|>))%',		create_function('$match', 'global $pass_allowed_html, $pass_allowed_protocols; return wp_kses_split2($match[1], $pass_allowed_html, $pass_allowed_protocols);'), $string);}/** * Callback for wp_kses_split for fixing malformed HTML tags. * * This function does a lot of work. It rejects some very malformed things like * <:::>. It returns an empty string, if the element isn't allowed (look ma, no * strip_tags()!). Otherwise it splits the tag into an element and an attribute * list. * * After the tag is split into an element and an attribute list, it is run * through another filter which will remove illegal attributes and once that is * completed, will be returned. * * @access private * @since 1.0.0 * @uses wp_kses_attr() * * @param string $string Content to filter * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Fixed HTML element */function wp_kses_split2($string, $allowed_html, $allowed_protocols) {	$string = wp_kses_stripslashes($string);	if (substr($string, 0, 1) != '<')		return '&gt;';	# It matched a ">" character	if (preg_match('%^<!--(.*?)(-->)?$%', $string, $matches)) {		$string = str_replace(array('<!--', '-->'), '', $matches[1]);		while ( $string != $newstring = wp_kses($string, $allowed_html, $allowed_protocols) )			$string = $newstring;		if ( $string == '' )			return '';		// prevent multiple dashes in comments		$string = preg_replace('/--+/', '-', $string);		// prevent three dashes closing a comment		$string = preg_replace('/-$/', '', $string);		return "<!--{$string}-->";	}	# Allow HTML comments	if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))		return '';	# It's seriously malformed	$slash = trim($matches[1]);	$elem = $matches[2];	$attrlist = $matches[3];	if (!@isset($allowed_html[strtolower($elem)]))		return '';	# They are using a not allowed HTML element	if ($slash != '')		return "<$slash$elem>";	# No attributes are allowed for closing elements	return wp_kses_attr("$slash$elem", $attrlist, $allowed_html, $allowed_protocols);}/** * Removes all attributes, if none are allowed for this element. * * If some are allowed it calls wp_kses_hair() to split them further, and then * it builds up new HTML code from the data that kses_hair() returns. It also * removes "<" and ">" characters, if there are any left. One more thing it does * is to check if the tag has a closing XHTML slash, and if it does, it puts one * in the returned code as well. * * @since 1.0.0 * * @param string $element HTML element/tag * @param string $attr HTML attributes from HTML element to closing HTML element tag * @param array $allowed_html Allowed HTML elements * @param array $allowed_protocols Allowed protocols to keep * @return string Sanitized HTML element */function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {	# Is there a closing XHTML slash at the end of the attributes?	$xhtml_slash = '';	if (preg_match('%\s*/\s*$%', $attr))		$xhtml_slash = ' /';	# Are any attributes allowed at all for this element?	if (@ count($allowed_html[strtolower($element)]) == 0)		return "<$element$xhtml_slash>";	# Split it	$attrarr = wp_kses_hair($attr, $allowed_protocols);	# Go through $attrarr, and save the allowed attributes for this element	# in $attr2	$attr2 = '';	foreach ($attrarr as $arreach) {		if (!@ isset ($allowed_html[strtolower($element)][strtolower($arreach['name'])]))			continue; # the attribute is not allowed		$current = $allowed_html[strtolower($element)][strtolower($arreach['name'])];		if ($current == '')			continue; # the attribute is not allowed		if (!is_array($current))			$attr2 .= ' '.$arreach['whole'];		# there are no checks		else {			# there are some checks			$ok = true;			foreach ($current as $currkey => $currval)				if (!wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval)) {					$ok = false;					break;				}			if ( $arreach['name'] == 'style' ) {				$orig_value = $arreach['value'];				$value = safecss_filter_attr($orig_value);				if ( empty($value) )					continue;				$arreach['value'] = $value;				$arreach['whole'] = str_replace($orig_value, $value, $arreach['whole']);			}			if ($ok)				$attr2 .= ' '.$arreach['whole']; # it passed them		} # if !is_array($current)	} # foreach	# Remove any "<" or ">" characters	$attr2 = preg_replace('/[<>]/', '', $attr2);	return "<$element$attr2$xhtml_slash>";}/** * Builds an attribute list from string containing attributes. * * This function does a lot of work. It parses an attribute list into an array * with attribute data, and tries to do the right thing even if it gets weird * input. It will add quotes around attribute values that don't have any quotes * or apostrophes around them, to make it easier to produce HTML code that will * conform to W3C's HTML specification. It will also remove bad URL protocols * from attribute values.  It also reduces duplicate attributes by using the * attribute defined first (foo='bar' foo='baz' will result in foo='bar'). * * @since 1.0.0 * * @param string $attr Attribute list from HTML element to closing HTML element tag * @param array $allowed_protocols Allowed protocols to keep * @return array List of attributes after parsing */function wp_kses_hair($attr, $allowed_protocols) {	$attrarr = array ();	$mode = 0;	$attrname = '';	$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');	# Loop through the whole attribute list	while (strlen($attr) != 0) {		$working = 0; # Was the last operation successful?		switch ($mode) {			case 0 : # attribute name, href for instance				if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {					$attrname = $match[1];					$working = $mode = 1;					$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);				}				break;			case 1 : # equals sign or valueless ("selected")				if (preg_match('/^\s*=\s*/', $attr)) # equals sign					{					$working = 1;					$mode = 2;					$attr = preg_replace('/^\s*=\s*/', '', $attr);					break;				}				if (preg_match('/^\s+/', $attr)) # valueless					{					$working = 1;					$mode = 0;					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');					}					$attr = preg_replace('/^\s+/', '', $attr);				}				break;			case 2 : # attribute value, a URL after href= for instance				if (preg_match('%^"([^"]*)"(\s+|/?$)%', $attr, $match))					# "value"					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);					break;				}				if (preg_match("%^'([^']*)'(\s+|/?$)%", $attr, $match))					# 'value'					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname='$thisval'", 'vless' => 'n');					}					$working = 1;					$mode = 0;					$attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);					break;				}				if (preg_match("%^([^\s\"']+)(\s+|/?$)%", $attr, $match))					# value					{					$thisval = $match[1];					if ( in_array($attrname, $uris) )						$thisval = wp_kses_bad_protocol($thisval, $allowed_protocols);					if(FALSE === array_key_exists($attrname, $attrarr)) {						$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => "$attrname=\"$thisval\"", 'vless' => 'n');					}					# We add quotes to conform to W3C's HTML spec.					$working = 1;					$mode = 0;					$attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);				}				break;		} # switch		if ($working == 0) # not well formed, remove and try again		{			$attr = wp_kses_html_error($attr);			$mode = 0;		}	} # while	if ($mode == 1 && FALSE === array_key_exists($attrname, $attrarr))		# special case, for when the attribute list ends with a valueless		# attribute like "selected"		$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');	return $attrarr;}/** * Performs different checks for attribute values. * * The currently implemented checks are "maxlen", "minlen", "maxval", "minval" * and "valueless" with even more checks to come soon. * * @since 1.0.0 * * @param string $value Attribute value * @param string $vless Whether the value is valueless. Use 'y' or 'n' * @param string $checkname What $checkvalue is checking for. * @param mixed $checkvalue What constraint the value should pass * @return bool Whether check passes */function wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue) {	$ok = true;	switch (strtolower($checkname)) {		case 'maxlen' :			# The maxlen check makes sure that the attribute value has a length not			# greater than the given value. This can be used to avoid Buffer Overflows			# in WWW clients and various Internet servers.			if (strlen($value) > $checkvalue)				$ok = false;			break;		case 'minlen' :			# The minlen check makes sure that the attribute value has a length not			# smaller than the given value.			if (strlen($value) < $checkvalue)				$ok = false;			break;		case 'maxval' :			# The maxval check does two things: it checks that the attribute value is			# an integer from 0 and up, without an excessive amount of zeroes or			# whitespace (to avoid Buffer Overflows). It also checks that the attribute			# value is not greater than the given value.			# This check can be used to avoid Denial of Service attacks.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value > $checkvalue)				$ok = false;			break;		case 'minval' :			# The minval check checks that the attribute value is a positive integer,			# and that it is not smaller than the given value.			if (!preg_match('/^\s{0,6}[0-9]{1,6}\s{0,6}$/', $value))				$ok = false;			if ($value < $checkvalue)				$ok = false;			break;		case 'valueless' :			# The valueless check checks if the attribute has a value			# (like <a href="blah">) or not (<option selected>). If the given value			# is a "y" or a "Y", the attribute must not have a value.			# If the given value is an "n" or an "N", the attribute must have one.			if (strtolower($checkvalue) != $vless)				$ok = false;			break;	} # switch	return $ok;}/** * Sanitize string from bad protocols. * * This function removes all non-allowed protocols from the beginning of * $string. It ignores whitespace and the case of the letters, and it does * understand HTML entities. It does its work in a while loop, so it won't be * fooled by a string like "javascript:javascript:alert(57)". * * @since 1.0.0 * * @param string $string Content to filter bad protocols from * @param array $allowed_protocols Allowed protocols to keep * @return string Filtered content */function wp_kses_bad_protocol($string, $allowed_protocols) {	$string = wp_kses_no_null($string);	$string2 = $string.'a';	while ($string != $string2) {		$string2 = $string;		$string = wp_kses_bad_protocol_once($string, $allowed_protocols);	} # while	return $string;}/** * Removes any NULL characters in $string. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_no_null($string) {	$string = preg_replace('/\0+/', '', $string);	$string = preg_replace('/(\\\\0)+/', '', $string);	return $string;}/** * Strips slashes from in front of quotes. * * This function changes the character sequence  \"  to just  ". It leaves all * other slashes alone. It's really weird, but the quoting from * preg_replace(//e) seems to require this. * * @since 1.0.0 * * @param string $string String to strip slashes * @return string Fixed strings with quoted slashes */function wp_kses_stripslashes($string) {	return preg_replace('%\\\\"%', '"', $string);}/** * Goes through an array and changes the keys to all lower case. * * @since 1.0.0 * * @param array $inarray Unfiltered array * @return array Fixed array with all lowercase keys */function wp_kses_array_lc($inarray) {	$outarray = array ();	foreach ( (array) $inarray as $inkey => $inval) {		$outkey = strtolower($inkey);		$outarray[$outkey] = array ();		foreach ( (array) $inval as $inkey2 => $inval2) {			$outkey2 = strtolower($inkey2);			$outarray[$outkey][$outkey2] = $inval2;		} # foreach $inval	} # foreach $inarray	return $outarray;}/** * Removes the HTML JavaScript entities found in early versions of Netscape 4. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_js_entities($string) {	return preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);}/** * Handles parsing errors in wp_kses_hair(). * * The general plan is to remove everything to and including some whitespace, * but it deals with quotes and apostrophes as well. * * @since 1.0.0 * * @param string $string * @return string */function wp_kses_html_error($string) {	return preg_replace('/^("[^"]*("|$)|\'[^\']*(\'|$)|\S)*\s*/', '', $string);}/** * Sanitizes content from bad protocols and other characters. * * This function searches for URL protocols at the beginning of $string, while * handling whitespace and HTML entities. * * @since 1.0.0 * * @param string $string Content to check for bad protocols * @param string $allowed_protocols Allowed protocols * @return string Sanitized content */function wp_kses_bad_protocol_once($string, $allowed_protocols) {	global $_kses_allowed_protocols;	$_kses_allowed_protocols = $allowed_protocols;	$string2 = preg_split('/:|&#58;|&#x3a;/i', $string, 2);	if ( isset($string2[1]) && !preg_match('%/\?%', $string2[0]) )		$string = wp_kses_bad_protocol_once2($string2[0]) . trim($string2[1]);	else		$string = preg_replace_callback('/^((&[^;]*;|[\sA-Za-z0-9])*)'.'(:|&#58;|&#[Xx]3[Aa];)\s*/', 'wp_kses_bad_protocol_once2', $string);	return $string;}/** * Callback for wp_kses_bad_protocol_once() regular expression. * * This function processes URL protocols, checks to see if they're in the * white-list or not, and returns different data depending on the answer. * * @access private * @since 1.0.0 * * @param mixed $matches string or preg_replace_callback() matches array to check for bad protocols * @return string Sanitized content */function wp_kses_bad_protocol_once2($matches) {	global $_kses_allowed_protocols;	if ( is_array($matches) ) {		if ( empty($matches[1]) )			return '';		$string = $matches[1];	} else {		$string = $matches;	}	$string2 = wp_kses_decode_entities($string);	$string2 = preg_replace('/\s/', '', $string2);	$string2 = wp_kses_no_null($string2);	$string2 = strtolower($string2);	$allowed = false;	foreach ( (array) $_kses_allowed_protocols as $one_protocol)		if (strtolower($one_protocol) == $string2) {			$allowed = true;			break;		}	if ($allowed)		return "$string2:";	else		return '';}/** * Converts and fixes HTML entities. * * This function normalizes HTML entities. It will convert "AT&T" to the correct * "AT&amp;T", "&#00058;" to "&#58;", "&#XYZZY;" to "&amp;#XYZZY;" and so on. * * @since 1.0.0 * * @param string $string Content to normalize entities * @return string Content with normalized entities */function wp_kses_normalize_entities($string) {	# Disarm all entities by converting & to &amp;	$string = str_replace('&', '&amp;', $string);	# Change back the allowed entities in our entity whitelist	$string = preg_replace_callback('/&amp;([A-Za-z]{2,8});/', 'wp_kses_named_entities', $string);	$string = preg_replace_callback('/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string);	$string = preg_replace_callback('/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string);	return $string;}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function only accepts valid named entity references, which are finite, * case-sensitive, and highly scrutinized by HTML and XML validators. * * @since 3.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_named_entities($matches) {	global $allowedentitynames;	if ( empty($matches[1]) )		return '';	$i = $matches[1];	return ( ( ! in_array($i, $allowedentitynames) ) ? "&amp;$i;" : "&$i;" );}/** * Callback for wp_kses_normalize_entities() regular expression. * * This function helps wp_kses_normalize_entities() to only accept 16 bit values * and nothing more for &#number; entities. * * @access private * @since 1.0.0 * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities2($matches) {	if ( empty($matches[1]) )		return '';	$i = $matches[1];	if (valid_unicode($i)) {		$i = str_pad(ltrim($i,'0'), 3, '0', STR_PAD_LEFT);		$i = "&#$i;";	} else {		$i = "&amp;#$i;";	}	return $i;}/** * Callback for wp_kses_normalize_entities() for regular expression. * * This function helps wp_kses_normalize_entities() to only accept valid Unicode * numeric entities in hex form. * * @access private * * @param array $matches preg_replace_callback() matches array * @return string Correctly encoded entity */function wp_kses_normalize_entities3($matches) {	if ( empty($matches[1]) )		return '';	$hexchars = $matches[1];	return ( ( ! valid_unicode(hexdec($hexchars)) ) ? "&amp;#x$hexchars;" : '&#x'.ltrim($hexchars,'0').';' );}/** * Helper function to determine if a Unicode value is valid. * * @param int $i Unicode value * @return bool true if the value was a valid Unicode number */function valid_unicode($i) {	return ( $i == 0x9 || $i == 0xa || $i == 0xd ||			($i >= 0x20 && $i <= 0xd7ff) ||			($i >= 0xe000 && $i <= 0xfffd) ||			($i >= 0x10000 && $i <= 0x10ffff) );}/** * Convert all entities to their character counterparts. * * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do * anything with other entities like &auml;, but we don't need them in the URL * protocol whitelisting system anyway. * * @since 1.0.0 * * @param string $string Content to change entities * @return string Content after decoded entities */function wp_kses_decode_entities($string) {	$string = preg_replace_callback('/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string);	$string = preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string);	return $string;}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr( $match ) {	return chr( $match[1] );}/** * Regex callback for wp_kses_decode_entities() * * @param array $match preg match * @return string */function _wp_kses_decode_entities_chr_hexdec( $match ) {	return chr( hexdec( $match[1] ) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 1.0.0 * @uses $allowedtags * * @param string $data Content to filter, expected to be escaped with slashes * @return string Filtered content */function wp_filter_kses($data) {	global $allowedtags;	return addslashes( wp_kses(stripslashes( $data ), $allowedtags) );}/** * Sanitize content with allowed HTML Kses rules. * * @since 2.9.0 * @uses $allowedtags * * @param string $data Content to filter, expected to not be escaped * @return string Filtered content */function wp_kses_data($data) {	global $allowedtags;	return wp_kses( $data , $allowedtags );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.0.0 * @uses $allowedposttags * * @param string $data Post content to filter, expected to be escaped with slashes * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_filter_post_kses($data) {	global $allowedposttags;	return addslashes ( wp_kses(stripslashes( $data ), $allowedposttags) );}/** * Sanitize content for allowed HTML tags for post content. * * Post content refers to the page contents of the 'post' type and not $_POST * data from forms. * * @since 2.9.0 * @uses $allowedposttags * * @param string $data Post content to filter * @return string Filtered post content with allowed HTML tags and attributes intact. */function wp_kses_post($data) {	global $allowedposttags;	return wp_kses( $data , $allowedposttags );}/** * Strips all of the HTML in the content. * * @since 2.1.0 * * @param string $data Content to strip all HTML from * @return string Filtered content without any HTML */function wp_filter_nohtml_kses($data) {	return addslashes ( wp_kses(stripslashes( $data ), array()) );}/** * Adds all Kses input form content filters. * * All hooks have default priority. The wp_filter_kses() function is added to * the 'pre_comment_content' and 'title_save_pre' hooks. * * The wp_filter_post_kses() function is added to the 'content_save_pre', * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks. * * @since 2.0.0 * @uses add_filter() See description for what functions are added to what hooks. */function kses_init_filters() {	// Normal filtering.	add_filter('pre_comment_content', 'wp_filter_kses');	add_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	add_filter('content_save_pre', 'wp_filter_post_kses');	add_filter('excerpt_save_pre', 'wp_filter_post_kses');	add_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Removes all Kses input form content filters. * * A quick procedural method to removing all of the filters that kses uses for * content in WordPress Loop. * * Does not remove the kses_init() function from 'init' hook (priority is * default). Also does not remove kses_init() function from 'set_current_user' * hook (priority is also default). * * @since 2.0.6 */function kses_remove_filters() {	// Normal filtering.	remove_filter('pre_comment_content', 'wp_filter_kses');	remove_filter('title_save_pre', 'wp_filter_kses');	// Post filtering	remove_filter('content_save_pre', 'wp_filter_post_kses');	remove_filter('excerpt_save_pre', 'wp_filter_post_kses');	remove_filter('content_filtered_save_pre', 'wp_filter_post_kses');}/** * Sets up most of the Kses filters for input form content. * * If you remove the kses_init() function from 'init' hook and * 'set_current_user' (priority is default), then none of the Kses filter hooks * will be added. * * First removes all of the Kses filters in case the current user does not need * to have Kses filter the content. If the user does not have unfiltered html * capability, then Kses filters are added. * * @uses kses_remove_filters() Removes the Kses filters * @uses kses_init_filters() Adds the Kses filters back if the user *		does not have unfiltered HTML capability. * @since 2.0.0 */function kses_init() {	kses_remove_filters();	if (current_user_can('unfiltered_html') == false)		kses_init_filters();}add_action('init', 'kses_init');add_action('set_current_user', 'kses_init');/** * Inline CSS filter * * @since 2.8.1 */function safecss_filter_attr( $css, $deprecated = '' ) {	if ( !empty( $deprecated ) )		_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented	$css = wp_kses_no_null($css);	$css = str_replace(array("\n","\r","\t"), '', $css);	if ( preg_match( '%[\\(&]|/\*%', $css ) ) // remove any inline css containing \ ( & or comments		return '';	$css_array = split( ';', trim( $css ) );	$allowed_attr = apply_filters( 'safe_style_css', array( 'text-align', 'margin', 'color', 'float',	'border', 'background', 'background-color', 'border-bottom', 'border-bottom-color',	'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-left',	'border-left-color', 'border-left-style', 'border-left-width', 'border-right', 'border-right-color',	'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top',	'border-top-color', 'border-top-style', 'border-top-width', 'border-width', 'caption-side',	'clear', 'cursor', 'direction', 'font', 'font-family', 'font-size', 'font-style',	'font-variant', 'font-weight', 'height', 'letter-spacing', 'line-height', 'margin-bottom',	'margin-left', 'margin-right', 'margin-top', 'overflow', 'padding', 'padding-bottom',	'padding-left', 'padding-right', 'padding-top', 'text-decoration', 'text-indent', 'vertical-align',	'width' ) );	if ( empty($allowed_attr) )		return $css;	$css = '';	foreach ( $css_array as $css_item ) {		if ( $css_item == '' )			continue;		$css_item = trim( $css_item );		$found = false;		if ( strpos( $css_item, ':' ) === false ) {			$found = true;		} else {			$parts = split( ':', $css_item );			if ( in_array( trim( $parts[0] ), $allowed_attr ) )				$found = true;		}		if ( $found ) {			if( $css != '' )				$css .= ';';			$css .= $css_item;		}	}	return $css;}
<?php/** * Deprecated pluggable functions from past WordPress versions. You shouldn't use these * functions and look for the alternatives instead. The functions will be removed in a * later version. * * Deprecated warnings are also thrown if one of these functions is being defined by a plugin. * * @package WordPress * @subpackage Deprecated * @see pluggable.php *//* * Deprecated functions come here to die. */if ( !function_exists('set_current_user') ) :/** * Changes the current user by ID or name. * * Set $id to null and specify a name if you do not know a user's ID. * * @since 2.0.1 * @see wp_set_current_user() An alias of wp_set_current_user() * @deprecated 3.0.0 * @deprecated Use wp_set_current_user() * * @param int|null $id User ID. * @param string $name Optional. The user's username * @return object returns wp_set_current_user() */function set_current_user($id, $name = '') {	_deprecated_function( __FUNCTION__, '3.0', 'wp_set_current_user()' );	return wp_set_current_user($id, $name);}endif;if ( !function_exists('wp_setcookie') ) :/** * Sets a cookie for a user who just logged in. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_set_auth_cookie() * @see wp_set_auth_cookie() * * @param string $username The user's username * @param string $password Optional. The user's password * @param bool $already_md5 Optional. Whether the password has already been through MD5 * @param string $home Optional. Will be used instead of COOKIEPATH if set * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set * @param bool $remember Optional. Remember that the user is logged in */function wp_setcookie($username, $password = '', $already_md5 = false, $home = '', $siteurl = '', $remember = false) {	_deprecated_function( __FUNCTION__, '2.5', 'wp_set_auth_cookie()' );	$user = get_userdatabylogin($username);	wp_set_auth_cookie($user->ID, $remember);}else :	_deprecated_function( 'wp_setcookie', '2.5', 'wp_set_auth_cookie()' );endif;if ( !function_exists('wp_clearcookie') ) :/** * Clears the authentication cookie, logging the user out. This function is deprecated. * * @since 1.5 * @deprecated 2.5 * @deprecated Use wp_clear_auth_cookie() * @see wp_clear_auth_cookie() */function wp_clearcookie() {	_deprecated_function( __FUNCTION__, '2.5', 'wp_clear_auth_cookie()' );	wp_clear_auth_cookie();}else :	_deprecated_function( 'wp_clearcookie', '2.5', 'wp_clear_auth_cookie()' );endif;if ( !function_exists('wp_get_cookie_login') ):/** * Gets the user cookie login. This function is deprecated. * * This function is deprecated and should no longer be extended as it won't be * used anywhere in WordPress. Also, plugins shouldn't use it either. * * @since 2.0.3 * @deprecated 2.5 * @deprecated No alternative * * @return bool Always returns false */function wp_get_cookie_login() {	_deprecated_function( __FUNCTION__, '2.5' );	return false;}else :	_deprecated_function( 'wp_get_cookie_login', '2.5' );endif;if ( !function_exists('wp_login') ) :/** * Checks a users login information and logs them in if it checks out. This function is deprecated. * * Use the global $error to get the reason why the login failed. If the username * is blank, no error will be set, so assume blank username on that case. * * Plugins extending this function should also provide the global $error and set * what the error is, so that those checking the global for why there was a * failure can utilize it later. * * @since 1.2.2 * @deprecated Use wp_signon() * @global string $error Error when false is returned * * @param string $username User's username * @param string $password User's password * @param bool $deprecated Not used * @return bool False on login failure, true on successful check */function wp_login($username, $password, $deprecated = '') {	_deprecated_function( __FUNCTION__, '2.5', 'wp_signon()' );	global $error;	$user = wp_authenticate($username, $password);	if ( ! is_wp_error($user) )		return true;	$error = $user->get_error_message();	return false;}else :	_deprecated_function( 'wp_login', '2.5', 'wp_signon()' );endif;
